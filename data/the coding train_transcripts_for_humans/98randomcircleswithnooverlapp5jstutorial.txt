With timestamps:

00:00 - hello in this video I'm going to look at
00:03 - a particular computer programming
00:04 - problem it's a computer graphics
00:06 - programming problem I'm going to look at
00:07 - it using p5.js and JavaScript but the
00:09 - ideas would translate into a lot of
00:11 - different environments and what is that
00:12 - problem so when they come over here to
00:15 - diagram it for you let's say you have a
00:18 - canvas that you're drawing in and your
00:21 - goal is you want to say I would like to
00:23 - fill this canvas with circles and I put
00:26 - the circles all randomly on the canvas
00:28 - so the goal is for the canvas to
00:30 - ultimately look something like this now
00:33 - notice the way that I drew this none of
00:35 - these circles are overlapping the truth
00:37 - of the matter is if you just try to draw
00:39 - hundred circles into the into a canvas
00:41 - into a window most likely through random
00:44 - probability and chance they're going to
00:46 - overlap so how do you guarantee that
00:49 - they don't overlap now there are
00:51 - probably a variety of solutions to this
00:53 - one of which they just thought of which
00:54 - i think would be great to demonstrate at
00:55 - some point would be to use some kind of
00:57 - like physics model so all these are kind
00:59 - of particles and they think they have a
01:02 - repulsion force so all these things move
01:04 - around and kind of self organize this
01:06 - nice spaced out pattern you might could
01:08 - even connect spring forces and that
01:09 - might be referred to as a force directed
01:12 - graph well and I just thought of an idea
01:15 - for another video topic that I'll do
01:16 - later but I'm going to do a simple
01:18 - solution I'm going to do a solution
01:19 - that's just about circles that don't
01:21 - move static having them appear without
01:23 - overlapping
01:24 - so let's first at least build the
01:26 - program that does this with the
01:28 - overlapping circles and I'm going to
01:31 - come over here and I have uh so first of
01:33 - all I think I should need to make the
01:34 - font a little bit bigger so first thing
01:38 - I have is I have a p5.js program here
01:41 - this is a JavaScript program it's got a
01:43 - setup function and a draw function the
01:45 - setup function is where I'm going to
01:47 - first create the canvas and I'm going to
01:50 - make a canvas that's 640 by 360 pixels
01:53 - wide and then I'm going to do something
01:56 - where I'm just going to say let's say
01:58 - how many circles should I do let's do 50
02:01 - to start and I'm going to pick a random
02:04 - X and I'm going to pick a random Y and
02:11 - notice here what I'm doing here that
02:13 - I am asking for a random x-file value
02:16 - that's between zero and the width and a
02:17 - random Y values between zero and height
02:19 - now why not let's just I'm going to use
02:23 - a variable called R to indicate the
02:26 - radius of the circle this is probably
02:29 - something you're familiar with but just
02:31 - in case if this is a circle and that's
02:34 - the center of the circle the distance
02:35 - between the center and the outer edge
02:36 - that's the radius that's going to be a
02:38 - very important piece of data during this
02:40 - problem so let's just use a fixed radius
02:42 - right now of 48 for example and then I'm
02:46 - going to draw a circle at X comma Y and
02:49 - I'm going to say R times 2 because in P
02:53 - 5gs or processing if you're using those
02:56 - environments the the argument that you
02:59 - give to the ellipse function is actually
03:00 - the diameter or the radius times 2 but
03:03 - we want to use the radius for math later
03:05 - so if I do this and we give them some
03:09 - nice color like fill some red and some
03:12 - blue and run this sketch you can see it
03:15 - let's give them also a little alpha and
03:17 - maybe say no stroke and you can see
03:20 - there's all of our circles and of course
03:22 - they're all overlapping as you would
03:24 - expect 50 circles or hey pickles why
03:26 - they're not going to be now let's try to
03:28 - actually be a little bit more reasonable
03:30 - about this let's make them a little bit
03:32 - smaller and let's only do 25 so so this
03:37 - looks like now it is mathematically
03:40 - possible to place all these circles
03:42 - randomly without having them overlap so
03:44 - now we need to adjust this program to do
03:47 - that how do we do that so I'm going back
03:51 - over here by the way I'm just practicing
03:52 - making a video though this is actually I
03:54 - think that you might be watching and
03:56 - this is a real topic or something you
03:57 - could actually do okay so let's think
03:59 - about this let's be the computer for a
04:01 - second oh my god please whiteboard don't
04:03 - fall over let's be the computer for a
04:06 - second so first I want the computer beep
04:10 - boop boop boop I'm going to pick a place
04:11 - to draw a circle randomly here now as
04:15 - the computer d bee boo boo boo I'm going
04:18 - to pick another place to draw a circle
04:20 - now you can see I got lucky they don't
04:22 - overlap so the first thing I might want
04:25 - to do is let's
04:27 - I am the computer and I'm about to draw
04:29 - a circle so I pick a spot to draw that
04:32 - circle I don't actually draw it yet I
04:35 - just pick that particular XY so the
04:41 - question that I want to answer is does
04:43 - this circle overlap with the previous
04:45 - circle that I drew if it does don't draw
04:48 - it there throw it away and pick another
04:50 - circle if it does not it's fine and I
04:53 - can actually draw the circle there so
04:56 - how do I know then if two circles are
04:58 - overlapping well the way that I could
05:01 - determine that let's look at two other
05:03 - circles that are overlapping is by
05:05 - looking at the distance between the
05:08 - circles here is our one here is our two
05:13 - so each one of these circles has a
05:15 - radius and then there's a distance
05:17 - between them notice this is our one up
05:20 - to here and this is our two up to here
05:23 - if the distance between the circles you
05:26 - can see it has this extra space is
05:27 - greater than adding those two radii
05:30 - together then they're not overlapping
05:32 - but in here you could see the radius
05:34 - goes all the way to here the radius goes
05:36 - all the way to here the distance here in
05:39 - this case the distance is less than r1
05:41 - plus r2 here the distance is greater
05:44 - than r1 and r2 so the relationship
05:47 - between the distance between the two
05:49 - circles and the two radii of the circles
05:51 - that is that is the all the information
05:55 - you need to determine if the circles are
05:56 - overlapping or not and p5.js has a
06:01 - function in it the distance function
06:04 - which allows which calculates that
06:07 - distance for you now it's not too hard
06:08 - to calculate it on your own it just
06:10 - involves the Pythagorean theorem link to
06:13 - some other place where that's described
06:15 - but for now I'm just in this particular
06:17 - video I'm just going to use the distance
06:19 - function okay so let's come back over
06:20 - here and let's look at this program now
06:23 - so here's the thing this is happening
06:28 - this bit of code this bit of code is
06:30 - happening 25 times so it happens once
06:33 - I've got an XY it draws a circle now it
06:35 - happens again I've got an XY how do I
06:37 - compare it to the previous XY I'm
06:41 - fortunately there doesn't seem to be a
06:43 - way that I can I need some mechanism by
06:47 - which I'm going to save all the existing
06:50 - locations of the circles in save them so
06:54 - I can check new circles against them and
06:56 - in that sense we need an array so what
06:59 - I'm going to do to this code is I'm
07:02 - going to add something I'm going to add
07:06 - at the top an empty array in JavaScript
07:08 - and empty array open bracket close
07:11 - bracket array being a list of things and
07:13 - I think a convenient thing that I could
07:15 - do is I could actually save this VAR
07:20 - circle equals and I could make a little
07:22 - object so instead of I'm sort of typing
07:26 - this out really quickly while I am NOT
07:30 - talking I am making an object now look
07:37 - at these two lines these two sections of
07:39 - code next to each other
07:40 - here are three we move this mouse here
07:42 - are three variables and X a Y in and are
07:45 - there are standalone variables we I
07:47 - might conceptually think of them as a
07:49 - circle an XOR but really they're just
07:52 - three separate variables now what I've
07:54 - done is made a JavaScript object called
07:56 - circle that has an X a Y and an R in it
07:58 - the reason why I've done that is because
08:01 - now I can say circles dot push circle
08:05 - now look at that I'm going to delete
08:07 - this zoom back out and look at this and
08:12 - I'm going to comment this out now if I
08:16 - run this program I don't see anything in
08:18 - the screen I don't see anything in the
08:19 - canvas but I did make all those circle
08:21 - objects and I put them in that array so
08:24 - now look what I could do now I can say
08:30 - another loop from I goes from 0 to the
08:33 - length and I'm going to put this code
08:35 - back and what am i doing here I'm
08:38 - actually saying draw this draw
08:41 - everything at from the array each
08:44 - element of the array circles index I
08:46 - draw the circle at circle index eyes X
08:48 - circle index eyes why and then circles
08:51 - is X I dot R times
08:53 - ooh and one more so this line of code
08:56 - got a little bit long but you can see
08:58 - and I think I'm going to move this over
08:59 - and stretch this out so and now I run
09:03 - this and you can see I have the same
09:04 - exact program I had before the
09:07 - difference is instead of simply drawing
09:10 - 25 random circles to the window I've now
09:13 - created 25 circle objects put them into
09:16 - an array and then drawn all 25 of those
09:18 - to the window
09:19 - the magic is here right here maybe I
09:23 - shouldn't add every single random circle
09:25 - that I make to that array maybe I should
09:27 - only add circles here that don't overlap
09:30 - with other existing circles right so
09:34 - okay so how do we do that well one thing
09:39 - I need to do is say right here I need
09:43 - another loop so look at this this right
09:52 - here this is my current circle does this
09:54 - this is my circle is this a valid circle
09:57 - or not here's my loop where I'm going to
10:00 - say bait I'm going to compare this
10:01 - circle to everything else that's in the
10:03 - array the first circle I pick there'll
10:05 - be nothing in the array so nothing will
10:07 - happen and that circle will get added to
10:09 - the array the second circle I pick it'll
10:11 - just check it against the first one if
10:12 - it's okay it'll get added to the array
10:14 - the third one I pick will get checked
10:18 - against the tip of Regas too and the
10:20 - fourth over the previous three etc etc
10:22 - okay so first thing I need to do is
10:24 - determine what is the distance between
10:26 - what that current circle and and I'm
10:33 - going to I'm just going to put in I'm
10:40 - going to put the circles index I into
10:42 - another variable so the other circle
10:45 - this is the current circle I want to
10:46 - check its distance against other circles
10:48 - and so I'm going to say other other X
10:53 - other dot Y if distance is less than
10:58 - Circle dot R plus other dot R then what
11:02 - they then they are overlapping and I'm
11:06 - caps because apparently screaming that
11:08 - so look this is exactly what we need to
11:10 - do we need to say for every circle check
11:14 - if check for the new circle check its
11:16 - distance against every other circle and
11:18 - check if it's overlapping or not if it's
11:20 - overlapping even one other circle I
11:23 - can't use it so how do we determine if
11:27 - I'm looking at all the circles if it's
11:28 - overlapping at least one well one way of
11:31 - doing that is to start with the
11:32 - assumption that it's not overlapping any
11:34 - of them so I can say okay overlapping
11:37 - equals false I'm going to start with the
11:40 - assumption that it is a valid circle
11:42 - it's not overlapping anything if it
11:45 - happens to be overlapping something I
11:47 - can set overlapping equal to true and I
11:50 - can actually just break out of the loop
11:51 - because as soon as it's overlapping one
11:53 - it's an invalid circle and now I can say
11:56 - as long as it's still not overlapping
11:59 - after we've checked all the previous one
12:01 - then put it into the array so look at
12:04 - this I'm going to zoom out here a little
12:05 - bit what's the algorithm here I'm going
12:08 - to do this sorry sorry I'm going to do
12:11 - this 25 times I'm going to pick a circle
12:15 - I'm going to assume it's not overlapping
12:17 - any other circles I'm going to check to
12:19 - see if it's overlapping any other circle
12:20 - and if it's overlapping one of those
12:22 - other circles I'm going to set that
12:23 - boolean variable to true I'm done and
12:25 - then you know if I did actually get
12:28 - through that entire loop and I still
12:31 - didn't find overlapping anything then I
12:33 - can put it into the array now there's a
12:34 - little bit of a problem here but this is
12:36 - pretty good
12:37 - so now I'm going to run this uh I can't
12:40 - read property ex of undefined
12:42 - so what did I miss back now and I
12:46 - restarted the p5.js editor and I also
12:49 - did notice the error here so let's look
12:51 - at this uncaught type error cannot read
12:55 - property ex of undefined so in align 19
12:59 - which is this particular line of code
13:00 - right here so why why is that err what
13:04 - is this error so one thing that I did
13:07 - here you might notice is I have a loop I
13:10 - that is going 25 times for every new
13:14 - circle that I'm going to make 25 times I
13:16 - need to check every other circle J so
13:19 - what's the other
13:20 - circle not index I but J so what this
13:24 - needs to be here this was just a mistake
13:26 - this needs to be circles index J because
13:29 - this is the part where I'm checking the
13:30 - new circle proposal I have a circle
13:33 - proposal and I want to check that circle
13:36 - proposal against every other circle
13:38 - against every other circle J okay so now
13:43 - we should be able to run this and we
13:45 - should see look at that there are 25
13:46 - circles all not overlapping because it
13:49 - can't add a circle if it overlaps one or
13:51 - another let's make sure that's true one
13:53 - two three four five let me move this
13:55 - over here this is going to be counting
13:57 - with me the live do this one two three
14:05 - four five six seven eight nine ten
14:10 - eleven twelve thirteen fourteen fifteen
14:15 - fifteen why are there only fifteen
14:17 - circles I did ask to do 25 and I have to
14:21 - scroll up to see that right I asked to
14:23 - do 25 but there's only fifteen the
14:26 - reason why they're only 15 is because
14:28 - some of the circles it picks overlap
14:30 - another one and they don't get added so
14:32 - this is not actually a loop that I want
14:35 - to do 25 times I want to execute this
14:38 - loop until until I have reached 25
14:45 - circles in the array so this loop can
14:48 - change while circles dot length is less
14:56 - than 25 I need to keep trying to pick a
14:59 - circle so this is just going to keep
15:00 - going pick a circle it overlaps at
15:02 - because they're little overlaps ah pick
15:03 - a circle it overlaps up because it
15:05 - doesn't overlap great so now this is a
15:06 - little bit dangerous but it's safe it's
15:10 - little dangerous because if I ever say Y
15:11 - circles that length is less than 25 you
15:14 - know it could be that it's just
15:15 - impossible for it to find a place where
15:17 - it could add a circle but I think right
15:20 - now we can reasonably say it's going to
15:21 - be able to find 25 places on the screen
15:23 - but let's just start with 15 and you can
15:26 - see you know each time I run this we're
15:28 - probably reliably going to have 15
15:30 - circles and I'm going to make it 25 now
15:32 - we can see that each time I run
15:33 - you can see reliably I'm getting 25
15:37 - circles and I would go through and count
15:38 - them I'm just going to have to assume
15:40 - that this is working now however if I
15:44 - were to change this to 300 I can almost
15:47 - for sure tell you this is going to crash
15:48 - let's just see what happens why not
15:50 - right nobody if you're like who's
15:53 - watching this video so I don't I don't
15:57 - run it you can see I did that's
15:58 - interesting that it there's a bunch
16:00 - there but you could see like I can't
16:01 - seem to can't seem to stop it I'm
16:04 - surprised that it even drew anything at
16:06 - all because it should just sort of be
16:08 - stuck in this loop maybe that's like the
16:09 - previous one but you can see that it's
16:10 - like completely stuck and I can't close
16:13 - it because I got an infinite loop so the
16:15 - only thing I can do right now is force
16:17 - quit the p5 editor and relaunch it and
16:21 - open up my sketch again called circles
16:26 - and set this number back to 25 but let's
16:33 - say we wanted to really push it in the
16:35 - great words of code anti code on Twitter
16:39 - let's push it a little bit what if I
16:43 - wanted to push it and try to get as many
16:45 - circles as I could fit well there's a
16:47 - variety of ways we could sort of think
16:49 - about doing this but one thing I could
16:50 - do and I'm going to make up a variable
16:52 - called my protection let me call it
16:55 - protection equals equals zero and
17:05 - actually what um you know I was going to
17:08 - say there's so many different like a
17:11 - whole bunch of different ways to do it
17:12 - but you want to do this the simplest way
17:14 - possible let's just say I have a counter
17:19 - that goes up every time and what I'm
17:22 - going to say is if protection is greater
17:25 - than 10,000 then I'm going to just break
17:29 - out of this loop so what I'm essentially
17:31 - doing is saying that you know I'm going
17:34 - to try to put 25 circles on the screen
17:36 - but if I've tried like 10,000 times it's
17:40 - probably not that the 10,001 time is
17:43 - going to get me those 25 circles so I
17:45 - should be able to now run this
17:47 - and you should see now if I were to make
17:48 - this now 300 I'm save it again in case I
17:51 - screw that up you can see a you can see
17:55 - that it's kind of getting to the maximum
17:57 - in 10,000 is kind of a big big number
18:00 - but you can see so that's kind of a
18:01 - quick and dirty solution at least and
18:03 - now that one thing we could do that's
18:05 - kind of nice here is maybe I could also
18:07 - think about giving these random sizes
18:10 - like between 12 and 36 and whoops and
18:15 - you can see here we have a kind of nice
18:17 - nice algorithm that fills our screen
18:20 - with circles of random sizes and I'm
18:23 - sure you know I want you know we could
18:29 - try to do something here and I could
18:30 - make this 50,000 and I could see like
18:33 - it's going to take a while it's running
18:34 - it's got to like try this like 50,000
18:36 - times you can see like it took a little
18:38 - while but it gave us a nice no way
18:40 - circle packing algorithm just sort of a
18:42 - brute force this is not an efficient way
18:44 - of doing this don't get me wrong but
18:46 - it's sort of brute force algorithms of
18:48 - fill our screen with circles none of
18:50 - them overlapping so I will post this
18:53 - code in a link below with this video
18:55 - kind of run through a few of the
18:57 - questions and issues around an algorithm
18:58 - like this I'm sure there are lots of
19:00 - improvements that could be made to this
19:01 - and other questions that will arise and
19:03 - this was a bit of a this was not my
19:06 -  estudios but it it does have a
19:10 - result where you can see the circles and
19:11 - so I will consider maybe doing a
19:13 - follow-up on this or something if there
19:15 - are some questions that you have the
19:16 - comments you want to ask and make some
19:18 - improvements to this particular example
19:19 - okay thanks for watching and see you
19:22 - soon

Cleaned transcript:

hello in this video I'm going to look at a particular computer programming problem it's a computer graphics programming problem I'm going to look at it using p5.js and JavaScript but the ideas would translate into a lot of different environments and what is that problem so when they come over here to diagram it for you let's say you have a canvas that you're drawing in and your goal is you want to say I would like to fill this canvas with circles and I put the circles all randomly on the canvas so the goal is for the canvas to ultimately look something like this now notice the way that I drew this none of these circles are overlapping the truth of the matter is if you just try to draw hundred circles into the into a canvas into a window most likely through random probability and chance they're going to overlap so how do you guarantee that they don't overlap now there are probably a variety of solutions to this one of which they just thought of which i think would be great to demonstrate at some point would be to use some kind of like physics model so all these are kind of particles and they think they have a repulsion force so all these things move around and kind of self organize this nice spaced out pattern you might could even connect spring forces and that might be referred to as a force directed graph well and I just thought of an idea for another video topic that I'll do later but I'm going to do a simple solution I'm going to do a solution that's just about circles that don't move static having them appear without overlapping so let's first at least build the program that does this with the overlapping circles and I'm going to come over here and I have uh so first of all I think I should need to make the font a little bit bigger so first thing I have is I have a p5.js program here this is a JavaScript program it's got a setup function and a draw function the setup function is where I'm going to first create the canvas and I'm going to make a canvas that's 640 by 360 pixels wide and then I'm going to do something where I'm just going to say let's say how many circles should I do let's do 50 to start and I'm going to pick a random X and I'm going to pick a random Y and notice here what I'm doing here that I am asking for a random xfile value that's between zero and the width and a random Y values between zero and height now why not let's just I'm going to use a variable called R to indicate the radius of the circle this is probably something you're familiar with but just in case if this is a circle and that's the center of the circle the distance between the center and the outer edge that's the radius that's going to be a very important piece of data during this problem so let's just use a fixed radius right now of 48 for example and then I'm going to draw a circle at X comma Y and I'm going to say R times 2 because in P 5gs or processing if you're using those environments the the argument that you give to the ellipse function is actually the diameter or the radius times 2 but we want to use the radius for math later so if I do this and we give them some nice color like fill some red and some blue and run this sketch you can see it let's give them also a little alpha and maybe say no stroke and you can see there's all of our circles and of course they're all overlapping as you would expect 50 circles or hey pickles why they're not going to be now let's try to actually be a little bit more reasonable about this let's make them a little bit smaller and let's only do 25 so so this looks like now it is mathematically possible to place all these circles randomly without having them overlap so now we need to adjust this program to do that how do we do that so I'm going back over here by the way I'm just practicing making a video though this is actually I think that you might be watching and this is a real topic or something you could actually do okay so let's think about this let's be the computer for a second oh my god please whiteboard don't fall over let's be the computer for a second so first I want the computer beep boop boop boop I'm going to pick a place to draw a circle randomly here now as the computer d bee boo boo boo I'm going to pick another place to draw a circle now you can see I got lucky they don't overlap so the first thing I might want to do is let's I am the computer and I'm about to draw a circle so I pick a spot to draw that circle I don't actually draw it yet I just pick that particular XY so the question that I want to answer is does this circle overlap with the previous circle that I drew if it does don't draw it there throw it away and pick another circle if it does not it's fine and I can actually draw the circle there so how do I know then if two circles are overlapping well the way that I could determine that let's look at two other circles that are overlapping is by looking at the distance between the circles here is our one here is our two so each one of these circles has a radius and then there's a distance between them notice this is our one up to here and this is our two up to here if the distance between the circles you can see it has this extra space is greater than adding those two radii together then they're not overlapping but in here you could see the radius goes all the way to here the radius goes all the way to here the distance here in this case the distance is less than r1 plus r2 here the distance is greater than r1 and r2 so the relationship between the distance between the two circles and the two radii of the circles that is that is the all the information you need to determine if the circles are overlapping or not and p5.js has a function in it the distance function which allows which calculates that distance for you now it's not too hard to calculate it on your own it just involves the Pythagorean theorem link to some other place where that's described but for now I'm just in this particular video I'm just going to use the distance function okay so let's come back over here and let's look at this program now so here's the thing this is happening this bit of code this bit of code is happening 25 times so it happens once I've got an XY it draws a circle now it happens again I've got an XY how do I compare it to the previous XY I'm fortunately there doesn't seem to be a way that I can I need some mechanism by which I'm going to save all the existing locations of the circles in save them so I can check new circles against them and in that sense we need an array so what I'm going to do to this code is I'm going to add something I'm going to add at the top an empty array in JavaScript and empty array open bracket close bracket array being a list of things and I think a convenient thing that I could do is I could actually save this VAR circle equals and I could make a little object so instead of I'm sort of typing this out really quickly while I am NOT talking I am making an object now look at these two lines these two sections of code next to each other here are three we move this mouse here are three variables and X a Y in and are there are standalone variables we I might conceptually think of them as a circle an XOR but really they're just three separate variables now what I've done is made a JavaScript object called circle that has an X a Y and an R in it the reason why I've done that is because now I can say circles dot push circle now look at that I'm going to delete this zoom back out and look at this and I'm going to comment this out now if I run this program I don't see anything in the screen I don't see anything in the canvas but I did make all those circle objects and I put them in that array so now look what I could do now I can say another loop from I goes from 0 to the length and I'm going to put this code back and what am i doing here I'm actually saying draw this draw everything at from the array each element of the array circles index I draw the circle at circle index eyes X circle index eyes why and then circles is X I dot R times ooh and one more so this line of code got a little bit long but you can see and I think I'm going to move this over and stretch this out so and now I run this and you can see I have the same exact program I had before the difference is instead of simply drawing 25 random circles to the window I've now created 25 circle objects put them into an array and then drawn all 25 of those to the window the magic is here right here maybe I shouldn't add every single random circle that I make to that array maybe I should only add circles here that don't overlap with other existing circles right so okay so how do we do that well one thing I need to do is say right here I need another loop so look at this this right here this is my current circle does this this is my circle is this a valid circle or not here's my loop where I'm going to say bait I'm going to compare this circle to everything else that's in the array the first circle I pick there'll be nothing in the array so nothing will happen and that circle will get added to the array the second circle I pick it'll just check it against the first one if it's okay it'll get added to the array the third one I pick will get checked against the tip of Regas too and the fourth over the previous three etc etc okay so first thing I need to do is determine what is the distance between what that current circle and and I'm going to I'm just going to put in I'm going to put the circles index I into another variable so the other circle this is the current circle I want to check its distance against other circles and so I'm going to say other other X other dot Y if distance is less than Circle dot R plus other dot R then what they then they are overlapping and I'm caps because apparently screaming that so look this is exactly what we need to do we need to say for every circle check if check for the new circle check its distance against every other circle and check if it's overlapping or not if it's overlapping even one other circle I can't use it so how do we determine if I'm looking at all the circles if it's overlapping at least one well one way of doing that is to start with the assumption that it's not overlapping any of them so I can say okay overlapping equals false I'm going to start with the assumption that it is a valid circle it's not overlapping anything if it happens to be overlapping something I can set overlapping equal to true and I can actually just break out of the loop because as soon as it's overlapping one it's an invalid circle and now I can say as long as it's still not overlapping after we've checked all the previous one then put it into the array so look at this I'm going to zoom out here a little bit what's the algorithm here I'm going to do this sorry sorry I'm going to do this 25 times I'm going to pick a circle I'm going to assume it's not overlapping any other circles I'm going to check to see if it's overlapping any other circle and if it's overlapping one of those other circles I'm going to set that boolean variable to true I'm done and then you know if I did actually get through that entire loop and I still didn't find overlapping anything then I can put it into the array now there's a little bit of a problem here but this is pretty good so now I'm going to run this uh I can't read property ex of undefined so what did I miss back now and I restarted the p5.js editor and I also did notice the error here so let's look at this uncaught type error cannot read property ex of undefined so in align 19 which is this particular line of code right here so why why is that err what is this error so one thing that I did here you might notice is I have a loop I that is going 25 times for every new circle that I'm going to make 25 times I need to check every other circle J so what's the other circle not index I but J so what this needs to be here this was just a mistake this needs to be circles index J because this is the part where I'm checking the new circle proposal I have a circle proposal and I want to check that circle proposal against every other circle against every other circle J okay so now we should be able to run this and we should see look at that there are 25 circles all not overlapping because it can't add a circle if it overlaps one or another let's make sure that's true one two three four five let me move this over here this is going to be counting with me the live do this one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen fifteen why are there only fifteen circles I did ask to do 25 and I have to scroll up to see that right I asked to do 25 but there's only fifteen the reason why they're only 15 is because some of the circles it picks overlap another one and they don't get added so this is not actually a loop that I want to do 25 times I want to execute this loop until until I have reached 25 circles in the array so this loop can change while circles dot length is less than 25 I need to keep trying to pick a circle so this is just going to keep going pick a circle it overlaps at because they're little overlaps ah pick a circle it overlaps up because it doesn't overlap great so now this is a little bit dangerous but it's safe it's little dangerous because if I ever say Y circles that length is less than 25 you know it could be that it's just impossible for it to find a place where it could add a circle but I think right now we can reasonably say it's going to be able to find 25 places on the screen but let's just start with 15 and you can see you know each time I run this we're probably reliably going to have 15 circles and I'm going to make it 25 now we can see that each time I run you can see reliably I'm getting 25 circles and I would go through and count them I'm just going to have to assume that this is working now however if I were to change this to 300 I can almost for sure tell you this is going to crash let's just see what happens why not right nobody if you're like who's watching this video so I don't I don't run it you can see I did that's interesting that it there's a bunch there but you could see like I can't seem to can't seem to stop it I'm surprised that it even drew anything at all because it should just sort of be stuck in this loop maybe that's like the previous one but you can see that it's like completely stuck and I can't close it because I got an infinite loop so the only thing I can do right now is force quit the p5 editor and relaunch it and open up my sketch again called circles and set this number back to 25 but let's say we wanted to really push it in the great words of code anti code on Twitter let's push it a little bit what if I wanted to push it and try to get as many circles as I could fit well there's a variety of ways we could sort of think about doing this but one thing I could do and I'm going to make up a variable called my protection let me call it protection equals equals zero and actually what um you know I was going to say there's so many different like a whole bunch of different ways to do it but you want to do this the simplest way possible let's just say I have a counter that goes up every time and what I'm going to say is if protection is greater than 10,000 then I'm going to just break out of this loop so what I'm essentially doing is saying that you know I'm going to try to put 25 circles on the screen but if I've tried like 10,000 times it's probably not that the 10,001 time is going to get me those 25 circles so I should be able to now run this and you should see now if I were to make this now 300 I'm save it again in case I screw that up you can see a you can see that it's kind of getting to the maximum in 10,000 is kind of a big big number but you can see so that's kind of a quick and dirty solution at least and now that one thing we could do that's kind of nice here is maybe I could also think about giving these random sizes like between 12 and 36 and whoops and you can see here we have a kind of nice nice algorithm that fills our screen with circles of random sizes and I'm sure you know I want you know we could try to do something here and I could make this 50,000 and I could see like it's going to take a while it's running it's got to like try this like 50,000 times you can see like it took a little while but it gave us a nice no way circle packing algorithm just sort of a brute force this is not an efficient way of doing this don't get me wrong but it's sort of brute force algorithms of fill our screen with circles none of them overlapping so I will post this code in a link below with this video kind of run through a few of the questions and issues around an algorithm like this I'm sure there are lots of improvements that could be made to this and other questions that will arise and this was a bit of a this was not my estudios but it it does have a result where you can see the circles and so I will consider maybe doing a followup on this or something if there are some questions that you have the comments you want to ask and make some improvements to this particular example okay thanks for watching and see you soon
