With timestamps:

00:00 - i am back to continue my quest to
00:01 - complete all of the craig reynolds
00:03 - steering behaviors and today in this
00:04 - video i am going to do
00:06 - wander wander happens to be one of my
00:08 - favorites not necessarily because of the
00:10 - motion it produces but because it
00:13 - emphasizes the inherent creative
00:15 - thinking involved in designing steering
00:17 - behaviors and i hope will lead you to
00:20 - realizing that you can really invent
00:22 - your own what does it mean to wander
00:24 - reynolds uses the term wander to
00:26 - describe a random steering so he writes
00:29 - one easy implementation would be to
00:31 - generate a random steering force each
00:33 - frame okay let's try that let's begin
00:35 - with the base steering vehicle code from
00:38 - the previous videos i'll call a new
00:39 - function called wander
00:42 - then i need to implement that function
00:43 - in the vehicle class itself
00:46 - and let's try just a random vector
00:49 - applied as a steering force each frame
00:54 - and there we have it wonder record for
00:56 - the shortest coding train video ever
00:59 - [Applause]
01:00 - obviously i'm not done
01:02 - looking back at reynolds paper he writes
01:05 - this produces rather uninteresting
01:07 - motion it is twitchy
01:10 - yeah that's pretty twitchy if you think
01:12 - about it what does it mean to wander now
01:15 - of course the idea of what i'm trying to
01:17 - emphasize is that it's up to you the
01:19 - designer and coder of the simulation
01:22 - itself but following along reynold's
01:24 - system he proposes that wandering isn't
01:26 - about making lots of decisions every
01:28 - frame to go in a random direction but
01:30 - picking a way to go for a while and then
01:31 - maybe changing and then changing again
01:33 - so the approach proposed is to retain a
01:37 - steering direction and make small random
01:39 - displacements to it each frame this is
01:42 - reynolds original implementation in a
01:44 - java applet of wander itself and you can
01:46 - see that the steering force is
01:48 - constrained uh to this dot that's kind
01:51 - of randomly moving around the perimeter
01:53 - of a circle
01:54 - let's draw all the components of the
01:57 - behavior wonder start with the vehicle
02:00 - traveling at some velocity project a
02:03 - point some fixed distance ahead of the
02:05 - vehicle according to the direction of
02:07 - the velocity
02:10 - place a circle at that point of some
02:13 - radius r
02:15 - now pick any random point somewhere
02:17 - along the perimeter of this circle i'm
02:19 - just going to pick this point where i
02:20 - drew the radius
02:22 - then the steering force is equal to a
02:25 - vector that points from the vehicle to
02:28 - that point along the circle i'll draw a
02:31 - line like this to represent that now the
02:33 - magnitude of the steering force we'll
02:35 - get to but
02:36 - you'll see how the steering force here
02:38 - is slightly clockwiser to the right of
02:41 - the velocity vector if i didn't do
02:44 - anything else this would result in this
02:47 - vehicle turning slightly to the right
02:49 - and just forever and ever and ever and
02:50 - ever doing that now i should note this
02:52 - is kind of an exception to what i might
02:54 - have said in a previous video where
02:56 - everything boils down to a desired
02:58 - velocity we could do this a slightly
03:00 - different way which is to say that this
03:02 - could be a target and this is the
03:04 - desired velocity and then do steering as
03:07 - desired velocity minus velocity and i
03:09 - think actually that's probably the way
03:10 - that i've done this in the past but
03:12 - reading reynolds paper precisely this is
03:15 - the actual steering force itself so what
03:18 - makes it wander well let's sprinkle in a
03:21 - little bit of randomness what if every
03:23 - frame i move this dot that is
03:25 - controlling the steering force a little
03:27 - bit this way or a little bit this way
03:29 - randomly if the displacement is small
03:31 - we're not going to see a lot of
03:32 - twitchiness because it's generally going
03:34 - to be moving in the same direction but
03:35 - over time that randomness this circle
03:38 - might wander over to here and then
03:41 - the vehicle itself will start to wander
03:43 - in the other direction and back and
03:44 - maybe further and this kind of thing so
03:46 - we're going to get this continuous
03:49 - motion wandering about a space
03:52 - so this is a definition of wander that
03:55 - reynolds proposes we can see all those
03:58 - same components in the diagram in the
04:00 - paper itself i did miss one additional
04:02 - element which is to draw a circle here
04:06 - emphasizing the maximum displacement
04:08 - that this dot can move any given frame
04:11 - if it's going to move big steps will get
04:13 - more random motion if it's moving only
04:15 - small steps the direction won't change
04:17 - randomly as often let's implement the
04:19 - code i'm going to comment out the
04:21 - previous just random force let me give
04:24 - it a starting velocity just so it's
04:25 - moving in some direction and step one is
04:29 - project that point that some fixed
04:31 - distance ahead of the vehicle according
04:32 - to the velocities direction
04:36 - i'm going to set that point 100 pixels
04:38 - ahead by making a copy of the vehicle's
04:40 - velocity and setting its magnitude to
04:42 - 100 and then adding the position
04:48 - there we go maybe i'll call that the
04:50 - wander point
04:54 - now i need a wander radius
05:00 - so we have the point projected out and a
05:03 - circle of radius 50 around that point
05:05 - now how do i want to keep track of this
05:08 - point here well i think i would like to
05:10 - keep track of it as an angle
05:13 - relative to the horizontal axis we could
05:16 - call that theta
05:19 - then thinking back to my video on polar
05:21 - and cartesian coordinates i can find the
05:24 - point on that circle by taking the
05:27 - radius and the angle and converting it
05:28 - to an x and y offset
05:39 - now i have that green dot on the
05:41 - perimeter of the circle let me change
05:43 - the angle to 90 degrees or pi over 2
05:45 - radians just to make sure this is really
05:47 - working the way i think it should
05:49 - there that point is now 90 degrees
05:51 - relative to the velocity of the vehicle
05:54 - now i want to use that point as part of
05:56 - the steering calculation so i think i'll
05:58 - actually add
06:00 - to the wander point vector itself
06:04 - then the steering force is just that
06:06 - wander point now minus the vehicle's
06:09 - position
06:13 - now look at that
06:15 - i'm going to run that again for you
06:17 - it steered really really fast and is now
06:20 - going straight down hmm
06:22 - i should note here that this angle that
06:25 - i'm talking about theta is actually not
06:27 - the raw angle relative to the horizontal
06:30 - axis of the world but it really it
06:32 - really should be the angle relative to
06:35 - the velocity vector itself so as the
06:38 - vehicle starts to turn
06:40 - this
06:41 - steering point stays on the same
06:43 - position of the circle relative to the
06:45 - vehicle's direction
06:49 - now i've done that now
06:51 - as you can see that the vehicle is just
06:53 - making really really fast loopy loopty
06:55 - loops turning to the right 90 degrees
06:58 - continuously the main reason for this is
07:00 - that i've allowed that steering force's
07:02 - magnitude to be of of the of the length
07:05 - between the vehicle's position and that
07:07 - point itself so i should be reducing
07:10 - that magnitude or limiting it to the
07:13 - maximum
07:14 - force variable
07:17 - let's annotate this a little bit more
07:19 - with two lines
07:27 - now i have almost all of the elements
07:30 - from reynold's original implementation
07:32 - in my version there the critical sort of
07:35 - crucial piece i'm missing of course is
07:37 - moving this wander point as i'm calling
07:40 - it randomly clockwise or
07:42 - counterclockwise or clockwise but i
07:44 - think i've actually made a mistake here
07:47 - i described this all as an angle and
07:50 - then randomly offsetting the angle but
07:53 - reynolds if we go back and look very
07:55 - closely there we see that extra circle
07:58 - that is surrounding that point that's
08:00 - moving to complete the wander behavior
08:03 - reynolds actually displaces this point
08:06 - randomly anywhere
08:08 - along the path of this circle so it
08:10 - could end up here and then constrains it
08:12 - back to this circle this has the result
08:16 - of making it more likely to have a
08:18 - smaller displacement than a larger
08:20 - displacement since what i want to
08:23 - emphasize is the creativity involved in
08:25 - exploring these steering behaviors i'm
08:28 - gonna go with the way that i started
08:30 - basing everything off of this idea of an
08:32 - angle relative to the velocity after i
08:35 - do that i'll return to reynold's more
08:37 - formal vector displacement and see if if
08:39 - that improves anything so the first
08:41 - thing that i need to do is this pi
08:43 - divided by 2 starting angle needs to be
08:46 - a variable
08:48 - it needs to be an angle that i can keep
08:49 - track over time and manipulate it so i'm
08:52 - going to add it as a property to the
08:53 - object and call it wander theta and
08:55 - let's start it at pi divided by 2
08:58 - replace it here
09:00 - still the same
09:02 - looking at this i think it would be
09:03 - easier to follow what's going on if i
09:05 - reduce the maximum speed down to two and
09:08 - as well as the maximum force down to 0.1
09:11 - so we've got something moving a bit
09:13 - slower now that i can view and finally i
09:16 - just need to change that angle by a
09:18 - random displacement every frame
09:23 - now you can see with that very small
09:25 - displacement it hasn't really moved from
09:28 - where it started and so the vehicle is
09:30 - still kind of
09:31 - going in this loop-de-loop i'll make a
09:33 - variable to keep track of the range of
09:34 - displacement
09:38 - and now i have something that looks much
09:40 - more like craig reynolds original
09:42 - implementation let's take a look and
09:43 - compare looks pretty good it's not 100
09:46 - identical using different values for the
09:48 - different radii and properties of the
09:49 - system but i feel like i'm getting a
09:51 - similar kind of wandering motion while
09:54 - figuring this out it's super helpful to
09:55 - draw all the lines and circles and
09:57 - various properties of the system but
09:59 - let's look at what the wander behavior
10:01 - looks like without drawing all that
10:02 - extra debug stuff
10:09 - and there's my wandering vehicle
10:11 - looking at the diagram in the original
10:13 - paper i'd like to trace the path and see
10:15 - what it looks like now add a property to
10:17 - the object called path
10:20 - which is an array then every time in
10:22 - update i'm going to add a copy of the
10:25 - current position
10:27 - finally in show i'll draw all those
10:29 - positions as a series of vertices
10:33 - of course i forgot that this dot
10:39 - i just realized it would have a big
10:40 - problem here as soon as it crosses over
10:43 - how do i deal with this problem what if
10:46 - i think about it as a series of paths
10:48 - and every time i reach the edge i end a
10:50 - path and start a new one
10:53 - so i have all the paths and the current
10:56 - path now this is a loop for just one
10:58 - path and that could be inside of a loop
11:00 - of all the paths
11:06 - paths should actually start with the
11:07 - current path in it
11:11 - and the position gets added to the
11:12 - current path
11:14 - we're getting for this dot again
11:18 - all right this should be exactly what i
11:20 - had before
11:22 - however
11:23 - what i can do now is any time i hit one
11:26 - of these edges
11:28 - i'll make a boolean variable called hit
11:30 - edge which is false
11:32 - and then
11:33 - it'll just get set true in any of these
11:38 - so any edge
11:41 - and then at the end
11:43 - if i hit the edge
11:45 - then we need a new current path
11:47 - and add that current path
11:51 - to the paths oh boy did i make this
11:53 - complicated or what let's see if it
11:55 - works
11:57 - where'd it go
11:58 - oh it's push it's push
12:01 - still stuck in java arraylist land
12:06 - this looks like some pretty nice
12:07 - wandering to me
12:09 - let me give it a much bigger canvas
12:11 - space to work with and speed up the
12:12 - vehicle
12:18 - this is obviously going to slow down
12:20 - quite a bit eventually because i'm not
12:22 - removing anything from the history of
12:24 - this vehicle's path so deleting
12:26 - positions eventually would be one thing
12:28 - to add as well as possibly saving every
12:31 - third position or fifth position i don't
12:33 - necessarily need every single frame to
12:35 - create a nice connected set of line
12:38 - segments let's take a closer look though
12:40 - to produce the steering force for the
12:42 - next frame a random displacement is
12:45 - added to the previous value and the sum
12:48 - is constrained again to the sphere
12:50 - surface so first of all hello
12:53 - this would be great to try in 3d right
12:56 - what if what you are
12:58 - steering towards projected out ahead of
13:00 - you is not a circle in a two-dimensional
13:03 - plane but a sphere in 3d that would be
13:06 - great to try i'm going to try to do that
13:08 - later and show you a version of it here
13:09 - next to me looking back at my
13:11 - implementation i have to start over to
13:13 - some extent because i've based
13:14 - everything around the idea of keeping
13:16 - track of an angle over time
13:24 - for the displacement implementation i
13:26 - wouldn't be keeping track of an angle
13:28 - i'd actually be keeping track of this
13:29 - particular vector
13:32 - which i've called in my code the wander
13:34 - point offset it randomly
13:37 - constrain that back onto here
13:41 - and then that is the new wander point
13:43 - for the next frame am i really going to
13:45 - get that much of a difference in the
13:47 - behavior that it's worth doing this i'm
13:49 - struggling here let's compromise
13:52 - i'm going to show you right now a
13:54 - version of this wander sketch running
13:57 - with this particular displacement
13:59 - algorithm of moving the point rather
14:00 - than the angle i'm otherwise going to
14:03 - wrap up this video now with a few
14:06 - suggested exercises for you first as
14:08 - with any of these systems the various
14:10 - parameters by adjusting them the
14:12 - behavior of the vehicle itself will
14:14 - radically change take the radii of these
14:17 - two different circles right the size of
14:19 - this particular circle maybe perhaps
14:22 - also the distance from the vehicle
14:24 - itself is tied to the wandering strength
14:27 - the size of this circle even though i'm
14:28 - i'm doing the angular displacement now
14:31 - the size of the angular displacement is
14:33 - the wandering rate like how much does it
14:34 - change direction so could you make a
14:36 - version that has sliders that control
14:39 - both of those parameters reynolds also
14:41 - notes that pearl and noise could be a
14:43 - way to implement wandering so how about
14:45 - a version of this where the steering
14:47 - force is just calculated via perlin
14:49 - noise or maybe some other noise
14:50 - algorithm what ideas do you have how
14:53 - would you
14:54 - implement wander what does it mean to
14:56 - you to wander throughout this universe
14:58 - that we're all sharing let me know your
15:01 - thoughts in the comments or better yet
15:02 - create your own p5.js sketch and share
15:05 - it on the coding train website where you
15:06 - can submit your variation to every video
15:08 - that i make so check off another
15:10 - steering behavior from the list wander
15:13 - i've actually already recorded a couple
15:15 - videos on path falling i'm going to put
15:16 - those next into the sequence it's not
15:18 - really a big logic to the order here
15:20 - other than i'm just kind of taking on
15:23 - the steering behaviors that i feel okay
15:25 - with on any given day like what's what's
15:27 - in your heart what's in my heart what
15:28 - steering behavior did i wake up this
15:30 - morning wanting to implement and see you
15:33 - in the path falling one next goodbye
15:39 - [Music]
15:44 - you

Cleaned transcript:

i am back to continue my quest to complete all of the craig reynolds steering behaviors and today in this video i am going to do wander wander happens to be one of my favorites not necessarily because of the motion it produces but because it emphasizes the inherent creative thinking involved in designing steering behaviors and i hope will lead you to realizing that you can really invent your own what does it mean to wander reynolds uses the term wander to describe a random steering so he writes one easy implementation would be to generate a random steering force each frame okay let's try that let's begin with the base steering vehicle code from the previous videos i'll call a new function called wander then i need to implement that function in the vehicle class itself and let's try just a random vector applied as a steering force each frame and there we have it wonder record for the shortest coding train video ever obviously i'm not done looking back at reynolds paper he writes this produces rather uninteresting motion it is twitchy yeah that's pretty twitchy if you think about it what does it mean to wander now of course the idea of what i'm trying to emphasize is that it's up to you the designer and coder of the simulation itself but following along reynold's system he proposes that wandering isn't about making lots of decisions every frame to go in a random direction but picking a way to go for a while and then maybe changing and then changing again so the approach proposed is to retain a steering direction and make small random displacements to it each frame this is reynolds original implementation in a java applet of wander itself and you can see that the steering force is constrained uh to this dot that's kind of randomly moving around the perimeter of a circle let's draw all the components of the behavior wonder start with the vehicle traveling at some velocity project a point some fixed distance ahead of the vehicle according to the direction of the velocity place a circle at that point of some radius r now pick any random point somewhere along the perimeter of this circle i'm just going to pick this point where i drew the radius then the steering force is equal to a vector that points from the vehicle to that point along the circle i'll draw a line like this to represent that now the magnitude of the steering force we'll get to but you'll see how the steering force here is slightly clockwiser to the right of the velocity vector if i didn't do anything else this would result in this vehicle turning slightly to the right and just forever and ever and ever and ever doing that now i should note this is kind of an exception to what i might have said in a previous video where everything boils down to a desired velocity we could do this a slightly different way which is to say that this could be a target and this is the desired velocity and then do steering as desired velocity minus velocity and i think actually that's probably the way that i've done this in the past but reading reynolds paper precisely this is the actual steering force itself so what makes it wander well let's sprinkle in a little bit of randomness what if every frame i move this dot that is controlling the steering force a little bit this way or a little bit this way randomly if the displacement is small we're not going to see a lot of twitchiness because it's generally going to be moving in the same direction but over time that randomness this circle might wander over to here and then the vehicle itself will start to wander in the other direction and back and maybe further and this kind of thing so we're going to get this continuous motion wandering about a space so this is a definition of wander that reynolds proposes we can see all those same components in the diagram in the paper itself i did miss one additional element which is to draw a circle here emphasizing the maximum displacement that this dot can move any given frame if it's going to move big steps will get more random motion if it's moving only small steps the direction won't change randomly as often let's implement the code i'm going to comment out the previous just random force let me give it a starting velocity just so it's moving in some direction and step one is project that point that some fixed distance ahead of the vehicle according to the velocities direction i'm going to set that point 100 pixels ahead by making a copy of the vehicle's velocity and setting its magnitude to 100 and then adding the position there we go maybe i'll call that the wander point now i need a wander radius so we have the point projected out and a circle of radius 50 around that point now how do i want to keep track of this point here well i think i would like to keep track of it as an angle relative to the horizontal axis we could call that theta then thinking back to my video on polar and cartesian coordinates i can find the point on that circle by taking the radius and the angle and converting it to an x and y offset now i have that green dot on the perimeter of the circle let me change the angle to 90 degrees or pi over 2 radians just to make sure this is really working the way i think it should there that point is now 90 degrees relative to the velocity of the vehicle now i want to use that point as part of the steering calculation so i think i'll actually add to the wander point vector itself then the steering force is just that wander point now minus the vehicle's position now look at that i'm going to run that again for you it steered really really fast and is now going straight down hmm i should note here that this angle that i'm talking about theta is actually not the raw angle relative to the horizontal axis of the world but it really it really should be the angle relative to the velocity vector itself so as the vehicle starts to turn this steering point stays on the same position of the circle relative to the vehicle's direction now i've done that now as you can see that the vehicle is just making really really fast loopy loopty loops turning to the right 90 degrees continuously the main reason for this is that i've allowed that steering force's magnitude to be of of the of the length between the vehicle's position and that point itself so i should be reducing that magnitude or limiting it to the maximum force variable let's annotate this a little bit more with two lines now i have almost all of the elements from reynold's original implementation in my version there the critical sort of crucial piece i'm missing of course is moving this wander point as i'm calling it randomly clockwise or counterclockwise or clockwise but i think i've actually made a mistake here i described this all as an angle and then randomly offsetting the angle but reynolds if we go back and look very closely there we see that extra circle that is surrounding that point that's moving to complete the wander behavior reynolds actually displaces this point randomly anywhere along the path of this circle so it could end up here and then constrains it back to this circle this has the result of making it more likely to have a smaller displacement than a larger displacement since what i want to emphasize is the creativity involved in exploring these steering behaviors i'm gonna go with the way that i started basing everything off of this idea of an angle relative to the velocity after i do that i'll return to reynold's more formal vector displacement and see if if that improves anything so the first thing that i need to do is this pi divided by 2 starting angle needs to be a variable it needs to be an angle that i can keep track over time and manipulate it so i'm going to add it as a property to the object and call it wander theta and let's start it at pi divided by 2 replace it here still the same looking at this i think it would be easier to follow what's going on if i reduce the maximum speed down to two and as well as the maximum force down to 0.1 so we've got something moving a bit slower now that i can view and finally i just need to change that angle by a random displacement every frame now you can see with that very small displacement it hasn't really moved from where it started and so the vehicle is still kind of going in this loopdeloop i'll make a variable to keep track of the range of displacement and now i have something that looks much more like craig reynolds original implementation let's take a look and compare looks pretty good it's not 100 identical using different values for the different radii and properties of the system but i feel like i'm getting a similar kind of wandering motion while figuring this out it's super helpful to draw all the lines and circles and various properties of the system but let's look at what the wander behavior looks like without drawing all that extra debug stuff and there's my wandering vehicle looking at the diagram in the original paper i'd like to trace the path and see what it looks like now add a property to the object called path which is an array then every time in update i'm going to add a copy of the current position finally in show i'll draw all those positions as a series of vertices of course i forgot that this dot i just realized it would have a big problem here as soon as it crosses over how do i deal with this problem what if i think about it as a series of paths and every time i reach the edge i end a path and start a new one so i have all the paths and the current path now this is a loop for just one path and that could be inside of a loop of all the paths paths should actually start with the current path in it and the position gets added to the current path we're getting for this dot again all right this should be exactly what i had before however what i can do now is any time i hit one of these edges i'll make a boolean variable called hit edge which is false and then it'll just get set true in any of these so any edge and then at the end if i hit the edge then we need a new current path and add that current path to the paths oh boy did i make this complicated or what let's see if it works where'd it go oh it's push it's push still stuck in java arraylist land this looks like some pretty nice wandering to me let me give it a much bigger canvas space to work with and speed up the vehicle this is obviously going to slow down quite a bit eventually because i'm not removing anything from the history of this vehicle's path so deleting positions eventually would be one thing to add as well as possibly saving every third position or fifth position i don't necessarily need every single frame to create a nice connected set of line segments let's take a closer look though to produce the steering force for the next frame a random displacement is added to the previous value and the sum is constrained again to the sphere surface so first of all hello this would be great to try in 3d right what if what you are steering towards projected out ahead of you is not a circle in a twodimensional plane but a sphere in 3d that would be great to try i'm going to try to do that later and show you a version of it here next to me looking back at my implementation i have to start over to some extent because i've based everything around the idea of keeping track of an angle over time for the displacement implementation i wouldn't be keeping track of an angle i'd actually be keeping track of this particular vector which i've called in my code the wander point offset it randomly constrain that back onto here and then that is the new wander point for the next frame am i really going to get that much of a difference in the behavior that it's worth doing this i'm struggling here let's compromise i'm going to show you right now a version of this wander sketch running with this particular displacement algorithm of moving the point rather than the angle i'm otherwise going to wrap up this video now with a few suggested exercises for you first as with any of these systems the various parameters by adjusting them the behavior of the vehicle itself will radically change take the radii of these two different circles right the size of this particular circle maybe perhaps also the distance from the vehicle itself is tied to the wandering strength the size of this circle even though i'm i'm doing the angular displacement now the size of the angular displacement is the wandering rate like how much does it change direction so could you make a version that has sliders that control both of those parameters reynolds also notes that pearl and noise could be a way to implement wandering so how about a version of this where the steering force is just calculated via perlin noise or maybe some other noise algorithm what ideas do you have how would you implement wander what does it mean to you to wander throughout this universe that we're all sharing let me know your thoughts in the comments or better yet create your own p5.js sketch and share it on the coding train website where you can submit your variation to every video that i make so check off another steering behavior from the list wander i've actually already recorded a couple videos on path falling i'm going to put those next into the sequence it's not really a big logic to the order here other than i'm just kind of taking on the steering behaviors that i feel okay with on any given day like what's what's in your heart what's in my heart what steering behavior did i wake up this morning wanting to implement and see you in the path falling one next goodbye you
