With timestamps:

00:00 - okay you're back that's nice of you to
00:02 - come back I'm now in the fifth video
00:04 - here and in this video what I want to
00:05 - talk about is okay so we have this idea
00:08 - of a genetic algorithm right I have the
00:10 - algorithm itself we talked about that at
00:12 - Great length I talked about how you can
00:14 - Implement that algorithm in code I
00:15 - looked at the sort of DNA object and
00:17 - population object but the example was
00:19 - still just this kind of trivial example
00:21 - that just sort of demonstrates that the
00:23 - algorithm works by having a known result
00:26 - starting with Randomness and arriving at
00:28 - that known result what you to do is have
00:30 - something more interesting where you
00:32 - might want to evolve a particular design
00:35 - or a particular animation Behavior or
00:37 - something else that I a piece of music
00:39 - something that I can't even think of
00:40 - right now that's creatively in your head
00:42 - so what I want to do in this particular
00:44 - video is talk about what are the pieces
00:47 - of that genetic algorithm that you can
00:49 - just copy from my code exactly every
00:51 - single time you use it and what are the
00:53 - places where you need to sort of
00:55 - interject and come up with your own
00:57 - creative solution to the particular
00:59 - aspect of the code so so let's look at a
01:00 - few examples of different uh scenarios I
01:02 - showed you this box car 2D example this
01:05 - is in a way like evaluating the design
01:08 - of a physics element in a system through
01:10 - an evolutionary process and you can see
01:12 - here this is perhaps not the car that
01:14 - you would design manually but it seems
01:16 - to be driving itself quite quickly um
01:18 - through the genetic algorithm so what
01:20 - are the pieces of this what's the
01:22 - fitness function here and how do you
01:23 - take this car and encode its design in
01:27 - DNA those are the two essential
01:28 - questions by the way
01:30 - another example that I that I uh found
01:32 - here is by Roger Johanson I don't know
01:35 - if I'm pronouncing that correctly but
01:36 - somebody correct me on the internet if
01:37 - I'm not um this is very similar the to
01:40 - the to be or not to be uh example but
01:43 - instead of starting with kind of like
01:45 - random polygons instead of arriving at a
01:48 - Target phrase this is starting to arrive
01:50 - at a Target image through polygons and
01:52 - you can see after a whole bunch of
01:53 - generations what is that Target image
01:55 - but the mo the painting of the Mona Lisa
01:57 - so you might think about okay well this
01:59 - actually is almost identical to my U to
02:02 - be or not to be example but instead
02:04 - there's like pieces of the DNA or colors
02:08 - and polygons and positions Vector
02:10 - information what is that how do you make
02:12 - that work and then I'll show you um oh
02:14 - there's an uh FAQ there's some other
02:16 - links here you can look at yourself and
02:17 - then I'll show you one of my examples
02:18 - which I have running here in the
02:19 - background this is actually a pathf
02:22 - finding example so what you can see here
02:25 - is there are something like a thousand
02:27 - little agents moving around the screen
02:29 - if you've watched my videos on steering
02:31 - behaviors these agents are actually
02:34 - following a flow field I believe if I
02:36 - press this button I can sort of make
02:38 - that flow field visible this is the sort
02:41 - of this is the DNA of each object this
02:43 - is what it's in its brain a grid of
02:44 - vectors around the screen and ultimately
02:47 - they're evolving what is the fastest
02:50 - path um from the left hand side of the
02:52 - screen to the right hand side of the
02:53 - screen but this example is a bit more
02:55 - sophisticated I can actually draw some
02:57 - obstacles here and these elements will
03:00 - actually start to evolve a path around
03:02 - the obstacle and so I'll come back to
03:04 - this later and uh and see where it's
03:07 - gotten to how far it's gotten how good
03:09 - the evolution sort of is but what I want
03:10 - to do is kind of stop I've shown you
03:12 - these three examples maybe you have an
03:14 - idea in your head what are the things
03:16 - you really really need to think about so
03:18 - looking back at the actual genetic
03:20 - algorithm here I want to talk about two
03:23 - key places two key places where you
03:27 - really need to interject your own
03:29 - creative spin on this algorithm
03:31 - everything else can largely remain
03:33 - exactly the same in any example in any
03:35 - project that you're doing with the
03:36 - genetic algorithm so let me come over
03:38 - here and kind of write these out so
03:39 - number one is the fitness
03:44 - function the fitness function that I had
03:47 - in the uh to be or not to be example was
03:50 - counting the number of correct
03:51 - characters that's not going to work for
03:54 - the the Box Car 2D example that's not
03:56 - going to work for that Mona Lisa example
03:58 - it's not going to work for my evolving a
03:59 - path with a flow field example right you
04:03 - need to think about your particular
04:05 - project what is the fitness function uh
04:08 - is the music in tune or Out Of Tune does
04:12 - the uh steering agent make it to the
04:14 - Target quickly or slowly does the thing
04:16 - run into an obstacle yes or no does the
04:19 - image look like the Mona Lisa yes or no
04:21 - so you need to come up with your own way
04:23 - of scoring each element of the
04:25 - population you need to write your own
04:27 - Fitness function that's really key the
04:30 - other key thing is I'm going to say how
04:34 - do you
04:36 - encode your
04:41 - DNA this is really really key and what
04:45 - this brings up is this idea of
04:49 - genotype
04:51 - versus
04:53 - phenotype right this is a key concept
04:56 - from genetics that we could kind of have
04:59 - a very sort of simplistic view of here
05:02 - in the genetic algorithm that we're
05:04 - working with so the genotype being the
05:07 - data itself or the
05:11 - encoding the phenotype being the
05:15 - expression of that data the
05:18 - manifestation of it the visualization
05:20 - the actual animation of it and we we
05:23 - were sort of spoiled by our example the
05:25 - to be or not to be example right here is
05:28 - the encoding of my random phrase you
05:31 - know
05:33 - Unicorn oh really it is an array of
05:36 - characters u n i o r n that's the
05:40 - encoding here's the expression of
05:43 - it unicorn right that's the expression
05:47 - it's the same thing but in any of these
05:50 - other examples if I go back to this Mona
05:53 - Lisa example you know the encoding might
05:57 - be a series of an array of polygon
06:00 - objects each polygon object having an
06:01 - array of vertices it could be a giant
06:04 - array of of RGB a values for Pixel
06:07 - colors and then the expression is
06:09 - drawing it or animating it on the screen
06:12 - same thing here with box with the Box
06:14 - Car 2D like how do you design that car
06:16 - oh my goodness you have to have some
06:18 - type of node-based map to talk about how
06:20 - the different pieces of the car like fit
06:22 - together that's the encoding the
06:23 - expression is the thing actually moving
06:25 - and in this particular example oh you
06:28 - can see by the way how far it's come the
06:31 - objects have kind of evolved this flow
06:32 - field around those around these
06:34 - obstacles I can make it harder for them
06:36 - by adding some more obstacles but the
06:38 - encoding the the the man the phenotype
06:41 - is the expression the movement of these
06:43 - objects through the flow field but
06:45 - what's the actual encoding it's an array
06:47 - of
06:48 - vectors so the first example that I want
06:50 - to actually look at and see how this
06:52 - applied applies an actual code is an
06:55 - example called smart Rockets um this is
06:57 - actually based on an example made by J
07:00 - Thorp many years ago a flash example on
07:03 - the web I'll I don't know if I can dig
07:05 - it up right now but I'll include a link
07:06 - to it in the this video's description
07:09 - but um and it's simpler this one is
07:11 - running in processing I'm going to I'll
07:13 - leave this open actually let's make it
07:14 - really hard let's draw some like more
07:17 - obstacles see if it can see if it can
07:19 - solve it anyway that's going to be hard
07:21 - um I'm going to go back to the browser
07:22 - close this you can see this is a a
07:25 - version of this example working it's
07:27 - quite a bit uh simpler you can see that
07:30 - these objects boy they're not doing very
07:32 - well are trying to find a path to make
07:35 - it from the bottom of the
07:37 - window to the top and you know it hasn't
07:41 - been running for very long so they
07:43 - haven't done a very good job of it yet
07:45 - so this is the same sort of problem as
07:48 - to be or not to be of the question think
07:49 - of the number of possible paths there
07:51 - are from the bottom of the window to the
07:53 - top an unfathomable amount there's a lot
07:55 - of pixels a lot of ways they could move
07:57 - um um it's so we're trying to search for
08:00 - the optimized fastest path and not
08:02 - running into that obstacle so what's
08:04 - interesting about looking at the code
08:06 - for this right so let's think about this
08:08 - let me come back to my uh let me come
08:10 - back to the Whiteboard for a second so
08:12 - the fitness function let's first think
08:13 - about the fitness
08:14 - function my fitness function this is the
08:17 - target this is where they start the
08:19 - fitness of each one of these Rockets is
08:22 - the
08:23 - inverse distance so the to the Target
08:26 - that it as that it gets to at the end of
08:28 - its life so the closer it gets to the
08:30 - Target the higher the fitness so we
08:34 - calculate the distance between the
08:36 - Target and the object and then I say one
08:39 - ided by that distance that's a way of
08:41 - calculating a fitness function so that's
08:42 - a specific thing I had to invent for
08:44 - this again there's lots of ways I could
08:46 - improve that Fitness function which I'd
08:48 - like to discuss but that's a basic idea
08:50 - so that's one thing then this idea of
08:52 - genotype versus
08:54 - phenotype so if I come back over
08:57 - here one thing that's really interesting
08:59 - to see if I go to the code right look at
09:02 - this here's a DNA object it is exactly
09:05 - the same look at this crossover function
09:07 - it's exactly the same as the Shakespeare
09:09 - example look at this mutate function
09:11 - it's basically exactly the same as the
09:14 - um as the Shakespeare example there's
09:17 - this idea of a genes array which is
09:19 - exactly the same everything is the same
09:22 - here's the one thing that's different
09:24 - what goes in the genes array instead of
09:27 - picking a random character I I'm picking
09:29 - a random Vector so what each one of
09:32 - those Rockets has is an array of vectors
09:35 - that's like an array of forces that
09:36 - cause it to move around the screen you
09:38 - can essentially think of it as like if
09:40 - the driver of the rocket has like this
09:42 - control panel where they can like press
09:44 - thrusters with a certain amount of force
09:46 - in a certain direction that's what
09:48 - they're doing over and over again and
09:49 - they're the encoding of that rocket is
09:51 - the sequence of those thrusters those
09:53 - forces to drive it around the screen so
09:56 - what's interesting about this is this
09:57 - DNA object if you look at the code
09:59 - between this it's entirely the same the
10:02 - difference is the genotype itself is no
10:06 - longer characters it's vectors so it
10:09 - might be floating Point numbers it might
10:10 - be characters it might be vectors it
10:13 - might be pixels it might be polygons
10:15 - it's up to you to think of what is that
10:17 - encoding of the thing you're trying to
10:19 - express and in this case it simply is
10:22 - vectors now the expression of that
10:24 - happens in population because the
10:27 - population actually sorry it happens in
10:29 - the rocket object so this is what was
10:31 - missing right in the in the in the
10:35 - um in my shakespare monkey example there
10:38 - was simply a DNA object that DNA object
10:42 - had both the genotype the encoding of
10:44 - unicorn and the phenotype the expression
10:47 - of unicorn in it I didn't need a
10:48 - separate object but in this example the
10:51 - encoding the DNA is vectors and the
10:53 - expression is the rocket object and the
10:57 - rocket object if I come over here is a
10:59 - physics object it's an object that has
11:01 - acceleration velocity and position and
11:04 - guess what it has the DNA built into it
11:07 - and when I when I run it look at this
11:10 - this is the expression there's a lot
11:12 - going on in this example but the
11:14 - expression is go and look at its DNA and
11:17 - apply something from its DNA the next
11:20 - sequence Gene as a force so that's the
11:22 - expression take the vector and turn it
11:25 - into a force in the physics engine so I
11:27 - would encourage you to go back and
11:29 - review my forces and vectors tutorial as
11:32 - well as my steering behaviors tutorials
11:33 - cuz this example this is essentially a
11:36 - vehicle object that has a physics engine
11:38 - built into it but it's how it moves is
11:41 - according to its genetic information and
11:43 - then you'll also notice that Fitness
11:45 - function is right here in the rocket
11:47 - itself so instead of and I want to just
11:50 - make this wider so we can sort of see
11:51 - this for full fitness function for a
11:53 - second now I did say that distance the
11:57 - the function the fitness function is one
11:59 - divided by distance but I'm doing a
12:01 - bunch of things in this um in the
12:04 - fitness function I'm also checking to
12:05 - see if it hit an obstacle I'm going to
12:07 - do a separate video about improving
12:09 - Fitness functions but I'm adding some
12:10 - extra math to the fitness function to
12:12 - make it a little bit stronger and I'm
12:13 - going I'm going to cover that actually I
12:15 - think just separately in the next video
12:17 - I'm going to make a note of that to do
12:18 - that so you can come back and I'll talk
12:20 - to that but you can see here there's
12:21 - lots of stuff there is a fitness value
12:23 - that's being
12:24 - calculated okay and we could go back and
12:26 - see it running I don't know if they've
12:28 - reached the target yet I'm going to have
12:30 - to look at like refining and optimizing
12:32 - this example by the time you click on
12:33 - the link in this description hopefully
12:34 - it'll work a little better I don't know
12:36 - if I just got kind of unlucky I think
12:38 - this one thing might be is the sort of
12:39 - like maximum speed is very low they seem
12:41 - to be going kind of slowly so they're
12:42 - not this one's obviously has the highest
12:44 - Fitness of that generation but that's
12:46 - this is basically the idea so you what
12:48 - you want to do is think about use that
12:51 - core genetic algorithm again if I look
12:53 - at the code last thing I'll just sort of
12:55 - point out here is that
12:57 - um um you can see here in in the draw
13:02 - Loop there are the same sort of set of
13:04 - functions calculate the fitness perform
13:06 - selection perform reproduction there's a
13:08 - little bit of a different thing going on
13:09 - here where there's also time like in the
13:11 - Shakespeare monkey example just like
13:13 - every frame it did a new generation now
13:15 - it's sort of counting down letting these
13:17 - objects live for a little while then
13:19 - calculate their Fitness and then um and
13:22 - then
13:24 - um my brain is like shutting down at the
13:27 - end of this video here and then um and
13:30 - then like go and then reproduce for the
13:31 - Next Generation let's check on our uh
13:34 - the flow field which is O it's running
13:35 - very slow probably because it's got the
13:36 - browser thing kind of going as well oh
13:38 - because I have the debug on oh I left
13:40 - that on it's probably been running let's
13:41 - see how well are they doing here have
13:42 - they made it around all these no they're
13:44 - getting stuck at this obstacle I'm going
13:45 - to let this run for a little longer and
13:47 - maybe uh uh I'll later I'll update you
13:50 - somehow through another video of how
13:52 - these obstacles are doing so I've given
13:55 - you a lot of stuff here so what I think
13:57 - what what you should really do is think
13:58 - about what again try to build your own
14:01 - scenario try to think about what is this
14:03 - idea how do you're going to encode the
14:05 - stuff that's the parameters of your
14:07 - system how do you express those
14:09 - parameters visually through through
14:11 - design or animation and then how do you
14:13 - calculate a fitness to evolve those
14:15 - parameters over time and I'm going to do
14:17 - a few more videos to show you a couple
14:19 - more scenarios a scenario known as
14:21 - interactive selection as well as a
14:23 - scenario known that I'm that I'm calling
14:24 - Loosely ecosystem simulation which I'll
14:27 - get to too okay
14:29 - um thanks for watching and I will see
14:32 - you guys soon in another video I hope
14:34 - thanks very much

Cleaned transcript:

okay you're back that's nice of you to come back I'm now in the fifth video here and in this video what I want to talk about is okay so we have this idea of a genetic algorithm right I have the algorithm itself we talked about that at Great length I talked about how you can Implement that algorithm in code I looked at the sort of DNA object and population object but the example was still just this kind of trivial example that just sort of demonstrates that the algorithm works by having a known result starting with Randomness and arriving at that known result what you to do is have something more interesting where you might want to evolve a particular design or a particular animation Behavior or something else that I a piece of music something that I can't even think of right now that's creatively in your head so what I want to do in this particular video is talk about what are the pieces of that genetic algorithm that you can just copy from my code exactly every single time you use it and what are the places where you need to sort of interject and come up with your own creative solution to the particular aspect of the code so so let's look at a few examples of different uh scenarios I showed you this box car 2D example this is in a way like evaluating the design of a physics element in a system through an evolutionary process and you can see here this is perhaps not the car that you would design manually but it seems to be driving itself quite quickly um through the genetic algorithm so what are the pieces of this what's the fitness function here and how do you take this car and encode its design in DNA those are the two essential questions by the way another example that I that I uh found here is by Roger Johanson I don't know if I'm pronouncing that correctly but somebody correct me on the internet if I'm not um this is very similar the to the to be or not to be uh example but instead of starting with kind of like random polygons instead of arriving at a Target phrase this is starting to arrive at a Target image through polygons and you can see after a whole bunch of generations what is that Target image but the mo the painting of the Mona Lisa so you might think about okay well this actually is almost identical to my U to be or not to be example but instead there's like pieces of the DNA or colors and polygons and positions Vector information what is that how do you make that work and then I'll show you um oh there's an uh FAQ there's some other links here you can look at yourself and then I'll show you one of my examples which I have running here in the background this is actually a pathf finding example so what you can see here is there are something like a thousand little agents moving around the screen if you've watched my videos on steering behaviors these agents are actually following a flow field I believe if I press this button I can sort of make that flow field visible this is the sort of this is the DNA of each object this is what it's in its brain a grid of vectors around the screen and ultimately they're evolving what is the fastest path um from the left hand side of the screen to the right hand side of the screen but this example is a bit more sophisticated I can actually draw some obstacles here and these elements will actually start to evolve a path around the obstacle and so I'll come back to this later and uh and see where it's gotten to how far it's gotten how good the evolution sort of is but what I want to do is kind of stop I've shown you these three examples maybe you have an idea in your head what are the things you really really need to think about so looking back at the actual genetic algorithm here I want to talk about two key places two key places where you really need to interject your own creative spin on this algorithm everything else can largely remain exactly the same in any example in any project that you're doing with the genetic algorithm so let me come over here and kind of write these out so number one is the fitness function the fitness function that I had in the uh to be or not to be example was counting the number of correct characters that's not going to work for the the Box Car 2D example that's not going to work for that Mona Lisa example it's not going to work for my evolving a path with a flow field example right you need to think about your particular project what is the fitness function uh is the music in tune or Out Of Tune does the uh steering agent make it to the Target quickly or slowly does the thing run into an obstacle yes or no does the image look like the Mona Lisa yes or no so you need to come up with your own way of scoring each element of the population you need to write your own Fitness function that's really key the other key thing is I'm going to say how do you encode your DNA this is really really key and what this brings up is this idea of genotype versus phenotype right this is a key concept from genetics that we could kind of have a very sort of simplistic view of here in the genetic algorithm that we're working with so the genotype being the data itself or the encoding the phenotype being the expression of that data the manifestation of it the visualization the actual animation of it and we we were sort of spoiled by our example the to be or not to be example right here is the encoding of my random phrase you know Unicorn oh really it is an array of characters u n i o r n that's the encoding here's the expression of it unicorn right that's the expression it's the same thing but in any of these other examples if I go back to this Mona Lisa example you know the encoding might be a series of an array of polygon objects each polygon object having an array of vertices it could be a giant array of of RGB a values for Pixel colors and then the expression is drawing it or animating it on the screen same thing here with box with the Box Car 2D like how do you design that car oh my goodness you have to have some type of nodebased map to talk about how the different pieces of the car like fit together that's the encoding the expression is the thing actually moving and in this particular example oh you can see by the way how far it's come the objects have kind of evolved this flow field around those around these obstacles I can make it harder for them by adding some more obstacles but the encoding the the the man the phenotype is the expression the movement of these objects through the flow field but what's the actual encoding it's an array of vectors so the first example that I want to actually look at and see how this applied applies an actual code is an example called smart Rockets um this is actually based on an example made by J Thorp many years ago a flash example on the web I'll I don't know if I can dig it up right now but I'll include a link to it in the this video's description but um and it's simpler this one is running in processing I'm going to I'll leave this open actually let's make it really hard let's draw some like more obstacles see if it can see if it can solve it anyway that's going to be hard um I'm going to go back to the browser close this you can see this is a a version of this example working it's quite a bit uh simpler you can see that these objects boy they're not doing very well are trying to find a path to make it from the bottom of the window to the top and you know it hasn't been running for very long so they haven't done a very good job of it yet so this is the same sort of problem as to be or not to be of the question think of the number of possible paths there are from the bottom of the window to the top an unfathomable amount there's a lot of pixels a lot of ways they could move um um it's so we're trying to search for the optimized fastest path and not running into that obstacle so what's interesting about looking at the code for this right so let's think about this let me come back to my uh let me come back to the Whiteboard for a second so the fitness function let's first think about the fitness function my fitness function this is the target this is where they start the fitness of each one of these Rockets is the inverse distance so the to the Target that it as that it gets to at the end of its life so the closer it gets to the Target the higher the fitness so we calculate the distance between the Target and the object and then I say one ided by that distance that's a way of calculating a fitness function so that's a specific thing I had to invent for this again there's lots of ways I could improve that Fitness function which I'd like to discuss but that's a basic idea so that's one thing then this idea of genotype versus phenotype so if I come back over here one thing that's really interesting to see if I go to the code right look at this here's a DNA object it is exactly the same look at this crossover function it's exactly the same as the Shakespeare example look at this mutate function it's basically exactly the same as the um as the Shakespeare example there's this idea of a genes array which is exactly the same everything is the same here's the one thing that's different what goes in the genes array instead of picking a random character I I'm picking a random Vector so what each one of those Rockets has is an array of vectors that's like an array of forces that cause it to move around the screen you can essentially think of it as like if the driver of the rocket has like this control panel where they can like press thrusters with a certain amount of force in a certain direction that's what they're doing over and over again and they're the encoding of that rocket is the sequence of those thrusters those forces to drive it around the screen so what's interesting about this is this DNA object if you look at the code between this it's entirely the same the difference is the genotype itself is no longer characters it's vectors so it might be floating Point numbers it might be characters it might be vectors it might be pixels it might be polygons it's up to you to think of what is that encoding of the thing you're trying to express and in this case it simply is vectors now the expression of that happens in population because the population actually sorry it happens in the rocket object so this is what was missing right in the in the in the um in my shakespare monkey example there was simply a DNA object that DNA object had both the genotype the encoding of unicorn and the phenotype the expression of unicorn in it I didn't need a separate object but in this example the encoding the DNA is vectors and the expression is the rocket object and the rocket object if I come over here is a physics object it's an object that has acceleration velocity and position and guess what it has the DNA built into it and when I when I run it look at this this is the expression there's a lot going on in this example but the expression is go and look at its DNA and apply something from its DNA the next sequence Gene as a force so that's the expression take the vector and turn it into a force in the physics engine so I would encourage you to go back and review my forces and vectors tutorial as well as my steering behaviors tutorials cuz this example this is essentially a vehicle object that has a physics engine built into it but it's how it moves is according to its genetic information and then you'll also notice that Fitness function is right here in the rocket itself so instead of and I want to just make this wider so we can sort of see this for full fitness function for a second now I did say that distance the the function the fitness function is one divided by distance but I'm doing a bunch of things in this um in the fitness function I'm also checking to see if it hit an obstacle I'm going to do a separate video about improving Fitness functions but I'm adding some extra math to the fitness function to make it a little bit stronger and I'm going I'm going to cover that actually I think just separately in the next video I'm going to make a note of that to do that so you can come back and I'll talk to that but you can see here there's lots of stuff there is a fitness value that's being calculated okay and we could go back and see it running I don't know if they've reached the target yet I'm going to have to look at like refining and optimizing this example by the time you click on the link in this description hopefully it'll work a little better I don't know if I just got kind of unlucky I think this one thing might be is the sort of like maximum speed is very low they seem to be going kind of slowly so they're not this one's obviously has the highest Fitness of that generation but that's this is basically the idea so you what you want to do is think about use that core genetic algorithm again if I look at the code last thing I'll just sort of point out here is that um um you can see here in in the draw Loop there are the same sort of set of functions calculate the fitness perform selection perform reproduction there's a little bit of a different thing going on here where there's also time like in the Shakespeare monkey example just like every frame it did a new generation now it's sort of counting down letting these objects live for a little while then calculate their Fitness and then um and then um my brain is like shutting down at the end of this video here and then um and then like go and then reproduce for the Next Generation let's check on our uh the flow field which is O it's running very slow probably because it's got the browser thing kind of going as well oh because I have the debug on oh I left that on it's probably been running let's see how well are they doing here have they made it around all these no they're getting stuck at this obstacle I'm going to let this run for a little longer and maybe uh uh I'll later I'll update you somehow through another video of how these obstacles are doing so I've given you a lot of stuff here so what I think what what you should really do is think about what again try to build your own scenario try to think about what is this idea how do you're going to encode the stuff that's the parameters of your system how do you express those parameters visually through through design or animation and then how do you calculate a fitness to evolve those parameters over time and I'm going to do a few more videos to show you a couple more scenarios a scenario known as interactive selection as well as a scenario known that I'm that I'm calling Loosely ecosystem simulation which I'll get to too okay um thanks for watching and I will see you guys soon in another video I hope thanks very much
