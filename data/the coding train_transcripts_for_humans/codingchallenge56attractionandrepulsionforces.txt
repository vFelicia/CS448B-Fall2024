With timestamps:

00:00 - hello and welcome to a coding challenge
00:02 - so this coding challenge is called I
00:05 - think attraction is repulsion so I'm
00:07 - recording the intro after I did the
00:09 - challenge was kind of a mess and I never
00:11 - really got to the results that I wanted
00:13 - and I just sort of played around with a
00:14 - bunch of different possibilities so I'm
00:16 - asking you the Internet
00:17 - - are you the Internet I'm not sure who
00:19 - the Internet is maybe it's you I don't
00:21 - know who it is
00:21 - you're watching - uh to take my code and
00:24 - hopefully expand on and improve on it in
00:26 - interesting ways so what I was imagining
00:28 - was creating a lot of interesting
00:30 - attraction patterns by looking at the
00:32 - trail of various objects as they move
00:35 - and get attracted to different
00:36 - attraction points within a canvas and
00:38 - you can see if I just kind of google
00:39 - image search attractors and processing
00:41 - we're seeing a lot of visual images like
00:43 - this visual images like this so you can
00:45 - imagine drawing dropping a whole lot of
00:48 - particles into a space where this image
00:50 - of me behind me and having them sort of
00:52 - swarm around and move around all these
00:54 - invisible attraction points so where I
00:56 - got through with the challenge is kind
00:58 - of an end result that looks something
00:59 - like this and what I actually started
01:01 - doing was just showing in the challenge
01:03 - towards the end I decided to show you
01:04 - the difference between attraction and
01:06 - repulsion and if I add a bunch of these
01:09 - all around you can see what's happening
01:12 - is every single one of these attractor
01:15 - spots attracts these particles that are
01:17 - just entering the scene but when they
01:19 - get within a certain number of pixels of
01:21 - the attractor then they're repelled with
01:23 - a very strong force so this hasn't
01:24 - really produced a visual result
01:27 - necessarily that I'm happy with I would
01:30 - be interested what happens if I looked
01:31 - at the alpha blended trails over time
01:33 - but this example that I end with should
01:36 - have all the pieces for you to take and
01:38 - add your own design create spin on it so
01:41 - watch the video you'll learn a bit about
01:43 - how vectors work how forces work how you
01:47 - can add different objects with Mouse
01:49 - with arrays and looking at how you can
01:52 - accumulate different forces and have
01:53 - interplay between different particles
01:55 - moving around the screen and you're the
01:58 - mechanics of it will be there in the
01:59 - video I'll make lots of mistakes and get
02:00 - confused and
02:01 - the end you look at this video
02:03 - subscription find the code hopefully
02:04 - expand on it and make something much
02:05 - more beautiful and much more interesting
02:07 - because I really failed at doing that so
02:09 - I hope you enjoy this coding challenge
02:11 - oh I I guess I have to at this point
02:14 - like I have to blow the train whistle
02:16 - it's like I have a contract which
02:17 - doesn't exist but it says in there close
02:21 - the train whistle so that's what I've
02:22 - done
02:22 - enjoy the coding challenge and maybe
02:23 - you'll still be watching at the end or
02:25 - in the next video or you might run away
02:26 - forever and never come back which I
02:28 - would totally understand but anyways
02:29 - goodbye Susan
02:31 - alright let's get started so actually
02:33 - let me come over to the whiteboard the
02:34 - first thing that I need to do basically
02:37 - visit what I need for this example I
02:38 - want to have two kinds of objects in my
02:40 - world I want to have something that is
02:45 - an attractor object and honestly I don't
02:50 - think I need a full on a tractor object
02:52 - in this case the attractor can actually
02:54 - just be a single vector right all I care
02:57 - about for the attractor is its XY
02:59 - location where it is so I want to have
03:01 - an attractor that's a thing that's drawn
03:04 - on the screen and then I want to have
03:05 - particles so I want a single particle
03:08 - which is like a dot and I want that dot
03:10 - to be attracted to the attractor and how
03:14 - do I want to be attracted to the
03:15 - attractor by using gravitational
03:18 - attraction so the formula for
03:20 - gravitational attraction is the force of
03:22 - gravity expressed as a vector is equal
03:25 - to G which is the universal
03:27 - gravitational constant constant concert
03:30 - the gravitational concert the universal
03:35 - gravitational constant G times the mass
03:39 - of one object times the mass of another
03:42 - object divided by distance squared the
03:46 - truth of the matter is I think I could
03:48 - consider the mass of this parcel is 1
03:50 - and the mass of this attractor as 1 so
03:54 - the mass of both of these are 1 then my
03:57 - formula becomes G divided by distance
03:59 - squared
04:00 - so really the force of force the force
04:03 - of gravity I want with the force the
04:06 - forces one with me me the forest one
04:08 - something like that anyway the force of
04:10 - gravity is really just a constant that
04:14 - we're going to make up
04:15 - stronger that weak mean this is a real
04:16 - number in the real world in physics but
04:19 - we're living in this fake pixel space
04:20 - we're just going to make up G and then
04:22 - we have this interesting question of Oh
04:24 - should the force forces strength be
04:27 - proportional or inversely proportional
04:29 - in distance so what this means is if the
04:32 - particle is really close to the
04:33 - attractor it's going to be really
04:34 - attracted to it if it's far away that
04:37 - attraction is going to be much weaker
04:38 - because that I'm dividing by the
04:40 - distance squared so as you maybe make a
04:44 - creative project out of what I'm showing
04:45 - you in this video you might play with
04:47 - this idea maybe it's weaker was closer
04:49 - stronger when it's further let's just
04:51 - sort of give it a try and then obviously
04:52 - at some point we could make this force
04:55 - not attraction but repulsion by just
04:57 - multiplying all this by a negative one
04:59 - so anyway let's go back to the code and
05:02 - start implementing some of this so here
05:04 - I am with the code there you are and I
05:07 - am going to start writing some code so
05:09 - I'm going to go over here and I have a
05:11 - look dude I have a particle I have a I
05:15 - have a separate JavaScript file called
05:16 - partial gif where I'm going to create a
05:19 - constructor function for with a particle
05:22 - and I'm going to just give it an X and y
05:23 - so the only thing I'm going to give to
05:25 - the particle and it starts with a
05:26 - location to start and I'm going to say
05:29 - this dot pod equals create vector X
05:35 - comma Y so now I have a particle with a
05:37 - position that the vector of an x and y
05:39 - now in the main sketch I'm going to say
05:42 - bar at rector and then I'm going to say
05:45 - attractor equals create vector a 200 200
05:51 - now I could make an object for the
05:53 - attractor like I'm doing with the
05:54 - particle but right now my attractor is
05:56 - just going to be a thing that stays in
05:57 - one place doesn't need to animate it
05:59 - doesn't need to keep track of a color so
06:01 - just a single vector is fine
06:02 - then I want to see that everything's
06:04 - working so I'm gonna say background 51
06:06 - and I'm going to draw maybe let's just
06:09 - use points for simplicity stroke 255
06:12 - stroke weight 4 and I'm going to say
06:14 - point attractor dot X attract toward y
06:22 - and let's just take a look at this real
06:25 - quick hit refresh and there you go
06:26 - there's my attract York oh the dot in
06:30 - the center of the window yes okay so
06:32 - that's working now what I want to do is
06:34 - add a particle and I want to say a
06:37 - particle equals a new particle and I'm
06:41 - going to put it at I don't know
06:42 - 200 comma 100 and then I want to say
06:45 - something like particle particle show
06:48 - now I have a constructor function so
06:53 - that'll work I do not have a show
06:54 - function so right in here I need to say
06:56 - this dot show equals function and I'm
07:00 - just going to also do the same thing
07:01 - stroke 255 stroke wait for and then
07:08 - point to this cause X this dot pause why
07:12 - now I realized something I forgot to
07:14 - actually reference the particle itself
07:17 - in in the HTML file the particle J's
07:21 - file so I'm going to do that real quick
07:22 - okay great
07:23 - now what do I have I have a particle and
07:28 - I have an attractor look at that
07:30 - particle look at that attraction attract
07:34 - the particle okay so I guess I can't do
07:36 - it with motion in my hands we've got to
07:37 - add some code so let's go back to the
07:39 - sketch and what I'm going to do here is
07:42 - I want to say particle attracted to a
07:47 - tractor so I want to have some generic
07:50 - way of saying any given particle can be
07:54 - attracted to some vector and so I'm
07:56 - going to write a function in the
07:57 - particle object called attracted that
08:00 - receives an attractor so let's take a
08:02 - look at that and let's go to the
08:05 - particle that means I need a function
08:07 - this dot attracted equals function and
08:10 - that function I'm going to call it
08:13 - target so I'm going to give the argument
08:16 - at target the target is a thing that's
08:17 - attracting it so we're getting somewhere
08:20 - now but one thing I realized here is
08:22 - that I don't even have a way for this
08:25 - particle to experience any physics and
08:27 - so if you're interested in this or
08:30 - larger topic of physics engines
08:32 - and the kinds of citizenship you get
08:33 - Billa T kinds of physics engines you can
08:36 - use a separate third-party libraries
08:38 - I've got a lot of videos as part of the
08:40 - nature of code course about all the
08:42 - steps which I will reference in this
08:43 - video but right now I'm going to do this
08:45 - in a really quick way using something
08:47 - called Euler integration often
08:49 - mispronounced as Euler but it's boiler
08:51 - so I'm going to what I need is I need to
08:54 - integrate meeting I'm doing this thing
08:56 - where I'm saying how does position
08:58 - change over time this is actually what's
09:00 - the rate of change of position or the
09:02 - derivative of position it's this
09:04 - velocity and I'm going to make a vector
09:07 - zero zero then I'm going to make a
09:10 - vector which I'm going to use as
09:11 - acceleration create a vector of zero
09:13 - zero actually by the way if you just say
09:15 - create vector with no arguments it makes
09:17 - a vector zero zero what is a vector if
09:19 - that's not familiar to you a point you
09:21 - also reference the video that goes over
09:22 - the basics of vectors so I have position
09:25 - velocity and acceleration now what I
09:26 - want to do is add a function on maybe
09:28 - I'll call it update could call it step
09:30 - all physics engines need a sort of
09:32 - moment
09:33 - Yury step through time what is that time
09:35 - how many cycles of time are you
09:37 - iterating through depending on each
09:38 - frame of animation I'm doing this in a
09:40 - simple way every frame of through draw
09:43 - every frame of animation in my sketch I
09:47 - add velocity to position and I add
09:53 - acceleration to velocity so now if I
09:58 - were to actually give a velocity 0 comma
10:01 - 1 and I were to go to the sketch and
10:03 - also say particle update and run this
10:09 - sketch we can see there we go my
10:11 - particle is moving towards the attractor
10:14 - now I just happen to give it a hard
10:16 - coded the Lassa T pointed straight at it
10:19 - so if I go back to the particle and I
10:22 - say something like you know zero you
10:24 - know negative one comma zero point two
10:28 - you can see the particle is moving over
10:30 - that way now so the velocity is a vector
10:32 - that controls how that particle moves I
10:35 - could also give a particular
10:37 - acceleration like zero point zero point
10:40 - zero one and you can see now it's
10:44 - accelerate
10:45 - getting down right because that
10:46 - acceleration is accumulating onto it so
10:48 - this is this this is a very basic
10:51 - physics engine I have a particle that
10:55 - has a position it has a velocity which
10:56 - is an arrow that tells the position
10:58 - where to go next frame and I have an
11:00 - acceleration which tells the velocity
11:02 - you should turn you should slow down and
11:03 - should speed up and that's happening
11:05 - here in this update function now if you
11:09 - recall I said here's this thing called a
11:12 - force and the force is vector that is
11:25 - going to I want to have this particle be
11:27 - attracted to the attractor wherever it
11:29 - is so I need to calculate a vector
11:31 - that's always pointing from this object
11:35 - this particles location towards the
11:37 - attractor and how do I do that so
11:41 - easiest thing easiest way to get an
11:44 - arrow that points from one position to
11:45 - another position is to subtract those
11:48 - two positions together so this is where
11:50 - on this dark what I need to do is write
11:52 - in that attract function I need to
11:54 - figure out this force now I there's lots
11:57 - of things going on here so there's three
11:59 - things one is I need to figure out this
12:01 - force so I need to know how does how do
12:03 - I get an arrow that points from the
12:04 - partial to the attractor I need to
12:06 - figure out how well how make sure that
12:08 - arrow B is it a weak force is it a
12:10 - strong force that strength of it is
12:11 - coming from this formula that we're kind
12:13 - of working out over here but beyond that
12:15 - I'm staying it's a force and if I come
12:18 - over here position velocity acceleration
12:20 - what's the relationship of force to
12:23 - position velocity acceleration well you
12:25 - might be familiar with Isaac Newton and
12:28 - there's a bunch of laws I'm sure they're
12:29 - all very important and interesting but
12:32 - the law that I'm interested in is force
12:34 - equals mass times acceleration what did
12:37 - I say about simplifying our world to
12:39 - just make the mass of everything one
12:41 - yeah so the mass of this is one then
12:44 - really force equals acceleration so
12:47 - force is a vector that causes a mass of
12:50 - course it's a vector that causes an
12:51 - object with mass to accelerate and so we
12:54 - can actually just if I could figure out
12:55 - this attraction force now
12:57 - just put that right into acceleration
12:58 - and our simulation is going to do
13:00 - exactly what we wanted to do I hope okay
13:03 - so I'm coming back over here
13:05 - use the Force I think it's the proper
13:07 - terminology here let me use before okay
13:13 - now I've lost my train of thought okay
13:16 - so let's put all this stuff back so to
13:20 - speak empty vectors and let's come here
13:24 - so what how do I do this I need what did
13:26 - I say I need a vector that points from
13:29 - the particles position to the target the
13:31 - way I get an arrow that points there is
13:33 - that they target - the particles
13:35 - position so I'm going to say var
13:38 - Direction equals P five dot vector dot
13:41 - subtract target - this dot now this is a
13:47 - just about the most awkward way I could
13:49 - ever possibly think to write this but
13:51 - just for the sake of argument I'm going
13:53 - to put here in the comment I'm going to
13:56 - put comments bar dir equals this target
14:00 - minus this dot pot this is really what I
14:04 - want to do right I want to say give me a
14:07 - direction of vector that points from the
14:09 - position to float sorry yeah from the
14:11 - position to the target by subtracting
14:13 - the two positions but the minus operator
14:15 - doesn't work with vector objects in
14:18 - JavaScript other programming
14:19 - environments you can kind of overload
14:21 - the operators and do fancy things so
14:23 - what I need to do is use the subtract
14:25 - function that's Carbet p5 dot vector and
14:27 - this will give me a new vector that is a
14:29 - result of target minus position now so
14:34 - now I have a vector that points all the
14:37 - way like this so the question now is how
14:39 - big should that vector be should it be
14:42 - short should it be long should it be
14:44 - medium and there's lots of ways you
14:47 - could decide I'm going to use this
14:48 - formula G divided by distance squared
14:51 - I'm gonna consider the mass system so I
14:53 - want to have an inversely proportional
14:55 - distance so let's figure out how we can
14:57 - do that now one thing that's nice here
14:58 - is this vector that points all the way
15:01 - from one object to the other that is the
15:04 - distance and actually I can just get
15:08 - distance
15:09 - where is the direction that that vector
15:12 - the length of it is distance and if I
15:13 - want this been squared there's actually
15:15 - a function I believe in b5 called nag sq
15:18 - for magnitude squared so this is giving
15:21 - me that value distance square that's on
15:24 - the bottom of our calculation now I also
15:26 - need to figure out what the universal
15:28 - gravitational constant should be let's
15:30 - Google the universal grunt to get
15:33 - tickets to the universal gravitational
15:34 - constant concert again you would make my
15:36 - bad joke so if anyone could get me
15:38 - tickets to those I'll take Hamilton
15:40 - tickets - that's fine so this is the
15:43 - universal gravitational constant let's
15:46 - just use a little bit of something from
15:47 - that from in our code just for fun so
15:51 - I'm going to say again I could just make
15:53 - this up bar G equals that number so now
15:57 - the magnitude is a G divided by d
16:04 - squared so I'm now I've got a vector
16:07 - pointing from Target to a pointing from
16:13 - position to target I have the distance
16:16 - squared I have a pretend Universal
16:18 - gravitational constant and now I have
16:19 - the magnitude so what I need to do is
16:21 - say dir set mag that magnitude so what
16:26 - this set mag function does is it takes a
16:28 - vector of any length and keeps its
16:30 - direction but sets this blanks to the
16:32 - lengths that I want to so I don't like
16:34 - the fact that I'm using I'm going to say
16:35 - strength or something because it's
16:37 - really the strength of the force and I
16:38 - think this should really be called force
16:40 - because that's what I'm doing ultimately
16:41 - as I'm calculating this force so
16:44 - ultimately I started with a force that's
16:46 - the full distance then I'm getting the
16:48 - distance squared making up the
16:49 - gravitational constant constant copying
16:51 - the strength and setting it and now what
16:52 - do I do the acceleration equals force so
16:56 - in this case let's take a look and see
16:59 - what we've got
16:59 - so now if I call particle attracted
17:06 - particle update and particles show I
17:08 - should calculate a force in the
17:11 - attracted function that force will go
17:14 - into the acceleration which will go into
17:17 - the velocity which will go into the
17:18 - location which updates location and then
17:19 - we'll draw
17:20 - here we go and sad trombone it up okay
17:31 - this guy's always desist on this dot
17:34 - acceleration let's let's just hard code
17:38 - to strength for a second as one oh it's
17:41 - working so there we go we can see now
17:44 - that it is experiencing that attraction
17:47 - it's just I got to really think about
17:49 - the sort of scaling of this so it's very
17:55 - very weak to see how it's moving just a
17:57 - little bit now it's getting closer so
17:59 - it's going to get stronger and stronger
18:00 - so this this is really like I got a
18:02 - really start tuning stuff here and one
18:04 - thing that I'm going to do I think
18:06 - that's really going to help things a
18:08 - little bit is one one thing I could do
18:10 - is I could just you know I want to have
18:13 - a much stronger gravitational constant
18:15 - and but look what happened just there
18:20 - whoops let me run that again the issue
18:23 - is boom explosion that force is so
18:26 - strong you know the Apollo moon missions
18:29 - where they had to figure out how to like
18:30 - go around the moon calculate the
18:33 - students properly and slingshot to get
18:35 - back to earth well I've got a sort of
18:36 - very extreme version of that happening
18:38 - here so one thing that I think would be
18:40 - helpful to do is to constrain this
18:43 - distance squared value because I could
18:46 - you realize once once that particle is
18:48 - so close the force divided by distance
18:51 - squared is so big that that's just going
18:53 - to spin out of control
18:54 - so I'm going to say a distance squared
18:56 - equals constrain itself between I'm
19:00 - going to say 25 and 10 what's what's
19:04 - maybe I don't know 400 or something
19:08 - so we're 500 so I just don't want I
19:11 - always want that force to be at play and
19:13 - don't want it to get so so big and now
19:16 - let me do this so now we can see I now
19:19 - have a particle that's attracted to this
19:22 - particular attractor and you can see
19:24 - that getting some interesting behavior
19:26 - but really I've done is barely anything
19:28 - yet but this attraction is
19:31 - okay okay so now let's try to do some
19:36 - stuff that's a little bit more
19:37 - interesting so for example let me at
19:41 - least give this vector a random velocity
19:44 - to start and we'll see so now it
19:50 - actually has a random velocity to start
19:51 - so it's not pointing directly at it and
19:54 - the other thing that I want to do I
19:55 - think which would be interesting to see
19:57 - is kind of draw some trail so I'm going
19:59 - to put back round here and so we're
20:03 - going to see sort of its path a little
20:04 - bit more so now what we've got is a
20:06 - single particle drawing a path as it
20:09 - kind of orbits this now interestingly
20:11 - enough another cochons I wanted today
20:13 - was this rose petal challenge and
20:15 - strangely the attraction is giving me
20:17 - this nice kind of oscillating pattern
20:19 - behavior around around around the actual
20:26 - center itself okay so let's try to let's
20:29 - try to be a bit more thoughtful about
20:31 - this first thing I want to do is I try
20:34 - to say that I want to add multiple
20:35 - tractors or multiple particles but let's
20:37 - add multiple particles first so let's
20:39 - make an array for the particles and
20:47 - let's let's add all those particles to
20:53 - that array particles dot push new
20:56 - particle I'm going to destruct them all
20:58 - in the same spot and then same exact for
21:02 - loop so I don't need it for the
21:07 - attractor and I can say var particle
21:12 - equals particles index I so this is me
21:15 - now having a bunch of particles and
21:17 - having them all do the same thing and
21:19 - what did I get wrong here I don't see an
21:24 - error I don't have a length yet for the
21:28 - particles that's a good point let's see
21:30 - how many do I want to add let's add 50
21:32 - and we can see there's all my particles
21:36 - all being attracted I all started with a
21:38 - slightly different initial velocity so
21:40 - they're all going to have a different
21:41 - pattern
21:41 - and I think like it's so extreme what
21:44 - I'm seeing here so I want to just draw
21:46 - them with a little look with a lot of
21:48 - alpha and we'll sort of see these paths
21:52 - that they're creating okay so let's just
21:54 - run for a little bit you can see now
21:56 - that I've got something everything is
21:57 - really because of the constraints that I
21:59 - put in it everything is kind they've all
22:01 - started in the same spot and their
22:03 - initial velocity is all the same and our
22:05 - masses are all considered one really
22:07 - getting a very very uniform almost like
22:12 - nucleus electron like kind of pattern
22:15 - here so this is um so this is just a
22:19 - beginning point now let's think about
22:21 - what happens if we start to add multiple
22:25 - attractors actually I want to vary this
22:29 - a little more before I do that so one
22:31 - thing I would like to do is I think I
22:35 - think I would like to give it the
22:38 - magnitude of its initial velocity
22:40 - something that's a little bit more
22:41 - variable just to sort of see so this now
22:44 - is going to be quite a bit more variable
22:47 - so the initial velocity some of them are
22:49 - much stronger than the others and I
22:51 - think just to look at it for right now I
22:53 - want to be able to see the paths a bit
22:55 - more so you can see here now everything
22:58 - is circling and being attracted okay so
23:02 - I don't know if I actually like it's
23:04 - kind of a bit of a mess not almost like
23:05 - it's better when it was much more
23:06 - uniform but what I would like to do now
23:10 - is add multiple attractors in multiple
23:13 - places and see how that works so let's
23:16 - go back first of all to just a single
23:19 - particle and have the particle once
23:22 - again have very little alpha and we can
23:25 - see here's my single particle being
23:26 - attracted to this particular attraction
23:28 - point now what I want to do is add an
23:30 - array of attractors okay so I'm going to
23:33 - go to the sketch and I'm going to say
23:35 - attractors equals an array and now I'm
23:39 - going to say also the same exact thing
23:41 - for the attractors what I want to do is
23:46 - say attractors push create vector and
23:50 - here I'm just going to give them a
23:52 - random location
23:52 - random with random height okay so now
23:57 - here I want this exact loop attracters
24:05 - dot length and I want to say attractors
24:08 - index I and attractors index I so I just
24:12 - want to see I'm going to comment out the
24:14 - particles for a second I just want to
24:16 - see does this get me a bunch of
24:18 - attractors on the screen
24:19 - I missed attractor is not defined where
24:24 - attract doors s there okay so I only see
24:30 - one did I open I only made one
24:31 - let's make ten okay so now you can see
24:33 - this is each time i refresh the page I
24:35 - get a random assortment of these
24:37 - attractor dots at different spots so now
24:40 - I want to see if I can have the
24:42 - particles get accumulate their
24:45 - attraction to all of those points okay
24:49 - so here notice how I had particles so
24:52 - what I could actually do here is in when
24:55 - I'm looping through there's so many
24:57 - different ways I could do this but I'm
24:58 - actually just going to put this loop of
25:01 - the attractors inside the particle loop
25:04 - there's a bunch of different ways you
25:05 - could do this this needs to now BJ and I
25:10 - need to say attractors index J now this
25:14 - actually isn't going to work but this is
25:16 - the idea there's a big problem here but
25:19 - so first let me draw all the attractors
25:20 - then for every particle let me have the
25:23 - particle interface with all the
25:25 - attractors that update and show itself
25:26 - and if we do this we should see here's a
25:29 - particle that looks like it could be
25:30 - working kind of just left the window we
25:34 - run it again the issue is actually it's
25:37 - not being attracted to all of the
25:39 - attractors it's being attracted to just
25:42 - the very last one let me show you what I
25:44 - mean by that in the attractive function
25:47 - here I'm setting
25:51 - acceleration equal to that force and the
25:54 - way that forces the way that an object
25:56 - behaves in an environment where there
25:58 - are multiple forces is its resulting
26:01 - acceleration is the result of the sum of
26:04 - all the forces
26:05 - at play so you can't just say set the
26:07 - acceleration to this attraction sets the
26:09 - acceleration list attraction to this one
26:10 - to this one I've just got the last one I
26:12 - need to add them all together this is
26:14 - known as force accumulation so it's
26:16 - really as simple as me saying
26:17 - acceleration dot add force now there's
26:20 - another issue here the way that force
26:22 - accumulation works is at every moment in
26:24 - time we start from no acceleration and
26:26 - add all the forces together then we move
26:29 - then we start over from no acceleration
26:31 - and add all the forces together and then
26:33 - we move the problem with this is I need
26:35 - to make sure that acceleration is
26:37 - cleared out to zero every single time
26:40 - and a quick way I can do that is once
26:42 - I'm done with updating I can just
26:44 - multiply the acceleration vector of time
26:47 - zero because if I take a vector and
26:48 - multiply its components by zero its
26:50 - zeros everything out so that's a quick
26:52 - way that I can do that okay
26:54 - so let's see what happens now this is
26:58 - now it's hard to sort of know exactly
27:00 - what's going on but this particle is
27:02 - experiencing an attraction force to all
27:05 - of the other attraction points around I
27:08 - wonder if we just had two attraction
27:09 - points to be more clear or if I started
27:11 - with a lot of particles so let's go back
27:14 - to let's keep that let's take this out
27:18 - let's start all the particles at the
27:20 - same location and actually I think it
27:23 - might make sense to start all the
27:25 - particles in the center and let's try to
27:30 - just do ten particles and see what
27:32 - happens
27:35 - what oh look at this beautiful amazing
27:38 - result
27:39 - yay coating challenge bug is not the
27:43 - result that I was hoping for by any
27:45 - means whatsoever let's so let's see what
27:49 - we did I might have a mistake in the
27:50 - code actually because that's kind of a
27:52 - weird issue in the chat I'm seeing the
27:56 - comment the forces are too weak for the
27:58 - faraway attractors so that certainly
28:00 - makes a big difference here what I would
28:02 - like to actually see is a different way
28:04 - I want to see this like layer itself you
28:07 - know we're kind of slowly over time so a
28:10 - couple things one is I would prefer not
28:12 - to actually draw the attractors so let's
28:17 - not bother to draw the attractor
28:19 - let's go back to the particles and one
28:21 - thing that I want to do is I want to
28:23 - create a vector that its previous
28:25 - position and then each time after it's
28:33 - drawn I want to set disc previous x
28:39 - equals this pause X I want to save its
28:41 - last position this previous dot y equals
28:45 - this pause that Y because I think it
28:48 - might be nice to actually connect its
28:50 - previous location with a line so right
28:54 - now you're noticing that I don't really
28:57 - see its path because the dots kick Boop
29:01 - when it moves quickly the doctors so far
29:02 - now mostly just have this mess but if I
29:04 - connect it with line there's going to be
29:05 - a little bit more clear I'm going to
29:07 - change the stroke weight to one and I'm
29:09 - going to give it a lot less a lot more
29:11 - alpha and we'll see what sort of paths I
29:14 - get here so you can see bit more clearly
29:16 - what I've done is to kind of get these
29:18 - lines so let's run for a little bit
29:21 - so what I'll let this run for a little
29:24 - bit but what I want to do is also I
29:27 - think thinking about how I do this
29:28 - constraint is probably so that the
29:34 - forces are always at play even if it's
29:35 - far away it's going to be kind of give
29:38 - it more of a dynamic quality I could
29:42 - also do something where yeah this is you
29:45 - could see now I'm getting something more
29:47 - like what I was hoping to get is some
29:49 - more regular kind of patterns I kind of
29:52 - I guess with the Alpha over it like
29:54 - letting it run for a long time might be
29:56 - interest to be nice to watch but I don't
29:59 - have the patience for it right now so
30:01 - I'm going to go just back to the
30:02 - particle and draw it with a lot less
30:04 - alpha and then one thing I want to do is
30:06 - let's try let's go back to look I'm just
30:13 - curious what happens if I let the
30:18 - particles all start at a random location
30:21 - but I actually just don't give them an
30:24 - initial velocity everything might settle
30:28 - into that's kind of a nice
30:30 - everything might settle into something
30:33 - of a regular pattern and I'm going to do
30:38 - that by I'm also going to I'm going to
30:42 - constrain this a little bit more and I'm
30:46 - going to also add you know 500 particles
30:50 - into Prague and make it run way too slow
30:52 - yeah so this is more like what I was
30:54 - hoping to see and now you can see it's
30:56 - too many particles and the Alpha isn't
30:58 - enough
30:58 - so let's lower that and let's let's also
31:04 - lower the Alpha a little bit more and
31:06 - let's see what we get so you can see
31:08 - here I'm starting to get some patterns
31:11 - that might be a bit more regular to
31:15 - constrain I you know really there's like
31:19 - so much tuning that I really need to do
31:22 - to see if I can get some more regular
31:25 - patterns I also you know I'm kind of
31:29 - sometimes I wanted them to be random
31:31 - sometimes I don't let's have them I just
31:34 - want to sort of see now back to the
31:35 - middle dress like this and then let's
31:42 - give them a little initial velocity so
31:47 - let's try this
31:48 - look where did I miss a I missed
31:54 - something I missed the parenthesis so
31:58 - yeah so you can see up that I'm going to
32:01 - get some interesting kind of regular ish
32:03 - patterns just based on based on the kind
32:09 - of initial arrangement of the particle
32:11 - of those attractors themselves and this
32:13 - is kind of what I was hoping to kind of
32:15 - see now there's so much more you could
32:18 - do with this if you're more thoughtful
32:19 - about about about how you arrange the
32:25 - attractors how you set the initial
32:26 - condition so many more possibilities
32:29 - here one thing that I think might help
32:31 - us tune this and figure out how to make
32:33 - it produce visuals that we might like
32:35 - more is let's see if we can actually
32:36 - position the attractors with the mouse
32:38 - so what I'm going to do is just
32:40 - completely
32:41 - comment out the attractors and I'm going
32:45 - to start this sketch you can see here
32:46 - all here a bunch of particles all
32:48 - randomly positioned on the sketch and
32:50 - you know I could even have you know a
32:52 - thousand of them you can see there's a
32:54 - thousand particles randomly positioned
32:55 - on the sketch but there's no attractors
32:57 - because once it gets to here the length
33:00 - of the attractor is a zero so what I
33:01 - want to do is I'm going to add function
33:03 - mousepressed and I've also set the
33:06 - attractors now to be green to draw them
33:09 - so I could see them right here which I
33:11 - just added that a second ago that you
33:14 - did seek this is that part out okay but
33:17 - what I'm going to do is add so I'm going
33:19 - to say a tractors actually I mean
33:23 - exactly what I had here this line of
33:26 - code but I'm going to say instead of at
33:29 - a random location I'm going to add the
33:32 - mouse location okay so let's see what
33:37 - happens now so there's a lot of
33:39 - particles and if I now click right here
33:42 - we should see everything's attracted to
33:45 - that particular spot okay so everything
33:47 - is coming in and zooming to that spot
33:50 - now let me add another one here and we
33:54 - should see now that everything is both
33:56 - attracted to both both attractors and I
34:02 - would expect to see something like a
34:05 - little bit of a figure eight almost
34:07 - style pattern around both of them and I
34:10 - can add another attractor over here and
34:12 - one up here and one up here and you know
34:15 - what might be helpful here to see
34:16 - actually it's for me to just for right
34:19 - now just for right now what I might like
34:23 - to do is put background and draw so we
34:27 - can see now these are very alpha II so I
34:30 - got to go back to the particle object
34:32 - and remove the Alpha and we can see now
34:36 - and we can see now the particles all
34:39 - being attracted to here being attracted
34:41 - to and and what happens when I start to
34:43 - add multiple attractors and even if i
34:46 - refresh let me try to put them in a
34:48 - circle and see what we get so here we
34:53 - can start to see
34:54 - a lot of interesting possibilities as
34:56 - these particles are attracted and they
35:00 - start to almost swim around and these
35:02 - different and if we drew trails and
35:03 - thought about color we would probably
35:05 - get interesting dynamics in terms of the
35:07 - kind of patterns that might be painted
35:09 - here in the surface now I want to add
35:12 - something else what I would like to do
35:15 - is also is think about what happens if
35:18 - these attractors are repulsive instead
35:21 - of if the particles are repelled by them
35:25 - rather than attracted to them so what
35:27 - else you to do that really quickly is
35:29 - just right here in that attraction
35:32 - function I am going to multiply the
35:39 - force by negative one and let's see what
35:41 - happens there so I'm going to add
35:42 - repulsive force so let's add one over
35:45 - here now you can see quickly everything
35:46 - is just going to leave the window so in
35:50 - that sense you know not so exciting
35:53 - everything is just going to leave the
35:54 - window what is however every other
35:58 - particle I click is rook so when I click
36:01 - first it's an attractor then when I
36:03 - click it's a repeller so I'm going to do
36:06 - that just by saying in the in this and
36:13 - say if I modulus two equals zero
36:16 - draw it as green else draw it as red so
36:23 - red for being a repeller so we can see
36:26 - now as I click I get green red green red
36:28 - now they're all repellers right now but
36:30 - the idea here is what I want to do is
36:32 - also change the direction of the force
36:35 - so this is a goofy way I should probably
36:37 - make again a detractor object that has a
36:39 - kind of weight to it but I'm just going
36:41 - to pass in J right here to that
36:45 - attraction function and I'm going to say
36:47 - if J modulus two does not equal zero
36:51 - then multiplies by negative one or if it
36:54 - equals one it's another way of saying
36:55 - that equals one then so now if I run
37:00 - this again if I click look we've got an
37:04 - error message I made a mistake J is not
37:06 - defined particle
37:08 - 9:34 oh I need to add that as an
37:12 - argument here so if I click here we can
37:16 - see everything is now attracted to here
37:19 - and then if I add this it's repelled if
37:22 - I add this it's repelled subtracted
37:24 - repelled the taxes so we can sort of see
37:27 - I've got it I should be more thoughtful
37:29 - about how I'm doing this so one thing is
37:30 - let's make this a little bit easier to
37:32 - see with the particles I'm going to make
37:35 - the particles have a stroke weight of 4
37:37 - so you can see them more easily and let
37:39 - me think what if I put repulsion points
37:42 - around the edges and attraction points
37:45 - in the center look a guy lost track of
37:52 - what I was doing so there's lots of
37:56 - great suggestions in the chat what I
37:58 - would encourage you to do is to
38:01 - implement there's so many problems that
38:02 - I've made here so I'd encourage you to
38:05 - do is think about how are you adding
38:08 - attractors how are you adding repellers
38:11 - where are they going how you how are you
38:13 - adding the particles what are the what
38:14 - are the parameters of the particles how
38:16 - fast can they go how slow can they go
38:17 - what's the strength of the various
38:19 - forces and just see what types of
38:21 - dynamic systems and painting systems and
38:24 - patterns you could possibly generate
38:25 - from justice system of particles and
38:28 - attractors and repellers the other thing
38:30 - that you might do is you might have an
38:32 - attractor where the particle is
38:36 - attracted to it but once it gets a
38:38 - certain distance to it or I should just
38:40 - do this now it's repelled let's try that
38:43 - for a second so for example what if I go
38:47 - back and make them all forget about this
38:54 - forget about this whole i and j thing
38:58 - let's just make them all all attractors
39:04 - so to speak and then here in this
39:07 - attractive function if
39:14 - if you know what I'm going to do here
39:18 - just for a second I'm just a fourth
39:19 - magnitude equals constrain I'm going to
39:25 - make this fog just up that max squared
39:28 - even though it's like an ice deficiency
39:29 - it kind of confused me because I'm used
39:31 - to thinking distance not in terms of
39:33 - like squared so this I think will be a
39:35 - little bit easier to sort of tune it but
39:37 - what I want to do is say if that
39:40 - distance value is less than if the
39:48 - distance value if it was within like a
39:50 - hundred pixels or maybe with if it's
39:54 - within let's say within 20 pixels then
39:57 - force multiplied by negative one so now
40:01 - I have a particle that's always
40:02 - attracted but when it gets close to the
40:04 - attractor it actually is repelled and so
40:08 - let's see here looks V squared is not
40:12 - defined D times D and so now you can see
40:17 - whoa did I do that okay let's think
40:19 - about this I might have done this in a
40:21 - weird place so oh I had some times
40:29 - negative one there sorry so look at that
40:33 - they get kind of like stumped right
40:36 - that's kind of interesting that's pretty
40:40 - interesting so what happens now if I add
40:43 - multiple ones though air whoa whoa this
40:46 - is kind of crazy I don't have a lot of
40:52 - variation now they're really like except
40:56 - that that um that magnitude I think is
40:59 - so strong yeah this is more what I
41:02 - expected there we go
41:03 - so this is kind of what I was looking
41:06 - for it's kind of an interesting system I
41:08 - think to think about that they're
41:11 - repelled but and and now what might be
41:14 - more interesting also is if I what I'm
41:20 - going to do now is instead of adding the
41:23 - particles in set up I'm just going to
41:26 - add particles here we go
41:28 - this is what I meant to do all on I'm
41:30 - going to add particles one at a time in
41:32 - draw and what I'm going to do is also I
41:40 - think in the particles a lifespan and
41:41 - have them eventually have them
41:46 - eventually time I there's too many
41:47 - possibilities here I've lost my mind
41:49 - so I think I'm going to leave it at this
41:51 - oops a chat pointed out a really big
41:54 - error actually that I just had which is
41:56 - that in my particle object I'm supposed
41:59 - to divide by distance squared but this
42:02 - is actually G divided by D times the
42:04 - order of operations is off there's
42:06 - really neat parentheses around here
42:08 - which is going to massively weak in that
42:10 - force and you can see now that force is
42:14 - much much weaker but it's still kind of
42:17 - the same the same idea here and then if
42:19 - I put another one it's going to be
42:20 - attracted or repelled so one thing I
42:22 - might do is kind of like amusingly is
42:24 - like I could change and make the
42:26 - repulsion force much much stronger which
42:30 - you can see it's attracted but when it
42:32 - gets within a certain distance that
42:34 - repulsion force is really really strong
42:36 - and then I could also sort of think
42:38 - about tuning the attraction force and
42:41 - figure out and some of the chat asked by
42:44 - the way shouldn't that constrain between
42:45 - zero it could be but I definitely don't
42:47 - ever want to divide by zero so if I were
42:50 - really trying to be accurate about this
42:52 - I would constrain it by like point zero
42:54 - zero zero one but I'm trying to just
42:55 - kind of tune it in a way that the force
42:57 - is yeah there you go so now I made that
43:01 - repulsion force really really strong and
43:04 - you can see I don't know it's the point
43:06 - of what I'm doing is but these things
43:08 - are attracted to all these different
43:09 - attraction spots but they can't get
43:11 - close to them and so you can see and if
43:13 - I add another one right here then I'm
43:15 - kind of creating these little pockets
43:16 - that's kind of a nice little behavior
43:19 - and you can sort of see what I've got
43:21 - here I've got all this stuff trying to
43:22 - get attractive but then being repelled
43:24 - when it's closed so I've gone off a
43:26 - little bit of the deep end here with
43:28 - this kind of attraction repulsion thing
43:30 - and I think what would probably be more
43:33 - interesting or what I again I said just
43:36 - a bunch of times and now this videos
43:38 - being edited I don't know where my head
43:39 - is at any
43:40 - but let me wrap this up so the tools
43:43 - that you have now from this example are
43:45 - the idea of calculation calculating a
43:48 - force between two two positions so the
43:52 - attractors are fixed but those could be
43:54 - particles that move all particles could
43:56 - be attracted or repelled from all other
43:57 - particles so that's something you could
43:59 - add to this you could think about
44:00 - drawing trails with alpha and picking
44:02 - color where you start the particles the
44:04 - strength of the attractions how you
44:07 - constrain that distance whether it's
44:08 - stronger when it's closed or whether
44:10 - it's farther so every parameter every
44:12 - variable everything that defines how
44:14 - these particles move could be something
44:16 - that you could tweak and so I hope that
44:18 - you create some types of simulations or
44:20 - paintings or algorithmic you know what
44:23 - if you took what you had an image and
44:25 - you kind of put a traction point all
44:27 - along the contours of the image and then
44:29 - fill that in as the particle and then
44:30 - has those particles be the colors of the
44:32 - image could you paint a picture that way
44:34 - because you make an installation where
44:35 - the attraction particles are where the
44:37 - user's hand is there's so many
44:39 - possibilities here so I hope you make
44:40 - something with this and discover
44:42 - something interesting and make it and
44:44 - share it with me in the comments or on
44:46 - Twitter at Schiffman if you have any
44:48 - complaints please send them I don't know
44:51 - where you should send them sent them to
44:52 - me I suppose that I can understand you
44:54 - having a lot of complaints after
44:55 - watching this particular video but I'll
44:57 - see you in another episode of the coding
44:59 - train
45:01 - [Music]

Cleaned transcript:

hello and welcome to a coding challenge so this coding challenge is called I think attraction is repulsion so I'm recording the intro after I did the challenge was kind of a mess and I never really got to the results that I wanted and I just sort of played around with a bunch of different possibilities so I'm asking you the Internet are you the Internet I'm not sure who the Internet is maybe it's you I don't know who it is you're watching uh to take my code and hopefully expand on and improve on it in interesting ways so what I was imagining was creating a lot of interesting attraction patterns by looking at the trail of various objects as they move and get attracted to different attraction points within a canvas and you can see if I just kind of google image search attractors and processing we're seeing a lot of visual images like this visual images like this so you can imagine drawing dropping a whole lot of particles into a space where this image of me behind me and having them sort of swarm around and move around all these invisible attraction points so where I got through with the challenge is kind of an end result that looks something like this and what I actually started doing was just showing in the challenge towards the end I decided to show you the difference between attraction and repulsion and if I add a bunch of these all around you can see what's happening is every single one of these attractor spots attracts these particles that are just entering the scene but when they get within a certain number of pixels of the attractor then they're repelled with a very strong force so this hasn't really produced a visual result necessarily that I'm happy with I would be interested what happens if I looked at the alpha blended trails over time but this example that I end with should have all the pieces for you to take and add your own design create spin on it so watch the video you'll learn a bit about how vectors work how forces work how you can add different objects with Mouse with arrays and looking at how you can accumulate different forces and have interplay between different particles moving around the screen and you're the mechanics of it will be there in the video I'll make lots of mistakes and get confused and the end you look at this video subscription find the code hopefully expand on it and make something much more beautiful and much more interesting because I really failed at doing that so I hope you enjoy this coding challenge oh I I guess I have to at this point like I have to blow the train whistle it's like I have a contract which doesn't exist but it says in there close the train whistle so that's what I've done enjoy the coding challenge and maybe you'll still be watching at the end or in the next video or you might run away forever and never come back which I would totally understand but anyways goodbye Susan alright let's get started so actually let me come over to the whiteboard the first thing that I need to do basically visit what I need for this example I want to have two kinds of objects in my world I want to have something that is an attractor object and honestly I don't think I need a full on a tractor object in this case the attractor can actually just be a single vector right all I care about for the attractor is its XY location where it is so I want to have an attractor that's a thing that's drawn on the screen and then I want to have particles so I want a single particle which is like a dot and I want that dot to be attracted to the attractor and how do I want to be attracted to the attractor by using gravitational attraction so the formula for gravitational attraction is the force of gravity expressed as a vector is equal to G which is the universal gravitational constant constant concert the gravitational concert the universal gravitational constant G times the mass of one object times the mass of another object divided by distance squared the truth of the matter is I think I could consider the mass of this parcel is 1 and the mass of this attractor as 1 so the mass of both of these are 1 then my formula becomes G divided by distance squared so really the force of force the force of gravity I want with the force the forces one with me me the forest one something like that anyway the force of gravity is really just a constant that we're going to make up stronger that weak mean this is a real number in the real world in physics but we're living in this fake pixel space we're just going to make up G and then we have this interesting question of Oh should the force forces strength be proportional or inversely proportional in distance so what this means is if the particle is really close to the attractor it's going to be really attracted to it if it's far away that attraction is going to be much weaker because that I'm dividing by the distance squared so as you maybe make a creative project out of what I'm showing you in this video you might play with this idea maybe it's weaker was closer stronger when it's further let's just sort of give it a try and then obviously at some point we could make this force not attraction but repulsion by just multiplying all this by a negative one so anyway let's go back to the code and start implementing some of this so here I am with the code there you are and I am going to start writing some code so I'm going to go over here and I have a look dude I have a particle I have a I have a separate JavaScript file called partial gif where I'm going to create a constructor function for with a particle and I'm going to just give it an X and y so the only thing I'm going to give to the particle and it starts with a location to start and I'm going to say this dot pod equals create vector X comma Y so now I have a particle with a position that the vector of an x and y now in the main sketch I'm going to say bar at rector and then I'm going to say attractor equals create vector a 200 200 now I could make an object for the attractor like I'm doing with the particle but right now my attractor is just going to be a thing that stays in one place doesn't need to animate it doesn't need to keep track of a color so just a single vector is fine then I want to see that everything's working so I'm gonna say background 51 and I'm going to draw maybe let's just use points for simplicity stroke 255 stroke weight 4 and I'm going to say point attractor dot X attract toward y and let's just take a look at this real quick hit refresh and there you go there's my attract York oh the dot in the center of the window yes okay so that's working now what I want to do is add a particle and I want to say a particle equals a new particle and I'm going to put it at I don't know 200 comma 100 and then I want to say something like particle particle show now I have a constructor function so that'll work I do not have a show function so right in here I need to say this dot show equals function and I'm just going to also do the same thing stroke 255 stroke wait for and then point to this cause X this dot pause why now I realized something I forgot to actually reference the particle itself in in the HTML file the particle J's file so I'm going to do that real quick okay great now what do I have I have a particle and I have an attractor look at that particle look at that attraction attract the particle okay so I guess I can't do it with motion in my hands we've got to add some code so let's go back to the sketch and what I'm going to do here is I want to say particle attracted to a tractor so I want to have some generic way of saying any given particle can be attracted to some vector and so I'm going to write a function in the particle object called attracted that receives an attractor so let's take a look at that and let's go to the particle that means I need a function this dot attracted equals function and that function I'm going to call it target so I'm going to give the argument at target the target is a thing that's attracting it so we're getting somewhere now but one thing I realized here is that I don't even have a way for this particle to experience any physics and so if you're interested in this or larger topic of physics engines and the kinds of citizenship you get Billa T kinds of physics engines you can use a separate thirdparty libraries I've got a lot of videos as part of the nature of code course about all the steps which I will reference in this video but right now I'm going to do this in a really quick way using something called Euler integration often mispronounced as Euler but it's boiler so I'm going to what I need is I need to integrate meeting I'm doing this thing where I'm saying how does position change over time this is actually what's the rate of change of position or the derivative of position it's this velocity and I'm going to make a vector zero zero then I'm going to make a vector which I'm going to use as acceleration create a vector of zero zero actually by the way if you just say create vector with no arguments it makes a vector zero zero what is a vector if that's not familiar to you a point you also reference the video that goes over the basics of vectors so I have position velocity and acceleration now what I want to do is add a function on maybe I'll call it update could call it step all physics engines need a sort of moment Yury step through time what is that time how many cycles of time are you iterating through depending on each frame of animation I'm doing this in a simple way every frame of through draw every frame of animation in my sketch I add velocity to position and I add acceleration to velocity so now if I were to actually give a velocity 0 comma 1 and I were to go to the sketch and also say particle update and run this sketch we can see there we go my particle is moving towards the attractor now I just happen to give it a hard coded the Lassa T pointed straight at it so if I go back to the particle and I say something like you know zero you know negative one comma zero point two you can see the particle is moving over that way now so the velocity is a vector that controls how that particle moves I could also give a particular acceleration like zero point zero point zero one and you can see now it's accelerate getting down right because that acceleration is accumulating onto it so this is this this is a very basic physics engine I have a particle that has a position it has a velocity which is an arrow that tells the position where to go next frame and I have an acceleration which tells the velocity you should turn you should slow down and should speed up and that's happening here in this update function now if you recall I said here's this thing called a force and the force is vector that is going to I want to have this particle be attracted to the attractor wherever it is so I need to calculate a vector that's always pointing from this object this particles location towards the attractor and how do I do that so easiest thing easiest way to get an arrow that points from one position to another position is to subtract those two positions together so this is where on this dark what I need to do is write in that attract function I need to figure out this force now I there's lots of things going on here so there's three things one is I need to figure out this force so I need to know how does how do I get an arrow that points from the partial to the attractor I need to figure out how well how make sure that arrow B is it a weak force is it a strong force that strength of it is coming from this formula that we're kind of working out over here but beyond that I'm staying it's a force and if I come over here position velocity acceleration what's the relationship of force to position velocity acceleration well you might be familiar with Isaac Newton and there's a bunch of laws I'm sure they're all very important and interesting but the law that I'm interested in is force equals mass times acceleration what did I say about simplifying our world to just make the mass of everything one yeah so the mass of this is one then really force equals acceleration so force is a vector that causes a mass of course it's a vector that causes an object with mass to accelerate and so we can actually just if I could figure out this attraction force now just put that right into acceleration and our simulation is going to do exactly what we wanted to do I hope okay so I'm coming back over here use the Force I think it's the proper terminology here let me use before okay now I've lost my train of thought okay so let's put all this stuff back so to speak empty vectors and let's come here so what how do I do this I need what did I say I need a vector that points from the particles position to the target the way I get an arrow that points there is that they target the particles position so I'm going to say var Direction equals P five dot vector dot subtract target this dot now this is a just about the most awkward way I could ever possibly think to write this but just for the sake of argument I'm going to put here in the comment I'm going to put comments bar dir equals this target minus this dot pot this is really what I want to do right I want to say give me a direction of vector that points from the position to float sorry yeah from the position to the target by subtracting the two positions but the minus operator doesn't work with vector objects in JavaScript other programming environments you can kind of overload the operators and do fancy things so what I need to do is use the subtract function that's Carbet p5 dot vector and this will give me a new vector that is a result of target minus position now so now I have a vector that points all the way like this so the question now is how big should that vector be should it be short should it be long should it be medium and there's lots of ways you could decide I'm going to use this formula G divided by distance squared I'm gonna consider the mass system so I want to have an inversely proportional distance so let's figure out how we can do that now one thing that's nice here is this vector that points all the way from one object to the other that is the distance and actually I can just get distance where is the direction that that vector the length of it is distance and if I want this been squared there's actually a function I believe in b5 called nag sq for magnitude squared so this is giving me that value distance square that's on the bottom of our calculation now I also need to figure out what the universal gravitational constant should be let's Google the universal grunt to get tickets to the universal gravitational constant concert again you would make my bad joke so if anyone could get me tickets to those I'll take Hamilton tickets that's fine so this is the universal gravitational constant let's just use a little bit of something from that from in our code just for fun so I'm going to say again I could just make this up bar G equals that number so now the magnitude is a G divided by d squared so I'm now I've got a vector pointing from Target to a pointing from position to target I have the distance squared I have a pretend Universal gravitational constant and now I have the magnitude so what I need to do is say dir set mag that magnitude so what this set mag function does is it takes a vector of any length and keeps its direction but sets this blanks to the lengths that I want to so I don't like the fact that I'm using I'm going to say strength or something because it's really the strength of the force and I think this should really be called force because that's what I'm doing ultimately as I'm calculating this force so ultimately I started with a force that's the full distance then I'm getting the distance squared making up the gravitational constant constant copying the strength and setting it and now what do I do the acceleration equals force so in this case let's take a look and see what we've got so now if I call particle attracted particle update and particles show I should calculate a force in the attracted function that force will go into the acceleration which will go into the velocity which will go into the location which updates location and then we'll draw here we go and sad trombone it up okay this guy's always desist on this dot acceleration let's let's just hard code to strength for a second as one oh it's working so there we go we can see now that it is experiencing that attraction it's just I got to really think about the sort of scaling of this so it's very very weak to see how it's moving just a little bit now it's getting closer so it's going to get stronger and stronger so this this is really like I got a really start tuning stuff here and one thing that I'm going to do I think that's really going to help things a little bit is one one thing I could do is I could just you know I want to have a much stronger gravitational constant and but look what happened just there whoops let me run that again the issue is boom explosion that force is so strong you know the Apollo moon missions where they had to figure out how to like go around the moon calculate the students properly and slingshot to get back to earth well I've got a sort of very extreme version of that happening here so one thing that I think would be helpful to do is to constrain this distance squared value because I could you realize once once that particle is so close the force divided by distance squared is so big that that's just going to spin out of control so I'm going to say a distance squared equals constrain itself between I'm going to say 25 and 10 what's what's maybe I don't know 400 or something so we're 500 so I just don't want I always want that force to be at play and don't want it to get so so big and now let me do this so now we can see I now have a particle that's attracted to this particular attractor and you can see that getting some interesting behavior but really I've done is barely anything yet but this attraction is okay okay so now let's try to do some stuff that's a little bit more interesting so for example let me at least give this vector a random velocity to start and we'll see so now it actually has a random velocity to start so it's not pointing directly at it and the other thing that I want to do I think which would be interesting to see is kind of draw some trail so I'm going to put back round here and so we're going to see sort of its path a little bit more so now what we've got is a single particle drawing a path as it kind of orbits this now interestingly enough another cochons I wanted today was this rose petal challenge and strangely the attraction is giving me this nice kind of oscillating pattern behavior around around around the actual center itself okay so let's try to let's try to be a bit more thoughtful about this first thing I want to do is I try to say that I want to add multiple tractors or multiple particles but let's add multiple particles first so let's make an array for the particles and let's let's add all those particles to that array particles dot push new particle I'm going to destruct them all in the same spot and then same exact for loop so I don't need it for the attractor and I can say var particle equals particles index I so this is me now having a bunch of particles and having them all do the same thing and what did I get wrong here I don't see an error I don't have a length yet for the particles that's a good point let's see how many do I want to add let's add 50 and we can see there's all my particles all being attracted I all started with a slightly different initial velocity so they're all going to have a different pattern and I think like it's so extreme what I'm seeing here so I want to just draw them with a little look with a lot of alpha and we'll sort of see these paths that they're creating okay so let's just run for a little bit you can see now that I've got something everything is really because of the constraints that I put in it everything is kind they've all started in the same spot and their initial velocity is all the same and our masses are all considered one really getting a very very uniform almost like nucleus electron like kind of pattern here so this is um so this is just a beginning point now let's think about what happens if we start to add multiple attractors actually I want to vary this a little more before I do that so one thing I would like to do is I think I think I would like to give it the magnitude of its initial velocity something that's a little bit more variable just to sort of see so this now is going to be quite a bit more variable so the initial velocity some of them are much stronger than the others and I think just to look at it for right now I want to be able to see the paths a bit more so you can see here now everything is circling and being attracted okay so I don't know if I actually like it's kind of a bit of a mess not almost like it's better when it was much more uniform but what I would like to do now is add multiple attractors in multiple places and see how that works so let's go back first of all to just a single particle and have the particle once again have very little alpha and we can see here's my single particle being attracted to this particular attraction point now what I want to do is add an array of attractors okay so I'm going to go to the sketch and I'm going to say attractors equals an array and now I'm going to say also the same exact thing for the attractors what I want to do is say attractors push create vector and here I'm just going to give them a random location random with random height okay so now here I want this exact loop attracters dot length and I want to say attractors index I and attractors index I so I just want to see I'm going to comment out the particles for a second I just want to see does this get me a bunch of attractors on the screen I missed attractor is not defined where attract doors s there okay so I only see one did I open I only made one let's make ten okay so now you can see this is each time i refresh the page I get a random assortment of these attractor dots at different spots so now I want to see if I can have the particles get accumulate their attraction to all of those points okay so here notice how I had particles so what I could actually do here is in when I'm looping through there's so many different ways I could do this but I'm actually just going to put this loop of the attractors inside the particle loop there's a bunch of different ways you could do this this needs to now BJ and I need to say attractors index J now this actually isn't going to work but this is the idea there's a big problem here but so first let me draw all the attractors then for every particle let me have the particle interface with all the attractors that update and show itself and if we do this we should see here's a particle that looks like it could be working kind of just left the window we run it again the issue is actually it's not being attracted to all of the attractors it's being attracted to just the very last one let me show you what I mean by that in the attractive function here I'm setting acceleration equal to that force and the way that forces the way that an object behaves in an environment where there are multiple forces is its resulting acceleration is the result of the sum of all the forces at play so you can't just say set the acceleration to this attraction sets the acceleration list attraction to this one to this one I've just got the last one I need to add them all together this is known as force accumulation so it's really as simple as me saying acceleration dot add force now there's another issue here the way that force accumulation works is at every moment in time we start from no acceleration and add all the forces together then we move then we start over from no acceleration and add all the forces together and then we move the problem with this is I need to make sure that acceleration is cleared out to zero every single time and a quick way I can do that is once I'm done with updating I can just multiply the acceleration vector of time zero because if I take a vector and multiply its components by zero its zeros everything out so that's a quick way that I can do that okay so let's see what happens now this is now it's hard to sort of know exactly what's going on but this particle is experiencing an attraction force to all of the other attraction points around I wonder if we just had two attraction points to be more clear or if I started with a lot of particles so let's go back to let's keep that let's take this out let's start all the particles at the same location and actually I think it might make sense to start all the particles in the center and let's try to just do ten particles and see what happens what oh look at this beautiful amazing result yay coating challenge bug is not the result that I was hoping for by any means whatsoever let's so let's see what we did I might have a mistake in the code actually because that's kind of a weird issue in the chat I'm seeing the comment the forces are too weak for the faraway attractors so that certainly makes a big difference here what I would like to actually see is a different way I want to see this like layer itself you know we're kind of slowly over time so a couple things one is I would prefer not to actually draw the attractors so let's not bother to draw the attractor let's go back to the particles and one thing that I want to do is I want to create a vector that its previous position and then each time after it's drawn I want to set disc previous x equals this pause X I want to save its last position this previous dot y equals this pause that Y because I think it might be nice to actually connect its previous location with a line so right now you're noticing that I don't really see its path because the dots kick Boop when it moves quickly the doctors so far now mostly just have this mess but if I connect it with line there's going to be a little bit more clear I'm going to change the stroke weight to one and I'm going to give it a lot less a lot more alpha and we'll see what sort of paths I get here so you can see bit more clearly what I've done is to kind of get these lines so let's run for a little bit so what I'll let this run for a little bit but what I want to do is also I think thinking about how I do this constraint is probably so that the forces are always at play even if it's far away it's going to be kind of give it more of a dynamic quality I could also do something where yeah this is you could see now I'm getting something more like what I was hoping to get is some more regular kind of patterns I kind of I guess with the Alpha over it like letting it run for a long time might be interest to be nice to watch but I don't have the patience for it right now so I'm going to go just back to the particle and draw it with a lot less alpha and then one thing I want to do is let's try let's go back to look I'm just curious what happens if I let the particles all start at a random location but I actually just don't give them an initial velocity everything might settle into that's kind of a nice everything might settle into something of a regular pattern and I'm going to do that by I'm also going to I'm going to constrain this a little bit more and I'm going to also add you know 500 particles into Prague and make it run way too slow yeah so this is more like what I was hoping to see and now you can see it's too many particles and the Alpha isn't enough so let's lower that and let's let's also lower the Alpha a little bit more and let's see what we get so you can see here I'm starting to get some patterns that might be a bit more regular to constrain I you know really there's like so much tuning that I really need to do to see if I can get some more regular patterns I also you know I'm kind of sometimes I wanted them to be random sometimes I don't let's have them I just want to sort of see now back to the middle dress like this and then let's give them a little initial velocity so let's try this look where did I miss a I missed something I missed the parenthesis so yeah so you can see up that I'm going to get some interesting kind of regular ish patterns just based on based on the kind of initial arrangement of the particle of those attractors themselves and this is kind of what I was hoping to kind of see now there's so much more you could do with this if you're more thoughtful about about about how you arrange the attractors how you set the initial condition so many more possibilities here one thing that I think might help us tune this and figure out how to make it produce visuals that we might like more is let's see if we can actually position the attractors with the mouse so what I'm going to do is just completely comment out the attractors and I'm going to start this sketch you can see here all here a bunch of particles all randomly positioned on the sketch and you know I could even have you know a thousand of them you can see there's a thousand particles randomly positioned on the sketch but there's no attractors because once it gets to here the length of the attractor is a zero so what I want to do is I'm going to add function mousepressed and I've also set the attractors now to be green to draw them so I could see them right here which I just added that a second ago that you did seek this is that part out okay but what I'm going to do is add so I'm going to say a tractors actually I mean exactly what I had here this line of code but I'm going to say instead of at a random location I'm going to add the mouse location okay so let's see what happens now so there's a lot of particles and if I now click right here we should see everything's attracted to that particular spot okay so everything is coming in and zooming to that spot now let me add another one here and we should see now that everything is both attracted to both both attractors and I would expect to see something like a little bit of a figure eight almost style pattern around both of them and I can add another attractor over here and one up here and one up here and you know what might be helpful here to see actually it's for me to just for right now just for right now what I might like to do is put background and draw so we can see now these are very alpha II so I got to go back to the particle object and remove the Alpha and we can see now and we can see now the particles all being attracted to here being attracted to and and what happens when I start to add multiple attractors and even if i refresh let me try to put them in a circle and see what we get so here we can start to see a lot of interesting possibilities as these particles are attracted and they start to almost swim around and these different and if we drew trails and thought about color we would probably get interesting dynamics in terms of the kind of patterns that might be painted here in the surface now I want to add something else what I would like to do is also is think about what happens if these attractors are repulsive instead of if the particles are repelled by them rather than attracted to them so what else you to do that really quickly is just right here in that attraction function I am going to multiply the force by negative one and let's see what happens there so I'm going to add repulsive force so let's add one over here now you can see quickly everything is just going to leave the window so in that sense you know not so exciting everything is just going to leave the window what is however every other particle I click is rook so when I click first it's an attractor then when I click it's a repeller so I'm going to do that just by saying in the in this and say if I modulus two equals zero draw it as green else draw it as red so red for being a repeller so we can see now as I click I get green red green red now they're all repellers right now but the idea here is what I want to do is also change the direction of the force so this is a goofy way I should probably make again a detractor object that has a kind of weight to it but I'm just going to pass in J right here to that attraction function and I'm going to say if J modulus two does not equal zero then multiplies by negative one or if it equals one it's another way of saying that equals one then so now if I run this again if I click look we've got an error message I made a mistake J is not defined particle 934 oh I need to add that as an argument here so if I click here we can see everything is now attracted to here and then if I add this it's repelled if I add this it's repelled subtracted repelled the taxes so we can sort of see I've got it I should be more thoughtful about how I'm doing this so one thing is let's make this a little bit easier to see with the particles I'm going to make the particles have a stroke weight of 4 so you can see them more easily and let me think what if I put repulsion points around the edges and attraction points in the center look a guy lost track of what I was doing so there's lots of great suggestions in the chat what I would encourage you to do is to implement there's so many problems that I've made here so I'd encourage you to do is think about how are you adding attractors how are you adding repellers where are they going how you how are you adding the particles what are the what are the parameters of the particles how fast can they go how slow can they go what's the strength of the various forces and just see what types of dynamic systems and painting systems and patterns you could possibly generate from justice system of particles and attractors and repellers the other thing that you might do is you might have an attractor where the particle is attracted to it but once it gets a certain distance to it or I should just do this now it's repelled let's try that for a second so for example what if I go back and make them all forget about this forget about this whole i and j thing let's just make them all all attractors so to speak and then here in this attractive function if if you know what I'm going to do here just for a second I'm just a fourth magnitude equals constrain I'm going to make this fog just up that max squared even though it's like an ice deficiency it kind of confused me because I'm used to thinking distance not in terms of like squared so this I think will be a little bit easier to sort of tune it but what I want to do is say if that distance value is less than if the distance value if it was within like a hundred pixels or maybe with if it's within let's say within 20 pixels then force multiplied by negative one so now I have a particle that's always attracted but when it gets close to the attractor it actually is repelled and so let's see here looks V squared is not defined D times D and so now you can see whoa did I do that okay let's think about this I might have done this in a weird place so oh I had some times negative one there sorry so look at that they get kind of like stumped right that's kind of interesting that's pretty interesting so what happens now if I add multiple ones though air whoa whoa this is kind of crazy I don't have a lot of variation now they're really like except that that um that magnitude I think is so strong yeah this is more what I expected there we go so this is kind of what I was looking for it's kind of an interesting system I think to think about that they're repelled but and and now what might be more interesting also is if I what I'm going to do now is instead of adding the particles in set up I'm just going to add particles here we go this is what I meant to do all on I'm going to add particles one at a time in draw and what I'm going to do is also I think in the particles a lifespan and have them eventually have them eventually time I there's too many possibilities here I've lost my mind so I think I'm going to leave it at this oops a chat pointed out a really big error actually that I just had which is that in my particle object I'm supposed to divide by distance squared but this is actually G divided by D times the order of operations is off there's really neat parentheses around here which is going to massively weak in that force and you can see now that force is much much weaker but it's still kind of the same the same idea here and then if I put another one it's going to be attracted or repelled so one thing I might do is kind of like amusingly is like I could change and make the repulsion force much much stronger which you can see it's attracted but when it gets within a certain distance that repulsion force is really really strong and then I could also sort of think about tuning the attraction force and figure out and some of the chat asked by the way shouldn't that constrain between zero it could be but I definitely don't ever want to divide by zero so if I were really trying to be accurate about this I would constrain it by like point zero zero zero one but I'm trying to just kind of tune it in a way that the force is yeah there you go so now I made that repulsion force really really strong and you can see I don't know it's the point of what I'm doing is but these things are attracted to all these different attraction spots but they can't get close to them and so you can see and if I add another one right here then I'm kind of creating these little pockets that's kind of a nice little behavior and you can sort of see what I've got here I've got all this stuff trying to get attractive but then being repelled when it's closed so I've gone off a little bit of the deep end here with this kind of attraction repulsion thing and I think what would probably be more interesting or what I again I said just a bunch of times and now this videos being edited I don't know where my head is at any but let me wrap this up so the tools that you have now from this example are the idea of calculation calculating a force between two two positions so the attractors are fixed but those could be particles that move all particles could be attracted or repelled from all other particles so that's something you could add to this you could think about drawing trails with alpha and picking color where you start the particles the strength of the attractions how you constrain that distance whether it's stronger when it's closed or whether it's farther so every parameter every variable everything that defines how these particles move could be something that you could tweak and so I hope that you create some types of simulations or paintings or algorithmic you know what if you took what you had an image and you kind of put a traction point all along the contours of the image and then fill that in as the particle and then has those particles be the colors of the image could you paint a picture that way because you make an installation where the attraction particles are where the user's hand is there's so many possibilities here so I hope you make something with this and discover something interesting and make it and share it with me in the comments or on Twitter at Schiffman if you have any complaints please send them I don't know where you should send them sent them to me I suppose that I can understand you having a lot of complaints after watching this particular video but I'll see you in another episode of the coding train
