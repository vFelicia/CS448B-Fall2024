With timestamps:

00:05 - so it's a little bit tragic that we've
00:07 - saved but is arguably possibly the most
00:09 - important aspect of all of this steering
00:12 - Behavior stuff till this video which is
00:14 - essentially at the end I don't know what
00:15 - number we're on here but if you're still
00:17 - with us if you're still with me here we
00:20 - go we've got something we've got
00:21 - something that's really going to allow
00:22 - you to use this stuff um in a much more
00:25 - flexible way in in all sorts of kinds of
00:28 - projects and what we what I'm talking
00:30 - about here is combining multiple
00:32 - steering behaviors this this may seem
00:34 - like an obvious thing to do and and I
00:36 - hope that it does but I want to look
00:38 - just briefly in this video at what it
00:40 - means technically to do that so you know
00:42 - we could list all the behaviors we've
00:44 - done so far like seek
00:47 - arrive flow field uh we did path we did
00:54 - separate alignment I think these are all
00:56 - the ones we've kind of looked at in the
00:58 - particular videos one at a time so in
01:01 - our first demonstration what I'm going
01:03 - to do is demonstrate for you combining
01:06 - seek and separate so this may seem this
01:11 - so first of all the idea of combining
01:13 - forces is absolutely something we've
01:15 - been do we've done before and I've been
01:16 - doing continuously throughout all these
01:18 - examples it's the whole reason why we
01:20 - wrote this apply force method right we
01:24 - wrote this apply force method so that we
01:27 - could call on an object apply Force
01:30 - gravity apply force wind apply Force
01:33 - nervous energy right we could just keep
01:35 - applying forces of the object it would
01:37 - accumulate them into the acceleration
01:39 - and move according to the net result of
01:41 - all those forces so essentially this is
01:43 - all we want to do we want to say things
01:46 - like um I'm going to write this down
01:48 - here
01:49 - apply Force
01:52 - seek and
01:55 - apply force uh separate
02:00 - so this is where hopefully this notion
02:02 - of combining forces is obvious to you
02:05 - right yeah we did this we did seek we
02:07 - did separate all I got to do is bring on
02:08 - both of those in the same example and
02:09 - call apply Force twice and that will in
02:12 - fact work but one thing we should add
02:14 - onto this remember we are thinking about
02:16 - autonomous agents and autonomous agents
02:19 - have this ability to make their own
02:21 - decisions According to some set of rules
02:23 - that govern their behavior and a rule a
02:27 - way of thinking of a rule that governs
02:29 - how you combine these for is is a
02:33 - weight right how important to a vehicle
02:37 - how important to think about yourself
02:40 - what's more important to you that you
02:42 - get to some Target or that you don't run
02:43 - into anyone on the way there you know
02:45 - for me I don't want to like bump into
02:47 - people and knock them over I'm very
02:48 - happy to move around them and I'll take
02:50 - longer to get to the Target somebody
02:51 - else might want to just Barrel through
02:53 - and knock everyone over they just want
02:54 - that you know cupcake or whatever is at
02:56 - the end of the line so this is something
02:58 - that we need to factor into how we
03:00 - program what are the weights of these
03:02 - forces and how can those weights be
03:04 - flexible so that different uh flexible
03:06 - either from vehicle to vehicle are
03:08 - flexible over time right think again
03:10 - about the simulation if the target is
03:12 - food and the separation is like avoiding
03:14 - other Predators when you're really
03:16 - hungry maybe seek is much more important
03:18 - than when you're not so hungry so we
03:20 - need some mechanism for doing this for
03:22 - how we can go buy these forces again
03:24 - this is a kind of a simple thing to do
03:26 - the hard part is figuring out the
03:28 - algorithms for each one of these forces
03:29 - is it's not too hard to look at
03:31 - combining them so let's look at a couple
03:33 - different scenarios in code and I think
03:35 - this video will hopefully be one of the
03:36 - shorter ones I always say I should never
03:39 - say that that means instantly it's going
03:40 - to be the longest one ever okay so first
03:44 - we're going to look at separation and
03:45 - seek so first I just want to run it and
03:48 - we can see here that these vehicles are
03:50 - both seeking the target which is the
03:52 - mouse the mouse and they're also trying
03:55 - to separate from each other right we
03:57 - could imagine what would happen without
03:58 - separation they're all just going to L
04:00 - right onto the mouse they're not going
04:01 - to care about occupying the same space
04:03 - so here we have an example of two
04:05 - steering forces combined great so let's
04:09 - take a look at this in the code so one
04:11 - thing that I'll point out here just to
04:14 - like only look at this for a second is
04:15 - we are calling apply Force twice this is
04:18 - the point apply Force separation apply
04:20 - Force seek that's what we're doing where
04:22 - are those forces coming from they're
04:24 - coming from two functions separate and
04:26 - seek now one thing I should note about
04:28 - this is look here is the seek function
04:31 - here's our seek function if you look at
04:32 - the seek function in a previous example
04:36 - what it will do is it will at the very
04:38 - end it will say apply Force some Force
04:42 - so we calculate we go through all this
04:43 - desired velocity calculate all this
04:45 - stuff get the steering force and then
04:47 - boom apply the force to the object put
04:49 - it in its acceleration but in this
04:51 - example we're not doing that in instead
04:54 - of saying apply Force we are returning
04:56 - steer to wherever it was we called it so
04:59 - we have a new function this new function
05:02 - is called apply behaviors apply
05:05 - behaviors is a function that I have
05:06 - added to this example to be the sort of
05:09 - centralized location where we manage all
05:11 - of the forces and the weights for those
05:14 - forces so first we ask for this from the
05:16 - separate function the separate Force
05:18 - then we ask from the seek function a
05:19 - force seeking Mouse X Mouse y then what
05:23 - do we do with those here this is the
05:25 - crucial crucial two lines of code we
05:28 - wait them separate ation force is
05:30 - weighted by a factor of two seek force
05:32 - is weighted by a factor of one now
05:35 - admittedly this is probably the worst
05:37 - possible way ever to do this because
05:39 - what are what are my weights they're
05:41 - hardcoded numbers that means they can
05:43 - never change over time and they are the
05:45 - same for every single vehicle ever in
05:47 - this system so this is my challenge to
05:49 - you my exercise to you is do something
05:51 - different you know you could think of
05:53 - having sliders or keyboard control to
05:55 - like control various weights you can
05:57 - control them by pearing noise you can
05:59 - make them all Rand random you could have
06:00 - some logic you know the the vehicle each
06:02 - vehicle has like a health value that
06:04 - like goes down over time and according
06:06 - to how fast it goes down it scales the
06:08 - weight of the different forces later
06:09 - we're going to see we're going to look
06:10 - at genetic algorithms could you evolve
06:13 - the like Optimal weights for this
06:14 - vehicle to behave a certain way there's
06:16 - so much potential just in these two
06:18 - lines of code of course all I've done is
06:20 - put the number two and one there but at
06:21 - least we can kind of begin to see a
06:23 - little bit of what's going on right what
06:25 - if I set the weight of separate to zero
06:29 - we can see here this is seek with no
06:30 - separation it's as if that Force doesn't
06:32 - exist if I go and put that to two and
06:35 - put seek to zero now we have we just
06:38 - have that separation example they don't
06:40 - care about the mouse anymore we could
06:42 - say hey let me have separate these super
06:44 - important and seek be just a little bit
06:46 - important you can see like maybe they're
06:49 - kind of seeking the mouse a little bit
06:50 - you can see they're like kind of coming
06:51 - into cluster but separation is so much
06:53 - more important so the varying weights of
06:56 - these objects is crucial to how this
06:59 - system behaves okay so let's take a look
07:03 - at a couple more
07:05 - examples the next example I want to look
07:08 - at is a crowd path following so this is
07:11 - just actually adding um there's not a
07:14 - lot to this one this is just adding
07:16 - separate to path following so you can
07:18 - see I can add a bunch more Vehicles here
07:20 - and what do we have here but just doing
07:21 - that just those two forces creates a
07:23 - very very Dynamic simulation because not
07:25 - only go back and compare this to path
07:27 - following without separation what we
07:29 - have is is something you could start to
07:30 - imagine modeling how people flow through
07:33 - a space how cars travel along the road
07:36 - again this is not a scientific model
07:38 - we're just trying to create the almost
07:39 - the illusion or feeling of that but you
07:41 - could imagine how um how powerful this
07:44 - could be by just adding multiple forces
07:46 - in here and and and and and altering it
07:49 - so this is another scenario where you
07:50 - can play with those weights and try to
07:51 - figure out ways of controlling them um
07:53 - what if all of a sudden their path
07:55 - falling goes off and they all go to seek
07:57 - something else but then they are they
07:59 - you know at every once in a while they
08:00 - leave the path and go do something else
08:02 - and then come back there's so much I
08:03 - can't I just I could just stay up all
08:05 - like the rest of my life program
08:07 - different combinations of steering
08:08 - forces and I don't I'm not going to do
08:10 - that because it's nice outside today but
08:12 - you you know you should think about that
08:14 - for when it's not so nice outside okay
08:16 - um now let's look at the the ultimate I
08:18 - say this is the pen ultimate the
08:19 - ultimate example of this which I was
08:21 - going to make a separate video about but
08:22 - I think we'll actually just look at it a
08:24 - little bit briefly because we already
08:25 - covered separation and Alignment in
08:27 - quite a bit of detail so let's just look
08:30 - at what happens when you
08:32 - combine um and I'm going to go to uh
08:36 - there's a sort of example here called
08:37 - flocking sliders which is just a version
08:40 - of the flocking example that allows me
08:41 - to control the weights so here we have
08:44 - our flocking simulation and we can see
08:46 - that we have this is full screen version
08:48 - with lots of little tiny boids oh so
08:50 - first of all Craig Reynolds went in in
08:53 - developing the flocking system called
08:55 - the vehicles now boids um is as a kind
08:58 - of variation of the word Birds I guess I
09:01 - think that's right anyway so I'm now I'm
09:02 - going to use the word term boy to talk
09:04 - about these creatures in this flocking
09:06 - simulation so what's going on here is we
09:08 - have the three rules so in case you
09:10 - didn't uh look at some of the earlier
09:12 - videos although I guess I should instead
09:13 - of saying that I should say or just a
09:16 - recap the three rules we have in
09:18 - flocking
09:20 - are
09:24 - separation
09:27 - alignment three
09:30 - cohesion and each one of these rules is
09:32 - incredibly simple on its own and
09:34 - produces a very simple obvious result
09:37 - what's amazing about this complex system
09:41 - is these rules for each object are very
09:43 - simple we put them together we put them
09:46 - together in a group we get a highly
09:49 - complex result not an an unpredictable
09:52 - result not a simple obvious one so
09:54 - separation
09:57 - means try to stay separate from your
10:00 - neighbors alignment
10:03 - means try to align your velocity with
10:06 - your neighbors and cohesion is the only
10:08 - one that we didn't Implement in a
10:09 - previous video mean steer towards the
10:12 - center of your neighbors so we have some
10:15 - like we have a tension here in a way
10:18 - between cooperation you could think of
10:20 - cohesion as cooperation stay together
10:22 - and competition separation compete for
10:25 - space so I think one of the things about
10:27 - complex systems that really makes them
10:28 - tick is this idea of competition and
10:31 - cooperation together in the same system
10:33 - so all of these three rules together
10:35 - produce this schooling like Behavior
10:37 - which we're seeing over here so a couple
10:39 - things that I will just demonstrate
10:40 - really quickly um you can't really see
10:43 - this but let's add a whole bunch more
10:45 - vehicles um up here I have a few uh
10:48 - sliders to be able to control the
10:50 - various forces here okay I'm going to
10:52 - talk through what I'm doing here and
10:53 - control some of the forces so I'm going
10:56 - to make the maximum Force higher a
10:58 - little bit lower maximum spe and I'm
10:59 - just going to show you first of all what
11:01 - happens when we only have separation so
11:04 - I'm going to make separation very high
11:06 - and we can see with separation the only
11:09 - thing going on here is don't run into
11:10 - your neighbor this is just exactly the
11:12 - same as the example we had before just
11:14 - all the little things are really tiny
11:15 - and there's lots more of them so that's
11:17 - separation that might be and now if I
11:19 - take separation off and I turn alignment
11:21 - all the way up you can see we get these
11:23 - clusters of objects trying to align with
11:25 - themselves again simple predictable
11:27 - result and eventually over time they're
11:29 - actually all going to move in the same
11:30 - direction now if I turn alignment off
11:33 - and I turn cohesion up we can see look
11:35 - these clusters come together they're
11:37 - trying to move towards the center and as
11:38 - they get within a certain range they
11:40 - suddenly come together this is kind of
11:41 - an interesting result just on its own
11:43 - you can see we have these kind of funny
11:45 - behaviors the point is once we combine
11:47 - them all together if I add a little
11:49 - alignment and I put separation back on
11:51 - and look at this like even now there's a
11:54 - bunch of different weights than what we
11:55 - started with and you almost have this
11:57 - more kind of frenetic insect like
12:00 - Behavior whereas the weights were more
12:01 - tuned towards uh more of a schooling or
12:04 - flocking like Behavior so this is
12:06 - something you can really really play
12:08 - with forever and and and use to for a
12:10 - variety of different effects and just to
12:12 - show you briefly so that's the um the
12:15 - actual example that's in the repository
12:17 - um connected to the book is 6.9 that you
12:20 - can find the one with the sliders as
12:21 - well which looks just a little bit more
12:23 - like this so you can see this kind of
12:25 - this is with a certain set of weights
12:26 - with a schooling like Behavior you can
12:28 - see it's alignment seems to be pretty
12:31 - strong in this one right they're really
12:32 - aligning with their neighbors but
12:33 - there's also a little bit of jockeying
12:34 - for space as well as I'm staying
12:37 - together as a group okay so one thing I
12:39 - want to point out so first I should say
12:42 - to you there's a couple exercises you
12:44 - could think about doing I had that list
12:45 - that I erased of all the forces here's
12:47 - something you should think about doing
12:49 - make a project that has every possible
12:52 - steering Force you can Implement have
12:54 - examples of or could Implement on your
12:55 - own and create an array of weights for
12:58 - all of those and see how you can um
13:01 - control those weights through some set
13:02 - of logic so first just try to control
13:06 - weights According to some set of rules
13:08 - don't have them hardcoded whether that's
13:09 - user interaction algorithmically through
13:12 - pearly noise or Randomness or by some
13:14 - logic according to how each vehicle
13:16 - behaves or what it's it sees in its
13:17 - environment another thing you might
13:19 - think about doing which I actually have
13:21 - an example of um is implementing well I
13:24 - don't have a full example of it but
13:26 - implementing Reynolds V so not Reynolds
13:29 - so if you read the book The
13:31 - computational Beauty of nature by Gary
13:33 - William flake I believe is the author um
13:36 - there's a long discussion of flocking
13:38 - systems in that book and Flake points
13:40 - out that what you don't see in Reynolds
13:42 - flocking
13:44 - system is all of the vehicle all of the
13:47 - birds or boyss in a formation that looks
13:50 - kind of like this which you might
13:51 - actually see in the sky if you look at
13:53 - birds flying together and he proposes
13:55 - what's what is unique about this there
13:57 - is nothing blocking
13:59 - the view of any of these vehicles and
14:02 - what he proposes is adding an additional
14:05 - Force additional steering Behavior which
14:08 - is that if a void is in front of you
14:11 - within your view steer away to get that
14:16 - vehicle out of your view keep your view
14:17 - clear and uh if you implement that you
14:20 - will get this formation which is really
14:21 - quite interesting so just to show you
14:23 - this actually involves the dot product
14:25 - and looking at the angle between two
14:27 - vectors and just to show you
14:30 - um uh the beginnings of that exercise
14:32 - 617 in the repository there's an example
14:35 - which implements just the beginning of
14:37 - that so the force is not implemented
14:39 - here the vew force but what you can see
14:41 - is um that any other vehicles that are
14:45 - within this blue vehicle's view um are
14:49 - colored red and one thing that I'll also
14:51 - say that's really important about these
14:52 - is you might be used to debugging your
14:54 - code by putting lots of print line
14:56 - statements everywhere when you figure
14:57 - out the locations print this if it's in
14:58 - it view print it's in my view another
15:00 - way of debugging that's really crucial
15:02 - for these steering Behavior like these
15:04 - scenarios that you're working on physics
15:05 - models is actually just draw stuff the
15:07 - screen so I know this is working because
15:10 - I'm able to to change the color of only
15:12 - the vehicles that are within this um Arc
15:15 - that I've drawn on the screen so anyway
15:16 - I've gone on a bit too long about this
15:18 - exercise but there's a bunch of stuff
15:19 - that you could try to do and hopefully
15:22 - um discuss somewhere when I when um
15:24 - someday these videos have more of a way
15:26 - of um sharing work and asking questions
15:28 - and discussing say with them right now
15:29 - they're just videos but there are
15:31 - comments anyway um so I will see you uh
15:33 - later in um whoa this is the last video
15:35 - so I think this actually marks the end
15:37 - of the steering Behavior stuff I I have
15:38 - some another example about optimizing
15:40 - flocking systems if there's too many
15:42 - elements in there which someday I will
15:43 - get to but you can take a look for those
15:45 - examples as well okay

Cleaned transcript:

so it's a little bit tragic that we've saved but is arguably possibly the most important aspect of all of this steering Behavior stuff till this video which is essentially at the end I don't know what number we're on here but if you're still with us if you're still with me here we go we've got something we've got something that's really going to allow you to use this stuff um in a much more flexible way in in all sorts of kinds of projects and what we what I'm talking about here is combining multiple steering behaviors this this may seem like an obvious thing to do and and I hope that it does but I want to look just briefly in this video at what it means technically to do that so you know we could list all the behaviors we've done so far like seek arrive flow field uh we did path we did separate alignment I think these are all the ones we've kind of looked at in the particular videos one at a time so in our first demonstration what I'm going to do is demonstrate for you combining seek and separate so this may seem this so first of all the idea of combining forces is absolutely something we've been do we've done before and I've been doing continuously throughout all these examples it's the whole reason why we wrote this apply force method right we wrote this apply force method so that we could call on an object apply Force gravity apply force wind apply Force nervous energy right we could just keep applying forces of the object it would accumulate them into the acceleration and move according to the net result of all those forces so essentially this is all we want to do we want to say things like um I'm going to write this down here apply Force seek and apply force uh separate so this is where hopefully this notion of combining forces is obvious to you right yeah we did this we did seek we did separate all I got to do is bring on both of those in the same example and call apply Force twice and that will in fact work but one thing we should add onto this remember we are thinking about autonomous agents and autonomous agents have this ability to make their own decisions According to some set of rules that govern their behavior and a rule a way of thinking of a rule that governs how you combine these for is is a weight right how important to a vehicle how important to think about yourself what's more important to you that you get to some Target or that you don't run into anyone on the way there you know for me I don't want to like bump into people and knock them over I'm very happy to move around them and I'll take longer to get to the Target somebody else might want to just Barrel through and knock everyone over they just want that you know cupcake or whatever is at the end of the line so this is something that we need to factor into how we program what are the weights of these forces and how can those weights be flexible so that different uh flexible either from vehicle to vehicle are flexible over time right think again about the simulation if the target is food and the separation is like avoiding other Predators when you're really hungry maybe seek is much more important than when you're not so hungry so we need some mechanism for doing this for how we can go buy these forces again this is a kind of a simple thing to do the hard part is figuring out the algorithms for each one of these forces is it's not too hard to look at combining them so let's look at a couple different scenarios in code and I think this video will hopefully be one of the shorter ones I always say I should never say that that means instantly it's going to be the longest one ever okay so first we're going to look at separation and seek so first I just want to run it and we can see here that these vehicles are both seeking the target which is the mouse the mouse and they're also trying to separate from each other right we could imagine what would happen without separation they're all just going to L right onto the mouse they're not going to care about occupying the same space so here we have an example of two steering forces combined great so let's take a look at this in the code so one thing that I'll point out here just to like only look at this for a second is we are calling apply Force twice this is the point apply Force separation apply Force seek that's what we're doing where are those forces coming from they're coming from two functions separate and seek now one thing I should note about this is look here is the seek function here's our seek function if you look at the seek function in a previous example what it will do is it will at the very end it will say apply Force some Force so we calculate we go through all this desired velocity calculate all this stuff get the steering force and then boom apply the force to the object put it in its acceleration but in this example we're not doing that in instead of saying apply Force we are returning steer to wherever it was we called it so we have a new function this new function is called apply behaviors apply behaviors is a function that I have added to this example to be the sort of centralized location where we manage all of the forces and the weights for those forces so first we ask for this from the separate function the separate Force then we ask from the seek function a force seeking Mouse X Mouse y then what do we do with those here this is the crucial crucial two lines of code we wait them separate ation force is weighted by a factor of two seek force is weighted by a factor of one now admittedly this is probably the worst possible way ever to do this because what are what are my weights they're hardcoded numbers that means they can never change over time and they are the same for every single vehicle ever in this system so this is my challenge to you my exercise to you is do something different you know you could think of having sliders or keyboard control to like control various weights you can control them by pearing noise you can make them all Rand random you could have some logic you know the the vehicle each vehicle has like a health value that like goes down over time and according to how fast it goes down it scales the weight of the different forces later we're going to see we're going to look at genetic algorithms could you evolve the like Optimal weights for this vehicle to behave a certain way there's so much potential just in these two lines of code of course all I've done is put the number two and one there but at least we can kind of begin to see a little bit of what's going on right what if I set the weight of separate to zero we can see here this is seek with no separation it's as if that Force doesn't exist if I go and put that to two and put seek to zero now we have we just have that separation example they don't care about the mouse anymore we could say hey let me have separate these super important and seek be just a little bit important you can see like maybe they're kind of seeking the mouse a little bit you can see they're like kind of coming into cluster but separation is so much more important so the varying weights of these objects is crucial to how this system behaves okay so let's take a look at a couple more examples the next example I want to look at is a crowd path following so this is just actually adding um there's not a lot to this one this is just adding separate to path following so you can see I can add a bunch more Vehicles here and what do we have here but just doing that just those two forces creates a very very Dynamic simulation because not only go back and compare this to path following without separation what we have is is something you could start to imagine modeling how people flow through a space how cars travel along the road again this is not a scientific model we're just trying to create the almost the illusion or feeling of that but you could imagine how um how powerful this could be by just adding multiple forces in here and and and and and altering it so this is another scenario where you can play with those weights and try to figure out ways of controlling them um what if all of a sudden their path falling goes off and they all go to seek something else but then they are they you know at every once in a while they leave the path and go do something else and then come back there's so much I can't I just I could just stay up all like the rest of my life program different combinations of steering forces and I don't I'm not going to do that because it's nice outside today but you you know you should think about that for when it's not so nice outside okay um now let's look at the the ultimate I say this is the pen ultimate the ultimate example of this which I was going to make a separate video about but I think we'll actually just look at it a little bit briefly because we already covered separation and Alignment in quite a bit of detail so let's just look at what happens when you combine um and I'm going to go to uh there's a sort of example here called flocking sliders which is just a version of the flocking example that allows me to control the weights so here we have our flocking simulation and we can see that we have this is full screen version with lots of little tiny boids oh so first of all Craig Reynolds went in in developing the flocking system called the vehicles now boids um is as a kind of variation of the word Birds I guess I think that's right anyway so I'm now I'm going to use the word term boy to talk about these creatures in this flocking simulation so what's going on here is we have the three rules so in case you didn't uh look at some of the earlier videos although I guess I should instead of saying that I should say or just a recap the three rules we have in flocking are separation alignment three cohesion and each one of these rules is incredibly simple on its own and produces a very simple obvious result what's amazing about this complex system is these rules for each object are very simple we put them together we put them together in a group we get a highly complex result not an an unpredictable result not a simple obvious one so separation means try to stay separate from your neighbors alignment means try to align your velocity with your neighbors and cohesion is the only one that we didn't Implement in a previous video mean steer towards the center of your neighbors so we have some like we have a tension here in a way between cooperation you could think of cohesion as cooperation stay together and competition separation compete for space so I think one of the things about complex systems that really makes them tick is this idea of competition and cooperation together in the same system so all of these three rules together produce this schooling like Behavior which we're seeing over here so a couple things that I will just demonstrate really quickly um you can't really see this but let's add a whole bunch more vehicles um up here I have a few uh sliders to be able to control the various forces here okay I'm going to talk through what I'm doing here and control some of the forces so I'm going to make the maximum Force higher a little bit lower maximum spe and I'm just going to show you first of all what happens when we only have separation so I'm going to make separation very high and we can see with separation the only thing going on here is don't run into your neighbor this is just exactly the same as the example we had before just all the little things are really tiny and there's lots more of them so that's separation that might be and now if I take separation off and I turn alignment all the way up you can see we get these clusters of objects trying to align with themselves again simple predictable result and eventually over time they're actually all going to move in the same direction now if I turn alignment off and I turn cohesion up we can see look these clusters come together they're trying to move towards the center and as they get within a certain range they suddenly come together this is kind of an interesting result just on its own you can see we have these kind of funny behaviors the point is once we combine them all together if I add a little alignment and I put separation back on and look at this like even now there's a bunch of different weights than what we started with and you almost have this more kind of frenetic insect like Behavior whereas the weights were more tuned towards uh more of a schooling or flocking like Behavior so this is something you can really really play with forever and and and use to for a variety of different effects and just to show you briefly so that's the um the actual example that's in the repository um connected to the book is 6.9 that you can find the one with the sliders as well which looks just a little bit more like this so you can see this kind of this is with a certain set of weights with a schooling like Behavior you can see it's alignment seems to be pretty strong in this one right they're really aligning with their neighbors but there's also a little bit of jockeying for space as well as I'm staying together as a group okay so one thing I want to point out so first I should say to you there's a couple exercises you could think about doing I had that list that I erased of all the forces here's something you should think about doing make a project that has every possible steering Force you can Implement have examples of or could Implement on your own and create an array of weights for all of those and see how you can um control those weights through some set of logic so first just try to control weights According to some set of rules don't have them hardcoded whether that's user interaction algorithmically through pearly noise or Randomness or by some logic according to how each vehicle behaves or what it's it sees in its environment another thing you might think about doing which I actually have an example of um is implementing well I don't have a full example of it but implementing Reynolds V so not Reynolds so if you read the book The computational Beauty of nature by Gary William flake I believe is the author um there's a long discussion of flocking systems in that book and Flake points out that what you don't see in Reynolds flocking system is all of the vehicle all of the birds or boyss in a formation that looks kind of like this which you might actually see in the sky if you look at birds flying together and he proposes what's what is unique about this there is nothing blocking the view of any of these vehicles and what he proposes is adding an additional Force additional steering Behavior which is that if a void is in front of you within your view steer away to get that vehicle out of your view keep your view clear and uh if you implement that you will get this formation which is really quite interesting so just to show you this actually involves the dot product and looking at the angle between two vectors and just to show you um uh the beginnings of that exercise 617 in the repository there's an example which implements just the beginning of that so the force is not implemented here the vew force but what you can see is um that any other vehicles that are within this blue vehicle's view um are colored red and one thing that I'll also say that's really important about these is you might be used to debugging your code by putting lots of print line statements everywhere when you figure out the locations print this if it's in it view print it's in my view another way of debugging that's really crucial for these steering Behavior like these scenarios that you're working on physics models is actually just draw stuff the screen so I know this is working because I'm able to to change the color of only the vehicles that are within this um Arc that I've drawn on the screen so anyway I've gone on a bit too long about this exercise but there's a bunch of stuff that you could try to do and hopefully um discuss somewhere when I when um someday these videos have more of a way of um sharing work and asking questions and discussing say with them right now they're just videos but there are comments anyway um so I will see you uh later in um whoa this is the last video so I think this actually marks the end of the steering Behavior stuff I I have some another example about optimizing flocking systems if there's too many elements in there which someday I will get to but you can take a look for those examples as well okay
