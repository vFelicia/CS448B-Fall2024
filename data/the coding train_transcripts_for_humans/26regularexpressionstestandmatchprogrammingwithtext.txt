With timestamps:

00:00 - hello welcome to another coding Rainbow
00:04 - video and in this video I want to look
00:05 - at how you can actually use all that
00:07 - stuff about regular expressions in your
00:10 - JavaScript program perhaps with p5.js or
00:12 - not with p5 GS but omni's it with p5
00:14 - chess but this is really general
00:15 - JavaScript plus regular expressions okay
00:17 - let me come over here for a second so
00:19 - strings are probably something familiar
00:21 - to in JavaScript you could write create
00:24 - a string like this VAR s equals hello
00:29 - now as I started with regular
00:31 - expressions and hopefully you can read
00:33 - this this can also be a regular
00:35 - expression write this sequence of
00:36 - characters match the literal string
00:37 - hello but javascript does not consider
00:40 - this a regular expression because it's
00:41 - between two quotes if it's between two
00:44 - quotes it is a string object if I want
00:47 - it to be a regular expression I can say
00:49 - var R equals /hello
00:53 - so this is now the regular expression
00:56 - hello this is the string hello and just
00:59 - also in the same way that you can say
01:00 - new string you can also say new reg exp
01:08 - and put the regular expression in quotes
01:10 - as a string so for example if you ever
01:13 - wanted to build a web application where
01:15 - you take string input from a user and
01:17 - make it into a regular expression you
01:19 - would have to do it this way in fact if
01:21 - you look at the examples linked into A
01:22 - to Z github repository I do exactly this
01:25 - in one of the examples but for the most
01:26 - part I can create regular expressions
01:29 - like this so then the question becomes
01:31 - once you have in the same way that a
01:33 - string object you can say things like s
01:36 - dot index of right these are functions
01:39 - that you call on a string or properties
01:41 - like s dot length a regular expression
01:43 - has those things as well and to that I'm
01:47 - going to show you in this particular
01:49 - actually in this particular video I'm
01:51 - going to show you one when I get to
01:52 - another one I'm going to show you later
01:54 - I'm going to show you our dot test so
01:58 - this is a function that you can call on
02:00 - a regular expression and then I'm also
02:01 - actually going to show you a function
02:03 - that you could call on a string s dot
02:06 - match but you passed
02:09 - a regular expression so this is one
02:11 - thing you have to get used to in
02:12 - JavaScript there are times where you
02:14 - want to say the regular expression
02:16 - docked the function with a string and
02:18 - sometimes you want to say this string
02:19 - dot a function with a regular expression
02:21 - and in fact this might be more common
02:23 - use matches I use very commonly split
02:26 - and replace or functions I'm going to
02:28 - show you which are all functions that
02:29 - you call in a string that expect a
02:31 - regular expression as an argument but
02:32 - I'll get through all that as I make this
02:34 - video in future videos okay so let's
02:37 - start with test so I'm going to come
02:39 - back over here and you can see I have a
02:41 - list of these here in my notes that I'm
02:44 - following along but I'm going to switch
02:45 - over just I'm actually just going to
02:47 - switch to the browser which I'm in the
02:48 - browser already and I just want to do
02:50 - some stuff in the console just to test
02:52 - how regular expressions work so here we
02:54 - go I'm going to create a regular
02:57 - expression VAR R equals 3 up whoops
03:02 - backslash D 3 digits in a row so there
03:06 - you can see I made that regular
03:07 - expression it is three digits in a row
03:10 - the forward slash is indicating it's a
03:12 - regular expression not a string so I can
03:14 - say our test hello and false because
03:21 - hello does not match that regular
03:23 - expression I can say our test one two
03:26 - three and I am going to get to true
03:29 - because that is three digits in a row
03:31 - now let's ask the question one two three
03:34 - ABC what am I going to get also true
03:37 - right because that regular expression is
03:41 - found within the string so notice that
03:43 - test is just searching for that regular
03:45 - expression anywhere in the string let's
03:47 - say you want to use regular expressions
03:48 - to validate a full string well a trick
03:51 - to this is that I could change my
03:53 - regular expression and I'm going to just
03:54 - do this right here again I'm going to
03:59 - change my right expression to say the
04:02 - beginning of the string followed by
04:04 - three digits followed by the end of the
04:07 - string so if I use those position meta
04:10 - characters beginning an end now if I say
04:13 - our test one two three I get true but if
04:17 - I say whoops our test one two three ABC
04:21 - easy
04:22 - four five six that's not the words
04:24 - you'll say I get false because that
04:27 - regular expression with beginning
04:29 - followed by three digits followed by end
04:31 - does not match so this is something you
04:32 - can play with just to experiment with
04:34 - regular expressions what I would like to
04:37 - do in the code right here is I'm going
04:39 - to I'm going to do this right here in
04:40 - the code so let's say I wanted to do
04:41 - some sort of validator to say I've put
04:43 - in a valid email address so I'm going to
04:46 - go to the program and my sketch and I've
04:50 - already put in a lot of code from a
04:52 - previous example where basically the
04:54 - string I get is the value of that text
04:58 - field so now I'm going to say I have a
05:00 - regular expression which is any number
05:03 - of word characters followed by an at
05:07 - where's an at at followed by any number
05:11 - of word characters followed by a literal
05:14 - dot followed by net or calm or org right
05:21 - so this is my regular expression and
05:23 - then I want to say I'm going to just say
05:25 - create P the regular expression test it
05:28 - against that string so I'm just going to
05:30 - on the screen say true or false whether
05:32 - it's a valid email or not and you know I
05:34 - should I should probably test this
05:36 - regular expression out in the atom
05:38 - editor or some other form just to see
05:39 - before it works but I'm going to guess
05:41 - that it's about right so I'm going to
05:42 - now go to my code and I'm going to hit
05:44 - submit rainbows and unicorns is not a
05:46 - valid email address but rainbow at
05:48 - unicorns dot-com is a valid email
05:54 - address and I think by the way it got
05:57 - true twice because I have both I have
05:59 - two events I have the why did that
06:02 - happen twice let me just see here again
06:04 - that only happened once rainbow at
06:07 - unicorns calm I wonder why that's
06:11 - happening twice changed oh oh because I
06:17 - have both the changed event and
06:19 - mousepressed
06:20 - so the changed event is like I tab out
06:22 - of the out of the text field and that if
06:25 - I'd got so if I I'm going to comment
06:26 - that out just to a unicorn
06:31 - unicorns at rainbow calm
06:35 - submit true so you can see this is how I
06:37 - could use a regular expression in a
06:39 - piece of JavaScript code hooray
06:40 - okay now let's go back to over here and
06:45 - I want to look instead now at string
06:48 - match regular expression and see what we
06:51 - get with this particular function this
06:53 - is kind of interesting okay so now over
06:56 - here let's let's see if I could work
06:57 - this out I want to make a string no idea
07:00 - what I'm doing for RS equals when in
07:03 - doubt unicorns and rainbows and cupcakes
07:06 - hopefully vegan nut-free no not after I
07:09 - like not something I allergic to nuts
07:10 - maybe just vegan I don't know whatever
07:12 - I don't like dairies I have a problem
07:13 - with whatever that's really not relevant
07:15 - to programming videos right okay
07:18 - unicorns and rainbows a cup plus no
07:20 - sugar it's not very good for me okay
07:21 - anyway um so that's why straight that's
07:24 - really not gonna be good
07:25 - you know what you should all enjoy a
07:27 - buttery delicious frosting full
07:30 - strawberry flavored delicious cupcake
07:33 - please enjoy that if that's the kind of
07:35 - thing you like in your day today okay so
07:37 - that's the string now I'm going to make
07:40 - a regular expression where I'm going to
07:43 - say unicorn is my regular expression
07:47 - looks like though I'm going to say s dot
07:49 - match R so the match function unlike
07:54 - test where I say our dot test s right
07:58 - I'm going to do that really quickly I
08:00 - say our test s is true what happens if I
08:04 - say s dot match R so this is actually
08:08 - quite a bit more useful because what
08:10 - does it give me it gives me the actual
08:12 - thing that was matched for example let
08:14 - me let me change our whoops let me
08:19 - change R to be a regular expression that
08:22 - is backslash W plus whoops R is a
08:29 - regular expression backslash W plus and
08:31 - now let me say s match our huh
08:34 - I still just got unicorns so why did I
08:37 - still just get unicorns well in fact
08:40 - what is s unicorns and rainbows and
08:43 - cupcakes I got the first match only of
08:46 - backslash W plus this
08:48 - brings up a really really key and
08:51 - important aspect I don't know let's try
08:53 - let's try carpel of programming with
08:56 - regular expressions and that is this
08:59 - idea of flags flags are a way of
09:04 - modifying the behavior of a regular
09:07 - expression and there are two flags that
09:09 - I'm going to tell you about all right
09:10 - there's another one or maybe another one
09:12 - but two that are going to be relevant to
09:13 - these videos G standing for global and
09:17 - what that means is don't just match the
09:19 - first thing match all of them and I for
09:27 - case in sensitive ok
09:31 - g for global i for case insensitive so
09:35 - let's look at how it works with those
09:36 - flags i'm going to come back over here
09:38 - and i am going to clear this out and I'm
09:42 - going to say VAR R equals a - z + /g so
09:53 - notice the flag goes after the regular
09:57 - expression the regular expression is in
09:59 - between the the slashes and the flag
10:02 - goes after the Reg expression so if this
10:04 - regular expression is now global and I
10:06 - now say s match are what will I get I
10:10 - get an array with every single match of
10:13 - that regular expression oh goody
10:16 - excellent yay ok I got a match with
10:19 - unicorns and rainbows a really easy
10:22 - quick way to just grab a whole bunch of
10:24 - things so you know as an exercise do the
10:26 - phone number thing and grab all the
10:28 - phone numbers and have them into an
10:29 - array now let's let's um let's do
10:32 - something with that text let's let's
10:37 - capitalize some stuff whoops let me
10:39 - capitalize unicorns with a U and ah oh
10:45 - my god cupcake I'm just going to do this
10:48 - let me capitalize these two letters and
10:50 - a company so let's look now at the case
10:53 - sensitivity flag so let's say I do G ok
10:59 - so let's say I just do this again I have
11:00 - to say now let me do this again
11:02 - s match our notice whoa
11:05 - okay I got up cakes what's an up cake
11:09 - and cupcakes so of course I forgot about
11:14 - the whole word boundary thing so you
11:16 - know I could be a little bit more
11:18 - thoughtful here and I could change this
11:21 - to have a word boundary followed by a
11:23 - word boundary right and now I can do
11:25 - this again
11:26 - I just got unicorns and and rainbows
11:28 - right I did not get and with a capital A
11:30 - or C because I'm only looking for
11:33 - lowercase letters so what I could do is
11:36 - I could add another flag I so if you
11:39 - want multiple flags you can see that
11:41 - right there one flag followed by another
11:43 - flag so if I both of those flags and I
11:46 - do this match one more time if I do this
11:51 - match one more time now I've matched
11:53 - everything so you can see here how the
11:56 - flags work
11:57 - I need a global flag to do to match the
12:00 - right expression
12:00 - multiple times in the string and the eye
12:03 - flag for case instance in case
12:05 - sensitivity now I could add this I
12:08 - should probably add this stuff into the
12:09 - Cobra probably going to save this for
12:11 - doing like a coding challenge a little
12:12 - bit later I think just working in the
12:13 - console it's kind of useful here and as
12:15 - an exercise you might take this example
12:17 - that I'll post and run the match and
12:20 - kind of display what it matches down
12:21 - here maybe I should add that in but let
12:23 - me go a little bit further before I do
12:24 - that because let's think about that
12:26 - phone numbers for a second okay so let
12:30 - me let me revise the code for a little
12:32 - bit I'm going to go to that phone
12:33 - numbers example I wish I had something
12:34 - more creative but it's kind of a useful
12:36 - example so I'm going to go to the HTML
12:38 - file and I'm going to say here and I'm
12:41 - going to make a simpler phone number
12:43 - here are two up like numbers 1 1 1 - 2 -
12:49 - 2 and 3 3 4 4 4 - 5 5 5 5 okay so I'm
12:57 - just going to use these two phone
12:58 - numbers so you can see and of course in
13:02 - this example I can mess around and type
13:04 - other stuff to play with it but that's
13:06 - what's going to appear there by default
13:07 - and then when I hit the submit button
13:10 - what I want to do is say matches you
13:14 - equals s dot match what a regular
13:19 - expression so I'm going to write a
13:21 - regular expression which is let me think
13:24 - about this okay
13:26 - three digits followed by a dash or a dot
13:31 - followed by four digits okay so this is
13:35 - my regular expression three digits
13:37 - followed by a dash or a dot and I want
13:39 - to call the match function with this
13:41 - string and that regular expression and
13:44 - that's going to give me the array of
13:45 - matches and then what I want to do is
13:49 - I'm just going to I'm going to write a
13:52 - little loop that says for everything
13:58 - everything matched create a paragraph
14:06 - with what it matched right so this is
14:11 - kind of a pattern here which create a
14:13 - rather expression match that regular
14:15 - expression in a string and then loop
14:17 - through and display all the things that
14:19 - it matched so if I run this now I'm
14:21 - going to see this now I only saw the
14:23 - first one why do I only see the first
14:25 - one because I forgot the global flag so
14:29 - if I add the global flag in the code and
14:32 - run it again I can now see I've matched
14:35 - both of those things and I could add
14:37 - another one and you know two - two -
14:39 - five five five six and I could hit
14:42 - submit and now I see all three of those
14:44 - okay now here's a question though what
14:47 - about those groups what if I want to
14:49 - capture particular groups you might be
14:52 - asking are you asking I don't know I'm
14:54 - asking it so let me add a capturing
14:57 - group for example I want to capture the
15:00 - first three digits how do I have access
15:03 - to that so let me go and refresh this
15:06 - page now one thing I can do is I can
15:08 - just mess around with this in the
15:11 - console so you can see the console I now
15:15 - have in the variable s I have those
15:17 - things now let me get this regular
15:21 - expression so I have that regular
15:25 - expression now and I can say look at
15:27 - this
15:28 - f dot match R where are the groups
15:34 - they're not there let me do something
15:37 - again let me take out that global flag
15:42 - I'm going to take out that global flag
15:44 - now I'm going to say s match R again
15:48 - look now now the group is there notice
15:51 - how this is group zero the full match
15:54 - followed by Group one so if you are not
15:57 - using the global flag the match function
16:02 - will give you the group's as an array if
16:06 - you are using the global flag you need
16:09 - to actually write the code in a
16:10 - different way and use a function called
16:12 - exec and I'm going to leave that for a
16:15 - separate video I'm going to show you how
16:17 - to loop through and capture groups with
16:19 - the exact function and I'm just going to
16:21 - do that in a separate video and that'll
16:22 - be exactly the next video that you can
16:23 - watch right after that one if you want
16:25 - but here I've shown you some basic ideas
16:27 - for how to take text and match stuff
16:29 - with a regular expression and you can
16:31 - hopefully come up with some more
16:32 - creative ideas of how to do that ok good
16:38 - bye

Cleaned transcript:

hello welcome to another coding Rainbow video and in this video I want to look at how you can actually use all that stuff about regular expressions in your JavaScript program perhaps with p5.js or not with p5 GS but omni's it with p5 chess but this is really general JavaScript plus regular expressions okay let me come over here for a second so strings are probably something familiar to in JavaScript you could write create a string like this VAR s equals hello now as I started with regular expressions and hopefully you can read this this can also be a regular expression write this sequence of characters match the literal string hello but javascript does not consider this a regular expression because it's between two quotes if it's between two quotes it is a string object if I want it to be a regular expression I can say var R equals /hello so this is now the regular expression hello this is the string hello and just also in the same way that you can say new string you can also say new reg exp and put the regular expression in quotes as a string so for example if you ever wanted to build a web application where you take string input from a user and make it into a regular expression you would have to do it this way in fact if you look at the examples linked into A to Z github repository I do exactly this in one of the examples but for the most part I can create regular expressions like this so then the question becomes once you have in the same way that a string object you can say things like s dot index of right these are functions that you call on a string or properties like s dot length a regular expression has those things as well and to that I'm going to show you in this particular actually in this particular video I'm going to show you one when I get to another one I'm going to show you later I'm going to show you our dot test so this is a function that you can call on a regular expression and then I'm also actually going to show you a function that you could call on a string s dot match but you passed a regular expression so this is one thing you have to get used to in JavaScript there are times where you want to say the regular expression docked the function with a string and sometimes you want to say this string dot a function with a regular expression and in fact this might be more common use matches I use very commonly split and replace or functions I'm going to show you which are all functions that you call in a string that expect a regular expression as an argument but I'll get through all that as I make this video in future videos okay so let's start with test so I'm going to come back over here and you can see I have a list of these here in my notes that I'm following along but I'm going to switch over just I'm actually just going to switch to the browser which I'm in the browser already and I just want to do some stuff in the console just to test how regular expressions work so here we go I'm going to create a regular expression VAR R equals 3 up whoops backslash D 3 digits in a row so there you can see I made that regular expression it is three digits in a row the forward slash is indicating it's a regular expression not a string so I can say our test hello and false because hello does not match that regular expression I can say our test one two three and I am going to get to true because that is three digits in a row now let's ask the question one two three ABC what am I going to get also true right because that regular expression is found within the string so notice that test is just searching for that regular expression anywhere in the string let's say you want to use regular expressions to validate a full string well a trick to this is that I could change my regular expression and I'm going to just do this right here again I'm going to change my right expression to say the beginning of the string followed by three digits followed by the end of the string so if I use those position meta characters beginning an end now if I say our test one two three I get true but if I say whoops our test one two three ABC easy four five six that's not the words you'll say I get false because that regular expression with beginning followed by three digits followed by end does not match so this is something you can play with just to experiment with regular expressions what I would like to do in the code right here is I'm going to I'm going to do this right here in the code so let's say I wanted to do some sort of validator to say I've put in a valid email address so I'm going to go to the program and my sketch and I've already put in a lot of code from a previous example where basically the string I get is the value of that text field so now I'm going to say I have a regular expression which is any number of word characters followed by an at where's an at at followed by any number of word characters followed by a literal dot followed by net or calm or org right so this is my regular expression and then I want to say I'm going to just say create P the regular expression test it against that string so I'm just going to on the screen say true or false whether it's a valid email or not and you know I should I should probably test this regular expression out in the atom editor or some other form just to see before it works but I'm going to guess that it's about right so I'm going to now go to my code and I'm going to hit submit rainbows and unicorns is not a valid email address but rainbow at unicorns dotcom is a valid email address and I think by the way it got true twice because I have both I have two events I have the why did that happen twice let me just see here again that only happened once rainbow at unicorns calm I wonder why that's happening twice changed oh oh because I have both the changed event and mousepressed so the changed event is like I tab out of the out of the text field and that if I'd got so if I I'm going to comment that out just to a unicorn unicorns at rainbow calm submit true so you can see this is how I could use a regular expression in a piece of JavaScript code hooray okay now let's go back to over here and I want to look instead now at string match regular expression and see what we get with this particular function this is kind of interesting okay so now over here let's let's see if I could work this out I want to make a string no idea what I'm doing for RS equals when in doubt unicorns and rainbows and cupcakes hopefully vegan nutfree no not after I like not something I allergic to nuts maybe just vegan I don't know whatever I don't like dairies I have a problem with whatever that's really not relevant to programming videos right okay unicorns and rainbows a cup plus no sugar it's not very good for me okay anyway um so that's why straight that's really not gonna be good you know what you should all enjoy a buttery delicious frosting full strawberry flavored delicious cupcake please enjoy that if that's the kind of thing you like in your day today okay so that's the string now I'm going to make a regular expression where I'm going to say unicorn is my regular expression looks like though I'm going to say s dot match R so the match function unlike test where I say our dot test s right I'm going to do that really quickly I say our test s is true what happens if I say s dot match R so this is actually quite a bit more useful because what does it give me it gives me the actual thing that was matched for example let me let me change our whoops let me change R to be a regular expression that is backslash W plus whoops R is a regular expression backslash W plus and now let me say s match our huh I still just got unicorns so why did I still just get unicorns well in fact what is s unicorns and rainbows and cupcakes I got the first match only of backslash W plus this brings up a really really key and important aspect I don't know let's try let's try carpel of programming with regular expressions and that is this idea of flags flags are a way of modifying the behavior of a regular expression and there are two flags that I'm going to tell you about all right there's another one or maybe another one but two that are going to be relevant to these videos G standing for global and what that means is don't just match the first thing match all of them and I for case in sensitive ok g for global i for case insensitive so let's look at how it works with those flags i'm going to come back over here and i am going to clear this out and I'm going to say VAR R equals a z + /g so notice the flag goes after the regular expression the regular expression is in between the the slashes and the flag goes after the Reg expression so if this regular expression is now global and I now say s match are what will I get I get an array with every single match of that regular expression oh goody excellent yay ok I got a match with unicorns and rainbows a really easy quick way to just grab a whole bunch of things so you know as an exercise do the phone number thing and grab all the phone numbers and have them into an array now let's let's um let's do something with that text let's let's capitalize some stuff whoops let me capitalize unicorns with a U and ah oh my god cupcake I'm just going to do this let me capitalize these two letters and a company so let's look now at the case sensitivity flag so let's say I do G ok so let's say I just do this again I have to say now let me do this again s match our notice whoa okay I got up cakes what's an up cake and cupcakes so of course I forgot about the whole word boundary thing so you know I could be a little bit more thoughtful here and I could change this to have a word boundary followed by a word boundary right and now I can do this again I just got unicorns and and rainbows right I did not get and with a capital A or C because I'm only looking for lowercase letters so what I could do is I could add another flag I so if you want multiple flags you can see that right there one flag followed by another flag so if I both of those flags and I do this match one more time if I do this match one more time now I've matched everything so you can see here how the flags work I need a global flag to do to match the right expression multiple times in the string and the eye flag for case instance in case sensitivity now I could add this I should probably add this stuff into the Cobra probably going to save this for doing like a coding challenge a little bit later I think just working in the console it's kind of useful here and as an exercise you might take this example that I'll post and run the match and kind of display what it matches down here maybe I should add that in but let me go a little bit further before I do that because let's think about that phone numbers for a second okay so let me let me revise the code for a little bit I'm going to go to that phone numbers example I wish I had something more creative but it's kind of a useful example so I'm going to go to the HTML file and I'm going to say here and I'm going to make a simpler phone number here are two up like numbers 1 1 1 2 2 and 3 3 4 4 4 5 5 5 5 okay so I'm just going to use these two phone numbers so you can see and of course in this example I can mess around and type other stuff to play with it but that's what's going to appear there by default and then when I hit the submit button what I want to do is say matches you equals s dot match what a regular expression so I'm going to write a regular expression which is let me think about this okay three digits followed by a dash or a dot followed by four digits okay so this is my regular expression three digits followed by a dash or a dot and I want to call the match function with this string and that regular expression and that's going to give me the array of matches and then what I want to do is I'm just going to I'm going to write a little loop that says for everything everything matched create a paragraph with what it matched right so this is kind of a pattern here which create a rather expression match that regular expression in a string and then loop through and display all the things that it matched so if I run this now I'm going to see this now I only saw the first one why do I only see the first one because I forgot the global flag so if I add the global flag in the code and run it again I can now see I've matched both of those things and I could add another one and you know two two five five five six and I could hit submit and now I see all three of those okay now here's a question though what about those groups what if I want to capture particular groups you might be asking are you asking I don't know I'm asking it so let me add a capturing group for example I want to capture the first three digits how do I have access to that so let me go and refresh this page now one thing I can do is I can just mess around with this in the console so you can see the console I now have in the variable s I have those things now let me get this regular expression so I have that regular expression now and I can say look at this f dot match R where are the groups they're not there let me do something again let me take out that global flag I'm going to take out that global flag now I'm going to say s match R again look now now the group is there notice how this is group zero the full match followed by Group one so if you are not using the global flag the match function will give you the group's as an array if you are using the global flag you need to actually write the code in a different way and use a function called exec and I'm going to leave that for a separate video I'm going to show you how to loop through and capture groups with the exact function and I'm just going to do that in a separate video and that'll be exactly the next video that you can watch right after that one if you want but here I've shown you some basic ideas for how to take text and match stuff with a regular expression and you can hopefully come up with some more creative ideas of how to do that ok good bye
