With timestamps:

00:00 - [TRAIN WHISTLE]
00:00 - Happy Pi Day 2023, everybody.
00:03 - Oh, I'm excited for what
I'm going to do today.
00:05 - I thought I would just combine
two things that I love.
00:08 - One is delicious wonderful
pie and toothpicks.
00:12 - Now you might be asking,
you love toothpicks?
00:13 - That's a little weird.
00:14 - Well, I do have a coding
challenge all about toothpicks.
00:17 - And I thought there's
no chance I'm ever going
00:19 - to get to use toothpicks again.
00:20 - But today is the day.
00:21 - I am going to
approximate the number pi
00:24 - by dropping a box of
toothpicks onto the floor.
00:28 - How could that
possibly even work?
00:31 - This problem is known
as Buffon's needle named
00:35 - for Georges-Louis Leclerc.
00:37 - Comte de Buffon.
00:38 - It's a very famous
geometric probability
00:40 - problem from the 18th century.
00:42 - And it goes like this.
00:43 - Let's say you have a
desktop, floor, whatever--
00:46 - some horizontal surface.
00:48 - And it's made of wood, strips
of wood with a given width.
00:51 - All of the strips
are the same width.
00:54 - Now you have a
box of toothpicks.
00:55 - Those toothpicks are
shorter than the width
00:58 - of those strips of wood.
00:59 - And you take that box, and
you dump it out on the table.
01:03 - What is the probability
that any given toothpick
01:07 - will land and cross the border
between those strips of wood?
01:11 - Well, guess what?
01:13 - This is another case where
magically the number pi
01:17 - shows up.
01:18 - That probability is
linked to the number pi.
01:20 - I'm going to simulate this
idea of toothpicks as lines
01:23 - and see if we can
approximate the number of pi
01:26 - in a p5.js sketch celebrating
the wonderful day that
01:29 - is Pi Day
01:30 - (SINGING) It's Pi Day, Pi Day.
01:32 - Delicious and sweet, It's the
only number that you can eat.
01:36 - It's Pi Day, Pi Day.
01:40 - Before I write the code, let's
unpack the scenario a bit more
01:44 - and take a look at the math and
where the number pi shows up.
01:49 - Imagine this whiteboard
is the surface
01:52 - upon which I am going to dump
a whole box of toothpicks on.
01:55 - And the important
variable here is
01:57 - what is the distance between
these parallel, vertical lines.
02:01 - Let's call that variable t.
02:03 - Now I'm using t because that's
the naming convention that's
02:07 - on the Wikipedia page that
defines the Buffon's problem.
02:11 - I don't know if I'm
pronouncing it correctly,
02:12 - but I'm just going
to say Buffon.
02:15 - The next thing we need
is to discuss, well, what
02:18 - is the length of the toothpick?
02:20 - And I'm going to
call that variable l.
02:22 - Let's start with the length
of any given toothpick
02:25 - to be half of t.
02:28 - And let's make a gross
oversimplification
02:30 - of the scenario
just for a moment
02:32 - and say that there's some
magical force at play that only
02:35 - allows the toothpicks
to fall perfectly
02:37 - perpendicular to
these vertical lines.
02:39 - So maybe a toothpick falls here,
one falls here, one falls here,
02:44 - one falls here, et cetera
all perfectly horizontal.
02:49 - The important number
that I need to evaluate
02:51 - to determine if this particular
toothpick is crossing one
02:56 - of these boundaries
is the distance
02:58 - between the center
of the toothpick
03:00 - and whichever vertical line
happens to be closest to.
03:03 - So it's not this one.
03:05 - It's much further from this
one than it is to this one.
03:09 - And we'll call that distance x.
03:12 - If x is less than half the
length of this toothpick,
03:17 - if x is less than
l divided by 2,
03:20 - then it is crossing one
of these boundaries.
03:22 - How often will x be less
than half the length of l?
03:27 - Well, because l is
half the length of t,
03:29 - it's actually going
to be 50% of the time.
03:32 - Think about that.
03:33 - If x is anywhere a
quarter of the way across,
03:36 - then the toothpick is
covering the boundary.
03:39 - If it's anywhere in between
here all the way to 3/4,
03:42 - it's not crossing the boundary.
03:44 - Anywhere here, it is
crossing the boundary.
03:46 - So that's 50% of the values
in between the two borders it
03:51 - won't cross and 50% it would.
03:53 - Let's say l just happens to
be the actual length of t.
03:58 - Well, then, it's always going
to be crossing the boundary.
04:00 - There's nowhere for
me to fit it where
04:02 - it's not touching one
of the boundaries,
04:04 - so that would be 100%.
04:06 - So we can see here that
there's a relationship
04:08 - between the length of the
toothpick and the probability
04:12 - that it will cross
one of these borders
04:14 - in the case of when
the toothpicks are all
04:16 - falling perfectly horizontally.
04:18 - Now, of course,
this is not actually
04:20 - how the toothpicks will fall.
04:21 - They'll fall askew at an angle.
04:25 - Maybe one falls like this.
04:27 - Maybe one falls like
this, like this.
04:30 - Now, we have a new
variable at play--
04:33 - This particular angle.
04:35 - This is known as
the acute angle.
04:39 - I know it's cute, but that's
not why it's called acute.
04:41 - An acute angle is
the angle that's
04:43 - between 0 and 90 degrees
or pi divided by 2.
04:47 - So looking at this case,
let's think for a moment.
04:50 - That's about 45 degrees.
04:52 - I'm sure I didn't
draw it perfectly.
04:53 - But let's just now also say
how's another simplification?
04:57 - Let's say the magical force
now drops all the toothpicks
05:00 - at perfectly 45 degrees.
05:05 - So this is my toothpick,
and this is the border.
05:08 - Remember, the
distance I care about
05:11 - is the distance between the
center of the toothpick, which
05:15 - is eyeballing it
maybe about here,
05:17 - and the closest
border, which is here.
05:20 - That's x.
05:21 - But right now, I want to
calculate something different.
05:24 - I want to calculate
this distance.
05:28 - This angle here is theta.
05:31 - What is this length here?
05:34 - Remember, the length of
the entire toothpick is l.
05:37 - So the length of this hypotenuse
of this right triangle right
05:43 - here is l divided by 2.
05:46 - Remember a nice wonderful
trigonometry function
05:50 - called sine of an angle
which equals the opposite
05:55 - over the hypotenuse?
05:57 - Well, this is the opposite,
and this is the hypotenuse.
06:02 - Opposite equals l divided
by 2 times sine of theta.
06:08 - So if this distance x--
06:11 - let me get another
color marker here.
06:15 - This is x here.
06:16 - If x is less than l divided
by 2 times sine of theta, then
06:25 - the toothpick--
06:27 - this whole toothpick--
is crossing a border.
06:30 - And if I were to take this idea
essentially and consider it
06:33 - like I was doing here,
now I can say, well,
06:36 - if all of the toothpicks are
at a 45 degree angle, that's
06:40 - essentially the equivalent
of the length of all
06:43 - the toothpicks being
their actual length times
06:46 - sine of 45 degrees.
06:48 - So if all of the toothpicks were
really to fall at 45 degrees,
06:52 - then I could say
that the probability,
06:55 - if the length of
any given toothpick
06:57 - is half of the width of
each of these columns,
07:01 - then the probability is 50%
times sine of 45 degrees.
07:04 - Essentially, the
probability is the ratio
07:07 - of the length of the
toothpick to this width times
07:13 - sine of theta.
07:16 - But the toothpicks
don't actually
07:18 - fall at all the same angle.
07:20 - So we need to apply the idea of
a uniform probability density
07:24 - function.
07:26 - There is an equal
chance that an angle
07:29 - will fall at 0
degrees to 90 degrees
07:32 - to every angle in between.
07:33 - Theta will always be
somewhere between 0 and pi
07:37 - divided by 2. x, that
distance between the center
07:41 - of the toothpick and the
nearest parallel line,
07:43 - that will always be somewhere
between 0 and t divided by 2.
07:51 - So how do we calculate
the probability
07:55 - for any toothpick
that falls inside
07:58 - of this range of x uniform
chance of all possibilities
08:01 - and inside of this
range of theta uniform
08:04 - chance of all possible angles?
08:07 - What would be
useful to do is look
08:09 - at a graph where one axis
relates to x and another axis
08:16 - relates to theta.
08:19 - I know this is kind
of counterintuitive,
08:21 - but let's have the y-axis be x.
08:23 - And let's just assume
right now that t is 1.
08:27 - It's going to make
things much simpler.
08:29 - So we have a range
between 0 and 1/2.
08:33 - This is that distance
to the border.
08:38 - Let's consider the
x-axis to be the angle.
08:42 - And we have a range between
0 and pi divided by 2.
08:47 - And I'm just going
to put pi over here,
08:49 - and maybe I'll get to y.
08:50 - I'm adding that along
the x-axis as well.
08:52 - So what exactly, again,
am I graphing here?
08:56 - Let's stop for a second.
08:57 - Remember, I have a space
with parallel lines.
09:02 - And I've defined the distance
between those lines as t,
09:05 - and that's equal to 1.
09:07 - t is equal to 1.
09:09 - Now I also have a
toothpick with length l.
09:13 - And I want to assume my
toothpick is also of length 1.
09:17 - With t equal to 1 and the
length of the toothpick
09:19 - equal to 1 and this toothpick
always touching the border,
09:24 - so if the angle were
pi divided by 2,
09:27 - this would be the
toothpick, what
09:30 - is the distance from x, the
middle of it, to the border?
09:33 - It is 1/2.
09:35 - So I can plot that with
an angle of pi over 2.
09:38 - The distance is 1/2.
09:41 - Now let's look at the case
where the angle is 45 degrees
09:44 - or about pi divided by 4.
09:46 - I'm not going to
draw this perfectly,
09:48 - but I'm going to try.
09:50 - This is now the
angle 45 degrees.
09:53 - This is x.
09:54 - What is that distance?
09:56 - Well, if this is 1/2,
then it is 1/2 times sine
10:01 - of theta, which is going to be--
10:04 - I don't know--
maybe like 0.35-ish.
10:07 - So the generic formula
here for this value
10:10 - is equal to 1/2
times sine of theta.
10:14 - And if I were to plot that, I
get this nice circle extending
10:20 - it all the way out to pi.
10:21 - Now remember, the
toothpick isn't
10:23 - going to always fall with it
precisely touching the border,
10:27 - but that's what this
curve represents.
10:30 - Anywhere where that
distance is below the curve,
10:35 - it's crossing a boundary.
10:36 - Anywhere where that
distance is above the curve,
10:40 - it's not crossing the boundary.
10:41 - So this is really the
same scenario in some ways
10:45 - as a coding challenge I did
when I was throwing darts
10:48 - at a circle, and the ratio
of the number of times
10:51 - the dart would land outside
the circle to inside the circle
10:54 - was a way to approximate pi.
10:56 - We've got the same thing here.
10:58 - The ratio of how many times
the toothpick lands and crosses
11:02 - the border versus
doesn't cross the border
11:04 - can help us approximate pi.
11:06 - So how do I calculate the area
here underneath this curve?
11:11 - Well, I need to use calculus.
11:13 - The area under a curve is known
as the integral of that curve.
11:18 - And I should also point out that
this isn't actually a circle.
11:21 - 1/2 is a much smaller
distance than pi over 2.
11:26 - I really should have
drawn it like this.
11:28 - So it really should look
much more like this.
11:31 - And basically, this is half
of this kind of ellipse.
11:34 - Actually, now it's
getting to be a mess.
11:36 - Let me erase this really quick.
11:38 - [MUSIC PLAYING]
11:46 - Not my finest work, but
this is a better version
11:49 - of that graph drawn to scale.
11:51 - And you can see that the
area of this total rectangle
11:54 - is pi times 1/2,
or pi divided by 2.
11:59 - And if we were to do the
integration, the calculus,
12:02 - we would discover that the
area of this half of this kind
12:05 - of ellipse here is actually 1.
12:07 - So the ratio of the area under
the curve to the full rectangle
12:11 - is 1 divided by pi
over 2, or 2 over pi,
12:17 - meaning, if we could take a box
of toothpicks all of length 1,
12:22 - drop them onto a surface where
the columns were spaced out
12:26 - by one, count up
how many toothpicks
12:28 - crossed a border
versus didn't, we
12:31 - can solve for the value of pi.
12:33 - I don't want to admit how
many times I drew that graph.
12:36 - Here's a version of the
graph that's actually
12:38 - drawn precisely, and I'll
include the code for that graph
12:40 - as well.
12:41 - Additionally, if you want to
do a deeper dive in the math,
12:43 - let me suggest three resources.
12:45 - There's a wonderful
description of this problem
12:48 - from the College of Education
at the University of Illinois.
12:50 - Includes the same
graph and a discussion
12:52 - of the area
underneath the curve.
12:54 - There's, of course,
the Wikipedia page
12:56 - for Buffon's needle
problem, which actually
12:58 - shows the integration formula.
13:01 - And you can see there that
that's a more general purpose
13:03 - version of the formula for any
value of l and any value of t.
13:07 - You can also find
this wonderful post
13:09 - on Thomas Ogden's website
that describes the problem
13:12 - and includes many different
links to other resources
13:14 - as well.
13:16 - I don't know if I thought
I'd ever get here,
13:18 - but I can start working
on the code part, which
13:20 - I think will be
the part that I'll
13:22 - be a bit more comfortable with.
13:23 - That was a struggle for me
to try to explain that math.
13:25 - And thank you for tolerating it.
13:27 - So let's consider a
p5 canvas, 400 by 400.
13:31 - We need some variables.
13:32 - For example, what if
t is equal to 100?
13:35 - That'll make things
kind of easy.
13:37 - Maybe I should go
for 50 right now.
13:39 - And then let's have the length
of-- and I'm going to call that
13:42 - len for the toothpick--
13:45 - equal to 25, half of that width.
13:49 - So in the draw loop, first step
is to draw the vertical lines.
13:55 - There we go.
13:56 - Looking good.
13:57 - And then I need to randomly
drop a toothpick every frame.
14:01 - So what am I picking?
14:03 - If I'm dropping
a toothpick, it's
14:05 - going to land with its
center somewhere between 0
14:08 - and the width of the canvas
and a random angle between 0
14:12 - and pi divided by 2.
14:13 - But visually, I want this
to look more interesting,
14:15 - so I could actually have it
any angle between 0 and 2pi.
14:20 - So that's a random angle,
and that's a random position.
14:24 - Now let me just draw the line.
14:26 - Oh, and I'm going
to need a random y.
14:28 - The y does it matter.
14:29 - But to make it look interesting,
I'll pick a random y.
14:34 - How am I drawing the line?
14:36 - So the line will
be a horizontal--
14:38 - I'm going to rotate
by the angle.
14:40 - And then I need to draw the
line with x at the center.
14:44 - So x minus length divided
by 2, 0 x plus length
14:52 - divided by 2, 0.
14:55 - There's all my toothpicks.
14:57 - So clearly, let's draw just
the background and the lines
15:01 - once in setup.
15:03 - And now we're drawing
all these toothpicks.
15:05 - Great.
15:06 - We're really cooking here.
15:07 - We're going to be done so soon.
15:09 - Why are there so many toothpicks
over on the left-hand side?
15:11 - I must done something wrong.
15:12 - Oh, look at this.
15:13 - I forgot my pop.
15:15 - This looks better now.
15:17 - Oh, look at me.
15:18 - No, no.
15:19 - No x there.
15:21 - All that math really
broke my brain.
15:23 - I'm translating to the x,
y position of the line,
15:26 - so the line is then drawn
from negative length divided
15:30 - by 2 to positive length
divided by 2 along the x-axis,
15:33 - y being 0, and then
rotated by an angle.
15:37 - Now we've got all
of our toothpicks.
15:39 - So I need to figure out is
the toothpick intersecting
15:42 - one of those lines.
15:44 - Let's also change the
stroke weight here to 1
15:47 - so that it's a little
easier to see the lines
15:50 - underneath the toothpicks.
15:55 - There's a lot of
toothpicks there
15:57 - because I've been sitting here
for the last 5 or 10 minutes
15:59 - trying to think about, wait.
16:01 - Is there a way I could
do this without--
16:03 - I don't know-- using the
built-in variable 2pi
16:06 - in my code?
16:07 - I mean, after all, I'm
trying to create a simulation
16:10 - to approximate the value of pi
in a scenario where I wouldn't
16:13 - know the value of pi.
16:15 - So if pi is in my
code, haven't I just--
16:18 - this is terrible.
16:19 - I think you and I together
right now just need
16:22 - to admit that, yes,
the core idea here
16:24 - is doing this in real life
with actual toothpicks.
16:27 - And there, you would never
be using the value of pi
16:31 - in your physical manifestation
of dropping the toothpicks.
16:33 - But in terms of being
able to draw the stuff
16:35 - to just simulate it, the
point is for the viewer
16:38 - to see what's happening.
16:39 - And if I'm using pi underneath
the hood, I think that's OK.
16:43 - Are we OK with that?
16:44 - I'm OK with that.
16:45 - I hope you're OK with that.
16:46 - So now I just need
to write a function
16:49 - to determine if the toothpick
has crossed one of the lines.
16:53 - So if I know the x, y, the
middle of the toothpick,
16:56 - I need to find what
column is closest.
16:59 - So I can actually take that
x, y position and divide
17:02 - by the width of the column
and round up or down.
17:06 - So x divided by t,
and then round that.
17:12 - Then the distance
is the difference
17:15 - between that closest
column location and x
17:17 - or the absolute value thereof.
17:20 - Now if that distance is
less than 1/2 the length
17:24 - of the toothpick times
sign of the angle,
17:26 - it's crossing one
of the columns.
17:31 - Let's draw it as green if it is
intersecting one of the lines.
17:37 - What's wrong here?
17:40 - Oh.
17:41 - So I found the closest
column is the index
17:44 - of the column not the actual
x position of the column.
17:47 - I need to multiply that by t.
17:52 - Something is wrong.
17:54 - Oh, oh, oh.
17:56 - Oh, my goodness.
17:58 - What a mess I have done of this.
17:59 - First of all, I'm picking
any angle between 0 and 2pi.
18:02 - And then, I'm using
sine of that angle.
18:05 - But what's going on?
18:10 - This is my p5 canvas.
18:13 - This is the horizontal axis.
18:16 - I drew my line like this
between negative length divided
18:22 - by 2 to positive length
divided by 2 with this
18:25 - being the center.
18:26 - If I'm going to
rotate it by an angle,
18:28 - I'm rotating it
relative to the x-axis,
18:30 - whereas, really,
I want to rotate
18:32 - it relative to the y-axis.
18:34 - I also want the acute
angle, not any angle
18:38 - that it happens to be.
18:40 - So I need to account
for that in my code.
18:42 - So the first thing I
can do is draw the line
18:45 - as a vertical line.
18:46 - That will help me quite a bit.
18:48 - So you can see here, if you zoom
in, some of them are correct,
18:52 - and some of them are incorrect.
18:54 - So let's just, for
right now, only
18:57 - do any random angle
between 0 and pi over 2.
19:03 - So this is correct now.
19:05 - But I only have a very
small range of angles.
19:09 - So visually, it just
doesn't look right.
19:11 - it looks a little wonky.
19:12 - I think it's going
to be fine if I
19:15 - pick any angle between negative
pi over 2 to positive pi over 2
19:20 - is actually all the possible
lines you could draw.
19:23 - I don't need to go the full
360 because it mirrors itself.
19:27 - That looks right now.
19:28 - I could also do between
0 and pi probably.
19:32 - I think it still looks correct,
although, visually, this
19:35 - is a very poor way
that I'm drawing it.
19:36 - Let's see if we can come up with
something better to highlight
19:40 - the lines that intersect
versus the ones that don't.
19:43 - Let me try switching
to a darker background
19:46 - and use a brighter color
for the intersections.
19:50 - And let me make
the lines thinner.
19:54 - And now maybe I'll make the
whole thing much bigger.
19:59 - And let's do like
10 lines per frame.
20:07 - We're ready.
20:08 - Now what I need to do is
calculate an approximate value
20:13 - for pi.
20:14 - Let me get a little bit smaller.
20:16 - So I need to find the
ratio between the number
20:18 - of toothpicks that
are intersecting
20:20 - and then the total
number of toothpicks.
20:23 - So every single time
total goes up by 1
20:28 - and only when
they're intersecting,
20:29 - intersecting goes up by 1.
20:33 - Then the ratio equals
intersecting divided by total.
20:38 - And the probability is 2 divided
by pi times l divided by t.
20:46 - So the probability equals
2 divided by pi times l
20:51 - divided by t.
20:53 - So I want to solve for pi.
20:55 - So pi times the probability
equals 2l over t,
21:01 - or pi equals 2l divided by
the probability times t.
21:06 - And for me, I'm not
calculating the probability.
21:10 - I am inferring it from the
ratio of the number of ones that
21:14 - intersected versus didn't.
21:15 - So this is my ratio in the code.
21:20 - So my pi approximation,
which I'll name pi,
21:23 - is equal to 2 times the length
divided by the ratio times t.
21:32 - What error am I getting here?
21:33 - Oh, there's a reserve
function called ratio,
21:36 - so we'll call this probability
or prob for probability.
21:40 - So dare I look at
my pi approximation?
21:47 - Hey, that's not so terrible.
21:50 - That looks kind of like pi.
21:51 - I think I might have
done this correctly.
21:53 - Let's at least put
that onto the canvas.
21:57 - Well, actually, let
me make a DOM element
21:58 - because drawing it
out of the canvas
22:00 - might be a little bit wonky.
22:03 - Let's make the page
have a white background,
22:05 - so the text is more
visible by default.
22:07 - [MUSIC PLAYING]
22:16 - So now I have a div
that I made in p5 that's
22:19 - just showing the value 0.0.
22:23 - And now I'm putting in
the approximation of pi
22:25 - to five decimal places.
22:28 - Let's go back and just drop
one toothpick per frame.
22:32 - I enjoy watching
it slowly converge.
22:34 - 3.1415926535.
22:39 - I should also mention
that, even though I didn't
22:41 - take this approach, I
could have actually used
22:43 - the formula, the
algorithm for testing
22:44 - whether one line segment
intersects another line
22:46 - segment.
22:47 - And, in fact, I've done this
before in the 2D raycasting
22:50 - coding challenge.
22:51 - I don't remember
what number that was,
22:52 - but I'll put it up
here on the screen.
22:54 - So I'll make sure to include
a link to the time code
22:56 - in that video where I go
through that algorithm,
22:58 - as well as this other
p5 example, which
23:01 - looks at how I can actually test
whether two line segments are
23:04 - intersecting or not with
this particular algorithm.
23:06 - Well, I'm not getting the
best approximation here,
23:09 - but I I've really
enjoyed this project.
23:12 - I am curious to see
what it looks like if I
23:14 - have a much smaller length.
23:18 - What if I do 100
lines per frame?
23:20 - 897932384626433.
23:26 - This is kind of fun to see.
23:28 - And there you have
it-- approximating pi
23:30 - with Buffon's needle.
23:33 - Now I had a lot
of fun doing this.
23:34 - I found it quite challenging
to explain all the math.
23:36 - Let me know if you have
questions or something didn't
23:38 - make sense or certainly
if I got something wrong.
23:41 - I would love to hear from you.
23:42 - Are you inspired to make your
own version of this simulation?
23:46 - What could you add to
it, change the design,
23:48 - the color, the interactivity?
23:50 - Could you try some kind
of physics simulation
23:53 - of the toothpicks
bouncing around?
23:54 - Maybe you try different shapes.
23:56 - What's the probability if
it's squares or circles
23:58 - or other kinds of polygons
besides just simple lines?
24:01 - If you make your
own version of this,
24:03 - I would love to know about it.
24:05 - And guess what?
24:06 - We've got a whole
passenger showcase
24:08 - at the codingtrain.com
in the video description.
24:10 - I'll include a link
with instructions
24:11 - for how to submit your own.
24:13 - I would love to check it out.
24:14 - Thanks so much for
taking this time with me
24:16 - and celebrating Pi Day.
24:17 - I will see you next
year, 2024 Pi Day
24:20 - and maybe beforehand through
the internet or whatever.
24:23 - I'm going to stop now.
24:24 - Goodbye.
24:25 - [TRAIN WHISTLE]
24:26 - (SINGING) Pi Day.
24:26 - My favorite treat.
24:28 - Circumference divided
by diameter t.
24:30 - It's Pi Day, Pi Day.
24:35 - Actually, now it's
getting to be a mess.
24:37 - Let me erase this really quick.
24:39 - [MUSIC PLAYING]
25:00 - Not my finest work.

Cleaned transcript:

[TRAIN WHISTLE] Happy Pi Day 2023, everybody. Oh, I'm excited for what I'm going to do today. I thought I would just combine two things that I love. One is delicious wonderful pie and toothpicks. Now you might be asking, you love toothpicks? That's a little weird. Well, I do have a coding challenge all about toothpicks. And I thought there's no chance I'm ever going to get to use toothpicks again. But today is the day. I am going to approximate the number pi by dropping a box of toothpicks onto the floor. How could that possibly even work? This problem is known as Buffon's needle named for GeorgesLouis Leclerc. Comte de Buffon. It's a very famous geometric probability problem from the 18th century. And it goes like this. Let's say you have a desktop, floor, whatever some horizontal surface. And it's made of wood, strips of wood with a given width. All of the strips are the same width. Now you have a box of toothpicks. Those toothpicks are shorter than the width of those strips of wood. And you take that box, and you dump it out on the table. What is the probability that any given toothpick will land and cross the border between those strips of wood? Well, guess what? This is another case where magically the number pi shows up. That probability is linked to the number pi. I'm going to simulate this idea of toothpicks as lines and see if we can approximate the number of pi in a p5.js sketch celebrating the wonderful day that is Pi Day (SINGING) It's Pi Day, Pi Day. Delicious and sweet, It's the only number that you can eat. It's Pi Day, Pi Day. Before I write the code, let's unpack the scenario a bit more and take a look at the math and where the number pi shows up. Imagine this whiteboard is the surface upon which I am going to dump a whole box of toothpicks on. And the important variable here is what is the distance between these parallel, vertical lines. Let's call that variable t. Now I'm using t because that's the naming convention that's on the Wikipedia page that defines the Buffon's problem. I don't know if I'm pronouncing it correctly, but I'm just going to say Buffon. The next thing we need is to discuss, well, what is the length of the toothpick? And I'm going to call that variable l. Let's start with the length of any given toothpick to be half of t. And let's make a gross oversimplification of the scenario just for a moment and say that there's some magical force at play that only allows the toothpicks to fall perfectly perpendicular to these vertical lines. So maybe a toothpick falls here, one falls here, one falls here, one falls here, et cetera all perfectly horizontal. The important number that I need to evaluate to determine if this particular toothpick is crossing one of these boundaries is the distance between the center of the toothpick and whichever vertical line happens to be closest to. So it's not this one. It's much further from this one than it is to this one. And we'll call that distance x. If x is less than half the length of this toothpick, if x is less than l divided by 2, then it is crossing one of these boundaries. How often will x be less than half the length of l? Well, because l is half the length of t, it's actually going to be 50% of the time. Think about that. If x is anywhere a quarter of the way across, then the toothpick is covering the boundary. If it's anywhere in between here all the way to 3/4, it's not crossing the boundary. Anywhere here, it is crossing the boundary. So that's 50% of the values in between the two borders it won't cross and 50% it would. Let's say l just happens to be the actual length of t. Well, then, it's always going to be crossing the boundary. There's nowhere for me to fit it where it's not touching one of the boundaries, so that would be 100%. So we can see here that there's a relationship between the length of the toothpick and the probability that it will cross one of these borders in the case of when the toothpicks are all falling perfectly horizontally. Now, of course, this is not actually how the toothpicks will fall. They'll fall askew at an angle. Maybe one falls like this. Maybe one falls like this, like this. Now, we have a new variable at play This particular angle. This is known as the acute angle. I know it's cute, but that's not why it's called acute. An acute angle is the angle that's between 0 and 90 degrees or pi divided by 2. So looking at this case, let's think for a moment. That's about 45 degrees. I'm sure I didn't draw it perfectly. But let's just now also say how's another simplification? Let's say the magical force now drops all the toothpicks at perfectly 45 degrees. So this is my toothpick, and this is the border. Remember, the distance I care about is the distance between the center of the toothpick, which is eyeballing it maybe about here, and the closest border, which is here. That's x. But right now, I want to calculate something different. I want to calculate this distance. This angle here is theta. What is this length here? Remember, the length of the entire toothpick is l. So the length of this hypotenuse of this right triangle right here is l divided by 2. Remember a nice wonderful trigonometry function called sine of an angle which equals the opposite over the hypotenuse? Well, this is the opposite, and this is the hypotenuse. Opposite equals l divided by 2 times sine of theta. So if this distance x let me get another color marker here. This is x here. If x is less than l divided by 2 times sine of theta, then the toothpick this whole toothpick is crossing a border. And if I were to take this idea essentially and consider it like I was doing here, now I can say, well, if all of the toothpicks are at a 45 degree angle, that's essentially the equivalent of the length of all the toothpicks being their actual length times sine of 45 degrees. So if all of the toothpicks were really to fall at 45 degrees, then I could say that the probability, if the length of any given toothpick is half of the width of each of these columns, then the probability is 50% times sine of 45 degrees. Essentially, the probability is the ratio of the length of the toothpick to this width times sine of theta. But the toothpicks don't actually fall at all the same angle. So we need to apply the idea of a uniform probability density function. There is an equal chance that an angle will fall at 0 degrees to 90 degrees to every angle in between. Theta will always be somewhere between 0 and pi divided by 2. x, that distance between the center of the toothpick and the nearest parallel line, that will always be somewhere between 0 and t divided by 2. So how do we calculate the probability for any toothpick that falls inside of this range of x uniform chance of all possibilities and inside of this range of theta uniform chance of all possible angles? What would be useful to do is look at a graph where one axis relates to x and another axis relates to theta. I know this is kind of counterintuitive, but let's have the yaxis be x. And let's just assume right now that t is 1. It's going to make things much simpler. So we have a range between 0 and 1/2. This is that distance to the border. Let's consider the xaxis to be the angle. And we have a range between 0 and pi divided by 2. And I'm just going to put pi over here, and maybe I'll get to y. I'm adding that along the xaxis as well. So what exactly, again, am I graphing here? Let's stop for a second. Remember, I have a space with parallel lines. And I've defined the distance between those lines as t, and that's equal to 1. t is equal to 1. Now I also have a toothpick with length l. And I want to assume my toothpick is also of length 1. With t equal to 1 and the length of the toothpick equal to 1 and this toothpick always touching the border, so if the angle were pi divided by 2, this would be the toothpick, what is the distance from x, the middle of it, to the border? It is 1/2. So I can plot that with an angle of pi over 2. The distance is 1/2. Now let's look at the case where the angle is 45 degrees or about pi divided by 4. I'm not going to draw this perfectly, but I'm going to try. This is now the angle 45 degrees. This is x. What is that distance? Well, if this is 1/2, then it is 1/2 times sine of theta, which is going to be I don't know maybe like 0.35ish. So the generic formula here for this value is equal to 1/2 times sine of theta. And if I were to plot that, I get this nice circle extending it all the way out to pi. Now remember, the toothpick isn't going to always fall with it precisely touching the border, but that's what this curve represents. Anywhere where that distance is below the curve, it's crossing a boundary. Anywhere where that distance is above the curve, it's not crossing the boundary. So this is really the same scenario in some ways as a coding challenge I did when I was throwing darts at a circle, and the ratio of the number of times the dart would land outside the circle to inside the circle was a way to approximate pi. We've got the same thing here. The ratio of how many times the toothpick lands and crosses the border versus doesn't cross the border can help us approximate pi. So how do I calculate the area here underneath this curve? Well, I need to use calculus. The area under a curve is known as the integral of that curve. And I should also point out that this isn't actually a circle. 1/2 is a much smaller distance than pi over 2. I really should have drawn it like this. So it really should look much more like this. And basically, this is half of this kind of ellipse. Actually, now it's getting to be a mess. Let me erase this really quick. [MUSIC PLAYING] Not my finest work, but this is a better version of that graph drawn to scale. And you can see that the area of this total rectangle is pi times 1/2, or pi divided by 2. And if we were to do the integration, the calculus, we would discover that the area of this half of this kind of ellipse here is actually 1. So the ratio of the area under the curve to the full rectangle is 1 divided by pi over 2, or 2 over pi, meaning, if we could take a box of toothpicks all of length 1, drop them onto a surface where the columns were spaced out by one, count up how many toothpicks crossed a border versus didn't, we can solve for the value of pi. I don't want to admit how many times I drew that graph. Here's a version of the graph that's actually drawn precisely, and I'll include the code for that graph as well. Additionally, if you want to do a deeper dive in the math, let me suggest three resources. There's a wonderful description of this problem from the College of Education at the University of Illinois. Includes the same graph and a discussion of the area underneath the curve. There's, of course, the Wikipedia page for Buffon's needle problem, which actually shows the integration formula. And you can see there that that's a more general purpose version of the formula for any value of l and any value of t. You can also find this wonderful post on Thomas Ogden's website that describes the problem and includes many different links to other resources as well. I don't know if I thought I'd ever get here, but I can start working on the code part, which I think will be the part that I'll be a bit more comfortable with. That was a struggle for me to try to explain that math. And thank you for tolerating it. So let's consider a p5 canvas, 400 by 400. We need some variables. For example, what if t is equal to 100? That'll make things kind of easy. Maybe I should go for 50 right now. And then let's have the length of and I'm going to call that len for the toothpick equal to 25, half of that width. So in the draw loop, first step is to draw the vertical lines. There we go. Looking good. And then I need to randomly drop a toothpick every frame. So what am I picking? If I'm dropping a toothpick, it's going to land with its center somewhere between 0 and the width of the canvas and a random angle between 0 and pi divided by 2. But visually, I want this to look more interesting, so I could actually have it any angle between 0 and 2pi. So that's a random angle, and that's a random position. Now let me just draw the line. Oh, and I'm going to need a random y. The y does it matter. But to make it look interesting, I'll pick a random y. How am I drawing the line? So the line will be a horizontal I'm going to rotate by the angle. And then I need to draw the line with x at the center. So x minus length divided by 2, 0 x plus length divided by 2, 0. There's all my toothpicks. So clearly, let's draw just the background and the lines once in setup. And now we're drawing all these toothpicks. Great. We're really cooking here. We're going to be done so soon. Why are there so many toothpicks over on the lefthand side? I must done something wrong. Oh, look at this. I forgot my pop. This looks better now. Oh, look at me. No, no. No x there. All that math really broke my brain. I'm translating to the x, y position of the line, so the line is then drawn from negative length divided by 2 to positive length divided by 2 along the xaxis, y being 0, and then rotated by an angle. Now we've got all of our toothpicks. So I need to figure out is the toothpick intersecting one of those lines. Let's also change the stroke weight here to 1 so that it's a little easier to see the lines underneath the toothpicks. There's a lot of toothpicks there because I've been sitting here for the last 5 or 10 minutes trying to think about, wait. Is there a way I could do this without I don't know using the builtin variable 2pi in my code? I mean, after all, I'm trying to create a simulation to approximate the value of pi in a scenario where I wouldn't know the value of pi. So if pi is in my code, haven't I just this is terrible. I think you and I together right now just need to admit that, yes, the core idea here is doing this in real life with actual toothpicks. And there, you would never be using the value of pi in your physical manifestation of dropping the toothpicks. But in terms of being able to draw the stuff to just simulate it, the point is for the viewer to see what's happening. And if I'm using pi underneath the hood, I think that's OK. Are we OK with that? I'm OK with that. I hope you're OK with that. So now I just need to write a function to determine if the toothpick has crossed one of the lines. So if I know the x, y, the middle of the toothpick, I need to find what column is closest. So I can actually take that x, y position and divide by the width of the column and round up or down. So x divided by t, and then round that. Then the distance is the difference between that closest column location and x or the absolute value thereof. Now if that distance is less than 1/2 the length of the toothpick times sign of the angle, it's crossing one of the columns. Let's draw it as green if it is intersecting one of the lines. What's wrong here? Oh. So I found the closest column is the index of the column not the actual x position of the column. I need to multiply that by t. Something is wrong. Oh, oh, oh. Oh, my goodness. What a mess I have done of this. First of all, I'm picking any angle between 0 and 2pi. And then, I'm using sine of that angle. But what's going on? This is my p5 canvas. This is the horizontal axis. I drew my line like this between negative length divided by 2 to positive length divided by 2 with this being the center. If I'm going to rotate it by an angle, I'm rotating it relative to the xaxis, whereas, really, I want to rotate it relative to the yaxis. I also want the acute angle, not any angle that it happens to be. So I need to account for that in my code. So the first thing I can do is draw the line as a vertical line. That will help me quite a bit. So you can see here, if you zoom in, some of them are correct, and some of them are incorrect. So let's just, for right now, only do any random angle between 0 and pi over 2. So this is correct now. But I only have a very small range of angles. So visually, it just doesn't look right. it looks a little wonky. I think it's going to be fine if I pick any angle between negative pi over 2 to positive pi over 2 is actually all the possible lines you could draw. I don't need to go the full 360 because it mirrors itself. That looks right now. I could also do between 0 and pi probably. I think it still looks correct, although, visually, this is a very poor way that I'm drawing it. Let's see if we can come up with something better to highlight the lines that intersect versus the ones that don't. Let me try switching to a darker background and use a brighter color for the intersections. And let me make the lines thinner. And now maybe I'll make the whole thing much bigger. And let's do like 10 lines per frame. We're ready. Now what I need to do is calculate an approximate value for pi. Let me get a little bit smaller. So I need to find the ratio between the number of toothpicks that are intersecting and then the total number of toothpicks. So every single time total goes up by 1 and only when they're intersecting, intersecting goes up by 1. Then the ratio equals intersecting divided by total. And the probability is 2 divided by pi times l divided by t. So the probability equals 2 divided by pi times l divided by t. So I want to solve for pi. So pi times the probability equals 2l over t, or pi equals 2l divided by the probability times t. And for me, I'm not calculating the probability. I am inferring it from the ratio of the number of ones that intersected versus didn't. So this is my ratio in the code. So my pi approximation, which I'll name pi, is equal to 2 times the length divided by the ratio times t. What error am I getting here? Oh, there's a reserve function called ratio, so we'll call this probability or prob for probability. So dare I look at my pi approximation? Hey, that's not so terrible. That looks kind of like pi. I think I might have done this correctly. Let's at least put that onto the canvas. Well, actually, let me make a DOM element because drawing it out of the canvas might be a little bit wonky. Let's make the page have a white background, so the text is more visible by default. [MUSIC PLAYING] So now I have a div that I made in p5 that's just showing the value 0.0. And now I'm putting in the approximation of pi to five decimal places. Let's go back and just drop one toothpick per frame. I enjoy watching it slowly converge. 3.1415926535. I should also mention that, even though I didn't take this approach, I could have actually used the formula, the algorithm for testing whether one line segment intersects another line segment. And, in fact, I've done this before in the 2D raycasting coding challenge. I don't remember what number that was, but I'll put it up here on the screen. So I'll make sure to include a link to the time code in that video where I go through that algorithm, as well as this other p5 example, which looks at how I can actually test whether two line segments are intersecting or not with this particular algorithm. Well, I'm not getting the best approximation here, but I I've really enjoyed this project. I am curious to see what it looks like if I have a much smaller length. What if I do 100 lines per frame? 897932384626433. This is kind of fun to see. And there you have it approximating pi with Buffon's needle. Now I had a lot of fun doing this. I found it quite challenging to explain all the math. Let me know if you have questions or something didn't make sense or certainly if I got something wrong. I would love to hear from you. Are you inspired to make your own version of this simulation? What could you add to it, change the design, the color, the interactivity? Could you try some kind of physics simulation of the toothpicks bouncing around? Maybe you try different shapes. What's the probability if it's squares or circles or other kinds of polygons besides just simple lines? If you make your own version of this, I would love to know about it. And guess what? We've got a whole passenger showcase at the codingtrain.com in the video description. I'll include a link with instructions for how to submit your own. I would love to check it out. Thanks so much for taking this time with me and celebrating Pi Day. I will see you next year, 2024 Pi Day and maybe beforehand through the internet or whatever. I'm going to stop now. Goodbye. [TRAIN WHISTLE] (SINGING) Pi Day. My favorite treat. Circumference divided by diameter t. It's Pi Day, Pi Day. Actually, now it's getting to be a mess. Let me erase this really quick. [MUSIC PLAYING] Not my finest work.
