With timestamps:

00:00 - [BELL RINGING]
00:01 - Hello.
00:01 - Welcome to another video
in the Data and API series.
00:05 - So far I've built two projects.
00:06 - Well, the first one
wasn't really a project,
00:08 - if I'm being honest, it was
just a quick demonstration
00:11 - of the web Fetch API, the
Fetch function in JavaScript
00:14 - in the browser.
00:14 - It's a fundamental
building block
00:16 - of the examples I'm
building right now.
00:18 - The second project
was really a project.
00:20 - It used Fetch to load a
CSV file, tabular data,
00:25 - world-average
temperatures from 1880
00:27 - to present and graph them using
a JavaScript library called
00:30 - chart.js.
00:31 - But what you haven't seen,
what I haven't done yet
00:34 - is find some data
that's external.
00:36 - It's not a local file, it's
not an image on my hard drive
00:39 - or a CSV file, it's
something that I'm
00:42 - getting from an external API.
00:44 - What do I even mean by an API?
00:46 - API stands for Application
Programming Interface.
00:48 - Yes, it sounds very
important, but it's really
00:50 - a little technical jargon
for something quite simple.
00:54 - The term refers to
two applications
00:57 - talking to each other, two
computer programs sending
00:59 - information back and forth.
01:00 - So if I'm the designer
of an application
01:02 - and I want other people
who are programming stuff
01:04 - to be able to talk
to my application,
01:06 - I will create an interface,
a set of conventions,
01:09 - a protocol by which
other applications could
01:13 - talk to my application.
01:14 - And what I might want to do
with my application is serve up
01:16 - data, for example,
maybe I'm a newspaper
01:19 - and I want to let other
applications to have access
01:21 - to all the news articles over
time, or I am an image database
01:25 - and I want to let other
applications have access
01:27 - to images in my database.
01:28 - There are a lot of pieces of
this puzzle for communicating
01:31 - with an API.
01:32 - You might have to authenticate
with some kind of security
01:34 - stuff, you might have a
limited number of requests
01:37 - you can make from
the API, you might
01:39 - have to provide a certain amount
of parameters to your request
01:42 - so you get the right data back.
01:44 - But for the purpose
of this project--
01:46 - I designed this project to
start in a really simple place.
01:49 - Remember that fetch function?
01:50 - Our building block?
01:51 - All we need is the URL
address of the API,
01:54 - we put that in the
fetch function,
01:56 - we call the fetch function,
and back comes the data.
02:00 - The API that I've been
using to demonstrate this
02:02 - is at a website
called WhereTheISS.at
02:05 - It's an API that gives you
back the current location
02:09 - in latitude and longitude of
the International Space Station.
02:12 - It actually gives you a lot of
other information besides just
02:14 - the latitude and longitude.
02:15 - It gives you the altitude,
the velocity, the visibility,
02:18 - what time it is, where the
sun is, all sorts of stuff.
02:21 - I want to do just one thing.
02:22 - I just want to get the latitude
and longitude displayed
02:25 - on the web page,
then I also want
02:27 - to plot that point on a map.
02:29 - So to do that, I'm also going
to use the leaflet.js library.
02:33 - It's an open source
mapping library
02:34 - where all of the image--
02:36 - the map images are
Creative Commons licensed,
02:39 - but you could also look into
using other mapping libraries,
02:42 - like Google Maps or Map
Box, and try experimenting
02:45 - with one of those, as well.
02:46 - But before we could
do any of this,
02:48 - before we can dig into
this project, you and me,
02:51 - we're going to have a talk,
we've got to talk about JSON,
02:54 - J-S-O-N, or JavaScript
Object Notation.
02:57 - The good news, if
you're here already,
02:59 - you're probably familiar
somewhat with JavaScript.
03:01 - After all, it's kind
of a requirement
03:03 - to be in this video
series already.
03:05 - It's fine if you're a beginner
and I have other resources
03:07 - for people who are just learning
JavaScript to kind of get up
03:09 - to speed.
03:10 - But right here right
now, you should
03:11 - be familiar with the
basic idea of JavaScript,
03:13 - and you've hopefully maybe
written some code like this,
03:16 - like maybe you wrote some code
once that said let pause--
03:21 - I'm going to create a variable
like pause for position--
03:24 - it's going to have open
curly bracket, closed
03:26 - curly bracket,
maybe a semicolon,
03:27 - and then I'm going to
put two properties inside
03:29 - of this JavaScript
object literal,
03:31 - like Lat for latitude, colon,
and Lon for longitude, colon.
03:36 - Latitude is between
negative 90 and 90.
03:39 - So let's pick
negative 45, comma,
03:41 - longitude is s other number,
let's pick 112-- just picking
03:44 - this randomly.
03:45 - And here I have a
JavaScript object,
03:48 - a JavaScript object literal.
03:51 - Let's go actually
write this in code.
03:53 - I have a blank HTML file here.
03:54 - And I'm just going to--
03:55 - with all script tag
in the body, and I'm
03:57 - going to just write, I'm going
to put this exact code in here,
04:00 - let pause equals
latitude, what did I pick?
04:02 - Negative 45.
04:03 - Longitude, 112.
04:06 - And then let's just
say console.log pause.
04:09 - So if I go over to the
browser, I can see here,
04:12 - there it is, there's my
JavaScript object with two
04:14 - properties, latitude
and longitude.
04:17 - So this, in essence--
04:18 - I'm spending way
too much time trying
04:20 - to find something
quite simple, which
04:21 - is a data that's in JSON
format, is exactly this.
04:25 - It's data written into
a file with this syntax,
04:28 - the same exact syntax as
JavaScript object literals.
04:32 - There are a few
important differences.
04:34 - For example, if the data was
not hard-coded into code itself,
04:39 - you might find it in something
like a file or a raw text file
04:43 - with a name like file.json.
04:45 - And in that file, you would
see exactly this, an open curly
04:49 - bracket, a closed curly
bracket, but the property names
04:53 - would have to be in quotes.
04:55 - So latitude would
have quotes around it,
04:57 - longitude would have
quotes around it,
04:59 - these numbers could
be without quotes,
05:01 - they would look like this.
05:02 - And so this could actually
be the contents of a JSON
05:05 - file itself.
05:06 - Now, what in this file can
be much more sophisticated
05:09 - than just two named properties?
05:11 - Two numbers with the
keys Lat and Lon?
05:13 - There could be a
property that is actually
05:15 - an array of a list of things.
05:18 - There could be a property
that's another object
05:20 - with several other properties
which has an array in it.
05:24 - This can be a nested
tree structure of data.
05:27 - I don't want to go too
far down that road,
05:28 - we'll get there eventually.
05:30 - I just want to do
very basics here.
05:32 - I want to reach out
to an external API,
05:35 - ask for some data, that data
will come in JSON format,
05:39 - I want to extract the values
of certain properties,
05:41 - and do something with them.
05:43 - And the the WhereTheIssAt API
is a really nice place for us
05:46 - to start.
05:47 - So here I am at the
WhereTheIss.at website is.
05:51 - Hopefully this
website still exists
05:53 - whenever you're
watching this video.
05:54 - This is not an official
International Space Station
05:57 - API, whatever that might be,
this is created and maintained
06:00 - by Bill Shop, and thank you so
much for the work and building
06:02 - out this website and API.
06:04 - And I want to
build, essentially,
06:05 - what is the same as what's on
the home page of this website.
06:08 - So one that shows a map and
shows where the International
06:10 - Space Station is.
06:11 - I'm going to make a much
simpler version here,
06:13 - but you can get
some ideas of how
06:15 - you might make yours
a little fancier
06:16 - with some additional features.
06:17 - So the first thing
you always want
06:19 - to do if you're
working with an API
06:20 - is try to find the documentation
for that API itself.
06:25 - And on this website,
I can find it
06:26 - by looking right down here
and finding this linked API.
06:30 - I am going to click that.
06:32 - And now, where I am, I'm at
the Where The ISS At REST API
06:36 - documentation.
06:37 - In a future video, I'll talk
about what that REST API means,
06:40 - and in fact, I have
a project that's
06:42 - going to come in
this playlist where
06:43 - we'll build our own REST API.
06:45 - In short, you can think of REST
as a pretty good convention
06:47 - and style for how an API
is designed and it works.
06:50 - But there's really
important concepts here.
06:52 - We can see, a-ha, what is
the authentication required?
06:56 - Really good sign for us
as we're just starting out
06:58 - in our journey of learning to
work with APIs because there
07:01 - is no authentication required.
07:03 - So authentication required
can involve some steps,
07:05 - like signing up for an API key,
which is like your secret code
07:09 - for using the API, you have
to put that in your code.
07:11 - And sometimes you have
to hide it in your code.
07:13 - We're going to
get into all that,
07:14 - but I'm so glad to use this API
that doesn't have any of that
07:17 - just for starting.
07:18 - Rate limiting is
a concern, right?
07:20 - For us right now, we don't
have to worry about it.
07:23 - This, the limits here
are 1 per second,
07:25 - so I'm going to remember that
fact when a little bit later
07:28 - in this video I start trying
to put in a timing information
07:32 - as to how often I want
to request the updated
07:34 - location of the space station.
07:36 - And then, some other
information on responses,
07:39 - and then here, this is also
really crucial, endpoints.
07:43 - What are endpoints?
07:44 - Endpoints describe
the path, the URL path
07:47 - that you can request a
certain bit of data from.
07:49 - And certain API will
have different endpoints.
07:51 - Oh, if you want the latitude
longitude of this satellite,
07:54 - go to this endpoint, if
you want the latitude
07:55 - and longitude of
this other satellite
07:57 - go to this other endpoint.
07:58 - And that's what
we're seeing here.
07:59 - What are the example URLs.
08:01 - And this one right here looks
like api.wheretheiss.at/v1,
08:06 - this is very common.
08:08 - APIs will often
include in their path
08:10 - in their endpoint reference
to a version number
08:13 - because it might change
how it works later,
08:16 - and so they would then
update the API to be v2,
08:19 - but you could still maybe use,
if they're making it available,
08:22 - the old v1 links.
08:23 - But rather than explain
this too much more,
08:25 - I can actually just copy
this URL and go right here,
08:29 - paste it into the browser.
08:30 - We can see, oh,
look, this is a list
08:35 - of all the available satellites.
08:36 - Well, this is a very
simple API, it just
08:38 - makes one thing available, the
International Space Station,
08:41 - and that's its ID number.
08:43 - Why do I care about that?
08:44 - Well, the ID number also
signifies another endpoint
08:48 - where I can get more information
about this specific satellite.
08:51 - And if I kept going
down this page,
08:53 - I would look down and see like,
oh, right here, for example,
08:56 - if I know the ID of
a given satellite,
08:59 - I can then go to /satellites,
slash, that ID number,
09:03 - I do that, I paste that
URL in instead, and voila,
09:10 - I have all of the
data from the API.
09:12 - And noticed that if I refresh,
the latitude and longitude
09:16 - is updating, it's changing.
09:18 - Very small increments because in
terms of latitude and longitude
09:21 - measurements, the space
station is orbiting the Earth
09:24 - very slowly, but those
numbers are updated
09:27 - every time I refresh the API.
09:29 - You might also notice this
Raw Parsed button up here.
09:33 - You might not see
this in your browser
09:35 - if you're following
this along exactly,
09:36 - yours might look just like this.
09:38 - So this is typically what
raw JSON data looks like.
09:42 - It doesn't have line
breaks and spaces and tabs
09:44 - in it, why should it?
09:45 - It's for computers to
send data back and forth.
09:48 - But I have a Chrome
extension, a browser extension
09:51 - for the Chrome browser
that parses and gives
09:53 - syntax highlighting
and line breaks
09:55 - and lets it be foldable
and all sort of things.
09:57 - So there's an ample
number of these
09:59 - if you search browser
extension JSON formatter,
10:03 - you'll find a bunch,
but I will include
10:04 - a link in this video
description for the one
10:06 - that I'm using right now.
10:08 - OK.
10:09 - There's not much more for us
to do for this very first step.
10:12 - I just need to remember this end
point, this URL path to the API
10:16 - itself.
10:17 - When I go into my code, I
don't need this thing anymore,
10:21 - and I'm going to use
the Fetch function.
10:23 - So I want to just
start by writing
10:25 - an async function called
Get Data, that way,
10:27 - I could just use that wait
keywords right from the outset.
10:32 - And I always forget
to say function.
10:36 - And let's call this GetIss.
10:39 - And then I'm going to say const
response equals await fetch.
10:44 - And then what do
I want to fetch?
10:46 - That particular URL.
10:49 - But I don't love this.
10:51 - I think I would make
much more sense for me
10:52 - to just store in a kind of
global variable, the URL
10:56 - to the API, and
maybe I might even
10:58 - want to call that API URL or ISS
API URL or something like that.
11:04 - And then I could just put it
in here in the Fetch function
11:07 - itself.
11:08 - So if you recall,
when you get data back
11:12 - from the Fetch function,
it comes as a stream
11:15 - and you have to package it up
in the format that you want.
11:18 - We've done it with
images as a blob,
11:21 - we've done it with
text CSV data as text,
11:24 - and now it is time
for us to say,
11:27 - data equals await response.json.
11:31 - We want to convert that
response into JSON.
11:34 - I'm going to say
console.log data,
11:36 - and then I'm just
going to say, I'm
11:38 - going to call the function
get data when the page loads.
11:42 - And let's see if we see the data
from the API in the console.
11:46 - GetData is not defined.
11:48 - Oh, that's because
I called it GetIss.
11:53 - Would be nice to call the
function with the name
11:55 - that I called it.
11:58 - API URL is not defined--
12:01 - oh, because that is
defined first-- it's very.
12:06 - I've actually written this
in kind of a terrible way.
12:08 - Let me just be quite
consistent and let me
12:10 - put the function at the top,
then let me define the API URL
12:15 - top, and then down here,
I'm going to call it GetIss.
12:18 - Order of operations is
a thing in programming.
12:22 - There we go.
12:23 - Look.
12:23 - And now I have that data
logged into the console.
12:26 - So let's say I want to
pull out specifically
12:29 - just the latitude or
just the longitude.
12:31 - The good news is I could just
get those from the JavaScript
12:36 - object, the data.
12:37 - This is why it's so convenient
to work with JSON data
12:39 - in JavaScript, comes in
JavaScript data notation,
12:42 - and then you've got it
as a JavaScript object.
12:44 - So I could just say
data.latitude, data.longitude,
12:53 - if I want to log just
those bits of data,
12:56 - we can see there
they are right there.
12:58 - Then I can also do
this fancy thing
12:59 - called JavaScript
destructuring, which basically
13:03 - takes the pieces out of a
JavaScript object or an array,
13:07 - and puts them into
separate variables.
13:09 - So I can just do this.
13:11 - If I say const
latitude in an object,
13:14 - latitude comma longitude
equals data, then
13:17 - that will give me the
latitude and the longitude
13:22 - in separate variables.
13:23 - There they are again.
13:24 - So what do I want to do?
13:26 - Maybe what I want to do actually
on the web page itself is
13:30 - I want to create a header
saying where the ISS--
13:37 - where is the ISS, then I'll make
that a header tag, then I'll
13:41 - make a paragraph tag, and
I'll say the latitude--
13:46 - or let me just say latitude
span ID equals Lat Lat,
13:53 - and then I will add a line
break, and then I will say
13:58 - do the exact same thing
but with longitude.
14:04 - And I'll say span ID equals
lon, and then what I'll do
14:09 - is I will say
document.getElement
14:15 - by ID lat.TextContent
equals latitude.
14:21 - And I'll do the same exact
thing with the longitude.
14:28 - And if I go back
now, there we go.
14:31 - Look at that.
14:32 - There it is, the
latitude and longitude.
14:34 - And every time I
refresh this page,
14:36 - I'm getting the new values.
14:37 - I have now successfully
used the fetch function
14:41 - to retrieve data from an API,
from a particular endpoint
14:46 - of an API.
14:47 - There's the endpoint.
14:48 - I take that stuff that I get
back, I converted into JSON,
14:52 - I destructured the data out
into two separate variables,
14:55 - latitude and longitude,
and then I take that data
14:57 - and redisplay it into an
element on the webpage itself.
15:01 - Woohoo.
15:02 - All right.
15:03 - This is actually
kind of almost done,
15:05 - but there are two
really big things
15:07 - that I want to do to this.
15:08 - Number one is I want to be
able to take the latitude
15:11 - and longitude and
plot it onto a map.
15:13 - So in the next video,
I'm going to do
15:15 - just that with Leaflet.js, the
JavaScript mapping library.
15:20 - But before I get there,
there's another thing
15:22 - that I want to do, which I'll
come back and do at the end,
15:24 - but you might want to even try
it as an exercise right now.
15:27 - How could I have after
a certain amount of time
15:30 - the webpage take it upon itself
to go and request updated data
15:34 - and update those span elements
on the webpage itself?
15:38 - One way to do that is with using
a function called Set Interval.
15:41 - And I'll come back and
add this to this program,
15:43 - but that's something you
could try now as an exercise.
15:45 - And something else you
might try is just, well,
15:46 - what if you want to also
add velocity to this?
15:48 - Or maybe go and
find a different API
15:51 - with an endpoint that you
can retrieve some data from
15:54 - and redisplay on the webpage?
15:56 - Just watch out for all of
the authentication stuff.
15:58 - If the API you find
requires authentication,
16:00 - you might have to do some
funny business with an API key
16:03 - or some type of a log-in before
you can access that data.
16:05 - All right.
16:06 - Thanks for watching.
16:07 - I'll see you in
the next part where
16:08 - we'll get that map happening
here on the webpage.
16:11 - [MUSIC PLAYING]

Cleaned transcript:

[BELL RINGING] Hello. Welcome to another video in the Data and API series. So far I've built two projects. Well, the first one wasn't really a project, if I'm being honest, it was just a quick demonstration of the web Fetch API, the Fetch function in JavaScript in the browser. It's a fundamental building block of the examples I'm building right now. The second project was really a project. It used Fetch to load a CSV file, tabular data, worldaverage temperatures from 1880 to present and graph them using a JavaScript library called chart.js. But what you haven't seen, what I haven't done yet is find some data that's external. It's not a local file, it's not an image on my hard drive or a CSV file, it's something that I'm getting from an external API. What do I even mean by an API? API stands for Application Programming Interface. Yes, it sounds very important, but it's really a little technical jargon for something quite simple. The term refers to two applications talking to each other, two computer programs sending information back and forth. So if I'm the designer of an application and I want other people who are programming stuff to be able to talk to my application, I will create an interface, a set of conventions, a protocol by which other applications could talk to my application. And what I might want to do with my application is serve up data, for example, maybe I'm a newspaper and I want to let other applications to have access to all the news articles over time, or I am an image database and I want to let other applications have access to images in my database. There are a lot of pieces of this puzzle for communicating with an API. You might have to authenticate with some kind of security stuff, you might have a limited number of requests you can make from the API, you might have to provide a certain amount of parameters to your request so you get the right data back. But for the purpose of this project I designed this project to start in a really simple place. Remember that fetch function? Our building block? All we need is the URL address of the API, we put that in the fetch function, we call the fetch function, and back comes the data. The API that I've been using to demonstrate this is at a website called WhereTheISS.at It's an API that gives you back the current location in latitude and longitude of the International Space Station. It actually gives you a lot of other information besides just the latitude and longitude. It gives you the altitude, the velocity, the visibility, what time it is, where the sun is, all sorts of stuff. I want to do just one thing. I just want to get the latitude and longitude displayed on the web page, then I also want to plot that point on a map. So to do that, I'm also going to use the leaflet.js library. It's an open source mapping library where all of the image the map images are Creative Commons licensed, but you could also look into using other mapping libraries, like Google Maps or Map Box, and try experimenting with one of those, as well. But before we could do any of this, before we can dig into this project, you and me, we're going to have a talk, we've got to talk about JSON, JSON, or JavaScript Object Notation. The good news, if you're here already, you're probably familiar somewhat with JavaScript. After all, it's kind of a requirement to be in this video series already. It's fine if you're a beginner and I have other resources for people who are just learning JavaScript to kind of get up to speed. But right here right now, you should be familiar with the basic idea of JavaScript, and you've hopefully maybe written some code like this, like maybe you wrote some code once that said let pause I'm going to create a variable like pause for position it's going to have open curly bracket, closed curly bracket, maybe a semicolon, and then I'm going to put two properties inside of this JavaScript object literal, like Lat for latitude, colon, and Lon for longitude, colon. Latitude is between negative 90 and 90. So let's pick negative 45, comma, longitude is s other number, let's pick 112 just picking this randomly. And here I have a JavaScript object, a JavaScript object literal. Let's go actually write this in code. I have a blank HTML file here. And I'm just going to with all script tag in the body, and I'm going to just write, I'm going to put this exact code in here, let pause equals latitude, what did I pick? Negative 45. Longitude, 112. And then let's just say console.log pause. So if I go over to the browser, I can see here, there it is, there's my JavaScript object with two properties, latitude and longitude. So this, in essence I'm spending way too much time trying to find something quite simple, which is a data that's in JSON format, is exactly this. It's data written into a file with this syntax, the same exact syntax as JavaScript object literals. There are a few important differences. For example, if the data was not hardcoded into code itself, you might find it in something like a file or a raw text file with a name like file.json. And in that file, you would see exactly this, an open curly bracket, a closed curly bracket, but the property names would have to be in quotes. So latitude would have quotes around it, longitude would have quotes around it, these numbers could be without quotes, they would look like this. And so this could actually be the contents of a JSON file itself. Now, what in this file can be much more sophisticated than just two named properties? Two numbers with the keys Lat and Lon? There could be a property that is actually an array of a list of things. There could be a property that's another object with several other properties which has an array in it. This can be a nested tree structure of data. I don't want to go too far down that road, we'll get there eventually. I just want to do very basics here. I want to reach out to an external API, ask for some data, that data will come in JSON format, I want to extract the values of certain properties, and do something with them. And the the WhereTheIssAt API is a really nice place for us to start. So here I am at the WhereTheIss.at website is. Hopefully this website still exists whenever you're watching this video. This is not an official International Space Station API, whatever that might be, this is created and maintained by Bill Shop, and thank you so much for the work and building out this website and API. And I want to build, essentially, what is the same as what's on the home page of this website. So one that shows a map and shows where the International Space Station is. I'm going to make a much simpler version here, but you can get some ideas of how you might make yours a little fancier with some additional features. So the first thing you always want to do if you're working with an API is try to find the documentation for that API itself. And on this website, I can find it by looking right down here and finding this linked API. I am going to click that. And now, where I am, I'm at the Where The ISS At REST API documentation. In a future video, I'll talk about what that REST API means, and in fact, I have a project that's going to come in this playlist where we'll build our own REST API. In short, you can think of REST as a pretty good convention and style for how an API is designed and it works. But there's really important concepts here. We can see, aha, what is the authentication required? Really good sign for us as we're just starting out in our journey of learning to work with APIs because there is no authentication required. So authentication required can involve some steps, like signing up for an API key, which is like your secret code for using the API, you have to put that in your code. And sometimes you have to hide it in your code. We're going to get into all that, but I'm so glad to use this API that doesn't have any of that just for starting. Rate limiting is a concern, right? For us right now, we don't have to worry about it. This, the limits here are 1 per second, so I'm going to remember that fact when a little bit later in this video I start trying to put in a timing information as to how often I want to request the updated location of the space station. And then, some other information on responses, and then here, this is also really crucial, endpoints. What are endpoints? Endpoints describe the path, the URL path that you can request a certain bit of data from. And certain API will have different endpoints. Oh, if you want the latitude longitude of this satellite, go to this endpoint, if you want the latitude and longitude of this other satellite go to this other endpoint. And that's what we're seeing here. What are the example URLs. And this one right here looks like api.wheretheiss.at/v1, this is very common. APIs will often include in their path in their endpoint reference to a version number because it might change how it works later, and so they would then update the API to be v2, but you could still maybe use, if they're making it available, the old v1 links. But rather than explain this too much more, I can actually just copy this URL and go right here, paste it into the browser. We can see, oh, look, this is a list of all the available satellites. Well, this is a very simple API, it just makes one thing available, the International Space Station, and that's its ID number. Why do I care about that? Well, the ID number also signifies another endpoint where I can get more information about this specific satellite. And if I kept going down this page, I would look down and see like, oh, right here, for example, if I know the ID of a given satellite, I can then go to /satellites, slash, that ID number, I do that, I paste that URL in instead, and voila, I have all of the data from the API. And noticed that if I refresh, the latitude and longitude is updating, it's changing. Very small increments because in terms of latitude and longitude measurements, the space station is orbiting the Earth very slowly, but those numbers are updated every time I refresh the API. You might also notice this Raw Parsed button up here. You might not see this in your browser if you're following this along exactly, yours might look just like this. So this is typically what raw JSON data looks like. It doesn't have line breaks and spaces and tabs in it, why should it? It's for computers to send data back and forth. But I have a Chrome extension, a browser extension for the Chrome browser that parses and gives syntax highlighting and line breaks and lets it be foldable and all sort of things. So there's an ample number of these if you search browser extension JSON formatter, you'll find a bunch, but I will include a link in this video description for the one that I'm using right now. OK. There's not much more for us to do for this very first step. I just need to remember this end point, this URL path to the API itself. When I go into my code, I don't need this thing anymore, and I'm going to use the Fetch function. So I want to just start by writing an async function called Get Data, that way, I could just use that wait keywords right from the outset. And I always forget to say function. And let's call this GetIss. And then I'm going to say const response equals await fetch. And then what do I want to fetch? That particular URL. But I don't love this. I think I would make much more sense for me to just store in a kind of global variable, the URL to the API, and maybe I might even want to call that API URL or ISS API URL or something like that. And then I could just put it in here in the Fetch function itself. So if you recall, when you get data back from the Fetch function, it comes as a stream and you have to package it up in the format that you want. We've done it with images as a blob, we've done it with text CSV data as text, and now it is time for us to say, data equals await response.json. We want to convert that response into JSON. I'm going to say console.log data, and then I'm just going to say, I'm going to call the function get data when the page loads. And let's see if we see the data from the API in the console. GetData is not defined. Oh, that's because I called it GetIss. Would be nice to call the function with the name that I called it. API URL is not defined oh, because that is defined first it's very. I've actually written this in kind of a terrible way. Let me just be quite consistent and let me put the function at the top, then let me define the API URL top, and then down here, I'm going to call it GetIss. Order of operations is a thing in programming. There we go. Look. And now I have that data logged into the console. So let's say I want to pull out specifically just the latitude or just the longitude. The good news is I could just get those from the JavaScript object, the data. This is why it's so convenient to work with JSON data in JavaScript, comes in JavaScript data notation, and then you've got it as a JavaScript object. So I could just say data.latitude, data.longitude, if I want to log just those bits of data, we can see there they are right there. Then I can also do this fancy thing called JavaScript destructuring, which basically takes the pieces out of a JavaScript object or an array, and puts them into separate variables. So I can just do this. If I say const latitude in an object, latitude comma longitude equals data, then that will give me the latitude and the longitude in separate variables. There they are again. So what do I want to do? Maybe what I want to do actually on the web page itself is I want to create a header saying where the ISS where is the ISS, then I'll make that a header tag, then I'll make a paragraph tag, and I'll say the latitude or let me just say latitude span ID equals Lat Lat, and then I will add a line break, and then I will say do the exact same thing but with longitude. And I'll say span ID equals lon, and then what I'll do is I will say document.getElement by ID lat.TextContent equals latitude. And I'll do the same exact thing with the longitude. And if I go back now, there we go. Look at that. There it is, the latitude and longitude. And every time I refresh this page, I'm getting the new values. I have now successfully used the fetch function to retrieve data from an API, from a particular endpoint of an API. There's the endpoint. I take that stuff that I get back, I converted into JSON, I destructured the data out into two separate variables, latitude and longitude, and then I take that data and redisplay it into an element on the webpage itself. Woohoo. All right. This is actually kind of almost done, but there are two really big things that I want to do to this. Number one is I want to be able to take the latitude and longitude and plot it onto a map. So in the next video, I'm going to do just that with Leaflet.js, the JavaScript mapping library. But before I get there, there's another thing that I want to do, which I'll come back and do at the end, but you might want to even try it as an exercise right now. How could I have after a certain amount of time the webpage take it upon itself to go and request updated data and update those span elements on the webpage itself? One way to do that is with using a function called Set Interval. And I'll come back and add this to this program, but that's something you could try now as an exercise. And something else you might try is just, well, what if you want to also add velocity to this? Or maybe go and find a different API with an endpoint that you can retrieve some data from and redisplay on the webpage? Just watch out for all of the authentication stuff. If the API you find requires authentication, you might have to do some funny business with an API key or some type of a login before you can access that data. All right. Thanks for watching. I'll see you in the next part where we'll get that map happening here on the webpage. [MUSIC PLAYING]
