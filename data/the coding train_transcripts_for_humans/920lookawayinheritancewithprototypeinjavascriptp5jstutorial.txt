With timestamps:

00:00 - - Hi everyone.
00:02 - I am doing something very
ill advised, I think,
00:04 - in this video.
00:06 - I'm a completionist, and
I'm returning to something.
00:09 - I made a video, apparently, almost,
00:12 - today is February 20th,
2019, and I made this video,
00:16 - February 22nd, 2017, almost
to the day two years ago,
00:21 - about prototypes in javascript because,
00:23 - I was on this path, towards
explaining a concept
00:26 - known as inheritance and
also another concept,
00:29 - known as polymorphism.
00:30 - Now I do have videos about
object oriented programming,
00:33 - inheritance and polymorphism,
in java with the processing
00:37 - development environment, you
could go and watch those,
00:39 - and I also intend, what I
really should be doing with
00:43 - my time right now, is making
a video about inheritance
00:46 - with ES6 classes in javascript.
00:48 - And that's coming, and that's the video
00:49 - you should go and watch.
00:50 - But I just can't let this go.
00:54 - At the very end of this video, I said,
00:55 - and then I'll make a follow
up one about inheritance
00:58 - using prototypes in
javascript and I never did.
01:00 - And perhaps,
01:01 - perhaps there's a kernel
of value here, in that,
01:05 - ES6 classes is really just
what's refferred to as, like,
01:09 - syntaxic sugar, I do have a sweet tooth,
01:13 - over truly everything
javascript is still a
01:18 - prototype based object language.
01:21 - So understanding how
these prototypes work, and
01:24 - how this concept of
inheritance applies to them.
01:27 - Is perhaps useful, so
if you're still with me,
01:29 - I'm going to try to
explore inheritance with
01:32 - prototypes in javascript as a follow-up
01:35 - to this video 9.19 from two years ago.
01:38 - So if you watched,
01:40 - maybe you literally
just watched that video,
01:42 - and somehow ended up here
which would be kind of amazing.
01:45 - If you did you might have
seen that I had this diagram.
01:48 - And the idea of this diagram,
was I was trying to explain
01:51 - that I want to, I'm
programming a particle system,
01:53 - and there's going to be particles
moving around my canvas.
01:56 - And I have multiple particle objects.
01:58 - Each of those particle objects,
has it's own x/y position.
02:02 - p1, has an x/y, p2 has an x/y.
02:04 - But the functionality is
tied to partice.prototype.
02:09 - So I've added a show function
that draws the particle,
02:11 - as part of the prototype,
and there is this idea of
02:14 - a prototype chain, meaning that
02:18 - everything descends from object.prototype.
02:21 - So if we call a function or
look at a property of an object,
02:25 - we first see if it's that
object's own property, or
02:29 - is it somewhere up the prototype chain.
02:31 - So, what would it mean,
now, if what I want to do,
02:35 - is create
02:37 - a new kind of object,
02:40 - I think in my nature of code
book, I call it confetti,
02:43 - which is kind of like
a random, weird thing.
02:46 - But, just use that that for this, cause
02:47 - I can't think of anything else right now.
02:49 - If I were to create an object,
something called confetti,
02:53 - and a new prototype,
02:56 - a class,
02:57 - again ES6 class,
02:58 - the way I do this now is with ES6 classes,
03:00 - I don't do this anymore, but
I'm just exploring cause,
03:03 - I can't help myself.
03:06 - Contfetti.prototype.
03:09 - What I want is,
03:11 - I want confetti.prototype to inherit
03:15 - everything from particle.prototype, but
03:18 - maybe have it's own additional function.
03:20 - I don't know like maybe it
has a function called burst.
03:24 - So it gets show, somehow
it's going to get show,
03:26 - I don't have to rewrite the show function,
03:28 - it's a special kind of particle,
that somehow inherits that.
03:33 - So let's see how would we do that.
03:35 - Alright so, let's go to the code.
03:36 - The idea here is, okay,
03:39 - I am going to write
03:41 - a new
03:45 - class called confetti,
03:47 - but it's not a class,
03:48 - this is an old, old
way of doing stuff with
03:50 - this idea of a constructor function.
03:52 - Cause the idea here is I want to say now,
03:54 - I'm going to have, and
look I was even using var,
03:57 - so I'll keep using var, cause
I'm living in the past today,
04:00 - c,
04:01 - and c is a new confetti.
04:04 - I want to be able to say it
like c.show, for example.
04:08 - I want to be able to call that function.
04:10 - So right now, if I were
to run this code I have,
04:14 - this loaded here, c.show
is not a function.
04:18 - Okay.
04:19 - So how do I have confetti
inherit everything from particle?
04:24 - The first thing that I'm going to do is,
04:26 - in the constructor
function, I'm going to say,
04:28 - particle.call(this), oh
this is so weird but,
04:33 - (sounds of disgust)
04:35 - I don't like this at all.
04:36 - But what this is doing,
is it's basically saying
04:40 - execute the constructor
function of particle.
04:44 - Just do what I do when I am a particle.
04:47 - So let's take a look, let's not do c.show,
04:51 - but let's console.log(p)
and console.log(c).
04:55 - So we're going to look
at the particle object,
04:57 - and the confetti object now.
04:58 - Hit refresh.
04:59 - So look at this, both
particle and confetti,
05:03 - both have an x and a y at 99.
05:06 - You can see they have those properties,
05:07 - they both descend from object,
05:11 - and if we go into here,
05:13 - we see that particle has
it's own show function,
05:17 - and then it gets a whole bunch
of other things from object.
05:21 - But confetti,
05:23 - it doesn't have the show function,
05:26 - it just has all the things from object.
05:29 - Okay, so how, how, how, how, how, how,
05:32 - do I link the two?
05:33 - So one way to link the two
would be to say, you know what,
05:36 - confetti.prototype
05:41 - should be the same as
05:42 - particle's prototype.
05:44 - So I want to set the
confetti's prototype to
05:47 - particle's prototype.
05:48 - Now this is not a good
idea, I don't think, but
05:50 - let's just, for the sake of
argument, put that in our code.
05:53 - And let me refresh this.
05:57 - We can see okay.
05:59 - Oh look!
05:59 - The show function showed up
there fascinating, amazing.
06:04 - Well maybe we're done.
06:06 - We inherited the show function.
06:09 - While this looks right, I have now have
06:12 - a confetti object that inherits
show from particle because,
06:17 - I've tied the prototypes together,
06:19 - this is actually a terrible idea.
06:21 - So I'm going to show you in a minute why
06:22 - this is a terrible idea.
06:24 - But let's leave it this way,
just for a little bit longer.
06:27 - Why, am I doing this in the first place?
06:29 - The idea is that,
06:32 - the idea here is that
this particle prototype,
06:35 - this particle object,
06:38 - if you're looking at some
of my other examples,
06:40 - has a lot of stuff to it,
06:41 - maybe it has this whole set of
06:43 - physics algorithms built into it.
06:45 - And I want to just create
a new kind of object that
06:48 - includes all of that physics
stuff, but I can just draw it
06:51 - in a different way.
06:52 - So, let's just try to simulate
that for a little bit.
06:55 - By what I'm going to do is,
06:57 - I'm going to add now another
function to particle,
07:02 - called
07:03 - update,
07:04 - and what I'm going to
do in that function is
07:07 - I'm going to say is this.x plus equal,
07:09 - and I'm using p5 so I can use random,
07:13 - and I'm going to just move the
x and they y around randomly.
07:16 - So imagine this is, like,
07:17 - a really elaborate physics simulation,
07:20 - that I've worked out for how
this particle should move,
07:22 - really I'm just moving it randomly.
07:24 - So now what I want to do is,
07:26 - I'm going to now add the draw function.
07:29 - The draw function will loop, and I can say
07:32 - p.update,
07:33 - p.show,
07:35 - c.update,
07:36 - c.show.
07:38 - And what I'll have now, I'm
going to say background(0).
07:42 - I'm going to just make sure
I can really see this by
07:44 - saying stroke(255) and strokeweight(8).
07:50 - So I should see, if I go back to here,
07:54 - two little dots, dancing around.
07:56 - One is the particle object,
one is the confetti object.
07:59 - The wonderful thing here,
is my confetti object, which
08:04 - sorry, I'm going to now,
08:10 - which is now c.
08:11 - So, I have c, a confetti object,
08:13 - I have p, particle object,
08:15 - this,
08:17 - links to confetti.prototype,
but confetti.prototype,
08:22 - and particle.prototype,
right now, are equal.
08:24 - They're the same thing.
08:26 - So it's actually as if
this is linking directly to
08:28 - particle.prototype, so the
show function it's getting,
08:31 - is right here and there's
also now an update function.
08:35 - So my confetti object, has
08:39 - both an update and a show
function, it's own x and y,
08:42 - the particle has it's own x and y,
08:44 - and an update and a show function.
08:45 - So what I want to do is I
want my confetti object,
08:48 - to inherit this update function,
08:51 - but I want it to have
it's own show function,
08:54 - I want it to have it's own show function
08:55 - I want it to draw itself
in a different way,
08:57 - maybe a square or with some
color, or something like that.
09:00 - So let's go back here.
09:03 - And what I'm going to do
say like, okay, no problem.
09:06 - What I want to do now is say that,
09:10 - confetti.prototype
09:13 - .show equals function.
09:16 - And I'm going to just do
something totally different.
09:21 - I'm going to
09:23 - give it
09:25 - I'm going to say stroke(255,0,255),
09:28 - I'm going to say nofill,
09:32 - and I'm going to draw this as a square,
09:36 - with a sidelength of 50,
and I'm going to hit enter.
09:40 - And,
09:42 - (scoff)
09:43 - what's going on?
09:44 - Why, why, why, why,
09:47 - isn't
09:48 - the confetti calling it's show function?
09:51 - The reason why it's not, well, okay,
09:54 - well maybe I need to do
this after I do this.
09:57 - Confetti.prototype equals
particle.prototype?
10:01 - (yelp)
10:02 - Wait now they're both showing my confetti.
10:04 - They're both, I want them to
do the same update function,
10:06 - but I want them to do
different show functions.
10:08 - So why is that not working?
10:10 - It's because, I can't actually,
10:12 - they way the prototypical
inheritance chain thing works,
10:16 - is I can't set
confetti.prototype equal to this,
10:18 - I've basically overwritten it.
10:20 - So, its as if, there
aren't two separate ones,
10:23 - I want to base this on
that, not overwrite it.
10:26 - And the way to do that,
it kind of ridiculous,
10:28 - and this is why the ES6
classes methodology, that
10:30 - you should just turn this video
off and and go use instead.
10:34 - Is I have to say, right here
10:37 - object
10:38 - .create
10:39 - particle.prototype,
10:41 - it's basically making a new prototype,
10:45 - based on the particle's
prototype but I can modify it.
10:48 - So once I've done that,
10:51 - and I hit enter, now you
can see I have both of them
10:54 - are using the same update function,
10:56 - but one has it's own show function.
10:58 - And let me show you we're going
to see this on the console
11:00 - in a way that, hopefully,
will bring this all together
11:02 - in a way that makes sense.
11:04 - So look at this, they
each have their own x/y,
11:07 - that's good because, that
x/y property is added in
11:11 - the constructor function, which both the
11:15 - particle constructor function, and the
11:16 - confetti constructor function call.
11:20 - The particle object has a
show and an update function
11:24 - as part of itself.
11:27 - But look at this,
11:29 - now the confetti object
has it's own show function,
11:35 - but, oops, sorry
11:37 - but it's update function
is down here cause,
11:40 - it points to the particle.
11:42 - So this is the chain.
11:44 - Particle is kind of has
it's own show and update,
11:47 - confetti has an x/y,
it's own show but it also
11:50 - has a show and update which
it copied from particle.
11:53 - Now the reason why it
doesn't call this one is
11:54 - that it always looks for the
first instance of something
11:57 - of that prototype chain.
11:59 - So this is wildly
confusing and convoluted.
12:01 - Hopefully this gives you a
little background in sense,
12:04 - of how this works.
12:06 - There's one other missing
piece of this, I believe,
12:08 - which relates to this here.
12:13 - The confetti object doesn't actually have
12:17 - it's own constructor, really it should.
12:19 - So, for example, if I
wanted to do something like,
12:21 - I'm just going to add right here, like,
12:23 - I want to do something else,
12:24 - like console.log(hello this is confetti),
12:30 - like, in addition to initializing
this object the way a
12:33 - particle does, I want
to do something else.
12:34 - Actually maybe, what I want
to do is give it a color.
12:37 - This.color equals a new color
12:40 - that is pink.
12:43 - And then actually, what I'm doing,
12:44 - is I'm calling that, under stroke.
12:48 - I'm referencing the confetti has a color,
12:51 - the particle gets an x/y,
12:53 - the confetti gets an x/y and a color.
12:55 - Let's see what happens here.
12:58 - Oh, weirdly that worked.
13:00 - (laughter)
13:02 - Interestingly enough, this worked anyway.
13:04 - I thought I needed this other step
13:06 - in order for it to call the
confetti constructor properly.
13:12 - Here if I'm saying,
13:15 - new particle versus new confetti.
13:16 - Looks like it works anyway,
13:18 - but I'm going to show
you what this step is.
13:20 - Really one thing that's
kind of missing here,
13:23 - is that in if I look
in the prototype here,
13:26 - the particle's constructor is
13:29 - pointed to this particle function.
13:32 - And if I go here into the confetti,
13:35 - you can see like, oh
there is no constructor,
13:37 - it's getting it from the prototype chain,
13:39 - which is incorrect.
13:40 - The confetti object should
have it's own constructor.
13:43 - And so a way to do that is to say,
13:47 - I think it's to say.
13:50 - Actually I have this line of
code here, from my example,
13:53 - I'm just going to copy it in.
13:55 - Is to say this,
13:56 - confetti.protoype constructor
equals the confetti function.
14:00 - Right I want to like
specifically assign it that.
14:03 - And it seems to me that
this is just a convention to
14:06 - kind of clean things up, I
can't actually find a place
14:09 - where I need that in order
for my code to run correctly,
14:12 - but I'm going to leave it in there.
14:14 - And so now I'm going to hit
refresh, and we can see here that
14:20 - a confetti object inherits
everything from particle,
14:24 - including it gets it's own x and y,
14:27 - and it gets a show function,
14:30 - sorry, sorry,
14:31 - and it gets a show and update function.
14:33 - It has it's own constructor
and it's own show function,
14:36 - because, I wanted to modify
the confetti show function,
14:39 - from the particle show function.
14:41 - Don't worry, if none of
this made any sense to you,
14:44 - that's okay.
14:45 - This is confusing and weird,
but this is underneath the hood
14:49 - how all of this stuff is linked
together in implementation
14:53 - of the javascript
programming language itself.
14:55 - This is the prototype inheritance chain.
14:58 - I can basically create a new object,
15:03 - with it's own function
15:05 - calling the other object's
constructor function, and then
15:09 - attaching it's prototype
to a new object based on
15:13 - another object's prototype.
15:14 - It's really weird, and kind awful.
15:17 - But this is how I used
to make my examples,
15:19 - but don't worry.
15:20 - (heavenly choir)
15:21 - There's a new way I make these examples.
15:23 - You don't have to worry
about this anymore.
15:25 - You can skip to, I haven't made it yet,
15:27 - but soon enough, within
the next week or two,
15:29 - I will be uploading and
publishing a video all about
15:32 - inheritance in javascript,
using ES6 classes.
15:35 - And in those videos,
I'll really talk about
15:38 - the theory behind inheritance,
15:39 - why it's useful and how to put it
15:41 - into practice in javascript.
15:43 - So if you actually made it
through watching this video,
15:45 - thank you.
15:46 - Hopefully this helped add a
little something to you day.
15:49 - And I'll see you, maybe
in the ES6 classes videos.
15:52 - Thanks goodbye.
15:54 - (ding)
15:55 - (upbeat music)

Cleaned transcript:

Hi everyone. I am doing something very ill advised, I think, in this video. I'm a completionist, and I'm returning to something. I made a video, apparently, almost, today is February 20th, 2019, and I made this video, February 22nd, 2017, almost to the day two years ago, about prototypes in javascript because, I was on this path, towards explaining a concept known as inheritance and also another concept, known as polymorphism. Now I do have videos about object oriented programming, inheritance and polymorphism, in java with the processing development environment, you could go and watch those, and I also intend, what I really should be doing with my time right now, is making a video about inheritance with ES6 classes in javascript. And that's coming, and that's the video you should go and watch. But I just can't let this go. At the very end of this video, I said, and then I'll make a follow up one about inheritance using prototypes in javascript and I never did. And perhaps, perhaps there's a kernel of value here, in that, ES6 classes is really just what's refferred to as, like, syntaxic sugar, I do have a sweet tooth, over truly everything javascript is still a prototype based object language. So understanding how these prototypes work, and how this concept of inheritance applies to them. Is perhaps useful, so if you're still with me, I'm going to try to explore inheritance with prototypes in javascript as a followup to this video 9.19 from two years ago. So if you watched, maybe you literally just watched that video, and somehow ended up here which would be kind of amazing. If you did you might have seen that I had this diagram. And the idea of this diagram, was I was trying to explain that I want to, I'm programming a particle system, and there's going to be particles moving around my canvas. And I have multiple particle objects. Each of those particle objects, has it's own x/y position. p1, has an x/y, p2 has an x/y. But the functionality is tied to partice.prototype. So I've added a show function that draws the particle, as part of the prototype, and there is this idea of a prototype chain, meaning that everything descends from object.prototype. So if we call a function or look at a property of an object, we first see if it's that object's own property, or is it somewhere up the prototype chain. So, what would it mean, now, if what I want to do, is create a new kind of object, I think in my nature of code book, I call it confetti, which is kind of like a random, weird thing. But, just use that that for this, cause I can't think of anything else right now. If I were to create an object, something called confetti, and a new prototype, a class, again ES6 class, the way I do this now is with ES6 classes, I don't do this anymore, but I'm just exploring cause, I can't help myself. Contfetti.prototype. What I want is, I want confetti.prototype to inherit everything from particle.prototype, but maybe have it's own additional function. I don't know like maybe it has a function called burst. So it gets show, somehow it's going to get show, I don't have to rewrite the show function, it's a special kind of particle, that somehow inherits that. So let's see how would we do that. Alright so, let's go to the code. The idea here is, okay, I am going to write a new class called confetti, but it's not a class, this is an old, old way of doing stuff with this idea of a constructor function. Cause the idea here is I want to say now, I'm going to have, and look I was even using var, so I'll keep using var, cause I'm living in the past today, c, and c is a new confetti. I want to be able to say it like c.show, for example. I want to be able to call that function. So right now, if I were to run this code I have, this loaded here, c.show is not a function. Okay. So how do I have confetti inherit everything from particle? The first thing that I'm going to do is, in the constructor function, I'm going to say, particle.call(this), oh this is so weird but, (sounds of disgust) I don't like this at all. But what this is doing, is it's basically saying execute the constructor function of particle. Just do what I do when I am a particle. So let's take a look, let's not do c.show, but let's console.log(p) and console.log(c). So we're going to look at the particle object, and the confetti object now. Hit refresh. So look at this, both particle and confetti, both have an x and a y at 99. You can see they have those properties, they both descend from object, and if we go into here, we see that particle has it's own show function, and then it gets a whole bunch of other things from object. But confetti, it doesn't have the show function, it just has all the things from object. Okay, so how, how, how, how, how, how, do I link the two? So one way to link the two would be to say, you know what, confetti.prototype should be the same as particle's prototype. So I want to set the confetti's prototype to particle's prototype. Now this is not a good idea, I don't think, but let's just, for the sake of argument, put that in our code. And let me refresh this. We can see okay. Oh look! The show function showed up there fascinating, amazing. Well maybe we're done. We inherited the show function. While this looks right, I have now have a confetti object that inherits show from particle because, I've tied the prototypes together, this is actually a terrible idea. So I'm going to show you in a minute why this is a terrible idea. But let's leave it this way, just for a little bit longer. Why, am I doing this in the first place? The idea is that, the idea here is that this particle prototype, this particle object, if you're looking at some of my other examples, has a lot of stuff to it, maybe it has this whole set of physics algorithms built into it. And I want to just create a new kind of object that includes all of that physics stuff, but I can just draw it in a different way. So, let's just try to simulate that for a little bit. By what I'm going to do is, I'm going to add now another function to particle, called update, and what I'm going to do in that function is I'm going to say is this.x plus equal, and I'm using p5 so I can use random, and I'm going to just move the x and they y around randomly. So imagine this is, like, a really elaborate physics simulation, that I've worked out for how this particle should move, really I'm just moving it randomly. So now what I want to do is, I'm going to now add the draw function. The draw function will loop, and I can say p.update, p.show, c.update, c.show. And what I'll have now, I'm going to say background(0). I'm going to just make sure I can really see this by saying stroke(255) and strokeweight(8). So I should see, if I go back to here, two little dots, dancing around. One is the particle object, one is the confetti object. The wonderful thing here, is my confetti object, which sorry, I'm going to now, which is now c. So, I have c, a confetti object, I have p, particle object, this, links to confetti.prototype, but confetti.prototype, and particle.prototype, right now, are equal. They're the same thing. So it's actually as if this is linking directly to particle.prototype, so the show function it's getting, is right here and there's also now an update function. So my confetti object, has both an update and a show function, it's own x and y, the particle has it's own x and y, and an update and a show function. So what I want to do is I want my confetti object, to inherit this update function, but I want it to have it's own show function, I want it to have it's own show function I want it to draw itself in a different way, maybe a square or with some color, or something like that. So let's go back here. And what I'm going to do say like, okay, no problem. What I want to do now is say that, confetti.prototype .show equals function. And I'm going to just do something totally different. I'm going to give it I'm going to say stroke(255,0,255), I'm going to say nofill, and I'm going to draw this as a square, with a sidelength of 50, and I'm going to hit enter. And, (scoff) what's going on? Why, why, why, why, isn't the confetti calling it's show function? The reason why it's not, well, okay, well maybe I need to do this after I do this. Confetti.prototype equals particle.prototype? (yelp) Wait now they're both showing my confetti. They're both, I want them to do the same update function, but I want them to do different show functions. So why is that not working? It's because, I can't actually, they way the prototypical inheritance chain thing works, is I can't set confetti.prototype equal to this, I've basically overwritten it. So, its as if, there aren't two separate ones, I want to base this on that, not overwrite it. And the way to do that, it kind of ridiculous, and this is why the ES6 classes methodology, that you should just turn this video off and and go use instead. Is I have to say, right here object .create particle.prototype, it's basically making a new prototype, based on the particle's prototype but I can modify it. So once I've done that, and I hit enter, now you can see I have both of them are using the same update function, but one has it's own show function. And let me show you we're going to see this on the console in a way that, hopefully, will bring this all together in a way that makes sense. So look at this, they each have their own x/y, that's good because, that x/y property is added in the constructor function, which both the particle constructor function, and the confetti constructor function call. The particle object has a show and an update function as part of itself. But look at this, now the confetti object has it's own show function, but, oops, sorry but it's update function is down here cause, it points to the particle. So this is the chain. Particle is kind of has it's own show and update, confetti has an x/y, it's own show but it also has a show and update which it copied from particle. Now the reason why it doesn't call this one is that it always looks for the first instance of something of that prototype chain. So this is wildly confusing and convoluted. Hopefully this gives you a little background in sense, of how this works. There's one other missing piece of this, I believe, which relates to this here. The confetti object doesn't actually have it's own constructor, really it should. So, for example, if I wanted to do something like, I'm just going to add right here, like, I want to do something else, like console.log(hello this is confetti), like, in addition to initializing this object the way a particle does, I want to do something else. Actually maybe, what I want to do is give it a color. This.color equals a new color that is pink. And then actually, what I'm doing, is I'm calling that, under stroke. I'm referencing the confetti has a color, the particle gets an x/y, the confetti gets an x/y and a color. Let's see what happens here. Oh, weirdly that worked. (laughter) Interestingly enough, this worked anyway. I thought I needed this other step in order for it to call the confetti constructor properly. Here if I'm saying, new particle versus new confetti. Looks like it works anyway, but I'm going to show you what this step is. Really one thing that's kind of missing here, is that in if I look in the prototype here, the particle's constructor is pointed to this particle function. And if I go here into the confetti, you can see like, oh there is no constructor, it's getting it from the prototype chain, which is incorrect. The confetti object should have it's own constructor. And so a way to do that is to say, I think it's to say. Actually I have this line of code here, from my example, I'm just going to copy it in. Is to say this, confetti.protoype constructor equals the confetti function. Right I want to like specifically assign it that. And it seems to me that this is just a convention to kind of clean things up, I can't actually find a place where I need that in order for my code to run correctly, but I'm going to leave it in there. And so now I'm going to hit refresh, and we can see here that a confetti object inherits everything from particle, including it gets it's own x and y, and it gets a show function, sorry, sorry, and it gets a show and update function. It has it's own constructor and it's own show function, because, I wanted to modify the confetti show function, from the particle show function. Don't worry, if none of this made any sense to you, that's okay. This is confusing and weird, but this is underneath the hood how all of this stuff is linked together in implementation of the javascript programming language itself. This is the prototype inheritance chain. I can basically create a new object, with it's own function calling the other object's constructor function, and then attaching it's prototype to a new object based on another object's prototype. It's really weird, and kind awful. But this is how I used to make my examples, but don't worry. (heavenly choir) There's a new way I make these examples. You don't have to worry about this anymore. You can skip to, I haven't made it yet, but soon enough, within the next week or two, I will be uploading and publishing a video all about inheritance in javascript, using ES6 classes. And in those videos, I'll really talk about the theory behind inheritance, why it's useful and how to put it into practice in javascript. So if you actually made it through watching this video, thank you. Hopefully this helped add a little something to you day. And I'll see you, maybe in the ES6 classes videos. Thanks goodbye. (ding) (upbeat music)
