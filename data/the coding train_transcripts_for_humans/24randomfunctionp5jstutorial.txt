With timestamps:

00:00 - Welcome back to another
video about variables,
00:02 - but not really.
00:03 - So in this video, I to
help you use your variables
00:06 - in a different way.
00:08 - So most of the examples
that you've seen,
00:10 - there's not a lot
to them in terms
00:11 - of their design and
their variability.
00:14 - This circle will
always be white.
00:16 - It will always be the same size.
00:17 - Maybe, hopefully, you've
been playing around
00:19 - with adding more variables and
incrementing and decrementing.
00:22 - But it can be really
hard, at least at first,
00:24 - to figure out how to pick
values for your variables
00:26 - and create a scene that's
different every time
00:29 - you run the sketch
or that fills up
00:31 - the canvas with lots
of different shapes
00:34 - of different sizes and colors
and stroke thicknesses.
00:37 - And so here I am
to introduce to you
00:39 - the function random
from p5JS, which
00:42 - I think will unlock a lot
of possibilities for you
00:45 - to make a creative
project in p5JS.
00:48 - So what is the random function?
00:49 - So the random function is
like any other function in p5.
00:51 - It has a name random,
and it takes arguments.
00:55 - These arguments are
optional, and maybe I'll
00:57 - get to how you can
remove them later.
00:58 - But, really, the important
thing for you to note here
01:01 - is that the two arguments that
you almost always want to offer
01:04 - are two numbers, a
minimum and a maximum.
01:07 - I should note there
is something kind
01:09 - of unique about this
function random.
01:11 - It's not unique, but it
is different than all
01:12 - the other functions that I've
been showing you so far--
01:15 - line, background, fill, stroke.
01:16 - All of those do something.
01:17 - They set a color.
01:18 - They draw a shape.
01:20 - This function is going
to answer a question.
01:24 - It's more like it's
going to fulfill
01:26 - a request with something back.
01:28 - It returns a value is the
technical term for that,
01:30 - and we're going to
see this come up again
01:32 - later in future
videos where you learn
01:34 - to define your own functions.
01:36 - But for right now, we're
just using the p5 functions.
01:39 - And the random function
returns a random number
01:42 - between a minimum and a maximum.
01:45 - So if I were to put 10
in here and 50 in here,
01:48 - the number that I get
back is something random.
01:51 - Roll the dice-- maybe
I get 22.3491627.
01:56 - So a couple of
things I should note
01:57 - is, one, I always do get
a floating point number,
02:00 - a number with decimal places.
02:02 - Right now, that's not going
to matter to us so much,
02:04 - but that could be
really important later,
02:06 - depending on what we want to
do with that random value.
02:09 - So let's take a look at
it in an actual example.
02:12 - This is a variation off of
one of the first drawing
02:14 - examples I showed you.
02:15 - It's just putting a square
in the center of the canvas.
02:19 - The square has a stroke rate, a
stroke color, and a fill color.
02:22 - But I did add two
variables here.
02:24 - I made a variable
called square size
02:26 - to define how the width and
height of the square and line
02:30 - width as a variable to
describe the stroke weight.
02:33 - It's very important that I
don't call this variable stroke
02:35 - weight if the function
name is stroke weight.
02:37 - You could see that's going
to cause lots of problems.
02:40 - So I made up line
width as a term
02:41 - that's similar
and indicates what
02:43 - I want that variable to be.
02:44 - So the first step that
I might want to try here
02:47 - is to initialize those
variables with random values.
02:51 - When I first looked at
initializing variables,
02:53 - I noted how you sometimes
want to initialize
02:56 - the variable in setup but
sometimes can do it just
02:58 - as one line of code.
03:00 - Let square size equal 150.
03:02 - Both the declaration
and the initialization
03:04 - happens right there
in one line of code.
03:06 - If I'm going to use
the random function,
03:09 - you would think that I
could put that right here.
03:12 - And now, I want the
square size to be
03:14 - some random value between 10
and 50, but I got an error.
03:18 - We can see that
error right here.
03:20 - Uncaught reference error--
random is not defined.
03:23 - Wait, that's not possible
I just showed you
03:25 - the reference page where
random is defined right here.
03:28 - I should be able to use it.
03:29 - So this is a very strange
aspect of working with p5.
03:34 - While it is OK to work with
code outside of setup and draw,
03:39 - the p5 functions themselves
are not available there.
03:42 - So if I'm going to assign square
size a literal value like 150,
03:50 - that is OK to do
outside of setup.
03:52 - But as soon as I want to
call the p5 random function,
03:55 - I need to no longer
initialize it here, but rather
03:58 - initialize it in Setup itself.
04:01 - Look at that.
04:02 - Look at the size of that square.
04:03 - That is just a
wonderful size square.
04:05 - It's random.
04:06 - Let's do it again.
04:07 - Every time I hut Run and run the
sketch, I get a different size.
04:12 - This, by the way, is the
seeds of parametric design.
04:15 - Maybe you as one of your first
exercises, you made a house.
04:20 - You drew a picture of a house.
04:21 - And you made a
rectangle and a triangle
04:24 - and then another rectangle for
the door and then some windows.
04:26 - Could you take a sketch like
that and every time you run it,
04:30 - you get a house that has
the same overall design,
04:32 - the same parts, but they're
different each time?
04:35 - You get a randomly
generated house each time.
04:38 - This is something you
might want to explore
04:40 - with the random function.
04:41 - I can also make the
line width random.
04:46 - Now every time I run the
sketch, both the size
04:49 - of that square and the thickness
of the stroke around the square
04:52 - will be random.
04:57 - So this is a good
starting point for you.
04:59 - Find a sketch that you made.
05:01 - Look at all the properties
of that sketch, the variables
05:03 - that you're using, and
initialize them randomly
05:05 - in Setup.
05:06 - But I am curious to
explore this a bit further.
05:09 - What if instead of picking
the random value in setup,
05:15 - I were to pick the
random value in draw?
05:18 - Let's just move square size.
05:21 - Now let's look at this.
05:22 - I mean, it's
certainly flickering.
05:23 - I don't know how pleasant this
is in terms of an animation.
05:27 - But you're seeing here that
60 frames per second as draw
05:31 - is looping over and
over again every time it
05:33 - picks a new square size.
05:35 - Something that I might even
be able to try with this
05:37 - now is go back to where I don't
draw the background every time,
05:42 - add in some alpha,
and you could start
05:45 - to see that drawing the square
randomly so many times over
05:48 - and over again is sort
of blending together.
05:50 - I think I want to have
a bigger range of size
05:54 - and maybe have the thickness
be a bigger range as well.
05:58 - Maybe have that
be random as well.
06:00 - So this is already I'm able
to get quite a dynamic pattern
06:04 - just from varying the size
and stroke weight of this one
06:09 - rectangle randomly over
and over again in draw.
06:12 - Let's look at another example.
06:14 - Here's a simple p5 sketch very
similar to everything else
06:16 - I've shown you.
06:17 - It's just drawing a single
circle in the canvas.
06:20 - I have five variables-- an x, y,
a red, green, and blue value--
06:24 - r, g, b, x, y.
06:26 - One thing I should really
note is look at the top.
06:29 - I can actually declare
multiple variables
06:32 - on the same line of code with
a comma, yet again another one
06:35 - of these shorthand things.
06:38 - And in fact, I could make
this shorthand even more
06:40 - by putting them all in one line.
06:43 - This is a perfect place
for me to add in random.
06:46 - What if both its
position and its color
06:50 - is random every time
that circle is drawn?
06:58 - Now, I have almost this
pointillist-like effect where
07:01 - I'm getting a variety
of red bluish,
07:03 - pinkish purpleish circles
over and over again anywhere
07:06 - in the canvas, all
layering on top
07:08 - of each other one per frame.
07:10 - This is also a spot for
me to note something
07:13 - about the random function
while I described it
07:15 - as a function that takes
two arguments, a minimum
07:18 - and a maximum, I do have
the option of giving it
07:21 - just one argument instead.
07:23 - If I give it just one
argument like random 50,
07:27 - it's going to assume
the minimum is 0.
07:29 - It will always give me a range
of values between 0 and 50.
07:33 - So in this case, I could
simplify this example
07:36 - by getting rid of all the zeros.
07:39 - And it's exactly the same code.
07:41 - This is also an
opportunity for me
07:43 - to show you another little
quick tidbit about p5.
07:46 - There are more
system variables that
07:47 - are quite useful beyond
just mouse x and mouse y.
07:50 - For example, the
width and height
07:52 - of a canvas, whatever values
I put into create canvas,
07:55 - 600 or 400, those are values
that are available to me
07:58 - in a system variable,
width and height.
08:02 - This way, now, if I ever
change the dimensions--
08:06 - for example, now,
the height is 800--
08:08 - I don't have to change
it again down here.
08:10 - I don't have to put
800 in multiple places.
08:12 - This height value will
always pull up whatever
08:15 - the canvas was created.
08:16 - And by the way, there's
another built in variable.
08:21 - Window width and window
height will dynamically
08:23 - pull the size of
whatever how much space
08:26 - there is for the canvas.
08:27 - So I'm going to run this again.
08:28 - You can see it's always
filling up that whole area,
08:31 - no matter how much space I have.
08:34 - This is particularly
useful, by the way,
08:36 - if you're in the web editor.
08:37 - And I go to File, share,
and I click on full screen.
08:44 - Now, I have my sketch
covering the full canvas
08:47 - that I'm seeing here on this
view of the sketch in p5.
08:51 - I have an exercise
prompt for you.
08:53 - Remember the painting program
where the mouse moves around,
08:56 - and the circle follows the
mouse painting its trail.
09:00 - This is a wonderful
opportunity to use random.
09:02 - I'll include some
solutions to this
09:04 - in the video's description,
but I'm going to see--
09:05 - I'm going to leave it for
something for you to try
09:08 - after watching this video.
09:09 - Could you make it that every
time you click the mouse,
09:12 - you get a new color, a random
color for the painter, so
09:17 - to speak?
09:17 - Maybe you get a random size.
09:19 - Maybe as you move the
mouse, the actual size that
09:24 - you're-- of the circle
changes randomly.
09:25 - There's so many possibilities.
09:27 - How could you use random to
augment this painting program
09:31 - to change the way that the
thickness, the alpha, the size,
09:35 - the color, all of those
parameters of the system change
09:38 - according to how you're
interacting with it
09:40 - and the random function itself?
09:41 - If you make your
own random painter,
09:43 - please share it with me.
09:44 - I would love to see what kinds
of creative possibilities
09:46 - you discover.
09:47 - And if you are
following this playlist,
09:49 - take a break, relax
for a little bit.
09:51 - But this is the end
of this section.
09:53 - The next section will explore
something called a conditional,
09:56 - which will actually allow you to
do a lot more of that painting
09:58 - program.
09:58 - Not to mention if you
remember that circle that
10:01 - was running away from us--
10:02 - there's that circle.
10:03 - It's going to leave, and
I'm going to be very sad.
10:06 - But in the next
section, I will be happy
10:08 - because I'm going to look
at conditional logic.
10:10 - How can I test to see
something-- whether something
10:13 - is true or false?
10:14 - Has the circle left
the canvas or not
10:16 - and then execute an action based
on whether that condition is
10:20 - met?
10:21 - That's what
conditional logic is.
10:22 - It will allow us to have that
circle, bring it back to us,
10:25 - have the bouncing ball bouncing
all over our p5JS sketch.
10:27 - And I look forward
to seeing what
10:29 - happens when you
make that sketch
10:31 - and see what you make with it.
10:32 - All right, see you soon.
10:33 - Goodbye.
10:34 - [MUSIC PLAYING]

Cleaned transcript:

Welcome back to another video about variables, but not really. So in this video, I to help you use your variables in a different way. So most of the examples that you've seen, there's not a lot to them in terms of their design and their variability. This circle will always be white. It will always be the same size. Maybe, hopefully, you've been playing around with adding more variables and incrementing and decrementing. But it can be really hard, at least at first, to figure out how to pick values for your variables and create a scene that's different every time you run the sketch or that fills up the canvas with lots of different shapes of different sizes and colors and stroke thicknesses. And so here I am to introduce to you the function random from p5JS, which I think will unlock a lot of possibilities for you to make a creative project in p5JS. So what is the random function? So the random function is like any other function in p5. It has a name random, and it takes arguments. These arguments are optional, and maybe I'll get to how you can remove them later. But, really, the important thing for you to note here is that the two arguments that you almost always want to offer are two numbers, a minimum and a maximum. I should note there is something kind of unique about this function random. It's not unique, but it is different than all the other functions that I've been showing you so far line, background, fill, stroke. All of those do something. They set a color. They draw a shape. This function is going to answer a question. It's more like it's going to fulfill a request with something back. It returns a value is the technical term for that, and we're going to see this come up again later in future videos where you learn to define your own functions. But for right now, we're just using the p5 functions. And the random function returns a random number between a minimum and a maximum. So if I were to put 10 in here and 50 in here, the number that I get back is something random. Roll the dice maybe I get 22.3491627. So a couple of things I should note is, one, I always do get a floating point number, a number with decimal places. Right now, that's not going to matter to us so much, but that could be really important later, depending on what we want to do with that random value. So let's take a look at it in an actual example. This is a variation off of one of the first drawing examples I showed you. It's just putting a square in the center of the canvas. The square has a stroke rate, a stroke color, and a fill color. But I did add two variables here. I made a variable called square size to define how the width and height of the square and line width as a variable to describe the stroke weight. It's very important that I don't call this variable stroke weight if the function name is stroke weight. You could see that's going to cause lots of problems. So I made up line width as a term that's similar and indicates what I want that variable to be. So the first step that I might want to try here is to initialize those variables with random values. When I first looked at initializing variables, I noted how you sometimes want to initialize the variable in setup but sometimes can do it just as one line of code. Let square size equal 150. Both the declaration and the initialization happens right there in one line of code. If I'm going to use the random function, you would think that I could put that right here. And now, I want the square size to be some random value between 10 and 50, but I got an error. We can see that error right here. Uncaught reference error random is not defined. Wait, that's not possible I just showed you the reference page where random is defined right here. I should be able to use it. So this is a very strange aspect of working with p5. While it is OK to work with code outside of setup and draw, the p5 functions themselves are not available there. So if I'm going to assign square size a literal value like 150, that is OK to do outside of setup. But as soon as I want to call the p5 random function, I need to no longer initialize it here, but rather initialize it in Setup itself. Look at that. Look at the size of that square. That is just a wonderful size square. It's random. Let's do it again. Every time I hut Run and run the sketch, I get a different size. This, by the way, is the seeds of parametric design. Maybe you as one of your first exercises, you made a house. You drew a picture of a house. And you made a rectangle and a triangle and then another rectangle for the door and then some windows. Could you take a sketch like that and every time you run it, you get a house that has the same overall design, the same parts, but they're different each time? You get a randomly generated house each time. This is something you might want to explore with the random function. I can also make the line width random. Now every time I run the sketch, both the size of that square and the thickness of the stroke around the square will be random. So this is a good starting point for you. Find a sketch that you made. Look at all the properties of that sketch, the variables that you're using, and initialize them randomly in Setup. But I am curious to explore this a bit further. What if instead of picking the random value in setup, I were to pick the random value in draw? Let's just move square size. Now let's look at this. I mean, it's certainly flickering. I don't know how pleasant this is in terms of an animation. But you're seeing here that 60 frames per second as draw is looping over and over again every time it picks a new square size. Something that I might even be able to try with this now is go back to where I don't draw the background every time, add in some alpha, and you could start to see that drawing the square randomly so many times over and over again is sort of blending together. I think I want to have a bigger range of size and maybe have the thickness be a bigger range as well. Maybe have that be random as well. So this is already I'm able to get quite a dynamic pattern just from varying the size and stroke weight of this one rectangle randomly over and over again in draw. Let's look at another example. Here's a simple p5 sketch very similar to everything else I've shown you. It's just drawing a single circle in the canvas. I have five variables an x, y, a red, green, and blue value r, g, b, x, y. One thing I should really note is look at the top. I can actually declare multiple variables on the same line of code with a comma, yet again another one of these shorthand things. And in fact, I could make this shorthand even more by putting them all in one line. This is a perfect place for me to add in random. What if both its position and its color is random every time that circle is drawn? Now, I have almost this pointillistlike effect where I'm getting a variety of red bluish, pinkish purpleish circles over and over again anywhere in the canvas, all layering on top of each other one per frame. This is also a spot for me to note something about the random function while I described it as a function that takes two arguments, a minimum and a maximum, I do have the option of giving it just one argument instead. If I give it just one argument like random 50, it's going to assume the minimum is 0. It will always give me a range of values between 0 and 50. So in this case, I could simplify this example by getting rid of all the zeros. And it's exactly the same code. This is also an opportunity for me to show you another little quick tidbit about p5. There are more system variables that are quite useful beyond just mouse x and mouse y. For example, the width and height of a canvas, whatever values I put into create canvas, 600 or 400, those are values that are available to me in a system variable, width and height. This way, now, if I ever change the dimensions for example, now, the height is 800 I don't have to change it again down here. I don't have to put 800 in multiple places. This height value will always pull up whatever the canvas was created. And by the way, there's another built in variable. Window width and window height will dynamically pull the size of whatever how much space there is for the canvas. So I'm going to run this again. You can see it's always filling up that whole area, no matter how much space I have. This is particularly useful, by the way, if you're in the web editor. And I go to File, share, and I click on full screen. Now, I have my sketch covering the full canvas that I'm seeing here on this view of the sketch in p5. I have an exercise prompt for you. Remember the painting program where the mouse moves around, and the circle follows the mouse painting its trail. This is a wonderful opportunity to use random. I'll include some solutions to this in the video's description, but I'm going to see I'm going to leave it for something for you to try after watching this video. Could you make it that every time you click the mouse, you get a new color, a random color for the painter, so to speak? Maybe you get a random size. Maybe as you move the mouse, the actual size that you're of the circle changes randomly. There's so many possibilities. How could you use random to augment this painting program to change the way that the thickness, the alpha, the size, the color, all of those parameters of the system change according to how you're interacting with it and the random function itself? If you make your own random painter, please share it with me. I would love to see what kinds of creative possibilities you discover. And if you are following this playlist, take a break, relax for a little bit. But this is the end of this section. The next section will explore something called a conditional, which will actually allow you to do a lot more of that painting program. Not to mention if you remember that circle that was running away from us there's that circle. It's going to leave, and I'm going to be very sad. But in the next section, I will be happy because I'm going to look at conditional logic. How can I test to see something whether something is true or false? Has the circle left the canvas or not and then execute an action based on whether that condition is met? That's what conditional logic is. It will allow us to have that circle, bring it back to us, have the bouncing ball bouncing all over our p5JS sketch. And I look forward to seeing what happens when you make that sketch and see what you make with it. All right, see you soon. Goodbye. [MUSIC PLAYING]
