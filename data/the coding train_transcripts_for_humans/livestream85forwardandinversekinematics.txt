With timestamps:

00:02 - good morning hello welcome
00:06 - to the usual Friday morning
00:09 - approximately 10:30 a.m. eastern time in
00:11 - New York City episode live stream of the
00:14 - coding
00:15 - train All Aboard we are leaving the
00:19 - station almost mostly on time today and
00:23 - I hope that things are working oops I'm
00:25 - I'm trying to sorry I uh never never
00:28 - never again on this computer uh okay so
00:31 - please if you are seeing me and things
00:33 - are working and I'm live streaming let
00:35 - me know in the chat because I am keeping
00:37 - an eye on the chat now as I like to do
00:39 - at the beginning at of while people are
00:41 - getting sort of settled in with their
00:43 - nice warm cup of herbal
00:47 - tea and their pajamas with a blanket
00:50 - curled up on the couch I like to get
00:53 - started
00:54 - with continuing our oh wait a
00:58 - sec no no no no everything was I I had
01:03 - set everything up and I was kind of on
01:05 - time and now I believe uh hold on just
01:08 - got to work something out here uh what's
01:10 - going on here ah audio is an issue hold
01:13 - on everyone I had momentum I had Rhythm
01:16 - I had a whole thing I was doing uh let
01:19 - me just check here um why do I not hear
01:23 - hold on hold on hold on hold
01:27 - on yeah yeah
01:31 - yep yep okay hold on let's see if this
01:36 - works are you guys hearing any
01:39 - audio I mean music no you're not you're
01:42 - not you're not oh my soundboard is
01:46 - broken can I have a mulligan can I do
01:49 - this again please uh I guess I will uh
01:52 - what I'm going to do is
01:54 - disconnect uh and then I am going to
01:58 - reconnect
02:01 - try this one more
02:03 - time do not pay attention to what's
02:06 - happening here uh all
02:10 - right oh I need a new forget about this
02:13 - I need a new way of doing the whole
02:14 - sound thing let's just get going forget
02:16 - about my playing AI music and reading
02:19 - some random numbers I'll just come back
02:21 - for that later let's actually get
02:22 - started with perhaps what you are here
02:24 - today to watch which is some coding now
02:27 - um I I am a bit more prepared than
02:32 - usual and that I have an
02:34 - agenda let me pull that up whoa where
02:37 - did it go everything's okay so let me
02:40 - pull up my
02:42 - agenda right here
02:45 - uh there we go okay
02:48 - uh here we go so this is what's on the
02:51 - docket for today so I have some uh
02:55 - announcements to make about new things
02:58 - and scheduling
03:00 - uh I have some tutorials and coding
03:02 - challenges that I would like to do I
03:04 - have some other possible topics that I'd
03:06 - really like to do if I can get to it um
03:08 - I'd always like to um you know answer
03:11 - take a little bit of time to answer some
03:13 - questions from the chat and then also uh
03:17 - show a bit of projects that people have
03:19 - submitted from the community so let me
03:22 - get started here with uh a very exciting
03:26 - announcement which is that the coding
03:28 - train store
03:31 - what did I turn into like a salesperson
03:33 - look uh look this is my usual yellow
03:38 - mug but
03:40 - today I also have this
03:46 - mug on Q I I want to like do you think I
03:49 - can get a job at QVC with this uh with
03:51 - what I'm doing here but anyway if you're
03:53 - interested people have been asking uh
03:55 - coding train. stor Envy is the word but
03:59 - store Envy spelled uh with the E for
04:03 - both words so store with an e and envy
04:06 - with an e but only one e in store Envy
04:09 - uh hopefully I got that right because
04:10 - it'll be embarrassing if I get it wrong
04:12 - uh coding train storenvy.com
04:14 - there it is so if you're interested in
04:17 - I'm not actually I'm wearing my rogue
04:18 - NASA t-shirt which is a great uh t-shirt
04:20 - all the proceeds go to um uh girls who
04:24 - code and um some sort of math and
04:27 - science initiative from cotton Bureau
04:28 - which is a great t-shirt company um but
04:31 - so I should but I did bring some of
04:32 - these shirts if you're interested you
04:34 - should get the Rogue NASA shirt uh
04:36 - here's one example of one and uh here's
04:40 - an example of another now I'm plugging
04:41 - this way too much that way more that I'm
04:44 - at all comfortable about so uh there's
04:46 - some shirts here there's some hoodies um
04:48 - this is sort of in progress and I'm
04:49 - going to add hopefully some other styles
04:52 - uh some some kids sizes and that type of
04:54 - thing as well um if you're interested in
04:56 - getting mugs you've got to go down here
04:58 - to this link where it says coding train
04:59 - mugs so I'm having a little bit of a
05:01 - technical issue with store Envy right
05:02 - now because the mugs and the t-shirts
05:04 - ship separately so unfortunately um in
05:07 - order to charge for the shipping for
05:08 - each um right now they have to be in two
05:10 - separate stores
05:12 - okay that's all I wanted that's all I
05:14 - wanted to mention hopefully it works for
05:16 - if you have any issues um tweet me at
05:18 - shiffman I think I guess there's like a
05:20 - contact on here what happens if I go
05:21 - there oh I assume this message will go
05:23 - to me if you type a message in here with
05:25 - an issue uh okay so that's announcement
05:28 - number one announcement number two I
05:30 - know you guys have been waiting for this
05:33 - I've this has probably been the most
05:34 - requested topic uh since I started doing
05:37 - this channel but I am planning okay hold
05:40 - on there's a question does the Rainbow
05:41 - on the logo lack the green color because
05:43 - of your chroma keying that is exactly
05:46 - correct Alon in the chat this way I can
05:49 - actually wear it without being keyed out
05:53 - uh so I was saying something um next
05:58 - week hello Russia and Michigan next
06:02 - week I will be beginning my machine
06:06 - learning topic I'm teaching a course
06:09 - here at it a program called ITP which is
06:11 - part of TI School of the Arts New York
06:12 - University uh and the syllabus for that
06:14 - course which I really need to work on it
06:16 - actually doesn't start next week because
06:17 - next week is spring break for NYU um
06:20 - which one am I looking for uh if I can
06:23 - type this
06:24 - in the syllabus for this course is here
06:27 - on this GitHub repository if you happen
06:30 - to go to this GitHub repository right
06:31 - now there's very very little there so
06:34 - just sort of a skeleton of some topics
06:35 - I'm thinking about and all of these
06:37 - topics I will make videos about in this
06:39 - uh Channel over the next I would say
06:42 - seven to eight weeks probably um and so
06:45 - just to I did this last week but just to
06:46 - run through the topics again um some
06:48 - stuff about algorithms and search of
06:51 - network graphing stuff some just kind of
06:54 - classic machine learning algorithms that
06:55 - have to do with classification and
06:57 - prediction tasks uh looking at basics of
06:59 - neural networks looking at genetic
07:01 - algorithms which I already have a lot of
07:03 - material for but I have some new ideas
07:04 - for some new possibilities uh
07:07 - reinforcement learning in particular as
07:08 - that relates to some of the steering
07:10 - Behavior stuff that I've done previously
07:12 - and then some other stuff too so here's
07:13 - the
07:14 - thing you know how when I say quat
07:23 - qurans I have to run away even though I
07:26 - really do plan someday on trying to
07:28 - tackle what is a qune and why would you
07:30 - use it how would you implement it should
07:31 - you try to write the math from scratch
07:33 - use a library I'm interested in all
07:34 - these questions and I would like to
07:35 - tackle that on this channel I said it
07:38 - and I didn't run away it's gonna get me
07:40 - do I'm gonna hide so I kind of have a
07:42 - little bit of the same reaction to uh
07:45 - machine learning it's uh it's a little
07:47 - scary to me um this is not a topic that
07:50 - I have a long um history and expertise
07:53 - in so I'm trying to experiment which is
07:56 - to stretch myself a little bit on this
07:57 - channel I figure it's a good thing if
07:59 - I'm a little uncomfortable with some of
08:00 - these topics CU then maybe if I can
08:02 - figure it out a little bit it'll it'll
08:04 - help you guys figure it out too um but I
08:07 - I I'm going to certainly rely on help
08:09 - from the community a bit more and I have
08:11 - some uh wonderful people in my uh Patron
08:13 - group uh which is um a slack channel
08:16 - that you can subscribe to Via uh
08:18 - patreon. coding patreon patreon.com
08:21 - coding Trin who have been helping me um
08:24 - and so this is um so we're going to see
08:26 - but here's the thing what I really want
08:27 - to keep
08:29 - what I really want to keep a focus to
08:31 - and I I'm mostly talking about this to
08:33 - like remind myself is that I don't want
08:35 - to get lost in the weeds of es of sort
08:38 - of theoretical uh research behind in the
08:42 - in the lower level guts of a lot of
08:44 - these machine learning topics that's
08:45 - interesting important and vital research
08:48 - but my what I see that what that what
08:50 - I'm want to do on this channel is and
08:52 - I'm trying to find this line between
08:54 - let's actually write the code to make
08:57 - the algorithm and and and and and use
08:59 - that in our application versus let's
09:01 - pull from a library or framework and
09:04 - make the application so I'm going to
09:05 - kind of walk between those two things
09:07 - for example I think at this point I
09:09 - would like to build um whenever I get to
09:12 - week three a basic perceptron which is
09:14 - like the simplist neural network it's
09:16 - like a neural network that isn't even a
09:18 - network because it just has one neuron
09:20 - um and then look at how That's the basis
09:21 - for this idea of a multi-layered feed
09:23 - forward Network so build some basic
09:26 - examples of simple neural networks to
09:29 - understand how they work what are the
09:30 - parameters of them what are they doing
09:32 - but to then at some point stop like for
09:34 - example I don't know if looking at this
09:37 - I mean I'm going to talk about what back
09:38 - back propagation is which I think is a
09:40 - very understandable concept but I don't
09:43 - know how far I want to go into all the
09:45 - math and implementation of that versus
09:47 - just kind of get build some basic
09:49 - examples and then you know maybe uh use
09:52 - a a framework something like tensorflow
09:54 - to then kind of get the implementation
09:56 - because really what I want to focus on
09:57 - is how can you be creative how can you
09:59 - improve the world with machine learning
10:03 - and and maybe the answer to that is
10:04 - maybe we should just slow down and give
10:06 - each other a hug forget about this
10:08 - machine learning thing but um but you
10:11 - know we can try we can give it a try uh
10:14 - and so that's what I'm planning and so
10:16 - next week I think I will probably start
10:19 - here although I I need to take this
10:21 - afternoon and some of the weekend to
10:23 - kind of sleep on this and figure figure
10:25 - some of this stuff out so um I would
10:27 - love any feedback any help if you have
10:30 - ideas for simple implementations and
10:33 - examples that can result in uh creative
10:37 - outcomes that's what I'm looking for uh
10:40 - great oh also I would love any of your
10:42 - so I'm trying to decide next week I'm
10:44 - going to be using a lot of my time to do
10:46 - some reading and watch some other
10:47 - courses some things uh you know I watch
10:49 - a lot of videos on S serology sj's
10:52 - YouTube channel um there's a great
10:55 - online course from a company called
10:57 - Caden which is called well there's
11:00 - Rebecca free brings course which is a
11:01 - wonderful machine learning for artists I
11:03 - think it's called there's also a course
11:05 - on
11:05 - tensorflow um and um what else so anyway
11:10 - so but I I like to read books even
11:12 - though I'm here making all I do is make
11:14 - these YouTube videos I I learn best I
11:17 - think from actually being forced to read
11:19 - a book away from my computer um and so
11:22 - if you have some suggestions for some
11:23 - good um machine learning uh texts that I
11:27 - might um use use as a foundation for
11:30 - some knowledge to build examples from I
11:32 - totally please tweet those things at me
11:33 - at shiftman um so that's what I'm going
11:35 - to be doing next week uh so that's that
11:39 - um so let me see oh is my audio a
11:43 - problem um so I hear somebody in the
11:45 - chat says um maybe you should work on
11:49 - your audio is there an issue with my
11:51 - audio sometimes the way I place my
11:53 - microphone is in an awkward spot and
11:55 - then I turn my head or something and it
11:57 - it cuts in and out but uh um so let me
11:59 - know if that's a problem in particular
12:01 - in the in the patron group because I can
12:03 - see that a little bit more easily than
12:04 - the YouTube chat I see people it's why
12:07 - is my fractal spirographic code not on
12:09 - oh did somebody H okay so I'm sorry uh I
12:12 - have to apologize um that okay so let's
12:15 - take a look I want to get going here but
12:18 - let since this was asked in the chat um
12:20 - let's check take a look so I am trying
12:23 - to uh keep up with oh I'm in the wrong
12:25 - repo so this is my repository coding
12:27 - train SL rainbow code this is where I uh
12:32 - keep all the code from all these videos
12:34 - that I'm making and then I have a new
12:36 - system and let's go down and let's look
12:38 - at um under challenges under uh really
12:43 - far down what am I going to do when I
12:44 - get to challenge number 100 by the way
12:46 - uh fractal spirograph I don't know which
12:48 - one let's look at this one um and then
12:50 - there and then I have this thing where
12:51 - there are some Community variations and
12:53 - I think I showed these last week so I
12:54 - saw someone in the chat saying why have
12:57 - you um not accepted my pull request so I
13:00 - don't know the answer to that I do know
13:02 - I do know one thing which is that I am a
13:05 - little bit overwhelmed with tweets poll
13:09 - requests Facebook messages email YouTube
13:13 - comments like I haven't I usually take
13:15 - at least um I usually try to take about
13:17 - a half an hour to an hour every day to
13:18 - respond to YouTube comments and I
13:20 - actually haven't done that in like two
13:21 - or three days I'm like way behind um so
13:24 - I'm trying to figure out systems for
13:25 - keeping up with this stuff but I I
13:26 - probably just missed this PLL request
13:29 - um I don't see which one it is so I'm
13:31 - going to have to look for this later um
13:34 - uh send um if you're in the chat and you
13:36 - posted about your poll request not being
13:39 - uh oh but it's not uh oh I see you
13:42 - accept it but it's not in your document
13:44 - okay so um how do I pick so this is
13:47 - another thing I don't I don't I'm
13:48 - learning figuring out what makes sense
13:49 - to do this how oh my phone is ringing
13:53 - look at this I can I can decline the
13:55 - call on my watch now okay this is not an
13:57 - Apple Watch though I know that I have a
13:58 - a lot of Apple products in this room not
14:00 - this one place where it's not okay um
14:04 - I'm trying to figure out the um I don't
14:07 - have a system for picking projects that
14:10 - I show uh and I think that I need to do
14:13 - a better job of figuring out uh what
14:16 - would be an a a fair and exciting and
14:20 - interesting way of doing that right now
14:22 - it's completely halfhazard so the except
14:25 - for one thing I I I'm I'm I post a
14:29 - thread in my Patron group and people uh
14:31 - submit projects there and then sometimes
14:33 - I pull something from Twitter which is
14:34 - what this first one is because I scroll
14:36 - through my Twitter feed and see a few
14:38 - like things that people sent to me and
14:39 - then I I just pull those so if you have
14:41 - ideas and I'll think about ways to
14:43 - manage that better I apologize that I
14:44 - don't have that particular project I do
14:47 - what I do like to do is um then go back
14:50 - to the previous coding Challenge and
14:51 - share some things that were that in that
14:53 - the fractal spirograph one is just a few
14:56 - weeks behind anyway so I'm off way off
14:58 - topic here
14:59 - here think about all that stuff later
15:01 - let's get going how what many minutes am
15:03 - I in here 15 minutes I have a rule which
15:06 - is that I must start coding by at least
15:07 - 30 minutes so let's
15:10 - see I'm very disappointed that my
15:14 - U oh that's promising hold
15:20 - on let's see here I just got to check
15:23 - something okay okay okay I think I know
15:26 - what the problem is if everybody hold on
15:29 - for a second Talk Amongst yourselves
15:32 - Talk Amongst yourselves I'm got to just
15:34 - check something
15:36 - here oh that's
15:39 - right let give this a give this a
15:46 - restart okay um all right so let's see
15:50 - here let's look at the um let me press
15:53 - this again turn this
15:57 - on
16:04 - uh come
16:06 - on okay let's oh I have a little bit of
16:10 - an announcement by the way this is like
16:11 - a small tiny thing but let me mention it
16:15 - uh I have not I recorded so much content
16:17 - last Friday and what I do is after a
16:19 - long live stream I think I probably did
16:21 - almost four hours of live stream last
16:23 - Friday and then all the edited versions
16:25 - get released I release them once per day
16:28 - um but um uh I had so much that I
16:32 - haven't actually released all of it but
16:34 - and let me just mention though the main
16:35 - coding challenge I did at the end of
16:36 - last week was Plinko let me see if this
16:39 - shows up can't remember if this is added
16:42 - one thing you can often do you'll notice
16:46 - that this is these are my most recent
16:47 - videos Plinko is not there when a video
16:51 - is ready even before I release it on a
16:53 - schedule since you guys are the core
16:55 - live viewers you can go to uh playlist
16:59 - for example and I'm going to go to
17:03 - challenges uh let's go to all playlist
17:06 - okay no hold on ah um I don't know how
17:10 - to I don't know how to operate this
17:11 - YouTube thing I don't know how to find
17:13 - my I don't know how to use it if I'm not
17:15 - logged into my account let me go to home
17:18 - no playlist is the right place clearly
17:20 - uh oh there's got to be down here somewh
17:21 - coding challenges so this is the coding
17:24 - challenge playlist I'm going to go all
17:25 - the way to the bottom look at this it's
17:27 - actually there so you should feel free
17:29 - to always check some of the playlists
17:31 - and you can see and what I'll tell you
17:32 - about what's special about this now you
17:34 - can just turn this off and go watch
17:35 - these if you didn't watch last week but
17:37 - this coding challenge
17:40 - 62.3 Plinko part three is actually a
17:43 - video that no one well not no one but
17:46 - almost no one has seen because I uh
17:49 - discovered some things about the Plinko
17:51 - simulation that I felt based on some
17:53 - suggestions from chat and Twitter or
17:55 - wherever it came from um that they
17:57 - needed some improvement and so I
17:59 - secretly came up in here and didn't live
18:00 - stream it and recorded I did actually do
18:02 - a test whatever I um recorded an extra
18:06 - section of that which changed a few
18:07 - things so if you're if you watch the
18:09 - live stream um and so don't feel like
18:12 - watching the edited versions I would say
18:13 - make sure go ahead and watch 62.3 that's
18:16 - actually new content the rest is just
18:17 - edited versions of what I did last week
18:19 - okay so that's there I'm going to
18:21 - release those over the weekend later
18:22 - this afternoon that type of thing okay
18:26 - um can you change m L to machine
18:29 - learning in your file
18:32 - sure oh
18:34 - yeah machine learning yes there we go
18:38 - okay so ah work from the
18:41 - community oh wait hold
18:46 - on I will just have to sing my lullab
18:49 - myself okay uh okay um so let's take a
18:55 - look first on this first one this is
18:57 - from uh
18:59 - C Carla on Twitter I just wanted to show
19:02 - Emily Shia did a guest tutorial about
19:04 - making a matrix rain simulation and
19:06 - there have been a lot of wonderful uh
19:09 - creative variations of it um and this is
19:11 - one that I just saw this morning that
19:13 - has uh color and there's sort different
19:16 - set of characters in it and um uh I
19:20 - really enjoyed seeing this one look and
19:22 - so then the other thing I'll mention is
19:23 - the if you if you go to this tweet uh
19:25 - you'll find the source code is here so
19:28 - this is a great I this is one of the
19:30 - things that I love about do operating
19:32 - this YouTube channel whether I make a
19:33 - tutorial or somebody else does to see
19:35 - this sort of tree of ideas that
19:38 - percolate out from a single example so
19:40 - thank you um for uh Carla for this
19:42 - wonderful uh version of The Matrix rain
19:45 - okay now I'm going to show uh some stuff
19:49 - from the uh oh and I need to have sorry
19:51 - I need to have uh I don't have
19:53 - everything set the way that I meant to
19:56 - look at this oh my God seriously uh hold
20:00 - on everything's going to be okay
20:02 - everybody uh this is from I'm going to
20:04 - start I think I showed this before but I
20:06 - didn't um I didn't kind of uh get all
20:10 - the details out about it so this is from
20:13 - uh I have notes Here Mr Muse addict uh
20:17 - and what it is is a oops Trappist
20:22 - visualization what is a trapist
20:24 - visualization it's the newly discover
20:26 - visualization of data around the new
20:28 - newly discovered Trappist solar system
20:31 - so I think when I showed this before I
20:32 - didn't explore everything it could do
20:35 - and so I really use the mouse wheel to
20:38 - zoom so that's the thing that I mostly
20:40 - missed so let's find oh is there no link
20:43 - to it running I got to find the code
20:45 - here ah okay so ah so this so I'm going
20:48 - to uh paste this into processing
20:50 - again we're going to look at this
20:57 - project
21:02 - okay here we go let's run Mouse wheel I
21:05 - don't have a mouse wheel that might be
21:06 - my problem Oh but I can do the two
21:08 - finger stroll so you can see here odd so
21:10 - this is really what I missed which is
21:12 - that you uh my you know that you can see
21:14 - that the data um you can kind of zoom in
21:17 - and out to see and what I love about
21:19 - this I guess is you can see the data
21:20 - about the planets in the newly
21:23 - discovered solar system in relation to
21:25 - planets in our current solar system
21:28 - uh great work thank you okay so now
21:31 - we're going to move on to the next
21:33 - project uh I'm going to go to um this
21:37 - code pen from
21:40 - Robin random oh I like random Walkers
21:43 - surrounded by their verono sector so so
21:47 - this is great I haven't done a tutorial
21:49 - or coding challenge or anything about
21:51 - verono tessellation verono geometry
21:55 - whether I'm pronouncing ver I just need
21:56 - to do a pronunciation challenge where I
21:59 - try to say the word verono correctly um
22:01 - and let me look in the notes Here
22:03 - submitted by Robin which is um uh This
22:08 - Is Random Walkers surrounded by their
22:10 - verono sector and this is using D3 so it
22:13 - looks to me I guess I I think the idea
22:15 - is that these are all moving all these
22:17 - little dots are moving and the verono
22:20 - calculation is happening every frame and
22:22 - moving the things around so I you can
22:24 - you can imagine a lot of possibility
22:25 - design possibilities that you could
22:26 - build off of this okay uh this is on
22:29 - code pen and all the links to these
22:31 - projects I'll put in this video's
22:33 - description okay now I'm going to go
22:36 - to uh this code pen from
22:40 - Ala and uh I'm going to just change the
22:42 - view to
22:44 - full uh whoa look at this rainbow flow
22:47 - and hex spins this is quite exciting and
22:50 - interesting um so these are particles
22:53 - moved by noise grouped into hexagonal
22:57 - bins using something from D3 called
22:59 - hexpin I have no idea what that is I'll
23:01 - have to explore that sometime with their
23:03 - color disparity being the amount in that
23:06 - group with some effects to make it look
23:08 - like 3D pillars it really has a quality
23:11 - of
23:12 - um uh
23:14 - uh almost like AR it's very
23:17 - architectural and I I love the idea that
23:18 - maybe I could kind of fly over it or uh
23:22 - you know what that game that I used to
23:25 - love called cubert or something it has
23:26 - exactly this quality where you have the
23:28 - little character who bounces down um
23:29 - really nice choice of color great stuff
23:32 - okay so um let's keep moving I'm just
23:35 - doing these quickly ah okay so now I'm
23:37 - going to get to something a little bit
23:39 - different which is uh C Manny has been
23:44 - thinking about so one of the things I
23:45 - have is I have and how am I on time I've
23:48 - got my limit I I hopefully it won't take
23:50 - seven minutes to discuss this but that's
23:51 - my limit 30 minutes of introductory
23:53 - stuff uh so if I go to the coding train
23:57 - GitHub repository rainbow topic isues
24:01 - and what what you see here is all of
24:04 - these submissions from people of
24:05 - different ideas of things that I could
24:07 - explore on the channel and there's so
24:09 - many wonderful things I would love to do
24:11 - double pendulum I love that double
24:13 - pendulum wonderful wonderful idea so one
24:16 - of the things I'm trying to figure out
24:17 - is how to best organize this into
24:20 - categories there's a lot of duplicates
24:23 - um how to
24:26 - um how to
24:28 - um how to allow for efficient up voting
24:31 - um so I can get a sense of if there are
24:33 - things that are particularly desired
24:34 - from the community um and so what the
24:37 - system that I have right now for that is
24:39 - just sort of a free-for-all of
24:40 - submitting issues and then if I go under
24:42 - sort and I sort by thumbs up we can see
24:46 - oh look at that what's on the top here
24:49 - machine learning oh look at this
24:51 - mathematically
24:53 - involved yes um um or actually
25:00 - and uh planned meaning I'm planning to
25:02 - start tackling some of this stuff next
25:03 - week and eventually this this I do want
25:05 - to break out and this has got just like
25:07 - sort of a long list of stuff I want to
25:08 - break this out probably into separate uh
25:10 - issues to check them off one at a time
25:12 - so you can see kind of what people have
25:14 - upvoted just through the GitHub system
25:16 - and so C Manny uh has started working on
25:19 - maybe this is a visualization where you
25:21 - can see look at this where using I it
25:25 - looks like this uses the attraction
25:26 - Force Challenge and um the um uh um and
25:33 - also uh maybe matter.js for some of this
25:36 - Collision stuff I'm not sure I'm just
25:37 - speculating and so um this is a great uh
25:41 - exploration that we can sort of see like
25:43 - you know maybe we could use this
25:44 - actually a pick something at random and
25:46 - the the larger ones oh look at this I
25:48 - can drag it around machine learning is
25:50 - taking over um so anyway if anybody's
25:52 - interested and has thoughts or feedback
25:54 - about how to organize um there's a a
25:57 - gith there's an issue thread see if I
26:00 - can find it
26:02 - um I would suggest coming in right here
26:07 - uh where let me see if I can uh let me
26:10 - just if I search for topics no that's
26:12 - going to be in everything what if I
26:14 - search for C
26:15 - Manny no I feel like there was I
26:18 - somewhere there's a I'll find it
26:20 - somebody will post it in the chat that I
26:22 - feel like there's a discuss maybe a
26:23 - place where you could participate in
26:24 - this discussion or certainly you could
26:26 - go to um actually maybe what you could
26:28 - go to uh C man's GitHub the rainbow
26:31 - topics repo um there okay um let
26:37 - me um let me just get myself here open a
26:40 - little bit more I got this chat going
26:43 - I'm seeing the uh okay so
26:48 - now I'm ready to get started and I'm
26:51 - just gonna ah
26:54 - airplan Here
26:56 - Comes
26:59 - oh
27:00 - mirroring is it going to
27:03 - work I might take a five minute break
27:05 - later to restart my computer um because
27:09 - I think that yeah okay I'm going to do
27:11 - this now actually let's uh because I
27:14 - think sometimes everything just needs
27:17 - everything just sometimes needs a reboot
27:19 - so I'm going to go over to the
27:20 - Whiteboard which is and erase that and
27:22 - talk to you about some of the topics I'm
27:24 - going to do today uh okay so let me
27:28 - restart this
27:30 - computer and let me go over here you're
27:33 - you're in the void right now but I think
27:34 - you can still hear
27:36 - me and as soon as I press this button
27:38 - I'm going to be standing right in front
27:39 - of
27:40 - you it's a very professional operation
27:43 - I've got going here and I'm going to
27:46 - erase
27:49 - this you know what I would like to do
27:51 - this afternoon is I'd like to just come
27:53 - up here and wash this whiteboard just by
27:55 - myself could play some you know some
27:58 - Mozart wash the Whiteboard soothing
28:01 - tones that that's the kind of thing that
28:03 - really brings joy to my life but right
28:06 - now we'll just erase it and it'll be all
28:07 - smudgy it's fine you can see I haven't
28:09 - been here since last
28:12 - Friday okay so this is erased um so
28:15 - there's two um and let me just I'm back
28:18 - here uh I don't know what this is going
28:20 - to do uh let's see if this
28:23 - works if we can log in here H Computer
28:25 - is now Rebooted and behind me hello I am
28:29 - now uh going to wait for everything to
28:31 - start
28:33 - up we're going to give this one more try
28:35 - let's
28:37 - see okay this I don't
28:39 - need this is running okay so here we go
28:43 - and I'm connected to this wi-fi yep okay
28:45 - here we
28:48 - go one more attempt
28:52 - here ah there we go so now we've got the
28:56 - uh
28:59 - uh we've got this here okay fine fine go
29:03 - away okay there we go and now I can go
29:08 - to
29:12 - here is it g to happen is it gonna
29:26 - happen I have exactly 30 seconds in my
29:30 - half an hour limit so I will
29:33 - continue our coding train story book a
29:37 - million random digits with 100,000
29:39 - normal
29:40 - [Music]
29:42 - [Applause]
29:45 - [Music]
29:48 - deviates I need a bookmark a bookmark
29:50 - would really
29:52 - help it's really loud oh wait that's
29:57 - totally not working at all it it it
30:00 - disconnected I at least read one number
30:02 - for you guys
30:08 - 504861 that's a great
30:10 - number okay uh oh well
30:15 - um yeah people I am getting a couple of
30:17 - people saying that my mic is quite low
30:20 - compared to other
30:23 - videos uh I see like a nice green
30:27 - stretch but um let me I will I will turn
30:30 - it up a tiny bit I have a little dial
30:33 - over here maybe nicked so I'm just gonna
30:38 - up this dial little
30:42 - tiny oh now okay wait so maybe that's a
30:45 - little bit everybody says it's fine
30:46 - though so I'm going to keep it oh sound
30:48 - is good mic is fine okay okay okay okay
30:51 - I made it a little bit
30:54 - higher okay so why did this disconnect I
30:58 - I guess I have to give up on this
31:01 - because came back I don't know why it
31:04 - disconnected okay uh and then just
31:07 - system
31:08 - preferences and sound multi output
31:13 - device
31:16 - and as always I always forget the this
31:26 - do
31:31 - okay so uh what what I want to
31:34 - do I have two things I want to look
31:37 - at one is uh what are we at now 1110 so
31:41 - I've I don't know if I'll get to all of
31:43 - this but I want to look at texturing
31:47 - geometry um in processing maybe I should
31:50 - start with that so this is the last week
31:53 - that I'm going to uh finish off some new
31:55 - content in videos from the first course
31:59 - nature of code course which is more
32:00 - about physics and simulation and one
32:02 - thing that I've been wanting to do for a
32:04 - really long time is make a uh inverse
32:07 - kinematics example um uh which is a
32:10 - technique that you can use to calculate
32:12 - the positions of you know for lack for
32:14 - you know one scenario is think about how
32:16 - a robot arm works it's actually a an
32:18 - algorithm that's used in robotics but
32:21 - you know in terms of a visual example
32:23 - how might we make a a swimming fish or
32:25 - eel um
32:28 - a tentacle there's a lot of skeletal
32:30 - body type motion types things that we
32:31 - can do with this idea of forward and
32:33 - inverse kinematics so and there actually
32:35 - are um in processing itself maybe I'll
32:38 - start with
32:39 - this uh in processing itself um there
32:43 - are uh some examples I believe it's
32:46 - under under topics interaction
32:50 - yes so here under uh topics interaction
32:54 - there are examples follow 1 2 3 and
32:57 - reach one two 3 Let's just look at
32:58 - follow uh two for
33:01 - example I don't know which one this is
33:03 - going to be but you can see this is a
33:05 - two segmented arm that's following the
33:07 - mouse and let me move that over here so
33:10 - these examples are by uh Keith Peters I
33:12 - believe it says there and Keith Peters
33:16 - does it say that yeah based on or based
33:18 - on code from Keith Peters Keith Peters
33:20 - has a YouTube channel called coding math
33:23 - which is a wonderful YouTube channel
33:25 - especially if you really want to like
33:26 - get into the math stuff of
33:28 - stuff um and it's called coding math so
33:31 - you can find it I'll link to it um I
33:33 - believe that Keith Peters has a couple
33:35 - videos I definitely watched them quite
33:37 - at some point not recently on um forward
33:41 - and inverse kinematics so and one of the
33:43 - things about Keith's channel uh Co one
33:45 - of the things about coding math is that
33:47 - it doesn't use p5js it doesn't really
33:48 - use any Frameworks so for those of you
33:51 - who are kind of like that vanilla
33:53 - JavaScript raw guts of the code stuff um
33:55 - that's a great resource for you okay um
34:00 - so um so uh here we go let's see um I am
34:06 - now so let me think about let me think
34:07 - about how to do
34:10 - this ah wrong wrong
34:13 - button okay so I want to do what I want
34:16 - to do is um I think I want to just cover
34:19 - uh polar cordinates because I just keep
34:23 - using it in every single video I think
34:25 - it's worth making just like a 5 minute
34:27 - polar coordinates video I probably have
34:29 - one already from a bunch of years ago in
34:31 - processing um but I want to see if I
34:34 - could just do a really quick like polar
34:36 - coordinates tutorial in p5js
34:38 - um so that's one thing then I want to
34:42 - look at forward
34:46 - kinematics and maybe we can make like a
34:48 - jiggly tentacle like
34:53 - thing and then I want to look at uh
34:55 - inverse
35:00 - kinematics and we can make some you know
35:03 - just a simple like moving like snake
35:05 - like thing um tentacle
35:08 - snake uh and then I I really would like
35:10 - to do a like a swimming fish
35:16 - simulation so the problem you know I I
35:18 - I'll try to come up with a um so I don't
35:21 - actually have a sense of exactly how to
35:23 - do this but I have seen lots of really
35:25 - great demonstrations of it so I think if
35:27 - I can get through these topics while I'm
35:29 - doing that and building examples for
35:31 - those of you following along you might
35:32 - have some ideas that I can build into a
35:35 - fishing swish a fishing swish oh God my
35:38 - brain is not working a swimming fish
35:41 - simulation okay uh all
35:45 - right how's this working
35:48 - still this this whole sound system thing
35:51 - I've got going I have to completely
35:52 - revamp it and I'm on the wrong camera
35:54 - once again okay uh
36:01 - okay so I'm gonna get started I think
36:03 - what I'm going to do is I'm going to do
36:06 - my whoa I'm going to do my polar
36:09 - coordinates example with code pen why
36:15 - not um and I'm going to log in oh what's
36:20 - the chance I can remember
36:22 - this
36:24 - no I Do by the way use one
36:27 - password the problem is I don't have one
36:30 - password installed open on this computer
36:34 - that I log in for oh my God I'm gonna
36:36 - have to look it up I know where I can
36:38 - look it up bear with me for a second I'm
36:40 - GNA look up my code pen
36:42 - password uh
36:46 - uh uh okay hold on one password
36:51 - [Music]
36:55 - Here
37:06 - one
37:25 - password
37:33 - Tada okay I'm in my one password account
37:36 - I'm going to do a new
37:38 - pen uh I am going to uh I think I like
37:43 - this
37:45 - view uh and then I only really want to
37:48 - look at the
37:49 - JavaScript
37:51 - um and I'm going
37:54 - to say function setup
37:57 - up function
38:00 - draw I'm going to go to
38:03 - settings and uh JavaScript I'm going to
38:06 - add CDN op 5js
38:10 - CDN this is what I'm doing is I'm just
38:12 - setting up a code pen project to
38:15 - use how come that's not working uh CDN
38:20 - p5js
38:23 - I mean I I don't know why this does not
38:25 - coming up but I'm going to look for P5
38:28 - here it is uh and click on this so uh
38:31 - the P5 library is a library that you can
38:35 - uh reference from your code in a variety
38:38 - of different ways you can download the
38:39 - library but one of the easy ways to do
38:41 - it is just to get this link from um
38:44 - cdnjs which CDN stands for Content
38:47 - delivery Network so I'm going to grab
38:49 - that link here I'm going to go to code
38:51 - pen and I'm just going to add external
38:53 - Javascript right there so now this
38:55 - codepen project will have a reference to
38:57 - p5js
38:58 - itself and
39:01 - uh I I think I like to make a pitch that
39:03 - P5 be nice to have P5 in this list here
39:06 - of things you can quickly add ah where
39:08 - did that go um and now I can just do
39:10 - save and close oh so a polar coordinates
39:13 - call it that
39:16 - um uh polar the the polar isn't there
39:19 - like a the polar The Polar Express The
39:23 - Polar Express to coordinates town
39:28 - okay and now if I say just to see if
39:30 - this works create
39:33 - canvas and
39:36 - background
39:39 - 51 and
39:42 - save uh oh do shouldn't this work now
39:45 - what am I
39:48 - missing uh
39:50 - console I don't see any console
39:54 - errors what am I missing here folks
39:57 - [Music]
40:02 - uh
40:14 - uh code pan afficianados copy in import
40:18 - did I not actually
40:21 - uh oh I have
40:25 - to oh oh whoops I have a typo in there
40:28 - thank
40:31 - you there we go okay great I'm live and
40:34 - working okay U Matt ask don't you need
40:37 - to B A div element to bind your canvas
40:39 - to so you don't actually P5 is set up in
40:42 - a simple way where it just uh what it
40:45 - does is it creates the canvas element
40:47 - and just appends it to the body of your
40:50 - document at the end so it's not the be
40:52 - all end all of everything but it'll get
40:54 - you it'll get you working here okay so
40:57 - um uh okay here we go I feel like I'm a
41:01 - little little having a little trouble
41:03 - getting kind of going
41:07 - today let
41:14 - me
41:17 - okay so this is going to go some in some
41:19 - probably if um Mato when you get to
41:22 - watching this Mato who does a lot of
41:23 - editing of these videos this will I
41:25 - think go in the nature of code chap it
41:28 - can I actually could go into p5js
41:30 - additional topics it could also go in
41:33 - nature of code chapter 3 um because
41:35 - that's also where I already have a video
41:36 - but we'll put this in p5js additional
41:39 - topics okay uh or it could be like a Q&A
41:42 - video whatever no additional topics is
41:44 - good uh
41:49 - okay hello uh welcome to a
41:54 - video wait I got to just get get right
41:56 - into it this is going to be like we're
41:57 - going to make a I'm going to be
41:58 - releasing a 5 minute YouTube video it's
42:00 - going to be very
42:02 - exciting hello in this video I want to
42:04 - talk about something called polar
42:05 - coordinates okay what are polar
42:07 - coordinates and I've been I've been
42:09 - making all these videos coding
42:10 - challenges where this scenario comes up
42:13 - over and over and over again I have a
42:16 - point here call this point
42:18 - XY I have uh relative that point I have
42:23 - some sort of angle call that angle
42:27 - angle what if I want to find a point out
42:31 - here based on that angle and a distance
42:35 - to that angle so this is what I mean by
42:38 - polar coordinate a a cartisian
42:41 - coordinate is an XY coordinate in it uh
42:44 - named for the French mathematician Rene
42:47 - deat uh an XY coordinate um in a
42:52 - two-dimensional space so we we move over
42:55 - X spaces we move move up y spaces in the
42:57 - computer graphic system you know we've
42:59 - got the we've got the flip thing where
43:01 - we move over X spaces we move down X
43:03 - spaces and that's XY a polar coordinate
43:06 - is thinking about a
43:08 - coordinate that is defined by a radius
43:11 - or a distance for a distance um and an
43:14 - angle often using the Greek letter Theta
43:16 - to Define that angle the pro the reason
43:19 - the so both of these are useful ways of
43:21 - thinking about points in space if I want
43:24 - to do a spiral pattern polar coordinates
43:26 - are going to be really useful because I
43:27 - could just change that angle and maybe
43:29 - shrink the radius and I've got a spiral
43:31 - pattern the issue is that all drawing
43:34 - functions in a a computer Graphics
43:38 - things like p5js or processing or fill
43:41 - in the blank there think about Co really
43:44 - only think about coordinates in
43:45 - cartisian coordinates so the ellipse
43:47 - function which draws a circle takes an
43:50 - XY the point function which draws a
43:52 - point the line function the rectangle
43:55 - function all of these require XY so what
43:57 - if you are thinking about R Theta and
44:01 - you want to um you want to have your
44:04 - program run with this idea of R Theta
44:07 - but you have to draw with XY so we need
44:10 - a formula to convert from
44:13 - Polar to cartisian
44:16 - we also sometimes want to convert from
44:18 - cartisian to Polar I'll maybe I'll talk
44:20 - about that in a separate video but in
44:22 - this video I just want to look at polar
44:24 - to cartisian and the way to do this
44:26 - boils down to trigonometry trigonometric
44:30 - functions so if I have a
44:33 - triangle and I say this is my angle
44:36 - Theta oh I'm hi I'm over
44:39 - here time out this is going to get
44:41 - edited I'm GNA just shift the camera a
44:43 - little bit I got it got
44:47 - bumped just turn it a little bit there
44:49 - we go okay uh there we
44:53 - go oh yeah I'm back after fixing the
44:55 - camera
44:57 - um if I have this triangle I have a
45:00 - Theta an angle here this is my R right
45:03 - so I know this point what I want to do
45:05 - this is some XY what I want to figure
45:08 - out is what is this point and I'll call
45:11 - this uh uh X2 Y2 or whatever if we call
45:15 - this X1 y1 how do I get this point okay
45:19 - well if I knew what this was I'll call
45:23 - this DX as in like Delta X the change in
45:26 - X and this is dy the change in y if I
45:30 - knew these two values then I could say
45:34 - x1+ DX = X2 and and y1 whoops plus Dy
45:42 - equals Y2 so if I could get these two
45:44 - values then I could move from here to
45:47 - there so how do I get these two values
45:50 - from these two values and this
45:53 - is where's my Eraser this is exactly
45:56 - what we need to do okay I've drawn the
45:58 - same diagram so many times now let's
46:00 - just let's just make the math happen
46:02 - Okay so do you remember so at some point
46:04 - in your life you might have heard of a
46:06 - function called s or cosine sooa s
46:10 - equals opposite over hypotenuse cosine
46:12 - equals adjacent over hypotenuse that's
46:15 - referring to the sides of a right
46:16 - triangle and guess what this is a right
46:18 - triangle right here this is opposite to
46:20 - the angle this is adjacent to the angle
46:22 - so
46:23 - s OFA equals opposite Dy / hypotenuse
46:30 - which is r in this case cosine of the
46:33 - angle equals adjacent which is
46:36 - DX divided by hypotenuse which is r and
46:41 - these equations can be Rewritten another
46:44 - way I can simply say d y = r * s of
46:50 - theta now you might be asking how do I
46:53 - get from here to there one of the things
46:55 - you can do with an equation is you can
46:56 - multiply both sides of the equation by a
46:58 - number so if I multiply this side by R
47:02 - and this side by R this side becomes R *
47:05 - sin of theta and this side becomes just
47:07 - Dy because Dy * R / r r / R is 1 so this
47:12 - just becomes Dy and DX also becomes R *
47:16 - cosine of theta so now I have those two
47:20 - formulas so if I have this XY point I
47:23 - have an angle and a r a distance a
47:26 - radius or a length I don't know what to
47:29 - call it then I can calculate DX and Dy
47:32 - based on that and get that point let's
47:33 - make that happen in the
47:35 - code so I have a very simple code pen
47:37 - here open um I'm using the p5js library
47:41 - and so the P5 library is already loaded
47:43 - into this Cod pen project and the link
47:45 - to this code pen project will be in this
47:47 - video's description um okay so if you
47:50 - want to know how to do that I have
47:51 - another video about how to set up a P5 J
47:53 - Project in codeen so what I want to do
47:55 - and actually um just very very simply is
47:57 - I'm going to say what if I have let me
48:00 - just do this all in setup I think right
48:01 - now and we can or or in draw it's fine
48:04 - what if I have an X and A Y which is
48:06 - like 100
48:08 - 100 can you see this font is very very
48:12 - um small hold on a sec we'll edit this
48:14 - out I think I need to make the font
48:17 - bigger
48:20 - um so how do I where is that under
48:23 - settings is that like
48:27 - where do I set my font size settings
48:30 - somebody who uses codes Spen more
48:33 - frequently let me
48:38 - know
48:39 - uh can I do it here tidy maximize
48:44 - minimize settings I really want it to be
48:46 - in settings I'm waiting for somebody to
48:48 - tell
48:51 - me
48:54 - uh
48:59 - I saw people typing things font size
49:01 - looks good it looks so small to me you
49:03 - really can read that uh I could do the
49:05 - browser scale thing but I hate doing
49:07 - that because it makes everything bigger
49:08 - there's got to be a way maybe it's under
49:10 - here uh let's try this let's try this
49:14 - settings uh okay hold on stay for a
49:16 - second
49:19 - save uh yeah I don't want to do I know I
49:21 - could do the command plus thing but
49:22 - there's got to be a way here we go code
49:25 - font size let's try 26 save all settings
49:30 - and then let's go
49:32 - back okay that's
49:38 - better okay I'm back with a bit smaller
49:42 - a bit bit larger font so now I just want
49:44 - to draw a point at that
49:47 - XY and I'm going to say stroke 255 to
49:51 - make it white there you go look at that
49:53 - tiny little point there it is hi tiny
49:55 - little Point okay now it's a happy point
49:58 - I I've been wanting to say that for so
50:00 - long uh okay stroke weight let's make it
50:03 - a little bigger stroke weight
50:06 - eight uh okay there's my point Ah that's
50:08 - not a good location for this point let's
50:10 - put it uh further down at 300 okay now
50:14 - what I want to think about is let's say
50:16 - at this point I I want to have an angle
50:19 - of
50:20 - 45° so I'm now going to make an angle
50:25 - equal to 45° now here's the thing 45° in
50:29 - a computer program is goes this
50:32 - direction so actually what I really want
50:34 - I can't is 45 degrees this is so hard 45
50:37 - degrees this way which is negative 45
50:39 - and 45 is uh I'm going work in units of
50:43 - measurements called
50:47 - radians no stop now right now go back so
50:51 - here's the thing I always get into these
50:53 - videos I'm like okay well do I need to
50:54 - explain radius
50:55 - and I do that in a different video
50:57 - should I been doing that in this video
50:59 - am I going to take two minutes to
51:00 - explain radians now let me do that
51:04 - again and I'm just going to use I'm
51:06 - going to set angle mode to degrees
51:10 - okay so I want 45° a 45 degree angle
51:15 - 45° uh uh because because y points down
51:18 - will actually rotate me this way and I
51:20 - want to rotate up so I need 45° now I
51:22 - keep saying degrees because that's the
51:24 - way I tend to think about it Les 45 90°
51:27 - 360° um most computer graphic systems
51:29 - will think about angles in a unit of
51:31 - measurement called radians uh 360° is 2
51:35 - pi radians in that that's something that
51:37 - uh um that I'm going to just sort of
51:38 - ignore for this particular video and I'm
51:40 - just going to say angle mode degrees so
51:43 - now P5 is going to think in terms of
51:45 - degrees and I'm going to say angle
51:47 - -45 okay now what do I do here I
51:51 - remember I I need to have a distance so
51:53 - I'm going to just say maybe 100 pixels
51:55 - out 100 pixels and I need to calculate
52:00 - VAR oops Ral 100 and I need to say VAR
52:05 - uh DX then equals um R * cosine of that
52:11 - angle and Dy = R * s of that angle and
52:16 - now I can simply just um now I can
52:19 - simply just make another point at x + DX
52:23 - and y + Dy and let's see what we get
52:27 - there it is 45° and I could also connect
52:30 - those and I can connect those with a
52:38 - line and you can see whoops and you can
52:40 - see there I have this line now I could
52:42 - change that angle so now I could say let
52:44 - me have the angle be
52:48 - mapped you know I should actually um let
52:51 - me have it just be mapped to Mouse X so
52:53 - Mouse X which goes between zero and
52:54 - width I'm gonna have the angle between
52:57 - negative pi and Pi oops oh no no sorry
53:00 - negative 90 and 90 because I'm doing
53:02 - this in degrees and you can see here as
53:04 - I
53:05 - move as I move the uh Mouse it's
53:08 - changing that particular angle okay so
53:11 - this is the idea there's a lot of
53:12 - applications of this um you're going to
53:14 - see that one of the reasons why I'm
53:15 - making this video right now is I'm about
53:17 - to do a coding challenge about something
53:19 - called forward and inverse kinematics
53:21 - where if you think of this as one
53:23 - segment of a robot arm what if it's
53:25 - attached to another segment and another
53:27 - segment and how do those all rotate
53:29 - relative to each other so this is the
53:31 - kind of thing that you need for that I
53:33 - should mention that you can also I could
53:34 - have made this exact same P5 sketch with
53:38 - just uh the actual rotate function so
53:40 - there is a rotate function can draw a
53:42 - line a line I can rotate it by an angle
53:45 - and that would actually be a wonderful
53:46 - perfect way of doing this as well um I
53:48 - have some videos about that um probably
53:50 - as well about how to do Transformations
53:52 - using rotate and translate but I in this
53:54 - case for this kinematics example that I
53:56 - want to make um having um having the the
54:01 - doing doing the polar to Polar to cartis
54:04 - cartisian conversion in the code is a
54:07 - good thing okay I will see you guys in a
54:09 - future I hope this video was somewhat
54:11 - useful to
54:12 - you I'm I'm I'm a little off balance
54:20 - today what what was that like 35 minutes
54:27 - oh and then the camera goes
54:31 - off I'm checking the thermos that over
54:33 - here because
54:37 - uh
54:45 - okay so okay now that I did that in code
54:50 - pen I'm going to almost
54:53 - absurdly move move to a different
54:55 - programming
54:59 - environment over here what time is it
55:06 - 11:30 uh and this is called this is
55:10 - processing and I'm going to save this on
55:13 - the
55:14 - desktop as uh uh let's call this forward
55:20 - yeah kinematics because that's what
55:21 - we're going to
55:22 - do I'm going to add setup
55:26 - I'm going to add
55:31 - draw
55:35 - uh okay here we
55:38 - go
55:42 - now I am going
55:45 - to I'm uh I'm uh Michael in the chat
55:48 - writes I'm surprised that the camera do
55:51 - the camera doesn't drive you crazy
55:52 - turning off oh it does drive me crazy
55:57 - uh okay
55:59 - um so now what I'm going to do here is
56:03 - I'm going to look for my
56:05 - Eraser which is over
56:08 - there and I'm got to fix something here
56:11 - with the
56:15 - microphone and I am going
56:21 - to hold on one thing I want to look just
56:23 - bear with me for a second I want to look
56:25 - for something
56:29 - here
56:33 - uh yeah uh interactive fish aquarium
56:36 - desktop
56:38 - wallpaper um okay look okay I'm coming
56:41 - at there's a reason why I was doing this
56:45 - interactive fish
56:48 - aquarium desktop wallpaper YouTube let's
56:52 - see if this comes up right is this the
56:55 - right okay so this is uh one of my
56:57 - students here at ITP uh pointed me to
57:00 - this particular example um with a fish P
57:04 - I guess this is a interactive desktop
57:06 - you can get and it has these swimming
57:10 - fish and so I really wanted to figure
57:13 - out a way to create this kind of
57:18 - simulation and my suspicion is that the
57:23 - uh concept of kinematics whether it's
57:25 - forward or inverse which I will get into
57:28 - is a key to unlocking something like
57:30 - this um now there's a lot more go
57:32 - because this just connects so nicely
57:35 - with the flocking simulations and the
57:36 - different steering behaviors so this is
57:39 - something I really um curious to see if
57:41 - we can if can figure out a way to tackle
57:43 - it so what I'm going to do is I am going
57:47 - to this
57:49 - morning build uh
57:52 - whoops uh I'm going to build
57:55 - um if I play this again I'm going to
57:58 - build basic examples of forward and
58:01 - inverse kinematics um and let me just
58:03 - show you those actually already which is
58:06 - I uh this well uh whoops this follows so
58:12 - this is an example of this is an example
58:14 - of inverse kinematics um and so I'm
58:17 - basically going to do the math and I
58:19 - think follow 3 does what I'm going to do
58:21 - which is that if I connect this with a
58:22 - lot of segments it gets much more
58:24 - interesting
58:25 - than just these two segments so you know
58:27 - I'm kind of imagining this as like if
58:29 - there's like a sine wave controlling
58:31 - this that then affects what's connected
58:33 - to it that you might get that kind of
58:34 - fish swimming effect so this is really
58:37 - oh and I'm um so I want to build these
58:40 - this
58:41 - morning uh it's not the morning anymore
58:43 - it's 11:30 I want to do this a forward
58:46 - and inverse and I'm guessing this is
58:48 - going to take me about an hour that
58:50 - means two
58:51 - hours and then I'm going to go away and
58:54 - I'm going to do lots of other work and
58:55 - answer lots of emails and catch up with
58:56 - a lot of other things and then if I have
58:58 - time I'm going to come back and try to
59:00 - make a fish thing based on these core
59:03 - examples so uh in the meantime when I'm
59:06 - away if those of you who want to try to
59:08 - make the fish thing and send me ways
59:10 - that you did it I would love to hear
59:11 - from you and that'll help me okay
59:15 - um yeah this I I apologize that this
59:18 - labtop um I really should uh put the
59:21 - second laptop that I use I should put
59:23 - something green on it maybe I'll try to
59:25 - do that that's a great suggestion maybe
59:27 - I'll try to get that for later today
59:30 - okay uh all right so let's get started
59:32 - here um so what actually let me open
59:37 - up let me open up
59:40 - um sorry under
59:45 - examples and let me open up reach
59:49 - three no not reach let's do the follow
59:52 - actually reach is a good one now let's
59:54 - do the the follow I don't know doesn't
59:59 - matter so here's here's what you can see
60:02 - so this is what I'm intending to build
60:04 - and this is Keith peters's example from
60:06 - coding math right Keith Peters and
60:08 - coding math that's the same person am I
60:09 - right somebody tell me if I'm wrong uh
60:13 - okay put on some face pain all right so
60:16 - let's
60:18 - um look I think one of my problems today
60:21 - is that I'm not staying very
60:23 - hydrated
60:27 - somebody on Twitter asked me what brand
60:30 - of glasses these are I have no
60:32 - idea Garrett light California there you
60:36 - go okay they really need to be tightened
60:38 - they kind of like fall down a lot
60:47 - okay never forget this dot I'm going to
60:50 - do the this this dot this dot this dot
60:53 - the this Dot Song never forget this okay
60:55 - here we go somebody compose that song
60:57 - for me I'm so distracted I know it's a
60:59 - little it is really distracting I've got
61:01 - all these different chats going I've got
61:03 - lights and cameras everywhere computers
61:05 - things are blinking at me I need a way
61:07 - to do this being less
61:09 - distracted okay but I'm going to get
61:12 - started so let
61:14 - me minimize this let me minimize this
61:20 - let me actually go to the H it's
61:23 - fine um
61:27 - you know what I think I like the I think
61:29 - I
61:31 - like the
61:33 - reach example better to
61:37 - show yeah also I don't have to operate
61:40 - the
61:43 - mouse oops oh did it close that
61:52 - ah I feel like my evening live streams
61:54 - are always better than the morning ones
61:55 - I always thought I was like way more on
61:57 - top of things in the morning and now I'm
61:58 - now I'm wondering about that once again
62:01 - I didn't get a good night's sleep last
62:02 - night that seems to be the major problem
62:05 - uh okay um reach
62:10 - three
62:15 - okay
62:17 - okay
62:23 - um
62:24 - what do I need over
62:26 - here I
62:28 - [Music]
62:29 - think I think I'm just going to get rid
62:31 - of all this erase it I'm definitely
62:34 - going to need to do some diagramming the
62:36 - funny thing is I have definitely built
62:38 - at some point in the past inverse
62:41 - kinematics examples but I have I don't
62:43 - think I've ever done the forward
62:45 - kinematics which in theory is like the
62:46 - simple
62:48 - thing so but I'm a little bit nervous
62:50 - about doing that we'll see what we see
62:52 - what see what I get
62:55 - okay I'm put this over
62:58 - here and you are the person I'm talking
63:02 - to my glasses are on my face I'm oh I'm
63:06 - in the wrong camera shot ah I used to
63:08 - not have a problem with remembering this
63:11 - okay um let's see okay here we
63:19 - go welcome to a multi-art coding
63:23 - challenge series on
63:26 - kinematics this is an example from
63:29 - processing uh processing a Java based
63:32 - platform open source uh creative coding
63:34 - environment that I use in a a lot of my
63:36 - videos um this is an example by Keith
63:38 - Peters from coding math uh of the coding
63:42 - math YouTube channel which I also highly
63:43 - recommend I believe that Keith Peters
63:45 - has said video tutorials on this exact
63:47 - same topic with and if you're looking
63:50 - for the video tutorial where somebody
63:51 - who really understands the math and
63:53 - doesn't make any mistakes
63:54 - um I would recommend that video to that
63:57 - channel so just go leave and watch that
63:58 - channel but you can see this is an
64:00 - example called reach three and what you
64:02 - can see is that there's this bouncing
64:04 - ball moving along and that there's this
64:06 - kind of tentacle thing that's just
64:08 - reaching out trying to touch it trying
64:11 - to catch it and then move along with it
64:12 - and it behaves In This Very I might say
64:15 - robot arm like fashion so this is an
64:17 - implementation of something called
64:19 - inverse kinematics which refers to the
64:22 - motion of ected segments from the front
64:26 - to the back so the front is what's
64:28 - really controlling it it's trying to
64:30 - reach and how should all these other
64:31 - segments be oriented so that that front
64:34 - can get as close as possible to this
64:35 - target versus forward kinematics which
64:38 - is like you know I'm going to move
64:40 - this how should the rest of my arm move
64:43 - when I move this part of my arm which is
64:44 - different than well I I want to inverse
64:47 - which I need to move my hand how does
64:49 - the rest of my arm move in order to get
64:50 - there so I want to do both of those
64:52 - things with the goal of making like a
64:53 - swimming fish or a weird goofy tentacle
64:55 - thing really the goal of like showing
64:57 - you how these things work and then you
64:58 - making something that's creative and
65:00 - colorful and exciting and lifelike and
65:02 - crazy and weird or beautiful or whatever
65:04 - so um let's get started let's look let
65:07 - so this video I'm going to do forward
65:09 - kinematics and then I'll do some other
65:11 - videos that I'm not sure yet so let me
65:13 - move over here and let's discuss what
65:15 - the core stuff that we need to build
65:17 - into our code is so we need so the idea
65:20 - is and if I just think of it as two
65:21 - segments that I need to have these I
65:23 - think I'm going to call these segment
65:25 - objects so I'm going to have segment
65:27 - objects that almost as if they're
65:28 - connected with a joint now by the way
65:30 - you could probably do a lot of this
65:32 - using a physics engine like box 2D and a
65:34 - revolute joint which I have other videos
65:36 - about but I'm going to do this without a
65:38 - physics engine just kind of with the
65:40 - raw trigonometry math that we need so
65:43 - the idea here is that I have a segment
65:45 - and every segment would have a a a kind
65:48 - of starting point a we'll call this
65:50 - point a which is an XY point it also has
65:53 - an end point which I'll call B which is
65:55 - also an XY and one of the crucial pieces
65:58 - of data that I'm going to need is this
66:00 - angle so first all I want to do is
66:03 - create one segment with an angle change
66:06 - the an angle and a length sorry what key
66:09 - the distance between these two points is
66:11 - the arm's length the segment's length so
66:13 - I want to just create one segment with A
66:17 - and B points and an angle and I want to
66:19 - be able to turn it let's just do that to
66:22 - start so so to do that I'm going to get
66:25 - out of this example here I'm going to
66:28 - create a new
66:29 - tab and I'm going to call it segment I
66:32 - could probably think of something better
66:33 - but segment I think is a good and
66:35 - actually that's probably from Keith
66:37 - Peter's example I'm sure that
66:38 - nomenclature is used there so I'm going
66:40 - make a segment class and what did I say
66:42 - each segment needs it
66:45 - needs a be a start point an A A I'm
66:48 - going to use a p Vector object to store
66:49 - an X and Y for that
66:51 - point it needs a b I'm going to use use
66:54 - uh that's its end point it needs a
66:57 - length which is the distance between
66:58 - those two points and it needs a angle
67:02 - which is the angle now here's the thing
67:04 - now what I'm
67:05 - realizing if I go back to this drawing
67:08 - is really the information is a length
67:11 - and angle B is a point that I calculate
67:13 - based on how that angle is changing and
67:15 - this relates exactly to this idea of
67:17 - polar and cartisian coordinates and I
67:19 - just made a separate video about that if
67:21 - the what polar cartisian coordinates are
67:24 - I would uh you find the link to that
67:25 - video in this video's description but
67:27 - the short version of that is if I have a
67:30 - point here and I have an angle and I
67:33 - have a a distance a length a radius from
67:36 - here to here I can get this point by by
67:39 - by saying R cosine of theta R * cosine
67:42 - of theta and R * sin of theta will give
67:46 - me the uh the the how far to move along
67:49 - the xaxis and how to far move along the
67:51 - y axis to get to here so those formulas
67:53 - I derive and explain expl them more in a
67:54 - separate video that you could look at
67:56 - okay so if I come over here what I'm
67:59 - going to do now is say okay what when I
68:01 - create the segment what does it need
68:04 - well it can get an X and A Y like where
68:06 - is it and it can get a
68:09 - length and so I'm using just different
68:12 - variable names for the parameters that
68:14 - get passed in and it can get an initial
68:19 - angle so what I'm going to do now is I'm
68:21 - going to say a equals a new P vector at
68:25 - XY length equals whatever length we
68:29 - specify and uh the angle equals whatever
68:33 - angle we specify that's pretty good and
68:36 - then what I can do next is let me just
68:39 - write a function called show where I'm
68:42 - going to draw it as a I'm going to say
68:44 - stroke 255 stroke weight two or four and
68:49 - then I'm going to say line
68:52 - from from from a.x a.y to
68:56 - b.x b.y okay so now the idea here is
69:00 - that I can say something
69:03 - like segment seg for Segment uh seg
69:09 - segment is a
69:10 - new segment and maybe I'll have it uh
69:14 - start on the left hand side of the
69:16 - screen and point to the right so it's
69:18 - going to be at something like 10 comma
69:20 - 200 with a length of 50 and an angle of
69:22 - zero and then I want to say segment.
69:25 - show so now I have this idea of a
69:27 - segment it starts at you know if I if
69:32 - this is my canvas it starts right here
69:34 - at like 10 comma 200 it has an angle of
69:37 - zero and a length of I don't remember I
69:39 - said 100 so I should see something like
69:41 - this on the screen now I've missed a key
69:43 - step here I missed it on purpose but
69:45 - let's let's just see uh what happens
69:47 - that of
69:48 - background and now let's run this okay I
69:51 - got an error I got a null pointer except
69:53 - ception so what does no pointer
69:55 - exception mean by the way no pointer
69:56 - exception means you're trying to use
69:59 - something whose value is actually null
70:01 - and so you can't use it the value is
70:03 - null
70:04 - nothing sadness void sad nullness let's
70:08 - let's get it out of being null and the
70:11 - thing that's null is not a a is a vector
70:14 - B was never calculated so like I said B
70:17 - is a thing that you calculate based on
70:18 - where a is what the angle is and what
70:21 - that length is so I'm going to write aun
70:23 - function I think I'm going to write a
70:24 - function called uh calculate I don't
70:28 - know this's probably a better name for
70:29 - this calculate
70:30 - B update and something like that so I'm
70:33 - going to do that calculate B and so how
70:36 - do I do this now I could do that math
70:39 - all I need to do is say hey DX the
70:41 - change in X is the length times cosine
70:45 - of the
70:46 - angle and the change in y is the length
70:50 - times s of the angle and then
70:54 - uh B is a new P Vector which is X Plus
70:59 - DX y +
71:01 - Dy so I now have uh oh no sorry
71:05 - a.x a a.y so I now just calculate what
71:10 - is the change along X and Y from a based
71:13 - on the length and the angle and then
71:14 - give me that new P vector and if I say
71:18 - now in setup in the in the Constructor
71:21 - calculate
71:22 - B we now see there it is there's that
71:25 - segment with an angle of zero now let's
71:27 - let's see if this is really working um
71:30 - let's change the angle to U and I need
71:32 - to work with a unit of measurement
71:34 - called radians so if I um if I just want
71:36 - it to be 45 degrees or negative 45
71:38 - degrees convert it to radians um now you
71:41 - can see now it's pointing upward so we
71:42 - got the idea this is working I have one
71:46 - segment
71:48 - yay now okay so what's the next step
71:52 - here I need a break I'm going to keep
71:54 - going okay what's the next step here
71:56 - there's there's a few different things
71:58 - one is maybe we should see maybe we
71:59 - should make that angle change um so I'm
72:02 - going to write uh a function called I'm
72:05 - going to say in
72:08 - draw I'm going to say
72:10 - uh uh let's let's let's leave that to
72:12 - later actually I was thinking like we
72:13 - would use pearing noise to make the
72:15 - angle change or just have it turn around
72:17 - that type of thing um but I do kind of
72:19 - want to move it a little bit over and
72:21 - maybe make it a little bit longer so
72:22 - let's do that
72:24 - okay so now what I need to do is I need
72:26 - another segment I need another segment
72:29 - that connects to that
72:32 - segment I think about this do I want to
72:34 - introd I I'm probably going to need an
72:37 - array but I also need the segments to
72:40 - have an awareness of which one they're
72:43 - connected to so actually first let's add
72:45 - something the segments need to know the
72:47 - segments are going to need to know who
72:48 - they're connected to and I'm going to
72:50 - call that a
72:51 - parent so this particular segment oh I
72:53 - got a great idea this particular segment
72:56 - that I made has no
72:57 - parent the parent is
73:01 - null but I'm going to make a new segment
73:04 - that's connected to this one like I want
73:05 - to say
73:08 - segment segment two I really want an
73:11 - array but I'm going to do it this way
73:13 - just for a
73:15 - second I going to say segment two is a
73:19 - new segment and I'm not going to give it
73:21 - a position
73:24 - I'm just going to give it a
73:27 - parent right I want to be able to say I
73:30 - sometimes want to make a segment at this
73:31 - exact location but I sometimes just want
73:33 - to make a segment that's connected to
73:35 - another segment so they have two
73:37 - different ways of making a segment and
73:38 - guess what in Java which processing is
73:41 - you can have two different Constructors
73:43 - and you could just write both of them so
73:45 - this second Constructor is going to be
73:47 - just like the first
73:50 - one but instead of taking an XY a length
73:54 - and an angle it's going to take another
73:57 - segment I'm going to call that app
74:00 - parent and a length in an angle so its a
74:04 - position is actually so first of all its
74:06 - parent is not
74:08 - null its parent is equal to its actual
74:12 - parent right the one that was assigned
74:15 - and its location where it is is
74:19 - what this segment location a is at the
74:23 - exact location where this segment's
74:25 - location B is so all I need to do is say
74:29 - it's location a should be at parent.
74:35 - b.x parent.
74:38 - b.y okay so that's another way and then
74:41 - the rest is the same length angle
74:43 - calculate B okay so this I think is good
74:48 - and now I'm going to say segment
74:52 - two
74:53 - segment two
74:58 - show hey look at that and its angle is
75:00 - also 45 well let's give it a different
75:03 - angle just so we can see uh let's give
75:05 - it an angle of zero we see there's are
75:08 - two segments now here's the thing I
75:11 - haven't really connected these things
75:14 - like one of the things I want to do is I
75:17 - would like the um what if I just wanted
75:19 - them to spin so what if I put them more
75:21 - in what if I put them in the center
75:24 - and so that's that should be in the
75:26 - center and I'm just going to say I'm
75:28 - going to write a function called like
75:33 - update where I say angle equals angle
75:38 - plus
75:39 - 0.01 just so it rotates kind of slowly
75:43 - and I'm going to say segment one
75:49 - update is that too slow oh Al so one
75:52 - other the thing is it's doing it the
75:53 - angle's changing but guess what whenever
75:55 - the angle change I need to recalculate
75:57 - the end point I don't see anything
75:59 - because I haven't updated I haven't
76:01 - calculated B so anytime I changed the
76:04 - angle I need to recalculate its end
76:07 - point so the angle changes recalculate
76:08 - its end point now let's run this
76:11 - again there we go ah but that other one
76:14 - is not moving it's not connected to it
76:16 - that's no good right I need to say that
76:20 - uh I need to say basically like if I
76:23 - have a parent when I update myself if I
76:26 - have a parent or parent is not equal to
76:30 - null then what I want to do is
76:34 - um and um then what I want to do if
76:38 - parent is not equal to null sorry I'm
76:40 - like thinking about this what I want to
76:41 - do is get my
76:45 - angle well okay a couple things first I
76:47 - need to set a my point a is equal to uh
76:53 - parent. b. copy so that's by the way
76:56 - another way I did this here I um I just
77:00 - made a new Vector from parent. B so
77:02 - another way I could do this actually
77:03 - that's a little bit more less code to
77:05 - write is I could say parent. b. copy
77:07 - which just makes copy is a function
77:08 - that's part of the P Vector object that
77:11 - uh copies it so I could always uh update
77:14 - by uh making um saying that and
77:18 - then I can now now I need to update both
77:22 - of these
77:26 - so now we can see that they are both
77:30 - that that is connected so as one turns
77:32 - the other one is connected so this is
77:35 - really uh forward kinematics yeah I
77:37 - could do someone in the chat is saying I
77:38 - could say child not parent and that's
77:41 - actually a very good point but you know
77:44 - I I just thought of it that way probably
77:46 - because I somebody else implemented it
77:48 - that way so that you know that would
77:49 - that might be a good Improvement maybe
77:51 - I'll double back and kind of see if
77:52 - that's a good refactoring but I
77:53 - encourage you to try that as your own
77:55 - exercise to use uh to to create a child
77:58 - rather than a parent um and so now what
78:01 - I should be able to do by the
78:03 - way um
78:05 - is yeah because when I iterate over them
78:09 - I guess I could start at the last one
78:11 - but if I had child I could iterate
78:12 - forward through them so now you caught
78:15 - me but I'm going to keep going with the
78:16 - way that I'm thinking about it and let's
78:18 - see if I have some time at the end I'll
78:19 - refactor it I wonder if I should
78:21 - refactor now time out
78:23 - thinking about
78:27 - this um you guys I that's why sometimes
78:30 - it's great for me to look at the chat
78:31 - and sometimes it's kind of
78:35 - problematic I'm trying to think of
78:37 - changing it to
78:39 - child is better I like the idea of being
78:42 - able to pass in the one that it's being
78:44 - made from though I think I'm going to
78:47 - keep it for now because the next thing
78:49 - that I want to do one thing I'm
78:50 - wondering about is why is this second
78:54 - one oh it's spinning oh it's uh yeah
78:57 - it's actually okay okay you know what I
79:00 - created something accidentally that's
79:04 - working okay I'm coming back
79:10 - in okay I'm actually going to keep the
79:13 - parent thing but I I think this idea of
79:15 - having child references versus parent
79:17 - references is something that is
79:18 - worthwhile considering here's the thing
79:20 - though I just realized this is kind of
79:22 - working in a way that it's supposed to
79:24 - by accident and so one thing I want to
79:26 - do is I'm going to I want to segment out
79:31 - this idea of it Ro of the angle changing
79:33 - from it updating based on its
79:36 - parent so I'm going to just do um I'm
79:40 - going to write another function I'm
79:41 - going to call it like wiggle or
79:42 - something or I don't know like yeah
79:44 - let's just call it wiggle because
79:45 - eventually I'm going to have the arms
79:46 - wiggling
79:48 - maybe and so that's that's where the
79:51 - angle changes
79:53 - and
79:55 - then I want I'm going to call update
79:58 - separately so because I want to show you
80:00 - what's really going on here because what
80:02 - happens if I
80:04 - only wiggle segment one and it's not
80:08 - wiggling it's turning you can see that
80:10 - it's actually that segment is always
80:13 - keeping it it's not it's not it's not
80:16 - moving along with it realistically it's
80:17 - always keeping its original angle
80:19 - pointing to the right so one of the
80:21 - things when you up update in forward
80:24 - kinematics as I'm moving forward from
80:27 - arm to AR from segment to segment to
80:29 - segment I always need to bring the
80:32 - parents angle along with me or pass the
80:35 - angle from the parent to the child so
80:37 - that happened accidentally because I was
80:39 - rotating both of them equally but once
80:41 - they're rotating in different ways that
80:42 - won't work anymore so what I want to do
80:45 - here in addition to a up update just
80:49 - pulling in the parents location I also
80:52 - want to take my
80:54 - angle and offset it by the
80:57 - parents um the parents
81:00 - angle is that enough is that all I want
81:03 - to do let's take a look at
81:05 - that no oh that's kind of interesting
81:08 - though
81:13 - um hold on I have to think about
81:17 - this what did I do wrong I don't want to
81:19 - I don't want to oh I just need to start
81:21 - it at that angle
81:25 - or
81:27 - by that should work right wait wait what
81:30 - wait what did I do
81:35 - wrong it's angle what did I do wrong
81:37 - here it's kind of Interest I just want
81:41 - to oh because it's plus
81:44 - equal equal to the parent
81:48 - angle
81:50 - no plus its own
81:53 - angle equal to its parent angle plus
81:56 - itself which is this
81:59 - problem I cannot keep summing yeah I
82:01 - have to start over each time oh I have
82:03 - to keep track of them
82:05 - separately right yeah
82:13 - yeah I like how people sorry I shouldn't
82:15 - look at the chat people are very unhappy
82:17 - with the fact that I don't know what I'm
82:18 - doing which is the point you
82:20 - know yeah is kind of a it is something
82:24 - that happens here in my life okay a lot
82:26 - okay I cannot keep summing so hold
82:30 - on so let me go back to what I had there
82:33 - plus equal parent.
82:37 - angle so this is this is way off as you
82:41 - can see because I'm accumulating all the
82:43 - time I want to pass off the parents
82:45 - angle but just as an offset to whatever
82:47 - its own angle is actually doing so in a
82:50 - way I kind of need two variables here
82:52 - which is um I need it to do its own
82:56 - thing and then always just add so I need
82:59 - to calculate its own angle based on some
83:02 - something that it's
83:03 - doing which ironically I think if I um
83:08 - and then add so if I just said angle
83:10 - equal if I just start with angle equals
83:13 - zero and then add the parents
83:18 - angle oh I think the I think the issue
83:21 - is actually that um I I do need two you
83:25 - the issue is actually that I'm going
83:27 - this rotating the arm thing is sort of
83:29 - not
83:30 - that necessary because I'm going to
83:33 - calculate things in a different way but
83:34 - I do need two variables self angle and
83:36 - parent angle yeah so what I need is uh
83:40 - yeah yeah yeah yeah yeah yeah okay okay
83:41 - okay okay I need its actual angle and
83:44 - then I think what I'm going to do is I'm
83:45 - going to say a self angle I'm going to
83:47 - create a variable called self angle
83:49 - that's a good suggestion self angle and
83:53 - I'm going to and I'm sure there's an
83:55 - easier there's a there's probably a
83:56 - condensed way of writing it but just the
83:57 - way that I've created this example I'm
83:59 - going to have self angle start at that
84:01 - same
84:02 - angle and then angle is
84:09 - always uh self angle is the thing that I
84:13 - might have some algorithm to change
84:17 - it and the angle itself is always um
84:25 - um so uh what I'm going to do is angle
84:28 - equals self angle right everything
84:31 - that's updating takes its own current
84:33 - angle as itself and then adds on there
84:36 - we go adds on the parents angle I think
84:39 - this is going to work there we go so now
84:41 - uh and so let me see what do I have here
84:43 - what are the oh because the the angle is
84:51 - zero
84:55 - so the angle is zero and this is exactly
84:57 - what I want it's zero relative to
84:59 - whatever its parent is and now if I
85:01 - actually gave it instead of you know
85:03 - also - 45 degrees we can see now it's
85:06 - moving this way there we go this is what
85:08 - I want so this this angle turns what the
85:13 - the the parent angle turns and the other
85:15 - angle updates whatever its own angle is
85:17 - relative to the parent so they can each
85:19 - have independ independent calculations
85:21 - for calcul their own angle so now what
85:25 - can I can start to do some interesting
85:26 - stuff here so for example I can say SE
85:29 - 2.
85:32 - wiggle and that one is going to rotate
85:36 - itself along so it's rotating relative
85:38 - to the other one now I don't really
85:39 - necessarily have something that
85:40 - interesting here they're both just
85:42 - rotating and this is weirdly very
85:44 - similar to my solar system example where
85:46 - one thing's rotating around one thing
85:48 - and another thing's rotating on another
85:49 - thing but I think we're going to get
85:50 - something much more interesting if if we
85:52 - use a sine wave to rotate them or pear
85:54 - in noise let's try using pear in
85:57 - noise so I'm going to add uh I'm going
86:00 - to add a a variable called X offset
86:03 - which is just going to be some random
86:05 - value and I encourage you to go back and
86:06 - look at some of my pear and noise
86:07 - tutorials um if pearly noise is a smooth
86:10 - Randomness and then in wiggle I'm going
86:14 - to say self
86:16 - angle equals the noise function I'm
86:19 - going to map noise of x offset which has
86:23 - a range between 0 and 1 to like between
86:26 - - 1 and 1 and those are some arbitrary
86:28 - angles in radians and then I'm going to
86:30 - increase X offset over time so now O
86:34 - Okay so that's too
86:37 - fast but we can see here now I have this
86:40 - kind of arbitrary moving almost like
86:42 - wiggling tentacle like thing
86:45 - so is the stream out did it freeze
86:49 - everyone's saying it's frozen but I see
86:51 - it's still working
86:55 - hold on I'm
86:57 - pausing I was offline for 30 seconds I
86:59 - can't explain why well you know
87:02 - what I want to double check something
87:05 - I'm on the NYU WiFi
87:09 - h i I have this plugged into the let me
87:11 - make sure it's plugged into
87:14 - the ethernet
87:17 - Network it is I want to turn WiFi off
87:23 - um but I'm afraid that's going to break
87:25 - something I'm going to turn Wi-Fi off I
87:27 - have a feeling that sometimes causes a
87:29 - problem that it might break it again
87:31 - let's
87:33 - see I think I'm still here hopefully I'm
87:35 - still here people tell me if I'm still
87:37 - here uh
87:49 - okay let me press these buttons
87:57 - it's very disconcerting um stream is
87:59 - better now yeah you know what I forgot
88:01 - to turn the Wi-Fi off and because the
88:03 - whole point of this is I have a really
88:05 - good fast hard Network here and um I
88:08 - think when it's connected to both it
88:09 - probably also uses the Wi-Fi um okay so
88:13 - I'm back with this wiggling tentacle
88:14 - thing which I'm going to improve on in a
88:15 - second um okay okay here we go let's
88:19 - keep moving on here okay
88:24 - so now I have this wiggling tentacle and
88:25 - I'm kind of mostly done with this idea
88:27 - of forward kinematics but I want to
88:29 - improve on this a little bit so at very
88:31 - least this is not a great this is not a
88:34 - very sustainable uh path so what I want
88:37 - to do is either create an array or some
88:40 - other mechanism um and actually I think
88:42 - I'm going to try doing this without an
88:44 - array so I'm going to and I'm going to
88:47 - use kind of a concept called a linked
88:48 - list where every object is just linked
88:50 - to another object and I can can iterate
88:52 - through them that way so I'm going to
88:54 - create uh something called a tentacle
88:56 - I'm going to make my variable called
88:57 - tentacle and
89:00 - tentacle is a new
89:03 - segment um uh tentacle is a new segment
89:06 - that's that starts at 300 200 with a
89:09 - length of 100 and radians of
89:11 - -45 so now what I'm going to do is I'm
89:15 - going to say 4 in I equal 0 I is less
89:18 - than two I'm just going to add two
89:20 - segments to it
89:23 - um
89:25 - segment next okay so hold on what I want
89:28 - I
89:29 - want uh I want to say something like
89:33 - oops say oops hold
89:37 - on I want to say something like segment
89:40 - current equals
89:43 - tentacle okay then segment next equals a
89:47 - new
89:50 - segment whose parent is the current
89:55 - one and then the same thing length 100
89:59 - let's just do angle zero and we're going
90:02 - to start this with an angle of zero too
90:04 - there's no reason to um to have that
90:06 - anymore okay so and um so the next
90:09 - segment is a new segment attached to the
90:11 - current segment current being the
90:14 - tentacle which is kind of like the root
90:16 - and I could call this root if we were
90:17 - thinking about of a tree and then I can
90:20 - say current equals next so what this
90:23 - will do is say I have a segment attach
90:26 - the new one to that then make that the
90:29 - current segment so the new one attaches
90:30 - to that so I think this algorithm should
90:32 - work and I should be able to just say
90:35 - now I could just
90:37 - say tentacle
90:40 - wiggle tentacle
90:43 - update tentacle show what this should do
90:47 - is if I run this it's working but I'm
90:49 - only seeing that root one the root
90:52 - segment I don't see the one that's
90:54 - attached to it so what I can do now is I
90:56 - can say segment current I can use the
91:00 - same thing equals I'm just call it next
91:02 - actually because I just for this loop I
91:04 - can say segment next equals
91:07 - tentacle while next is not equal to
91:12 - null then I can wiggle update and show
91:16 - it and then I can
91:19 - say um I can wiggle update and show it
91:22 - and then I can say next equals next dot
91:25 - oh wait I have to go
91:26 - backwards ah this is why people were
91:28 - telling me to
91:30 - use parent child so how can I um so
91:35 - let's add
91:36 - child I'm going to have both let's add
91:39 - and you probably don't need both but I'm
91:41 - going to add a child reference as well
91:43 - so this is like a is that called double
91:44 - link list where they're linked forward
91:46 - and backwards so um what I'm going to do
91:51 - here is when I'm creating
91:53 - them next is the new segment and then
91:58 - current. child equals next so I'm also
92:03 - going to link it that way um and that
92:06 - way now as I iterate through them I
92:08 - could say next equals next. child so I
92:10 - did this in a little bit awkward way
92:11 - maybe um so in other words okay uh this
92:14 - is hard to keep in your head but let me
92:15 - try to say it
92:17 - again I'm starting with and and actually
92:20 - it might make sense if I diagram this
92:22 - but I'm starting with the the root not
92:26 - the root segment the first one I make a
92:28 - new one that's attached to it and its
92:30 - parent gets that current one and the
92:32 - current one's child is the next one so
92:34 - they're both linked to each other and
92:36 - then current becomes this so that when I
92:37 - link the new one I link them with the
92:39 - same parent child relationship so that I
92:41 - think should work and now I can iterate
92:43 - them I start with the root and I wiggle
92:46 - and update and wiggle and update going
92:47 - from um iterating through and eventually
92:50 - one of them will not have a
92:52 - child right because it um next next will
92:56 - be null so I should I should say just
92:58 - here by default it's
93:02 - null because at some point we'll get to
93:06 - the end at some point in this Loop will
93:08 - get to the end and then it won't come
93:10 - back in so the last one won't have that
93:12 - child so as long as as long as it's null
93:14 - okay so this should work yeah there's
93:16 - all three of them okay all three of them
93:19 - wiggling with their weird pearing noise
93:21 - thing so let's make this a little bit
93:22 - more interesting um let me think about
93:25 - let me I kind of want it to feel more
93:26 - like a tentacle from the bottom so I'm
93:29 - going to give its initial
93:31 - location uh width divided by two and the
93:34 - height so at least it's kind of starting
93:36 - from the bottom there but now I need to
93:38 - think about how that range of angle so
93:41 - the range of angle should actually be
93:44 - between um around around 90° right
93:49 - because that's pointing up so I want to
93:51 - offset that so the the what I'm mapping
93:53 - to is like whoops uh the max angle is
93:58 - something like piun / 2 plus you know
94:04 - 1 and the Min
94:07 - angle is Pi / 2 minus one so I want to
94:11 - map the noise to Max angle Min angle I
94:16 - have a feeling like a sine wave might
94:18 - actually work better than this um and
94:20 - now we can see okay we can see what it's
94:22 - doing now it it's got a pretty broad set
94:25 - of possibilities in terms of its angle
94:27 - so let's make
94:29 - this uh let's make this like quite a bit
94:31 - smaller oh wait why does it what did I
94:34 - do wrong here oh
94:36 - because they're picking up from wait a
94:41 - sec oh I don't want them ah I only want
94:44 - the first one pointing up the rest are
94:47 - all relative to the ones
94:49 - below aha
94:52 - I don't know why I decided I had to do
94:53 - this
94:54 - like kinematics thing so let's actually
94:57 - leave it
94:59 - at
95:02 - 0.1 negative point1 and I'm just going
95:04 - to do something kind of like hacky which
95:06 - is to say um if it doesn't have a parent
95:11 - uh if it if it doesn't have a
95:14 - parent I just want it to point up
95:17 - because I want the whole thing to point
95:18 - up I'm going to say angle uh plus equal
95:22 - / 2 all right um so that should yeah so
95:26 - that has that just has the first one
95:29 - pointing up but the rest pointing to the
95:30 - left and the right okay so that was a
95:32 - quick little fix and now I can make this
95:35 - um much much bigger of a
95:38 - range and the other thing that I really
95:40 - wanted to do here is I can make a lot
95:42 - more of these so let's make 20 of them
95:45 - and let's just make the segments like 10
95:47 - pixels
95:48 - long and so now we have this wiggling
95:50 - tentacle like thing with pearing noise I
95:53 - don't know what it's going to do I kind
95:55 - of want the range to be bigger uh you
95:57 - know this is the kind of thing that it
95:58 - can play with forever so let's make the
96:00 - range uh bigger and let's maybe have the
96:04 - offset oh you know what would be
96:05 - interesting to do here I have a weird
96:08 - idea which is to um have the offset move
96:12 - a little faster yeah so we can see this
96:15 - now I don't know what this is this crazy
96:17 - creepy AR why is the first one did I
96:19 - make the first one is still has still
96:21 - have um 100 ah so let's make this one 10
96:25 - right so we can see here's my crazy
96:26 - creepy tentacle arm thing that I don't
96:28 - know what's trying to do but there you
96:31 - go that's forward kinematics let's
96:32 - change it to a sine wave just to see
96:34 - what we get so instead of using uh
96:36 - pearlin noise I'm going to map a sign
96:41 - between Max angle and Min angle let's
96:43 - try that whoa okay and that's like way
96:46 - too
96:47 - much so let's give that much smaller
96:49 - angle so we can see now now oh and
96:51 - they're all starting so actually what I
96:54 - Want U this is I'm getting ridiculous
96:56 - here but let's all start them with this
96:59 - yeah so this actually if I give them a
97:01 - perfect sine wave it's just going to
97:03 - curl onto itself but if those sine waves
97:07 - are slightly offset from each other I'm
97:09 - kind of I'm off the rails here the train
97:11 - is derailed for sure but let's let's
97:14 - let's make this a little bit more
97:16 - interesting what I really want to do is
97:18 - add this as a parameter to the segments
97:22 - so I don't want to just have them all be
97:24 - zero or all be random let me show you
97:25 - what I mean I want that X offset which
97:28 - I'm using essentially um I think in the
97:30 - coding math YouTube channel I know that
97:32 - he used used a variable called phase
97:34 - which is kind of what I don't know if
97:36 - that's right though but it's like it's
97:37 - the thing that you're passing into s or
97:39 - cosine I often think of it as time so
97:41 - let me use let me use a t for time and
97:44 - I'm going to add another argument
97:46 - here and I'm going to set T I'm going to
97:49 - do this T equals T and I could I could
97:52 - really improve the way that these
97:54 - Constructors are uh are I could combine
97:57 - the constructors in a in a probably in a
98:00 - in a better way but so let me just let
98:03 - me just add the last argument
98:05 - here we now each of these each of the
98:08 - the segment always gets its time the the
98:11 - the thing that you're passing into sign
98:13 - or noise or whatever to set the angle
98:15 - and um what I'm going to do is I um just
98:20 - pass in zero here let's pass in zero for
98:22 - all of them and we should have the same
98:24 - exact thing uh and oh except for I want
98:26 - to call this T now and T moves up by a
98:29 - certain amount okay so now you can see
98:31 - this is what happens when I have the
98:32 - sine wave there we go people in the chat
98:36 - are asking what's his goal I have no
98:38 - idea this is by the way a way to think
98:41 - about creative coding this is this is
98:43 - stream of Consciousness improvisational
98:46 - I don't know where I'm going I'm just
98:47 - playing around and I I really should
98:49 - stop soon though so okay cuz I'm I'm
98:50 - kind of off in the weeds here but I I I
98:52 - think there's an interesting aspect here
98:54 - that I could do so now everything starts
98:57 - at zero but what if the
98:59 - phase we can use the word phase here
99:01 - maybe or or I can just say t actually T
99:04 - equals zero T goes here and then in this
99:07 - loop I say t plus equals
99:10 - 0 uh 1 so what if they're all just
99:13 - slightly off phase from each
99:16 - other now you can see I'm getting a sort
99:19 - of more uh a a a bit of a different kind
99:23 - of quality to this now it's very much of
99:26 - an exact repeating pattern so I think if
99:29 - I also changed you know not only the
99:33 - period of these oscillations but the um
99:36 - um not sorry not only offset the uh
99:39 - where they are in terms of their
99:41 - oscillation but change their period um
99:44 - which is or frequency so that's that's
99:48 - this variable here okay I got to stop
99:50 - now and I'm I'm going to let uh I'm
99:52 - going to let you guys play with these
99:53 - ideas but I would I have a suspicion
99:55 - that if you mess around oh you know what
99:57 - look what I did sign has a range I was
100:00 - using the range of output from the noise
100:02 - function which is absolutely not correct
100:05 - the sign function has a range between
100:07 - negative one and one so that's why by
100:09 - the way it was going um so oh I think
100:12 - I'm getting close to this swimming fish
100:14 - kind of quality too as well so um I kind
100:17 - of want to put the plin noise back in
100:19 - also now that I have this idea of them
100:20 - being slightly offset from each other so
100:22 - let's put
100:25 - noise and we can see we can see I kind
100:28 - of got this uh also this wiggling
100:30 - quality to them to it and I I kind of
100:32 - want to make the range a bit
100:34 - wider uh to see what the sort of
100:36 - possibilities are so you can see I think
100:39 - that you will probably come up with a
100:40 - more creative way to make use of this
100:43 - forward kinematics idea um and you know
100:46 - it' be really interesting to now put an
100:48 - array of all of these across the bottom
100:50 - or you know map them to the O this would
100:52 - be great make you could make a creature
100:54 - like a circular creature that has all
100:55 - these tentacles uh uh attached to the
100:57 - edges of it and it kind of Wiggles along
101:00 - like a centipede um try to make uh Nuno
101:03 - in the chat is saying try to make the
101:04 - segments go shorter as they reach the
101:06 - tip and that's certainly an interesting
101:07 - idea let's try adding that really
101:08 - quickly so right now the segments are
101:10 - all so I could do something like float
101:12 - length equals 50 and start uh with that
101:15 - here and then I could also shrink the
101:18 - length so I could say like length equals
101:21 - itself
101:22 - times 0.9 so they're like 10% shorter
101:26 - each time okay let's make them half as
101:28 - long each time so you can let's make
101:31 - them 75% as long each time so um you
101:34 - know I'm not making it obvious to see
101:36 - how that is because I'm not drawing I
101:38 - could make them different colors but you
101:39 - can see there's a lot of variables you
101:40 - could play with here so I hope that you
101:42 - enjoyed this forward kinematics coding
101:45 - Challenge and in the next video what I'm
101:46 - going to do is do the reverse of this
101:48 - where I actually am starting where I
101:49 - want the end to be and and how does the
101:51 - rest of it behave okay um thanks for
101:54 - watching and see you in a future
101:57 - video okay uh if you ever Implement your
102:00 - overthe camera monitor maybe also look
102:02 - into adding some kind of green red LED
102:04 - stream status light I don't understand
102:07 - what that means um zeit in the chat um
102:10 - so those of you who are worried about um
102:13 - that that a a part of this might have
102:15 - gotten lost I am recording everything
102:17 - I'm doing to disk so when I make an
102:19 - edited version of this ch challenge or
102:21 - when Mata who does the editing makes an
102:23 - edited version of this challenge
102:24 - anything that might have gotten lost
102:26 - over the airwaves will get um picked
102:29 - up um all right so um I'm trying to stay
102:35 - hydrated uh
102:38 - okay you can't see so some people in the
102:41 - chat are saying I can't see the whole
102:42 - code I can't follow this is going to get
102:45 - published on my GitHub repository uh as
102:48 - I release the edited versions of these
102:50 - videos also make sure to upload the code
102:52 - and in addition even though this is in
102:54 - processing I usually try to uh make a
102:58 - JavaScript version so I have a Java
102:59 - version which is in processing and a
103:01 - JavaScript version as well okay Max
103:04 - angle and Min angle are reversed in
103:10 - map let me check about that oh yeah they
103:13 - are I don't know why I did
103:15 - that I mean it doesn't really matter
103:18 - because the map function will work
103:19 - anyway so it just goes the opposite
103:22 - direction uh what if I I just want to
103:24 - say s t plus noise of T and the range of
103:29 - that would be like negative 1.5 to
103:33 - 1.5 so here we've got like
103:36 - sign with some
103:39 - noise and I'm just like messing around
103:42 - with this while I uh and then uh yeah so
103:48 - anyway you guys will be more creative
103:49 - with what you do with this let me put it
103:55 - back rainbow tentacles
103:59 - okay so that's forward kinematics oh
104:02 - negative 1 to two oh you're right
104:04 - negative 1 to two no wonder that didn't
104:06 - work thank
104:07 - you okay um all right so do I have time
104:11 - it is
104:13 - 12:20 I would like to do the inverse
104:18 - kinematics um Doan in the chat asks can
104:20 - you teach us how to upload code to
104:22 - GitHub and generally how to use it to
104:24 - organize our code well uh I
104:29 - um I will let you know that I have a
104:32 - whole playlist of git and GitHub
104:33 - tutorial videos so I would encourage you
104:35 - to check those out first and I'm sure I
104:37 - didn't finish that playlist I'm sure
104:38 - there are missing pieces so I need to
104:40 - return to that and update some stuff
104:42 - okay do can I manage the energy to do
104:45 - inverse
104:47 - kinematics and I'm going to build it
104:49 - again from scratch
104:52 - because it kind of works pretty I feel
104:56 - like it's going to be easier to do that
104:57 - than adjust
104:59 - this so inverse kinematics also you
105:03 - don't necessar have to watch both videos
105:05 - so actually why am I doing this so let
105:06 - me make a new
105:08 - sketch save as inverse
105:13 - kinematics and what I want to do let me
105:16 - just go back to this
105:18 - one and um
105:21 - me
105:22 - just save another version of it real
105:25 - quick that has just some simpler
105:30 - stuff and the length being much
105:37 - longer uh so let's
105:41 - see and uh what I want is for them to be
105:45 - uh let me do this
105:48 - also I just want to I'm just going back
105:50 - back to a simpler
105:52 - time just to have a visual
105:55 - demonstration I want to make these much
105:56 - more
105:58 - extreme okay oh boy and I want to make
106:00 - this go much
106:04 - slower uh and even slower
106:10 - probably and let's make this even more
106:14 - extreme
106:17 - okay um all right so I'm going to um
106:22 - I'm going to use this as a visual
106:24 - reference in my next
106:28 - video let me press some buttons here so
106:32 - I think this is the last thing that I'm
106:33 - going to do this morning and then I'm
106:36 - going to
106:38 - um figure out a whole new way of doing
106:41 - sound in this
106:42 - room I have a kind of an idea for that
106:45 - actually
106:47 - um and come
106:49 - back
106:55 - okay uh all right let's see
106:58 - here um add colors or I'm leaving really
107:03 - that's all it takes for you to leave if
107:04 - I don't add the colors uh so adding the
107:07 - colors is actually kind of an easy thing
107:08 - to I always say that color uh C and
107:12 - let's make
107:14 - um uh C equals a new color based on um
107:19 - let's just make it random
107:21 - that's the worst thing to
107:23 - do you know what I should do ah see you
107:25 - got me no I can't add that you know what
107:27 - I should really do is change the stroke
107:29 - weight so uh one thing that would
107:32 - actually be a more useful thing to do is
107:33 - just pass in I now you guys have caught
107:36 - me I'm off doing things that aren't in
107:38 - my video tutorial there is no I this
107:41 - gets zero pass in I and then if they get
107:46 - um I really don't like how I have this
107:48 - organized they get kind of their own
107:51 - index value into the
107:52 - array so what I can do is I can do
107:55 - things like stroke weight uh you know 10
107:59 - - I * 2 or
108:01 - something oh there
108:04 - um so so uh if I have like a stroke
108:09 - weight equals one and then I say
108:11 - something like the stroke weight equals
108:14 - 10 - I * 2 index what is it
108:19 - index
108:21 - and do the same oh I hate this duplicate
108:22 - code g to make an improved version of
108:25 - this and you just do videos just about
108:27 - refactoring and then I can say stroke
108:29 - weight stroke weight and now what you'll
108:31 - see is there you go oh that's really
108:33 - kind of nice actually I should put that
108:35 - in my
108:36 - video I'll do it in the next one um
108:39 - don't add colors or I'm leaving but this
108:41 - was worth adding how about make it 3D
108:43 - really quickly that I'm not going to do
108:44 - right now uh okay um okay this is a
108:47 - little bonus all right actually you know
108:50 - what I'm going to do this on the at the
108:53 - yeah never mind I'll just mention it in
108:54 - the top of my next video okay
108:58 - um okay so am I ready for
109:01 - this need a new
109:03 - sketch I'm going to call this one
109:08 - inverse
109:12 - kinematics oh do I already have one did
109:14 - I do that
109:17 - already I'll replace it anyway let's
109:19 - replace place it craziness oh no no I'm
109:22 - in the wrong place desktop where am I oh
109:25 - that's weird oh there's like an example
109:27 - in the what's in that oh I I did make
109:30 - one already I'm so confused I'm putting
109:32 - these in hold on file open
109:36 - recent inverse kinematics okay that's
109:39 - the that's what I'm looking for blank
109:40 - one okay put this over here
109:44 - sketch
109:46 - uh take this
109:49 - out watch's this
109:52 - reach okay here we
109:57 - go uh forward KX
110:02 - okay all right here we
110:04 - are I need some more water maybe I could
110:07 - take a break and fill this up with some
110:10 - water we all know what what what what uh
110:13 - what could happen if I try doing that um
110:15 - let me do that because I I do feel like
110:17 - I need some water and I will play you
110:19 - guys
110:20 - kitten
110:24 - song it's All
110:28 - glitching I'm mu actually you know what
110:31 - I'm muting my
110:34 - [Music]
110:40 - [Music]
110:49 - microphone
110:52 - [Music]
111:03 - [Music]
111:16 - kittens kittens
111:18 - Kitt
111:36 - that was a failure by the
111:38 - way because both the the uh they're both
111:42 - locked I don't know where it place to
111:44 - get um I got to find where there's like
111:45 - a water cooler on this uh floor oh my
111:48 - God it's 77° in here why doesn't the
111:51 - it's snowing outside by the way in New
111:52 - York am I you can hear me again right
111:57 - Rel today is not broken it has noten
112:01 - this is this is a wonderful thing yeah I
112:04 - okay we're going to do it I'm
112:08 - really I'm going to need to deal with
112:11 - the the uh yeah oh so here's the
112:15 - thing is it too
112:18 - quiet
112:21 - what
112:22 - else I'm dance with my
112:24 - [Music]
112:27 - tent that was invalid I forgot there was
112:30 - one other that I think is important that
112:34 - I will use continuously over and over
112:36 - again all sorts of text generation
112:39 - analysis things that I will use
112:42 - continuously over and over again first
112:45 - thing I need to do is kittens kittens
112:48 - kittens
112:51 - okay we're going to do itys and kittens
112:53 - and kittens and kittens kittens and
112:55 - kittens and kittens and kittens and
112:57 - kittens and kittens and kittens kittens
112:59 - and kittens and kittens and kittens
113:00 - kittens and kittens and kittens and
113:02 - kittens kittens and kittens and kittens
113:03 - and kittens kittens and kittens and
113:05 - kittens
113:11 - and
113:13 - okay that aside you really could do
113:16 - something would make this music
113:18 - responsive so if you did beat detection
113:19 - or just had the angles change according
113:21 - to the volume I think there's some
113:22 - interesting possibilities
113:25 - there I'm exhausted I really need to get
113:27 - some water
113:30 - um so but it's okay I think I'm close to
113:34 - let's see hold
113:36 - on we have some of this there's a little
113:38 - bit of this tea
113:45 - left I look forward to the weird gifts
113:48 - or whatever of that
113:51 - I I I look yeah okay so
113:56 - let's give me another let's let's do a
113:59 - oh no soundboard died let me plug this
114:03 - in charge
114:06 - it where can I plug it in where's a plug
114:09 - I need an extra plug no there's no extra
114:12 - plugs okay I'm G have to deal with this
114:14 - later if I unplug that oh you know what
114:17 - I can unplug is this right now sorry
114:21 - everybody riveting live stream listening
114:25 - to me narrate how I'm unplugging and
114:27 - plugging things back
114:28 - in um
114:30 - okay I
114:32 - [Applause]
114:37 - am uh okay I am I'm really gonna get to
114:40 - this I'm really gonna get to this next
114:43 - step here but um but before I do that
114:47 - I'm going to there was was a request for
114:50 - the this dot
114:53 - song uh by the way I have a new coding
114:56 - Train theme song that's coming I heard a
114:57 - first version of it I'm very excited
114:59 - about that this dot this dot
115:03 - um uh SoundCloud I'm going to make
115:06 - another attempt to get some
115:09 - water
115:12 - uh as always I
115:15 - always it's probably very
115:18 - quiet
115:26 - can you guys hear
115:29 - [Music]
115:34 - that okay I'm going to attempt to get
115:36 - some water
115:40 - again enjoy the dancing
115:48 - tentacle I will be
115:51 - back I will be
116:18 - back
116:27 - [Music]
116:38 - I'm gonna do dot do do this Dot Song
116:42 - never forget dot somebody composed that
116:45 - song for
116:48 - me
117:18 - for
117:28 - I went onto some other music okay um
117:30 - that was another failed Mission I'm
117:32 - going to have to do an exploration of
117:33 - this the floor of this building to find
117:36 - where there's water uh okay the other
117:39 - thing I'm noticing is my microphone is
117:41 - doing something weird here so let me see
117:42 - if I can fix that like maybe it's uh
117:46 - doesn't have enough slack when it was
117:48 - kind of pulling the shirt in a weird way
117:50 - okay is there a different
117:53 - way cuz it's I'm worried it's brushing
117:56 - up pointed down let's just try doing
118:04 - this this is probably
118:09 - worse let me go
118:13 - back I
118:15 - am okay sorry I'm looking let's hello
118:18 - you're over there okay we're going to do
118:20 - inverse kinematics that's fine it's
118:22 - going to be fine okay all right
118:25 - tentacle I got to slow you down
118:28 - tentacle
118:33 - uh slow you down even more
118:38 - tentacle all
118:41 - right yeah I want to put up a picture of
118:44 - the snow let me see if it's still
118:46 - snowing I'm looking to see if it's still
118:48 - snowing oh it's definitely still snowing
118:51 - I really want to just like open the
118:52 - window and get all the cold air in here
118:53 - too but this room has no
118:57 - windows all right let's do you guys
118:59 - ready let's do inverse kinematics and
119:01 - then everybody can go to sleep or have
119:02 - lunch or whatever it is they're doing
119:04 - with the rest of their day I go get some
119:07 - water stay hydrated I pass out you'll
119:11 - know
119:12 - why
119:15 - uh I should just bring a water bottle is
119:18 - what I just do I could fill up up
119:22 - okay hello welcome to another coding
119:25 - Challenge and in this coding challenge
119:27 - I'm going to do something called inverse
119:30 - kinematics so over here this is what I
119:33 - did in a previous coding challenge which
119:35 - is called forward kinematics and what's
119:39 - the difference between the two in a
119:40 - weird sort of way the fact that this arm
119:42 - is just doing kind of random weird
119:47 - stuff sometimes talking and recording in
119:51 - a room by yourself is a very strange
119:53 - thing to do and your mind wanders off
119:55 - and you don't know where you are why
119:57 - you're here what's going on in the world
119:58 - anymore and you just want to go and take
120:00 - a nap that happened to be just this
120:02 - moment I am going to um G to start that
120:09 - over okay here we
120:12 - go
120:14 - hello how are you I'm doing okay a
120:16 - little bit thirsty no no that's the
120:18 - wrong thing to say try this
120:22 - again hello how are you doing welcome to
120:25 - a coding challenge where I'm going to
120:27 - make something called inverse kinematics
120:29 - and you might say hey look at that did
120:30 - you do it already and I'll say no I have
120:32 - not this is actually from the previous
120:35 - video where I did a simulation called
120:38 - forward kinematics and so one of the
120:39 - main things I need to do before I get
120:41 - started coding is talk about well what's
120:43 - the difference between forward and
120:44 - inverse and why might you use one over
120:46 - the other one thing I will mention if
120:48 - you watch the previous videos I did
120:49 - change one slight thing about the code
120:51 - which you might be interested in I added
120:53 - something to make the segments have a
120:54 - Different Stroke weight based on where
120:57 - they are the a higher stroke weight
120:59 - towards the bottom and a smaller stroke
121:01 - weight towards the top so that's kind of
121:02 - an interesting little variation that you
121:04 - could look at okay now let's talk about
121:06 - let me come over here and um let me see
121:09 - let me erase some of this I'm going to
121:10 - leave this up here okay so this was a
121:15 - diagram I had based on forward
121:17 - kinematics here over here where the idea
121:20 - is I have a bunch of
121:23 - segments they're all connected to each
121:25 - other maybe these are segments of a kind
121:27 - of alien tentacle or there a leg that's
121:30 - walking or whatever they might be robot
121:33 - arm we're getting to
121:34 - that the idea with forward kinematics is
121:38 - if I turn this
121:40 - one then all of these should rotate with
121:43 - it so the angle that changes here gets
121:46 - passed along to all of the segments that
121:48 - are connected did so this one turns and
121:50 - they all and then if this one turns it
121:52 - doesn't get P to the one behind it it
121:54 - gets passed to these and so in that
121:55 - example of the tentacle they're all kind
121:57 - of moving a little bit randomly with
121:59 - some pear and noise or I I also used
122:01 - like a sine wave or whatever whatever
122:02 - algorithm you're using to move them the
122:04 - point is as you move one it affects the
122:06 - other ones inverse kinematics does
122:09 - well as the name is stated the inverse
122:13 - in other words what if you imagine this
122:15 - arm this I'm calling it an arm for
122:17 - reason I guess but this connected set of
122:20 - segments needed to reach and grab
122:23 - something and this is a problem that
122:25 - happens in robotics you create a robot
122:27 - arm that's a bunch of things connected
122:29 - to each other with some kind of like
122:30 - hydraulic rotational mechanism thing
122:32 - that I know nothing about and you need
122:34 - to figure out I want the arm to pick up
122:36 - this thing so if my hand my hand is the
122:40 - robot arm to get that I know my hand
122:43 - needs to be there what should the rest
122:44 - of me do how do I if I know that this
122:48 - needs to go
122:50 - here how do I figure out how all of
122:52 - these should be oriented in order for it
122:54 - to do that and you could we we might
122:55 - plainly see that this is you know the
122:58 - best orientation for reaching something
122:59 - far away in that direction but what if
123:01 - suddenly it needs to grab something here
123:03 - well we can plainly see maybe a good way
123:05 - for it to do that would be this but how
123:07 - do we calculate that if we know the end
123:09 - point how do we pass the angles back
123:12 - inversely through the segments inversely
123:14 - is that even a word that's what I'm
123:16 - going to do I hope I built this before I
123:19 - think but it's been years I think I have
123:22 - no idea okay so coming back over
123:25 - here um I am now looking at my forward
123:28 - kinematics example and I'm not going to
123:30 - I'm going to start the code over from
123:31 - scratch and I'm going to say setup I'm
123:34 - using uh processing which is a
123:36 - development environment and uh a Java
123:39 - Library uh for doing uh creative coding
123:42 - graphics and animation more more yada
123:44 - yada
123:45 - yada uh okay so what I want to do and
123:48 - I'm going to say side size 600 400 and
123:51 - uh there we go we've got the window and
123:54 - I'm going to say uh background 51 so I
123:57 - want the same sort of idea that I had in
124:00 - the previous example where I have this
124:02 - idea of a segment object so let's take
124:05 - let's let's make this uh object called
124:08 - segment uh and I want to make a new uh I
124:11 - want to make a new
124:14 - segment uh and I'm going to give it a
124:15 - location again the segment class doesn't
124:18 - exist so I'm doing this reverse I'm sort
124:19 - of thinking like okay I want to give it
124:20 - an
124:21 - XY and a length and maybe an angle so
124:25 - this is similarly to what I did before
124:27 - we're going to have to deal with some
124:28 - kind of like parent child stuff but
124:30 - let's just start there now I'm going to
124:32 - say I'm going to make a new tab called
124:34 - segment to create a segment
124:37 - class and I'm also going to want my
124:40 - segment class to have what do I think I
124:43 - wanted to have a and b so let let's let
124:47 - me describe what I'm doing here so if
124:50 - this is one segment I want to have a
124:53 - meaning the point over here B meaning
124:56 - the point at the end length being how
124:58 - long that segment is and angle being
125:01 - what's its angle of rotation relative to
125:03 - the xaxis so those are the properties of
125:05 - this object uh a I'm going to say um
125:11 - what am I doing here
125:13 - I'm I had an idea of what I was doing uh
125:17 - angle and length
125:20 - and I'm going to create a Constructor
125:22 - function which gets an X and A Y and
125:26 - weirdly I well let's keep it way and uh
125:30 - an initial angle which ultimately is
125:32 - something an initial um an initial
125:34 - angle and an initial
125:37 - length now you'll notice length just got
125:39 - highlighted as like light blue because
125:41 - length is a key word it's a property the
125:43 - length of an array so I'm going change
125:45 - this to Len for length because I don't
125:46 - want to it would be fine but it's a
125:48 - little I don't want to make it
125:49 - unnecessarily confusing so I'm going to
125:51 - say a is a new P Vector it's at X comma
125:54 - y its angle is that
125:58 - angle and uh it's uh length is that
126:03 - length that I
126:04 - specify so now is that what I said so
126:06 - now if I run this I got no errors but
126:08 - nothing's happening the next thing I
126:09 - want to do is I want to say segment.
126:12 - show and I this is just about exactly
126:14 - what I did before and I'm just doing it
126:16 - again to kind of get started I'm going
126:18 - to write a function called
126:19 - show and I'm going to make a line
126:23 - between a.x and a.y and b.x and b.y and
126:27 - I'm say stroke 255 stroke weight
126:31 - 4 and now if I run this I'm going to get
126:34 - the same issue I got before where I
126:36 - haven't done I haven't figured out where
126:37 - B is so I need a function called calcul
126:41 - guess a lot of this really is the same
126:42 - calculate B and this is I'm going to use
126:44 - my polar to cartisian coordinate
126:46 - transformation again I have a feeling
126:47 - though I'm going to have I'm going to
126:49 - start needing to calculate a based on B
126:52 - because I'm going to move the arm to the
126:54 - point that it's trying to grab so anyway
126:56 - but we'll see we'll
126:58 - see I'm going to what am I doing here
127:01 - I'm going to calculate B which is saying
127:05 - uh the X offset from a is equal to the
127:10 - length time cosine of the angle and the
127:12 - Y offset is equal to the length Time s
127:15 - of the
127:16 - angle and then B is a new P Vector at X
127:23 - Plus DX y + Dy one thing I'll mention
127:25 - here is
127:28 - um uh oh sorry
127:30 - a.x and a.y one thing I'll mention here
127:33 - that I don't love is that every time I
127:36 - calculate B I make a new P Vector object
127:39 - and in Java on my desktop computer which
127:42 - you know gigs of RAM this is never going
127:43 - to be a problem is a little bit of issue
127:46 - it might make more of a more sense and
127:48 - maybe I'll just do it right now for the
127:49 - sake of argument for me to make a an
127:53 - empty P vector and then what I would do
127:56 - is I would say b. set so that would be
127:59 - I'm not making a new object but I'm just
128:01 - setting its values to these two values
128:03 - and I think this will work exactly the
128:05 - same way it's a bit more memory
128:06 - efficient so to speak and doesn't really
128:09 - matter okay so now what I want to do is
128:12 - I'm on an update
128:14 - function where all I'm going to do is
128:16 - just calculate B which is quite
128:17 - redundant right now but uh it's fine
128:20 - calculate not calculate um and then uh
128:25 - seg min.
128:27 - update so okay uh this doesn't look
128:30 - right what did I miss
128:34 - H uh length oh I put these in the wrong
128:37 - order so this is length this is angle so
128:41 - this is length and this is angle I have
128:43 - the the length at zero and maybe I'll
128:46 - just for consistency change the order
128:48 - there and there we go so now I really
128:51 - haven't gotten very far but I've built
128:53 - my segment now here's the thing that's
128:55 - different though what I'm going to do
128:57 - now this is why I I was I didn't want to
128:59 - this is why this is quite different now
129:01 - what I'm going to do is let me let me
129:03 - zoom in on this segment here the first
129:05 - thing that I'm going to do is I just
129:07 - want this segment to follow the mouse so
129:09 - wherever I move the mouse I want it to
129:11 - turn to move towards the mouse so
129:13 - actually what I want to do is I want it
129:16 - to uh I want it to be to point at the
129:18 - mouse so I wanted to grab the mouse this
129:21 - is what I'm going to do so I wanted to
129:22 - grab the mouse I wanted to point at the
129:23 - mouse so um how do I do that so this is
129:28 - yet another example of needing this
129:30 - polar to cartisian trigonometry
129:33 - stuff so uh because I'll have it move
129:36 - according to the mouse I think this is a
129:37 - good way to start um so if I have this
129:40 - segment and then the mouse is down over
129:43 - here what I need to do what I want to do
129:46 - is turn it so that it points points this
129:48 - way and then move it all the way so that
129:52 - it's
129:52 - here so uh so that's so that'll give the
129:57 - sort of motion that we're expecting I
129:58 - think um so I want it to point at and
130:01 - then you know there going to be
130:03 - different one thing it could be fixed
130:04 - and it always just points in the sort of
130:06 - tentacle case but I want it to turn and
130:07 - so what I need to do is figure out this
130:09 - angle oh my goodness guess what we've
130:11 - now got to do the no wonder this is
130:13 - inverse kinematics we also have to do
130:14 - the inverse we're not converting from
130:16 - Polar to cartisian we now have to
130:18 - convert from cartisian to Polar because
130:22 - what I
130:23 - need is I need this angle based on
130:28 - knowing the and I think I want to use
130:31 - this end point so actually I think the
130:32 - angle I want is this right or is it from
130:36 - a I don't know what the somebody
130:38 - somebody in the chat will tell me
130:40 - because I could calculate an angle of it
130:41 - pointing from b or from a I think I want
130:43 - it from a I think I want it to turn and
130:46 - go there so I want to sorry so what I
130:48 - want to do is calculate this angle and
130:51 - what is that
130:52 - angle it's this Dy and this DX so it's
130:58 - Mouse x
131:00 - minus this object's a.x and mouse y so
131:04 - that's those but if I have those how do
131:06 - I get the angle now here's the thing I
131:08 - should do another video about this
131:10 - because I can use something called arc
131:12 - tangent or inverse tangent it's a
131:14 - trigonometry function to get the angle
131:16 - from an X and Y value and there's even a
131:18 - special way to do that with uh code
131:20 - functions there something called a tan 2
131:22 - somebody remind me do a separate video
131:23 - about that but I'm going to do this just
131:25 - with vectors because the p v the P
131:27 - Vector object does this behind the
131:29 - scenes if I can create a vector that
131:31 - points from here to here then I can call
131:34 - a function in the P processing Vector
131:38 - object called heading and that heading
131:40 - function gives me this angle it's if you
131:42 - we look at the source code it's got a
131:44 - tan 2 in it so it's doing this but I
131:46 - might as well have a function that does
131:47 - this math for me already let's just use
131:49 - that okay so now I come back over here
131:51 - hello hello inverse kinematic thing and
131:55 - um now what I'm going to do is I'm going
131:58 - to write a function that calls segment.
132:04 - follow uh Mouse X Mouse y okay so I want
132:10 - this segment to follow the
132:13 - mouse so I'm going to go here into
132:15 - segment and say void follow
132:18 - and I get a
132:20 - Target X and let me just call that TX
132:24 - and Ty for like Target X Target y
132:27 - probably should use the full word Target
132:28 - I'm trying to keep my code within the
132:30 - space that you can see and so now what I
132:32 - need is I need a vector the direction
132:36 - which points
132:39 - from um so here's the thing I could do
132:42 - this a number of different ways I'm
132:43 - going to say a Target equals a new P
132:47 - vector that's at that TX and Ty and then
132:50 - I'm going to say p vector. subtract the
132:52 - target minus a so this is what I want I
132:57 - want a vector that points from a to the
132:59 - Target that's the direction that I want
133:00 - it to point and then now what do I do I
133:03 - say
133:04 - angle equals Dr do
133:09 - dading so that's all there is to it so
133:11 - now if I uh if I run
133:14 - this we can see it's always pointing
133:18 - towards the mouse so that's just making
133:20 - a vector getting the angle and using
133:22 - that angle as it's but here's the thing
133:24 - what happens now though if not only do I
133:26 - point towards the mouse but I actually
133:28 - move B to the mouse
133:31 - location so now what I'm going to do is
133:34 - I'm going to say b equals
133:38 - target. copy now this is going to do
133:40 - something
133:41 - weird okay first of all
133:45 - U so actually I don't want to C calate B
133:48 - here's the thing maybe this is a little
133:50 - bit weird what I'm doing here but I have
133:51 - a function that calculates B based on a
133:54 - so actually what I want to do oh this is
133:56 - actually easier than I thought what I
133:58 - want to do is right what I did is I
134:02 - rotated it to here I want now this
134:06 - Vector to have the magnitude of
134:09 - length and then I just want a to be
134:13 - positioned
134:15 - where uh it's distance from the Target
134:18 - is that length does that make sense I
134:20 - think I need to draw this again so this
134:22 - is the this is the
134:24 - segment this is the target so the
134:27 - segment goes here and I have this as a
134:31 - vector and now I need to figure out
134:33 - where is a so that if I lined it up with
134:36 - here uh B would end up right there right
134:40 - so a should
134:42 - be
134:44 - um yeah so so a should be the that that
134:48 - Ang that that Vector
134:51 - position go back to where
134:53 - I I lost my I I got my I got my words
134:58 - mixed
135:01 - up trying to what's the it's kind of
135:04 - like I want to move B there and then
135:05 - just move back by the angle but if uh if
135:09 - this is the angle I think what I want to
135:11 - do I'm trying to think what's the what's
135:13 - the most succinct way of doing this
135:15 - which is just to shift the that
135:19 - Vector to
135:22 - where the distance the magnitude oh oh
135:25 - oh oh I know what to do here we go I got
135:29 - it not until you'll edit this
135:33 - somehow so all I need to do is take this
135:37 - vector and put it right
135:40 - here right put it right here then
135:43 - multiply it by -1 and then I have a
135:46 - vector right like that goes this this
135:48 - way and then a goes right here so now I
135:50 - want that arm to be positioned at this
135:52 - angle but where a is there and there's
135:54 - probably some redundancies in the way
135:55 - that I'm thinking about calculating this
135:57 - as there always are but let's just do
136:00 - this so forget about moving B what I
136:02 - want to do now is say Direction set
136:05 - magnitude to length right then I want to
136:07 - say Direction multiply by ne1 so I want
136:11 - it to be as long as the segment and I
136:13 - want it to move in the other direction
136:14 - because now all I need to do is say a
136:17 - equals
136:18 - P Vector add Target plus direction right
136:22 - so I want a to be positioned I'm going
136:24 - to change the angle and then position a
136:27 - that distance away from the Target and
136:28 - now we should see there we go so now as
136:31 - I move this you can see this
136:35 - particular segment is following the
136:37 - mouse in a
136:39 - somewhat lifelike way now here's the
136:42 - thing this is going to get much more
136:44 - exciting right this is inverse
136:46 - kinematics and that I'm starting stting
136:47 - with the thing at the end but there's
136:49 - nothing connected to it so now what I
136:51 - need to do is now that I figured this
136:53 - out oh this is exciting
136:55 - [Applause]
136:56 - ah this is going to be beautiful you you
136:59 - guys are going to make all sorts of
137:00 - wonderful cute and squiggly little snake
137:03 - like colorful creatures a little antenna
137:05 - I can't wait to see all of them um right
137:08 - if I have this now here and let's just
137:12 - say for example it started like
137:16 - this so this got moved to here what I
137:19 - need to
137:21 - do is point this now this one does
137:26 - exactly the same thing that this one did
137:28 - aha this is what inverse kinematics is
137:30 - this one does exactly the same thing
137:31 - that this one did but it's Target as
137:34 - this point so it points towards it and
137:38 - then it shifts there so we're actually
137:40 - done we've done all of this already we
137:42 - just need to add a segment that's
137:44 - connected that does the same exact
137:45 - algorithm but not with the first Target
137:47 - but with what it's attached to let's go
137:49 - add that so now here what if I add what
137:52 - if I do the same thing I did before
137:53 - where I make this segment one and
137:55 - eventually we need to make this an array
137:56 - or a linked list whatever we do and I
137:59 - need and make this segment two
138:02 - oops segment two okay segment two I can
138:07 - do this segment two equals a new segment
138:10 - and guess what it's parent I'm thinking
138:14 - of it in the inverse way it's parent is
138:16 - a thing at the end
138:18 - is segment one and it has a length of
138:22 - 100 I don't know if it really needs an
138:23 - initial angle the way this stuff is
138:25 - going to get calculated but let's leave
138:26 - that in there this might be completely
138:28 - unnecessary in this scenario so now I
138:30 - need to write another Constructor
138:33 - function just like this
138:35 - one I need to give them all a
138:40 - parent and I'm instead of getting an X
138:42 - and A Y it's going to get a parent and
138:47 - then then uh so here parent is always
138:50 - null if it's the first
138:53 - one I'm going to have the same issue I'm
138:56 - going to need the child thing to go but
138:57 - maybe I can go forward this time anyway
138:59 - we'll figure it out um then what I'm
139:02 - going to do is say oh I I'm almost there
139:07 - uh parent is that parent and then
139:11 - a is oh wait a
139:15 - sec we don't actually it doesn't really
139:18 - matter where a is because what I need to
139:21 - do now is just follow the parent so I
139:25 - want to
139:26 - follow um I want to
139:31 - follow
139:32 - parents a and this should a uh right I
139:35 - want to just do that
139:37 - algorithm and uh I better set my length
139:40 - and angle before I do that right so the
139:43 - first thing I do is just attach myself
139:45 - to it wherever it is and then then um
139:50 - here yeah so this should be good I I
139:55 - could see that this is really going to
139:56 - need to be
139:57 - refactored but I'm going to just keep it
139:59 - right now so now what I want to do this
140:01 - is this is kind of terrible what I'm
140:02 - doing but I'm going to say segment one
140:05 - update okay hold on let's let's just
140:07 - make sure they're both
140:09 - there segment two update and
140:14 - show okay what did I get here uh Target
140:19 - parent
140:20 - a.x oh oh oh no hold on I got a no
140:25 - pointer exception what's wrong
140:28 - here
140:30 - um new segment segment one follow okay
140:34 - hold on
140:36 - let's that I should definitely get why
140:39 - am I getting a no pointer in follow is
140:42 - it when I it's up here oh
140:45 - because does
140:48 - does
140:50 - uh uh hold on time out for a second and
140:55 - where's my debugging
140:57 - [Music]
141:00 - music uh if the child follows the mouse
141:03 - the parent follows the
141:06 - child yeah no the child follows the
141:10 - parent uh where's my let me where's my
141:12 - no point your
141:14 - exception uh
141:19 - this right here right so that's let's
141:24 - hold on let's not do any of
141:27 - this okay this is what it was
141:32 - before
141:33 - now
141:36 - uh let's put this
141:41 - back null pointer is it Target or is it
141:45 - a oh a doesn't have have a of course of
141:48 - course of
141:50 - course okay I this will get edited back
141:53 - let me
141:57 - just no point your exception no point
142:00 - your exception could it be Target or
142:02 - could it be a it's definitely a right
142:04 - because I'm forgetting that it doesn't
142:06 - have an A so even though its parent is
142:09 - parent it's a should at least start um
142:13 - somewhere
142:14 - and uh I guess I'm just going to give it
142:19 - um I'm going to give it uh just a vector
142:23 - at 0 0 I got to think about this this is
142:24 - not right but let's just do this for a
142:27 - second so
142:31 - yeah hold
142:33 - on let me think about this here uh I
142:37 - lost I I lost it I had it and I lost it
142:41 - uh maybe this isn't the right
142:44 - idea oh it's not following a yeah oh
142:47 - hold on let's think about
142:52 - this I should still I know what the
142:55 - issue
142:58 - is I
143:04 - I let me come back to this I know what
143:06 - the problem is I've got it let me go
143:09 - back to that null pointer
143:11 - exception
143:16 - uh
143:21 - oh why did I change
143:25 - that when did I lose that by accident
143:30 - okay okay
143:34 - so here we
143:36 - go okay I've got a null pointer
143:39 - exception with targeted a so a which
143:43 - Target is not null because I can see
143:44 - that I made it right here a is null and
143:46 - why is a null because I'm doing
143:48 - something
143:49 - wrong and and you know I'm setting the
143:52 - parent because I know it needs to be
143:53 - attached but even though I'm doing
143:55 - inverse
143:56 - kinematics I don't want I I'm I'm
143:59 - thinking about this incorrectly what I
144:01 - want to do is this is still the root the
144:03 - first segment it's going to be a lot
144:04 - easier if I then attach the next segment
144:07 - here attach the next segment here I am
144:09 - going to do the math backwards by
144:11 - starting with the last one but they need
144:12 - to have some initial configuration that
144:14 - makes sense so when I make the next one
144:17 - it its parent is actually the thing
144:18 - behind it still so that's what that's
144:21 - what I'm doing wrong here so let me come
144:22 - back and I it's just about the way that
144:24 - I'm building it so this is actually not
144:27 - in front of it this is not behind it
144:29 - it's actually in front of it so let's
144:30 - let's do that and segment two is
144:33 - actually the thing that's going to
144:34 - follow the mouse if you if you catch my
144:36 - drift so hold on a second so what I'm
144:39 - going to do when I make that thing from
144:41 - the parent a is
144:45 - still
144:47 - uh located it's at the end segment two
144:51 - is at the end of segment one so segment
144:53 - 2's a location gets the B location from
144:56 - segment one so that's fine and forget
144:58 - about this follow thing that's not
145:00 - happening here so what I'm going to do
145:02 - now is let's just make sure that these
145:06 - both show themselves in the right
145:08 - location get rid of this follow okay so
145:11 - those okay well it looks like there's a
145:12 - segment up here why is that because uh
145:15 - 300 200 segment
145:17 - um so let's see oh so let's see here
145:20 - what went wrong
145:21 - there uh ah so the first segment didn't
145:25 - get its B calculated in setup in its
145:29 - Constructor so so that messed up the
145:31 - second one and in that sense I should
145:34 - probably calculate its B
145:36 - here so
145:39 - whoops so there so now they're connected
145:42 - and we can just we know that this is
145:44 - correct even though I think the initial
145:45 - angle isn't really going to matter here
145:46 - here um if I were to give it you know an
145:49 - angle
145:50 - of same like -45° radians and just so we
145:55 - can see you know negative uh 10
145:58 - degrees so we can see this is now these
146:01 - segments are connected 45 degrees and
146:04 - then 10 degrees okay because here's the
146:06 - thing it's segment
146:08 - two the whole point of this is that I
146:10 - want the
146:11 - end to follow the mouse by the way the
146:14 - parent thing is going to work so much
146:15 - better here I start at the end and I
146:16 - just go back through the parents I don't
146:18 - actually need the child like I needed in
146:19 - the forward one okay so now we can see
146:22 - segment two is following the mouse but
146:24 - segment one is not coming along with it
146:26 - so what do I need to do I could just say
146:28 - segment one follow segments 2's a.x
146:34 - segment 2
146:36 - a.y and now we're going to see this
146:39 - there we go we can see now I have this
146:41 - inverse kinematics where it's all about
146:44 - the other figuring out where the end is
146:47 - and the the angles get calculated kind
146:49 - of Rippling back the first one follows
146:51 - the mouse the second one follows the end
146:52 - of one and you can see now this this is
146:54 - it this is kind of feels somewhat like a
146:57 - realistic skeleton arm like thing and of
146:59 - course there's scale and what you're
147:01 - using this for but we've got the basic
147:02 - idea oh good so now what I want to do is
147:08 - I want to
147:10 - add I want to make this uh um I I don't
147:13 - want to just have two separate variables
147:15 - so once again I'm going to call this
147:16 - tentacle or snake or whatever I'm going
147:18 - to call it
147:19 - tentacle and tentacle is a
147:22 - new first
147:24 - segment then I'm going to say I'm just
147:27 - going to make just for Simplicity I'm
147:28 - just going to have three I'm going to
147:29 - add
147:31 - three and the same kind of thing I did
147:34 - before where what I want to do is I need
147:37 - the current segment is starts with
147:42 - tentacle the next segment is attached
147:47 - to that tentacle and let's just give
147:50 - them all an initial angle of zero again
147:53 - that makes just things a lot
147:55 - simpler and then next current is
148:00 - next so once again I'm making a linked
148:02 - list where I'm
148:04 - saying the first
148:06 - object is connected to the next object
148:09 - which is connected to the next object so
148:10 - I to iterate them I could just go
148:11 - through them and but yeah so but I'm
148:14 - actually connecting them backwards which
148:15 - is perfect this is perfect yay okay uh
148:19 - so make the next one based on that and
148:21 - then current becomes next and this
148:23 - should not say tentacle here that's a
148:24 - mistake this should say current right
148:27 - because current is changing next is
148:29 - based on current then next becomes
148:31 - current so now I should be able to do
148:33 - the thing that I was hoping for where I
148:37 - say um four no no no I I make a I say
148:42 - just say current or next I don't know
148:46 - next equals
148:48 - tentacle while next is not equal to
148:53 - null next let's not do the follow for a
148:56 - second next. update next.
149:01 - show and
149:08 - then one
149:13 - day and then
149:17 - um next equals tentacle dop parent oh I
149:23 - see what the problem is oops and that's
149:26 - not a function so this is a problem why
149:28 - is this a problem this won't work oh I
149:30 - was I thought it was going to work out
149:31 - so beautifully I need the last one I
149:34 - need to start from the last one I I
149:36 - don't know why I'm spending all this
149:37 - effort avoiding putting them into an
149:39 - array because if I just put them into an
149:40 - array I have the end I have the
149:42 - beginning but since I'm spending all
149:44 - this effort avoiding and putting them
149:45 - into an array I'm I'm going to
149:47 - say I'm actually going to say um I'm
149:51 - going to do this this is crazy current
149:54 - is just this first
149:56 - one right I don't need to keep track of
149:59 - anything the tentacle is actually
150:01 - whenever this
150:04 - finishes it's whatever was current
150:08 - tentacle right so I don't actually want
150:10 - to save the first one in my variable I
150:13 - want to save the last one because I want
150:15 - to start at the end and go backwards
150:17 - okay so now I can say next is that
150:21 - tentacle and then get the parent so I'm
150:23 - going backwards so this should show all
150:24 - of them
150:26 - didn't uh Why didn't
150:30 - it uh uh
150:34 - uh let's see
150:38 - uh let's see Why didn't
150:41 - it what's
150:44 - wrong next is tentacle cool well next is
150:48 - not equal to null I should at least see
150:49 - the last one
150:51 - right
150:54 - um so hold
150:56 - on let's take out this so just to see
150:59 - one why don't I see the last
151:01 - one let me make them a little shorter
151:04 - just to be sure it's not going off the
151:06 - screen ah the last one is there okay so
151:10 - I had this right the last one is there
151:13 - but if I put this
151:15 - in
151:19 - this doesn't work while next is not
151:21 - equal to null well next is not equal to
151:24 - null update oh maybe the update is
151:27 - messing things up let's do
151:29 - this o what's going what's what's
151:32 - happening do I have an infinite
151:36 - Loop I'm like looking to the chat
151:38 - someone's going to have the answer for
151:40 - me uh yeah you know there's a question
151:43 - in the chat why do developers always
151:45 - call very variables weird obstated names
151:48 - and I really try not to do that and I'm
151:50 - doing a kind of a terrible job of right
151:51 - now so that's a really good comment and
151:53 - maybe when I go and rewrite this code to
151:55 - post it I can fix up the names next
151:57 - equals current next oh this is totally
152:00 - wrong next equals next. parents of
152:03 - course so this is what's wrong this the
152:06 - whole point of this idea of a linked
152:08 - list kind of system is that let me run
152:11 - this again there we go I was saying next
152:14 - equals tentacle got there so I was
152:15 - always saying next is the first one so I
152:17 - was stuck in a kind of infinite Loop
152:18 - there so I want to show it and then get
152:21 - its parent then show it and get its
152:22 - parent and now if I call update that
152:24 - will shouldn't do anything because
152:25 - update is just calculating the end and
152:27 - now what happens if I have the this one
152:32 - uh
152:33 - follow Mouse X Mouse
152:39 - y so you can see that one's working that
152:42 - last one but I need now I need to do
152:44 - some kind of following here so I'm going
152:45 - to say next . follow and it should
152:50 - follow the it has to follow the If the
152:55 - previous
152:56 - one so what I can do is oh this is why
153:03 - having an array would be nice or having
153:05 - the child all I need is the child
153:07 - relationship because it's got to follow
153:09 - its child so let's put that back in
153:12 - let's so maybe I do like this double
153:14 - length list thing I I'm really over in
153:16 - this I think uh but I'm going to give
153:18 - them give it a child uh and then so I
153:21 - have that reference so what what do I do
153:23 - here when I make
153:25 - them the next one is based on the
153:30 - previous
153:31 - one and then
153:34 - uh
153:35 - [Music]
153:37 - um oh just give me a second here I have
153:39 - to take a break for a second do I I am
153:43 - my fighting against putting an array in
153:44 - this is just sort of like a lost point
153:46 - pointless
153:48 - cause
153:50 - um it's time for lunch can you tell it
153:52 - it's time for lunch I've got no water
153:54 - got no caffeine no food sugar I need
153:57 - something to like go into my brain to
154:00 - like to rechar I need Electric
154:02 - electrical outlets clicked in here but
154:04 - what I want to do is I think I'll if I
154:07 - put the the end things parent is the pre
154:10 - is end things is the parent so that's
154:12 - why I'm iterating through but the parent
154:13 - has to follow its own child and the last
154:15 - one follows the
154:19 - mouse so this sets current as the parent
154:24 - of
154:29 - next uh right next next parent is
154:36 - current
154:40 - next oh no no no because I'm going I see
154:43 - I inverse thing is really confusing
154:47 - next parent is
154:49 - current and current child is
154:53 - next yeah
154:55 - okay mat this will be like a little edit
154:58 - Point
155:00 - here what I need to do right right now I
155:03 - have the relationship that every segment
155:06 - knows its parent but in this inverse
155:10 - kinematic it's got to follow the one
155:11 - that's in front of it which is actually
155:13 - its child so right now the way that I'm
155:16 - creating them is that the the um the
155:21 - next object's parent is current but the
155:25 - current object's child is next so I also
155:28 - need to say current. child equals next
155:32 - and then here I can say
155:35 - follow right so the first one just
155:39 - follows it's its Mouse follows the mouse
155:42 - and then um and then what I might do
155:46 - actually is say next equals next. parent
155:48 - just to go to the next
155:51 - one and then at the beginning here I
155:54 - should call next. follow so if I give it
155:57 - follow with a particular Target it'll
155:59 - follow that but I need another follow
156:01 - function I can overload functions right
156:03 - I want the same oh but I don't want to
156:05 - redo this math all I need to do is say
156:09 - um void if I just call follow then what
156:13 - I need
156:14 - is taret taret X is child
156:19 - do it follows the a child. a.x right
156:23 - it's got to follow it's uh and Target Y
156:27 - is child. a.y and then
156:32 - follow Target
156:35 - X Target y so this is an a Target X
156:40 - Target y so this is kind of an
156:41 - interesting technique that I'm doing
156:43 - which is I have that follow algorithm
156:45 - where this segment can follow any
156:47 - arbitrary point and then what I realized
156:50 - is oh what I want it to do is follow its
156:52 - child's point a so rather than write a
156:55 - whole other function that does this in a
156:57 - different way I could just write another
156:58 - function that calls this one with the
157:01 - child that that particular child's X and
157:03 - Y so this is the two functions both
157:05 - named follow if I just say follow
157:07 - without any arguments it follows its
157:09 - child if I say follow with arguments
157:11 - it'll follow that so now if I go back to
157:14 - here I should be the first one is
157:17 - following the mouse and actually this is
157:20 - silly what I'm
157:21 - doing I should just say uh this will be
157:27 - tentacle tentacle follow the mouse right
157:30 - we know the end the tentacle object is
157:33 - the end of this whole tentacle thing
157:36 - then next is going backwards whatever
157:39 - the tentacle parent is and then and so
157:43 - this is a segment and now I have my Loop
157:46 - as long as there is something there
157:48 - follow its child update and show and now
157:51 - we should
157:52 - have well hold on hold on ah whoops I
157:55 - forgot to say then next equals next.
157:58 - parent so I've got to keep going right
158:00 - I've got to go onto the next one
158:02 - otherwise I got an infinite Loop stuck
158:03 - there again so now we can see it's doing
158:05 - that right we can see that it's this
158:08 - whole thing is following the mouse oh
158:10 - you know what it's a little bit off am I
158:12 - not draw oh I'm not drawing the tentacle
158:14 - because the everything is in that loop I
158:16 - also have to I'm kind of I have to show
158:18 - the T that front element whoa what did I
158:21 - do
158:23 - here uh uh uh uh uh that's crazy what's
158:30 - the bug what's this bug I've got a weird
158:34 - mistake that's really weird okay hold on
158:37 - hold on hold on get rid of this for a
158:41 - second let's just get rid of this
158:43 - entirely okay hold on let me delete all
158:45 - this down here what is this bug let's
158:49 - get rid of this
158:50 - entirely okay whoa something is weird is
158:54 - happening with this tentacle because I
158:55 - forgot to call update that's what it is
158:58 - okay okay so this is the again
159:01 - refactoring is a wonderful thing but I
159:03 - can see this Loop the idea of this Loop
159:06 - is to do all the three steps follow
159:08 - update show and I did follow and show
159:10 - but I forgot to update it what happens
159:11 - in update it's kind of important it
159:14 - recalculates the end point which is also
159:16 - silly now by the way that I have an
159:17 - update function that that's all it does
159:19 - I thought it might need to do some other
159:20 - stuff so but I guess it's good in there
159:22 - in case it needs to do some other stuff
159:24 - so I need to say tentacle do update ah
159:28 - there we go and now there we go so now I
159:31 - have this thing that follows the mouse
159:33 - in kind of like a real slightly
159:36 - realistic skeletal like way and what I
159:39 - can do now is I could say hey guess what
159:41 - I want to have 10 of these connected um
159:45 - I want to uh have the first one uh and I
159:50 - want them to all and again these should
159:52 - all be variables I should uh I want them
159:54 - to be separated by only 10 pixels and
159:57 - have 20 of them connected and you can
159:58 - see what do I have now you know I have
160:00 - something that looks like
160:02 - this and you can see this is different
160:05 - by the way than a particle that keeps
160:07 - track of its own path right there is an
160:10 - aspect of It kind of keeping track of
160:11 - its own path but it's actually you know
160:13 - in a way more like a rigid body of
160:15 - connected uh joints so um so there's a
160:19 - lot of possible ways you can vary this
160:21 - and just thinking about this is why I
160:22 - think we could maybe get a nice fish
160:24 - simulation especially if there was some
160:25 - added wiggle to it there's a sort of
160:27 - almost like the muscles where all those
160:29 - joints are and that they that they
160:31 - trigger and maybe there's some sine wave
160:33 - oscillation also as it's moving so this
160:34 - is what I want to maybe try to do in
160:36 - next sort second part or I don't know if
160:39 - I'm going to edit this into many parts
160:40 - what part I'm on but um but that's
160:44 - something to think about now I think I
160:45 - think it would be worth just out of
160:46 - curiosity let's try adding that um thick
160:50 - thickness stroke weight thing to it so
160:52 - it could be useful for every segment and
160:54 - I don't need the angle so I'm going to
160:55 - reuse the Ang I'm instead of having the
160:57 - angle the angle could just default to
160:59 - zero because it's just being calculated
161:02 - um so I'm going to have all of them have
161:03 - a default angle of zero and I'm going to
161:06 - make this last thing uh pass its index
161:10 - into the array because what I can do
161:13 - with that number I have each segment
161:15 - whether it's 0 1 2 3 4 whatever it is in
161:18 - the total number of segments and so what
161:21 - I can do is for example if I wanted to
161:23 - have stroke weight as a variable and
161:26 - whenever I draw it that's it's drawn
161:28 - with a variable stroke weight you know
161:30 - if I were to just say right now and I
161:32 - hate that I have to do this in two
161:33 - places so this is something I really
161:34 - need to
161:35 - refactor um stroke weight equals like a
161:38 - random number between 1 and 10 and I'm
161:42 - doing this in two places which is
161:43 - terrible and I don't need angle anymore
161:46 - you can see they all have like a random
161:48 - stroke weight but what if I want to say
161:52 - um an uh I want to
161:55 - map the index which goes from zero to
161:58 - the total number of segments which in
162:00 - this case is 20 uh 0 to 20 uh and I want
162:04 - the stroke weight to go between one and
162:07 - 10 so I know this is terrible I'm just
162:10 - going to put these in both places now we
162:12 - can see it's thicker at the end uh uh
162:16 - closer to the mouth and thinner thinner
162:19 - thinner uh as it gets further to the
162:21 - back so you can see that's a nice little
162:23 - variation I could I could also alter its
162:24 - color based on the same exact um
162:27 - algorithm we've got this kind of eel
162:28 - like thing that we could start to work
162:31 - with in our sketch now something I
162:33 - thought about here something came into
162:35 - my head ah yes here's an exercise for
162:38 - you really to me this looks like one
162:42 - thing now but really what it is is a
162:44 - collection of segments objects but
162:46 - really what I would like to do what I
162:48 - would want to do is make you know I call
162:50 - it like snake for example I would make a
162:52 - class called
162:54 - snake right that has all of that code
162:57 - for one of them and then I could have a
162:58 - bunch of them so that that would be a
163:00 - good part two or three or four or
163:01 - whatever this in addition to trying to
163:03 - get it so maybe we'll do that maybe what
163:04 - I'll do eventually is make the uh make
163:08 - put that into an object so I can have
163:09 - more than one and then also put those
163:11 - into a system where they interact with
163:13 - each other in some way so anyway anyway
163:15 - uh thanks for watching this inverse
163:17 - kinematics I hope you got something from
163:19 - it and that you'll look at the code and
163:20 - make some variations make pretty sparkly
163:22 - rainbow antennae cute uh snake tentacle
163:26 - creatures um thanks for
163:30 - watching
163:36 - uh
163:38 - okay it's
163:40 - 1:20 I'm definitely finished for this
163:42 - morning session which was now been 2
163:44 - hours and 4
163:46 - minutes I need some water there's a
163:49 - mirage over there um actually you know
163:52 - what I didn't
163:53 - do here's the
163:56 - thing I'm gonna hold
164:03 - on what's be the best way to do
164:06 - this
164:12 - uh great so alar writes be great to see
164:15 - one end of the entire connected tentacle
164:17 - locked and the other's location set by
164:19 - Mouse click and then gravity pull the
164:21 - end then you have string yes you know
164:23 - what I thought I'm gonna when I come
164:24 - back and do some more of this uh later
164:27 - um I'm going to I'll the first thing I'm
164:29 - going to do is actually move it not
164:31 - according to the mouse I don't know why
164:32 - I forgot to show that I let me
164:37 - maybe I'm gonna I'm G to Mata let's see
164:40 - if we can redo the ending to that video
164:42 - um and uh you can use this or not use
164:44 - this but I'll mention
164:48 - it I I don't know if this can get edited
164:50 - in or not
164:52 - but so when I look at this snake like
164:56 - thing oh wait hold on I already did this
165:00 - here no no don't delete this sketch just
165:03 - this
165:10 - tab when I look at this snake like thing
165:14 - I see uh one object and in a way I kind
165:17 - of have that because I just have this
165:19 - one variable called tentacle which in a
165:21 - way because it's a link list refers to
165:23 - everything but I really could organize
165:25 - the code in such a way that if I made
165:28 - another class called snake or creature
165:32 - or something and I could take everything
165:35 - that's basically in setup and draw and
165:37 - put it into that other class this would
165:39 - allow me to more easily duplicate many
165:42 - of these on the screen and that's
165:43 - something that I'll uh I'd like to do in
165:45 - in a maybe the next video so I will do
165:47 - another one where I have more than one
165:48 - of these and maybe they move in some way
165:51 - because what if instead of following the
165:53 - M Mouse they follow a bouncing ball or
165:56 - if you look at any of my just take the
165:58 - flocking example for example what if
166:00 - instead of having a triangle moving
166:02 - through that flocking example you have
166:04 - this uh snake like Wiggly creature thing
166:07 - uh moving through so that's so the
166:09 - there's there's a couple things I think
166:11 - you could think about doing as an
166:12 - exercise if after watching this number
166:14 - one refactor the code to having the two
166:17 - Constructors there's some efficiency
166:19 - there putting everything that has to do
166:21 - with this one creature into a class so
166:23 - that you can have more than one of those
166:24 - on the screen and then thinking about
166:26 - those things not following the mouse so
166:28 - what if those things move independently
166:30 - through some other particular kind of
166:31 - logic so I hope you will do that I hope
166:33 - you will make cute and cuddly and
166:35 - rainbow colorful antenna e creatures and
166:37 - share those with me in the comments
166:40 - shiftman on Twitter uh by submitting it
166:42 - to the GitHub repository and all that
166:44 - sort of stuff that people people often
166:45 - do when they're watching these videos
166:46 - thanks and I'll see you
166:48 - soon okay um there we go so I think I
166:52 - did a a successfully this morning
166:54 - covered forward and inverse kinematics
166:56 - without honestly kind of knowing that
166:59 - much about
167:00 - them pulling from memory and probably
167:03 - like whenever I watched uh coding the
167:05 - coding math videos about it it just sort
167:07 - of seeped into my brain um when did
167:10 - those come out um so now what I would
167:12 - like to do uh join
167:15 - restrictions oh okay let me not do that
167:19 - right now because I have to go I don't
167:22 - have my music stuff or what I'm so um
167:24 - but what I'm going to do is I will do uh
167:28 - maybe five minutes of pulling some uh
167:31 - questions from the chat uh you know
167:35 - YouTube has this like Super Chat thing
167:37 - I'm curious what but now I'm going to be
167:38 - way off topic everyone's going to write
167:39 - about it but I'm curious if people like
167:42 - or are kind of offended by or don't like
167:45 - fend is the wrong word like people's
167:47 - opinions about the Super Chat I have a
167:49 - different way of kind of organizing a
167:51 - smaller Community which is having a
167:53 - patreon which has a separate slack chat
167:55 - which is in many ways like the Super
167:57 - Chat the monthly subscription type thing
167:59 - but anyway sorry I got off topic um weak
168:02 - example of inverse kinematics Lo lock
168:05 - the Endo yes well I absolutely should do
168:09 - that but does that really make it weak I
168:11 - feel like it's a nice example of inverse
168:13 - kinematics it just doesn't have that
168:14 - feature yet I I could do that I'll do
168:16 - that next um yeah I could do that as a
168:18 - third part of the video um have you ever
168:20 - used eclipse for Java what do you think
168:22 - about it uh can we get coding train
168:24 - t-shirts online yes uh coding train.
168:27 - storenvy.com I just mentioned that at
168:29 - the earlier earlier in the uh I'll show
168:31 - that again before I leave have you ever
168:33 - used eclipse for Java and what do you
168:34 - think about it yes I love eclipse for
168:36 - Java because that's how kind of like one
168:38 - of the first things I I don't I don't
168:39 - know that you should but I'm I do a lot
168:41 - of my job development in eclipse and in
168:43 - particular anything that I'm doing for
168:44 - as a processing library or checking a
168:46 - bug in processing and that's really on
168:48 - my list to get to especially I want to
168:49 - talk about Google summer of code I want
168:51 - to do some videos about how to work with
168:53 - processing Eclipse which is maybe a
168:54 - skill that would be helpful in working
168:56 - on Google summer of code projects for
168:58 - processing do you have dreams of what
168:59 - you could do with code or ideas of how
169:01 - programming could change the world to
169:03 - the
169:04 - better um are you a professor at NYU let
169:07 - me try those I and there's an Android
169:09 - question I don't know anything about
169:10 - Android um so do I have dream you know I
169:15 - guess my point of view on this is to do
169:18 - this Channel and try to show people a
169:22 - side of creativity and fun through code
169:24 - which I think is a side that exists in
169:25 - other places too I don't have you know I
169:27 - don't have ownership over that idea by
169:29 - any mean by any but anywhere close to
169:31 - any stress of the imagination but uh and
169:35 - to put the question out there uh through
169:37 - my tutorials of how can we do things
169:39 - with code that make the world a better
169:41 - place um and so I guess my way of doing
169:44 - that is to make code more accessible uh
169:47 - and thinking about code and learning
169:48 - code more accessible to a broader
169:50 - audience now whether YouTube with ads
169:52 - and a patreon is the best way of doing
169:55 - that is an open question for me this is
169:56 - an exper I'm really enjoying this
169:58 - experiment uh it is a really exciting to
170:01 - see the audience grow and the community
170:03 - grow so that has definitely been
170:05 - something that I feel excited and happy
170:07 - about but it's still I still wonder am I
170:10 - doing a good thing through this but by
170:13 - putting this knowledge out there and and
170:14 - asking people to contribute and and make
170:18 - stuff with it and hopefully make the
170:19 - world a better place that's what I'm
170:20 - that's kind of my point of view there
170:22 - was a question about the shirts and I
170:24 - forgot there's another question oh am I
170:26 - a professor NYU yes I
170:29 - guess um no I do teach full-time at NYU
170:32 - a program called ITP it. nyu.edu it's a
170:36 - wonderful place I love everybody that I
170:37 - work with the students are terrific and
170:39 - I um I do these videos for my classes
170:42 - and then also put them on YouTube uh um
170:44 - do I want to fly into
170:47 - space uh thank you people are giving me
170:50 - nice oh wait okay there's a question in
170:52 - the slack Channel now how would a force
170:55 - like wind affect a jointed object like
170:58 - you just built since you would need to
170:59 - affect all the segments somehow rather
171:01 - than just the end this is such a good
171:05 - question boy that would make a great
171:07 - coding challenge so number one is I
171:09 - think that this you know I'm always all
171:11 - walking this line of should I use a
171:13 - physics engineer or should I just
171:14 - implement the math in my code and what I
171:16 - did right now was I didn't use a physics
171:17 - engine at all but I could potentially
171:19 - use something like box 2D and just make
171:22 - bodies that are connected through
171:23 - revolute joints which is essentially
171:25 - going to have the exact behavior of this
171:28 - um inverse kinematics and then what I
171:31 - could do is apply forces and then the
171:34 - physics engine is going to work all this
171:35 - out but let's say I wanted to do this
171:38 - myself uh I guess I would probably use
171:41 - the same iterative approach so the end
171:43 - point would be moved and the others
171:46 - would follow it and those would be It's
171:49 - Tricky so I have to understand I have to
171:51 - decide do you know how the forces
171:54 - interact with each other but um I really
171:57 - would still build on that Rippling
171:58 - effect so if the uh and this I think how
172:00 - we could maybe also if you think about
172:02 - muscles this is what I want to explore
172:03 - like how does a fish Propel itself it's
172:06 - not just because its head is moving and
172:07 - suddenly that causes its skeleton to do
172:09 - that wiggling thing so I think what I
172:12 - would need to do is apply the force and
172:14 - then recalculate then apply the force to
172:16 - the next segment and recalculate apply
172:18 - the force to the next segment something
172:19 - like that somebody in the chat I'm sure
172:21 - will have a better idea
172:24 - um oh that's wonderful somebody said
172:26 - they showed their
172:28 - 13-year-old uh brother some of the
172:29 - videos and now they're coding is coding
172:31 - train work or a hobby maybe
172:33 - both I consider what I'm doing with this
172:36 - in a number of different
172:39 - ways uh it was definitely both work I
172:41 - would say it's more work than a hobby I
172:43 - mean definitely started as as a hobby or
172:45 - I don't know if hobby is the right word
172:46 - as an experiment or something to do for
172:47 - fun now I feel a sort of obligation to
172:49 - it which is good and bad but I consider
172:52 - this my uh research a research component
172:55 - of my
172:56 - job um in experimental uses of Education
172:59 - I also consider it a side side project
173:01 - side business in a way uh I mean um so I
173:05 - would say it's a little bit of and also
173:06 - one of the things that I really do care
173:08 - about is the processing Foundation which
173:10 - is a non-for-profit organization
173:12 - dedicated to um
173:15 - um making code more accessible and
173:18 - inclusive through a lot of the tools we
173:20 - develop U and also thinking about art
173:23 - with code through processing a p5js and
173:25 - I view this CH Channel also as some
173:27 - evangelism for that project um to get
173:30 - more people involved and excited about
173:32 - it um for a fish the muscles would move
173:35 - first and as a result the whole body
173:37 - moves it's not like the head is moving
173:39 - and the body follows exactly that's a
173:41 - very good point there's some great fish
173:43 - simulation uh that actually do like
173:45 - fluid simulation stuff I don't think
173:46 - that's exactly what I I want to go down
173:48 - that road right now but fish simulation
173:52 - I saw when I googled this at some point
173:54 - O Roblox oh my god oh know I'm off topic
173:59 - I got to do some Roblox videos don't I
174:03 - um yes yes okay oh there's a Pixar in a
174:07 - Box video on conic cademy about the
174:09 - about like Finding Nemo and fish moving
174:10 - that would be great okay a one more
174:13 - question
174:14 - can you please tell how we can as a
174:18 - programmer can approach to a project on
174:20 - the solo basis also have you made mobile
174:23 - apps with processing those are two
174:24 - different questions I have not really
174:26 - done a lot of mobile apps with
174:27 - processing I have sort of taught and
174:29 - shown demos of processing with Android
174:31 - so you can use processing with Android
174:33 - and p5js is something you can do um with
174:38 - what was I gonna say uh oh P5 J because
174:40 - it's HTML CSS and JavaScript um you can
174:43 - just you can make a mobile app just
174:45 - through web Technologies and and you can
174:47 - just open it in the browser on a mobile
174:49 - device or you can use something called
174:51 - Cordova to actually turn it into an app
174:53 - um approaches to a simple raycaster
174:57 - videos with a Clips these are all great
174:58 - ideas um approaches to projects as a
175:02 - solo programmer I would say hey first of
175:04 - all why be a solo programmer find a
175:06 - community I mean I know this is not easy
175:08 - and and hard for people depending on
175:09 - their circumstances but the extent that
175:11 - you can find an online community a
175:13 - Meetup
175:14 - uh uh class you can take a collaborators
175:17 - I think that's always an exciting and
175:19 - great way to work it's it's hard to
175:21 - program as a solo program but I would
175:23 - say one of the things that I find really
175:24 - helpful and actually doing this channel
175:26 - forces me to do it albeit often in a
175:28 - incredibly embarrassing in fashion is
175:31 - when you have to talk through something
175:32 - that you're making it slows you down to
175:35 - the point that often bugs and problems
175:36 - that you couldn't solve you're able to
175:38 - solve so I get this all the time where a
175:40 - student couldn't figure something out
175:42 - and just through asking the question
175:43 - like they write an EMA email with the
175:44 - question and 5 minutes later I get an
175:45 - email oh never mind I figured it out or
175:47 - you know talking it through in in an
175:49 - office hours kind of appointment so one
175:51 - thing I would say if you're solo find a
175:52 - friend or somebody a family member um to
175:55 - try to explain what you're doing even in
175:56 - a higher level conceptual way and that
175:59 - can be um good um okay so since some
176:03 - people had asked um if you're interested
176:06 - I in some of the coding train
176:07 - merchandise uh I have coding.
176:10 - storenvy.com um this is a really a work
176:13 - in progress try to add more stuff as
176:15 - people requested here um that type of
176:18 - thing uh and then the other thing I'll
176:20 - mention is where was that um what was
176:23 - that YouTube video I showed
176:25 - fish swimming Windows desktop or
176:29 - something
176:31 - YouTube uh YouTube I Googled it and
176:34 - found
176:34 - it uh this is
176:37 - it so if anybody I know I'm not I
176:39 - haven't posted my code I can try to like
176:42 - just dump it and drop Doc and so tweet
176:44 - at me or I'll post it in slack Channel
176:46 - but um I would
176:49 - love can what I've built so far lead to
176:53 - something like this so how would we make
176:56 - something like this because I would love
176:57 - to combine this with like my flocking
176:58 - and steering Behavior stuff so oh rubber
177:01 - duck debugging yes so that's the rubber
177:04 - duck concept I need a rubber ducky I
177:06 - have so by the way I have a I have a bin
177:08 - full of rubber duckies at home and
177:09 - unless you think that's weird first of
177:12 - all I think it's okay anybody can have a
177:13 - bin of rubber duckies at home and it's
177:15 - not weird we should have coding train
177:16 - rubber duckies that is a great idea um
177:21 - right um rubber duck debugging is like a
177:23 - nice and friendly open kind of concept
177:25 - right so there's nothing like
177:26 - mean-spirited about it so that's why
177:28 - rubber d I think of it as you if you had
177:31 - to explain it to the rubber duck then
177:33 - suddenly you're going to understand it
177:34 - yourself so I guess you could just get a
177:35 - rubber duck it's nicer if it's a human
177:37 - being as nice as rubber duckies are
177:40 - anyway
177:42 - um and and so that was one thing so
177:45 - that's what I would love I would like to
177:46 - come back today it's going to be it's
177:49 - already 1:30 4 5 6 o' for like another
177:52 - hour I really want to do that waving
177:54 - flag thing as I have a good I'm G I'm
177:57 - going to present to you something that
177:59 - that is now known forever as the uni
178:01 - Kitty just think think about that what
178:03 - could a uni Kitty be that's very
178:05 - exciting that's what's going to be on
178:07 - this
178:08 - evening um and oh gerage is asking what
178:10 - I programmed today let's just quickly I
178:13 - programmed a bunch of things things and
178:15 - uh I also should add the thing where the
178:17 - end point is fixed so we were making
178:19 - some inverse kinematic tentacle stuff um
178:22 - so I want to do I want to maybe fix the
178:24 - endpoint make a swimming fish and a
178:26 - waving flag uni Kitty and show pressing
178:29 - Eclipse that's never going to happen
178:30 - today so I want to see if I can do some
178:31 - of those things later today so I would
178:33 - like from you the
178:35 - community I think the only thing that I
178:37 - need is well if um is anybody to see if
178:40 - you can make something like that fish
178:42 - thing and give me some tips on it may
178:43 - maybe don't give me the answer some tips
178:46 - and ideas you can give me the answer if
178:47 - you want I'll just I'll give you credit
178:49 - obviously but um I want to try to make
178:51 - that when I come back okay I got to go
178:53 - uh thank you all for watching I've got
178:55 - no music I've got nothing I'm all uh I
178:58 - don't I do have a train whistle and a
179:00 - bell and a couple different mugs got
179:03 - some T-shirts oh random numbers I've got
179:05 - to go thank you all for watching it's
179:07 - this has been three hours the camera
179:09 - just went off um so I'll see you all
179:14 - later today I'm doing now for some
179:16 - reason every Friday I'm doing this twice
179:18 - I don't know how that happened
179:20 - okay uh I'm sorry that the time is not
179:23 - good for every I got I I don't know what
179:24 - to do about that I wish there was a way
179:26 - to just make a time for these live
179:28 - streams that works for everybody across
179:30 - the world uh okay hey I'm going to stop
179:34 - recording and I'm gonna

Cleaned transcript:

good morning hello welcome to the usual Friday morning approximately 1030 a.m. eastern time in New York City episode live stream of the coding train All Aboard we are leaving the station almost mostly on time today and I hope that things are working oops I'm I'm trying to sorry I uh never never never again on this computer uh okay so please if you are seeing me and things are working and I'm live streaming let me know in the chat because I am keeping an eye on the chat now as I like to do at the beginning at of while people are getting sort of settled in with their nice warm cup of herbal tea and their pajamas with a blanket curled up on the couch I like to get started with continuing our oh wait a sec no no no no everything was I I had set everything up and I was kind of on time and now I believe uh hold on just got to work something out here uh what's going on here ah audio is an issue hold on everyone I had momentum I had Rhythm I had a whole thing I was doing uh let me just check here um why do I not hear hold on hold on hold on hold on yeah yeah yep yep okay hold on let's see if this works are you guys hearing any audio I mean music no you're not you're not you're not oh my soundboard is broken can I have a mulligan can I do this again please uh I guess I will uh what I'm going to do is disconnect uh and then I am going to reconnect try this one more time do not pay attention to what's happening here uh all right oh I need a new forget about this I need a new way of doing the whole sound thing let's just get going forget about my playing AI music and reading some random numbers I'll just come back for that later let's actually get started with perhaps what you are here today to watch which is some coding now um I I am a bit more prepared than usual and that I have an agenda let me pull that up whoa where did it go everything's okay so let me pull up my agenda right here uh there we go okay uh here we go so this is what's on the docket for today so I have some uh announcements to make about new things and scheduling uh I have some tutorials and coding challenges that I would like to do I have some other possible topics that I'd really like to do if I can get to it um I'd always like to um you know answer take a little bit of time to answer some questions from the chat and then also uh show a bit of projects that people have submitted from the community so let me get started here with uh a very exciting announcement which is that the coding train store what did I turn into like a salesperson look uh look this is my usual yellow mug but today I also have this mug on Q I I want to like do you think I can get a job at QVC with this uh with what I'm doing here but anyway if you're interested people have been asking uh coding train. stor Envy is the word but store Envy spelled uh with the E for both words so store with an e and envy with an e but only one e in store Envy uh hopefully I got that right because it'll be embarrassing if I get it wrong uh coding train storenvy.com there it is so if you're interested in I'm not actually I'm wearing my rogue NASA tshirt which is a great uh tshirt all the proceeds go to um uh girls who code and um some sort of math and science initiative from cotton Bureau which is a great tshirt company um but so I should but I did bring some of these shirts if you're interested you should get the Rogue NASA shirt uh here's one example of one and uh here's an example of another now I'm plugging this way too much that way more that I'm at all comfortable about so uh there's some shirts here there's some hoodies um this is sort of in progress and I'm going to add hopefully some other styles uh some some kids sizes and that type of thing as well um if you're interested in getting mugs you've got to go down here to this link where it says coding train mugs so I'm having a little bit of a technical issue with store Envy right now because the mugs and the tshirts ship separately so unfortunately um in order to charge for the shipping for each um right now they have to be in two separate stores okay that's all I wanted that's all I wanted to mention hopefully it works for if you have any issues um tweet me at shiffman I think I guess there's like a contact on here what happens if I go there oh I assume this message will go to me if you type a message in here with an issue uh okay so that's announcement number one announcement number two I know you guys have been waiting for this I've this has probably been the most requested topic uh since I started doing this channel but I am planning okay hold on there's a question does the Rainbow on the logo lack the green color because of your chroma keying that is exactly correct Alon in the chat this way I can actually wear it without being keyed out uh so I was saying something um next week hello Russia and Michigan next week I will be beginning my machine learning topic I'm teaching a course here at it a program called ITP which is part of TI School of the Arts New York University uh and the syllabus for that course which I really need to work on it actually doesn't start next week because next week is spring break for NYU um which one am I looking for uh if I can type this in the syllabus for this course is here on this GitHub repository if you happen to go to this GitHub repository right now there's very very little there so just sort of a skeleton of some topics I'm thinking about and all of these topics I will make videos about in this uh Channel over the next I would say seven to eight weeks probably um and so just to I did this last week but just to run through the topics again um some stuff about algorithms and search of network graphing stuff some just kind of classic machine learning algorithms that have to do with classification and prediction tasks uh looking at basics of neural networks looking at genetic algorithms which I already have a lot of material for but I have some new ideas for some new possibilities uh reinforcement learning in particular as that relates to some of the steering Behavior stuff that I've done previously and then some other stuff too so here's the thing you know how when I say quat qurans I have to run away even though I really do plan someday on trying to tackle what is a qune and why would you use it how would you implement it should you try to write the math from scratch use a library I'm interested in all these questions and I would like to tackle that on this channel I said it and I didn't run away it's gonna get me do I'm gonna hide so I kind of have a little bit of the same reaction to uh machine learning it's uh it's a little scary to me um this is not a topic that I have a long um history and expertise in so I'm trying to experiment which is to stretch myself a little bit on this channel I figure it's a good thing if I'm a little uncomfortable with some of these topics CU then maybe if I can figure it out a little bit it'll it'll help you guys figure it out too um but I I I'm going to certainly rely on help from the community a bit more and I have some uh wonderful people in my uh Patron group uh which is um a slack channel that you can subscribe to Via uh patreon. coding patreon patreon.com coding Trin who have been helping me um and so this is um so we're going to see but here's the thing what I really want to keep what I really want to keep a focus to and I I'm mostly talking about this to like remind myself is that I don't want to get lost in the weeds of es of sort of theoretical uh research behind in the in the lower level guts of a lot of these machine learning topics that's interesting important and vital research but my what I see that what that what I'm want to do on this channel is and I'm trying to find this line between let's actually write the code to make the algorithm and and and and and use that in our application versus let's pull from a library or framework and make the application so I'm going to kind of walk between those two things for example I think at this point I would like to build um whenever I get to week three a basic perceptron which is like the simplist neural network it's like a neural network that isn't even a network because it just has one neuron um and then look at how That's the basis for this idea of a multilayered feed forward Network so build some basic examples of simple neural networks to understand how they work what are the parameters of them what are they doing but to then at some point stop like for example I don't know if looking at this I mean I'm going to talk about what back back propagation is which I think is a very understandable concept but I don't know how far I want to go into all the math and implementation of that versus just kind of get build some basic examples and then you know maybe uh use a a framework something like tensorflow to then kind of get the implementation because really what I want to focus on is how can you be creative how can you improve the world with machine learning and and maybe the answer to that is maybe we should just slow down and give each other a hug forget about this machine learning thing but um but you know we can try we can give it a try uh and so that's what I'm planning and so next week I think I will probably start here although I I need to take this afternoon and some of the weekend to kind of sleep on this and figure figure some of this stuff out so um I would love any feedback any help if you have ideas for simple implementations and examples that can result in uh creative outcomes that's what I'm looking for uh great oh also I would love any of your so I'm trying to decide next week I'm going to be using a lot of my time to do some reading and watch some other courses some things uh you know I watch a lot of videos on S serology sj's YouTube channel um there's a great online course from a company called Caden which is called well there's Rebecca free brings course which is a wonderful machine learning for artists I think it's called there's also a course on tensorflow um and um what else so anyway so but I I like to read books even though I'm here making all I do is make these YouTube videos I I learn best I think from actually being forced to read a book away from my computer um and so if you have some suggestions for some good um machine learning uh texts that I might um use use as a foundation for some knowledge to build examples from I totally please tweet those things at me at shiftman um so that's what I'm going to be doing next week uh so that's that um so let me see oh is my audio a problem um so I hear somebody in the chat says um maybe you should work on your audio is there an issue with my audio sometimes the way I place my microphone is in an awkward spot and then I turn my head or something and it it cuts in and out but uh um so let me know if that's a problem in particular in the in the patron group because I can see that a little bit more easily than the YouTube chat I see people it's why is my fractal spirographic code not on oh did somebody H okay so I'm sorry uh I have to apologize um that okay so let's take a look I want to get going here but let since this was asked in the chat um let's check take a look so I am trying to uh keep up with oh I'm in the wrong repo so this is my repository coding train SL rainbow code this is where I uh keep all the code from all these videos that I'm making and then I have a new system and let's go down and let's look at um under challenges under uh really far down what am I going to do when I get to challenge number 100 by the way uh fractal spirograph I don't know which one let's look at this one um and then there and then I have this thing where there are some Community variations and I think I showed these last week so I saw someone in the chat saying why have you um not accepted my pull request so I don't know the answer to that I do know I do know one thing which is that I am a little bit overwhelmed with tweets poll requests Facebook messages email YouTube comments like I haven't I usually take at least um I usually try to take about a half an hour to an hour every day to respond to YouTube comments and I actually haven't done that in like two or three days I'm like way behind um so I'm trying to figure out systems for keeping up with this stuff but I I probably just missed this PLL request um I don't see which one it is so I'm going to have to look for this later um uh send um if you're in the chat and you posted about your poll request not being uh oh but it's not uh oh I see you accept it but it's not in your document okay so um how do I pick so this is another thing I don't I don't I'm learning figuring out what makes sense to do this how oh my phone is ringing look at this I can I can decline the call on my watch now okay this is not an Apple Watch though I know that I have a a lot of Apple products in this room not this one place where it's not okay um I'm trying to figure out the um I don't have a system for picking projects that I show uh and I think that I need to do a better job of figuring out uh what would be an a a fair and exciting and interesting way of doing that right now it's completely halfhazard so the except for one thing I I I'm I'm I post a thread in my Patron group and people uh submit projects there and then sometimes I pull something from Twitter which is what this first one is because I scroll through my Twitter feed and see a few like things that people sent to me and then I I just pull those so if you have ideas and I'll think about ways to manage that better I apologize that I don't have that particular project I do what I do like to do is um then go back to the previous coding Challenge and share some things that were that in that the fractal spirograph one is just a few weeks behind anyway so I'm off way off topic here here think about all that stuff later let's get going how what many minutes am I in here 15 minutes I have a rule which is that I must start coding by at least 30 minutes so let's see I'm very disappointed that my U oh that's promising hold on let's see here I just got to check something okay okay okay I think I know what the problem is if everybody hold on for a second Talk Amongst yourselves Talk Amongst yourselves I'm got to just check something here oh that's right let give this a give this a restart okay um all right so let's see here let's look at the um let me press this again turn this on uh come on okay let's oh I have a little bit of an announcement by the way this is like a small tiny thing but let me mention it uh I have not I recorded so much content last Friday and what I do is after a long live stream I think I probably did almost four hours of live stream last Friday and then all the edited versions get released I release them once per day um but um uh I had so much that I haven't actually released all of it but and let me just mention though the main coding challenge I did at the end of last week was Plinko let me see if this shows up can't remember if this is added one thing you can often do you'll notice that this is these are my most recent videos Plinko is not there when a video is ready even before I release it on a schedule since you guys are the core live viewers you can go to uh playlist for example and I'm going to go to challenges uh let's go to all playlist okay no hold on ah um I don't know how to I don't know how to operate this YouTube thing I don't know how to find my I don't know how to use it if I'm not logged into my account let me go to home no playlist is the right place clearly uh oh there's got to be down here somewh coding challenges so this is the coding challenge playlist I'm going to go all the way to the bottom look at this it's actually there so you should feel free to always check some of the playlists and you can see and what I'll tell you about what's special about this now you can just turn this off and go watch these if you didn't watch last week but this coding challenge 62.3 Plinko part three is actually a video that no one well not no one but almost no one has seen because I uh discovered some things about the Plinko simulation that I felt based on some suggestions from chat and Twitter or wherever it came from um that they needed some improvement and so I secretly came up in here and didn't live stream it and recorded I did actually do a test whatever I um recorded an extra section of that which changed a few things so if you're if you watch the live stream um and so don't feel like watching the edited versions I would say make sure go ahead and watch 62.3 that's actually new content the rest is just edited versions of what I did last week okay so that's there I'm going to release those over the weekend later this afternoon that type of thing okay um can you change m L to machine learning in your file sure oh yeah machine learning yes there we go okay so ah work from the community oh wait hold on I will just have to sing my lullab myself okay uh okay um so let's take a look first on this first one this is from uh C Carla on Twitter I just wanted to show Emily Shia did a guest tutorial about making a matrix rain simulation and there have been a lot of wonderful uh creative variations of it um and this is one that I just saw this morning that has uh color and there's sort different set of characters in it and um uh I really enjoyed seeing this one look and so then the other thing I'll mention is the if you if you go to this tweet uh you'll find the source code is here so this is a great I this is one of the things that I love about do operating this YouTube channel whether I make a tutorial or somebody else does to see this sort of tree of ideas that percolate out from a single example so thank you um for uh Carla for this wonderful uh version of The Matrix rain okay now I'm going to show uh some stuff from the uh oh and I need to have sorry I need to have uh I don't have everything set the way that I meant to look at this oh my God seriously uh hold on everything's going to be okay everybody uh this is from I'm going to start I think I showed this before but I didn't um I didn't kind of uh get all the details out about it so this is from uh I have notes Here Mr Muse addict uh and what it is is a oops Trappist visualization what is a trapist visualization it's the newly discover visualization of data around the new newly discovered Trappist solar system so I think when I showed this before I didn't explore everything it could do and so I really use the mouse wheel to zoom so that's the thing that I mostly missed so let's find oh is there no link to it running I got to find the code here ah okay so ah so this so I'm going to uh paste this into processing again we're going to look at this project okay here we go let's run Mouse wheel I don't have a mouse wheel that might be my problem Oh but I can do the two finger stroll so you can see here odd so this is really what I missed which is that you uh my you know that you can see that the data um you can kind of zoom in and out to see and what I love about this I guess is you can see the data about the planets in the newly discovered solar system in relation to planets in our current solar system uh great work thank you okay so now we're going to move on to the next project uh I'm going to go to um this code pen from Robin random oh I like random Walkers surrounded by their verono sector so so this is great I haven't done a tutorial or coding challenge or anything about verono tessellation verono geometry whether I'm pronouncing ver I just need to do a pronunciation challenge where I try to say the word verono correctly um and let me look in the notes Here submitted by Robin which is um uh This Is Random Walkers surrounded by their verono sector and this is using D3 so it looks to me I guess I I think the idea is that these are all moving all these little dots are moving and the verono calculation is happening every frame and moving the things around so I you can you can imagine a lot of possibility design possibilities that you could build off of this okay uh this is on code pen and all the links to these projects I'll put in this video's description okay now I'm going to go to uh this code pen from Ala and uh I'm going to just change the view to full uh whoa look at this rainbow flow and hex spins this is quite exciting and interesting um so these are particles moved by noise grouped into hexagonal bins using something from D3 called hexpin I have no idea what that is I'll have to explore that sometime with their color disparity being the amount in that group with some effects to make it look like 3D pillars it really has a quality of um uh uh almost like AR it's very architectural and I I love the idea that maybe I could kind of fly over it or uh you know what that game that I used to love called cubert or something it has exactly this quality where you have the little character who bounces down um really nice choice of color great stuff okay so um let's keep moving I'm just doing these quickly ah okay so now I'm going to get to something a little bit different which is uh C Manny has been thinking about so one of the things I have is I have and how am I on time I've got my limit I I hopefully it won't take seven minutes to discuss this but that's my limit 30 minutes of introductory stuff uh so if I go to the coding train GitHub repository rainbow topic isues and what what you see here is all of these submissions from people of different ideas of things that I could explore on the channel and there's so many wonderful things I would love to do double pendulum I love that double pendulum wonderful wonderful idea so one of the things I'm trying to figure out is how to best organize this into categories there's a lot of duplicates um how to um how to um how to allow for efficient up voting um so I can get a sense of if there are things that are particularly desired from the community um and so what the system that I have right now for that is just sort of a freeforall of submitting issues and then if I go under sort and I sort by thumbs up we can see oh look at that what's on the top here machine learning oh look at this mathematically involved yes um um or actually and uh planned meaning I'm planning to start tackling some of this stuff next week and eventually this this I do want to break out and this has got just like sort of a long list of stuff I want to break this out probably into separate uh issues to check them off one at a time so you can see kind of what people have upvoted just through the GitHub system and so C Manny uh has started working on maybe this is a visualization where you can see look at this where using I it looks like this uses the attraction Force Challenge and um the um uh um and also uh maybe matter.js for some of this Collision stuff I'm not sure I'm just speculating and so um this is a great uh exploration that we can sort of see like you know maybe we could use this actually a pick something at random and the the larger ones oh look at this I can drag it around machine learning is taking over um so anyway if anybody's interested and has thoughts or feedback about how to organize um there's a a gith there's an issue thread see if I can find it um I would suggest coming in right here uh where let me see if I can uh let me just if I search for topics no that's going to be in everything what if I search for C Manny no I feel like there was I somewhere there's a I'll find it somebody will post it in the chat that I feel like there's a discuss maybe a place where you could participate in this discussion or certainly you could go to um actually maybe what you could go to uh C man's GitHub the rainbow topics repo um there okay um let me um let me just get myself here open a little bit more I got this chat going I'm seeing the uh okay so now I'm ready to get started and I'm just gonna ah airplan Here Comes oh mirroring is it going to work I might take a five minute break later to restart my computer um because I think that yeah okay I'm going to do this now actually let's uh because I think sometimes everything just needs everything just sometimes needs a reboot so I'm going to go over to the Whiteboard which is and erase that and talk to you about some of the topics I'm going to do today uh okay so let me restart this computer and let me go over here you're you're in the void right now but I think you can still hear me and as soon as I press this button I'm going to be standing right in front of you it's a very professional operation I've got going here and I'm going to erase this you know what I would like to do this afternoon is I'd like to just come up here and wash this whiteboard just by myself could play some you know some Mozart wash the Whiteboard soothing tones that that's the kind of thing that really brings joy to my life but right now we'll just erase it and it'll be all smudgy it's fine you can see I haven't been here since last Friday okay so this is erased um so there's two um and let me just I'm back here uh I don't know what this is going to do uh let's see if this works if we can log in here H Computer is now Rebooted and behind me hello I am now uh going to wait for everything to start up we're going to give this one more try let's see okay this I don't need this is running okay so here we go and I'm connected to this wifi yep okay here we go one more attempt here ah there we go so now we've got the uh uh we've got this here okay fine fine go away okay there we go and now I can go to here is it g to happen is it gonna happen I have exactly 30 seconds in my half an hour limit so I will continue our coding train story book a million random digits with 100,000 normal deviates I need a bookmark a bookmark would really help it's really loud oh wait that's totally not working at all it it it disconnected I at least read one number for you guys 504861 that's a great number okay uh oh well um yeah people I am getting a couple of people saying that my mic is quite low compared to other videos uh I see like a nice green stretch but um let me I will I will turn it up a tiny bit I have a little dial over here maybe nicked so I'm just gonna up this dial little tiny oh now okay wait so maybe that's a little bit everybody says it's fine though so I'm going to keep it oh sound is good mic is fine okay okay okay okay I made it a little bit higher okay so why did this disconnect I I guess I have to give up on this because came back I don't know why it disconnected okay uh and then just system preferences and sound multi output device and as always I always forget the this do okay so uh what what I want to do I have two things I want to look at one is uh what are we at now 1110 so I've I don't know if I'll get to all of this but I want to look at texturing geometry um in processing maybe I should start with that so this is the last week that I'm going to uh finish off some new content in videos from the first course nature of code course which is more about physics and simulation and one thing that I've been wanting to do for a really long time is make a uh inverse kinematics example um uh which is a technique that you can use to calculate the positions of you know for lack for you know one scenario is think about how a robot arm works it's actually a an algorithm that's used in robotics but you know in terms of a visual example how might we make a a swimming fish or eel um a tentacle there's a lot of skeletal body type motion types things that we can do with this idea of forward and inverse kinematics so and there actually are um in processing itself maybe I'll start with this uh in processing itself um there are uh some examples I believe it's under under topics interaction yes so here under uh topics interaction there are examples follow 1 2 3 and reach one two 3 Let's just look at follow uh two for example I don't know which one this is going to be but you can see this is a two segmented arm that's following the mouse and let me move that over here so these examples are by uh Keith Peters I believe it says there and Keith Peters does it say that yeah based on or based on code from Keith Peters Keith Peters has a YouTube channel called coding math which is a wonderful YouTube channel especially if you really want to like get into the math stuff of stuff um and it's called coding math so you can find it I'll link to it um I believe that Keith Peters has a couple videos I definitely watched them quite at some point not recently on um forward and inverse kinematics so and one of the things about Keith's channel uh Co one of the things about coding math is that it doesn't use p5js it doesn't really use any Frameworks so for those of you who are kind of like that vanilla JavaScript raw guts of the code stuff um that's a great resource for you okay um so um so uh here we go let's see um I am now so let me think about let me think about how to do this ah wrong wrong button okay so I want to do what I want to do is um I think I want to just cover uh polar cordinates because I just keep using it in every single video I think it's worth making just like a 5 minute polar coordinates video I probably have one already from a bunch of years ago in processing um but I want to see if I could just do a really quick like polar coordinates tutorial in p5js um so that's one thing then I want to look at forward kinematics and maybe we can make like a jiggly tentacle like thing and then I want to look at uh inverse kinematics and we can make some you know just a simple like moving like snake like thing um tentacle snake uh and then I I really would like to do a like a swimming fish simulation so the problem you know I I I'll try to come up with a um so I don't actually have a sense of exactly how to do this but I have seen lots of really great demonstrations of it so I think if I can get through these topics while I'm doing that and building examples for those of you following along you might have some ideas that I can build into a fishing swish a fishing swish oh God my brain is not working a swimming fish simulation okay uh all right how's this working still this this whole sound system thing I've got going I have to completely revamp it and I'm on the wrong camera once again okay uh okay so I'm gonna get started I think what I'm going to do is I'm going to do my whoa I'm going to do my polar coordinates example with code pen why not um and I'm going to log in oh what's the chance I can remember this no I Do by the way use one password the problem is I don't have one password installed open on this computer that I log in for oh my God I'm gonna have to look it up I know where I can look it up bear with me for a second I'm GNA look up my code pen password uh uh uh okay hold on one password Here one password Tada okay I'm in my one password account I'm going to do a new pen uh I am going to uh I think I like this view uh and then I only really want to look at the JavaScript um and I'm going to say function setup up function draw I'm going to go to settings and uh JavaScript I'm going to add CDN op 5js CDN this is what I'm doing is I'm just setting up a code pen project to use how come that's not working uh CDN p5js I mean I I don't know why this does not coming up but I'm going to look for P5 here it is uh and click on this so uh the P5 library is a library that you can uh reference from your code in a variety of different ways you can download the library but one of the easy ways to do it is just to get this link from um cdnjs which CDN stands for Content delivery Network so I'm going to grab that link here I'm going to go to code pen and I'm just going to add external Javascript right there so now this codepen project will have a reference to p5js itself and uh I I think I like to make a pitch that P5 be nice to have P5 in this list here of things you can quickly add ah where did that go um and now I can just do save and close oh so a polar coordinates call it that um uh polar the the polar isn't there like a the polar The Polar Express The Polar Express to coordinates town okay and now if I say just to see if this works create canvas and background 51 and save uh oh do shouldn't this work now what am I missing uh console I don't see any console errors what am I missing here folks uh uh code pan afficianados copy in import did I not actually uh oh I have to oh oh whoops I have a typo in there thank you there we go okay great I'm live and working okay U Matt ask don't you need to B A div element to bind your canvas to so you don't actually P5 is set up in a simple way where it just uh what it does is it creates the canvas element and just appends it to the body of your document at the end so it's not the be all end all of everything but it'll get you it'll get you working here okay so um uh okay here we go I feel like I'm a little little having a little trouble getting kind of going today let me okay so this is going to go some in some probably if um Mato when you get to watching this Mato who does a lot of editing of these videos this will I think go in the nature of code chap it can I actually could go into p5js additional topics it could also go in nature of code chapter 3 um because that's also where I already have a video but we'll put this in p5js additional topics okay uh or it could be like a Q&A video whatever no additional topics is good uh okay hello uh welcome to a video wait I got to just get get right into it this is going to be like we're going to make a I'm going to be releasing a 5 minute YouTube video it's going to be very exciting hello in this video I want to talk about something called polar coordinates okay what are polar coordinates and I've been I've been making all these videos coding challenges where this scenario comes up over and over and over again I have a point here call this point XY I have uh relative that point I have some sort of angle call that angle angle what if I want to find a point out here based on that angle and a distance to that angle so this is what I mean by polar coordinate a a cartisian coordinate is an XY coordinate in it uh named for the French mathematician Rene deat uh an XY coordinate um in a twodimensional space so we we move over X spaces we move move up y spaces in the computer graphic system you know we've got the we've got the flip thing where we move over X spaces we move down X spaces and that's XY a polar coordinate is thinking about a coordinate that is defined by a radius or a distance for a distance um and an angle often using the Greek letter Theta to Define that angle the pro the reason the so both of these are useful ways of thinking about points in space if I want to do a spiral pattern polar coordinates are going to be really useful because I could just change that angle and maybe shrink the radius and I've got a spiral pattern the issue is that all drawing functions in a a computer Graphics things like p5js or processing or fill in the blank there think about Co really only think about coordinates in cartisian coordinates so the ellipse function which draws a circle takes an XY the point function which draws a point the line function the rectangle function all of these require XY so what if you are thinking about R Theta and you want to um you want to have your program run with this idea of R Theta but you have to draw with XY so we need a formula to convert from Polar to cartisian we also sometimes want to convert from cartisian to Polar I'll maybe I'll talk about that in a separate video but in this video I just want to look at polar to cartisian and the way to do this boils down to trigonometry trigonometric functions so if I have a triangle and I say this is my angle Theta oh I'm hi I'm over here time out this is going to get edited I'm GNA just shift the camera a little bit I got it got bumped just turn it a little bit there we go okay uh there we go oh yeah I'm back after fixing the camera um if I have this triangle I have a Theta an angle here this is my R right so I know this point what I want to do this is some XY what I want to figure out is what is this point and I'll call this uh uh X2 Y2 or whatever if we call this X1 y1 how do I get this point okay well if I knew what this was I'll call this DX as in like Delta X the change in X and this is dy the change in y if I knew these two values then I could say x1+ DX = X2 and and y1 whoops plus Dy equals Y2 so if I could get these two values then I could move from here to there so how do I get these two values from these two values and this is where's my Eraser this is exactly what we need to do okay I've drawn the same diagram so many times now let's just let's just make the math happen Okay so do you remember so at some point in your life you might have heard of a function called s or cosine sooa s equals opposite over hypotenuse cosine equals adjacent over hypotenuse that's referring to the sides of a right triangle and guess what this is a right triangle right here this is opposite to the angle this is adjacent to the angle so s OFA equals opposite Dy / hypotenuse which is r in this case cosine of the angle equals adjacent which is DX divided by hypotenuse which is r and these equations can be Rewritten another way I can simply say d y = r * s of theta now you might be asking how do I get from here to there one of the things you can do with an equation is you can multiply both sides of the equation by a number so if I multiply this side by R and this side by R this side becomes R * sin of theta and this side becomes just Dy because Dy * R / r r / R is 1 so this just becomes Dy and DX also becomes R * cosine of theta so now I have those two formulas so if I have this XY point I have an angle and a r a distance a radius or a length I don't know what to call it then I can calculate DX and Dy based on that and get that point let's make that happen in the code so I have a very simple code pen here open um I'm using the p5js library and so the P5 library is already loaded into this Cod pen project and the link to this code pen project will be in this video's description um okay so if you want to know how to do that I have another video about how to set up a P5 J Project in codeen so what I want to do and actually um just very very simply is I'm going to say what if I have let me just do this all in setup I think right now and we can or or in draw it's fine what if I have an X and A Y which is like 100 100 can you see this font is very very um small hold on a sec we'll edit this out I think I need to make the font bigger um so how do I where is that under settings is that like where do I set my font size settings somebody who uses codes Spen more frequently let me know uh can I do it here tidy maximize minimize settings I really want it to be in settings I'm waiting for somebody to tell me uh I saw people typing things font size looks good it looks so small to me you really can read that uh I could do the browser scale thing but I hate doing that because it makes everything bigger there's got to be a way maybe it's under here uh let's try this let's try this settings uh okay hold on stay for a second save uh yeah I don't want to do I know I could do the command plus thing but there's got to be a way here we go code font size let's try 26 save all settings and then let's go back okay that's better okay I'm back with a bit smaller a bit bit larger font so now I just want to draw a point at that XY and I'm going to say stroke 255 to make it white there you go look at that tiny little point there it is hi tiny little Point okay now it's a happy point I I've been wanting to say that for so long uh okay stroke weight let's make it a little bigger stroke weight eight uh okay there's my point Ah that's not a good location for this point let's put it uh further down at 300 okay now what I want to think about is let's say at this point I I want to have an angle of 45° so I'm now going to make an angle equal to 45° now here's the thing 45° in a computer program is goes this direction so actually what I really want I can't is 45 degrees this is so hard 45 degrees this way which is negative 45 and 45 is uh I'm going work in units of measurements called radians no stop now right now go back so here's the thing I always get into these videos I'm like okay well do I need to explain radius and I do that in a different video should I been doing that in this video am I going to take two minutes to explain radians now let me do that again and I'm just going to use I'm going to set angle mode to degrees okay so I want 45° a 45 degree angle 45° uh uh because because y points down will actually rotate me this way and I want to rotate up so I need 45° now I keep saying degrees because that's the way I tend to think about it Les 45 90° 360° um most computer graphic systems will think about angles in a unit of measurement called radians uh 360° is 2 pi radians in that that's something that uh um that I'm going to just sort of ignore for this particular video and I'm just going to say angle mode degrees so now P5 is going to think in terms of degrees and I'm going to say angle 45 okay now what do I do here I remember I I need to have a distance so I'm going to just say maybe 100 pixels out 100 pixels and I need to calculate VAR oops Ral 100 and I need to say VAR uh DX then equals um R * cosine of that angle and Dy = R * s of that angle and now I can simply just um now I can simply just make another point at x + DX and y + Dy and let's see what we get there it is 45° and I could also connect those and I can connect those with a line and you can see whoops and you can see there I have this line now I could change that angle so now I could say let me have the angle be mapped you know I should actually um let me have it just be mapped to Mouse X so Mouse X which goes between zero and width I'm gonna have the angle between negative pi and Pi oops oh no no sorry negative 90 and 90 because I'm doing this in degrees and you can see here as I move as I move the uh Mouse it's changing that particular angle okay so this is the idea there's a lot of applications of this um you're going to see that one of the reasons why I'm making this video right now is I'm about to do a coding challenge about something called forward and inverse kinematics where if you think of this as one segment of a robot arm what if it's attached to another segment and another segment and how do those all rotate relative to each other so this is the kind of thing that you need for that I should mention that you can also I could have made this exact same P5 sketch with just uh the actual rotate function so there is a rotate function can draw a line a line I can rotate it by an angle and that would actually be a wonderful perfect way of doing this as well um I have some videos about that um probably as well about how to do Transformations using rotate and translate but I in this case for this kinematics example that I want to make um having um having the the doing doing the polar to Polar to cartis cartisian conversion in the code is a good thing okay I will see you guys in a future I hope this video was somewhat useful to you I'm I'm I'm a little off balance today what what was that like 35 minutes oh and then the camera goes off I'm checking the thermos that over here because uh okay so okay now that I did that in code pen I'm going to almost absurdly move move to a different programming environment over here what time is it 1130 uh and this is called this is processing and I'm going to save this on the desktop as uh uh let's call this forward yeah kinematics because that's what we're going to do I'm going to add setup I'm going to add draw uh okay here we go now I am going to I'm uh I'm uh Michael in the chat writes I'm surprised that the camera do the camera doesn't drive you crazy turning off oh it does drive me crazy uh okay um so now what I'm going to do here is I'm going to look for my Eraser which is over there and I'm got to fix something here with the microphone and I am going to hold on one thing I want to look just bear with me for a second I want to look for something here uh yeah uh interactive fish aquarium desktop wallpaper um okay look okay I'm coming at there's a reason why I was doing this interactive fish aquarium desktop wallpaper YouTube let's see if this comes up right is this the right okay so this is uh one of my students here at ITP uh pointed me to this particular example um with a fish P I guess this is a interactive desktop you can get and it has these swimming fish and so I really wanted to figure out a way to create this kind of simulation and my suspicion is that the uh concept of kinematics whether it's forward or inverse which I will get into is a key to unlocking something like this um now there's a lot more go because this just connects so nicely with the flocking simulations and the different steering behaviors so this is something I really um curious to see if we can if can figure out a way to tackle it so what I'm going to do is I am going to this morning build uh whoops uh I'm going to build um if I play this again I'm going to build basic examples of forward and inverse kinematics um and let me just show you those actually already which is I uh this well uh whoops this follows so this is an example of this is an example of inverse kinematics um and so I'm basically going to do the math and I think follow 3 does what I'm going to do which is that if I connect this with a lot of segments it gets much more interesting than just these two segments so you know I'm kind of imagining this as like if there's like a sine wave controlling this that then affects what's connected to it that you might get that kind of fish swimming effect so this is really oh and I'm um so I want to build these this morning uh it's not the morning anymore it's 1130 I want to do this a forward and inverse and I'm guessing this is going to take me about an hour that means two hours and then I'm going to go away and I'm going to do lots of other work and answer lots of emails and catch up with a lot of other things and then if I have time I'm going to come back and try to make a fish thing based on these core examples so uh in the meantime when I'm away if those of you who want to try to make the fish thing and send me ways that you did it I would love to hear from you and that'll help me okay um yeah this I I apologize that this labtop um I really should uh put the second laptop that I use I should put something green on it maybe I'll try to do that that's a great suggestion maybe I'll try to get that for later today okay uh all right so let's get started here um so what actually let me open up let me open up um sorry under examples and let me open up reach three no not reach let's do the follow actually reach is a good one now let's do the the follow I don't know doesn't matter so here's here's what you can see so this is what I'm intending to build and this is Keith peters's example from coding math right Keith Peters and coding math that's the same person am I right somebody tell me if I'm wrong uh okay put on some face pain all right so let's um look I think one of my problems today is that I'm not staying very hydrated somebody on Twitter asked me what brand of glasses these are I have no idea Garrett light California there you go okay they really need to be tightened they kind of like fall down a lot okay never forget this dot I'm going to do the this this dot this dot this dot the this Dot Song never forget this okay here we go somebody compose that song for me I'm so distracted I know it's a little it is really distracting I've got all these different chats going I've got lights and cameras everywhere computers things are blinking at me I need a way to do this being less distracted okay but I'm going to get started so let me minimize this let me minimize this let me actually go to the H it's fine um you know what I think I like the I think I like the reach example better to show yeah also I don't have to operate the mouse oops oh did it close that ah I feel like my evening live streams are always better than the morning ones I always thought I was like way more on top of things in the morning and now I'm now I'm wondering about that once again I didn't get a good night's sleep last night that seems to be the major problem uh okay um reach three okay okay um what do I need over here I think I think I'm just going to get rid of all this erase it I'm definitely going to need to do some diagramming the funny thing is I have definitely built at some point in the past inverse kinematics examples but I have I don't think I've ever done the forward kinematics which in theory is like the simple thing so but I'm a little bit nervous about doing that we'll see what we see what see what I get okay I'm put this over here and you are the person I'm talking to my glasses are on my face I'm oh I'm in the wrong camera shot ah I used to not have a problem with remembering this okay um let's see okay here we go welcome to a multiart coding challenge series on kinematics this is an example from processing uh processing a Java based platform open source uh creative coding environment that I use in a a lot of my videos um this is an example by Keith Peters from coding math uh of the coding math YouTube channel which I also highly recommend I believe that Keith Peters has said video tutorials on this exact same topic with and if you're looking for the video tutorial where somebody who really understands the math and doesn't make any mistakes um I would recommend that video to that channel so just go leave and watch that channel but you can see this is an example called reach three and what you can see is that there's this bouncing ball moving along and that there's this kind of tentacle thing that's just reaching out trying to touch it trying to catch it and then move along with it and it behaves In This Very I might say robot arm like fashion so this is an implementation of something called inverse kinematics which refers to the motion of ected segments from the front to the back so the front is what's really controlling it it's trying to reach and how should all these other segments be oriented so that that front can get as close as possible to this target versus forward kinematics which is like you know I'm going to move this how should the rest of my arm move when I move this part of my arm which is different than well I I want to inverse which I need to move my hand how does the rest of my arm move in order to get there so I want to do both of those things with the goal of making like a swimming fish or a weird goofy tentacle thing really the goal of like showing you how these things work and then you making something that's creative and colorful and exciting and lifelike and crazy and weird or beautiful or whatever so um let's get started let's look let so this video I'm going to do forward kinematics and then I'll do some other videos that I'm not sure yet so let me move over here and let's discuss what the core stuff that we need to build into our code is so we need so the idea is and if I just think of it as two segments that I need to have these I think I'm going to call these segment objects so I'm going to have segment objects that almost as if they're connected with a joint now by the way you could probably do a lot of this using a physics engine like box 2D and a revolute joint which I have other videos about but I'm going to do this without a physics engine just kind of with the raw trigonometry math that we need so the idea here is that I have a segment and every segment would have a a a kind of starting point a we'll call this point a which is an XY point it also has an end point which I'll call B which is also an XY and one of the crucial pieces of data that I'm going to need is this angle so first all I want to do is create one segment with an angle change the an angle and a length sorry what key the distance between these two points is the arm's length the segment's length so I want to just create one segment with A and B points and an angle and I want to be able to turn it let's just do that to start so so to do that I'm going to get out of this example here I'm going to create a new tab and I'm going to call it segment I could probably think of something better but segment I think is a good and actually that's probably from Keith Peter's example I'm sure that nomenclature is used there so I'm going make a segment class and what did I say each segment needs it needs a be a start point an A A I'm going to use a p Vector object to store an X and Y for that point it needs a b I'm going to use use uh that's its end point it needs a length which is the distance between those two points and it needs a angle which is the angle now here's the thing now what I'm realizing if I go back to this drawing is really the information is a length and angle B is a point that I calculate based on how that angle is changing and this relates exactly to this idea of polar and cartisian coordinates and I just made a separate video about that if the what polar cartisian coordinates are I would uh you find the link to that video in this video's description but the short version of that is if I have a point here and I have an angle and I have a a distance a length a radius from here to here I can get this point by by by saying R cosine of theta R * cosine of theta and R * sin of theta will give me the uh the the how far to move along the xaxis and how to far move along the y axis to get to here so those formulas I derive and explain expl them more in a separate video that you could look at okay so if I come over here what I'm going to do now is say okay what when I create the segment what does it need well it can get an X and A Y like where is it and it can get a length and so I'm using just different variable names for the parameters that get passed in and it can get an initial angle so what I'm going to do now is I'm going to say a equals a new P vector at XY length equals whatever length we specify and uh the angle equals whatever angle we specify that's pretty good and then what I can do next is let me just write a function called show where I'm going to draw it as a I'm going to say stroke 255 stroke weight two or four and then I'm going to say line from from from a.x a.y to b.x b.y okay so now the idea here is that I can say something like segment seg for Segment uh seg segment is a new segment and maybe I'll have it uh start on the left hand side of the screen and point to the right so it's going to be at something like 10 comma 200 with a length of 50 and an angle of zero and then I want to say segment. show so now I have this idea of a segment it starts at you know if I if this is my canvas it starts right here at like 10 comma 200 it has an angle of zero and a length of I don't remember I said 100 so I should see something like this on the screen now I've missed a key step here I missed it on purpose but let's let's just see uh what happens that of background and now let's run this okay I got an error I got a null pointer except ception so what does no pointer exception mean by the way no pointer exception means you're trying to use something whose value is actually null and so you can't use it the value is null nothing sadness void sad nullness let's let's get it out of being null and the thing that's null is not a a is a vector B was never calculated so like I said B is a thing that you calculate based on where a is what the angle is and what that length is so I'm going to write aun function I think I'm going to write a function called uh calculate I don't know this's probably a better name for this calculate B update and something like that so I'm going to do that calculate B and so how do I do this now I could do that math all I need to do is say hey DX the change in X is the length times cosine of the angle and the change in y is the length times s of the angle and then uh B is a new P Vector which is X Plus DX y + Dy so I now have uh oh no sorry a.x a a.y so I now just calculate what is the change along X and Y from a based on the length and the angle and then give me that new P vector and if I say now in setup in the in the Constructor calculate B we now see there it is there's that segment with an angle of zero now let's let's see if this is really working um let's change the angle to U and I need to work with a unit of measurement called radians so if I um if I just want it to be 45 degrees or negative 45 degrees convert it to radians um now you can see now it's pointing upward so we got the idea this is working I have one segment yay now okay so what's the next step here I need a break I'm going to keep going okay what's the next step here there's there's a few different things one is maybe we should see maybe we should make that angle change um so I'm going to write uh a function called I'm going to say in draw I'm going to say uh uh let's let's let's leave that to later actually I was thinking like we would use pearing noise to make the angle change or just have it turn around that type of thing um but I do kind of want to move it a little bit over and maybe make it a little bit longer so let's do that okay so now what I need to do is I need another segment I need another segment that connects to that segment I think about this do I want to introd I I'm probably going to need an array but I also need the segments to have an awareness of which one they're connected to so actually first let's add something the segments need to know the segments are going to need to know who they're connected to and I'm going to call that a parent so this particular segment oh I got a great idea this particular segment that I made has no parent the parent is null but I'm going to make a new segment that's connected to this one like I want to say segment segment two I really want an array but I'm going to do it this way just for a second I going to say segment two is a new segment and I'm not going to give it a position I'm just going to give it a parent right I want to be able to say I sometimes want to make a segment at this exact location but I sometimes just want to make a segment that's connected to another segment so they have two different ways of making a segment and guess what in Java which processing is you can have two different Constructors and you could just write both of them so this second Constructor is going to be just like the first one but instead of taking an XY a length and an angle it's going to take another segment I'm going to call that app parent and a length in an angle so its a position is actually so first of all its parent is not null its parent is equal to its actual parent right the one that was assigned and its location where it is is what this segment location a is at the exact location where this segment's location B is so all I need to do is say it's location a should be at parent. b.x parent. b.y okay so that's another way and then the rest is the same length angle calculate B okay so this I think is good and now I'm going to say segment two segment two show hey look at that and its angle is also 45 well let's give it a different angle just so we can see uh let's give it an angle of zero we see there's are two segments now here's the thing I haven't really connected these things like one of the things I want to do is I would like the um what if I just wanted them to spin so what if I put them more in what if I put them in the center and so that's that should be in the center and I'm just going to say I'm going to write a function called like update where I say angle equals angle plus 0.01 just so it rotates kind of slowly and I'm going to say segment one update is that too slow oh Al so one other the thing is it's doing it the angle's changing but guess what whenever the angle change I need to recalculate the end point I don't see anything because I haven't updated I haven't calculated B so anytime I changed the angle I need to recalculate its end point so the angle changes recalculate its end point now let's run this again there we go ah but that other one is not moving it's not connected to it that's no good right I need to say that uh I need to say basically like if I have a parent when I update myself if I have a parent or parent is not equal to null then what I want to do is um and um then what I want to do if parent is not equal to null sorry I'm like thinking about this what I want to do is get my angle well okay a couple things first I need to set a my point a is equal to uh parent. b. copy so that's by the way another way I did this here I um I just made a new Vector from parent. B so another way I could do this actually that's a little bit more less code to write is I could say parent. b. copy which just makes copy is a function that's part of the P Vector object that uh copies it so I could always uh update by uh making um saying that and then I can now now I need to update both of these so now we can see that they are both that that is connected so as one turns the other one is connected so this is really uh forward kinematics yeah I could do someone in the chat is saying I could say child not parent and that's actually a very good point but you know I I just thought of it that way probably because I somebody else implemented it that way so that you know that would that might be a good Improvement maybe I'll double back and kind of see if that's a good refactoring but I encourage you to try that as your own exercise to use uh to to create a child rather than a parent um and so now what I should be able to do by the way um is yeah because when I iterate over them I guess I could start at the last one but if I had child I could iterate forward through them so now you caught me but I'm going to keep going with the way that I'm thinking about it and let's see if I have some time at the end I'll refactor it I wonder if I should refactor now time out thinking about this um you guys I that's why sometimes it's great for me to look at the chat and sometimes it's kind of problematic I'm trying to think of changing it to child is better I like the idea of being able to pass in the one that it's being made from though I think I'm going to keep it for now because the next thing that I want to do one thing I'm wondering about is why is this second one oh it's spinning oh it's uh yeah it's actually okay okay you know what I created something accidentally that's working okay I'm coming back in okay I'm actually going to keep the parent thing but I I think this idea of having child references versus parent references is something that is worthwhile considering here's the thing though I just realized this is kind of working in a way that it's supposed to by accident and so one thing I want to do is I'm going to I want to segment out this idea of it Ro of the angle changing from it updating based on its parent so I'm going to just do um I'm going to write another function I'm going to call it like wiggle or something or I don't know like yeah let's just call it wiggle because eventually I'm going to have the arms wiggling maybe and so that's that's where the angle changes and then I want I'm going to call update separately so because I want to show you what's really going on here because what happens if I only wiggle segment one and it's not wiggling it's turning you can see that it's actually that segment is always keeping it it's not it's not it's not moving along with it realistically it's always keeping its original angle pointing to the right so one of the things when you up update in forward kinematics as I'm moving forward from arm to AR from segment to segment to segment I always need to bring the parents angle along with me or pass the angle from the parent to the child so that happened accidentally because I was rotating both of them equally but once they're rotating in different ways that won't work anymore so what I want to do here in addition to a up update just pulling in the parents location I also want to take my angle and offset it by the parents um the parents angle is that enough is that all I want to do let's take a look at that no oh that's kind of interesting though um hold on I have to think about this what did I do wrong I don't want to I don't want to oh I just need to start it at that angle or by that should work right wait wait what wait what did I do wrong it's angle what did I do wrong here it's kind of Interest I just want to oh because it's plus equal equal to the parent angle no plus its own angle equal to its parent angle plus itself which is this problem I cannot keep summing yeah I have to start over each time oh I have to keep track of them separately right yeah yeah I like how people sorry I shouldn't look at the chat people are very unhappy with the fact that I don't know what I'm doing which is the point you know yeah is kind of a it is something that happens here in my life okay a lot okay I cannot keep summing so hold on so let me go back to what I had there plus equal parent. angle so this is this is way off as you can see because I'm accumulating all the time I want to pass off the parents angle but just as an offset to whatever its own angle is actually doing so in a way I kind of need two variables here which is um I need it to do its own thing and then always just add so I need to calculate its own angle based on some something that it's doing which ironically I think if I um and then add so if I just said angle equal if I just start with angle equals zero and then add the parents angle oh I think the I think the issue is actually that um I I do need two you the issue is actually that I'm going this rotating the arm thing is sort of not that necessary because I'm going to calculate things in a different way but I do need two variables self angle and parent angle yeah so what I need is uh yeah yeah yeah yeah yeah yeah okay okay okay okay I need its actual angle and then I think what I'm going to do is I'm going to say a self angle I'm going to create a variable called self angle that's a good suggestion self angle and I'm going to and I'm sure there's an easier there's a there's probably a condensed way of writing it but just the way that I've created this example I'm going to have self angle start at that same angle and then angle is always uh self angle is the thing that I might have some algorithm to change it and the angle itself is always um um so uh what I'm going to do is angle equals self angle right everything that's updating takes its own current angle as itself and then adds on there we go adds on the parents angle I think this is going to work there we go so now uh and so let me see what do I have here what are the oh because the the angle is zero so the angle is zero and this is exactly what I want it's zero relative to whatever its parent is and now if I actually gave it instead of you know also 45 degrees we can see now it's moving this way there we go this is what I want so this this angle turns what the the the parent angle turns and the other angle updates whatever its own angle is relative to the parent so they can each have independ independent calculations for calcul their own angle so now what can I can start to do some interesting stuff here so for example I can say SE 2. wiggle and that one is going to rotate itself along so it's rotating relative to the other one now I don't really necessarily have something that interesting here they're both just rotating and this is weirdly very similar to my solar system example where one thing's rotating around one thing and another thing's rotating on another thing but I think we're going to get something much more interesting if if we use a sine wave to rotate them or pear in noise let's try using pear in noise so I'm going to add uh I'm going to add a a variable called X offset which is just going to be some random value and I encourage you to go back and look at some of my pear and noise tutorials um if pearly noise is a smooth Randomness and then in wiggle I'm going to say self angle equals the noise function I'm going to map noise of x offset which has a range between 0 and 1 to like between 1 and 1 and those are some arbitrary angles in radians and then I'm going to increase X offset over time so now O Okay so that's too fast but we can see here now I have this kind of arbitrary moving almost like wiggling tentacle like thing so is the stream out did it freeze everyone's saying it's frozen but I see it's still working hold on I'm pausing I was offline for 30 seconds I can't explain why well you know what I want to double check something I'm on the NYU WiFi h i I have this plugged into the let me make sure it's plugged into the ethernet Network it is I want to turn WiFi off um but I'm afraid that's going to break something I'm going to turn WiFi off I have a feeling that sometimes causes a problem that it might break it again let's see I think I'm still here hopefully I'm still here people tell me if I'm still here uh okay let me press these buttons it's very disconcerting um stream is better now yeah you know what I forgot to turn the WiFi off and because the whole point of this is I have a really good fast hard Network here and um I think when it's connected to both it probably also uses the WiFi um okay so I'm back with this wiggling tentacle thing which I'm going to improve on in a second um okay okay here we go let's keep moving on here okay so now I have this wiggling tentacle and I'm kind of mostly done with this idea of forward kinematics but I want to improve on this a little bit so at very least this is not a great this is not a very sustainable uh path so what I want to do is either create an array or some other mechanism um and actually I think I'm going to try doing this without an array so I'm going to and I'm going to use kind of a concept called a linked list where every object is just linked to another object and I can can iterate through them that way so I'm going to create uh something called a tentacle I'm going to make my variable called tentacle and tentacle is a new segment um uh tentacle is a new segment that's that starts at 300 200 with a length of 100 and radians of 45 so now what I'm going to do is I'm going to say 4 in I equal 0 I is less than two I'm just going to add two segments to it um segment next okay so hold on what I want I want uh I want to say something like oops say oops hold on I want to say something like segment current equals tentacle okay then segment next equals a new segment whose parent is the current one and then the same thing length 100 let's just do angle zero and we're going to start this with an angle of zero too there's no reason to um to have that anymore okay so and um so the next segment is a new segment attached to the current segment current being the tentacle which is kind of like the root and I could call this root if we were thinking about of a tree and then I can say current equals next so what this will do is say I have a segment attach the new one to that then make that the current segment so the new one attaches to that so I think this algorithm should work and I should be able to just say now I could just say tentacle wiggle tentacle update tentacle show what this should do is if I run this it's working but I'm only seeing that root one the root segment I don't see the one that's attached to it so what I can do now is I can say segment current I can use the same thing equals I'm just call it next actually because I just for this loop I can say segment next equals tentacle while next is not equal to null then I can wiggle update and show it and then I can say um I can wiggle update and show it and then I can say next equals next dot oh wait I have to go backwards ah this is why people were telling me to use parent child so how can I um so let's add child I'm going to have both let's add and you probably don't need both but I'm going to add a child reference as well so this is like a is that called double link list where they're linked forward and backwards so um what I'm going to do here is when I'm creating them next is the new segment and then current. child equals next so I'm also going to link it that way um and that way now as I iterate through them I could say next equals next. child so I did this in a little bit awkward way maybe um so in other words okay uh this is hard to keep in your head but let me try to say it again I'm starting with and and actually it might make sense if I diagram this but I'm starting with the the root not the root segment the first one I make a new one that's attached to it and its parent gets that current one and the current one's child is the next one so they're both linked to each other and then current becomes this so that when I link the new one I link them with the same parent child relationship so that I think should work and now I can iterate them I start with the root and I wiggle and update and wiggle and update going from um iterating through and eventually one of them will not have a child right because it um next next will be null so I should I should say just here by default it's null because at some point we'll get to the end at some point in this Loop will get to the end and then it won't come back in so the last one won't have that child so as long as as long as it's null okay so this should work yeah there's all three of them okay all three of them wiggling with their weird pearing noise thing so let's make this a little bit more interesting um let me think about let me I kind of want it to feel more like a tentacle from the bottom so I'm going to give its initial location uh width divided by two and the height so at least it's kind of starting from the bottom there but now I need to think about how that range of angle so the range of angle should actually be between um around around 90° right because that's pointing up so I want to offset that so the the what I'm mapping to is like whoops uh the max angle is something like piun / 2 plus you know 1 and the Min angle is Pi / 2 minus one so I want to map the noise to Max angle Min angle I have a feeling like a sine wave might actually work better than this um and now we can see okay we can see what it's doing now it it's got a pretty broad set of possibilities in terms of its angle so let's make this uh let's make this like quite a bit smaller oh wait why does it what did I do wrong here oh because they're picking up from wait a sec oh I don't want them ah I only want the first one pointing up the rest are all relative to the ones below aha I don't know why I decided I had to do this like kinematics thing so let's actually leave it at 0.1 negative point1 and I'm just going to do something kind of like hacky which is to say um if it doesn't have a parent uh if it if it doesn't have a parent I just want it to point up because I want the whole thing to point up I'm going to say angle uh plus equal / 2 all right um so that should yeah so that has that just has the first one pointing up but the rest pointing to the left and the right okay so that was a quick little fix and now I can make this um much much bigger of a range and the other thing that I really wanted to do here is I can make a lot more of these so let's make 20 of them and let's just make the segments like 10 pixels long and so now we have this wiggling tentacle like thing with pearing noise I don't know what it's going to do I kind of want the range to be bigger uh you know this is the kind of thing that it can play with forever so let's make the range uh bigger and let's maybe have the offset oh you know what would be interesting to do here I have a weird idea which is to um have the offset move a little faster yeah so we can see this now I don't know what this is this crazy creepy AR why is the first one did I make the first one is still has still have um 100 ah so let's make this one 10 right so we can see here's my crazy creepy tentacle arm thing that I don't know what's trying to do but there you go that's forward kinematics let's change it to a sine wave just to see what we get so instead of using uh pearlin noise I'm going to map a sign between Max angle and Min angle let's try that whoa okay and that's like way too much so let's give that much smaller angle so we can see now now oh and they're all starting so actually what I Want U this is I'm getting ridiculous here but let's all start them with this yeah so this actually if I give them a perfect sine wave it's just going to curl onto itself but if those sine waves are slightly offset from each other I'm kind of I'm off the rails here the train is derailed for sure but let's let's let's make this a little bit more interesting what I really want to do is add this as a parameter to the segments so I don't want to just have them all be zero or all be random let me show you what I mean I want that X offset which I'm using essentially um I think in the coding math YouTube channel I know that he used used a variable called phase which is kind of what I don't know if that's right though but it's like it's the thing that you're passing into s or cosine I often think of it as time so let me use let me use a t for time and I'm going to add another argument here and I'm going to set T I'm going to do this T equals T and I could I could really improve the way that these Constructors are uh are I could combine the constructors in a in a probably in a in a better way but so let me just let me just add the last argument here we now each of these each of the the segment always gets its time the the the thing that you're passing into sign or noise or whatever to set the angle and um what I'm going to do is I um just pass in zero here let's pass in zero for all of them and we should have the same exact thing uh and oh except for I want to call this T now and T moves up by a certain amount okay so now you can see this is what happens when I have the sine wave there we go people in the chat are asking what's his goal I have no idea this is by the way a way to think about creative coding this is this is stream of Consciousness improvisational I don't know where I'm going I'm just playing around and I I really should stop soon though so okay cuz I'm I'm kind of off in the weeds here but I I I think there's an interesting aspect here that I could do so now everything starts at zero but what if the phase we can use the word phase here maybe or or I can just say t actually T equals zero T goes here and then in this loop I say t plus equals 0 uh 1 so what if they're all just slightly off phase from each other now you can see I'm getting a sort of more uh a a a bit of a different kind of quality to this now it's very much of an exact repeating pattern so I think if I also changed you know not only the period of these oscillations but the um um not sorry not only offset the uh where they are in terms of their oscillation but change their period um which is or frequency so that's that's this variable here okay I got to stop now and I'm I'm going to let uh I'm going to let you guys play with these ideas but I would I have a suspicion that if you mess around oh you know what look what I did sign has a range I was using the range of output from the noise function which is absolutely not correct the sign function has a range between negative one and one so that's why by the way it was going um so oh I think I'm getting close to this swimming fish kind of quality too as well so um I kind of want to put the plin noise back in also now that I have this idea of them being slightly offset from each other so let's put noise and we can see we can see I kind of got this uh also this wiggling quality to them to it and I I kind of want to make the range a bit wider uh to see what the sort of possibilities are so you can see I think that you will probably come up with a more creative way to make use of this forward kinematics idea um and you know it' be really interesting to now put an array of all of these across the bottom or you know map them to the O this would be great make you could make a creature like a circular creature that has all these tentacles uh uh attached to the edges of it and it kind of Wiggles along like a centipede um try to make uh Nuno in the chat is saying try to make the segments go shorter as they reach the tip and that's certainly an interesting idea let's try adding that really quickly so right now the segments are all so I could do something like float length equals 50 and start uh with that here and then I could also shrink the length so I could say like length equals itself times 0.9 so they're like 10% shorter each time okay let's make them half as long each time so you can let's make them 75% as long each time so um you know I'm not making it obvious to see how that is because I'm not drawing I could make them different colors but you can see there's a lot of variables you could play with here so I hope that you enjoyed this forward kinematics coding Challenge and in the next video what I'm going to do is do the reverse of this where I actually am starting where I want the end to be and and how does the rest of it behave okay um thanks for watching and see you in a future video okay uh if you ever Implement your overthe camera monitor maybe also look into adding some kind of green red LED stream status light I don't understand what that means um zeit in the chat um so those of you who are worried about um that that a a part of this might have gotten lost I am recording everything I'm doing to disk so when I make an edited version of this ch challenge or when Mata who does the editing makes an edited version of this challenge anything that might have gotten lost over the airwaves will get um picked up um all right so um I'm trying to stay hydrated uh okay you can't see so some people in the chat are saying I can't see the whole code I can't follow this is going to get published on my GitHub repository uh as I release the edited versions of these videos also make sure to upload the code and in addition even though this is in processing I usually try to uh make a JavaScript version so I have a Java version which is in processing and a JavaScript version as well okay Max angle and Min angle are reversed in map let me check about that oh yeah they are I don't know why I did that I mean it doesn't really matter because the map function will work anyway so it just goes the opposite direction uh what if I I just want to say s t plus noise of T and the range of that would be like negative 1.5 to 1.5 so here we've got like sign with some noise and I'm just like messing around with this while I uh and then uh yeah so anyway you guys will be more creative with what you do with this let me put it back rainbow tentacles okay so that's forward kinematics oh negative 1 to two oh you're right negative 1 to two no wonder that didn't work thank you okay um all right so do I have time it is 1220 I would like to do the inverse kinematics um Doan in the chat asks can you teach us how to upload code to GitHub and generally how to use it to organize our code well uh I um I will let you know that I have a whole playlist of git and GitHub tutorial videos so I would encourage you to check those out first and I'm sure I didn't finish that playlist I'm sure there are missing pieces so I need to return to that and update some stuff okay do can I manage the energy to do inverse kinematics and I'm going to build it again from scratch because it kind of works pretty I feel like it's going to be easier to do that than adjust this so inverse kinematics also you don't necessar have to watch both videos so actually why am I doing this so let me make a new sketch save as inverse kinematics and what I want to do let me just go back to this one and um me just save another version of it real quick that has just some simpler stuff and the length being much longer uh so let's see and uh what I want is for them to be uh let me do this also I just want to I'm just going back back to a simpler time just to have a visual demonstration I want to make these much more extreme okay oh boy and I want to make this go much slower uh and even slower probably and let's make this even more extreme okay um all right so I'm going to um I'm going to use this as a visual reference in my next video let me press some buttons here so I think this is the last thing that I'm going to do this morning and then I'm going to um figure out a whole new way of doing sound in this room I have a kind of an idea for that actually um and come back okay uh all right let's see here um add colors or I'm leaving really that's all it takes for you to leave if I don't add the colors uh so adding the colors is actually kind of an easy thing to I always say that color uh C and let's make um uh C equals a new color based on um let's just make it random that's the worst thing to do you know what I should do ah see you got me no I can't add that you know what I should really do is change the stroke weight so uh one thing that would actually be a more useful thing to do is just pass in I now you guys have caught me I'm off doing things that aren't in my video tutorial there is no I this gets zero pass in I and then if they get um I really don't like how I have this organized they get kind of their own index value into the array so what I can do is I can do things like stroke weight uh you know 10 I * 2 or something oh there um so so uh if I have like a stroke weight equals one and then I say something like the stroke weight equals 10 I * 2 index what is it index and do the same oh I hate this duplicate code g to make an improved version of this and you just do videos just about refactoring and then I can say stroke weight stroke weight and now what you'll see is there you go oh that's really kind of nice actually I should put that in my video I'll do it in the next one um don't add colors or I'm leaving but this was worth adding how about make it 3D really quickly that I'm not going to do right now uh okay um okay this is a little bonus all right actually you know what I'm going to do this on the at the yeah never mind I'll just mention it in the top of my next video okay um okay so am I ready for this need a new sketch I'm going to call this one inverse kinematics oh do I already have one did I do that already I'll replace it anyway let's replace place it craziness oh no no I'm in the wrong place desktop where am I oh that's weird oh there's like an example in the what's in that oh I I did make one already I'm so confused I'm putting these in hold on file open recent inverse kinematics okay that's the that's what I'm looking for blank one okay put this over here sketch uh take this out watch's this reach okay here we go uh forward KX okay all right here we are I need some more water maybe I could take a break and fill this up with some water we all know what what what what uh what could happen if I try doing that um let me do that because I I do feel like I need some water and I will play you guys kitten song it's All glitching I'm mu actually you know what I'm muting my microphone kittens kittens Kitt that was a failure by the way because both the the uh they're both locked I don't know where it place to get um I got to find where there's like a water cooler on this uh floor oh my God it's 77° in here why doesn't the it's snowing outside by the way in New York am I you can hear me again right Rel today is not broken it has noten this is this is a wonderful thing yeah I okay we're going to do it I'm really I'm going to need to deal with the the uh yeah oh so here's the thing is it too quiet what else I'm dance with my tent that was invalid I forgot there was one other that I think is important that I will use continuously over and over again all sorts of text generation analysis things that I will use continuously over and over again first thing I need to do is kittens kittens kittens okay we're going to do itys and kittens and kittens and kittens kittens and kittens and kittens and kittens and kittens and kittens and kittens kittens and kittens and kittens and kittens kittens and kittens and kittens and kittens kittens and kittens and kittens and kittens kittens and kittens and kittens and okay that aside you really could do something would make this music responsive so if you did beat detection or just had the angles change according to the volume I think there's some interesting possibilities there I'm exhausted I really need to get some water um so but it's okay I think I'm close to let's see hold on we have some of this there's a little bit of this tea left I look forward to the weird gifts or whatever of that I I I look yeah okay so let's give me another let's let's do a oh no soundboard died let me plug this in charge it where can I plug it in where's a plug I need an extra plug no there's no extra plugs okay I'm G have to deal with this later if I unplug that oh you know what I can unplug is this right now sorry everybody riveting live stream listening to me narrate how I'm unplugging and plugging things back in um okay I am uh okay I am I'm really gonna get to this I'm really gonna get to this next step here but um but before I do that I'm going to there was was a request for the this dot song uh by the way I have a new coding Train theme song that's coming I heard a first version of it I'm very excited about that this dot this dot um uh SoundCloud I'm going to make another attempt to get some water uh as always I always it's probably very quiet can you guys hear that okay I'm going to attempt to get some water again enjoy the dancing tentacle I will be back I will be back I'm gonna do dot do do this Dot Song never forget dot somebody composed that song for me for I went onto some other music okay um that was another failed Mission I'm going to have to do an exploration of this the floor of this building to find where there's water uh okay the other thing I'm noticing is my microphone is doing something weird here so let me see if I can fix that like maybe it's uh doesn't have enough slack when it was kind of pulling the shirt in a weird way okay is there a different way cuz it's I'm worried it's brushing up pointed down let's just try doing this this is probably worse let me go back I am okay sorry I'm looking let's hello you're over there okay we're going to do inverse kinematics that's fine it's going to be fine okay all right tentacle I got to slow you down tentacle uh slow you down even more tentacle all right yeah I want to put up a picture of the snow let me see if it's still snowing I'm looking to see if it's still snowing oh it's definitely still snowing I really want to just like open the window and get all the cold air in here too but this room has no windows all right let's do you guys ready let's do inverse kinematics and then everybody can go to sleep or have lunch or whatever it is they're doing with the rest of their day I go get some water stay hydrated I pass out you'll know why uh I should just bring a water bottle is what I just do I could fill up up okay hello welcome to another coding Challenge and in this coding challenge I'm going to do something called inverse kinematics so over here this is what I did in a previous coding challenge which is called forward kinematics and what's the difference between the two in a weird sort of way the fact that this arm is just doing kind of random weird stuff sometimes talking and recording in a room by yourself is a very strange thing to do and your mind wanders off and you don't know where you are why you're here what's going on in the world anymore and you just want to go and take a nap that happened to be just this moment I am going to um G to start that over okay here we go hello how are you I'm doing okay a little bit thirsty no no that's the wrong thing to say try this again hello how are you doing welcome to a coding challenge where I'm going to make something called inverse kinematics and you might say hey look at that did you do it already and I'll say no I have not this is actually from the previous video where I did a simulation called forward kinematics and so one of the main things I need to do before I get started coding is talk about well what's the difference between forward and inverse and why might you use one over the other one thing I will mention if you watch the previous videos I did change one slight thing about the code which you might be interested in I added something to make the segments have a Different Stroke weight based on where they are the a higher stroke weight towards the bottom and a smaller stroke weight towards the top so that's kind of an interesting little variation that you could look at okay now let's talk about let me come over here and um let me see let me erase some of this I'm going to leave this up here okay so this was a diagram I had based on forward kinematics here over here where the idea is I have a bunch of segments they're all connected to each other maybe these are segments of a kind of alien tentacle or there a leg that's walking or whatever they might be robot arm we're getting to that the idea with forward kinematics is if I turn this one then all of these should rotate with it so the angle that changes here gets passed along to all of the segments that are connected did so this one turns and they all and then if this one turns it doesn't get P to the one behind it it gets passed to these and so in that example of the tentacle they're all kind of moving a little bit randomly with some pear and noise or I I also used like a sine wave or whatever whatever algorithm you're using to move them the point is as you move one it affects the other ones inverse kinematics does well as the name is stated the inverse in other words what if you imagine this arm this I'm calling it an arm for reason I guess but this connected set of segments needed to reach and grab something and this is a problem that happens in robotics you create a robot arm that's a bunch of things connected to each other with some kind of like hydraulic rotational mechanism thing that I know nothing about and you need to figure out I want the arm to pick up this thing so if my hand my hand is the robot arm to get that I know my hand needs to be there what should the rest of me do how do I if I know that this needs to go here how do I figure out how all of these should be oriented in order for it to do that and you could we we might plainly see that this is you know the best orientation for reaching something far away in that direction but what if suddenly it needs to grab something here well we can plainly see maybe a good way for it to do that would be this but how do we calculate that if we know the end point how do we pass the angles back inversely through the segments inversely is that even a word that's what I'm going to do I hope I built this before I think but it's been years I think I have no idea okay so coming back over here um I am now looking at my forward kinematics example and I'm not going to I'm going to start the code over from scratch and I'm going to say setup I'm using uh processing which is a development environment and uh a Java Library uh for doing uh creative coding graphics and animation more more yada yada yada uh okay so what I want to do and I'm going to say side size 600 400 and uh there we go we've got the window and I'm going to say uh background 51 so I want the same sort of idea that I had in the previous example where I have this idea of a segment object so let's take let's let's make this uh object called segment uh and I want to make a new uh I want to make a new segment uh and I'm going to give it a location again the segment class doesn't exist so I'm doing this reverse I'm sort of thinking like okay I want to give it an XY and a length and maybe an angle so this is similarly to what I did before we're going to have to deal with some kind of like parent child stuff but let's just start there now I'm going to say I'm going to make a new tab called segment to create a segment class and I'm also going to want my segment class to have what do I think I wanted to have a and b so let let's let me describe what I'm doing here so if this is one segment I want to have a meaning the point over here B meaning the point at the end length being how long that segment is and angle being what's its angle of rotation relative to the xaxis so those are the properties of this object uh a I'm going to say um what am I doing here I'm I had an idea of what I was doing uh angle and length and I'm going to create a Constructor function which gets an X and A Y and weirdly I well let's keep it way and uh an initial angle which ultimately is something an initial um an initial angle and an initial length now you'll notice length just got highlighted as like light blue because length is a key word it's a property the length of an array so I'm going change this to Len for length because I don't want to it would be fine but it's a little I don't want to make it unnecessarily confusing so I'm going to say a is a new P Vector it's at X comma y its angle is that angle and uh it's uh length is that length that I specify so now is that what I said so now if I run this I got no errors but nothing's happening the next thing I want to do is I want to say segment. show and I this is just about exactly what I did before and I'm just doing it again to kind of get started I'm going to write a function called show and I'm going to make a line between a.x and a.y and b.x and b.y and I'm say stroke 255 stroke weight 4 and now if I run this I'm going to get the same issue I got before where I haven't done I haven't figured out where B is so I need a function called calcul guess a lot of this really is the same calculate B and this is I'm going to use my polar to cartisian coordinate transformation again I have a feeling though I'm going to have I'm going to start needing to calculate a based on B because I'm going to move the arm to the point that it's trying to grab so anyway but we'll see we'll see I'm going to what am I doing here I'm going to calculate B which is saying uh the X offset from a is equal to the length time cosine of the angle and the Y offset is equal to the length Time s of the angle and then B is a new P Vector at X Plus DX y + Dy one thing I'll mention here is um uh oh sorry a.x and a.y one thing I'll mention here that I don't love is that every time I calculate B I make a new P Vector object and in Java on my desktop computer which you know gigs of RAM this is never going to be a problem is a little bit of issue it might make more of a more sense and maybe I'll just do it right now for the sake of argument for me to make a an empty P vector and then what I would do is I would say b. set so that would be I'm not making a new object but I'm just setting its values to these two values and I think this will work exactly the same way it's a bit more memory efficient so to speak and doesn't really matter okay so now what I want to do is I'm on an update function where all I'm going to do is just calculate B which is quite redundant right now but uh it's fine calculate not calculate um and then uh seg min. update so okay uh this doesn't look right what did I miss H uh length oh I put these in the wrong order so this is length this is angle so this is length and this is angle I have the the length at zero and maybe I'll just for consistency change the order there and there we go so now I really haven't gotten very far but I've built my segment now here's the thing that's different though what I'm going to do now this is why I I was I didn't want to this is why this is quite different now what I'm going to do is let me let me zoom in on this segment here the first thing that I'm going to do is I just want this segment to follow the mouse so wherever I move the mouse I want it to turn to move towards the mouse so actually what I want to do is I want it to uh I want it to be to point at the mouse so I wanted to grab the mouse this is what I'm going to do so I wanted to grab the mouse I wanted to point at the mouse so um how do I do that so this is yet another example of needing this polar to cartisian trigonometry stuff so uh because I'll have it move according to the mouse I think this is a good way to start um so if I have this segment and then the mouse is down over here what I need to do what I want to do is turn it so that it points points this way and then move it all the way so that it's here so uh so that's so that'll give the sort of motion that we're expecting I think um so I want it to point at and then you know there going to be different one thing it could be fixed and it always just points in the sort of tentacle case but I want it to turn and so what I need to do is figure out this angle oh my goodness guess what we've now got to do the no wonder this is inverse kinematics we also have to do the inverse we're not converting from Polar to cartisian we now have to convert from cartisian to Polar because what I need is I need this angle based on knowing the and I think I want to use this end point so actually I think the angle I want is this right or is it from a I don't know what the somebody somebody in the chat will tell me because I could calculate an angle of it pointing from b or from a I think I want it from a I think I want it to turn and go there so I want to sorry so what I want to do is calculate this angle and what is that angle it's this Dy and this DX so it's Mouse x minus this object's a.x and mouse y so that's those but if I have those how do I get the angle now here's the thing I should do another video about this because I can use something called arc tangent or inverse tangent it's a trigonometry function to get the angle from an X and Y value and there's even a special way to do that with uh code functions there something called a tan 2 somebody remind me do a separate video about that but I'm going to do this just with vectors because the p v the P Vector object does this behind the scenes if I can create a vector that points from here to here then I can call a function in the P processing Vector object called heading and that heading function gives me this angle it's if you we look at the source code it's got a tan 2 in it so it's doing this but I might as well have a function that does this math for me already let's just use that okay so now I come back over here hello hello inverse kinematic thing and um now what I'm going to do is I'm going to write a function that calls segment. follow uh Mouse X Mouse y okay so I want this segment to follow the mouse so I'm going to go here into segment and say void follow and I get a Target X and let me just call that TX and Ty for like Target X Target y probably should use the full word Target I'm trying to keep my code within the space that you can see and so now what I need is I need a vector the direction which points from um so here's the thing I could do this a number of different ways I'm going to say a Target equals a new P vector that's at that TX and Ty and then I'm going to say p vector. subtract the target minus a so this is what I want I want a vector that points from a to the Target that's the direction that I want it to point and then now what do I do I say angle equals Dr do dading so that's all there is to it so now if I uh if I run this we can see it's always pointing towards the mouse so that's just making a vector getting the angle and using that angle as it's but here's the thing what happens now though if not only do I point towards the mouse but I actually move B to the mouse location so now what I'm going to do is I'm going to say b equals target. copy now this is going to do something weird okay first of all U so actually I don't want to C calate B here's the thing maybe this is a little bit weird what I'm doing here but I have a function that calculates B based on a so actually what I want to do oh this is actually easier than I thought what I want to do is right what I did is I rotated it to here I want now this Vector to have the magnitude of length and then I just want a to be positioned where uh it's distance from the Target is that length does that make sense I think I need to draw this again so this is the this is the segment this is the target so the segment goes here and I have this as a vector and now I need to figure out where is a so that if I lined it up with here uh B would end up right there right so a should be um yeah so so a should be the that that Ang that that Vector position go back to where I I lost my I I got my I got my words mixed up trying to what's the it's kind of like I want to move B there and then just move back by the angle but if uh if this is the angle I think what I want to do I'm trying to think what's the what's the most succinct way of doing this which is just to shift the that Vector to where the distance the magnitude oh oh oh oh I know what to do here we go I got it not until you'll edit this somehow so all I need to do is take this vector and put it right here right put it right here then multiply it by 1 and then I have a vector right like that goes this this way and then a goes right here so now I want that arm to be positioned at this angle but where a is there and there's probably some redundancies in the way that I'm thinking about calculating this as there always are but let's just do this so forget about moving B what I want to do now is say Direction set magnitude to length right then I want to say Direction multiply by ne1 so I want it to be as long as the segment and I want it to move in the other direction because now all I need to do is say a equals P Vector add Target plus direction right so I want a to be positioned I'm going to change the angle and then position a that distance away from the Target and now we should see there we go so now as I move this you can see this particular segment is following the mouse in a somewhat lifelike way now here's the thing this is going to get much more exciting right this is inverse kinematics and that I'm starting stting with the thing at the end but there's nothing connected to it so now what I need to do is now that I figured this out oh this is exciting ah this is going to be beautiful you you guys are going to make all sorts of wonderful cute and squiggly little snake like colorful creatures a little antenna I can't wait to see all of them um right if I have this now here and let's just say for example it started like this so this got moved to here what I need to do is point this now this one does exactly the same thing that this one did aha this is what inverse kinematics is this one does exactly the same thing that this one did but it's Target as this point so it points towards it and then it shifts there so we're actually done we've done all of this already we just need to add a segment that's connected that does the same exact algorithm but not with the first Target but with what it's attached to let's go add that so now here what if I add what if I do the same thing I did before where I make this segment one and eventually we need to make this an array or a linked list whatever we do and I need and make this segment two oops segment two okay segment two I can do this segment two equals a new segment and guess what it's parent I'm thinking of it in the inverse way it's parent is a thing at the end is segment one and it has a length of 100 I don't know if it really needs an initial angle the way this stuff is going to get calculated but let's leave that in there this might be completely unnecessary in this scenario so now I need to write another Constructor function just like this one I need to give them all a parent and I'm instead of getting an X and A Y it's going to get a parent and then then uh so here parent is always null if it's the first one I'm going to have the same issue I'm going to need the child thing to go but maybe I can go forward this time anyway we'll figure it out um then what I'm going to do is say oh I I'm almost there uh parent is that parent and then a is oh wait a sec we don't actually it doesn't really matter where a is because what I need to do now is just follow the parent so I want to follow um I want to follow parents a and this should a uh right I want to just do that algorithm and uh I better set my length and angle before I do that right so the first thing I do is just attach myself to it wherever it is and then then um here yeah so this should be good I I could see that this is really going to need to be refactored but I'm going to just keep it right now so now what I want to do this is this is kind of terrible what I'm doing but I'm going to say segment one update okay hold on let's let's just make sure they're both there segment two update and show okay what did I get here uh Target parent a.x oh oh oh no hold on I got a no pointer exception what's wrong here um new segment segment one follow okay hold on let's that I should definitely get why am I getting a no pointer in follow is it when I it's up here oh because does does uh uh hold on time out for a second and where's my debugging music uh if the child follows the mouse the parent follows the child yeah no the child follows the parent uh where's my let me where's my no point your exception uh this right here right so that's let's hold on let's not do any of this okay this is what it was before now uh let's put this back null pointer is it Target or is it a oh a doesn't have have a of course of course of course okay I this will get edited back let me just no point your exception no point your exception could it be Target or could it be a it's definitely a right because I'm forgetting that it doesn't have an A so even though its parent is parent it's a should at least start um somewhere and uh I guess I'm just going to give it um I'm going to give it uh just a vector at 0 0 I got to think about this this is not right but let's just do this for a second so yeah hold on let me think about this here uh I lost I I lost it I had it and I lost it uh maybe this isn't the right idea oh it's not following a yeah oh hold on let's think about this I should still I know what the issue is I I let me come back to this I know what the problem is I've got it let me go back to that null pointer exception uh oh why did I change that when did I lose that by accident okay okay so here we go okay I've got a null pointer exception with targeted a so a which Target is not null because I can see that I made it right here a is null and why is a null because I'm doing something wrong and and you know I'm setting the parent because I know it needs to be attached but even though I'm doing inverse kinematics I don't want I I'm I'm thinking about this incorrectly what I want to do is this is still the root the first segment it's going to be a lot easier if I then attach the next segment here attach the next segment here I am going to do the math backwards by starting with the last one but they need to have some initial configuration that makes sense so when I make the next one it its parent is actually the thing behind it still so that's what that's what I'm doing wrong here so let me come back and I it's just about the way that I'm building it so this is actually not in front of it this is not behind it it's actually in front of it so let's let's do that and segment two is actually the thing that's going to follow the mouse if you if you catch my drift so hold on a second so what I'm going to do when I make that thing from the parent a is still uh located it's at the end segment two is at the end of segment one so segment 2's a location gets the B location from segment one so that's fine and forget about this follow thing that's not happening here so what I'm going to do now is let's just make sure that these both show themselves in the right location get rid of this follow okay so those okay well it looks like there's a segment up here why is that because uh 300 200 segment um so let's see oh so let's see here what went wrong there uh ah so the first segment didn't get its B calculated in setup in its Constructor so so that messed up the second one and in that sense I should probably calculate its B here so whoops so there so now they're connected and we can just we know that this is correct even though I think the initial angle isn't really going to matter here here um if I were to give it you know an angle of same like 45° radians and just so we can see you know negative uh 10 degrees so we can see this is now these segments are connected 45 degrees and then 10 degrees okay because here's the thing it's segment two the whole point of this is that I want the end to follow the mouse by the way the parent thing is going to work so much better here I start at the end and I just go back through the parents I don't actually need the child like I needed in the forward one okay so now we can see segment two is following the mouse but segment one is not coming along with it so what do I need to do I could just say segment one follow segments 2's a.x segment 2 a.y and now we're going to see this there we go we can see now I have this inverse kinematics where it's all about the other figuring out where the end is and the the angles get calculated kind of Rippling back the first one follows the mouse the second one follows the end of one and you can see now this this is it this is kind of feels somewhat like a realistic skeleton arm like thing and of course there's scale and what you're using this for but we've got the basic idea oh good so now what I want to do is I want to add I want to make this uh um I I don't want to just have two separate variables so once again I'm going to call this tentacle or snake or whatever I'm going to call it tentacle and tentacle is a new first segment then I'm going to say I'm just going to make just for Simplicity I'm just going to have three I'm going to add three and the same kind of thing I did before where what I want to do is I need the current segment is starts with tentacle the next segment is attached to that tentacle and let's just give them all an initial angle of zero again that makes just things a lot simpler and then next current is next so once again I'm making a linked list where I'm saying the first object is connected to the next object which is connected to the next object so I to iterate them I could just go through them and but yeah so but I'm actually connecting them backwards which is perfect this is perfect yay okay uh so make the next one based on that and then current becomes next and this should not say tentacle here that's a mistake this should say current right because current is changing next is based on current then next becomes current so now I should be able to do the thing that I was hoping for where I say um four no no no I I make a I say just say current or next I don't know next equals tentacle while next is not equal to null next let's not do the follow for a second next. update next. show and then one day and then um next equals tentacle dop parent oh I see what the problem is oops and that's not a function so this is a problem why is this a problem this won't work oh I was I thought it was going to work out so beautifully I need the last one I need to start from the last one I I don't know why I'm spending all this effort avoiding putting them into an array because if I just put them into an array I have the end I have the beginning but since I'm spending all this effort avoiding and putting them into an array I'm I'm going to say I'm actually going to say um I'm going to do this this is crazy current is just this first one right I don't need to keep track of anything the tentacle is actually whenever this finishes it's whatever was current tentacle right so I don't actually want to save the first one in my variable I want to save the last one because I want to start at the end and go backwards okay so now I can say next is that tentacle and then get the parent so I'm going backwards so this should show all of them didn't uh Why didn't it uh uh uh let's see uh let's see Why didn't it what's wrong next is tentacle cool well next is not equal to null I should at least see the last one right um so hold on let's take out this so just to see one why don't I see the last one let me make them a little shorter just to be sure it's not going off the screen ah the last one is there okay so I had this right the last one is there but if I put this in this doesn't work while next is not equal to null well next is not equal to null update oh maybe the update is messing things up let's do this o what's going what's what's happening do I have an infinite Loop I'm like looking to the chat someone's going to have the answer for me uh yeah you know there's a question in the chat why do developers always call very variables weird obstated names and I really try not to do that and I'm doing a kind of a terrible job of right now so that's a really good comment and maybe when I go and rewrite this code to post it I can fix up the names next equals current next oh this is totally wrong next equals next. parents of course so this is what's wrong this the whole point of this idea of a linked list kind of system is that let me run this again there we go I was saying next equals tentacle got there so I was always saying next is the first one so I was stuck in a kind of infinite Loop there so I want to show it and then get its parent then show it and get its parent and now if I call update that will shouldn't do anything because update is just calculating the end and now what happens if I have the this one uh follow Mouse X Mouse y so you can see that one's working that last one but I need now I need to do some kind of following here so I'm going to say next . follow and it should follow the it has to follow the If the previous one so what I can do is oh this is why having an array would be nice or having the child all I need is the child relationship because it's got to follow its child so let's put that back in let's so maybe I do like this double length list thing I I'm really over in this I think uh but I'm going to give them give it a child uh and then so I have that reference so what what do I do here when I make them the next one is based on the previous one and then uh um oh just give me a second here I have to take a break for a second do I I am my fighting against putting an array in this is just sort of like a lost point pointless cause um it's time for lunch can you tell it it's time for lunch I've got no water got no caffeine no food sugar I need something to like go into my brain to like to rechar I need Electric electrical outlets clicked in here but what I want to do is I think I'll if I put the the end things parent is the pre is end things is the parent so that's why I'm iterating through but the parent has to follow its own child and the last one follows the mouse so this sets current as the parent of next uh right next next parent is current next oh no no no because I'm going I see I inverse thing is really confusing next parent is current and current child is next yeah okay mat this will be like a little edit Point here what I need to do right right now I have the relationship that every segment knows its parent but in this inverse kinematic it's got to follow the one that's in front of it which is actually its child so right now the way that I'm creating them is that the the um the next object's parent is current but the current object's child is next so I also need to say current. child equals next and then here I can say follow right so the first one just follows it's its Mouse follows the mouse and then um and then what I might do actually is say next equals next. parent just to go to the next one and then at the beginning here I should call next. follow so if I give it follow with a particular Target it'll follow that but I need another follow function I can overload functions right I want the same oh but I don't want to redo this math all I need to do is say um void if I just call follow then what I need is taret taret X is child do it follows the a child. a.x right it's got to follow it's uh and Target Y is child. a.y and then follow Target X Target y so this is an a Target X Target y so this is kind of an interesting technique that I'm doing which is I have that follow algorithm where this segment can follow any arbitrary point and then what I realized is oh what I want it to do is follow its child's point a so rather than write a whole other function that does this in a different way I could just write another function that calls this one with the child that that particular child's X and Y so this is the two functions both named follow if I just say follow without any arguments it follows its child if I say follow with arguments it'll follow that so now if I go back to here I should be the first one is following the mouse and actually this is silly what I'm doing I should just say uh this will be tentacle tentacle follow the mouse right we know the end the tentacle object is the end of this whole tentacle thing then next is going backwards whatever the tentacle parent is and then and so this is a segment and now I have my Loop as long as there is something there follow its child update and show and now we should have well hold on hold on ah whoops I forgot to say then next equals next. parent so I've got to keep going right I've got to go onto the next one otherwise I got an infinite Loop stuck there again so now we can see it's doing that right we can see that it's this whole thing is following the mouse oh you know what it's a little bit off am I not draw oh I'm not drawing the tentacle because the everything is in that loop I also have to I'm kind of I have to show the T that front element whoa what did I do here uh uh uh uh uh that's crazy what's the bug what's this bug I've got a weird mistake that's really weird okay hold on hold on hold on get rid of this for a second let's just get rid of this entirely okay hold on let me delete all this down here what is this bug let's get rid of this entirely okay whoa something is weird is happening with this tentacle because I forgot to call update that's what it is okay okay so this is the again refactoring is a wonderful thing but I can see this Loop the idea of this Loop is to do all the three steps follow update show and I did follow and show but I forgot to update it what happens in update it's kind of important it recalculates the end point which is also silly now by the way that I have an update function that that's all it does I thought it might need to do some other stuff so but I guess it's good in there in case it needs to do some other stuff so I need to say tentacle do update ah there we go and now there we go so now I have this thing that follows the mouse in kind of like a real slightly realistic skeletal like way and what I can do now is I could say hey guess what I want to have 10 of these connected um I want to uh have the first one uh and I want them to all and again these should all be variables I should uh I want them to be separated by only 10 pixels and have 20 of them connected and you can see what do I have now you know I have something that looks like this and you can see this is different by the way than a particle that keeps track of its own path right there is an aspect of It kind of keeping track of its own path but it's actually you know in a way more like a rigid body of connected uh joints so um so there's a lot of possible ways you can vary this and just thinking about this is why I think we could maybe get a nice fish simulation especially if there was some added wiggle to it there's a sort of almost like the muscles where all those joints are and that they that they trigger and maybe there's some sine wave oscillation also as it's moving so this is what I want to maybe try to do in next sort second part or I don't know if I'm going to edit this into many parts what part I'm on but um but that's something to think about now I think I think it would be worth just out of curiosity let's try adding that um thick thickness stroke weight thing to it so it could be useful for every segment and I don't need the angle so I'm going to reuse the Ang I'm instead of having the angle the angle could just default to zero because it's just being calculated um so I'm going to have all of them have a default angle of zero and I'm going to make this last thing uh pass its index into the array because what I can do with that number I have each segment whether it's 0 1 2 3 4 whatever it is in the total number of segments and so what I can do is for example if I wanted to have stroke weight as a variable and whenever I draw it that's it's drawn with a variable stroke weight you know if I were to just say right now and I hate that I have to do this in two places so this is something I really need to refactor um stroke weight equals like a random number between 1 and 10 and I'm doing this in two places which is terrible and I don't need angle anymore you can see they all have like a random stroke weight but what if I want to say um an uh I want to map the index which goes from zero to the total number of segments which in this case is 20 uh 0 to 20 uh and I want the stroke weight to go between one and 10 so I know this is terrible I'm just going to put these in both places now we can see it's thicker at the end uh uh closer to the mouth and thinner thinner thinner uh as it gets further to the back so you can see that's a nice little variation I could I could also alter its color based on the same exact um algorithm we've got this kind of eel like thing that we could start to work with in our sketch now something I thought about here something came into my head ah yes here's an exercise for you really to me this looks like one thing now but really what it is is a collection of segments objects but really what I would like to do what I would want to do is make you know I call it like snake for example I would make a class called snake right that has all of that code for one of them and then I could have a bunch of them so that that would be a good part two or three or four or whatever this in addition to trying to get it so maybe we'll do that maybe what I'll do eventually is make the uh make put that into an object so I can have more than one and then also put those into a system where they interact with each other in some way so anyway anyway uh thanks for watching this inverse kinematics I hope you got something from it and that you'll look at the code and make some variations make pretty sparkly rainbow antennae cute uh snake tentacle creatures um thanks for watching uh okay it's 120 I'm definitely finished for this morning session which was now been 2 hours and 4 minutes I need some water there's a mirage over there um actually you know what I didn't do here's the thing I'm gonna hold on what's be the best way to do this uh great so alar writes be great to see one end of the entire connected tentacle locked and the other's location set by Mouse click and then gravity pull the end then you have string yes you know what I thought I'm gonna when I come back and do some more of this uh later um I'm going to I'll the first thing I'm going to do is actually move it not according to the mouse I don't know why I forgot to show that I let me maybe I'm gonna I'm G to Mata let's see if we can redo the ending to that video um and uh you can use this or not use this but I'll mention it I I don't know if this can get edited in or not but so when I look at this snake like thing oh wait hold on I already did this here no no don't delete this sketch just this tab when I look at this snake like thing I see uh one object and in a way I kind of have that because I just have this one variable called tentacle which in a way because it's a link list refers to everything but I really could organize the code in such a way that if I made another class called snake or creature or something and I could take everything that's basically in setup and draw and put it into that other class this would allow me to more easily duplicate many of these on the screen and that's something that I'll uh I'd like to do in in a maybe the next video so I will do another one where I have more than one of these and maybe they move in some way because what if instead of following the M Mouse they follow a bouncing ball or if you look at any of my just take the flocking example for example what if instead of having a triangle moving through that flocking example you have this uh snake like Wiggly creature thing uh moving through so that's so the there's there's a couple things I think you could think about doing as an exercise if after watching this number one refactor the code to having the two Constructors there's some efficiency there putting everything that has to do with this one creature into a class so that you can have more than one of those on the screen and then thinking about those things not following the mouse so what if those things move independently through some other particular kind of logic so I hope you will do that I hope you will make cute and cuddly and rainbow colorful antenna e creatures and share those with me in the comments shiftman on Twitter uh by submitting it to the GitHub repository and all that sort of stuff that people people often do when they're watching these videos thanks and I'll see you soon okay um there we go so I think I did a a successfully this morning covered forward and inverse kinematics without honestly kind of knowing that much about them pulling from memory and probably like whenever I watched uh coding the coding math videos about it it just sort of seeped into my brain um when did those come out um so now what I would like to do uh join restrictions oh okay let me not do that right now because I have to go I don't have my music stuff or what I'm so um but what I'm going to do is I will do uh maybe five minutes of pulling some uh questions from the chat uh you know YouTube has this like Super Chat thing I'm curious what but now I'm going to be way off topic everyone's going to write about it but I'm curious if people like or are kind of offended by or don't like fend is the wrong word like people's opinions about the Super Chat I have a different way of kind of organizing a smaller Community which is having a patreon which has a separate slack chat which is in many ways like the Super Chat the monthly subscription type thing but anyway sorry I got off topic um weak example of inverse kinematics Lo lock the Endo yes well I absolutely should do that but does that really make it weak I feel like it's a nice example of inverse kinematics it just doesn't have that feature yet I I could do that I'll do that next um yeah I could do that as a third part of the video um have you ever used eclipse for Java what do you think about it uh can we get coding train tshirts online yes uh coding train. storenvy.com I just mentioned that at the earlier earlier in the uh I'll show that again before I leave have you ever used eclipse for Java and what do you think about it yes I love eclipse for Java because that's how kind of like one of the first things I I don't I don't know that you should but I'm I do a lot of my job development in eclipse and in particular anything that I'm doing for as a processing library or checking a bug in processing and that's really on my list to get to especially I want to talk about Google summer of code I want to do some videos about how to work with processing Eclipse which is maybe a skill that would be helpful in working on Google summer of code projects for processing do you have dreams of what you could do with code or ideas of how programming could change the world to the better um are you a professor at NYU let me try those I and there's an Android question I don't know anything about Android um so do I have dream you know I guess my point of view on this is to do this Channel and try to show people a side of creativity and fun through code which I think is a side that exists in other places too I don't have you know I don't have ownership over that idea by any mean by any but anywhere close to any stress of the imagination but uh and to put the question out there uh through my tutorials of how can we do things with code that make the world a better place um and so I guess my way of doing that is to make code more accessible uh and thinking about code and learning code more accessible to a broader audience now whether YouTube with ads and a patreon is the best way of doing that is an open question for me this is an exper I'm really enjoying this experiment uh it is a really exciting to see the audience grow and the community grow so that has definitely been something that I feel excited and happy about but it's still I still wonder am I doing a good thing through this but by putting this knowledge out there and and asking people to contribute and and make stuff with it and hopefully make the world a better place that's what I'm that's kind of my point of view there was a question about the shirts and I forgot there's another question oh am I a professor NYU yes I guess um no I do teach fulltime at NYU a program called ITP it. nyu.edu it's a wonderful place I love everybody that I work with the students are terrific and I um I do these videos for my classes and then also put them on YouTube uh um do I want to fly into space uh thank you people are giving me nice oh wait okay there's a question in the slack Channel now how would a force like wind affect a jointed object like you just built since you would need to affect all the segments somehow rather than just the end this is such a good question boy that would make a great coding challenge so number one is I think that this you know I'm always all walking this line of should I use a physics engineer or should I just implement the math in my code and what I did right now was I didn't use a physics engine at all but I could potentially use something like box 2D and just make bodies that are connected through revolute joints which is essentially going to have the exact behavior of this um inverse kinematics and then what I could do is apply forces and then the physics engine is going to work all this out but let's say I wanted to do this myself uh I guess I would probably use the same iterative approach so the end point would be moved and the others would follow it and those would be It's Tricky so I have to understand I have to decide do you know how the forces interact with each other but um I really would still build on that Rippling effect so if the uh and this I think how we could maybe also if you think about muscles this is what I want to explore like how does a fish Propel itself it's not just because its head is moving and suddenly that causes its skeleton to do that wiggling thing so I think what I would need to do is apply the force and then recalculate then apply the force to the next segment and recalculate apply the force to the next segment something like that somebody in the chat I'm sure will have a better idea um oh that's wonderful somebody said they showed their 13yearold uh brother some of the videos and now they're coding is coding train work or a hobby maybe both I consider what I'm doing with this in a number of different ways uh it was definitely both work I would say it's more work than a hobby I mean definitely started as as a hobby or I don't know if hobby is the right word as an experiment or something to do for fun now I feel a sort of obligation to it which is good and bad but I consider this my uh research a research component of my job um in experimental uses of Education I also consider it a side side project side business in a way uh I mean um so I would say it's a little bit of and also one of the things that I really do care about is the processing Foundation which is a nonforprofit organization dedicated to um um making code more accessible and inclusive through a lot of the tools we develop U and also thinking about art with code through processing a p5js and I view this CH Channel also as some evangelism for that project um to get more people involved and excited about it um for a fish the muscles would move first and as a result the whole body moves it's not like the head is moving and the body follows exactly that's a very good point there's some great fish simulation uh that actually do like fluid simulation stuff I don't think that's exactly what I I want to go down that road right now but fish simulation I saw when I googled this at some point O Roblox oh my god oh know I'm off topic I got to do some Roblox videos don't I um yes yes okay oh there's a Pixar in a Box video on conic cademy about the about like Finding Nemo and fish moving that would be great okay a one more question can you please tell how we can as a programmer can approach to a project on the solo basis also have you made mobile apps with processing those are two different questions I have not really done a lot of mobile apps with processing I have sort of taught and shown demos of processing with Android so you can use processing with Android and p5js is something you can do um with what was I gonna say uh oh P5 J because it's HTML CSS and JavaScript um you can just you can make a mobile app just through web Technologies and and you can just open it in the browser on a mobile device or you can use something called Cordova to actually turn it into an app um approaches to a simple raycaster videos with a Clips these are all great ideas um approaches to projects as a solo programmer I would say hey first of all why be a solo programmer find a community I mean I know this is not easy and and hard for people depending on their circumstances but the extent that you can find an online community a Meetup uh uh class you can take a collaborators I think that's always an exciting and great way to work it's it's hard to program as a solo program but I would say one of the things that I find really helpful and actually doing this channel forces me to do it albeit often in a incredibly embarrassing in fashion is when you have to talk through something that you're making it slows you down to the point that often bugs and problems that you couldn't solve you're able to solve so I get this all the time where a student couldn't figure something out and just through asking the question like they write an EMA email with the question and 5 minutes later I get an email oh never mind I figured it out or you know talking it through in in an office hours kind of appointment so one thing I would say if you're solo find a friend or somebody a family member um to try to explain what you're doing even in a higher level conceptual way and that can be um good um okay so since some people had asked um if you're interested I in some of the coding train merchandise uh I have coding. storenvy.com um this is a really a work in progress try to add more stuff as people requested here um that type of thing uh and then the other thing I'll mention is where was that um what was that YouTube video I showed fish swimming Windows desktop or something YouTube uh YouTube I Googled it and found it uh this is it so if anybody I know I'm not I haven't posted my code I can try to like just dump it and drop Doc and so tweet at me or I'll post it in slack Channel but um I would love can what I've built so far lead to something like this so how would we make something like this because I would love to combine this with like my flocking and steering Behavior stuff so oh rubber duck debugging yes so that's the rubber duck concept I need a rubber ducky I have so by the way I have a I have a bin full of rubber duckies at home and unless you think that's weird first of all I think it's okay anybody can have a bin of rubber duckies at home and it's not weird we should have coding train rubber duckies that is a great idea um right um rubber duck debugging is like a nice and friendly open kind of concept right so there's nothing like meanspirited about it so that's why rubber d I think of it as you if you had to explain it to the rubber duck then suddenly you're going to understand it yourself so I guess you could just get a rubber duck it's nicer if it's a human being as nice as rubber duckies are anyway um and and so that was one thing so that's what I would love I would like to come back today it's going to be it's already 130 4 5 6 o' for like another hour I really want to do that waving flag thing as I have a good I'm G I'm going to present to you something that that is now known forever as the uni Kitty just think think about that what could a uni Kitty be that's very exciting that's what's going to be on this evening um and oh gerage is asking what I programmed today let's just quickly I programmed a bunch of things things and uh I also should add the thing where the end point is fixed so we were making some inverse kinematic tentacle stuff um so I want to do I want to maybe fix the endpoint make a swimming fish and a waving flag uni Kitty and show pressing Eclipse that's never going to happen today so I want to see if I can do some of those things later today so I would like from you the community I think the only thing that I need is well if um is anybody to see if you can make something like that fish thing and give me some tips on it may maybe don't give me the answer some tips and ideas you can give me the answer if you want I'll just I'll give you credit obviously but um I want to try to make that when I come back okay I got to go uh thank you all for watching I've got no music I've got nothing I'm all uh I don't I do have a train whistle and a bell and a couple different mugs got some Tshirts oh random numbers I've got to go thank you all for watching it's this has been three hours the camera just went off um so I'll see you all later today I'm doing now for some reason every Friday I'm doing this twice I don't know how that happened okay uh I'm sorry that the time is not good for every I got I I don't know what to do about that I wish there was a way to just make a time for these live streams that works for everybody across the world uh okay hey I'm going to stop recording and I'm gonna
