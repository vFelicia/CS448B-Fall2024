With timestamps:

00:00 - in the previous video I got as far as
00:02 - defining a route with parameters the
00:05 - route is search / some keyword / some
00:09 - number and the response from the server
00:11 - that comes back is always I love
00:14 - whatever word however many times the
00:15 - number is so if I were to change this to
00:17 - unicorn and unicorn and put it just with
00:21 - slash 3 I would see I love unicorns 2 3
00:24 - times so this is Wow fun and I like to
00:27 - see how much you love unicorns and
00:28 - rainbows do you love them as much as I
00:30 - don't know probably not which is a very
00:32 - healthy probably much healthier than
00:35 - however I am but the point of what I'm
00:37 - saying is this is kind of useless let's
00:39 - turn this into something useful and so
00:42 - the example that I'm ultimately building
00:44 - here is a sentiment analysis API and so
00:48 - one approach to sentiment analysis is to
00:51 - keep a dictionary of words that either
00:53 - have a positive or negative score
00:56 - associated with them so I'm going to go
00:59 - to the code and I'm just gonna write
01:02 - here at the top I'm gonna create a
01:04 - variable and I'm gonna call it words and
01:08 - I'm going to put some words in it with a
01:12 - score so I'm gonna say rainbow has a
01:14 - score of 5 and unicorn has a score of 3
01:21 - what are some sad words doom has a score
01:27 - of negative 3 ok so this is my very
01:30 - basic sentiment analysis dictionary I've
01:33 - got three words in it and what their
01:34 - score is so first thing that I want to
01:37 - do in making a sentiment analysis API is
01:40 - expose this data so I'm going to
01:43 - actually add another route here I'm
01:45 - gonna say app get all send all and then
01:51 - I would say function send all and this
01:56 - is the callback which has a request and
01:58 - a response and all I'm gonna do is say
02:00 - response dot send words now notice what
02:03 - I did up here in this reply I just
02:06 - created this string and this string just
02:09 - kind of like spit itself out into the
02:11 - browser but somebody use
02:13 - the API is probably going to want to get
02:15 - the reply back formatted as JSON so I
02:18 - better do something to format this as
02:21 - JSON well what is words it's a
02:23 - JavaScript object what is job what is
02:26 - JSON JavaScript object notation so one
02:28 - of the magical things about using
02:29 - Express is Express will automatically
02:32 - format your JavaScript object that you
02:34 - send out into the world as JSON so this
02:38 - is actually done so I can now go to
02:40 - slash all and I can see this is now me
02:45 - making an API request to my API and I'm
02:48 - getting the list of words and if I add
02:50 - another word to it like gloom doom and
02:55 - gloom now I have another word there with
03:02 - a score of negative two I hit refresh I
03:03 - see that as well so what I want to do in
03:06 - addition to having this be an API so
03:09 - there's a couple of things I could do
03:10 - one is that I might want to search for a
03:13 - particular word to see if it's in the
03:14 - API if it is get the score or I might
03:17 - also want to be able to as a user add
03:19 - words to the API so that you know this
03:22 - is a sort of design decision you know
03:23 - what are you what are you doing here I'm
03:25 - just making a demonstration I think
03:26 - would be useful to see how can you
03:28 - create a route where a user can insert
03:30 - data into the database and by the way
03:33 - that's my database right now so as I go
03:38 - through these videos I'm gonna get into
03:39 - persistence working with databases and
03:41 - there are various levels of that you
03:43 - know on the one hand this will persist
03:46 - it will never go away it's written there
03:48 - into the code my database is hard-coded
03:51 - not the best solution but it's a good
03:53 - starting point so I'm gonna change this
03:55 - particular route and I'm gonna change it
03:58 - to add word score
04:02 - add word so I want to route where if the
04:06 - user adds a word with a score it goes
04:10 - into the database so I'm going to change
04:12 - this to add word here are the parameters
04:16 - the word is data data word the score is
04:24 - and this is I'm kind of being very
04:26 - long-winded about
04:27 - I can just say word equals request stop
04:30 - params not word but data-score and then
04:35 - what I want to do is say words word
04:40 - equals score look at this this is me
04:45 - taking in the data from the user the
04:47 - word and the score and putting it into
04:49 - that object right putting it into that
04:52 - object look with a key value pair the
04:55 - word is the key the score is the value
04:57 - and then I need to create a reply and
05:00 - all of my replies I want them to be
05:03 - written as an object so I'm gonna say
05:05 - message thank you for your word okay so
05:11 - there we go so now if I run this and I
05:16 - go here to all we can see all of the
05:20 - data is there now I'm going to go to one
05:22 - more window and I'm going to go to add
05:26 - purple five purple is a very happy word
05:30 - I'm gonna hit enter it's gonna say
05:32 - message thank you for your word so I got
05:35 - that message back and if I go to all we
05:39 - can see purple oh and look at that it
05:41 - got the you know of course the way that
05:44 - it's working is it came in as a string
05:47 - not a number so I could correct that if
05:49 - I want let's correct that so I could say
05:52 - let's make sure that is actually a
05:54 - number because I might want to do some
05:57 - mathematical operations with it later so
05:59 - let's convert that to a number and I'm
06:01 - going to add the word again hit refresh
06:05 - and now you can see I got purple five so
06:07 - there we go I have saved this word
06:10 - forevermore in the API
06:12 - now let's there's a couple things I want
06:15 - to add to this number one is what if I
06:17 - just go to add purple and I forget to
06:19 - add a number I run this it says it
06:22 - cannot get that it cannot add this
06:26 - because it's looking for this particular
06:29 - route and the route requires also a
06:32 - score however there is a way to make
06:33 - that score optional which could be
06:35 - useful for something you might do which
06:37 - is adding just a question mark to and
06:39 - it's really all
06:40 - works for the last one or though I'm
06:42 - sure there's some fancy ways around that
06:43 - and then what I could do is I could say
06:46 - if not score
06:49 - you know score equals five or I could
06:53 - say I could actually say score is
06:59 - required so let's say score is required
07:01 - just like I could add some error
07:02 - handling here like I could save our
07:05 - reply score is required else all of this
07:18 - so I'm basically saying whatever word
07:21 - comes in if I get a score so if not
07:24 - score and also I should probably check
07:26 - and I'm not going to do all this but you
07:27 - know if I want to be really serious
07:28 - about this I would also check like to
07:30 - make sure score is a number and if it's
07:33 - not if you sent me the score as like
07:35 - friendship I would say the score has to
07:38 - be a number but here I can just create
07:40 - this variable var reply I can fill it if
07:44 - there is no score I can say score is
07:46 - required if there is a score I can add
07:48 - it to the table and say thank you for
07:50 - your word and then send the response so
07:53 - this is one extra thing that I'm adding
07:54 - to this and if I now run this it's gonna
07:58 - say hey score is required so I can say
08:00 - now five thank you for your word and we
08:03 - can go back here and we can see purple
08:06 - is there with a score of five so there
08:08 - are a lot of ways to sort of check and
08:11 - see what will how people what what
08:14 - what's coming in and determine whether
08:15 - something is there or not
08:17 - okay so let's add one more thing to this
08:21 - let's add a search route so that if the
08:25 - user of this API wants to query for a
08:27 - particular word and get the score back
08:29 - let's see how that would work so I'm
08:31 - gonna add another route and I'm gonna
08:34 - call that I'm just gonna go down here to
08:36 - the bottom I'm gonna call it a search
08:38 - for a word and I'm gonna say search
08:44 - search word I'm going to add that fun a
08:47 - callback now search word with a request
08:49 - and a response and I'm gonna say the
08:52 - word you're searching for is whee
08:54 - Qwest params word and now what I want to
08:58 - do is see does that word exist if if
09:04 - that word is part of our words table I
09:06 - need to make a reply I'm going to send
09:11 - back a message but you know some going
09:14 - to say status found you know word word
09:22 - that's kind of probably a it's a little
09:25 - awkward what I'm doing I'm just gonna
09:26 - call this yeah it's fine it's a little
09:28 - awkward I'm doing with these variable
09:30 - names and then score I'm gonna say words
09:32 - word so what I'm doing here is I'm
09:34 - saying if it's found then the reply
09:39 - sorry equals this particular object so
09:44 - if it's found the status is found here's
09:47 - the word here's the score otherwise the
09:51 - reply is status not found and then there
09:57 - is no I can send back the war that word
09:59 - there is no score and I can say response
10:05 - dot send reply so the idea here is that
10:09 - you know I'm just showing you an example
10:10 - now I'm making a route for the API where
10:14 - a user could say hey do you have this
10:15 - word rainbow in your database if you do
10:17 - could you give me a score if you don't
10:19 - will you tell me that you don't have it
10:21 - so this is yet another thing search word
10:24 - check to see what word did the user set
10:26 - in is it part of the data if it is say
10:28 - it's found and this is often a good
10:30 - technique let me give you back the data
10:32 - you asked for because a user of this API
10:35 - might be querying like a thousand
10:37 - different words and all the other
10:38 - responses are coming back and if the
10:40 - data that came with the request also
10:43 - comes back with a response is gonna make
10:44 - it easier for the user to manage so now
10:46 - let's run this and I can see here I'm
10:50 - gonna go now to search slash rainbow we
10:56 - can see status found the word is rainbow
10:58 - the score is five search unicorn
11:04 - status found word unicorn score 3 search
11:08 - kitten status not found word kitten so
11:14 - this is how I am now making an API that
11:17 - allows a user to query the database so
11:20 - we have the ability and then by the way
11:22 - now I can say add kitten 5 and then I
11:26 - can say search kitten and now it's found
11:31 - with the score of 5 so notice how I'm
11:33 - only interacting with this API via the
11:36 - URL address bar and ultimately as I get
11:39 - through more videos here I'm going to
11:41 - look at how do I actually interact with
11:42 - it from my client side JavaScript code
11:44 - which will really open up a lot of
11:46 - possibilities so I now have an API which
11:48 - has three features I can look at all the
11:52 - words that are in the database and their
11:54 - score I can add a word like purple
11:59 - didn't I already add purple so we're
12:01 - gonna have to talk about that and Oh
12:03 - purple is positive give it three so I
12:05 - can add a word and I can also search and
12:07 - see if a word is in there purple is in
12:12 - there but perhaps pink is not so this is
12:18 - a good start I have this idea of
12:20 - persistence there's a database of
12:23 - information users can add to that
12:25 - database users will can request all of
12:27 - the data from the database or they can
12:29 - request one item from the database but
12:31 - you'll notice here I have this wonderful
12:34 - thing where I have I add kitten in
12:37 - purple so now what I'm gonna do is I'm
12:40 - going to quit the server and I'm going
12:42 - to restart it and I don't have kitten in
12:47 - purple anymore
12:48 - so while there is persistence across to
12:53 - here the puppies barking about my
12:54 - wonderful API discussion while there is
12:58 - this idea of persistence while the
13:00 - server is running as soon as I quit the
13:02 - server and restart the server I've lost
13:04 - any new data that wasn't just part of
13:07 - what was originally written in here
13:09 - so in the next video what I'm going to
13:11 - show you is how to keep persistent
13:14 - across and multiple times running the
13:16 - server
13:17 - how do I take what's here and actually
13:19 - not have it be hard-coded but save it to
13:21 - database okay and I'll see you in the
13:24 - next video whoa I'll do that

Cleaned transcript:

in the previous video I got as far as defining a route with parameters the route is search / some keyword / some number and the response from the server that comes back is always I love whatever word however many times the number is so if I were to change this to unicorn and unicorn and put it just with slash 3 I would see I love unicorns 2 3 times so this is Wow fun and I like to see how much you love unicorns and rainbows do you love them as much as I don't know probably not which is a very healthy probably much healthier than however I am but the point of what I'm saying is this is kind of useless let's turn this into something useful and so the example that I'm ultimately building here is a sentiment analysis API and so one approach to sentiment analysis is to keep a dictionary of words that either have a positive or negative score associated with them so I'm going to go to the code and I'm just gonna write here at the top I'm gonna create a variable and I'm gonna call it words and I'm going to put some words in it with a score so I'm gonna say rainbow has a score of 5 and unicorn has a score of 3 what are some sad words doom has a score of negative 3 ok so this is my very basic sentiment analysis dictionary I've got three words in it and what their score is so first thing that I want to do in making a sentiment analysis API is expose this data so I'm going to actually add another route here I'm gonna say app get all send all and then I would say function send all and this is the callback which has a request and a response and all I'm gonna do is say response dot send words now notice what I did up here in this reply I just created this string and this string just kind of like spit itself out into the browser but somebody use the API is probably going to want to get the reply back formatted as JSON so I better do something to format this as JSON well what is words it's a JavaScript object what is job what is JSON JavaScript object notation so one of the magical things about using Express is Express will automatically format your JavaScript object that you send out into the world as JSON so this is actually done so I can now go to slash all and I can see this is now me making an API request to my API and I'm getting the list of words and if I add another word to it like gloom doom and gloom now I have another word there with a score of negative two I hit refresh I see that as well so what I want to do in addition to having this be an API so there's a couple of things I could do one is that I might want to search for a particular word to see if it's in the API if it is get the score or I might also want to be able to as a user add words to the API so that you know this is a sort of design decision you know what are you what are you doing here I'm just making a demonstration I think would be useful to see how can you create a route where a user can insert data into the database and by the way that's my database right now so as I go through these videos I'm gonna get into persistence working with databases and there are various levels of that you know on the one hand this will persist it will never go away it's written there into the code my database is hardcoded not the best solution but it's a good starting point so I'm gonna change this particular route and I'm gonna change it to add word score add word so I want to route where if the user adds a word with a score it goes into the database so I'm going to change this to add word here are the parameters the word is data data word the score is and this is I'm kind of being very longwinded about I can just say word equals request stop params not word but datascore and then what I want to do is say words word equals score look at this this is me taking in the data from the user the word and the score and putting it into that object right putting it into that object look with a key value pair the word is the key the score is the value and then I need to create a reply and all of my replies I want them to be written as an object so I'm gonna say message thank you for your word okay so there we go so now if I run this and I go here to all we can see all of the data is there now I'm going to go to one more window and I'm going to go to add purple five purple is a very happy word I'm gonna hit enter it's gonna say message thank you for your word so I got that message back and if I go to all we can see purple oh and look at that it got the you know of course the way that it's working is it came in as a string not a number so I could correct that if I want let's correct that so I could say let's make sure that is actually a number because I might want to do some mathematical operations with it later so let's convert that to a number and I'm going to add the word again hit refresh and now you can see I got purple five so there we go I have saved this word forevermore in the API now let's there's a couple things I want to add to this number one is what if I just go to add purple and I forget to add a number I run this it says it cannot get that it cannot add this because it's looking for this particular route and the route requires also a score however there is a way to make that score optional which could be useful for something you might do which is adding just a question mark to and it's really all works for the last one or though I'm sure there's some fancy ways around that and then what I could do is I could say if not score you know score equals five or I could say I could actually say score is required so let's say score is required just like I could add some error handling here like I could save our reply score is required else all of this so I'm basically saying whatever word comes in if I get a score so if not score and also I should probably check and I'm not going to do all this but you know if I want to be really serious about this I would also check like to make sure score is a number and if it's not if you sent me the score as like friendship I would say the score has to be a number but here I can just create this variable var reply I can fill it if there is no score I can say score is required if there is a score I can add it to the table and say thank you for your word and then send the response so this is one extra thing that I'm adding to this and if I now run this it's gonna say hey score is required so I can say now five thank you for your word and we can go back here and we can see purple is there with a score of five so there are a lot of ways to sort of check and see what will how people what what what's coming in and determine whether something is there or not okay so let's add one more thing to this let's add a search route so that if the user of this API wants to query for a particular word and get the score back let's see how that would work so I'm gonna add another route and I'm gonna call that I'm just gonna go down here to the bottom I'm gonna call it a search for a word and I'm gonna say search search word I'm going to add that fun a callback now search word with a request and a response and I'm gonna say the word you're searching for is whee Qwest params word and now what I want to do is see does that word exist if if that word is part of our words table I need to make a reply I'm going to send back a message but you know some going to say status found you know word word that's kind of probably a it's a little awkward what I'm doing I'm just gonna call this yeah it's fine it's a little awkward I'm doing with these variable names and then score I'm gonna say words word so what I'm doing here is I'm saying if it's found then the reply sorry equals this particular object so if it's found the status is found here's the word here's the score otherwise the reply is status not found and then there is no I can send back the war that word there is no score and I can say response dot send reply so the idea here is that you know I'm just showing you an example now I'm making a route for the API where a user could say hey do you have this word rainbow in your database if you do could you give me a score if you don't will you tell me that you don't have it so this is yet another thing search word check to see what word did the user set in is it part of the data if it is say it's found and this is often a good technique let me give you back the data you asked for because a user of this API might be querying like a thousand different words and all the other responses are coming back and if the data that came with the request also comes back with a response is gonna make it easier for the user to manage so now let's run this and I can see here I'm gonna go now to search slash rainbow we can see status found the word is rainbow the score is five search unicorn status found word unicorn score 3 search kitten status not found word kitten so this is how I am now making an API that allows a user to query the database so we have the ability and then by the way now I can say add kitten 5 and then I can say search kitten and now it's found with the score of 5 so notice how I'm only interacting with this API via the URL address bar and ultimately as I get through more videos here I'm going to look at how do I actually interact with it from my client side JavaScript code which will really open up a lot of possibilities so I now have an API which has three features I can look at all the words that are in the database and their score I can add a word like purple didn't I already add purple so we're gonna have to talk about that and Oh purple is positive give it three so I can add a word and I can also search and see if a word is in there purple is in there but perhaps pink is not so this is a good start I have this idea of persistence there's a database of information users can add to that database users will can request all of the data from the database or they can request one item from the database but you'll notice here I have this wonderful thing where I have I add kitten in purple so now what I'm gonna do is I'm going to quit the server and I'm going to restart it and I don't have kitten in purple anymore so while there is persistence across to here the puppies barking about my wonderful API discussion while there is this idea of persistence while the server is running as soon as I quit the server and restart the server I've lost any new data that wasn't just part of what was originally written in here so in the next video what I'm going to show you is how to keep persistent across and multiple times running the server how do I take what's here and actually not have it be hardcoded but save it to database okay and I'll see you in the next video whoa I'll do that
