With timestamps:

00:00 - [MUSIC PLAYING]
00:02 - Hello, and welcome
to Let's Make A Deal.
00:07 - Behind one of these three
doors is today's prize,
00:11 - a trip on the coding
train express.
00:14 - Behind the other
two doors is a goat.
00:17 - It's up to you to pick
one of these doors.
00:20 - Which one will you pick?
00:22 - I can hear the people of
the internet shouting out
00:24 - to me, door number 3.
00:27 - But before I reveal what's
behind door number 3,
00:31 - let me show you what's
behind door number 1.
00:37 - Now, I'm going to offer
you a one-time-only chance
00:42 - to switch--
00:43 - switch to door number 2, or do
you want to keep door number 3?
00:48 - Think about it.
00:49 - Should you switch?
00:50 - What is the probability that the
prize is behind door number 3,
00:56 - and what is the probability that
the prize is behind door number
01:00 - 2?
01:01 - This is the classic
Monty Hall problem,
01:03 - which originated in the
American television show,
01:05 - Let's Make a Deal
back in the 1970s.
01:08 - The answer to the problem is,
you should absolutely switch.
01:12 - If you switch, you will
have a 2 out of 3 chance--
01:15 - a 66.666666666% chance
of the prize being
01:21 - behind door number 2.
01:23 - This might seem
counterintuitive.
01:25 - Shouldn't it just be 50-50?
01:26 - There's two of them.
01:27 - It's definitely not
behind door number 1,
01:29 - so it's either behind door
number 2 or door number 3.
01:32 - No, that is not the case.
01:34 - In today's coding
challenge, I'm going
01:36 - to first explain to you why
you absolutely should switch.
01:40 - And then, I'm going
to code a simple P5 JS
01:42 - simulation of the game that you
can play over and over again
01:45 - to test your different theories
about what the proper strategy
01:48 - and probabilities might be.
01:50 - Let's recap the problem.
01:51 - We've got three doors.
01:56 - Behind one of these
doors is a prize--
01:58 - a train.
01:59 - Let's say it's
behind door number 2.
02:03 - There.
02:03 - That's my train.
02:04 - Then, behind doors
1 and 3 is a goat.
02:08 - I'm going to have
to draw a goat, now.
02:11 - It's more like a cat,
but it'll have to do.
02:14 - It's important to remember
that the host played by me,
02:17 - or Monty Hall, really,
knows where the prize is.
02:21 - Let's think about
all the possible ways
02:24 - this game could play out
and build a table describing
02:28 - those ways and look at how
often does the player win
02:32 - if they switch, and how often do
they win if they don't switch?
02:36 - So what are the stages?
02:38 - First, there's
the player's pick.
02:41 - Then, there's the door
revealed by the host.
02:46 - Then, there's the question of,
does the player switch or not?
02:51 - And of course, we have
the question, do they win?
02:59 - All right, let's say
the player starts
03:02 - by picking door number 1.
03:05 - The host, then, knowing that
the prize is in door number 2,
03:09 - has to reveal door
number 3 to show a goat.
03:14 - Now, remember, the player
has picked door number 1.
03:16 - If they switch, they'll be
switching to door number 2.
03:20 - Let's just assume, for
the sake of argument,
03:22 - that the player is
always going to switch.
03:24 - So yes, the player switches.
03:26 - Did the player win?
03:27 - Yes, the player wins--
03:30 - check.
03:30 - Now, let's look at the scenario
where the player starts
03:34 - by picking door number 2.
03:36 - Now, this is a
interesting scenario.
03:38 - Because if the player
has picked door number 2,
03:40 - Monty Hall has to reveal a
door that has a goat behind it.
03:45 - It could be either 1 or 3.
03:47 - So let's just say that Monty
Hall reveals door number
03:50 - 3 this time again.
03:52 - Again, we've got
another door number 3.
03:54 - The player has
picked door number 2.
03:56 - Should they switch
to door number 1?
03:59 - We know they shouldn't, but
let's say in the scenario,
04:02 - they do.
04:02 - So yes, they switch.
04:04 - And no, they do not win.
04:06 - The last possibility here
is that the player starts
04:09 - by picking door number 3.
04:11 - They pick door number 3.
04:12 - Monty Hall has to
reveal door number 1--
04:15 - the only other door
with a goat behind it.
04:18 - The player switches,
switching to door number 2,
04:24 - and yes, they win.
04:26 - There's only 3 ways
this game can play out.
04:29 - The player starting by
picking door number 1,
04:31 - starting by picking
door number 2,
04:33 - or starting by
picking door number 3.
04:35 - If the player always
switches, the player
04:39 - will win 2 out of 3 times.
04:41 - Think about it this way.
04:43 - Remember, you don't know
where the prizes are.
04:47 - You pick door number 1.
04:50 - And I'm going to say
to you now, well,
04:53 - would you like to
keep door number 1,
04:55 - or would you like to win if
it's behind either doors 2 or 3?
05:00 - Either one-- you
can have two doors.
05:02 - You don't need just one door.
05:03 - Stick with just one door,
or would you like two doors?
05:06 - That's exactly what
this problem is.
05:08 - You would want to
pick two doors,
05:10 - because it's more likely--
05:11 - 2 out of 3 times--
05:12 - to be behind one of these two
doors than the original one
05:15 - that you picked.
05:16 - Let's look at it, one more way.
05:20 - I'm going to show you 100 doors.
05:28 - All right, fine, let's
just do 50 doors.
05:30 - I don't feel like
drawing the rest.
05:31 - Pick any one of these doors.
05:33 - There's only a prize
behind one of them.
05:35 - This train ride-- this glorious
train ride you're going to win
05:38 - is somewhere behind
one of these 50 doors.
05:41 - Oh, oh, you want
to pick this one?
05:43 - OK, you pick this one.
05:45 - I'll color it in
purple to indicate
05:47 - it's the one you picked.
05:48 - Now, I'm going to reveal
to you that there's
05:51 - a goat behind 48 other doors.
05:58 - Would you like, now,
to switch to this door
06:02 - and see if the prize
is there, or would you
06:05 - like to keep your original door?
06:07 - I mean, hello, you're going to
want to switch to this door,
06:10 - right?
06:11 - What's the chance
that the prize happens
06:14 - to be your 1 out of 50 chance
that you happen to just pick,
06:17 - or I revealed all
of these other--
06:20 - I mean, it could be there.
06:21 - There could be a goat here.
06:23 - But I remember-- I know--
06:24 - all of these are goats.
06:26 - So I'm going to leave one open.
06:28 - If you didn't pick
the prize, I have
06:30 - to leave the one
with the prize open.
06:32 - Would you want to switch?
06:34 - I think you would.
06:35 - There's also a very specific
probability analysis
06:37 - known as the Bayes'
theorem that we
06:39 - could apply to show this
exact 2 out of 3 probability.
06:42 - Or in this case, it would be
a 49 out of 50 probability.
06:47 - You have a 1 out of 50 chance
of it being your original pick.
06:50 - Or if you switch, you have a
49 out of 50 chance of winning.
06:54 - But you're probably
not here wanting
06:56 - to listen to me drone
on and on and diagram
06:58 - on the whiteboard about
probability and the Monty Hall
07:01 - problem.
07:01 - We could build a P5 JS sketch
in code that simulates the Monty
07:07 - Hall problem, run it
thousands of times,
07:10 - and see if my analysis
proves to be correct.
07:14 - Also, by the way, who is
to say that the goat isn't
07:17 - the true prize, after all?
07:18 - I would love to have some
wonderful, beautiful goats.
07:21 - My usual approach
to this would be
07:23 - to start drawing
doors in the canvas
07:25 - and checking where
the mouse is clicking.
07:27 - But I think I'd actually like
to try this with DOM elements,
07:31 - meaning HTML elements
that are not canvases
07:34 - that appear on a web page.
07:35 - Which, if you didn't know,
you could also do in P5.
07:39 - So I'm actually going to do
something quite exciting here
07:41 - and say, no canvas.
07:44 - I'm going to write a little
loop to create three doors.
07:48 - Let's make an array to hold
the data for those three doors.
07:54 - And each door will be
a Div on the web page.
07:59 - Let's start by putting
a goat in each one.
08:01 - And then, I will
pick one randomly
08:04 - and put the prize there.
08:09 - So every time I run this sketch,
I see three emojis, only one
08:12 - of which is a train.
08:13 - Now, of course,
they're really tiny.
08:15 - So let's work on
some design-y things.
08:18 - Let's create a CSS class.
08:20 - A CSS class is a
way of designating
08:23 - a particular set of
styles to be applied
08:26 - to any element on the web page.
08:28 - This isn't a full lesson
about CSS, obviously.
08:31 - I barely know CSS.
08:33 - But I will put resources in
the video description and up
08:36 - on the screen here, as
well as some other videos
08:38 - I have that go through
CSS in a bit more detail.
08:41 - But right here in
the P5 web editor,
08:42 - I can go over to
the style.css file.
08:45 - I can create a door
class, and I can start
08:48 - to add some properties to it.
08:53 - Now, what I really like to do is
center those emojis in the Div.
09:00 - Thankfully, the live Twitch
chat that's watching along here
09:03 - has given me some tips
of how to do this.
09:10 - Let's make the emojis
a little bit bigger.
09:15 - Let's put a little
margin between the Divs.
09:18 - And I want to see
them in a row, so I
09:21 - think I can add display
flex to the body.
09:26 - Great.
09:27 - Now, we've got our
three doors there.
09:29 - So the tricky thing
here is I want
09:31 - to make a Div that knows
whether it's a goat or a train,
09:35 - but I don't want to
reveal that goat or train.
09:38 - I could create my own wrapper.
09:40 - I could create a door
class that has a Div.
09:42 - But I think since these are
just JavaScript objects,
09:45 - a P5 element, I can attach
other properties to them.
09:49 - So I'm going to make
the Div with no text.
09:53 - And instead, I'll add a
new property called prize,
09:59 - which is by default, a goat.
10:02 - Let's call this, winning door.
10:06 - I'll say the winning
door's prize is the train.
10:09 - So now, I have three doors.
10:11 - Behind the scenes,
there's a variable
10:13 - attached to each of
those Divs that's
10:16 - holding on to either
a goat or a train.
10:18 - But the viewer, the player--
10:20 - I-- cannot see
which one is which.
10:22 - Now, what I want to
do is attach an event
10:25 - to each door to do something
when I click on it.
10:27 - The clicking on the door over
the act of selecting that one.
10:31 - I can do this with the
P5 event mouse pressed.
10:34 - And whenever the
mouse is pressed,
10:36 - I want to execute a function.
10:38 - I'll call it, reveal.
10:41 - One of the nice things that
P5 does behind the scenes
10:45 - is it binds that particular
function, reveal,
10:49 - to the DOM element that
was triggered by the event.
10:54 - And that binding is embedded
inside the key word, this.
10:59 - I have a whole video all
about the this keyword
11:01 - and how this works.
11:03 - But for now, what you
would see is if I just
11:05 - say console.log, this.prize,
when I click on each door,
11:09 - we'll see the prize
in the console.
11:12 - That one's a goat.
11:14 - That one's also a goat.
11:15 - And that one's the train.
11:17 - Running it one more time,
we have train, goat, goat.
11:22 - So now, I need something
to keep track of the state.
11:25 - There's the moment I pick.
11:27 - There's the moment I reveal.
11:29 - There's the moment I switch,
and then, whether I win or not.
11:34 - So let's create a
variable called state
11:36 - to keep track of the game state.
11:38 - And we're going to start
with pick, meaning we're
11:41 - waiting for the player to pick.
11:43 - Now, I'm going to keep
this console.log here,
11:46 - which will help me
know what's going on.
11:48 - And this reveal is a
little bit of a misnomer,
11:50 - actually, because we
don't want to reveal
11:53 - the one that we picked.
11:54 - We want to reveal a different
one that has a goat behind it.
11:58 - So something that would
help me a little bit
12:00 - is to also have each Div know
its index into the array.
12:06 - So here, the Div also has
a property called index
12:09 - that I'm storing--
12:10 - where is it in the doors array?
12:14 - So when I click, I
should see 0, 1, 2.
12:18 - So once I've picked,
I need Monty Hall
12:21 - to reveal one of
the other doors.
12:27 - So Monty Hall need to know,
which doors can they reveal?
12:30 - We'll make a new
array called options.
12:33 - As long as it's not the
door that the player picked
12:37 - and the prize is not the train--
12:45 - I can make this a
little less wordy
12:47 - by putting the door in
a separate variable.
12:53 - Oh, this-- as long as
I is not this.index.
12:57 - I don't know-- I was
so confused there.
12:59 - As long as the
door I'm looking at
13:01 - is not the one
that was clicked on
13:03 - and that door is
not the prize, then
13:07 - it's something that
could be revealed.
13:10 - Now, remember, if the player
didn't pick the right door
13:12 - in the first place,
there's only going
13:14 - to be one thing
left in the options.
13:16 - But I need to check
all the possibilities
13:18 - because if they
did pick the prize,
13:20 - then Monty Hall can choose
to reveal one of two doors.
13:26 - But we'll pick one of
the options randomly.
13:28 - If there's just one, there's
only one it can pick.
13:32 - And we will put in the Div
the actual prize itself.
13:37 - OK, I'm going to
pick door number 1,
13:38 - and we should see a goat
appear in either door 2 or 3.
13:44 - [LAUGHING]
13:46 - What did I do wrong?
13:48 - Oh, I did it if it's--
13:49 - I have to say, if it's
not equal to the train.
13:52 - OK, that was a disaster.
13:54 - Let's try this again.
13:56 - I'm going to pick door number 1.
13:58 - There's that goat.
13:59 - Let's run it again.
14:00 - There's the goat.
14:01 - So we always will see a
goat no matter what I pick.
14:05 - Another thing I think
I should add here
14:06 - is something to indicate
which door was picked.
14:11 - So let's put a little green.
14:13 - So that's highlighting
which one I've picked.
14:16 - Now is really the moment
where some animation
14:18 - or some thoughtful
interaction design
14:20 - would be a great addition,
and I hope you, the viewer,
14:22 - will make it more
intuitive and smooth
14:24 - way of playing out this game.
14:26 - But I'm just going to
really quickly toss
14:28 - in a couple of buttons--
14:29 - one button for if
you want to switch
14:31 - doors or a different button
if you want to stay put.
14:38 - So when I click on
any of the doors,
14:41 - those two buttons will
now suddenly appear.
14:43 - Now, they look a
little weird here
14:44 - because I have this
CSS display property
14:48 - as flex in the entire body.
14:50 - So probably, I should make
a container for the doors.
14:56 - I'm going to manually put
in a Div called doors,
15:00 - reference the ID
with the hash symbol,
15:05 - put the flex
display there, then,
15:09 - I can put the door Divs
in the doors container
15:13 - by using the P5 parent function.
15:17 - Then, my buttons look a little
bit more normal there just
15:20 - on the next line.
15:21 - They are kind of
small, so let me
15:23 - make the font size a bit bigger
and give them a little margin.
15:29 - OK, again, very crude
interaction design.
15:33 - But now, I can choose whether
I want to switch or stay.
15:37 - This is also, maybe, a good
moment for me to-- now that
15:40 - I've got some code worked out--
15:42 - refactor it.
15:43 - Maybe it would be nice
to look at the code
15:45 - to see there's a pick function,
a reveal function, a switch
15:48 - function, and then
a win function.
15:50 - Right now, I only
have reveal function,
15:52 - which is kind of doing both
of these first two steps.
15:55 - So when I click on a door,
what I'm really doing
15:57 - is picking that door.
16:00 - And let's have a variable
called pick door,
16:05 - which is set equal to this--
16:07 - the Div that was
clicked on, which
16:09 - is held in the keyword
this, based on P5
16:13 - binding it to the
mouse pressed event.
16:15 - Then, I can call reveal.
16:19 - Reveal looks at all the
the doors and figures out,
16:22 - what are the ones
that can be revealed,
16:24 - as long as it's not the prize
or the picked door's index?
16:29 - This-- setting it
to green-- is really
16:31 - a thing we're doing when
we're picking the door.
16:33 - And here we are revealing one
of the other doors that has
16:36 - a goat, creating the buttons.
16:39 - And the button's event will
be the switch function.
16:49 - I'm going to make the door
that was revealed also
16:51 - a global variable.
16:55 - So if the player
switches, I need
16:57 - to reassign picked door
to the door that wasn't
17:00 - picked and wasn't revealed.
17:09 - So by switching, the
new pick is the door
17:13 - that hasn't been
picked or revealed,
17:15 - and that is now the picked door.
17:19 - And then, we have
to check, did I win?
17:22 - We'll call a function
called, check win.
17:24 - And the players stay means,
actually, you don't switch,
17:28 - so just go right to
this check win function.
17:39 - And let's also reveal
all the prizes.
17:44 - Here we go.
17:45 - I'm going to pick door number 1.
17:47 - Uh-oh, I got an error.
17:48 - Door reveal not being defined.
17:52 - Oh, I don't remember
when I made this mistake,
17:54 - but I called it revealed door
and then said, door reveal.
17:58 - So the revealed door
is the one that I
18:00 - want to put the new content in.
18:01 - OK, here we go.
18:02 - I'm going to pick this door.
18:04 - Oh, what's going on?
18:05 - Oh, revealdoor.prize.
18:08 - OK, finally, I'm
going to get it.
18:09 - I'm going to pick this door.
18:11 - It's showing me the goat.
18:12 - So I could switch,
or I could stay.
18:15 - Let's try switching.
18:17 - And I won.
18:18 - So this-- I think I should this
should be a different color.
18:22 - I'm going to make this blue
just to show that I've selected
18:25 - and green meaning I won.
18:28 - Pick this door.
18:29 - I'm going to switch.
18:31 - And I won.
18:32 - And let's get rid of
the blue after I switch.
18:39 - I think I have everything now.
18:40 - I'm going to pick a door.
18:42 - I'm going to switch, and I lost.
18:45 - I'm going to play again.
18:47 - I'm going to pick a door.
18:48 - I'm going to switch, and I won.
18:51 - It's working.
18:52 - Could use a lot of improvement.
18:54 - Let's clean up
just a few things.
18:57 - One is, I have this wonderful
state variable that I never
19:00 - bothered to change.
19:02 - So the moment I pick the door,
I should change the state.
19:07 - And I made it a const for some
reason, which it shouldn't be.
19:10 - So I'm changing the
state to reveal.
19:12 - The reason why this
is important is
19:15 - that picking event should only
happen if the state is pick.
19:22 - So now, if I were to click
again in the middle of the game,
19:24 - it wouldn't change
anything that's happening.
19:26 - This code would not execute.
19:28 - I am probably overusing
global variables here.
19:31 - But it would be
helpful to actually
19:33 - have these buttons be global
variables that I could just
19:36 - show or hide as needed.
19:39 - So I'm actually going to take
these and put them in Setup,
19:47 - hide them, and then
just show them when
19:50 - it's time to prompt the user.
19:55 - Then, after the
player has either
19:58 - chosen to switch or stay, I
can hide those buttons again.
20:04 - Pick a door, switch, and I won.
20:07 - Let's add some CSS for
the you win message.
20:13 - And let's create a
Play Again button.
20:21 - Now, of course, a lot
of these DOM elements
20:24 - don't need to be generated
with P5 functions.
20:27 - In a properly-designed
page, you might
20:29 - want to do all of this
with HTML and CSS.
20:31 - But this is just a
quick way that I'm
20:33 - doing it to get this going.
20:34 - That said, to finish off
this play again button,
20:37 - I need to write the
start over function.
20:40 - What do we do to start over?
20:42 - Well, we need to pick
a new prize, again.
20:47 - Start them all off as goats.
20:51 - Pick a random one
to be the winner.
20:54 - Now that I've done
this, I actually
20:56 - don't need to do this
here in Setup anymore.
21:01 - I can just say, start over.
21:04 - I should also make sure I
clear any background color
21:07 - or text that was in the Div
and hide the Play Again button.
21:14 - All right, let's
see if this works.
21:17 - I'm going to pick door number 1.
21:19 - I'm going to switch.
21:21 - Whoops, I think I forgot to
show the Play Again button.
21:24 - playAgain.show. show
21:27 - One more time.
21:28 - Let's pick door number
3, and let's switch.
21:31 - I won.
21:32 - Let's play again.
21:34 - Still says, you win there.
21:36 - I need a permanent place
for the win or lose message.
21:40 - Call that outcomeP
for outcome paragraph.
21:44 - Definitely need to clear it
when we start over in Setup.
21:50 - You need to create it.
21:52 - And then, the message--
21:53 - instead of creating
a new paragraph,
21:55 - we just put it in
the existing one.
21:59 - All right, ready for this?
22:01 - All right, I'm going
to pick door number 2.
22:03 - I never seem to pick
door number 2 to start.
22:06 - The goat is revealed
as door number 3.
22:08 - Should I switch?
22:08 - Should I say?
22:09 - I'm going to switch.
22:11 - Whoops, what just
happened there?
22:13 - Nice little typo there.
22:14 - I would have lost, so good
thing I got that error.
22:19 - I'm going to pick door number 2.
22:21 - The goat is revealed
as door number 1.
22:22 - I'm going to switch, and I won.
22:25 - Let's play again, I'm going
to pick door number 3.
22:28 - No, it's not working.
22:30 - Oh, I've got to set
the state back to pick.
22:33 - So ultimately, I
don't know if I really
22:35 - needed this state variable.
22:36 - Or I'm certainly not
using it very effectively
22:39 - because I only have it as
pick or not pick, essentially.
22:41 - But I'll let you figure
out how to improve that
22:44 - in your own version of this.
22:47 - But when I start
over, I definitely
22:48 - need to set the
state back to pick.
22:51 - Here we go.
22:52 - I'm going to pick door number 2.
22:55 - I'm going to switch.
22:57 - I'm going to play again.
22:58 - I'm going to pick door number 1.
23:00 - I'm going to switch.
23:01 - I'm going to play again
and pick the number 3.
23:03 - I'm going to switch.
23:04 - I'm going to play again--
23:05 - door 1 and switch.
23:07 - I'm just winning
over and over again.
23:09 - I am so good at this game.
23:11 - I'm ready to wrap this up.
23:12 - I mean, what I really
would like to do--
23:13 - and I'll create a version of it
that just picks automatically
23:16 - and switches automatically,
running it hundreds of times
23:20 - per second.
23:20 - And I'm showing that to
you right now over here.
23:23 - But what I'm going
to do in this video
23:25 - itself is just add some
code to track the win
23:29 - rate for switching and the
win rate for staying put.
23:33 - And if the math that
I demonstrate it
23:36 - at the beginning to
video is correct,
23:37 - we should see a win rate of
approximately 2 out of 3 times
23:41 - for switching and 1 out of
3 times for staying put.
23:45 - So I need a variable for
total plays, total switches.
23:51 - Actually, I don't
need the total plays.
23:53 - I need to know, how
many times did I switch,
23:55 - and how many times did I stay?
23:57 - So I'll call that
total switch plays.
24:00 - Awkward variable names.
24:03 - Then, I need switch
wins and stay wins.
24:11 - Every time the
player switches, I
24:13 - need to increase the
number of switch plays.
24:17 - Every time the player stays--
24:19 - ah, but I don't have a
function for staying.
24:21 - So let me actually
go and put that in.
24:23 - So instead of when you stay
going directly to check win,
24:26 - let's write a player
stay function.
24:32 - And the only thing
that happens in
24:33 - that function is we increase
the number of total stay
24:38 - plays and then go to check wins.
24:41 - Oh, but when I checked
the win, how do I
24:43 - know whether I switched or not?
24:45 - And this is a typo here.
24:47 - All right, again, so
much to refactor later.
24:50 - But let's introduce
another variable.
24:54 - Oh, no, no.
24:54 - I don't need another variable.
24:55 - I know exactly what to do.
24:57 - The check win function
can receive an argument.
25:00 - Did the player switch or not?
25:04 - So when the player stays,
we can say, check win false.
25:08 - When the player switches,
we can say, check when true.
25:12 - If the player switch--
25:14 - maybe should be player switched.
25:16 - If the player switched,
total switch wins--
25:20 - plus, plus.
25:21 - Otherwise, total stay wins--
25:25 - plus, plus.
25:26 - And then, if the player loses--
25:28 - I'm not keeping track
of the number of losses.
25:30 - By definition,
that's the difference
25:32 - between the total plays
and the number of wins.
25:35 - So I think I'm good.
25:36 - I just need to put the
stats on the page itself.
25:39 - So another paragraph element.
25:42 - Call it results.
25:45 - And here, let's
show the win rates.
25:51 - The switch rate is the
total switch wins divided
25:54 - by the total switch plays.
25:57 - The stay rate is the total stay
wins divided by the total stay
26:02 - plays.
26:04 - Then, I can use a
nice template literal
26:07 - to display a nicely-formatted
message with the data that
26:11 - is in those variables.
26:21 - And for the win rates.
26:22 - I want those to
appear as percentages,
26:24 - so I'll multiply them by 100.
26:28 - And then, I can use the P5
number format function to only
26:31 - show it to two decimal places.
26:37 - All right, I think we might
be finished with this.
26:39 - Let's see if I have any errors.
26:41 - I'm going to pick door number 1.
26:43 - I'm going to switch.
26:45 - And the total switches is 1.
26:47 - The switch-- oh.
26:49 - I forgot that this is HTML.
26:51 - So even though I put these
nice line breaks in here,
26:54 - that means absolutely nothing.
26:56 - I need to put
actual line breaks.
26:59 - Let's give myself more space to
see the canvas, and here we go.
27:05 - I'm going to just play
this a lot of times now.
27:07 - [MUSIC PLAYING]
27:16 - After playing 44 times,
I switched 22 times.
27:20 - I stayed 22 times.
27:21 - You can see my switch
win rate is about 68%
27:25 - and my stay win
rate is about 41%.
27:29 - So obviously, I've gotten
extra lucky on both--
27:32 - quite a bit luckier for staying.
27:34 - That should really be at 1/3.
27:36 - 68% is quite close to 2/3.
27:39 - But the math that we started
with is what we're seeing
27:42 - play out here in playing the
game over and over again.
27:45 - This would also be, by the
way, a really great opportunity
27:49 - to use local storage.
27:50 - So if I stop the sketch
and start it up again,
27:54 - I would then see all of the
plays that I did before.
27:57 - I did happen to just
make a whole tutorial
28:00 - about local storage,
so if you want
28:01 - to go watch that then
come back to this,
28:03 - I'll leave it as an
exercise to the viewer.
28:05 - And I will add an extra
code example for this video
28:08 - with local storage implemented.
28:10 - Also, if I haven't
actually played a game,
28:12 - I get a divide by zero error.
28:15 - That's probably something
that I should address.
28:17 - But as long as I play
one switch and one stay,
28:19 - the error will go away.
28:21 - Before I leave
you, let me attempt
28:24 - to tie everything I've
done to Bayes' theorem.
28:32 - This is the famous Bayes'
probability theorem.
28:36 - Let me first address what is
meant by the notation here.
28:40 - So if we say
something like P of a,
28:45 - this is the probability of
the event, a, occurring.
28:49 - So if I'm flipping a
coin and the event a,
28:51 - is it landing on heads?
28:53 - The probability of a is 50%--
28:56 - 1 out of 2 times.
28:57 - This notation
here, P, A line B--
29:03 - this is known as conditional
probability, meaning,
29:08 - there are two events,
A and B. What's
29:11 - the probability of A
occurring given B occurring.
29:16 - Bayesian inference is
the idea of determining
29:20 - what is the probability of
one of the events occurring
29:24 - given prior knowledge
of a previous event.
29:28 - Now, I'd like to try to tie
this formula to the Monte Hall
29:31 - problem, itself.
29:32 - Let's create the three
doors and actually
29:34 - label them A, B,
and C. So I'm going
29:39 - to start by picking
door C. Monty
29:43 - Hall is going to reveal door B.
29:48 - What is the probability, then,
that I win if I switch to A?
29:53 - Given the event that
Monty Hall reveals
29:57 - door B, what is the probability
that A is the winner?
30:02 - That is what this part of
the formula is describing.
30:05 - Now, we just need to figure out
each of these three components.
30:09 - Well, let's start with
the easiest one first.
30:12 - The prior probability-- just
given nothing, no information
30:16 - whatsoever-- that the winner,
the prize is under door A
30:21 - is 1 out of 3.
30:24 - P of B-- B is the event that
Monte hall reveals door B.
30:30 - What is the probability
that Monte hall will reveal
30:34 - door B if the prize is under A?
30:38 - Well, that's 100%--
30:40 - 100%.
30:41 - Because if I picked C
and the prize is under A,
30:45 - Monty Hall has to show door
B. So that's 100%, or 1.
30:51 - Now, we've got a
slightly trickier one.
30:53 - Given no information,
what's the probability
30:56 - that Monte Hall reveals door B?
30:59 - So I picked C,
but I don't know--
31:02 - the prize is not
necessarily under A.
31:05 - We don't have that
prior information.
31:07 - So the probability
that Monte Hall
31:09 - reveals door B in this case
is just a flip of a coin--
31:12 - 50%.
31:13 - Maybe it's going
to be A, maybe it's
31:15 - going to be B. We don't
have any information
31:17 - to tell us one or the other.
31:18 - So now, 1 times 1/3 divided
by 1/2 guess what that is--
31:26 - 2/3.
31:27 - The probability-- if
I started with C--
31:30 - that A is the winner, given
Monty Hall revealing B,
31:33 - is 2 out of 3.
31:35 - And there's a lot
more to be said
31:37 - about this kind of
probability analysis.
31:39 - I will include some
excellent references
31:41 - to Bayes' theorem
and the Monty Hall
31:43 - problem in the
video's description,
31:44 - if you want to take
a look at those.
31:46 - One thing that I really missed
that would be fun to try
31:49 - is, could you make the
number of doors a variable?
31:51 - So suddenly, you have
a version of this
31:53 - with 10 doors or 100 doors.
31:54 - And how many doors are revealed?
31:56 - Oh, so many possibilities.
31:57 - Board the train, make your
own creative twist on this,
32:01 - share it with me, and I
will see you next time.
32:03 - Goodbye.
32:04 - [TRAIN WHISTLE]
32:06 - [MUSIC PLAYING]

Cleaned transcript:

[MUSIC PLAYING] Hello, and welcome to Let's Make A Deal. Behind one of these three doors is today's prize, a trip on the coding train express. Behind the other two doors is a goat. It's up to you to pick one of these doors. Which one will you pick? I can hear the people of the internet shouting out to me, door number 3. But before I reveal what's behind door number 3, let me show you what's behind door number 1. Now, I'm going to offer you a onetimeonly chance to switch switch to door number 2, or do you want to keep door number 3? Think about it. Should you switch? What is the probability that the prize is behind door number 3, and what is the probability that the prize is behind door number 2? This is the classic Monty Hall problem, which originated in the American television show, Let's Make a Deal back in the 1970s. The answer to the problem is, you should absolutely switch. If you switch, you will have a 2 out of 3 chance a 66.666666666% chance of the prize being behind door number 2. This might seem counterintuitive. Shouldn't it just be 5050? There's two of them. It's definitely not behind door number 1, so it's either behind door number 2 or door number 3. No, that is not the case. In today's coding challenge, I'm going to first explain to you why you absolutely should switch. And then, I'm going to code a simple P5 JS simulation of the game that you can play over and over again to test your different theories about what the proper strategy and probabilities might be. Let's recap the problem. We've got three doors. Behind one of these doors is a prize a train. Let's say it's behind door number 2. There. That's my train. Then, behind doors 1 and 3 is a goat. I'm going to have to draw a goat, now. It's more like a cat, but it'll have to do. It's important to remember that the host played by me, or Monty Hall, really, knows where the prize is. Let's think about all the possible ways this game could play out and build a table describing those ways and look at how often does the player win if they switch, and how often do they win if they don't switch? So what are the stages? First, there's the player's pick. Then, there's the door revealed by the host. Then, there's the question of, does the player switch or not? And of course, we have the question, do they win? All right, let's say the player starts by picking door number 1. The host, then, knowing that the prize is in door number 2, has to reveal door number 3 to show a goat. Now, remember, the player has picked door number 1. If they switch, they'll be switching to door number 2. Let's just assume, for the sake of argument, that the player is always going to switch. So yes, the player switches. Did the player win? Yes, the player wins check. Now, let's look at the scenario where the player starts by picking door number 2. Now, this is a interesting scenario. Because if the player has picked door number 2, Monty Hall has to reveal a door that has a goat behind it. It could be either 1 or 3. So let's just say that Monty Hall reveals door number 3 this time again. Again, we've got another door number 3. The player has picked door number 2. Should they switch to door number 1? We know they shouldn't, but let's say in the scenario, they do. So yes, they switch. And no, they do not win. The last possibility here is that the player starts by picking door number 3. They pick door number 3. Monty Hall has to reveal door number 1 the only other door with a goat behind it. The player switches, switching to door number 2, and yes, they win. There's only 3 ways this game can play out. The player starting by picking door number 1, starting by picking door number 2, or starting by picking door number 3. If the player always switches, the player will win 2 out of 3 times. Think about it this way. Remember, you don't know where the prizes are. You pick door number 1. And I'm going to say to you now, well, would you like to keep door number 1, or would you like to win if it's behind either doors 2 or 3? Either one you can have two doors. You don't need just one door. Stick with just one door, or would you like two doors? That's exactly what this problem is. You would want to pick two doors, because it's more likely 2 out of 3 times to be behind one of these two doors than the original one that you picked. Let's look at it, one more way. I'm going to show you 100 doors. All right, fine, let's just do 50 doors. I don't feel like drawing the rest. Pick any one of these doors. There's only a prize behind one of them. This train ride this glorious train ride you're going to win is somewhere behind one of these 50 doors. Oh, oh, you want to pick this one? OK, you pick this one. I'll color it in purple to indicate it's the one you picked. Now, I'm going to reveal to you that there's a goat behind 48 other doors. Would you like, now, to switch to this door and see if the prize is there, or would you like to keep your original door? I mean, hello, you're going to want to switch to this door, right? What's the chance that the prize happens to be your 1 out of 50 chance that you happen to just pick, or I revealed all of these other I mean, it could be there. There could be a goat here. But I remember I know all of these are goats. So I'm going to leave one open. If you didn't pick the prize, I have to leave the one with the prize open. Would you want to switch? I think you would. There's also a very specific probability analysis known as the Bayes' theorem that we could apply to show this exact 2 out of 3 probability. Or in this case, it would be a 49 out of 50 probability. You have a 1 out of 50 chance of it being your original pick. Or if you switch, you have a 49 out of 50 chance of winning. But you're probably not here wanting to listen to me drone on and on and diagram on the whiteboard about probability and the Monty Hall problem. We could build a P5 JS sketch in code that simulates the Monty Hall problem, run it thousands of times, and see if my analysis proves to be correct. Also, by the way, who is to say that the goat isn't the true prize, after all? I would love to have some wonderful, beautiful goats. My usual approach to this would be to start drawing doors in the canvas and checking where the mouse is clicking. But I think I'd actually like to try this with DOM elements, meaning HTML elements that are not canvases that appear on a web page. Which, if you didn't know, you could also do in P5. So I'm actually going to do something quite exciting here and say, no canvas. I'm going to write a little loop to create three doors. Let's make an array to hold the data for those three doors. And each door will be a Div on the web page. Let's start by putting a goat in each one. And then, I will pick one randomly and put the prize there. So every time I run this sketch, I see three emojis, only one of which is a train. Now, of course, they're really tiny. So let's work on some designy things. Let's create a CSS class. A CSS class is a way of designating a particular set of styles to be applied to any element on the web page. This isn't a full lesson about CSS, obviously. I barely know CSS. But I will put resources in the video description and up on the screen here, as well as some other videos I have that go through CSS in a bit more detail. But right here in the P5 web editor, I can go over to the style.css file. I can create a door class, and I can start to add some properties to it. Now, what I really like to do is center those emojis in the Div. Thankfully, the live Twitch chat that's watching along here has given me some tips of how to do this. Let's make the emojis a little bit bigger. Let's put a little margin between the Divs. And I want to see them in a row, so I think I can add display flex to the body. Great. Now, we've got our three doors there. So the tricky thing here is I want to make a Div that knows whether it's a goat or a train, but I don't want to reveal that goat or train. I could create my own wrapper. I could create a door class that has a Div. But I think since these are just JavaScript objects, a P5 element, I can attach other properties to them. So I'm going to make the Div with no text. And instead, I'll add a new property called prize, which is by default, a goat. Let's call this, winning door. I'll say the winning door's prize is the train. So now, I have three doors. Behind the scenes, there's a variable attached to each of those Divs that's holding on to either a goat or a train. But the viewer, the player I cannot see which one is which. Now, what I want to do is attach an event to each door to do something when I click on it. The clicking on the door over the act of selecting that one. I can do this with the P5 event mouse pressed. And whenever the mouse is pressed, I want to execute a function. I'll call it, reveal. One of the nice things that P5 does behind the scenes is it binds that particular function, reveal, to the DOM element that was triggered by the event. And that binding is embedded inside the key word, this. I have a whole video all about the this keyword and how this works. But for now, what you would see is if I just say console.log, this.prize, when I click on each door, we'll see the prize in the console. That one's a goat. That one's also a goat. And that one's the train. Running it one more time, we have train, goat, goat. So now, I need something to keep track of the state. There's the moment I pick. There's the moment I reveal. There's the moment I switch, and then, whether I win or not. So let's create a variable called state to keep track of the game state. And we're going to start with pick, meaning we're waiting for the player to pick. Now, I'm going to keep this console.log here, which will help me know what's going on. And this reveal is a little bit of a misnomer, actually, because we don't want to reveal the one that we picked. We want to reveal a different one that has a goat behind it. So something that would help me a little bit is to also have each Div know its index into the array. So here, the Div also has a property called index that I'm storing where is it in the doors array? So when I click, I should see 0, 1, 2. So once I've picked, I need Monty Hall to reveal one of the other doors. So Monty Hall need to know, which doors can they reveal? We'll make a new array called options. As long as it's not the door that the player picked and the prize is not the train I can make this a little less wordy by putting the door in a separate variable. Oh, this as long as I is not this.index. I don't know I was so confused there. As long as the door I'm looking at is not the one that was clicked on and that door is not the prize, then it's something that could be revealed. Now, remember, if the player didn't pick the right door in the first place, there's only going to be one thing left in the options. But I need to check all the possibilities because if they did pick the prize, then Monty Hall can choose to reveal one of two doors. But we'll pick one of the options randomly. If there's just one, there's only one it can pick. And we will put in the Div the actual prize itself. OK, I'm going to pick door number 1, and we should see a goat appear in either door 2 or 3. [LAUGHING] What did I do wrong? Oh, I did it if it's I have to say, if it's not equal to the train. OK, that was a disaster. Let's try this again. I'm going to pick door number 1. There's that goat. Let's run it again. There's the goat. So we always will see a goat no matter what I pick. Another thing I think I should add here is something to indicate which door was picked. So let's put a little green. So that's highlighting which one I've picked. Now is really the moment where some animation or some thoughtful interaction design would be a great addition, and I hope you, the viewer, will make it more intuitive and smooth way of playing out this game. But I'm just going to really quickly toss in a couple of buttons one button for if you want to switch doors or a different button if you want to stay put. So when I click on any of the doors, those two buttons will now suddenly appear. Now, they look a little weird here because I have this CSS display property as flex in the entire body. So probably, I should make a container for the doors. I'm going to manually put in a Div called doors, reference the ID with the hash symbol, put the flex display there, then, I can put the door Divs in the doors container by using the P5 parent function. Then, my buttons look a little bit more normal there just on the next line. They are kind of small, so let me make the font size a bit bigger and give them a little margin. OK, again, very crude interaction design. But now, I can choose whether I want to switch or stay. This is also, maybe, a good moment for me to now that I've got some code worked out refactor it. Maybe it would be nice to look at the code to see there's a pick function, a reveal function, a switch function, and then a win function. Right now, I only have reveal function, which is kind of doing both of these first two steps. So when I click on a door, what I'm really doing is picking that door. And let's have a variable called pick door, which is set equal to this the Div that was clicked on, which is held in the keyword this, based on P5 binding it to the mouse pressed event. Then, I can call reveal. Reveal looks at all the the doors and figures out, what are the ones that can be revealed, as long as it's not the prize or the picked door's index? This setting it to green is really a thing we're doing when we're picking the door. And here we are revealing one of the other doors that has a goat, creating the buttons. And the button's event will be the switch function. I'm going to make the door that was revealed also a global variable. So if the player switches, I need to reassign picked door to the door that wasn't picked and wasn't revealed. So by switching, the new pick is the door that hasn't been picked or revealed, and that is now the picked door. And then, we have to check, did I win? We'll call a function called, check win. And the players stay means, actually, you don't switch, so just go right to this check win function. And let's also reveal all the prizes. Here we go. I'm going to pick door number 1. Uhoh, I got an error. Door reveal not being defined. Oh, I don't remember when I made this mistake, but I called it revealed door and then said, door reveal. So the revealed door is the one that I want to put the new content in. OK, here we go. I'm going to pick this door. Oh, what's going on? Oh, revealdoor.prize. OK, finally, I'm going to get it. I'm going to pick this door. It's showing me the goat. So I could switch, or I could stay. Let's try switching. And I won. So this I think I should this should be a different color. I'm going to make this blue just to show that I've selected and green meaning I won. Pick this door. I'm going to switch. And I won. And let's get rid of the blue after I switch. I think I have everything now. I'm going to pick a door. I'm going to switch, and I lost. I'm going to play again. I'm going to pick a door. I'm going to switch, and I won. It's working. Could use a lot of improvement. Let's clean up just a few things. One is, I have this wonderful state variable that I never bothered to change. So the moment I pick the door, I should change the state. And I made it a const for some reason, which it shouldn't be. So I'm changing the state to reveal. The reason why this is important is that picking event should only happen if the state is pick. So now, if I were to click again in the middle of the game, it wouldn't change anything that's happening. This code would not execute. I am probably overusing global variables here. But it would be helpful to actually have these buttons be global variables that I could just show or hide as needed. So I'm actually going to take these and put them in Setup, hide them, and then just show them when it's time to prompt the user. Then, after the player has either chosen to switch or stay, I can hide those buttons again. Pick a door, switch, and I won. Let's add some CSS for the you win message. And let's create a Play Again button. Now, of course, a lot of these DOM elements don't need to be generated with P5 functions. In a properlydesigned page, you might want to do all of this with HTML and CSS. But this is just a quick way that I'm doing it to get this going. That said, to finish off this play again button, I need to write the start over function. What do we do to start over? Well, we need to pick a new prize, again. Start them all off as goats. Pick a random one to be the winner. Now that I've done this, I actually don't need to do this here in Setup anymore. I can just say, start over. I should also make sure I clear any background color or text that was in the Div and hide the Play Again button. All right, let's see if this works. I'm going to pick door number 1. I'm going to switch. Whoops, I think I forgot to show the Play Again button. playAgain.show. show One more time. Let's pick door number 3, and let's switch. I won. Let's play again. Still says, you win there. I need a permanent place for the win or lose message. Call that outcomeP for outcome paragraph. Definitely need to clear it when we start over in Setup. You need to create it. And then, the message instead of creating a new paragraph, we just put it in the existing one. All right, ready for this? All right, I'm going to pick door number 2. I never seem to pick door number 2 to start. The goat is revealed as door number 3. Should I switch? Should I say? I'm going to switch. Whoops, what just happened there? Nice little typo there. I would have lost, so good thing I got that error. I'm going to pick door number 2. The goat is revealed as door number 1. I'm going to switch, and I won. Let's play again, I'm going to pick door number 3. No, it's not working. Oh, I've got to set the state back to pick. So ultimately, I don't know if I really needed this state variable. Or I'm certainly not using it very effectively because I only have it as pick or not pick, essentially. But I'll let you figure out how to improve that in your own version of this. But when I start over, I definitely need to set the state back to pick. Here we go. I'm going to pick door number 2. I'm going to switch. I'm going to play again. I'm going to pick door number 1. I'm going to switch. I'm going to play again and pick the number 3. I'm going to switch. I'm going to play again door 1 and switch. I'm just winning over and over again. I am so good at this game. I'm ready to wrap this up. I mean, what I really would like to do and I'll create a version of it that just picks automatically and switches automatically, running it hundreds of times per second. And I'm showing that to you right now over here. But what I'm going to do in this video itself is just add some code to track the win rate for switching and the win rate for staying put. And if the math that I demonstrate it at the beginning to video is correct, we should see a win rate of approximately 2 out of 3 times for switching and 1 out of 3 times for staying put. So I need a variable for total plays, total switches. Actually, I don't need the total plays. I need to know, how many times did I switch, and how many times did I stay? So I'll call that total switch plays. Awkward variable names. Then, I need switch wins and stay wins. Every time the player switches, I need to increase the number of switch plays. Every time the player stays ah, but I don't have a function for staying. So let me actually go and put that in. So instead of when you stay going directly to check win, let's write a player stay function. And the only thing that happens in that function is we increase the number of total stay plays and then go to check wins. Oh, but when I checked the win, how do I know whether I switched or not? And this is a typo here. All right, again, so much to refactor later. But let's introduce another variable. Oh, no, no. I don't need another variable. I know exactly what to do. The check win function can receive an argument. Did the player switch or not? So when the player stays, we can say, check win false. When the player switches, we can say, check when true. If the player switch maybe should be player switched. If the player switched, total switch wins plus, plus. Otherwise, total stay wins plus, plus. And then, if the player loses I'm not keeping track of the number of losses. By definition, that's the difference between the total plays and the number of wins. So I think I'm good. I just need to put the stats on the page itself. So another paragraph element. Call it results. And here, let's show the win rates. The switch rate is the total switch wins divided by the total switch plays. The stay rate is the total stay wins divided by the total stay plays. Then, I can use a nice template literal to display a nicelyformatted message with the data that is in those variables. And for the win rates. I want those to appear as percentages, so I'll multiply them by 100. And then, I can use the P5 number format function to only show it to two decimal places. All right, I think we might be finished with this. Let's see if I have any errors. I'm going to pick door number 1. I'm going to switch. And the total switches is 1. The switch oh. I forgot that this is HTML. So even though I put these nice line breaks in here, that means absolutely nothing. I need to put actual line breaks. Let's give myself more space to see the canvas, and here we go. I'm going to just play this a lot of times now. [MUSIC PLAYING] After playing 44 times, I switched 22 times. I stayed 22 times. You can see my switch win rate is about 68% and my stay win rate is about 41%. So obviously, I've gotten extra lucky on both quite a bit luckier for staying. That should really be at 1/3. 68% is quite close to 2/3. But the math that we started with is what we're seeing play out here in playing the game over and over again. This would also be, by the way, a really great opportunity to use local storage. So if I stop the sketch and start it up again, I would then see all of the plays that I did before. I did happen to just make a whole tutorial about local storage, so if you want to go watch that then come back to this, I'll leave it as an exercise to the viewer. And I will add an extra code example for this video with local storage implemented. Also, if I haven't actually played a game, I get a divide by zero error. That's probably something that I should address. But as long as I play one switch and one stay, the error will go away. Before I leave you, let me attempt to tie everything I've done to Bayes' theorem. This is the famous Bayes' probability theorem. Let me first address what is meant by the notation here. So if we say something like P of a, this is the probability of the event, a, occurring. So if I'm flipping a coin and the event a, is it landing on heads? The probability of a is 50% 1 out of 2 times. This notation here, P, A line B this is known as conditional probability, meaning, there are two events, A and B. What's the probability of A occurring given B occurring. Bayesian inference is the idea of determining what is the probability of one of the events occurring given prior knowledge of a previous event. Now, I'd like to try to tie this formula to the Monte Hall problem, itself. Let's create the three doors and actually label them A, B, and C. So I'm going to start by picking door C. Monty Hall is going to reveal door B. What is the probability, then, that I win if I switch to A? Given the event that Monty Hall reveals door B, what is the probability that A is the winner? That is what this part of the formula is describing. Now, we just need to figure out each of these three components. Well, let's start with the easiest one first. The prior probability just given nothing, no information whatsoever that the winner, the prize is under door A is 1 out of 3. P of B B is the event that Monte hall reveals door B. What is the probability that Monte hall will reveal door B if the prize is under A? Well, that's 100% 100%. Because if I picked C and the prize is under A, Monty Hall has to show door B. So that's 100%, or 1. Now, we've got a slightly trickier one. Given no information, what's the probability that Monte Hall reveals door B? So I picked C, but I don't know the prize is not necessarily under A. We don't have that prior information. So the probability that Monte Hall reveals door B in this case is just a flip of a coin 50%. Maybe it's going to be A, maybe it's going to be B. We don't have any information to tell us one or the other. So now, 1 times 1/3 divided by 1/2 guess what that is 2/3. The probability if I started with C that A is the winner, given Monty Hall revealing B, is 2 out of 3. And there's a lot more to be said about this kind of probability analysis. I will include some excellent references to Bayes' theorem and the Monty Hall problem in the video's description, if you want to take a look at those. One thing that I really missed that would be fun to try is, could you make the number of doors a variable? So suddenly, you have a version of this with 10 doors or 100 doors. And how many doors are revealed? Oh, so many possibilities. Board the train, make your own creative twist on this, share it with me, and I will see you next time. Goodbye. [TRAIN WHISTLE] [MUSIC PLAYING]
