With timestamps:

00:00 - [BELL RINGS]
00:01 - Hi.
00:02 - So I have so far made
three videos in this series
00:06 - about learning to code
from the very beginning
00:08 - with p5 and the p5 web editor.
00:11 - And I kind of have
been avoiding showing
00:13 - you what happens when you
make a mistake, which I really
00:15 - should not have done.
00:16 - That's the thing I really
should be showing you right from
00:19 - the beginning, but I didn't.
00:20 - And I also haven't
mentioned to use
00:22 - something called code comments.
00:24 - And both of these things
are fundamental to how
00:27 - you might create
a p5 sketch, one
00:29 - that you might work
on over a period time
00:31 - and return to later.
00:32 - So let's first look at
the console and errors.
00:35 - So there's this
whole extra section
00:38 - down here that I've ignored.
00:40 - I've been talking about this
is where you write your code,
00:42 - the Play button
executes the code,
00:45 - and this is where you see
the result of your code.
00:47 - Well what do you see down here?
00:49 - What you see down
here is messages
00:52 - that are things that
are related to what's
00:54 - happening in your code
that might be a mistake
00:57 - or something that you add that
you want to specifically put
00:59 - a message there.
01:00 - So I'm going to show you.
01:01 - There's a function called Print.
01:04 - I'm going to say Print,
and I'm going to say Hello.
01:07 - And I'm putting this in Setup
because I want this just
01:09 - to happen at the beginning.
01:10 - And this again, I will
come back to later.
01:12 - So this being in the code,
suddenly in the console,
01:15 - we have this down here.
01:17 - The idea of the console
is not something.
01:19 - So if you're making a project
that you imagine users
01:22 - using, like a game, you wouldn't
put the score of the game here.
01:26 - You would want to draw the
score somewhere on the canvas,
01:29 - or there's actually
a way you could
01:31 - put the score below the
canvas, something for the user
01:33 - to ultimately see.
01:35 - But if you just want
to be able to see
01:37 - what the score of the game is
and kind of like for yourself
01:39 - while you're
developing, the console
01:41 - is for you, the person
who's writing the code,
01:43 - or your friend who you're
sharing the code with,
01:46 - or your teacher, or whoever.
01:47 - I mean, it's something that
anybody using the p5 web editor
01:50 - can see.
01:50 - But when you've finished
it and you put it
01:52 - on your own website,
which is maybe
01:54 - something I'll
show you how to do,
01:55 - that console wouldn't
necessarily appear.
01:57 - So in addition to be on
to put your own messages,
02:00 - anything that you do wrong
is going to be down there.
02:03 - Now, one thing that's
really important,
02:05 - notice how noStroke
has a capital S?
02:09 - noStroke also doesn't even
have any arguments in here,
02:12 - like, it's just open
and close parentheses,
02:14 - because there's no
way to modify it.
02:16 - That's something
I didn't mention.
02:18 - Notice how there's
comments here?
02:19 - If I get anything wrong,
like if I delete this comma,
02:24 - look at this.
02:25 - Now I'm also getting
error messages in here.
02:28 - Now this is-- maybe not.
02:30 - [BUZZ]
02:30 - Oh, buzz, look.
02:31 - Error message.
02:32 - So here's the thing.
02:34 - Whenever you see the
red error message.
02:36 - First of all, just
take a deep breath.
02:39 - Sometimes that error
message is lovely,
02:41 - if it tells you exactly
what's wrong and you can--
02:43 - and it tells you how to fix it.
02:45 - And this might be a case.
02:46 - Uncaught SyntaxError missing
parentheses after your argument
02:50 - list, sketch line 11.
02:52 - Oh look, line 11
missing parentheses.
02:55 - Sorry.
02:55 - You know what it
really should say?
02:56 - Missing comma.
02:58 - So this is the thing.
02:59 - The thing that's generating
the error, the web editor,
03:03 - the JavaScript language, the
browser, all of these pieces
03:07 - are figuring out what
to put down there.
03:09 - It doesn't always
guess correctly.
03:11 - So the nice thing is
they can see like, oh, I
03:13 - expected a parentheses.
03:14 - We can kind of
like see it there,
03:16 - but we're going
to have to guess.
03:17 - What's wrong?
03:18 - It's actually a comma.
03:19 - Sometimes we'll get
an error message
03:21 - that totally makes sense.
03:23 - I'm going to change this from
strokeWeight with a capital W
03:27 - to strokeweight with a
lower case W. And this,
03:31 - I'm not getting such
a great error message,
03:33 - but this is a really
important one.
03:34 - Uncaught ReferenceError.
strokeweight is not defined.
03:39 - Well, but why is it not defined?
03:41 - I watched a video
from Daniel Schiffman,
03:43 - and he said that
strokeweight is a function
03:45 - from the p5.js library.
03:46 - It's not part of the
JavaScript language,
03:48 - but it's a function
of the p5.js library,
03:49 - and I can call it in my
code if I'm using the p5 web
03:51 - editor, which is true.
03:53 - But because programming is in
JavaScript is case sensitive,
03:58 - it doesn't know what it
is without the capital W.
04:00 - And notice how the editor is
syntax highlighting it for you.
04:04 - So strokeWeight,
suddenly it turns blue.
04:06 - This is, by the way, no
different than me saying,
04:08 - like, oh, I want to write a
function called unicornmagic.
04:13 - Uncaught ReferenceError
unicornmagic is not defined.
04:16 - Because it's not a function.
04:18 - It's not part of the p5.js
library or any other library
04:20 - that I might be choosing to
use as part of my project.
04:23 - There are other functions
that you can call up
04:25 - by the way, that are
just part of JavaScript
04:27 - inherently, that you get
when you use JavaScript.
04:29 - And p5 adds functions to that.
04:31 - So that's an error you're
going to see a lot.
04:33 - It's because you misspelled it.
04:36 - Maybe you got a capital
wrong, or it's just
04:38 - something you thought was
in p5 or some other library
04:41 - you're using, but
it's not there at all.
04:42 - So here's an interesting thing.
04:45 - I'm just going to take
out all the semicolons,
04:48 - or like some of them.
04:49 - No error message.
04:52 - I'm having like heart
palpitations right now,
04:54 - because the semicolons
give me comfort.
04:56 - But the truth of the matter
is, the semicolons are somewhat
04:59 - optional in JavaScript.
05:01 - They indicate where
the end of the line is.
05:04 - The end of a line of
code background 100 is--
05:07 - where is it?
05:08 - Where is it?
05:09 - It's there.
05:11 - But JavaScript can usually
figure out where the end
05:15 - the line of code is
even if you don't
05:17 - include this, the semicolon.
05:18 - The weird thing is,
I'm going to show you
05:20 - something kind of interesting.
05:23 - If I were to put, let's
say, rectMode up here
05:26 - on the same line, the code
runs just fine the same way.
05:31 - JavaScript actually thinks
of that as two lines of code
05:34 - because semicolon means the end
of a line, then the next line.
05:37 - But if I delete the
semicolon now, all is lost.
05:40 - It can't figure it out.
05:41 - So this is why it's
generally good practice
05:43 - to use the semicolons.
05:44 - It's like a safety net.
05:45 - Like, I'm really
explicitly saying where
05:47 - the end of the line of code is.
05:48 - But you might really
just-- you should have fun
05:50 - and just like not
use the semicolons,
05:53 - but I can't help it.
05:54 - And also, I have to do
the tidy code thing now.
05:57 - There.
05:57 - OK.
05:58 - [BELL RINGS]
05:59 - All right, I know I said at
the beginning of this video
06:01 - that I was going to talk
about the code comments,
06:03 - but I'm not going to.
06:04 - That's going to be
in the next video.
06:05 - I'm going to do that
separately so you
06:06 - can look at them individually,
and this video's title should
06:09 - probably just say, like, Console
and Error Messages, so you
06:12 - won't turn up in your search.
06:14 - All right, so if you
want, the next thing
06:17 - that I think is useful
to you in like working
06:18 - on your assignment,
your project,
06:20 - for this first set of
videos is understanding
06:23 - what code comments are
and how to use them.
06:25 - I'll do that in the next video.

Cleaned transcript:

[BELL RINGS] Hi. So I have so far made three videos in this series about learning to code from the very beginning with p5 and the p5 web editor. And I kind of have been avoiding showing you what happens when you make a mistake, which I really should not have done. That's the thing I really should be showing you right from the beginning, but I didn't. And I also haven't mentioned to use something called code comments. And both of these things are fundamental to how you might create a p5 sketch, one that you might work on over a period time and return to later. So let's first look at the console and errors. So there's this whole extra section down here that I've ignored. I've been talking about this is where you write your code, the Play button executes the code, and this is where you see the result of your code. Well what do you see down here? What you see down here is messages that are things that are related to what's happening in your code that might be a mistake or something that you add that you want to specifically put a message there. So I'm going to show you. There's a function called Print. I'm going to say Print, and I'm going to say Hello. And I'm putting this in Setup because I want this just to happen at the beginning. And this again, I will come back to later. So this being in the code, suddenly in the console, we have this down here. The idea of the console is not something. So if you're making a project that you imagine users using, like a game, you wouldn't put the score of the game here. You would want to draw the score somewhere on the canvas, or there's actually a way you could put the score below the canvas, something for the user to ultimately see. But if you just want to be able to see what the score of the game is and kind of like for yourself while you're developing, the console is for you, the person who's writing the code, or your friend who you're sharing the code with, or your teacher, or whoever. I mean, it's something that anybody using the p5 web editor can see. But when you've finished it and you put it on your own website, which is maybe something I'll show you how to do, that console wouldn't necessarily appear. So in addition to be on to put your own messages, anything that you do wrong is going to be down there. Now, one thing that's really important, notice how noStroke has a capital S? noStroke also doesn't even have any arguments in here, like, it's just open and close parentheses, because there's no way to modify it. That's something I didn't mention. Notice how there's comments here? If I get anything wrong, like if I delete this comma, look at this. Now I'm also getting error messages in here. Now this is maybe not. [BUZZ] Oh, buzz, look. Error message. So here's the thing. Whenever you see the red error message. First of all, just take a deep breath. Sometimes that error message is lovely, if it tells you exactly what's wrong and you can and it tells you how to fix it. And this might be a case. Uncaught SyntaxError missing parentheses after your argument list, sketch line 11. Oh look, line 11 missing parentheses. Sorry. You know what it really should say? Missing comma. So this is the thing. The thing that's generating the error, the web editor, the JavaScript language, the browser, all of these pieces are figuring out what to put down there. It doesn't always guess correctly. So the nice thing is they can see like, oh, I expected a parentheses. We can kind of like see it there, but we're going to have to guess. What's wrong? It's actually a comma. Sometimes we'll get an error message that totally makes sense. I'm going to change this from strokeWeight with a capital W to strokeweight with a lower case W. And this, I'm not getting such a great error message, but this is a really important one. Uncaught ReferenceError. strokeweight is not defined. Well, but why is it not defined? I watched a video from Daniel Schiffman, and he said that strokeweight is a function from the p5.js library. It's not part of the JavaScript language, but it's a function of the p5.js library, and I can call it in my code if I'm using the p5 web editor, which is true. But because programming is in JavaScript is case sensitive, it doesn't know what it is without the capital W. And notice how the editor is syntax highlighting it for you. So strokeWeight, suddenly it turns blue. This is, by the way, no different than me saying, like, oh, I want to write a function called unicornmagic. Uncaught ReferenceError unicornmagic is not defined. Because it's not a function. It's not part of the p5.js library or any other library that I might be choosing to use as part of my project. There are other functions that you can call up by the way, that are just part of JavaScript inherently, that you get when you use JavaScript. And p5 adds functions to that. So that's an error you're going to see a lot. It's because you misspelled it. Maybe you got a capital wrong, or it's just something you thought was in p5 or some other library you're using, but it's not there at all. So here's an interesting thing. I'm just going to take out all the semicolons, or like some of them. No error message. I'm having like heart palpitations right now, because the semicolons give me comfort. But the truth of the matter is, the semicolons are somewhat optional in JavaScript. They indicate where the end of the line is. The end of a line of code background 100 is where is it? Where is it? It's there. But JavaScript can usually figure out where the end the line of code is even if you don't include this, the semicolon. The weird thing is, I'm going to show you something kind of interesting. If I were to put, let's say, rectMode up here on the same line, the code runs just fine the same way. JavaScript actually thinks of that as two lines of code because semicolon means the end of a line, then the next line. But if I delete the semicolon now, all is lost. It can't figure it out. So this is why it's generally good practice to use the semicolons. It's like a safety net. Like, I'm really explicitly saying where the end of the line of code is. But you might really just you should have fun and just like not use the semicolons, but I can't help it. And also, I have to do the tidy code thing now. There. OK. [BELL RINGS] All right, I know I said at the beginning of this video that I was going to talk about the code comments, but I'm not going to. That's going to be in the next video. I'm going to do that separately so you can look at them individually, and this video's title should probably just say, like, Console and Error Messages, so you won't turn up in your search. All right, so if you want, the next thing that I think is useful to you in like working on your assignment, your project, for this first set of videos is understanding what code comments are and how to use them. I'll do that in the next video.
