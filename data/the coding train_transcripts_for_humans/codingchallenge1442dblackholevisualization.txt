With timestamps:

00:00 - (bell rings)
00:01 - - Hello and welcome to a
black hole coding challenge.
00:04 - Time has really slowed down for me,
00:07 - or maybe it's sped up.
00:08 - I can't remember which is which because
00:09 - I'm actually now recording this many days
00:12 - after the actual livestreamed
coding challenge.
00:15 - In a little bit, I will
change my clothes and
00:18 - travel into the past
through the black hole.
00:21 - I don't know how it's all going to work,
00:22 - but you will see me live coding,
00:24 - writing the code to do this simulation.
00:26 - In truth, it's less
simulation than visualization.
00:30 - On April 10th,
00:31 - the first ever image of a
black hole was published.
00:35 - This image was put together
by a team of scientists
00:38 - known at the Event Horizon Telescope.
00:40 - It was compiled from
data from many telescopes
00:43 - all over the Earth all synchronized.
00:45 - I looked at this image and I thought,
00:47 - it looks kind of fuzzy and glowy and
00:50 - maybe there's some way I could reproduce
00:53 - this image through a simulation.
00:55 - I started to sort of dig into this.
00:57 - I quickly realized I'm many,
many steps away from doing that
01:01 - and I wanted to find the place to start,
01:03 - somewhere where I could at least begin to
01:06 - simulate or visualize the behavior of
01:08 - space time and black holes.
01:11 - Here are the resources that
I used to learn about this.
01:15 - First, let me thank Veritasium's video,
01:18 - the how to understand the
image of a black hole.
01:21 - This video was actually published
01:22 - the day before the image was revealed,
01:25 - which is really kind of amazing.
01:26 - If you watch this video,
the explanation is superb.
01:29 - In particular, there's a
short animation in the video
01:32 - that depicted beams of light traveling
01:34 - towards the black hole,
01:35 - some disappearing into the black hole,
01:37 - some wrapping around in an orbit.
01:39 - That's my starting point
where I was interested in.
01:42 - I also learned quite
a bit from Chris Orbin
01:44 - and the STEM Coding YouTube channel.
01:46 - STEM Coding, if you're not familiar
01:47 - with that YouTube channel,
01:48 - you should definitely check it out.
01:49 - They have a lot of videos
about physics and science
01:51 - taught through the lens of
coding and visualization.
01:53 - In particular, they have a video called
01:55 - Slingshot with Gravity and Chris Orbun
01:57 - published an article explaining how that
02:00 - code example could be tweaked a little bit
02:03 - to kind of get at some of the ideas
02:05 - around how gravity and black holes.
02:07 - Finally, there's a
wonderful paper from 1978.
02:10 - Thank you to Veritasium
also for this reference
02:12 - called Image of a Spherical Black Hole
02:14 - with Thin Accretion Disk.
02:16 - This paper has diagrams
and the mathematics
02:19 - behind the photon trajectories
around a black hole.
02:21 - It gives you a lot of background into
02:23 - what you would want to do
to visualize a black hole.
02:27 - Of course, I'm not the
first one to try this.
02:29 - Many people have made
beautiful visualizations
02:32 - and artistic renderings of black holes.
02:34 - There's the one that you might remember
02:35 - from the move Interstellar.
02:37 - Kip Thorn, a Caltech physicist,
02:39 - was actually an advisor on that film,
02:40 - but there's a lot of
artistic license there.
02:42 - I also want to point out
to you Ricardo Antonelli
02:45 - who's written this wonderful article
02:47 - How to Draw a Black Hole,
02:48 - Geodesic Raytracing in Curved Space Time.
02:51 - In the article he goes
through step-by-step
02:54 - a bunch of different computer
graphic tricks and techniques
02:56 - along with the sort of physics
of black holes themselves
02:59 - to create a 3D visual of what
a black hole might look like.
03:03 - If you've watched me before,
03:04 - you know I am not a physicist,
I'm not a scientist.
03:07 - There are many caveats.
03:08 - I don't play a physicist on YouTube.
03:10 - I'm just here wanting to make something
03:13 - in 2D Canvas JavaScript.
03:15 - In fact, I already did it.
03:16 - What I'm here right now,
03:17 - let me talk to you about the pieces
03:19 - that I want to put in this visualization
03:21 - as a sort of reference point
for when I start coding.
03:26 - The black hole that I want to
visualize is in the galaxy M87.
03:30 - It previously didn't have a name.
03:31 - It was just called M87 star,
the star for black hole,
03:35 - but it was recently named Powehi.
03:37 - I'm not sure if I'm
pronouncing that correctly,
03:39 - but it is from a Hawaiian chant
03:41 - and it means something like adorn, dark,
03:44 - fathomless creation, something like that.
03:46 - Very appropriate for a black hole.
03:48 - This is what's known as a
super massive black hole.
03:50 - Not all black holes are super massive,
03:52 - but this one is and its
mass is equivalent to
03:56 - 2.6 billion solar masses, or suns.
04:02 - Take the sun, our sun,
04:03 - the one up in the sky that shines on us,
04:06 - and put together 2.6 billion of those
04:08 - and you have a black hole.
04:11 - It's so massive, we can't see it.
04:13 - Why?
04:14 - Because the gravitational
pull is so strong,
04:18 - there's so much matter in there,
04:20 - that any light traveling towards it,
04:22 - once it gets to a certain
proximity, can no longer escape.
04:27 - You couldn't be inside the black hole
04:30 - and shine a flashlight.
04:31 - You could be there, but
outside the black hole,
04:33 - you couldn't see it 'cause
the light can't get out.
04:35 - Of course, you couldn't
also be there because
04:36 - you would be dead, very,
very dead in the black hole,
04:39 - or you'd just be like Matthew McConaughey,
04:42 - one or the other is true.
04:45 - This little ring here,
04:49 - this distance from the
center of black hole
04:52 - at which nothing can
escape, not even light,
04:56 - not even the fastest thing we
know about light can escape,
05:00 - is known as the event horizon.
05:04 - There's actually a formula for calculating
05:06 - the distance from the center of black hole
05:08 - to that event horizon itself,
05:11 - the Schwarzschild radius, or R sub S.
05:15 - The Schwarzschild radius is
calculated as two times G,
05:19 - the universal gravitational
constant, times M,
05:23 - the mass of the black hole itself,
05:25 - remember, 2.6 billion solar masses,
05:28 - divided by C squared where
C is the speed of light.
05:35 - Of course, the event horizon
isn't really a circle.
05:37 - It's a sphere, but for
us in our 2D simulation,
05:40 - we're going to make it flat.
05:41 - In order to actually calculate this,
05:43 - I need some of these values.
05:44 - I have the mass, I also
need C, the speed of light,
05:47 - which I'm looking over there,
I don't have this memorized,
05:49 - which is 299,792,458
meters per seconds squared.
05:55 - That's very, very fast.
05:56 - Not seconds squared.
05:57 - I don't know why I put
seconds squared there.
05:59 - It's just meters per second.
06:00 - This number, meters per second.
06:02 - That's the speed of light.
06:03 - I also need G, the universal
gravitational constant,
06:06 - which is 6.67 times 10 to
the negative 11th power.
06:13 - Now, with these values, with
the mass of the black hole,
06:17 - with the universal gravitational constant,
06:19 - with the speed of light, you
can actually calculate this.
06:22 - I will leave that to you to calculate
06:24 - and leave your answer in the comments,
06:26 - or you could probably looks it up
06:27 - because people are calculating
this stuff all the time.
06:29 - Another element that I want to include
06:30 - in my visualization is the accretion disk.
06:33 - The accretion disk is
a whole lot of matter
06:38 - that's outside of the event horizon
06:40 - orbiting the black hole and
sort of feeding the black hole.
06:42 - This is a particularly active one.
06:44 - Again, a black hole isn't emptiness.
06:47 - It's we think of it as emptiness.
06:48 - There's just so much matter there
06:50 - that the light cannot
escape so it's nothingness.
06:53 - So crazy.
06:55 - The accretion disk is this orbit that's
06:58 - outside of matter orbiting.
07:00 - It has a specific measurement where it is,
07:06 - which is three times the
Schwarzschild radius.
07:11 - From the center, one, two, three.
07:15 - You can see not drawn to scale,
07:16 - but this is the accretion disk, three RS.
07:20 - What about light?
07:22 - The accretion disk is full of matter.
07:23 - Matter has mass and it's
orbiting at some speed
07:26 - and we could calculate
gravitational attraction
07:28 - and all that stuff,
07:30 - but light travels at the speed of light,
07:32 - photons of light travel the
speed of light, that speed,
07:35 - and have the mass of zero.
07:38 - It so happens that at
1.5, right around here,
07:41 - at 1.5 times the Schwarzschild radius,
07:44 - this is where light will orbit,
but not in a stable orbit.
07:47 - Any photons, any light
that's orbiting there
07:50 - will eventually either spiral
out forever or spiral in
07:55 - pass the event horizon,
07:56 - never to be seen or heard from again.
07:58 - These are the elements I
want in my visualization.
08:00 - I want to depict the
black hole right here,
08:03 - really the shadow of the black hole,
08:04 - measured with the event horizon.
08:06 - I want this photon ring,
08:08 - but both the event
horizon is really a sphere
08:10 - and this photon ring is
really a photon sphere,
08:12 - this is the place where light is orbiting,
08:14 - it's not a stable orbit.
08:16 - It doesn't slow down so it's always
08:17 - eventually going to shoot out
or shoot in, but ultimately,
08:20 - if you were standing there,
08:21 - the light would actually draw a circle
08:23 - and you would see the back of your head,
08:25 - which is not what's
happening to me right now
08:27 - and I'm trying to think of that.
08:28 - My mind doesn't work that way.
08:30 - I want to depict that and then
the accretion disk as well.
08:33 - These are the elements that
I want in my visualization.
08:36 - However, I want to animate something.
08:38 - I want to look at what happens when
08:40 - light itself is traveling
at the black hole.
08:43 - What does it do?
08:44 - We could be pretty sure that if I
08:47 - take a beam of light, a photon,
08:49 - and point it directly at the
center of the black hole,
08:52 - it's going to travel up to the black hole,
08:54 - go past the event horizon,
and never come back.
08:56 - We're never going to hear from it again.
08:57 - It sucked into the event horizon.
08:59 - What happens if though there's
a beam of light over here,
09:02 - or over here, or over here?
09:04 - What happens there?
09:06 - We can actually see a diagram of this
09:07 - in Ricardo Antonelli's tutorial.
09:09 - This is really the core inspiration for
09:12 - what it is that I want to create in p5.js.
09:14 - What you see here is
basically my visualization.
09:17 - There's the black hole,
there's the photon ring,
09:19 - here are beams of light,
they're bending around,
09:21 - they sort of temporarily
end up in that orbit,
09:24 - and then spiral out or spiral in.
09:27 - The thing is, are they really bending,
09:30 - going in a curved path,
09:32 - or are they simply traveling in a
09:34 - straight line through
the curve of space time?
09:38 - This is where it would be
useful to talk about relativity.
09:41 - The theory of relativity
will help to explain
09:46 - why the space time bends around an object,
09:52 - a super massive object.
09:54 - You can think of it as space
time being this trampoline
09:56 - and there's a big bowling
ball sitting in the center
09:59 - and it's just weighing it down and the
10:01 - space time around it starts to bend
10:04 - and things start to fall in towards it.
10:06 - That's ultimately what's
happening with a black hole.
10:08 - The theory of relativity
is beyond the scope
10:11 - of what I'm doing in this video.
10:12 - I just want to look at is there a way
10:14 - that I can create the effect.
10:16 - What if I take these
beams of light, photons,
10:24 - one starting out pointing directly
10:25 - at the center of the
black hole and outwards,
10:27 - how can I look at a way
that I could simulate
10:30 - how they would bend around,
end up in the photon ring,
10:34 - and then spiral in or spiral out?
10:37 - If you saw the diagram that looks
10:38 - something like this in Veritasium's video,
10:40 - you will also see that
there is a radius here,
10:44 - 2.6 times the Schwarzschild radius,
10:46 - there's a distance here from this photon
10:49 - pointed directly at the center outwards
10:51 - at which the light will spiral out
10:54 - as opposed to spiraling in.
10:56 - That is 2.6.
10:57 - In theory, if I were to do
all of my math correctly
11:02 - in my visualization, which
spoiler alert, I do not,
11:06 - you would see this behavior exactly.
11:08 - The reason why what you're
going to watch does not do that
11:10 - is I am simulating sort of this idea
11:13 - with newtonian gravitational attraction.
11:17 - I'm going to approximate
the speed of light
11:19 - and these photons will never
go faster or never slow down.
11:22 - I don't actually get to
that 'til the very end.
11:24 - I kind of fudge that for awhile,
11:26 - but get it a little bit closer,
11:27 - and just use raw gravitational attraction.
11:31 - The coding challenge is about to begin.
11:32 - I'm going to try to program exactly this.
11:35 - You'll see where the
code ends up at the end
11:37 - and then I'll come back
wearing this shirt again,
11:39 - that's how you'll know how time changed,
11:41 - and I'm going to talk to
you a little bit about
11:43 - some things that you might
try to account for relativity,
11:47 - to make the behavior of
these photons more accurate
11:49 - and I hope that you'll be inspired
11:51 - to make your own
visualization of a black hole
11:54 - and share it with me.
11:56 - Let's see, we need some variables.
11:57 - Number one is we need the speed of light.
12:01 - 299, 792, 458, there we go.
12:07 - I don't need the commas
because this is code.
12:12 - Now we got the speed of light.
12:14 - Excellent.
12:15 - Things are going very
well so far in my coding.
12:18 - Now we need the universal
gravitational constant.
12:23 - G, which is 6.67 times
power 10 to the negative 11.
12:32 - What could go wrong there?
12:33 - This seems exactly right.
12:38 - Now I need to have my RS,
my Schwarzschild radius,
12:44 - which is two times G times.
12:48 - The mass!
12:49 - Now I need a constant.
12:52 - M is the mass.
12:55 - That was 6.5 billion, move
two zeroes, some more zeroes,
13:02 - some more zeros.
13:03 - I don't know, how much
is the mass of the sun?
13:05 - Mass of the sun.
13:08 - (man laughs)
13:10 - You see the folly here!
13:13 - One folly here is while these numbers
13:15 - are incredibly meaningful and important,
13:17 - they're not going to
do me so much good here
13:19 - in my p5.js web editor JavaScript program.
13:24 - What I'm going to do is
make up some numbers.
13:26 - We're going to create our
own two-dimensional universe
13:28 - that has a speed of light,
13:30 - that has a universal
gravitational constant.
13:32 - In fact, rather than put the mass of
13:34 - the black hole right here,
13:35 - I'm going to make a black hole class.
13:36 - Let's just arbitrarily say do
something approximating this.
13:40 - The speed of light is 30 and the
13:42 - universal gravitational
constant is six, why not right?
13:47 - Also go and make a black hole.js file.
13:51 - Then I'm going to say class black hole and
13:58 - I need a constructor, just an XY.
14:06 - Let me use a P-vector for this.
14:07 - I'm going to say this dot
position equals create vector,
14:13 - X comma Y.
14:20 - Now I need a mass.
14:21 - This dot mass equals 6.5.
14:26 - Our measurements are in billions.
14:27 - Then its radius, the Schwarzschild radius,
14:31 - is two times G times this dot
mass divided by C times C.
14:38 - I need a little more space here
14:39 - to be able to see more code,
14:40 - but fortunately actually I can do this.
14:43 - Let's put these in parentheses.
14:45 - Now what I can do is I can write show,
14:49 - and what am I going to do?
14:50 - Let's make fill zero,
14:52 - let's fill in the black
hole with the color black,
14:55 - let's draw a circle at this dot pos dot X,
14:59 - this dot pos dot Y with the
Schwarzschild radius times two.
15:07 - I guess I should might as well pass in
15:09 - an argument here for mass.
15:11 - If I were to in my main
program say, let's call it M87,
15:19 - we're going to call our black hole M87,
15:22 - M87 equals a new black hole.
15:24 - I'm going to place it at sort of the top.
15:27 - Actually, the left of my canvas.
15:29 - Let's place it at 100 comma 320
15:33 - and we're going to give it a
mass of, what'd I say, 6.5,
15:37 - and then I'm going to say M87 dot show.
15:40 - We have a black hole.
15:42 - RS is not defined.
15:44 - ♪ This dot ♪
15:45 - ♪ This dot ♪
15:46 - ♪ This dot, this dot son ♪
15:50 - There we go, that fixes that.
15:54 - Where is my black hole?
15:56 - Let's take a look at what this dot RS is.
16:01 - Way too tiny.
16:02 - My units are really kind
of all over the place.
16:05 - Let's make some units that make more
16:07 - sense for our pixel space.
16:10 - Let's make the mass of the black hole
16:13 - probably much bigger, 6,500.
16:18 - There we go, look!
16:20 - (bell rings)
16:21 - Thank you!
16:22 - (upbeat jazz music)
Goodnight.
16:23 - I have now made my
simulation of a black hole.
16:26 - This is the first ever known image
16:30 - of a black hole made in p5.js.
16:34 - Just because I don't have a lot of
16:35 - pixel space to work with right now,
16:38 - let's make the mass a tenth as large.
16:44 - We can see, there's my
much smaller black hole.
16:46 - Okay fine.
16:47 - This is looking good to me.
16:49 - That's the size of the
black hole that I want.
16:51 - Let's now draw the accretion disk.
16:55 - Let's make some sort of accretion disk.
17:04 - I'm going to say no fill stroke and
17:06 - let's make it kind of grayish.
17:09 - I'm going to draw the
accretion disk as a circle.
17:12 - This dot pause dot X,
this dot pause dot Y,
17:15 - this dot RS times.
17:18 - This just in from the
chat, I forgot about this.
17:21 - I forgot about this.
17:22 - I can say ellipse mode radius,
17:26 - which should now allow me
to, let me comment this out,
17:31 - just use the radius as the ellipse.
17:33 - Perfect.
17:34 - Just used the radius value
as the size of the circle.
17:38 - Thank you Simon Tiger for that.
17:40 - Great correction.
17:41 - Now I'm going to say this circle
is at the radius times three
17:46 - and maybe I will give it
a stroke weight of eight.
17:56 - I want no stroke here.
18:01 - Let's make it stroke weight of 24 or 64.
18:05 - Let's give it some alpha.
18:09 - There we go.
18:10 - That's kind of my visualization
of the accretion disk.
18:15 - The truth of the matter is,
18:16 - this is not exactly correct
'cause I have a feeling
18:18 - that distance is right here in the center
18:22 - whereas the stroke weight kind of
18:23 - fans out the thickness there.
18:25 - It's a little bit off
and I probably should
18:27 - be a little bit more accurate about that.
18:30 - I guess what I could do is
just add to the radius itself
18:35 - the half of the stroke weight.
18:36 - If I add 32 there, there we go.
18:38 - I think that's accurate now.
18:40 - Nothing about this is really accurate.
18:42 - Now let's draw the unstable photon orbit.
18:48 - That would be at 1.5 of the radius.
18:51 - I can do the same exact
thing, but this time at 1.5.
18:56 - Maybe I want to make that
one a little less thick.
19:01 - Give myself a little more space here.
19:04 - Make the 16 and make this
32 and maybe this one
19:11 - should be some kind of color
'cause I'm so good at design.
19:21 - Some kind of orange.
19:21 - It was better before I guess.
19:25 - Some kind of orangeish color.
19:28 - Look at this!
19:29 - We now have the black
hole, the accretion disk,
19:34 - and a sort of photon orbit ray.
19:37 - The other thing that I want to do is
19:38 - I want to start a bunch of photons,
19:42 - I want to have them coming from over here
19:44 - towards the black hole.
19:45 - I need to know how far,
19:46 - I can't jump up 'cause my green
screen only goes this high,
19:48 - I want to know how far
up does it need to be
19:52 - for it to not really curve,
19:55 - but travel in a straight line around
19:56 - the path of the curved
path of space and time
19:59 - to end up in an orbit to
either spiral out to infinity
20:02 - or end up into the black hole.
20:04 - That we said was 2.6 Schwarzschild radius.
20:14 - What I'm going to do is I am
going to create another class.
20:20 - I'm going to call this photon.js.
20:24 - Photon.js will be a
photon, make a constructor,
20:33 - this will also have a
position, give it an X and a Y,
20:46 - and let's make sure we
include it in our HTML file,
20:51 - and let's also write a show function.
20:56 - Let's just make this stroke weight four,
21:01 - point this dot pause dot
X, this dot pause dot Y.
21:07 - Let's make this distinctly
red just for right now.
21:14 - Now what I could do potentially
is let me make an array.
21:23 - I'm going to call it light,
21:24 - maybe just call it photons particles,
21:25 - I'll call it particles, whatever,
21:27 - and I want to say four let Y equal 320,
21:39 - and really this is height divided by two,
21:44 - Y is greater than height
divided by two minus,
21:50 - I'm actually going to
put these into variables
21:51 - 'cause it'll make more sense.
21:52 - Let's say start is height divided by two,
21:55 - end is height divided by two minus
21:58 - M87's Schwarzschild radius times 2.6.
22:03 - Height divided by two.
22:10 - Actually, I can start it at the end.
22:13 - It's less than start and Y
plus equal every 10 pixels.
22:21 - Let's do that, every 10 pixels.
22:24 - What I want to do,
particles index I equals
22:27 - a new photon at where?
22:31 - X will be just with minus some amount,
22:33 - with minus 20 comma Y.
22:39 - What's wrong there?
22:40 - I is not defined.
22:46 - I'll just say particles dot push.
22:49 - I can add things to the
array with a push function
22:51 - 'cause I'm not using I to iterate.
22:53 - That makes more sense.
22:54 - Here in the draw function,
22:56 - I can say four every photon
of particles P dot show.
23:04 - There we go.
23:05 - I have all of my points of light that
23:09 - I want to send out at the speed of light
23:12 - towards the black hole and watch them
23:14 - follow their straight
line path through the
23:16 - curved space time thing.
23:19 - Now let me give them a velocity.
23:22 - If I go back into my photon,
23:26 - I'm also going to say this dot
velocity equals create vector,
23:33 - traveling at the speed of light
in the negative X direction,
23:36 - negative C comma zero.
23:38 - Then I am going to do, not constructor,
23:42 - an update function in which case
23:47 - this dot position dot
add, this dot velocity.
23:52 - What I can do now is in sketch.js,
23:55 - is I can say P dot update.
24:02 - Ready?
24:02 - Here we go everybody.
24:07 - There they go!
24:09 - What is the speed of light here?
24:11 - 30.
24:12 - 30 pixels per frame is going to be
24:13 - going quite slowly actually.
24:15 - The frame rate seems slow.
24:17 - 30 pixels per frame,
24:21 - that's not really a nice
way to watch an animation
24:23 - so I'm going to include another variable.
24:25 - I'm going to call it DT.
24:26 - This is the delta time step.
24:28 - Even though my frame, my animation frame,
24:30 - goes one at a time, 30 frames per second,
24:33 - maybe I only want to travel
ahead a little bit in time.
24:37 - Let's try .1, a tenth.
24:41 - What I need to adjust by that delta T
24:43 - is the photons' velocity.
24:49 - I guess I'm going to make a copy of this.
24:52 - I will just say this dot delta V equals
24:56 - this dot velocity dot copy
and then this dot delta,
24:59 - this is a little bit awkward
about using P-vector,
25:01 - multiply by DT.
25:05 - Not this dot.
25:06 - I just want a delta V and
then multiply that by DT
25:10 - and then add that instead.
25:14 - Now you can see, there we go.
25:14 - There are the photons traveling
at the speed of light,
25:18 - but they're not curving,
they're not changing.
25:21 - Now we just need to have them bend.
25:24 - We need to have them bend according to
25:28 - the curvature of space time.
25:31 - This is now the moment
where it makes sense
25:33 - for me to go read one of those papers
25:35 - and try to look at those formulas,
25:36 - but I'm going to actually see what happens
25:39 - if I just apply newtonian
gravitational attraction.
25:44 - I need this photon to basically
25:47 - have a force pointed in the direction
25:50 - of the center of the black hole that it
25:52 - accelerates its velocity towards it,
25:54 - but an interesting side note here
25:57 - and I guess this is an
approximation of relativity,
26:00 - is that we can't go faster
than the speed of light.
26:02 - We're really only adjusting the direction
26:05 - so the speed is going to remain constant
26:07 - at the speed of light.
26:09 - Again, major caveats to
how inaccurate this is,
26:12 - but it's a starting point.
26:13 - I want to add a function.
26:15 - Basically, I want to be able to
say I have some sort of force,
26:18 - which is M87 curve, pull,
I don't know what to say.
26:22 - I could say attract.
26:24 - I'm just going to say pull
as a kind of arbitrary word.
26:27 - Pull that particle.
26:29 - Then I want to say particle
apply force that force.
26:34 - This is very similar to how I approach
26:36 - a very basic physics simulation in my
26:38 - nature of code examples.
26:39 - You could refer back to chapters
one and two of that book,
26:42 - which is essentially what I've got here.
26:46 - What I need is a function
now in the black hole object
26:49 - called pull that expects a photon.
26:55 - First thing I need to
calculate this force vector
26:58 - is a vector that points
from the particle itself
27:02 - towards the center of the black hole.
27:05 - To make that vector,
27:06 - I'm going to make variable called force,
27:09 - and I'm going to say P5 vector
dot subtract, what is it?
27:14 - This dot position, the
position of the black hole,
27:16 - minus photon dot position,
27:19 - the position of that particular photon.
27:21 - That's the vector.
27:22 - What I need to calculate
the force of gravity
27:25 - according to the newtonian laws of motion
27:28 - is the force of gravity equals the
27:31 - universal gravitational constant, G,
27:33 - times the mass of one object.
27:36 - Guess what?
27:37 - That's this.
27:39 - Times the mass of another object.
27:41 - What's the mass of this?
27:43 - We've got a problem now.
27:45 - The mass of this is, well,
zero, but the force isn't zero.
27:52 - This makes kind of no sense.
27:53 - The good news for us is we're going to
27:55 - use this in acceleration.
27:58 - Because we also have force
equals mass times acceleration
28:02 - and I want to know the
acceleration of this,
28:04 - acceleration equals force divided by mass.
28:07 - This mass will just get divided out.
28:08 - Of course I couldn't divide by zero.
28:12 - This is the essence of why I'm kind of
28:14 - going down the wrong direction
here to do this accurately,
28:17 - but it's a starting point.
28:19 - I can just consider this right now.
28:21 - G times the mass of the black hole itself
28:25 - divided by R squared,
28:26 - or the distance between the
photon and the black hole,
28:30 - R squared or distance squared.
28:32 - I have that value actually in my code
28:35 - because I have R is the
magnitude of the force.
28:39 - Then I could actually
calculate that force magnitude,
28:42 - which is the force of gravity
equals G times this dot mass
28:47 - divided by R times R.
28:53 - Now I could say force dot
set magnitude F of G, photon.
29:01 - Then I can just say this
dot velocity add force.
29:06 - Photon dot velocity.
29:07 - Then I just want to add that
force to the photon's velocity.
29:14 - P dot apply force is not a function.
29:16 - Actually, I've simplified this.
29:18 - What I can just do is
get rid of this whole
29:21 - extra step or returning the
vector and I can just do this.
29:27 - (man yelling)
29:30 - Did you see those photons?
29:33 - Let's be able to see this a bit better.
29:36 - We'll see why this is not correct.
29:38 - First, let me do a couple things.
29:40 - One, let me make these variables.
29:53 - Let me draw lines.
29:55 - Let me say stroke zero line
from zero start zero end.
30:05 - Sorry.
30:11 - Zero start width start.
30:17 - Let me say stroke weight one.
30:21 - Then let me also do the same for the end.
30:24 - I just want to be able
to see where these are.
30:27 - This is showing that spot.
30:32 - Guess what?
30:35 - The photon should always be
traveling at the speed of light.
30:38 - I forgot about that so
this is a huge hack here.
30:41 - I'm going to say right
here when I do that pull
30:48 - in the black hole, I do that pull,
30:51 - I'm going to say photon dot
velocity dot set magnitude C.
31:03 - Maybe I should just limit it.
31:04 - Let's just limit it.
31:05 - It could slow down I suppose.
31:07 - (man laughs)
31:08 - It could slow down.
31:09 - Let's just limit it and see what happens.
31:13 - Everything got sucked in!
31:15 - Look at that!
31:16 - The black hole sucked it all in!
31:18 - Couple things.
31:19 - This is good.
31:20 - In other words, this is kind
of a nice little simulation
31:23 - in the sense that the force is so strong,
31:26 - even in my very crude simulation,
31:28 - that it's never going to escape.
31:29 - Let's add a little trail here.
31:31 - The photon, I'm going to
give it a variable called
31:34 - this dot history.
31:38 - Every time it updates its position,
31:41 - or every time before it
updates its position,
31:43 - I'm going to say history dot
push this dot pause dot copy.
31:47 - Then also this dot history.
31:53 - Then also let's just
say if this dot history
31:57 - dot length is greater than 100,
this dot history dot splice,
32:02 - let's just remove the oldest element.
32:05 - Now I can say stroke
zero, stroke weight one,
32:14 - begin shape, end shape, no fill,
32:22 - for every vector in history,
vertex V dot X, V dot Y.
32:34 - This dot history.
32:37 - Now we're able to see those
paths as well as they bend.
32:41 - Again, I don't have it right and we can
32:43 - give ourselves a much longer history here.
32:49 - What I'm going to do here now also is
32:52 - I am going to start some
particles from higher than end.
32:58 - I'm just going to start all
the way from zero like the top
33:02 - and then let's space them
out by a little bit more,
33:05 - and here we go.
33:14 - Nothing escaped.
33:16 - Look at that, nothing
escaped my black hole!
33:23 - Again, it's not accurate.
33:25 - I've got this wrong because I'm
33:27 - not taking to account general relativity,
33:30 - which is kind of a thing.
33:32 - It's a thing.
33:34 - I'm visualizing the idea here.
33:38 - What happens if I make
the gravitational pull
33:41 - constant smaller?
33:42 - Let's see if we can
get anything to escape.
33:45 - There we go.
33:47 - You can see it's there
in the photon orbit,
33:50 - but back into the center.
33:51 - We're getting the idea.
33:52 - Do we have something
sort of similar to this?
33:55 - (bell rings)
33:56 - I think we do!
33:58 - Change the color to red.
34:00 - Try shrinking the mass.
34:02 - Let's go back and change.
34:05 - You want the color to be
red of the photons' paths.
34:09 - I can just take this out.
34:11 - Let's also make this stroke
weight a little bit wider
34:13 - so I can see it.
34:18 - Let me give actually give
myself much more space here.
34:21 - I'm going to say window
width whatever space I have,
34:25 - window height, and let's
also make this even less.
34:32 - Full screen, here we go.
34:34 - Here is my black hole simulation.
34:37 - Let's move it over so we can have
34:38 - a little bit more space to work with.
34:41 - 300.
34:44 - There we go.
34:45 - Of course, you can see this should be
34:49 - where they're able to escape,
34:50 - but my simulation is completely off
34:53 - so I should take out
those start and end lines
34:55 - and just watch this go.
35:01 - There it is, the curvature
of space and time.
35:05 - Center the black hole please.
35:08 - That's actually not a bad idea.
35:09 - I'm also just going to
unfortunately take out these lines
35:15 - just 'cause it really
shows how incorrect it is.
35:19 - For me to have some
plausible deniability here.
35:23 - Let's see what we've got.
35:31 - It's running quite slow because of
35:35 - drawing all these trails.
35:42 - Some things that I could
do to make this better,
35:44 - flow faster, number one
is in the photon itself,
35:58 - I don't have to add every single spot,
36:00 - I could just say if frame
count module is 10 equals zero.
36:05 - (bell rings)
36:07 - This video's not over yet.
36:09 - Thanks to the chat,
36:10 - I think this is actually
kind of problematic.
36:12 - The way that I'm doing this is the
36:13 - photons are actually slowing
down and they should stay.
36:16 - I shouldn't limit them
to the speed of light.
36:17 - I should actually just keep their
36:19 - magnitude at the speed of light.
36:20 - Again, it's sort of inaccurate anyway
36:22 - so what's the difference.
36:23 - I've also added more photons here.
36:26 - You can look at it this way.
36:28 - This is going to be a
slightly different result
36:31 - because now I'm locking
them at the speed of light.
36:34 - I think there's also a big performance
36:36 - improvement that I can make,
36:37 - which is that once they're
sucked into the black hole,
36:45 - I don't need to keep
tracking their position
36:47 - and keeping that history going.
36:48 - I should really shut them off as soon
36:50 - as they've been sucked in.
36:51 - Another thing that I can do here is
36:53 - since I have that distance,
36:55 - I can say if R is less
than the event horizon,
37:00 - I could remove the photon, just delete it,
37:03 - but I want to still see its path.
37:04 - I think I'll say photon dot stop.
37:07 - That doesn't mean anything,
37:08 - but I can then in the photon class,
37:10 - I can have a variable
called stopped equals false
37:15 - and then I can write a function
called stop where I say
37:19 - this dot stopped equals true.
37:23 - Then what I can do is I don't
want to continue updating it.
37:27 - As long as it's not stopped,
I can just freeze its history.
37:34 - I still want to draw it where it last was,
37:37 - but I can freeze its history.
37:43 - Here we go.
37:44 - There's my photons
flying at the black hole,
37:48 - space time starts to bend,
the photons spin around,
37:53 - and some will get sucked in,
some curve, and there we go.
37:59 - (bell rings)
37:59 - I am back a few days later again.
38:01 - Thank you for watching
the coding challenge.
38:04 - This is the code that's actually
38:06 - linked in the video's
description right here
38:08 - and I've made some further corrections.
38:10 - There's some pretty significant
somewhat trivial errors,
38:13 - but errors nonetheless.
38:14 - Number one is in the code that I wrote,
38:16 - this was actually called ER,
this dot ER for event horizon,
38:21 - which is not a variable
I'm using anywhere.
38:22 - It should actually be RS
for Schwarzschild radius.
38:26 - I even had a typo here, photo
dot stop instead of photon.
38:29 - Now this is actually stopping the motion
38:32 - of those photons as they
enter the event horizon.
38:35 - Now in the simulation,
none of them have escaped.
38:37 - Why have none of them escaped?
38:39 - I was actually drawing things
the wrong size as well.
38:43 - I didn't realize that ellipse mode,
38:45 - which I love this new function
I discovered ellipse mode,
38:48 - which allows me to specify
the size of an ellipse
38:51 - by a radius instead of diameter.
38:52 - It doesn't actually
work, this is a P5 bug,
38:54 - with the circle function.
38:56 - You'll notice if I just
change this to circle,
38:58 - suddenly it's drawing it a different size.
39:01 - I like to use the circle function
39:04 - 'cause it's kind of a nice simple word
39:05 - as opposed to ellipse, but
it was actually a mistake.
39:07 - Maybe now that I've put this
out there into the universe,
39:10 - this bug has been fixed in P5.
39:13 - Of course the main thing
about this simulation
39:16 - that I did in the coding challenge is that
39:18 - it's wildly inaccurate.
39:20 - I am using newtonian
gravitational attraction formulas
39:23 - with this very crude physics
time step 2D canvas thing.
39:29 - With this, I've actually now
drawn a line at this distance,
39:34 - 2.6 Schwarzschild radius,
39:36 - I've drawn a line there
and that is the place
39:38 - at which the photon should
enter the photon ring orbit
39:42 - and escape outwards.
39:44 - You can see even at that
spot right there, this one,
39:48 - comes on in and disappears,
you can't really see that,
39:50 - into the black hole itself.
39:52 - In fact, all of these do
all the way up to there.
39:55 - None of them make it out.
39:56 - This is inaccurate.
39:58 - Thank you to Chris Orbin from STEM coding
40:01 - who sent me an email over the
weekend with some formulas
40:03 - to instead of calculating using
40:06 - newtonian gravitational attraction,
40:08 - you could actually just calculate the
40:10 - angle of velocity for that photon
40:15 - and just set its magnitude
to the speed of light.
40:17 - Again, this isn't superbly accurate,
40:20 - but it will draw the paths more accurately
40:23 - than what I did with this just using
40:25 - gravitational attraction.
40:27 - I have that, I will also link this.
40:28 - You can see the formulas here.
40:31 - I might refactor this a bit,
40:33 - but the whole idea is
that I just have an angle
40:36 - that's between the
current photon's position
40:38 - and the black hole's position.
40:41 - Then I calculate the change in angle
40:44 - based on the relativistic
curvature of space time
40:50 - and then adjust the angle based
on that change in the angle
40:53 - and then set a new velocity in that way.
40:56 - I'm cheating a little bit 'cause the
40:59 - angle stuff is so strong,
41:00 - it spirals some stuff out that shouldn't
41:02 - so I just give the Schwarzschild radius
41:04 - a little bit of bigger room
there to capture the stuff.
41:06 - You'll see now when I run this.
41:09 - This is the one we want to follow.
41:10 - You can see it's right there
at that 2.6 measurement.
41:13 - Here it comes, here it comes.
41:15 - That one goes into the
photon ring and escapes,
41:19 - it's that one, while this
one gets caught inside.
41:21 - I'm not suggesting this is now a
41:24 - scientifically precise simulation of
41:28 - the curvature of space
time around a black hole.
41:31 - Once again, this is
JavaScript Canvas 2D with P5,
41:35 - but we've gotten something closer there.
41:37 - I will try to include
links to the explanation
41:40 - of how these formulas work.
41:42 - I hope to hear from you.
41:43 - How can you play with this?
41:44 - How can you turn this into 3D?
41:46 - What kind of steps might I take next
41:48 - if I wanted to work on this further and
41:50 - actually look more at how that image was
41:53 - actually created itself,
41:55 - or maybe model the accretion disk
41:57 - and how it's sort of bending.
41:59 - I don't know.
42:00 - There's so much more that I could do.
42:01 - I hope you make a version of this.
42:02 - Share with me in your comments.
42:03 - Somebody who knows way more
about black holes and science
42:06 - I'm sure will help me out there.
42:07 - I'll see you in a future coding challenge.
42:09 - I'm looking for my train whistle.
42:12 - I'm standing on top of a
train that's moving very fast,
42:14 - but you are also and so to you,
42:16 - it looks like we're standing still.
42:18 - Relativity.
42:19 - (train whistle blows)
42:20 - (upbeat music)

Cleaned transcript:

(bell rings) Hello and welcome to a black hole coding challenge. Time has really slowed down for me, or maybe it's sped up. I can't remember which is which because I'm actually now recording this many days after the actual livestreamed coding challenge. In a little bit, I will change my clothes and travel into the past through the black hole. I don't know how it's all going to work, but you will see me live coding, writing the code to do this simulation. In truth, it's less simulation than visualization. On April 10th, the first ever image of a black hole was published. This image was put together by a team of scientists known at the Event Horizon Telescope. It was compiled from data from many telescopes all over the Earth all synchronized. I looked at this image and I thought, it looks kind of fuzzy and glowy and maybe there's some way I could reproduce this image through a simulation. I started to sort of dig into this. I quickly realized I'm many, many steps away from doing that and I wanted to find the place to start, somewhere where I could at least begin to simulate or visualize the behavior of space time and black holes. Here are the resources that I used to learn about this. First, let me thank Veritasium's video, the how to understand the image of a black hole. This video was actually published the day before the image was revealed, which is really kind of amazing. If you watch this video, the explanation is superb. In particular, there's a short animation in the video that depicted beams of light traveling towards the black hole, some disappearing into the black hole, some wrapping around in an orbit. That's my starting point where I was interested in. I also learned quite a bit from Chris Orbin and the STEM Coding YouTube channel. STEM Coding, if you're not familiar with that YouTube channel, you should definitely check it out. They have a lot of videos about physics and science taught through the lens of coding and visualization. In particular, they have a video called Slingshot with Gravity and Chris Orbun published an article explaining how that code example could be tweaked a little bit to kind of get at some of the ideas around how gravity and black holes. Finally, there's a wonderful paper from 1978. Thank you to Veritasium also for this reference called Image of a Spherical Black Hole with Thin Accretion Disk. This paper has diagrams and the mathematics behind the photon trajectories around a black hole. It gives you a lot of background into what you would want to do to visualize a black hole. Of course, I'm not the first one to try this. Many people have made beautiful visualizations and artistic renderings of black holes. There's the one that you might remember from the move Interstellar. Kip Thorn, a Caltech physicist, was actually an advisor on that film, but there's a lot of artistic license there. I also want to point out to you Ricardo Antonelli who's written this wonderful article How to Draw a Black Hole, Geodesic Raytracing in Curved Space Time. In the article he goes through stepbystep a bunch of different computer graphic tricks and techniques along with the sort of physics of black holes themselves to create a 3D visual of what a black hole might look like. If you've watched me before, you know I am not a physicist, I'm not a scientist. There are many caveats. I don't play a physicist on YouTube. I'm just here wanting to make something in 2D Canvas JavaScript. In fact, I already did it. What I'm here right now, let me talk to you about the pieces that I want to put in this visualization as a sort of reference point for when I start coding. The black hole that I want to visualize is in the galaxy M87. It previously didn't have a name. It was just called M87 star, the star for black hole, but it was recently named Powehi. I'm not sure if I'm pronouncing that correctly, but it is from a Hawaiian chant and it means something like adorn, dark, fathomless creation, something like that. Very appropriate for a black hole. This is what's known as a super massive black hole. Not all black holes are super massive, but this one is and its mass is equivalent to 2.6 billion solar masses, or suns. Take the sun, our sun, the one up in the sky that shines on us, and put together 2.6 billion of those and you have a black hole. It's so massive, we can't see it. Why? Because the gravitational pull is so strong, there's so much matter in there, that any light traveling towards it, once it gets to a certain proximity, can no longer escape. You couldn't be inside the black hole and shine a flashlight. You could be there, but outside the black hole, you couldn't see it 'cause the light can't get out. Of course, you couldn't also be there because you would be dead, very, very dead in the black hole, or you'd just be like Matthew McConaughey, one or the other is true. This little ring here, this distance from the center of black hole at which nothing can escape, not even light, not even the fastest thing we know about light can escape, is known as the event horizon. There's actually a formula for calculating the distance from the center of black hole to that event horizon itself, the Schwarzschild radius, or R sub S. The Schwarzschild radius is calculated as two times G, the universal gravitational constant, times M, the mass of the black hole itself, remember, 2.6 billion solar masses, divided by C squared where C is the speed of light. Of course, the event horizon isn't really a circle. It's a sphere, but for us in our 2D simulation, we're going to make it flat. In order to actually calculate this, I need some of these values. I have the mass, I also need C, the speed of light, which I'm looking over there, I don't have this memorized, which is 299,792,458 meters per seconds squared. That's very, very fast. Not seconds squared. I don't know why I put seconds squared there. It's just meters per second. This number, meters per second. That's the speed of light. I also need G, the universal gravitational constant, which is 6.67 times 10 to the negative 11th power. Now, with these values, with the mass of the black hole, with the universal gravitational constant, with the speed of light, you can actually calculate this. I will leave that to you to calculate and leave your answer in the comments, or you could probably looks it up because people are calculating this stuff all the time. Another element that I want to include in my visualization is the accretion disk. The accretion disk is a whole lot of matter that's outside of the event horizon orbiting the black hole and sort of feeding the black hole. This is a particularly active one. Again, a black hole isn't emptiness. It's we think of it as emptiness. There's just so much matter there that the light cannot escape so it's nothingness. So crazy. The accretion disk is this orbit that's outside of matter orbiting. It has a specific measurement where it is, which is three times the Schwarzschild radius. From the center, one, two, three. You can see not drawn to scale, but this is the accretion disk, three RS. What about light? The accretion disk is full of matter. Matter has mass and it's orbiting at some speed and we could calculate gravitational attraction and all that stuff, but light travels at the speed of light, photons of light travel the speed of light, that speed, and have the mass of zero. It so happens that at 1.5, right around here, at 1.5 times the Schwarzschild radius, this is where light will orbit, but not in a stable orbit. Any photons, any light that's orbiting there will eventually either spiral out forever or spiral in pass the event horizon, never to be seen or heard from again. These are the elements I want in my visualization. I want to depict the black hole right here, really the shadow of the black hole, measured with the event horizon. I want this photon ring, but both the event horizon is really a sphere and this photon ring is really a photon sphere, this is the place where light is orbiting, it's not a stable orbit. It doesn't slow down so it's always eventually going to shoot out or shoot in, but ultimately, if you were standing there, the light would actually draw a circle and you would see the back of your head, which is not what's happening to me right now and I'm trying to think of that. My mind doesn't work that way. I want to depict that and then the accretion disk as well. These are the elements that I want in my visualization. However, I want to animate something. I want to look at what happens when light itself is traveling at the black hole. What does it do? We could be pretty sure that if I take a beam of light, a photon, and point it directly at the center of the black hole, it's going to travel up to the black hole, go past the event horizon, and never come back. We're never going to hear from it again. It sucked into the event horizon. What happens if though there's a beam of light over here, or over here, or over here? What happens there? We can actually see a diagram of this in Ricardo Antonelli's tutorial. This is really the core inspiration for what it is that I want to create in p5.js. What you see here is basically my visualization. There's the black hole, there's the photon ring, here are beams of light, they're bending around, they sort of temporarily end up in that orbit, and then spiral out or spiral in. The thing is, are they really bending, going in a curved path, or are they simply traveling in a straight line through the curve of space time? This is where it would be useful to talk about relativity. The theory of relativity will help to explain why the space time bends around an object, a super massive object. You can think of it as space time being this trampoline and there's a big bowling ball sitting in the center and it's just weighing it down and the space time around it starts to bend and things start to fall in towards it. That's ultimately what's happening with a black hole. The theory of relativity is beyond the scope of what I'm doing in this video. I just want to look at is there a way that I can create the effect. What if I take these beams of light, photons, one starting out pointing directly at the center of the black hole and outwards, how can I look at a way that I could simulate how they would bend around, end up in the photon ring, and then spiral in or spiral out? If you saw the diagram that looks something like this in Veritasium's video, you will also see that there is a radius here, 2.6 times the Schwarzschild radius, there's a distance here from this photon pointed directly at the center outwards at which the light will spiral out as opposed to spiraling in. That is 2.6. In theory, if I were to do all of my math correctly in my visualization, which spoiler alert, I do not, you would see this behavior exactly. The reason why what you're going to watch does not do that is I am simulating sort of this idea with newtonian gravitational attraction. I'm going to approximate the speed of light and these photons will never go faster or never slow down. I don't actually get to that 'til the very end. I kind of fudge that for awhile, but get it a little bit closer, and just use raw gravitational attraction. The coding challenge is about to begin. I'm going to try to program exactly this. You'll see where the code ends up at the end and then I'll come back wearing this shirt again, that's how you'll know how time changed, and I'm going to talk to you a little bit about some things that you might try to account for relativity, to make the behavior of these photons more accurate and I hope that you'll be inspired to make your own visualization of a black hole and share it with me. Let's see, we need some variables. Number one is we need the speed of light. 299, 792, 458, there we go. I don't need the commas because this is code. Now we got the speed of light. Excellent. Things are going very well so far in my coding. Now we need the universal gravitational constant. G, which is 6.67 times power 10 to the negative 11. What could go wrong there? This seems exactly right. Now I need to have my RS, my Schwarzschild radius, which is two times G times. The mass! Now I need a constant. M is the mass. That was 6.5 billion, move two zeroes, some more zeroes, some more zeros. I don't know, how much is the mass of the sun? Mass of the sun. (man laughs) You see the folly here! One folly here is while these numbers are incredibly meaningful and important, they're not going to do me so much good here in my p5.js web editor JavaScript program. What I'm going to do is make up some numbers. We're going to create our own twodimensional universe that has a speed of light, that has a universal gravitational constant. In fact, rather than put the mass of the black hole right here, I'm going to make a black hole class. Let's just arbitrarily say do something approximating this. The speed of light is 30 and the universal gravitational constant is six, why not right? Also go and make a black hole.js file. Then I'm going to say class black hole and I need a constructor, just an XY. Let me use a Pvector for this. I'm going to say this dot position equals create vector, X comma Y. Now I need a mass. This dot mass equals 6.5. Our measurements are in billions. Then its radius, the Schwarzschild radius, is two times G times this dot mass divided by C times C. I need a little more space here to be able to see more code, but fortunately actually I can do this. Let's put these in parentheses. Now what I can do is I can write show, and what am I going to do? Let's make fill zero, let's fill in the black hole with the color black, let's draw a circle at this dot pos dot X, this dot pos dot Y with the Schwarzschild radius times two. I guess I should might as well pass in an argument here for mass. If I were to in my main program say, let's call it M87, we're going to call our black hole M87, M87 equals a new black hole. I'm going to place it at sort of the top. Actually, the left of my canvas. Let's place it at 100 comma 320 and we're going to give it a mass of, what'd I say, 6.5, and then I'm going to say M87 dot show. We have a black hole. RS is not defined. ♪ This dot ♪ ♪ This dot ♪ ♪ This dot, this dot son ♪ There we go, that fixes that. Where is my black hole? Let's take a look at what this dot RS is. Way too tiny. My units are really kind of all over the place. Let's make some units that make more sense for our pixel space. Let's make the mass of the black hole probably much bigger, 6,500. There we go, look! (bell rings) Thank you! (upbeat jazz music) Goodnight. I have now made my simulation of a black hole. This is the first ever known image of a black hole made in p5.js. Just because I don't have a lot of pixel space to work with right now, let's make the mass a tenth as large. We can see, there's my much smaller black hole. Okay fine. This is looking good to me. That's the size of the black hole that I want. Let's now draw the accretion disk. Let's make some sort of accretion disk. I'm going to say no fill stroke and let's make it kind of grayish. I'm going to draw the accretion disk as a circle. This dot pause dot X, this dot pause dot Y, this dot RS times. This just in from the chat, I forgot about this. I forgot about this. I can say ellipse mode radius, which should now allow me to, let me comment this out, just use the radius as the ellipse. Perfect. Just used the radius value as the size of the circle. Thank you Simon Tiger for that. Great correction. Now I'm going to say this circle is at the radius times three and maybe I will give it a stroke weight of eight. I want no stroke here. Let's make it stroke weight of 24 or 64. Let's give it some alpha. There we go. That's kind of my visualization of the accretion disk. The truth of the matter is, this is not exactly correct 'cause I have a feeling that distance is right here in the center whereas the stroke weight kind of fans out the thickness there. It's a little bit off and I probably should be a little bit more accurate about that. I guess what I could do is just add to the radius itself the half of the stroke weight. If I add 32 there, there we go. I think that's accurate now. Nothing about this is really accurate. Now let's draw the unstable photon orbit. That would be at 1.5 of the radius. I can do the same exact thing, but this time at 1.5. Maybe I want to make that one a little less thick. Give myself a little more space here. Make the 16 and make this 32 and maybe this one should be some kind of color 'cause I'm so good at design. Some kind of orange. It was better before I guess. Some kind of orangeish color. Look at this! We now have the black hole, the accretion disk, and a sort of photon orbit ray. The other thing that I want to do is I want to start a bunch of photons, I want to have them coming from over here towards the black hole. I need to know how far, I can't jump up 'cause my green screen only goes this high, I want to know how far up does it need to be for it to not really curve, but travel in a straight line around the path of the curved path of space and time to end up in an orbit to either spiral out to infinity or end up into the black hole. That we said was 2.6 Schwarzschild radius. What I'm going to do is I am going to create another class. I'm going to call this photon.js. Photon.js will be a photon, make a constructor, this will also have a position, give it an X and a Y, and let's make sure we include it in our HTML file, and let's also write a show function. Let's just make this stroke weight four, point this dot pause dot X, this dot pause dot Y. Let's make this distinctly red just for right now. Now what I could do potentially is let me make an array. I'm going to call it light, maybe just call it photons particles, I'll call it particles, whatever, and I want to say four let Y equal 320, and really this is height divided by two, Y is greater than height divided by two minus, I'm actually going to put these into variables 'cause it'll make more sense. Let's say start is height divided by two, end is height divided by two minus M87's Schwarzschild radius times 2.6. Height divided by two. Actually, I can start it at the end. It's less than start and Y plus equal every 10 pixels. Let's do that, every 10 pixels. What I want to do, particles index I equals a new photon at where? X will be just with minus some amount, with minus 20 comma Y. What's wrong there? I is not defined. I'll just say particles dot push. I can add things to the array with a push function 'cause I'm not using I to iterate. That makes more sense. Here in the draw function, I can say four every photon of particles P dot show. There we go. I have all of my points of light that I want to send out at the speed of light towards the black hole and watch them follow their straight line path through the curved space time thing. Now let me give them a velocity. If I go back into my photon, I'm also going to say this dot velocity equals create vector, traveling at the speed of light in the negative X direction, negative C comma zero. Then I am going to do, not constructor, an update function in which case this dot position dot add, this dot velocity. What I can do now is in sketch.js, is I can say P dot update. Ready? Here we go everybody. There they go! What is the speed of light here? 30. 30 pixels per frame is going to be going quite slowly actually. The frame rate seems slow. 30 pixels per frame, that's not really a nice way to watch an animation so I'm going to include another variable. I'm going to call it DT. This is the delta time step. Even though my frame, my animation frame, goes one at a time, 30 frames per second, maybe I only want to travel ahead a little bit in time. Let's try .1, a tenth. What I need to adjust by that delta T is the photons' velocity. I guess I'm going to make a copy of this. I will just say this dot delta V equals this dot velocity dot copy and then this dot delta, this is a little bit awkward about using Pvector, multiply by DT. Not this dot. I just want a delta V and then multiply that by DT and then add that instead. Now you can see, there we go. There are the photons traveling at the speed of light, but they're not curving, they're not changing. Now we just need to have them bend. We need to have them bend according to the curvature of space time. This is now the moment where it makes sense for me to go read one of those papers and try to look at those formulas, but I'm going to actually see what happens if I just apply newtonian gravitational attraction. I need this photon to basically have a force pointed in the direction of the center of the black hole that it accelerates its velocity towards it, but an interesting side note here and I guess this is an approximation of relativity, is that we can't go faster than the speed of light. We're really only adjusting the direction so the speed is going to remain constant at the speed of light. Again, major caveats to how inaccurate this is, but it's a starting point. I want to add a function. Basically, I want to be able to say I have some sort of force, which is M87 curve, pull, I don't know what to say. I could say attract. I'm just going to say pull as a kind of arbitrary word. Pull that particle. Then I want to say particle apply force that force. This is very similar to how I approach a very basic physics simulation in my nature of code examples. You could refer back to chapters one and two of that book, which is essentially what I've got here. What I need is a function now in the black hole object called pull that expects a photon. First thing I need to calculate this force vector is a vector that points from the particle itself towards the center of the black hole. To make that vector, I'm going to make variable called force, and I'm going to say P5 vector dot subtract, what is it? This dot position, the position of the black hole, minus photon dot position, the position of that particular photon. That's the vector. What I need to calculate the force of gravity according to the newtonian laws of motion is the force of gravity equals the universal gravitational constant, G, times the mass of one object. Guess what? That's this. Times the mass of another object. What's the mass of this? We've got a problem now. The mass of this is, well, zero, but the force isn't zero. This makes kind of no sense. The good news for us is we're going to use this in acceleration. Because we also have force equals mass times acceleration and I want to know the acceleration of this, acceleration equals force divided by mass. This mass will just get divided out. Of course I couldn't divide by zero. This is the essence of why I'm kind of going down the wrong direction here to do this accurately, but it's a starting point. I can just consider this right now. G times the mass of the black hole itself divided by R squared, or the distance between the photon and the black hole, R squared or distance squared. I have that value actually in my code because I have R is the magnitude of the force. Then I could actually calculate that force magnitude, which is the force of gravity equals G times this dot mass divided by R times R. Now I could say force dot set magnitude F of G, photon. Then I can just say this dot velocity add force. Photon dot velocity. Then I just want to add that force to the photon's velocity. P dot apply force is not a function. Actually, I've simplified this. What I can just do is get rid of this whole extra step or returning the vector and I can just do this. (man yelling) Did you see those photons? Let's be able to see this a bit better. We'll see why this is not correct. First, let me do a couple things. One, let me make these variables. Let me draw lines. Let me say stroke zero line from zero start zero end. Sorry. Zero start width start. Let me say stroke weight one. Then let me also do the same for the end. I just want to be able to see where these are. This is showing that spot. Guess what? The photon should always be traveling at the speed of light. I forgot about that so this is a huge hack here. I'm going to say right here when I do that pull in the black hole, I do that pull, I'm going to say photon dot velocity dot set magnitude C. Maybe I should just limit it. Let's just limit it. It could slow down I suppose. (man laughs) It could slow down. Let's just limit it and see what happens. Everything got sucked in! Look at that! The black hole sucked it all in! Couple things. This is good. In other words, this is kind of a nice little simulation in the sense that the force is so strong, even in my very crude simulation, that it's never going to escape. Let's add a little trail here. The photon, I'm going to give it a variable called this dot history. Every time it updates its position, or every time before it updates its position, I'm going to say history dot push this dot pause dot copy. Then also this dot history. Then also let's just say if this dot history dot length is greater than 100, this dot history dot splice, let's just remove the oldest element. Now I can say stroke zero, stroke weight one, begin shape, end shape, no fill, for every vector in history, vertex V dot X, V dot Y. This dot history. Now we're able to see those paths as well as they bend. Again, I don't have it right and we can give ourselves a much longer history here. What I'm going to do here now also is I am going to start some particles from higher than end. I'm just going to start all the way from zero like the top and then let's space them out by a little bit more, and here we go. Nothing escaped. Look at that, nothing escaped my black hole! Again, it's not accurate. I've got this wrong because I'm not taking to account general relativity, which is kind of a thing. It's a thing. I'm visualizing the idea here. What happens if I make the gravitational pull constant smaller? Let's see if we can get anything to escape. There we go. You can see it's there in the photon orbit, but back into the center. We're getting the idea. Do we have something sort of similar to this? (bell rings) I think we do! Change the color to red. Try shrinking the mass. Let's go back and change. You want the color to be red of the photons' paths. I can just take this out. Let's also make this stroke weight a little bit wider so I can see it. Let me give actually give myself much more space here. I'm going to say window width whatever space I have, window height, and let's also make this even less. Full screen, here we go. Here is my black hole simulation. Let's move it over so we can have a little bit more space to work with. 300. There we go. Of course, you can see this should be where they're able to escape, but my simulation is completely off so I should take out those start and end lines and just watch this go. There it is, the curvature of space and time. Center the black hole please. That's actually not a bad idea. I'm also just going to unfortunately take out these lines just 'cause it really shows how incorrect it is. For me to have some plausible deniability here. Let's see what we've got. It's running quite slow because of drawing all these trails. Some things that I could do to make this better, flow faster, number one is in the photon itself, I don't have to add every single spot, I could just say if frame count module is 10 equals zero. (bell rings) This video's not over yet. Thanks to the chat, I think this is actually kind of problematic. The way that I'm doing this is the photons are actually slowing down and they should stay. I shouldn't limit them to the speed of light. I should actually just keep their magnitude at the speed of light. Again, it's sort of inaccurate anyway so what's the difference. I've also added more photons here. You can look at it this way. This is going to be a slightly different result because now I'm locking them at the speed of light. I think there's also a big performance improvement that I can make, which is that once they're sucked into the black hole, I don't need to keep tracking their position and keeping that history going. I should really shut them off as soon as they've been sucked in. Another thing that I can do here is since I have that distance, I can say if R is less than the event horizon, I could remove the photon, just delete it, but I want to still see its path. I think I'll say photon dot stop. That doesn't mean anything, but I can then in the photon class, I can have a variable called stopped equals false and then I can write a function called stop where I say this dot stopped equals true. Then what I can do is I don't want to continue updating it. As long as it's not stopped, I can just freeze its history. I still want to draw it where it last was, but I can freeze its history. Here we go. There's my photons flying at the black hole, space time starts to bend, the photons spin around, and some will get sucked in, some curve, and there we go. (bell rings) I am back a few days later again. Thank you for watching the coding challenge. This is the code that's actually linked in the video's description right here and I've made some further corrections. There's some pretty significant somewhat trivial errors, but errors nonetheless. Number one is in the code that I wrote, this was actually called ER, this dot ER for event horizon, which is not a variable I'm using anywhere. It should actually be RS for Schwarzschild radius. I even had a typo here, photo dot stop instead of photon. Now this is actually stopping the motion of those photons as they enter the event horizon. Now in the simulation, none of them have escaped. Why have none of them escaped? I was actually drawing things the wrong size as well. I didn't realize that ellipse mode, which I love this new function I discovered ellipse mode, which allows me to specify the size of an ellipse by a radius instead of diameter. It doesn't actually work, this is a P5 bug, with the circle function. You'll notice if I just change this to circle, suddenly it's drawing it a different size. I like to use the circle function 'cause it's kind of a nice simple word as opposed to ellipse, but it was actually a mistake. Maybe now that I've put this out there into the universe, this bug has been fixed in P5. Of course the main thing about this simulation that I did in the coding challenge is that it's wildly inaccurate. I am using newtonian gravitational attraction formulas with this very crude physics time step 2D canvas thing. With this, I've actually now drawn a line at this distance, 2.6 Schwarzschild radius, I've drawn a line there and that is the place at which the photon should enter the photon ring orbit and escape outwards. You can see even at that spot right there, this one, comes on in and disappears, you can't really see that, into the black hole itself. In fact, all of these do all the way up to there. None of them make it out. This is inaccurate. Thank you to Chris Orbin from STEM coding who sent me an email over the weekend with some formulas to instead of calculating using newtonian gravitational attraction, you could actually just calculate the angle of velocity for that photon and just set its magnitude to the speed of light. Again, this isn't superbly accurate, but it will draw the paths more accurately than what I did with this just using gravitational attraction. I have that, I will also link this. You can see the formulas here. I might refactor this a bit, but the whole idea is that I just have an angle that's between the current photon's position and the black hole's position. Then I calculate the change in angle based on the relativistic curvature of space time and then adjust the angle based on that change in the angle and then set a new velocity in that way. I'm cheating a little bit 'cause the angle stuff is so strong, it spirals some stuff out that shouldn't so I just give the Schwarzschild radius a little bit of bigger room there to capture the stuff. You'll see now when I run this. This is the one we want to follow. You can see it's right there at that 2.6 measurement. Here it comes, here it comes. That one goes into the photon ring and escapes, it's that one, while this one gets caught inside. I'm not suggesting this is now a scientifically precise simulation of the curvature of space time around a black hole. Once again, this is JavaScript Canvas 2D with P5, but we've gotten something closer there. I will try to include links to the explanation of how these formulas work. I hope to hear from you. How can you play with this? How can you turn this into 3D? What kind of steps might I take next if I wanted to work on this further and actually look more at how that image was actually created itself, or maybe model the accretion disk and how it's sort of bending. I don't know. There's so much more that I could do. I hope you make a version of this. Share with me in your comments. Somebody who knows way more about black holes and science I'm sure will help me out there. I'll see you in a future coding challenge. I'm looking for my train whistle. I'm standing on top of a train that's moving very fast, but you are also and so to you, it looks like we're standing still. Relativity. (train whistle blows) (upbeat music)
