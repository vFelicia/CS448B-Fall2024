With timestamps:

00:02 - hello again um this video we're going to
00:04 - talk about box Tod joints now we've done
00:06 - a lot with box Tod already we've made
00:09 - circles and rectangles and static and
00:11 - dynamic and polygon shapes and multiple
00:13 - shapes attached to a body but we've
00:15 - we've left out a key uh a key thing
00:18 - that's possible in box Tod we one of the
00:21 - things we can do in boxd is connect to
00:24 - bodies together this is what joints do
00:27 - in boxu and in this video we're going to
00:29 - look at two case studies of joints in
00:31 - box we're going to look at a distance
00:36 - joint and we're also going to look at a
00:39 - revolute
00:41 - joint now I should mention there are
00:43 - lots of kinds of joints in boxd I could
00:46 - keep writing Prismatic rope pulley gear
00:50 - uh a couple more that I that I can't
00:52 - remember right now at the top of my head
00:53 - there are lots of kinds of joints in
00:55 - boxid to create all sorts of kind of
00:57 - crazy wacky physics scenarios um so uh I
01:01 - but but but I think what's going to be
01:02 - most useful hopefully is to look at
01:04 - these two joints what is the process for
01:07 - defining and creating a joint how does a
01:09 - distance joint work how does a revolute
01:11 - joint works and then if you need some of
01:13 - these other joints you may want to take
01:14 - a look at the Box Tod manual as well as
01:17 - the jbox UT documentation um which will
01:20 - um kind of lead you towards some of
01:21 - these other possibilities and eventually
01:23 - I I only have examples for these two
01:24 - joints but eventually I would like to
01:25 - make some for others as well so send me
01:27 - your requests and I'll get cracking on
01:30 - that okay so um what is a what is a
01:33 - joint so let's look at first at a
01:34 - distance joint so a distance joint is
01:36 - essentially a spring that we're going to
01:37 - put between two uh objects you know we
01:41 - can visualize
01:42 - it like this we have two boxid bodies
01:45 - and here's a joint connecting them these
01:47 - objects this could be a springy joint it
01:49 - could be a very rigid joint it could
01:51 - have it could be long it could be short
01:53 - there are lots of ways you could
01:55 - configure this but it is just that a
01:57 - connection it's going to bind these two
01:58 - bodies together and when we run a
02:00 - processing sketch you're going to see
02:01 - that when as this one Falls it's going
02:03 - to pull this one along with it now one
02:05 - thing that we should really emphasize
02:07 - here with box of joints is they have no
02:12 - geometry meaning if something else were
02:15 - falling it would pass right through that
02:18 - a joint is simply a force this distance
02:21 - joint is simply a force that's going to
02:23 - connect these two now in my example I'll
02:24 - choose to draw a line there but that
02:27 - shouldn't trick you to realize that that
02:28 - you shouldn't think that there's
02:29 - geometry
02:30 - one I'm kind of going ahead of myself
02:32 - here but if you wanted to actually have
02:34 - geometry with this one thing that you
02:37 - might think about doing is creating a a
02:40 - body a body and a body and then putting
02:43 - the joints here so that you can actually
02:46 - right so the this would be a connection
02:47 - between these two and this would be a
02:48 - connection between these two but that's
02:50 - so that'll be your exercise actually
02:52 - that's a great exercise when you finish
02:54 - this video and you look at the distance
02:55 - joint um examples try to make this as
02:57 - your exercise and see how that works
02:59 - okay
03:00 - anyway now okay so what is the process
03:03 - remember when we like had to make a box
03:06 - body we had all these steps to find the
03:08 - body set up the parameters Define the
03:09 - shape Define the fixture shape all that
03:12 - so we want to look at the same thing for
03:14 - joints what is the process for creating
03:16 - a joint we're going to walk ourselves
03:18 - through it and then we're going to look
03:19 - at code examples that implement it kind
03:21 - of give us a cursory glance over it
03:23 - we're not going to type out the entire
03:25 - example um hopefully this will just give
03:27 - you an overview here okay so what is the
03:30 - step now one thing the first thing we
03:31 - need to do is
03:33 - have two
03:36 - bodies ready to go exclamation point so
03:41 - you if you're going to make a joint the
03:43 - point of a joint is that it connects two
03:46 - box Tod bodies so before you even create
03:48 - the joint you should have variables that
03:51 - are referencing the two box Tod bodies
03:53 - that you want to connect and we'll see
03:54 - that when we get to the code example so
03:56 - once you have the two bodies ready to go
04:01 - you need to Define The
04:04 - Joint now what what does it mean to
04:07 - Define The Joint it means to create a
04:09 - joint definition object but it also
04:11 - means to set the parameters so set the
04:14 - parameters so just as an example what
04:18 - are the parameters for a distance joint
04:20 - let's list those the parameters for a
04:21 - distance joint is a
04:23 - length this is the rest length remember
04:26 - the rest length of a spring if a spring
04:28 - comes naturally to rest what will that
04:30 - distance be between the two bodies um it
04:33 - also has a parameter called frequency
04:36 - Hertz and it has a damping
04:41 - ratio so frequency Hertz you can think
04:44 - of as the kind of speed of oscillation
04:46 - the harmonic the simple harmonic motion
04:49 - right is it a what is the frequency of
04:50 - that oscillation and typically these are
04:52 - numbers between one and five uh damping
04:55 - ratio you can think of as um kind of
04:58 - affects also the springiness but like uh
05:01 - and you can think of damping as what
05:02 - causes a spring to kind of come to rest
05:05 - and these are typically numbers between
05:07 - Zer and
05:09 - one uh okay so by the way if you wanted
05:12 - a completely rigid distance joint you
05:14 - would make the frequency Herz value zero
05:17 - and the damping ratio one so that would
05:19 - be complete damping and no oscillation
05:23 - whatsoever okay
05:25 - so once we've defined The Joint look at
05:29 - my notes here
05:32 - um I guess I made that well let's make
05:34 - that a separate step so we have four
05:37 - steps here once we've defined The
05:39 - Joint the third step here would be to
05:42 - configure all the
05:47 - parameters and they're going to be
05:48 - different so with the distance joint we
05:50 - were looking at length frequency damping
05:53 - ratio for a revolute joint when we get
05:55 - to that we're going to see there's motor
05:56 - speed and torque each joint is going to
05:58 - have a different set of physics
06:00 - properties and the Box 2D manual is the
06:02 - best place to kind of look up what are
06:04 - those what are what are what are the
06:05 - parameters and what are the kind of
06:06 - ranges of values for them so once we've
06:08 - configured all the parameters then all
06:09 - we need to do is that last step create
06:12 - the
06:14 - joint right so two bodies ready to go
06:18 - Define a joint object configure all
06:20 - these parameters for a distance joint
06:21 - we've just got three we're going to
06:23 - configure and then create that joint so
06:25 - let's actually look at an example of
06:27 - this in action now
06:31 - okay okay let's take a look at this
06:33 - example so as I click the mouse we can
06:36 - see these little springy particle bline
06:40 - Circle things are connected so what's
06:42 - going on here each time I click the
06:44 - mouse we've made two box to bodies and
06:46 - one joint connecting them and you can
06:47 - see the joint's a little bit springy
06:49 - it's a distance joint so obviously we're
06:52 - implementing all these steps that are
06:55 - over here in the code so let's find
06:57 - where we're going to implement those
06:58 - steps before we can get there though let
07:00 - let me just point out something that's a
07:02 - little bit particular about this example
07:04 - look at this class here this class is
07:06 - the particle class this is essentially
07:08 - what we have in all of our other
07:09 - examples we make this particle or box or
07:12 - thing object and that thing object has
07:14 - as a a reference into it inside of
07:16 - itself a box 2D body that controls all
07:18 - of its physics that's what we've always
07:20 - done now we need where do we put the
07:23 - joint so there's lots of different
07:25 - strategies here and we could make a kind
07:28 - of our own joint joint we could make a
07:30 - class called connection and that has a
07:32 - joint in it and and and that would be a
07:35 - useful thing to do this particular
07:36 - example does something like that um and
07:39 - what it does is it has a pair class and
07:41 - the pair class has two particle objects
07:44 - in it the pair is an object that cont
07:47 - that that stores all the information
07:49 - related to two particles and the joint
07:52 - that connects them so it's just the way
07:54 - that we're choosing to organize our code
07:56 - and this is an interesting question that
07:58 - you might ask yourself
07:59 - uh I have this scenario where I'm using
08:02 - joints in this way what's a nice
08:04 - object-oriented way to organize my code
08:06 - ask those questions in the comments in
08:08 - in the Vimeo comments below um maybe we
08:10 - can have a little discussion about some
08:11 - of those things okay so um but how's it
08:14 - working here we have two particle
08:16 - objects we create them like we create
08:18 - any old particle objects and then we
08:20 - make the joint so down here we're now
08:23 - making the joint we're following those
08:24 - steps so I I guess I didn't um in the
08:27 - comments here come on I could say step
08:31 - one is create the joint right so that's
08:35 - just that's just creating that joint
08:38 - object step
08:40 - two we said is configure the
08:44 - properties and one of the things we see
08:46 - here is that remember a joint the whole
08:49 - point of a joint is that it connects two
08:50 - box Tod bodies and this is what we're
08:52 - doing right here we're saying body a of
08:54 - the joint is particle one's body body B
08:56 - of the joint is particle 2's body and
08:58 - then we're setting its length its
09:00 - frequency and its damping those are
09:02 - those properties right there and you can
09:03 - see one thing that's really important to
09:05 - point out about length is remember if
09:07 - we're thinking about the length in
09:08 - pixels we've got to convert it before we
09:11 - just give that value to box Tod it's got
09:13 - to be in world scale box Tod world scale
09:15 - and you can see we're choosing three
09:17 - we're choosing 0.1 try different values
09:19 - here's a great exercise build little
09:21 - slider controls that allow you to like
09:24 - set what the values of those joints are
09:26 - before you create them um and uh okay so
09:31 - and then so this that's step two and
09:34 - then I don't know somehow we had four
09:35 - steps oh we had okay this is really oh
09:38 - boy I'm doing I'm really botching this
09:39 - Step
09:43 - One is have two bodies ready to go right
09:47 - that was step one then we can create the
09:49 - joint and can between those two bodies
09:52 - maybe technically that goes there right
09:55 - we could create the joint between those
09:56 - two bodies configure its properties
09:58 - whoops and then the very last
10:03 - step is actually create the joint and
10:06 - you can see there's some gobbl good code
10:08 - here but we're calling box2d doc create
10:10 - joint and passing in the joint
10:11 - definition and there the joint is done
10:14 - interestingly enough though look at this
10:16 - distance joint DJ equals this is a local
10:19 - variable which means it's gone the
10:21 - moment after we create that joint and I
10:24 - should just point out in this example
10:26 - that's okay all we wanted to do in this
10:28 - example was create a joint that connects
10:30 - those two bodies we don't need to affect
10:32 - that joint delete it change its
10:35 - properties later however if you did we
10:37 - would probably we would see here as a
10:40 - variable we would probably want to keep
10:41 - a reference to that joint variable and
10:43 - you know now that I think of it this
10:45 - example might be a little more clear if
10:46 - I always did that even though we're not
10:48 - making use of it in this example um but
10:51 - I'll consider rewriting that you know
10:53 - when I eventually fix all these videos
10:55 - and make them really
10:57 - good okay so and then you see later how
11:00 - are we how are we visualizing The Joint
11:03 - we're just drawing a line so um that's
11:06 - why we don't you know we we can just we
11:07 - know that that joint always connects
11:09 - those two bodies we can make a line
11:10 - between those two okay so this is the
11:12 - distance joint and we can just to remind
11:14 - ourselves run this example we can see
11:16 - there it is again the joint's connecting
11:18 - those two bodies there's lots of things
11:20 - you could think about this try to create
11:22 - a string of of things connected try to
11:24 - make uh you know a mesh of stuff
11:26 - connected use the distance joint in a
11:28 - different way than just this simple
11:30 - example that would be an exercise okay
11:32 - let's look at a revolute joint in the
11:34 - next
11:35 - video hi I'm tacking this on to the
11:38 - distance joint I forgot there is also an
11:40 - example there's an exercise in the book
11:42 - exercise 5.6 which describes how you can
11:45 - make a bridge like kind of by connecting
11:48 - a lot of objects all connected with lots
11:50 - of little distance joints between them
11:52 - and you can see here we have this kind
11:53 - of springy elastic bridge I can create
11:55 - all these OB box objects that get kind
11:57 - of piled up and it's hanging and waiting
12:00 - there so this is something you might
12:01 - think about doing obviously the answer
12:02 - is there in the GitHub repository
12:04 - exercise 5.6 but this as an exercise you
12:07 - might try to create something like this
12:09 - um and one of the key things to realize
12:11 - here is the two bodies at the end are
12:14 - static bodies they're not Dynamic if
12:15 - they're static that means they're fixed
12:17 - and that's what's kind of holding this
12:18 - bridge in place okay um that's all I
12:21 - wanted to mention

Cleaned transcript:

hello again um this video we're going to talk about box Tod joints now we've done a lot with box Tod already we've made circles and rectangles and static and dynamic and polygon shapes and multiple shapes attached to a body but we've we've left out a key uh a key thing that's possible in box Tod we one of the things we can do in boxd is connect to bodies together this is what joints do in boxu and in this video we're going to look at two case studies of joints in box we're going to look at a distance joint and we're also going to look at a revolute joint now I should mention there are lots of kinds of joints in boxd I could keep writing Prismatic rope pulley gear uh a couple more that I that I can't remember right now at the top of my head there are lots of kinds of joints in boxid to create all sorts of kind of crazy wacky physics scenarios um so uh I but but but I think what's going to be most useful hopefully is to look at these two joints what is the process for defining and creating a joint how does a distance joint work how does a revolute joint works and then if you need some of these other joints you may want to take a look at the Box Tod manual as well as the jbox UT documentation um which will um kind of lead you towards some of these other possibilities and eventually I I only have examples for these two joints but eventually I would like to make some for others as well so send me your requests and I'll get cracking on that okay so um what is a what is a joint so let's look at first at a distance joint so a distance joint is essentially a spring that we're going to put between two uh objects you know we can visualize it like this we have two boxid bodies and here's a joint connecting them these objects this could be a springy joint it could be a very rigid joint it could have it could be long it could be short there are lots of ways you could configure this but it is just that a connection it's going to bind these two bodies together and when we run a processing sketch you're going to see that when as this one Falls it's going to pull this one along with it now one thing that we should really emphasize here with box of joints is they have no geometry meaning if something else were falling it would pass right through that a joint is simply a force this distance joint is simply a force that's going to connect these two now in my example I'll choose to draw a line there but that shouldn't trick you to realize that that you shouldn't think that there's geometry one I'm kind of going ahead of myself here but if you wanted to actually have geometry with this one thing that you might think about doing is creating a a body a body and a body and then putting the joints here so that you can actually right so the this would be a connection between these two and this would be a connection between these two but that's so that'll be your exercise actually that's a great exercise when you finish this video and you look at the distance joint um examples try to make this as your exercise and see how that works okay anyway now okay so what is the process remember when we like had to make a box body we had all these steps to find the body set up the parameters Define the shape Define the fixture shape all that so we want to look at the same thing for joints what is the process for creating a joint we're going to walk ourselves through it and then we're going to look at code examples that implement it kind of give us a cursory glance over it we're not going to type out the entire example um hopefully this will just give you an overview here okay so what is the step now one thing the first thing we need to do is have two bodies ready to go exclamation point so you if you're going to make a joint the point of a joint is that it connects two box Tod bodies so before you even create the joint you should have variables that are referencing the two box Tod bodies that you want to connect and we'll see that when we get to the code example so once you have the two bodies ready to go you need to Define The Joint now what what does it mean to Define The Joint it means to create a joint definition object but it also means to set the parameters so set the parameters so just as an example what are the parameters for a distance joint let's list those the parameters for a distance joint is a length this is the rest length remember the rest length of a spring if a spring comes naturally to rest what will that distance be between the two bodies um it also has a parameter called frequency Hertz and it has a damping ratio so frequency Hertz you can think of as the kind of speed of oscillation the harmonic the simple harmonic motion right is it a what is the frequency of that oscillation and typically these are numbers between one and five uh damping ratio you can think of as um kind of affects also the springiness but like uh and you can think of damping as what causes a spring to kind of come to rest and these are typically numbers between Zer and one uh okay so by the way if you wanted a completely rigid distance joint you would make the frequency Herz value zero and the damping ratio one so that would be complete damping and no oscillation whatsoever okay so once we've defined The Joint look at my notes here um I guess I made that well let's make that a separate step so we have four steps here once we've defined The Joint the third step here would be to configure all the parameters and they're going to be different so with the distance joint we were looking at length frequency damping ratio for a revolute joint when we get to that we're going to see there's motor speed and torque each joint is going to have a different set of physics properties and the Box 2D manual is the best place to kind of look up what are those what are what are what are the parameters and what are the kind of ranges of values for them so once we've configured all the parameters then all we need to do is that last step create the joint right so two bodies ready to go Define a joint object configure all these parameters for a distance joint we've just got three we're going to configure and then create that joint so let's actually look at an example of this in action now okay okay let's take a look at this example so as I click the mouse we can see these little springy particle bline Circle things are connected so what's going on here each time I click the mouse we've made two box to bodies and one joint connecting them and you can see the joint's a little bit springy it's a distance joint so obviously we're implementing all these steps that are over here in the code so let's find where we're going to implement those steps before we can get there though let let me just point out something that's a little bit particular about this example look at this class here this class is the particle class this is essentially what we have in all of our other examples we make this particle or box or thing object and that thing object has as a a reference into it inside of itself a box 2D body that controls all of its physics that's what we've always done now we need where do we put the joint so there's lots of different strategies here and we could make a kind of our own joint joint we could make a class called connection and that has a joint in it and and and that would be a useful thing to do this particular example does something like that um and what it does is it has a pair class and the pair class has two particle objects in it the pair is an object that cont that that stores all the information related to two particles and the joint that connects them so it's just the way that we're choosing to organize our code and this is an interesting question that you might ask yourself uh I have this scenario where I'm using joints in this way what's a nice objectoriented way to organize my code ask those questions in the comments in in the Vimeo comments below um maybe we can have a little discussion about some of those things okay so um but how's it working here we have two particle objects we create them like we create any old particle objects and then we make the joint so down here we're now making the joint we're following those steps so I I guess I didn't um in the comments here come on I could say step one is create the joint right so that's just that's just creating that joint object step two we said is configure the properties and one of the things we see here is that remember a joint the whole point of a joint is that it connects two box Tod bodies and this is what we're doing right here we're saying body a of the joint is particle one's body body B of the joint is particle 2's body and then we're setting its length its frequency and its damping those are those properties right there and you can see one thing that's really important to point out about length is remember if we're thinking about the length in pixels we've got to convert it before we just give that value to box Tod it's got to be in world scale box Tod world scale and you can see we're choosing three we're choosing 0.1 try different values here's a great exercise build little slider controls that allow you to like set what the values of those joints are before you create them um and uh okay so and then so this that's step two and then I don't know somehow we had four steps oh we had okay this is really oh boy I'm doing I'm really botching this Step One is have two bodies ready to go right that was step one then we can create the joint and can between those two bodies maybe technically that goes there right we could create the joint between those two bodies configure its properties whoops and then the very last step is actually create the joint and you can see there's some gobbl good code here but we're calling box2d doc create joint and passing in the joint definition and there the joint is done interestingly enough though look at this distance joint DJ equals this is a local variable which means it's gone the moment after we create that joint and I should just point out in this example that's okay all we wanted to do in this example was create a joint that connects those two bodies we don't need to affect that joint delete it change its properties later however if you did we would probably we would see here as a variable we would probably want to keep a reference to that joint variable and you know now that I think of it this example might be a little more clear if I always did that even though we're not making use of it in this example um but I'll consider rewriting that you know when I eventually fix all these videos and make them really good okay so and then you see later how are we how are we visualizing The Joint we're just drawing a line so um that's why we don't you know we we can just we know that that joint always connects those two bodies we can make a line between those two okay so this is the distance joint and we can just to remind ourselves run this example we can see there it is again the joint's connecting those two bodies there's lots of things you could think about this try to create a string of of things connected try to make uh you know a mesh of stuff connected use the distance joint in a different way than just this simple example that would be an exercise okay let's look at a revolute joint in the next video hi I'm tacking this on to the distance joint I forgot there is also an example there's an exercise in the book exercise 5.6 which describes how you can make a bridge like kind of by connecting a lot of objects all connected with lots of little distance joints between them and you can see here we have this kind of springy elastic bridge I can create all these OB box objects that get kind of piled up and it's hanging and waiting there so this is something you might think about doing obviously the answer is there in the GitHub repository exercise 5.6 but this as an exercise you might try to create something like this um and one of the key things to realize here is the two bodies at the end are static bodies they're not Dynamic if they're static that means they're fixed and that's what's kind of holding this bridge in place okay um that's all I wanted to mention
