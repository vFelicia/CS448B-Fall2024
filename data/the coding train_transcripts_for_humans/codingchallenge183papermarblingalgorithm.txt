With timestamps:

00:00 - IM missible imiss what does that mean I
00:03 - don't know that word not forming a
00:05 - homogeneous mixture got
00:15 - it today I am going to tackle a p5js
00:19 - simulation of the artistic process known
00:22 - as paper marbling this is an ancient
00:25 - process it involves water taking ink or
00:28 - paint and floating it on top of the
00:30 - water and then applying that to fabric
00:34 - paper Ceramics and all sorts of
00:37 - incredible and beautiful patterns emerge
00:40 - the earliest accounts of marbling date
00:42 - back thousands of years to Japan where
00:45 - the process was known as suminagashi a
00:48 - wonderful reference is the 19th century
00:51 - Japanese artist tokutaro yagi who
00:54 - developed a method using a piece of
00:56 - bamboo to stir the colors new marbling
00:59 - techniques were developed throughout the
01:00 - Middle East and Europe and continued to
01:03 - this day I encountered the concept of
01:06 - marbling through the work of
01:07 - computational designer and artist Amanda
01:09 - gasai who collaborated with the studio
01:12 - nervous system on a set of marbling
01:16 - Infinity puzzles now if we're talking
01:18 - about taking ink and swirling around in
01:21 - water the first step might be to look at
01:23 - a fluid solver and this is something I
01:25 - did in my coding challenge fluid
01:27 - simulation and that was a bit of a mess
01:29 - and it's incredibly computationally
01:31 - expensive on Amanda gai digital marbling
01:34 - post she shows this wonderful webgl
01:37 - fluid simulation demo that she built
01:39 - back in 2017 she goes on to reference
01:42 - this incredible paper by Aubrey Jaffer
01:44 - and co-authors called mathematical
01:47 - marbling where Jaffer suggests that
01:50 - simple deformation formulas can produce
01:53 - a marbling effect without the need for
01:56 - such a computationally expensive full
01:59 - fluid solver this method is also
02:02 - outlined on jaffer's mathematical
02:04 - marbling website and that's the primary
02:06 - resource that I'm going to use as I
02:08 - begin to write the code for this
02:10 - challenge all right so this is how I'm
02:14 - going to approach the
02:17 - problem I'm going to consider my p5js
02:20 - canvas as a tray of
02:24 - water I then am going to drop a circular
02:28 - blob of ink into that water and I want
02:32 - the ink to have two
02:36 - properties the second property is a word
02:38 - I just learned I don't know a minute and
02:40 - a half ago and I don't remember how to
02:42 - spell it I m m i s c i b l
02:47 - e this ink should be both incompressible
02:50 - meaning its density never changes and
02:53 - the same amount of volume of ink will
02:55 - stay within this canvas regardless of
02:57 - what happens as well as imiss meaning if
03:01 - I were to pour another drop of ink over
03:05 - here they aren't going to mix instead
03:09 - one will push the other one out of the
03:11 - way so my first step will be just to
03:14 - create an object that is that drop of
03:16 - ink itself let's create a file called
03:19 - inc. JS for that
03:22 - class and the drop of ink should be
03:24 - created at an XY position with a given
03:27 - radius
03:30 - I'll write a function to draw it as a
03:33 - circle and then I'll make an array where
03:36 - I can add drops of ink just by clicking
03:39 - the
03:44 - mouse okay now I have a sketch with an
03:46 - array of drops when I click the mouse I
03:48 - add a new drop to that array and then in
03:50 - draw I show all of the
03:53 - drops whoops of course I forgot to put
03:56 - ink. JS in my HTML file
04:00 - and I forgot the this dot do
04:04 - do do Dot and there we go drops of ink
04:09 - so this is a nice start but there's no
04:11 - actual marbling happening I need that
04:14 - ink to be displaced when new ink arrives
04:18 - in other words imagine that I drop a
04:21 - blob of ink we label that a then that
04:26 - second blob B is also dropped
04:28 - overlapping part of it on top of
04:32 - a remember the ink is incompressible and
04:36 - the new ink is going to displace the old
04:40 - ink now this isn't exactly right but
04:43 - visually I'm going to get something like
04:44 - this and this area should be exactly the
04:48 - same as the original area of The Blob a
04:52 - there are two approaches I could take
04:54 - here one would be to actually look at
04:56 - all of the pixels inside of this circle
04:59 - and move each one individually to a new
05:02 - position essentially creating this new
05:04 - shape instead what I would like to do is
05:07 - consider this a closed shape and move
05:11 - all of the vertices of that enclosed
05:15 - shape according to the displacement from
05:18 - this new blob of ink this is
05:21 - accomplished with jaffer's formula given
05:24 - a point p a Vertex on that blob of ink
05:27 - and a new blob of ink a new paint drop
05:30 - of radius R centered at C that point P
05:33 - has to move so what direction should it
05:36 - move in well it should move according to
05:38 - a vector that points from the new blob
05:41 - of ink to that point P minus C but how
05:44 - far should it move well if that blob of
05:46 - ink is really big it should move farther
05:49 - that's accomplished by scaling the
05:50 - vector by R squar but how far away is
05:53 - that point if it was really really far
05:55 - in the first place maybe it shouldn't
05:56 - move very much if it was close maybe it
05:58 - moves a lot this is accomplished by
06:01 - dividing R 2 by the magnitude of that
06:03 - Vector P minus C so hopefully that gives
06:07 - you a bit of intuition as to how this
06:09 - formula works you can read the web page
06:12 - and the paper for more details let's
06:15 - write that formula on the
06:20 - board so P represents any pixel inside
06:26 - of a but for our purposes just the
06:29 - vertices around the perimeter of the
06:31 - circle and C
06:34 - represents the center of the new drop of
06:37 - ink and R represents the radius of that
06:41 - new drop of ink let's look at how I can
06:44 - apply this transformation formula in
06:47 - code so first thing first if I'm going
06:50 - to deform that Circle I can't just use
06:53 - P5 Circle function instead I need to
06:56 - draw it myself calculating all the
06:58 - points around the perimeter of the
07:00 - circle so let's add a vertices
07:03 - array and let's calculate all the
07:05 - vertices using polar to cartisian
07:07 - coordinate
07:09 - transformation and let's start with just
07:11 - a small number of vertices just
07:14 - 10 so if I'm counting from 0 to 10 I
07:18 - want those angles to go from 0 to 2
07:25 - pi so I'm iterating over the angles
07:28 - around the perimeter of the Circle I'm
07:30 - making a vector from the cosine and S of
07:34 - that angle scaling it by the radius and
07:36 - putting it into the array these points
07:38 - should also be offset by the original XY
07:42 - the center of that
07:44 - Circle I might not actually need to save
07:47 - that Center as separate X and Y
07:48 - properties but let's leave them that way
07:50 - for now and then instead of using the
07:52 - circle function I'll use begin shape end
07:54 - shape and iterate over all the vertices
08:02 - this is the same but you can see the
08:04 - circle looks more like a do decahedron
08:07 - is that when you have
08:10 - 10 because I'm only using 10 points
08:13 - let's make that a global constant I'll
08:16 - call it like Circle
08:19 - resolution that is much too long of a
08:22 - name let's call it Circle
08:25 - detail and now let's up that to 100
08:30 - and this looks much more like what we
08:32 - had before okay adding the first drop of
08:35 - ink there is currently one drop object
08:39 - in the array now when I add the second
08:41 - one I need to process all of the
08:45 - previous drops in the array before that
08:48 - second drop gets added to the array that
08:51 - needs to happen right
08:54 - here I'll call them
08:56 - other so the idea is that I create a
09:00 - drop then I marble all the other
09:03 - previous drops from that new drop and
09:05 - then put the new drop into the array so
09:08 - all I need to do is write that marble
09:10 - function with that
09:15 - formula so what is
09:17 - c that is oh a vector you know what ah
09:22 - okay let's actually have the center be a
09:26 - property of the drop I do need it after
09:29 - all but let's not let's have it also be
09:30 - a vector because that'll make the math
09:32 - stuff work
09:34 - better as I embark on implementing the
09:36 - formula in the code I will be making
09:38 - heavy use just as I did with the center
09:40 - variable of P5 Vector if the concept of
09:44 - vectors is unfamiliar to you if you've
09:45 - never used create Vector on the P5
09:48 - Vector functions I would suggest taking
09:50 - a look at my nature of code chapter on
09:52 - vectors as well as the accompanying
09:54 - videos but the quick version is a vector
09:57 - has an X and A Y component when I add
09:59 - two vectors together I'm adding both the
10:02 - x's and the Y's same with subtract uh
10:05 - the magnitude is the length and so on
10:07 - and so forth and then here I can just
10:10 - say add this do Center still working now
10:14 - I need to say take the center and add oh
10:18 - wait wait wait wait wait something is
10:20 - off here I'm writing the code inside of
10:23 - the drop class and I'm going to modify
10:27 - this object's vertices which is not what
10:30 - I wrote here because what I wrote here
10:33 - is I said hey the drop is going to
10:35 - modify the vertices of the
10:37 - other how to reconcile this who is
10:40 - marbling whom I think it's fine other is
10:43 - going to get marbled from the drop
10:46 - that's fine it's fine all the other
10:48 - drops get marbled from the new drop and
10:51 - now I can iterate over my own vertices
10:55 - and C is the other drop
11:00 - Center and P is this drops
11:06 - Center and what I'll do is I'll make a
11:10 - copy of it this way I can say p subc and
11:14 - that now p is now the vector P minus C
11:20 - which is in both of these places so I
11:23 - have C I now have P minus C and I have P
11:27 - minus C I have r which is uh uh R is a
11:33 - other do R and square root I could do so
11:37 - I I have all the components of the
11:38 - formula now that I need so P should be
11:42 - multiplied by and let's call this root
11:45 - is the square root of 1 + r is other. r
11:52 - r * R is R 2 / P magnitude time so let's
11:58 - let's put that in in a variable called
12:01 - M and in case you're wondering that's
12:04 - what these absolute value symbols mean
12:06 - that means the magnitude of the vector P
12:09 - minus
12:10 - C the square root of 1 + r^ 2 divided
12:17 - the magnitude of P minus c^ 2 startor to
12:19 - interrupt there actually is a P5 Vector
12:21 - function called mag squ and that would
12:23 - be better to use here so so you use that
12:25 - okay all right as you were so P which is
12:28 - actually T minus C should get multiplied
12:32 - by the
12:34 - root and then a c should get added to it
12:38 - and that
12:39 - is the new values of V let me try
12:43 - running
12:45 - this uh okay I've messed something up
12:47 - here okay this is a major mistake that I
12:50 - made what is p remember p is the point
12:55 - that I'm trying to displace it is all of
12:58 - the vert veres around the perimeter of
13:00 - the circle in my code I just set P equal
13:04 - to this. Center which is this point here
13:07 - that's not what I want to do although it
13:09 - shouldn't have totally disappeared but
13:10 - anyway let's fix
13:12 - that it's a copy of the vertices ah
13:15 - there we go whoa marbling
13:19 - amazing uh this is a little hard to see
13:22 - let's put some color in it or at least
13:24 - gray scale
13:30 - let's say no
13:33 - stroke and let's see what happens when
13:36 - instead of clicking the mouse to add
13:38 - drops of paint I do that
13:42 - automatically and let's put this whole
13:45 - idea of what it means to add a new drop
13:48 - into a
13:54 - function whoa that's a bit insane but it
13:57 - is working let's make the canvas a
14:00 - little bit
14:01 - bigger maybe I won't don't want the
14:03 - drops to be able to be so big oh I'm
14:06 - liking this better see it has that
14:08 - stonik quality to it this is a good
14:11 - start I need to certainly think about
14:13 - where this is going at some point the
14:16 - deformations are going to become so
14:18 - skewed that the quality starts to suffer
14:20 - the performance will eventually suffer
14:22 - because I'm never deleting any of them
14:24 - but I think there's a lot that you could
14:26 - create from this alone what if you
14:29 - add the drops of ink with some orderly
14:32 - geometric pattern or perhaps you think
14:35 - about other modes of interactivity maybe
14:38 - what if you were to drag the mouse
14:40 - around as you're adding ink so coming
14:43 - back to my diagram all that I've done so
14:46 - far is displace existing ink by dropping
14:50 - new Blobs of ink into the canvas but
14:53 - what if I were to take a comb over the
14:56 - canvas and wipe the ink how could I get
15:01 - a displacement from doing that and this
15:03 - is something that's referred to as a tin
15:07 - line what would that math be the formula
15:10 - for this is outlined here the simplest
15:13 - place for us to start would be to just
15:16 - think about a single vertical line going
15:19 - down the middle imagine taking a
15:21 - toothpick and dragging it over the ink
15:24 - let's look at this Formula F ofx of Y
15:33 - equals this is my new point for every XY
15:37 - vertex in any drop of ink I need to
15:40 - calculate a new XY if the toothpick the
15:45 - timeline is perfectly vertical there is
15:47 - no X displacement only a y displacement
15:51 - only y gets a new value let's look at
15:54 - how I might do that now in order to
15:57 - figure this out let's not randomly add
16:00 - all of this ink
16:02 - anymore instead in setup let's start by
16:05 - adding just one single
16:07 - blob and let me go back to a slightly
16:10 - smaller
16:11 - canvas great now I need a new function
16:15 - to add a Tim
16:18 - line and what do we need we just need
16:21 - that X displacement x l if you will so
16:24 - what does it mean to add a Tim line at x
16:29 - =
16:32 - 300 so we need a new function called
16:35 - time inside of the drop class that just
16:39 - receives the X location of that line
16:41 - that's going to cause the
16:43 - displacement and I'll just call it X
16:45 - here again I need to go through all of
16:48 - the vertices each vertex is going to get
16:50 - a new value v.x is just going to equal
16:53 - the original X then V doy is going to
16:57 - equal o what's Z
16:59 - well Z is a variable that I'm going to
17:01 - make up let's actually pass that in as
17:03 - an
17:04 - argument and looking at the image here
17:06 - there's actually two properties there's
17:09 - Z and C these are controlling the
17:13 - displacement and the sharpness of the
17:15 - bend so uh let's use those two
17:20 - variables and let's try just with 20 and
17:23 - one those are the first numbers from the
17:26 - image in the top left here so I'm
17:28 - calling tin line with an x value of 300
17:32 - a z of 20 a c of one then that gets
17:36 - passed into every drop and then we get
17:38 - those values
17:40 - here but the formula has u in it what is
17:46 - u u is 1 / 2 to the^ of 1 /
17:52 - C now that I have youu the new y equals
17:57 - the old y plus Z * U to the power of the
18:04 - absolute value of x - XL well what is
18:08 - that the absolute value of what is X x
18:11 - is v.x and I don't actually need this
18:14 - because v.x isn't changing but it's nice
18:16 - to kind of have that in there just to
18:18 - remind ourselves the absolute value of
18:20 - v.x minus X okay so this should be that
18:24 - formula for a vertical timeline let's
18:28 - see if it
18:29 - works huh yeah look at that now it
18:33 - doesn't look like much yet but let's add
18:36 - more
18:37 - drops so let's put in a whole bunch of
18:40 - drops that will all displace each other
18:42 - in the
18:44 - center so there's 10 of them now let's
18:47 - add that
18:50 - timeline there we go and let's play
18:52 - around with these values like give it a
18:53 - much higher C oh look at that we've made
18:57 - a lovely uh
18:59 - latte I I really need some coffee right
19:03 - now this I think would be interesting to
19:05 - animate so what if I actually took this
19:07 - timeline function and put it in draw I'm
19:10 - just going to only do it if the mouse is
19:14 - pressed oh okay that was way too much so
19:17 - let's turn Z all the way down to one
19:20 - because I want to apply the displacement
19:22 - over and over again there we go now I
19:25 - should be able to also apply that
19:27 - wherever the mouse X is
19:30 - right so if I click the mouse here yeah
19:32 - look at that
19:34 - whoa let's add a lot more
19:37 - drops that's too
19:40 - many you can see how I can start to make
19:42 - all sorts of interesting marbling
19:44 - patterns now you might be noticing
19:45 - there's some harshness to the geometry
19:47 - on the outer edges which is quite
19:49 - different in quality to the smoothness
19:51 - of the Contours towards the center that
19:54 - has to do with the amount of detail that
19:56 - I'm using to draw each particular shape
19:58 - the larger ones now have fewer vertices
20:01 - their vertices are spaced out they all
20:03 - have the same number of vertices but
20:05 - those vertices are spaced out more I
20:07 - could certainly consider upping this
20:09 - circle detail and we could see it's much
20:12 - more refined now so it's going to be
20:14 - kind of a performance tradeoff but right
20:16 - now it's working fine even with a much
20:18 - higher Circle detail already I'm really
20:21 - loving this pattern that I've got here
20:23 - just out of curiosity let's try putting
20:25 - the Blobs of ink in random spots rather
20:27 - than all in the
20:31 - Center maybe I should speed up the
20:34 - marbling can make the zv value higher to
20:36 - do that yeah but I have only now allowed
20:42 - myself to apply those tin lines
20:46 - vertically I could certainly do it
20:48 - horizontally I'll leave this as an
20:50 - exercise to you but horizontally would
20:52 - just be swapping the formulas here
20:54 - essentially applying that same
20:56 - transformation to the X and no
20:58 - transformation to the Y but what if I
21:01 - wanted to apply a tin line in any Vector
21:04 - Direction here is the answer under
21:08 - generalizations this looks a little bit
21:11 - intimidating in terms of the new math
21:13 - that might be applied here but I think
21:15 - we can handle it especially if we lean
21:18 - on chapter six of the nature of code
21:20 - where I look at a concept called scalar
21:23 - projection and the vector dot product
21:25 - that's what's being referenced here on
21:27 - this page let's make our own version of
21:30 - the
21:31 - diagram P represents any one of these
21:36 - vertex values on any of the Blobs of ink
21:39 - then I have a
21:42 - vector we'll call it m which is
21:46 - emanating from a point called B that is
21:49 - where the toothpick if you will will be
21:51 - dragged across the ink surface you can
21:55 - actually if we can get this to work an
21:57 - exercise for you to think of it more as
21:59 - a comb having multiple timelines all at
22:02 - once but let's not get ahead of
22:04 - ourselves here so the formula is the new
22:08 - P needs to equal the old P plus Z time U
22:16 - to the D Power Times the vector M so we
22:22 - have P that's this point we have M
22:25 - that's the vector the question is what
22:27 - is d
22:29 - well D is actually this
22:32 - distance this is called the normal a
22:36 - vector that's perpendicular to this line
22:38 - and we can actually get that Vector very
22:40 - easily by just rotating M by
22:44 - 90° and this is where scalar projection
22:47 - comes in if we think of this Vector P
22:50 - minus B we can actually compute D with
22:55 - the dotproduct
22:57 - D is equal to the vector this Vector
23:02 - which is p minus
23:04 - B dot this is different than multiply
23:08 - it's a special Vector operation known as
23:10 - the dotproduct
23:11 - dot
23:13 - n the normal so the this is the very
23:16 - first thing that we need to calculate so
23:19 - I went through this whole effort of
23:20 - writing the timeline function But
23:22 - ultimately I want to replace it with a
23:25 - timeline function that receives a vector
23:27 - instead of just a single X value so
23:29 - let's take that out and it should
23:31 - receive a vector as well as Z and C ah
23:34 - but it needs more than just a vector
23:36 - because this is the vector that I want
23:38 - to put in but it also needs a position
23:41 - where that Vector is originating B these
23:43 - are weird variable names maybe I need to
23:46 - rename them but I need that Vector which
23:48 - is M I'll call it V let's call it V and
23:52 - then I'm I'm going to use something
23:53 - called position which could actually
23:54 - just be an X and A Y let's do that and
23:57 - then Z and C so ultimately what I want
24:00 - to do is have a timeline let's just
24:03 - recreate the one that points down Okay
24:06 - so let's let's go back to what we had to
24:08 - see if we can recreate The Latte
24:11 - effect so I've got and we don't need so
24:14 - many of them we've got 20 Blobs of ink
24:18 - and I want to add a timeline that points
24:23 - down from the center uh and then I need
24:26 - to give it a z and a c we'll just start
24:29 - with 20 comma 1 and this would be
24:32 - exactly the
24:33 - same it's a little bit redundant what
24:35 - I'm doing here we're just going to pass
24:37 - all these same variables into the
24:40 - function in the drop class so now in the
24:43 - drop class comment out this version of
24:46 - the
24:48 - function and add a new one with the new
24:52 - arguments U is the same 1 / 2 the 1 /
24:56 - C's power this is now going to be
24:58 - different
24:59 - first I need to calculate D so what is p
25:03 - minus b b is this XY
25:06 - position and let's make a vector I'll
25:08 - just call it PB for p minus B and what
25:12 - do I do I take this vertex minus
25:17 - B so PB is now P minus B and D equals
25:23 - the dotproduct of PB Dot N oh oh I need
25:28 - n so what is n well V is this Vector M
25:33 - here n is that Vector rotated by
25:37 - 90° I'll make a copy of it I don't know
25:39 - if I need to do that and rotate it by a
25:42 - half pi so now I have d d is the
25:45 - dotproduct of the normal and P minus b v
25:49 - I need to displace what do I need to
25:51 - displace it by oh I've done something
25:54 - bad I've got a real serious issue here
25:57 - so I should call this M oh I don't like
26:00 - that so much but that's what it's called
26:03 - I'm going to use the notation of the
26:04 - formulas and then maybe I'll think about
26:06 - renaming the variables later but I can't
26:08 - use V in two places V is uh the variable
26:11 - that's the placeholder for every one of
26:13 - my vertices m is the vector that is the
26:17 - direction of the timeline I need to do
26:19 - this operation Z * U to the D power time
26:23 - M so the first thing is I just need the
26:25 - magnitude of the
26:26 - vector which is Z * U to the D power
26:32 - okay that's what the magnitude of the
26:34 - vector is going to be and then I need to
26:38 - add to p a copy of M that is scaled by
26:43 - that
26:44 - magnitude what's wrong here oh dot
26:46 - subtract I forgot the subtract I said it
26:49 - but I forgot it and then I have another
26:51 - error here P oh there's no P it's
26:55 - V oh look at that
26:59 - I chopped it in half oh D absolute value
27:04 - right right because that dot product
27:06 - could be negative so where did I get
27:09 - that wrong this has to be the absolute
27:11 - value of
27:13 - this ah look at that let's go back to
27:16 - like
27:17 - 16
27:19 - great now my timeline function instead
27:22 - of being only vertical or only
27:24 - horizontal can take any arbitrary Vector
27:29 - as well as a position now I I I did get
27:31 - that a little bit wrong I think I was
27:33 - talking about the position being exactly
27:36 - the point where the vector originates
27:38 - but it really is just any point along
27:40 - the line you can think of the Tim line
27:42 - as an infinite line and I just need to
27:44 - at least have one point along that line
27:46 - to know where it is not just the
27:47 - direction but where it is relative to
27:49 - the Blobs of ink so for example if I
27:52 - were to change the direction to
27:55 - horizontal I get that or even
27:58 - diagonal it it does need to be um a unit
28:02 - Vector so if I'm hardcoding in it I mean
28:05 - it worked anyway but technically um I've
28:08 - written it where it has to be of length
28:09 - one so I should say normalize and now
28:12 - that looks a little bit more correct
28:14 - let's try the following what if I were
28:17 - to drag the mouse to create a timeline
28:20 - so I'm going to say I'm going to have a
28:22 - vector called start and when I click the
28:25 - mouse start is a vector at the mouse
28:28 - Mouse
28:29 - location and then when I release the
28:31 - mouse I'll finish the vector and apply
28:34 - the
28:36 - transformation so I'll make a vector
28:38 - called
28:39 - end and I'll say end subtract the start
28:43 - end
28:44 - normalize and then I should be able to
28:47 - say tin line with that Vector end uh at
28:51 - Mouse X Mouse y with some uh Z and C so
28:56 - I'll just use the numbers I've been
28:57 - using Medan 16 all right let's see if
28:59 - this works drag the mouse o what did I
29:02 - get wrong oh I forgot that I had this in
29:05 - here still that has to go away that's no
29:07 - longer relevant okay it's a little
29:11 - unfortunate that I don't see it while
29:12 - it's happening but look at that now I
29:14 - can arbitrarily deform it okay this
29:18 - challenge is done I have developed the
29:20 - building blocks a class for a initial
29:24 - drop of ink the functionality for a new
29:28 - drop of ink to displace a previous drop
29:31 - the math for a timeline to Marble that
29:35 - ink along a vector path and I think
29:38 - that's enough for this video my
29:41 - challenge to you is even with just these
29:44 - building blocks how might you think
29:47 - about choosing a color palette for your
29:49 - drops of ink how might you place the
29:52 - drops of ink in a regular or geometric
29:55 - pattern as well as apply the tin lines
29:59 - in a particular pattern like tines
30:02 - moving through a field of view in
30:04 - clockwise circular motions or maybe arcs
30:08 - of increasing radius there are also
30:11 - other kinds of displacement formulas
30:14 - that you could apply like this vortex
30:16 - one I think that I've given you the
30:18 - building blocks to go through and read
30:20 - further and apply some of these
30:22 - additional techniques what about
30:25 - attempting this Serpentine marbling like
30:28 - outlined here you might also look at how
30:31 - Jaffer explains that paint drops can be
30:34 - raster rendered meaning instead of
30:37 - displacing the individual vertices of a
30:39 - shape what about iterating over all the
30:41 - pixels of a canvas and displacing those
30:44 - pixels based on an algorithm you might
30:46 - even then move Beyond abstract geometry
30:49 - and apply this technique to photographic
30:51 - images or real-time video I think
30:54 - there's also lots of creative ways you
30:55 - could animate the ink being added to the
30:57 - cam maybe it's not being added all at
30:59 - once but slowly over time how could you
31:02 - interact with the canvas Beyond just the
31:04 - mouse through gesture or other means
31:07 - also take a look at the link to the code
31:09 - that's in this video's description I
31:11 - will go and revisit it rename some of
31:13 - the variables annotate and comment it to
31:16 - make it a little bit easier for you to
31:17 - follow and match it with the
31:19 - mathematical descriptions that are in
31:21 - the marbling paper I I say this all the
31:24 - time with the coding challenges that I'm
31:25 - curious to see what you you make but
31:27 - this one I actually actually like I
31:28 - don't even know I I barely scratched the
31:31 - service of this particular algorithm so
31:33 - please if you make something based on
31:35 - this mathematical marbl en coding
31:37 - challenge share it with me in the
31:38 - passenger showcase uh let me know your
31:41 - questions in the comments or things that
31:42 - I got wrong or missed this is definitely
31:45 - one that I'm going to want to come back
31:46 - and revisit on a live stream and look at
31:49 - some of your creations and try to make
31:50 - more stuff myself so have a great day
31:53 - thanks for watching this coding
31:54 - Challenge and see you next time on the
31:56 - coding trade
32:03 - ch
32:07 - [Music]

Cleaned transcript:

IM missible imiss what does that mean I don't know that word not forming a homogeneous mixture got it today I am going to tackle a p5js simulation of the artistic process known as paper marbling this is an ancient process it involves water taking ink or paint and floating it on top of the water and then applying that to fabric paper Ceramics and all sorts of incredible and beautiful patterns emerge the earliest accounts of marbling date back thousands of years to Japan where the process was known as suminagashi a wonderful reference is the 19th century Japanese artist tokutaro yagi who developed a method using a piece of bamboo to stir the colors new marbling techniques were developed throughout the Middle East and Europe and continued to this day I encountered the concept of marbling through the work of computational designer and artist Amanda gasai who collaborated with the studio nervous system on a set of marbling Infinity puzzles now if we're talking about taking ink and swirling around in water the first step might be to look at a fluid solver and this is something I did in my coding challenge fluid simulation and that was a bit of a mess and it's incredibly computationally expensive on Amanda gai digital marbling post she shows this wonderful webgl fluid simulation demo that she built back in 2017 she goes on to reference this incredible paper by Aubrey Jaffer and coauthors called mathematical marbling where Jaffer suggests that simple deformation formulas can produce a marbling effect without the need for such a computationally expensive full fluid solver this method is also outlined on jaffer's mathematical marbling website and that's the primary resource that I'm going to use as I begin to write the code for this challenge all right so this is how I'm going to approach the problem I'm going to consider my p5js canvas as a tray of water I then am going to drop a circular blob of ink into that water and I want the ink to have two properties the second property is a word I just learned I don't know a minute and a half ago and I don't remember how to spell it I m m i s c i b l e this ink should be both incompressible meaning its density never changes and the same amount of volume of ink will stay within this canvas regardless of what happens as well as imiss meaning if I were to pour another drop of ink over here they aren't going to mix instead one will push the other one out of the way so my first step will be just to create an object that is that drop of ink itself let's create a file called inc. JS for that class and the drop of ink should be created at an XY position with a given radius I'll write a function to draw it as a circle and then I'll make an array where I can add drops of ink just by clicking the mouse okay now I have a sketch with an array of drops when I click the mouse I add a new drop to that array and then in draw I show all of the drops whoops of course I forgot to put ink. JS in my HTML file and I forgot the this dot do do do Dot and there we go drops of ink so this is a nice start but there's no actual marbling happening I need that ink to be displaced when new ink arrives in other words imagine that I drop a blob of ink we label that a then that second blob B is also dropped overlapping part of it on top of a remember the ink is incompressible and the new ink is going to displace the old ink now this isn't exactly right but visually I'm going to get something like this and this area should be exactly the same as the original area of The Blob a there are two approaches I could take here one would be to actually look at all of the pixels inside of this circle and move each one individually to a new position essentially creating this new shape instead what I would like to do is consider this a closed shape and move all of the vertices of that enclosed shape according to the displacement from this new blob of ink this is accomplished with jaffer's formula given a point p a Vertex on that blob of ink and a new blob of ink a new paint drop of radius R centered at C that point P has to move so what direction should it move in well it should move according to a vector that points from the new blob of ink to that point P minus C but how far should it move well if that blob of ink is really big it should move farther that's accomplished by scaling the vector by R squar but how far away is that point if it was really really far in the first place maybe it shouldn't move very much if it was close maybe it moves a lot this is accomplished by dividing R 2 by the magnitude of that Vector P minus C so hopefully that gives you a bit of intuition as to how this formula works you can read the web page and the paper for more details let's write that formula on the board so P represents any pixel inside of a but for our purposes just the vertices around the perimeter of the circle and C represents the center of the new drop of ink and R represents the radius of that new drop of ink let's look at how I can apply this transformation formula in code so first thing first if I'm going to deform that Circle I can't just use P5 Circle function instead I need to draw it myself calculating all the points around the perimeter of the circle so let's add a vertices array and let's calculate all the vertices using polar to cartisian coordinate transformation and let's start with just a small number of vertices just 10 so if I'm counting from 0 to 10 I want those angles to go from 0 to 2 pi so I'm iterating over the angles around the perimeter of the Circle I'm making a vector from the cosine and S of that angle scaling it by the radius and putting it into the array these points should also be offset by the original XY the center of that Circle I might not actually need to save that Center as separate X and Y properties but let's leave them that way for now and then instead of using the circle function I'll use begin shape end shape and iterate over all the vertices this is the same but you can see the circle looks more like a do decahedron is that when you have 10 because I'm only using 10 points let's make that a global constant I'll call it like Circle resolution that is much too long of a name let's call it Circle detail and now let's up that to 100 and this looks much more like what we had before okay adding the first drop of ink there is currently one drop object in the array now when I add the second one I need to process all of the previous drops in the array before that second drop gets added to the array that needs to happen right here I'll call them other so the idea is that I create a drop then I marble all the other previous drops from that new drop and then put the new drop into the array so all I need to do is write that marble function with that formula so what is c that is oh a vector you know what ah okay let's actually have the center be a property of the drop I do need it after all but let's not let's have it also be a vector because that'll make the math stuff work better as I embark on implementing the formula in the code I will be making heavy use just as I did with the center variable of P5 Vector if the concept of vectors is unfamiliar to you if you've never used create Vector on the P5 Vector functions I would suggest taking a look at my nature of code chapter on vectors as well as the accompanying videos but the quick version is a vector has an X and A Y component when I add two vectors together I'm adding both the x's and the Y's same with subtract uh the magnitude is the length and so on and so forth and then here I can just say add this do Center still working now I need to say take the center and add oh wait wait wait wait wait something is off here I'm writing the code inside of the drop class and I'm going to modify this object's vertices which is not what I wrote here because what I wrote here is I said hey the drop is going to modify the vertices of the other how to reconcile this who is marbling whom I think it's fine other is going to get marbled from the drop that's fine it's fine all the other drops get marbled from the new drop and now I can iterate over my own vertices and C is the other drop Center and P is this drops Center and what I'll do is I'll make a copy of it this way I can say p subc and that now p is now the vector P minus C which is in both of these places so I have C I now have P minus C and I have P minus C I have r which is uh uh R is a other do R and square root I could do so I I have all the components of the formula now that I need so P should be multiplied by and let's call this root is the square root of 1 + r is other. r r * R is R 2 / P magnitude time so let's let's put that in in a variable called M and in case you're wondering that's what these absolute value symbols mean that means the magnitude of the vector P minus C the square root of 1 + r^ 2 divided the magnitude of P minus c^ 2 startor to interrupt there actually is a P5 Vector function called mag squ and that would be better to use here so so you use that okay all right as you were so P which is actually T minus C should get multiplied by the root and then a c should get added to it and that is the new values of V let me try running this uh okay I've messed something up here okay this is a major mistake that I made what is p remember p is the point that I'm trying to displace it is all of the vert veres around the perimeter of the circle in my code I just set P equal to this. Center which is this point here that's not what I want to do although it shouldn't have totally disappeared but anyway let's fix that it's a copy of the vertices ah there we go whoa marbling amazing uh this is a little hard to see let's put some color in it or at least gray scale let's say no stroke and let's see what happens when instead of clicking the mouse to add drops of paint I do that automatically and let's put this whole idea of what it means to add a new drop into a function whoa that's a bit insane but it is working let's make the canvas a little bit bigger maybe I won't don't want the drops to be able to be so big oh I'm liking this better see it has that stonik quality to it this is a good start I need to certainly think about where this is going at some point the deformations are going to become so skewed that the quality starts to suffer the performance will eventually suffer because I'm never deleting any of them but I think there's a lot that you could create from this alone what if you add the drops of ink with some orderly geometric pattern or perhaps you think about other modes of interactivity maybe what if you were to drag the mouse around as you're adding ink so coming back to my diagram all that I've done so far is displace existing ink by dropping new Blobs of ink into the canvas but what if I were to take a comb over the canvas and wipe the ink how could I get a displacement from doing that and this is something that's referred to as a tin line what would that math be the formula for this is outlined here the simplest place for us to start would be to just think about a single vertical line going down the middle imagine taking a toothpick and dragging it over the ink let's look at this Formula F ofx of Y equals this is my new point for every XY vertex in any drop of ink I need to calculate a new XY if the toothpick the timeline is perfectly vertical there is no X displacement only a y displacement only y gets a new value let's look at how I might do that now in order to figure this out let's not randomly add all of this ink anymore instead in setup let's start by adding just one single blob and let me go back to a slightly smaller canvas great now I need a new function to add a Tim line and what do we need we just need that X displacement x l if you will so what does it mean to add a Tim line at x = 300 so we need a new function called time inside of the drop class that just receives the X location of that line that's going to cause the displacement and I'll just call it X here again I need to go through all of the vertices each vertex is going to get a new value v.x is just going to equal the original X then V doy is going to equal o what's Z well Z is a variable that I'm going to make up let's actually pass that in as an argument and looking at the image here there's actually two properties there's Z and C these are controlling the displacement and the sharpness of the bend so uh let's use those two variables and let's try just with 20 and one those are the first numbers from the image in the top left here so I'm calling tin line with an x value of 300 a z of 20 a c of one then that gets passed into every drop and then we get those values here but the formula has u in it what is u u is 1 / 2 to the^ of 1 / C now that I have youu the new y equals the old y plus Z * U to the power of the absolute value of x XL well what is that the absolute value of what is X x is v.x and I don't actually need this because v.x isn't changing but it's nice to kind of have that in there just to remind ourselves the absolute value of v.x minus X okay so this should be that formula for a vertical timeline let's see if it works huh yeah look at that now it doesn't look like much yet but let's add more drops so let's put in a whole bunch of drops that will all displace each other in the center so there's 10 of them now let's add that timeline there we go and let's play around with these values like give it a much higher C oh look at that we've made a lovely uh latte I I really need some coffee right now this I think would be interesting to animate so what if I actually took this timeline function and put it in draw I'm just going to only do it if the mouse is pressed oh okay that was way too much so let's turn Z all the way down to one because I want to apply the displacement over and over again there we go now I should be able to also apply that wherever the mouse X is right so if I click the mouse here yeah look at that whoa let's add a lot more drops that's too many you can see how I can start to make all sorts of interesting marbling patterns now you might be noticing there's some harshness to the geometry on the outer edges which is quite different in quality to the smoothness of the Contours towards the center that has to do with the amount of detail that I'm using to draw each particular shape the larger ones now have fewer vertices their vertices are spaced out they all have the same number of vertices but those vertices are spaced out more I could certainly consider upping this circle detail and we could see it's much more refined now so it's going to be kind of a performance tradeoff but right now it's working fine even with a much higher Circle detail already I'm really loving this pattern that I've got here just out of curiosity let's try putting the Blobs of ink in random spots rather than all in the Center maybe I should speed up the marbling can make the zv value higher to do that yeah but I have only now allowed myself to apply those tin lines vertically I could certainly do it horizontally I'll leave this as an exercise to you but horizontally would just be swapping the formulas here essentially applying that same transformation to the X and no transformation to the Y but what if I wanted to apply a tin line in any Vector Direction here is the answer under generalizations this looks a little bit intimidating in terms of the new math that might be applied here but I think we can handle it especially if we lean on chapter six of the nature of code where I look at a concept called scalar projection and the vector dot product that's what's being referenced here on this page let's make our own version of the diagram P represents any one of these vertex values on any of the Blobs of ink then I have a vector we'll call it m which is emanating from a point called B that is where the toothpick if you will will be dragged across the ink surface you can actually if we can get this to work an exercise for you to think of it more as a comb having multiple timelines all at once but let's not get ahead of ourselves here so the formula is the new P needs to equal the old P plus Z time U to the D Power Times the vector M so we have P that's this point we have M that's the vector the question is what is d well D is actually this distance this is called the normal a vector that's perpendicular to this line and we can actually get that Vector very easily by just rotating M by 90° and this is where scalar projection comes in if we think of this Vector P minus B we can actually compute D with the dotproduct D is equal to the vector this Vector which is p minus B dot this is different than multiply it's a special Vector operation known as the dotproduct dot n the normal so the this is the very first thing that we need to calculate so I went through this whole effort of writing the timeline function But ultimately I want to replace it with a timeline function that receives a vector instead of just a single X value so let's take that out and it should receive a vector as well as Z and C ah but it needs more than just a vector because this is the vector that I want to put in but it also needs a position where that Vector is originating B these are weird variable names maybe I need to rename them but I need that Vector which is M I'll call it V let's call it V and then I'm I'm going to use something called position which could actually just be an X and A Y let's do that and then Z and C so ultimately what I want to do is have a timeline let's just recreate the one that points down Okay so let's let's go back to what we had to see if we can recreate The Latte effect so I've got and we don't need so many of them we've got 20 Blobs of ink and I want to add a timeline that points down from the center uh and then I need to give it a z and a c we'll just start with 20 comma 1 and this would be exactly the same it's a little bit redundant what I'm doing here we're just going to pass all these same variables into the function in the drop class so now in the drop class comment out this version of the function and add a new one with the new arguments U is the same 1 / 2 the 1 / C's power this is now going to be different first I need to calculate D so what is p minus b b is this XY position and let's make a vector I'll just call it PB for p minus B and what do I do I take this vertex minus B so PB is now P minus B and D equals the dotproduct of PB Dot N oh oh I need n so what is n well V is this Vector M here n is that Vector rotated by 90° I'll make a copy of it I don't know if I need to do that and rotate it by a half pi so now I have d d is the dotproduct of the normal and P minus b v I need to displace what do I need to displace it by oh I've done something bad I've got a real serious issue here so I should call this M oh I don't like that so much but that's what it's called I'm going to use the notation of the formulas and then maybe I'll think about renaming the variables later but I can't use V in two places V is uh the variable that's the placeholder for every one of my vertices m is the vector that is the direction of the timeline I need to do this operation Z * U to the D power time M so the first thing is I just need the magnitude of the vector which is Z * U to the D power okay that's what the magnitude of the vector is going to be and then I need to add to p a copy of M that is scaled by that magnitude what's wrong here oh dot subtract I forgot the subtract I said it but I forgot it and then I have another error here P oh there's no P it's V oh look at that I chopped it in half oh D absolute value right right because that dot product could be negative so where did I get that wrong this has to be the absolute value of this ah look at that let's go back to like 16 great now my timeline function instead of being only vertical or only horizontal can take any arbitrary Vector as well as a position now I I I did get that a little bit wrong I think I was talking about the position being exactly the point where the vector originates but it really is just any point along the line you can think of the Tim line as an infinite line and I just need to at least have one point along that line to know where it is not just the direction but where it is relative to the Blobs of ink so for example if I were to change the direction to horizontal I get that or even diagonal it it does need to be um a unit Vector so if I'm hardcoding in it I mean it worked anyway but technically um I've written it where it has to be of length one so I should say normalize and now that looks a little bit more correct let's try the following what if I were to drag the mouse to create a timeline so I'm going to say I'm going to have a vector called start and when I click the mouse start is a vector at the mouse Mouse location and then when I release the mouse I'll finish the vector and apply the transformation so I'll make a vector called end and I'll say end subtract the start end normalize and then I should be able to say tin line with that Vector end uh at Mouse X Mouse y with some uh Z and C so I'll just use the numbers I've been using Medan 16 all right let's see if this works drag the mouse o what did I get wrong oh I forgot that I had this in here still that has to go away that's no longer relevant okay it's a little unfortunate that I don't see it while it's happening but look at that now I can arbitrarily deform it okay this challenge is done I have developed the building blocks a class for a initial drop of ink the functionality for a new drop of ink to displace a previous drop the math for a timeline to Marble that ink along a vector path and I think that's enough for this video my challenge to you is even with just these building blocks how might you think about choosing a color palette for your drops of ink how might you place the drops of ink in a regular or geometric pattern as well as apply the tin lines in a particular pattern like tines moving through a field of view in clockwise circular motions or maybe arcs of increasing radius there are also other kinds of displacement formulas that you could apply like this vortex one I think that I've given you the building blocks to go through and read further and apply some of these additional techniques what about attempting this Serpentine marbling like outlined here you might also look at how Jaffer explains that paint drops can be raster rendered meaning instead of displacing the individual vertices of a shape what about iterating over all the pixels of a canvas and displacing those pixels based on an algorithm you might even then move Beyond abstract geometry and apply this technique to photographic images or realtime video I think there's also lots of creative ways you could animate the ink being added to the cam maybe it's not being added all at once but slowly over time how could you interact with the canvas Beyond just the mouse through gesture or other means also take a look at the link to the code that's in this video's description I will go and revisit it rename some of the variables annotate and comment it to make it a little bit easier for you to follow and match it with the mathematical descriptions that are in the marbling paper I I say this all the time with the coding challenges that I'm curious to see what you you make but this one I actually actually like I don't even know I I barely scratched the service of this particular algorithm so please if you make something based on this mathematical marbl en coding challenge share it with me in the passenger showcase uh let me know your questions in the comments or things that I got wrong or missed this is definitely one that I'm going to want to come back and revisit on a live stream and look at some of your creations and try to make more stuff myself so have a great day thanks for watching this coding Challenge and see you next time on the coding trade ch
