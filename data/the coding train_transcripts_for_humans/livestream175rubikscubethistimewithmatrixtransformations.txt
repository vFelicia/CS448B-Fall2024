With timestamps:

00:00 - [Music]
02:20 - good morning there was a bit of a little
02:22 - technical hiccup there I don't know why
02:24 - but open broadcast studio likes to crash
02:27 - when I switch from that wallpaper to me
02:31 - on camera talking to you so I'm hoping
02:34 - that everything is working kind of
02:37 - keeping an eye on things here looking at
02:40 - the chat I am here out of the black hole
02:45 - which is me to simulate a Rubik's Cube
02:49 - in processing I have been thinking about
02:52 - this do you know about this these images
02:54 - of the black hole really astounding
02:56 - really amazing beautiful stuff I hope
02:58 - that maybe I could do some type of video
03:00 - or coding challenge or simulation about
03:02 - it I didn't get a chance to kind of
03:05 - watch the live stream although I hear
03:06 - it's kind of wrapping up just about
03:07 - right now so everybody welcome from just
03:09 - seeing the first images of a black hole
03:11 - to watching a completely inept awkward
03:14 - person on the internet try to program a
03:17 - Rubik's Cube in-processing hi alright
03:22 - people are saying hello to me I see
03:24 - Simon is typing so I'm gonna assume that
03:26 - I am here talking to you live on the
03:29 - Internet
03:30 - this is the coding train my name is
03:33 - Daniel Schiffman thank you to the
03:36 - sponsor of the coding train livestreams
03:37 - brilliant org to go to brilliant org
03:39 - slash coding train you can sign up to
03:41 - find lots of courses and puzzles and
03:44 - practice problems around all sorts of
03:46 - topics from computer science and
03:48 - mathematics
03:48 - and various things I will come back and
03:50 - look at today's daily challenge from
03:51 - brilliant org a little later in the
03:53 - livestream and see if we can solve it
03:54 - live on air do a light ray simulation
03:59 - that's a good idea
04:01 - so if you have you know I guess I'm
04:04 - gonna be lagging behind if I were just
04:06 - if I could really just be in the moment
04:09 - I would just right here open up a code
04:12 - editor make some kind of black hole
04:14 - simulation but no I have to I have an
04:18 - obsession with this thing called a
04:20 - Rubik's Cube and I must get a little
04:22 - further than I did last week and that's
04:24 - what I'm gonna do today so I am going to
04:26 - do an take them all again make another
04:28 - attempt at programming this Rubik's Cube
04:31 - in processing with an eye towards maybe
04:33 - someday looking at how I might use a
04:36 - genetic algorithm to try to evolve a
04:38 - sequence of moves to solve the rubik's
04:41 - cube for a given configuration perhaps
04:43 - even use some type of reinforcement
04:45 - learning or maybe some type of algorithm
04:48 - with tensorflow j/s perhaps to see if I
04:52 - can get make a guess so which move might
04:56 - be the best towards a solution for any
04:58 - given state oh so many possibilities I'm
05:01 - sure none of that will work particularly
05:03 - well but somebody watching this channel
05:05 - will be inspired to take my ideas
05:08 - further and do something with them so
05:12 - good good news for you watching I came
05:15 - in today with my cube solved already I'm
05:17 - getting pretty good at it like the the
05:20 - parts that I know how to do I can do
05:22 - quite fast for me I mean you know we're
05:25 - not talking less than five minutes here
05:27 - or anything yet but I still need to I
05:30 - need more time in the day to practice my
05:32 - cubing cuz I am a u Qbert you already
05:36 - here first I have a u cuber I have water
05:41 - a little bit of coffee which people in
05:43 - the comments like to write to me I drink
05:45 - too much please less coffee you know I
05:47 - didn't actually drink coffee for years
05:49 - and most of my videos where I'm much too
05:51 - hyper I was not having coffee of course
05:53 - now I am having coffee because I had to
05:54 - get up at 6:00 a.m. this morning
05:59 - very early day and I was at a little
06:01 - league game last night quite late
06:04 - so 7:30 p.m. and it was raining and I
06:07 - was freezing it was very exciting was a
06:09 - tie game five to five go blue
06:12 - all right go o's shifting face others
06:19 - all right
06:20 - hi Mohammed from India where are you now
06:25 - asks dear bomb I am in New York City at
06:28 - New York University at Tisch School of
06:30 - the Arts in downtown Manhattan near
06:33 - Washington Square Park
06:35 - my full-time day job which a lot of the
06:37 - stuff that I do on this channel relates
06:39 - to is teaching at a program called
06:41 - ITP which is two-year master's program
06:43 - there was also a new as of this year
06:46 - undergraduate program called ima or
06:48 - interactive media arts you can apply if
06:51 - you're in high school and thinking about
06:52 - a place to go to learn this is probably
06:59 - one of the more practical useful things
07:00 - that I've done there's so much here in
07:02 - what I'm about to do to learn about
07:05 - computer graphics multi-dimensional
07:07 - arrays matrix transformations oh this is
07:13 - gonna exciting and also I really want to
07:14 - see if I could get the code somebody
07:16 - suggested putting the coding train logo
07:17 - on one of the cue bees did you know that
07:19 - these little things are called cubies
07:22 - one of my new favorite words okay
07:24 - now before I get started I wanted to
07:27 - highlight a community contribution that
07:30 - came in recently and this is unlike any
07:32 - community contribution I have seen
07:34 - before and so this is not one of my
07:37 - typical community contribution which you
07:40 - might find say if I go to Ruby's cube
07:43 - part one and scroll down here and see a
07:45 - couple other versions of the Rubik's
07:47 - Cube hey let's look at this p5.js one
07:49 - from xx Novak's let's see what happens
07:53 - here
07:54 - oh wow well toggle access stop whoa cube
08:01 - size four five look at this rotation
08:05 - access common I don't know what's going
08:08 - on but this is cool Wow
08:11 - all right great work
08:13 - xx knoppix that is really cool all right
08:16 - and then this one rubik's cube using
08:17 - processing 3 so this is i probably
08:21 - should look at this because i'm sure
08:23 - it's doing smarter things that I did in
08:28 - mine so thank you but that's not the
08:30 - community contribution I wanted to
08:32 - highlight by the way if you want to
08:33 - submit a version of any of my any of
08:35 - your own code version of any of the
08:37 - challenges that I've done you can add
08:40 - your own version and go to any challenge
08:41 - page there should be some links on how
08:43 - to do this and that's not the easiest
08:46 - thing in the world it's a little
08:47 - confusing and tricky if you get stuck
08:49 - I'm here to help members of the
08:51 - community here to help go to the github
08:52 - repository file an issue asking for help
08:54 - now this is what I want to talk about I
08:57 - think I need my ukulele for this Oh my
09:00 - invisible laptop is quite visible what
09:04 - what's like oh this is the water cup
09:06 - alrighty my ukulele this one requires
09:08 - the ukulele so I have this video series
09:12 - on git and github which I probably need
09:14 - to revisit and redo because I use the
09:16 - github website so much and so much has
09:20 - changed it's just a lot of its
09:22 - out-of-date and people watching the
09:28 - tutorials will often file an issue or
09:31 - make a pull request to this Rainbow poem
09:34 - github repository as part of the lessons
09:36 - of how to work with git and github and
09:38 - I've been stopping myself from
09:39 - explaining more about that and recently
09:42 - came in a poem an entire poem by Kyle R
09:47 - Conway which summarizes the entire video
09:52 - series I'm pretty sure this moves along
09:55 - following the video series pretty
09:57 - precisely so I think this needs to be
10:02 - set to song unfortunately I am not
10:06 - prepared for this so I have not written
10:08 - a song I've read it I have not practiced
10:10 - this so probably what would be really
10:13 - someone from the community with musical
10:15 - talent perhaps could put this tune
10:18 - suggest some chords that are pretty easy
10:22 - to play on the ukulele I like see Jesus
10:25 - seven and a half but I can can do what
10:27 - like a c7 I can do like some I can do
10:31 - some other chords
10:33 - that's like a anyway whatever I can
10:37 - stretch her this and we can make this
10:38 - into a song like this I I need help I'm
11:41 - not gonna torture you anymore people are
11:43 - here for the Rubik's Cube last week was
11:46 - I think my most watched livestream ever
11:50 - even more watched than when
11:51 - smartereveryday
11:52 - came into the chat I'm speaking for a
11:55 - series and started trying to get
11:56 - everybody to come watch the Rubik's Cube
11:58 - on its own the popularity of youtubers I
12:02 - know that there were there were a lot of
12:04 - people watching last week and now I have
12:05 - lost all of those viewers thank you very
12:08 - much
12:12 - so let's let's work on this song we'll
12:16 - make a folksy music video about git and
12:19 - github but let's move on to the Rubik's
12:21 - Cube alright I think I want to try
12:23 - something a little bit weird which is
12:26 - that I think if I press button 3 here
12:31 - yes you see that a little behind the
12:34 - scenes were a little behind the scenes
12:35 - here on the coding train and what you're
12:38 - seeing now behind the scenes
12:39 - is me standing in front of the actual
12:41 - green-screen you'll also see a very
12:44 - high-tech captain disillusioned would be
12:46 - so proud of my very high deck please
12:49 - everybody screenshot this and send this
12:51 - to Captain disillusion I'm sorry I'm
12:54 - obsessed with cats of disillusion did
12:56 - you see the new series about framerate
12:58 - and aspect ratio they're so so so so
13:02 - good oh I wish I could be I wish I had
13:05 - that talent and ability but I get my own
13:07 - thing it's my own thing it's fine I do
13:09 - what I do everybody does what they do I
13:11 - I just have to be I am Who I am I'll be
13:14 - well be I've got a ukulele that I play
13:16 - very poorly anyway look high-tech
13:19 - solution for invisible laptop it's not
13:22 - that I'm trying to hide the laptop from
13:23 - you it's just that it was like too much
13:24 - stuff so anyway so what I think that I'm
13:28 - gonna do is I'm gonna introduce this
13:32 - topic of the coding challenge today
13:34 - about the Rubik's Cube and let me come
13:35 - back to this here for a second so but
13:37 - but I'm gonna leave the green behind me
13:39 - because this is going to be used later
13:42 - in an edited version of the challenge in
13:45 - which case and and then I'll add like
13:48 - clips of some of my failed attempts in
13:50 - last week's livestream maybe behind me
13:53 - as I'm talking I won't add those machiya
13:56 - Blanchette who is the editor for the
13:57 - coding train will do so so that's my
14:01 - plan so if you will if you will humor me
14:07 - with this I would appreciate it I've
14:09 - actually been doing this quite a bit
14:10 - recently for patrons and YouTube members
14:13 - I've been doing some live streams of
14:15 - recording sessions with just green
14:17 - behind me because I'm making a new
14:19 - series about working with data and api's
14:21 - coming out in May or June whole bunch of
14:25 - videos that you have no idea I'm making
14:27 - because I'm not doing them in a live
14:28 - stream which is crazy but join patreon
14:30 - join YouTube membership if you want to
14:32 - get a peek into that okay but the videos
14:35 - will be out water
14:44 - okay here we go
14:52 - okay I think we got a relaxer the way I
15:03 - relax I need something more Zen like
15:09 - [Music]
15:20 - things would instruments and bells that
15:24 - shakey guided meditation can play I like
15:27 - to relax by reading seventy one thousand
15:32 - and four forty eight thousand nine
15:34 - hundred seventy three sixty two thousand
15:38 - and fifty four one one it's twelve
15:58 - thousand two hundred and twenty-two feel
16:02 - Zen feel relaxed I feel ready to tackle
16:05 - what has been incredibly difficult for
16:07 - me to make a Rubik's Cube simulation
16:10 - Japanese flute yes thank you I'll look
16:15 - for some new sound effects and stuff
16:17 - okay the whole pie is way too loud sorry
16:27 - about that everyone
16:28 - it was really loud right I don't know
16:30 - why the volume is so loud right now
16:36 - hello and welcome to part 2 of my
16:39 - Rubik's Cube challenge now if I'm being
16:41 - honest with you this is actually the
16:43 - second time I'm trying to make part 2 of
16:45 - the Rubik's Cube challenge I went down a
16:48 - very strange road
16:49 - road paved with all sorts of problems
16:51 - and bugs and strange ways of coding
16:55 - things with awkward switch statements
16:57 - and things and I did this over a three
17:01 - hour livestream and rather than try to
17:05 - actually release that as an edited
17:08 - version of the next step of the Rubik's
17:09 - Cube I'm just kind of showing you bits
17:11 - and pieces if it behind me
17:13 - sped through and you can go check me let
17:17 - me do this again let me do let's do this
17:19 - again hello and welcome to part 2 of the
17:30 - Rubik's Cube coding challenge in this
17:32 - version of the coding challenge I just
17:35 - want to take my existing rubik's cube
17:37 - simulations and be able to make some
17:39 - turns i want to shift the faces of one
17:42 - side of the cube e's like the yellow
17:43 - faces to turn maybe clockwise and be on
17:46 - the other side and everything follow
17:47 - suit so I'm gonna do that with matrix
17:50 - transformations here's the thing I have
17:53 - to be honest with you my second attempt
17:55 - at doing this I did a previous
17:57 - livestream where I went down a different
17:59 - road and I was keeping track of arrays
18:01 - and different arrays and trying to ship
18:03 - things and have like custom hard-coded
18:05 - things for every possible way the
18:06 - Rubik's Cube could turn and it was a
18:08 - total disaster actually got it to work
18:11 - you can see it spinning around and
18:12 - working here right now but I I had some
18:15 - excellent comments most notably bought
18:18 - from Michael Rafael Panna here I can
18:24 - actually this is this is what I'm
18:27 - looking for the comment I'm looking at
18:28 - but I'm gonna keep the green screen here
18:29 - I had some excellent comments most
18:33 - notably from Michael Rafael Panganiban
18:37 - Panganiban I had some really useful
18:40 - suggestions most notably from Michael
18:42 - Raphael Panganiban who suggested that I
18:45 - use matrix transformations and I'm gonna
18:47 - try this again I'm gonna try to really
18:49 - think about refactoring that
18:50 - gobbledygook code I wrote before and
18:52 - trying to set myself up for success in
18:55 - the future
18:57 - all right so
19:02 - I also want to highlight this website
19:11 - I am the cube wait hold on I also want
19:21 - to highlight this website I am the cube
19:23 - made by Stuart Smith and other
19:25 - collaborators from Google this was made
19:27 - for the Google Doodle about the Rubik's
19:30 - Cube a bunch of years ago and its really
19:31 - phenomenal the code is available I I
19:35 - really should just not bother doing what
19:37 - I'm doing and just play with this but I
19:39 - have a mission and my mission is to make
19:42 - this Rubik's Cube turn and move and so
19:45 - I'm gonna do that okay so by the way
19:52 - this is the this is the comment that I
19:55 - got ok so now let me open up processing
20:02 - and here is my Rubik's Cube from before
20:08 - all right
20:18 - please try to use enums I can't promise
20:21 - that I'm gonna use enums I appreciate
20:25 - everybody wanting me to use enums
20:27 - the things that I can't promise are be
20:29 - using enums or switch statements I am
20:31 - Who I am I'll be you I'll be Armour asks
20:37 - I wonder I'm just wondering does he read
20:40 - random numbers in his classes uh no I
20:43 - mean I would but no I mean maybe I
20:46 - should but I don't
20:47 - I have not done that yes I appreciate
20:50 - that people in the chat are telling me
20:51 - that the audio and video is not in sync
20:53 - this is an ongoing problem that I'm
20:55 - having that I have not been able to
20:57 - solve yet the only saving grace here is
21:00 - that when we put the videos together
21:02 - after the livestream we fix those issues
21:05 - so it's a little extra work for Mattia
21:07 - and someday I and you spend a day doing
21:10 - that how to use inos thank you yeah
21:14 - we'll think about it well think about it
21:17 - what am I looking for let me cycle the
21:20 - camera
21:31 - okay let me is this working yes I mean
21:38 - cameras in a little bit off let's see if
21:41 - I turn it like this that's better let me
21:43 - erase this we're going to start coding
21:47 - we are going to start coding all right
22:00 - so this is what I left off Whittle in
22:01 - the input this is what I left off with
22:05 - in part one and one of the things that I
22:07 - did part one was a little bit weird is I
22:09 - really was thinking in terms of cube
22:11 - notation and if you're a cube er you
22:14 - look at the cube in a certain direction
22:15 - you're thinking about what's up what's
22:17 - down what's left that's right what's
22:18 - clockwise what's counter clockwise and
22:19 - that really led me in some strange
22:21 - directions I think it's useful maybe to
22:23 - double back and add that in once I have
22:26 - the cube working but the Syst the thing
22:28 - that I'm actually working with here in
22:30 - this code is x axis y axis z axis I'm
22:34 - and the thing is well the thing that I'm
22:40 - working on with the code is x axis y
22:41 - axis z axis and it's gonna be much
22:44 - simpler for me I think enough to keep
22:46 - track of things and think in those terms
22:48 - and the rotation might not be clockwise
22:50 - or counterclockwise it might be in the
22:52 - positive direction or in the negative
22:53 - direction the first thing that I want to
22:55 - do to really figure this out and to have
22:59 - a more effective way is actually keep
23:01 - track of the cubes location not in a
23:06 - vector but in a matrix
23:11 - so I have done a lot of videos about
23:14 - matrices and matrix math and some of
23:17 - that's going to come up here most the
23:19 - ones that you might want to check out if
23:21 - that's the totally new concept to you is
23:22 - the video where I made my own 3d
23:25 - renderer using matrix transformations
23:27 - and I made a little like bunch of
23:29 - functions to do to store matrices and to
23:32 - multiply them I also used matrices in a
23:34 - bunch of videos I made about neural
23:36 - networks because matrices pop up there
23:38 - in the math of machine learning with
23:40 - neural networks but here what I want to
23:43 - do is I want to have a transformation
23:47 - matrix for each one of the cubies to
23:50 - keep track of where it is in the world
23:52 - and so the way that I'm going to do that
23:54 - is I'm gonna change the QB to have a to
24:00 - receive a matrix and for its position to
24:03 - be that matrix rather than a rather than
24:09 - a to be that matrix rather than a P
24:12 - vector
24:14 - luckily for me cubelets oh these are
24:19 - also called couplets apparently luckily
24:30 - for me processing already has built into
24:33 - it
24:33 - matrix classes so I don't have to write
24:35 - my own matrix 3d object I don't have to
24:37 - write a matrix to the object I've got
24:39 - one in processing so it's going to be AP
24:42 - metric P a P matrix 3d object and so
24:46 - when I create the cubies the other thing
24:48 - that I think I'm going to do here is I
24:50 - am going to keep all the cubes in a one
24:53 - dimensional array I think there's that
24:55 - there's this triple nested loop
24:58 - everywhere there might be some use to
25:00 - that in certain aspects but it's gonna
25:02 - be simpler I think in refactoring this
25:04 - to actually just say let me how many
25:07 - cubes do I need I need people in the
25:15 - chat are
25:23 - yeah so I got distracted for saying I'm
25:26 - too easily distracted by the chat I
25:28 - probably shouldn't look at it let me go
25:31 - back actually because I'm realizing also
25:35 - I'm thinking about this I am going to
25:46 - need to have these nested loops in order
25:47 - to initialize all of these different cue
25:50 - bees or cubelets as I just learned that
25:52 - they're called but I think it's gonna be
25:55 - easier if I actually just keep track of
25:57 - an index and put everything in a single
26:01 - a single one dimensional array so hold
26:04 - on a sense let me go back for a second
26:06 - because like I realize I'm I want to do
26:11 - this differently then I thought okay
26:18 - alright why am I doing this
26:25 - I'm refactoring this first so I can move
26:27 - the stuff the other thing that I want to
26:31 - do now this is head so this is how I
26:33 - made the cubes before I made each QB
26:35 - each QB with an x y&z but now I want to
26:39 - do this I want to make each QB with a
26:44 - matrix B matrix 3d and then what I want
26:51 - to do is translate that matrix so in
26:54 - other words each cube it's a way like
26:56 - each cube is going to keep track of its
26:57 - own 3d world and it has the full matrix
27:00 - of where what is the translation what is
27:02 - the rotation what is the scale and so if
27:06 - I translate that matrix to that's X Y Z
27:10 - location then I'm initializing the QB
27:12 - with that particular matrix I'm also
27:15 - gonna well let's leave this length I
27:17 - think there's some other things that I
27:18 - can refactor to simplify remember the
27:20 - whole goal of me doing this is to think
27:21 - about it in a different hopefully more
27:23 - succinct way that's going to be easier
27:25 - when I need to move those things around
27:26 - so I wasn't really thinking about moving
27:28 - the things around what I did the first
27:29 - version and I gave it made some tries
27:32 - I've thought about it got some
27:33 - suggestions and I think this is gonna be
27:34 - a good path for us some other things I
27:37 - think
27:37 - then while this nested loop is useful
27:39 - it's gonna be much simpler for me in the
27:40 - end I think if I actually keep all of
27:42 - the cubes in just a single array the
27:44 - multi-dimensional array is interesting
27:46 - but let me so let me change that too
27:49 - I'm just gonna make it no I'm not gonna
27:51 - make this I I'm gonna make this like
27:53 - index oh actually let me make this I'll
27:55 - make this index and I'm gonna say cube
27:57 - index equals new QB with the matrix
28:00 - index plus plus so that I'm counting and
28:04 - then this will now be a single array
28:10 - that has dimensions times dimensions
28:12 - time dimensions 3 times 3 times 3 or 27
28:14 - of course there really isn't a QB in the
28:16 - center but you can't see it anyway so we
28:21 - can imagine it's there now the other
28:23 - thing that's really important here and
28:25 - I'm gonna change I think this will be
28:26 - helpful I'm gonna change this to X Y & Z
28:30 - X Y & Z and which whose this X Y & Z I'm
28:38 - not gonna worry about this figuring out
28:40 - the actual position of the cube with its
28:43 - length
28:43 - I just want its position in a
28:47 - three-dimensional world and what are
28:49 - those positions so if I just think about
28:53 - one face of the cube for example maybe
28:56 - this is a face of the cube where Z
28:59 - equals 1 so there's if I get the cube
29:04 - right if we're looking at the cube with
29:07 - green facing us facing you this could be
29:10 - the z axis this is Z equals 1 so we've
29:12 - got the x axis along the horizontal and
29:15 - the y axis along the vertical so the
29:18 - what I could think about this is really
29:20 - the location X y 0 0 so it's 0 0 1 so
29:24 - all of these have a Z location of 1 but
29:26 - this one is negative 1 negative 1
29:29 - sorry 0 negative 1 0 oh sorry
29:33 - 1 negative 1 right so Y is negative 1
29:36 - the X is negative 1 0 1 so this is
29:39 - negative 1 0 and this is 1 0 this is
29:43 - negative 1 1 this is 0 1 and this is 1 1
29:46 - so these
29:48 - all the locations and these can actually
29:50 - be the XYZ values that I apply to
29:54 - translate each individual QB QB to blitz
29:57 - matrix so if I come back to the code
30:02 - what I'm doing here is I'm saying have
30:04 - the X go from negative 1 all the way to
30:07 - 1 same thing for the Y same thing for Z
30:17 - create a matrix for each one create the
30:21 - QB I don't I'm not going to worry about
30:23 - this leg thing right now and then say
30:25 - index plus plus the QB then is just a
30:31 - thing with its matrix and this should
30:34 - say P matrix 3d I've got to specifically
30:36 - use I'm gonna be using a 2d matrix in a
30:38 - little bit you'll see is it's crazy but
30:40 - right I'm gonna use the 3 min alright so
30:42 - look how look how nice this is now look
30:44 - how much simpler this is why am I still
30:46 - having an error there oh I still have
30:50 - this length variable here okay the other
30:54 - thing I want to do is while it was
30:56 - really useful that I had this whole way
30:58 - of doing these quads and coloring them
31:00 - I'm gonna get rid of that right now
31:02 - because I think that what I want to do
31:05 - is think of each of these cube 2 B's as
31:07 - a box and then it's also going to have
31:11 - faces and I think I'll draw the faces as
31:14 - it has a separate object with a quad so
31:16 - right now to keep things very simple
31:18 - simple I'm gonna show you something kind
31:20 - of nuts I am going to take out all of
31:24 - this I'm gonna get rid of this translate
31:27 - I am actually going to call this
31:31 - function called apply matrix so what's
31:39 - going on here if you've learned or
31:41 - watched any of my videos about matrix
31:42 - transformations in processing or p5.js
31:44 - I'm almost just using translate rotate
31:47 - scale push translate scale rotate pop
31:51 - all of those transformations all the
31:55 - math of those transmissions happens in
31:57 - the matrix that the matrix that's
32:00 - keeping track of the world that
32:01 - sells the the processing 3d world but I
32:05 - could just apply all of those
32:09 - transformations to a matrix object and
32:12 - then apply the matrix to to apply that
32:14 - to the world that made no sense emails
32:16 - people I mean ups let me play try
32:20 - explaining that again slow mode is not
32:23 - on you
32:27 - slack chat let me know I Peter asks did
32:29 - you get a pyramix
32:30 - I did get a pyramix I got a skew I've
32:32 - got a peer mix duo I've got all I've got
32:34 - them all I've got them all
32:36 - if I need to do anything about slow mode
32:41 - in the chat or anything please let me
32:43 - know thank you to those of you who or
32:45 - have the patience and ability to
32:47 - moderate right now
33:00 - so in this case what I'm actually doing
33:03 - right so what am I doing here I'm taking
33:06 - the matrix and I probably shouldn't call
33:08 - it pause as in position let's actually
33:10 - call it matrix let's call it matrix HQ B
33:14 - has a matrix which really contains all
33:17 - the information about where its position
33:19 - and rotation in the world of the cube
33:22 - itself and this is actually the same as
33:24 - just calling translate at this point but
33:26 - because I'm story in a matrix instead of
33:28 - calling translate directly it's gonna
33:29 - give me some more possibilities later as
33:31 - I need to keep track of all of these
33:33 - cubes separately or in smaller groups
33:35 - and that kind of thing so if I do this
33:37 - and then if I just say box and I'm gonna
33:39 - say box one it's gonna be a small box
33:41 - pop matrix then and here the nice thing
33:45 - about this also is I can change this to
33:47 - cubed lengths and get rid of this nested
33:51 - loop I can say cube index I'd show and
33:54 - hope that we see the Rubik's Cube where
34:01 - is it oh look I think it's there I think
34:03 - that's the Rubik's Cube oh it's look I
34:05 - visualized the black hole of the day of
34:07 - this is the second image of a black hole
34:09 - now okay
34:12 - so the reason why it's so tiny is
34:14 - because scale so let me say scale a 100
34:19 - and let's see what happens now where's
34:23 - that cube look so let's think about a
34:26 - stroke weight 8 now that's lunacy here
34:29 - so let's make the stroke zero let's make
34:31 - the stroke weight small because I'm
34:32 - scaling up and let's also make sure we
34:35 - say fill 255 I can that's there already
34:37 - oh that's a really big one but there it
34:41 - is so I don't want to scale that much
34:43 - let's scale it by 50 and let's just say
34:47 - stroke weight 0.1 and there we go
34:52 - so now I have exactly the same thing I
34:54 - have exactly what I had before but I
34:57 - just have a matrix for each one of the
34:59 - cubies now I need to figure out how am I
35:02 - going to debug this right now if I move
35:04 - them all around but I could move them
35:06 - around they're all white they're all
35:07 - going to appear in the same location so
35:09 - what I'm gonna do is I am going to make
35:11 - a ver
35:12 - I'll just call it highlight false and
35:17 - I'm gonna say if highlight Phil zero and
35:25 - then let me say let me say cube index
35:30 - zero highlight and oh no highlight
35:36 - equals true I didn't make it a function
35:37 - or anything okay so there we go we can
35:41 - see uh that one see look this one is now
35:43 - highlighted I can address any individual
35:46 - QB it's not really highlighted cuz it's
35:48 - black it sort of looks like it's removed
35:49 - you know I could make it maybe I should
35:51 - make it like red or something just so
35:53 - it's a bit more obvious because
35:55 - everything's everything right now is
35:57 - just white okay but let me actually
35:59 - highlight the one that's in the front
36:01 - cuz that'll be I mean I could always
36:03 - spin this around let's highlight the one
36:05 - that's in the front so that would be
36:07 - which one is that what am i doing I'm
36:17 - doing X first Y for the X then Z oh this
36:21 - is the worst it's a light gonna be like
36:23 - 24 no it's not 21 I think that's that
36:29 - one 21 first 2103 it's that's why they
36:41 - had that right okay I this is helping me
36:44 - 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
36:51 - I think is gonna be 15 I think I'm going
36:53 - in that direction X is wise nazies no I
36:57 - already tried 15 no I should just do
37:04 - them one at a time
37:04 - somebody chat will tell me Oh Nathan
37:10 - growl I'm happy to give you moderator
37:13 - privileges how do I do that are you will
37:15 - you post a chat message if you post a
37:18 - chat message I can do
37:19 - moderator privileges I guess I could do
37:29 - these one at a time let's find it in
37:33 - debt index let's actually cycle through
37:39 - all of them that'll be kind of fun to
37:40 - see so I'm gonna say int index equals
37:43 - zero and I'm going to say a cube index
37:46 - dot highlight equals true and then at
37:53 - the end I'm gonna say that and then I'm
37:57 - gonna show it then I'm gonna say it
37:59 - equals false and then I'm going to say
38:04 - index plus plus let's make the framerate
38:07 - one and print the index array out of
38:16 - bounds exception
38:20 - oh it's frame rate one how come it
38:24 - didn't go slow oh whoops stop turning 12
38:37 - Oh 30 14 15 17 18 Wow it's a weird order
38:49 - that I didn't expect
39:01 - three it's it's number three why is it
39:06 - number three how come I didn't realize
39:08 - that all right it is oh I made the frame
39:19 - rate point five that's not what I meant
39:21 - to do cube index three highlight is true
39:33 - no what is going on
39:44 - no it's too - oh it's too good this one
39:48 - before
39:48 - oh it's just - it's going that way well
39:51 - I just lost like two minutes I'm getting
39:56 - very sweaty here huh some things I like
39:59 - can do really well and other things
40:00 - that's right Matthew they could edit all
40:05 - of that out I used to say that it
40:07 - wouldn't get it out not really well
40:09 - alright the answer by the way in case
40:11 - you were wondering was - I'm counting
40:14 - with Z first so it's going hero one two
40:17 - so perfect boy that was a lot of time I
40:20 - spent trying to figure out that it was -
40:22 - you're lucky you didn't have to watch
40:22 - that okay so now I can see that I'm
40:27 - highlighting a given QB wolves I forgot
40:32 - what I was doing this okay yes
41:03 - I'm just thinking about this for a
41:05 - second
41:20 - yeah okay
41:35 - okay sorry I'm thinking about this
42:04 - I'm thinking about this because I did
42:06 - this a week ago and I'm I'm not sure I
42:09 - love the way that I did it but I'm gonna
42:12 - keep it that way for right now so let me
42:15 - do let me rotate along the z-axis first
42:18 - because it's gonna make the most sense
42:19 - okay I'm gonna do that okay
42:29 - okay okay okay all right
42:45 - the next thing that I want to do is take
42:47 - one of these faces each one has its own
42:49 - 3d matrix with an XY and Z and rotate it
42:53 - I want to apply a 2d rotation to this
42:56 - particular face so any face whether it's
42:58 - the front the back the top the bottom if
43:00 - we look at it it ends up becoming
43:02 - two-dimensional so I just want to rotate
43:04 - two of I just want to rotate along one
43:07 - particular axis and so a way that I
43:10 - could do that is actually take any given
43:12 - face of the cube can become a 2d matrix
43:17 - a 2d sorry any given face can become
43:21 - suddenly a 2d world that I want to do a
43:24 - rotation to so if I suddenly have this
43:27 - point here which is that negative one
43:30 - negative one and I want to rotate that
43:33 - relative to the center ninety degrees or
43:37 - half pi then it's going to end up where
43:40 - in one common negative one it's going to
43:44 - move and rotate there so how can I do
43:47 - that I can apply a 2d rotation so let's
43:50 - look at how I would do that if I come
43:53 - back to the code let's write a function
43:57 - called turn Z and I want to avoid using
44:01 - rotate Z because even though I'm doing a
44:03 - z axis rotation of rotate Z is a
44:06 - built-in function in processing so if I
44:08 - say turn Z first let me look at all of
44:11 - the cubes so I always need this
44:13 - particular array this particular loop I
44:19 - I'm starting to regret that I kept it
44:22 - because I could actually just do the
44:23 - loop along the z axis but whatever I'm
44:25 - gonna do it this way and what I'm gonna
44:27 - do is I'm gonna say oh oh I see I see
44:37 - what I'm doing here oh I see
44:45 - I just realized something
44:54 - I know I sort of regret I'm Kai I'm
44:57 - regretting taking out that nested loop
44:59 - because I just want all the faces that
45:01 - are in the z-axis and if I had that
45:03 - nested loop I would be able to keep it
45:05 - that way
45:05 - but actually I'm gonna do something
45:06 - slightly redundant which is that I am
45:09 - also going to keep track in a separate
45:11 - variable I am going to keep track of
45:19 - going back I'm gonna keep track of its
45:22 - XY and Z index values I'm gonna keep
45:26 - track of what those values are within
45:28 - what would be a three-dimensional array
45:30 - and so let me actually add those as
45:34 - arguments here and I'm going to say x
45:38 - equals x y y equals Y Z equals Z and
45:43 - then when I create each cube I'm going
45:47 - to say X Y Z great so I have those extra
45:51 - variables because now I can say if cube
45:55 - Z equals 1 right I want only the only
46:00 - the cubes that are in the z axis 1
46:02 - negative 1 0 1 those are the ones and
46:05 - this is cube index i z these are the
46:08 - ones that i want to rotate so now i need
46:10 - to make a 2d matrix this is what I was
46:12 - saying 2d matrix out of that face so the
46:16 - 2d matrix is just a new 2d matrix I want
46:19 - to do a 90 degree or 1/2 pi rotation of
46:22 - that matrix and then I want to translate
46:27 - out to the cubes X and let me actually
46:32 - let's use a variable I saw somebody on
46:35 - code pen who I'm sorry I saw some man
46:39 - sponge man I know people argue that I've
46:47 - got to going backwards and forwards
46:49 - sponge man on code pen who made a
46:52 - version of this I saw used actually a
46:53 - really cute variable name which I'm
46:55 - going to use right now Q be like the
46:57 - letters Q beef
46:58 - the Q B equals cube index I so I can
47:01 - actually just use Q B if Q B Z equals 1
47:03 - translate by QB x and QB y essentially
47:12 - what I want to do here is I need to
47:14 - rotate before I translate I want to I
47:17 - have this thing here I make this matrix
47:20 - I rotate the matrix and then I translate
47:22 - out to here and I have my new location
47:25 - where x and y should be so what is going
47:28 - on here let me let's look at I think I'm
47:31 - gonna need to do some console logging
47:33 - here of this
47:43 - I think in order to I think I don't want
47:46 - to make this more clear I want to do a
47:48 - little bit of console logging because
47:50 - what would this matrix like what's
47:52 - actually in there so let me first make
47:57 - I'm gonna call this matrix 1 and I'm
48:00 - going to call this matrix 2 and this is
48:01 - just for debugging purposes and I'm
48:04 - gonna say matrix 1 dot translate qbx qby
48:10 - so I want to show you what does it look
48:13 - like when I just apply this translation
48:16 - to X&Y with out a rotation and what
48:21 - happens when I rotate and then apply
48:23 - that translation so to show you that I
48:28 - could do matrix 1 print and matrix to
48:31 - print processing has a nice print
48:33 - function associated with the nice print
48:36 - function associated with matrices and
48:38 - let me also just do print line something
48:42 - like this and let's also just so we can
48:45 - see do print line QB x QB y so we can
48:49 - see what those values are so let me run
48:52 - this oh I need to call this function I'm
48:58 - gonna call turn Z right here and setup
49:05 - and now we're gonna look at all these
49:09 - look at this when the XY location is
49:15 - negative one negative one you can see it
49:18 - as the third column in rows one and two
49:22 - of this matrix right this the this is
49:24 - the matrix that keeps track of
49:26 - translations and rotations for a 2d
49:29 - world in processing when I rotate it 90
49:33 - degrees where does it end up one
49:35 - negative one negative one negative one
49:40 - ends up at one negative one when it's
49:45 - negative one zero it ends up at 0
49:49 - negative 1 when it's at negative 1 0
49:56 - rotating 90 degrees it ends up at where
49:59 - did it end up 0 negative 1 which is
50:02 - right here so you can see this rotates
50:04 - to here so actually in those matrices
50:07 - are the new index values of where it is
50:09 - in my sort of 3d array that I'm
50:12 - imagining so here we go
50:14 - so I and these values are all stored in
50:18 - properties of the matrix object which
50:20 - are indexed by its row and column so I
50:24 - can basically say right I don't actually
50:27 - need this matrix 1 I did that just for
50:30 - debugging so I'm gonna leave some of
50:32 - this debugging stuff in here I can
50:35 - basically now say hey QB you should you
50:38 - have a new location update your location
50:40 - to matrix 2 dot M I think it's it's row
50:48 - column so 0 to matrix this matrix 2 m 2
50:57 - basically I'm getting and I could have
51:00 - just done the matrix math with like sine
51:01 - and cosine probably but I kind of like
51:04 - the idea that I'm using the built in
51:06 - matrix math of processing so you can see
51:09 - here that this these are these two
51:11 - values update by oh sorry m 1 2 and then
51:17 - qbg because I'm not affecting the Z so I
51:20 - there's no update function but this is
51:22 - really what I'm doing I'm take
51:31 - there's no update function yet that's a
51:34 - new thing I have to write but this is
51:35 - what I'm doing I'm taking the XY
51:37 - actually I want to get rid of the
51:38 - debugging stuff because this makes it so
51:40 - much simpler to look at now and I'm just
51:47 - gonna call this matrix
51:48 - I don't need matrix 1 and matrix 2 what
51:52 - I'm doing is I am taking I'm making a 2d
51:55 - matrix out of the XY then I am rotating
51:58 - it and then I am getting the new XY and
52:01 - replacing it in theory in my QB object
52:04 - and in my QB object then I need an
52:06 - update function which does something
52:09 - like first of all I'm just gonna there
52:12 - might be a more thoughtful way of doing
52:13 - this so I'm just going to reset the
52:15 - matrix and this needs an X a Y and Z and
52:21 - I am going to and somebody in the chat
52:25 - was telling me and I should probably get
52:26 - a habit of doing this if I if I have the
52:28 - same variable names of things I can make
52:30 - sure I'm referring to the object
52:31 - instance variables with this dot which
52:33 - is of course the thing I like to use on
52:35 - this channel let's be consistent and do
52:36 - it here so I can say matrix really I
52:41 - don't say reset matrix matrix reset
52:43 - matrix translate XYZ and then let me
52:48 - update again I've got like a serious bit
52:51 - of redundancy here but let me just
52:52 - update those XYZ values as well so now
52:58 - this should update why is update not
53:03 - working oh you know what these values in
53:08 - the matrix are floats and Kuby wants an
53:11 - int so I'm gonna I could just convert it
53:14 - to an int but I'm gonna use round
53:15 - because I want to make sure I ran into
53:17 - this in another project just in case
53:21 - like it's for some reason gives me like
53:23 - 0.9999 999 it would if I used converting
53:26 - it casting it to an integer or floor it
53:29 - would make it zero so this should work
53:31 - let's get rid of turn Z here and I'm
53:34 - gonna add a key pressed and I'm just
53:38 - gonna say if key equals just the key one
53:41 - turns E
53:45 - so now all right ready
53:49 - when I press the key one that cubies
53:52 - you're right
54:01 - [Music]
54:04 - now here's the interesting thing I
54:06 - should now be able to say give this
54:08 - turns Ian's index whoops int index which
54:15 - would be here
54:17 - so for example now if I were to say turn
54:23 - z 0 else if I know you want me to use a
54:32 - switch statement everybody turn z 1
54:34 - right I should be able to rotate
54:40 - oh I'd the middle is technically I while
54:44 - I could program it with a rotation of
54:46 - the middle of the cube that's not really
54:48 - a thing so I'm actually just going to
54:49 - use 1 & 2 to rotate 0 & 2
54:52 - let's highlight both cube 2 and cube 0
54:59 - and let's see what happens so I should
55:02 - now be able to if I press 1 whoops but
55:06 - what happened here
55:08 - if key equals 1 is that actually
55:14 - happening hold on
55:29 - this is world sophisticated debugging
55:33 - going on here what did I do wrong
55:49 - wait a sec
56:01 - oh oh sorry everybody the indices are a
56:07 - negative 1 and 1 negative 1 0 & 1
56:11 - of course all right let's try this again
56:15 - get rid of my print line hello all right
56:18 - here we go
56:21 - right oh is it going around look there
56:24 - it's going around look at that that
56:27 - one's going around it's going around
56:29 - look at that
56:30 - it's going around yeah yes okay now look
56:35 - at this now there's got to be some sort
56:37 - of way I could make this function into
56:42 - any I just like I'd like to keep this
56:44 - function generic and do any given axis
56:46 - but that's too hard for me I'm gonna
56:49 - though this will definitely
56:56 - right now I'm just going to copy paste
56:58 - and I'm going to say turn Y and so now
57:01 - if y equals index then what I want is X
57:04 - and z ah x and z cube cube ey I don't
57:14 - need to reckon that so this should be
57:17 - exactly the same for a y rotation right
57:21 - and then oh and I need I'm gonna add one
57:23 - more thing and then X I'm gonna just
57:27 - check the x-axis and this should be y
57:30 - and z then I need to keep qbx and adjust
57:35 - the y and z so I'm turning any face like
57:39 - this year with turn Y now it was it was
57:41 - kind of obvious to us that when I have
57:43 - the x axis that I turn this face into a
57:46 - 2d matrix but when I'm using the y axis
57:48 - just let's just take this face and turn
57:51 - it into a 2d matrix
57:52 - I need the Y values and the Z value I
57:55 - mean sorry the X values and the Z values
57:56 - that's what's changing Y is fixed at
57:59 - negative 1 0 1 so this should allow me
58:02 - to alright alright I'm gonna use a
58:08 - switch statement switch statement
58:19 - looking up the syntax for the switch
58:22 - statement up for here probably gonna
58:30 - have to come back to my if statement but
58:32 - let me I know it's just too painful I
58:34 - can't bear to deal with the comments
58:35 - switch key I'm looking at it over here
58:38 - on my invisible computers case 1 no no
58:44 - case 1 turn Z negative 1 break right and
58:55 - then I just keep doing this right case
58:59 - to turn Z 1 right and then all right now
59:05 - actually here's the thing let's see if I
59:09 - can get clock
59:10 - and counterclockwise there's how many
59:12 - moves right there's like I could rotate
59:15 - in this direction or the other direction
59:17 - so I'm going to consider that to be a
59:19 - direction in my rotate but well let me
59:22 - just get this to work first then I'll
59:24 - add direction it's too many things case
59:26 - one and two case three and four which is
59:33 - turn Y case whoops whoops case five and
59:49 - six which is turn X no yes
59:57 - is that a switch statement oh I know I
59:59 - know some of you like I just can't bear
60:01 - all right
60:01 - is that actually a switch statement
60:03 - what's the chance that that's actually a
60:04 - sort of switch statement that works okay
60:11 - so one is just turning the the back row
60:15 - that still works two is turning the
60:18 - front row oh my god three oh that's not
60:22 - right is that it look right hold on
60:29 - x4 we can't see that five all right
60:38 - something's wrong all right let's take a
60:42 - look
61:10 - what did I get wrong here so why this
61:17 - should be a wire rotation so I should
61:19 - see if I'm doing a wire rotation now
61:22 - this should end up here and this should
61:23 - end up there oh that is right that's
61:27 - correct I just didn't see it
61:29 - it's totally it's correct it just looks
61:32 - weird
61:33 - that's why thank you very much and X
61:38 - right yes that's right
61:42 - no that's that's Z now X is rotating
61:47 - around the alright X 4 4 does nothing
61:51 - I don't know act 5 oh that's right - I
61:56 - should just met I need to make those
61:58 - different colors so let's do something a
62:06 - little different let's make give these a
62:08 - color and let's do the following let's
62:17 - set the color equal to red and the color
62:21 - equal to this just see the color equal
62:27 - to blue and then in the QB itself let's
62:33 - just fill it with its color that makes
62:38 - much more sense so now I think it'll
62:42 - look right to us now so if I go and do a
62:46 - Y rotation right that's correct now
62:52 - here's the thing I want to will this all
62:55 - keep working will this continue to work
62:57 - if I do multiple combinations so let's
63:00 - do my Z rotation we're now the that's
63:04 - there now I also let me also rotate that
63:07 - there but let me put it down here or
63:09 - let's you leave that there now let's do
63:11 - a Y rotation yes that still works let's
63:14 - do X all right yep that one's going
63:19 - around there and then the red one is
63:22 - going around
63:23 - the cubes move correctly now that I have
63:30 - all this working I just need to color
63:32 - well now now that I have all is working
63:36 - I need to actually color their faces
63:37 - correctly so if I put the actual colors
63:40 - of the cube on the faces then I can
63:43 - start to move those as well so in order
63:44 - to do that I have an idea
63:46 - what I would like to do is I would like
63:49 - to make a face class and what I'm going
63:52 - to do the face class oops
64:09 - why is those what's 11:30 getting close
64:20 - wait come on sorry I think I have a
64:23 - loose cable here everybody sorry there
64:26 - we go just a loose cable the idea of how
64:33 - I'm going to keep track of a face so
64:35 - every single QB will have well in an
64:40 - actual rubik's cube there are you know
64:44 - center pieces which just have one face
64:46 - and they never move they spin but they
64:48 - they just stay permanent there are these
64:50 - corner pieces which have three faces and
64:52 - I don't know what these are called these
64:53 - little like middle pieces I'm sure
64:55 - there's a tech name for them that have
64:56 - two faces I'm gonna be simple about this
64:58 - for now and I'm just going to give every
65:01 - single QB six faces and I'm just getting
65:04 - there's gonna be a lot of redundancy
65:05 - like you will never see you'll never see
65:07 - the fact that this QB does not actually
65:09 - have a white face on the side but I'm
65:12 - gonna give it that and the way that I'm
65:14 - going to define each face each face is
65:16 - going to have a color like was its
65:19 - actual color and it is going to have a
65:20 - normal so its normal is a vector that
65:23 - points perpendicularly perpendicular
65:25 - from the face so if it's the
65:28 - front-facing face its normal will be 0 0
65:31 - 1 it's pointing forward in the z axis if
65:34 - it's the backwards facing face
65:36 - zero zero negative one to the right one
65:37 - zero zero so on and so forth so here in
65:44 - the face class we're gonna have a we're
65:47 - gonna have a P vector called normal and
65:49 - then we're gonna have a color called C
65:52 - for color and when I make the face I
65:54 - will give it a normal and a color and I
65:59 - will say this dot normal equals normal
66:02 - and this dot C equals C then every
66:07 - single QB in addition to have them all
66:09 - this information will have an array of
66:11 - faces with six faces again
66:16 - a thing that I would want to do later
66:18 - and maybe you can do this in your
66:20 - version is to have a the correct number
66:24 - of faces for each QB but let's just do
66:25 - them all with six and then in that case
66:28 - I'm also just going to hard-code this so
66:31 - each face faces index zero would be left
66:35 - so I'm going to consider the z axis as
66:42 - green forward so the the back is blue
66:47 - the zero the negative one of is zero so
66:50 - that's going to be a new face with a new
66:54 - P vector that is zero zero negative one
66:58 - and the color is zero 0 255 so right so
67:04 - this is the blue face this is the green
67:15 - face
67:21 - this is wait let's up up would be zero
67:28 - one zero this would be white down yellow
67:41 - how do I do yellow it's a little red and
67:43 - little green like that
67:46 - no no red a lot of red and red a green
67:48 - green yeah but this is zero okay that's
67:50 - yellow or yellow so then left and right
67:57 - positive right is orange one zero zero
68:03 - is well I think that should be orangish
68:06 - somebody will get in the chat will give
68:08 - me some better colors and then the other
68:10 - side is red so this is now me making all
68:15 - of the faces great and then guess what I
68:17 - could do here in show after I apply that
68:20 - matrix I can draw the faces for face F
68:27 - in faces f dot show and now all I need
68:32 - is a function here that knows how to
68:34 - draw a rectangle pointed perpendicular
68:37 - to the normal with a particular color
68:40 - how do I do that
68:43 - 250 255 255 100 is yellow up is yeah all
68:53 - right how am I gonna draw each face I've
69:05 - lost the chat here
69:15 - oh yeah I also need to add the reverse
69:17 - rotation I will do that for each for the
69:26 - win how can you use tint on a box
69:28 - alright so the first thing that I know I
69:35 - need to do is fill the color then I need
69:39 - to draw a quad or a rectangle let's use
69:41 - sister's rectangle let's just try using
69:42 - I'm just drawing a 2d rectangle and I
69:46 - need to rotate it according to the
69:48 - normal let's just draw the rectangle
69:51 - rectangle at 0 0 1 comma 1 actually 2
69:56 - square I can use processing square
69:57 - function
69:58 - I think it's size is just 1 so what if I
70:01 - do this oh okay first of all let me go
70:07 - back to my QB and let's just say no film
70:17 - well there's the red one it's in the
70:20 - wrong place
70:21 - oh they're all just on top of each other
70:22 - right of course oh I do need to
70:24 - translate out I do need to translate I
70:27 - can translate by the normal oh of course
70:29 - ok so I can translate by the normal X
70:34 - normal dot y normal Z and I'm gonna want
70:38 - to add push matrix and pop matrix and
70:43 - let's do no stroke here so now that
70:46 - should be there they are they're all the
70:50 - faces sort of are they in the right
70:52 - place they kind of are
70:54 - right white is back there yellows there
70:56 - then blue then red but they're all there
70:58 - all the problem is they're all not I
70:59 - need a rotation can I rotate like along
71:04 - the normal or something like can I do
71:06 - something like say rotate normal dot X
71:09 - normal dot y normal Z half pi is that
71:14 - like gonna work no hmm don't think about
71:22 - this oh is it oh maybe it's the other
71:25 - way maybe half PI goes first that's the
71:27 - angle and then this is the axis of
71:28 - rotation
71:29 - oh look at this
71:33 - something's right sort of furtive all
71:37 - their dare I should be translating by
71:40 - normal X 1/2 of that so let's multiply
71:45 - all these by 0.5 okay green and blue are
71:57 - those opposite sides yes white and
72:00 - yellow are in mmm the right orientation
72:05 - everything's in the right orientation
72:07 - but they're in the wrong place
72:09 - oh do I need to oh I should translate
72:11 - before I rotate okay
72:15 - closer
72:29 - ah
72:36 - ah 18:01
72:43 - that's a negative one right okay now I'm
72:51 - really close in the sense that orange no
72:58 - these all have the wrong the way I'm
73:00 - doing the rotation is not right
73:19 - you need the angle and AXA wrote for us
73:20 - it will become your normal vector yeah
73:28 - yeah don't copy paste kids yeah all
73:40 - right well let me I know there's a way I
73:43 - could do this I was trying to avoid this
73:45 - but just so I get it right look if I
73:47 - were to say if normal dot X if the
73:54 - absolute value of normal dot Z is
73:57 - greater than zero right if the normal is
74:00 - along the z axis I need to rotate I
74:04 - actually don't need to rotate at all the
74:07 - rectangle is drawn correctly so I could
74:11 - say like rotate just I could say rotate
74:13 - Z you know by half pi else if the
74:17 - absolute value of normal dot X is
74:20 - greater than zero then I could rotate I
74:23 - should I think it's by X else if
74:27 - absolute value of normal dot Y is
74:30 - greater than zero there's got to be a
74:32 - better way but this will work pretty
74:34 - sure then I can draw the face that's the
74:41 - same thing
74:43 - wait translate and then rotate
74:56 - right look at the chat
75:20 - dot product
75:42 - rotation should come first
75:44 - oh right what if I just do I don't I
75:55 - don't need
76:08 - so close I am I know another way to do
76:11 - this I think rotating is oh wow
76:31 - I want to translate out and then I want
76:34 - to rotate according to where I am and do
76:39 - I have this wrong Oh oops okay so of
76:54 - course of course if I'm if I'm along the
76:58 - x-axis I want to do a I'm drawing the
77:01 - quad like I'm always drawing the quad
77:03 - face forward huh
77:05 - so if this is my quad if I belong the
77:08 - its here and along the x-axis I need to
77:10 - actually do a Y rotation if I'm along
77:13 - the yes so of course so that's it so
77:15 - what I needed to change here was not not
77:18 - and and this doesn't this I don't since
77:21 - I'm drawing it forward I can just
77:22 - basically skip the whole Z thing so I
77:25 - only need to do a rotation if I'm on the
77:29 - x axis of a Y if I'm on if the normal is
77:32 - along the y axis rotate by X and then
77:36 - here we go now we have the Rubik's Cube
77:39 - and guess what I can turn it wait huh
77:45 - so now I'm turning it and nothing's
77:49 - happening guess what now that I have
77:54 - these faces what happens when I actually
77:57 - turn a rubik's cube the faces also
78:00 - rotate the normals need to rotate this
78:03 - is the last piece i need to i want to
78:05 - animate it turning but this is the last
78:07 - piece to at least have it so that i
78:09 - could do all the moves Oh actually I
78:13 - need to add directions and maybe make
78:14 - the keyboard controls make a little bit
78:16 - more sense but so now what I need is I
78:20 - need inside the face I need a turn X I
78:27 - need a turn Y and I need a turn z
78:37 - so I need to be able to rotate any given
78:41 - face they saw the shot just went a
78:48 - little crazy yeah
79:00 - so once again I can just use I can just
79:03 - use matrix transformations
79:16 - so once again I can use matrix
79:19 - transformations only this time and I
79:21 - have done this before I did this in my
79:23 - video about doing 3d rendering without
79:26 - the 3d render with our own matrix math
79:28 - and so what I need to do here let me get
79:30 - to pull up the Wikipedia page
79:45 - [Music]
79:55 - no I want 3d rotation where is that here
80:02 - this is basically what I want to do
80:06 - don't that where was I looking for that
80:08 - where it has all three rotation matrix
80:12 - so I'm looking for ah there we go this
80:15 - is what I'm looking for yeah here we go
80:28 - these so here they are these are the
80:32 - three rotation matrices for doing an X
80:35 - rotation or Y rotation and a Z rotation
80:37 - and all I need to do is apply those
80:40 - rotations to the normal vector so I can
80:44 - use P matrix for this but for whatever
80:46 - reason I think I might have an easier
80:47 - time just writing this out because
80:49 - ultimately what I'm saying is let me
80:52 - make a new P vector I'll just call this
80:55 - v2 and then v2 dot x equals the normal
81:00 - dot X times sine so I need an angle here
81:11 - sorry a normal on except scope it will
81:14 - equals normal times X times cosine of
81:16 - the angle plus or minus four minutes are
81:20 - here somewhere
81:22 - what is it where's that formula minus
81:24 - minus will be one Y times sine and then
81:27 - it's sine plus cosine
81:36 - a normal times X time normal dot x times
81:41 - cosine an angle minus normal dot y times
81:44 - sine of the angle and then v2 dot y
81:47 - equals normal dot X times sine of the
81:51 - angle plus normal dot y x times cosine
81:55 - of the angle and then v2 dot Z equals Z
81:59 - and now I should have and then I could
82:04 - say normal equals v2 so I have just
82:08 - rotated the normal according to the
82:10 - x-axis o equals actually this should be
82:20 - normal sorry this should be normal dot Z
82:23 - now here's the thing I'm a little
82:25 - worried we're gonna run into some
82:26 - rounding weirdness so what I probably
82:29 - should do is say hmm let's just put
82:35 - round around all of these I think that
82:41 - will kind of do the trick I just don't
82:43 - want to be stuck in a situation I really
82:44 - just care about zero one one becomes
82:47 - zero one zero that kind of thing so this
82:49 - should be turning the face and if you
82:53 - add this math I sort of did by looking
82:54 - at the formula a little bit by memory
82:56 - but I go through this particular formula
82:59 - in detail in that other matrix
83:01 - transformation video so now and somebody
83:03 - in the chat will point out if I'm a
83:04 - wrong so now I should be able to take
83:06 - exactly this same thing and put it in
83:10 - turn Y and the difference is with turn
83:15 - why I am changing X and Z so this is x
83:20 - times cosine and this should have also a
83:22 - float angle this would be X and this
83:25 - will be Z this will be sorry this is Z
83:32 - this is X and this is Z and this is y
83:38 - right so that's just the matrix take in
83:42 - apply to X and Z because Y if I'm
83:44 - turning along the y axis Y stays the
83:46 - same oh wait this was Z by the way I
83:50 - don't know
83:50 - I've got got them in place this was Z
83:52 - because Z is fixed this is y because Y
83:55 - is fixed and now let me copy this into
84:00 - here and this will be X so X is fixed
84:04 - this is y y + Z this is Z y and z so I
84:10 - think I've got this right
84:12 - yikes I think this should turn all the
84:16 - normals and if it's turning the normals
84:20 - they'll display correctly so what's a
84:23 - rotation that I'm doing so how do I have
84:25 - this working when I say turn Z for
84:30 - example I say Q be update so I should
84:36 - also say here probably QB turn faces Z
84:45 - let's just do that
84:46 - this is yeah I mean this is awkward
84:49 - naming but I need to oh and I yeah I
84:52 - need to turn the faces well I'll do that
84:54 - afterwards it doesn't really matter
84:55 - which and so then I would add a function
84:57 - here turn faces Z and I would say for
85:02 - every face F faces in faces f dot turn Z
85:09 - half pi what's the chance this works
85:16 - very little
85:17 - oh wait a sec wait a sec that's that's
85:25 - right orange goes to there goes to there
85:28 - goes to there goes to there
85:30 - yes oh that one's working too right
85:36 - one two one two one two one two
85:44 - so close all right so I need turn faces
85:53 - why and again I think I there's probably
85:59 - a way to refactor this so that these
86:00 - functions turn faces X okay let's do Y
86:08 - which was oh no that was X wait oh wait
86:15 - wait wait wait I need to call those turn
86:18 - faces Z turn faces Y turn faces X and I
86:32 - forget what my key commands are by the
86:34 - way guess what we can get rid of this
86:36 - thing all this nonsense that I had
86:38 - before I'm not using this anymore
86:39 - my code is so much nicer okay so now
86:43 - where's my key commands let's just put
86:45 - this in its own tab I'll just call this
86:49 - controls and there's clearly going to be
86:52 - a better way to do these controls but
86:54 - this will help me remember so right now
86:57 - if I do why that should be this should
87:01 - be the top four oh that's the bottom but
87:03 - that's fine five is X 3 is the top three
87:11 - and then can I start combining these
87:12 - yeah I'm shuffling the cube I think this
87:22 - is good I I got to do something like
87:24 - real testing of this to make sure this
87:25 - is really working
87:27 - but let's be let's the one thing I need
87:30 - to do is I need to add direction so I
87:32 - need to be able to add a direction for
87:34 - turning it so in these turn functions I
87:38 - should also have a direction so each one
87:43 - should get a direction then the
87:47 - direction is half pi Direction times
87:50 - half pi and turn faces Z with that
87:55 - direction
87:57 - so rotate according to the direction and
88:01 - then rotate according to the direction
88:06 - so now in turn phases
88:11 - these should also have a direction so I
88:15 - should be able to go either direction
88:23 - okay and then now alright so let's think
88:28 - about this so Z is forward so let's use
88:33 - F hmm
88:38 - what's a good set of key commands for
88:40 - all the moves what's a good set of key
88:47 - commands for all the moves
89:02 - oh I don't want to use WASD because
89:11 - that's gonna confuse me I mean it so I
89:21 - have forward back left right up down but
89:25 - then I have clockwise counter I guess I
89:27 - could use shift I'll just use lowercase
89:29 - and capitalized okay I'll use lower kids
89:31 - kept low all right all right so all the
89:34 - moves that I have are forward back up
89:38 - down right left so I'll use those keys
89:45 - and a lowercase will mean what a
89:48 - positive direction uppercase will mean
89:49 - negative direction so the case F is
89:52 - turns e11 the case capital F is turns e
89:57 - negative 1 negative 1 that's forward
90:00 - then case B would be also turns E but 1
90:08 - 1 and B would be 1 negative 1 all right
90:14 - I'm gonna do this silently and this
90:16 - could get fast forwarded if it needed to
90:20 - then so that's front front back back and
90:29 - then so let's do let's do up up down
90:39 - one negative one
91:05 - all right that's oh and these should be
91:08 - Y up up oh my god what's going on
91:14 - forward forward backward backward up up
91:20 - down down left
91:36 - left
91:44 - right right
91:59 - so let's see turns F F BB it's all turn
92:03 - Z negative 1 negative 1 1 1 1 negative 1
92:06 - 1 negative 1 I'm gonna be consistent
92:08 - about this up up up down down 1 one up
92:16 - is 1 1 so this should be just to be
92:21 - consistent and down is bottom 1 negative
92:25 - 1y left because I should do whatever
92:29 - that's fine
92:30 - left is negative 1 1 negative 1 right is
92:33 - 1 1 there should be 1 negative 1
92:43 - let me make this
92:53 - comments are your friend
93:04 - I mean front is really the positive
93:06 - number up is positive right as positive
93:20 - all right I have now put in every
93:23 - possible move front is turn Z with a Z
93:26 - of one either direction back is a Z of
93:29 - negative one either direction then Y
93:31 - then X those are then up then down is y
93:34 - then left and right is turn X you know
93:36 - it does occur to me that I could just
93:38 - have a generic turn function and I give
93:40 - it the the the normal vector of the axis
93:44 - or there's the vector of the axis itself
93:45 - but anyway this I believe should work
93:49 - let's see so if I want to do a front
93:51 - I should just see that front face which
93:54 - is the green face turn which I am seeing
93:57 - back should be the back face up o up I
94:01 - got the is the is down so up is down
94:03 - whatever cuz I the Y points in the other
94:05 - direction down is the top ah you know
94:08 - spin it around up is the top consistent
94:14 - down goes this way right okay now this
94:18 - is right and left now are my clockwise
94:23 - and counterclockwise things working so
94:26 - front which was the green face goes this
94:31 - way and capital F should go the other
94:34 - way yep so now let's see if I turn front
94:40 - and then now let me do the left
94:45 - oh that which is there that's the right
94:48 - yeah it doesn't matter as long as it's
94:50 - one side that's working I think this is
94:57 - good
94:57 - here's a way that I could test this what
95:02 - I'm going to do now to finish off this
95:04 - video is run a set of moves shuffling it
95:08 - and then run those moves backwards and
95:13 - it should unshut alit if that works then
95:16 - I think I've done it correctly and then
95:18 - I'll be ready to animate this
95:33 - so to do that let me get let me make a
95:36 - car array all moves is a just F front
95:43 - back up down left right and I could deal
95:53 - with the capitals you know I should make
95:55 - these individual strings because then I
96:00 - can use the to uppercase function so
96:09 - what I'm going to do and then I'm going
96:11 - to I'm going to make a string called
96:14 - sequence and what I'm gonna do is in
96:19 - setup I'm gonna say four into I equals 0
96:25 - I is less then let's just do ten moves
96:27 - sequence index I equals int so let me
96:35 - get an index which is a random number
96:38 - between all the that's an index into the
96:41 - all moves array sequence plus equals oh
96:48 - I'm already using index so let me just
96:52 - say our sequence plus equals all moves
96:54 - are so if I do that all movies all moves
97:02 - this would be you can see there should
97:04 - be a sequence here you can't really see
97:05 - that this is my sequence up forward
97:08 - right right right left up right down
97:10 - back and just for plausible deniability
97:13 - here let's just say if random I'm gonna
97:16 - give random is less than 0.5 we'll do
97:23 - this otherwise we'll do that too to
97:27 - upper case so now I should have my
97:31 - sequence and there you go there's my
97:33 - sequence down up right up down forward
97:35 - up back left left okay so now what I
97:38 - want to do
97:39 - is I want to run through that sequence
97:41 - so whatever I put this in index that was
97:44 - for something else right don't need that
97:46 - anymore do I
97:47 - so I'm gonna use I'm actually gonna use
97:50 - that int I must use counter equals zero
97:53 - and I'm going to say in draw a car move
98:00 - equals sequence car at counter counter
98:05 - plus plus and I'm just gonna do this if
98:07 - counter is less than sequence dot length
98:12 - okay if counters lesson sequence not
98:14 - linked I'm gonna get the move and then
98:16 - I'm gonna do apply move move and now in
98:20 - controls this should really be apply
98:22 - move car move and then switch move so I
98:29 - could if I want to control it by key
98:30 - pressed I could still say key apply move
98:34 - key but I don't want to control it by
98:37 - key pressed I want to control it by
98:39 - day's move so let's run this it did it
98:44 - really fast because it see the problem
98:47 - is the rendering engine takes a minute
98:48 - to to spin up so I'm gonna do this I'm
98:53 - gonna say boolean started equals false
98:57 - and then I'm gonna you know what let's
99:02 - just change the frame rate no no no
99:03 - because I want to be able to turn it
99:04 - around boolean started equals false and
99:09 - I'm gonna say in key pressed if if key
99:17 - equals the space then started equals
99:21 - true so if I press the spacebar start
99:23 - things going and then I'm gonna say here
99:27 - in draw if started so it won't do the
99:33 - shuffling now it won't do the shuffling
99:36 - right now until I press the spacebar
99:38 - because he shuffled it but don't slow
99:42 - that down just so we can see it if frame
99:45 - count modulus you know 20 equals zero
99:50 - that's going to only do that
99:53 - every 20 frames so I hit the spacebar
99:55 - and you can see it should be I mean it
99:58 - should be doing this sequence right now
100:00 - right it should be doing the head
100:02 - secrets so when it gets to the end of
100:06 - the sequence
100:07 - I should go backwards through the
100:09 - sequence so if sequence is less than so
100:13 - what actually here's what I'm gonna do
100:14 - after I make this sequence now I'm gonna
100:18 - say for int I equals 0 I is less than
100:21 - sequence length I plus plus now what I
100:28 - want to do is say seek so but now I need
100:32 - to say that move but the other direction
100:35 - so car move or actually so string next
100:41 - move equals sequence car at i/o but I
100:46 - want to go backwards so I want to go
100:48 - from sequence length minus 1 all the way
100:54 - down to 0 I - - and then I want to get
100:59 - each one of those characters
101:02 - what's wrong with car at I it's not a
101:05 - string it's uh
101:07 - so I'll just convert it into a string
101:10 - whoo that's I can't can I do this - oh
101:16 - wait oh how do I flip the case
101:31 - how do I flip the case because I can't
101:34 - just do two lower case or two upper case
101:42 - [Music]
101:51 - hmmm how do I flip the case six bit of
101:59 - the string XOR with 32 subtract some
102:10 - value but I have to add or subtract
102:13 - based on what it is X or 0 X 32 I don't
102:18 - think you could do X or in oh yeah that
102:23 - like that I like that I like that
102:24 - alright so if somebody just gave a
102:26 - suggestion who was that
102:28 - I get I like Mike this crazy way of
102:30 - doing it
102:31 - mixing Nick seen in this shop thank you
102:36 - to MC seen in the chat who just gave me
102:39 - a really nice suggestion I'm gonna say
102:42 - flip case sequence car at so I'm gonna
102:48 - write my own flip case function it's
102:50 - going to be kind of ridiculous flip case
102:53 - of car any given character C and what
102:59 - I'm gonna do is if so first I need to
103:03 - give make it a string sure I could just
103:06 - do that
103:07 - if está lo - I know it's lower case if
103:11 - it equals itself right if the lowercase
103:17 - version of the string is the same as the
103:20 - string and I think I want to say it this
103:22 - way if s equals s this is just a little
103:24 - clearer if s equals s to lower case then
103:27 - return s to upper case otherwise return
103:33 - s to lower case and people were giving
103:35 - good suggestions about using X or
103:37 - flipping bits or adding the ASCII values
103:39 - that would be a nice way of doing it
103:41 - apparently that's not a way you can make
103:43 - a string I'll just do this think that
103:46 - works that's one way to make a string
103:49 - okay plus equals flip case oh no just
103:54 - next move up so oh no next move
103:59 - yes next move equals flip the case and
104:02 - then sequence
104:05 - plus equals next move alright let's have
104:08 - it shuffle pretty fast like every five
104:13 - frames and let's see what happens
104:16 - I got an error of lexical
104:27 - [Music]
104:31 - oh I have hit the spacebar to started
104:38 - [Music]
104:43 - shuffle shuffle shuffle shuffle shuffle
104:49 - [Music]
104:54 - let's do let's finish this off with just
104:59 - doing like 200 moves let's forget about
105:04 - slowing it down and let's just enjoy
105:08 - this beauty let's make it fullscreen and
105:19 - thank you for watching part 2 oh I have
105:22 - to space Bihar thank you for watching
105:24 - part 2 of my Rubik's Cube coding
105:26 - challenge where I am now shuffling the
105:28 - cube moving all the pieces around then
105:31 - unshunned it backwards to make it appear
105:34 - as if it's solving of course it's not
105:35 - actually solving itself it's just doing
105:37 - a sequence and then turning it back and
105:39 - there we go so the next step that I need
105:41 - to do is I need to be up I want to see
105:44 - it animate I think would be much more
105:46 - interesting to actually watch the faces
105:48 - themselves turn that's just a little
105:50 - animation thing that'll come in part
105:52 - three once I have that then I can start
105:55 - to think about are there different
105:57 - techniques that I can try to apply to
105:58 - have the cube solve itself automatically
106:01 - thanks for watching this very long part
106:04 - 2 if you make your own version of this
106:06 - if you figured out clever ways to
106:08 - refactor my code to visualize it in
106:10 - interesting different ways to make it
106:11 - more generic with different scales you
106:13 - maybe can make one of those pyramid it's
106:15 - not a cube those Rubik's pyramids oh
106:17 - that would be great and I'll see you in
106:19 - a future video good bye yeah okay
106:26 - alright so I'm gonna take a break in a
106:29 - minute and I'm gonna I'm gonna do the
106:31 - animation part today it's 12:15 I've got
106:34 - a little more time in me today and I'm
106:37 - gonna do my sponsor segment now and then
106:45 - take a short break and then come back
106:47 - and do the animation and yes genetic
106:49 - algorithm is the first thing I'm going
106:52 - to start to do I'm recording this to
106:53 - disk I've got green on the stream I've
106:56 - got my Rubik's cube here I hope there's
107:00 - not a mistake in here there easily could
107:02 - be a mistake I have
107:03 - really looked at this super closely but
107:06 - they're lovey but the code is much it's
107:09 - problems but this is this is better this
107:11 - is like there's more to work with here
107:13 - alright so I'm going to tell you about
107:16 - brilliant brilliant is the sponsor of
107:21 - brilliant work is the sponsor of the
107:23 - coding training live streams for the
107:25 - last several live streams have been
107:26 - really enjoying this collaboration and
107:28 - really thankful for this opportunity to
107:31 - have the sponsor brilliant our work is a
107:33 - website that has a lot of daily problems
107:35 - in math science computer science lots of
107:38 - interactive courses algebra quantum
107:40 - computing I'm sure there's gonna be some
107:42 - stuff about black holes on brilliant
107:44 - sometime soon I wouldn't be surprised
107:46 - and what I like about brilliant is it's
107:48 - a chance a one I use it for now looking
107:51 - through it and getting ideas or things
107:52 - to do it's coding challenges but it's
107:54 - really a way for me to practice to learn
107:56 - through practicing and I've really
107:58 - especially also been enjoying the
108:01 - discussions that I find about people
108:03 - solution to problems so last time a
108:05 - couple weeks ago I looked at brilliant
108:08 - and it looked at what was the thing that
108:10 - I saw oh right it was a problem a set
108:12 - theory problem set which looked at the
108:14 - intersection between multiple sets and I
108:16 - made a p5 jazz sketch that visualized it
108:18 - and pretty really there's a lot of
108:21 - computer science courses now let me go
108:22 - to the website and you know this is
108:27 - probably the stuff that would be the
108:29 - most relevant to what the kind of things
108:32 - that I'm doing on this channel computer
108:34 - science algorithms computer science
108:35 - fundamentals and what I want to
108:37 - highlight let's what I like to do now
108:38 - during the sponsor segment is to pick
108:41 - one of these challenges and try to solve
108:44 - so the one that I I'm not gonna I think
108:47 - what I'm gonna do is I'm so this is the
108:49 - challenge from today it's about decision
108:51 - trees how long is this journey through
108:53 - the trees we'll come up with an answer
108:55 - in the next five minutes or so but I'm
108:59 - gonna actually step back for a second so
109:01 - this is a little trio of challenges
109:04 - started on Monday with computer
109:06 - classifiers cataloging ceaselessly so if
109:09 - I go to this one and this is looking at
109:11 - a decision tree so let's let I don't
109:13 - want to like talk about decision trees
109:14 - and the
109:15 - a challenge that I have that's the most
109:17 - similar to this is probably the binary
109:20 - tree challenge and I should probably do
109:22 - a video on making a decision tree so let
109:27 - me let me get the whiteboard going again
109:31 - and find my marker so I'm gonna go
109:35 - through Monday's challenge and Tuesday's
109:37 - challenge and then I'm gonna talk to you
109:41 - about today's challenge and then I'm
109:43 - gonna take a break and if you're
109:44 - interested you can sign up for brilliant
109:46 - and put your answer in there so here's
109:49 - the thing I have a coding challenge all
109:50 - about binary search trees a binary
109:54 - search tree is a data structure for
109:56 - storing info I'm not in the right hello
109:59 - I have a coding challenge about binary
110:01 - search trees so a binary search tree is
110:03 - a data structure for storing information
110:06 - in a in a binary tree and if the
110:10 - information I'm storing for example is
110:11 - numbers I might put numbers that are
110:13 - bigger on the left side and smaller on
110:16 - the right side or vice versa texts I
110:18 - could do it by alphabetical order and so
110:21 - visualizing a binary tree might look
110:25 - something like this and the information
110:28 - is going to be in sorted order and make
110:30 - it easier to search through it find
110:31 - things you go check out I think it's a
110:33 - coding challenge I don't know what the
110:34 - number is where I do a binary search
110:35 - tree a decision tree has this same exact
110:39 - structure and it's really good think of
110:41 - it like a flow chart you've seen these
110:42 - where you're answering yes or no
110:44 - questions so I might say something like
110:47 - you know if you if I were trying to
110:49 - classify animals or fruits these are the
110:51 - guy you can use it for a classification
110:52 - or actually a regression problem
110:53 - definitely do videos on this so a
110:56 - decision tree for example if I was
110:58 - trying to classify animals the first
111:00 - question might be I actually this is
111:01 - exactly this is what the example on
111:03 - brilliant is oh no they're using bigger
111:04 - than a breadbox literally a breadbox
111:06 - that's there that's much funnier and
111:08 - more clever than me let me come up with
111:09 - some animals so I might say do I have
111:11 - fur so if I say yes I would go in this
111:15 - direction the question here is fur
111:17 - question mark if I would say no I would
111:20 - go here then I could either arrive at
111:23 - the answer or another question so fur I
111:26 - might say now do I walk on
111:29 - I don't know Am I am i bigger than a
111:33 - breadbox right breadbox and if I were to
111:37 - say yes then maybe I am a what's an
111:40 - animal bigger than a breadbox with fur a
111:42 - large up dog papi I really been I'm so
111:48 - bad at coming up with these examples on
111:50 - the fly she's done fruit I'm really much
111:51 - more familiar with fruit so let's say
111:53 - let's say I say no then maybe I'll say
111:56 - Mouse you know nice that fur right so
112:00 - this would actually be known as a leaf
112:03 - it's no longer a question it's actually
112:06 - an answer you've arrived at a leaf and
112:08 - these are nodes so the decision tree you
112:11 - can either have nodes and leaves and
112:13 - this these can be quite complex so let's
112:16 - look at this first challenge so if a
112:19 - decision tree I've actually already
112:21 - answered this 100 good
112:23 - I've already answered this one and of
112:26 - this camera went off so I won't reveal I
112:31 - won't scroll down too far to reveal the
112:32 - answer but decision tree has 15 nodes
112:36 - how many leaf leaves couldn't have so we
112:41 - could diagram this all right if there's
112:44 - 15 there's actually a relationship
112:46 - between the number of nodes and the
112:49 - number of leaves the binary tree can can
112:51 - kind of have any number of things but in
112:55 - but so so if they're like let's let's oh
112:59 - I'm not at the whiteboard again
113:01 - so dirt with the decision tree let so
113:05 - there's what was the question
113:06 - 15 nodes so we know there are 15 nodes
113:12 - so if there are 15 nodes how many leaves
113:16 - are there I'm looking at yeah no it's
113:24 - good I guess the question that I'm
113:26 - asking now is oh but okay so actually in
113:32 - this case we're talking about total
113:34 - nodes so all of these are nodes so I'm
113:37 - actually describing it a little bit
113:38 - differently all of these are nodes but
113:41 - three of them are leaves
113:43 - so you can see there's five nodes but
113:45 - leaf nodes are the ones that no children
113:48 - so in this case if there are 15 nodes
113:52 - total and we're gonna this is going to
113:55 - reveal what is the relationship between
113:57 - nodes and leaves so there are kind of
114:01 - two extreme cases we could look at it at
114:03 - a diagram of decision tree and this is
114:07 - has to do with like how trees are
114:08 - balanced balancing trees trees perfectly
114:10 - let's make a perfectly balanced tree
114:13 - with 15 nodes what I mean by that is 1 2
114:17 - 3 4 5 6 7 8 9 10 11 12 13 14 15
114:32 - oh how nicely that works out excuse my
114:34 - poor drawing here but you can see there
114:36 - are 15 nodes how many leaves are there
114:39 - all of the leaves are all this bonding
114:42 - this by the way is root is a term that's
114:43 - known as depth so the depth of this or
114:47 - this orientation of the decision tree is
114:50 - this depth one is this one I don't know
114:53 - whether I should count from 1 or 0 but
114:54 - let's say we count from 0 0 1 2 3 4 so
114:58 - it's either 4 or 5 depending on how it's
115:00 - technically referred to and I'm probably
115:01 - on early a tourist Wikipedia page we
115:03 - could find that out precisely but this
115:05 - how far is the depth and we can see that
115:08 - there are 1 2 3 4 5 6 7 8 8 leaves so
115:13 - but what if I do the tree in a different
115:16 - orientation let's take the most extreme
115:18 - unbalanced version like what if this is
115:23 - the root if I answer yes I'm going here
115:28 - if I answered no I've already got a leaf
115:31 - so this is the least so then here if I
115:36 - answer yes here no yes no yes so this is
115:42 - like this the depth is as this is as
115:45 - deep as it's going to get so let's see 1
115:48 - 2 3 4 5 6 7 8 9 10 11 12 13 oh I'm gonna
115:54 - run out of space 14
115:56 - I will just go higher oh but that's I
115:59 - messed that up all right there's one
116:01 - well can you see this here oh it's
116:02 - perfect I have just the right amount of
116:04 - space 15 right so look at this these are
116:09 - all the questions yes always leads me to
116:12 - another question right this is question
116:14 - question question question question
116:17 - question question and these are the
116:19 - leaves 1 2 3 4 5 6 7 8 once again there
116:23 - are 8 but the depth is one to try 1 2 3
116:28 - 4 5 6 7 8 so the depth here is 8 the
116:31 - depth here is 1 2 3 4 4 so you can see
116:36 - how no matter how the tree is organized
116:39 - we still have 8 leaves 15 nodes total 7
116:48 - question nodes 8 leaves so if we come
116:53 - back here we can see oh look I got it
116:57 - right so that bit so now we can move on
117:03 - let's move so that that's I would love
117:04 - to program this and we could visualize
117:06 - it that's the thing that I would look
117:08 - you should tackle and try I like to
117:10 - program little JavaScript versions and
117:12 - then take a screenshot and put it in the
117:13 - answers you can see here ok so this is a
117:16 - nice by the way answer that's like going
117:18 - through the same exact thing with some
117:19 - formulas applied let's go to Tuesday's
117:25 - what questions lie deep in the trees so
117:28 - I'm gonna stop here I'm not gonna scroll
117:32 - down
117:33 - wait oh no oh sorry I I can't reveal the
117:39 - options without showing you the answers
117:40 - but it's fine because I already look at
117:42 - this but that's ok you have a decision
117:46 - tree with 2,000 leaves that allows you
117:49 - to distinguish 2,000 different animals
117:51 - which of the following could be the
117:54 - depth of the deepest leaf in the tree
117:57 - select all that apply
117:58 - oh and look at this nice helpful guide
118:00 - so we should be able to have a way of
118:03 - figuring this out right if there were
118:06 - eight leaves
118:10 - this would be the minimum depth if there
118:15 - were eight leaves this this would be the
118:18 - minimum depth this would be the maximum
118:20 - depth eight so one thing we can know is
118:25 - the maximum depth if there are what did
118:28 - what did we say there were two thousand
118:30 - leaves the maximum death would depth
118:33 - sorry impacts of of death the maximum
118:36 - death kids ahead the maximum depth depth
118:40 - such a hard word to say especially if
118:42 - you've been talking for two hours
118:43 - straight would be two thousand because
118:45 - we're gonna the first the first the
118:49 - first answer would be at depth equals
118:51 - one then two then three the fourth and
118:53 - five and six and seven it's actually one
118:55 - less I guess it would be 1999 if this is
118:58 - counted as one I really should I maybe
119:00 - somebody in the chat is telling me the
119:02 - answer of this already nobody in the
119:07 - chat has told me whether I should be
119:09 - counting from zero or not when actually
119:10 - considering the depth but so I might
119:12 - have it off by one error but I'm pretty
119:14 - close it's gonna let us answer the right
119:15 - now what's the minimum depth well if
119:18 - there are two thousand leaves we can
119:22 - think about it how many if they're eight
119:24 - eight divided by 2 is 4 divided by 2 is
119:27 - 2 divided by 2 is 1
119:28 - how many minimum steps do we have to get
119:31 - to the answer
119:33 - well 2,000 divided by 2 is 1500 250 125
119:42 - etc etc you know so I could do keep
119:44 - doing this and count it but there's
119:45 - another way to do this log base 2 of
119:48 - 2000 that should give us the minimum
119:51 - depth so we know that the tree could be
119:54 - organized anywhere between this minimum
119:57 - depth and this maximum depth and so if
120:00 - we look at the answers oh well let's
120:03 - look at what log log base 2 of 2000 is
120:11 - doesn't Google won't just tell me that
120:13 - log base 2 of 2000 is 11 basically so it
120:20 - should be anywhere between 11 and
120:23 - to 1990 not 2000 and you can see this is
120:26 - the correct answer
120:27 - it can't be 10 it's got to be at least
120:29 - 11 but it could be 15 150 or 1500 let's
120:32 - see if I did that right yes so it has to
120:36 - be greater than 11 and the number of
120:38 - leaves - 1 1999 so that's the way to
120:40 - consider the depth anywhere between 11
120:42 - 1999 thank you - Gordon Chan who has
120:45 - answered this and there's a nice
120:46 - discussion of that here all right so now
120:49 - today's challenge which this is from
120:51 - yesterday I'm gonna go back is how long
120:55 - is the journey I have an answered answer
120:57 - this one on purpose so now let's look at
121:01 - this you have and I'm gonna let you
121:03 - think about this while I take a break
121:04 - and get some water and you know do some
121:08 - other things you have two decision trees
121:10 - little tree has 41 nodes 20 question
121:14 - nodes and 21 leaves 21 leaves that's
121:16 - hand of the key number for you there big
121:18 - tree is 2001 nodes a thousand one leaves
121:21 - you don't know anything about how either
121:23 - tree is organized right it could be a
121:26 - perfectly balanced decision tree or it
121:28 - could be a sort of like the worst case
121:32 - scenario where there's you know a depth
121:34 - row essentially of that tree for every
121:37 - single question so you know so you're
121:46 - gonna ask each tree a question and you
121:48 - don't know it could it in the case by
121:51 - the way of this tree it could take just
121:55 - you could get lucky and you get the
121:57 - answer after just like one question so
122:00 - but you have you know you could also get
122:02 - unlucky in this case and a half to go
122:04 - dick you know 2,000 asked like 1999
122:07 - questions if it were balanced you would
122:11 - know that you always have to ask 11
122:13 - questions but that's so the
122:16 - so the minimum would actually be one the
122:19 - maximum will be 1999 for if it's
122:21 - unbalanced if it's balanced it would be
122:23 - 11 so in this case with these two trees
122:26 - what what which of the following
122:28 - statements are true would little tree
122:31 - always be faster than big tree think
122:34 - about that easy if you don't know how
122:36 - they work
122:37 - isn't there a way that you could
122:39 - organize big tree and organize little
122:41 - tree so that big tree was actually
122:45 - sometimes faster not always but
122:47 - sometimes faster I don't know think
122:48 - about that for some tree shapes using
122:50 - little tree is sometimes slower and
122:52 - sometimes faster and then for some tree
122:55 - shapes using little tree is always
122:57 - slower so this is so I you know I think
123:04 - a way to think about this question is
123:06 - just to think about those two extreme
123:07 - cases what if both trees are perfectly
123:10 - balanced what if those both trees are
123:12 - perfectly unbalanced what would the
123:13 - answer for all three of these questions
123:15 - be so think about that we'll I'll come
123:19 - back in about five minutes and do the
123:21 - answer write your response there you can
123:24 - sign up for free at brilliant org slash
123:26 - coding training please go to that URL
123:28 - lets you know that lets them know that
123:29 - you found brilliant from the coding
123:31 - train and that that helps me out if
123:33 - you're if you feel so inclined and also
123:36 - if you're interested in a premium
123:37 - subscription to get access to all of
123:39 - their courses and all their materials
123:40 - the first 200 subscribers to sign up
123:43 - from that link will get 20% off okay so
123:46 - I'm gonna just I'm gonna mute my
123:48 - microphone let me make sure this is
123:50 - oriented so you can see it I'm gonna
123:53 - mute my microphone and then we will come
123:57 - back and discuss the answer I'll be back
124:01 - actually I'm just going I'm gonna take
124:03 - away my image and place the music oh if
124:06 - I'll do that correctly this time
124:14 - [Music]
125:35 - [Applause]
125:36 - [Music]
125:37 - [Applause]
125:38 - [Music]
125:42 - [Applause]
125:45 - [Music]
126:22 - [Applause]
126:24 - [Music]
129:32 - as always I always forget this stop this
130:00 - stop this stop this done and then this
130:03 - stop this stop
130:06 - [Music]
130:15 - [Music]
130:25 - [Music]
130:29 - this stock this stock is fun
130:32 - never forget this stuff I'm gonna do
130:35 - this this dot this dot this dot this dot
130:37 - song never forget the Vista but somebody
130:40 - composed that song for me
130:42 - [Music]
130:53 - I'm gonna say once again coordinates
131:03 - [Music]
131:06 - it's
131:07 - our new coordinates
131:12 - [Music]
131:24 - and auto-tune and the internet will fix
131:27 - that for me
131:36 - coordinates
131:39 - [Music]
131:42 - it's the Cartesian coordinates and it's
131:47 - not for do Cartesian coordinates its
131:52 - Cartesian coordinates
131:55 - [Music]
132:40 - setting my mic back on boom I am now
132:44 - visible so let's talk about this problem
132:55 - [Music]
133:02 - all right hopefully you've thought about
133:04 - this maybe you have an answer maybe you
133:06 - already submitted an answer on brilliant
133:08 - if you did I hope you signed up through
133:09 - brilliant org slash Cody crane but let's
133:13 - talk about the answer to this problem
133:14 - right now you have two decision trees
133:17 - little tree has 41 nodes so 21 leaves
133:20 - big trees 2001 nodes so a thousand and
133:23 - one leaves we don't know anything about
133:25 - how either tree is organized so if
133:29 - answering any single nodes question
133:31 - takes the same amount of time so it's
133:33 - like you don't have to think about the
133:35 - questions for a longer period of time
133:36 - wherever you are on that tree which of
133:39 - the following statements are true for
133:41 - some tree shapes using little tree is
133:44 - always faster than using big tree let's
133:47 - think about that so remember I talked
133:50 - about previously in the case of a
133:52 - balanced tree a perfectly balanced tree
133:55 - it takes log base 2 of the number of
134:00 - leaves then a log base 2 of the number
134:03 - of leaves so if we're thinking about log
134:06 - base 2 of how many leaves were there
134:09 - again 21 and a thousand and one log base
134:12 - two of 21 is always gonna be always
134:15 - going to be less than log base two of
134:17 - thousands this is true I would say all
134:21 - right now the third question I mean the
134:24 - second question for some tree shapes
134:26 - using little tree is sometimes slower
134:28 - and sometimes faster than using big tree
134:31 - so let's think about that this is
134:34 - relevant to the case of the the worst
134:39 - case scenario where every single level
134:43 - of the tree results in
134:45 - leave so it's possible that sometimes
134:48 - you're just gonna get even in the tree
134:51 - with a depth of 2,000 that you're gonna
134:55 - get to the answer off the first question
134:58 - whereas in a tree with the depth of 20
135:01 - you're gonna you could take 15 questions
135:03 - so while on average you would get to the
135:08 - answer more often faster than I would be
135:10 - an interesting probability to compute
135:12 - and we can run some simulations we could
135:15 - code with this that it is possible that
135:18 - sometimes little tree will be faster so
135:21 - that is correct for some tree shapes
135:26 - using little tree is always slower than
135:29 - using big tree could that be true I'm
135:36 - trying sir I'm just checking the chat to
135:38 - make sure no what's telling me okay
135:41 - could that be true could little could
135:45 - you could we come up with a shape where
135:48 - little tree is always faster no I don't
135:54 - think so
135:55 - I don't think so
135:59 - how could we prove that they get about
136:02 - this how could we prove that we're
136:09 - little tree lowing we could come up with
136:10 - a shape where little tree is always
136:13 - faster is there a shape where little
136:15 - tree is always slower no because no
136:17 - matter what the shape no matter what
136:20 - shape we pick it's always going to have
136:23 - a big tree is always gonna have a
136:26 - maximum depth greater than the maximum
136:30 - depth of little tree right they could
136:32 - have a minimum each have a minimum depth
136:33 - of one or they could have different
136:35 - minimum depths so that you that that the
136:38 - that you could possibly sometimes it
136:42 - little tree could be slower than then
136:45 - big tree but the maximum depth of big
136:48 - tree is always no matter what the shape
136:50 - is always going to be greater than the
136:54 - maximum depth of little tree
136:56 - I think that's right so I think this is
136:58 - false pretty sure I've gotten this right
137:03 - okay hit submit
137:05 - correct you I'm not getting fired from
137:10 - my sponsorship job here uh-huh you know
137:13 - but getting it wrong is actually the
137:14 - point learning is trying to think this
137:16 - stuff getting it wrong and let's look at
137:18 - the explanations so we can look at the
137:21 - explanation ah here we go this looks
137:23 - like a nice one so what looks like what
137:25 - happens is you can like sort of react to
137:29 - the explanations and some of them bubble
137:30 - up to the top and I've been seeing yo ah
137:34 - Pedro Alfonso quite a bit bubble up at
137:37 - the top here so if we look at the
137:38 - minimum depth and the maximum depth with
137:40 - a balance trees we have four and five
137:42 - and nine and ten wit and we have 120 and
137:47 - one in 1,000 so for some tree shapes so
137:50 - starting with a bounce little tree at
137:51 - depths of 4/5 we can only increase depth
137:53 - of one or more leaves if we decrease the
137:55 - depth of the other leaves if some
137:56 - increase to more than four or five
137:58 - others must decrease the less than that
138:00 - so it is not possible to put everyone
138:02 - with a depth greater than the depth of
138:04 - the best big tree the balance victory so
138:06 - this it's really unlocking this is
138:08 - really about looking at the minimal
138:10 - minimum depth and possible maximum depth
138:12 - let's see if some other explanations so
138:14 - uh I would love to see anybody watching
138:17 - if you're if you're so inclined to add
138:19 - your explanation there I'm going to
138:20 - check this later let's make you know if
138:22 - you make a p5 sort of sketch that
138:24 - animates this or explains this please
138:26 - share that with me all right thank you
138:28 - again for this brilliance please if
138:32 - you're interested in more about
138:32 - brilliant go to brilliant org slash
138:34 - coding trained to sign up and let them
138:36 - know that you found brilliant from the
138:37 - coding train and the first 200
138:39 - subscribers do if you're interested in
138:41 - the premium service will get 20% off all
138:45 - right so I think before I go it's almost
138:48 - 1 o'clock and I always say I've only got
138:50 - a live stream for two hours I seem to
138:51 - make it to 3 I think I would like to
138:55 - take this Rubik's Cube simulation that I
138:59 - just previously did and actually on
139:02 - animate it I'm feeling a little it's a
139:03 - little warm in here
139:05 - I'm gonna move my microphone to the
139:09 - shirt I don't think I'm gonna wear this
139:11 - sweatshirt anymore this wrote animation
139:18 - requires so let me move the code back to
139:23 - so a couple things I want to do is let
139:25 - me do save as this is gonna be part 3
139:29 - and then let me what do I want to do
139:37 - safe either save data sparked 3 oh and I
139:40 - don't want to fullscreen let's just go
139:42 - back to let's just go back to here and
139:50 - you let me do something I think it'll be
139:54 - a little nicer if I just like add those
139:56 - rotations so let me just actually do
139:59 - some things turns there's so much code
140:03 - here let me take these three functions
140:05 - and put them on a separate tab and what
140:16 - I let me try like rotate X by like point
140:19 - two and rotate Y five point three and
140:23 - maybe like rotate Z I like negative I
140:29 - just want it to start actually so let me
140:33 - rotate Y down so I can see it at the top
140:37 - well that didn't work
140:39 - Oh cuz I'm we do that first
140:45 - oh no that's rotate X that I want to do
140:47 - down look let me do that a little bit
140:53 - more I'll just do these arbitrary I'm
140:55 - just trying to put it in some kind of
140:57 - let me rotate Y a bit more also that's
141:03 - pretty good do a little more Thanks
141:10 - there we go I just want it to I wanted
141:13 - to start in a slightly rotated position
141:16 - so that when I do this I can watch it go
141:21 - okay so oh by the way I shuffled my cube
141:28 - so maybe I'll work on solving it maybe
141:35 - I'll work on solving it before I go do I
141:36 - still have my overhead camera oops
141:47 - yes but I'm not gonna do that right now
141:50 - although this would be good for me too I
141:52 - should have I should be using this when
141:54 - I want to like talk about the cube
141:56 - because if I look at it over here it's a
141:58 - it's not close up and whatever okay all
142:05 - right
142:07 - oh wait a second are the sides wrong
142:15 - yellow red so I'm looking at it yellow
142:21 - red green
142:22 - oops ah yellow red green orange white no
142:33 - no they're they're in the right
142:34 - orientation
142:35 - I might have up-down left-right messed
142:37 - up but you know whatever it does all the
142:42 - parts
142:58 - okay I want to do the animation alright
143:06 - so actually let me erase my decision
143:09 - tree stuff in case I need to use the
143:11 - whiteboard
143:23 - I'm gonna be really glad when this
143:25 - Rubik's Cube project is over there's all
143:29 - this other stuff I wanted I was like
143:30 - intending to do this month but I'm like
143:32 - totally obsessed welcome to part three
143:45 - of my Rubik's Cube coding challenge what
143:48 - I have currently is a Rubik's Cube
143:50 - simulation where I can do all the moves
143:52 - up-down left-right clockwise
143:54 - counterclockwise all that stuff and I
143:56 - can make a random sequence of moves then
143:58 - I can play out those moves do them in
144:00 - Reverse and I can see the result of that
144:02 - the Rubik's Cube is shuffling and
144:03 - unruffled however I guess I have to it
144:07 - won't do it again unless I how come I
144:11 - won't hold on I want to make it I want
144:14 - to be able to hit the spacebar and have
144:15 - it do it again so if I do the spacebar
144:21 - key pressed controls what did we call it
144:25 - counter equals zero yeah
144:32 - alright ok welcome to part 3 of my
144:48 - Rubik's Cube coding challenge but what I
144:51 - have so far oh wait wait wait I want
144:52 - this to be here I'm really gonna I'm
144:56 - gonna get it don't have to blow my nose
145:09 - hello and welcome to part 3 of my
145:12 - Rubik's Cube coding challenge so I've
145:15 - done two parts already if you watch
145:16 - those I'm very thankful to you and but
145:19 - I'm gonna do something really important
145:21 - in this and it's really not about the
145:22 - Rubik's Cube at all it's really about
145:24 - animation and I want to be able to just
145:25 - do something to make it a little more
145:27 - visually pleasing to watch it do stuff
145:29 - so what it does right now is if I hit
145:30 - the spacebar it's gonna shuffle a whole
145:33 - bunch of moves all the possible moves up
145:35 - down left right clockwise
145:36 - counterclockwise it could do any move
145:38 - along any axis it's also then going to
145:40 - whatever it's doing a random sequence of
145:42 - 100 moves and then it's gonna do those
145:43 - in Reverse and you can see it looks kind
145:45 - of like it's solving it of course it's
145:46 - not just doing a random sequence and
145:48 - then applying it in Reverse
145:49 - it's the spacebar again it's gonna go
145:50 - again it's actually doing the same
145:51 - sequence again so this would be I think
145:54 - more what a I would be a little more
145:57 - confident that it's working correctly if
145:59 - I could actually watch the the cube the
146:02 - cube ease rotate themselves to actually
146:05 - turn so in order to do that I need to
146:07 - add an anime I need to add animation you
146:09 - actually use the rotate function to do
146:11 - that so I have to figure out how to do
146:14 - that
146:25 - add double turns yeah that would make
146:27 - sense okay
146:36 - all right I think good I think a way
146:39 - that's going to make sense to do this is
146:40 - to create a class called move and each
146:46 - move is what it's a given axis like
146:50 - what's the axis that's moving what's the
146:52 - direction it's moving and then if I'm
146:54 - going to do an animation I need to
146:55 - animate an angle from 0 to 90 degrees so
146:58 - I need an angle which will start a zero
147:02 - I need to have an axis and maybe what
147:05 - I'll do is just do x y and z mm-hmm so I
147:14 - know what axis it is is that what I want
147:17 - to do
147:25 - yeah
147:30 - yeah angle axis and axis yeah an angle
147:49 - an axis and I'll have that access just
147:52 - stored in variables XY and Z so so the X
147:55 - will be one or negative one if it's
147:57 - right or left the Y will be one or
147:59 - negative one it's up or down the Z will
148:01 - be one or negative one if it's front or
148:02 - back so that's kind of I think how I'll
148:05 - deal with this right now so when I make
148:07 - a move I have to give it an x y&z and
148:11 - that's all I have to give it oh in a
148:13 - direction so I need to know whether I'm
148:15 - rotating
148:17 - well then I'm rotating clockwise or
148:19 - counter clockwise or the angle is going
148:21 - up or the angle is going down so this
148:24 - dot x equals x this dot y equals y this
148:28 - dud C equals Z the stock Direction
148:29 - equals direction and this so ultimately
148:36 - I've kind of done this already in the
148:38 - sense that I have these functions called
148:42 - turn Z turn Y turn X and those actually
148:46 - move the cubes around and rotate their
148:49 - faces but they do it instantaneously so
148:52 - what I think I want to do is create an
148:53 - animation that happens then I finish
148:56 - that animation then I quickly move
148:57 - everything around and it will look as if
148:58 - it's happening seamlessly so let's just
149:01 - say for the sake of argument I'm gonna
149:03 - have one move move em I'll call it move
149:06 - and move em and forget about this so
149:10 - I'll leave the sequence thing in here
149:11 - second move is a new move which is going
149:15 - to rotate the z axis the front face so
149:19 - that is 0 0 1 in a clockwise direction
149:23 - that's a move then I want to say move
149:28 - dot start I think I'll have a function
149:31 - called start and what does that do
149:35 - it sets a variable I'll have a variable
149:38 - called animating and it sets animating
149:43 - equal to true I don't know that I'm
149:46 - gonna need this but I feel like I might
149:47 - need a flag to know when I've started or
149:49 - stopped so then I need an update
149:52 - function and what update will do is I
149:55 - could use lurk for it to like
149:57 - interpolate from zero to ninety degrees
149:59 - or I could just increase the angle so
150:02 - let's just increase the angle right now
150:03 - I'm gonna say angle plus equals
150:06 - direction times you know some amount
150:08 - like point one so I'm going to increment
150:10 - the angle by 0.1 and if angle is greater
150:14 - than half pi then angle should go back
150:20 - to being zero actually and then I'm
150:24 - gonna say animating equals false so
150:29 - let's just see if I can get this to
150:31 - happen so basically if I have a move and
150:35 - then I say move dot start then in draw I
150:39 - just want to say move to update and if I
150:42 - run this so the data of the move is
150:48 - happening that that angle is changing
150:50 - but I need to actually rotate these so
150:52 - the way that I could do that is right
150:54 - here when I'm showing the cube I could
150:57 - check and say if cube well right here
151:01 - just a if cubed Z equals move Z let's
151:06 - just do that right if cube dot C equals
151:08 - move Z then I want to rotate Z by move
151:15 - dongle and I'm gonna want to have a push
151:19 - and a pop here alright that should then
151:23 - move Z cannot be resolved or is not a
151:27 - field move has a Z Oh cube index i if
151:34 - cube index i right if cube index i dot c
151:40 - we go look at it it's turning kind of
151:45 - doing something what's it doing why does
151:46 - it keep going
151:49 - so a update should only update the angle
151:57 - if it's animating so once it reading and
152:05 - it stops animating so now we should see
152:08 - it turn oh you know what I think I'm
152:12 - having this weird issue with processing
152:14 - which is that it takes a little while
152:16 - for processing to start so what I'm
152:18 - actually gonna do is I'm going to have
152:20 - move dot start go into when I when I
152:26 - press the spacebar just so I can be sure
152:29 - it hasn't started yet so I'm gonna run
152:31 - this sketch I'm gonna hit the spacebar
152:32 - there we go look at that it moves but
152:35 - look at this it moves but the red stuff
152:37 - doesn't stay there because all I'm doing
152:39 - is creating the animation of the movie
152:41 - I'm not actually updating the data but I
152:43 - need to update the data so I can do all
152:45 - the future moves but I think there's an
152:47 - easy thing I can do here which is I can
152:49 - say move dot update if move dot finished
152:55 - then what do I want to do turn Z move
153:00 - dot direction turn Z isn't that a
153:03 - function Oh turn Z move Z moved out
153:07 - direction so I think there's got to be a
153:09 - way I can encapsulate this into one
153:10 - function there's no finished so I
153:12 - probably just used the animating boolean
153:14 - right mmm that's another one finished is
153:19 - false finished is true and then boolean
153:26 - finished returned finished so now what
153:33 - should happen is it should animate oh
153:38 - that's weird why is it going back and
153:40 - forth so move updates if move is for oh
153:49 - because it's doing this over and over
153:50 - again so ultimately I want them when the
153:54 - move is finished I want to turn it once
153:56 - and then be done so really what I should
153:59 - do is put this
154:01 - z Intendant move yes so actually I don't
154:09 - know if I need that boolean variable at
154:10 - all what I want is when it's done I
154:12 - won't actually just say turn Z move
154:16 - according to this Z and this direction
154:18 - right and then I don't need this finish
154:21 - stuff I'm gonna keep that in there just
154:23 - in case I need it so now it's your turn
154:30 - there we go
154:31 - look at this oh so now I'm turning it so
154:37 - this is the idea this is the logic I
154:39 - just want to hit the spacebar it's doing
154:41 - every single move now the question is
154:43 - now that I've got this working how can I
154:46 - make every move work in the same way so
154:50 - there's some things that are kind of
154:51 - hard coded in here for example this
154:53 - shouldn't always be turn Z right this
154:55 - should sometimes be turn X or turn Y our
154:58 - turn Z we want to deal with this
155:22 - so before I do that though let me just
155:25 - make sure it works in other directions
155:26 - so for example if I were to say a
155:29 - negative one that should be the back of
155:32 - the cube okay so that's working and if I
155:37 - were to say one negative one that should
155:41 - be the front of the cube but going now
155:43 - in counterclockwise direction okay ah so
155:47 - that doesn't work so why doesn't that
155:49 - work because if I'm going in
155:50 - counterclockwise direction I'm going all
155:52 - the way to negative half pi so that's
155:54 - something I need to fix so here if angle
155:58 - so I could say if absolute value of the
156:00 - angle is greater than half pi so if I'm
156:03 - going in the negative direction I need
156:05 - to check negative half pi that should
156:06 - fix that great so now I can go in either
156:11 - direction only in the z axis so what if
156:15 - I make a move that is now the x-axis oh
156:24 - so if I say 1 0 0 1 this should be right
156:27 - I think I have things flipped so it
156:29 - might end up being the left and the way
156:30 - that we're looking at it but if I want
156:32 - to rotate along the x axis so if I do
156:35 - that now it's confused it's doing
156:42 - something totally nonsensical that's not
156:44 - the correct rotation so the issue here
156:48 - is that if cube Z equals move Z right
156:55 - cuz so here what I really want to say if
157:00 - absolute value of cube index i z is
157:04 - greater than 0 so i probably should have
157:07 - a variable that's keeping track of the
157:09 - actual index but really what i want to
157:12 - just say is is cubes if is it the z axis
157:15 - then do this
157:17 - so now nothing should happen if
157:21 - something did happen oh because whoa oh
157:25 - it's still doing this but that we
157:28 - shouldn't see that animation ok so let's
157:30 - try to get the x axis else
157:33 - if the absolute value of cube X and cube
157:37 - x equals move X then I should say rotate
157:43 - X moved on angle all right so this now
157:45 - would do the x-axis and this should be
157:48 - an else--if because I'm never gonna do
157:50 - two at the same time so this should be
157:53 - rotating the x-axis the issue is now and
157:56 - move update when I get to this part I
158:00 - don't want to do turn Z I want to do
158:03 - turn X hmm so that I could do the same
158:06 - thing I guess if a by callback functions
158:11 - or something would in JavaScript would
158:13 - really help me here it's probably way to
158:14 - do that in Java but I'll just do the
158:15 - same thing if absolute value of Z is
158:18 - greater than zero turn Z otherwise if
158:21 - absolute value of x is greater than zero
158:24 - turn X X direction so let's oh this
158:30 - should be X so I'm I'm kind of getting
158:33 - lucky here because there's only three
158:34 - possible axes but it definitely would be
158:36 - useful for me to use like and a new a
158:39 - new robo if I get indexed to the axis
158:41 - but let's just see if this works
158:43 - so now this should be the x axis awesome
158:48 - so that works I've got the x axis so now
158:52 - I should be able to do the y axis turn
158:58 - the y axis axis axis all right now I
159:06 - should be able do the y axis turn the y
159:08 - axis let's just check a y move let's
159:13 - make them move 0 1 0 oh it's not
159:21 - animating why is it not animating so
159:25 - what did I do wrong oh I didn't I didn't
159:29 - do that here I need to add the y
159:37 - so now this should do the y-axis oh no
159:42 - something's wrong
159:42 - Oh I'm going the wrong direction so I
159:45 - think this should be negative angle cuz
159:50 - that my y-axis is flipped yeah there we
159:53 - go
159:53 - you know I I might have whatever it
159:58 - works there might be something that I'm
160:01 - actually done wrong here but I I want
160:03 - the data is moving correctly I just need
160:05 - to make sure the animation matches that
160:06 - so now instead of having this all moves
160:13 - be just these letters now all moves is
160:20 - an array of move objects move new move
160:25 - array with new move
160:28 - so up is 0 1 0 in the One Direction you
160:35 - know what let's just do I might as well
160:38 - just do them all I mean I can always
160:39 - invert them but let's do it let's just
160:42 - actually do them all so this is this is
160:44 - up in both directions this is OK hold on
160:49 - I'm gonna I'm gonna speed through this
160:51 - so you don't have to watch all this up
160:53 - in both directions down in both
160:58 - directions
161:06 - right
161:11 - oh shoot
161:16 - Oh
161:19 - right
161:25 - and left and then I need I did up down
161:33 - right left front back that's what I need
161:35 - now so front front back so now
162:00 - all right I put in all the moves up down
162:03 - left right front back clockwise
162:06 - counterclockwise this should be
162:09 - everything it should be 12 in there 1 2
162:10 - 3 4 5 6 7 8 and I tell him 12 that's all
162:13 - the moves so I should be able to now
162:15 - pick any give and move and all moves and
162:24 - animate that one and just sort of see oh
162:27 - wow this sequence this sequence stuff
162:30 - has to change so the sequence stuff I'm
162:32 - going to do in a second but I was using
162:33 - strings before that won't work we take
162:35 - this out so any given move I should be
162:39 - able to do so this is move 3 index 3 0 1
162:42 - 2 3 so that should be the bottom oh I've
162:46 - already spun it that should be the
162:49 - bottom in a certain direction whatever
162:53 - great so hopefully that's the right one
162:56 - that matches up now the sequence is
163:00 - let's make it an ArrayList an ArrayList
163:04 - of move objects this will be the
163:08 - sequence and I know if you're a cue bird
163:11 - there's actually like a back to which is
163:13 - right ologist consider that back in the
163:15 - same direction twice for now so we can
163:19 - consider this to be an ArrayList of
163:21 - moves and when I'm making that sequence
163:26 - if I'm going to make let's just do 10
163:29 - I'm gonna pick the size and I'm gonna
163:34 - say pick an index then I'm gonna have
163:38 - move and equals all moves get that index
163:43 - this has an extra weight inte R and Amol
163:46 - moves sighs isn't that what what's wrong
163:51 - with that errors oh oh all moves is all
163:56 - moves sorry all moves is sorry all moves
164:02 - is an array moves is an ArrayList
164:06 - so that's index all moves index R that
164:09 - stays the same and then I'm going to say
164:11 - sequence dot add
164:14 - so this is me putting in ten moves in a
164:20 - sequence so let's not worry about
164:22 - inverting the sequence
164:24 - let's not flip case I think is no longer
164:26 - a thing anymore and then I need a
164:29 - current indexes current move which is
164:31 - counter so I also need this to be let's
164:35 - call this current move so there's a
164:37 - current move and current move starts at
164:41 - current moves equals sequence get
164:46 - counter so it gets the first one then
164:49 - I'm going to say current move update
164:52 - guess what this finished thing is going
164:54 - to come in handy perfect if current move
164:56 - is finished then index load echo counter
165:05 - plus plus and current move equals
165:15 - sequence get counter and I definitely
165:21 - need to make sure that I only do this if
165:28 - counter is less than sequence length so
165:32 - I'll put this if statement in here I
165:35 - don't think and I'm gonna do this whoops
165:44 - put this sequence in there and then I'm
165:46 - gonna say if started around here so this
165:49 - is how sequence dot size not length so
165:56 - this is the same exact algorithm but
165:58 - instead of the move being indicated by a
166:00 - single character it's now this object so
166:02 - I'm updating that move when it's done as
166:05 - long as I'm not the end of the sequence
166:06 - go to the next one and get and then get
166:10 - the next one and then this current move
166:12 - is what determines the rotation and so I
166:16 - called it just move before but let's
166:19 - call it current move and I think this
166:23 - should work now but moved out to start
166:25 - okay I'm not gonna worry oh this should
166:28 - be just started equals true so now it's
166:30 - just a believe I'm not starting to like
166:32 - oh oh oh this could be current move
166:36 - start this actually could be current
166:37 - moves start so because this this can
166:45 - actually current move update could
166:46 - happen if it's not animating so yes so I
166:49 - just want to start painting the spacebar
166:51 - starts the first move which does all of
166:53 - these and then each one because I have
166:56 - this start function needs to actually
166:59 - explicitly call start okay this I think
167:01 - should work so if I press the spacebar
167:06 - you can see the move happening
167:12 - oh why
167:16 - if counter is less than oh it's got to
167:19 - be less than size minus one because this
167:22 - is where I increment so I'm going to the
167:25 - next one the last one is size minus one
167:27 - so that's good so let's give it 50
167:30 - random moves and let's get it started so
167:36 - now it's playing 50 random moves it's a
167:38 - little silly that sometimes the moves
167:39 - are inverted so now I should be able to
167:41 - add that sequence
167:42 - well what just happened there what just
167:47 - happened oh I'm not making a copy of the
167:52 - move so a move is like animated and
167:55 - finished and then it went to gets it
167:57 - again if it does that move again it's
167:59 - not like a copy of the move so this
168:02 - should actually be ha when I make that
168:04 - sequence oh yes this should be like all
168:06 - moves clone or this is a way to clone
168:08 - objects but I'm just gonna write my own
168:10 - copy function so all moves index are
168:12 - copy or when I call start I could set I
168:18 - think it's actually as simple as just
168:19 - setting you know what I might be able to
168:21 - just not do a copy but set the angle
168:23 - back to zero couldn't I do that
168:25 - animating equals true finished equals
168:29 - false like that might actually work so I
168:31 - could have made a copy of the move but I
168:33 - think just in start since I have to do
168:35 - that with everything that might fix it
168:37 - let's see let's see if that fixes it
168:42 - munch moves its gonna do the same move
168:45 - again just to by the laws of probability
168:47 - I think this is working
168:49 - dare I say and I can still spin around
168:50 - it I mean it doesn't look like it's
168:54 - making any mistakes
168:58 - alright so I want to make an animation
169:00 - speed now I want to make an animation
169:03 - speed oh and I should fix this faces
169:06 - thing because you're seeing though
169:08 - there's like extra faces I should you
169:10 - gotta make the cubes at the beginning
169:12 - only include the actual faces that are
169:14 - on there that's the thing that you can
169:16 - fix when you make your version of it so
169:18 - now let's make a speed let's just make
169:20 - that a global variable and right now
169:24 - it's 0.1 so let's make it
169:26 - like 0.5 to make it kind of faster and
169:29 - then in move this I mean I suppose that
169:32 - could be a property of the move itself
169:34 - but let's just see it do it faster cuz
169:38 - that's more fun to watch it do it faster
169:40 - so let's see if now if I add the moves
169:43 - in Reverse when it's done it should be
169:46 - solved and it should be solved oh and
169:50 - yes this is a good idea Fabian is
169:52 - suggesting use a move ID so I could just
169:54 - use that index instead of a move object
169:56 - there's so many different ways to do
169:57 - this I'm excited to see what people how
169:59 - people refactor this and make it more
170:01 - interesting or better or different in
170:03 - all sorts of ways okay now that I have
170:06 - all the moves now I need to do is go
170:09 - through the sequence backwards right
170:12 - start with the last element of the
170:14 - sequence go down to zero oh this is
170:17 - where I kind of want to I do need to
170:19 - make a copy because I need to make it a
170:21 - completely different move in the
170:23 - opposite direction so I do want to say
170:25 - move next move equals sequence get I and
170:32 - I really actually need a copy here so
170:34 - we'll see this both ways because then I
170:35 - want to say like next move dot reverse
170:38 - so in the move object or though I could
170:42 - just point to the other move but I'm
170:44 - gonna do it this way I'm just figuring
170:45 - on this I've been fun figuring this out
170:47 - I'm gonna make a function called copy
170:49 - which returns a new move with what XYZ
170:53 - and give direction and then I'm gonna
170:56 - make a function called reverse which
171:01 - just says Direction x equals negative 1
171:04 - so this if I make those two functions as
171:07 - I'm going through the sequence I'm
171:09 - copying all of them but reversing them
171:12 - and now I have it should be twice as
171:14 - long so let's just do this with just
171:16 - like five moves just to see if it works
171:21 - wait
171:24 - oh wait where did I do that oh I've got
171:32 - to add them no wonder I've got to add
171:35 - those moves want walk okay let's go here
171:40 - we go so it should do those moves in
171:43 - Reverse and boom there's the Rubik's
171:44 - Cube back in its original state
171:46 - now here we go let's make a full screen
171:54 - and enjoy this make it a little bit
171:59 - faster
171:59 - enjoy this rubik's cube doing 500 moves
172:04 - then in Reverse this is gonna take a
172:07 - long time let's not do 500 let's just do
172:10 - 100 and you will get the feeling of the
172:14 - cube solving itself you know I really
172:16 - should do something where if I pick a
172:17 - certain move I'm not allowed to pick the
172:19 - reverse of that move next cuz that's
172:21 - gonna make it look really weird like why
172:23 - is it doing that but that's neither here
172:25 - nor there here we go
172:26 - thanks for watching this coding
172:27 - challenge enjoy the end of this video
172:30 - when I come back if I do a part for
172:32 - which I intend to do I'm gonna try to
172:34 - work on some algorithms to actually
172:36 - solve the cube so I should I should put
172:39 - a counter so I know what moving camera
172:41 - went off let's do this again
172:51 - all right hold on
172:53 - well everybody let that let me actually
172:56 - add something that I can see the text of
172:59 - the of where I am I think I'll just
173:02 - console.log it so let's just do just so
173:07 - I can see it let's just do print line
173:09 - counter so I have a sense and then I am
173:14 - going to print line counter oh no but if
173:22 - I do it fullscreen can I hold on let me
173:25 - take a break for a second here can I
173:26 - actually draw text if I say fill before
173:31 - I do any of this if I say fill 255 text
173:35 - hello oh that's fun that's actually kind
173:46 - of fun all right that's fine we'll just
173:49 - leave it like that let me actually draw
173:57 - the counter so I can see what move are
173:59 - on because that'll be somewhat useful so
174:01 - I'm gonna say fill 255 text counter I
174:05 - don't know it's just gonna end up being
174:07 - in 3d space in some weird location let's
174:10 - just say 100 counter 100 100 well the
174:13 - scale is gonna be weird let's just try
174:15 - that text size 32 and let's there it is
174:22 - okay look look it spins with it so now
174:24 - we should see it's going through the
174:27 - moves so when it gets to 100 it'll start
174:33 - doing the thing in Reverse all right so
174:37 - I hope you enjoyed this coding challenge
174:39 - I hope you make your own version of this
174:40 - when I come back to do a part for if I
174:42 - ever come back to do a part for which I
174:44 - do hope that I will there we go oh look
174:46 - cube solved um I will try but won't do
174:51 - it again hold on
175:06 - I had to reset the counter back to zero
175:09 - for it to do it again alright let me put
175:13 - this let's have some fun with this let
175:18 - me put this on speed of 1.5 let me make
175:22 - it do a thousand moves and here we go
175:26 - and thank you for watching this coding
175:30 - challenge oh it's hot you're not really
175:33 - seeing the rotation it's just like
175:34 - shaking okay that's too fast let's try a
175:40 - speed just of like 1.0 alright thanks
175:47 - for watching this coding challenge where
175:49 - I am shuffling the Rubik's Cube with
175:51 - random moves then playing those moves
175:53 - back in Reverse it's gonna when it gets
175:56 - to 2,000 moves it will actually look be
175:59 - back in its original orientation I hope
176:01 - that works I hope you make your own
176:03 - version of this if I come back and make
176:04 - a part for which I intend to do I'm
176:06 - gonna see if I can use a genetic
176:07 - algorithm to take any shuffled state and
176:10 - evolve a solution within maybe a certain
176:13 - number of moves I suppose 20 might be
176:15 - the number of the pick to pick in terms
176:17 - of the genetic information which will be
176:19 - a sequence of moves this should be
176:20 - similar to what I did with searching for
176:22 - the phrase to be or not to be in the
176:24 - space of all possible random phrases
176:26 - we'll see if that works I've no idea if
176:28 - that will work but I'm gonna come back
176:30 - and do more with this in part 4 in a
176:32 - future coding challenge and please share
176:34 - with me go to the coding train com look
176:36 - at the link in this video's description
176:37 - to if you make a version of this whether
176:39 - it's in JavaScript or processing or some
176:41 - other programming language or
176:42 - environment you can submit a link to
176:43 - your version so that I can see it and
176:45 - the rest to communicate as well alright
176:47 - thanks very much
176:47 - goodbye alright I might as well let this
176:55 - finish
177:00 - whoa I like how the counter is just
177:04 - spinning around its eye there's probably
177:05 - way for me to do this within turn off
177:07 - peezy cam but it works
177:20 - alright I'm I'm good for today it's 1:30
177:23 - we made a Rubik's Cube oh I got to solve
177:27 - my cube there's one algorithm that I
177:32 - don't really have memorized that I might
177:33 - have to look up I'll put it on my hidden
177:35 - computer where am I
177:47 - let's see oh I have an idea we're gonna
177:50 - make this like I'm racing the cube this
177:53 - is gonna be fun uh all right let's get
178:00 - rid of the counter and oh no I think I
178:05 - want the counter there so what how long
178:07 - how long was that oh I bet I need more
178:09 - time I'm gonna race the cube first let
178:15 - me just make let me just show you that
178:17 - this is shuffled right so this this is
178:19 - shuffled I don't know what sequences
178:21 - then I'm not keeping track of this in my
178:23 - head you know me I can't possibly do
178:25 - that first of all it's embarrassing
178:27 - you've allowed to all do two cubers out
178:29 - there who really know how to do this my
178:31 - my ability to do this is quite
178:32 - embarrassing okay so now what am i doing
178:34 - what do we think what's the over-under
178:37 - on me being able to solve it in ten
178:41 - whatever that takes into ten thousand
178:43 - let's actually leave it at a thousand
178:44 - let's do it slower let's leave it at a
178:47 - hundred but make this sequence much like
178:49 - let's leave it at 100 but do it at what
178:52 - was it a 1.0 at like 5% of that okay
178:58 - ready
178:59 - wait no I need to put it back to not
179:02 - fullscreen I guess this is gonna be fun
179:08 - I'll play some music okay ready
179:13 - well I should have it do the first part
179:16 - to shuffle it so what I really should do
179:19 - is just apply all the moves should start
179:27 - it shuffled I'm too lazy I'm too lazy
179:31 - I'm just gonna do it this way okay ready
179:34 - here we go
179:36 - [Music]
180:03 - are you the other side
180:07 - YMS up the yellow side again where are
180:11 - you right there you are oh that's not
180:13 - ready wait
180:16 - [Music]
180:25 - [Music]
180:31 - [Music]
180:57 - [Applause]
180:58 - [Music]
180:59 - [Applause]
181:00 - [Music]
181:04 - [Applause]
181:07 - just set myself up for success
181:11 - [Music]
181:43 - [Applause]
181:48 - [Music]
181:59 - way
182:02 - where
182:03 - [Music]
182:19 - No
182:22 - [Music]
182:27 - [Music]
183:11 - oh that would be much more exciting if I
183:21 - [Music]
183:29 - wait I already messed it up again
183:33 - [Music]
183:59 - I have I just given myself a little bit
184:05 - more time I would have gotten it so that
184:07 - was wait guys how long was that total
184:09 - cuz that's song under five minutes but I
184:14 - was looking up there were two there's
184:17 - just two algorithms that I was looking
184:19 - up that I don't have memorize for this
184:20 - way of doing it all right so I'm gonna
184:31 - go I'm gonna check the chat here Oh a
184:43 - lot of people are pushing for the inside
184:45 - faces to be black the computer cheated
184:50 - this was these are comments from a
184:52 - little while ago that I missed all right
184:54 - thank you everybody what method did I
184:56 - use I don't know I used some method of a
184:59 - combination of a bunch of different
185:00 - videos that I watched I can turn off my
185:04 - overhead camera no that's here I'm gonna
185:07 - so this code will be online very shortly
185:11 - if you want to use it for anything and
185:16 - yeah so I let me I can take a couple
185:19 - questions before I go it's 1:35 it's
185:21 - been a three hour livestream I feel
185:26 - accomplished
185:29 - apparently that was approximately four
185:31 - minutes which and I was doing that at
185:36 - the beginning I had a lot of trouble her
185:38 - because I was so nervous so that's
185:41 - pretty good I would like to see if I
185:44 - would like to learn see flop everyone's
185:45 - telling me see fob beginner see fob is
185:48 - that's what I was using okay like what I
185:50 - was doing the the parts that I know it
185:52 - are memorized but what I know how to do
185:54 - is I know how to make the cross cross
185:57 - white cross on the yellow side move it
185:59 - to the white side do the white corners
186:00 - then do the middle row that I can do
186:03 - then I also know pretty the men thing I
186:06 - know how to do is to make the yellow
186:08 - cross on the yellow side and then I hope
186:10 - that I get lucky and I try think I try
186:12 - soon algorithm a bunch of times I get
186:15 - that fish thing and then I point the
186:17 - fish this way and then I do that some
186:19 - more and eventually I get the top and
186:21 - then I will then I had to look up some
186:22 - other algorithms for moving the moving
186:25 - the center and corner pieces around but
186:27 - I where I basically stuck is at the I
186:30 - can get the yellow cross from memory not
186:34 - in the correct position every single
186:36 - time so I'm not tied but I've tried a
186:39 - few different things after that and I
186:40 - have them all mixed up in my head
186:41 - so so you learn f2l which is part of see
186:46 - top for the first two layers if you know
186:49 - that you will be a lot faster I prefer
186:53 - something that is like less memorizing
186:55 - algorithms and more actually able to
186:57 - kind of because like I'm I the thing
187:00 - that I like doing the most is the middle
187:02 - layer like that I just I do it by sight
187:04 - but I'm not doing it by memory but it's
187:06 - like a quick algorithm that I have to do
187:07 - so many Jase in the chat I don't know if
187:13 - I'm pronouncing your name correctly Jase
187:14 - asked what algorithms are you
187:15 - considering for solving the cube in
187:17 - Episode four so first of all I don't
187:19 - know that any of these algorithms that
187:21 - I'm gonna attempt are really gonna do a
187:22 - good job the first thing that I'm going
187:24 - to do is try to use a genetic algorithm
187:26 - like is it true I think there's like
187:29 - God's number or that any the cube from
187:31 - any configuration can be solved within
187:34 - 20 moves is that true I don't know if
187:37 - that's true
187:37 - somebody told me that I have a saw a
187:39 - YouTube video read an article I hate to
187:40 - research that so what is the minimum
187:43 - because I can create a genetic DNA
187:46 - string for a sequence of moves but it
187:52 - needs to be a fixed number it's okay if
187:54 - it solves it in less than that but it
187:56 - needs to be a fixed number and then what
187:58 - I can do is I can create a population of
188:00 - those move sequences run through them
188:03 - and then I need some fitness function
188:04 - the fitness function I'm going to need
188:05 - is to evaluate basically how close I am
188:09 - to the solution it would be lovely if
188:12 - just counting the number of pieces in
188:14 - the right space would be a good enough
188:16 - fitness function that's what I'll try
188:17 - first I think that's going to be
188:18 - problematic and the I did read a paper
188:20 - about machine learning to solve a
188:22 - Rubik's Cube and the methodology was
188:24 - basically the reward
188:25 - system or the fitness function how to do
188:27 - with distance from the solution so you
188:29 - kind of needed to know how to solve it
188:31 - from where you were in order to figure
188:32 - that out
188:34 - so but I would like to try to do it
188:36 - without that because I would like to see
188:38 - if I can solve it without your pre
188:40 - knowing a way to solve it but we'll see
188:42 - there's no known algorithm for getting
188:45 - those moves from an arbitrary
188:46 - configuration well I don't think it's
188:49 - gonna be me who's gonna figure that out
188:50 - but this is what I'm gonna try 20 and a
188:54 - half turn metric 26 in quarter turn
188:57 - metric 20 turns with 180 turns I think
189:01 - 24 with only 90 okay so I'm not gonna
189:05 - learn a strategy for any generic any
189:08 - random configuration what I want to do
189:11 - is solve for the sequence of a
189:14 - particular configuration if I can do
189:16 - that that's at least a first step maybe
189:22 - 50 it took until 2010 that God's number
189:29 - existence so people had shadow telling
189:30 - me it has to do with whether I'm
189:32 - allowing for 90 degree moves or just
189:36 - quarter moves I suppose I'm sorry 90
189:39 - whether I'm allowing for full 180s or
189:42 - just 90 degrees all right what is the
189:48 - sense of p5.js and p3 what are their
189:52 - names mean Macario part three please I'm
189:56 - sorry that's very nice of you to ask and
190:00 - then I'm also being asked what's the
190:02 - plan after the Rubik's Cube series so
190:04 - the reason why I went down this road is
190:06 - I am working on the thing that I'm
190:08 - interested in pursuing is more machine
190:11 - learning examples with ml five and ten
190:13 - to flow Jas and I I wanted to try some
190:17 - more neuro evolution
190:19 - examples and maybe more genetic
190:22 - algorithm examples and I sort of thought
190:24 - the Rubik's Cube would be like a nice
190:26 - thing to try with it became a much more
190:28 - complicated project and I became kind of
190:30 - obsessed with it but I think I what I
190:33 - should be doing today because it's what
190:35 - I taught in class this week at NYU
190:37 - is I did Abner Oh evolution with flappy
190:40 - bird but using tensorflow J s instead of
190:42 - my own toy neural network library so
190:44 - that's probably what I would come to
190:45 - soon
190:46 - I'm also working it's happening offline
190:49 - not during the live streams but I'm
190:50 - working on a bunch of videos about data
190:55 - and API it's a little bit of some
190:56 - redundant contents of things I've done
190:58 - before but updated and so those videos
191:00 - are will actually come out just as like
191:02 - edited videos in May and June so is this
191:08 - the hardest longest challenge you've
191:10 - done on your channel
191:12 - maybe maybe what's been some of the
191:17 - other ones I mean there's a bunch that
191:18 - arrived like five six parts but whether
191:21 - they were harder or just took longer
191:23 - you should watch my palm challenge and
191:26 - see how much trouble I had if it pause
191:31 - okay this that fitness function would
191:37 - make it exploit way more than Explorer
191:40 - that's kind of true that's a good point
191:41 - there's a fine line so I got to do some
191:43 - thinking in some experiments kenya's can
191:45 - begin HUD and can and HUD oh that exists
191:48 - oh I didn't know you could do that thank
191:51 - you
191:51 - hold on where did I'll be doing the text
191:56 - let me have that cam begin HUD cam and
192:05 - HUD
192:09 - ah there we go that's definitely I wish
192:14 - I had known about that I would have done
192:15 - so much debugging on the screaming with
192:17 - that thank you
192:19 - not pong pong P Ong um thank you
192:23 - everybody for tuning in this is a
192:25 - delight for me to get to do every week I
192:27 - will be back I mean I am keeping this
192:29 - regular time every Wednesday at 10:30
192:31 - a.m.
192:32 - next week is April 17th I think I'm
192:35 - gonna miss April 24th if you're just
192:37 - sort of keeping track of your calendar
192:39 - that's not a hundred percent yet but
192:41 - there's that I have a conflict that week
192:43 - so and I'm certainly gonna probably miss
192:46 - a date or two in May so I'm gonna try to
192:47 - do once a week every Wednesday and I've
192:51 - got old kind of stuff to do and get to
192:53 - and thanks for your continued support
192:55 - your questions your comments your
192:56 - feedback I really appreciate it I am
193:00 - going to put on my wallpaper and get
193:05 - turn this stream off so this is random
193:15 - this is noise / Lee noise that is in the
193:17 - core random algorithm the actual random
193:20 - algorithm itself those numbers aren't
193:22 - related at all you pick like I'm picking
193:25 - random numbers between zero and ten nine
193:27 - two seven three six one one nine nine
193:30 - four eight one nine two one three but
193:35 - with curly noise I might pick numbers
193:36 - like this two three four three four five
193:40 - six five four five six seven pair asked
193:46 - what's next week
193:47 - I don't know yet I mean in theory I
193:49 - might just continue the Rubik's Cube it
193:51 - probably a good idea for me to take a
193:52 - break for a minute but we'll see I don't
193:54 - know what next week is yet but stay
193:56 - tuned I try to put it in the title when
193:58 - I schedule a live stream or are tweeted
194:02 - out of that kind of thing I'm sick
194:08 - seven five six seven eight nine look
194:12 - like pearls in boys 4 3 2 3 4 3 4 5 6 5
194:26 - these look like girls and boys but with
194:35 - curly noise I might pick numbers like
194:37 - this 2 3 4 3 4 5 6 5
194:44 - by purling noise that it's early noise
194:47 - so this is Hurley noise that is Hurley
194:48 - no this is this is Hurley noise that
194:50 - it's Hurley no so this is Hurley noise
194:51 - that is her purlins know her Perlin
194:53 - noise that it's Hurley noise this is
194:55 - Hurley noise that is Hurley this is this
194:56 - is Hurley noise that it's her little so
194:58 - this is Hurley noise that it's her early
195:00 - early early early early early early
195:06 - early early but with pearly noise I
195:17 - might pick numbers like this
195:31 - [Music]
195:34 - this is like Perlin noise performance
195:36 - part
195:43 - [Music]
195:47 - later
195:51 - [Music]

Cleaned transcript:

good morning there was a bit of a little technical hiccup there I don't know why but open broadcast studio likes to crash when I switch from that wallpaper to me on camera talking to you so I'm hoping that everything is working kind of keeping an eye on things here looking at the chat I am here out of the black hole which is me to simulate a Rubik's Cube in processing I have been thinking about this do you know about this these images of the black hole really astounding really amazing beautiful stuff I hope that maybe I could do some type of video or coding challenge or simulation about it I didn't get a chance to kind of watch the live stream although I hear it's kind of wrapping up just about right now so everybody welcome from just seeing the first images of a black hole to watching a completely inept awkward person on the internet try to program a Rubik's Cube inprocessing hi alright people are saying hello to me I see Simon is typing so I'm gonna assume that I am here talking to you live on the Internet this is the coding train my name is Daniel Schiffman thank you to the sponsor of the coding train livestreams brilliant org to go to brilliant org slash coding train you can sign up to find lots of courses and puzzles and practice problems around all sorts of topics from computer science and mathematics and various things I will come back and look at today's daily challenge from brilliant org a little later in the livestream and see if we can solve it live on air do a light ray simulation that's a good idea so if you have you know I guess I'm gonna be lagging behind if I were just if I could really just be in the moment I would just right here open up a code editor make some kind of black hole simulation but no I have to I have an obsession with this thing called a Rubik's Cube and I must get a little further than I did last week and that's what I'm gonna do today so I am going to do an take them all again make another attempt at programming this Rubik's Cube in processing with an eye towards maybe someday looking at how I might use a genetic algorithm to try to evolve a sequence of moves to solve the rubik's cube for a given configuration perhaps even use some type of reinforcement learning or maybe some type of algorithm with tensorflow j/s perhaps to see if I can get make a guess so which move might be the best towards a solution for any given state oh so many possibilities I'm sure none of that will work particularly well but somebody watching this channel will be inspired to take my ideas further and do something with them so good good news for you watching I came in today with my cube solved already I'm getting pretty good at it like the the parts that I know how to do I can do quite fast for me I mean you know we're not talking less than five minutes here or anything yet but I still need to I need more time in the day to practice my cubing cuz I am a u Qbert you already here first I have a u cuber I have water a little bit of coffee which people in the comments like to write to me I drink too much please less coffee you know I didn't actually drink coffee for years and most of my videos where I'm much too hyper I was not having coffee of course now I am having coffee because I had to get up at 600 a.m. this morning very early day and I was at a little league game last night quite late so 730 p.m. and it was raining and I was freezing it was very exciting was a tie game five to five go blue all right go o's shifting face others all right hi Mohammed from India where are you now asks dear bomb I am in New York City at New York University at Tisch School of the Arts in downtown Manhattan near Washington Square Park my fulltime day job which a lot of the stuff that I do on this channel relates to is teaching at a program called ITP which is twoyear master's program there was also a new as of this year undergraduate program called ima or interactive media arts you can apply if you're in high school and thinking about a place to go to learn this is probably one of the more practical useful things that I've done there's so much here in what I'm about to do to learn about computer graphics multidimensional arrays matrix transformations oh this is gonna exciting and also I really want to see if I could get the code somebody suggested putting the coding train logo on one of the cue bees did you know that these little things are called cubies one of my new favorite words okay now before I get started I wanted to highlight a community contribution that came in recently and this is unlike any community contribution I have seen before and so this is not one of my typical community contribution which you might find say if I go to Ruby's cube part one and scroll down here and see a couple other versions of the Rubik's Cube hey let's look at this p5.js one from xx Novak's let's see what happens here oh wow well toggle access stop whoa cube size four five look at this rotation access common I don't know what's going on but this is cool Wow all right great work xx knoppix that is really cool all right and then this one rubik's cube using processing 3 so this is i probably should look at this because i'm sure it's doing smarter things that I did in mine so thank you but that's not the community contribution I wanted to highlight by the way if you want to submit a version of any of my any of your own code version of any of the challenges that I've done you can add your own version and go to any challenge page there should be some links on how to do this and that's not the easiest thing in the world it's a little confusing and tricky if you get stuck I'm here to help members of the community here to help go to the github repository file an issue asking for help now this is what I want to talk about I think I need my ukulele for this Oh my invisible laptop is quite visible what what's like oh this is the water cup alrighty my ukulele this one requires the ukulele so I have this video series on git and github which I probably need to revisit and redo because I use the github website so much and so much has changed it's just a lot of its outofdate and people watching the tutorials will often file an issue or make a pull request to this Rainbow poem github repository as part of the lessons of how to work with git and github and I've been stopping myself from explaining more about that and recently came in a poem an entire poem by Kyle R Conway which summarizes the entire video series I'm pretty sure this moves along following the video series pretty precisely so I think this needs to be set to song unfortunately I am not prepared for this so I have not written a song I've read it I have not practiced this so probably what would be really someone from the community with musical talent perhaps could put this tune suggest some chords that are pretty easy to play on the ukulele I like see Jesus seven and a half but I can can do what like a c7 I can do like some I can do some other chords that's like a anyway whatever I can stretch her this and we can make this into a song like this I I need help I'm not gonna torture you anymore people are here for the Rubik's Cube last week was I think my most watched livestream ever even more watched than when smartereveryday came into the chat I'm speaking for a series and started trying to get everybody to come watch the Rubik's Cube on its own the popularity of youtubers I know that there were there were a lot of people watching last week and now I have lost all of those viewers thank you very much so let's let's work on this song we'll make a folksy music video about git and github but let's move on to the Rubik's Cube alright I think I want to try something a little bit weird which is that I think if I press button 3 here yes you see that a little behind the scenes were a little behind the scenes here on the coding train and what you're seeing now behind the scenes is me standing in front of the actual greenscreen you'll also see a very hightech captain disillusioned would be so proud of my very high deck please everybody screenshot this and send this to Captain disillusion I'm sorry I'm obsessed with cats of disillusion did you see the new series about framerate and aspect ratio they're so so so so good oh I wish I could be I wish I had that talent and ability but I get my own thing it's my own thing it's fine I do what I do everybody does what they do I I just have to be I am Who I am I'll be well be I've got a ukulele that I play very poorly anyway look hightech solution for invisible laptop it's not that I'm trying to hide the laptop from you it's just that it was like too much stuff so anyway so what I think that I'm gonna do is I'm gonna introduce this topic of the coding challenge today about the Rubik's Cube and let me come back to this here for a second so but but I'm gonna leave the green behind me because this is going to be used later in an edited version of the challenge in which case and and then I'll add like clips of some of my failed attempts in last week's livestream maybe behind me as I'm talking I won't add those machiya Blanchette who is the editor for the coding train will do so so that's my plan so if you will if you will humor me with this I would appreciate it I've actually been doing this quite a bit recently for patrons and YouTube members I've been doing some live streams of recording sessions with just green behind me because I'm making a new series about working with data and api's coming out in May or June whole bunch of videos that you have no idea I'm making because I'm not doing them in a live stream which is crazy but join patreon join YouTube membership if you want to get a peek into that okay but the videos will be out water okay here we go okay I think we got a relaxer the way I relax I need something more Zen like things would instruments and bells that shakey guided meditation can play I like to relax by reading seventy one thousand and four forty eight thousand nine hundred seventy three sixty two thousand and fifty four one one it's twelve thousand two hundred and twentytwo feel Zen feel relaxed I feel ready to tackle what has been incredibly difficult for me to make a Rubik's Cube simulation Japanese flute yes thank you I'll look for some new sound effects and stuff okay the whole pie is way too loud sorry about that everyone it was really loud right I don't know why the volume is so loud right now hello and welcome to part 2 of my Rubik's Cube challenge now if I'm being honest with you this is actually the second time I'm trying to make part 2 of the Rubik's Cube challenge I went down a very strange road road paved with all sorts of problems and bugs and strange ways of coding things with awkward switch statements and things and I did this over a three hour livestream and rather than try to actually release that as an edited version of the next step of the Rubik's Cube I'm just kind of showing you bits and pieces if it behind me sped through and you can go check me let me do this again let me do let's do this again hello and welcome to part 2 of the Rubik's Cube coding challenge in this version of the coding challenge I just want to take my existing rubik's cube simulations and be able to make some turns i want to shift the faces of one side of the cube e's like the yellow faces to turn maybe clockwise and be on the other side and everything follow suit so I'm gonna do that with matrix transformations here's the thing I have to be honest with you my second attempt at doing this I did a previous livestream where I went down a different road and I was keeping track of arrays and different arrays and trying to ship things and have like custom hardcoded things for every possible way the Rubik's Cube could turn and it was a total disaster actually got it to work you can see it spinning around and working here right now but I I had some excellent comments most notably bought from Michael Rafael Panna here I can actually this is this is what I'm looking for the comment I'm looking at but I'm gonna keep the green screen here I had some excellent comments most notably from Michael Rafael Panganiban Panganiban I had some really useful suggestions most notably from Michael Raphael Panganiban who suggested that I use matrix transformations and I'm gonna try this again I'm gonna try to really think about refactoring that gobbledygook code I wrote before and trying to set myself up for success in the future all right so I also want to highlight this website I am the cube wait hold on I also want to highlight this website I am the cube made by Stuart Smith and other collaborators from Google this was made for the Google Doodle about the Rubik's Cube a bunch of years ago and its really phenomenal the code is available I I really should just not bother doing what I'm doing and just play with this but I have a mission and my mission is to make this Rubik's Cube turn and move and so I'm gonna do that okay so by the way this is the this is the comment that I got ok so now let me open up processing and here is my Rubik's Cube from before all right please try to use enums I can't promise that I'm gonna use enums I appreciate everybody wanting me to use enums the things that I can't promise are be using enums or switch statements I am Who I am I'll be you I'll be Armour asks I wonder I'm just wondering does he read random numbers in his classes uh no I mean I would but no I mean maybe I should but I don't I have not done that yes I appreciate that people in the chat are telling me that the audio and video is not in sync this is an ongoing problem that I'm having that I have not been able to solve yet the only saving grace here is that when we put the videos together after the livestream we fix those issues so it's a little extra work for Mattia and someday I and you spend a day doing that how to use inos thank you yeah we'll think about it well think about it what am I looking for let me cycle the camera okay let me is this working yes I mean cameras in a little bit off let's see if I turn it like this that's better let me erase this we're going to start coding we are going to start coding all right so this is what I left off Whittle in the input this is what I left off with in part one and one of the things that I did part one was a little bit weird is I really was thinking in terms of cube notation and if you're a cube er you look at the cube in a certain direction you're thinking about what's up what's down what's left that's right what's clockwise what's counter clockwise and that really led me in some strange directions I think it's useful maybe to double back and add that in once I have the cube working but the Syst the thing that I'm actually working with here in this code is x axis y axis z axis I'm and the thing is well the thing that I'm working on with the code is x axis y axis z axis and it's gonna be much simpler for me I think enough to keep track of things and think in those terms and the rotation might not be clockwise or counterclockwise it might be in the positive direction or in the negative direction the first thing that I want to do to really figure this out and to have a more effective way is actually keep track of the cubes location not in a vector but in a matrix so I have done a lot of videos about matrices and matrix math and some of that's going to come up here most the ones that you might want to check out if that's the totally new concept to you is the video where I made my own 3d renderer using matrix transformations and I made a little like bunch of functions to do to store matrices and to multiply them I also used matrices in a bunch of videos I made about neural networks because matrices pop up there in the math of machine learning with neural networks but here what I want to do is I want to have a transformation matrix for each one of the cubies to keep track of where it is in the world and so the way that I'm going to do that is I'm gonna change the QB to have a to receive a matrix and for its position to be that matrix rather than a rather than a to be that matrix rather than a P vector luckily for me cubelets oh these are also called couplets apparently luckily for me processing already has built into it matrix classes so I don't have to write my own matrix 3d object I don't have to write a matrix to the object I've got one in processing so it's going to be AP metric P a P matrix 3d object and so when I create the cubies the other thing that I think I'm going to do here is I am going to keep all the cubes in a one dimensional array I think there's that there's this triple nested loop everywhere there might be some use to that in certain aspects but it's gonna be simpler I think in refactoring this to actually just say let me how many cubes do I need I need people in the chat are yeah so I got distracted for saying I'm too easily distracted by the chat I probably shouldn't look at it let me go back actually because I'm realizing also I'm thinking about this I am going to need to have these nested loops in order to initialize all of these different cue bees or cubelets as I just learned that they're called but I think it's gonna be easier if I actually just keep track of an index and put everything in a single a single one dimensional array so hold on a sense let me go back for a second because like I realize I'm I want to do this differently then I thought okay alright why am I doing this I'm refactoring this first so I can move the stuff the other thing that I want to do now this is head so this is how I made the cubes before I made each QB each QB with an x y&z but now I want to do this I want to make each QB with a matrix B matrix 3d and then what I want to do is translate that matrix so in other words each cube it's a way like each cube is going to keep track of its own 3d world and it has the full matrix of where what is the translation what is the rotation what is the scale and so if I translate that matrix to that's X Y Z location then I'm initializing the QB with that particular matrix I'm also gonna well let's leave this length I think there's some other things that I can refactor to simplify remember the whole goal of me doing this is to think about it in a different hopefully more succinct way that's going to be easier when I need to move those things around so I wasn't really thinking about moving the things around what I did the first version and I gave it made some tries I've thought about it got some suggestions and I think this is gonna be a good path for us some other things I think then while this nested loop is useful it's gonna be much simpler for me in the end I think if I actually keep all of the cubes in just a single array the multidimensional array is interesting but let me so let me change that too I'm just gonna make it no I'm not gonna make this I I'm gonna make this like index oh actually let me make this I'll make this index and I'm gonna say cube index equals new QB with the matrix index plus plus so that I'm counting and then this will now be a single array that has dimensions times dimensions time dimensions 3 times 3 times 3 or 27 of course there really isn't a QB in the center but you can't see it anyway so we can imagine it's there now the other thing that's really important here and I'm gonna change I think this will be helpful I'm gonna change this to X Y & Z X Y & Z and which whose this X Y & Z I'm not gonna worry about this figuring out the actual position of the cube with its length I just want its position in a threedimensional world and what are those positions so if I just think about one face of the cube for example maybe this is a face of the cube where Z equals 1 so there's if I get the cube right if we're looking at the cube with green facing us facing you this could be the z axis this is Z equals 1 so we've got the x axis along the horizontal and the y axis along the vertical so the what I could think about this is really the location X y 0 0 so it's 0 0 1 so all of these have a Z location of 1 but this one is negative 1 negative 1 sorry 0 negative 1 0 oh sorry 1 negative 1 right so Y is negative 1 the X is negative 1 0 1 so this is negative 1 0 and this is 1 0 this is negative 1 1 this is 0 1 and this is 1 1 so these all the locations and these can actually be the XYZ values that I apply to translate each individual QB QB to blitz matrix so if I come back to the code what I'm doing here is I'm saying have the X go from negative 1 all the way to 1 same thing for the Y same thing for Z create a matrix for each one create the QB I don't I'm not going to worry about this leg thing right now and then say index plus plus the QB then is just a thing with its matrix and this should say P matrix 3d I've got to specifically use I'm gonna be using a 2d matrix in a little bit you'll see is it's crazy but right I'm gonna use the 3 min alright so look how look how nice this is now look how much simpler this is why am I still having an error there oh I still have this length variable here okay the other thing I want to do is while it was really useful that I had this whole way of doing these quads and coloring them I'm gonna get rid of that right now because I think that what I want to do is think of each of these cube 2 B's as a box and then it's also going to have faces and I think I'll draw the faces as it has a separate object with a quad so right now to keep things very simple simple I'm gonna show you something kind of nuts I am going to take out all of this I'm gonna get rid of this translate I am actually going to call this function called apply matrix so what's going on here if you've learned or watched any of my videos about matrix transformations in processing or p5.js I'm almost just using translate rotate scale push translate scale rotate pop all of those transformations all the math of those transmissions happens in the matrix that the matrix that's keeping track of the world that sells the the processing 3d world but I could just apply all of those transformations to a matrix object and then apply the matrix to to apply that to the world that made no sense emails people I mean ups let me play try explaining that again slow mode is not on you slack chat let me know I Peter asks did you get a pyramix I did get a pyramix I got a skew I've got a peer mix duo I've got all I've got them all I've got them all if I need to do anything about slow mode in the chat or anything please let me know thank you to those of you who or have the patience and ability to moderate right now so in this case what I'm actually doing right so what am I doing here I'm taking the matrix and I probably shouldn't call it pause as in position let's actually call it matrix let's call it matrix HQ B has a matrix which really contains all the information about where its position and rotation in the world of the cube itself and this is actually the same as just calling translate at this point but because I'm story in a matrix instead of calling translate directly it's gonna give me some more possibilities later as I need to keep track of all of these cubes separately or in smaller groups and that kind of thing so if I do this and then if I just say box and I'm gonna say box one it's gonna be a small box pop matrix then and here the nice thing about this also is I can change this to cubed lengths and get rid of this nested loop I can say cube index I'd show and hope that we see the Rubik's Cube where is it oh look I think it's there I think that's the Rubik's Cube oh it's look I visualized the black hole of the day of this is the second image of a black hole now okay so the reason why it's so tiny is because scale so let me say scale a 100 and let's see what happens now where's that cube look so let's think about a stroke weight 8 now that's lunacy here so let's make the stroke zero let's make the stroke weight small because I'm scaling up and let's also make sure we say fill 255 I can that's there already oh that's a really big one but there it is so I don't want to scale that much let's scale it by 50 and let's just say stroke weight 0.1 and there we go so now I have exactly the same thing I have exactly what I had before but I just have a matrix for each one of the cubies now I need to figure out how am I going to debug this right now if I move them all around but I could move them around they're all white they're all going to appear in the same location so what I'm gonna do is I am going to make a ver I'll just call it highlight false and I'm gonna say if highlight Phil zero and then let me say let me say cube index zero highlight and oh no highlight equals true I didn't make it a function or anything okay so there we go we can see uh that one see look this one is now highlighted I can address any individual QB it's not really highlighted cuz it's black it sort of looks like it's removed you know I could make it maybe I should make it like red or something just so it's a bit more obvious because everything's everything right now is just white okay but let me actually highlight the one that's in the front cuz that'll be I mean I could always spin this around let's highlight the one that's in the front so that would be which one is that what am i doing I'm doing X first Y for the X then Z oh this is the worst it's a light gonna be like 24 no it's not 21 I think that's that one 21 first 2103 it's that's why they had that right okay I this is helping me 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 I think is gonna be 15 I think I'm going in that direction X is wise nazies no I already tried 15 no I should just do them one at a time somebody chat will tell me Oh Nathan growl I'm happy to give you moderator privileges how do I do that are you will you post a chat message if you post a chat message I can do moderator privileges I guess I could do these one at a time let's find it in debt index let's actually cycle through all of them that'll be kind of fun to see so I'm gonna say int index equals zero and I'm going to say a cube index dot highlight equals true and then at the end I'm gonna say that and then I'm gonna show it then I'm gonna say it equals false and then I'm going to say index plus plus let's make the framerate one and print the index array out of bounds exception oh it's frame rate one how come it didn't go slow oh whoops stop turning 12 Oh 30 14 15 17 18 Wow it's a weird order that I didn't expect three it's it's number three why is it number three how come I didn't realize that all right it is oh I made the frame rate point five that's not what I meant to do cube index three highlight is true no what is going on no it's too oh it's too good this one before oh it's just it's going that way well I just lost like two minutes I'm getting very sweaty here huh some things I like can do really well and other things that's right Matthew they could edit all of that out I used to say that it wouldn't get it out not really well alright the answer by the way in case you were wondering was I'm counting with Z first so it's going hero one two so perfect boy that was a lot of time I spent trying to figure out that it was you're lucky you didn't have to watch that okay so now I can see that I'm highlighting a given QB wolves I forgot what I was doing this okay yes I'm just thinking about this for a second yeah okay okay sorry I'm thinking about this I'm thinking about this because I did this a week ago and I'm I'm not sure I love the way that I did it but I'm gonna keep it that way for right now so let me do let me rotate along the zaxis first because it's gonna make the most sense okay I'm gonna do that okay okay okay okay all right the next thing that I want to do is take one of these faces each one has its own 3d matrix with an XY and Z and rotate it I want to apply a 2d rotation to this particular face so any face whether it's the front the back the top the bottom if we look at it it ends up becoming twodimensional so I just want to rotate two of I just want to rotate along one particular axis and so a way that I could do that is actually take any given face of the cube can become a 2d matrix a 2d sorry any given face can become suddenly a 2d world that I want to do a rotation to so if I suddenly have this point here which is that negative one negative one and I want to rotate that relative to the center ninety degrees or half pi then it's going to end up where in one common negative one it's going to move and rotate there so how can I do that I can apply a 2d rotation so let's look at how I would do that if I come back to the code let's write a function called turn Z and I want to avoid using rotate Z because even though I'm doing a z axis rotation of rotate Z is a builtin function in processing so if I say turn Z first let me look at all of the cubes so I always need this particular array this particular loop I I'm starting to regret that I kept it because I could actually just do the loop along the z axis but whatever I'm gonna do it this way and what I'm gonna do is I'm gonna say oh oh I see I see what I'm doing here oh I see I just realized something I know I sort of regret I'm Kai I'm regretting taking out that nested loop because I just want all the faces that are in the zaxis and if I had that nested loop I would be able to keep it that way but actually I'm gonna do something slightly redundant which is that I am also going to keep track in a separate variable I am going to keep track of going back I'm gonna keep track of its XY and Z index values I'm gonna keep track of what those values are within what would be a threedimensional array and so let me actually add those as arguments here and I'm going to say x equals x y y equals Y Z equals Z and then when I create each cube I'm going to say X Y Z great so I have those extra variables because now I can say if cube Z equals 1 right I want only the only the cubes that are in the z axis 1 negative 1 0 1 those are the ones and this is cube index i z these are the ones that i want to rotate so now i need to make a 2d matrix this is what I was saying 2d matrix out of that face so the 2d matrix is just a new 2d matrix I want to do a 90 degree or 1/2 pi rotation of that matrix and then I want to translate out to the cubes X and let me actually let's use a variable I saw somebody on code pen who I'm sorry I saw some man sponge man I know people argue that I've got to going backwards and forwards sponge man on code pen who made a version of this I saw used actually a really cute variable name which I'm going to use right now Q be like the letters Q beef the Q B equals cube index I so I can actually just use Q B if Q B Z equals 1 translate by QB x and QB y essentially what I want to do here is I need to rotate before I translate I want to I have this thing here I make this matrix I rotate the matrix and then I translate out to here and I have my new location where x and y should be so what is going on here let me let's look at I think I'm gonna need to do some console logging here of this I think in order to I think I don't want to make this more clear I want to do a little bit of console logging because what would this matrix like what's actually in there so let me first make I'm gonna call this matrix 1 and I'm going to call this matrix 2 and this is just for debugging purposes and I'm gonna say matrix 1 dot translate qbx qby so I want to show you what does it look like when I just apply this translation to X&Y with out a rotation and what happens when I rotate and then apply that translation so to show you that I could do matrix 1 print and matrix to print processing has a nice print function associated with the nice print function associated with matrices and let me also just do print line something like this and let's also just so we can see do print line QB x QB y so we can see what those values are so let me run this oh I need to call this function I'm gonna call turn Z right here and setup and now we're gonna look at all these look at this when the XY location is negative one negative one you can see it as the third column in rows one and two of this matrix right this the this is the matrix that keeps track of translations and rotations for a 2d world in processing when I rotate it 90 degrees where does it end up one negative one negative one negative one ends up at one negative one when it's negative one zero it ends up at 0 negative 1 when it's at negative 1 0 rotating 90 degrees it ends up at where did it end up 0 negative 1 which is right here so you can see this rotates to here so actually in those matrices are the new index values of where it is in my sort of 3d array that I'm imagining so here we go so I and these values are all stored in properties of the matrix object which are indexed by its row and column so I can basically say right I don't actually need this matrix 1 I did that just for debugging so I'm gonna leave some of this debugging stuff in here I can basically now say hey QB you should you have a new location update your location to matrix 2 dot M I think it's it's row column so 0 to matrix this matrix 2 m 2 basically I'm getting and I could have just done the matrix math with like sine and cosine probably but I kind of like the idea that I'm using the built in matrix math of processing so you can see here that this these are these two values update by oh sorry m 1 2 and then qbg because I'm not affecting the Z so I there's no update function but this is really what I'm doing I'm take there's no update function yet that's a new thing I have to write but this is what I'm doing I'm taking the XY actually I want to get rid of the debugging stuff because this makes it so much simpler to look at now and I'm just gonna call this matrix I don't need matrix 1 and matrix 2 what I'm doing is I am taking I'm making a 2d matrix out of the XY then I am rotating it and then I am getting the new XY and replacing it in theory in my QB object and in my QB object then I need an update function which does something like first of all I'm just gonna there might be a more thoughtful way of doing this so I'm just going to reset the matrix and this needs an X a Y and Z and I am going to and somebody in the chat was telling me and I should probably get a habit of doing this if I if I have the same variable names of things I can make sure I'm referring to the object instance variables with this dot which is of course the thing I like to use on this channel let's be consistent and do it here so I can say matrix really I don't say reset matrix matrix reset matrix translate XYZ and then let me update again I've got like a serious bit of redundancy here but let me just update those XYZ values as well so now this should update why is update not working oh you know what these values in the matrix are floats and Kuby wants an int so I'm gonna I could just convert it to an int but I'm gonna use round because I want to make sure I ran into this in another project just in case like it's for some reason gives me like 0.9999 999 it would if I used converting it casting it to an integer or floor it would make it zero so this should work let's get rid of turn Z here and I'm gonna add a key pressed and I'm just gonna say if key equals just the key one turns E so now all right ready when I press the key one that cubies you're right now here's the interesting thing I should now be able to say give this turns Ian's index whoops int index which would be here so for example now if I were to say turn z 0 else if I know you want me to use a switch statement everybody turn z 1 right I should be able to rotate oh I'd the middle is technically I while I could program it with a rotation of the middle of the cube that's not really a thing so I'm actually just going to use 1 & 2 to rotate 0 & 2 let's highlight both cube 2 and cube 0 and let's see what happens so I should now be able to if I press 1 whoops but what happened here if key equals 1 is that actually happening hold on this is world sophisticated debugging going on here what did I do wrong wait a sec oh oh sorry everybody the indices are a negative 1 and 1 negative 1 0 & 1 of course all right let's try this again get rid of my print line hello all right here we go right oh is it going around look there it's going around look at that that one's going around it's going around look at that it's going around yeah yes okay now look at this now there's got to be some sort of way I could make this function into any I just like I'd like to keep this function generic and do any given axis but that's too hard for me I'm gonna though this will definitely right now I'm just going to copy paste and I'm going to say turn Y and so now if y equals index then what I want is X and z ah x and z cube cube ey I don't need to reckon that so this should be exactly the same for a y rotation right and then oh and I need I'm gonna add one more thing and then X I'm gonna just check the xaxis and this should be y and z then I need to keep qbx and adjust the y and z so I'm turning any face like this year with turn Y now it was it was kind of obvious to us that when I have the x axis that I turn this face into a 2d matrix but when I'm using the y axis just let's just take this face and turn it into a 2d matrix I need the Y values and the Z value I mean sorry the X values and the Z values that's what's changing Y is fixed at negative 1 0 1 so this should allow me to alright alright I'm gonna use a switch statement switch statement looking up the syntax for the switch statement up for here probably gonna have to come back to my if statement but let me I know it's just too painful I can't bear to deal with the comments switch key I'm looking at it over here on my invisible computers case 1 no no case 1 turn Z negative 1 break right and then I just keep doing this right case to turn Z 1 right and then all right now actually here's the thing let's see if I can get clock and counterclockwise there's how many moves right there's like I could rotate in this direction or the other direction so I'm going to consider that to be a direction in my rotate but well let me just get this to work first then I'll add direction it's too many things case one and two case three and four which is turn Y case whoops whoops case five and six which is turn X no yes is that a switch statement oh I know I know some of you like I just can't bear all right is that actually a switch statement what's the chance that that's actually a sort of switch statement that works okay so one is just turning the the back row that still works two is turning the front row oh my god three oh that's not right is that it look right hold on x4 we can't see that five all right something's wrong all right let's take a look what did I get wrong here so why this should be a wire rotation so I should see if I'm doing a wire rotation now this should end up here and this should end up there oh that is right that's correct I just didn't see it it's totally it's correct it just looks weird that's why thank you very much and X right yes that's right no that's that's Z now X is rotating around the alright X 4 4 does nothing I don't know act 5 oh that's right I should just met I need to make those different colors so let's do something a little different let's make give these a color and let's do the following let's set the color equal to red and the color equal to this just see the color equal to blue and then in the QB itself let's just fill it with its color that makes much more sense so now I think it'll look right to us now so if I go and do a Y rotation right that's correct now here's the thing I want to will this all keep working will this continue to work if I do multiple combinations so let's do my Z rotation we're now the that's there now I also let me also rotate that there but let me put it down here or let's you leave that there now let's do a Y rotation yes that still works let's do X all right yep that one's going around there and then the red one is going around the cubes move correctly now that I have all this working I just need to color well now now that I have all is working I need to actually color their faces correctly so if I put the actual colors of the cube on the faces then I can start to move those as well so in order to do that I have an idea what I would like to do is I would like to make a face class and what I'm going to do the face class oops why is those what's 1130 getting close wait come on sorry I think I have a loose cable here everybody sorry there we go just a loose cable the idea of how I'm going to keep track of a face so every single QB will have well in an actual rubik's cube there are you know center pieces which just have one face and they never move they spin but they they just stay permanent there are these corner pieces which have three faces and I don't know what these are called these little like middle pieces I'm sure there's a tech name for them that have two faces I'm gonna be simple about this for now and I'm just going to give every single QB six faces and I'm just getting there's gonna be a lot of redundancy like you will never see you'll never see the fact that this QB does not actually have a white face on the side but I'm gonna give it that and the way that I'm going to define each face each face is going to have a color like was its actual color and it is going to have a normal so its normal is a vector that points perpendicularly perpendicular from the face so if it's the frontfacing face its normal will be 0 0 1 it's pointing forward in the z axis if it's the backwards facing face zero zero negative one to the right one zero zero so on and so forth so here in the face class we're gonna have a we're gonna have a P vector called normal and then we're gonna have a color called C for color and when I make the face I will give it a normal and a color and I will say this dot normal equals normal and this dot C equals C then every single QB in addition to have them all this information will have an array of faces with six faces again a thing that I would want to do later and maybe you can do this in your version is to have a the correct number of faces for each QB but let's just do them all with six and then in that case I'm also just going to hardcode this so each face faces index zero would be left so I'm going to consider the z axis as green forward so the the back is blue the zero the negative one of is zero so that's going to be a new face with a new P vector that is zero zero negative one and the color is zero 0 255 so right so this is the blue face this is the green face this is wait let's up up would be zero one zero this would be white down yellow how do I do yellow it's a little red and little green like that no no red a lot of red and red a green green yeah but this is zero okay that's yellow or yellow so then left and right positive right is orange one zero zero is well I think that should be orangish somebody will get in the chat will give me some better colors and then the other side is red so this is now me making all of the faces great and then guess what I could do here in show after I apply that matrix I can draw the faces for face F in faces f dot show and now all I need is a function here that knows how to draw a rectangle pointed perpendicular to the normal with a particular color how do I do that 250 255 255 100 is yellow up is yeah all right how am I gonna draw each face I've lost the chat here oh yeah I also need to add the reverse rotation I will do that for each for the win how can you use tint on a box alright so the first thing that I know I need to do is fill the color then I need to draw a quad or a rectangle let's use sister's rectangle let's just try using I'm just drawing a 2d rectangle and I need to rotate it according to the normal let's just draw the rectangle rectangle at 0 0 1 comma 1 actually 2 square I can use processing square function I think it's size is just 1 so what if I do this oh okay first of all let me go back to my QB and let's just say no film well there's the red one it's in the wrong place oh they're all just on top of each other right of course oh I do need to translate out I do need to translate I can translate by the normal oh of course ok so I can translate by the normal X normal dot y normal Z and I'm gonna want to add push matrix and pop matrix and let's do no stroke here so now that should be there they are they're all the faces sort of are they in the right place they kind of are right white is back there yellows there then blue then red but they're all there all the problem is they're all not I need a rotation can I rotate like along the normal or something like can I do something like say rotate normal dot X normal dot y normal Z half pi is that like gonna work no hmm don't think about this oh is it oh maybe it's the other way maybe half PI goes first that's the angle and then this is the axis of rotation oh look at this something's right sort of furtive all their dare I should be translating by normal X 1/2 of that so let's multiply all these by 0.5 okay green and blue are those opposite sides yes white and yellow are in mmm the right orientation everything's in the right orientation but they're in the wrong place oh do I need to oh I should translate before I rotate okay closer ah ah 1801 that's a negative one right okay now I'm really close in the sense that orange no these all have the wrong the way I'm doing the rotation is not right you need the angle and AXA wrote for us it will become your normal vector yeah yeah don't copy paste kids yeah all right well let me I know there's a way I could do this I was trying to avoid this but just so I get it right look if I were to say if normal dot X if the absolute value of normal dot Z is greater than zero right if the normal is along the z axis I need to rotate I actually don't need to rotate at all the rectangle is drawn correctly so I could say like rotate just I could say rotate Z you know by half pi else if the absolute value of normal dot X is greater than zero then I could rotate I should I think it's by X else if absolute value of normal dot Y is greater than zero there's got to be a better way but this will work pretty sure then I can draw the face that's the same thing wait translate and then rotate right look at the chat dot product rotation should come first oh right what if I just do I don't I don't need so close I am I know another way to do this I think rotating is oh wow I want to translate out and then I want to rotate according to where I am and do I have this wrong Oh oops okay so of course of course if I'm if I'm along the xaxis I want to do a I'm drawing the quad like I'm always drawing the quad face forward huh so if this is my quad if I belong the its here and along the xaxis I need to actually do a Y rotation if I'm along the yes so of course so that's it so what I needed to change here was not not and and this doesn't this I don't since I'm drawing it forward I can just basically skip the whole Z thing so I only need to do a rotation if I'm on the x axis of a Y if I'm on if the normal is along the y axis rotate by X and then here we go now we have the Rubik's Cube and guess what I can turn it wait huh so now I'm turning it and nothing's happening guess what now that I have these faces what happens when I actually turn a rubik's cube the faces also rotate the normals need to rotate this is the last piece i need to i want to animate it turning but this is the last piece to at least have it so that i could do all the moves Oh actually I need to add directions and maybe make the keyboard controls make a little bit more sense but so now what I need is I need inside the face I need a turn X I need a turn Y and I need a turn z so I need to be able to rotate any given face they saw the shot just went a little crazy yeah so once again I can just use I can just use matrix transformations so once again I can use matrix transformations only this time and I have done this before I did this in my video about doing 3d rendering without the 3d render with our own matrix math and so what I need to do here let me get to pull up the Wikipedia page no I want 3d rotation where is that here this is basically what I want to do don't that where was I looking for that where it has all three rotation matrix so I'm looking for ah there we go this is what I'm looking for yeah here we go these so here they are these are the three rotation matrices for doing an X rotation or Y rotation and a Z rotation and all I need to do is apply those rotations to the normal vector so I can use P matrix for this but for whatever reason I think I might have an easier time just writing this out because ultimately what I'm saying is let me make a new P vector I'll just call this v2 and then v2 dot x equals the normal dot X times sine so I need an angle here sorry a normal on except scope it will equals normal times X times cosine of the angle plus or minus four minutes are here somewhere what is it where's that formula minus minus will be one Y times sine and then it's sine plus cosine a normal times X time normal dot x times cosine an angle minus normal dot y times sine of the angle and then v2 dot y equals normal dot X times sine of the angle plus normal dot y x times cosine of the angle and then v2 dot Z equals Z and now I should have and then I could say normal equals v2 so I have just rotated the normal according to the xaxis o equals actually this should be normal sorry this should be normal dot Z now here's the thing I'm a little worried we're gonna run into some rounding weirdness so what I probably should do is say hmm let's just put round around all of these I think that will kind of do the trick I just don't want to be stuck in a situation I really just care about zero one one becomes zero one zero that kind of thing so this should be turning the face and if you add this math I sort of did by looking at the formula a little bit by memory but I go through this particular formula in detail in that other matrix transformation video so now and somebody in the chat will point out if I'm a wrong so now I should be able to take exactly this same thing and put it in turn Y and the difference is with turn why I am changing X and Z so this is x times cosine and this should have also a float angle this would be X and this will be Z this will be sorry this is Z this is X and this is Z and this is y right so that's just the matrix take in apply to X and Z because Y if I'm turning along the y axis Y stays the same oh wait this was Z by the way I don't know I've got got them in place this was Z because Z is fixed this is y because Y is fixed and now let me copy this into here and this will be X so X is fixed this is y y + Z this is Z y and z so I think I've got this right yikes I think this should turn all the normals and if it's turning the normals they'll display correctly so what's a rotation that I'm doing so how do I have this working when I say turn Z for example I say Q be update so I should also say here probably QB turn faces Z let's just do that this is yeah I mean this is awkward naming but I need to oh and I yeah I need to turn the faces well I'll do that afterwards it doesn't really matter which and so then I would add a function here turn faces Z and I would say for every face F faces in faces f dot turn Z half pi what's the chance this works very little oh wait a sec wait a sec that's that's right orange goes to there goes to there goes to there goes to there yes oh that one's working too right one two one two one two one two so close all right so I need turn faces why and again I think I there's probably a way to refactor this so that these functions turn faces X okay let's do Y which was oh no that was X wait oh wait wait wait wait I need to call those turn faces Z turn faces Y turn faces X and I forget what my key commands are by the way guess what we can get rid of this thing all this nonsense that I had before I'm not using this anymore my code is so much nicer okay so now where's my key commands let's just put this in its own tab I'll just call this controls and there's clearly going to be a better way to do these controls but this will help me remember so right now if I do why that should be this should be the top four oh that's the bottom but that's fine five is X 3 is the top three and then can I start combining these yeah I'm shuffling the cube I think this is good I I got to do something like real testing of this to make sure this is really working but let's be let's the one thing I need to do is I need to add direction so I need to be able to add a direction for turning it so in these turn functions I should also have a direction so each one should get a direction then the direction is half pi Direction times half pi and turn faces Z with that direction so rotate according to the direction and then rotate according to the direction so now in turn phases these should also have a direction so I should be able to go either direction okay and then now alright so let's think about this so Z is forward so let's use F hmm what's a good set of key commands for all the moves what's a good set of key commands for all the moves oh I don't want to use WASD because that's gonna confuse me I mean it so I have forward back left right up down but then I have clockwise counter I guess I could use shift I'll just use lowercase and capitalized okay I'll use lower kids kept low all right all right so all the moves that I have are forward back up down right left so I'll use those keys and a lowercase will mean what a positive direction uppercase will mean negative direction so the case F is turns e11 the case capital F is turns e negative 1 negative 1 that's forward then case B would be also turns E but 1 1 and B would be 1 negative 1 all right I'm gonna do this silently and this could get fast forwarded if it needed to then so that's front front back back and then so let's do let's do up up down one negative one all right that's oh and these should be Y up up oh my god what's going on forward forward backward backward up up down down left left right right so let's see turns F F BB it's all turn Z negative 1 negative 1 1 1 1 negative 1 1 negative 1 I'm gonna be consistent about this up up up down down 1 one up is 1 1 so this should be just to be consistent and down is bottom 1 negative 1y left because I should do whatever that's fine left is negative 1 1 negative 1 right is 1 1 there should be 1 negative 1 let me make this comments are your friend I mean front is really the positive number up is positive right as positive all right I have now put in every possible move front is turn Z with a Z of one either direction back is a Z of negative one either direction then Y then X those are then up then down is y then left and right is turn X you know it does occur to me that I could just have a generic turn function and I give it the the the normal vector of the axis or there's the vector of the axis itself but anyway this I believe should work let's see so if I want to do a front I should just see that front face which is the green face turn which I am seeing back should be the back face up o up I got the is the is down so up is down whatever cuz I the Y points in the other direction down is the top ah you know spin it around up is the top consistent down goes this way right okay now this is right and left now are my clockwise and counterclockwise things working so front which was the green face goes this way and capital F should go the other way yep so now let's see if I turn front and then now let me do the left oh that which is there that's the right yeah it doesn't matter as long as it's one side that's working I think this is good here's a way that I could test this what I'm going to do now to finish off this video is run a set of moves shuffling it and then run those moves backwards and it should unshut alit if that works then I think I've done it correctly and then I'll be ready to animate this so to do that let me get let me make a car array all moves is a just F front back up down left right and I could deal with the capitals you know I should make these individual strings because then I can use the to uppercase function so what I'm going to do and then I'm going to I'm going to make a string called sequence and what I'm gonna do is in setup I'm gonna say four into I equals 0 I is less then let's just do ten moves sequence index I equals int so let me get an index which is a random number between all the that's an index into the all moves array sequence plus equals oh I'm already using index so let me just say our sequence plus equals all moves are so if I do that all movies all moves this would be you can see there should be a sequence here you can't really see that this is my sequence up forward right right right left up right down back and just for plausible deniability here let's just say if random I'm gonna give random is less than 0.5 we'll do this otherwise we'll do that too to upper case so now I should have my sequence and there you go there's my sequence down up right up down forward up back left left okay so now what I want to do is I want to run through that sequence so whatever I put this in index that was for something else right don't need that anymore do I so I'm gonna use I'm actually gonna use that int I must use counter equals zero and I'm going to say in draw a car move equals sequence car at counter counter plus plus and I'm just gonna do this if counter is less than sequence dot length okay if counters lesson sequence not linked I'm gonna get the move and then I'm gonna do apply move move and now in controls this should really be apply move car move and then switch move so I could if I want to control it by key pressed I could still say key apply move key but I don't want to control it by key pressed I want to control it by day's move so let's run this it did it really fast because it see the problem is the rendering engine takes a minute to to spin up so I'm gonna do this I'm gonna say boolean started equals false and then I'm gonna you know what let's just change the frame rate no no no because I want to be able to turn it around boolean started equals false and I'm gonna say in key pressed if if key equals the space then started equals true so if I press the spacebar start things going and then I'm gonna say here in draw if started so it won't do the shuffling now it won't do the shuffling right now until I press the spacebar because he shuffled it but don't slow that down just so we can see it if frame count modulus you know 20 equals zero that's going to only do that every 20 frames so I hit the spacebar and you can see it should be I mean it should be doing this sequence right now right it should be doing the head secrets so when it gets to the end of the sequence I should go backwards through the sequence so if sequence is less than so what actually here's what I'm gonna do after I make this sequence now I'm gonna say for int I equals 0 I is less than sequence length I plus plus now what I want to do is say seek so but now I need to say that move but the other direction so car move or actually so string next move equals sequence car at i/o but I want to go backwards so I want to go from sequence length minus 1 all the way down to 0 I and then I want to get each one of those characters what's wrong with car at I it's not a string it's uh so I'll just convert it into a string whoo that's I can't can I do this oh wait oh how do I flip the case how do I flip the case because I can't just do two lower case or two upper case hmmm how do I flip the case six bit of the string XOR with 32 subtract some value but I have to add or subtract based on what it is X or 0 X 32 I don't think you could do X or in oh yeah that like that I like that I like that alright so if somebody just gave a suggestion who was that I get I like Mike this crazy way of doing it mixing Nick seen in this shop thank you to MC seen in the chat who just gave me a really nice suggestion I'm gonna say flip case sequence car at so I'm gonna write my own flip case function it's going to be kind of ridiculous flip case of car any given character C and what I'm gonna do is if so first I need to give make it a string sure I could just do that if está lo I know it's lower case if it equals itself right if the lowercase version of the string is the same as the string and I think I want to say it this way if s equals s this is just a little clearer if s equals s to lower case then return s to upper case otherwise return s to lower case and people were giving good suggestions about using X or flipping bits or adding the ASCII values that would be a nice way of doing it apparently that's not a way you can make a string I'll just do this think that works that's one way to make a string okay plus equals flip case oh no just next move up so oh no next move yes next move equals flip the case and then sequence plus equals next move alright let's have it shuffle pretty fast like every five frames and let's see what happens I got an error of lexical oh I have hit the spacebar to started shuffle shuffle shuffle shuffle shuffle let's do let's finish this off with just doing like 200 moves let's forget about slowing it down and let's just enjoy this beauty let's make it fullscreen and thank you for watching part 2 oh I have to space Bihar thank you for watching part 2 of my Rubik's Cube coding challenge where I am now shuffling the cube moving all the pieces around then unshunned it backwards to make it appear as if it's solving of course it's not actually solving itself it's just doing a sequence and then turning it back and there we go so the next step that I need to do is I need to be up I want to see it animate I think would be much more interesting to actually watch the faces themselves turn that's just a little animation thing that'll come in part three once I have that then I can start to think about are there different techniques that I can try to apply to have the cube solve itself automatically thanks for watching this very long part 2 if you make your own version of this if you figured out clever ways to refactor my code to visualize it in interesting different ways to make it more generic with different scales you maybe can make one of those pyramid it's not a cube those Rubik's pyramids oh that would be great and I'll see you in a future video good bye yeah okay alright so I'm gonna take a break in a minute and I'm gonna I'm gonna do the animation part today it's 1215 I've got a little more time in me today and I'm gonna do my sponsor segment now and then take a short break and then come back and do the animation and yes genetic algorithm is the first thing I'm going to start to do I'm recording this to disk I've got green on the stream I've got my Rubik's cube here I hope there's not a mistake in here there easily could be a mistake I have really looked at this super closely but they're lovey but the code is much it's problems but this is this is better this is like there's more to work with here alright so I'm going to tell you about brilliant brilliant is the sponsor of brilliant work is the sponsor of the coding training live streams for the last several live streams have been really enjoying this collaboration and really thankful for this opportunity to have the sponsor brilliant our work is a website that has a lot of daily problems in math science computer science lots of interactive courses algebra quantum computing I'm sure there's gonna be some stuff about black holes on brilliant sometime soon I wouldn't be surprised and what I like about brilliant is it's a chance a one I use it for now looking through it and getting ideas or things to do it's coding challenges but it's really a way for me to practice to learn through practicing and I've really especially also been enjoying the discussions that I find about people solution to problems so last time a couple weeks ago I looked at brilliant and it looked at what was the thing that I saw oh right it was a problem a set theory problem set which looked at the intersection between multiple sets and I made a p5 jazz sketch that visualized it and pretty really there's a lot of computer science courses now let me go to the website and you know this is probably the stuff that would be the most relevant to what the kind of things that I'm doing on this channel computer science algorithms computer science fundamentals and what I want to highlight let's what I like to do now during the sponsor segment is to pick one of these challenges and try to solve so the one that I I'm not gonna I think what I'm gonna do is I'm so this is the challenge from today it's about decision trees how long is this journey through the trees we'll come up with an answer in the next five minutes or so but I'm gonna actually step back for a second so this is a little trio of challenges started on Monday with computer classifiers cataloging ceaselessly so if I go to this one and this is looking at a decision tree so let's let I don't want to like talk about decision trees and the a challenge that I have that's the most similar to this is probably the binary tree challenge and I should probably do a video on making a decision tree so let me let me get the whiteboard going again and find my marker so I'm gonna go through Monday's challenge and Tuesday's challenge and then I'm gonna talk to you about today's challenge and then I'm gonna take a break and if you're interested you can sign up for brilliant and put your answer in there so here's the thing I have a coding challenge all about binary search trees a binary search tree is a data structure for storing info I'm not in the right hello I have a coding challenge about binary search trees so a binary search tree is a data structure for storing information in a in a binary tree and if the information I'm storing for example is numbers I might put numbers that are bigger on the left side and smaller on the right side or vice versa texts I could do it by alphabetical order and so visualizing a binary tree might look something like this and the information is going to be in sorted order and make it easier to search through it find things you go check out I think it's a coding challenge I don't know what the number is where I do a binary search tree a decision tree has this same exact structure and it's really good think of it like a flow chart you've seen these where you're answering yes or no questions so I might say something like you know if you if I were trying to classify animals or fruits these are the guy you can use it for a classification or actually a regression problem definitely do videos on this so a decision tree for example if I was trying to classify animals the first question might be I actually this is exactly this is what the example on brilliant is oh no they're using bigger than a breadbox literally a breadbox that's there that's much funnier and more clever than me let me come up with some animals so I might say do I have fur so if I say yes I would go in this direction the question here is fur question mark if I would say no I would go here then I could either arrive at the answer or another question so fur I might say now do I walk on I don't know Am I am i bigger than a breadbox right breadbox and if I were to say yes then maybe I am a what's an animal bigger than a breadbox with fur a large up dog papi I really been I'm so bad at coming up with these examples on the fly she's done fruit I'm really much more familiar with fruit so let's say let's say I say no then maybe I'll say Mouse you know nice that fur right so this would actually be known as a leaf it's no longer a question it's actually an answer you've arrived at a leaf and these are nodes so the decision tree you can either have nodes and leaves and this these can be quite complex so let's look at this first challenge so if a decision tree I've actually already answered this 100 good I've already answered this one and of this camera went off so I won't reveal I won't scroll down too far to reveal the answer but decision tree has 15 nodes how many leaf leaves couldn't have so we could diagram this all right if there's 15 there's actually a relationship between the number of nodes and the number of leaves the binary tree can can kind of have any number of things but in but so so if they're like let's let's oh I'm not at the whiteboard again so dirt with the decision tree let so there's what was the question 15 nodes so we know there are 15 nodes so if there are 15 nodes how many leaves are there I'm looking at yeah no it's good I guess the question that I'm asking now is oh but okay so actually in this case we're talking about total nodes so all of these are nodes so I'm actually describing it a little bit differently all of these are nodes but three of them are leaves so you can see there's five nodes but leaf nodes are the ones that no children so in this case if there are 15 nodes total and we're gonna this is going to reveal what is the relationship between nodes and leaves so there are kind of two extreme cases we could look at it at a diagram of decision tree and this is has to do with like how trees are balanced balancing trees trees perfectly let's make a perfectly balanced tree with 15 nodes what I mean by that is 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 oh how nicely that works out excuse my poor drawing here but you can see there are 15 nodes how many leaves are there all of the leaves are all this bonding this by the way is root is a term that's known as depth so the depth of this or this orientation of the decision tree is this depth one is this one I don't know whether I should count from 1 or 0 but let's say we count from 0 0 1 2 3 4 so it's either 4 or 5 depending on how it's technically referred to and I'm probably on early a tourist Wikipedia page we could find that out precisely but this how far is the depth and we can see that there are 1 2 3 4 5 6 7 8 8 leaves so but what if I do the tree in a different orientation let's take the most extreme unbalanced version like what if this is the root if I answer yes I'm going here if I answered no I've already got a leaf so this is the least so then here if I answer yes here no yes no yes so this is like this the depth is as this is as deep as it's going to get so let's see 1 2 3 4 5 6 7 8 9 10 11 12 13 oh I'm gonna run out of space 14 I will just go higher oh but that's I messed that up all right there's one well can you see this here oh it's perfect I have just the right amount of space 15 right so look at this these are all the questions yes always leads me to another question right this is question question question question question question question and these are the leaves 1 2 3 4 5 6 7 8 once again there are 8 but the depth is one to try 1 2 3 4 5 6 7 8 so the depth here is 8 the depth here is 1 2 3 4 4 so you can see how no matter how the tree is organized we still have 8 leaves 15 nodes total 7 question nodes 8 leaves so if we come back here we can see oh look I got it right so that bit so now we can move on let's move so that that's I would love to program this and we could visualize it that's the thing that I would look you should tackle and try I like to program little JavaScript versions and then take a screenshot and put it in the answers you can see here ok so this is a nice by the way answer that's like going through the same exact thing with some formulas applied let's go to Tuesday's what questions lie deep in the trees so I'm gonna stop here I'm not gonna scroll down wait oh no oh sorry I I can't reveal the options without showing you the answers but it's fine because I already look at this but that's ok you have a decision tree with 2,000 leaves that allows you to distinguish 2,000 different animals which of the following could be the depth of the deepest leaf in the tree select all that apply oh and look at this nice helpful guide so we should be able to have a way of figuring this out right if there were eight leaves this would be the minimum depth if there were eight leaves this this would be the minimum depth this would be the maximum depth eight so one thing we can know is the maximum depth if there are what did what did we say there were two thousand leaves the maximum death would depth sorry impacts of of death the maximum death kids ahead the maximum depth depth such a hard word to say especially if you've been talking for two hours straight would be two thousand because we're gonna the first the first the first answer would be at depth equals one then two then three the fourth and five and six and seven it's actually one less I guess it would be 1999 if this is counted as one I really should I maybe somebody in the chat is telling me the answer of this already nobody in the chat has told me whether I should be counting from zero or not when actually considering the depth but so I might have it off by one error but I'm pretty close it's gonna let us answer the right now what's the minimum depth well if there are two thousand leaves we can think about it how many if they're eight eight divided by 2 is 4 divided by 2 is 2 divided by 2 is 1 how many minimum steps do we have to get to the answer well 2,000 divided by 2 is 1500 250 125 etc etc you know so I could do keep doing this and count it but there's another way to do this log base 2 of 2000 that should give us the minimum depth so we know that the tree could be organized anywhere between this minimum depth and this maximum depth and so if we look at the answers oh well let's look at what log log base 2 of 2000 is doesn't Google won't just tell me that log base 2 of 2000 is 11 basically so it should be anywhere between 11 and to 1990 not 2000 and you can see this is the correct answer it can't be 10 it's got to be at least 11 but it could be 15 150 or 1500 let's see if I did that right yes so it has to be greater than 11 and the number of leaves 1 1999 so that's the way to consider the depth anywhere between 11 1999 thank you Gordon Chan who has answered this and there's a nice discussion of that here all right so now today's challenge which this is from yesterday I'm gonna go back is how long is the journey I have an answered answer this one on purpose so now let's look at this you have and I'm gonna let you think about this while I take a break and get some water and you know do some other things you have two decision trees little tree has 41 nodes 20 question nodes and 21 leaves 21 leaves that's hand of the key number for you there big tree is 2001 nodes a thousand one leaves you don't know anything about how either tree is organized right it could be a perfectly balanced decision tree or it could be a sort of like the worst case scenario where there's you know a depth row essentially of that tree for every single question so you know so you're gonna ask each tree a question and you don't know it could it in the case by the way of this tree it could take just you could get lucky and you get the answer after just like one question so but you have you know you could also get unlucky in this case and a half to go dick you know 2,000 asked like 1999 questions if it were balanced you would know that you always have to ask 11 questions but that's so the so the minimum would actually be one the maximum will be 1999 for if it's unbalanced if it's balanced it would be 11 so in this case with these two trees what what which of the following statements are true would little tree always be faster than big tree think about that easy if you don't know how they work isn't there a way that you could organize big tree and organize little tree so that big tree was actually sometimes faster not always but sometimes faster I don't know think about that for some tree shapes using little tree is sometimes slower and sometimes faster and then for some tree shapes using little tree is always slower so this is so I you know I think a way to think about this question is just to think about those two extreme cases what if both trees are perfectly balanced what if those both trees are perfectly unbalanced what would the answer for all three of these questions be so think about that we'll I'll come back in about five minutes and do the answer write your response there you can sign up for free at brilliant org slash coding training please go to that URL lets you know that lets them know that you found brilliant from the coding train and that that helps me out if you're if you feel so inclined and also if you're interested in a premium subscription to get access to all of their courses and all their materials the first 200 subscribers to sign up from that link will get 20% off okay so I'm gonna just I'm gonna mute my microphone let me make sure this is oriented so you can see it I'm gonna mute my microphone and then we will come back and discuss the answer I'll be back actually I'm just going I'm gonna take away my image and place the music oh if I'll do that correctly this time as always I always forget this stop this stop this stop this done and then this stop this stop this stock this stock is fun never forget this stuff I'm gonna do this this dot this dot this dot this dot song never forget the Vista but somebody composed that song for me I'm gonna say once again coordinates it's our new coordinates and autotune and the internet will fix that for me coordinates it's the Cartesian coordinates and it's not for do Cartesian coordinates its Cartesian coordinates setting my mic back on boom I am now visible so let's talk about this problem all right hopefully you've thought about this maybe you have an answer maybe you already submitted an answer on brilliant if you did I hope you signed up through brilliant org slash Cody crane but let's talk about the answer to this problem right now you have two decision trees little tree has 41 nodes so 21 leaves big trees 2001 nodes so a thousand and one leaves we don't know anything about how either tree is organized so if answering any single nodes question takes the same amount of time so it's like you don't have to think about the questions for a longer period of time wherever you are on that tree which of the following statements are true for some tree shapes using little tree is always faster than using big tree let's think about that so remember I talked about previously in the case of a balanced tree a perfectly balanced tree it takes log base 2 of the number of leaves then a log base 2 of the number of leaves so if we're thinking about log base 2 of how many leaves were there again 21 and a thousand and one log base two of 21 is always gonna be always going to be less than log base two of thousands this is true I would say all right now the third question I mean the second question for some tree shapes using little tree is sometimes slower and sometimes faster than using big tree so let's think about that this is relevant to the case of the the worst case scenario where every single level of the tree results in leave so it's possible that sometimes you're just gonna get even in the tree with a depth of 2,000 that you're gonna get to the answer off the first question whereas in a tree with the depth of 20 you're gonna you could take 15 questions so while on average you would get to the answer more often faster than I would be an interesting probability to compute and we can run some simulations we could code with this that it is possible that sometimes little tree will be faster so that is correct for some tree shapes using little tree is always slower than using big tree could that be true I'm trying sir I'm just checking the chat to make sure no what's telling me okay could that be true could little could you could we come up with a shape where little tree is always faster no I don't think so I don't think so how could we prove that they get about this how could we prove that we're little tree lowing we could come up with a shape where little tree is always faster is there a shape where little tree is always slower no because no matter what the shape no matter what shape we pick it's always going to have a big tree is always gonna have a maximum depth greater than the maximum depth of little tree right they could have a minimum each have a minimum depth of one or they could have different minimum depths so that you that that the that you could possibly sometimes it little tree could be slower than then big tree but the maximum depth of big tree is always no matter what the shape is always going to be greater than the maximum depth of little tree I think that's right so I think this is false pretty sure I've gotten this right okay hit submit correct you I'm not getting fired from my sponsorship job here uhhuh you know but getting it wrong is actually the point learning is trying to think this stuff getting it wrong and let's look at the explanations so we can look at the explanation ah here we go this looks like a nice one so what looks like what happens is you can like sort of react to the explanations and some of them bubble up to the top and I've been seeing yo ah Pedro Alfonso quite a bit bubble up at the top here so if we look at the minimum depth and the maximum depth with a balance trees we have four and five and nine and ten wit and we have 120 and one in 1,000 so for some tree shapes so starting with a bounce little tree at depths of 4/5 we can only increase depth of one or more leaves if we decrease the depth of the other leaves if some increase to more than four or five others must decrease the less than that so it is not possible to put everyone with a depth greater than the depth of the best big tree the balance victory so this it's really unlocking this is really about looking at the minimal minimum depth and possible maximum depth let's see if some other explanations so uh I would love to see anybody watching if you're if you're so inclined to add your explanation there I'm going to check this later let's make you know if you make a p5 sort of sketch that animates this or explains this please share that with me all right thank you again for this brilliance please if you're interested in more about brilliant go to brilliant org slash coding trained to sign up and let them know that you found brilliant from the coding train and the first 200 subscribers do if you're interested in the premium service will get 20% off all right so I think before I go it's almost 1 o'clock and I always say I've only got a live stream for two hours I seem to make it to 3 I think I would like to take this Rubik's Cube simulation that I just previously did and actually on animate it I'm feeling a little it's a little warm in here I'm gonna move my microphone to the shirt I don't think I'm gonna wear this sweatshirt anymore this wrote animation requires so let me move the code back to so a couple things I want to do is let me do save as this is gonna be part 3 and then let me what do I want to do safe either save data sparked 3 oh and I don't want to fullscreen let's just go back to let's just go back to here and you let me do something I think it'll be a little nicer if I just like add those rotations so let me just actually do some things turns there's so much code here let me take these three functions and put them on a separate tab and what I let me try like rotate X by like point two and rotate Y five point three and maybe like rotate Z I like negative I just want it to start actually so let me rotate Y down so I can see it at the top well that didn't work Oh cuz I'm we do that first oh no that's rotate X that I want to do down look let me do that a little bit more I'll just do these arbitrary I'm just trying to put it in some kind of let me rotate Y a bit more also that's pretty good do a little more Thanks there we go I just want it to I wanted to start in a slightly rotated position so that when I do this I can watch it go okay so oh by the way I shuffled my cube so maybe I'll work on solving it maybe I'll work on solving it before I go do I still have my overhead camera oops yes but I'm not gonna do that right now although this would be good for me too I should have I should be using this when I want to like talk about the cube because if I look at it over here it's a it's not close up and whatever okay all right oh wait a second are the sides wrong yellow red so I'm looking at it yellow red green oops ah yellow red green orange white no no they're they're in the right orientation I might have updown leftright messed up but you know whatever it does all the parts okay I want to do the animation alright so actually let me erase my decision tree stuff in case I need to use the whiteboard I'm gonna be really glad when this Rubik's Cube project is over there's all this other stuff I wanted I was like intending to do this month but I'm like totally obsessed welcome to part three of my Rubik's Cube coding challenge what I have currently is a Rubik's Cube simulation where I can do all the moves updown leftright clockwise counterclockwise all that stuff and I can make a random sequence of moves then I can play out those moves do them in Reverse and I can see the result of that the Rubik's Cube is shuffling and unruffled however I guess I have to it won't do it again unless I how come I won't hold on I want to make it I want to be able to hit the spacebar and have it do it again so if I do the spacebar key pressed controls what did we call it counter equals zero yeah alright ok welcome to part 3 of my Rubik's Cube coding challenge but what I have so far oh wait wait wait I want this to be here I'm really gonna I'm gonna get it don't have to blow my nose hello and welcome to part 3 of my Rubik's Cube coding challenge so I've done two parts already if you watch those I'm very thankful to you and but I'm gonna do something really important in this and it's really not about the Rubik's Cube at all it's really about animation and I want to be able to just do something to make it a little more visually pleasing to watch it do stuff so what it does right now is if I hit the spacebar it's gonna shuffle a whole bunch of moves all the possible moves up down left right clockwise counterclockwise it could do any move along any axis it's also then going to whatever it's doing a random sequence of 100 moves and then it's gonna do those in Reverse and you can see it looks kind of like it's solving it of course it's not just doing a random sequence and then applying it in Reverse it's the spacebar again it's gonna go again it's actually doing the same sequence again so this would be I think more what a I would be a little more confident that it's working correctly if I could actually watch the the cube the cube ease rotate themselves to actually turn so in order to do that I need to add an anime I need to add animation you actually use the rotate function to do that so I have to figure out how to do that add double turns yeah that would make sense okay all right I think good I think a way that's going to make sense to do this is to create a class called move and each move is what it's a given axis like what's the axis that's moving what's the direction it's moving and then if I'm going to do an animation I need to animate an angle from 0 to 90 degrees so I need an angle which will start a zero I need to have an axis and maybe what I'll do is just do x y and z mmhmm so I know what axis it is is that what I want to do yeah yeah angle axis and axis yeah an angle an axis and I'll have that access just stored in variables XY and Z so so the X will be one or negative one if it's right or left the Y will be one or negative one it's up or down the Z will be one or negative one if it's front or back so that's kind of I think how I'll deal with this right now so when I make a move I have to give it an x y&z and that's all I have to give it oh in a direction so I need to know whether I'm rotating well then I'm rotating clockwise or counter clockwise or the angle is going up or the angle is going down so this dot x equals x this dot y equals y this dud C equals Z the stock Direction equals direction and this so ultimately I've kind of done this already in the sense that I have these functions called turn Z turn Y turn X and those actually move the cubes around and rotate their faces but they do it instantaneously so what I think I want to do is create an animation that happens then I finish that animation then I quickly move everything around and it will look as if it's happening seamlessly so let's just say for the sake of argument I'm gonna have one move move em I'll call it move and move em and forget about this so I'll leave the sequence thing in here second move is a new move which is going to rotate the z axis the front face so that is 0 0 1 in a clockwise direction that's a move then I want to say move dot start I think I'll have a function called start and what does that do it sets a variable I'll have a variable called animating and it sets animating equal to true I don't know that I'm gonna need this but I feel like I might need a flag to know when I've started or stopped so then I need an update function and what update will do is I could use lurk for it to like interpolate from zero to ninety degrees or I could just increase the angle so let's just increase the angle right now I'm gonna say angle plus equals direction times you know some amount like point one so I'm going to increment the angle by 0.1 and if angle is greater than half pi then angle should go back to being zero actually and then I'm gonna say animating equals false so let's just see if I can get this to happen so basically if I have a move and then I say move dot start then in draw I just want to say move to update and if I run this so the data of the move is happening that that angle is changing but I need to actually rotate these so the way that I could do that is right here when I'm showing the cube I could check and say if cube well right here just a if cubed Z equals move Z let's just do that right if cube dot C equals move Z then I want to rotate Z by move dongle and I'm gonna want to have a push and a pop here alright that should then move Z cannot be resolved or is not a field move has a Z Oh cube index i if cube index i right if cube index i dot c we go look at it it's turning kind of doing something what's it doing why does it keep going so a update should only update the angle if it's animating so once it reading and it stops animating so now we should see it turn oh you know what I think I'm having this weird issue with processing which is that it takes a little while for processing to start so what I'm actually gonna do is I'm going to have move dot start go into when I when I press the spacebar just so I can be sure it hasn't started yet so I'm gonna run this sketch I'm gonna hit the spacebar there we go look at that it moves but look at this it moves but the red stuff doesn't stay there because all I'm doing is creating the animation of the movie I'm not actually updating the data but I need to update the data so I can do all the future moves but I think there's an easy thing I can do here which is I can say move dot update if move dot finished then what do I want to do turn Z move dot direction turn Z isn't that a function Oh turn Z move Z moved out direction so I think there's got to be a way I can encapsulate this into one function there's no finished so I probably just used the animating boolean right mmm that's another one finished is false finished is true and then boolean finished returned finished so now what should happen is it should animate oh that's weird why is it going back and forth so move updates if move is for oh because it's doing this over and over again so ultimately I want them when the move is finished I want to turn it once and then be done so really what I should do is put this z Intendant move yes so actually I don't know if I need that boolean variable at all what I want is when it's done I won't actually just say turn Z move according to this Z and this direction right and then I don't need this finish stuff I'm gonna keep that in there just in case I need it so now it's your turn there we go look at this oh so now I'm turning it so this is the idea this is the logic I just want to hit the spacebar it's doing every single move now the question is now that I've got this working how can I make every move work in the same way so there's some things that are kind of hard coded in here for example this shouldn't always be turn Z right this should sometimes be turn X or turn Y our turn Z we want to deal with this so before I do that though let me just make sure it works in other directions so for example if I were to say a negative one that should be the back of the cube okay so that's working and if I were to say one negative one that should be the front of the cube but going now in counterclockwise direction okay ah so that doesn't work so why doesn't that work because if I'm going in counterclockwise direction I'm going all the way to negative half pi so that's something I need to fix so here if angle so I could say if absolute value of the angle is greater than half pi so if I'm going in the negative direction I need to check negative half pi that should fix that great so now I can go in either direction only in the z axis so what if I make a move that is now the xaxis oh so if I say 1 0 0 1 this should be right I think I have things flipped so it might end up being the left and the way that we're looking at it but if I want to rotate along the x axis so if I do that now it's confused it's doing something totally nonsensical that's not the correct rotation so the issue here is that if cube Z equals move Z right cuz so here what I really want to say if absolute value of cube index i z is greater than 0 so i probably should have a variable that's keeping track of the actual index but really what i want to just say is is cubes if is it the z axis then do this so now nothing should happen if something did happen oh because whoa oh it's still doing this but that we shouldn't see that animation ok so let's try to get the x axis else if the absolute value of cube X and cube x equals move X then I should say rotate X moved on angle all right so this now would do the xaxis and this should be an elseif because I'm never gonna do two at the same time so this should be rotating the xaxis the issue is now and move update when I get to this part I don't want to do turn Z I want to do turn X hmm so that I could do the same thing I guess if a by callback functions or something would in JavaScript would really help me here it's probably way to do that in Java but I'll just do the same thing if absolute value of Z is greater than zero turn Z otherwise if absolute value of x is greater than zero turn X X direction so let's oh this should be X so I'm I'm kind of getting lucky here because there's only three possible axes but it definitely would be useful for me to use like and a new a new robo if I get indexed to the axis but let's just see if this works so now this should be the x axis awesome so that works I've got the x axis so now I should be able to do the y axis turn the y axis axis axis all right now I should be able do the y axis turn the y axis let's just check a y move let's make them move 0 1 0 oh it's not animating why is it not animating so what did I do wrong oh I didn't I didn't do that here I need to add the y so now this should do the yaxis oh no something's wrong Oh I'm going the wrong direction so I think this should be negative angle cuz that my yaxis is flipped yeah there we go you know I I might have whatever it works there might be something that I'm actually done wrong here but I I want the data is moving correctly I just need to make sure the animation matches that so now instead of having this all moves be just these letters now all moves is an array of move objects move new move array with new move so up is 0 1 0 in the One Direction you know what let's just do I might as well just do them all I mean I can always invert them but let's do it let's just actually do them all so this is this is up in both directions this is OK hold on I'm gonna I'm gonna speed through this so you don't have to watch all this up in both directions down in both directions right oh shoot Oh right and left and then I need I did up down right left front back that's what I need now so front front back so now all right I put in all the moves up down left right front back clockwise counterclockwise this should be everything it should be 12 in there 1 2 3 4 5 6 7 8 and I tell him 12 that's all the moves so I should be able to now pick any give and move and all moves and animate that one and just sort of see oh wow this sequence this sequence stuff has to change so the sequence stuff I'm going to do in a second but I was using strings before that won't work we take this out so any given move I should be able to do so this is move 3 index 3 0 1 2 3 so that should be the bottom oh I've already spun it that should be the bottom in a certain direction whatever great so hopefully that's the right one that matches up now the sequence is let's make it an ArrayList an ArrayList of move objects this will be the sequence and I know if you're a cue bird there's actually like a back to which is right ologist consider that back in the same direction twice for now so we can consider this to be an ArrayList of moves and when I'm making that sequence if I'm going to make let's just do 10 I'm gonna pick the size and I'm gonna say pick an index then I'm gonna have move and equals all moves get that index this has an extra weight inte R and Amol moves sighs isn't that what what's wrong with that errors oh oh all moves is all moves sorry all moves is sorry all moves is an array moves is an ArrayList so that's index all moves index R that stays the same and then I'm going to say sequence dot add so this is me putting in ten moves in a sequence so let's not worry about inverting the sequence let's not flip case I think is no longer a thing anymore and then I need a current indexes current move which is counter so I also need this to be let's call this current move so there's a current move and current move starts at current moves equals sequence get counter so it gets the first one then I'm going to say current move update guess what this finished thing is going to come in handy perfect if current move is finished then index load echo counter plus plus and current move equals sequence get counter and I definitely need to make sure that I only do this if counter is less than sequence length so I'll put this if statement in here I don't think and I'm gonna do this whoops put this sequence in there and then I'm gonna say if started around here so this is how sequence dot size not length so this is the same exact algorithm but instead of the move being indicated by a single character it's now this object so I'm updating that move when it's done as long as I'm not the end of the sequence go to the next one and get and then get the next one and then this current move is what determines the rotation and so I called it just move before but let's call it current move and I think this should work now but moved out to start okay I'm not gonna worry oh this should be just started equals true so now it's just a believe I'm not starting to like oh oh oh this could be current move start this actually could be current moves start so because this this can actually current move update could happen if it's not animating so yes so I just want to start painting the spacebar starts the first move which does all of these and then each one because I have this start function needs to actually explicitly call start okay this I think should work so if I press the spacebar you can see the move happening oh why if counter is less than oh it's got to be less than size minus one because this is where I increment so I'm going to the next one the last one is size minus one so that's good so let's give it 50 random moves and let's get it started so now it's playing 50 random moves it's a little silly that sometimes the moves are inverted so now I should be able to add that sequence well what just happened there what just happened oh I'm not making a copy of the move so a move is like animated and finished and then it went to gets it again if it does that move again it's not like a copy of the move so this should actually be ha when I make that sequence oh yes this should be like all moves clone or this is a way to clone objects but I'm just gonna write my own copy function so all moves index are copy or when I call start I could set I think it's actually as simple as just setting you know what I might be able to just not do a copy but set the angle back to zero couldn't I do that animating equals true finished equals false like that might actually work so I could have made a copy of the move but I think just in start since I have to do that with everything that might fix it let's see let's see if that fixes it munch moves its gonna do the same move again just to by the laws of probability I think this is working dare I say and I can still spin around it I mean it doesn't look like it's making any mistakes alright so I want to make an animation speed now I want to make an animation speed oh and I should fix this faces thing because you're seeing though there's like extra faces I should you gotta make the cubes at the beginning only include the actual faces that are on there that's the thing that you can fix when you make your version of it so now let's make a speed let's just make that a global variable and right now it's 0.1 so let's make it like 0.5 to make it kind of faster and then in move this I mean I suppose that could be a property of the move itself but let's just see it do it faster cuz that's more fun to watch it do it faster so let's see if now if I add the moves in Reverse when it's done it should be solved and it should be solved oh and yes this is a good idea Fabian is suggesting use a move ID so I could just use that index instead of a move object there's so many different ways to do this I'm excited to see what people how people refactor this and make it more interesting or better or different in all sorts of ways okay now that I have all the moves now I need to do is go through the sequence backwards right start with the last element of the sequence go down to zero oh this is where I kind of want to I do need to make a copy because I need to make it a completely different move in the opposite direction so I do want to say move next move equals sequence get I and I really actually need a copy here so we'll see this both ways because then I want to say like next move dot reverse so in the move object or though I could just point to the other move but I'm gonna do it this way I'm just figuring on this I've been fun figuring this out I'm gonna make a function called copy which returns a new move with what XYZ and give direction and then I'm gonna make a function called reverse which just says Direction x equals negative 1 so this if I make those two functions as I'm going through the sequence I'm copying all of them but reversing them and now I have it should be twice as long so let's just do this with just like five moves just to see if it works wait oh wait where did I do that oh I've got to add them no wonder I've got to add those moves want walk okay let's go here we go so it should do those moves in Reverse and boom there's the Rubik's Cube back in its original state now here we go let's make a full screen and enjoy this make it a little bit faster enjoy this rubik's cube doing 500 moves then in Reverse this is gonna take a long time let's not do 500 let's just do 100 and you will get the feeling of the cube solving itself you know I really should do something where if I pick a certain move I'm not allowed to pick the reverse of that move next cuz that's gonna make it look really weird like why is it doing that but that's neither here nor there here we go thanks for watching this coding challenge enjoy the end of this video when I come back if I do a part for which I intend to do I'm gonna try to work on some algorithms to actually solve the cube so I should I should put a counter so I know what moving camera went off let's do this again all right hold on well everybody let that let me actually add something that I can see the text of the of where I am I think I'll just console.log it so let's just do just so I can see it let's just do print line counter so I have a sense and then I am going to print line counter oh no but if I do it fullscreen can I hold on let me take a break for a second here can I actually draw text if I say fill before I do any of this if I say fill 255 text hello oh that's fun that's actually kind of fun all right that's fine we'll just leave it like that let me actually draw the counter so I can see what move are on because that'll be somewhat useful so I'm gonna say fill 255 text counter I don't know it's just gonna end up being in 3d space in some weird location let's just say 100 counter 100 100 well the scale is gonna be weird let's just try that text size 32 and let's there it is okay look look it spins with it so now we should see it's going through the moves so when it gets to 100 it'll start doing the thing in Reverse all right so I hope you enjoyed this coding challenge I hope you make your own version of this when I come back to do a part for if I ever come back to do a part for which I do hope that I will there we go oh look cube solved um I will try but won't do it again hold on I had to reset the counter back to zero for it to do it again alright let me put this let's have some fun with this let me put this on speed of 1.5 let me make it do a thousand moves and here we go and thank you for watching this coding challenge oh it's hot you're not really seeing the rotation it's just like shaking okay that's too fast let's try a speed just of like 1.0 alright thanks for watching this coding challenge where I am shuffling the Rubik's Cube with random moves then playing those moves back in Reverse it's gonna when it gets to 2,000 moves it will actually look be back in its original orientation I hope that works I hope you make your own version of this if I come back and make a part for which I intend to do I'm gonna see if I can use a genetic algorithm to take any shuffled state and evolve a solution within maybe a certain number of moves I suppose 20 might be the number of the pick to pick in terms of the genetic information which will be a sequence of moves this should be similar to what I did with searching for the phrase to be or not to be in the space of all possible random phrases we'll see if that works I've no idea if that will work but I'm gonna come back and do more with this in part 4 in a future coding challenge and please share with me go to the coding train com look at the link in this video's description to if you make a version of this whether it's in JavaScript or processing or some other programming language or environment you can submit a link to your version so that I can see it and the rest to communicate as well alright thanks very much goodbye alright I might as well let this finish whoa I like how the counter is just spinning around its eye there's probably way for me to do this within turn off peezy cam but it works alright I'm I'm good for today it's 130 we made a Rubik's Cube oh I got to solve my cube there's one algorithm that I don't really have memorized that I might have to look up I'll put it on my hidden computer where am I let's see oh I have an idea we're gonna make this like I'm racing the cube this is gonna be fun uh all right let's get rid of the counter and oh no I think I want the counter there so what how long how long was that oh I bet I need more time I'm gonna race the cube first let me just make let me just show you that this is shuffled right so this this is shuffled I don't know what sequences then I'm not keeping track of this in my head you know me I can't possibly do that first of all it's embarrassing you've allowed to all do two cubers out there who really know how to do this my my ability to do this is quite embarrassing okay so now what am i doing what do we think what's the overunder on me being able to solve it in ten whatever that takes into ten thousand let's actually leave it at a thousand let's do it slower let's leave it at a hundred but make this sequence much like let's leave it at 100 but do it at what was it a 1.0 at like 5% of that okay ready wait no I need to put it back to not fullscreen I guess this is gonna be fun I'll play some music okay ready well I should have it do the first part to shuffle it so what I really should do is just apply all the moves should start it shuffled I'm too lazy I'm too lazy I'm just gonna do it this way okay ready here we go are you the other side YMS up the yellow side again where are you right there you are oh that's not ready wait just set myself up for success way where No oh that would be much more exciting if I wait I already messed it up again I have I just given myself a little bit more time I would have gotten it so that was wait guys how long was that total cuz that's song under five minutes but I was looking up there were two there's just two algorithms that I was looking up that I don't have memorize for this way of doing it all right so I'm gonna go I'm gonna check the chat here Oh a lot of people are pushing for the inside faces to be black the computer cheated this was these are comments from a little while ago that I missed all right thank you everybody what method did I use I don't know I used some method of a combination of a bunch of different videos that I watched I can turn off my overhead camera no that's here I'm gonna so this code will be online very shortly if you want to use it for anything and yeah so I let me I can take a couple questions before I go it's 135 it's been a three hour livestream I feel accomplished apparently that was approximately four minutes which and I was doing that at the beginning I had a lot of trouble her because I was so nervous so that's pretty good I would like to see if I would like to learn see flop everyone's telling me see fob beginner see fob is that's what I was using okay like what I was doing the the parts that I know it are memorized but what I know how to do is I know how to make the cross cross white cross on the yellow side move it to the white side do the white corners then do the middle row that I can do then I also know pretty the men thing I know how to do is to make the yellow cross on the yellow side and then I hope that I get lucky and I try think I try soon algorithm a bunch of times I get that fish thing and then I point the fish this way and then I do that some more and eventually I get the top and then I will then I had to look up some other algorithms for moving the moving the center and corner pieces around but I where I basically stuck is at the I can get the yellow cross from memory not in the correct position every single time so I'm not tied but I've tried a few different things after that and I have them all mixed up in my head so so you learn f2l which is part of see top for the first two layers if you know that you will be a lot faster I prefer something that is like less memorizing algorithms and more actually able to kind of because like I'm I the thing that I like doing the most is the middle layer like that I just I do it by sight but I'm not doing it by memory but it's like a quick algorithm that I have to do so many Jase in the chat I don't know if I'm pronouncing your name correctly Jase asked what algorithms are you considering for solving the cube in Episode four so first of all I don't know that any of these algorithms that I'm gonna attempt are really gonna do a good job the first thing that I'm going to do is try to use a genetic algorithm like is it true I think there's like God's number or that any the cube from any configuration can be solved within 20 moves is that true I don't know if that's true somebody told me that I have a saw a YouTube video read an article I hate to research that so what is the minimum because I can create a genetic DNA string for a sequence of moves but it needs to be a fixed number it's okay if it solves it in less than that but it needs to be a fixed number and then what I can do is I can create a population of those move sequences run through them and then I need some fitness function the fitness function I'm going to need is to evaluate basically how close I am to the solution it would be lovely if just counting the number of pieces in the right space would be a good enough fitness function that's what I'll try first I think that's going to be problematic and the I did read a paper about machine learning to solve a Rubik's Cube and the methodology was basically the reward system or the fitness function how to do with distance from the solution so you kind of needed to know how to solve it from where you were in order to figure that out so but I would like to try to do it without that because I would like to see if I can solve it without your pre knowing a way to solve it but we'll see there's no known algorithm for getting those moves from an arbitrary configuration well I don't think it's gonna be me who's gonna figure that out but this is what I'm gonna try 20 and a half turn metric 26 in quarter turn metric 20 turns with 180 turns I think 24 with only 90 okay so I'm not gonna learn a strategy for any generic any random configuration what I want to do is solve for the sequence of a particular configuration if I can do that that's at least a first step maybe 50 it took until 2010 that God's number existence so people had shadow telling me it has to do with whether I'm allowing for 90 degree moves or just quarter moves I suppose I'm sorry 90 whether I'm allowing for full 180s or just 90 degrees all right what is the sense of p5.js and p3 what are their names mean Macario part three please I'm sorry that's very nice of you to ask and then I'm also being asked what's the plan after the Rubik's Cube series so the reason why I went down this road is I am working on the thing that I'm interested in pursuing is more machine learning examples with ml five and ten to flow Jas and I I wanted to try some more neuro evolution examples and maybe more genetic algorithm examples and I sort of thought the Rubik's Cube would be like a nice thing to try with it became a much more complicated project and I became kind of obsessed with it but I think I what I should be doing today because it's what I taught in class this week at NYU is I did Abner Oh evolution with flappy bird but using tensorflow J s instead of my own toy neural network library so that's probably what I would come to soon I'm also working it's happening offline not during the live streams but I'm working on a bunch of videos about data and API it's a little bit of some redundant contents of things I've done before but updated and so those videos are will actually come out just as like edited videos in May and June so is this the hardest longest challenge you've done on your channel maybe maybe what's been some of the other ones I mean there's a bunch that arrived like five six parts but whether they were harder or just took longer you should watch my palm challenge and see how much trouble I had if it pause okay this that fitness function would make it exploit way more than Explorer that's kind of true that's a good point there's a fine line so I got to do some thinking in some experiments kenya's can begin HUD and can and HUD oh that exists oh I didn't know you could do that thank you hold on where did I'll be doing the text let me have that cam begin HUD cam and HUD ah there we go that's definitely I wish I had known about that I would have done so much debugging on the screaming with that thank you not pong pong P Ong um thank you everybody for tuning in this is a delight for me to get to do every week I will be back I mean I am keeping this regular time every Wednesday at 1030 a.m. next week is April 17th I think I'm gonna miss April 24th if you're just sort of keeping track of your calendar that's not a hundred percent yet but there's that I have a conflict that week so and I'm certainly gonna probably miss a date or two in May so I'm gonna try to do once a week every Wednesday and I've got old kind of stuff to do and get to and thanks for your continued support your questions your comments your feedback I really appreciate it I am going to put on my wallpaper and get turn this stream off so this is random this is noise / Lee noise that is in the core random algorithm the actual random algorithm itself those numbers aren't related at all you pick like I'm picking random numbers between zero and ten nine two seven three six one one nine nine four eight one nine two one three but with curly noise I might pick numbers like this two three four three four five six five four five six seven pair asked what's next week I don't know yet I mean in theory I might just continue the Rubik's Cube it probably a good idea for me to take a break for a minute but we'll see I don't know what next week is yet but stay tuned I try to put it in the title when I schedule a live stream or are tweeted out of that kind of thing I'm sick seven five six seven eight nine look like pearls in boys 4 3 2 3 4 3 4 5 6 5 these look like girls and boys but with curly noise I might pick numbers like this 2 3 4 3 4 5 6 5 by purling noise that it's early noise so this is Hurley noise that is Hurley no this is this is Hurley noise that it's Hurley no so this is Hurley noise that is her purlins know her Perlin noise that it's Hurley noise this is Hurley noise that is Hurley this is this is Hurley noise that it's her little so this is Hurley noise that it's her early early early early early early early early early but with pearly noise I might pick numbers like this this is like Perlin noise performance part later
