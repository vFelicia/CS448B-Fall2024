With timestamps:

00:00 - okay I'm back for another video about
00:02 - stuff that's a es6 again if you're just
00:06 - watching my beginner programming videos
00:08 - and just learned about programming you
00:10 - might just go back to watching those
00:12 - this is a little bit of behind the
00:13 - scenes stuff very technical but it is
00:15 - interesting and it can be useful the
00:17 - thing that I want to talk I talked in
00:18 - the previous video about let and var and
00:20 - the difference between those two things
00:21 - and you know you could for most
00:24 - sketching that I'm gonna do in p5 and
00:25 - make a crit weird experiments I could
00:27 - use them interchangeably and not worry
00:28 - about it too much but there is another
00:31 - term that you're going to see you're
00:34 - gonna see people saying var X if they
00:36 - are using style previous to es6 or 2015
00:41 - ECMAScript you're gonna see let if
00:44 - people are using es6 a more modern style
00:46 - of JavaScript but you're also gonna see
00:48 - people using Const and what does Const
00:50 - mean now there is no reason you have to
00:53 - ever use Const ever I mean somebody I'm
00:57 - sure come up with a reason why you you
00:59 - might have to but what I'm saying is for
01:00 - the things that I'm making I could just
01:02 - use let but my code is perhaps a little
01:05 - less efficient in the way that it runs
01:06 - and uses memory so Const is only an
01:09 - option to help with the efficiency of
01:12 - how your program runs and manages memory
01:15 - on the computer because if you have some
01:17 - data if you have a variable in your
01:19 - program that you know it's value is
01:21 - never going to change the computer can
01:24 - be source can be smart about how it
01:27 - stores that information it doesn't have
01:28 - to like leave extra space for extra
01:30 - stuff now I'm kind of oversimplifying
01:31 - but that I think is a useful way to
01:33 - think about it
01:34 - so for example if I know that I want to
01:36 - have a variable called cat and I want to
01:40 - store in it the number 99 I don't need
01:43 - to say let cat if cat is never going to
01:45 - have another value ever I can say Const
01:48 - for constant because cat is going to be
01:50 - a constant now here's the interesting
01:51 - thing this makes sense when it comes to
01:54 - just numbers but there's more to it than
01:56 - that
01:56 - what if you're declaring a function or
01:58 - what if your variant object so let's at
02:00 - least first look at the simple simple
02:02 - scenario of working with numbers so I'm
02:07 - gonna come back over here and all of
02:08 - this I can do just in the JavaScript
02:10 - console in the browser itself so if I
02:12 - say let X
02:13 - equal fifty can you guys see this and
02:15 - make a little bigger now I can look at
02:19 - the value of x and the value of X is 50
02:21 - and I could say x equals 100 and now the
02:24 - value of x is 100 let's do this again
02:27 - let's say Const y equals 50 so now I
02:31 - have a variable called Y which is a
02:33 - constant its value is 50 now I'm going
02:36 - to say y equals 100 uncaught type error
02:40 - assignment to a constant variable so you
02:43 - cannot assign to a constant variable you
02:48 - cannot reassign the value it's forever
02:51 - 50 so I was I feel like I need to go
02:54 - back to the whiteboard but I don't think
02:55 - I do so what does this mean in terms of
02:58 - objects it's a little bit strange I'm
02:59 - not sure I fully understand this
03:01 - behavior so I might have to like come
03:03 - back to this a little bit and I'm seeing
03:05 - alka putting some interesting
03:06 - suggestions in the chat here okay so
03:10 - let's look at what if I say what if I
03:11 - have like a particle constant particle
03:14 - and the particle has an X and a Y so
03:17 - it's really a JavaScript object oh I
03:19 - made it Const let's fine we know what
03:21 - it's going to do when it's let particle
03:23 - equal it's just an object like anything
03:26 - so this is what it is it's an object it
03:28 - has an X and a y it's a constant but
03:32 - interestingly enough when you make an
03:33 - object a constant that doesn't mean you
03:35 - can't manipulate the inner workings of
03:38 - the object like I can actually say
03:40 - particle dot x equals 200 and that is
03:46 - totally valid so I can change those
03:49 - internal variables because those
03:51 - internal variables themselves are not
03:52 - constant I can even do things like which
03:56 - surprised me when I first saw this I
03:58 - can't a particle that Z equals 50 which
04:01 - means I can add another property to that
04:07 - object but what I can't do is I can't
04:11 - now say particle equals I'm going to
04:13 - recreate a new object I'm gonna recreate
04:18 - that object uncaught error assignment to
04:21 - a constant variable
04:22 - I cannot suddenly say particle is now
04:24 - the string hello this protects me
04:27 - making some errors too because if I'm
04:28 - using a very but I can't reassign it by
04:30 - accident is something of a different
04:31 - type so I can't make it a new object so
04:35 - again I could use let but this is
04:38 - something that allows the code perhaps
04:39 - to run a bit faster they use a little
04:41 - bit less memory so if you know that this
04:43 - is and maybe to protect yourself against
04:45 - some errors so this is a useful
04:47 - technique and mostly I'm explaining this
04:48 - because when you look at examples you're
04:50 - gonna see it in a place where you'll see
04:51 - it often the way that I in mind most of
04:55 - my videos and the way that I've shown
04:56 - how to declare a function is saying
04:59 - function you know go like this this is a
05:06 - function definition
05:08 - I say function the name of the function
05:10 - parenthesis with whatever arguments are
05:11 - in there this is the equivalent of
05:14 - basically saying var go equals function
05:17 - or of course now we know it's actually
05:22 - the equivalent of saying let go equal
05:24 - function if I'm using es6 so if i'm
05:28 - declaring all these functions if i'm
05:30 - writing functions into my code it's
05:32 - often the case that i'd ever want to
05:34 - reassign or alter that function that
05:36 - function is done so function I'm just
05:37 - intending to use in my code so you will
05:39 - see this quite a bit
05:40 - Const go equals function so you could
05:44 - consider this again this is a lot now
05:47 - let me type this over here so you can
05:49 - see it so in other words what I'm saying
05:54 - is let's say I'm gonna have some
05:55 - functions function go that's one way of
05:58 - declaring a function the way that I
05:59 - typically have done in my videos but I
06:01 - can say Const go equals function so
06:04 - again while this might offer some
06:08 - optimization benefits
06:10 - it doesn't necessarily offer a lot of
06:12 - benefits for teaching and education
06:13 - especially for beginning programming
06:15 - which is why I will continue to use the
06:17 - top syntax because if I'm going to teach
06:20 - somebody for the first time ever how to
06:21 - write a function Const go equals
06:23 - function is a bit more probably
06:26 - confusing than just function go so I
06:28 - think that's so there was actually just
06:31 - an important question in the chat just
06:33 - now I talked a lot about scope in the
06:35 - previous video and I probably wanna in
06:38 - some of these now that I think I
06:39 - probably made a video just only a
06:40 - about the idea of scope but what how
06:43 - does Const affect scope so const also
06:46 - uses block scope let and cons both use
06:48 - block scope the same exact way the
06:50 - difference is const is a variable that
06:53 - can never be reassigned so one thing i
06:55 - should mention is actually at es6
06:58 - there's also another way of declaring a
07:00 - function that involves equal greater
07:02 - than and almost it looks like an arrow
07:04 - this is called the arrow syntax i'm not
07:07 - using this yet i will come back and make
07:09 - a video about this so you I could go
07:11 - even a step further with how I might
07:12 - declare a function by incorporating this
07:14 - arrow syntax but I'm not ready for that
07:16 - yet I got to take little tiny steps into
07:18 - the es6 pool okay thanks for watching
07:22 - these this this video about Const I hope
07:24 - this helped please ask your questions
07:25 - and offer your Corrections in the
07:27 - comments and I'll see you soon thanks
07:33 - [Music]
07:40 - you

Cleaned transcript:

okay I'm back for another video about stuff that's a es6 again if you're just watching my beginner programming videos and just learned about programming you might just go back to watching those this is a little bit of behind the scenes stuff very technical but it is interesting and it can be useful the thing that I want to talk I talked in the previous video about let and var and the difference between those two things and you know you could for most sketching that I'm gonna do in p5 and make a crit weird experiments I could use them interchangeably and not worry about it too much but there is another term that you're going to see you're gonna see people saying var X if they are using style previous to es6 or 2015 ECMAScript you're gonna see let if people are using es6 a more modern style of JavaScript but you're also gonna see people using Const and what does Const mean now there is no reason you have to ever use Const ever I mean somebody I'm sure come up with a reason why you you might have to but what I'm saying is for the things that I'm making I could just use let but my code is perhaps a little less efficient in the way that it runs and uses memory so Const is only an option to help with the efficiency of how your program runs and manages memory on the computer because if you have some data if you have a variable in your program that you know it's value is never going to change the computer can be source can be smart about how it stores that information it doesn't have to like leave extra space for extra stuff now I'm kind of oversimplifying but that I think is a useful way to think about it so for example if I know that I want to have a variable called cat and I want to store in it the number 99 I don't need to say let cat if cat is never going to have another value ever I can say Const for constant because cat is going to be a constant now here's the interesting thing this makes sense when it comes to just numbers but there's more to it than that what if you're declaring a function or what if your variant object so let's at least first look at the simple simple scenario of working with numbers so I'm gonna come back over here and all of this I can do just in the JavaScript console in the browser itself so if I say let X equal fifty can you guys see this and make a little bigger now I can look at the value of x and the value of X is 50 and I could say x equals 100 and now the value of x is 100 let's do this again let's say Const y equals 50 so now I have a variable called Y which is a constant its value is 50 now I'm going to say y equals 100 uncaught type error assignment to a constant variable so you cannot assign to a constant variable you cannot reassign the value it's forever 50 so I was I feel like I need to go back to the whiteboard but I don't think I do so what does this mean in terms of objects it's a little bit strange I'm not sure I fully understand this behavior so I might have to like come back to this a little bit and I'm seeing alka putting some interesting suggestions in the chat here okay so let's look at what if I say what if I have like a particle constant particle and the particle has an X and a Y so it's really a JavaScript object oh I made it Const let's fine we know what it's going to do when it's let particle equal it's just an object like anything so this is what it is it's an object it has an X and a y it's a constant but interestingly enough when you make an object a constant that doesn't mean you can't manipulate the inner workings of the object like I can actually say particle dot x equals 200 and that is totally valid so I can change those internal variables because those internal variables themselves are not constant I can even do things like which surprised me when I first saw this I can't a particle that Z equals 50 which means I can add another property to that object but what I can't do is I can't now say particle equals I'm going to recreate a new object I'm gonna recreate that object uncaught error assignment to a constant variable I cannot suddenly say particle is now the string hello this protects me making some errors too because if I'm using a very but I can't reassign it by accident is something of a different type so I can't make it a new object so again I could use let but this is something that allows the code perhaps to run a bit faster they use a little bit less memory so if you know that this is and maybe to protect yourself against some errors so this is a useful technique and mostly I'm explaining this because when you look at examples you're gonna see it in a place where you'll see it often the way that I in mind most of my videos and the way that I've shown how to declare a function is saying function you know go like this this is a function definition I say function the name of the function parenthesis with whatever arguments are in there this is the equivalent of basically saying var go equals function or of course now we know it's actually the equivalent of saying let go equal function if I'm using es6 so if i'm declaring all these functions if i'm writing functions into my code it's often the case that i'd ever want to reassign or alter that function that function is done so function I'm just intending to use in my code so you will see this quite a bit Const go equals function so you could consider this again this is a lot now let me type this over here so you can see it so in other words what I'm saying is let's say I'm gonna have some functions function go that's one way of declaring a function the way that I typically have done in my videos but I can say Const go equals function so again while this might offer some optimization benefits it doesn't necessarily offer a lot of benefits for teaching and education especially for beginning programming which is why I will continue to use the top syntax because if I'm going to teach somebody for the first time ever how to write a function Const go equals function is a bit more probably confusing than just function go so I think that's so there was actually just an important question in the chat just now I talked a lot about scope in the previous video and I probably wanna in some of these now that I think I probably made a video just only a about the idea of scope but what how does Const affect scope so const also uses block scope let and cons both use block scope the same exact way the difference is const is a variable that can never be reassigned so one thing i should mention is actually at es6 there's also another way of declaring a function that involves equal greater than and almost it looks like an arrow this is called the arrow syntax i'm not using this yet i will come back and make a video about this so you I could go even a step further with how I might declare a function by incorporating this arrow syntax but I'm not ready for that yet I got to take little tiny steps into the es6 pool okay thanks for watching these this this video about Const I hope this helped please ask your questions and offer your Corrections in the comments and I'll see you soon thanks you
