With timestamps:

00:00 - Hello, welcome to chapter
4 of The Nature of Code.
00:03 - So this chapter is all
about particle systems.
00:06 - And here's the
good news for you.
00:08 - I am not introducing any
new concepts, really.
00:12 - I mean, there is the new
concept of the particle system.
00:15 - But ultimately, we're
just reusing all the code
00:18 - from the previous chapters
and looking at ways
00:20 - to organize that code more
efficiently and effectively.
00:24 - So what is a particle system?
00:26 - In 1982, William T. Reeves,
a researcher at Lucasfilm,
00:30 - was working on the
movie Star Trek II--
00:32 - The Wrath of Khan.
00:33 - Much of the movie revolves
around the genesis device,
00:36 - a torpedo that one shot at
a barren, lifeless planet
00:39 - has the ability to
reorganize matter and create
00:41 - a habitable world
for colonization.
00:43 - During the sequence, a wall of
fire ripples over the planet
00:47 - while it is being terraformed. .
00:48 - The term particle system
was coined in the creation
00:51 - of this particular effect.
00:54 - Fascinating.
00:56 - Thanks, Spock.
00:57 - If, like me, you find the
history of computer graphics
01:01 - fascinating, I would
really encourage
01:03 - you to go read the original
1983 paper, "Particle Systems--
01:06 - A Technique for Modeling
a Class of Fuzzy Objects."
01:10 - Everything from the first two
chapters of Nature of Code,
01:13 - you'll find there in that paper.
01:14 - Position, velocity, that's
what makes a particle as
01:17 - long as all the other sort
of techniques and tricks
01:20 - that they used in creating
this effect in the film
01:23 - Wrath of Khan.
01:24 - Getting started with the code, I
don't really have a lot of work
01:26 - to do.
01:27 - I have most everything that
makes a particle from my mover
01:30 - class in chapter 2.
01:32 - But I do want to look at
this list of attributes
01:34 - and see what I need to add, sort
of focusing in on this number
01:37 - 7, the lifetime property.
01:40 - I should also mention
that I have actually made
01:42 - this video before in a way.
01:44 - I have a coding challenge
called simple particle system.
01:47 - And I would encourage
you to review that.
01:48 - But that video didn't
make use of the concepts
01:51 - of vectors and forces.
01:53 - So what I want to
do here is take
01:54 - the same idea of a
simple particle system
01:57 - but bring in the
examples from chapters 1
02:00 - and 2 of The Nature of Code.
02:01 - I'm going to start
with this example
02:02 - from the first
video of chapter 2.
02:05 - So this is just a simple
example with one mover
02:07 - object responding to
wind and gravity forces.
02:10 - And the very first
thing I'm going to do
02:12 - is just change the name
from mover to particle.
02:21 - From this point on,
my particle class
02:24 - will always be in a
file called particle.js.
02:27 - Just to simplify
for a moment, I'm
02:29 - going to remove the wind force.
02:31 - We might want to add
that back in later,
02:32 - but I'm just going to leave
only this gravity force.
02:35 - Going back to the
paper, I would encourage
02:37 - you to think about adding
some of these other properties
02:40 - related to size and color and
the shape of your particles.
02:43 - I'm going to leave that as an
exercise for you, the viewer,
02:46 - and focus in on the
lifetime property.
02:50 - Now, I'm making the decision
to specifically start
02:52 - the lifetime at 255.
02:54 - This is because I want
to tie the lifetime
02:57 - to the transparency.
02:59 - So the idea is that
the particle will
03:00 - start with a transparency
of 255 fully opaque
03:04 - and fade away over time,
meaning in the update function,
03:07 - I want it to decrease.
03:10 - And then in the show function,
instead of having the alpha
03:14 - hardcoded as 100, I will set the
alpha to the object's lifetime.
03:19 - And let's watch it fade away.
03:21 - Now, the stroke is not
fading, so perhaps I'll
03:25 - add that as well.
03:29 - And the particle's gone.
03:31 - The kinds of effects
that are typically
03:33 - made with a particle
system generally
03:35 - result from small
dots in the canvas.
03:38 - So I'm going to reduce also
the size of the particle
03:41 - and set that to 4.
03:42 - The next step is just
making many particles.
03:44 - And the only thing I need
to do that is an array.
03:46 - Now, I've done this already
in The Nature of Code,
03:49 - but here I want to take
a very specific look
03:51 - at some of the functionality
associated with arrays
03:54 - in JavaScript and p5JS.
04:01 - So here is the revised code
still with one particle.
04:03 - But instead, that one particle
has been added to an array.
04:07 - If working with arrays
of objects is new to you,
04:10 - I would refer you back to my
Intro to Coding With p5JS video
04:14 - series where I have a
whole section about arrays
04:16 - and objects.
04:17 - And there's a lot of different
things I could try here.
04:19 - Maybe I want to create
a burst of particles
04:21 - and just add, say, 100
immediately in setup.
04:26 - Incidentally, even though
I added 100 particles,
04:28 - I don't see 100.
04:30 - It's because all of
them are starting
04:31 - at exactly the same
spot with exactly
04:34 - the same initial velocity.
04:35 - So to really see the effect,
it probably makes sense for me
04:38 - to go to the particle class
and have their velocities
04:41 - be something random.
04:43 - And look at this really sort
of like strange effect that
04:46 - happened that I
didn't anticipate.
04:47 - Because the magnitude of
all those initial velocities
04:50 - is one, they all burst out
into this sort of perfect ring.
04:55 - Now, I'll give them a random
set of initial velocities,
04:58 - and we could see they burst
out in a more chaotic fashion.
05:01 - So this is starting
to resemble something
05:03 - like a burst of a firework,
and I might also refer you to--
05:06 - I have a whole coding challenge
about doing a fireworks
05:09 - simulation.
05:09 - That could be something that as
an exercise for this chapter,
05:12 - you choose to create from these
particle systems examples.
05:15 - But rather than a
single burst, it's
05:17 - more common for a particle
system style effect
05:20 - to constantly emit particles--
so one new particle per frame
05:24 - or five new particles per frame.
05:26 - So I can take this for
loop and put it into draw.
05:29 - And I probably don't want
to make 100 new particles
05:33 - every time through draw.
05:34 - So let me actually just go
back and make this one--
05:36 - so one new particle
each time through draw--
05:40 - and we could see we have this
constant stream of particles
05:43 - that are being emitted.
05:45 - I could make it's five
particles per frame,
05:47 - and it's just like a lot
more particles coming out.
05:50 - Now, even though
they're fading away
05:52 - and it sort of seems like it's
the same amount of particles
05:54 - in the canvas, it's starting
to run really, really slow.
05:58 - That's because when
particles fade away,
06:00 - I'm not actually removing
them from the array.
06:03 - So the length of
that array right
06:04 - now is really, really
big, and it's just
06:07 - going to run slower and
slower and slower over time.
06:09 - So I need to add something to
remove particles from the array
06:13 - when they're finished.
06:14 - The first step I
think would be to add
06:16 - a function to the
particle class itself,
06:19 - and I will call this
function finished.
06:22 - And it's just going to
return whether or not
06:24 - the lifetime is less than zero.
06:27 - So it returns true when the
lifetime is less than zero.
06:31 - That's when it's finished.
06:32 - And it's false if the
lifetime is greater than 0.
06:35 - And just as a quick little test
to make sure this is working,
06:39 - I'm going to write if
this.finished, fill it
06:44 - with a green color just to
see that as they fade away,
06:48 - they turn green.
06:49 - But that's not
what I want to do.
06:50 - Instead of turning
them green, I want
06:51 - to delete them from the array.
06:59 - Now, what I've written
here is another for loop.
07:02 - There are so many different ways
I could tackle this problem.
07:05 - And in fact, I have
some videos where
07:07 - I look at using
higher-order functions.
07:09 - There's a function,
an array function,
07:11 - called filter and
other ways to remove
07:14 - any particles from the
array that have finished.
07:16 - But the approach that
I'm choosing to use here
07:19 - is just to loop through
the array backwards
07:21 - starting at the end of the
array, check every particle.
07:24 - If it's finished, use
the array function splice
07:28 - to remove that particle and only
that particle from the array.
07:31 - If this is totally
new to you, I go
07:33 - through this code in
detail in one of my Intro
07:37 - to p5JS videos, Removing
Objects from an array.
07:40 - But this is it.
07:41 - I should have all
of the pieces now
07:43 - of making a particle
system using a particle
07:47 - class and an array of particles
with lifespans, removing them
07:50 - when they're done.
07:51 - Let's see what this looks like.
07:55 - And as you can
see, the frame rate
07:57 - is running fairly consistently.
07:58 - Now, what the behavior
of these particles
08:00 - are, what they're doing,
where they should start,
08:03 - how they should fade away,
that's really up to you.
08:06 - So I would encourage
you to take this code
08:08 - and start playing
around with all
08:09 - the different
parameters-- size, color.
08:12 - What's the initial velocity?
08:14 - What is the initial lifespan?
08:15 - And even maybe more importantly,
how is the lifespan changed?
08:19 - Like, for example, if I reduce
the lifespan instead of by one
08:22 - every frame by 5, we're going
to see they fade away much
08:28 - more quickly, and
we have what looks
08:29 - like almost a shower
going on here,
08:31 - a shower of particles
in the p5 sketch.
08:34 - Two more changes
before I wrap up--
08:37 - I'm going to remove calling
this edges function.
08:39 - The bouncing off the edges
is no longer relevant.
08:41 - And I think it would
make sense for me
08:43 - to start the particles
higher up in the canvas.
08:46 - So let me put the value 20.
08:49 - Oops, no, no, no, 20 for the
vertical position-- the y,
08:53 - not the x.
08:55 - And there we go.
08:56 - This is the complete
particle system example.
08:59 - I've got a particle class.
09:00 - I've got an array of particles.
09:02 - They fade out.
09:03 - I remove them from the
array when they faded out.
09:05 - What is next?
09:06 - So in the next video, I
want to take this idea
09:09 - and kind of turn it up to 11.
09:11 - So instead of just
having a particle class,
09:13 - what if I think of this
whole shower of particles
09:16 - as a particle system object?
09:19 - Could I have many particle
systems within one sketch?
09:22 - That will be the topic
of the next video.
09:24 - I hope you play around.
09:25 - I really would love to
see what kinds of effects
09:28 - you can create just
from this example
09:29 - alone by playing
with size, color,
09:32 - the fading, all of that stuff.
09:34 - Share it with me and I'll
see you in the next video.
09:36 - [MUSIC PLAYING]

Cleaned transcript:

Hello, welcome to chapter 4 of The Nature of Code. So this chapter is all about particle systems. And here's the good news for you. I am not introducing any new concepts, really. I mean, there is the new concept of the particle system. But ultimately, we're just reusing all the code from the previous chapters and looking at ways to organize that code more efficiently and effectively. So what is a particle system? In 1982, William T. Reeves, a researcher at Lucasfilm, was working on the movie Star Trek II The Wrath of Khan. Much of the movie revolves around the genesis device, a torpedo that one shot at a barren, lifeless planet has the ability to reorganize matter and create a habitable world for colonization. During the sequence, a wall of fire ripples over the planet while it is being terraformed. . The term particle system was coined in the creation of this particular effect. Fascinating. Thanks, Spock. If, like me, you find the history of computer graphics fascinating, I would really encourage you to go read the original 1983 paper, "Particle Systems A Technique for Modeling a Class of Fuzzy Objects." Everything from the first two chapters of Nature of Code, you'll find there in that paper. Position, velocity, that's what makes a particle as long as all the other sort of techniques and tricks that they used in creating this effect in the film Wrath of Khan. Getting started with the code, I don't really have a lot of work to do. I have most everything that makes a particle from my mover class in chapter 2. But I do want to look at this list of attributes and see what I need to add, sort of focusing in on this number 7, the lifetime property. I should also mention that I have actually made this video before in a way. I have a coding challenge called simple particle system. And I would encourage you to review that. But that video didn't make use of the concepts of vectors and forces. So what I want to do here is take the same idea of a simple particle system but bring in the examples from chapters 1 and 2 of The Nature of Code. I'm going to start with this example from the first video of chapter 2. So this is just a simple example with one mover object responding to wind and gravity forces. And the very first thing I'm going to do is just change the name from mover to particle. From this point on, my particle class will always be in a file called particle.js. Just to simplify for a moment, I'm going to remove the wind force. We might want to add that back in later, but I'm just going to leave only this gravity force. Going back to the paper, I would encourage you to think about adding some of these other properties related to size and color and the shape of your particles. I'm going to leave that as an exercise for you, the viewer, and focus in on the lifetime property. Now, I'm making the decision to specifically start the lifetime at 255. This is because I want to tie the lifetime to the transparency. So the idea is that the particle will start with a transparency of 255 fully opaque and fade away over time, meaning in the update function, I want it to decrease. And then in the show function, instead of having the alpha hardcoded as 100, I will set the alpha to the object's lifetime. And let's watch it fade away. Now, the stroke is not fading, so perhaps I'll add that as well. And the particle's gone. The kinds of effects that are typically made with a particle system generally result from small dots in the canvas. So I'm going to reduce also the size of the particle and set that to 4. The next step is just making many particles. And the only thing I need to do that is an array. Now, I've done this already in The Nature of Code, but here I want to take a very specific look at some of the functionality associated with arrays in JavaScript and p5JS. So here is the revised code still with one particle. But instead, that one particle has been added to an array. If working with arrays of objects is new to you, I would refer you back to my Intro to Coding With p5JS video series where I have a whole section about arrays and objects. And there's a lot of different things I could try here. Maybe I want to create a burst of particles and just add, say, 100 immediately in setup. Incidentally, even though I added 100 particles, I don't see 100. It's because all of them are starting at exactly the same spot with exactly the same initial velocity. So to really see the effect, it probably makes sense for me to go to the particle class and have their velocities be something random. And look at this really sort of like strange effect that happened that I didn't anticipate. Because the magnitude of all those initial velocities is one, they all burst out into this sort of perfect ring. Now, I'll give them a random set of initial velocities, and we could see they burst out in a more chaotic fashion. So this is starting to resemble something like a burst of a firework, and I might also refer you to I have a whole coding challenge about doing a fireworks simulation. That could be something that as an exercise for this chapter, you choose to create from these particle systems examples. But rather than a single burst, it's more common for a particle system style effect to constantly emit particles so one new particle per frame or five new particles per frame. So I can take this for loop and put it into draw. And I probably don't want to make 100 new particles every time through draw. So let me actually just go back and make this one so one new particle each time through draw and we could see we have this constant stream of particles that are being emitted. I could make it's five particles per frame, and it's just like a lot more particles coming out. Now, even though they're fading away and it sort of seems like it's the same amount of particles in the canvas, it's starting to run really, really slow. That's because when particles fade away, I'm not actually removing them from the array. So the length of that array right now is really, really big, and it's just going to run slower and slower and slower over time. So I need to add something to remove particles from the array when they're finished. The first step I think would be to add a function to the particle class itself, and I will call this function finished. And it's just going to return whether or not the lifetime is less than zero. So it returns true when the lifetime is less than zero. That's when it's finished. And it's false if the lifetime is greater than 0. And just as a quick little test to make sure this is working, I'm going to write if this.finished, fill it with a green color just to see that as they fade away, they turn green. But that's not what I want to do. Instead of turning them green, I want to delete them from the array. Now, what I've written here is another for loop. There are so many different ways I could tackle this problem. And in fact, I have some videos where I look at using higherorder functions. There's a function, an array function, called filter and other ways to remove any particles from the array that have finished. But the approach that I'm choosing to use here is just to loop through the array backwards starting at the end of the array, check every particle. If it's finished, use the array function splice to remove that particle and only that particle from the array. If this is totally new to you, I go through this code in detail in one of my Intro to p5JS videos, Removing Objects from an array. But this is it. I should have all of the pieces now of making a particle system using a particle class and an array of particles with lifespans, removing them when they're done. Let's see what this looks like. And as you can see, the frame rate is running fairly consistently. Now, what the behavior of these particles are, what they're doing, where they should start, how they should fade away, that's really up to you. So I would encourage you to take this code and start playing around with all the different parameters size, color. What's the initial velocity? What is the initial lifespan? And even maybe more importantly, how is the lifespan changed? Like, for example, if I reduce the lifespan instead of by one every frame by 5, we're going to see they fade away much more quickly, and we have what looks like almost a shower going on here, a shower of particles in the p5 sketch. Two more changes before I wrap up I'm going to remove calling this edges function. The bouncing off the edges is no longer relevant. And I think it would make sense for me to start the particles higher up in the canvas. So let me put the value 20. Oops, no, no, no, 20 for the vertical position the y, not the x. And there we go. This is the complete particle system example. I've got a particle class. I've got an array of particles. They fade out. I remove them from the array when they faded out. What is next? So in the next video, I want to take this idea and kind of turn it up to 11. So instead of just having a particle class, what if I think of this whole shower of particles as a particle system object? Could I have many particle systems within one sketch? That will be the topic of the next video. I hope you play around. I really would love to see what kinds of effects you can create just from this example alone by playing with size, color, the fading, all of that stuff. Share it with me and I'll see you in the next video. [MUSIC PLAYING]
