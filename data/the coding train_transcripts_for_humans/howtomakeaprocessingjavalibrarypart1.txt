With timestamps:

00:00 - [BELL DING]
00:01 - Hello, and welcome
to a new series
00:03 - about building a
processing library in Java.
00:07 - So if you've ever wanted
to learn a little more
00:09 - about Java programming,
and how Open Source works,
00:12 - and how you can
contribute your own code
00:15 - as a library to
some other platform,
00:18 - this is the place for you.
00:20 - I started working with
processing in 2003, which
00:23 - is some number of years ago.
00:24 - It's too many years ago.
00:25 - I can't possibly do that math.
00:28 - And one of the
things that I first
00:29 - did when working with processing
was contribute libraries to it.
00:32 - And you can see
here I'm scrolling
00:33 - through the processing
libraries page.
00:35 - There are libraries for
all sorts of categories.
00:37 - I'm just going to go here under
video and vision, for example.
00:41 - And we'll see there's a
library for using the PSI
00:44 - camera for doing OpenCV.
00:46 - Oh, look at this
one for the connect.
00:48 - And it's really not
kept up to date.
00:50 - There's a lot of wonderful
libraries here, BlobDetection.
00:52 - This is a really useful one.
00:53 - I have some videos about
doing BlobDetection processing
00:56 - with your own code, but you
could use a library for it.
00:58 - So maybe you've used processing.
01:00 - Maybe you've used
a library before.
01:02 - How would you make
your own library?
01:06 - This is what this
video is about.
01:07 - I have to admit
something to you.
01:09 - I have not actually done
any research or practice
01:12 - before I'm beginning
this right now.
01:14 - I have made
processing libraries.
01:16 - But I haven't really
made one in a while.
01:18 - So a lot of the series will also
be me figuring it out as I go.
01:23 - And hopefully everything
works just fine.
01:25 - It's somewhat of an
ancient medieval art,
01:28 - how to built a compilation
of Java classes
01:32 - to insert as a
processing library.
01:35 - And a lot of the stuff--
01:37 - you noticed I've been doing
Java scripts on the channel
01:40 - these days.
01:40 - But maybe after I do this
I'll come back and show you
01:43 - how to make your own
JavaScript library as well.
01:45 - So the very first thing
that we need to do
01:48 - is go to the processing library
template under the processing
01:53 - GitHub organization.
01:54 - And you'll notice something.
01:56 - It actually says template here.
01:58 - And there's this little button
here, Use This Template.
02:01 - This is a new feature of GitHub.
02:03 - I don't know how new it is.
02:04 - Maybe it's been
there for a while.
02:05 - But I've actually never
used this feature up
02:07 - until right now.
02:08 - A lot of times when you're
using GitHub-- maybe
02:10 - you're just trying
to find some code,
02:12 - and you're clicking around,
you copy and paste it,
02:14 - or maybe you're even ambitious
enough to clone or download.
02:17 - So cloning is a process
of taking this repository
02:22 - and cloning it, say, to
another, to your local computer,
02:25 - your laptop.
02:25 - I'm actually going to do that a
little bit later in this video.
02:28 - Downloading would just
be downloading the code.
02:30 - There's this process of
forking a repo, which
02:33 - is kind of creating a version
of it that is linked back
02:36 - to the original version.
02:37 - But this is a scenario.
02:39 - This is a rare scenario
where what I want to do
02:41 - is build an entirely
new project.
02:44 - It's not really related to this.
02:46 - It's related to this in that
this is my starting point.
02:48 - But there's no reason
for what I want
02:50 - to build to be a
fork of the template
02:52 - because I am not contributing
back to the template.
02:54 - If there was an
issue with something
02:56 - wrong in the
template, then I would
02:58 - want to make a fork to fix the
thing that's in the template.
03:02 - But I just want
to start from it.
03:03 - That was a very long explanation
for me just basically pressing
03:06 - this button.
03:07 - So I'm going to
press this button.
03:10 - I'm actually going to
switch this to coding train
03:13 - because I would like
this library that I
03:15 - make to be a community project
that people could submit to.
03:19 - I could do that under
Schiffman as well.
03:20 - But this is a coding
train processing library.
03:23 - I'm going to call this open
simplex noise library--
03:30 - I'll call it for processing.
03:31 - Let's call it for processing.
03:33 - So that's going to be the
name of the repository.
03:35 - This is a new, a processing
for open simplex noise.
03:45 - And I want to make it public.
03:46 - And I want to create the
repository from the template.
03:51 - I love this.
03:52 - I love that this is a new
repository, a new project.
03:55 - But GitHub is being
thoughtful about this
03:59 - and crediting back where
it was generated from.
04:02 - Now, what is the next step?
04:04 - The next step is now I
want to work with this,
04:06 - and update the code, and change
it around, and put my stuff,
04:09 - my open simplex
noise stuff in it.
04:11 - And by the way, you
might be wondering
04:13 - what is open simplex noise?
04:14 - So I have a whole video
about what that is.
04:17 - It's not really
important right now.
04:19 - The point is how to
make the library.
04:21 - But I want to make it in the
context that would be useful.
04:24 - So I'll come back and talk
more about open simplex noise.
04:26 - And we'll look at
some examples with it
04:28 - as we get a little
further along.
04:29 - So I'm going to click Clone.
04:31 - I'm going to copy this.
04:32 - I' going to go to my
terminal application.
04:35 - I'm just in the desktop.
04:36 - I'm going to say get clone.
04:37 - And I'm going to clone
this particular repo, which
04:40 - will now download
everything to my computer.
04:43 - I'm just going to then
open up that repo.
04:45 - Oh, no I'm not.
04:46 - I'm not.
04:47 - I was about to
open up that repo.
04:49 - And I'm doing it right now
in Visual Studio Code, which
04:52 - would be fine, because
then I could kind of look
04:55 - at what's in there.
04:56 - There's a hello library,
job template and stuff.
04:59 - But no, no, no.
05:00 - Close all this.
05:01 - This is not what I want.
05:02 - This is a very
momentous occasion.
05:04 - This might be the first time I
need to use a Java development
05:09 - environment.
05:10 - I'm sure there's
some magical way
05:11 - I could make Visual Studio Code
do what it is I want to do.
05:14 - But I want to do this
with a Java development
05:18 - environment, namely Eclipse.
05:21 - This is the Eclipse
foundation website
05:22 - where you can download
and install Eclipse.
05:24 - And I'm going to do
that in a moment.
05:26 - I should mention also that
a lot of people in the chat
05:28 - are saying, oh, using IntelliJ.
05:30 - I like that better than Eclipse.
05:32 - I don't know.
05:33 - Maybe it is better.
05:34 - Maybe it's worse.
05:34 - Who knows?
05:35 - Who cares?
05:36 - I'm just going to use Eclipse.
05:37 - It's the only one
I've ever used,
05:39 - and I want to have at
least one thing here that I
05:41 - don't have to learn that's new.
05:42 - But maybe I can come back and
show IntelliJ at some point,
05:44 - or one of you can
make your own video
05:46 - about doing the same thing with
IntelliJ, and I can link to it.
05:48 - Let's download Eclipse.
05:49 - I'm going to get this
most latest version.
05:52 - I'm going to
download the 64-bit.
05:54 - This link looks good.
05:56 - Eclipse, much like processing,
is a non-for-profit foundation.
06:00 - And you can donate.
06:01 - All right, once
you've downloaded it,
06:02 - you're going to get
this eclipse installer.
06:04 - And then you've got to
choose what you want here.
06:08 - I want eclipse ID for
Java developers, I think.
06:13 - That's what I'm doing.
06:14 - So I'm going to install it here.
06:19 - Hit accept.
06:21 - And here we go.
06:22 - All right, I've
downloaded, installed it.
06:24 - I'm going to launch it now.
06:27 - I also should mention that I
think the processing library
06:30 - template is designed
for use with Eclipse.
06:33 - It's creating a workspace,
which is similar to a processing
06:35 - sketchbook.
06:37 - All right, here we go.
06:38 - I have Eclipse now.
06:39 - Now I'm going to have to do
some work to fix the font sizes.
06:42 - I realize if you're
watching this
06:43 - you can barely see anything.
06:45 - But right now, I'll just
use Zoom for a second.
06:47 - These are my options.
06:48 - I could create a new
project, a java project,
06:51 - a sort of general project.
06:52 - But what I want to
do, I am pretty sure,
06:54 - is import a project.
06:55 - So I'm going to click on Import.
06:57 - And then these are
all of my options.
07:00 - Oh, look at this.
07:00 - It even has a Git.
07:02 - So I actually could
probably import it from Git
07:07 - but I think I can just
do general existing.
07:10 - This is what I want.
07:11 - I think I want existing
project into workspace
07:13 - because the processing library
template is an existing Eclipse
07:17 - project.
07:19 - So then I'm going to hit Next.
07:21 - And I want to find
that directory,
07:24 - which is just on my
desktop called Open Simplex
07:30 - Noise For Processing.
07:31 - I'm going to hit Open.
07:32 - And you can see.
07:33 - Look at that.
07:33 - Oh, interesting.
07:34 - It's called processing
library template.
07:37 - So there's probably somewhere
that there's a name for it
07:40 - that I might want to rename.
07:41 - I'm going to worry about
that too much right now.
07:43 - I'm just going to
click now Finish.
07:46 - Finish.
07:48 - And OK.
07:49 - There we go.
07:50 - This is looking promising.
07:52 - Oh, I have a red x.
07:53 - But you can see now this
is an Eclipse project.
07:56 - It's got all of the files
here in this directory tree.
08:01 - There's a data folder, an
examples folder, a lib folder,
08:03 - a resources folder.
08:04 - I may have to get into
what's in those things.
08:07 - But the most important one
right now is the source folder.
08:10 - I'm going to click on that.
08:11 - And we're going to see.
08:12 - This is the Java file.
08:16 - It's not a PDE file, not
a processing development
08:18 - environment file.
08:19 - It's an actual proper Java file.
08:21 - This is the file that I'm
going to need to work with.
08:24 - Let me quickly mention
that under the Preferences,
08:26 - under General
Appearance, you can
08:28 - change the theme to dark mode,
which I'm doing right now.
08:30 - PApplet cannot be
resolved to a type.
08:33 - The import processing cannot
be resolved to a type.
08:35 - So this is because
this particular project
08:39 - means as a dependency the
processing core library itself.
08:44 - So there are a
couple different ways
08:46 - that I could tell this
project, my processing library,
08:49 - about the processing
core library.
08:51 - And I'm going to
show you the easiest
08:52 - way to do that right now.
08:53 - I should mention, however,
that all of this, all of what
08:56 - I'm awkwardly kind
of stumbling through
08:58 - is actually here as
instructions on the read me.
09:01 - And the step that I'm
looking to do right now
09:04 - is adding core dot jar or other
jar files to your class path.
09:08 - So the idea of a class path
is a very important concept
09:12 - in Java programming.
09:13 - It is the path where
all of your dependencies
09:16 - live, all of the classes
that your project depends
09:19 - on live, the path to your
classes, the class path.
09:22 - So what I want to
find is core dot jar.
09:26 - That's a bundle jar file.
09:27 - It's like a zip file that has
all of the processing Java
09:31 - classes in it.
09:32 - And there's a variety
of different ways
09:33 - that I can find it.
09:33 - But if I happen to have
processing installed
09:35 - on my computer, on the Mac--
and you can find this similarly
09:39 - on Windows or Linux--
09:41 - I can actually just
right click on here
09:42 - and go to show package contents.
09:45 - A Java application is actually
just a directory of files.
09:49 - It's kind of the operating
system is hiding that for you.
09:51 - But I can go here under Java.
09:53 - And look at this, core dot jar.
09:55 - Now, I might find that I need
other dependencies eventually.
09:58 - But right now, I just
want core dot jar.
10:01 - So what I'm going
to do is I am going
10:03 - to copy that into my project
just by dragging it over.
10:07 - I'm just going to put it
in the root directory.
10:09 - Maybe there's a better
place to put it.
10:10 - Oh, I could link to the file.
10:12 - Huh.
10:12 - There might be different
reasons why you might
10:14 - want to do one or the other.
10:15 - I'm going to stick
with copy, just
10:16 - so that I know it comes in.
10:17 - So I could see core
dot jar is there.
10:20 - I still have my errors though.
10:21 - But what I want to
do now is I'm going
10:23 - to right click core dot jar.
10:26 - And I'm going to
go to build path.
10:28 - Build path is
essentially another sort
10:31 - of term for class path.
10:32 - And I want to add this
to the build path.
10:35 - So we click Add
to the Build Path.
10:37 - And then voila.
10:38 - All of those errors go away.
10:40 - It knows what PApplet
is because PApplet
10:44 - is part of processing dot core.
10:47 - PApplet is the base
class for every sketch
10:51 - you write in processing.
10:53 - Almost finished
this first part now.
10:55 - I'm just about ready
to actually start
10:57 - doing the coding of
the library itself.
10:59 - This first part was really just
to set up the project itself.
11:03 - But I want to do a few
more cleanup things.
11:05 - Number one is it
shouldn't be called
11:06 - processing library template.
11:08 - So I'm going to right click
here and go to refactor, rename.
11:13 - [MUSIC PLAYING]
11:17 - And I'm going to change
the new name to open
11:20 - simplex noise for processing.
11:31 - Looking more closely
at the instructions,
11:33 - I've discovered actually that
the point of this lib folder
11:36 - is this is where other
dependencies should go.
11:39 - So I'm actually just going
to move this core dot
11:41 - jar file there.
11:42 - I think the project--
11:43 - oh, now it's complaining at me.
11:45 - So you should have copied it
in there in the first place.
11:48 - But now what I'm
going to do is I'm
11:50 - going to right click on the
project, go to build path,
11:54 - configure build path, and
this is now-- it's confused.
11:59 - This core dot jar
file is now missing.
12:01 - I'm going to hit Remove.
12:04 - And then I'm going to
do apply and close.
12:07 - Then I'm going to
just go back to this
12:09 - and go to build path and
add back to the build path.
12:12 - OK.
12:13 - So now I have my project set up.
12:16 - There are a few last
remaining steps we need.
12:19 - We want to get to the point
where I can build the library.
12:22 - I want to see the build
successful message.
12:24 - And I'll be done with this
first video in the series.
12:27 - So what I need to
actually do is I
12:30 - need to look for a file
called build dot properties.
12:34 - And this is going to be in the
resources folder of the Java
12:38 - project.
12:38 - So let's go back to Eclipse,
go here under Resources,
12:42 - build dot properties.
12:44 - That's what I want there.
12:45 - Oh, I have never seen
anything like this.
12:48 - So it appears that
eclipse has added
12:52 - a GUI for build dot properties.
12:54 - But I'm actually
going to click here
12:56 - so I can look at the
actual text file.
12:59 - And this is-- this is important.
13:02 - So where is my
processing sketchbook?
13:08 - I'm going to open up processing
to make sure this is right.
13:11 - I'm going to go to
processing preferences.
13:13 - And we can see users coding
train documents processing.
13:16 - That's where the sketchbook is.
13:17 - Great.
13:18 - That's user home
documents processing.
13:20 - OK.
13:21 - Class path local location,
this is the next setting
13:25 - that I need to change.
13:26 - And I need to make sure it
points to the processing core
13:29 - library.
13:29 - So it's been a lot of
effort getting that core
13:31 - dot jar file into my project.
13:33 - So I now I also need to point
from build dot properties.
13:36 - So there's a variety
of places I could
13:38 - point to the processing
application, which
13:40 - for me is on the desktop.
13:41 - But it might be your
applications folder.
13:42 - So it would be different
on Windows or Linux.
13:44 - I think, for me,
what might actually
13:45 - be easiest is just to comment
this out and point to where
13:49 - this actual project is.
13:51 - So this actual
project is here on
13:53 - my desktop, desktop open
simplex for noise processing.
13:57 - So I can put that in
here, paste that here.
14:02 - Then there's a file
called lib for library
14:04 - where core dot jar is--
not a file, a directory.
14:07 - So I should just put that
in here and hit Save.
14:09 - That's good.
14:10 - Class path local
include core dot jar.
14:14 - And then class path
libraries location
14:17 - is sketchbook dot
location libraries.
14:18 - So all this is the same.
14:20 - Target version 1.8--
that should be fine.
14:23 - All this stuff is fine.
14:25 - Project name-- there's
more stuff I should change.
14:27 - So I'm just going to
say open simplex noise.
14:31 - I'm going to say open
simplex noise for processing.
14:37 - This is not super important.
14:39 - I can fix this stuff up later.
14:43 - But let's just do some
of this right now.
14:48 - And I don't have a url yet.
14:52 - And there's categories.
14:53 - Let's just put it in other.
14:55 - Actually, is there math math?
14:57 - I'm doing all of these now.
14:58 - All right, I'm going
to fix this up later.
15:00 - I'm going to put
the rest of these--
15:01 - but you could see that
there's lots of other things
15:04 - that I can put in here.
15:05 - But I'm going to
leave this all out.
15:07 - I'm going to hit Save.
15:08 - And I'm going to go
to the next step.
15:10 - The next step is to compile
the library using Ant.
15:14 - What is Ant?
15:15 - Ant, or Apache Ant, is basically
a build system for Java.
15:20 - It's maybe somewhat
ancient, but it's
15:23 - what's used by the
processing library template.
15:26 - So if I go back to Eclipse--
15:28 - so to be able to see
Ant, I need to go
15:30 - to Window, Show, View, Ant.
15:33 - And you can see the
little icon of the ant.
15:35 - Let's click that.
15:37 - And now I should
have somewhere--
15:39 - oh, Ant, now I see it.
15:42 - The next step is to take
this build dot xml file,
15:47 - and drag it over to
here, and we can see.
15:49 - There it is, processing
library, open simplex noise
15:53 - for processing.
15:54 - And I can click this,
and do Run As Ant Build.
16:00 - Run As Ant Build.
16:02 - OK, now we say a little
prayer to the Ant god.
16:06 - And we-- [DRUM ROLL] --run that.
16:17 - Ha.
16:18 - [TADA SOUND] We built
the processing library.
16:22 - Build successful.
16:23 - Look at this.
16:24 - I can open up processing.
16:25 - I'm going to go to
Sketch Import Library.
16:29 - Look at this, open simplex
noise for processing.
16:31 - The library is there.
16:33 - Now, it's saying import
template dot library.
16:36 - And there's no code
for me to actually use.
16:39 - But I now have the
processing library building.
16:43 - And I can start
writing the code.
16:45 - So in a way, this was
really the hardest part.
16:48 - The next stuff that
I want to do is
16:49 - going to be quite
simple by comparison.
16:51 - It's really just adding the
code, adding the examples,
16:54 - building the library,
and publishing it.
16:56 - So that will come in the
next video, or two, or three,
17:00 - and I'll see you there.
17:01 - Thanks for watching this.
17:02 - We built a processing
Java library.
17:04 - [BELL DING]
17:05 - [MUSIC PLAYING]

Cleaned transcript:

[BELL DING] Hello, and welcome to a new series about building a processing library in Java. So if you've ever wanted to learn a little more about Java programming, and how Open Source works, and how you can contribute your own code as a library to some other platform, this is the place for you. I started working with processing in 2003, which is some number of years ago. It's too many years ago. I can't possibly do that math. And one of the things that I first did when working with processing was contribute libraries to it. And you can see here I'm scrolling through the processing libraries page. There are libraries for all sorts of categories. I'm just going to go here under video and vision, for example. And we'll see there's a library for using the PSI camera for doing OpenCV. Oh, look at this one for the connect. And it's really not kept up to date. There's a lot of wonderful libraries here, BlobDetection. This is a really useful one. I have some videos about doing BlobDetection processing with your own code, but you could use a library for it. So maybe you've used processing. Maybe you've used a library before. How would you make your own library? This is what this video is about. I have to admit something to you. I have not actually done any research or practice before I'm beginning this right now. I have made processing libraries. But I haven't really made one in a while. So a lot of the series will also be me figuring it out as I go. And hopefully everything works just fine. It's somewhat of an ancient medieval art, how to built a compilation of Java classes to insert as a processing library. And a lot of the stuff you noticed I've been doing Java scripts on the channel these days. But maybe after I do this I'll come back and show you how to make your own JavaScript library as well. So the very first thing that we need to do is go to the processing library template under the processing GitHub organization. And you'll notice something. It actually says template here. And there's this little button here, Use This Template. This is a new feature of GitHub. I don't know how new it is. Maybe it's been there for a while. But I've actually never used this feature up until right now. A lot of times when you're using GitHub maybe you're just trying to find some code, and you're clicking around, you copy and paste it, or maybe you're even ambitious enough to clone or download. So cloning is a process of taking this repository and cloning it, say, to another, to your local computer, your laptop. I'm actually going to do that a little bit later in this video. Downloading would just be downloading the code. There's this process of forking a repo, which is kind of creating a version of it that is linked back to the original version. But this is a scenario. This is a rare scenario where what I want to do is build an entirely new project. It's not really related to this. It's related to this in that this is my starting point. But there's no reason for what I want to build to be a fork of the template because I am not contributing back to the template. If there was an issue with something wrong in the template, then I would want to make a fork to fix the thing that's in the template. But I just want to start from it. That was a very long explanation for me just basically pressing this button. So I'm going to press this button. I'm actually going to switch this to coding train because I would like this library that I make to be a community project that people could submit to. I could do that under Schiffman as well. But this is a coding train processing library. I'm going to call this open simplex noise library I'll call it for processing. Let's call it for processing. So that's going to be the name of the repository. This is a new, a processing for open simplex noise. And I want to make it public. And I want to create the repository from the template. I love this. I love that this is a new repository, a new project. But GitHub is being thoughtful about this and crediting back where it was generated from. Now, what is the next step? The next step is now I want to work with this, and update the code, and change it around, and put my stuff, my open simplex noise stuff in it. And by the way, you might be wondering what is open simplex noise? So I have a whole video about what that is. It's not really important right now. The point is how to make the library. But I want to make it in the context that would be useful. So I'll come back and talk more about open simplex noise. And we'll look at some examples with it as we get a little further along. So I'm going to click Clone. I'm going to copy this. I' going to go to my terminal application. I'm just in the desktop. I'm going to say get clone. And I'm going to clone this particular repo, which will now download everything to my computer. I'm just going to then open up that repo. Oh, no I'm not. I'm not. I was about to open up that repo. And I'm doing it right now in Visual Studio Code, which would be fine, because then I could kind of look at what's in there. There's a hello library, job template and stuff. But no, no, no. Close all this. This is not what I want. This is a very momentous occasion. This might be the first time I need to use a Java development environment. I'm sure there's some magical way I could make Visual Studio Code do what it is I want to do. But I want to do this with a Java development environment, namely Eclipse. This is the Eclipse foundation website where you can download and install Eclipse. And I'm going to do that in a moment. I should mention also that a lot of people in the chat are saying, oh, using IntelliJ. I like that better than Eclipse. I don't know. Maybe it is better. Maybe it's worse. Who knows? Who cares? I'm just going to use Eclipse. It's the only one I've ever used, and I want to have at least one thing here that I don't have to learn that's new. But maybe I can come back and show IntelliJ at some point, or one of you can make your own video about doing the same thing with IntelliJ, and I can link to it. Let's download Eclipse. I'm going to get this most latest version. I'm going to download the 64bit. This link looks good. Eclipse, much like processing, is a nonforprofit foundation. And you can donate. All right, once you've downloaded it, you're going to get this eclipse installer. And then you've got to choose what you want here. I want eclipse ID for Java developers, I think. That's what I'm doing. So I'm going to install it here. Hit accept. And here we go. All right, I've downloaded, installed it. I'm going to launch it now. I also should mention that I think the processing library template is designed for use with Eclipse. It's creating a workspace, which is similar to a processing sketchbook. All right, here we go. I have Eclipse now. Now I'm going to have to do some work to fix the font sizes. I realize if you're watching this you can barely see anything. But right now, I'll just use Zoom for a second. These are my options. I could create a new project, a java project, a sort of general project. But what I want to do, I am pretty sure, is import a project. So I'm going to click on Import. And then these are all of my options. Oh, look at this. It even has a Git. So I actually could probably import it from Git but I think I can just do general existing. This is what I want. I think I want existing project into workspace because the processing library template is an existing Eclipse project. So then I'm going to hit Next. And I want to find that directory, which is just on my desktop called Open Simplex Noise For Processing. I'm going to hit Open. And you can see. Look at that. Oh, interesting. It's called processing library template. So there's probably somewhere that there's a name for it that I might want to rename. I'm going to worry about that too much right now. I'm just going to click now Finish. Finish. And OK. There we go. This is looking promising. Oh, I have a red x. But you can see now this is an Eclipse project. It's got all of the files here in this directory tree. There's a data folder, an examples folder, a lib folder, a resources folder. I may have to get into what's in those things. But the most important one right now is the source folder. I'm going to click on that. And we're going to see. This is the Java file. It's not a PDE file, not a processing development environment file. It's an actual proper Java file. This is the file that I'm going to need to work with. Let me quickly mention that under the Preferences, under General Appearance, you can change the theme to dark mode, which I'm doing right now. PApplet cannot be resolved to a type. The import processing cannot be resolved to a type. So this is because this particular project means as a dependency the processing core library itself. So there are a couple different ways that I could tell this project, my processing library, about the processing core library. And I'm going to show you the easiest way to do that right now. I should mention, however, that all of this, all of what I'm awkwardly kind of stumbling through is actually here as instructions on the read me. And the step that I'm looking to do right now is adding core dot jar or other jar files to your class path. So the idea of a class path is a very important concept in Java programming. It is the path where all of your dependencies live, all of the classes that your project depends on live, the path to your classes, the class path. So what I want to find is core dot jar. That's a bundle jar file. It's like a zip file that has all of the processing Java classes in it. And there's a variety of different ways that I can find it. But if I happen to have processing installed on my computer, on the Mac and you can find this similarly on Windows or Linux I can actually just right click on here and go to show package contents. A Java application is actually just a directory of files. It's kind of the operating system is hiding that for you. But I can go here under Java. And look at this, core dot jar. Now, I might find that I need other dependencies eventually. But right now, I just want core dot jar. So what I'm going to do is I am going to copy that into my project just by dragging it over. I'm just going to put it in the root directory. Maybe there's a better place to put it. Oh, I could link to the file. Huh. There might be different reasons why you might want to do one or the other. I'm going to stick with copy, just so that I know it comes in. So I could see core dot jar is there. I still have my errors though. But what I want to do now is I'm going to right click core dot jar. And I'm going to go to build path. Build path is essentially another sort of term for class path. And I want to add this to the build path. So we click Add to the Build Path. And then voila. All of those errors go away. It knows what PApplet is because PApplet is part of processing dot core. PApplet is the base class for every sketch you write in processing. Almost finished this first part now. I'm just about ready to actually start doing the coding of the library itself. This first part was really just to set up the project itself. But I want to do a few more cleanup things. Number one is it shouldn't be called processing library template. So I'm going to right click here and go to refactor, rename. [MUSIC PLAYING] And I'm going to change the new name to open simplex noise for processing. Looking more closely at the instructions, I've discovered actually that the point of this lib folder is this is where other dependencies should go. So I'm actually just going to move this core dot jar file there. I think the project oh, now it's complaining at me. So you should have copied it in there in the first place. But now what I'm going to do is I'm going to right click on the project, go to build path, configure build path, and this is now it's confused. This core dot jar file is now missing. I'm going to hit Remove. And then I'm going to do apply and close. Then I'm going to just go back to this and go to build path and add back to the build path. OK. So now I have my project set up. There are a few last remaining steps we need. We want to get to the point where I can build the library. I want to see the build successful message. And I'll be done with this first video in the series. So what I need to actually do is I need to look for a file called build dot properties. And this is going to be in the resources folder of the Java project. So let's go back to Eclipse, go here under Resources, build dot properties. That's what I want there. Oh, I have never seen anything like this. So it appears that eclipse has added a GUI for build dot properties. But I'm actually going to click here so I can look at the actual text file. And this is this is important. So where is my processing sketchbook? I'm going to open up processing to make sure this is right. I'm going to go to processing preferences. And we can see users coding train documents processing. That's where the sketchbook is. Great. That's user home documents processing. OK. Class path local location, this is the next setting that I need to change. And I need to make sure it points to the processing core library. So it's been a lot of effort getting that core dot jar file into my project. So I now I also need to point from build dot properties. So there's a variety of places I could point to the processing application, which for me is on the desktop. But it might be your applications folder. So it would be different on Windows or Linux. I think, for me, what might actually be easiest is just to comment this out and point to where this actual project is. So this actual project is here on my desktop, desktop open simplex for noise processing. So I can put that in here, paste that here. Then there's a file called lib for library where core dot jar is not a file, a directory. So I should just put that in here and hit Save. That's good. Class path local include core dot jar. And then class path libraries location is sketchbook dot location libraries. So all this is the same. Target version 1.8 that should be fine. All this stuff is fine. Project name there's more stuff I should change. So I'm just going to say open simplex noise. I'm going to say open simplex noise for processing. This is not super important. I can fix this stuff up later. But let's just do some of this right now. And I don't have a url yet. And there's categories. Let's just put it in other. Actually, is there math math? I'm doing all of these now. All right, I'm going to fix this up later. I'm going to put the rest of these but you could see that there's lots of other things that I can put in here. But I'm going to leave this all out. I'm going to hit Save. And I'm going to go to the next step. The next step is to compile the library using Ant. What is Ant? Ant, or Apache Ant, is basically a build system for Java. It's maybe somewhat ancient, but it's what's used by the processing library template. So if I go back to Eclipse so to be able to see Ant, I need to go to Window, Show, View, Ant. And you can see the little icon of the ant. Let's click that. And now I should have somewhere oh, Ant, now I see it. The next step is to take this build dot xml file, and drag it over to here, and we can see. There it is, processing library, open simplex noise for processing. And I can click this, and do Run As Ant Build. Run As Ant Build. OK, now we say a little prayer to the Ant god. And we [DRUM ROLL] run that. Ha. [TADA SOUND] We built the processing library. Build successful. Look at this. I can open up processing. I'm going to go to Sketch Import Library. Look at this, open simplex noise for processing. The library is there. Now, it's saying import template dot library. And there's no code for me to actually use. But I now have the processing library building. And I can start writing the code. So in a way, this was really the hardest part. The next stuff that I want to do is going to be quite simple by comparison. It's really just adding the code, adding the examples, building the library, and publishing it. So that will come in the next video, or two, or three, and I'll see you there. Thanks for watching this. We built a processing Java library. [BELL DING] [MUSIC PLAYING]
