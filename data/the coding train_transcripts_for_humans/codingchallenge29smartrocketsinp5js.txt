With timestamps:

00:00 - hello and welcome to another coding
00:02 - challenge in this coding challenge I am
00:03 - going to program from scratch something
00:06 - called smart Rockets okay what is this
00:07 - smart Rockets thing
00:09 - well this smart rockets project which I
00:10 - have running behind me you can find a
00:12 - link to it in this video's description
00:13 - is something created by Jer Thorp some
00:17 - number of years ago it was developed in
00:19 - flash which is a environment for
00:22 - programming ActionScript I'm going to do
00:24 - this in JavaScript using the p5.js
00:26 - framework the reason why I love this
00:28 - project is it's a great example of
00:30 - genetic algorithms in the wild at play
00:32 - with an animation physics pace system so
00:35 - what you'll see here is that there are
00:36 - these Rockets being launched from the
00:38 - bottom and they're trying to reach that
00:39 - target up there and they have built into
00:41 - them this DNA this DNA that this virtual
00:44 - DNA that tells them how to move about
00:46 - the screen so let me briefly talk to you
00:49 - about how that works so the Rockets
00:51 - actually have a bunch of like kind of
00:54 - thrusters on them and this is my like
00:56 - pathetic terrible drawing of that and
00:58 - though all of those point in a certain
01:01 - direction so the number of thrusters in
01:03 - the direction that they point in is part
01:05 - of their DNA and then the sequence by
01:07 - which they fire first second third
01:09 - fourth is also part of their DNA so you
01:13 - can imagine like if you had a control
01:14 - panel with five buttons on it you could
01:16 - press those five buttons in some sort of
01:18 - sequence to try to get push it in some
01:20 - efficient way to reach that target so
01:22 - what I need what I need is a couple
01:24 - things I need to ultimately have a
01:26 - rocket object and that rocket object is
01:29 - going to have to have physics built into
01:31 - it I'm also going to need to have some
01:33 - DNA object which is DNA to control the
01:37 - physics and then the DNA object is going
01:39 - to need to have functions like mutation
01:41 - and crossover these are pieces of
01:44 - functionality that exist as part of a
01:46 - genetic algorithm hey if you want to
01:48 - know about genetic algorithms I have a
01:49 - whole set of video tutorials link to the
01:51 - description of this video that go
01:52 - through the algorithm in detail I'm
01:54 - gonna do that again in this video but
01:55 - I'll be programming kind of quickly so
01:57 - if you want the sort of longer
01:58 - explanation of that go back and watch
02:00 - those videos and then the third thing
02:02 - here is I'm going to need a population
02:04 - object and the population object is
02:07 - going to manage
02:08 - an array of these rocket objects so I'm
02:11 - going to make some Rockets let them go
02:13 - have them evolve
02:14 - let them go again have them evolve let
02:16 - them go again and eventually they should
02:17 - make it from the bottom to the top maybe
02:19 - I could put some obstacles in their way
02:20 - that sort of thing let's check on how
02:22 - these rockets are doing you can see a
02:23 - kind of path that there by the way the
02:26 - textsmart rockets here is an obstacle
02:28 - they're trying to figure out how to get
02:30 - around it so I'm going to leave I'm
02:32 - going to leave this browser window open
02:34 - hopefully I won't forget to close it and
02:36 - at the end of the video we'll come back
02:37 - and check on how those smart Rockets are
02:39 - joining now I'm also going to do
02:40 - something a little bit crazy it's not
02:42 - that crazy I'm going to program this all
02:44 - using code pen I have already added the
02:47 - p5 just JavaScript files you can check
02:50 - my video of how to do that in a
02:51 - different video
02:52 - I've already added those and and I just
02:55 - started with basically nothing
02:56 - I have create canvas and background this
02:58 - is the only code I have create a canvas
03:00 - and draw a black background so the first
03:04 - thing I want to do is create this rocket
03:07 - object so I'm going to I'm going to do
03:09 - that with a constructor function and I
03:13 - want my rocket to have a position and
03:15 - I'm going to say create vector I wanted
03:18 - to have a velocity let's say create
03:19 - vector and I want it to have an
03:22 - acceleration and I'm going to say create
03:24 - vector then I'm not so used to using
03:28 - code pen so we'll see how this goes for
03:30 - me I then also want to give it a
03:32 - function and apply force function which
03:36 - where this rocket can receive a force
03:39 - and that force would get added to its
03:41 - acceleration that is Newton's law at
03:44 - play and then I also want to what else
03:47 - do I want to do I want to have an update
03:50 - open that should say this dot apply
03:51 - force equals function I also want to
03:54 - have it have an update function this not
03:56 - update equals function and I want that
03:59 - function I want to do the sort of
04:01 - standard physics algorithm that I do in
04:02 - one of my examples where I have this dot
04:06 - velocity add this dot acceleration and
04:08 - then I want to this dot position add
04:10 - this velocity and then I also want to
04:13 - clear the acceleration at the end by
04:17 - multiplying it by zero because so this
04:20 - is like I just built a physics engine
04:22 - in like 10 seconds basically I have an
04:24 - object that has a position a velocity
04:25 - the acceleration acceleration gets
04:27 - controlled by forces in the environment
04:29 - or forces by its rocket thruster so to
04:31 - speak and the update function is where
04:35 - the physics actually happen okay so I
04:37 - also want to have a function called this
04:41 - dot show I'm gonna I'm just going to be
04:47 - my rocket won't be as pretty and
04:49 - beautiful as jairs smart rocket I'm just
04:52 - going to say I'm just going to make a
04:54 - rectangle at this position X this stop
04:57 - position dot Y and the rectangle will be
04:59 - thin but tall and I'm also actually what
05:04 - I'm going to do is I'm going to say
05:05 - translate I want to rotate it in the
05:08 - direction that it's moving I think
05:10 - that'll be a useful thing to have so I'm
05:12 - actually going to translate to its
05:13 - position and then draw the rectangle at
05:15 - zero zero and I'm also going to say rect
05:17 - mode Center and I am also going to say
05:22 - then rotate by this velocity dot heading
05:25 - so the heading function in in the p5
05:29 - vector object gives you an angle of the
05:31 - direction that a vector is pointing so I
05:33 - can rotate by the angle the velocity
05:34 - being the direction that it's moving I
05:36 - also want to add around this push and
05:39 - pop and there if I add push and pop
05:44 - around this function then all this
05:47 - rotating and translating won't affect
05:49 - other things so let's let's go now and
05:54 - see if I can create just a single rocket
05:57 - on the screen I'm going to say a rocket
06:00 - equals new rocket and then I'm going to
06:03 - say a rocket dot update and rocket show
06:12 - oh look there it is the rocket in the
06:15 - top left so one thing I want to do is I
06:17 - want my rockets to start at the bottom
06:18 - of the window so we can see there it
06:22 - started there and then let's just say
06:25 - for the sake of argument I give it a
06:26 - velocity pointing up
06:28 - is it moving whoo whoo okay so one thing
06:31 - you'll notice I drew it vertically and
06:34 - the angle of getting is probably ninety
06:37 - degrees so it rotated it so I think I'll
06:39 - just change the way I draw the rectangle
06:40 - to be wide and tall and you can see
06:45 - there now I have a rocket moving up so I
06:47 - have a single rocket that's a good sign
06:49 - I am getting something going here okay
06:52 - I'm looking everywhere because I got a
06:54 - screen here I got a camera here I got a
06:55 - wall here I'm going a little crazy here
06:57 - okay this is good this is good
06:59 - okay now what I think I want to do is
07:02 - I'm gone but now I'm going to create a
07:04 - population you know I don't necessarily
07:07 - need a whole separate object to manage
07:10 - this stuff but I'm going to do it anyway
07:13 - and in the population I want to have an
07:16 - array of rockets and I want to I want to
07:23 - also have a population size we'll just
07:27 - make it like a hundred back I made the
07:32 - font size a little bigger so it'd be
07:33 - easier to see in the video so what I
07:35 - want to say is this dot Rockets index I
07:38 - equals a new rocket and one thing I'm
07:43 - going to do is have their initial
07:45 - velocity just for right now be just so I
07:48 - can see a random a random vector and
07:53 - what I'm going to do now is create a
07:55 - population and I'm going to say the
08:01 - population should update and I'm just
08:05 - going to actually write a function
08:05 - called run and then in the population
08:09 - object itself I'm going to write a
08:11 - function called run and what I want to
08:14 - do there is okay back again and what I
08:18 - want to do is now say oh this dot this
08:21 - dot Rockets whoops I need to say this
08:23 - dot rockets
08:25 - uh rockets index i dot update and this
08:31 - dot rockets index i dot show i'm back
08:34 - after some technical difficulties and
08:37 - there's a big bug in my code it's not
08:40 - missing at this stop but it's almost as
08:41 - bad remember how i said here i need this
08:44 - function called pop i need this function
08:46 - called pop to use push and pop to make
08:49 - it so that this translate and rotate
08:51 - only affects this particular rocket well
08:53 - guess what I did I made a variable named
08:56 - pop for population and that variable pop
08:59 - is now my global variable which
09:01 - overrides the p5 function named pop so I
09:05 - really shouldn't have done that
09:06 - I need to name this something else I'll
09:08 - call it pop you'll for population and
09:09 - you know what I don't know I can
09:12 - actually just say population I'll do
09:13 - this population run and now we should
09:16 - see there's one rocket lifting off and
09:19 - now I can change the population size to
09:21 - like 25 and we can see there we go a
09:24 - bunch of rockets all going off in their
09:26 - random direction let's clean up some
09:28 - things about these Rockets let's make
09:31 - them a little bit smaller let's say no
09:36 - stroke let's give them fill 255 with a
09:40 - little bit of alpha and we should see
09:43 - now there we go so this is these are our
09:47 - smart Rockets lifting off from the
09:48 - bottom of the screen so we're getting
09:50 - somewhere we've got the physic system
09:51 - now if I return to over here in the
10:00 - original smart Rockets there are
10:01 - actually a set of specific thrusters
10:04 - positioned on the rocket that push off a
10:07 - force in a given direction I'm going to
10:09 - do something a little bit simpler what
10:10 - I'm going to do as the objects DNA is
10:14 - I'm just going to create an array the
10:17 - array of DNA is the DNA is just going to
10:20 - be an array and in each spot in that
10:24 - array will be a vector pointing in some
10:27 - at first at least some random direction
10:29 - and what the rocket will do it will read
10:32 - that array each vector at a time and
10:35 - apply that vector as a force so let's
10:37 - look at how that might work
10:39 - I press this button here I okay so what
10:42 - I want to do now is create an object
10:45 - called DNA and in that object I'm going
10:51 - to create an array and I'm going to call
10:53 - that array genes and I'm also going to
10:55 - create like a length a variable and
10:59 - actually I'm going to make this a global
11:02 - variable I'm gonna have a global
11:03 - variable just called lifespan and let's
11:06 - make that 200 right now because I'm
11:08 - going to let each rocket live for 200
11:10 - frames and so it's DNA needs to have an
11:13 - array of 200 vectors so it's going to
11:15 - apply a single vector each frame of
11:18 - animation so you know right so I'm going
11:21 - to now what I'm going to do is I'm going
11:23 - to go from I to 0 to lifespan and I'm
11:29 - going to in that array I'm going to give
11:33 - it a random vector so what I'm going to
11:37 - do now is I want the velocity vector for
11:41 - each rocket - whoo whoops
11:44 - to start off at zero come on everybody
11:49 - so we can see now here all of the
11:53 - objects just start at the bottom of the
11:55 - screen and they're not moving but I'm
11:57 - going to give each rocket some DNA and
12:01 - then in the update funny crock it also
12:05 - needs a counter variable this dot count
12:09 - and what I'm going to do an update is
12:11 - I'm going to say this dot apply force
12:15 - DNA genes this dot count and guess what
12:24 - I forgot this time so I need this DNA
12:29 - genes dot index discount I know that's a
12:33 - mouthful of stuff but I've made a DNA
12:35 - object in the rocket that DNA object is
12:38 - it has built into it an array called
12:40 - genes it has 200 vectors in it and each
12:44 - frame what I want to do is apply one of
12:48 - those vectors as a force and then I want
12:50 - to increase the count so now we can see
12:55 - what who look at this
12:55 - huh let's run this again you can see
13:01 - them going flying off like crazy so
13:04 - those those forces were rather were
13:07 - rather large so another thing I think I
13:09 - could possibly do in my DNA is I could
13:15 - just make the force a little bit weaker
13:18 - and you can see there we go so they are
13:20 - the Rockets kind of moving off each
13:22 - getting a force and I also want to look
13:24 - I want to be able to see the that would
13:28 - be the kind of the life span itself so
13:31 - what I'm going to do also is I'm going
13:33 - to say life P
13:43 - life P equals create P I'm gonna make a
13:46 - paragraph element and then I'm going to
13:52 - you know what I just realized
13:55 - even though it's nice to have the the
13:57 - rockets have that count I think I'll
13:59 - just make that count a global variable
14:01 - because it's really going to be the same
14:03 - for everyone
14:04 - so var count equals zero and what I'm
14:07 - going to do is say life P dot html'
14:12 - count and then count plus plus so now
14:16 - you can see over here right I've got
14:18 - something showing me where we are and
14:20 - now at some point I'm going to go past
14:22 - the end of that array I'm sure we're
14:25 - seeing some sort of error here count is
14:27 - not defined okay well that's something
14:28 - else where am I getting that this dot
14:35 - count
14:35 - that can go away so at a certain point
14:39 - I'm going to go past that array but that
14:41 - is when the generation would end and I'm
14:45 - gonna reset to pet count back to zero ah
14:46 - are you following me I got lost in my
14:48 - own salt with all my computers and
14:49 - typing and coding thing so here we are
14:51 - and yes here we are we now have a system
14:54 - so far where I have a population of
14:57 - rockets the Rockets have DNA the DNA has
15:00 - embedded into it an array of vectors
15:02 - that tell it how to move around the
15:04 - screen now what I need is a target I
15:07 - need to have a place where these where
15:11 - these Rockets are trying to reach so I'm
15:14 - going to create a variable called target
15:16 - global variable and I'm going to say
15:18 - target equals create vector and let's
15:20 - put it in the middle of the window at
15:22 - the top and what I'm going to do also in
15:26 - draw is I'm going to just draw a nice
15:29 - little ellipse at Target X target dot y
15:33 - 16 comma 16 and we should see that's
15:36 - where they're trying to get to that's
15:37 - our target and then what I want to do is
15:41 - I want to say here if count equals
15:48 - lifespan count plus plus then I want to
15:54 - do so I want to reset let me just reset
15:56 - count back equal to zero right now and
16:00 - less a little trick I'm just going to do
16:02 - this just to sort of see this is not
16:05 - what we want to do but I kind of want
16:07 - the whole thing to start over I don't
16:11 - know the auto format and code back okay
16:13 - so now we should see when this gets to
16:15 - 200 so so we've got the system working
16:18 - here um we have and I'm just going to
16:20 - kind of zoom on this zoom in on this to
16:22 - talk about it for a second okay so over
16:24 - here we have a system now where I am
16:27 - every 200 frames launching 200 rockets
16:30 - into space and I'm counting up to 200
16:33 - and when I get to 200 I start 200
16:35 - Rockets over what I'm missing now from
16:37 - this example is the genetic algorithm
16:39 - itself what instead of just creating a
16:42 - completely new random population I want
16:44 - to make a new population out of the
16:48 - Rockets
16:50 - I want to make a new population from
16:53 - from from the previous population of
16:56 - rockets I want them to create children
16:57 - Rockets I want the Rockets with the
16:59 - highest fitness that did the best to
17:00 - pass on their genetic information to the
17:02 - next generation the next step that I
17:04 - need to do in population is I'm going to
17:09 - call say this dot evaluate oh my camera
17:16 - went off so what do I want to do in
17:23 - evaluate I want to run through all of
17:25 - the rockets and I want to calculate
17:29 - their fitness this dot Rockets index I
17:35 - calculate Fitness so I need a new
17:38 - function in each rocket to calculate
17:40 - their fitness so what where where's my
17:44 - rocket object somewhere here right I'm
17:47 - going to write a function now this dot
17:48 - calc fitness equals a function so what
17:54 - should their fitness be well we could
17:58 - say that the closer rocket makes it to
18:00 - the target the more fit it is so I can
18:04 - say VAR d equals distance this dot paws
18:08 - dot X this dot paws why target dot X
18:13 - target dot y code pen couldn't fit that
18:16 - all it's not code pens fault but I don't
18:18 - have enough room to fit that all in one
18:19 - line which is why it broke off but you
18:21 - can see I'm taking the distance now the
18:23 - other thing I want to do though is say
18:24 - that and let's give these Rockets a
18:29 - variable called fitness so and I'm going
18:33 - to say this dot fitness equals one
18:35 - divided by distance right because if the
18:39 - distance is one my fitness is one if the
18:43 - distance is 100 it's further away my
18:45 - fitness should be lower like point zero
18:46 - 1 like 1 divided by 100 so in this sense
18:49 - I now have a fitness of 1 divided by
18:52 - distance okay this is good
18:54 - so in the population back to the
18:58 - population it's hard to have everything
19:00 - in one file I have now
19:03 - related to fitness now the other thing
19:05 - that I need to do if you watch my
19:06 - previous genetic algorithm videos is
19:08 - create a mating pool I want to have a
19:10 - mating pool for which I can pick parents
19:12 - to create the next generation of rockets
19:15 - and in order to pick their parent the
19:18 - parents I want their probability the
19:20 - higher their fitness
19:21 - I want the higher chance of picking them
19:22 - so rockets that did really well or that
19:25 - get closer to the target are more likely
19:27 - to pass their genetic information down
19:28 - to the next generation so what I want to
19:31 - do is create a variable I'm going to
19:32 - call it a mating pool and it's an empty
19:35 - array and the first thing I want to do
19:39 - actually I need to make sure I clear it
19:40 - so every jet every time I do this I want
19:44 - to like make it an empty array again and
19:46 - then what I want to do is I want to I
19:52 - want to normalize all of the Fitness
19:55 - values I think this would be useful to
19:57 - do so one thing I want to do is a while
20:02 - I'm calculating the fitness I want to do
20:05 - max fit and the maximum fitness is zero
20:08 - and if this dot Rockets index I max fit
20:15 - is greater than max fit and this dot
20:22 - Rockets fitness is greater than max fit
20:24 - then I want max fit to equal that
20:28 - particular Rockets fitness so I want to
20:31 - find the maximum fitness what's the
20:33 - highest fitness out of all of the
20:35 - elements and then after I do that I want
20:40 - to go through them all again and I want
20:47 - to take their fitness value and divide
20:52 - it by the maximum fitness so that should
20:55 - normalize them right if the values were
20:57 - the maximum fitness is a thousand the
21:00 - one with a thousand divided by a
21:01 - thousand I'll get the value one all the
21:03 - fitness sizeable between zero and one at
21:06 - the moment there's a few divided by zero
21:10 - issues we could walk we could we could
21:12 - have but but I'm not going to
21:16 - about that too much right now okay
21:18 - another way instead of doing I did just
21:21 - realize though here's another thing I
21:22 - could do let me go back to the rocket
21:25 - this will be kind of I think this is
21:26 - actually kind of useful
21:27 - why don't I instead of doing one divided
21:31 - by distance why don't i map that
21:33 - distance which you know essentially has
21:35 - a range between zero and like the width
21:38 - of the window and give that a value all
21:40 - the way between width and and just sort
21:43 - of invert that value I guess that's kind
21:44 - of the same thing but let me just do
21:46 - that in this case I might not need to
21:50 - normalize it there's all sorts of
21:52 - possibilities
21:52 - I'm just working this out something
21:54 - might go wrong but let's try that and
21:56 - see how that goes and then let me go
21:58 - back to the population right where was
22:02 - that ah and so now what I want to do is
22:05 - I want to loop through it again and I
22:09 - want to get up number n which is equal
22:13 - to each Rockets fitness and I would say
22:18 - times 100 I'm going to do that
22:21 - arbitrarily right now and then I'm going
22:23 - to say for J equals zero J is less than
22:25 - n J plus plus and then what I want to do
22:28 - is say this stopped mating pool dot add
22:32 - and I'm going to add this dot rockets
22:36 - index I so the idea behind this bit of
22:39 - code right here that you've seen already
22:40 - if you watch my other genetic algorithms
22:42 - videos is that what I'm doing is I'm
22:44 - saying basically take the rockets
22:47 - Fitness which is between zero and one so
22:50 - and then multiply by 100 so I now have
22:54 - Fitness values between 0 and 100 a
22:57 - rocket with a value of 100 a fitness of
23:00 - 100 to be in the mating pool 100 times a
23:03 - rocket with a fitness value of 3 should
23:05 - be in the mating pool three times so it
23:08 - still could be picked if it's only in
23:09 - there three times but it'll be picked
23:11 - much more likely if it's in there a
23:12 - hundred times so the next thing that I
23:14 - want to do is I'm going to write a new
23:17 - function for this is natural I'm going
23:20 - to call it natural I'm just going to
23:21 - call it selection I'm going to write a
23:22 - function called selection and in
23:25 - selection what I want to do is pick
23:28 - to parents and so I'm going to say
23:33 - partner parent a and oh I'm going to say
23:38 - this dot mating pool and I want to get a
23:45 - in random index equal so oh you know
23:50 - what you can do in p5 now I'm pretty
23:52 - sure in p5 the random function you can
23:56 - actually just give it the array this is
24:02 - a new feature of p5 if I just say random
24:05 - and then an array it'll just give me a
24:07 - random element from that array so I
24:09 - don't actually have to pick a random
24:10 - index yes so that's parent a now this is
24:16 - parent B so I want to parents and I
24:18 - could do something to like say like oh I
24:20 - want to make sure you know one is not
24:23 - the same as the other but you know I
24:27 - want to make sure they're not the same I
24:28 - don't pick the same twice but I'm not
24:30 - too worried about that okay so I want to
24:33 - pick two and then I want to make a child
24:35 - element and I want to make that child by
24:37 - saying parent a dot crossover parent B
24:40 - so this is an S is now my wish list I
24:44 - want the DNA and this is really actually
24:46 - not the rocket I want I'm going to call
24:52 - this child yeah yeah I'll call it yeah
24:54 - I'll call this child I want to have in
24:56 - the DNA object a function that takes um
24:59 - oh you know what this is actually
25:03 - interestingly enough parent a is a
25:04 - rocket object so what I'm going to do is
25:08 - say dot DNA because I'm going to go and
25:11 - grab the DNA from I'm going to take the
25:13 - random rocket object and grab its DNA
25:16 - because what I want to do is create
25:17 - child DNA I want parent a to crop DNA to
25:21 - cross over with parent V's DNA so that
25:24 - means in the DNA object which is there's
25:28 - gonna be a lot of scrolling in this
25:29 - right here I need a new function and I
25:33 - need that function to be called cross
25:34 - over and in this function I need to
25:39 - create
25:42 - a-another right like child I'm going to
25:46 - call it a new DNA is it is an array and
25:49 - what I want to do is loop through the
25:54 - lengths of the genes and it needs an
26:00 - argument partner so the crossover
26:03 - function needs an argument partner and
26:06 - what I want to do is I'm going to say
26:07 - I'm going to make a bid point midpoint
26:09 - equals a random number between 0 and the
26:15 - length of the array so I'm actually
26:16 - going to pick a random midpoint I could
26:17 - always pick the exact middle but what I
26:19 - want to do is I want to say if I is
26:21 - greater than 0 I want the new DNA to
26:26 - come from this this objects genes
26:30 - otherwise and I know what if I is
26:34 - greater than the midpoint and otherwise
26:37 - I want the new DNA to come from the
26:40 - partners genes and then I want to return
26:46 - new DNA so what I'm doing here is I now
26:49 - have written a crossover function whose
26:51 - going to be a long video I have written
26:54 - a crossover function we can look at it
26:56 - closely here which basically says I am a
26:59 - DNA object and I have received another
27:01 - DNA object I'm going to pick somewhere
27:03 - they're both arrays so I'm going to make
27:05 - a new array and then I'm going to
27:09 - there's some there's a couple there's
27:12 - some slots yeah I got it I realize
27:13 - things I got to fix something but that's
27:16 - fine I'm going to pick a bit point in
27:20 - the length of the array and I'm going to
27:22 - get half you know before the midpoint
27:25 - I'm going to get these genes and after
27:26 - the midpoint I'm gonna get the partner's
27:28 - genes now there's an issue this here is
27:29 - just an array but what I really want is
27:31 - a DNA object so what I want to do is
27:34 - actually say I want a new a new DNA
27:39 - object and it'll make random genes when
27:42 - I do that but I can and I want to fill
27:47 - the genes I'm going to overwrite that
27:49 - this way I could be a little bit more
27:51 - elegant about how I write this
27:52 - in which case I could I'm going to do
27:55 - that now I'm going to be so that's one
27:56 - way I could do it but I'm actually going
27:58 - to keep this as an array and I'm going
28:01 - to call this new jeans and then what I
28:06 - want to do is say return new DNA I'm
28:11 - going to say return a new DNA object
28:14 - with the new jeans which means I now can
28:17 - actually just give the DNA object an
28:19 - array rather than have it be random and
28:22 - in this case in the constructor function
28:24 - here I can have a variable called jeans
28:28 - and I can say if jeans exists then this
28:32 - jeans should be that array otherwise do
28:38 - all this other stuff so now what I'm
28:42 - saying here is in this function I this
28:45 - DNA object could either receive jeans
28:47 - and just create a DNA object from those
28:50 - jeans or if it doesn't receive jeans
28:51 - then it could just make random DNA so
28:55 - now somebody in the chat line 101
28:58 - telling me that there's an error yes odd
29:01 - this return has to come after that for
29:04 - loop so that is definitely an error okay
29:11 - so now I have my crossover function done
29:14 - the in the population object which is I
29:17 - guess closer to the top here where I
29:21 - have a selection I now have this is
29:26 - child DNA now what I need to do and I
29:30 - want to do this how many times I want to
29:33 - do this first I want to say new
29:36 - population is an array and then I want
29:41 - to loop through and I'm going to say new
29:45 - Rockets new rockets and I want to loop
29:48 - through the existing rockets
29:57 - and I want to do this for every single
29:59 - existing for example single looks and
30:02 - this should say this dot rockets so now
30:05 - what I want to say is new Rockets index
30:07 - I equals a new rocket with that child
30:11 - DNA so this is what I want to do I want
30:14 - to have parent a pick a DNA from one
30:17 - parent parent B pick a DNA from another
30:20 - parent cross over those two DNA's and
30:23 - make a new rocket with that DNA now does
30:26 - my rocket where is the rocket object
30:30 - scrolling like crazy once again now the
30:32 - rocket object should have an optional
30:34 - argument the rocket constructor should
30:36 - have an optional argument called DNA so
30:38 - I could say if it receives DNA then this
30:42 - DNA equals that DNA otherwise it can
30:47 - make new random DNA so once again I now
30:50 - have rockets that can be made from DNA
30:52 - it still will get the default position
30:55 - velocity acceleration but it can get
30:57 - that DNA so let's see what we've got so
31:00 - far
31:01 - where am I in the population now now
31:06 - what I want to do is I have this new
31:08 - population and I just want to say this
31:10 - dot Rockets is now the new Rockets so
31:15 - let's see if things are kind of working
31:17 - in the main program now instead of just
31:20 - making a new random population what I
31:23 - should be able to do is say population
31:26 - dot evaluate I'm sure there's going to
31:29 - be tons of errors here but we'll see
31:31 - what happens
31:32 - population dot I'm almost certain that I
31:36 - forgotten now somewhere population dot
31:40 - selection
31:42 - back and I'm here to correct a few
31:44 - errors because I definitely have some
31:47 - this dot things that are wrong so this
31:50 - should be this year over here should be
31:52 - this genes this should be this genes
31:54 - length and this by the way should not be
31:57 - this dot partner it should be partner
31:59 - dot genes so that wasn't working so
32:03 - that's that sort of helps things there's
32:05 - an exclamation point here which should
32:06 - be telling the unexpected token on line
32:08 - 41
32:10 - so this not evaluate equals a function
32:14 - okay so let's see that kind of helps
32:18 - that was the problem
32:19 - ah great so we've got an error let's see
32:20 - if I can look in the console this dot
32:23 - mating pool dot add is not a function
32:25 - so line 59 here this stop mating pool I
32:28 - so I'm in thinking in Java land worthy I
32:31 - would use an ArrayList it would be push
32:33 - I mean it would be add but in JavaScript
32:35 - it should be pushed so let's run this
32:37 - again and when it gets to 200 let's see
32:40 - what happens another error let's see
32:43 - what happens back so this is a problem I
32:47 - don't know why I said this dot Rockets
32:48 - equals new Rockets like new Rockets was
32:50 - a function no new Rockets is an array
32:52 - that I want to assign to the current
32:53 - Rockets so I'm going to do that and
32:55 - let's see if we get now it running again
32:58 - okay so it looks like we're getting a
33:00 - new generation look at that you can see
33:02 - how even just that second generation the
33:05 - Rockets are now kind of pointing more
33:07 - straight up so the ones that have kind
33:09 - of kind of made it now there's a bunch
33:11 - of issues with this number one I need to
33:14 - sort of figure out how do I know if the
33:16 - genetic algorithm is working I can kind
33:18 - of see loosely that it is generally
33:21 - working in that if I were to refresh
33:23 - this whole page and run it again you can
33:26 - see they start all going off in random
33:28 - directions and one of them happen to get
33:30 - quite close and you can start to see
33:33 - that over time it looks like maybe more
33:35 - of them are starting to go towards that
33:38 - target so the that array of vectors is
33:42 - sort of evolving towards a bunch of
33:43 - vectors that point straight up so I have
33:45 - the sense the general sense that this is
33:47 - working okay but let's how can I really
33:51 - kind of understand and know if this is
33:53 - working well or not working well well
33:55 - one thing I could do is just like kind
33:58 - of find various things in my code to
34:01 - kind of look at so what I want to do is
34:03 - create I'm going to just say create P
34:05 - Max fit so every time it runs I can kind
34:14 - of see what that maximum fitness value
34:15 - is 363 I'm gonna step to the side here
34:18 - 355 so that makes sense like I'm getting
34:21 - reasons
34:22 - fitness values 366 390 so so that kind
34:27 - of makes sense that's a good sign that
34:29 - that maximum fitness is going up from
34:32 - frame to frame so something's actually
34:34 - working I would be curious to know to
34:37 - kind of just see the range of fitness
34:41 - values so I'm just say console.log this
34:44 - dot rockets let's see if this if I can
34:50 - look in the console here ah there we go
34:52 - I don't know why that wasn't coming out
34:56 - but now I can see it and I can look
34:58 - under at all the rockets and I can kind
35:00 - of see the fitness negative 0.36
35:03 - negative 0.32 so you can see this is
35:06 - these are the normalized values it's a
35:09 - little weird that I got a negative
35:10 - number in one of them but a Fitness one
35:13 - that was the one that had the maximum
35:15 - fitness so you can see the fitness
35:16 - values are kind of making sense so this
35:19 - is a good sign so I'm happy that I have
35:21 - reasonable fitness values okay I'm back
35:24 - so what I want to do is I want to I want
35:26 - to do some things to improve the fitness
35:27 - function and one thing I just want to do
35:29 - is I don't want to let them go when they
35:31 - hit the target they're done they've
35:32 - achieved their goal and they should get
35:33 - like a super high fitness so one of the
35:36 - things I'm going to do in the rocket
35:37 - itself is I am going up I'm going to
35:42 - look for the rocket and in I guess what
35:44 - I'll just do this in the update function
35:45 - I'm going to check the distance between
35:49 - this particular Rockets position and the
35:55 - targets position ooh and if that
36:00 - distance is less than like I'm just
36:02 - going to say if it's less than like 10
36:03 - pixels then it's reached the target so
36:07 - let's say let's create a boolean
36:09 - variable here called oh I added
36:17 - something to the code that's kind of
36:18 - making it stutter a little bit but I'm
36:20 - going to add a variable called this
36:21 - completed equals false and when it's
36:24 - reached the target I want to say this
36:26 - dot completed equals true and then and
36:31 - then I only want it to move
36:39 - if it has not completed its goal okay so
36:46 - I only want it to update the physics
36:49 - engine if it hasn't completed to go and
36:53 - also if it has completed what I'm going
36:56 - to do is just say this stop position
36:59 - equals a copy of the targets position so
37:04 - I'm just going to actually move it to
37:06 - the target so this will help actually
37:09 - give each of these the best score
37:11 - possible when they hit the target and
37:13 - you should see none of the Rockets
37:16 - should now go past the target the other
37:21 - thing I think is worth doing is I could
37:23 - say here all right well if this dot
37:27 - completed let's make things that have
37:30 - complete actually completed and reached
37:31 - the target let's take the fitness and
37:34 - multiply it by ten I don't know if
37:36 - that's a good idea but I could just say
37:38 - like you know you're doing really well
37:39 - if you get close but if you actually
37:42 - reach the target your fitness is just
37:43 - like massively bigger so I'm going to
37:47 - refresh the page code pen is refreshing
37:50 - automatically and let this run for a
37:51 - little bit I'm back and you can see that
37:54 - the Rockets have now evolved a nice path
37:56 - of going towards that target so you can
37:58 - see they're all actually going along the
38:00 - same path now one thing I realized that
38:02 - I forgot to add to this genetic
38:03 - algorithms mutation function so I'm
38:05 - going to add that right now and I'm
38:08 - going to put that right here under the
38:09 - crossover function mutation is good in a
38:12 - lot of cases you know the these Rockets
38:14 - can now only ever have the path based on
38:17 - the original random vectors so I could
38:19 - just write a simple function that just
38:22 - loops through all of their genes again
38:25 - and what it does is it just picks a
38:30 - random number and let's just have a
38:32 - mutation rate of 1% meaning if I pick a
38:35 - random number less than point zero one
38:37 - what I want is for that particular gene
38:43 - to act to just become a new random
38:46 - vector so I'm going to pick a new random
38:50 - vector and I am also going to then set
38:56 - its magnitude to 0.1 which i think is
38:58 - sort of the arbitrary length of these
39:00 - vectors that we've decided so now I've
39:01 - added a mutation function as well and I
39:04 - can after in the population object right
39:09 - here after I call cross over after I
39:13 - cross over one parent with another I can
39:15 - also just say then child mutation and so
39:19 - now if we let this run with the mutation
39:21 - function we'll we should see that you
39:24 - know mutation will play a role that
39:25 - ultimately eventually they might evolve
39:29 - the wheel to evolve a even more optimal
39:32 - path because you know you know in this
39:34 - case every single vector just really
39:36 - should just point straight up right that
39:38 - would be the perfect thing for it to
39:39 - evolve eventually now here's something
39:42 - here's an exercise that you can think
39:43 - about adding to this the length of time
39:47 - it takes for the rocket to make it to
39:49 - the target that could absolutely be a
39:53 - part of its fitness right if it if it
39:57 - makes it to the target faster what is
39:59 - the current value of count when it makes
40:01 - the target that's something I could save
40:03 - and defend the lower that count the
40:05 - higher its Fitness so I might leave that
40:06 - as an exercise for you to add in but
40:09 - what I'm going to do right now is I am
40:13 - going to add just a quick obstacle
40:15 - because I think that will be worth it to
40:18 - sort of see so let's make let's make a
40:21 - rectangle in the window whoops I'm gonna
40:26 - draw a rectangle that's like start at X
40:29 - is 200 X 200 Y of 50 it's going to be
40:35 - 200 pixels across and 10 pixels high let
40:39 - me say fill 255 and it should be clearly
40:41 - be much lower down and maybe it should
40:43 - be start at 100 and it should be around
40:46 - there right so there's an obstacle for
40:50 - you that's actually a pretty hard office
40:52 - we'll get around so what I want to do it
40:55 - let's make these variables
40:58 - Rx is what did I say is a 100-hour why
41:06 - is 150 and RW is a 200 m and RH is 10 so
41:21 - what I want to test in the rocket object
41:24 - and where is my rocket here it is what I
41:31 - want to check here is in the update
41:34 - function right
41:34 - this is checking has it reached the
41:36 - target but let's also see if it knocks
41:39 - into that obstacle
41:40 - if pause X is great ARCIC this pause dot
41:46 - X is greater than that our x value and
41:51 - this dot pause X is less than our X plus
41:56 - our W right if it's between there and
41:59 - this dot pause dot y is greater than our
42:03 - Y and this dot pause dot Y is less than
42:07 - the top of the rectangle plus the height
42:09 - our y + rh right in this case is also
42:14 - it's I'm going to say it's dead or it
42:17 - crashed this dot crashed is true so so I
42:24 - want it to stop moving if it's completed
42:26 - Oh move it as long as it's not completed
42:30 - and it's not crashed and we can say the
42:38 - the each rocket now has a variable
42:41 - called disk crashed which is also false
42:44 - and then in the fitness if this stock
42:47 - completed this dot fitness x equals 10
42:50 - if if this dot crashed let's just set
42:55 - this dot fitness equal to 1 so I'm not
42:57 - going to set it to 0 I probably should
42:59 - set it to 0 but but let's set it to 1
43:03 - okay so now we should see let's see if
43:06 - these Rockets over time evolved to go
43:09 - around the obstacle
43:11 - okay so you can see now they've it's
43:14 - been running for a little bit but they
43:16 - haven't really evolved to go around the
43:17 - obstacle yet so let's add a few things
43:19 - number one is they need a bit of a
43:21 - longer life span so I'm going to let
43:23 - them go for 400 cycles
43:26 - I'm also want to I also want to make
43:29 - them crash if they hit the edge of the
43:31 - window that I think will help a little
43:33 - bit so let's let me go to the Rockets
43:38 - and in this place where I'm trying to
43:43 - check if they've crashed I can also
43:45 - check things like if this cos x is
43:48 - greater than width or this dot paws X is
43:52 - less than 0 then this dot crashed is
43:55 - also true and I can also do the same
43:59 - thing with the height so I can also I
44:05 - can also I can also have them crash if
44:09 - they go off the edge of the window which
44:11 - I think will help the other thing that I
44:12 - might consider doing is I'm going to
44:14 - make a global variable called max force
44:18 - which is 0.1 right now so I'm going to
44:22 - look for wherever I have Mac 0.1 right
44:24 - here I always set the magnitude to 0.1
44:27 - I'm going to down change that to the
44:28 - variable max force and I want to set
44:32 - this to max force and there we go
44:39 - and now oh look at this these poor poor
44:43 - Rockets that start going down off the
44:47 - screen it's going to take them a while
44:49 - to evolve out so you know I should give
44:53 - them all I should give them all a little
44:55 - nudge up that might be a nice thing for
44:57 - me to give them but I kind of don't want
44:59 - to but I am going to give them a higher
45:01 - maximum force which I think will help so
45:04 - I'm going to make that maximum force
45:06 - point to which I think and then I also
45:09 - though want to limit their velocity
45:11 - which I think will be helpful just in
45:15 - like make it so they don't sort of
45:16 - spiral out of control I'm in the rocket
45:18 - object I am going to just here
45:24 - say this dot velocity limit like two
45:28 - four and now that's a bunch of things
45:30 - that I've added let's let me zoom in
45:32 - here on our Rockets and I'm going to let
45:35 - this run for a little bit and I'll come
45:37 - back when after it's run for a little
45:39 - bit we'll see how it goes
45:40 - so I've let this run for a little while
45:42 - but unfortunately all the Rockets are
45:44 - crashing and so the crashing just like
45:47 - totally ruins their fitness and actually
45:49 - the ones that crash kind of closer to
45:51 - the target we kind of want to keep so
45:53 - what I'm actually going to do is I'm
45:55 - just going to divide their fitness by
45:57 - ten when they crash and that way we
46:00 - still have the fitness scaled so to
46:02 - speak so
46:08 - let's have this run for a little bit
46:10 - longer and see what happens
46:12 - I'm back so these Rockets have now
46:14 - successfully evolved and you can see
46:16 - that one of them figured out how to get
46:18 - around this target and hit the get
46:20 - around the obstacle hit the target you
46:21 - could see that it had some like
46:23 - accidental weird DNA in it that makes it
46:25 - go kind of like early in this weird
46:28 - pattern they're all kind of doing that
46:29 - so this is where if I were to add
46:32 - something to the fitness function that
46:34 - gave the ones that actually make it to
46:36 - the target a little bit faster a higher
46:38 - fitness they would start to work out the
46:40 - path so that they wouldn't be kind of
46:42 - doing this strange extra thing because
46:43 - as long as they make it to the target
46:45 - before the end of the lifespan they're
46:46 - fine so I'm going to leave on this video
46:49 - I think here there are so many
46:51 - improvements you could make to this I
46:53 - might like to make some of them at some
46:54 - point or come back and do a video you
46:56 - might like to make those improvements
46:57 - and share them with me number one is
46:59 - just design wise you could add color I
47:01 - designed the Rockets you could create a
47:03 - much more interesting maze or course for
47:05 - them you could create obstacle objects
47:08 - and allow the user to move the obstacles
47:09 - around make the target movable so they
47:11 - have to adapt and evolve we could
47:14 - improve the Fitness function in a number
47:15 - of ways one by keeping track of the
47:17 - amount of time to reach the target
47:18 - something that I'll talk about I think
47:20 - I'll make a separate video about this is
47:21 - just talking about why an exponential
47:23 - fitness function and said the linear
47:25 - Fitness function can be something that's
47:27 - quite useful which you could add to this
47:29 - as well look for the next video kind of
47:31 - how I do that um so those are a bunch of
47:35 - ideas of how you could make this system
47:37 - a bit better and in fact one thing that
47:39 - I will do is I'm going to revisit this
47:41 - example in a future video looking at how
47:44 - a neural network or other types of
47:45 - machine learning algorithms might also
47:48 - be used to train agents to move around
47:51 - the screen with a certain path so I hope
47:53 - you enjoyed this rather I think insanely
47:56 - long and scattered scattered a coding
48:01 - challenge the code itself will be
48:03 - available on both github as well as a
48:05 - link to this pen this code pen that I
48:07 - created here so you can actually just go
48:09 - straight to that link and play around
48:10 - with the code there as well
48:12 - okay I hope you enjoyed it and I'll see
48:13 - you in a future genetic algorithms video

Cleaned transcript:

hello and welcome to another coding challenge in this coding challenge I am going to program from scratch something called smart Rockets okay what is this smart Rockets thing well this smart rockets project which I have running behind me you can find a link to it in this video's description is something created by Jer Thorp some number of years ago it was developed in flash which is a environment for programming ActionScript I'm going to do this in JavaScript using the p5.js framework the reason why I love this project is it's a great example of genetic algorithms in the wild at play with an animation physics pace system so what you'll see here is that there are these Rockets being launched from the bottom and they're trying to reach that target up there and they have built into them this DNA this DNA that this virtual DNA that tells them how to move about the screen so let me briefly talk to you about how that works so the Rockets actually have a bunch of like kind of thrusters on them and this is my like pathetic terrible drawing of that and though all of those point in a certain direction so the number of thrusters in the direction that they point in is part of their DNA and then the sequence by which they fire first second third fourth is also part of their DNA so you can imagine like if you had a control panel with five buttons on it you could press those five buttons in some sort of sequence to try to get push it in some efficient way to reach that target so what I need what I need is a couple things I need to ultimately have a rocket object and that rocket object is going to have to have physics built into it I'm also going to need to have some DNA object which is DNA to control the physics and then the DNA object is going to need to have functions like mutation and crossover these are pieces of functionality that exist as part of a genetic algorithm hey if you want to know about genetic algorithms I have a whole set of video tutorials link to the description of this video that go through the algorithm in detail I'm gonna do that again in this video but I'll be programming kind of quickly so if you want the sort of longer explanation of that go back and watch those videos and then the third thing here is I'm going to need a population object and the population object is going to manage an array of these rocket objects so I'm going to make some Rockets let them go have them evolve let them go again have them evolve let them go again and eventually they should make it from the bottom to the top maybe I could put some obstacles in their way that sort of thing let's check on how these rockets are doing you can see a kind of path that there by the way the textsmart rockets here is an obstacle they're trying to figure out how to get around it so I'm going to leave I'm going to leave this browser window open hopefully I won't forget to close it and at the end of the video we'll come back and check on how those smart Rockets are joining now I'm also going to do something a little bit crazy it's not that crazy I'm going to program this all using code pen I have already added the p5 just JavaScript files you can check my video of how to do that in a different video I've already added those and and I just started with basically nothing I have create canvas and background this is the only code I have create a canvas and draw a black background so the first thing I want to do is create this rocket object so I'm going to I'm going to do that with a constructor function and I want my rocket to have a position and I'm going to say create vector I wanted to have a velocity let's say create vector and I want it to have an acceleration and I'm going to say create vector then I'm not so used to using code pen so we'll see how this goes for me I then also want to give it a function and apply force function which where this rocket can receive a force and that force would get added to its acceleration that is Newton's law at play and then I also want to what else do I want to do I want to have an update open that should say this dot apply force equals function I also want to have it have an update function this not update equals function and I want that function I want to do the sort of standard physics algorithm that I do in one of my examples where I have this dot velocity add this dot acceleration and then I want to this dot position add this velocity and then I also want to clear the acceleration at the end by multiplying it by zero because so this is like I just built a physics engine in like 10 seconds basically I have an object that has a position a velocity the acceleration acceleration gets controlled by forces in the environment or forces by its rocket thruster so to speak and the update function is where the physics actually happen okay so I also want to have a function called this dot show I'm gonna I'm just going to be my rocket won't be as pretty and beautiful as jairs smart rocket I'm just going to say I'm just going to make a rectangle at this position X this stop position dot Y and the rectangle will be thin but tall and I'm also actually what I'm going to do is I'm going to say translate I want to rotate it in the direction that it's moving I think that'll be a useful thing to have so I'm actually going to translate to its position and then draw the rectangle at zero zero and I'm also going to say rect mode Center and I am also going to say then rotate by this velocity dot heading so the heading function in in the p5 vector object gives you an angle of the direction that a vector is pointing so I can rotate by the angle the velocity being the direction that it's moving I also want to add around this push and pop and there if I add push and pop around this function then all this rotating and translating won't affect other things so let's let's go now and see if I can create just a single rocket on the screen I'm going to say a rocket equals new rocket and then I'm going to say a rocket dot update and rocket show oh look there it is the rocket in the top left so one thing I want to do is I want my rockets to start at the bottom of the window so we can see there it started there and then let's just say for the sake of argument I give it a velocity pointing up is it moving whoo whoo okay so one thing you'll notice I drew it vertically and the angle of getting is probably ninety degrees so it rotated it so I think I'll just change the way I draw the rectangle to be wide and tall and you can see there now I have a rocket moving up so I have a single rocket that's a good sign I am getting something going here okay I'm looking everywhere because I got a screen here I got a camera here I got a wall here I'm going a little crazy here okay this is good this is good okay now what I think I want to do is I'm gone but now I'm going to create a population you know I don't necessarily need a whole separate object to manage this stuff but I'm going to do it anyway and in the population I want to have an array of rockets and I want to I want to also have a population size we'll just make it like a hundred back I made the font size a little bigger so it'd be easier to see in the video so what I want to say is this dot Rockets index I equals a new rocket and one thing I'm going to do is have their initial velocity just for right now be just so I can see a random a random vector and what I'm going to do now is create a population and I'm going to say the population should update and I'm just going to actually write a function called run and then in the population object itself I'm going to write a function called run and what I want to do there is okay back again and what I want to do is now say oh this dot this dot Rockets whoops I need to say this dot rockets uh rockets index i dot update and this dot rockets index i dot show i'm back after some technical difficulties and there's a big bug in my code it's not missing at this stop but it's almost as bad remember how i said here i need this function called pop i need this function called pop to use push and pop to make it so that this translate and rotate only affects this particular rocket well guess what I did I made a variable named pop for population and that variable pop is now my global variable which overrides the p5 function named pop so I really shouldn't have done that I need to name this something else I'll call it pop you'll for population and you know what I don't know I can actually just say population I'll do this population run and now we should see there's one rocket lifting off and now I can change the population size to like 25 and we can see there we go a bunch of rockets all going off in their random direction let's clean up some things about these Rockets let's make them a little bit smaller let's say no stroke let's give them fill 255 with a little bit of alpha and we should see now there we go so this is these are our smart Rockets lifting off from the bottom of the screen so we're getting somewhere we've got the physic system now if I return to over here in the original smart Rockets there are actually a set of specific thrusters positioned on the rocket that push off a force in a given direction I'm going to do something a little bit simpler what I'm going to do as the objects DNA is I'm just going to create an array the array of DNA is the DNA is just going to be an array and in each spot in that array will be a vector pointing in some at first at least some random direction and what the rocket will do it will read that array each vector at a time and apply that vector as a force so let's look at how that might work I press this button here I okay so what I want to do now is create an object called DNA and in that object I'm going to create an array and I'm going to call that array genes and I'm also going to create like a length a variable and actually I'm going to make this a global variable I'm gonna have a global variable just called lifespan and let's make that 200 right now because I'm going to let each rocket live for 200 frames and so it's DNA needs to have an array of 200 vectors so it's going to apply a single vector each frame of animation so you know right so I'm going to now what I'm going to do is I'm going to go from I to 0 to lifespan and I'm going to in that array I'm going to give it a random vector so what I'm going to do now is I want the velocity vector for each rocket whoo whoops to start off at zero come on everybody so we can see now here all of the objects just start at the bottom of the screen and they're not moving but I'm going to give each rocket some DNA and then in the update funny crock it also needs a counter variable this dot count and what I'm going to do an update is I'm going to say this dot apply force DNA genes this dot count and guess what I forgot this time so I need this DNA genes dot index discount I know that's a mouthful of stuff but I've made a DNA object in the rocket that DNA object is it has built into it an array called genes it has 200 vectors in it and each frame what I want to do is apply one of those vectors as a force and then I want to increase the count so now we can see what who look at this huh let's run this again you can see them going flying off like crazy so those those forces were rather were rather large so another thing I think I could possibly do in my DNA is I could just make the force a little bit weaker and you can see there we go so they are the Rockets kind of moving off each getting a force and I also want to look I want to be able to see the that would be the kind of the life span itself so what I'm going to do also is I'm going to say life P life P equals create P I'm gonna make a paragraph element and then I'm going to you know what I just realized even though it's nice to have the the rockets have that count I think I'll just make that count a global variable because it's really going to be the same for everyone so var count equals zero and what I'm going to do is say life P dot html' count and then count plus plus so now you can see over here right I've got something showing me where we are and now at some point I'm going to go past the end of that array I'm sure we're seeing some sort of error here count is not defined okay well that's something else where am I getting that this dot count that can go away so at a certain point I'm going to go past that array but that is when the generation would end and I'm gonna reset to pet count back to zero ah are you following me I got lost in my own salt with all my computers and typing and coding thing so here we are and yes here we are we now have a system so far where I have a population of rockets the Rockets have DNA the DNA has embedded into it an array of vectors that tell it how to move around the screen now what I need is a target I need to have a place where these where these Rockets are trying to reach so I'm going to create a variable called target global variable and I'm going to say target equals create vector and let's put it in the middle of the window at the top and what I'm going to do also in draw is I'm going to just draw a nice little ellipse at Target X target dot y 16 comma 16 and we should see that's where they're trying to get to that's our target and then what I want to do is I want to say here if count equals lifespan count plus plus then I want to do so I want to reset let me just reset count back equal to zero right now and less a little trick I'm just going to do this just to sort of see this is not what we want to do but I kind of want the whole thing to start over I don't know the auto format and code back okay so now we should see when this gets to 200 so so we've got the system working here um we have and I'm just going to kind of zoom on this zoom in on this to talk about it for a second okay so over here we have a system now where I am every 200 frames launching 200 rockets into space and I'm counting up to 200 and when I get to 200 I start 200 Rockets over what I'm missing now from this example is the genetic algorithm itself what instead of just creating a completely new random population I want to make a new population out of the Rockets I want to make a new population from from from the previous population of rockets I want them to create children Rockets I want the Rockets with the highest fitness that did the best to pass on their genetic information to the next generation the next step that I need to do in population is I'm going to call say this dot evaluate oh my camera went off so what do I want to do in evaluate I want to run through all of the rockets and I want to calculate their fitness this dot Rockets index I calculate Fitness so I need a new function in each rocket to calculate their fitness so what where where's my rocket object somewhere here right I'm going to write a function now this dot calc fitness equals a function so what should their fitness be well we could say that the closer rocket makes it to the target the more fit it is so I can say VAR d equals distance this dot paws dot X this dot paws why target dot X target dot y code pen couldn't fit that all it's not code pens fault but I don't have enough room to fit that all in one line which is why it broke off but you can see I'm taking the distance now the other thing I want to do though is say that and let's give these Rockets a variable called fitness so and I'm going to say this dot fitness equals one divided by distance right because if the distance is one my fitness is one if the distance is 100 it's further away my fitness should be lower like point zero 1 like 1 divided by 100 so in this sense I now have a fitness of 1 divided by distance okay this is good so in the population back to the population it's hard to have everything in one file I have now related to fitness now the other thing that I need to do if you watch my previous genetic algorithm videos is create a mating pool I want to have a mating pool for which I can pick parents to create the next generation of rockets and in order to pick their parent the parents I want their probability the higher their fitness I want the higher chance of picking them so rockets that did really well or that get closer to the target are more likely to pass their genetic information down to the next generation so what I want to do is create a variable I'm going to call it a mating pool and it's an empty array and the first thing I want to do actually I need to make sure I clear it so every jet every time I do this I want to like make it an empty array again and then what I want to do is I want to I want to normalize all of the Fitness values I think this would be useful to do so one thing I want to do is a while I'm calculating the fitness I want to do max fit and the maximum fitness is zero and if this dot Rockets index I max fit is greater than max fit and this dot Rockets fitness is greater than max fit then I want max fit to equal that particular Rockets fitness so I want to find the maximum fitness what's the highest fitness out of all of the elements and then after I do that I want to go through them all again and I want to take their fitness value and divide it by the maximum fitness so that should normalize them right if the values were the maximum fitness is a thousand the one with a thousand divided by a thousand I'll get the value one all the fitness sizeable between zero and one at the moment there's a few divided by zero issues we could walk we could we could have but but I'm not going to about that too much right now okay another way instead of doing I did just realize though here's another thing I could do let me go back to the rocket this will be kind of I think this is actually kind of useful why don't I instead of doing one divided by distance why don't i map that distance which you know essentially has a range between zero and like the width of the window and give that a value all the way between width and and just sort of invert that value I guess that's kind of the same thing but let me just do that in this case I might not need to normalize it there's all sorts of possibilities I'm just working this out something might go wrong but let's try that and see how that goes and then let me go back to the population right where was that ah and so now what I want to do is I want to loop through it again and I want to get up number n which is equal to each Rockets fitness and I would say times 100 I'm going to do that arbitrarily right now and then I'm going to say for J equals zero J is less than n J plus plus and then what I want to do is say this stopped mating pool dot add and I'm going to add this dot rockets index I so the idea behind this bit of code right here that you've seen already if you watch my other genetic algorithms videos is that what I'm doing is I'm saying basically take the rockets Fitness which is between zero and one so and then multiply by 100 so I now have Fitness values between 0 and 100 a rocket with a value of 100 a fitness of 100 to be in the mating pool 100 times a rocket with a fitness value of 3 should be in the mating pool three times so it still could be picked if it's only in there three times but it'll be picked much more likely if it's in there a hundred times so the next thing that I want to do is I'm going to write a new function for this is natural I'm going to call it natural I'm just going to call it selection I'm going to write a function called selection and in selection what I want to do is pick to parents and so I'm going to say partner parent a and oh I'm going to say this dot mating pool and I want to get a in random index equal so oh you know what you can do in p5 now I'm pretty sure in p5 the random function you can actually just give it the array this is a new feature of p5 if I just say random and then an array it'll just give me a random element from that array so I don't actually have to pick a random index yes so that's parent a now this is parent B so I want to parents and I could do something to like say like oh I want to make sure you know one is not the same as the other but you know I want to make sure they're not the same I don't pick the same twice but I'm not too worried about that okay so I want to pick two and then I want to make a child element and I want to make that child by saying parent a dot crossover parent B so this is an S is now my wish list I want the DNA and this is really actually not the rocket I want I'm going to call this child yeah yeah I'll call it yeah I'll call this child I want to have in the DNA object a function that takes um oh you know what this is actually interestingly enough parent a is a rocket object so what I'm going to do is say dot DNA because I'm going to go and grab the DNA from I'm going to take the random rocket object and grab its DNA because what I want to do is create child DNA I want parent a to crop DNA to cross over with parent V's DNA so that means in the DNA object which is there's gonna be a lot of scrolling in this right here I need a new function and I need that function to be called cross over and in this function I need to create aanother right like child I'm going to call it a new DNA is it is an array and what I want to do is loop through the lengths of the genes and it needs an argument partner so the crossover function needs an argument partner and what I want to do is I'm going to say I'm going to make a bid point midpoint equals a random number between 0 and the length of the array so I'm actually going to pick a random midpoint I could always pick the exact middle but what I want to do is I want to say if I is greater than 0 I want the new DNA to come from this this objects genes otherwise and I know what if I is greater than the midpoint and otherwise I want the new DNA to come from the partners genes and then I want to return new DNA so what I'm doing here is I now have written a crossover function whose going to be a long video I have written a crossover function we can look at it closely here which basically says I am a DNA object and I have received another DNA object I'm going to pick somewhere they're both arrays so I'm going to make a new array and then I'm going to there's some there's a couple there's some slots yeah I got it I realize things I got to fix something but that's fine I'm going to pick a bit point in the length of the array and I'm going to get half you know before the midpoint I'm going to get these genes and after the midpoint I'm gonna get the partner's genes now there's an issue this here is just an array but what I really want is a DNA object so what I want to do is actually say I want a new a new DNA object and it'll make random genes when I do that but I can and I want to fill the genes I'm going to overwrite that this way I could be a little bit more elegant about how I write this in which case I could I'm going to do that now I'm going to be so that's one way I could do it but I'm actually going to keep this as an array and I'm going to call this new jeans and then what I want to do is say return new DNA I'm going to say return a new DNA object with the new jeans which means I now can actually just give the DNA object an array rather than have it be random and in this case in the constructor function here I can have a variable called jeans and I can say if jeans exists then this jeans should be that array otherwise do all this other stuff so now what I'm saying here is in this function I this DNA object could either receive jeans and just create a DNA object from those jeans or if it doesn't receive jeans then it could just make random DNA so now somebody in the chat line 101 telling me that there's an error yes odd this return has to come after that for loop so that is definitely an error okay so now I have my crossover function done the in the population object which is I guess closer to the top here where I have a selection I now have this is child DNA now what I need to do and I want to do this how many times I want to do this first I want to say new population is an array and then I want to loop through and I'm going to say new Rockets new rockets and I want to loop through the existing rockets and I want to do this for every single existing for example single looks and this should say this dot rockets so now what I want to say is new Rockets index I equals a new rocket with that child DNA so this is what I want to do I want to have parent a pick a DNA from one parent parent B pick a DNA from another parent cross over those two DNA's and make a new rocket with that DNA now does my rocket where is the rocket object scrolling like crazy once again now the rocket object should have an optional argument the rocket constructor should have an optional argument called DNA so I could say if it receives DNA then this DNA equals that DNA otherwise it can make new random DNA so once again I now have rockets that can be made from DNA it still will get the default position velocity acceleration but it can get that DNA so let's see what we've got so far where am I in the population now now what I want to do is I have this new population and I just want to say this dot Rockets is now the new Rockets so let's see if things are kind of working in the main program now instead of just making a new random population what I should be able to do is say population dot evaluate I'm sure there's going to be tons of errors here but we'll see what happens population dot I'm almost certain that I forgotten now somewhere population dot selection back and I'm here to correct a few errors because I definitely have some this dot things that are wrong so this should be this year over here should be this genes this should be this genes length and this by the way should not be this dot partner it should be partner dot genes so that wasn't working so that's that sort of helps things there's an exclamation point here which should be telling the unexpected token on line 41 so this not evaluate equals a function okay so let's see that kind of helps that was the problem ah great so we've got an error let's see if I can look in the console this dot mating pool dot add is not a function so line 59 here this stop mating pool I so I'm in thinking in Java land worthy I would use an ArrayList it would be push I mean it would be add but in JavaScript it should be pushed so let's run this again and when it gets to 200 let's see what happens another error let's see what happens back so this is a problem I don't know why I said this dot Rockets equals new Rockets like new Rockets was a function no new Rockets is an array that I want to assign to the current Rockets so I'm going to do that and let's see if we get now it running again okay so it looks like we're getting a new generation look at that you can see how even just that second generation the Rockets are now kind of pointing more straight up so the ones that have kind of kind of made it now there's a bunch of issues with this number one I need to sort of figure out how do I know if the genetic algorithm is working I can kind of see loosely that it is generally working in that if I were to refresh this whole page and run it again you can see they start all going off in random directions and one of them happen to get quite close and you can start to see that over time it looks like maybe more of them are starting to go towards that target so the that array of vectors is sort of evolving towards a bunch of vectors that point straight up so I have the sense the general sense that this is working okay but let's how can I really kind of understand and know if this is working well or not working well well one thing I could do is just like kind of find various things in my code to kind of look at so what I want to do is create I'm going to just say create P Max fit so every time it runs I can kind of see what that maximum fitness value is 363 I'm gonna step to the side here 355 so that makes sense like I'm getting reasons fitness values 366 390 so so that kind of makes sense that's a good sign that that maximum fitness is going up from frame to frame so something's actually working I would be curious to know to kind of just see the range of fitness values so I'm just say console.log this dot rockets let's see if this if I can look in the console here ah there we go I don't know why that wasn't coming out but now I can see it and I can look under at all the rockets and I can kind of see the fitness negative 0.36 negative 0.32 so you can see this is these are the normalized values it's a little weird that I got a negative number in one of them but a Fitness one that was the one that had the maximum fitness so you can see the fitness values are kind of making sense so this is a good sign so I'm happy that I have reasonable fitness values okay I'm back so what I want to do is I want to I want to do some things to improve the fitness function and one thing I just want to do is I don't want to let them go when they hit the target they're done they've achieved their goal and they should get like a super high fitness so one of the things I'm going to do in the rocket itself is I am going up I'm going to look for the rocket and in I guess what I'll just do this in the update function I'm going to check the distance between this particular Rockets position and the targets position ooh and if that distance is less than like I'm just going to say if it's less than like 10 pixels then it's reached the target so let's say let's create a boolean variable here called oh I added something to the code that's kind of making it stutter a little bit but I'm going to add a variable called this completed equals false and when it's reached the target I want to say this dot completed equals true and then and then I only want it to move if it has not completed its goal okay so I only want it to update the physics engine if it hasn't completed to go and also if it has completed what I'm going to do is just say this stop position equals a copy of the targets position so I'm just going to actually move it to the target so this will help actually give each of these the best score possible when they hit the target and you should see none of the Rockets should now go past the target the other thing I think is worth doing is I could say here all right well if this dot completed let's make things that have complete actually completed and reached the target let's take the fitness and multiply it by ten I don't know if that's a good idea but I could just say like you know you're doing really well if you get close but if you actually reach the target your fitness is just like massively bigger so I'm going to refresh the page code pen is refreshing automatically and let this run for a little bit I'm back and you can see that the Rockets have now evolved a nice path of going towards that target so you can see they're all actually going along the same path now one thing I realized that I forgot to add to this genetic algorithms mutation function so I'm going to add that right now and I'm going to put that right here under the crossover function mutation is good in a lot of cases you know the these Rockets can now only ever have the path based on the original random vectors so I could just write a simple function that just loops through all of their genes again and what it does is it just picks a random number and let's just have a mutation rate of 1% meaning if I pick a random number less than point zero one what I want is for that particular gene to act to just become a new random vector so I'm going to pick a new random vector and I am also going to then set its magnitude to 0.1 which i think is sort of the arbitrary length of these vectors that we've decided so now I've added a mutation function as well and I can after in the population object right here after I call cross over after I cross over one parent with another I can also just say then child mutation and so now if we let this run with the mutation function we'll we should see that you know mutation will play a role that ultimately eventually they might evolve the wheel to evolve a even more optimal path because you know you know in this case every single vector just really should just point straight up right that would be the perfect thing for it to evolve eventually now here's something here's an exercise that you can think about adding to this the length of time it takes for the rocket to make it to the target that could absolutely be a part of its fitness right if it if it makes it to the target faster what is the current value of count when it makes the target that's something I could save and defend the lower that count the higher its Fitness so I might leave that as an exercise for you to add in but what I'm going to do right now is I am going to add just a quick obstacle because I think that will be worth it to sort of see so let's make let's make a rectangle in the window whoops I'm gonna draw a rectangle that's like start at X is 200 X 200 Y of 50 it's going to be 200 pixels across and 10 pixels high let me say fill 255 and it should be clearly be much lower down and maybe it should be start at 100 and it should be around there right so there's an obstacle for you that's actually a pretty hard office we'll get around so what I want to do it let's make these variables Rx is what did I say is a 100hour why is 150 and RW is a 200 m and RH is 10 so what I want to test in the rocket object and where is my rocket here it is what I want to check here is in the update function right this is checking has it reached the target but let's also see if it knocks into that obstacle if pause X is great ARCIC this pause dot X is greater than that our x value and this dot pause X is less than our X plus our W right if it's between there and this dot pause dot y is greater than our Y and this dot pause dot Y is less than the top of the rectangle plus the height our y + rh right in this case is also it's I'm going to say it's dead or it crashed this dot crashed is true so so I want it to stop moving if it's completed Oh move it as long as it's not completed and it's not crashed and we can say the the each rocket now has a variable called disk crashed which is also false and then in the fitness if this stock completed this dot fitness x equals 10 if if this dot crashed let's just set this dot fitness equal to 1 so I'm not going to set it to 0 I probably should set it to 0 but but let's set it to 1 okay so now we should see let's see if these Rockets over time evolved to go around the obstacle okay so you can see now they've it's been running for a little bit but they haven't really evolved to go around the obstacle yet so let's add a few things number one is they need a bit of a longer life span so I'm going to let them go for 400 cycles I'm also want to I also want to make them crash if they hit the edge of the window that I think will help a little bit so let's let me go to the Rockets and in this place where I'm trying to check if they've crashed I can also check things like if this cos x is greater than width or this dot paws X is less than 0 then this dot crashed is also true and I can also do the same thing with the height so I can also I can also I can also have them crash if they go off the edge of the window which I think will help the other thing that I might consider doing is I'm going to make a global variable called max force which is 0.1 right now so I'm going to look for wherever I have Mac 0.1 right here I always set the magnitude to 0.1 I'm going to down change that to the variable max force and I want to set this to max force and there we go and now oh look at this these poor poor Rockets that start going down off the screen it's going to take them a while to evolve out so you know I should give them all I should give them all a little nudge up that might be a nice thing for me to give them but I kind of don't want to but I am going to give them a higher maximum force which I think will help so I'm going to make that maximum force point to which I think and then I also though want to limit their velocity which I think will be helpful just in like make it so they don't sort of spiral out of control I'm in the rocket object I am going to just here say this dot velocity limit like two four and now that's a bunch of things that I've added let's let me zoom in here on our Rockets and I'm going to let this run for a little bit and I'll come back when after it's run for a little bit we'll see how it goes so I've let this run for a little while but unfortunately all the Rockets are crashing and so the crashing just like totally ruins their fitness and actually the ones that crash kind of closer to the target we kind of want to keep so what I'm actually going to do is I'm just going to divide their fitness by ten when they crash and that way we still have the fitness scaled so to speak so let's have this run for a little bit longer and see what happens I'm back so these Rockets have now successfully evolved and you can see that one of them figured out how to get around this target and hit the get around the obstacle hit the target you could see that it had some like accidental weird DNA in it that makes it go kind of like early in this weird pattern they're all kind of doing that so this is where if I were to add something to the fitness function that gave the ones that actually make it to the target a little bit faster a higher fitness they would start to work out the path so that they wouldn't be kind of doing this strange extra thing because as long as they make it to the target before the end of the lifespan they're fine so I'm going to leave on this video I think here there are so many improvements you could make to this I might like to make some of them at some point or come back and do a video you might like to make those improvements and share them with me number one is just design wise you could add color I designed the Rockets you could create a much more interesting maze or course for them you could create obstacle objects and allow the user to move the obstacles around make the target movable so they have to adapt and evolve we could improve the Fitness function in a number of ways one by keeping track of the amount of time to reach the target something that I'll talk about I think I'll make a separate video about this is just talking about why an exponential fitness function and said the linear Fitness function can be something that's quite useful which you could add to this as well look for the next video kind of how I do that um so those are a bunch of ideas of how you could make this system a bit better and in fact one thing that I will do is I'm going to revisit this example in a future video looking at how a neural network or other types of machine learning algorithms might also be used to train agents to move around the screen with a certain path so I hope you enjoyed this rather I think insanely long and scattered scattered a coding challenge the code itself will be available on both github as well as a link to this pen this code pen that I created here so you can actually just go straight to that link and play around with the code there as well okay I hope you enjoyed it and I'll see you in a future genetic algorithms video
