With timestamps:

00:00 - oh hello welcome to part 2 of my coding
00:03 - challenge quadtrees so what I want to do
00:08 - in this part is I want to look at how I
00:10 - can retrieve a list of points from a
00:14 - given area without having and this is
00:16 - going to I don't have to like I could
00:18 - tell like this boundary over here give
00:20 - me all the points in that area well I
00:21 - could just look through every points and
00:22 - see if that they're contained within
00:24 - that boundary but the quadtree is going
00:26 - to allow me to do that more efficiently
00:27 - by kind of looking at the sections that
00:30 - are that are near this particular range
00:33 - that I'm going to create boy am I not
00:34 - explaining this well let me explain this
00:36 - visually so what I'm going to do let me
00:39 - just draw a rectangle let me say
00:41 - something like stroke 0 255 0 let me
00:45 - draw a rectangle and I think because I'm
00:48 - gonna say rect mode Center and I'm gonna
00:51 - draw a rectangle that's how big is the
00:53 - canvas 400 400 so I'm gonna go over to
00:56 - like 300 down to like 300 and then say
00:59 - 100 comma 50 so and that this is way too
01:04 - exact like so let's let's say 107 and
01:08 - like 92 okay so and I'm always really
01:13 - bothering me that there okay
01:16 - so basically what I want is I just want
01:18 - the points and there's not a lot of
01:20 - points there so let me move this over
01:22 - wasting so much time 1 it's perfect this
01:26 - is what I want what I want now is to say
01:28 - like just give me all the points that
01:30 - are in this area but I want to ask the
01:32 - quadtree for it because the quadtree is
01:34 - gonna have a capability of giving me
01:36 - those points more efficiently it's not
01:37 - gonna have to check every single point
01:38 - so let's see if I can do that so in
01:42 - order to do this what I need is in the
01:45 - quadtree I need a new function and I'm
01:48 - gonna call it query and let me put it
01:51 - above show show is just sort of a
01:52 - drawing stuff which is really for just
01:54 - for debugging at this point I'm gonna
01:55 - write a function called query and it's
01:57 - going to take as an argument or range
02:00 - and what that range is it's essentially
02:02 - a boundary I don't want to use the word
02:03 - boundary cuz it's gonna get confusing
02:04 - cuz the quadtree object itself has a
02:07 - this.top boundary so the first thing i
02:09 - need to do is i just need to I I need to
02:12 - does this range and this quadtree do
02:15 - they overlap if they do then there might
02:18 - be some points that I want to give you
02:19 - if not it could be ignored and if it can
02:21 - be ignored that means I don't have to
02:23 - check any of its any of the points that
02:25 - are in it or any of its nested
02:27 - subsections so that's the first thing I
02:30 - need to say is say if this dot boundary
02:32 - dot intersects range if it does not
02:39 - intersect the range let's just get out
02:41 - of here I'm done I don't need to look I
02:43 - don't need to look look away don't need
02:46 - to look any further I'm done I'm gonna
02:48 - have to change this in a little bit but
02:49 - but this should work now now here's the
02:52 - thing if I'm saying if this dot boundary
02:54 - intersects well it kind of got a bit of
02:56 - a problem here which is that the
02:58 - boundary is a rectangle object and I
03:01 - don't see an intersex function but guess
03:03 - what I can write one so what idea I'm
03:06 - gonna write an intersex function
03:08 - intersects another I'm going to say
03:12 - range why not range so there was there
03:15 - was another coding challenge where I had
03:18 - to do this I can't remember what it was
03:20 - is one of my early coding challenges or
03:22 - I had to test do two rectangles overlap
03:25 - or do they not overlap and I think
03:28 - there's a nice way of doing this with an
03:30 - or basically saying hey if any of these
03:32 - or conditions are true they can't
03:34 - possibly be overlapping for example if
03:36 - the X of this one is greater than well
03:40 - the X this edge if this edge is greater
03:43 - than that edge or if this edge is less
03:47 - than that edge or if this edge is
03:48 - greater than that edge or if this edge
03:50 - is less than that edge if this is
03:52 - anywhere outside then they are not they
03:56 - are not not not not intersecting this is
04:01 - going to be so painful to write oh
04:04 - there's got to be a really easy way to
04:06 - write this if okay so let's think about
04:11 - this if range dot X plus minus range dot
04:18 - W is greater than right so if this is
04:23 - the rectangle range and
04:24 - it's left edge is greater than this this
04:28 - right edge actually this isn't gonna be
04:29 - so bad it's greater than this dot X plus
04:34 - this dot W or right range dot X plus
04:40 - this dot W is less than this X minus
04:45 - this dot W or so let me I think I can do
04:51 - this now with the Y's range dot y h y h
05:01 - h y h this is really you're watching a
05:06 - person here type this stuff H alright so
05:09 - and I want to return this not if I want
05:11 - to return so if they intersect if and if
05:17 - this is true they don't intersect so I
05:19 - want to return not this whole expression
05:23 - [Music]
05:33 - all right nobody can seem to tell me
05:35 - that I'm wrong I stared at it enough
05:37 - time I'm sure I'm gonna move on also it
05:39 - was pointed out it was the Frogger
05:41 - coding challenge where I struggled
05:43 - through this for a very very long time
05:45 - so I could go back and check my Frogger
05:47 - code and I probably could also use
05:49 - somebody else's library that has like
05:51 - geometry math in it but let's move on
05:53 - okay so now if this this should work now
06:00 - what if they do intersect if they do
06:02 - intersect ah here's what I need to do
06:04 - actually so I need to recursively go
06:06 - through everything and I'm gonna say I
06:09 - want them have a I'm gonna create a
06:12 - variable called found so I want to find
06:15 - all the points so if they don't
06:19 - intersect return found it'll be an empty
06:22 - array so this will be an empty array
06:27 - otherwise now now if they do intersect
06:31 - let me look through all the points that
06:36 - are part of this quad tree and say if
06:40 - range dot contains P found dot push P so
06:47 - now and now I know that these the
06:49 - boundary in the range that this quad
06:51 - tree intersects that range
06:52 - let me check all its width points and
06:54 - see if they're within the range then I
06:56 - can add them perfect I've added them and
07:00 - now what I need to do though is say if
07:04 - this dot divided then okay well
07:11 - basically what I want to do is I've got
07:13 - a return so then I should return those
07:14 - points right but before I return those
07:17 - points what do I need to do well if it
07:20 - has some children quadtrees that I used
07:24 - to check if any of those points are in
07:26 - there so what I need to do is say if
07:32 - it's divided so if it's not divided I
07:34 - can ignore this I can say return this
07:42 - dot north-west
07:45 - query query range okay I know it's gonna
07:53 - be easier here right I could pass the
07:55 - array and keep adding to that array
07:56 - reference which is what I think what you
07:58 - would normally do with recursion but for
08:00 - some reason the way that I'm thinking
08:01 - about this right now is I can say found
08:04 - dot concat this dot Northwest query
08:09 - range and then I can say north east
08:14 - south west south east what this is going
08:19 - to do and then I can return found here
08:24 - so what I can do is right I'm going to
08:29 - start with an empty array if it does
08:32 - intersect just return an empty array
08:34 - because and all this concatenate cat
08:38 - concatenate you're just joined two
08:39 - arrays together so what I need to do is
08:43 - if I if I if I if there's nothing here
08:46 - move along return nothing otherwise if
08:49 - there is something here check my points
08:51 - to see which ones I should add then if
08:54 - I've divided I should also add any of
08:57 - the points that are from my children and
09:00 - then when I'm all done finally I'm gonna
09:02 - return that array I think this is good
09:05 - I'm sure something's wrong here and get
09:10 - rid of all these extra line breaks so
09:11 - they don't need any more and now here I
09:15 - should have okay so I have this
09:17 - rectangle but this is actually I need to
09:20 - say a range is and I really should make
09:24 - this let range be a new rectangle that
09:29 - is 250 250 107 75 and I'm gonna
09:37 - multiplied those by whatever that's fine
09:41 - I'll make it bigger and then I'm going
09:43 - to draw the rectangle at range X range Y
09:46 - range W times to range H times 2 so let
09:52 - me just take a look at this w is not
09:55 - defined whoops
09:56 - times 2
09:58 - all right so I just make it a little bit
09:59 - bigger so now what I want to do is I
10:02 - want to say oh boy
10:04 - let points equal cue tree dot query
10:13 - range and just to see let me consult out
10:17 - log that array without even trying to
10:20 - draw stuff let me just see if this
10:21 - function even returns anything it gave
10:24 - me a three points okay so this can't
10:26 - possibly be right
10:27 - I've done something wrong which is that
10:32 - I only got three points
10:34 - so I bunch of people in the in the chat
10:36 - I can't credit everybody tell me the
10:38 - concat method is used to merge two or
10:41 - more arrays the method does not change
10:43 - the existing array but instead returns a
10:45 - new array this is from Pierre in the
10:47 - chat so what the issue there is and
10:51 - maybe now I'm kind of don't want to use
10:52 - this concat because I have to write this
10:57 - right I have to say fat
10:59 - I think passing the array is gonna be
11:01 - better so apologies I'm gonna say return
11:06 - I kind of like passing the array better
11:10 - so query range array if if no array then
11:21 - I'll call this found then found is a
11:25 - blank array so I create the array if it
11:30 - doesn't exist then I could just return
11:33 - the empty array then I can push the
11:35 - stuff here and then now I can get rid of
11:39 - this crazy this concatenated idea was
11:41 - very silly I don't know who thought of
11:43 - this and we've got extra parentheses
11:46 - like mad here now I can say with the
11:50 - array and I can just pass the array so
11:53 - I'm just gonna let you know just gonna
11:54 - pass the array around and I actually
11:56 - don't even need to oh I do want to
11:57 - return found when I get because now I
12:03 - want to return it but I only want to
12:07 - return it at the end
12:10 - the very first so I think let me do it
12:13 - this way there's got to be a better way
12:17 - for this but let me just to get this
12:19 - work let me pass let me pass in an array
12:28 - I'm gonna think about how to return it
12:30 - better in a second but let me create an
12:33 - empty array and then pass it in and then
12:36 - be a little bit look at that array so
12:39 - okay this just gets me out of here
12:45 - etc etc etc okay okay
12:48 - here we go all right 160 that makes a
12:52 - little bit more sense
12:53 - there could be 160 points in there so
12:56 - let me now in the sketch
12:59 - let me say 4 let P of points and then
13:09 - stroke 0 255 0 I guess I already have
13:15 - that let me just let me draw the points
13:19 - and let me say point P X P dot Y so
13:25 - let's look and see if that worked
13:27 - hey this is looking pretty good day per
13:30 - day hey good all right let's make this
13:33 - rectangular range random so let's pick a
13:38 - let's pick a random point a random
13:42 - height and let's give it a let's give it
13:46 - some random width within a hundred
13:48 - actually let's just always make it a
13:50 - hundred 100 and let's see what happens
13:55 - all right so we're a will wait why are
14:01 - some of the yr there's some points here
14:02 - not showing up something is wrong guess
14:07 - what
14:10 - remember this function that I spent like
14:12 - an hour staring at
14:14 - [Music]
14:18 - apparently I was looking at the chat the
14:22 - whole time there's a significant error
14:24 - in here that I have mixed up oh yeah
14:27 - look at that range dot X plus this dot W
14:31 - range dot W range H range range range
14:37 - range range range range range this this
14:40 - this this this this this this I got to
14:42 - stare at that for a little more time
14:48 - alright so I think that's corrected it
14:50 - we'll find out
14:52 - I don't can't find any points oh look at
14:58 - that
14:59 - look at that beautiful I found all the
15:01 - points within that region now just out
15:06 - of curiosity I just want to check
15:09 - something for myself if there are 300
15:13 - points so if I create of just I'm just
15:16 - going to create a global variable called
15:18 - count right and if I were to check every
15:23 - single point I would have if I would
15:28 - look through every single point to see
15:29 - if it's within that range count plus
15:31 - plus count would equal 300 but I am
15:34 - going to here just as a little sort of
15:35 - like hacked check is I am going to
15:39 - increase the count here and I shouldn't
15:42 - have to look at all 300 points I should
15:44 - only have I should be looking at a sub
15:47 - set of points so let me console.log that
15:50 - count 31
15:53 - 27:48 219 now of course I've got to look
15:59 - at a lot with this big range because you
16:03 - know I kind of got picked randomly
16:05 - through the center but so but I never
16:07 - have to look through all the points and
16:09 - so this algorithm like you know if I
16:12 - make the range the whole canvas well
16:15 - then I have to look through all the
16:16 - points the point is if my range is
16:19 - something much smaller like even if it's
16:21 - like 25 by 25 right I only have to do
16:27 - very very few checks
16:28 - even if it's randomly in the center and
16:30 - let's now let's get rid of this count
16:32 - idea cuz I don't need that count idea
16:36 - anymore let's go this is gonna be fun
16:38 - oh so much fun let's let's go put this
16:45 - in draw and let's make the rectangle
16:51 - Mouse X mouths Y count is not defined
16:58 - we're at draw sketch touch yes line 26
17:02 - Oh quad tree line 87 sorry quad tree
17:10 - line 87 save so now you can see as I
17:16 - move the rectangle it is highlighting
17:18 - only the points that it finds I kind of
17:20 - want the count back because I kind of
17:23 - want to like know how many checks but
17:25 - this is great all right boo boo oh I
17:32 - think I've successfully now implemented
17:35 - the full quad tree because I have both
17:37 - an insert function and a query function
17:41 - let's quickly go to that Wikipedia page
17:42 - and if we look at the pseudocode right
17:46 - we can sort of match this up with what
17:48 - we did there's this idea of a point in X
17:51 - Y and AABB which is my rectangle and
17:54 - axis aligned boundary box
17:56 - there's the quadtree class and as the
17:59 - capacity has a boundary north west north
18:01 - all of those things will have an insert
18:04 - subdivide and query range right query
18:06 - insert yeah so I think that I have
18:10 - basically done everything and probably I
18:13 - did read this Wikipedia page the other
18:15 - day and that's why I think I started
18:16 - using concat because it's using append
18:19 - so but I think I like my so here's the
18:22 - thing ah I really should just this video
18:24 - should be over cuz it's taking way too
18:26 - long
18:26 - but I do kind of want I really sort of
18:29 - want this oh I know what I can do I want
18:35 - to return I want to return the points
18:38 - array let me fix it so it returns the
18:40 - points array
18:41 - let points equals query that range I
18:44 - really just want to get an array back so
18:50 - now if I go in here so if found does not
18:55 - exist found should equal a empty array
19:00 - and then can I just say return found
19:03 - down here is that gonna work that works
19:08 - I don't know why I thought it was so
19:09 - complicated the reason why I kind of was
19:13 - afraid to do that is that these are also
19:16 - returning their reference to the array
19:18 - but doesn't matter because I'm not doing
19:20 - anything with it so that's fine so we
19:22 - don't only really own the only return
19:23 - that really counts is the very very very
19:26 - last one which is the original call to
19:29 - the query function so so now okay that
19:32 - was that was much easier than I thought
19:34 - so now at least I have the function
19:35 - return that array okay
19:37 - I'm gonna be done there's one more video
19:40 - I need to make and I think though I mean
19:45 - there's many more videos I need to make
19:46 - but part three of it's going to come
19:48 - later hopefully by the time you watch
19:50 - this it might actually be linked to but
19:52 - what it's what that video is going to do
19:54 - is I want to apply the quadtree
19:56 - algorithm to a collision detection
19:58 - problem and in particular a really good
20:01 - one for me to apply it to it's not
20:02 - really a collision detection is my
20:03 - flocking simulation I also would like to
20:06 - port this to processing and make a Java
20:08 - version of this so those are all the
20:10 - things that I want to do I'm gonna so
20:12 - but if you're watching this video right
20:14 - now and the next one isn't available as
20:15 - a challenge to yourself see if you can
20:17 - take this and apply it to a collision
20:19 - detection problem
20:21 - and then I'll be back and doing that
20:24 - myself someday and and and that's what's
20:27 - gonna happen okay thank you everybody
20:29 - [Music]
20:36 - you

Cleaned transcript:

oh hello welcome to part 2 of my coding challenge quadtrees so what I want to do in this part is I want to look at how I can retrieve a list of points from a given area without having and this is going to I don't have to like I could tell like this boundary over here give me all the points in that area well I could just look through every points and see if that they're contained within that boundary but the quadtree is going to allow me to do that more efficiently by kind of looking at the sections that are that are near this particular range that I'm going to create boy am I not explaining this well let me explain this visually so what I'm going to do let me just draw a rectangle let me say something like stroke 0 255 0 let me draw a rectangle and I think because I'm gonna say rect mode Center and I'm gonna draw a rectangle that's how big is the canvas 400 400 so I'm gonna go over to like 300 down to like 300 and then say 100 comma 50 so and that this is way too exact like so let's let's say 107 and like 92 okay so and I'm always really bothering me that there okay so basically what I want is I just want the points and there's not a lot of points there so let me move this over wasting so much time 1 it's perfect this is what I want what I want now is to say like just give me all the points that are in this area but I want to ask the quadtree for it because the quadtree is gonna have a capability of giving me those points more efficiently it's not gonna have to check every single point so let's see if I can do that so in order to do this what I need is in the quadtree I need a new function and I'm gonna call it query and let me put it above show show is just sort of a drawing stuff which is really for just for debugging at this point I'm gonna write a function called query and it's going to take as an argument or range and what that range is it's essentially a boundary I don't want to use the word boundary cuz it's gonna get confusing cuz the quadtree object itself has a this.top boundary so the first thing i need to do is i just need to I I need to does this range and this quadtree do they overlap if they do then there might be some points that I want to give you if not it could be ignored and if it can be ignored that means I don't have to check any of its any of the points that are in it or any of its nested subsections so that's the first thing I need to say is say if this dot boundary dot intersects range if it does not intersect the range let's just get out of here I'm done I don't need to look I don't need to look look away don't need to look any further I'm done I'm gonna have to change this in a little bit but but this should work now now here's the thing if I'm saying if this dot boundary intersects well it kind of got a bit of a problem here which is that the boundary is a rectangle object and I don't see an intersex function but guess what I can write one so what idea I'm gonna write an intersex function intersects another I'm going to say range why not range so there was there was another coding challenge where I had to do this I can't remember what it was is one of my early coding challenges or I had to test do two rectangles overlap or do they not overlap and I think there's a nice way of doing this with an or basically saying hey if any of these or conditions are true they can't possibly be overlapping for example if the X of this one is greater than well the X this edge if this edge is greater than that edge or if this edge is less than that edge or if this edge is greater than that edge or if this edge is less than that edge if this is anywhere outside then they are not they are not not not not intersecting this is going to be so painful to write oh there's got to be a really easy way to write this if okay so let's think about this if range dot X plus minus range dot W is greater than right so if this is the rectangle range and it's left edge is greater than this this right edge actually this isn't gonna be so bad it's greater than this dot X plus this dot W or right range dot X plus this dot W is less than this X minus this dot W or so let me I think I can do this now with the Y's range dot y h y h h y h this is really you're watching a person here type this stuff H alright so and I want to return this not if I want to return so if they intersect if and if this is true they don't intersect so I want to return not this whole expression all right nobody can seem to tell me that I'm wrong I stared at it enough time I'm sure I'm gonna move on also it was pointed out it was the Frogger coding challenge where I struggled through this for a very very long time so I could go back and check my Frogger code and I probably could also use somebody else's library that has like geometry math in it but let's move on okay so now if this this should work now what if they do intersect if they do intersect ah here's what I need to do actually so I need to recursively go through everything and I'm gonna say I want them have a I'm gonna create a variable called found so I want to find all the points so if they don't intersect return found it'll be an empty array so this will be an empty array otherwise now now if they do intersect let me look through all the points that are part of this quad tree and say if range dot contains P found dot push P so now and now I know that these the boundary in the range that this quad tree intersects that range let me check all its width points and see if they're within the range then I can add them perfect I've added them and now what I need to do though is say if this dot divided then okay well basically what I want to do is I've got a return so then I should return those points right but before I return those points what do I need to do well if it has some children quadtrees that I used to check if any of those points are in there so what I need to do is say if it's divided so if it's not divided I can ignore this I can say return this dot northwest query query range okay I know it's gonna be easier here right I could pass the array and keep adding to that array reference which is what I think what you would normally do with recursion but for some reason the way that I'm thinking about this right now is I can say found dot concat this dot Northwest query range and then I can say north east south west south east what this is going to do and then I can return found here so what I can do is right I'm going to start with an empty array if it does intersect just return an empty array because and all this concatenate cat concatenate you're just joined two arrays together so what I need to do is if I if I if I if there's nothing here move along return nothing otherwise if there is something here check my points to see which ones I should add then if I've divided I should also add any of the points that are from my children and then when I'm all done finally I'm gonna return that array I think this is good I'm sure something's wrong here and get rid of all these extra line breaks so they don't need any more and now here I should have okay so I have this rectangle but this is actually I need to say a range is and I really should make this let range be a new rectangle that is 250 250 107 75 and I'm gonna multiplied those by whatever that's fine I'll make it bigger and then I'm going to draw the rectangle at range X range Y range W times to range H times 2 so let me just take a look at this w is not defined whoops times 2 all right so I just make it a little bit bigger so now what I want to do is I want to say oh boy let points equal cue tree dot query range and just to see let me consult out log that array without even trying to draw stuff let me just see if this function even returns anything it gave me a three points okay so this can't possibly be right I've done something wrong which is that I only got three points so I bunch of people in the in the chat I can't credit everybody tell me the concat method is used to merge two or more arrays the method does not change the existing array but instead returns a new array this is from Pierre in the chat so what the issue there is and maybe now I'm kind of don't want to use this concat because I have to write this right I have to say fat I think passing the array is gonna be better so apologies I'm gonna say return I kind of like passing the array better so query range array if if no array then I'll call this found then found is a blank array so I create the array if it doesn't exist then I could just return the empty array then I can push the stuff here and then now I can get rid of this crazy this concatenated idea was very silly I don't know who thought of this and we've got extra parentheses like mad here now I can say with the array and I can just pass the array so I'm just gonna let you know just gonna pass the array around and I actually don't even need to oh I do want to return found when I get because now I want to return it but I only want to return it at the end the very first so I think let me do it this way there's got to be a better way for this but let me just to get this work let me pass let me pass in an array I'm gonna think about how to return it better in a second but let me create an empty array and then pass it in and then be a little bit look at that array so okay this just gets me out of here etc etc etc okay okay here we go all right 160 that makes a little bit more sense there could be 160 points in there so let me now in the sketch let me say 4 let P of points and then stroke 0 255 0 I guess I already have that let me just let me draw the points and let me say point P X P dot Y so let's look and see if that worked hey this is looking pretty good day per day hey good all right let's make this rectangular range random so let's pick a let's pick a random point a random height and let's give it a let's give it some random width within a hundred actually let's just always make it a hundred 100 and let's see what happens all right so we're a will wait why are some of the yr there's some points here not showing up something is wrong guess what remember this function that I spent like an hour staring at apparently I was looking at the chat the whole time there's a significant error in here that I have mixed up oh yeah look at that range dot X plus this dot W range dot W range H range range range range range range range range this this this this this this this this I got to stare at that for a little more time alright so I think that's corrected it we'll find out I don't can't find any points oh look at that look at that beautiful I found all the points within that region now just out of curiosity I just want to check something for myself if there are 300 points so if I create of just I'm just going to create a global variable called count right and if I were to check every single point I would have if I would look through every single point to see if it's within that range count plus plus count would equal 300 but I am going to here just as a little sort of like hacked check is I am going to increase the count here and I shouldn't have to look at all 300 points I should only have I should be looking at a sub set of points so let me console.log that count 31 2748 219 now of course I've got to look at a lot with this big range because you know I kind of got picked randomly through the center but so but I never have to look through all the points and so this algorithm like you know if I make the range the whole canvas well then I have to look through all the points the point is if my range is something much smaller like even if it's like 25 by 25 right I only have to do very very few checks even if it's randomly in the center and let's now let's get rid of this count idea cuz I don't need that count idea anymore let's go this is gonna be fun oh so much fun let's let's go put this in draw and let's make the rectangle Mouse X mouths Y count is not defined we're at draw sketch touch yes line 26 Oh quad tree line 87 sorry quad tree line 87 save so now you can see as I move the rectangle it is highlighting only the points that it finds I kind of want the count back because I kind of want to like know how many checks but this is great all right boo boo oh I think I've successfully now implemented the full quad tree because I have both an insert function and a query function let's quickly go to that Wikipedia page and if we look at the pseudocode right we can sort of match this up with what we did there's this idea of a point in X Y and AABB which is my rectangle and axis aligned boundary box there's the quadtree class and as the capacity has a boundary north west north all of those things will have an insert subdivide and query range right query insert yeah so I think that I have basically done everything and probably I did read this Wikipedia page the other day and that's why I think I started using concat because it's using append so but I think I like my so here's the thing ah I really should just this video should be over cuz it's taking way too long but I do kind of want I really sort of want this oh I know what I can do I want to return I want to return the points array let me fix it so it returns the points array let points equals query that range I really just want to get an array back so now if I go in here so if found does not exist found should equal a empty array and then can I just say return found down here is that gonna work that works I don't know why I thought it was so complicated the reason why I kind of was afraid to do that is that these are also returning their reference to the array but doesn't matter because I'm not doing anything with it so that's fine so we don't only really own the only return that really counts is the very very very last one which is the original call to the query function so so now okay that was that was much easier than I thought so now at least I have the function return that array okay I'm gonna be done there's one more video I need to make and I think though I mean there's many more videos I need to make but part three of it's going to come later hopefully by the time you watch this it might actually be linked to but what it's what that video is going to do is I want to apply the quadtree algorithm to a collision detection problem and in particular a really good one for me to apply it to it's not really a collision detection is my flocking simulation I also would like to port this to processing and make a Java version of this so those are all the things that I want to do I'm gonna so but if you're watching this video right now and the next one isn't available as a challenge to yourself see if you can take this and apply it to a collision detection problem and then I'll be back and doing that myself someday and and and that's what's gonna happen okay thank you everybody you
