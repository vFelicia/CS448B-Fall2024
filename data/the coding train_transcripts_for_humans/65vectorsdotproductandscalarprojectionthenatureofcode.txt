With timestamps:

00:02 - this video is going to be about the dot
00:04 - product so here we are sitting in the
00:05 - middle of a section of videos about
00:07 - steering behaviors Craig Reynolds
00:08 - steering behaviors implemented in
00:10 - processing using the P vector class
00:12 - we're about to look at the path
00:15 - following example but before we can get
00:17 - to the path long example we really need
00:19 - to know about the dot product and
00:21 - something called scalar projection so
00:23 - this video I hope it's my hope that it
00:25 - will also stand on its own and is really
00:27 - just a discussion of the dot product
00:29 - with vectors in particular using P
00:31 - vector in processing so okay so first of
00:34 - all why might you even want to know the
00:36 - dot product so let's take this scenario
00:39 - so we have a vehicle and it's driving or
00:43 - flying or moving in that direction and
00:45 - we want to know what can it see what
00:50 - kinds of things can it see in front of
00:52 - itself for example there are other
00:53 - vehicles in this world and it can't see
00:59 - these but it can see those how might we
01:02 - determine whether it can see one or the
01:05 - other well let's look at this what if we
01:06 - make so this is its velocity what if we
01:09 - make a vector the points from its
01:10 - location to this other location well
01:12 - what is this angle what is that theta
01:15 - what is this theta what is this theta it
01:19 - turns out we could say something like if
01:21 - the angle if it's sort of angular
01:24 - relationship a relative to the axis of
01:26 - its velocity to a given vehicle is less
01:28 - than pi divided by four right let's say
01:32 - that's 45 degrees then it can see it so
01:35 - it's often in lots of these scenarios
01:37 - that we can diagram for ourselves we
01:39 - often want to know what is the angle
01:41 - between two vectors
01:42 - well the dot product is a function that
01:45 - will give us the angle between two
01:46 - vectors there's also a function and
01:47 - processing called angle between but it
01:49 - uses the dot product and we're also
01:51 - going to see other scenarios where we
01:53 - need the dot product more directly so I
01:55 - didn't start timeing this but it's maybe
01:56 - a minute or two so let's take a look at
01:59 - the formula for the dot product so first
02:03 - of all the dot product is like is it I'd
02:06 - like to say it's a a multiplication like
02:08 - activity for vectors like vectors we
02:11 - they want to get that we like to add
02:12 - vectors together
02:13 - we've got x-components get added and the
02:16 - Y components get added and then you're
02:17 - like I want to multiply vectors and that
02:19 - doesn't really make any sense so when we
02:21 - talked about vector multiplication we
02:24 - said hey here's a vector let's multiply
02:26 - it by two we always multiply vectors by
02:29 - a scalar quantity a single number and
02:31 - that just affected the length of the
02:33 - vector but now we're actually going to
02:34 - look at something that is really like
02:36 - multiplying two vectors together and
02:37 - it's the dot product so let's say we
02:40 - have a vector a and we have a vector B
02:43 - now we know a is really a sub X comma a
02:47 - sub Y and B is B sub X B sub y so we can
02:52 - say that a dot the dot product B equals
02:57 - a sub X sorry times B sub X plus a sub y
03:04 - times V sub y boy I hope I got that
03:07 - right if I got that wrong I'm redoing
03:09 - this video later this is the formula for
03:12 - the dot product now you might be asking
03:13 - yourself what are we talking about the
03:16 - angle between two vectors well in fact
03:19 - we were there's another way we can write
03:21 - the formula for the dot product it is
03:23 - the magnitude of vector a time's the
03:26 - magnitude of sorry a vector B times
03:31 - cosine of the angle star star green
03:37 - boughs flowers explosions happiness the
03:41 - angle between those two vectors right so
03:44 - now you might be asking yourself where
03:46 - do these formulas come from and you know
03:48 - this video is not going to cover it
03:50 - we're not gonna derive the formulas and
03:52 - prove that they're equal to each other
03:54 - and all that stuff that's way too hard
03:55 - for me so but I will link to some places
03:58 - below that you could go and explore that
03:59 - but if we start here and say how we know
04:02 - that the dot product can be expressed by
04:03 - this formula or this formula let's take
04:06 - a scenario where we have the vectors you
04:08 - know 3 comma 4 and 1 comma negative 2
04:12 - well let's let let's think for a second
04:15 - we know the components of the vector the
04:18 - magnitudes of the vector we can get very
04:20 - easily from the magnitude function the
04:23 - square root of the X component squared
04:25 - plus the Y component squared
04:26 - the thing we don't know is theta is the
04:29 - angle between but we can say ax sorry
04:34 - times BX plus a Y times B y equals the
04:40 - magnitude of a time's the magnitude of B
04:42 - times cosine of that angle and if we do
04:45 - a lot of math here we could say hey
04:46 - theta equals inverse cosine of ax times
04:52 - BX plus a Y times B Y divided by the
04:59 - magnitude of a time's the magnitude of B
05:02 - right so if we set those formulas two
05:05 - together and we solve for theta and
05:06 - again I just hope I got that right we
05:08 - can solve for theta we can now find the
05:11 - magnitude the angle between two vectors
05:15 - hooray so this isn't valuable
05:18 - information this is the formula but you
05:20 - know we you know this is great and it's
05:22 - nice to be able to draw things on the
05:23 - board and we can pretend that we look
05:25 - like we know about math and vectors by
05:27 - writing all these formulas out but
05:28 - practically speaking how we're really
05:30 - using this in processing well let's take
05:33 - a look at let's take a look at them for
05:35 - a moment at what code for this might
05:36 - actually look like let's say we have a P
05:41 - vector a which is some K vector and a P
05:47 - vector B which is some P vector we can
05:51 - get the dot product by saying a dot the
05:56 - word dot write the function name is dot
05:58 - but we're always putting dots in our
05:59 - code so don't be confused a dot dot B we
06:05 - also know then that we could say theta
06:08 - that angle between is equal to a Coast's
06:12 - so inverse cosine in processing is a
06:15 - coast of the dot product divided by a
06:21 - dot mag times B dot mag so this is just
06:26 - one use where we can use this dot
06:29 - product we can use the dot product to
06:31 - get the angle between two vectors and
06:32 - let's take a look at this in our
06:34 - processing sketch so there's a couple
06:37 - demonstrations I'm gonna put this one oh
06:38 - I'm not oh haha
06:40 - a pause okay
06:44 - and we're back there are two I'm gonna
06:46 - put this one off to the side we're gonna
06:48 - look at that later and we can see here
06:50 - look at this we now I always do this
06:53 - it's so awkward today I'm gonna have a
06:55 - better system in this we can see that I
06:57 - now can get the angle between two
06:59 - vectors that could be very useful and we
07:01 - can see how is that happening I can say
07:03 - hey I have vectors a and B give me the
07:05 - dot product give me the inverse cosine
07:07 - of the dot product divided by the
07:09 - magnitudes multiplied together the truth
07:11 - of the matter is I'm just going through
07:12 - this to demonstrate what the dot product
07:15 - is how do you call the dot product
07:17 - function in just a scenario where you
07:18 - might use it but this is a common enough
07:20 - scenario that if you were actually doing
07:22 - this in your code I wouldn't manually
07:24 - calculate the dot product then used that
07:26 - formula that formula is encapsulated
07:28 - into this function called angle between
07:30 - so there is a function in processing
07:32 - called angle between which allows you to
07:35 - find the angle between two vectors and
07:37 - again there's a lot and you just think
07:39 - to yourself we're looking at what is the
07:41 - relationship between two vectors how
07:43 - similar is their direction
07:44 - knowing the angle between them would
07:46 - tell us that okay wow this this is like
07:48 - much longer than I imagined but there's
07:51 - another thing that we need that we want
07:53 - to use the dot product with is it's it's
07:56 - really exciting I think I'm you know I
07:59 - cautiously I'm kind of aware of how not
08:02 - exciting this is but I'm enjoying this
08:03 - and if you're not you can just go and
08:05 - watch kittens
08:06 - cuz there's lots I wish I had a kitten
08:09 - we could pet the kitten anyway okay so
08:11 - let's look at a different scenario what
08:14 - we're gonna look at now is something
08:15 - called scalar projection and scalar
08:18 - projection is something we're going to
08:20 - need in the path following we're going
08:24 - to need it for sure in the path
08:25 - following example but we're gonna look
08:29 - at it just kind of abstractly on its own
08:30 - for a second so what is scalar
08:31 - projection let's say we have this vector
08:35 - and we're gonna call it B and let's say
08:38 - we have this vector and we're gonna call
08:40 - it a well imagine for a moment that
08:44 - there was like a lamp right up here like
08:47 - a little light shining a light and a
08:49 - shadow was cast from this vector onto
08:51 - this one well we would make this
08:54 - little dotted line right here that meets
08:55 - this line with a right angle and we now
08:58 - have this vector this vector this is the
09:01 - scalar projection right it's as if we
09:04 - projected this vector onto a flat
09:06 - surface onto this vector this is what we
09:09 - get now interestingly enough this
09:11 - relates to a scenario you're going to
09:13 - find all over the place in particular in
09:15 - steering so let's say we have this is a
09:17 - path of this is a wall or this is
09:19 - something in a physics world and we have
09:21 - the vehicle that's over here we have a
09:23 - vehicle that's over here what if we
09:25 - wanted to say how far are these vehicles
09:27 - from that wall well what we need is the
09:30 - distance between a point and a line what
09:32 - is the distance between a point and the
09:34 - line well here's a point here's a line
09:36 - how do we define that distance I could
09:38 - say like oh the length of that dotted
09:41 - line does it meets the line over here or
09:42 - I could say I the length of this dotted
09:44 - line or whatever I could make a lot of
09:46 - stuff up that's not correct
09:47 - I'm just making stuff up the way we
09:49 - define the distance between a point and
09:51 - a line is we take that point and we find
09:55 - the line that is perpendicular the
09:57 - intersection that's perpendicular to
09:59 - this line the normal this vector is the
10:02 - normal it points out perpendicularly
10:04 - towards that point this is the shortest
10:06 - distance between this point at any other
10:08 - point along this line this spot here
10:10 - well look at these two graphs what if I
10:13 - made a vector that goes from here to
10:14 - there what this is we find that point by
10:18 - the scalar projection of this vector
10:19 - onto that line so this is a scenario
10:22 - that's quite common and what I'm going
10:24 - to just show you over here let's
10:25 - illustrate this there's a processing
10:27 - example which I haven't yet included in
10:29 - the github repository but I suppose I
10:31 - will now that I'm making this video I
10:32 - made this just 10 minutes ago we can see
10:34 - here that no matter where I move my
10:37 - mouse we see the scalar projection and
10:39 - even if I go past that line segment onto
10:42 - that line where do i project down to
10:44 - make a perpendicular line to that line
10:46 - so how do we find that point for any
10:48 - arbitrary line we use the dot product so
10:53 - let's take a look at this over here a
10:55 - little bit more so let's ask ourselves
10:58 - the question let's say there's an angle
11:01 - over here say no that's the angle hey
11:03 - between those two vectors sound familiar
11:06 - let's say
11:07 - we have we want to know that length this
11:12 - length let's call that I need a good
11:15 - name for it I'm gonna call it SPE oh
11:17 - that's terrible
11:18 - okay come up with something yeah for
11:20 - scalar projection we want to know the
11:21 - length SP the length of this well let's
11:25 - ask ourselves a question what is cosine
11:28 - of this angle cosine of this angle is
11:33 - adjacent over hypotenuse
11:34 - SP divided by the magnitude of a SP
11:39 - therefore equals the magnitude of a
11:41 - times cosine of theta this is this is a
11:46 - little fashion stuff we did this many
11:48 - videos ago chapter three polar to
11:51 - Cartesian coordinates that's basically
11:52 - what we've done if we know that angle if
11:54 - we know the hypotenuse we can get this
11:56 - side by saying that scalar projecting
11:58 - the length of that scalar projection is
12:00 - the magnitude of a times cosine of that
12:01 - angle well this should look kind of
12:03 - interestingly familiar let's say we have
12:06 - a let's look at this formula a dot B
12:09 - equals the magnitude of a time's the
12:12 - magnitude of B times cosine of theta boy
12:18 - these formulas sure do look similar what
12:22 - is this formula this formula is the dot
12:26 - product if B is a unit vector right
12:28 - because if B is a unit vector it's
12:30 - length is 1 which means the magnitude of
12:33 - a times 1 times cosine of theta is just
12:34 - the magnitude of a time's the cosine of
12:36 - theta so this equals a dot B if B is a
12:44 - unit vector
12:46 - well is it hard to get a unit vector in
12:49 - processing no we just call the function
12:51 - normalized so what we're actually able
12:54 - to do if we have these two vectors to
12:56 - get the scalar projection is we can just
12:59 - normalize B take the dot product with e
13:02 - and scale with a and scale up it's so
13:05 - simple we normalize B we say B this is
13:09 - going to look a little weird normalize
13:11 - which now we have a unit vector pointing
13:14 - in that direction and then if we just
13:16 - say B dot multiply a
13:19 - a dot I hate that I'm using capital
13:21 - letters I could have violated every I'm
13:23 - writing actual code here a multiply the
13:26 - dot product of a dot B then we've got
13:29 - this vector now normalized at that
13:32 - length brilliant boy do I love this so
13:35 - okay so this was a lot of math and I
13:37 - have no idea how that's made any sense
13:39 - because you're not here and this is a
13:40 - video and that's just a camera and I I
13:42 - think I explained it to myself in a way
13:43 - that made sense I hope you got it but if
13:46 - not we're gonna you know I'll figure
13:48 - something out because I would really
13:49 - like this to make sense but I think what
13:52 - would be useful to you is probably to go
13:54 - and take a look at this example and kind
13:55 - of you know try to actually make this
13:57 - this is I kind of imagine this as an
13:59 - exercise and if we go look at the code
14:01 - for this you know what I'm saying is
14:03 - make two points right let's sorry which
14:07 - one am I looking at okay here make two
14:10 - points this is point a to any comma
14:12 - three hundred this is point B five
14:14 - hundred comma 250 this is where the
14:16 - mouse is can you find that point and the
14:19 - fact is you can and if I just skim down
14:21 - below here you can kind of take a look
14:22 - at this but what we're doing is we're
14:24 - making a vector we're normalize it we're
14:26 - scaling it by the dot product finding
14:29 - that spot and returning it so I'm kind
14:31 - of not explaining this as thoroughly but
14:33 - I'm gonna put this in the github
14:34 - repository but this is really your
14:35 - exercise if you want to try to
14:37 - understand the dot product try to create
14:39 - a scenario where you are constantly
14:42 - needing the distance between a point and
14:44 - a line so even just put even even just
14:46 - like draw a line in your sketch draw a
14:49 - bunch of vehicles flying around and are
14:52 - moving around and always have them
14:53 - always map they're scalar projection
14:56 - onto that line see if you can do that
14:57 - it's a very difficult exercise it
14:59 - involves math and I don't know I would
15:01 - enjoy it but I don't know how much fun
15:04 - this you know I'm just locked in a room
15:06 - with lights and processing so what else
15:08 - am I supposed to do
15:09 - okay no so in the next video we're
15:11 - actually gonna put this stuff to work
15:13 - and we're going to use it for path
15:17 - following

Cleaned transcript:

this video is going to be about the dot product so here we are sitting in the middle of a section of videos about steering behaviors Craig Reynolds steering behaviors implemented in processing using the P vector class we're about to look at the path following example but before we can get to the path long example we really need to know about the dot product and something called scalar projection so this video I hope it's my hope that it will also stand on its own and is really just a discussion of the dot product with vectors in particular using P vector in processing so okay so first of all why might you even want to know the dot product so let's take this scenario so we have a vehicle and it's driving or flying or moving in that direction and we want to know what can it see what kinds of things can it see in front of itself for example there are other vehicles in this world and it can't see these but it can see those how might we determine whether it can see one or the other well let's look at this what if we make so this is its velocity what if we make a vector the points from its location to this other location well what is this angle what is that theta what is this theta what is this theta it turns out we could say something like if the angle if it's sort of angular relationship a relative to the axis of its velocity to a given vehicle is less than pi divided by four right let's say that's 45 degrees then it can see it so it's often in lots of these scenarios that we can diagram for ourselves we often want to know what is the angle between two vectors well the dot product is a function that will give us the angle between two vectors there's also a function and processing called angle between but it uses the dot product and we're also going to see other scenarios where we need the dot product more directly so I didn't start timeing this but it's maybe a minute or two so let's take a look at the formula for the dot product so first of all the dot product is like is it I'd like to say it's a a multiplication like activity for vectors like vectors we they want to get that we like to add vectors together we've got xcomponents get added and the Y components get added and then you're like I want to multiply vectors and that doesn't really make any sense so when we talked about vector multiplication we said hey here's a vector let's multiply it by two we always multiply vectors by a scalar quantity a single number and that just affected the length of the vector but now we're actually going to look at something that is really like multiplying two vectors together and it's the dot product so let's say we have a vector a and we have a vector B now we know a is really a sub X comma a sub Y and B is B sub X B sub y so we can say that a dot the dot product B equals a sub X sorry times B sub X plus a sub y times V sub y boy I hope I got that right if I got that wrong I'm redoing this video later this is the formula for the dot product now you might be asking yourself what are we talking about the angle between two vectors well in fact we were there's another way we can write the formula for the dot product it is the magnitude of vector a time's the magnitude of sorry a vector B times cosine of the angle star star green boughs flowers explosions happiness the angle between those two vectors right so now you might be asking yourself where do these formulas come from and you know this video is not going to cover it we're not gonna derive the formulas and prove that they're equal to each other and all that stuff that's way too hard for me so but I will link to some places below that you could go and explore that but if we start here and say how we know that the dot product can be expressed by this formula or this formula let's take a scenario where we have the vectors you know 3 comma 4 and 1 comma negative 2 well let's let let's think for a second we know the components of the vector the magnitudes of the vector we can get very easily from the magnitude function the square root of the X component squared plus the Y component squared the thing we don't know is theta is the angle between but we can say ax sorry times BX plus a Y times B y equals the magnitude of a time's the magnitude of B times cosine of that angle and if we do a lot of math here we could say hey theta equals inverse cosine of ax times BX plus a Y times B Y divided by the magnitude of a time's the magnitude of B right so if we set those formulas two together and we solve for theta and again I just hope I got that right we can solve for theta we can now find the magnitude the angle between two vectors hooray so this isn't valuable information this is the formula but you know we you know this is great and it's nice to be able to draw things on the board and we can pretend that we look like we know about math and vectors by writing all these formulas out but practically speaking how we're really using this in processing well let's take a look at let's take a look at them for a moment at what code for this might actually look like let's say we have a P vector a which is some K vector and a P vector B which is some P vector we can get the dot product by saying a dot the word dot write the function name is dot but we're always putting dots in our code so don't be confused a dot dot B we also know then that we could say theta that angle between is equal to a Coast's so inverse cosine in processing is a coast of the dot product divided by a dot mag times B dot mag so this is just one use where we can use this dot product we can use the dot product to get the angle between two vectors and let's take a look at this in our processing sketch so there's a couple demonstrations I'm gonna put this one oh I'm not oh haha a pause okay and we're back there are two I'm gonna put this one off to the side we're gonna look at that later and we can see here look at this we now I always do this it's so awkward today I'm gonna have a better system in this we can see that I now can get the angle between two vectors that could be very useful and we can see how is that happening I can say hey I have vectors a and B give me the dot product give me the inverse cosine of the dot product divided by the magnitudes multiplied together the truth of the matter is I'm just going through this to demonstrate what the dot product is how do you call the dot product function in just a scenario where you might use it but this is a common enough scenario that if you were actually doing this in your code I wouldn't manually calculate the dot product then used that formula that formula is encapsulated into this function called angle between so there is a function in processing called angle between which allows you to find the angle between two vectors and again there's a lot and you just think to yourself we're looking at what is the relationship between two vectors how similar is their direction knowing the angle between them would tell us that okay wow this this is like much longer than I imagined but there's another thing that we need that we want to use the dot product with is it's it's really exciting I think I'm you know I cautiously I'm kind of aware of how not exciting this is but I'm enjoying this and if you're not you can just go and watch kittens cuz there's lots I wish I had a kitten we could pet the kitten anyway okay so let's look at a different scenario what we're gonna look at now is something called scalar projection and scalar projection is something we're going to need in the path following we're going to need it for sure in the path following example but we're gonna look at it just kind of abstractly on its own for a second so what is scalar projection let's say we have this vector and we're gonna call it B and let's say we have this vector and we're gonna call it a well imagine for a moment that there was like a lamp right up here like a little light shining a light and a shadow was cast from this vector onto this one well we would make this little dotted line right here that meets this line with a right angle and we now have this vector this vector this is the scalar projection right it's as if we projected this vector onto a flat surface onto this vector this is what we get now interestingly enough this relates to a scenario you're going to find all over the place in particular in steering so let's say we have this is a path of this is a wall or this is something in a physics world and we have the vehicle that's over here we have a vehicle that's over here what if we wanted to say how far are these vehicles from that wall well what we need is the distance between a point and a line what is the distance between a point and the line well here's a point here's a line how do we define that distance I could say like oh the length of that dotted line does it meets the line over here or I could say I the length of this dotted line or whatever I could make a lot of stuff up that's not correct I'm just making stuff up the way we define the distance between a point and a line is we take that point and we find the line that is perpendicular the intersection that's perpendicular to this line the normal this vector is the normal it points out perpendicularly towards that point this is the shortest distance between this point at any other point along this line this spot here well look at these two graphs what if I made a vector that goes from here to there what this is we find that point by the scalar projection of this vector onto that line so this is a scenario that's quite common and what I'm going to just show you over here let's illustrate this there's a processing example which I haven't yet included in the github repository but I suppose I will now that I'm making this video I made this just 10 minutes ago we can see here that no matter where I move my mouse we see the scalar projection and even if I go past that line segment onto that line where do i project down to make a perpendicular line to that line so how do we find that point for any arbitrary line we use the dot product so let's take a look at this over here a little bit more so let's ask ourselves the question let's say there's an angle over here say no that's the angle hey between those two vectors sound familiar let's say we have we want to know that length this length let's call that I need a good name for it I'm gonna call it SPE oh that's terrible okay come up with something yeah for scalar projection we want to know the length SP the length of this well let's ask ourselves a question what is cosine of this angle cosine of this angle is adjacent over hypotenuse SP divided by the magnitude of a SP therefore equals the magnitude of a times cosine of theta this is this is a little fashion stuff we did this many videos ago chapter three polar to Cartesian coordinates that's basically what we've done if we know that angle if we know the hypotenuse we can get this side by saying that scalar projecting the length of that scalar projection is the magnitude of a times cosine of that angle well this should look kind of interestingly familiar let's say we have a let's look at this formula a dot B equals the magnitude of a time's the magnitude of B times cosine of theta boy these formulas sure do look similar what is this formula this formula is the dot product if B is a unit vector right because if B is a unit vector it's length is 1 which means the magnitude of a times 1 times cosine of theta is just the magnitude of a time's the cosine of theta so this equals a dot B if B is a unit vector well is it hard to get a unit vector in processing no we just call the function normalized so what we're actually able to do if we have these two vectors to get the scalar projection is we can just normalize B take the dot product with e and scale with a and scale up it's so simple we normalize B we say B this is going to look a little weird normalize which now we have a unit vector pointing in that direction and then if we just say B dot multiply a a dot I hate that I'm using capital letters I could have violated every I'm writing actual code here a multiply the dot product of a dot B then we've got this vector now normalized at that length brilliant boy do I love this so okay so this was a lot of math and I have no idea how that's made any sense because you're not here and this is a video and that's just a camera and I I think I explained it to myself in a way that made sense I hope you got it but if not we're gonna you know I'll figure something out because I would really like this to make sense but I think what would be useful to you is probably to go and take a look at this example and kind of you know try to actually make this this is I kind of imagine this as an exercise and if we go look at the code for this you know what I'm saying is make two points right let's sorry which one am I looking at okay here make two points this is point a to any comma three hundred this is point B five hundred comma 250 this is where the mouse is can you find that point and the fact is you can and if I just skim down below here you can kind of take a look at this but what we're doing is we're making a vector we're normalize it we're scaling it by the dot product finding that spot and returning it so I'm kind of not explaining this as thoroughly but I'm gonna put this in the github repository but this is really your exercise if you want to try to understand the dot product try to create a scenario where you are constantly needing the distance between a point and a line so even just put even even just like draw a line in your sketch draw a bunch of vehicles flying around and are moving around and always have them always map they're scalar projection onto that line see if you can do that it's a very difficult exercise it involves math and I don't know I would enjoy it but I don't know how much fun this you know I'm just locked in a room with lights and processing so what else am I supposed to do okay no so in the next video we're actually gonna put this stuff to work and we're going to use it for path following
