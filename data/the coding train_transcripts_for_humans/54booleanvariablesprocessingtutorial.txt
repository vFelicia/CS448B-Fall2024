With timestamps:

00:02 - hi, so by now if you're here
00:04 - you've probably watched some videos 
about variables
00:07 - and some videos about conditional statements
00:10 - in this video we are going to somehow combine 
those two in an interesting new way
00:15 - and we're going to look at
00:16 - what it means to have a variable of type boolean,
right?
00:18 - what is a variable? 
a variable is a type like an integer,
00:22 - it is a name, like we might make up the name 'x',
00:26 - and we might give it an initial value
00:28 - so this is a totally reasonable variable:
00:30 - the integer x, that you can't exactly see
00:33 - cause [inintelligible]
00:35 - x equals 100
00:37 - let's, this is crazy, I'm totally 
out of sync here
00:41 - but let's make a variable now that has
00:43 - a type boolean, 'going' equals false
00:50 - this is the type of the variable
00:53 - it is not a number, it is not a string,
00:55 - it is not other types of variables,
00:58 - that you may or may not have learned about,
01:00 - it is a boolean. that means it only has one
01:02 - possible, two possible values: true or false
01:05 - you could use an integer in many ways
01:07 - and have the integer either be 0, for false,
or 1, for true
01:11 - but there are many other numbers
01:13 - that piece of data could be
01:15 - in this case the piece of data can only 
be false or true
01:18 - and if you remember, a conditional statement
01:22 - is an expression : if, some expression, evaluates
to true, execute some code
01:29 - guess what? a boolean variable evaluates
01:33 - to true or false, right?
01:35 - this boolean 'going' is false, so 'if going', 
meaning it's not, we're not going to
01:41 - execute this code because 'going' is false.
01:43 - but if I change its value to true
01:47 - then this code will become executed.
01:49 - so, let's look at a way that we might
use this in an example.
01:55 - here is a very simple example,
01:57 - it has a circle moving across the screen
02:00 - size(), background(), an ellipse drawing at x,
02:03 - x = x+2. what if I don't want this circle to start
02:09 - until I click the mouse?
02:10 - well, you might think I would do something like
02:12 - ah, if mousePressed and then run this
02:18 - and now, ah, the circle is not moving
02:20 - if I click the mouse it is moving
02:22 - if I let go of the mouse it stopped
02:23 - but what if I just want the event
02:25 - of clicking the mouse to trigger the circle
02:27 - to move from now on and forever 
going forward?
02:30 - so, to do that, what if I made up my own variable
02:33 - like 'going'?
02:35 - and we say: boolean going equals false
02:39 - and run this code
02:41 - it's not moving!
02:42 - now if I change the value of 'going' to true
02:45 - it's moving, because 'going' is true,
02:48 - so this code is being executed.
02:49 - so now all you need to do 
is change the value of 'going'
02:53 - from false to true the moment that I want
the circle start moving
02:56 - when I click the mouse.
02:57 - so in this case right here
02:59 - let's start with 'going' as false, and then when
in mousePressed, this is an event
03:05 - that's triggered as soon as the user clicks
the mouse
03:07 - let's set: going = true, and it bothers me that 
you can't see all of the code here
03:13 - so I'm just gonna make this fit here.
03:16 - now we can see: ok, going is false
03:18 - so when we run it, it's not moving
03:22 - it's not moving because going is false
03:24 - but now when I click the mouse
03:27 - going becomes true
and it moves.
03:29 - ah, I'm gonna stop it!
click the mouse!
03:30 - ah, no matter what, when I click the mouse
now going is true
03:33 - what if want going to become false?
03:37 - here's a neat little trick:
03:44 - we have time for this,
03:45 - you have time for this, 
I have somewhere I need to be
03:48 - but I'm making this video anyway
03:50 - so, in mousePressed we are saying: 
going equals true
03:59 - but what if I want going to only become true
04:02 - if it wasn't true, and if going was already true
I want going now to be false
04:08 - in other words I want to say:
04:09 - if going ... then going equals false, right?
04:17 - if going is true then set going equal to false,
04:21 - otherwise set going equal to true
04:26 - so: if going is true, set going to false
04:31 - otherwise, if going is false, 
set it equal to true.
04:33 - let's go implement that!
04:35 - ok, so I'm down here, and I'm going
to implement this.
04:40 - if going, and by the way, you could have written it
like this: if going == true
04:47 - but that's really long-winded,
going is just true or false,
04:51 - and a boolean expression evaluates to 
true or false
04:53 - so I can really just say: if (going == true)
I can just say if (going)
04:56 - by the way, if (going == false) 
is the same as saying: if (!going)
04:58 - that exclamation point is NOT, is not going,
my ... a little bigger here
05:09 - hopefully you can read this.
05:13 - ok, so remember: if it's going then 
going should be false
05:21 - otherwise let's say going is true
05:24 - let's run this now, right?
05:25 - so going is false right now, so when I click 
the mouse
05:28 - [inintelligible]
05:33 - now if I click the mouse again,
going is true, ah, going is set to false
05:36 - oh, what a magical thing just happened!
05:38 - ready? start ... stop ... start ... stop
05:40 - oh, it's gonna leave the screen.
05:42 - ok, but, maybe you thought this was all
05:45 - there's one more piece of this,
05:46 - this is fine and good and perfectly reasonable
05:50 - it is rather long-winded
05:54 - we as programmers, sometimes our whole life
is just trying to make things shorter,
05:58 - although that's not really any point of that,
06:00 - you might also just make things longer,
06:01 - it's good for things to be clear, readable, 
but anyway,
06:03 - if we want to make this shorter,
06:06 - let's examine this statement
06:08 - going = ! going ;
06:12 - this seems like it must be some sort of 
illegal code
06:15 - that you could not possibly write
06:17 - and it's self-referential and circular in some way
06:19 - it's not gonna work, but in fact
06:20 - this is exactly what we want in this particular case
06:24 - let's think about this again
06:27 - let's say x = y + z
06:30 - if we have a statement like this,
06:32 - remember we evaluate this side of the equation
06:35 - and store the result over here
06:37 - so we're going to do the same thing here
06:40 - we evaluate this side of the equation
06:41 - and store the result here
06:43 - it's kind of like how, when you say
06:45 - x = x + 1 , this seems a little strange
06:47 - it equals itself plus 1?
06:49 - but it's not big deal, 
if it were 5 then 5+1=6
06:52 - and now x equals to 6, 
this is an operation
06:54 - that increments x over and over again
06:56 - 5 becomes 6 becomes 7,
I'm talking way too fast in this video,
07:00 - but here, let's say going is true
07:06 - what is not true? 
not true is false
07:10 - let's say going is false,
what is not false? true!
07:15 - so going equals not itself
just takes the value of going,
07:21 - if it's true it turns it into false,
if it's false it turns it into true!
07:26 - that might give you a little bit of a headache
07:27 - but I think that as you start to think about it
07:29 - and write it down and think about it again
07:31 - it will start to make more and more sense
07:32 - so let's go back over here and let's
look at what he can write here now
07:37 - going equals not going, ok?
07:40 - going is currently false, 
so as soon as I click the mouse
07:43 - going is going to equal not false, 
which is true
07:46 - and when I click the mouse again,
going is going to equal not true
07:50 - which is false.
07:51 - so this is just a little bit of an inkling
07:53 - of what it means to use a variable
07:55 - with a type of boolean
07:57 - it's just a little bit of a helper, 
it's kind of like we can store
08:00 - the value of a switch in our program
08:03 - we can always know is that switch on
or is that switch off?
08:06 - and at any point we could act 
upon that
08:08 - if the switch is on, do this code,
if it's off do this other code.
08:11 - and we can also change the value of that switch
08:14 - by turning it on, setting it to true,
or turning it off, setting it to false.
08:17 - usually at the end of these videos
I give some sort of exercise
08:21 - but I can't think of one right now
08:22 - but what you might do is find some 
program that you wrote
08:25 - and see where you might store
a value of true or false
08:30 - and act upon that. that could be something
that you could do.
08:35 - I'll think of something better later!
08:37 - maybe put it in the notes
08:38 - ok, I'm gonna stop this video
08:40 - and you're going to enjoy the rest of your day
08:42 - I'm over here and I'm going now.
08:45 - my going is true!
08:46 - ok, bye

Cleaned transcript:

hi, so by now if you're here you've probably watched some videos about variables and some videos about conditional statements in this video we are going to somehow combine those two in an interesting new way and we're going to look at what it means to have a variable of type boolean, right? what is a variable? a variable is a type like an integer, it is a name, like we might make up the name 'x', and we might give it an initial value so this is a totally reasonable variable the integer x, that you can't exactly see cause [inintelligible] x equals 100 let's, this is crazy, I'm totally out of sync here but let's make a variable now that has a type boolean, 'going' equals false this is the type of the variable it is not a number, it is not a string, it is not other types of variables, that you may or may not have learned about, it is a boolean. that means it only has one possible, two possible values true or false you could use an integer in many ways and have the integer either be 0, for false, or 1, for true but there are many other numbers that piece of data could be in this case the piece of data can only be false or true and if you remember, a conditional statement is an expression if, some expression, evaluates to true, execute some code guess what? a boolean variable evaluates to true or false, right? this boolean 'going' is false, so 'if going', meaning it's not, we're not going to execute this code because 'going' is false. but if I change its value to true then this code will become executed. so, let's look at a way that we might use this in an example. here is a very simple example, it has a circle moving across the screen size(), background(), an ellipse drawing at x, x = x+2. what if I don't want this circle to start until I click the mouse? well, you might think I would do something like ah, if mousePressed and then run this and now, ah, the circle is not moving if I click the mouse it is moving if I let go of the mouse it stopped but what if I just want the event of clicking the mouse to trigger the circle to move from now on and forever going forward? so, to do that, what if I made up my own variable like 'going'? and we say boolean going equals false and run this code it's not moving! now if I change the value of 'going' to true it's moving, because 'going' is true, so this code is being executed. so now all you need to do is change the value of 'going' from false to true the moment that I want the circle start moving when I click the mouse. so in this case right here let's start with 'going' as false, and then when in mousePressed, this is an event that's triggered as soon as the user clicks the mouse let's set going = true, and it bothers me that you can't see all of the code here so I'm just gonna make this fit here. now we can see ok, going is false so when we run it, it's not moving it's not moving because going is false but now when I click the mouse going becomes true and it moves. ah, I'm gonna stop it! click the mouse! ah, no matter what, when I click the mouse now going is true what if want going to become false? here's a neat little trick we have time for this, you have time for this, I have somewhere I need to be but I'm making this video anyway so, in mousePressed we are saying going equals true but what if I want going to only become true if it wasn't true, and if going was already true I want going now to be false in other words I want to say if going ... then going equals false, right? if going is true then set going equal to false, otherwise set going equal to true so if going is true, set going to false otherwise, if going is false, set it equal to true. let's go implement that! ok, so I'm down here, and I'm going to implement this. if going, and by the way, you could have written it like this if going == true but that's really longwinded, going is just true or false, and a boolean expression evaluates to true or false so I can really just say if (going == true) I can just say if (going) by the way, if (going == false) is the same as saying if (!going) that exclamation point is NOT, is not going, my ... a little bigger here hopefully you can read this. ok, so remember if it's going then going should be false otherwise let's say going is true let's run this now, right? so going is false right now, so when I click the mouse [inintelligible] now if I click the mouse again, going is true, ah, going is set to false oh, what a magical thing just happened! ready? start ... stop ... start ... stop oh, it's gonna leave the screen. ok, but, maybe you thought this was all there's one more piece of this, this is fine and good and perfectly reasonable it is rather longwinded we as programmers, sometimes our whole life is just trying to make things shorter, although that's not really any point of that, you might also just make things longer, it's good for things to be clear, readable, but anyway, if we want to make this shorter, let's examine this statement going = ! going ; this seems like it must be some sort of illegal code that you could not possibly write and it's selfreferential and circular in some way it's not gonna work, but in fact this is exactly what we want in this particular case let's think about this again let's say x = y + z if we have a statement like this, remember we evaluate this side of the equation and store the result over here so we're going to do the same thing here we evaluate this side of the equation and store the result here it's kind of like how, when you say x = x + 1 , this seems a little strange it equals itself plus 1? but it's not big deal, if it were 5 then 5+1=6 and now x equals to 6, this is an operation that increments x over and over again 5 becomes 6 becomes 7, I'm talking way too fast in this video, but here, let's say going is true what is not true? not true is false let's say going is false, what is not false? true! so going equals not itself just takes the value of going, if it's true it turns it into false, if it's false it turns it into true! that might give you a little bit of a headache but I think that as you start to think about it and write it down and think about it again it will start to make more and more sense so let's go back over here and let's look at what he can write here now going equals not going, ok? going is currently false, so as soon as I click the mouse going is going to equal not false, which is true and when I click the mouse again, going is going to equal not true which is false. so this is just a little bit of an inkling of what it means to use a variable with a type of boolean it's just a little bit of a helper, it's kind of like we can store the value of a switch in our program we can always know is that switch on or is that switch off? and at any point we could act upon that if the switch is on, do this code, if it's off do this other code. and we can also change the value of that switch by turning it on, setting it to true, or turning it off, setting it to false. usually at the end of these videos I give some sort of exercise but I can't think of one right now but what you might do is find some program that you wrote and see where you might store a value of true or false and act upon that. that could be something that you could do. I'll think of something better later! maybe put it in the notes ok, I'm gonna stop this video and you're going to enjoy the rest of your day I'm over here and I'm going now. my going is true! ok, bye
