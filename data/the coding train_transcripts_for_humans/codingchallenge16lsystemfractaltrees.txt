With timestamps:

00:00 - hello welcome to another coding
00:02 - challenge this is a coding challenge all
00:03 - about L systems I'm going to make this
00:05 - beautiful tree I think it's a little
00:07 - beautiful but you will hopefully make an
00:08 - even more beautiful one after watching
00:10 - this video but I'm going to make this
00:11 - tree appear in the browser using HTML
00:14 - using JavaScript um and so what do I
00:16 - want to do here I want to Define what an
00:18 - L system is look at how the algorithm
00:20 - works and then build the code for
00:21 - rendering an L system from scratch um
00:24 - the um okay so what is an L system L the
00:27 - L stands for Linden Meer for ared uh
00:29 - Linden a Hungarian botanist uh who
00:32 - developed this algorithm for modeling
00:35 - cellular growth so um how what is what
00:38 - uh you can read more about L systems I
00:41 - got the sort of Wikipedia page here as a
00:42 - reference but what I'm going to do is
00:44 - just kind of Define for you the guts of
00:46 - it the sort of like the the actual
00:48 - terminology associated with an L system
00:50 - so an L system is actually all text
00:52 - based we're going to use it to generate
00:54 - Graphics but at its core it's just text
00:56 - based and it involves a few things it
00:59 - involves uh uh an
01:05 - alphabet for example my alphabet might
01:07 - be the letters A or B these are also
01:10 - sometimes known as variables it involves
01:12 - an
01:13 - axiom meaning what is the beginning of
01:17 - our L system our L system begins with an
01:19 - axiom for example an axiom could be a
01:22 - and then it involves a set of rules
01:25 - meaning something like u a becomes a B
01:31 - and B well hold on let me look I have
01:34 - actually the one that I want to start
01:36 - with which is sort of uh uh a becomes a
01:39 - and b becomes a okay so look at that I
01:41 - just wanted to use Since U and B becomes
01:45 - a I don't know if I don't know if the
01:46 - camera switched while I was doing that
01:47 - but so it has a set of rules so what
01:50 - does this mean so an L system is a
01:53 - recursive uh uh way of generating
01:56 - sentences over and over again using
01:59 - string replacement so this is the set of
02:03 - elements in the L system and we start
02:05 - with the Axiom a and this is Generation
02:08 - zero and in generation one we apply
02:11 - these rules to it a becomes AB a becomes
02:16 - ab and now we do this again I have
02:19 - generation two ab a becomes
02:25 - AB B becomes a and generation
02:32 - three a becomes I'll stop doing this
02:35 - eventually a becomes a b becomes a and a
02:39 - becomes a hopefully I did this right I
02:42 - you know manually as a human being kind
02:44 - of doing this string replacement I could
02:46 - easily get it wrong or it could take me
02:47 - forever be very tedious this is the kind
02:49 - of thing a computer is perfectly
02:51 - beautifully well suited to do and what
02:54 - what we have here is with this type of
02:56 - system these kind of recursive fractal
02:58 - like structures appear here in the text
03:01 - the resulting text itself so it's up to
03:03 - you to say aha I have this system I've
03:06 - designed it I have an alphabet I have an
03:07 - axium I have a set of rules I should
03:09 - write rules here and now I've generated
03:12 - these sentences what do I do with the
03:14 - sentence it could be you read it as
03:16 - poetry a b a
03:20 - a or perhaps you use it to be a song a a
03:26 - a b or with rhythm or you type to
03:30 - Graphics you know this means a DOT this
03:33 - means a square and you draw a pattern on
03:35 - the screen so you could imagine there's
03:37 - a lot of ways you could interpret the L
03:39 - system and what I'm going to do is first
03:42 - program just this string replacement
03:44 - structure and then I'm going to show you
03:46 - how you can use a certain kind of
03:48 - alphabet to indicate things like draw a
03:50 - line forward turn right turn left and
03:52 - create all sorts of uh patterns in
03:55 - particular plant-like patterns on the
03:57 - screen okay here we go coming back over
03:59 - here so we've got this down now um and
04:03 - let's start writing the code for it so
04:05 - um this is what I want this is the one I
04:07 - want to do first and I called it
04:08 - variables here so I'm going to go uh to
04:11 - uh I've got a uh a JavaScript I've got a
04:14 - Javascript file here I'm working in the
04:15 - browser using the p5js JavaScript
04:18 - framework and I'm going to just put this
04:20 - here at the top and comment it
04:23 - out so what do I want to do I want to
04:26 - start with
04:29 - uh an
04:30 - axiom and I'm gonna say that Axiom is a
04:34 - now I also need to have some rules so
04:37 - what would be a good way of creating a
04:40 - rule um in JavaScript the way I could do
04:42 - that is I could make it a JavaScript
04:45 - object like I could say a whenever I see
04:48 - a it becomes
04:51 - ab and I could say that's rule
04:53 - one and then I could say rule two is B
04:59 - becom
05:00 - a so now again this is a highly manual
05:03 - way of doing this and a and b are my own
05:07 - madeup things uh and oh you know it's a
05:09 - little bit confusing that I did that
05:10 - because the alphabet so maybe I should I
05:13 - just um it's fine uh uh I'll use it and
05:17 - once I get to the next example it'll
05:19 - it'll be a little less weird looking but
05:21 - the point is a becomes B so I'm looking
05:23 - for a and whenever I see a I substitute
05:26 - it with B so now let's just I'm going to
05:29 - write a
05:30 - function and call it
05:32 - generate and what I'm going to do is in
05:36 - a setup I'm going to say I'm going to
05:38 - say no
05:39 - canvas and I'm going to use the pii and
05:42 - I don't need draw right now I'm going to
05:44 - use the pii function called create P
05:47 - which creates a paragraph element in the
05:51 - page
05:53 - pause back okay so I'm using Create p
05:56 - and I want to say create P Axiom and I'm
05:59 - going to run this now in the browser
06:01 - over here and we can see uh there we go
06:03 - I have the letter A appearing so the the
06:06 - my first Axiom has appeared so now what
06:09 - I need to do in generate is what I want
06:11 - to say is I need to look at every letter
06:14 - in the current sentence and use and
06:18 - substitute using the rules so I'm going
06:20 - to say
06:22 - four uh into I equal 0 I is less than
06:26 - axium length i++ and you know I want to
06:30 - have a new variable and I'm going to
06:31 - call it sentence and sentence is going
06:34 - to start with the axm so I'm going to
06:37 - say sentence. length
06:40 - i++ then I'm going to say the current Uh
06:44 - current character equals sentence. carti
06:49 - so what I'm doing is I'm looking at this
06:50 - is a something you can do with strings
06:52 - in JavaScript I can look at each
06:53 - character one by one and pull it out and
06:56 - I can say here if current
07:01 - equals rule
07:04 - 1.a then and now what I what do I also
07:06 - need uh I need uh next I need next
07:13 - sentence which is an empty string so
07:15 - what I need to do is build up the next
07:17 - sentence if current equals the a part of
07:20 - a rule
07:23 - then next sentence should get B so if it
07:29 - equals a substitute B
07:33 - in else if current equals rule 1
07:38 - B next
07:40 - sentence plus equal rule oh sorry rule
07:44 - two a so right if it matches a from rule
07:48 - one substitute in B from rule one if it
07:51 - matches a from rule two substitute in B
07:53 - from rule
07:54 - two
07:57 - otherwise just keep it so there are
08:00 - cases where you have a character and it
08:02 - doesn't match any of the rules in that
08:05 - case you just keep that same
08:08 - character so keep current in so if
08:11 - current is if current is a if rule one's
08:15 - a put in rule one's B if current is Rule
08:17 - Two's A put in rule two's B if it's not
08:20 - any of the rules just keep current and
08:23 - then at the end of this the sentence
08:27 - should be now then the actual current
08:29 - sentence is now the next
08:32 - sentence so I'm going to uh I'm going to
08:35 - then I'm going to say create P sentence
08:39 - so now uh and then so when do I generate
08:41 - so let's make a
08:43 - button uh VAR button equals create
08:46 - button uh
08:49 - generate so create button is a function
08:52 - that's in the P5 Dom library and I can
08:54 - attach an event to it uh and that event
08:58 - is generate
09:00 - so I want whenever I press the mouse on
09:02 - that button I want to call that generate
09:04 - function just want to go something I
09:06 - remove some of this unnecessary styling
09:08 - uh and now I'm going to refresh this
09:10 - page oops so sketch. JS Line2 I have
09:13 - some sort of
09:14 - error oh I used int it should be
09:17 - VAR and I'm got okay so now you can see
09:21 - here I have this generate button and I
09:23 - have the axium there and I see AB ABA
09:27 - ABA ab and you can see I hopefully this
09:29 - is right I'm going to generate a bunch
09:30 - of times and you can see I'm generating
09:33 - um sentence after sentence here so uh so
09:38 - this is the idea so you know I could do
09:41 - this forever and ever and ever I'm sort
09:43 - of under I'm sort of curious why it's
09:44 - not like word wrapping but um I'm sure
09:48 - that's just some sort of CSS styling
09:49 - that I could fix to make it uh wrap to
09:52 - the next line or whatever anyway let's
09:53 - not worry about that um so you see that
09:56 - this is the idea that works all I need
09:58 - to do is create an algorithm for
10:01 - generating a um for starting with an
10:04 - axiom having a set of rules and
10:06 - iterating and doing string replacement
10:08 - now I I I did some kind of sloppy things
10:10 - with that just to sort of like make it
10:12 - work it would make much more sense for
10:15 - this to be an array and for me to say
10:18 - something like rules index zero equals
10:21 - this and so I just want to and rules
10:23 - index one so it makes much more sense
10:25 - for me to have the rules be in an array
10:27 - because there's no reason for me to be
10:29 - be
10:30 - checking both of those as separate else
10:32 - if statements when I could really just
10:34 - say for I equals 0 I is less than rules.
10:38 - length i++ and I can't use I because I
10:41 - already used I so this has to be J so
10:43 - what I want to do is instead of checking
10:45 - each rule individually because what if a
10:47 - l system I have eventually has like 10
10:49 - different rules this will become a mess
10:51 - so in that sense I can
10:53 - say if current equals whichever rules
10:58 - index J do a then next sentence should
11:01 - equal uh uh rules index J.B and then
11:04 - what I can do um is I can put a break
11:07 - here so I can once I can sort of get out
11:10 - of the loop as soon as it f because more
11:12 - than one rule can't be true so I can get
11:14 - out of that and then what I need to do
11:17 - though however
11:20 - is I need to figure out how way of
11:22 - adding if none of the rules if none of
11:25 - the rules are met are found then keep
11:28 - that current character so one way I can
11:30 - do that is uh I can say found is false
11:34 - and if I found one of the rules found is
11:38 - true and then at the end once I've gone
11:40 - through all of the rules I can say if
11:42 - not found uh next sentence plus equals
11:46 - current so this would make sure so this
11:47 - should be identical to what I had before
11:49 - and if I run this we should see the same
11:52 - exact result now we aren't really sure
11:54 - one thing I should do to make sure this
11:56 - is really working is I should change
11:58 - this to have this actually become like
12:00 - ABC to make sure the C's continue
12:03 - through there and which they do so you
12:04 - can see this is still working so now I
12:06 - have a bit more of a flexible system by
12:10 - which I could just create an array of
12:11 - rules it doesn't matter how many rules
12:13 - it'll still work okay now we've got the
12:16 - basic mechanics of the L system down the
12:19 - next thing I need to
12:21 - do is do something more to draw from it
12:24 - so what I want to show you is I want to
12:27 - now use this particular system so these
12:30 - are the the letters of the alphabet for
12:32 - this L system f plus minus Open Bracket
12:36 - close bracket we start with f and this
12:38 - is the rule seems like a crazy rule but
12:41 - it's actually going to do something
12:42 - quite interesting so what I want to do
12:44 - is here I want to start with f and
12:47 - actually I only have one rule so this is
12:50 - actually a much simpler scenario Which F
12:52 - becomes
12:56 - this and now I should be able to run
12:58 - this start with f and you can see I now
13:01 - it's now it's wrapping but you can see
13:03 - this is what I get even just in the
13:04 - third generation this is what I get so
13:06 - this looks totally insane but this is
13:09 - actually incredible these are entire
13:12 - instructions for growing this
13:14 - elaborately complex plant-like shape you
13:17 - know and this is really magic and you
13:18 - can get the computational beauty of
13:20 - nature or the algorithm beauty of plants
13:22 - there's all these books and resources
13:23 - where you can find countless numbers of
13:25 - these kinds of L systems or you can
13:26 - invent your own to create these
13:27 - patternss but let's make this this one
13:29 - happen so all that we've done so far is
13:32 - we've only made a program that renders
13:35 - the text to the screen now what I need
13:37 - to do is I have a program that reads the
13:39 - text and draws to the window so how do I
13:42 - do that so I'm going to go back and I'm
13:44 - going to get rid of um no canvas and I'm
13:49 - going to say create canvas uh 400400 and
13:53 - I'm going to say uh background 51 so
13:55 - let's make sure there's now a canvas
13:57 - appearing
13:59 - great this is still working but now what
14:00 - I'm going to see is every time I hit
14:02 - generate I want to read this text and
14:06 - draw to the um draw to the screen based
14:09 - on it okay
14:12 - so so let's do that let's now write a
14:15 - function and I'm going to call this
14:16 - function Turtle so I'm calling it turtle
14:20 - is because I'm am going to interpret
14:22 - this particular
14:23 - text like a turtle Graphics engine what
14:27 - is turtle Graphics so the concept of
14:29 - Turtle comes from an old programming
14:30 - language called logo where you could
14:32 - write code to move a have a to instruct
14:34 - a turtle how to move around the screen
14:36 - and as the turtle is moving around the
14:37 - screen uh the turtle is drawing lines so
14:40 - you could say things like f means move
14:42 - forward so move forward and draw a line
14:45 - plus means turn right minus means turn
14:48 - left and what's especially sophisticated
14:50 - about the turtle Graphics engine that
14:52 - we're about to implement is that these
14:54 - brackets mean save where you were so you
14:56 - could be a turtle moving around the
14:58 - screen at any point you could say save
15:00 - and you could keep moving and then you
15:03 - could um then you could say restore and
15:06 - go back to there and move from there and
15:08 - that's going to create a lot of uh
15:09 - sophisticated possibilities so what I
15:12 - need now is in the code is to write a
15:17 - loop and just go through every single
15:20 - character in that
15:23 - sentence and I'm going to say current
15:25 - again equals sentence car
15:27 - at I so now what do I need to do if
15:33 - current equals
15:36 - F I need to draw a
15:38 - line 0 0 0 negative length so this is
15:44 - somewhat arbitrary but I'm going to uh
15:46 - start with the default
15:49 - mechanic that I want to have this be my
15:52 - original position and I want to start
15:54 - drawing a line up so from 0 0 up to
15:56 - there
15:59 - then I want to say else if current
16:02 - equals
16:05 - plus then I want to say
16:07 - rotate by uh I'm gonna um I'm going to
16:10 - try pi divided by six which I don't
16:12 - think is right but I'll just start with
16:14 - that else if current equals
16:17 - minus
16:19 - rotate Pi / 6 in the negative
16:22 - Direction else if current equals bracket
16:27 - Open Bracket push push is the function
16:31 - in P5 which is save the transformation
16:34 - state so I'm going to move around with
16:35 - translate and rotate and push is going
16:37 - to be
16:38 - save else if current equals close
16:45 - bracket I'm G to say pop so now I'm
16:48 - going to pop so this is everything like
16:50 - this is the thing I don't even have to
16:51 - really like think much about it like all
16:53 - the magic is happening in this L system
16:55 - itself I just have to write the
16:56 - instructions to know what to do but I
16:58 - did miss something so one of the things
17:00 - that I have to do is when I draw this
17:02 - line I then have to translate to move to
17:05 - the end of the line so in addition to
17:07 - Drawing the Line and we come back over
17:09 - here I need to say
17:12 - translate Z negative length so I need to
17:15 - move to the end of the line so that I
17:16 - could either draw the next line or
17:17 - rotate from there and that sort of thing
17:19 - so uh and then we need this to be a a
17:21 - variable I'm going to say length equals
17:23 - 100 so what I want to do now is um EXC
17:28 - let me fine there's so much stuff going
17:30 - on here what I want to do is whenever I
17:32 - generate I want to also call
17:35 - Turtle so uh I'm going to call Turtle
17:38 - once in
17:41 - setup just so the axium is drawn and
17:44 - then whenever I after I finish
17:46 - generating I want to call Turtle again
17:50 - okay so here we
17:52 - go so I don't know why I don't see the
17:54 - line okay so let's let's see if we can
17:56 - figure this out uh Turtle so first of
17:58 - all draw let's draw the background again
18:01 - and then do stroke
18:04 - 255 oh I know why we don't see anything
18:07 - so where is the line being drawn it's
18:09 - being drawn from 0 0 up so I need to
18:12 - actually at the beginning make sure 0 is
18:14 - positioned at the bottom of the window
18:16 - so the very first thing I need to do in
18:17 - setup before or anytime before I call
18:20 - turtle is I need to say translate to the
18:23 - middle of the screen and the bottom of
18:25 - the screen and uh oops
18:29 - there we go so now you see F the
18:31 - sentence is currently only F so all I
18:34 - have is that one line now look at this
18:36 - let me do generate and now we have FF
18:38 - plus save plus F minus F minus F restore
18:42 - etc etc let's look at this now it went
18:45 - crazily off the screen now why did that
18:47 - happen something weird is going on here
18:50 - so let's let's investigate
18:52 - this back after a technical problem I
18:55 - added in reset Matrix in this Turtle
18:57 - function because I'm not using the draw
18:59 - Loop this guarantees that I'll always
19:02 - start my translations and rotations over
19:04 - again each time I'm about to draw this L
19:06 - system so that fix this uh sort of temp
19:09 - issue just with the way that I'm doing
19:10 - it right now so now you'll see if I hit
19:12 - refresh you can see that I'm drawing F
19:14 - when the sentence is only f i just draw
19:16 - one single line forward and now when the
19:19 - sentence is FF plus save plus F then I'm
19:24 - saying go forward go forward turn right
19:28 - save
19:29 - go uh go turn right again go forward
19:32 - turn left go forward turn left go
19:34 - forward then come back then turn left so
19:36 - you can see we could you this is a great
19:37 - exercise for you to do on a Saturday
19:39 - afternoon outside in the park you know
19:41 - copy down one of these sentences and
19:42 - like get out graph paper and try to be
19:45 - the L system but you can see here now
19:47 - all I got to do is hit generate again
19:48 - and something much more complex is
19:50 - happening but I sort of lost the picture
19:52 - I don't see what's going on so a couple
19:53 - things are missing one is I picked a
19:55 - random angle to rotate by pi divided 6
19:58 - which is n actually the angle meant to
20:00 - be used with this particular L system so
20:02 - let me first fix that so I'm going to go
20:04 - into the code and I'm going to make a
20:06 - variable called
20:08 - angle and in um in setup I'm just going
20:12 - to say angle equals
20:15 - radians uh 25 so 25 degrees I believe is
20:18 - the angle meant to be used with this and
20:20 - then here I can just say rotate instead
20:22 - of piid 6 by angle and negative angle so
20:25 - now I have a variable I could change so
20:26 - let's run this again
20:29 - I guess maybe piid piid 625 I'm losing
20:32 - my mind looks the
20:34 - same I'm really losing my mind but
20:36 - regardless of that the issue I'm gonna
20:38 - have to check that in a second the issue
20:40 - is that with more and more Generations I
20:43 - actually want to shrink the length that
20:45 - I'm drawing all this stuff so it would
20:47 - make sense here in the uh generate
20:50 - function to each time I generate I could
20:52 - say length times equals 0.5 so now you
20:56 - can see that's how I start then's next
20:58 - then's next then's next so I had it
21:00 - right maybe Pi ided 6 was right all
21:01 - along I'm going do one more generation
21:03 - and you can see how intricate this
21:05 - becomes and you know what I might like
21:08 - to do is just give this a tiny bit of
21:11 - alpha so we can zoom in on it here and
21:14 - generate generate generate generate and
21:17 - so you know at a certain point it's so
21:19 - much for it to draw but you can see I've
21:21 - got this full structure beautiful
21:23 - structure now you know just try to
21:24 - imagine drawing this through some other
21:27 - mechanism so I encourage you to play
21:29 - around with this go investigate find
21:31 - other L systems plug them into this
21:33 - example see what kinds of patterns you
21:35 - get the other thing that you might think
21:37 - about is if you watched my one of my
21:39 - previous videos about how to turn a
21:43 - fractal tree into a whole set of Branch
21:45 - objects that you could apply physics to
21:47 - you can also do the same thing with this
21:49 - particular example and uh if people are
21:51 - interested at some point I could U
21:52 - release an example that does that or
21:54 - make another video that converts this
21:55 - into that so thanks for watching this L
21:57 - system video you go forth and make some
21:59 - L systems and let me know how it goes

Cleaned transcript:

hello welcome to another coding challenge this is a coding challenge all about L systems I'm going to make this beautiful tree I think it's a little beautiful but you will hopefully make an even more beautiful one after watching this video but I'm going to make this tree appear in the browser using HTML using JavaScript um and so what do I want to do here I want to Define what an L system is look at how the algorithm works and then build the code for rendering an L system from scratch um the um okay so what is an L system L the L stands for Linden Meer for ared uh Linden a Hungarian botanist uh who developed this algorithm for modeling cellular growth so um how what is what uh you can read more about L systems I got the sort of Wikipedia page here as a reference but what I'm going to do is just kind of Define for you the guts of it the sort of like the the actual terminology associated with an L system so an L system is actually all text based we're going to use it to generate Graphics but at its core it's just text based and it involves a few things it involves uh uh an alphabet for example my alphabet might be the letters A or B these are also sometimes known as variables it involves an axiom meaning what is the beginning of our L system our L system begins with an axiom for example an axiom could be a and then it involves a set of rules meaning something like u a becomes a B and B well hold on let me look I have actually the one that I want to start with which is sort of uh uh a becomes a and b becomes a okay so look at that I just wanted to use Since U and B becomes a I don't know if I don't know if the camera switched while I was doing that but so it has a set of rules so what does this mean so an L system is a recursive uh uh way of generating sentences over and over again using string replacement so this is the set of elements in the L system and we start with the Axiom a and this is Generation zero and in generation one we apply these rules to it a becomes AB a becomes ab and now we do this again I have generation two ab a becomes AB B becomes a and generation three a becomes I'll stop doing this eventually a becomes a b becomes a and a becomes a hopefully I did this right I you know manually as a human being kind of doing this string replacement I could easily get it wrong or it could take me forever be very tedious this is the kind of thing a computer is perfectly beautifully well suited to do and what what we have here is with this type of system these kind of recursive fractal like structures appear here in the text the resulting text itself so it's up to you to say aha I have this system I've designed it I have an alphabet I have an axium I have a set of rules I should write rules here and now I've generated these sentences what do I do with the sentence it could be you read it as poetry a b a a or perhaps you use it to be a song a a a b or with rhythm or you type to Graphics you know this means a DOT this means a square and you draw a pattern on the screen so you could imagine there's a lot of ways you could interpret the L system and what I'm going to do is first program just this string replacement structure and then I'm going to show you how you can use a certain kind of alphabet to indicate things like draw a line forward turn right turn left and create all sorts of uh patterns in particular plantlike patterns on the screen okay here we go coming back over here so we've got this down now um and let's start writing the code for it so um this is what I want this is the one I want to do first and I called it variables here so I'm going to go uh to uh I've got a uh a JavaScript I've got a Javascript file here I'm working in the browser using the p5js JavaScript framework and I'm going to just put this here at the top and comment it out so what do I want to do I want to start with uh an axiom and I'm gonna say that Axiom is a now I also need to have some rules so what would be a good way of creating a rule um in JavaScript the way I could do that is I could make it a JavaScript object like I could say a whenever I see a it becomes ab and I could say that's rule one and then I could say rule two is B becom a so now again this is a highly manual way of doing this and a and b are my own madeup things uh and oh you know it's a little bit confusing that I did that because the alphabet so maybe I should I just um it's fine uh uh I'll use it and once I get to the next example it'll it'll be a little less weird looking but the point is a becomes B so I'm looking for a and whenever I see a I substitute it with B so now let's just I'm going to write a function and call it generate and what I'm going to do is in a setup I'm going to say I'm going to say no canvas and I'm going to use the pii and I don't need draw right now I'm going to use the pii function called create P which creates a paragraph element in the page pause back okay so I'm using Create p and I want to say create P Axiom and I'm going to run this now in the browser over here and we can see uh there we go I have the letter A appearing so the the my first Axiom has appeared so now what I need to do in generate is what I want to say is I need to look at every letter in the current sentence and use and substitute using the rules so I'm going to say four uh into I equal 0 I is less than axium length i++ and you know I want to have a new variable and I'm going to call it sentence and sentence is going to start with the axm so I'm going to say sentence. length i++ then I'm going to say the current Uh current character equals sentence. carti so what I'm doing is I'm looking at this is a something you can do with strings in JavaScript I can look at each character one by one and pull it out and I can say here if current equals rule 1.a then and now what I what do I also need uh I need uh next I need next sentence which is an empty string so what I need to do is build up the next sentence if current equals the a part of a rule then next sentence should get B so if it equals a substitute B in else if current equals rule 1 B next sentence plus equal rule oh sorry rule two a so right if it matches a from rule one substitute in B from rule one if it matches a from rule two substitute in B from rule two otherwise just keep it so there are cases where you have a character and it doesn't match any of the rules in that case you just keep that same character so keep current in so if current is if current is a if rule one's a put in rule one's B if current is Rule Two's A put in rule two's B if it's not any of the rules just keep current and then at the end of this the sentence should be now then the actual current sentence is now the next sentence so I'm going to uh I'm going to then I'm going to say create P sentence so now uh and then so when do I generate so let's make a button uh VAR button equals create button uh generate so create button is a function that's in the P5 Dom library and I can attach an event to it uh and that event is generate so I want whenever I press the mouse on that button I want to call that generate function just want to go something I remove some of this unnecessary styling uh and now I'm going to refresh this page oops so sketch. JS Line2 I have some sort of error oh I used int it should be VAR and I'm got okay so now you can see here I have this generate button and I have the axium there and I see AB ABA ABA ab and you can see I hopefully this is right I'm going to generate a bunch of times and you can see I'm generating um sentence after sentence here so uh so this is the idea so you know I could do this forever and ever and ever I'm sort of under I'm sort of curious why it's not like word wrapping but um I'm sure that's just some sort of CSS styling that I could fix to make it uh wrap to the next line or whatever anyway let's not worry about that um so you see that this is the idea that works all I need to do is create an algorithm for generating a um for starting with an axiom having a set of rules and iterating and doing string replacement now I I I did some kind of sloppy things with that just to sort of like make it work it would make much more sense for this to be an array and for me to say something like rules index zero equals this and so I just want to and rules index one so it makes much more sense for me to have the rules be in an array because there's no reason for me to be be checking both of those as separate else if statements when I could really just say for I equals 0 I is less than rules. length i++ and I can't use I because I already used I so this has to be J so what I want to do is instead of checking each rule individually because what if a l system I have eventually has like 10 different rules this will become a mess so in that sense I can say if current equals whichever rules index J do a then next sentence should equal uh uh rules index J.B and then what I can do um is I can put a break here so I can once I can sort of get out of the loop as soon as it f because more than one rule can't be true so I can get out of that and then what I need to do though however is I need to figure out how way of adding if none of the rules if none of the rules are met are found then keep that current character so one way I can do that is uh I can say found is false and if I found one of the rules found is true and then at the end once I've gone through all of the rules I can say if not found uh next sentence plus equals current so this would make sure so this should be identical to what I had before and if I run this we should see the same exact result now we aren't really sure one thing I should do to make sure this is really working is I should change this to have this actually become like ABC to make sure the C's continue through there and which they do so you can see this is still working so now I have a bit more of a flexible system by which I could just create an array of rules it doesn't matter how many rules it'll still work okay now we've got the basic mechanics of the L system down the next thing I need to do is do something more to draw from it so what I want to show you is I want to now use this particular system so these are the the letters of the alphabet for this L system f plus minus Open Bracket close bracket we start with f and this is the rule seems like a crazy rule but it's actually going to do something quite interesting so what I want to do is here I want to start with f and actually I only have one rule so this is actually a much simpler scenario Which F becomes this and now I should be able to run this start with f and you can see I now it's now it's wrapping but you can see this is what I get even just in the third generation this is what I get so this looks totally insane but this is actually incredible these are entire instructions for growing this elaborately complex plantlike shape you know and this is really magic and you can get the computational beauty of nature or the algorithm beauty of plants there's all these books and resources where you can find countless numbers of these kinds of L systems or you can invent your own to create these patternss but let's make this this one happen so all that we've done so far is we've only made a program that renders the text to the screen now what I need to do is I have a program that reads the text and draws to the window so how do I do that so I'm going to go back and I'm going to get rid of um no canvas and I'm going to say create canvas uh 400400 and I'm going to say uh background 51 so let's make sure there's now a canvas appearing great this is still working but now what I'm going to see is every time I hit generate I want to read this text and draw to the um draw to the screen based on it okay so so let's do that let's now write a function and I'm going to call this function Turtle so I'm calling it turtle is because I'm am going to interpret this particular text like a turtle Graphics engine what is turtle Graphics so the concept of Turtle comes from an old programming language called logo where you could write code to move a have a to instruct a turtle how to move around the screen and as the turtle is moving around the screen uh the turtle is drawing lines so you could say things like f means move forward so move forward and draw a line plus means turn right minus means turn left and what's especially sophisticated about the turtle Graphics engine that we're about to implement is that these brackets mean save where you were so you could be a turtle moving around the screen at any point you could say save and you could keep moving and then you could um then you could say restore and go back to there and move from there and that's going to create a lot of uh sophisticated possibilities so what I need now is in the code is to write a loop and just go through every single character in that sentence and I'm going to say current again equals sentence car at I so now what do I need to do if current equals F I need to draw a line 0 0 0 negative length so this is somewhat arbitrary but I'm going to uh start with the default mechanic that I want to have this be my original position and I want to start drawing a line up so from 0 0 up to there then I want to say else if current equals plus then I want to say rotate by uh I'm gonna um I'm going to try pi divided by six which I don't think is right but I'll just start with that else if current equals minus rotate Pi / 6 in the negative Direction else if current equals bracket Open Bracket push push is the function in P5 which is save the transformation state so I'm going to move around with translate and rotate and push is going to be save else if current equals close bracket I'm G to say pop so now I'm going to pop so this is everything like this is the thing I don't even have to really like think much about it like all the magic is happening in this L system itself I just have to write the instructions to know what to do but I did miss something so one of the things that I have to do is when I draw this line I then have to translate to move to the end of the line so in addition to Drawing the Line and we come back over here I need to say translate Z negative length so I need to move to the end of the line so that I could either draw the next line or rotate from there and that sort of thing so uh and then we need this to be a a variable I'm going to say length equals 100 so what I want to do now is um EXC let me fine there's so much stuff going on here what I want to do is whenever I generate I want to also call Turtle so uh I'm going to call Turtle once in setup just so the axium is drawn and then whenever I after I finish generating I want to call Turtle again okay so here we go so I don't know why I don't see the line okay so let's let's see if we can figure this out uh Turtle so first of all draw let's draw the background again and then do stroke 255 oh I know why we don't see anything so where is the line being drawn it's being drawn from 0 0 up so I need to actually at the beginning make sure 0 is positioned at the bottom of the window so the very first thing I need to do in setup before or anytime before I call turtle is I need to say translate to the middle of the screen and the bottom of the screen and uh oops there we go so now you see F the sentence is currently only F so all I have is that one line now look at this let me do generate and now we have FF plus save plus F minus F minus F restore etc etc let's look at this now it went crazily off the screen now why did that happen something weird is going on here so let's let's investigate this back after a technical problem I added in reset Matrix in this Turtle function because I'm not using the draw Loop this guarantees that I'll always start my translations and rotations over again each time I'm about to draw this L system so that fix this uh sort of temp issue just with the way that I'm doing it right now so now you'll see if I hit refresh you can see that I'm drawing F when the sentence is only f i just draw one single line forward and now when the sentence is FF plus save plus F then I'm saying go forward go forward turn right save go uh go turn right again go forward turn left go forward turn left go forward then come back then turn left so you can see we could you this is a great exercise for you to do on a Saturday afternoon outside in the park you know copy down one of these sentences and like get out graph paper and try to be the L system but you can see here now all I got to do is hit generate again and something much more complex is happening but I sort of lost the picture I don't see what's going on so a couple things are missing one is I picked a random angle to rotate by pi divided 6 which is n actually the angle meant to be used with this particular L system so let me first fix that so I'm going to go into the code and I'm going to make a variable called angle and in um in setup I'm just going to say angle equals radians uh 25 so 25 degrees I believe is the angle meant to be used with this and then here I can just say rotate instead of piid 6 by angle and negative angle so now I have a variable I could change so let's run this again I guess maybe piid piid 625 I'm losing my mind looks the same I'm really losing my mind but regardless of that the issue I'm gonna have to check that in a second the issue is that with more and more Generations I actually want to shrink the length that I'm drawing all this stuff so it would make sense here in the uh generate function to each time I generate I could say length times equals 0.5 so now you can see that's how I start then's next then's next then's next so I had it right maybe Pi ided 6 was right all along I'm going do one more generation and you can see how intricate this becomes and you know what I might like to do is just give this a tiny bit of alpha so we can zoom in on it here and generate generate generate generate and so you know at a certain point it's so much for it to draw but you can see I've got this full structure beautiful structure now you know just try to imagine drawing this through some other mechanism so I encourage you to play around with this go investigate find other L systems plug them into this example see what kinds of patterns you get the other thing that you might think about is if you watched my one of my previous videos about how to turn a fractal tree into a whole set of Branch objects that you could apply physics to you can also do the same thing with this particular example and uh if people are interested at some point I could U release an example that does that or make another video that converts this into that so thanks for watching this L system video you go forth and make some L systems and let me know how it goes
