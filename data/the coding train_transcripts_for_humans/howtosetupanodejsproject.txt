With timestamps:

00:00 - All right, this video,
I'm going to show you
00:02 - how to make a Node.js project
and run your first Node.js
00:07 - code.
00:07 - You could just start
right here, if you already
00:09 - have an environment set up with
terminal and Node installed.
00:12 - If you don't, I just
spent quite a bit of time
00:15 - talking through all
the various things
00:17 - that I'm using on
my computer and what
00:19 - some other options
on Windows are,
00:21 - for example, that you could use.
00:22 - So you could go back
and check that video.
00:23 - But I'm going to
start right now.
00:25 - Let's just, though, make sure--
if you can type node dash dash
00:28 - version into your
terminal window,
00:30 - if you see version 18.18.2,
then you're in good shape.
00:33 - You don't actually have to
use the exact same version I'm
00:36 - using, but you might like to.
00:38 - That way, we just
know we're together
00:41 - in some sort of strange
connection between us
00:44 - with the version of
Node that we're using.
00:46 - So you might have
heard the term runtime.
00:49 - Node.js is a JavaScript runtime.
00:51 - What does that mean?
00:52 - Well, JavaScript is a
programming language
00:54 - that needs a context.
00:56 - It needs a place to run.
00:58 - Most of the time--
certainly, what I use it for
01:00 - is to run JavaScript code
inside the web browser.
01:02 - In particular, I'm
using the p5.js library.
01:05 - Maybe I'm using the
P5.js web editor
01:07 - and making fun p5.js
sketches and running
01:10 - that code in the web browser.
01:12 - If you want to execute
JavaScript code
01:15 - on your computer outside
of the web browser,
01:18 - you need something
to run that code.
01:20 - You need a runtime.
01:21 - Node.js is that runtime.
01:23 - So, often, Node.js is
thought of as a thing
01:27 - to write web servers.
01:28 - And that's what it is
quite often used for,
01:30 - and I have video
tutorials that do that.
01:32 - But Node.js is just a platform,
if you have it installed,
01:36 - that will execute
JavaScript code.
01:38 - And it comes with a set of
functions, and packages,
01:40 - and things like that you can
use for all sorts of purposes
01:43 - that I'll be getting into
to make a Discord bot,
01:46 - for example.
01:47 - So one of the first things
you could do with Node
01:49 - is open up a console
to that runtime
01:51 - just with the
command node itself.
01:53 - And I could just start
writing JavaScript,
01:55 - like let message equal--
01:58 - it's trying to
autofill things for me.
02:01 - This works just
like the developer
02:02 - console in the browser.
02:04 - I could say, hey, what
is the value of message?
02:06 - So I can test out a
lot of things, like,
02:08 - is 5 greater than 2?
02:09 - Yeah, that's true.
02:10 - So don't use this too often.
02:13 - But if you just
want to experiment
02:15 - with executing some
code that you're
02:16 - writing in real time
in an interactive way,
02:19 - you could do that
with the node command.
02:20 - To get out of this, I think I
need to hit Control-C twice.
02:25 - The other thing I
can do with Node
02:26 - is execute the code that's
written into a file.
02:30 - So remember I created
this choochoo.js file?
02:34 - I can open that up
in Visual Studio
02:35 - code with the code command.
02:39 - And what does it have in it?
02:40 - A console.log.
02:41 - So if I want to run the
code that's in this file,
02:44 - I go back to terminal, and I
can type "node" and the name
02:48 - of the file.
02:48 - And it executed it and
console logged choochoo.js.
02:54 - Why did I put .js there?
02:56 - It's like some weird,
JavaScript Freudian slip.
02:59 - I meant to just put
an exclamation point.
03:02 - Let's run that again.
03:03 - There we go-- choo choo!
03:04 - Now, more often
than not, instead
03:07 - of just using Node for the
interactive JavaScript console
03:10 - or to execute the code
that's in a single file,
03:13 - you often want to create
a Node project, which
03:16 - is a collection of
files and packages
03:19 - that, all together,
create something.
03:23 - A Discord bot will
be the one that I'm
03:24 - going to do in the next videos.
03:26 - To make your first Node project,
it is time for the npm command.
03:31 - So we had nvm, which I have now
put away, shelved to the side.
03:34 - That was just for
installing Node.
03:36 - We have node, which is a window
into the interactive console
03:40 - or to run the code that's
in a particular file.
03:42 - npm is Node Package Manager.
03:45 - [DRAMATIC MUSIC]
03:49 - It allows you to do all
sorts of kinds of things
03:52 - to manage a package
or a project in Node.
03:55 - The very first thing
you might want to do
03:57 - is npm init to initialize
a new Node project.
04:01 - But before I do that,
I want to make sure
04:03 - I have a fresh, clean directory.
04:05 - So I could, through the
finder, make a new folder.
04:07 - But why not use another
Unix shell command--
04:10 - make directory?
04:13 - That's a little bit
of a long-winded name.
04:14 - You could do something shorter.
04:16 - I used dashes, just
because didn't that's
04:18 - what I felt like doing.
04:19 - So I'm going to
make that directory.
04:20 - I'm going to cd
into that directory.
04:23 - There's something I
actually forgot to show you.
04:25 - When you are working
with directories
04:28 - through the shell commands,
a dot or a dot dot
04:31 - can mean things.
04:32 - So dot typically means
this current directory.
04:34 - But if I want to change
directory and go back up
04:37 - one level, I can say dot dot.
04:39 - So if I say, cd dot dot
here, that's going to take me
04:42 - back up to the desktop.
04:43 - And then if I want to go back
into coding-train-node-demo,
04:47 - cd the name of the directory,
and if I want to open this
04:50 - directory in Visual Studio Code,
I could say code dot for this
04:55 - current directory.
04:56 - Now, there's no files
yet in the directory,
04:59 - so you see nothing
listed under the File
05:01 - Explorer in Visual Studio Code.
05:03 - Let's make this folder into
a Node project with npm init.
05:07 - Now, I'm going to hit Enter here
to show you all the questions
05:10 - it's going to ask me.
05:11 - If you want to just bypass
all those questions,
05:13 - you can do just -y, which
is just like, just say yes
05:16 - to all the questions.
05:17 - But let's take a look at them.
05:18 - This utility will walk you
through creating a package.json
05:21 - file.
05:22 - So, actually, what
makes a Node project
05:24 - is a file called package.json.
05:26 - You don't actually
have to say npm init.
05:29 - You could just create that file.
05:30 - But this command is going
to create it for me with,
05:32 - and it's going to make sure I
don't have any syntax errors.
05:35 - So it's kind of a
useful thing to do.
05:37 - So what is the package name?
05:39 - Eh, yeah.
05:39 - Yes, I'll hit Enter.
05:40 - That looks like a good name.
05:41 - What is the version I'm on?
05:43 - Well, sure, I'm on--
05:44 - I'm just on 1.0 already.
05:46 - This is ready to go.
05:47 - I'm going to hit Enter.
05:48 - I could write a description,
now, an entry point,
05:52 - which means, what is going to
be the main JavaScript file?
05:56 - It's, what is the sketch.js
for a P5 project, for this Node
06:00 - project?
06:01 - Index.js is a typical file
name for the default JavaScript
06:05 - file.
06:05 - We can leave that.
06:06 - And I can just
keep hitting Enter.
06:08 - I mean, these things
are important in terms
06:10 - of who's the author,
what's the license,
06:12 - and all sorts of
things you might
06:13 - want to consider that you put
into your package.json file.
06:16 - But this is not your only
chance to write things
06:19 - into the package.json file.
06:21 - You can always change
it and adapt it later.
06:24 - In fact, if I go into
Visual Studio Code,
06:27 - I now see there is a
new package.json file,
06:30 - and there it is.
06:32 - I'm going to be returning
to this file a lot.
06:34 - Anytime I want to install some
other libraries or dependencies
06:38 - I'm going to use for some
other kinds of configuration
06:40 - settings for the project,
you'll see me return
06:42 - and edit this file manually.
06:44 - But the npm init command
is just a mechanism
06:47 - for creating it initially.
06:49 - Now, it says that the main
JavaScript file is index.js.
06:53 - I could certainly rename
it here, but why not just
06:56 - create a file called index.js?
07:00 - I can use this button
here to create a new file.
07:03 - I can call it index.js.
07:06 - And, once again, I could
put in just a console.log,
07:10 - just so I have some
code that's working.
07:13 - Now, I have what I had before--
07:15 - just a JavaScript
file with code.
07:17 - But I have a
package.json file that
07:19 - goes along with it, setting up
the foundation for building out
07:23 - a larger project.
07:24 - Most of the time, if
you're working in Node,
07:26 - it's because you also want to
import a lot of other packages
07:31 - that allow you to get
additional functionality,
07:34 - connect to a web
service like Discord,
07:36 - all sorts of possibilities.
07:38 - There's a package
called express that
07:40 - is for making web servers
that I've used in videos.
07:42 - There's a package called
canvas for rendering to--
07:46 - making graphics in Node,
like you would do in P5.
07:49 - So, briefly, let me just show
you how to install and work
07:52 - with Node packages,
and then you'll
07:55 - see this again and again as
I work on different projects,
07:57 - like making the Discord bot.
07:58 - Your first stop might be
the Node.js documentation.
08:02 - So on the Node website,
if I go to Docs--
08:04 - and, in particular, I want to
look at the version 18 docs.
08:08 - And I can start to
see there are lots
08:10 - of kinds of different things
here that I could look at.
08:13 - I'm going to start
with file system.
08:16 - So file system is a
package, a library
08:20 - that you can use in Node
to access the local files
08:23 - on your computer.
08:24 - If you want to write out a
file, an image, or a JSON file,
08:27 - you can use the fs Node package.
08:29 - And you don't have to
separately install it
08:31 - because it is a
package that is just
08:33 - part of the Node system itself.
08:35 - But in order to use it, I need
to import it into my code.
08:39 - Any Node package that
you're going to use,
08:41 - you would typically write the
import statement at the top.
08:46 - This is one way to do so.
08:47 - I'm going to declare a
variable with the name fs.
08:50 - It's going to be a constant
because I don't ever
08:52 - want to mess with this.
08:53 - It's going to be the name
for whenever I want to access
08:56 - anything from this package.
08:58 - And I can require
everything that's
09:01 - in the file system package
and put it into this variable.
09:04 - The thing is, this is what
is called a CommonJS module.
09:09 - This is the old-fashioned way
of importing a separate Node
09:14 - package into your
code by using Require.
09:16 - And previous videos that
I've done, I used Require.
09:19 - I want to now show
you the modern way
09:22 - to do it with an ES module.
09:26 - This line of code is
now saying, import star,
09:29 - meaning everything.
09:31 - You're going to see
later why I only
09:32 - want to import some
particular functions
09:35 - or classes from a library.
09:36 - But, now, I want to import
everything from the file system
09:39 - package, and I want to import
it as the variable name fs.
09:43 - Let's see what happens
when I run this code.
09:47 - Warning-- to load an
ES module, set type
09:50 - module in package.json.
09:51 - So if you're going
to, now, be like me
09:53 - and use ES imports in
your Node.js projects,
09:57 - you need to make sure that the
package.json file is set up
10:01 - in a way that will
accommodate that syntax.
10:04 - You can also name your
files, apparently, .mjs,
10:06 - but I categorically
refuse to do.
10:08 - Somebody convince
me in the comments
10:10 - that I should consider
that as an option.
10:12 - Instead, I'm going to put
type module into package.json.
10:15 - This is just a collection of
key value pairs in a JSON file.
10:19 - So I can put it anywhere.
10:21 - And I've got to make sure I
have the comma afterwards.
10:23 - And there we go.
10:25 - Now, let me try
running this again.
10:28 - It worked, but I'm not using
that file system package.
10:31 - Let me just show you a quick
thing that I could do with it.
10:34 - [MUSIC PLAYING]
10:44 - I haven't actually
tested this code.
10:46 - We'll see if it works.
10:46 - I think I got it right.
10:47 - I'm just showing
you, oh, I could
10:49 - use the write file function
that's part of the fs package.
10:53 - And what I want to
do is I want to write
10:55 - a file called words.txt.
10:57 - And I'm going to create
a string of text which
11:02 - has these words that are in this
array joined with line breaks.
11:05 - And then I have a
callback function
11:06 - for when the file is
finished being written.
11:08 - Let's run this and
see if it works.
11:12 - Console.log choo choo.
11:13 - Console.log file.written.
11:15 - Look, there's a new file
here called words.txt,
11:17 - and look what's in that file.
11:19 - So, thankfully, I did
write this code correctly.
11:22 - I happen to know about
the right file function.
11:25 - But if I didn't, I could read
through this documentation
11:28 - and learn about how it works.
11:29 - Now, there's a lot to
the file system package.
11:32 - I did it with a callback.
11:33 - It also supports
something called Promises.
11:35 - I used the synchronous
version of functions.
11:37 - I've covered some of this
stuff in other videos.
11:40 - It's beside the
point right here.
11:42 - But what I'm trying
to show you is
11:43 - that I can take a
built-in package that's
11:45 - part of Node itself,
import it into a variable,
11:49 - and then execute the functions
on that variable name.
11:51 - More commonly-- and
this will be the case
11:53 - as soon as I wade into the
territory of making a Discord
11:56 - bot-- you will want to import
a Node package that is not part
12:00 - of the Node runtime itself.
12:02 - The website to find all
of these is npmjs.com.
12:05 - It's what we used to
initialize our Node project,
12:08 - and it is also the
command that allows
12:10 - you to install other
Node packages that
12:12 - are hosted on this
platform, made by people
12:15 - all around the internet.
12:16 - [MUSIC PLAYING]
12:21 - So, for example, let's say I
wanted to make a Discord bot.
12:25 - Search for Discord bot.
12:27 - And, actually, the first one
that came up, discord.js--
12:30 - this is the Node package
that I wanted to use.
12:33 - So you'll see in a video or two
later me installing and working
12:36 - with this package.
12:38 - Another Node package that
I think I briefly mentioned
12:41 - is canvas.
12:42 - It brings in a
whole graphics API.
12:44 - I wonder if there's a way
to work with P5 in Node.
12:46 - That's an interesting
discussion that maybe we
12:48 - could have outside of
the bounds of this video.
12:50 - But, canvas, I will also be
using in a future tutorial
12:54 - to show you how to make a
Discord bot that renders images
12:57 - from Node.js.
12:58 - Let's look at a package
that I just learned
13:00 - about today called cowsay.
13:03 - Cowsay is a configurable,
talking cow.
13:06 - Sounds perfect for us to use.
13:08 - You can see right
here on the right
13:10 - are the instructions for how
to install the cowsay package--
13:14 - npm i cowsay.
13:16 - I like to type in the
full word install, just
13:19 - to be quite explicit about it.
13:21 - But just i works fine.
13:23 - It's giving me a
little information
13:25 - in the console about
it being installed--
13:27 - no errors, no vulnerabilities.
13:29 - I'm ready to move forward.
13:30 - Let's take a look now at
what's in package.json.
13:33 - Look at this.
13:34 - There is a new property
called dependencies.
13:37 - And inside the
dependencies is the name
13:40 - of a package called cowsay.
13:42 - And the value for that, key,
cowsay, is the version number.
13:46 - So any time you
install a Node package,
13:49 - it is automatically
added to package.json.
13:52 - You also might notice there's
a new directory called
13:55 - Node modules.
13:57 - All of the code and other files
associated with the cowsay Node
14:01 - package are now all inside of
that Node modules directory.
14:05 - It's actually got a
lot of other stuff
14:07 - because packages tend to
depend on other packages,
14:09 - and they all start to
install each other.
14:11 - You don't really ever
have to look inside there.
14:13 - But as soon as you start working
with other Node packages,
14:16 - that folder will be created and
full of directories and files.
14:20 - I'll be showing
you more about how
14:21 - to manage this and think
about, what if you want
14:24 - to publish your code somewhere?
14:25 - What do you do with
that directory?
14:26 - We'll come to that later
as we get into some more
14:28 - actual project examples.
14:30 - But, now, let's
just look at, how
14:31 - do we import in our code the
cowsay package and use it?
14:35 - Well, your ability
to do so is only
14:37 - as good as the documentation.
14:39 - So I've actually not
used this package before,
14:41 - so I'm going to try to just
look at the documentation
14:43 - and see if I can figure it out.
14:44 - That's kind of what
it's like to be
14:45 - out there in the wild
working with Node packages.
14:47 - Generally speaking, I like
to look for something that's
14:50 - maybe published
a little bit more
14:51 - recently, that is
actively maintained.
14:54 - I like to also sometimes take
a look at the associated GitHub
14:56 - repository.
14:58 - And I can see, how actively
is this being maintained?
15:01 - Is there active
discussion, recent commits?
15:04 - But I'm not worrying
about that too much
15:06 - right now because
I'm just trying
15:07 - to use this just for fun,
just to demonstrate the idea.
15:10 - So, sometimes, Node
packages can actually
15:13 - be installed as global.
15:15 - I will come back to
that in the future.
15:17 - I didn't use the -g I am not
interested in having the-- oh,
15:21 - I mean, I am interested in it.
15:23 - But I wasn't thinking of this
as demonstrating how I could now
15:26 - have the cowsay
command universally
15:29 - available to me on my
computer through terminal.
15:32 - Instead, I want to
use it as a module,
15:35 - meaning I want to import it.
15:36 - Oh, but I don't
want to use Require.
15:38 - I want to use an ES module,
this new way of doing it.
15:41 - It's not that new,
but I'm trying
15:43 - to keep up with the times, man.
15:45 - Ah, import star as cowsay.
15:48 - Now, I've imported that.
15:50 - Now, this you might
notice says Typescript,
15:52 - so we're going to
glide right by that.
15:54 - This is not a video about
how to work with Typescript.
15:56 - So I'm going to look down
for some more documentation--
15:59 - usage in the browser.
16:00 - I'm not using it in the
browser, but this code
16:03 - will show me plain JavaScript,
which is what I want to do.
16:06 - It looks like there's
a function called say.
16:08 - Let's comment out all this other
stuff about saving the file.
16:14 - So I think the way this works is
I call the save function, which
16:18 - is part of the cowsay package.
16:20 - And then I give it an object
with a property called text
16:23 - and whatever I want the cow
to say-- in this case, moo.
16:25 - I think that's right,
based on my quick reading
16:27 - of the documentation.
16:32 - Ah, OK.
16:34 - I think I expected that
to console.log something.
16:36 - But, of course,
it's not going to.
16:39 - It probably returns
something into a variable.
16:42 - Now, let's console.log
that output.
16:45 - And let me use constants.
16:47 - This is not a variable
I intend to change.
16:49 - Let's see what happens now.
16:51 - Hey, there we go.
16:53 - We got a nice little ASCII
art with the cow saying, moo.
16:56 - Fantastic.
16:57 - This is also useful,
now, for me to show you,
17:00 - you don't always want
to import everything
17:03 - from a particular Node package.
17:05 - So, here, I imported
star as cowsay
17:09 - so I could access
everything that's
17:11 - under the cowsay package
as this variable name,
17:13 - like the say function.
17:15 - But I could import individual
functions one at a time
17:19 - into individual variables.
17:24 - So instead of
importing everything,
17:26 - I can import the things I
want in between curly brackets
17:30 - from the particular
Node package.
17:32 - And, now, I don't
need this anymore.
17:34 - I can just call the function
say that I imported from cowsay.
17:41 - Still works.
17:42 - Apparently, there's other
things like think and squirrel
17:46 - that can import.
17:47 - But I'll let you investigate
this particular Node
17:50 - package yourself.
17:51 - What I'm trying to
show you here is
17:53 - that you can both
import packages
17:56 - that are built-in with
Node by looking at the Node
17:58 - documentation, like file system.
18:00 - Or, depending on what the
needs of your project are,
18:03 - you can find a hopefully
well-maintained and friendly
18:07 - Node package, install
it with npm install,
18:10 - and then import the functions
and things you need,
18:13 - as long as you put in "type
module" into your package.json,
18:17 - you can then do that
and run the code
18:19 - and make use of that
particular Node package.
18:22 - When you install them,
those dependencies
18:24 - will be here, also,
in package.json.
18:27 - Before I go, I
should also mention
18:29 - that it's quite rare for me
to actually begin a new Node
18:33 - project from scratch
with npm init.
18:36 - Usually, I am downloading
an example Node project
18:39 - that already has a package.json
and a bunch of things
18:42 - configured for it.
18:43 - I'm downloading it and
building on top of that.
18:45 - So let me show you
how that works.
18:48 - For example, I'm teaching
a class right now where
18:51 - we're making-- guess what--
18:52 - Discord bots.
18:53 - I made an example Node project.
18:55 - I put it on GitHub under a repo
called Discord bot examples.
18:59 - Now, of how you download
this repo, whether you're
19:01 - using GitHub Desktop
or terminal commands,
19:04 - that's outside the scope
of what I'm doing here.
19:07 - But it really does strike me
that I need to fill in the gap
19:09 - and maybe do another
video that fits
19:11 - in here to look at some basic
Git and GitHub commands.
19:14 - But what I'll do right
now for you is just
19:16 - show you that, what happens if
you just found it and wanted
19:19 - to download it?
19:20 - I can do that by clicking Code
and then Download ZIP here.
19:24 - Let me unzip it, and there's
a whole folder here called
19:28 - Discord Bot Examples Main, which
has a Node project right here.
19:33 - You can see there's already
a package.json file,
19:35 - but there's no Node
Modules folder.
19:38 - That's important.
19:39 - When I publish this
example to GitHub,
19:41 - I don't want to include
all the Node modules.
19:43 - It would make it a huge,
giant thing to download.
19:47 - I just want my custom code.
19:48 - And the expectation is, when
you download it-- or me,
19:51 - in this case--
19:52 - I'm going to now
install those packages.
19:54 - And that's what I'm
trying to show you here.
19:55 - So first thing--
back into terminal.
19:58 - Let's cd up a directory.
20:00 - I'm on desktop.
20:01 - What was it called?
20:02 - Discord Bot Examples Main.
20:05 - I already had a folder
called Discord Bot Examples
20:07 - because I've been doing
this a lot of times.
20:09 - But let's just go into the
Discord-Bot-Examples-main.
20:13 - Let's ls that.
20:14 - We can see-- now, I happen to
know that the Node project is
20:17 - actually in this subfolder
called 01-discord.js.
20:21 - It's my intention that
this repo would eventually
20:23 - have multiple Node projects
in it as different examples.
20:26 - So let's cd into that directory.
20:28 - Let's open this directory
in Visual Studio Code.
20:31 - Now, there's a lot of
stuff in this directory
20:33 - that I haven't explained
yet because I'm essentially
20:34 - going to build this example as
a set of tutorials following
20:37 - this video.
20:38 - But let's look at package.json.
20:40 - One thing you'll see
here is that-- look
20:43 - at the dependencies-- canvas,
discord.js, and dotenv.
20:47 - These are very
important packages
20:49 - that I will be working with.
20:50 - And before I can do anything
with this particular example,
20:53 - here's a very common
error you'll get.
20:55 - Let's say I try to just run
the Node code right now.
20:59 - It's going to say error--
21:01 - module not found, cannot
find package discord.js.
21:05 - That is because the project
depends on discord.js.
21:09 - The code is doing imports
from discord.js-- a lot
21:13 - of other things, too.
21:15 - But there's no Node modules
folder with those dependencies
21:18 - installed.
21:19 - So what I would need
to do, you might think,
21:22 - is say npm install discord.js.
21:25 - But that will only
get me so far.
21:27 - If I download example code--
21:29 - that is, a Node
project already built
21:31 - for me to work on top
of-- all, I have to do
21:34 - is type npm install.
21:36 - What npm install will do is
it will look in package.json.
21:40 - It will see what
the dependencies are
21:42 - and install them.
21:46 - I got an error.
21:48 - Why did I get an error?
21:49 - So this is pretty
unfortunate, but, in a way,
21:52 - I'm super glad this happened
because this is probably
21:54 - going to happen to you.
21:55 - I didn't expect to get an error.
21:57 - But look at all this stuff.
21:58 - I can see, reading through
this, that the error is related
22:01 - to the Node canvas package,
and it's having trouble
22:05 - building and installing it.
22:06 - So first thing, let me just--
22:09 - just for demonstration
purposes--
22:11 - take that out of here.
22:13 - So if I take this out of
here, pretend for the moment
22:16 - that this project didn't depend
on canvas, and run that again,
22:22 - you can see no problem.
22:23 - It installed just fine.
22:25 - I can go back to here.
22:26 - I can see there's a Node
modules directory now,
22:28 - and it has all
the various things
22:30 - like discord.js,
dotenv, and other things
22:33 - that it depends on.
22:34 - I'm putting it back.
22:36 - So it turns out that for
this canvas package--
22:39 - I don't know why I'm
covering this in this video.
22:41 - We'll come back to it later--
22:42 - you need to have some
other stuff installed
22:45 - on your computer for
it to work, namely,
22:47 - this other thing called cairo.
22:50 - And, in fact, if I go over
to the GitHub repository
22:55 - and look at, under Wiki,
under Installation Guides,
23:00 - under Mac OS X, there's more
information about other things
23:05 - I need to install that are
here, which I just did.
23:09 - And then, now, if I do npm
install, everything works.
23:15 - So I didn't want to make this
about how to install canvas.
23:18 - I might come back to
that in a separate video.
23:20 - But I'm sort of glad
this happened here.
23:22 - You can run into issues when
installing Node packages that
23:26 - could be based on compatibility
or other things that
23:28 - have to be installed or
your operating system.
23:31 - And you've just got
to do the detective
23:34 - work of reading through
the documentation
23:36 - or find a helpful and
friendly community that
23:39 - could try to help you out.
23:40 - I hope that The Coding
Train can be that for you.
23:42 - You could certainly ask
in the comments here,
23:45 - but those don't always get seen,
so I would suggest joining The
23:48 - Coding Train Discord, which is
at thecodingtrain.com/discord.
23:52 - And if you have questions and
need support for figuring out
23:54 - how to get your
Node project set up,
23:57 - how to install any dependency
that you want for your project,
24:00 - feel free to ask and
try to get help there.
24:02 - But, now, at least,
I think that I
24:04 - have covered how to create
a Node project from scratch
24:07 - with npm init, how to use Node
modules from built-in ones
24:13 - to ones that are just part
of the npmjs.com ecosystem,
24:17 - as well as some examples of
where things could go wrong.
24:21 - So, next up, guess what?
24:22 - I'm going to be
doing this again,
24:24 - starting with a
fresh, new project
24:26 - to build a very
basic Discord bot.
24:29 - If you want to keep
watching, I'll see you there.
24:31 - [MUSIC PLAYING]

Cleaned transcript:

All right, this video, I'm going to show you how to make a Node.js project and run your first Node.js code. You could just start right here, if you already have an environment set up with terminal and Node installed. If you don't, I just spent quite a bit of time talking through all the various things that I'm using on my computer and what some other options on Windows are, for example, that you could use. So you could go back and check that video. But I'm going to start right now. Let's just, though, make sure if you can type node dash dash version into your terminal window, if you see version 18.18.2, then you're in good shape. You don't actually have to use the exact same version I'm using, but you might like to. That way, we just know we're together in some sort of strange connection between us with the version of Node that we're using. So you might have heard the term runtime. Node.js is a JavaScript runtime. What does that mean? Well, JavaScript is a programming language that needs a context. It needs a place to run. Most of the time certainly, what I use it for is to run JavaScript code inside the web browser. In particular, I'm using the p5.js library. Maybe I'm using the P5.js web editor and making fun p5.js sketches and running that code in the web browser. If you want to execute JavaScript code on your computer outside of the web browser, you need something to run that code. You need a runtime. Node.js is that runtime. So, often, Node.js is thought of as a thing to write web servers. And that's what it is quite often used for, and I have video tutorials that do that. But Node.js is just a platform, if you have it installed, that will execute JavaScript code. And it comes with a set of functions, and packages, and things like that you can use for all sorts of purposes that I'll be getting into to make a Discord bot, for example. So one of the first things you could do with Node is open up a console to that runtime just with the command node itself. And I could just start writing JavaScript, like let message equal it's trying to autofill things for me. This works just like the developer console in the browser. I could say, hey, what is the value of message? So I can test out a lot of things, like, is 5 greater than 2? Yeah, that's true. So don't use this too often. But if you just want to experiment with executing some code that you're writing in real time in an interactive way, you could do that with the node command. To get out of this, I think I need to hit ControlC twice. The other thing I can do with Node is execute the code that's written into a file. So remember I created this choochoo.js file? I can open that up in Visual Studio code with the code command. And what does it have in it? A console.log. So if I want to run the code that's in this file, I go back to terminal, and I can type "node" and the name of the file. And it executed it and console logged choochoo.js. Why did I put .js there? It's like some weird, JavaScript Freudian slip. I meant to just put an exclamation point. Let's run that again. There we go choo choo! Now, more often than not, instead of just using Node for the interactive JavaScript console or to execute the code that's in a single file, you often want to create a Node project, which is a collection of files and packages that, all together, create something. A Discord bot will be the one that I'm going to do in the next videos. To make your first Node project, it is time for the npm command. So we had nvm, which I have now put away, shelved to the side. That was just for installing Node. We have node, which is a window into the interactive console or to run the code that's in a particular file. npm is Node Package Manager. [DRAMATIC MUSIC] It allows you to do all sorts of kinds of things to manage a package or a project in Node. The very first thing you might want to do is npm init to initialize a new Node project. But before I do that, I want to make sure I have a fresh, clean directory. So I could, through the finder, make a new folder. But why not use another Unix shell command make directory? That's a little bit of a longwinded name. You could do something shorter. I used dashes, just because didn't that's what I felt like doing. So I'm going to make that directory. I'm going to cd into that directory. There's something I actually forgot to show you. When you are working with directories through the shell commands, a dot or a dot dot can mean things. So dot typically means this current directory. But if I want to change directory and go back up one level, I can say dot dot. So if I say, cd dot dot here, that's going to take me back up to the desktop. And then if I want to go back into codingtrainnodedemo, cd the name of the directory, and if I want to open this directory in Visual Studio Code, I could say code dot for this current directory. Now, there's no files yet in the directory, so you see nothing listed under the File Explorer in Visual Studio Code. Let's make this folder into a Node project with npm init. Now, I'm going to hit Enter here to show you all the questions it's going to ask me. If you want to just bypass all those questions, you can do just y, which is just like, just say yes to all the questions. But let's take a look at them. This utility will walk you through creating a package.json file. So, actually, what makes a Node project is a file called package.json. You don't actually have to say npm init. You could just create that file. But this command is going to create it for me with, and it's going to make sure I don't have any syntax errors. So it's kind of a useful thing to do. So what is the package name? Eh, yeah. Yes, I'll hit Enter. That looks like a good name. What is the version I'm on? Well, sure, I'm on I'm just on 1.0 already. This is ready to go. I'm going to hit Enter. I could write a description, now, an entry point, which means, what is going to be the main JavaScript file? It's, what is the sketch.js for a P5 project, for this Node project? Index.js is a typical file name for the default JavaScript file. We can leave that. And I can just keep hitting Enter. I mean, these things are important in terms of who's the author, what's the license, and all sorts of things you might want to consider that you put into your package.json file. But this is not your only chance to write things into the package.json file. You can always change it and adapt it later. In fact, if I go into Visual Studio Code, I now see there is a new package.json file, and there it is. I'm going to be returning to this file a lot. Anytime I want to install some other libraries or dependencies I'm going to use for some other kinds of configuration settings for the project, you'll see me return and edit this file manually. But the npm init command is just a mechanism for creating it initially. Now, it says that the main JavaScript file is index.js. I could certainly rename it here, but why not just create a file called index.js? I can use this button here to create a new file. I can call it index.js. And, once again, I could put in just a console.log, just so I have some code that's working. Now, I have what I had before just a JavaScript file with code. But I have a package.json file that goes along with it, setting up the foundation for building out a larger project. Most of the time, if you're working in Node, it's because you also want to import a lot of other packages that allow you to get additional functionality, connect to a web service like Discord, all sorts of possibilities. There's a package called express that is for making web servers that I've used in videos. There's a package called canvas for rendering to making graphics in Node, like you would do in P5. So, briefly, let me just show you how to install and work with Node packages, and then you'll see this again and again as I work on different projects, like making the Discord bot. Your first stop might be the Node.js documentation. So on the Node website, if I go to Docs and, in particular, I want to look at the version 18 docs. And I can start to see there are lots of kinds of different things here that I could look at. I'm going to start with file system. So file system is a package, a library that you can use in Node to access the local files on your computer. If you want to write out a file, an image, or a JSON file, you can use the fs Node package. And you don't have to separately install it because it is a package that is just part of the Node system itself. But in order to use it, I need to import it into my code. Any Node package that you're going to use, you would typically write the import statement at the top. This is one way to do so. I'm going to declare a variable with the name fs. It's going to be a constant because I don't ever want to mess with this. It's going to be the name for whenever I want to access anything from this package. And I can require everything that's in the file system package and put it into this variable. The thing is, this is what is called a CommonJS module. This is the oldfashioned way of importing a separate Node package into your code by using Require. And previous videos that I've done, I used Require. I want to now show you the modern way to do it with an ES module. This line of code is now saying, import star, meaning everything. You're going to see later why I only want to import some particular functions or classes from a library. But, now, I want to import everything from the file system package, and I want to import it as the variable name fs. Let's see what happens when I run this code. Warning to load an ES module, set type module in package.json. So if you're going to, now, be like me and use ES imports in your Node.js projects, you need to make sure that the package.json file is set up in a way that will accommodate that syntax. You can also name your files, apparently, .mjs, but I categorically refuse to do. Somebody convince me in the comments that I should consider that as an option. Instead, I'm going to put type module into package.json. This is just a collection of key value pairs in a JSON file. So I can put it anywhere. And I've got to make sure I have the comma afterwards. And there we go. Now, let me try running this again. It worked, but I'm not using that file system package. Let me just show you a quick thing that I could do with it. [MUSIC PLAYING] I haven't actually tested this code. We'll see if it works. I think I got it right. I'm just showing you, oh, I could use the write file function that's part of the fs package. And what I want to do is I want to write a file called words.txt. And I'm going to create a string of text which has these words that are in this array joined with line breaks. And then I have a callback function for when the file is finished being written. Let's run this and see if it works. Console.log choo choo. Console.log file.written. Look, there's a new file here called words.txt, and look what's in that file. So, thankfully, I did write this code correctly. I happen to know about the right file function. But if I didn't, I could read through this documentation and learn about how it works. Now, there's a lot to the file system package. I did it with a callback. It also supports something called Promises. I used the synchronous version of functions. I've covered some of this stuff in other videos. It's beside the point right here. But what I'm trying to show you is that I can take a builtin package that's part of Node itself, import it into a variable, and then execute the functions on that variable name. More commonly and this will be the case as soon as I wade into the territory of making a Discord bot you will want to import a Node package that is not part of the Node runtime itself. The website to find all of these is npmjs.com. It's what we used to initialize our Node project, and it is also the command that allows you to install other Node packages that are hosted on this platform, made by people all around the internet. [MUSIC PLAYING] So, for example, let's say I wanted to make a Discord bot. Search for Discord bot. And, actually, the first one that came up, discord.js this is the Node package that I wanted to use. So you'll see in a video or two later me installing and working with this package. Another Node package that I think I briefly mentioned is canvas. It brings in a whole graphics API. I wonder if there's a way to work with P5 in Node. That's an interesting discussion that maybe we could have outside of the bounds of this video. But, canvas, I will also be using in a future tutorial to show you how to make a Discord bot that renders images from Node.js. Let's look at a package that I just learned about today called cowsay. Cowsay is a configurable, talking cow. Sounds perfect for us to use. You can see right here on the right are the instructions for how to install the cowsay package npm i cowsay. I like to type in the full word install, just to be quite explicit about it. But just i works fine. It's giving me a little information in the console about it being installed no errors, no vulnerabilities. I'm ready to move forward. Let's take a look now at what's in package.json. Look at this. There is a new property called dependencies. And inside the dependencies is the name of a package called cowsay. And the value for that, key, cowsay, is the version number. So any time you install a Node package, it is automatically added to package.json. You also might notice there's a new directory called Node modules. All of the code and other files associated with the cowsay Node package are now all inside of that Node modules directory. It's actually got a lot of other stuff because packages tend to depend on other packages, and they all start to install each other. You don't really ever have to look inside there. But as soon as you start working with other Node packages, that folder will be created and full of directories and files. I'll be showing you more about how to manage this and think about, what if you want to publish your code somewhere? What do you do with that directory? We'll come to that later as we get into some more actual project examples. But, now, let's just look at, how do we import in our code the cowsay package and use it? Well, your ability to do so is only as good as the documentation. So I've actually not used this package before, so I'm going to try to just look at the documentation and see if I can figure it out. That's kind of what it's like to be out there in the wild working with Node packages. Generally speaking, I like to look for something that's maybe published a little bit more recently, that is actively maintained. I like to also sometimes take a look at the associated GitHub repository. And I can see, how actively is this being maintained? Is there active discussion, recent commits? But I'm not worrying about that too much right now because I'm just trying to use this just for fun, just to demonstrate the idea. So, sometimes, Node packages can actually be installed as global. I will come back to that in the future. I didn't use the g I am not interested in having the oh, I mean, I am interested in it. But I wasn't thinking of this as demonstrating how I could now have the cowsay command universally available to me on my computer through terminal. Instead, I want to use it as a module, meaning I want to import it. Oh, but I don't want to use Require. I want to use an ES module, this new way of doing it. It's not that new, but I'm trying to keep up with the times, man. Ah, import star as cowsay. Now, I've imported that. Now, this you might notice says Typescript, so we're going to glide right by that. This is not a video about how to work with Typescript. So I'm going to look down for some more documentation usage in the browser. I'm not using it in the browser, but this code will show me plain JavaScript, which is what I want to do. It looks like there's a function called say. Let's comment out all this other stuff about saving the file. So I think the way this works is I call the save function, which is part of the cowsay package. And then I give it an object with a property called text and whatever I want the cow to say in this case, moo. I think that's right, based on my quick reading of the documentation. Ah, OK. I think I expected that to console.log something. But, of course, it's not going to. It probably returns something into a variable. Now, let's console.log that output. And let me use constants. This is not a variable I intend to change. Let's see what happens now. Hey, there we go. We got a nice little ASCII art with the cow saying, moo. Fantastic. This is also useful, now, for me to show you, you don't always want to import everything from a particular Node package. So, here, I imported star as cowsay so I could access everything that's under the cowsay package as this variable name, like the say function. But I could import individual functions one at a time into individual variables. So instead of importing everything, I can import the things I want in between curly brackets from the particular Node package. And, now, I don't need this anymore. I can just call the function say that I imported from cowsay. Still works. Apparently, there's other things like think and squirrel that can import. But I'll let you investigate this particular Node package yourself. What I'm trying to show you here is that you can both import packages that are builtin with Node by looking at the Node documentation, like file system. Or, depending on what the needs of your project are, you can find a hopefully wellmaintained and friendly Node package, install it with npm install, and then import the functions and things you need, as long as you put in "type module" into your package.json, you can then do that and run the code and make use of that particular Node package. When you install them, those dependencies will be here, also, in package.json. Before I go, I should also mention that it's quite rare for me to actually begin a new Node project from scratch with npm init. Usually, I am downloading an example Node project that already has a package.json and a bunch of things configured for it. I'm downloading it and building on top of that. So let me show you how that works. For example, I'm teaching a class right now where we're making guess what Discord bots. I made an example Node project. I put it on GitHub under a repo called Discord bot examples. Now, of how you download this repo, whether you're using GitHub Desktop or terminal commands, that's outside the scope of what I'm doing here. But it really does strike me that I need to fill in the gap and maybe do another video that fits in here to look at some basic Git and GitHub commands. But what I'll do right now for you is just show you that, what happens if you just found it and wanted to download it? I can do that by clicking Code and then Download ZIP here. Let me unzip it, and there's a whole folder here called Discord Bot Examples Main, which has a Node project right here. You can see there's already a package.json file, but there's no Node Modules folder. That's important. When I publish this example to GitHub, I don't want to include all the Node modules. It would make it a huge, giant thing to download. I just want my custom code. And the expectation is, when you download it or me, in this case I'm going to now install those packages. And that's what I'm trying to show you here. So first thing back into terminal. Let's cd up a directory. I'm on desktop. What was it called? Discord Bot Examples Main. I already had a folder called Discord Bot Examples because I've been doing this a lot of times. But let's just go into the DiscordBotExamplesmain. Let's ls that. We can see now, I happen to know that the Node project is actually in this subfolder called 01discord.js. It's my intention that this repo would eventually have multiple Node projects in it as different examples. So let's cd into that directory. Let's open this directory in Visual Studio Code. Now, there's a lot of stuff in this directory that I haven't explained yet because I'm essentially going to build this example as a set of tutorials following this video. But let's look at package.json. One thing you'll see here is that look at the dependencies canvas, discord.js, and dotenv. These are very important packages that I will be working with. And before I can do anything with this particular example, here's a very common error you'll get. Let's say I try to just run the Node code right now. It's going to say error module not found, cannot find package discord.js. That is because the project depends on discord.js. The code is doing imports from discord.js a lot of other things, too. But there's no Node modules folder with those dependencies installed. So what I would need to do, you might think, is say npm install discord.js. But that will only get me so far. If I download example code that is, a Node project already built for me to work on top of all, I have to do is type npm install. What npm install will do is it will look in package.json. It will see what the dependencies are and install them. I got an error. Why did I get an error? So this is pretty unfortunate, but, in a way, I'm super glad this happened because this is probably going to happen to you. I didn't expect to get an error. But look at all this stuff. I can see, reading through this, that the error is related to the Node canvas package, and it's having trouble building and installing it. So first thing, let me just just for demonstration purposes take that out of here. So if I take this out of here, pretend for the moment that this project didn't depend on canvas, and run that again, you can see no problem. It installed just fine. I can go back to here. I can see there's a Node modules directory now, and it has all the various things like discord.js, dotenv, and other things that it depends on. I'm putting it back. So it turns out that for this canvas package I don't know why I'm covering this in this video. We'll come back to it later you need to have some other stuff installed on your computer for it to work, namely, this other thing called cairo. And, in fact, if I go over to the GitHub repository and look at, under Wiki, under Installation Guides, under Mac OS X, there's more information about other things I need to install that are here, which I just did. And then, now, if I do npm install, everything works. So I didn't want to make this about how to install canvas. I might come back to that in a separate video. But I'm sort of glad this happened here. You can run into issues when installing Node packages that could be based on compatibility or other things that have to be installed or your operating system. And you've just got to do the detective work of reading through the documentation or find a helpful and friendly community that could try to help you out. I hope that The Coding Train can be that for you. You could certainly ask in the comments here, but those don't always get seen, so I would suggest joining The Coding Train Discord, which is at thecodingtrain.com/discord. And if you have questions and need support for figuring out how to get your Node project set up, how to install any dependency that you want for your project, feel free to ask and try to get help there. But, now, at least, I think that I have covered how to create a Node project from scratch with npm init, how to use Node modules from builtin ones to ones that are just part of the npmjs.com ecosystem, as well as some examples of where things could go wrong. So, next up, guess what? I'm going to be doing this again, starting with a fresh, new project to build a very basic Discord bot. If you want to keep watching, I'll see you there. [MUSIC PLAYING]
