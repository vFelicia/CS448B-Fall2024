With timestamps:

00:00 - i don't know about you but i am so
00:01 - excited for this video i'm sure all
00:03 - you've been
00:04 - doing with your whole life is waiting to
00:05 - watch a video on youtube about
00:07 - trigonometric functions and and if
00:09 - that's true then here you are in the
00:10 - right place
00:11 - so this is the moment in the nature of
00:13 - code series where i really want to take
00:15 - the time to unpack
00:16 - and look at more closely the functions
00:19 - sine
00:20 - cosine and tangent now if you're looking
00:22 - at these in the p5 reference
00:24 - that you would find them under the sort
00:26 - of three letter versions of each of
00:28 - these
00:29 - sine cosine
00:32 - and tan for tangent the way i learned
00:34 - these functions many years ago
00:36 - was with the mnemonic device sohcahtoa
00:39 - it's a
00:39 - quite a strange one s o h
00:43 - c a h t o a
00:47 - and this mnemonic device refers to
00:50 - the sides of a right triangle
00:53 - so here's a right triangle referenced by
00:56 - the fact that one of the angles is 90
00:57 - degrees or in radians
00:59 - pi divided by 2. and the idea is that i
01:02 - want to look at i want to evaluate
01:04 - the sine or the cosine or the tangent of
01:07 - an
01:07 - angle in that right triangle so let's
01:09 - say i have this angle
01:10 - once again represented by the greek
01:12 - letter theta
01:13 - if i want to say sine of theta
01:17 - well the answer to this question the
01:20 - evaluation of this function
01:22 - is embedded right here in the mnemonic
01:23 - device soa
01:26 - sine equals opposite divided by
01:28 - hypotenuse
01:29 - so what does that mean this is an angle
01:32 - what do all the sides of the triangle
01:34 - how do they relate to this angle well
01:36 - this side is opposite
01:39 - this side is adjacent and
01:42 - right over here is the hypotenuse
01:45 - cosine then we can see over here is
01:48 - adjacent divided by hypotenuse
01:52 - and then the last one tangent here is
01:55 - opposite divided by adjacent now when
01:59 - i'm referring to any one of the sides of
02:00 - this triangle
02:01 - i should point out that i'm referring to
02:03 - its length and you'll notice that
02:04 - all of these are really a ratio right
02:07 - sine
02:08 - is the ratio of of opposite to
02:11 - hypotenuse
02:12 - you know it doesn't change whatever the
02:14 - size of the triangle might be
02:15 - as the hypotenuse grows this opposite
02:18 - side grows the angle remains the same so
02:20 - that's sort of important to note
02:21 - as we're looking at how all of these
02:23 - functions are defined
02:24 - so while this way of drawing the right
02:27 - triangle and looking at the definitions
02:29 - of sine cosine and tangent is
02:31 - valuable it's how i learned this stuff
02:33 - in the first place
02:34 - there's another way we can look at these
02:35 - functions that relates more to
02:37 - vectors and a circle and i think that's
02:40 - actually going to prove
02:41 - to be quite useful for me to get into
02:44 - this
02:44 - idea of a polar coordinate so i'm going
02:47 - to just redraw this diagram and look at
02:49 - sine cosine and tangent in a slightly
02:51 - different way and let's see how that
02:52 - goes
02:59 - what i want to start with is this idea
03:01 - of a vector a vector is an entity with
03:04 - magnitude and direction
03:05 - its direction is uh indicated by this
03:08 - particular
03:09 - angle theta its magnitude is the length
03:13 - of this particular arrow now i want to
03:14 - assume
03:15 - right now that the magnitude will just
03:17 - be one
03:18 - this is a unit vector and if i were to
03:20 - take this vector
03:22 - and sort of spin it around the origin
03:24 - point here of this graph
03:26 - i would get a circle if i were to take
03:28 - this vector and
03:29 - divide it into components i would have
03:32 - the x component and i would have the y
03:36 - component and this is something we've
03:37 - been doing constantly
03:38 - i have an x and a y as represented by
03:41 - this sort of position relative to the
03:43 - origin
03:43 - so i'm just going to state something
03:45 - that might suddenly be somewhat
03:46 - surprising to you
03:47 - i'm going to define sine and cosine
03:50 - again
03:50 - i'm going to say sine of theta
03:53 - equals y and cosine of theta
03:57 - equals x and in a way this like
03:59 - shouldn't be so surprising to you
04:01 - opposite over hypotenuse y divided by 1
04:04 - is just y
04:05 - opposite adjacent over hypotenuse x
04:07 - divided by 1 is just
04:08 - x but suddenly we realize that if i have
04:12 - a circle with radius 1 and i take
04:15 - any point along that circle the x and y
04:18 - position of that point
04:19 - is defined by cosine of the angle
04:23 - and sine of the angle so this is another
04:26 - really nice way to be able to look at
04:29 - and sort of think about
04:30 - the trigonometric functions sine and
04:33 - cosine i should also note something
04:34 - really quite exciting here i'm not sure
04:36 - if i'm going to have enough room on the
04:37 - diagram
04:38 - but let's say i draw a line that is
04:41 - perpendicular to this vector
04:43 - and it is tangent tangent to the circle
04:48 - let me extend that out to here it would
04:51 - intersect the x
04:52 - axis here the length of this by the way
04:56 - is tangent of theta now in the end this
04:59 - the tangent function's going to be less
05:01 - useful to us or used less in terms of a
05:04 - lot of the
05:04 - computer graphics and animation examples
05:06 - i want to make but it's really kind of
05:08 - amazing to see
05:09 - this diagram and i'll try to like fly in
05:13 - like a slightly better one that you can
05:14 - look at right now
05:15 - with all with with sine cosine and
05:17 - tangent all defined
05:19 - by this unit circle diagrams like this
05:21 - are going to come up
05:22 - again and again you know we had one in
05:25 - the previous video where i'm trying to
05:26 - get an object to point in the direction
05:28 - that it's moving
05:28 - i'm going to work on a swinging pendulum
05:31 - example which i'm going to need this
05:33 - a lot of the steering behavior examples
05:35 - that are coming up in a later chapter
05:37 - we're going to need this diagram
05:38 - so this you know taking some time to get
05:41 - used to this and thinking about these
05:42 - functions
05:43 - is going to have a lot of practical
05:45 - value for you i hope
05:46 - in future videos and examples and things
05:48 - that you might try to do but
05:49 - this moment right now what i want to use
05:52 - this for
05:52 - is something called polar coordinates
06:02 - so here we are with yet another very
06:04 - similar looking diagram and i want to
06:06 - talk about this point
06:07 - in this cartesian plane as the point
06:10 - four comma three
06:11 - an x y point where the x position is one
06:14 - two three four
06:15 - the y position is one two three this is
06:17 - a cartesian coordinate
06:18 - a polar coordinate is a way of
06:20 - referencing this point
06:22 - not with its horizontal and vertical
06:25 - position but rather by referencing an
06:28 - angle
06:29 - theta and a distance from the origin
06:33 - we'll call that r so a polar coordinate
06:35 - would be
06:36 - r comma theta where a cartesian
06:38 - coordinate
06:39 - is x comma y one of the things that's
06:41 - very useful in graphics programming is
06:43 - to be able to sometimes
06:44 - think in polar coordinates everything
06:46 - you've probably ever done most of the
06:47 - things that i do
06:48 - i think in terms of x y this circle's
06:50 - over here and x y and this rectangle's
06:51 - over here at x y and then i'm going to
06:52 - move this one
06:53 - by this amount of x and this one by this
06:55 - amount of y let's consider this scenario
06:58 - ah let's try to draw a spiral pattern
07:00 - well
07:01 - if i wanted to draw a spiral pattern
07:03 - with x with cartesian coordinates
07:05 - i'd have to think about like well maybe
07:07 - it would
07:08 - start going by this amount of y and this
07:10 - amount of x and then change the x
07:12 - i don't know it'd be hard to do but i
07:14 - can tell you that if i'm thinking about
07:16 - my world
07:17 - and defining all the positions in a
07:18 - world with polar coordinates
07:20 - it wouldn't be so hard to do i could say
07:23 - oh i just want the
07:24 - angle to increase i want the angle to
07:26 - increase over time
07:28 - and by the way while the angle is
07:30 - increasing over time i want the radius
07:32 - to decrease over time
07:34 - so the radius is getting smaller and
07:35 - smaller and smaller
07:37 - while the angle is increasing and
07:40 - increasing and increasing
07:41 - that i didn't draw this particularly
07:42 - correctly like this should be shifted
07:44 - down with the origin in the center of
07:45 - that spiral but i think maybe you get
07:47 - the idea
07:48 - the problem is however all of the
07:51 - drawing functions in p5
07:53 - ellipse line rectangle vertex curve
07:55 - vertex
07:56 - they all require cartesian coordinates
07:59 - you must give them the x y position
08:03 - of the thing you want to draw so if you
08:05 - want to think in polar coordinates
08:07 - but draw on cartesian coordinates you
08:09 - need ultimately
08:10 - some formula to convert between the two
08:13 - and that formula by the way is exactly
08:15 - in the diagram i just drew where i
08:17 - defined sine
08:19 - and cosine as the x and y components of
08:22 - a unit vector
08:28 - if i know the angle then i know x is
08:31 - cosine of that angle
08:32 - and y is sine of that angle that's if r
08:35 - is equal to one
08:36 - but guess what if r is equal to two
08:40 - y has just doubled in size so y would be
08:43 - sine
08:44 - times 2 or in this case r x is cosine
08:47 - times
08:48 - r so this formula is incredibly useful
08:50 - if i'm thinking in terms of polar
08:52 - coordinates
08:53 - but i need to draw with cartesian
08:55 - coordinates i can convert from one to
08:57 - the other
08:58 - just with this formula right here and
09:00 - that's the first thing that i want to do
09:02 - as the code example for this video
09:04 - here's my starting point i've got a very
09:05 - basic p5.js sketch just has a circle
09:08 - uh translated the origins translated to
09:10 - the center the circle has a radius of
09:12 - 150 and a 400 by 400 canvas
09:14 - so i want to be able to draw a dot or a
09:17 - point
09:17 - on the edge of that circle
09:23 - all right i have my point on the edge of
09:25 - the circle and i know exactly how to
09:26 - position it there
09:27 - because i can just say oh the radius is
09:29 - 150 so if y is zero
09:31 - it's over there on that side at 150
09:34 - x and if i wanted to say it's negative
09:36 - 150 oh i've now got it on the other side
09:39 - or i could probably like set x equal to
09:41 - zero
09:42 - and i could set y to 150 and i've got it
09:44 - on the bottom but what if i want to put
09:45 - it somewhere else on the circle
09:47 - how do i find that point if i only have
09:50 - cartesian coordinates i mean i could
09:51 - kind of guess
09:52 - like 75 comma 75
09:56 - oh no it's got to be a little further
09:58 - out right the 95
09:59 - comma 95 i don't know i'm getting closer
10:03 - this is where polar to cartesian
10:06 - coordinates comes in
10:08 - i can say i want a position on the
10:10 - circle of radius
10:11 - r at a given angle and then use this
10:14 - formula
10:14 - to get my x and y rather than have to
10:17 - sort of just magically know it or guess
10:19 - it
10:19 - correctly
10:24 - and there we go we can see that now with
10:27 - an angle of pi
10:28 - divided by 4 which is 45 degrees i've
10:30 - now got the x position and the y
10:32 - position
10:33 - using the polar to cartesian formula
10:35 - once again it's flipped because y
10:37 - points down i'll feel a little better if
10:39 - i just say negative pi
10:40 - divided by four and then of course what
10:42 - i might more likely want to see to
10:44 - demonstrate this idea
10:45 - what if i take the angle set it to zero
10:49 - and make it a global variable and then
10:52 - angle plus equals 0.01
10:56 - and suddenly i have my circle moving
10:58 - around
10:59 - that path this probably looks very
11:02 - familiar right
11:03 - this is exactly where we started this
11:06 - chapter 3
11:06 - this idea of angles and rotations now we
11:09 - see that
11:10 - while yes i could use translate and
11:12 - rotate i can also
11:14 - get the exact same behavior of moving
11:16 - rotating so to speak
11:18 - this dot around the origin point by
11:20 - using
11:21 - the trigonometric functions sine and
11:23 - cosine and polar to cartesian
11:25 - coordinate transformation let's take
11:27 - this one step further
11:28 - and have the radius also be a global
11:32 - variable
11:33 - and i will have the radius shrink over
11:36 - time
11:39 - very hard to see so what i'm going to do
11:41 - is i'm going to
11:42 - not draw this circle i'm going to take
11:46 - the background and put it in setup
11:49 - increase the speed of the angle and the
11:54 - radius
12:00 - i can have the radius change itself
12:02 - randomly
12:04 - maybe i will put the background back in
12:07 - draw but just give it a little bit of
12:08 - transparency so that it's uh
12:10 - fading out the trail we can see oh it's
12:12 - moving around that path of a circle
12:14 - but kind of like with a little bit of
12:16 - noise to how it's moving
12:17 - another really common application of
12:19 - polar coordinates is
12:21 - drawing a circular shape yourself having
12:23 - control
12:24 - over all of the points all of the
12:26 - vertices of that circular shape
12:28 - rather than just relying on the ellipse
12:29 - function in p5 returning back to the
12:32 - code that i started with was just
12:33 - drawing a circle
12:34 - could i draw that exact same circle but
12:37 - instead of using the p5 function circle
12:39 - could i set all the vertices of that
12:42 - circular shape
12:42 - individually with begin shape and shape
12:45 - and vertex
12:48 - now i can write a for loop starting with
12:50 - an angle of 0
12:52 - and iterate all the way up to 2 pi
12:55 - and set a vertex associated with all the
12:58 - angles along that path
13:02 - now i'm arbitrarily incrementing the
13:04 - angle by 0.1 radians every time
13:06 - we'll see what that does now i need to
13:08 - apply my polar to cartesian coordinate
13:10 - transformation
13:15 - and look what i get now notice there's a
13:17 - little hole there it's because
13:19 - point one doesn't divide evenly into two
13:21 - pi i could be more thoughtful about how
13:24 - what number i choose there but i can
13:25 - also right here just add the close
13:27 - keyword into end shape and we'll make
13:28 - sure to close that shape
13:30 - now this didn't really this is that
13:31 - circle's there i don't know if it's if
13:33 - you can really
13:34 - distinguish it from the p5 circle that
13:36 - was drawn
13:37 - but just to note for a second if i
13:39 - change this to like point five
13:41 - now we can really start to see and this
13:43 - this can be a fun sort of value to play
13:45 - with
13:45 - if i call this value like increment for
13:48 - incrementing the angle
13:50 - and i say it's a value mapped to the
13:53 - mousex location
13:55 - which which goes between zero and width
13:58 - and i want it to be between like 0.01
14:01 - it's very important that i don't have
14:02 - that value ever be zero
14:04 - because if i ever have that value zero
14:06 - this loop would be infinite
14:07 - and then all the way up to let's just
14:09 - say uh
14:10 - pi and then if i put
14:13 - increment in here we can see
14:16 - as i move the mouse this sort of circle
14:20 - unfurls and i forgot that i had this
14:22 - like
14:23 - background uh alpha on i'll just take
14:26 - that off for a second
14:27 - you can see like here and maybe actually
14:29 - i think i almost would like to look at
14:30 - it the other dire
14:31 - other way around
14:35 - so as the mouse enters this circle
14:38 - starts to
14:40 - unfurl the polygon unfurls all the way
14:42 - so you can sort of see
14:44 - what those possibilities are i can also
14:46 - start to do really interesting things
14:48 - like let me just fix the increment to a
14:50 - fixed value right now
14:52 - what if for every value of r i offset it
14:55 - by some random amount
14:57 - so i'm going to say r1 equals r plus
14:59 - some random offset by 10 pixels
15:02 - and then i'm going to use r1 here
15:05 - instead of the core
15:06 - r now we can see i've created this
15:08 - almost electrical
15:10 - electrically charged uh circle um and i
15:13 - you know let me add no loop
15:15 - just to um freeze it for a second so you
15:18 - can see what that looks like you can
15:19 - imagine this being the design
15:20 - for an asteroid in the asteroids game as
15:23 - i was kind of referring to in a previous
15:24 - video
15:25 - you know what these values are will make
15:27 - a very big difference
15:28 - in terms of what the quality is i have a
15:31 - whole video about doing this kind of
15:33 - path
15:33 - with purlin noise we're about to see how
15:35 - i can make wave patterns
15:37 - so what kinds of sort of undulating
15:39 - oscillating blobby patterns
15:40 - can you create by drawing your own
15:43 - circular path and setting the vertices
15:44 - with some algorithm of your own
15:46 - there are a lot of possibilities here so
15:49 - that's really the exercise i offer to
15:51 - you
15:51 - at the end of this video what kinds of
15:54 - shapes
15:54 - can you generate through thinking about
15:58 - polar coordinates rather than cartesian
16:01 - coordinates in the next video i'm just
16:03 - going to keep going with the sine
16:05 - function you've probably heard the term
16:06 - sine wave before why do we think of
16:09 - waves and sine and cosine
16:10 - that's going to actually lead us to the
16:12 - ability to model simple harmonic motion
16:15 - the oscillation an oscillating behavior
16:17 - and so that's what i'm going to look at
16:18 - in the next video
16:20 - and so on and so forth so stay with me
16:22 - if you like and i'll see you there

Cleaned transcript:

i don't know about you but i am so excited for this video i'm sure all you've been doing with your whole life is waiting to watch a video on youtube about trigonometric functions and and if that's true then here you are in the right place so this is the moment in the nature of code series where i really want to take the time to unpack and look at more closely the functions sine cosine and tangent now if you're looking at these in the p5 reference that you would find them under the sort of three letter versions of each of these sine cosine and tan for tangent the way i learned these functions many years ago was with the mnemonic device sohcahtoa it's a quite a strange one s o h c a h t o a and this mnemonic device refers to the sides of a right triangle so here's a right triangle referenced by the fact that one of the angles is 90 degrees or in radians pi divided by 2. and the idea is that i want to look at i want to evaluate the sine or the cosine or the tangent of an angle in that right triangle so let's say i have this angle once again represented by the greek letter theta if i want to say sine of theta well the answer to this question the evaluation of this function is embedded right here in the mnemonic device soa sine equals opposite divided by hypotenuse so what does that mean this is an angle what do all the sides of the triangle how do they relate to this angle well this side is opposite this side is adjacent and right over here is the hypotenuse cosine then we can see over here is adjacent divided by hypotenuse and then the last one tangent here is opposite divided by adjacent now when i'm referring to any one of the sides of this triangle i should point out that i'm referring to its length and you'll notice that all of these are really a ratio right sine is the ratio of of opposite to hypotenuse you know it doesn't change whatever the size of the triangle might be as the hypotenuse grows this opposite side grows the angle remains the same so that's sort of important to note as we're looking at how all of these functions are defined so while this way of drawing the right triangle and looking at the definitions of sine cosine and tangent is valuable it's how i learned this stuff in the first place there's another way we can look at these functions that relates more to vectors and a circle and i think that's actually going to prove to be quite useful for me to get into this idea of a polar coordinate so i'm going to just redraw this diagram and look at sine cosine and tangent in a slightly different way and let's see how that goes what i want to start with is this idea of a vector a vector is an entity with magnitude and direction its direction is uh indicated by this particular angle theta its magnitude is the length of this particular arrow now i want to assume right now that the magnitude will just be one this is a unit vector and if i were to take this vector and sort of spin it around the origin point here of this graph i would get a circle if i were to take this vector and divide it into components i would have the x component and i would have the y component and this is something we've been doing constantly i have an x and a y as represented by this sort of position relative to the origin so i'm just going to state something that might suddenly be somewhat surprising to you i'm going to define sine and cosine again i'm going to say sine of theta equals y and cosine of theta equals x and in a way this like shouldn't be so surprising to you opposite over hypotenuse y divided by 1 is just y opposite adjacent over hypotenuse x divided by 1 is just x but suddenly we realize that if i have a circle with radius 1 and i take any point along that circle the x and y position of that point is defined by cosine of the angle and sine of the angle so this is another really nice way to be able to look at and sort of think about the trigonometric functions sine and cosine i should also note something really quite exciting here i'm not sure if i'm going to have enough room on the diagram but let's say i draw a line that is perpendicular to this vector and it is tangent tangent to the circle let me extend that out to here it would intersect the x axis here the length of this by the way is tangent of theta now in the end this the tangent function's going to be less useful to us or used less in terms of a lot of the computer graphics and animation examples i want to make but it's really kind of amazing to see this diagram and i'll try to like fly in like a slightly better one that you can look at right now with all with with sine cosine and tangent all defined by this unit circle diagrams like this are going to come up again and again you know we had one in the previous video where i'm trying to get an object to point in the direction that it's moving i'm going to work on a swinging pendulum example which i'm going to need this a lot of the steering behavior examples that are coming up in a later chapter we're going to need this diagram so this you know taking some time to get used to this and thinking about these functions is going to have a lot of practical value for you i hope in future videos and examples and things that you might try to do but this moment right now what i want to use this for is something called polar coordinates so here we are with yet another very similar looking diagram and i want to talk about this point in this cartesian plane as the point four comma three an x y point where the x position is one two three four the y position is one two three this is a cartesian coordinate a polar coordinate is a way of referencing this point not with its horizontal and vertical position but rather by referencing an angle theta and a distance from the origin we'll call that r so a polar coordinate would be r comma theta where a cartesian coordinate is x comma y one of the things that's very useful in graphics programming is to be able to sometimes think in polar coordinates everything you've probably ever done most of the things that i do i think in terms of x y this circle's over here and x y and this rectangle's over here at x y and then i'm going to move this one by this amount of x and this one by this amount of y let's consider this scenario ah let's try to draw a spiral pattern well if i wanted to draw a spiral pattern with x with cartesian coordinates i'd have to think about like well maybe it would start going by this amount of y and this amount of x and then change the x i don't know it'd be hard to do but i can tell you that if i'm thinking about my world and defining all the positions in a world with polar coordinates it wouldn't be so hard to do i could say oh i just want the angle to increase i want the angle to increase over time and by the way while the angle is increasing over time i want the radius to decrease over time so the radius is getting smaller and smaller and smaller while the angle is increasing and increasing and increasing that i didn't draw this particularly correctly like this should be shifted down with the origin in the center of that spiral but i think maybe you get the idea the problem is however all of the drawing functions in p5 ellipse line rectangle vertex curve vertex they all require cartesian coordinates you must give them the x y position of the thing you want to draw so if you want to think in polar coordinates but draw on cartesian coordinates you need ultimately some formula to convert between the two and that formula by the way is exactly in the diagram i just drew where i defined sine and cosine as the x and y components of a unit vector if i know the angle then i know x is cosine of that angle and y is sine of that angle that's if r is equal to one but guess what if r is equal to two y has just doubled in size so y would be sine times 2 or in this case r x is cosine times r so this formula is incredibly useful if i'm thinking in terms of polar coordinates but i need to draw with cartesian coordinates i can convert from one to the other just with this formula right here and that's the first thing that i want to do as the code example for this video here's my starting point i've got a very basic p5.js sketch just has a circle uh translated the origins translated to the center the circle has a radius of 150 and a 400 by 400 canvas so i want to be able to draw a dot or a point on the edge of that circle all right i have my point on the edge of the circle and i know exactly how to position it there because i can just say oh the radius is 150 so if y is zero it's over there on that side at 150 x and if i wanted to say it's negative 150 oh i've now got it on the other side or i could probably like set x equal to zero and i could set y to 150 and i've got it on the bottom but what if i want to put it somewhere else on the circle how do i find that point if i only have cartesian coordinates i mean i could kind of guess like 75 comma 75 oh no it's got to be a little further out right the 95 comma 95 i don't know i'm getting closer this is where polar to cartesian coordinates comes in i can say i want a position on the circle of radius r at a given angle and then use this formula to get my x and y rather than have to sort of just magically know it or guess it correctly and there we go we can see that now with an angle of pi divided by 4 which is 45 degrees i've now got the x position and the y position using the polar to cartesian formula once again it's flipped because y points down i'll feel a little better if i just say negative pi divided by four and then of course what i might more likely want to see to demonstrate this idea what if i take the angle set it to zero and make it a global variable and then angle plus equals 0.01 and suddenly i have my circle moving around that path this probably looks very familiar right this is exactly where we started this chapter 3 this idea of angles and rotations now we see that while yes i could use translate and rotate i can also get the exact same behavior of moving rotating so to speak this dot around the origin point by using the trigonometric functions sine and cosine and polar to cartesian coordinate transformation let's take this one step further and have the radius also be a global variable and i will have the radius shrink over time very hard to see so what i'm going to do is i'm going to not draw this circle i'm going to take the background and put it in setup increase the speed of the angle and the radius i can have the radius change itself randomly maybe i will put the background back in draw but just give it a little bit of transparency so that it's uh fading out the trail we can see oh it's moving around that path of a circle but kind of like with a little bit of noise to how it's moving another really common application of polar coordinates is drawing a circular shape yourself having control over all of the points all of the vertices of that circular shape rather than just relying on the ellipse function in p5 returning back to the code that i started with was just drawing a circle could i draw that exact same circle but instead of using the p5 function circle could i set all the vertices of that circular shape individually with begin shape and shape and vertex now i can write a for loop starting with an angle of 0 and iterate all the way up to 2 pi and set a vertex associated with all the angles along that path now i'm arbitrarily incrementing the angle by 0.1 radians every time we'll see what that does now i need to apply my polar to cartesian coordinate transformation and look what i get now notice there's a little hole there it's because point one doesn't divide evenly into two pi i could be more thoughtful about how what number i choose there but i can also right here just add the close keyword into end shape and we'll make sure to close that shape now this didn't really this is that circle's there i don't know if it's if you can really distinguish it from the p5 circle that was drawn but just to note for a second if i change this to like point five now we can really start to see and this this can be a fun sort of value to play with if i call this value like increment for incrementing the angle and i say it's a value mapped to the mousex location which which goes between zero and width and i want it to be between like 0.01 it's very important that i don't have that value ever be zero because if i ever have that value zero this loop would be infinite and then all the way up to let's just say uh pi and then if i put increment in here we can see as i move the mouse this sort of circle unfurls and i forgot that i had this like background uh alpha on i'll just take that off for a second you can see like here and maybe actually i think i almost would like to look at it the other dire other way around so as the mouse enters this circle starts to unfurl the polygon unfurls all the way so you can sort of see what those possibilities are i can also start to do really interesting things like let me just fix the increment to a fixed value right now what if for every value of r i offset it by some random amount so i'm going to say r1 equals r plus some random offset by 10 pixels and then i'm going to use r1 here instead of the core r now we can see i've created this almost electrical electrically charged uh circle um and i you know let me add no loop just to um freeze it for a second so you can see what that looks like you can imagine this being the design for an asteroid in the asteroids game as i was kind of referring to in a previous video you know what these values are will make a very big difference in terms of what the quality is i have a whole video about doing this kind of path with purlin noise we're about to see how i can make wave patterns so what kinds of sort of undulating oscillating blobby patterns can you create by drawing your own circular path and setting the vertices with some algorithm of your own there are a lot of possibilities here so that's really the exercise i offer to you at the end of this video what kinds of shapes can you generate through thinking about polar coordinates rather than cartesian coordinates in the next video i'm just going to keep going with the sine function you've probably heard the term sine wave before why do we think of waves and sine and cosine that's going to actually lead us to the ability to model simple harmonic motion the oscillation an oscillating behavior and so that's what i'm going to look at in the next video and so on and so forth so stay with me if you like and i'll see you there
