With timestamps:

00:00 - (train whistle)
00:01 - - Hello, and welcome to a
holiday coding challenge.
00:04 - This coding challenge is a fundraiser
00:06 - for Support P5 this Giving Season.
00:08 - The Processing Foundation
is the foundation
00:12 - that maintains the open source
software projects Processing,
00:15 - p5 JS, Python Mode for Processing,
00:18 - Processing for the Raspberry
Pi, and Processing for Android.
00:20 - And, if you use any of those tools
00:22 - in your professional life,
as a student, as a teacher,
00:25 - and you have the means
and can donate, please do.
00:28 - There's a link in this video's description
00:30 - for how to donate.
00:31 - Also, you can donate directly on YouTube.
00:33 - Right here, somewhere over there, I think,
00:37 - is where you can donate on YouTube.
00:39 - All of the information about
Support P5 is on this post.
00:43 - There are wonderful
artworks that you can get
00:45 - as giveaways from Maya
Man, from Kate Hollenbach,
00:50 - from The Coding Train itself.
00:52 - That's me.
00:53 - And Cy, The Coding Train community
manager, designed a zine.
00:56 - Saskia Freeke and more, so please donate.
00:59 - The giveaways are available
through this webpage.
01:02 - And, of course, we'll
gladly accept your donation
01:04 - through the donate link right
here on this page itself.
01:09 - Thank you to Violet,
who suggested this idea
01:11 - as the holiday coding challenge.
01:12 - This is a kaleidoscope
painter that I found online
01:15 - on this website, permadi.com.
01:17 - Incidentally, this website has a lot
01:19 - of wonderful tutorials
and other information.
01:21 - Go check it out.
01:22 - But, we were thinking,
01:24 - "Could this be used to create a snowflake?
01:26 - "Could I make something like
this where you could paint
01:28 - "in p5 and make a snowflake pattern
01:31 - "with six fold symmetry
because we all know
01:34 - "that snowflakes have six fold symmetry."
01:37 - Which would give it some symmetry
01:38 - and then rotate it also around six times,
01:42 - and I think I'm pretty sure
that's what that is happening
01:46 - in that animation that I
showed at the beginning.
01:48 - So, this should be, hopefully,
pretty beginner friendly.
01:50 - If you're new to coding, I'm gonna do this
01:52 - right here in the p5 web editor.
01:54 - And, if you're using the p5 web editor,
01:56 - that's because the Processing Foundation
01:58 - maintains the p5 web editor.
02:00 - It's a project created
by Cassie Tarakajian,
02:02 - and your donations are helping
to support the web editor,
02:05 - the p5 library, and more throughout 2020
02:09 - as we go into this new year, new decade.
02:12 - So, first, let's begin by
just creating a program where,
02:15 - when I click the mouse, I draw something.
02:18 - And, this is actually
quite easy to do because,
02:21 - in the draw loop itself p5 has set up,
02:25 - which will create a canvas,
you can see it right there.
02:29 - That's 400 by 400 pixels.
02:31 - The draw function loops
over and over again
02:32 - and is always drawing a black background.
02:34 - Black because of the number
zero in the background function.
02:37 - So, if I say stroke,
which sets a stroke color,
02:41 - and I say line between
mouse X, mouse Y, those are
02:46 - the coordinates where your
mouse is actually in the sketch.
02:50 - And, I wanna draw a line from there
02:53 - to where I previously was,
where the mouse previously was.
02:56 - So, I could use some kind of variable
02:57 - to keep track of the previous mouse
02:59 - and know the current mouse and update it.
03:00 - But, guess what.
03:02 - (dings)
03:03 - P5 has that built in for
you, and I can say P mouse X
03:05 - for previous mouse X, and P
mouse Y for previous mouse Y.
03:09 - So, if I run this again.
03:12 - (laughs)
03:14 - No!
03:15 - What have I done wrong?
03:16 - Oh, I know what!
03:19 - I've forgotten everything
that I ever learned
03:21 - in the last 20 years.
03:23 - (laughs)
03:24 - Look, there's the little line.
03:26 - Do you see it?
03:27 - There it is.
03:28 - I'm drawing the background
over and over again in draw.
03:31 - (sighs)
03:33 - Classic.
03:34 - So, I've got to move this into setup
03:36 - because I only wanna draw
the background once so that,
03:39 - now, the line always appears,
so there I am drawing.
03:42 - So, some things I could do.
03:43 - I can say, "If mouse is pressed,
03:46 - "I only wanna draw that line
if I am pressing the mouse."
03:50 - That's going to allow me
to do things like this.
03:54 - And then, we can start to
think about the thickness
03:56 - of the line, so there's a lot
of different ways I could.
04:01 - Maybe I'll have that be pro
line noise or something,
04:02 - but I'm just gonna make it
a little thicker right now.
04:05 - Stroke weight, four.
04:10 - Oh, let me auto refresh here.
04:13 - So, that's thicker.
04:14 - Let's do this, let's do this.
04:16 - The speed of how I move the mouse is
04:18 - how thick the line will be,
so slower will be thicker.
04:21 - Faster will be thinner.
04:23 - I think that makes sense.
04:24 - I think that's probably
04:24 - what that kaleidoscope
picture I showed does.
04:27 - I can find the distance
04:29 - between the current mouse
and the previous mouse.
04:32 - That's, you know, basically a value
04:36 - that indicates to me the speed.
04:37 - How far have I gone on
each cycle through draw?
04:40 - And then, I can say, "The stroke
weight is map the distance,
04:45 - "which could be anywhere from zero, right,
04:48 - "if I'm not moving at
all, all the way up."
04:51 - I mean, it could.
04:52 - Let's just give it, sort of,
think about a maximum range
04:54 - of something like 20, and I'm
gonna invert that, 20 down.
04:58 - I'm always going to have a
stroke weight of at least one,
05:01 - so let's see what happens there.
05:04 - So, as I move.
05:09 - Oh, well, of course, then
05:11 - (laughs)
05:11 - I'm making all of these
kind of crazy mistakes.
05:13 - Then, I also need to actually use
05:15 - the stroke weight variable in
the stroke weight function.
05:21 - So, if I move really
fast, it's really thick.
05:24 - Well, I kind of wanna interpolate that
05:26 - so that it's a little
smoother, but this'll do.
05:28 - This'll do just fine.
05:31 - All right, so here's the thing.
05:33 - This was the easy part, right.
05:36 - This is the easy part.
05:37 - I just want to draw using the mouse.
05:40 - Now, I need to figure out
how to get that symmetry.
05:43 - I think maybe we'll wanna use
05:44 - the whiteboard for this for a second.
05:45 - So, we have a canvas.
05:49 - That's 400 by 400.
05:51 - We can see here this idea
05:52 - of a snowflake with six fold symmetry.
05:54 - One, two, three, four, five, six.
05:57 - So, the angle that's important here is
06:00 - this particular angle, right,
which is 60 degrees I believe.
06:05 - So, lets say, for the sake of argument,
06:07 - I'm using the mouse to
draw over here, so mouse X.
06:14 - Mouse Y is happening over here.
06:16 - What I wanna do is draw
the same thing here,
06:20 - and here, and here, and
here, kind of rotating along.
06:24 - But, also, I think I
wanna flip it each time.
06:28 - In this case, I think
that's going to create
06:31 - where you can see that these
two are kind of pointing
06:33 - at each other, so I think there's
06:35 - also gonna be some aspect of flipping it.
06:38 - No wonder this, by the way.
06:39 - There's a big mistake here.
06:40 - No wonder this was going wonky.
06:43 - Code Bulletin pointed this out.
06:45 - And, also, maybe other people in the chat.
06:48 - P mouse Y, that's why it was
kind of doing some weird stuff.
06:52 - Yeah, this is much more
like what I expected.
06:55 - Let's try this.
06:57 - So, just as the simplest
way of thinking about it
06:59 - for a second, let's go, "I
goes from zero to six, right."
07:07 - I wanna repeat what I'm doing six times.
07:10 - I think all this is
also going to be easier
07:13 - if I translate to the center,
07:17 - so I'm gonna need to use
translate and rotate.
07:21 - Translate and rotate.
07:27 - Translate takes as its
arguments an X and a Y,
07:31 - and rotate takes as its argument an angle.
07:35 - And, what this allows
me to do is reposition
07:38 - wherever the origin is, so I want
07:40 - the origin to be in the center.
07:41 - And, I'm gonna draw a relative to that,
07:43 - but then I can also
rotate what I'm drawing
07:46 - to also duplicate it here,
rotate to duplicate it here,
07:49 - rotate to duplicate it here.
07:51 - I kind of glossed over that
very quickly, but I will refer
07:54 - you to my p5 JS
transformations video tutorial,
07:57 - which goes through translate
and rotate in much more detail.
08:00 - So, I'm also going to now
create a variable called MX,
08:04 - which is mouse X minus
minus width divided by two.
08:07 - And, MY and PMX and PMY.
08:12 - Ultimately, what I want is
I want the mouse position
08:16 - relative to the center, so the easiest way
08:18 - for me to do that is just
store it in separate variables.
08:25 - So, I've got the same code here.
08:27 - Same thing's happening.
08:29 - It's just everything's
now being drawn relative
08:30 - to the center, and I am
also drawing it six times.
08:36 - But, I'm drawing it six
times in the same place.
08:38 - I'm gonna add some alpha
so we see what's going on.
08:41 - Could I now say, "Rotate
by I times 60 degrees"?
08:48 - Because what I wanna do
is, first, draw it here,
08:52 - then here, then here,
and I wanna rotate one,
08:55 - two, three, four, five, six times.
08:58 - Oh, and let's set angle mode to degrees
09:02 - because I'm thinking, in
terms of degrees, 60 degrees.
09:05 - I could think in terms of radians,
09:07 - and that would be pi divided by three.
09:09 - There we go.
09:11 - Now, this is isn't exactly
doing what I would expect.
09:19 - It's the right idea, interesting.
09:21 - Getting kind of a little bit
of a kaleidoscope feel to it.
09:24 - I think what I actually want is
09:26 - to bisect each one of
these and, basically,
09:35 - take whatever I'm drawing
here and invert it.
09:40 - How can I draw this?
09:42 - I'm so bad at drawing.
09:43 - Invert it there, right.
09:44 - I need, actually, to create something
09:47 - that feels much more
like a snowflake pattern.
09:49 - What I'm drawing, essentially,
is this element here
09:54 - that's on this side of the snowflake.
09:55 - So, I need to flip it over, draw it here,
09:57 - flip it, draw it here, so I actually
09:58 - wanna rotate not six times but 12 times.
10:03 - And, each time, I want
to flip what I'm drawing.
10:05 - So, I want to rotate 12 times.
10:09 - And, this, by the way,
10:10 - I should have the angle,
360 divided by 12.
10:15 - I mean, this is kind of crazy
10:16 - that I'm having these hard coded values.
10:20 - There, so this is what I want.
10:22 - This is much more close to what I want,
10:25 - but what I want to see now is, also,
10:28 - I want to invert every other one.
10:31 - And, Simon is making a good suggestion
10:33 - in the chat, to draw a line.
10:35 - So, I think it actually would be
10:36 - quite useful for me to do that.
10:38 - I'm gonna draw more than
just the background,
10:40 - just so we sort of see.
10:41 - I wanna just draw these lines.
10:44 - Woo, something weird is going on.
10:46 - (buzzing)
10:47 - I've done something ridiculous.
10:48 - I've made a pretty serious error.
10:51 - I forgot.
10:52 - I mean, I should know this.
10:53 - I should know all of
this stuff, but even I.
10:55 - I've done this so many
times I just forget it.
10:58 - Transformations and the
word transformation applies
11:00 - to any translation, rotation, or scale.
11:02 - I'm gonna scale in a minute.
11:04 - They're cumulative.
11:05 - So, if I say rotate by 30
degrees, I'm gonna do this.
11:12 - So, rotate I times 30.
11:14 - Rotate 30 degrees.
11:16 - Now, well, rotate zero.
11:18 - Then, I is one, rotate one times 30 is 30.
11:21 - Then, I is two, rotate two times 30 is 60.
11:24 - Ah!
11:24 - I just wanna rotate 30 each time.
11:26 - I was thinking about how far,
11:28 - from the beginning, I wanna rotate.
11:29 - But, ultimately, of course, I
just wanna rotate that amount.
11:34 - Let's create a variable.
11:37 - We'll call it symmetry,
11:40 - and we're gonna have
12 fold symmetry here.
11:43 - I really want six fold symmetry,
11:44 - but each six fold symmetry
segment will be symmetrical.
11:51 - So, I'm gonna say, "Angle
equals 360 divided by symmetry."
11:56 - I goes from zero to symmetry.
11:58 - And then, I'm just gonna
rotate by the angle.
12:01 - There we go.
12:02 - That's what I'm looking to do.
12:05 - And then, the same thing.
12:07 - And, this, I think, can just be
12:08 - a global variable for right now.
12:11 - That way, I can just do
the same exact thing here.
12:17 - And, we see this is what
I was looking to see,
12:20 - something more like this.
12:22 - Now, this is one, two, three,
12:24 - four, five, six, seven, eight, nine, 10.
12:27 - We should count, we should get 12.
12:28 - So, let me see if I can
do that extra flipping.
12:32 - Another transformation
function that I can use,
12:35 - beside translate and rotate,
is a function called scale.
12:41 - Now, typically, we think of scale
12:42 - as scaling something bigger or smaller.
12:45 - So, for example, if I were
to use the ellipse function
12:47 - to draw a circle and,
right before that, I were
12:49 - to say scale is two, that
means double the size or 200%.
12:54 - So, it would look, yeah.
12:55 - I'm not gonna.
12:56 - In this case, it's double
the radius, so I would have
12:58 - something like an ellipse
that looks like this.
13:00 - But, scale, first of all, you
can scale on different axes.
13:04 - So, I could say, "2, 1."
13:06 - And, if I did that, it would
just scale the horizontal axis
13:10 - but not the vertical, would
still be the same scale.
13:13 - So, my ellipse would look like this.
13:14 - It would be stretched horizontally.
13:17 - Incidentally, I can also apply
a negative number to scale.
13:21 - If I apply a negative number to scale,
13:23 - then it's going to draw it
in the opposite direction.
13:27 - It's going to invert it,
which, in the case of a circle,
13:29 - doesn't matter because it's
symmetrical along the axis.
13:32 - But, if I were drawing
something like a triangle,
13:36 - then, if I had negative two, I would see
13:38 - the triangle suddenly be drawn like this.
13:42 - What I thought would make sense
is for me to, for any odd.
13:48 - I mean, it doesn't really matter.
13:49 - I don't know if I want odd or even.
13:52 - For every other one, if I
module is, is zero or one,
13:56 - I'm not sure which one, to
invert the scale horizontally.
14:00 - So, in that, say, "Scale,
negative one, one."
14:04 - But, once again, this is
happening cumulatively.
14:07 - So, in this case, maybe what I
wanna do just to allow myself
14:13 - to be less confused is to add push and pop
14:16 - so that any rotations or
translations or scales
14:20 - that happen within each,
and not outside the loop,
14:24 - right inside the loop, for
each section, are contained.
14:29 - And so, in this case,
I would wanna go back
14:31 - to rotating I times the angle.
14:33 - So, now, they're not
cumulative because I'm saving
14:36 - the transformation state
in its original way,
14:39 - scaling by inverting it,
drawing, sorry, rotating.
14:45 - Do I wanna scale before rotate?
14:48 - Rotate?
14:48 - I think I wanna rotate and then flip it.
14:51 - We're gonna find out.
14:53 - Okay, so this is kind
of what I was expecting,
14:57 - except I'm not actually
seeing where I'm drawing
15:00 - because I think this should be one.
15:04 - Yeah, there we go.
15:06 - This is more like what
I was expecting, there.
15:11 - Is this a way to draw a snowflake?
15:13 - (laughs)
15:14 - I feel like these are snowflake like.
15:16 - One, two, three.
15:17 - But, really getting 12.
15:20 - If I just change this now to six,
15:25 - did I overthink the symmetry?
15:27 - And, actually, this is now
gonna give me six fold symmetry.
15:30 - Yeah, okay, I overthought
the symmetry, I guess.
15:36 - Oh, wait, this has to be symmetry.
15:41 - All right, I think we've
made kaleidoscope snowflakes.
15:45 - Basically, I see.
15:47 - Look at this.
15:49 - Rotate by the angle, push, pop,
15:58 - and draw the line twice.
16:10 - And, the second time with it flipped.
16:13 - There we go.
16:15 - Ah!
16:17 - Finally.
16:20 - Tada!
16:22 - Okay, what we have now.
16:25 - Now, Zachary is suggesting, yeah.
16:27 - I think this would make a lot more sense,
16:30 - to give a lot more space
now, and here we go.
16:36 - So, what I would like to
do, and then the next thing
16:40 - I wanna do is add a
button to save the image.
16:48 - Button mouse pressed, and save snowflake.
16:56 - And, I'm gonna write a little function.
16:57 - Save snowflake, that, and
let's make a clear button also.
17:03 - So, we're gonna have a save
button and a clear button.
17:12 - And, with two callbacks, save
snowflake and clear canvas.
17:17 - So, when I wanna save, I just
wanna save snowflake.png.
17:23 - This will take whatever's in the canvas
17:24 - and send it to the downloads directory.
17:26 - And, when I wanna clear, I
just wanna draw the background,
17:30 - reclear the background at zero.
17:32 - I have a pair of unnecessary push and pop.
17:35 - Yeah, so you're right
that this push and pop
17:37 - is unnecessary, so let's take that out.
17:39 - I sort of like having it in there,
17:41 - but you're right that it's unnecessary.
17:43 - Let's think about color,
17:44 - and let's think about line thickness.
17:47 - So, right now, the line
thickness is determined
17:50 - by the speed of the mouse.
17:53 - I guess that kind of makes sense,
17:55 - but I wonder if it
would actually be better
17:58 - to have the line thickness
be controlled by a slider.
18:04 - And, we'll have color be automated.
18:07 - So, we're gonna create a
slider that has a range
18:13 - between one pixel and 32,
and we'll start it at four.
18:21 - And, we'll give it increments of 0.1.
18:26 - And then, what I'm gonna do is say
18:28 - the stroke weight is not
the distance any more,
18:33 - but is actually the value from the slider.
18:37 - So, I wanna actually be able
to see this more full screen,
18:41 - so I'm going to go to share.
18:45 - And, I'm gonna look at
this full screen URL
18:47 - and just open that up here.
18:49 - So, now, if I'm drawing,
that's the line thickness.
18:54 - If I were to make this
larger, look at this.
18:58 - So, I need the mouse is pressed
to be only if the mouse is
19:03 - within the canvas, but
that's not a huge deal.
19:07 - But, if I make it thicker, right,
19:09 - I could do something thicker
here, and then I could
19:13 - really be much more
intricate about my design.
19:16 - This is kind of awkward to
have to go down to the slider.
19:19 - I don't love this interaction,
but this is better.
19:23 - So, I'm just gonna fix
that bug to only do stuff
19:28 - if mouse X is greater than
zero, less than the width.
19:37 - I wanna make sure the
mouse is in the window,
19:40 - so that should fix this issue.
19:44 - And, I'm gonna just
refresh over here where,
19:47 - if I'm operating the slider,
19:49 - we don't see any drawing happen.
19:53 - Let's use noise for the color,
19:56 - so I'm gonna have an offset start at zero.
20:01 - I'm gonna set the color
mode to HSB, 255, 255, 255.
20:10 - And then, what I will do
is I will get the hue value
20:20 - to be the noise function
of X offset times 255.
20:26 - And, we'll set hue, and
we'll have a saturation
20:31 - and brightness all the way up.
20:35 - So, you can see it's
always green right now.
20:38 - But, now, if I were to have
X offset change over time,
20:45 - that hue is gonna change,
20:48 - so this is my rainbow,
multicolored snowflake.
20:56 - So, I think this is done.
20:58 - I'm gonna attempt to
design a snowflake now.
21:00 - We're gonna see.
21:01 - How good is my snowflake design tool?
21:04 - So, right now, if I design the snowflake,
21:07 - get a little thicker,
and get in the center,
21:13 - and then make it a little
thinner for over here,
21:17 - a lot of green and blue.
21:19 - If I do this and then I hit
save, now I have my snowflake.
21:25 - So, I want a way of
collecting all of these
21:28 - into a nice collection of snowflakes.
21:31 - Let's have the hue move
with the sign function.
21:38 - Needs to stay gray scale.
21:40 - The people are really
advocating for gray scale.
21:43 - (laughs)
21:44 - I'm good with that.
21:47 - So, I'm gonna start out
with sort of a thick line
21:48 - towards the center, and I'm gonna use
21:58 - a thinner line to do some nice detail.
22:07 - There, this is my snowflake that I made.
22:10 - Goth snowflakes.
22:12 - People prefer the color.
22:13 - Okay, I give up.
22:15 - This is the end of this coding challenge.
22:18 - Here is a kaleidoscope
snowflake drawing generator.
22:23 - I'm sure you can make
your own version of this
22:26 - and think about color and the interface
22:28 - and all sorts of different
and creative ways,
22:30 - and I hope that you will do that.
22:33 - ♪ On the 12th day of coding ♪
22:40 - ♪ My p5 gave to me ♪
22:44 - ♪ 12 neural networks ♪
22:47 - ♪ 11 index errors ♪
22:49 - ♪ 10 people posing ♪
22:51 - ♪ Nine for loops looping ♪
22:53 - ♪ Eight fractals forming ♪
22:55 - ♪ Seven sorters sorting ♪
22:56 - ♪ Six cameras switching ♪
22:58 - ♪ Five golden ♪
23:00 - - Ah!
23:01 - ♪ Five golden rings ♪
23:07 - ♪ Four dripping ♪
23:08 - ♪ Four flocking boids ♪
23:10 - ♪ Three of these dots ♪
23:12 - ♪ Two pull requests ♪
23:14 - ♪ And a null pointing binary tree ♪
23:19 - (upbeat ukulele music)
23:23 - (air kiss)
23:25 - - Happy holidays!
23:28 - (upbeat music)

Cleaned transcript:

(train whistle) Hello, and welcome to a holiday coding challenge. This coding challenge is a fundraiser for Support P5 this Giving Season. The Processing Foundation is the foundation that maintains the open source software projects Processing, p5 JS, Python Mode for Processing, Processing for the Raspberry Pi, and Processing for Android. And, if you use any of those tools in your professional life, as a student, as a teacher, and you have the means and can donate, please do. There's a link in this video's description for how to donate. Also, you can donate directly on YouTube. Right here, somewhere over there, I think, is where you can donate on YouTube. All of the information about Support P5 is on this post. There are wonderful artworks that you can get as giveaways from Maya Man, from Kate Hollenbach, from The Coding Train itself. That's me. And Cy, The Coding Train community manager, designed a zine. Saskia Freeke and more, so please donate. The giveaways are available through this webpage. And, of course, we'll gladly accept your donation through the donate link right here on this page itself. Thank you to Violet, who suggested this idea as the holiday coding challenge. This is a kaleidoscope painter that I found online on this website, permadi.com. Incidentally, this website has a lot of wonderful tutorials and other information. Go check it out. But, we were thinking, "Could this be used to create a snowflake? "Could I make something like this where you could paint "in p5 and make a snowflake pattern "with six fold symmetry because we all know "that snowflakes have six fold symmetry." Which would give it some symmetry and then rotate it also around six times, and I think I'm pretty sure that's what that is happening in that animation that I showed at the beginning. So, this should be, hopefully, pretty beginner friendly. If you're new to coding, I'm gonna do this right here in the p5 web editor. And, if you're using the p5 web editor, that's because the Processing Foundation maintains the p5 web editor. It's a project created by Cassie Tarakajian, and your donations are helping to support the web editor, the p5 library, and more throughout 2020 as we go into this new year, new decade. So, first, let's begin by just creating a program where, when I click the mouse, I draw something. And, this is actually quite easy to do because, in the draw loop itself p5 has set up, which will create a canvas, you can see it right there. That's 400 by 400 pixels. The draw function loops over and over again and is always drawing a black background. Black because of the number zero in the background function. So, if I say stroke, which sets a stroke color, and I say line between mouse X, mouse Y, those are the coordinates where your mouse is actually in the sketch. And, I wanna draw a line from there to where I previously was, where the mouse previously was. So, I could use some kind of variable to keep track of the previous mouse and know the current mouse and update it. But, guess what. (dings) P5 has that built in for you, and I can say P mouse X for previous mouse X, and P mouse Y for previous mouse Y. So, if I run this again. (laughs) No! What have I done wrong? Oh, I know what! I've forgotten everything that I ever learned in the last 20 years. (laughs) Look, there's the little line. Do you see it? There it is. I'm drawing the background over and over again in draw. (sighs) Classic. So, I've got to move this into setup because I only wanna draw the background once so that, now, the line always appears, so there I am drawing. So, some things I could do. I can say, "If mouse is pressed, "I only wanna draw that line if I am pressing the mouse." That's going to allow me to do things like this. And then, we can start to think about the thickness of the line, so there's a lot of different ways I could. Maybe I'll have that be pro line noise or something, but I'm just gonna make it a little thicker right now. Stroke weight, four. Oh, let me auto refresh here. So, that's thicker. Let's do this, let's do this. The speed of how I move the mouse is how thick the line will be, so slower will be thicker. Faster will be thinner. I think that makes sense. I think that's probably what that kaleidoscope picture I showed does. I can find the distance between the current mouse and the previous mouse. That's, you know, basically a value that indicates to me the speed. How far have I gone on each cycle through draw? And then, I can say, "The stroke weight is map the distance, "which could be anywhere from zero, right, "if I'm not moving at all, all the way up." I mean, it could. Let's just give it, sort of, think about a maximum range of something like 20, and I'm gonna invert that, 20 down. I'm always going to have a stroke weight of at least one, so let's see what happens there. So, as I move. Oh, well, of course, then (laughs) I'm making all of these kind of crazy mistakes. Then, I also need to actually use the stroke weight variable in the stroke weight function. So, if I move really fast, it's really thick. Well, I kind of wanna interpolate that so that it's a little smoother, but this'll do. This'll do just fine. All right, so here's the thing. This was the easy part, right. This is the easy part. I just want to draw using the mouse. Now, I need to figure out how to get that symmetry. I think maybe we'll wanna use the whiteboard for this for a second. So, we have a canvas. That's 400 by 400. We can see here this idea of a snowflake with six fold symmetry. One, two, three, four, five, six. So, the angle that's important here is this particular angle, right, which is 60 degrees I believe. So, lets say, for the sake of argument, I'm using the mouse to draw over here, so mouse X. Mouse Y is happening over here. What I wanna do is draw the same thing here, and here, and here, and here, kind of rotating along. But, also, I think I wanna flip it each time. In this case, I think that's going to create where you can see that these two are kind of pointing at each other, so I think there's also gonna be some aspect of flipping it. No wonder this, by the way. There's a big mistake here. No wonder this was going wonky. Code Bulletin pointed this out. And, also, maybe other people in the chat. P mouse Y, that's why it was kind of doing some weird stuff. Yeah, this is much more like what I expected. Let's try this. So, just as the simplest way of thinking about it for a second, let's go, "I goes from zero to six, right." I wanna repeat what I'm doing six times. I think all this is also going to be easier if I translate to the center, so I'm gonna need to use translate and rotate. Translate and rotate. Translate takes as its arguments an X and a Y, and rotate takes as its argument an angle. And, what this allows me to do is reposition wherever the origin is, so I want the origin to be in the center. And, I'm gonna draw a relative to that, but then I can also rotate what I'm drawing to also duplicate it here, rotate to duplicate it here, rotate to duplicate it here. I kind of glossed over that very quickly, but I will refer you to my p5 JS transformations video tutorial, which goes through translate and rotate in much more detail. So, I'm also going to now create a variable called MX, which is mouse X minus minus width divided by two. And, MY and PMX and PMY. Ultimately, what I want is I want the mouse position relative to the center, so the easiest way for me to do that is just store it in separate variables. So, I've got the same code here. Same thing's happening. It's just everything's now being drawn relative to the center, and I am also drawing it six times. But, I'm drawing it six times in the same place. I'm gonna add some alpha so we see what's going on. Could I now say, "Rotate by I times 60 degrees"? Because what I wanna do is, first, draw it here, then here, then here, and I wanna rotate one, two, three, four, five, six times. Oh, and let's set angle mode to degrees because I'm thinking, in terms of degrees, 60 degrees. I could think in terms of radians, and that would be pi divided by three. There we go. Now, this is isn't exactly doing what I would expect. It's the right idea, interesting. Getting kind of a little bit of a kaleidoscope feel to it. I think what I actually want is to bisect each one of these and, basically, take whatever I'm drawing here and invert it. How can I draw this? I'm so bad at drawing. Invert it there, right. I need, actually, to create something that feels much more like a snowflake pattern. What I'm drawing, essentially, is this element here that's on this side of the snowflake. So, I need to flip it over, draw it here, flip it, draw it here, so I actually wanna rotate not six times but 12 times. And, each time, I want to flip what I'm drawing. So, I want to rotate 12 times. And, this, by the way, I should have the angle, 360 divided by 12. I mean, this is kind of crazy that I'm having these hard coded values. There, so this is what I want. This is much more close to what I want, but what I want to see now is, also, I want to invert every other one. And, Simon is making a good suggestion in the chat, to draw a line. So, I think it actually would be quite useful for me to do that. I'm gonna draw more than just the background, just so we sort of see. I wanna just draw these lines. Woo, something weird is going on. (buzzing) I've done something ridiculous. I've made a pretty serious error. I forgot. I mean, I should know this. I should know all of this stuff, but even I. I've done this so many times I just forget it. Transformations and the word transformation applies to any translation, rotation, or scale. I'm gonna scale in a minute. They're cumulative. So, if I say rotate by 30 degrees, I'm gonna do this. So, rotate I times 30. Rotate 30 degrees. Now, well, rotate zero. Then, I is one, rotate one times 30 is 30. Then, I is two, rotate two times 30 is 60. Ah! I just wanna rotate 30 each time. I was thinking about how far, from the beginning, I wanna rotate. But, ultimately, of course, I just wanna rotate that amount. Let's create a variable. We'll call it symmetry, and we're gonna have 12 fold symmetry here. I really want six fold symmetry, but each six fold symmetry segment will be symmetrical. So, I'm gonna say, "Angle equals 360 divided by symmetry." I goes from zero to symmetry. And then, I'm just gonna rotate by the angle. There we go. That's what I'm looking to do. And then, the same thing. And, this, I think, can just be a global variable for right now. That way, I can just do the same exact thing here. And, we see this is what I was looking to see, something more like this. Now, this is one, two, three, four, five, six, seven, eight, nine, 10. We should count, we should get 12. So, let me see if I can do that extra flipping. Another transformation function that I can use, beside translate and rotate, is a function called scale. Now, typically, we think of scale as scaling something bigger or smaller. So, for example, if I were to use the ellipse function to draw a circle and, right before that, I were to say scale is two, that means double the size or 200%. So, it would look, yeah. I'm not gonna. In this case, it's double the radius, so I would have something like an ellipse that looks like this. But, scale, first of all, you can scale on different axes. So, I could say, "2, 1." And, if I did that, it would just scale the horizontal axis but not the vertical, would still be the same scale. So, my ellipse would look like this. It would be stretched horizontally. Incidentally, I can also apply a negative number to scale. If I apply a negative number to scale, then it's going to draw it in the opposite direction. It's going to invert it, which, in the case of a circle, doesn't matter because it's symmetrical along the axis. But, if I were drawing something like a triangle, then, if I had negative two, I would see the triangle suddenly be drawn like this. What I thought would make sense is for me to, for any odd. I mean, it doesn't really matter. I don't know if I want odd or even. For every other one, if I module is, is zero or one, I'm not sure which one, to invert the scale horizontally. So, in that, say, "Scale, negative one, one." But, once again, this is happening cumulatively. So, in this case, maybe what I wanna do just to allow myself to be less confused is to add push and pop so that any rotations or translations or scales that happen within each, and not outside the loop, right inside the loop, for each section, are contained. And so, in this case, I would wanna go back to rotating I times the angle. So, now, they're not cumulative because I'm saving the transformation state in its original way, scaling by inverting it, drawing, sorry, rotating. Do I wanna scale before rotate? Rotate? I think I wanna rotate and then flip it. We're gonna find out. Okay, so this is kind of what I was expecting, except I'm not actually seeing where I'm drawing because I think this should be one. Yeah, there we go. This is more like what I was expecting, there. Is this a way to draw a snowflake? (laughs) I feel like these are snowflake like. One, two, three. But, really getting 12. If I just change this now to six, did I overthink the symmetry? And, actually, this is now gonna give me six fold symmetry. Yeah, okay, I overthought the symmetry, I guess. Oh, wait, this has to be symmetry. All right, I think we've made kaleidoscope snowflakes. Basically, I see. Look at this. Rotate by the angle, push, pop, and draw the line twice. And, the second time with it flipped. There we go. Ah! Finally. Tada! Okay, what we have now. Now, Zachary is suggesting, yeah. I think this would make a lot more sense, to give a lot more space now, and here we go. So, what I would like to do, and then the next thing I wanna do is add a button to save the image. Button mouse pressed, and save snowflake. And, I'm gonna write a little function. Save snowflake, that, and let's make a clear button also. So, we're gonna have a save button and a clear button. And, with two callbacks, save snowflake and clear canvas. So, when I wanna save, I just wanna save snowflake.png. This will take whatever's in the canvas and send it to the downloads directory. And, when I wanna clear, I just wanna draw the background, reclear the background at zero. I have a pair of unnecessary push and pop. Yeah, so you're right that this push and pop is unnecessary, so let's take that out. I sort of like having it in there, but you're right that it's unnecessary. Let's think about color, and let's think about line thickness. So, right now, the line thickness is determined by the speed of the mouse. I guess that kind of makes sense, but I wonder if it would actually be better to have the line thickness be controlled by a slider. And, we'll have color be automated. So, we're gonna create a slider that has a range between one pixel and 32, and we'll start it at four. And, we'll give it increments of 0.1. And then, what I'm gonna do is say the stroke weight is not the distance any more, but is actually the value from the slider. So, I wanna actually be able to see this more full screen, so I'm going to go to share. And, I'm gonna look at this full screen URL and just open that up here. So, now, if I'm drawing, that's the line thickness. If I were to make this larger, look at this. So, I need the mouse is pressed to be only if the mouse is within the canvas, but that's not a huge deal. But, if I make it thicker, right, I could do something thicker here, and then I could really be much more intricate about my design. This is kind of awkward to have to go down to the slider. I don't love this interaction, but this is better. So, I'm just gonna fix that bug to only do stuff if mouse X is greater than zero, less than the width. I wanna make sure the mouse is in the window, so that should fix this issue. And, I'm gonna just refresh over here where, if I'm operating the slider, we don't see any drawing happen. Let's use noise for the color, so I'm gonna have an offset start at zero. I'm gonna set the color mode to HSB, 255, 255, 255. And then, what I will do is I will get the hue value to be the noise function of X offset times 255. And, we'll set hue, and we'll have a saturation and brightness all the way up. So, you can see it's always green right now. But, now, if I were to have X offset change over time, that hue is gonna change, so this is my rainbow, multicolored snowflake. So, I think this is done. I'm gonna attempt to design a snowflake now. We're gonna see. How good is my snowflake design tool? So, right now, if I design the snowflake, get a little thicker, and get in the center, and then make it a little thinner for over here, a lot of green and blue. If I do this and then I hit save, now I have my snowflake. So, I want a way of collecting all of these into a nice collection of snowflakes. Let's have the hue move with the sign function. Needs to stay gray scale. The people are really advocating for gray scale. (laughs) I'm good with that. So, I'm gonna start out with sort of a thick line towards the center, and I'm gonna use a thinner line to do some nice detail. There, this is my snowflake that I made. Goth snowflakes. People prefer the color. Okay, I give up. This is the end of this coding challenge. Here is a kaleidoscope snowflake drawing generator. I'm sure you can make your own version of this and think about color and the interface and all sorts of different and creative ways, and I hope that you will do that. ♪ On the 12th day of coding ♪ ♪ My p5 gave to me ♪ ♪ 12 neural networks ♪ ♪ 11 index errors ♪ ♪ 10 people posing ♪ ♪ Nine for loops looping ♪ ♪ Eight fractals forming ♪ ♪ Seven sorters sorting ♪ ♪ Six cameras switching ♪ ♪ Five golden ♪ Ah! ♪ Five golden rings ♪ ♪ Four dripping ♪ ♪ Four flocking boids ♪ ♪ Three of these dots ♪ ♪ Two pull requests ♪ ♪ And a null pointing binary tree ♪ (upbeat ukulele music) (air kiss) Happy holidays! (upbeat music)
