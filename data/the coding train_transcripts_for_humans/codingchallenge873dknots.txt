With timestamps:

00:00 - hello I have a very exciting coding
00:02 - challenge for you today I'm going to
00:04 - attempt to make some 3d not now these
00:06 - are 3d knots made in processing by Ruby
00:10 - Ruby who submitted issue number 72 the
00:13 - rainbow topics repository this is
00:16 - related to super shapes or maybe not
00:17 - related but the idea came from after
00:20 - super shapes knots would be a great
00:22 - follow up so there's this Wikipedia link
00:24 - and as I often do
00:26 - there is the paul bork website which has
00:28 - tons of mathematical formulas for
00:30 - geometry and i guess i thought back in
00:34 - 2016 i might like to tackle it and i
00:37 - took so long that ruby in fact tackled
00:39 - it herself
00:41 - and you can see these wonderful you can
00:45 - you can take a look at this github Repub
00:46 - now i haven't actually looked at the
00:47 - code here whatever i affirmed i have not
00:51 - looked at the code here and but i'm
00:54 - going to certainly look at the paul bork
00:56 - website and i pretty sure that this is
00:58 - going to end up being very similar to
01:00 - another coding challenge where I did the
01:02 - Lorenz attractor so let's take a look so
01:05 - let's see if we can find the simplest
01:07 - way to do this not one not two not three
01:10 - not four but yes five no where's my
01:14 - laughs drag okay why not do the knots oh
01:17 - this is just this is just getting better
01:19 - with every minute all right so let's
01:23 - look at what let's I want to find the
01:27 - first instance of a formula okay here we
01:29 - go there are a whole family of curves
01:32 - including knots I don't know how well
01:33 - you can read this let's make this a
01:34 - little bigger there are a whole family
01:36 - of curves including knots which are
01:38 - formed by the equations x equals R times
01:42 - cosine of V times cosine of theta y
01:47 - equals R times cosine of feet times sine
01:50 - of theta Z equals R times the sine of
01:51 - feet now I've done this before right
01:53 - didn't I have a video about spherical
01:56 - geometry where this was really really
01:59 - really really similar hmm so the this is
02:03 - you I would I would just go back and
02:05 - review that right we can find the points
02:07 - along a 3d sphere by having two
02:10 - different angles and this idea of
02:12 - spherical
02:13 - coordinates and you using spherical
02:15 - coordinates so what this is is probably
02:18 - weaving a path around that sphere is
02:20 - going to end up with some interesting
02:21 - knock patterns so for example we could
02:24 - do it this way whoa so which are the
02:29 - equations right for converting from
02:31 - polar to Cartesian purple coordinates
02:32 - that we make them our theta fee a
02:33 - function of the parameter beta which
02:36 - ranges from zero to pi oh look at this
02:39 - oh I love this okay okay so so first we
02:43 - just let's get these formulas let's grab
02:45 - this formula and let's put this in our
02:48 - code so I have a blank sketch here I'm
02:50 - doing this in processing which has a
02:52 - robust 3d rendering environment P 3d
02:54 - I've been doing recently a lot of video
02:56 - tutorials about WebGL in p5.js so maybe
02:59 - I'll try to redo this one so let's put
03:01 - these formulas in here and put them up
03:03 - here in just in the comments now let's
03:06 - get these formulas and put them here as
03:13 - well so this is really I believe all
03:15 - that I need so first I'm gonna have a
03:17 - variable let's just do the whole thing
03:20 - all at once so we can animate it have it
03:23 - grow we'll figure out that stuff as we
03:25 - go but first let me just try to draw the
03:26 - entire not so I need to have a variable
03:31 - I'm gonna call it beta which equals zero
03:33 - and I'm going to say while beta is less
03:36 - than PI right isn't that what it said
03:40 - zero to PI that's the range the first
03:45 - thing I'm gonna do is these so I'm going
03:50 - to say convert these now I'm gonna say
03:53 - float R equals this formula float theta
04:01 - equals it can someone in the chat
04:02 - confirm that I'm pronouncing the Greek
04:03 - letter fee correctly I know some people
04:05 - say five and I think it's actually fee
04:07 - so great I'm gonna add my semicolons so
04:10 - now I have calculated and our a theta
04:13 - and a fee so once and this should say
04:16 - cap PI has to be all capital letters for
04:18 - the constant now what I'm gonna do now
04:22 - is take these now I'm actually in some
04:24 - ways done I have the polar this
04:26 - mirakl coordinates for this not pattern
04:28 - but what I need to do is processing only
04:32 - knows about Cartesian coordinates X Y Z
04:34 - so that's what this next step is whoops
04:36 - so I need to get these formulas and I
04:40 - can say float X float Y and float Z and
04:46 - just make sure I put in my semicolons
04:49 - and then let's just I was gonna let's
04:54 - use well what let's just go for broke
04:56 - here I want to well one thing is I need
04:59 - beta to increase I'm gonna say beta plus
05:01 - equals zero point one and I'm just gonna
05:03 - say begin shape and shape it's this is
05:08 - gonna work I'm gonna say no fill stroke
05:14 - 255 and I'm just gonna set a vertex
05:18 - vertex at XYZ oops let's run this what I
05:27 - get is there anything there well first
05:29 - of all I forget the origin point is the
05:32 - top left corner in processing
05:34 - so let's translate to the middle
05:43 - and let's run this again I'm hoping to
05:47 - see just look there's something there's
05:50 - my knot pattern look oh it's beautiful
05:52 - look at the not matter so what happened
05:54 - I'm getting values and it's making some
05:57 - pattern but those values are probably
05:59 - really really tiny so I need to do is
06:01 - really expand it out I could use scale
06:03 - or something but let's actually just try
06:05 - I have a feeling that if I just take our
06:08 - and kind of multiply that whole our are
06:12 - being that radius by like something like
06:14 - 100 I'm going to see something more
06:19 - looking like they're not there we go
06:21 - look at that that kind of looks like it
06:23 - mm-hm now it's very jagged so I probably
06:26 - need finer detail so let's increase beta
06:31 - by less let's just try like 0.01 so now
06:34 - I actually have like a hundred points
06:36 - for every I don't know 10 points for
06:38 - every one point I had before there we go
06:44 - now we're definitely talking now is this
06:46 - really 3d I believe it is but let's
06:48 - confirm that by let's have an angle and
06:53 - let's just do a little bit of rotation
06:56 - like rotate Y by that angle and increase
06:59 - the angle by some small amount there we
07:05 - go so you can see and that's going
07:07 - really fast so let's slow that down it
07:11 - could map it to the mouse or something
07:13 - so you could see there is the not so
07:16 - first of all boom done we never have
07:18 - this not and now there's just so much
07:20 - that we could do
07:21 - let's try adjusting the formulas a
07:24 - little bit so let's try top side front
07:28 - yes not 5 so this are some oh look
07:32 - there's even some source code here that
07:33 - I could have copied so I'm heat not whoa
07:37 - look at this there's all these different
07:39 - possibilities so actually so what I'm
07:41 - going to do as an exercise I'm gonna let
07:43 - people explore who I really would like
07:45 - to do this one I'm gonna let people
07:48 - explore and try to make other versions
07:50 - of these knots and let's just try what I
07:54 - want to do is show you a little bit more
07:55 - about
07:56 - ways you could render the not so one
07:58 - thing that I think is worth looking at
07:59 - is how could I have that not animate its
08:02 - path well first of all how could I make
08:06 - it can I say strokeweight
08:08 - in 3d will that make that because a
08:11 - stroke in 3d is really like a tube let's
08:14 - see let's see how that looks
08:16 - yeah so that made it a little thicker I
08:18 - think if I say eight all right so this
08:22 - is worth doing I could also probably
08:24 - mess around with the color so I could
08:27 - say like stroke XYZ or something and
08:30 - it's gonna give me like an RGB value
08:33 - according to its XYZ value this is just
08:35 - like normal material in p5 so you can
08:38 - see it start to play with the colors of
08:39 - the pattern but what I really want to do
08:41 - and let me sort of feel like doing this
08:48 - actually so the R could be the Jeep so
08:50 - let's just do this weather so if we see
08:52 - the difference what I really want to do
08:53 - now is I want to show you how to animate
08:55 - this pattern how do we do that so the
08:58 - way that we do that is instead of
08:59 - drawing all of the vertices all at once
09:03 - what if I store them all into an array
09:06 - and then and then create the shape one
09:10 - at a time so there's there's a variety
09:12 - of ways I could do this what I'm
09:14 - actually gonna do is I think what I'm
09:16 - gonna do is I'm gonna use an ArrayList
09:17 - and call on with Poppy vector P vector
09:20 - is a kind of object that stores an XYZ
09:22 - and I'm gonna say vectors equals a new
09:27 - ArrayList P vector and what I'm going to
09:33 - do is I'm gonna now make beta a global
09:38 - variable and instead of while beta is
09:43 - less than pi I'm just going to every let
09:49 - me take all this out I mean I'm gonna
09:51 - need this stuff I'm gonna I'm gonna move
09:53 - actually what would make more sense is I
09:55 - want to what I want to do let me take
09:58 - out the while I want to put all the
09:59 - drawing stuff separate so the drawing
10:02 - stuff is going to happen down here and
10:05 - it's still going to involve a loop so I
10:08 - want to say every
10:09 - lecture inside of vectors set of vertex
10:14 - at V X V Y V Z so this is now just this
10:19 - is now just saying hey draw all the
10:21 - vectors as a shape so now what my job
10:24 - becomes is adding these points one at a
10:29 - time so every time through draw beta
10:31 - goes up by a little bit and what I do is
10:34 - I say vectors and I think it's ad in
10:38 - Java and ArrayList add new P vector at
10:41 - that XYZ so I got rid of my loop and I'm
10:45 - just calculating one XYZ every frame and
10:48 - adding it and what this should do is if
10:51 - I run this I should see it drawing that
10:55 - path this is pretty good now ah so I
10:59 - forgot um one thing is I lost the color
11:03 - so I could do something where I you know
11:06 - calculate make an object for a vertex
11:09 - that has the color and the XYZ so I
11:12 - could there's probably a lot of ways I
11:13 - could think about organizing this right
11:16 - now I think what I might just do is set
11:18 - the stroke here and one thing I could do
11:20 - is I mean this is redundant but uh so
11:24 - this is very inefficient but I can ask
11:27 - for the oh I could just say I could ask
11:32 - for the magnitude for example of the
11:37 - vector that's its length and I could say
11:40 - something like - whoops I could say
11:43 - stroke 255 magnitude 255 so the length
11:48 - of the vector right how far it is from
11:49 - the center has something to do with its
11:52 - color so you can see now against again
11:55 - I've kind of got that coloring back in
11:57 - oh this is so lovely well this actually
12:00 - worked out quite well so I think I'm
12:03 - going to stop here and quit while I'm
12:04 - ahead so to speak there's probably a lot
12:07 - of things you could think about doing
12:08 - you could look at Ruby's code which I
12:11 - think will have more examples can you
12:13 - create any of these other patterns can
12:16 - you think of other ways of rendering
12:19 - them could you make some nice gif
12:21 - animations so if you make
12:23 - something share it there's three ways
12:25 - you can share well there's a link to the
12:27 - source code for this challenge in the
12:29 - description there's a readme there so
12:31 - you can add a link to that readme you
12:32 - can tweet me at Schiffman or just use
12:35 - hashtag than why not why K and ot
12:40 - hashtag why not and I on Twitter I'm at
12:45 - Schiffman and I'd love to see all the
12:47 - different beautiful knots you make and
12:48 - at someone I will look into remaking
12:50 - this in p5.js okay thanks for watching
12:53 - this coding challenge have a good day
12:56 - [Music]
13:05 - you

Cleaned transcript:

hello I have a very exciting coding challenge for you today I'm going to attempt to make some 3d not now these are 3d knots made in processing by Ruby Ruby who submitted issue number 72 the rainbow topics repository this is related to super shapes or maybe not related but the idea came from after super shapes knots would be a great follow up so there's this Wikipedia link and as I often do there is the paul bork website which has tons of mathematical formulas for geometry and i guess i thought back in 2016 i might like to tackle it and i took so long that ruby in fact tackled it herself and you can see these wonderful you can you can take a look at this github Repub now i haven't actually looked at the code here whatever i affirmed i have not looked at the code here and but i'm going to certainly look at the paul bork website and i pretty sure that this is going to end up being very similar to another coding challenge where I did the Lorenz attractor so let's take a look so let's see if we can find the simplest way to do this not one not two not three not four but yes five no where's my laughs drag okay why not do the knots oh this is just this is just getting better with every minute all right so let's look at what let's I want to find the first instance of a formula okay here we go there are a whole family of curves including knots I don't know how well you can read this let's make this a little bigger there are a whole family of curves including knots which are formed by the equations x equals R times cosine of V times cosine of theta y equals R times cosine of feet times sine of theta Z equals R times the sine of feet now I've done this before right didn't I have a video about spherical geometry where this was really really really really similar hmm so the this is you I would I would just go back and review that right we can find the points along a 3d sphere by having two different angles and this idea of spherical coordinates and you using spherical coordinates so what this is is probably weaving a path around that sphere is going to end up with some interesting knock patterns so for example we could do it this way whoa so which are the equations right for converting from polar to Cartesian purple coordinates that we make them our theta fee a function of the parameter beta which ranges from zero to pi oh look at this oh I love this okay okay so so first we just let's get these formulas let's grab this formula and let's put this in our code so I have a blank sketch here I'm doing this in processing which has a robust 3d rendering environment P 3d I've been doing recently a lot of video tutorials about WebGL in p5.js so maybe I'll try to redo this one so let's put these formulas in here and put them up here in just in the comments now let's get these formulas and put them here as well so this is really I believe all that I need so first I'm gonna have a variable let's just do the whole thing all at once so we can animate it have it grow we'll figure out that stuff as we go but first let me just try to draw the entire not so I need to have a variable I'm gonna call it beta which equals zero and I'm going to say while beta is less than PI right isn't that what it said zero to PI that's the range the first thing I'm gonna do is these so I'm going to say convert these now I'm gonna say float R equals this formula float theta equals it can someone in the chat confirm that I'm pronouncing the Greek letter fee correctly I know some people say five and I think it's actually fee so great I'm gonna add my semicolons so now I have calculated and our a theta and a fee so once and this should say cap PI has to be all capital letters for the constant now what I'm gonna do now is take these now I'm actually in some ways done I have the polar this mirakl coordinates for this not pattern but what I need to do is processing only knows about Cartesian coordinates X Y Z so that's what this next step is whoops so I need to get these formulas and I can say float X float Y and float Z and just make sure I put in my semicolons and then let's just I was gonna let's use well what let's just go for broke here I want to well one thing is I need beta to increase I'm gonna say beta plus equals zero point one and I'm just gonna say begin shape and shape it's this is gonna work I'm gonna say no fill stroke 255 and I'm just gonna set a vertex vertex at XYZ oops let's run this what I get is there anything there well first of all I forget the origin point is the top left corner in processing so let's translate to the middle and let's run this again I'm hoping to see just look there's something there's my knot pattern look oh it's beautiful look at the not matter so what happened I'm getting values and it's making some pattern but those values are probably really really tiny so I need to do is really expand it out I could use scale or something but let's actually just try I have a feeling that if I just take our and kind of multiply that whole our are being that radius by like something like 100 I'm going to see something more looking like they're not there we go look at that that kind of looks like it mmhm now it's very jagged so I probably need finer detail so let's increase beta by less let's just try like 0.01 so now I actually have like a hundred points for every I don't know 10 points for every one point I had before there we go now we're definitely talking now is this really 3d I believe it is but let's confirm that by let's have an angle and let's just do a little bit of rotation like rotate Y by that angle and increase the angle by some small amount there we go so you can see and that's going really fast so let's slow that down it could map it to the mouse or something so you could see there is the not so first of all boom done we never have this not and now there's just so much that we could do let's try adjusting the formulas a little bit so let's try top side front yes not 5 so this are some oh look there's even some source code here that I could have copied so I'm heat not whoa look at this there's all these different possibilities so actually so what I'm going to do as an exercise I'm gonna let people explore who I really would like to do this one I'm gonna let people explore and try to make other versions of these knots and let's just try what I want to do is show you a little bit more about ways you could render the not so one thing that I think is worth looking at is how could I have that not animate its path well first of all how could I make it can I say strokeweight in 3d will that make that because a stroke in 3d is really like a tube let's see let's see how that looks yeah so that made it a little thicker I think if I say eight all right so this is worth doing I could also probably mess around with the color so I could say like stroke XYZ or something and it's gonna give me like an RGB value according to its XYZ value this is just like normal material in p5 so you can see it start to play with the colors of the pattern but what I really want to do and let me sort of feel like doing this actually so the R could be the Jeep so let's just do this weather so if we see the difference what I really want to do now is I want to show you how to animate this pattern how do we do that so the way that we do that is instead of drawing all of the vertices all at once what if I store them all into an array and then and then create the shape one at a time so there's there's a variety of ways I could do this what I'm actually gonna do is I think what I'm gonna do is I'm gonna use an ArrayList and call on with Poppy vector P vector is a kind of object that stores an XYZ and I'm gonna say vectors equals a new ArrayList P vector and what I'm going to do is I'm gonna now make beta a global variable and instead of while beta is less than pi I'm just going to every let me take all this out I mean I'm gonna need this stuff I'm gonna I'm gonna move actually what would make more sense is I want to what I want to do let me take out the while I want to put all the drawing stuff separate so the drawing stuff is going to happen down here and it's still going to involve a loop so I want to say every lecture inside of vectors set of vertex at V X V Y V Z so this is now just this is now just saying hey draw all the vectors as a shape so now what my job becomes is adding these points one at a time so every time through draw beta goes up by a little bit and what I do is I say vectors and I think it's ad in Java and ArrayList add new P vector at that XYZ so I got rid of my loop and I'm just calculating one XYZ every frame and adding it and what this should do is if I run this I should see it drawing that path this is pretty good now ah so I forgot um one thing is I lost the color so I could do something where I you know calculate make an object for a vertex that has the color and the XYZ so I could there's probably a lot of ways I could think about organizing this right now I think what I might just do is set the stroke here and one thing I could do is I mean this is redundant but uh so this is very inefficient but I can ask for the oh I could just say I could ask for the magnitude for example of the vector that's its length and I could say something like whoops I could say stroke 255 magnitude 255 so the length of the vector right how far it is from the center has something to do with its color so you can see now against again I've kind of got that coloring back in oh this is so lovely well this actually worked out quite well so I think I'm going to stop here and quit while I'm ahead so to speak there's probably a lot of things you could think about doing you could look at Ruby's code which I think will have more examples can you create any of these other patterns can you think of other ways of rendering them could you make some nice gif animations so if you make something share it there's three ways you can share well there's a link to the source code for this challenge in the description there's a readme there so you can add a link to that readme you can tweet me at Schiffman or just use hashtag than why not why K and ot hashtag why not and I on Twitter I'm at Schiffman and I'd love to see all the different beautiful knots you make and at someone I will look into remaking this in p5.js okay thanks for watching this coding challenge have a good day you
