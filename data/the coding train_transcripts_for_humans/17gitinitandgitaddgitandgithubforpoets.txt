With timestamps:

00:00 - - Welcome to another
Git and GitHub tutorial.
00:02 - Now, in this particular tutorial,
00:04 - what I'm going to show
you is the process for
00:08 - you're working on a project,
00:09 - that project exists on your laptop,
00:10 - you've been working on
it for an hour, a day,
00:13 - a week, a month and suddenly
you want to turn this project,
00:16 - this folder of files into a Git repository
00:19 - and then put that Git
repository on GitHub,
00:22 - this is different than what I showed you
00:23 - in the previous video, right,
00:24 - I created the Git repository on GitHub
00:27 - and then I brought it down to my computer,
00:28 - worked on it on my computer
and pushed it back up.
00:31 - You know, it doesn't really matter,
00:32 - honestly, I often just work that way,
00:34 - it's a little bit easier,
00:35 - I just make something on GitHub,
00:36 - pull it down and then put files into it,
00:38 - but it's useful to know
this other way of doing it
00:40 - and the key command that you need to know,
00:42 - if you come over here to my whiteboard
00:44 - is, do I have it here anywhere?
00:46 - No, I do not, it's a new one I'm adding,
00:48 - it's getting to be a mess
down here, but it's init,
00:50 - so this command, get init
00:52 - is crucial for this particular video.
00:54 - Now, I'm making this video series
00:57 - without source code whatsoever,
but if you're a programmer,
00:59 - most likely you have a
directory of code files.
01:03 - I, instead of having a
directory of code files,
01:05 - have a directory of
instructions for dancing,
01:07 - this is the Rainbow dance, which is.
01:09 - ♪ Step left ♪
01:10 - ♪ Step right ♪
01:11 - ♪ Jump up and down ♪
01:12 - ♪ To the Rainbow dance ♪
01:13 - ♪ Step left ♪
01:14 - You don't want to see me do this, do you?
01:16 - Probably not, okay.
01:17 - So this is the Rainbow dance
01:18 - and if I go to my desktop
01:23 - and I go to this Rainbow-Dance directory,
01:25 - you can see that file is in there,
01:27 - again, this could be a
directory of tons of files,
01:29 - but just one file, so what I want to do
01:31 - is turn this into a Git repository,
01:33 - it is currently not a Git repository,
01:35 - let's be sure about that.
01:36 - So I'm going to Terminal
01:38 - and I'm going to say cd,
01:40 - hold on, let me adjust
the size here a little bit
01:45 - and I'm going to say cd and I
need to go to that directory,
01:48 - so the way I can go to that directory
01:50 - is just take that
directory and drag it here.
01:52 - Now I'm in the Rainbow-Dance directory,
01:54 - let's make sure by saying
pwd, I definitely am.
01:57 - Now I'm going to type git
status, not a Git repository,
02:02 - so by default, any
directory on your computer
02:05 - is not a Git repository,
02:06 - but I can turn it into a Git
repository by saying git init,
02:11 - that's all I need, initialized
empty Git repository,
02:13 - so now I have an empty
Git repository, fantastic.
02:17 - Now, what if I type git status now?
02:23 - So it's saying untracked files,
02:26 - so this is something that we
haven't actually seen before,
02:28 - you might not have realized this,
02:30 - but I secretly with the wave of my magic,
02:32 - my hands aren't very magic, I guess,
02:34 - but I have always just been
working on pre-existing files,
02:38 - that were made on GitHub,
I didn't add a new file
02:41 - and this brings up a very strange thing
02:44 - about commits and git
and saving things, oh,
02:49 - this erasing is not working very well,
02:51 - let's try this other eraser,
02:54 - but you're just going
to have to bear with me,
02:57 - messy whiteboard makes
me very uncomfortable,
02:59 - but I think life will go on.
03:01 - So let's talk about workflow
03:04 - with git and commits
03:06 - and we need to, before we can get
03:08 - this new Git repository onto GitHub,
03:10 - we've got to deal with
something else, the add, right
03:14 - and I'm going to put it up here, add.
03:17 - So let's say you have a file,
03:20 - dance.txt,
03:24 - forgetting about Git for a second,
03:26 - if you make a change to that file,
03:27 - you're just got to hit
Command+S and save it,
03:29 - the file's saved, your changes are saved,
03:32 - what we saw
03:34 - was like a commit,
03:37 - is when we were on GitHub,
03:38 - a commit was basically the same as save,
03:41 - these were like the same things,
03:43 - if you're working locally however,
03:47 - if you're working locally however,
03:49 - the first thing you do is save,
03:52 - that's just saving the actual
file on your file system,
03:55 - but it's not actually
committing the change
03:58 - to the Git repository,
03:59 - so the second thing that
you do is actually commit,
04:04 - so save and commit are seperate
steps, I'm saving the file,
04:08 - but now I'm also committing
it to the repository.
04:11 - Now the strange thing is
04:13 - there's actually a third step called add
04:18 - and add, this is required,
if you have new files,
04:22 - so Git has this concept of a staging area,
04:26 - where you can think of like,
04:29 - let me redraw this diagram up here,
04:33 - right, you have a bunch of files
04:37 - and these files are being manipulated,
04:39 - there is a staging area
04:42 - and then there is the
action of committing.
04:47 - So with one file, this
almost seems ridiculous
04:50 - to talk about, but if
you have a lot of files
04:51 - and a lot of things you're
changing, this could be useful,
04:54 - because let's just say you have dance.txt
04:58 - and then one.txt, two.txt,
three.txt, four.txt, five.txt
05:03 - and you've made changes
in all of your files
05:05 - and you want to do a commit,
05:07 - but you actually only want the commit
05:09 - to be associated with changes
that are in these files,
05:11 - but there are changes in other files,
05:13 - so the things that you
actually want to commit,
05:15 - you can put in the staging area,
05:17 - you can also remove them
from the staging area.
05:21 - Add is a way of putting
things in the staging area,
05:23 - so that when you call,
when you execute commit,
05:26 - those are the changes that
are actually committed.
05:29 - So for us, for 99% of the cases,
05:33 - you saw that I said git commit -a,
05:38 - that does add and commit
all in one fell swoop,
05:40 - that's what I did in the previous video,
05:43 - git commit -a just says add
everything and commit it,
05:45 - any changes I've made
anywhere, commit them.
05:48 - But in this case, I
can't do that right now,
05:50 - there might be a way,
but I want to explicitly
05:53 - add the new files and then commit them,
05:55 - I need to put stuff in the staging area
05:57 - and then commit them, so let's do that.
06:00 - I'm going to come over here
and what I'm going to do
06:02 - is I'm going to say git add dance.txt,
06:07 - now let's do something actually
06:08 - just to be a bit more explicit about this,
06:12 - I'm going to
06:15 - make a second file,
06:17 - dance-two.txt
06:20 - and you can see git status,
06:21 - so now you can see there
are two files there,
06:24 - so if I only want to add one,
06:27 - I do that, I now added
that to the staging area.
06:32 - Actually let me clear
and say git status again
06:35 - and you can see, look, this
file is going to be committed
06:39 - and I can say git remove --cached
06:42 - the filename to unstage
it, if I made a mistake.
06:45 - This file, when I say commit,
06:47 - it's still just a new file,
that Git recognizes there,
06:50 - but it's not actually
part of the history yet.
06:53 - So now if I were to say git
commit adding a new dance,
06:59 - that's now been added
07:02 - and oops, and I can say git,
07:04 - oops, I hit Caps Lock by accident,
07:06 - I can say git status
again and you can see,
07:08 - it's showing me the only
thing is this new file.
07:11 - Now if you've added a lot of files
07:13 - or you just want to add everything,
07:14 - you can always just say git add .,
07:17 - so git add . is kind of like git add
07:18 - anything that Git detects
as a change or a new file
07:22 - and then I can say git commit
- adding a second dance,
07:29 - oops, I forgot my -m,
07:32 - git commit -m
07:33 - and notice I'm not saying -a anymore,
07:37 - because I'm doing the add
and commit as seperate steps
07:41 - and now I've added a second
dance, I can say clear
07:44 - and I can say git status
and on branch master,
07:48 - nothing to commit,
working directory clean,
07:51 - it means no files have
any new changes in them
07:54 - and the directory doesn't
have any new files in it.
07:57 - So now we're done, I
made a new repository,
08:01 - I had an existing directory of files,
08:04 - I turned it into a
repository, added those files,
08:06 - now what I want to do
is put that on GitHub.
08:08 - So right, I should just
say what I said before,
08:10 - git push origin master, right,
08:12 - that'll push it to GitHub.
08:15 - Ooh, I hit the table by accident,
08:16 - there was no, I got an error message,
08:18 - but I'm not angry about it at all,
08:20 - I deserve that error message,
08:21 - origin does not appear to be
a Git repository, because why?
08:25 - Let's say git remote, nothing,
08:27 - git remote -v, nothing,
there are no remotes,
08:32 - so if my repository started on GitHub
08:34 - and I brought it down to my computer,
08:36 - a remote is already going
to be attached to it,
08:39 - but if I'm starting my
repository on my computer,
08:41 - it doesn't have a remote
associated with it,
08:43 - so I need to add that remote.
08:45 - So the way to add the remote
is I have to go now to GitHub
08:48 - and I have to make a new repository,
08:50 - so I'm going to call this
repository, Rainbow-Dance
08:54 - and it's a public repository,
now here's the thing,
08:57 - I don't want to initialize
this with a README right now,
09:00 - I could, and there's a variety of ways
09:02 - I can deal with that, if I do,
09:04 - but this is actually going to make
09:05 - a completely empty repository
with no files in it,
09:07 - that's what I want, I want it to be empty,
09:09 - I'm going to make it remote and
then push my repository to it.
09:12 - So I'm going to say Create Repository
09:14 - and actually if you look here,
09:16 - it's going to tell you what
to do on your command line,
09:20 - but I already did this, git init, git add,
09:22 - git commit first commit,
09:25 - but this is the new
thing that I need to add,
09:28 - I actually need to make the URL
09:30 - for this repository on GitHub
09:32 - the origin remote for this
particular repository.
09:35 - So the commands for doing that
are git remote add origin,
09:40 - I want to add a remote named origin
09:42 - and by the way, I don't
have to call it origin,
09:44 - I could call it GitHub, if I want
09:45 - or I could call it Rainbow, if I want,
09:48 - it doesn't matter what I call it,
09:50 - but origin is kind of a
convention for the sort of
09:52 - origin web server version
of this repository,
09:55 - so I'm going to say git remote add origin
09:56 - and then what do I need?
09:58 - I need the URL for this Git repository,
10:01 - which is conveniently right here,
10:04 - I'm going to copy it and I'm
going to paste that in here
10:07 - and then I'm going to hit Enter
10:09 - and now I should say git
remote, you can see it's there,
10:12 - git remote -v and you can see it's there.
10:15 - Okay, now we're cooking
10:17 - and I'm going to say
git push origin master,
10:21 - oh and whoa, it just worked.
10:23 - So interestingly enough,
remember how I had to type
10:26 - my username and password in before?
10:28 - Well, I didn't this time,
the reason why I didn't
10:30 - is that my machine just sort
of like cached it somehow,
10:33 - so I've a feeling if I
like restart my computer,
10:35 - the Terminal will come back
and might ask me for it again,
10:37 - but it's nice to see
that you don't have to
10:39 - continually enter that
username and password,
10:40 - if you're kind of in the same session,
10:43 - but if it does, enter your
username and password.
10:44 - So you can see, I pushed
all that stuff there
10:48 - and now if I hit Refresh,
you can see there it is,
10:51 - dance and dance-two.
10:52 - Now incidentally, I'm
going to go to this file,
10:55 - I'm going to hit Edit and we're
going to change the Rainbow-Dance.
10:58 - ♪ Step left ♪
10:59 - ♪ Step right ♪
11:00 - ♪ Jump up and own ♪
11:01 - ♪ Twirl your hands ♪
11:02 - Let's add that,
11:03 - twirl your hands
11:07 - and then I'm going to hit commit
11:11 - making a change on GitHub,
11:12 - I don't know if you guys can see this,
11:15 - then we scroll down
and hit Commit Changes,
11:18 - I just want you to see that now, if I go,
11:20 - so I made a change now on GitHub,
11:23 - I made my repository on my computer,
11:25 - I pushed it to GitHub, I
made a change on GitHub,
11:28 - now interestingly enough,
if I say git status,
11:32 - nothing to commit,
working directory clean,
11:34 - I feel like sometimes it
tells me if I'm behind,
11:38 - maybe I have to do git fetch,
fetch is another command,
11:41 - anyway, sometimes it tells me I'm behind,
11:42 - but it doesn't know that I
can say git pull origin master
11:47 - and you can see that it actually
brought those changes here
11:50 - and now if I go back to my dance,
11:54 - oh,
11:56 - silly text editor doesn't
like auto update the file,
12:01 - but you can see it's there now,
12:03 - Twirl your hands and do
the Rainbow dance, yay.
12:07 - Okay, so just to recap here
in this particular video,
12:09 - what I looked at is I
have files on my computer,
12:13 - I turned those files
into a Git repository,
12:15 - then I created an empty
repository on GitHub,
12:17 - linked it together, pushed the files up,
12:19 - made a change on GitHub, pulled them down,
12:21 - so now I have a way
12:22 - that I can just work
locally or work remotely.
12:25 - So the thing that we're
really missing here so far
12:28 - is the collaborative features,
12:30 - so what if you want to work
on somebody else's repository,
12:33 - but work on their repository
locally on your computer?
12:35 - What if you want to do
that in a seperate branch?
12:37 - So that's what I will get to
in the next set of videos,
12:40 - there's a lot more, I think
there's a lot more concepts
12:42 - to sort of cover of how to do
all of those things locally
12:44 - and a few other little
tricks like a git ignore file
12:47 - and a bunch of other little things,
12:49 - that I'll get to in other
videos as well, okay.
12:51 - Thanks very much and see you
hopefully in another video.

Cleaned transcript:

Welcome to another Git and GitHub tutorial. Now, in this particular tutorial, what I'm going to show you is the process for you're working on a project, that project exists on your laptop, you've been working on it for an hour, a day, a week, a month and suddenly you want to turn this project, this folder of files into a Git repository and then put that Git repository on GitHub, this is different than what I showed you in the previous video, right, I created the Git repository on GitHub and then I brought it down to my computer, worked on it on my computer and pushed it back up. You know, it doesn't really matter, honestly, I often just work that way, it's a little bit easier, I just make something on GitHub, pull it down and then put files into it, but it's useful to know this other way of doing it and the key command that you need to know, if you come over here to my whiteboard is, do I have it here anywhere? No, I do not, it's a new one I'm adding, it's getting to be a mess down here, but it's init, so this command, get init is crucial for this particular video. Now, I'm making this video series without source code whatsoever, but if you're a programmer, most likely you have a directory of code files. I, instead of having a directory of code files, have a directory of instructions for dancing, this is the Rainbow dance, which is. ♪ Step left ♪ ♪ Step right ♪ ♪ Jump up and down ♪ ♪ To the Rainbow dance ♪ ♪ Step left ♪ You don't want to see me do this, do you? Probably not, okay. So this is the Rainbow dance and if I go to my desktop and I go to this RainbowDance directory, you can see that file is in there, again, this could be a directory of tons of files, but just one file, so what I want to do is turn this into a Git repository, it is currently not a Git repository, let's be sure about that. So I'm going to Terminal and I'm going to say cd, hold on, let me adjust the size here a little bit and I'm going to say cd and I need to go to that directory, so the way I can go to that directory is just take that directory and drag it here. Now I'm in the RainbowDance directory, let's make sure by saying pwd, I definitely am. Now I'm going to type git status, not a Git repository, so by default, any directory on your computer is not a Git repository, but I can turn it into a Git repository by saying git init, that's all I need, initialized empty Git repository, so now I have an empty Git repository, fantastic. Now, what if I type git status now? So it's saying untracked files, so this is something that we haven't actually seen before, you might not have realized this, but I secretly with the wave of my magic, my hands aren't very magic, I guess, but I have always just been working on preexisting files, that were made on GitHub, I didn't add a new file and this brings up a very strange thing about commits and git and saving things, oh, this erasing is not working very well, let's try this other eraser, but you're just going to have to bear with me, messy whiteboard makes me very uncomfortable, but I think life will go on. So let's talk about workflow with git and commits and we need to, before we can get this new Git repository onto GitHub, we've got to deal with something else, the add, right and I'm going to put it up here, add. So let's say you have a file, dance.txt, forgetting about Git for a second, if you make a change to that file, you're just got to hit Command+S and save it, the file's saved, your changes are saved, what we saw was like a commit, is when we were on GitHub, a commit was basically the same as save, these were like the same things, if you're working locally however, if you're working locally however, the first thing you do is save, that's just saving the actual file on your file system, but it's not actually committing the change to the Git repository, so the second thing that you do is actually commit, so save and commit are seperate steps, I'm saving the file, but now I'm also committing it to the repository. Now the strange thing is there's actually a third step called add and add, this is required, if you have new files, so Git has this concept of a staging area, where you can think of like, let me redraw this diagram up here, right, you have a bunch of files and these files are being manipulated, there is a staging area and then there is the action of committing. So with one file, this almost seems ridiculous to talk about, but if you have a lot of files and a lot of things you're changing, this could be useful, because let's just say you have dance.txt and then one.txt, two.txt, three.txt, four.txt, five.txt and you've made changes in all of your files and you want to do a commit, but you actually only want the commit to be associated with changes that are in these files, but there are changes in other files, so the things that you actually want to commit, you can put in the staging area, you can also remove them from the staging area. Add is a way of putting things in the staging area, so that when you call, when you execute commit, those are the changes that are actually committed. So for us, for 99% of the cases, you saw that I said git commit a, that does add and commit all in one fell swoop, that's what I did in the previous video, git commit a just says add everything and commit it, any changes I've made anywhere, commit them. But in this case, I can't do that right now, there might be a way, but I want to explicitly add the new files and then commit them, I need to put stuff in the staging area and then commit them, so let's do that. I'm going to come over here and what I'm going to do is I'm going to say git add dance.txt, now let's do something actually just to be a bit more explicit about this, I'm going to make a second file, dancetwo.txt and you can see git status, so now you can see there are two files there, so if I only want to add one, I do that, I now added that to the staging area. Actually let me clear and say git status again and you can see, look, this file is going to be committed and I can say git remove cached the filename to unstage it, if I made a mistake. This file, when I say commit, it's still just a new file, that Git recognizes there, but it's not actually part of the history yet. So now if I were to say git commit adding a new dance, that's now been added and oops, and I can say git, oops, I hit Caps Lock by accident, I can say git status again and you can see, it's showing me the only thing is this new file. Now if you've added a lot of files or you just want to add everything, you can always just say git add ., so git add . is kind of like git add anything that Git detects as a change or a new file and then I can say git commit adding a second dance, oops, I forgot my m, git commit m and notice I'm not saying a anymore, because I'm doing the add and commit as seperate steps and now I've added a second dance, I can say clear and I can say git status and on branch master, nothing to commit, working directory clean, it means no files have any new changes in them and the directory doesn't have any new files in it. So now we're done, I made a new repository, I had an existing directory of files, I turned it into a repository, added those files, now what I want to do is put that on GitHub. So right, I should just say what I said before, git push origin master, right, that'll push it to GitHub. Ooh, I hit the table by accident, there was no, I got an error message, but I'm not angry about it at all, I deserve that error message, origin does not appear to be a Git repository, because why? Let's say git remote, nothing, git remote v, nothing, there are no remotes, so if my repository started on GitHub and I brought it down to my computer, a remote is already going to be attached to it, but if I'm starting my repository on my computer, it doesn't have a remote associated with it, so I need to add that remote. So the way to add the remote is I have to go now to GitHub and I have to make a new repository, so I'm going to call this repository, RainbowDance and it's a public repository, now here's the thing, I don't want to initialize this with a README right now, I could, and there's a variety of ways I can deal with that, if I do, but this is actually going to make a completely empty repository with no files in it, that's what I want, I want it to be empty, I'm going to make it remote and then push my repository to it. So I'm going to say Create Repository and actually if you look here, it's going to tell you what to do on your command line, but I already did this, git init, git add, git commit first commit, but this is the new thing that I need to add, I actually need to make the URL for this repository on GitHub the origin remote for this particular repository. So the commands for doing that are git remote add origin, I want to add a remote named origin and by the way, I don't have to call it origin, I could call it GitHub, if I want or I could call it Rainbow, if I want, it doesn't matter what I call it, but origin is kind of a convention for the sort of origin web server version of this repository, so I'm going to say git remote add origin and then what do I need? I need the URL for this Git repository, which is conveniently right here, I'm going to copy it and I'm going to paste that in here and then I'm going to hit Enter and now I should say git remote, you can see it's there, git remote v and you can see it's there. Okay, now we're cooking and I'm going to say git push origin master, oh and whoa, it just worked. So interestingly enough, remember how I had to type my username and password in before? Well, I didn't this time, the reason why I didn't is that my machine just sort of like cached it somehow, so I've a feeling if I like restart my computer, the Terminal will come back and might ask me for it again, but it's nice to see that you don't have to continually enter that username and password, if you're kind of in the same session, but if it does, enter your username and password. So you can see, I pushed all that stuff there and now if I hit Refresh, you can see there it is, dance and dancetwo. Now incidentally, I'm going to go to this file, I'm going to hit Edit and we're going to change the RainbowDance. ♪ Step left ♪ ♪ Step right ♪ ♪ Jump up and own ♪ ♪ Twirl your hands ♪ Let's add that, twirl your hands and then I'm going to hit commit making a change on GitHub, I don't know if you guys can see this, then we scroll down and hit Commit Changes, I just want you to see that now, if I go, so I made a change now on GitHub, I made my repository on my computer, I pushed it to GitHub, I made a change on GitHub, now interestingly enough, if I say git status, nothing to commit, working directory clean, I feel like sometimes it tells me if I'm behind, maybe I have to do git fetch, fetch is another command, anyway, sometimes it tells me I'm behind, but it doesn't know that I can say git pull origin master and you can see that it actually brought those changes here and now if I go back to my dance, oh, silly text editor doesn't like auto update the file, but you can see it's there now, Twirl your hands and do the Rainbow dance, yay. Okay, so just to recap here in this particular video, what I looked at is I have files on my computer, I turned those files into a Git repository, then I created an empty repository on GitHub, linked it together, pushed the files up, made a change on GitHub, pulled them down, so now I have a way that I can just work locally or work remotely. So the thing that we're really missing here so far is the collaborative features, so what if you want to work on somebody else's repository, but work on their repository locally on your computer? What if you want to do that in a seperate branch? So that's what I will get to in the next set of videos, there's a lot more, I think there's a lot more concepts to sort of cover of how to do all of those things locally and a few other little tricks like a git ignore file and a bunch of other little things, that I'll get to in other videos as well, okay. Thanks very much and see you hopefully in another video.
