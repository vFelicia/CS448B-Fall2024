With timestamps:

00:00 - hello welcome to another computer vision
00:02 - tutorial video in the previous video I
00:04 - looked at how to find of an object of a
00:07 - certain color and find the average
00:08 - location of all the pixels of that color
00:10 - which allows me to very easily track an
00:12 - object like this and you can see I can
00:13 - kind of move this around that I'm
00:14 - tracking it now what I want to do in
00:18 - this next video is look at something
00:21 - related but a little bit different to
00:23 - look at how do I find pixels that have
00:25 - changed so in this sense I'm writing a
00:27 - motion detector motion is pixels that
00:30 - are changing right because if everything
00:31 - is very still none of the pixels are
00:35 - changing but if I move those green
00:38 - pixels are suddenly becoming to my skin
00:40 - color and my skin color pixels or
00:41 - something on green pixels that sort of
00:43 - thing so I'm gonna start with this code
00:45 - example up but before I do that let's
00:46 - add just a little sort of simple
00:47 - optimization to it we don't really have
00:49 - a speed issue this is running very very
00:51 - quickly
00:51 - but this can as you move to higher
00:53 - resolution become an issue I did mention
00:55 - he in the previous video that this
00:57 - particular algorithm right I'm finding
01:00 - the distance seems weird distance
01:02 - between two colors where well just you
01:05 - can think of this three-dimensional
01:06 - space as well that we live in as a color
01:09 - space and each color
01:10 - you know the x-axis of this space being
01:13 - red and the y-axis being green and the
01:16 - z-axis being blue and so colors that are
01:19 - near each other in the space are more
01:20 - similar so that's how this sort of idea
01:23 - of Euclidean distance works but the
01:26 - truth is this the distance function uses
01:28 - a square root so I'm going to write my
01:30 - own function here down here I'm just
01:32 - going to call it distance squared and
01:34 - I'm going to give it a six arguments
01:42 - whoops this should be x2 and what I want
01:49 - is to get that distance which is x2
01:53 - minus x1 times x2 minus x1 plus and then
02:02 - I want to do the same thing with Y so
02:04 - it's the difference between X the x
02:06 - value is the difference between the Y
02:08 - values and the distance between the
02:10 - difference between the Z values all
02:12 - those values
02:14 - and added together now the actual
02:16 - distance formula would then take a
02:17 - square root of all that but I'm going to
02:18 - not do the square root
02:20 - thus this function is called distance
02:21 - squared I'm calling distance squared and
02:23 - so I can just change this to this and
02:25 - then what am i checking I'm not checking
02:27 - against the threshold anymore
02:29 - but I'm checking into the threshold
02:30 - squared and now I don't have any square
02:32 - root function which will make the code
02:34 - run a little bit faster and this could
02:35 - also I could eliminate having to square
02:37 - it by just like using the value that's
02:39 - already squared but I'm making the point
02:41 - here so you can see this works exactly
02:42 - the same way same exact math but I've
02:44 - eliminated a square root okay now that
02:46 - I've done that let's start moving on to
02:48 - thinking about thinking about how I can
02:54 - sorry how I can do this frame
02:56 - differencing okay so first thing I need
02:59 - to deal with is the fact that I have
03:01 - this capture event right in a separate
03:03 - thread the video library is calling this
03:06 - event function capture event every time
03:08 - there's a new image available from the
03:10 - camera video dot read here's a new image
03:12 - video dot read here's a new image video
03:15 - tree here's a new image so what I need
03:17 - to do is right before I get that new
03:20 - image let me copy the previous image to
03:23 - save it so I have the previous one and
03:25 - the current one so what I want to do is
03:28 - add actually a pea image object I'm
03:30 - going to call it pre eve for previous
03:32 - and then what I'm going to do here is
03:35 - say previous previous equals create
03:38 - image and I want it to be exactly the
03:40 - same dimensions as the video and I want
03:43 - it to be an RGB image so this is making
03:46 - a blank image in processing and then
03:49 - right before I'm about to read that
03:51 - image I want to say previous dot copy
03:55 - the video and then the copy function in
04:00 - processing says take what take the
04:02 - pixels in the video and copy them to
04:04 - this particular image but you can do all
04:06 - sorts of crazy stuff like you can take a
04:07 - little bit of this image and copy it
04:09 - here and stretch it out but I'm not
04:10 - going to do anything that interesting
04:12 - I'm literally just going to say copy the
04:16 - whole video onto the whole previous
04:21 - image so I'm giving it two rectangles
04:25 - and so and the other thing
04:27 - it's probably I worth doing is saying
04:30 - update pixels so this now I should have
04:35 - previous and the current video so if we
04:39 - run this let's just run this to make
04:40 - sure there are no errors but she was
04:43 - untied look I have a knee I've never I
04:47 - don't think I've ever shown my knee in
04:48 - any of these videos before and I'll get
04:50 - edited out okay so you can see this is
04:54 - still working nothing's changed but
04:55 - behind the scenes there's this previous
04:57 - image so what I want to do now actually
05:00 - is change what I'm doing
05:02 - oh and I think I might have messed up by
05:05 - not saving as let me do this right now
05:09 - motion detection so what I want to do
05:14 - right now is actually look at every
05:16 - pixel in the current image and compare
05:20 - it to the previous one okay so I'm going
05:26 - to lose this idea of a track color
05:28 - because I'm no longer tracking a color
05:31 - and instead what I want to do here is I
05:35 - want to get not only the current color
05:37 - but I want the previous color which is
05:41 - from the previous image and I'm going to
05:45 - call that R - G - B - and then I can
05:49 - check the distance between those I can
05:51 - check if they're less than some
05:52 - threshold now this is a this is a
05:56 - difference threshold how different do
05:58 - they have to be to be considered motion
06:00 - and I'm going to leave all this average
06:02 - stuff in here because I'm going to use
06:04 - that in a moment but just so you see it
06:07 - right now what I'm going to actually do
06:09 - is say load pixels and in here I'm going
06:16 - to actually just draw to the pixels
06:17 - array of the display itself and I can
06:19 - use that same location and if it's a
06:25 - motion pixel I'm going to set its color
06:28 - to white
06:32 - otherwise set its color to black and
06:35 - then at the very end I'm going to say
06:37 - update pick
06:39 - SILS so oops we don't have track color
06:42 - anymore so now I'm going to run this and
06:45 - take a look at what happens come on
06:51 - video come alive whoops okay we got an
06:53 - error previous color goes previous
06:55 - pixels location now where did I miss
06:57 - I never said previous load pixels so
07:02 - because I'm going to look at the pixels
07:03 - of that previous image just like I'm
07:06 - looking at the pixels of the video I've
07:08 - got actually called load pixels okay
07:10 - let's run this again there's a lot of
07:12 - weight in here come on video ah it's 11
07:18 - error what did I miss there array out of
07:22 - bounds exception I don't see why I
07:24 - should have an array out of bounds
07:25 - exception back after a moment of
07:28 - debugging there are two key issues that
07:30 - I had in my code that caused a lot of
07:32 - problems number one is something that's
07:34 - a little bit of a nuance to the the way
07:38 - the processing video library works but
07:40 - the video stuff is happening separately
07:43 - behind the scenes and by the time we get
07:45 - down to this line of code the video
07:48 - actually I the camera hasn't like opened
07:50 - its connection yet so the video width
07:51 - and height doesn't actually exist so I
07:53 - could be smarter about how I create that
07:55 - image but I think just to get this
07:56 - example working right now I'm just going
07:58 - to hard-code in the width and the height
07:59 - I know that my camera is giving me a 640
08:02 - by 360 image so I want my background
08:05 - image to be that as well the other thing
08:07 - that I didn't notice I had as I went
08:09 - over here is right the current color is
08:12 - from the video the previous color is
08:14 - from the previous image the previous
08:16 - frame but I want those red green and
08:18 - blue second values to be not from
08:21 - current color but from previous color so
08:23 - I've got a I've got to fix that and now
08:28 - that I have that the other thing that I
08:30 - think might be necessary oh maybe it
08:32 - doesn't matter oh I might have not had
08:33 - this in there so I also make sure that
08:36 - I'm loading the videos pixels and the
08:37 - previous pixels and so now we should be
08:40 - able to see white pixels wherever there
08:45 - is no motion meaning the the pixel is
08:48 - the threat the distance is less and
08:50 - black pixels where there is motion so
08:52 - let's take a look
08:53 - that and you try to zoom in here so you
08:58 - can see what's going on
08:59 - come on image so you can see it's very
09:02 - very white and now you can see my arm is
09:06 - very very still there is no motion but
09:09 - if I move my arm the pixels are black
09:10 - you can see around the edges and I can
09:12 - kind of walk in you can even see like if
09:14 - I move the t-shirt around you can see
09:17 - this and this would be a good time to
09:18 - see what happens with some dancing
09:23 - motion dance detection okay that was a
09:29 - good she weren't expecting that you
09:30 - ended up now you might be sorry you're
09:32 - watching this video okay um so there's a
09:35 - couple more things I want to do with
09:36 - this number one let me just show you
09:37 - something interesting about this I sort
09:39 - of actually also weirdly feel like
09:41 - reversing that so let's see the white is
09:43 - the black is the background and white
09:45 - pixels otherwise um but one thing I want
09:47 - to show you is I'm actually every time
09:49 - there's a new image from the video I'm
09:51 - copying the previous one but I could
09:53 - also by the way say hey let's take this
09:55 - code and just add it in mousepressed so
10:01 - what this is doing you'll see in a
10:03 - second is as this runs speed up here
10:09 - you're going to see uh it's all white I
10:12 - could click and it's now it's all black
10:15 - I'm going to click again there's a lot
10:16 - of auto white balance and going on you
10:18 - can see here that now it's just showing
10:20 - me pixels that are different from the
10:22 - background because it's memorized the
10:24 - background you know another way that I
10:25 - could make this a little bit more clear
10:26 - is at the end here I could draw the
10:31 - video and draw the previous one I'll
10:36 - make them kind of small at the top this
10:41 - is going to make things a little bit
10:42 - more clear are you running run come on
10:49 - computer vision time so you can see here
10:54 - now this is what it's comparing it's
10:56 - comparing you know visit image up here
10:58 - to the one on the right and if I go like
11:00 - this and then I move you can see that's
11:04 - now unfortunately the camera auto
11:06 - whitebalance so if I had a camera that
11:08 - didn't auto white balance could see I
11:09 - could come back into my spot and try to
11:12 - find it look I can't get there ah well
11:17 - there I have no okay anyway you get the
11:18 - idea so I could be out of the frame and
11:21 - save it now it's the background now that
11:23 - cup is shaking it stopped shaking save
11:25 - it again and I could move my arm in and
11:28 - you can see I'm getting a really nice
11:29 - silhouette so this is the kind of thing
11:31 - you could do also forgetting silhouettes
11:33 - but you want good lighting it really
11:35 - helps to have a solid colored background
11:37 - you don't need a green-screen but
11:39 - certainly that's helping the cause here
11:40 - but really you need a camera that's not
11:42 - going to do all this auto white
11:43 - balancing stuff you can see how quickly
11:45 - it changes okay let's add one more thing
11:46 - to this now which is that remember how
11:49 - we were looking for the average location
11:51 - of all of the red pixels well I can now
11:54 - do exactly that here I can say anytime
11:59 - you find a motion pixel a pixel with a
12:01 - distance greater than some threshold
12:04 - then also what I want is to see that
12:09 - particular pixel and I'm going to fill
12:11 - it white with a black okay so let's make
12:13 - it um
12:14 - let's make it some like pinkish color so
12:16 - we can really see it and maybe make it a
12:19 - little bit bigger so this is going to be
12:22 - interesting because what I'm going to do
12:24 - is look for the average area of motion
12:26 - and let's see what that gets us oh I
12:30 - didn't mean to have oh whoops let me let
12:33 - me do a couple things here let's take
12:35 - these out we don't need to look at those
12:38 - right now and let's put this back in
12:41 - capture event so we're always always
12:43 - getting that previous frame awkwardly
12:47 - standing while waiting for camera to
12:49 - start okay but you can say onto move out
12:51 - of the frame and I can put my hand in
12:53 - here
12:53 - you can see this is actually doing a
12:55 - pretty decent job of hand tracking
12:57 - because you know it's not perfect by any
12:59 - means but you get a sense because my
13:01 - hand is the thing that's moving now if I
13:03 - stop moving it's going to completely go
13:05 - away but I could store that one thing
13:07 - improvement I could make to this at all
13:09 - is I could keep that location as a
13:11 - global variable and if there isn't any
13:13 - motion I could stay where it was last
13:15 - let's add that so let's make that let's
13:17 - make this average thing a global
13:20 - variable and over here what I'm going to
13:25 - do is only only alter it if there are at
13:30 - least let's say 20 pixels that have 20
13:33 - motion pixels otherwise it'll stay where
13:36 - it was before and let's always draw it
13:38 - so this is just a slight improvement to
13:41 - this that I think will help make it feel
13:44 - like it's doing something more along
13:45 - lines of what you might expect or want
13:47 - it to do
13:48 - so you can see I can move myself around
13:50 - and now 20 I guess is not that much like
13:55 - if there's so many pixels there let's
13:56 - just say there are 200 I don't know
13:59 - what's a reasonable number there's
14:00 - probably you know there's millions of
14:01 - pixels so these are probably like such
14:03 - incredibly low numbers that I'm using
14:06 - and you can see as I move anyway you
14:12 - could play with these values and get
14:15 - something that's doing something
14:16 - slightly better but you can see yeah the
14:18 - other thing that I would do here and
14:19 - since we're here is I'm going to I'm
14:21 - just going to add a alert X a variable
14:24 - called alert I'm going to show you that
14:25 - you can use linear interpolation I have
14:27 - a whole video all about lerp that I
14:30 - should link to from here but I can say
14:32 - also the thing I can do is I can say let
14:36 - me actually take a alert point and
14:39 - always say and say lerp x equals lerp
14:46 - between average X and lerp X and
14:49 - actually let me I like to say lerp X
14:51 - first I think and then point one so what
14:55 - I'm doing is I'm always just going 10%
14:58 - of the way towards the new point which
15:00 - is actually going to smooth things out
15:02 - quite a bit and I encourage you to look
15:04 - up my video about the lerp function
15:06 - which would kind of explain how that
15:07 - algorithm works a bit more and here we
15:11 - go and that camera just went off but I'm
15:13 - going to turn that back on and so you
15:15 - can see the sort of final result that we
15:16 - have here and the final result that we
15:19 - have here is that I have something
15:21 - that's kind of smooth as as I move my
15:24 - hand around where does it go to why does
15:28 - it go somewhere else I don't know I have
15:30 - a bug in my program where it's like
15:31 - leaving and going somewhere else
15:33 - kind of want to fix that oh because it's
15:38 - to adding all this stuff up ooh okay
15:41 - yeah yeah so this needs to be average X
15:44 - I it's adding up all those points even
15:50 - and but only only dividing it by count
15:52 - when it gets about 300 so I get that
15:54 - like added thing when it's less than 200
15:56 - that was terrible so what I want
15:59 - actually my global variable is to be the
16:01 - actual I'll call this motion X motion
16:05 - why and I actually only want to update
16:09 - those motion X and motion Y and then I
16:13 - want to alert that oops and this is now
16:19 - I think going to be a final version of
16:21 - this that works correctly so I was
16:24 - always adding up all those values for
16:26 - the average but then not calculating the
16:28 - average and so that was making it go way
16:30 - off the screen and you can see now I'm
16:31 - going to move off the screen and you can
16:33 - see I have sort of a very rudimentary
16:34 - like as long as I'm moving my hand
16:37 - around and I don't come in the scene I'm
16:40 - kind of getting it's it's kind of
16:42 - following me and it sort of like it
16:44 - nicely interpolated way okay so you can
16:47 - see that opens up a lot of possibilities
16:47 - if I'm in here you know it's going to
16:50 - kind of follow me around
16:51 - hi I could turn my music back on and I
16:54 - could do the pig dot dance
17:01 - I am a magic pink dot manipulator okay
17:06 - that's hopefully you turned this off and
17:08 - you didn't have to experience that so
17:10 - this is now a second video where we've
17:12 - looked at kind of how you can use motion
17:14 - frame differencing to sort of track a
17:16 - point around the screen and in the next
17:18 - video I'm going to return back to where
17:20 - we were tracking just this Cup and
17:21 - looking for the average amount of red
17:24 - pixels to actually thinking about this
17:25 - cup as a blob so that if I add a second
17:27 - blob second blob we can track both of
17:30 - them individually okay thanks for
17:32 - watching goodbye

Cleaned transcript:

hello welcome to another computer vision tutorial video in the previous video I looked at how to find of an object of a certain color and find the average location of all the pixels of that color which allows me to very easily track an object like this and you can see I can kind of move this around that I'm tracking it now what I want to do in this next video is look at something related but a little bit different to look at how do I find pixels that have changed so in this sense I'm writing a motion detector motion is pixels that are changing right because if everything is very still none of the pixels are changing but if I move those green pixels are suddenly becoming to my skin color and my skin color pixels or something on green pixels that sort of thing so I'm gonna start with this code example up but before I do that let's add just a little sort of simple optimization to it we don't really have a speed issue this is running very very quickly but this can as you move to higher resolution become an issue I did mention he in the previous video that this particular algorithm right I'm finding the distance seems weird distance between two colors where well just you can think of this threedimensional space as well that we live in as a color space and each color you know the xaxis of this space being red and the yaxis being green and the zaxis being blue and so colors that are near each other in the space are more similar so that's how this sort of idea of Euclidean distance works but the truth is this the distance function uses a square root so I'm going to write my own function here down here I'm just going to call it distance squared and I'm going to give it a six arguments whoops this should be x2 and what I want is to get that distance which is x2 minus x1 times x2 minus x1 plus and then I want to do the same thing with Y so it's the difference between X the x value is the difference between the Y values and the distance between the difference between the Z values all those values and added together now the actual distance formula would then take a square root of all that but I'm going to not do the square root thus this function is called distance squared I'm calling distance squared and so I can just change this to this and then what am i checking I'm not checking against the threshold anymore but I'm checking into the threshold squared and now I don't have any square root function which will make the code run a little bit faster and this could also I could eliminate having to square it by just like using the value that's already squared but I'm making the point here so you can see this works exactly the same way same exact math but I've eliminated a square root okay now that I've done that let's start moving on to thinking about thinking about how I can sorry how I can do this frame differencing okay so first thing I need to deal with is the fact that I have this capture event right in a separate thread the video library is calling this event function capture event every time there's a new image available from the camera video dot read here's a new image video dot read here's a new image video tree here's a new image so what I need to do is right before I get that new image let me copy the previous image to save it so I have the previous one and the current one so what I want to do is add actually a pea image object I'm going to call it pre eve for previous and then what I'm going to do here is say previous previous equals create image and I want it to be exactly the same dimensions as the video and I want it to be an RGB image so this is making a blank image in processing and then right before I'm about to read that image I want to say previous dot copy the video and then the copy function in processing says take what take the pixels in the video and copy them to this particular image but you can do all sorts of crazy stuff like you can take a little bit of this image and copy it here and stretch it out but I'm not going to do anything that interesting I'm literally just going to say copy the whole video onto the whole previous image so I'm giving it two rectangles and so and the other thing it's probably I worth doing is saying update pixels so this now I should have previous and the current video so if we run this let's just run this to make sure there are no errors but she was untied look I have a knee I've never I don't think I've ever shown my knee in any of these videos before and I'll get edited out okay so you can see this is still working nothing's changed but behind the scenes there's this previous image so what I want to do now actually is change what I'm doing oh and I think I might have messed up by not saving as let me do this right now motion detection so what I want to do right now is actually look at every pixel in the current image and compare it to the previous one okay so I'm going to lose this idea of a track color because I'm no longer tracking a color and instead what I want to do here is I want to get not only the current color but I want the previous color which is from the previous image and I'm going to call that R G B and then I can check the distance between those I can check if they're less than some threshold now this is a this is a difference threshold how different do they have to be to be considered motion and I'm going to leave all this average stuff in here because I'm going to use that in a moment but just so you see it right now what I'm going to actually do is say load pixels and in here I'm going to actually just draw to the pixels array of the display itself and I can use that same location and if it's a motion pixel I'm going to set its color to white otherwise set its color to black and then at the very end I'm going to say update pick SILS so oops we don't have track color anymore so now I'm going to run this and take a look at what happens come on video come alive whoops okay we got an error previous color goes previous pixels location now where did I miss I never said previous load pixels so because I'm going to look at the pixels of that previous image just like I'm looking at the pixels of the video I've got actually called load pixels okay let's run this again there's a lot of weight in here come on video ah it's 11 error what did I miss there array out of bounds exception I don't see why I should have an array out of bounds exception back after a moment of debugging there are two key issues that I had in my code that caused a lot of problems number one is something that's a little bit of a nuance to the the way the processing video library works but the video stuff is happening separately behind the scenes and by the time we get down to this line of code the video actually I the camera hasn't like opened its connection yet so the video width and height doesn't actually exist so I could be smarter about how I create that image but I think just to get this example working right now I'm just going to hardcode in the width and the height I know that my camera is giving me a 640 by 360 image so I want my background image to be that as well the other thing that I didn't notice I had as I went over here is right the current color is from the video the previous color is from the previous image the previous frame but I want those red green and blue second values to be not from current color but from previous color so I've got a I've got to fix that and now that I have that the other thing that I think might be necessary oh maybe it doesn't matter oh I might have not had this in there so I also make sure that I'm loading the videos pixels and the previous pixels and so now we should be able to see white pixels wherever there is no motion meaning the the pixel is the threat the distance is less and black pixels where there is motion so let's take a look that and you try to zoom in here so you can see what's going on come on image so you can see it's very very white and now you can see my arm is very very still there is no motion but if I move my arm the pixels are black you can see around the edges and I can kind of walk in you can even see like if I move the tshirt around you can see this and this would be a good time to see what happens with some dancing motion dance detection okay that was a good she weren't expecting that you ended up now you might be sorry you're watching this video okay um so there's a couple more things I want to do with this number one let me just show you something interesting about this I sort of actually also weirdly feel like reversing that so let's see the white is the black is the background and white pixels otherwise um but one thing I want to show you is I'm actually every time there's a new image from the video I'm copying the previous one but I could also by the way say hey let's take this code and just add it in mousepressed so what this is doing you'll see in a second is as this runs speed up here you're going to see uh it's all white I could click and it's now it's all black I'm going to click again there's a lot of auto white balance and going on you can see here that now it's just showing me pixels that are different from the background because it's memorized the background you know another way that I could make this a little bit more clear is at the end here I could draw the video and draw the previous one I'll make them kind of small at the top this is going to make things a little bit more clear are you running run come on computer vision time so you can see here now this is what it's comparing it's comparing you know visit image up here to the one on the right and if I go like this and then I move you can see that's now unfortunately the camera auto whitebalance so if I had a camera that didn't auto white balance could see I could come back into my spot and try to find it look I can't get there ah well there I have no okay anyway you get the idea so I could be out of the frame and save it now it's the background now that cup is shaking it stopped shaking save it again and I could move my arm in and you can see I'm getting a really nice silhouette so this is the kind of thing you could do also forgetting silhouettes but you want good lighting it really helps to have a solid colored background you don't need a greenscreen but certainly that's helping the cause here but really you need a camera that's not going to do all this auto white balancing stuff you can see how quickly it changes okay let's add one more thing to this now which is that remember how we were looking for the average location of all of the red pixels well I can now do exactly that here I can say anytime you find a motion pixel a pixel with a distance greater than some threshold then also what I want is to see that particular pixel and I'm going to fill it white with a black okay so let's make it um let's make it some like pinkish color so we can really see it and maybe make it a little bit bigger so this is going to be interesting because what I'm going to do is look for the average area of motion and let's see what that gets us oh I didn't mean to have oh whoops let me let me do a couple things here let's take these out we don't need to look at those right now and let's put this back in capture event so we're always always getting that previous frame awkwardly standing while waiting for camera to start okay but you can say onto move out of the frame and I can put my hand in here you can see this is actually doing a pretty decent job of hand tracking because you know it's not perfect by any means but you get a sense because my hand is the thing that's moving now if I stop moving it's going to completely go away but I could store that one thing improvement I could make to this at all is I could keep that location as a global variable and if there isn't any motion I could stay where it was last let's add that so let's make that let's make this average thing a global variable and over here what I'm going to do is only only alter it if there are at least let's say 20 pixels that have 20 motion pixels otherwise it'll stay where it was before and let's always draw it so this is just a slight improvement to this that I think will help make it feel like it's doing something more along lines of what you might expect or want it to do so you can see I can move myself around and now 20 I guess is not that much like if there's so many pixels there let's just say there are 200 I don't know what's a reasonable number there's probably you know there's millions of pixels so these are probably like such incredibly low numbers that I'm using and you can see as I move anyway you could play with these values and get something that's doing something slightly better but you can see yeah the other thing that I would do here and since we're here is I'm going to I'm just going to add a alert X a variable called alert I'm going to show you that you can use linear interpolation I have a whole video all about lerp that I should link to from here but I can say also the thing I can do is I can say let me actually take a alert point and always say and say lerp x equals lerp between average X and lerp X and actually let me I like to say lerp X first I think and then point one so what I'm doing is I'm always just going 10% of the way towards the new point which is actually going to smooth things out quite a bit and I encourage you to look up my video about the lerp function which would kind of explain how that algorithm works a bit more and here we go and that camera just went off but I'm going to turn that back on and so you can see the sort of final result that we have here and the final result that we have here is that I have something that's kind of smooth as as I move my hand around where does it go to why does it go somewhere else I don't know I have a bug in my program where it's like leaving and going somewhere else kind of want to fix that oh because it's to adding all this stuff up ooh okay yeah yeah so this needs to be average X I it's adding up all those points even and but only only dividing it by count when it gets about 300 so I get that like added thing when it's less than 200 that was terrible so what I want actually my global variable is to be the actual I'll call this motion X motion why and I actually only want to update those motion X and motion Y and then I want to alert that oops and this is now I think going to be a final version of this that works correctly so I was always adding up all those values for the average but then not calculating the average and so that was making it go way off the screen and you can see now I'm going to move off the screen and you can see I have sort of a very rudimentary like as long as I'm moving my hand around and I don't come in the scene I'm kind of getting it's it's kind of following me and it sort of like it nicely interpolated way okay so you can see that opens up a lot of possibilities if I'm in here you know it's going to kind of follow me around hi I could turn my music back on and I could do the pig dot dance I am a magic pink dot manipulator okay that's hopefully you turned this off and you didn't have to experience that so this is now a second video where we've looked at kind of how you can use motion frame differencing to sort of track a point around the screen and in the next video I'm going to return back to where we were tracking just this Cup and looking for the average amount of red pixels to actually thinking about this cup as a blob so that if I add a second blob second blob we can track both of them individually okay thanks for watching goodbye
