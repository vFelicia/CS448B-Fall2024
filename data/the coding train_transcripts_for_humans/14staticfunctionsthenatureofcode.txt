With timestamps:

00:00 - Hello.
00:01 - Welcome to another chapter
1 video for Nature of Code
00:04 - on vectors.
00:04 - So I am building to something.
00:06 - I am getting somewhere--
to a place, where
00:09 - I'm going to make this example
for you that looks at something
00:12 - called acceleration, and
in fact has this walker
00:14 - or mover or particle,
whatever you want to call it,
00:16 - object, accelerating
towards the mouse.
00:19 - There are some key
concepts, however,
00:21 - that I want to talk about that
doing this example require.
00:24 - So if I go back to
where I just left off,
00:27 - looking at how to pick
a random vector using
00:30 - p5.Vector.Random2D.
00:32 - So this picks a random
vector always of length 1,
00:35 - but any random direction.
00:36 - And then I'm
scaling it randomly.
00:37 - We get this nice pattern.
00:39 - But this here,
p5.Vector.random2D,
00:43 - might look a little
strange to you.
00:45 - And this is an example
of a static function.
00:48 - Random2D is a static function.
00:50 - It's called on
p5.Vector, rather than
00:53 - like this function,
mult for multiply,
00:56 - which is called on
v the object itself.
00:58 - Let's look at this
a bit more closely.
01:04 - This is the
conventional way that I
01:06 - have looked at object-oriented
programming in most
01:08 - of my videos.
01:09 - I have this object
v. It's a p5 vector.
01:11 - And then I'm calling a
method on that object--
01:14 - a function on an object.
01:15 - This is what would be referred
to as an instance function
01:18 - or instance method.
01:19 - The one thing that's
a little bit unique
01:21 - here is that instead
of, say, new p5.Vector,
01:28 - I'm saying createVector.
01:30 - And that's just
something specific to p5
01:32 - itself, which has in it
a createVector function
01:35 - to make the vector object.
01:37 - But sure, in most cases,
like this one right
01:40 - here, I'll be making
a new walker object.
01:42 - And then I'm calling
instance methods
01:44 - walker.update, walker.show.
01:46 - Those execute the code
to run the functionality
01:49 - of this particular
walker object.
01:51 - So the term I'm using is
instance method or function.
01:58 - A static method,
a static function,
02:00 - is one that is not
called specifically
02:03 - on an individual object
itself, but rather
02:07 - on the class as a whole.
02:11 - So notice how I'm calling a
function random2D just like I'm
02:15 - calling a function add.
02:17 - But instead of on a specific
instance of p5.Vector object,
02:20 - I'm calling it on the name of
the class itself, p5.Vector.
02:25 - That's because this
bit of functionality
02:27 - isn't associated with
a particular object.
02:30 - I want to add something to
this specific vector here.
02:35 - But here, there's no
actual specific vector
02:37 - I'm talking about.
02:38 - I just want to make
a new random vector.
02:41 - So this begs the question,
why is it done this way?
02:45 - The story here is that
this is really a decision
02:48 - that the creators or maintainers
of the p5 library have chosen.
02:51 - There's no reason why
there couldn't be-- just
02:53 - like there is a global
createVector function that
02:56 - makes an empty vector, or
a vector with 0, 0 in it.
02:59 - There could be a
createRandom2Dvector.
03:05 - So I could be sitting here in
an alternate parallel universe
03:08 - saying this is the function to
make a random 2D vector in p5.
03:13 - But in JavaScript, or in other
programming languages as well,
03:16 - it's quite common
to want to collect
03:18 - a whole set of functions
under a particular namespace.
03:21 - For example, in JavaScript, if I
wanted to pick a random number,
03:24 - and I didn't have p5.js,
I would say Math.random.
03:28 - And there is a whole collection
of mathematical functions
03:33 - under the umbrella of math.
03:35 - They're namespaced under math.
03:36 - They're all static functions.
03:38 - So in p5.js, there are a lot
of global functions, which
03:42 - is a whole other discussion.
03:43 - Why are there global
functions in p5.js?
03:45 - But I don't want to get
into that right now.
03:47 - But all of the vector
functions are not
03:50 - part of the global p5 reference.
03:53 - They're all namespaced
under P5 vector.
03:55 - So there are some
times where I want
03:57 - to call a function that's
operating on a vector,
04:00 - and some other
operations that I just
04:01 - want to call that relate
to vectors that are called
04:04 - under the vector class itself.
04:06 - Some are static p5.Vector
dot the function name.
04:11 - And some are instance-- v
the instance of an object
04:14 - dot the function name.
04:16 - But I'm not done yet.
04:18 - One of the weirder things about
working with p5.Vector is there
04:22 - are both--
04:22 - this is an instance function
at a static function random2D.
04:26 - But there also is a
static function add.
04:29 - So some of the functions
have both instance
04:31 - and static versions
of the same function.
04:34 - So I want to look at a practical
example of why I might want
04:36 - to use one versus the other.
04:41 - To do this, let's return to the
world of scalar numbers-- just
04:45 - single values themselves.
04:48 - Let's say I have the variable
x, and it has the number 5.
04:54 - And then I also
have the number--
04:57 - and we'll call it
xspeed just to go back
04:59 - to when we were doing these
kinds of motion algorithms
05:03 - without vectors,
x speed equals 2.
05:06 - This is a case where
we would write code
05:08 - all the time like this--
x equals x plus xspeed.
05:13 - We did this without
a second thought.
05:14 - I'm taking 2, adding it to 5,
and putting that value back
05:18 - in x.
05:19 - So if this were in a draw
loop, x is 5, then it's 7,
05:21 - then it's 9, then it's 11, etc.
05:25 - We've now seen that
the equivalent is
05:28 - if I have a position vector,
And I have a velocity vector,
05:35 - I would say position
pos.add velocity.
05:41 - This is the equivalent of
this, but with vectors.
05:44 - x changes by x speed.
05:46 - Position changes by velocity.
05:48 - However, what if instead
of doing it this way,
05:54 - I wanted to say let new
x equals x plus xspeed.
06:03 - What if I wanted to take
the result of this operation
06:07 - and store it in
another variable?
06:09 - So x hasn't changed after
I run this line of code,
06:12 - x is still 5.
06:13 - I have the number 7 in this
particular variable new x.
06:17 - Now, in most examples,
I don't want to do that.
06:19 - I want x to change and
keep saving the new value
06:21 - into itself incrementally.
06:23 - But there are a
lot of times where
06:24 - I want to do an operation, not
mess with those two variables,
06:27 - and store it in a new result.
06:28 - How do I do that with vectors?
06:30 - So your instinct might
be, OK, maybe I'm
06:34 - going to have a new
pos, and I would set
06:40 - that equal to pos.add velocity.
06:45 - I mean, it's not correct.
06:47 - It makes logical sense.
06:50 - But by its nature,
an instance method
06:53 - that receives another
vector changes
06:55 - the object it's acting upon.
06:57 - This is where the static
version of add comes in.
07:00 - If you want to add two
vectors together, but not mess
07:04 - with those vectors, you
can use the static version
07:07 - of the add function.
07:10 - It's a bit wordy and the
code looks a little awkward,
07:13 - but it works.
07:15 - Let new pos equal p5.Vector.add
position, velocity.
07:26 - Does that fit?
07:27 - Oh, it fit.
07:28 - There you go.
07:28 - So if I want to add two
vectors together, and get
07:31 - the result in a
new vector, I just
07:33 - need to call the static version
of add, which is namespaced
07:37 - stored under the
p5.Vector class itself.
07:40 - So while this is very common
in our physics algorithms,
07:44 - position changes by
velocity, and in a moment,
07:47 - we'll see velocity
changes by acceleration,
07:49 - there are certain
times where I want
07:51 - to do an operation like this.
07:52 - And there are more examples
of that than just add as well.
07:56 - And this, in fact,
is exactly what's
07:58 - demonstrated on
the P5 reference.
08:00 - You can see here v equals
createVector v.add It actually
08:04 - changes v's components
themselves, versus having
08:08 - v1 and v2, and then saying
p5.Vector.add v1 and v2.
08:13 - And putting that
in a new vector V3.
08:16 - So hopefully now,
this video gives you
08:18 - a bit of a sense of
what the difference
08:20 - between a static method
is and an instance method.
08:23 - And by the way, I'm just,
for better or worse,
08:26 - using the word method and
function interchangeably.
08:29 - Technically speaking,
a method is a function
08:31 - that's part of a class in an
object and a function as well--
08:35 - a function that exists
maybe on its own.
08:37 - But I am a little bit
loosey-goosey with this stuff.
08:42 - So I'm using them
interchangeably.
08:43 - But the point of this
video is to give you
08:45 - a sense of what
static functions are
08:47 - and instance functions, static
methods or instance methods.
08:52 - And now, as we move
forward and start
08:54 - to work with more vector
operations in future videos
08:58 - and examples,
you'll have a sense
09:00 - of why I might be
picking one versus
09:02 - the other in different cases.
09:03 - And this is going to come up
in exactly the next example I'm
09:07 - going to demonstrate that's
working with an acceleration
09:10 - vector.
09:10 - So maybe you've decided,
forget about this.
09:15 - This is where I draw the line.
09:16 - This static method stuff
drove me crazy, I'm out.
09:20 - But if you're not,
if you want to keep
09:22 - going with Nature of Code,
I'll see you in the next video.
09:25 - Bye.
09:25 - [MUSIC PLAYING]

Cleaned transcript:

Hello. Welcome to another chapter 1 video for Nature of Code on vectors. So I am building to something. I am getting somewhere to a place, where I'm going to make this example for you that looks at something called acceleration, and in fact has this walker or mover or particle, whatever you want to call it, object, accelerating towards the mouse. There are some key concepts, however, that I want to talk about that doing this example require. So if I go back to where I just left off, looking at how to pick a random vector using p5.Vector.Random2D. So this picks a random vector always of length 1, but any random direction. And then I'm scaling it randomly. We get this nice pattern. But this here, p5.Vector.random2D, might look a little strange to you. And this is an example of a static function. Random2D is a static function. It's called on p5.Vector, rather than like this function, mult for multiply, which is called on v the object itself. Let's look at this a bit more closely. This is the conventional way that I have looked at objectoriented programming in most of my videos. I have this object v. It's a p5 vector. And then I'm calling a method on that object a function on an object. This is what would be referred to as an instance function or instance method. The one thing that's a little bit unique here is that instead of, say, new p5.Vector, I'm saying createVector. And that's just something specific to p5 itself, which has in it a createVector function to make the vector object. But sure, in most cases, like this one right here, I'll be making a new walker object. And then I'm calling instance methods walker.update, walker.show. Those execute the code to run the functionality of this particular walker object. So the term I'm using is instance method or function. A static method, a static function, is one that is not called specifically on an individual object itself, but rather on the class as a whole. So notice how I'm calling a function random2D just like I'm calling a function add. But instead of on a specific instance of p5.Vector object, I'm calling it on the name of the class itself, p5.Vector. That's because this bit of functionality isn't associated with a particular object. I want to add something to this specific vector here. But here, there's no actual specific vector I'm talking about. I just want to make a new random vector. So this begs the question, why is it done this way? The story here is that this is really a decision that the creators or maintainers of the p5 library have chosen. There's no reason why there couldn't be just like there is a global createVector function that makes an empty vector, or a vector with 0, 0 in it. There could be a createRandom2Dvector. So I could be sitting here in an alternate parallel universe saying this is the function to make a random 2D vector in p5. But in JavaScript, or in other programming languages as well, it's quite common to want to collect a whole set of functions under a particular namespace. For example, in JavaScript, if I wanted to pick a random number, and I didn't have p5.js, I would say Math.random. And there is a whole collection of mathematical functions under the umbrella of math. They're namespaced under math. They're all static functions. So in p5.js, there are a lot of global functions, which is a whole other discussion. Why are there global functions in p5.js? But I don't want to get into that right now. But all of the vector functions are not part of the global p5 reference. They're all namespaced under P5 vector. So there are some times where I want to call a function that's operating on a vector, and some other operations that I just want to call that relate to vectors that are called under the vector class itself. Some are static p5.Vector dot the function name. And some are instance v the instance of an object dot the function name. But I'm not done yet. One of the weirder things about working with p5.Vector is there are both this is an instance function at a static function random2D. But there also is a static function add. So some of the functions have both instance and static versions of the same function. So I want to look at a practical example of why I might want to use one versus the other. To do this, let's return to the world of scalar numbers just single values themselves. Let's say I have the variable x, and it has the number 5. And then I also have the number and we'll call it xspeed just to go back to when we were doing these kinds of motion algorithms without vectors, x speed equals 2. This is a case where we would write code all the time like this x equals x plus xspeed. We did this without a second thought. I'm taking 2, adding it to 5, and putting that value back in x. So if this were in a draw loop, x is 5, then it's 7, then it's 9, then it's 11, etc. We've now seen that the equivalent is if I have a position vector, And I have a velocity vector, I would say position pos.add velocity. This is the equivalent of this, but with vectors. x changes by x speed. Position changes by velocity. However, what if instead of doing it this way, I wanted to say let new x equals x plus xspeed. What if I wanted to take the result of this operation and store it in another variable? So x hasn't changed after I run this line of code, x is still 5. I have the number 7 in this particular variable new x. Now, in most examples, I don't want to do that. I want x to change and keep saving the new value into itself incrementally. But there are a lot of times where I want to do an operation, not mess with those two variables, and store it in a new result. How do I do that with vectors? So your instinct might be, OK, maybe I'm going to have a new pos, and I would set that equal to pos.add velocity. I mean, it's not correct. It makes logical sense. But by its nature, an instance method that receives another vector changes the object it's acting upon. This is where the static version of add comes in. If you want to add two vectors together, but not mess with those vectors, you can use the static version of the add function. It's a bit wordy and the code looks a little awkward, but it works. Let new pos equal p5.Vector.add position, velocity. Does that fit? Oh, it fit. There you go. So if I want to add two vectors together, and get the result in a new vector, I just need to call the static version of add, which is namespaced stored under the p5.Vector class itself. So while this is very common in our physics algorithms, position changes by velocity, and in a moment, we'll see velocity changes by acceleration, there are certain times where I want to do an operation like this. And there are more examples of that than just add as well. And this, in fact, is exactly what's demonstrated on the P5 reference. You can see here v equals createVector v.add It actually changes v's components themselves, versus having v1 and v2, and then saying p5.Vector.add v1 and v2. And putting that in a new vector V3. So hopefully now, this video gives you a bit of a sense of what the difference between a static method is and an instance method. And by the way, I'm just, for better or worse, using the word method and function interchangeably. Technically speaking, a method is a function that's part of a class in an object and a function as well a function that exists maybe on its own. But I am a little bit looseygoosey with this stuff. So I'm using them interchangeably. But the point of this video is to give you a sense of what static functions are and instance functions, static methods or instance methods. And now, as we move forward and start to work with more vector operations in future videos and examples, you'll have a sense of why I might be picking one versus the other in different cases. And this is going to come up in exactly the next example I'm going to demonstrate that's working with an acceleration vector. So maybe you've decided, forget about this. This is where I draw the line. This static method stuff drove me crazy, I'm out. But if you're not, if you want to keep going with Nature of Code, I'll see you in the next video. Bye. [MUSIC PLAYING]
