With timestamps:

00:00 - welcome back baby or welcome for the
00:02 - first time who knows this video now I am
00:04 - going to talk about these higher-order
00:07 - functions it's really just kind of me
00:09 - like trying to sound smart make it son
00:11 - fancy these are just functions that it
00:13 - can call on arrays in JavaScript so you
00:15 - might really think of an array as like
00:17 - oh alright it's a list of stuff it's an
00:19 - ordered list of things like it might be
00:21 - an ordered list of numbers like this and
00:23 - I can iterate with a for loop I can you
00:27 - know use I could that kind of thing I
00:29 - could iterate with for loop like how
00:31 - would I calculate the sum of everything
00:32 - in this array I would have a for loop
00:35 - and I'd start with the svet variable sum
00:38 - equals 0 and then I'd add the first
00:40 - element in the second element the third
00:41 - limb so what I'm saying is that these
00:42 - higher-order functions these array
00:44 - functions allow you to manipulate the
00:46 - array as a whole all in one fell swoop
00:48 - and you actually have seen this before
00:49 - if you watched it in my videos for
00:51 - example push this is not a higher-order
00:53 - function because it doesn't receive a
00:56 - function as an argument but it does it
01:00 - does manipulate the array so if I say
01:02 - push and I pass in 7 then it will add an
01:06 - extra element to the end of the array
01:07 - now what it's actually doing behind the
01:08 - scenes or all that that's the topic of
01:10 - discussion for another time what I want
01:12 - to look at is let's look at these four
01:14 - so where do these come from and what do
01:15 - they do so over here this is the Mozilla
01:20 - Foundation web Docs there are lots of
01:22 - places to find resources about what the
01:24 - various things available in the browser
01:25 - and JavaScript are but this is the
01:28 - JavaScript array object and so the array
01:30 - object this is how you might think of it
01:33 - usually it's got two things like a
01:34 - string and you console.log the length
01:36 - and you get two but if i go over here to
01:38 - the left i'm gonna see oh look all these
01:40 - other functions for example and they're
01:42 - listed here is array dot prototype push
01:44 - now I do have a video about what the
01:46 - prototype thing is luckily what I'm
01:48 - doing now is I'm living in this world of
01:50 - JavaScript es6 the version of javascript
01:52 - six and you don't really have to mess
01:54 - with the prototype too much and that's
01:56 - the mode topic for another time but if
01:58 - but this is where I could find the list
01:59 - of the functions so if I click on push I
02:03 - would find like oh look this is what it
02:06 - does if I say animals dot push cows now
02:08 - I have another element in that array
02:11 - called cows a string called cow
02:13 - which is at the end so let's let's try
02:16 - to decide what should we do first let's
02:18 - look at the map function okay so to
02:21 - demonstrate this I'm Jo and this is a
02:22 - little bit silly and I know those are
02:24 - you have more sophisticated workflows
02:26 - will complain but I've got my text
02:28 - editor here and the browser console up
02:30 - here so if I were to write something
02:32 - like an array I'm gonna call it let
02:34 - valve equal you know four eight one two
02:40 - nine and I were to say console.log valve
02:43 - hit save and go up here and hit refresh
02:45 - I see it there okay so this is gonna be
02:47 - my workflow right now to demonstrate
02:49 - type some code down here refresh and see
02:51 - the output up here so what if what I
02:54 - want to do let's see what do I want to
02:57 - talk about first let's do we're gonna do
02:58 - the math function first and uh the chat
03:01 - reminded me that there's also a function
03:02 - called fill which I could I mean there's
03:04 - just so many more so you know the point
03:06 - of this is for me not to like teach you
03:08 - how every function works but to get the
03:10 - basic idea and then you can kind of
03:12 - learn to and go through and read the
03:13 - documentation to figure out what some of
03:15 - those other functions are but anyway
03:16 - back over here so what the map function
03:18 - does is it allows me to to pass a
03:23 - function that's applied to every element
03:26 - of the array so for example if I were to
03:28 - write a function and call it doubler and
03:30 - it gets in x and i say return x times
03:35 - two then I should be able to say Val's
03:38 - dot map doubler and then console dot log
03:42 - valves now I'm going to leave all this
03:45 - here so let's look at what's going on
03:47 - here I have the array I'm gonna look at
03:51 - it then I'm gonna define a function
03:52 - called doubler then I'm going to pass
03:54 - doubler via the map function to valves
03:57 - so I should see the array have eight 16
04:00 - - 4 18 no it's not going to do that
04:02 - that's it because I've made a little
04:03 - mistake here but let's take a look so
04:07 - now I'm gonna come up here it's the same
04:08 - gonna come here hit refresh we'd say
04:10 - look why I got the same values both
04:12 - times how come it didn't change well one
04:15 - of the things that's important to note
04:17 - is that these functions they all behave
04:20 - differently but these functions return a
04:24 - new
04:24 - arrey so it doesn't actually change the
04:27 - values in the original array it creates
04:30 - a new array and then puts all the double
04:34 - values in it are the new values that are
04:37 - applied from that function
04:38 - oh my god they just break my classes now
04:43 - you can leave it that's good these are
04:46 - new too I really don't want to break
04:47 - them those lenses are old but I broke my
04:50 - glasses so I popped the same frames
04:51 - again okay sorry there's gonna be more
04:57 - ads you're gonna see on the YouTube
04:58 - videos I broke my glasses after classes
05:01 - are expensive okay what was I talking
05:06 - about
05:07 - alright I'm gonna do array so let's look
05:10 - at what am I gonna do so I could say
05:13 - something like let doubled equal valve a
05:20 - blur and now I could console.log look at
05:23 - doubled and let's take a look at what
05:25 - that does Oh see now there we go I've
05:28 - got all the elements of the mouse's in
05:30 - the way all the elements doubled and if
05:32 - I wanted to use the same variable you'll
05:34 - see this very commonly I could say Val's
05:39 - equals Val's dot map doubler so let's
05:42 - look at that and now I'm gonna say
05:43 - console.log Val's whoops and I got a cup
05:48 - here and there we go
05:49 - so this is now let me give myself a
05:51 - little bit more space here for the code
05:53 - this is now every now everything I need
05:55 - right I have an array I have a function
05:58 - that does something to a number and then
06:01 - I can say take that function and apply
06:02 - it to every element of the array and
06:04 - give me a new array and overwrite the
06:06 - previous variable with that new array so
06:10 - here's the thing this is great to learn
06:13 - it's really it's useful it allows you to
06:16 - write code kind of simplified but it's
06:17 - simplify this really down by using the
06:19 - arrow function in a second but I should
06:21 - note that from what I understand this is
06:24 - not necessarily high performance so if
06:27 - you have super large arrays you can
06:29 - imagine like recreating a whole new
06:31 - array passing a function as opposed to
06:33 - just using a for loop using a for loop
06:35 - might actually
06:36 - run faster most of the stuff that I'm
06:37 - doing this doesn't really matter you're
06:39 - working with small arrays and software
06:41 - web projects you know these higher-order
06:43 - functions are gonna make your code nice
06:46 - and also here's the thing this is one of
06:48 - the reasons why I'm covering this it's
06:49 - like you think what were just me living
06:50 - my life I would just be using for loops
06:52 - never bother with any of this because
06:54 - that's wrong I'm wrong I know I'm wrong
06:56 - but that's some of them I'm sort of
06:58 - stuck in my ways but you you won't be
07:01 - going to tutorials you will be going to
07:02 - open-source projects this is what people
07:04 - are doing now they're using these
07:05 - higher-order functions and they're using
07:07 - the arrow syntax so you want to get some
07:09 - facility with it so as you read other
07:10 - people's code and you contribute to open
07:12 - source projects you can participate with
07:14 - this new stuff all right now let me do
07:17 - one more thing to this let's get the
07:19 - arrow of syntax in there so first of all
07:21 - we know that I could improve not improve
07:23 - this but I could make this an anonymous
07:25 - function so I could put this in here so
07:29 - now this should be the same exact code
07:31 - I'm gonna refresh here still works but
07:34 - now it's an arrow function so I don't
07:36 - have to say I don't think it's a
07:39 - function I put the arrow it's just one
07:41 - argument so I can get rid of that it's
07:43 - just one line of code so I can get rid
07:45 - of that it's just one line of code so I
07:46 - can assume the return statement and oh
07:49 - look at this now look at this oh so I
07:53 - have to admit I really do like this
07:58 - something lovely about it right I have
08:01 - my array and I said hey just double
08:03 - everything you know take X and arrow it
08:06 - over there two x times two so now if I
08:09 - save this here and hit refresh ah I made
08:12 - a mistake oh I have this extra this
08:15 - semicolon here is actually kind of
08:16 - unnecessary and I guess it caused a
08:17 - problem and there we go so look if it is
08:21 - even nicer that time I call it made it
08:22 - kind of blue so this is wonderful map X
08:26 - goes to x times two
08:32 - while we're here let's look at fill
08:35 - really quickly fill will take an array
08:37 - and fill it with values so I'm gonna
08:41 - comment this out what if I were to say
08:43 - Val fill and
08:47 - zero console.log bells and let's see
08:50 - let's see what happens ooh oh that
08:56 - actually so interestingly this acts on
08:59 - the current array so the fill function
09:01 - does not create a new array in return
09:03 - but acts on the kernel right what if I
09:05 - were to say fill random 10 am I gonna
09:09 - fill this whoa yeah am I gonna fill this
09:13 - with a random values oops gotta come up
09:17 - here random is not defined because oh
09:21 - yeah I'm just to say math dot random I'm
09:23 - not in p5 world in this video it'll say
09:26 - math dot random am I gonna get a new
09:30 - random value for every element of the
09:31 - array oops shoot no look at this point
09:36 - one four point one four I mean you'll
09:38 - have to trust me point one four point
09:39 - one four those are all the same values
09:41 - because note I'm executing that random
09:44 - function and and picking a random number
09:48 - and then filling it with that same
09:49 - random number but this fill is a higher
09:54 - order function I wasn't actually using
09:56 - it as a higher-order function I was just
09:57 - giving it a number so I wasn't passing
10:00 - in a function if I wanted to pass in a
10:02 - function
10:03 - I don't even I'm not I'm just gonna go
10:04 - straight for the arrow syntax here X and
10:07 - I'm gonna say math dot random times 10
10:12 - and I'm gonna say math dot floor in here
10:14 - because I want to just see some integers
10:16 - right look at this ooh did I get this
10:19 - right so this is now an arrow function
10:22 - fill each value X by executing math dot
10:26 - random x 10 and then floor let's go up
10:30 - here Oh what happened there okay there
10:33 - might have been a weird edit point there
10:35 - because I went off I kept going like in
10:37 - this like magical thinking I was like
10:38 - making up features of JavaScript and I
10:40 - started trying to explain how this is
10:42 - not using fill as a higher-order
10:43 - function I'm just giving it a number but
10:45 - what if I gave it a function fill
10:47 - doesn't work that way so this is where
10:49 - map does actually come in if I wanted to
10:51 - fill all of these with an individual
10:53 - random number I could do that by saying
10:55 - map X yes so
11:00 - this would give me map this function of
11:02 - returning a random number if I hit save
11:05 - here and hit refresh
11:06 - whoa-ohh and then of course I forgot
11:09 - that I do need to return the new array
11:12 - and there we go now you can see they
11:15 - each have a different number now I
11:17 - should say there's a little bit weird
11:18 - like if I wanted to create an array of
11:19 - random numbers I wouldn't I wouldn't
11:24 - like start with like a fixed array like
11:25 - what if I want to have an array of a
11:27 - hundred numbers that are random well one
11:31 - thing I could do is I think I could just
11:33 - say new array 100 and then hit refresh
11:38 - here no it's empty so this didn't work
11:41 - right it's just empty times 100 so this
11:44 - is unfortunate like even though I made a
11:46 - new array with a hundred spots because
11:48 - there's nothing actually there I can't
11:50 - start to process it this way so I
11:52 - actually need to use fill first so I can
11:54 - I can chain these so I could say let me
11:56 - fill the array with zeros and then map
12:01 - it now I'm gonna so this should work now
12:03 - and this is getting a little convoluted
12:04 - why do I care about doing this I don't
12:06 - know you can determine you just go to
12:07 - the next video I'm gonna keep going with
12:09 - this just for a little bit longer so now
12:10 - I'm hit refresh now I have an array with
12:12 - 100 random numbers but look at this you
12:14 - know it's interesting about this I
12:15 - created a function and I think this also
12:20 - doesn't really matter right I could just
12:21 - do this and it works right because I
12:24 - don't need that I'm not basing it on X
12:26 - but incidentally what is this a function
12:28 - this is a function that returns math dot
12:31 - random well what is math not random it's
12:34 - a function that returns a random number
12:35 - so I could actually do this just right
12:38 - math dot random right I could name
12:40 - that's a named function don't execute it
12:42 - just pass it the name function so this
12:45 - is a way of creating an array with a
12:47 - hundred elements in it that are all
12:48 - random I think this is gonna work all
12:52 - right yay aha
12:55 - sound effect that doesn't work right now
12:56 - okay there was a weird edit point there
12:58 - because the chat and live chat that's
13:00 - going on while I'm recording this gave
13:02 - me some helpful tips here so a couple
13:04 - things number one is if I you know I'm
13:06 - kind of like the kind of person who
13:08 - wants to just write everything the thing
13:09 - you could do in one line of code in 15
13:11 - lines of code
13:11 - but if I wanted to keep going with this
13:13 - I could in fact I don't need to have
13:15 - valves create a new array and then have
13:18 - it used here I can just put new array
13:21 - directly right here and in fact I don't
13:23 - even need the new keyword I could just
13:26 - actually say array 100 and in fact
13:28 - because ultimately I'm going to fill it
13:32 - with random numbers this zero is totally
13:34 - irrelevant I could just fill it with
13:35 - undefined I just got to fill it with
13:37 - something
13:38 - map doesn't work unless the array has
13:40 - filled with something even that
13:41 - something is undefined so this should
13:43 - actually work here's an array with a
13:45 - hundred spots random numbers yeah okay
13:51 - so now what I'm going to do is I think
13:54 - this videos going to end I've talked
13:56 - about fill and I've talked about map I
13:58 - think I'm going to reduce as a kind of
14:00 - complicated one so I'm gonna do that in
14:01 - the next video and I'll start it with a
14:06 - I'll reduce myself I don't know if
14:08 - that's worthwhile in the next video as
14:10 - well I think it's sort and filter I'll
14:11 - get to at some point as well look let's
14:13 - look at reduce next thanks for watching
14:19 - [Music]
14:23 - you

Cleaned transcript:

welcome back baby or welcome for the first time who knows this video now I am going to talk about these higherorder functions it's really just kind of me like trying to sound smart make it son fancy these are just functions that it can call on arrays in JavaScript so you might really think of an array as like oh alright it's a list of stuff it's an ordered list of things like it might be an ordered list of numbers like this and I can iterate with a for loop I can you know use I could that kind of thing I could iterate with for loop like how would I calculate the sum of everything in this array I would have a for loop and I'd start with the svet variable sum equals 0 and then I'd add the first element in the second element the third limb so what I'm saying is that these higherorder functions these array functions allow you to manipulate the array as a whole all in one fell swoop and you actually have seen this before if you watched it in my videos for example push this is not a higherorder function because it doesn't receive a function as an argument but it does it does manipulate the array so if I say push and I pass in 7 then it will add an extra element to the end of the array now what it's actually doing behind the scenes or all that that's the topic of discussion for another time what I want to look at is let's look at these four so where do these come from and what do they do so over here this is the Mozilla Foundation web Docs there are lots of places to find resources about what the various things available in the browser and JavaScript are but this is the JavaScript array object and so the array object this is how you might think of it usually it's got two things like a string and you console.log the length and you get two but if i go over here to the left i'm gonna see oh look all these other functions for example and they're listed here is array dot prototype push now I do have a video about what the prototype thing is luckily what I'm doing now is I'm living in this world of JavaScript es6 the version of javascript six and you don't really have to mess with the prototype too much and that's the mode topic for another time but if but this is where I could find the list of the functions so if I click on push I would find like oh look this is what it does if I say animals dot push cows now I have another element in that array called cows a string called cow which is at the end so let's let's try to decide what should we do first let's look at the map function okay so to demonstrate this I'm Jo and this is a little bit silly and I know those are you have more sophisticated workflows will complain but I've got my text editor here and the browser console up here so if I were to write something like an array I'm gonna call it let valve equal you know four eight one two nine and I were to say console.log valve hit save and go up here and hit refresh I see it there okay so this is gonna be my workflow right now to demonstrate type some code down here refresh and see the output up here so what if what I want to do let's see what do I want to talk about first let's do we're gonna do the math function first and uh the chat reminded me that there's also a function called fill which I could I mean there's just so many more so you know the point of this is for me not to like teach you how every function works but to get the basic idea and then you can kind of learn to and go through and read the documentation to figure out what some of those other functions are but anyway back over here so what the map function does is it allows me to to pass a function that's applied to every element of the array so for example if I were to write a function and call it doubler and it gets in x and i say return x times two then I should be able to say Val's dot map doubler and then console dot log valves now I'm going to leave all this here so let's look at what's going on here I have the array I'm gonna look at it then I'm gonna define a function called doubler then I'm going to pass doubler via the map function to valves so I should see the array have eight 16 4 18 no it's not going to do that that's it because I've made a little mistake here but let's take a look so now I'm gonna come up here it's the same gonna come here hit refresh we'd say look why I got the same values both times how come it didn't change well one of the things that's important to note is that these functions they all behave differently but these functions return a new arrey so it doesn't actually change the values in the original array it creates a new array and then puts all the double values in it are the new values that are applied from that function oh my god they just break my classes now you can leave it that's good these are new too I really don't want to break them those lenses are old but I broke my glasses so I popped the same frames again okay sorry there's gonna be more ads you're gonna see on the YouTube videos I broke my glasses after classes are expensive okay what was I talking about alright I'm gonna do array so let's look at what am I gonna do so I could say something like let doubled equal valve a blur and now I could console.log look at doubled and let's take a look at what that does Oh see now there we go I've got all the elements of the mouse's in the way all the elements doubled and if I wanted to use the same variable you'll see this very commonly I could say Val's equals Val's dot map doubler so let's look at that and now I'm gonna say console.log Val's whoops and I got a cup here and there we go so this is now let me give myself a little bit more space here for the code this is now every now everything I need right I have an array I have a function that does something to a number and then I can say take that function and apply it to every element of the array and give me a new array and overwrite the previous variable with that new array so here's the thing this is great to learn it's really it's useful it allows you to write code kind of simplified but it's simplify this really down by using the arrow function in a second but I should note that from what I understand this is not necessarily high performance so if you have super large arrays you can imagine like recreating a whole new array passing a function as opposed to just using a for loop using a for loop might actually run faster most of the stuff that I'm doing this doesn't really matter you're working with small arrays and software web projects you know these higherorder functions are gonna make your code nice and also here's the thing this is one of the reasons why I'm covering this it's like you think what were just me living my life I would just be using for loops never bother with any of this because that's wrong I'm wrong I know I'm wrong but that's some of them I'm sort of stuck in my ways but you you won't be going to tutorials you will be going to opensource projects this is what people are doing now they're using these higherorder functions and they're using the arrow syntax so you want to get some facility with it so as you read other people's code and you contribute to open source projects you can participate with this new stuff all right now let me do one more thing to this let's get the arrow of syntax in there so first of all we know that I could improve not improve this but I could make this an anonymous function so I could put this in here so now this should be the same exact code I'm gonna refresh here still works but now it's an arrow function so I don't have to say I don't think it's a function I put the arrow it's just one argument so I can get rid of that it's just one line of code so I can get rid of that it's just one line of code so I can assume the return statement and oh look at this now look at this oh so I have to admit I really do like this something lovely about it right I have my array and I said hey just double everything you know take X and arrow it over there two x times two so now if I save this here and hit refresh ah I made a mistake oh I have this extra this semicolon here is actually kind of unnecessary and I guess it caused a problem and there we go so look if it is even nicer that time I call it made it kind of blue so this is wonderful map X goes to x times two while we're here let's look at fill really quickly fill will take an array and fill it with values so I'm gonna comment this out what if I were to say Val fill and zero console.log bells and let's see let's see what happens ooh oh that actually so interestingly this acts on the current array so the fill function does not create a new array in return but acts on the kernel right what if I were to say fill random 10 am I gonna fill this whoa yeah am I gonna fill this with a random values oops gotta come up here random is not defined because oh yeah I'm just to say math dot random I'm not in p5 world in this video it'll say math dot random am I gonna get a new random value for every element of the array oops shoot no look at this point one four point one four I mean you'll have to trust me point one four point one four those are all the same values because note I'm executing that random function and and picking a random number and then filling it with that same random number but this fill is a higher order function I wasn't actually using it as a higherorder function I was just giving it a number so I wasn't passing in a function if I wanted to pass in a function I don't even I'm not I'm just gonna go straight for the arrow syntax here X and I'm gonna say math dot random times 10 and I'm gonna say math dot floor in here because I want to just see some integers right look at this ooh did I get this right so this is now an arrow function fill each value X by executing math dot random x 10 and then floor let's go up here Oh what happened there okay there might have been a weird edit point there because I went off I kept going like in this like magical thinking I was like making up features of JavaScript and I started trying to explain how this is not using fill as a higherorder function I'm just giving it a number but what if I gave it a function fill doesn't work that way so this is where map does actually come in if I wanted to fill all of these with an individual random number I could do that by saying map X yes so this would give me map this function of returning a random number if I hit save here and hit refresh whoaohh and then of course I forgot that I do need to return the new array and there we go now you can see they each have a different number now I should say there's a little bit weird like if I wanted to create an array of random numbers I wouldn't I wouldn't like start with like a fixed array like what if I want to have an array of a hundred numbers that are random well one thing I could do is I think I could just say new array 100 and then hit refresh here no it's empty so this didn't work right it's just empty times 100 so this is unfortunate like even though I made a new array with a hundred spots because there's nothing actually there I can't start to process it this way so I actually need to use fill first so I can I can chain these so I could say let me fill the array with zeros and then map it now I'm gonna so this should work now and this is getting a little convoluted why do I care about doing this I don't know you can determine you just go to the next video I'm gonna keep going with this just for a little bit longer so now I'm hit refresh now I have an array with 100 random numbers but look at this you know it's interesting about this I created a function and I think this also doesn't really matter right I could just do this and it works right because I don't need that I'm not basing it on X but incidentally what is this a function this is a function that returns math dot random well what is math not random it's a function that returns a random number so I could actually do this just right math dot random right I could name that's a named function don't execute it just pass it the name function so this is a way of creating an array with a hundred elements in it that are all random I think this is gonna work all right yay aha sound effect that doesn't work right now okay there was a weird edit point there because the chat and live chat that's going on while I'm recording this gave me some helpful tips here so a couple things number one is if I you know I'm kind of like the kind of person who wants to just write everything the thing you could do in one line of code in 15 lines of code but if I wanted to keep going with this I could in fact I don't need to have valves create a new array and then have it used here I can just put new array directly right here and in fact I don't even need the new keyword I could just actually say array 100 and in fact because ultimately I'm going to fill it with random numbers this zero is totally irrelevant I could just fill it with undefined I just got to fill it with something map doesn't work unless the array has filled with something even that something is undefined so this should actually work here's an array with a hundred spots random numbers yeah okay so now what I'm going to do is I think this videos going to end I've talked about fill and I've talked about map I think I'm going to reduce as a kind of complicated one so I'm gonna do that in the next video and I'll start it with a I'll reduce myself I don't know if that's worthwhile in the next video as well I think it's sort and filter I'll get to at some point as well look let's look at reduce next thanks for watching you
