With timestamps:

00:01 - [TRAIN WHISTLE]
00:03 - All aboard.
00:04 - Here we are.
00:05 - Welcome to a new
coding challenge.
00:07 - This coding challenge is
part of my spring 2017
00:10 - course, Nature of Code.
00:12 - I'm teaching it at
New York University,
00:13 - and I have most of the
materials for this course
00:16 - already online through videos.
00:18 - You can find the links to all
those videos and the materials
00:21 - for the course in this
video's description.
00:22 - But what I'm going
to do periodically
00:24 - is do some coding
challenges that
00:25 - fit with the material for
that course week to week,
00:27 - and what I'm going to start
with today is this thing called
00:30 - a random walk.
00:31 - What is a random walk?
00:33 - I'm going to diagram it for you
on the whiteboard in a moment.
00:35 - But ultimately, a random
walk, as you can see here,
00:38 - is visualized as this thing
that moves around randomly.
00:41 - It's a random walk.
00:42 - And so I actually already
have the program running here
00:45 - that I made in the
coding challenge
00:46 - because I'm recording
this after it,
00:48 - and it's being edited
together through the magic
00:50 - of video editing technology.
00:52 - And so what I'm going
to start with here
00:54 - is the very basic, traditional,
simple random walk,
00:58 - a little dot moving
around the screen,
01:01 - every frame of animation picking
a random direction to move.
01:04 - From there, it's up
to you to do something
01:06 - more creative with this.
01:07 - To think about this, what
kinds of behaviors and ideas
01:10 - from nature or the world
can you simulate with this?
01:12 - What types of visual outcomes
can you get with this?
01:14 - At the end of the video, I'll
give you some context and ideas
01:17 - about that.
01:18 - And this is just the first in
a series of short experiments
01:22 - about random walks, and I'll
do some variations on it
01:24 - in terms of moving
this from 2D to 3D,
01:26 - thinking about the step
size, thinking about vectors,
01:29 - object-oriented programming.
01:30 - But this video is going to be
the most basic, simple, drop
01:37 - singing.
01:38 - I just want to say drop dead for
some reason, but a very simple,
01:41 - just basic random walk.
01:43 - I hope you enjoy looking
at the code for this
01:45 - and you make something creative
out of it and you let me know.
01:48 - So I'm going to leave.
01:49 - I'm going to take the train to
the past, my time travel train,
01:55 - to do this coding challenge.
01:57 - OK.
01:58 - I am here to get started
with this coding challenge,
02:00 - the random walk.
02:01 - So the first thing
I want to do is--
02:03 - oh, you're over here
now, I'm over here--
02:05 - Is talk about what
a random walk is.
02:06 - So a random walk
is a stochastic--
02:10 - stochastic being
another word for random,
02:12 - that sounds about right--
02:14 - a process where there is a value
that changes with each time
02:18 - step randomly in one
direction or another.
02:21 - And this is the
kind of thing that
02:22 - can be used to model the way
an animal forages for food
02:27 - or the stock price
fluctuates, perhaps,
02:30 - or a kind of way a gambler makes
decisions playing blackjack.
02:34 - There are a lot of processes
by which this idea of a random
02:37 - walk--
02:37 - and a random walk could
be in one dimension
02:39 - or two dimensions or
three dimensions--
02:41 - are used in various kinds
of scientific simulations.
02:44 - This is also
related to something
02:45 - called Brownian motion,
which maybe I'll
02:47 - come back on a separate
video and kind of connect
02:49 - these two things more.
02:50 - But the kind of random
walk I want to talk about
02:54 - is the random walk that happens
in a two-dimensional graphic
02:59 - space.
03:00 - And in a future video, a
couple videos from now,
03:02 - I'm going to do couple
of variations on it,
03:03 - and we'll do a 3D
random walk as well,
03:05 - and we'll see how that works.
03:06 - So the idea here is
that there is a dot
03:09 - in this two-dimensional canvas.
03:11 - Maybe it's in the
middle of the canvas.
03:13 - The dot has an x and y position.
03:16 - And every frame of animation,
there are only four choices.
03:22 - Option number 1 is
move to the right.
03:25 - Option number 2-- the order
of these doesn't matter--
03:28 - move to the left.
03:29 - Option number 3, move up.
03:31 - Option number 4, move down.
03:33 - So every frame of animation,
one of these is randomly picked.
03:38 - So we might move to the right
and then move up, then move
03:41 - to the left, then move
up, then move to the left,
03:43 - then move down, then
move to the left,
03:45 - then move down, then move
down, then move to the right,
03:47 - then move up.
03:48 - You can imagine how
this would work.
03:50 - Now, I in a weird sort of
way created a pattern there
03:53 - because I'm a human being,
flawed in so many ways.
03:56 - You have no idea.
03:57 - But you know what the
things I can't do,
03:59 - as most human
beings can't do, is
04:00 - produce an actual random
sequence of numbers
04:02 - because my brain is just
pattern, pattern, pattern this,
04:05 - pattern this, pattern this.
04:06 - But computers can produce what's
known as pseudorandom numbers,
04:11 - meaning there's a
mathematical formula that's
04:15 - operating behind the scenes that
generates a sequence of numbers
04:19 - that when looked at over
time have an essentially
04:21 - random probability.
04:22 - Now, these are pseudorandom
because it's not
04:25 - like we're actually measuring.
04:27 - And incidentally, a
random walk is also
04:29 - related to measuring movements
of particles moving around
04:31 - in the gas.
04:34 - I had this moment where I
felt like I needed to burp.
04:37 - That was very strange.
04:39 - Everything is coming
together in my brain.
04:41 - But there was a point
to what I was saying,
04:43 - which is that if you really
wanted to achieve true-- first
04:49 - of all, random numbers
itself is something
04:51 - that lots of people study, a
lifetime of study, or write PhD
04:54 - dissertations about getting
a really good random number
04:56 - generator.
04:57 - The way that I can get random
numbers with this pseudorandom
05:00 - number generator is with a
function in P5 called random.
05:05 - And the key thing
about this function
05:08 - is, well, first of all, it
takes a minimum and a maximum
05:11 - as arguments.
05:13 - So I want to get random
numbers between 4 and 10
05:16 - or 0 and 5 or negative
5 and positive 5.
05:20 - But the key thing
about this function
05:22 - is it gives you a uniform
distribution, meaning
05:27 - you have the same likelihood
as picking the number 1
05:29 - as you have the
picking the number 3
05:31 - as you beginning of the
4, picking the number 2.
05:33 - And one thing I
really want to look
05:34 - at as part of this little
series about random walks
05:37 - is, what happens what I want
a different distribution?
05:41 - What if I want to move down more
often than I want to move up?
05:45 - Or what if I want to
move towards the mouse?
05:48 - I want to have a
50% chance of moving
05:49 - toward the mouse and a
50% chance of picking
05:51 - something else random.
05:52 - Or what if I want to have a
distribution of random numbers
05:57 - that follows something
called the bell curve,
05:59 - or a normal distribution
or a Gaussian distribution?
06:03 - And I have some
videos about that.
06:05 - So I'm going to connect
some of these themes
06:06 - in these videos
about random walks.
06:09 - So all I need to do is have
a program with an x and a y.
06:14 - I need to have the random
function that picks--
06:17 - and really, my random
function is not
06:18 - going to pick 1, 2, 3, or 4.
06:20 - I could make it do that, but
that's not really how numbers
06:23 - are ever picked on a computer.
06:25 - So I'm going to
pick 0, 1, 2, or 3,
06:29 - because I'm going to look
for a range starting with 0.
06:31 - And then whichever
one of those I
06:33 - pick I'm going to adjust
the x or the y position
06:36 - and move my random walker
around on the screen.
06:40 - So come over here with me.
06:42 - Let's take the train
over to the computer.
06:48 - OK, here we are.
06:49 - So let's start
implementing this.
06:51 - I'm actually going to do this
in a non-object-oriented manner,
06:54 - and I'll come back
in another video
06:56 - and maybe add objects to this.
06:57 - But just in the most
the simplest way,
06:59 - I'm going to have an x
variable and a y variable.
07:02 - And I'm going to start it
in the middle of the screen,
07:05 - y equals 200.
07:07 - And I'm going to just
draw a point at x and y.
07:13 - I'm going to say stroke
255, and I'm also
07:15 - going to say stroke
weight 2 just so it's
07:18 - a little bit more visible.
07:20 - And if I now refresh the
page, we can see, there it is.
07:23 - There's my random walker.
07:25 - It hasn't gone anywhere yet.
07:26 - So now I need to
pick a random number.
07:31 - So that random number could be--
07:34 - so I'm going to do
that here in draw.
07:36 - I'll do it after
I draw the point.
07:39 - And I'm going to say var
r equals random 0 to 4.
07:43 - So this is what I'm
going to start with.
07:45 - Now, first of all,
I don't actually
07:50 - have to give a minimum and a
maximum if my minimum is 0.
07:55 - So by definition, if I only
give the random function
07:58 - a single argument,
that's the maximum.
08:00 - So I want a random
number between 0 and 4.
08:03 - Now, the issue with this is
the random function in P5,
08:07 - by definition, will give
me a random between 0 and 4
08:09 - that has decimals, so
1.23, 3.5, 4.7, 0.3, 4.1--
08:15 - no, not 4.1.
08:16 - Actually, the highest
number it will give me is
08:19 - 3.99999999999999999--
08:25 - I can go on.
08:26 - I lost my train
of thought there.
08:28 - So it's never actually
going to give me 4.
08:30 - But I can do something
to this, which
08:32 - is I can put this
function floor around it.
08:36 - And what the floor
function does,
08:38 - there are a bunch of
functions that I can use--
08:41 - where's my marker, here it is--
08:43 - in P5 to take a floating
point number like 3.4
08:50 - and convert it to an integer.
08:52 - If I use the floor function,
it will make that number 3.
08:58 - If I use the ceiling
function, C-E-I-L,
09:03 - it will make that number 4.
09:05 - If I use the round function,
it will make that number 3.
09:10 - So floor, even if it's
even if it's 3.999999,
09:15 - lops off the decimal
place and makes it 3.
09:19 - If ceiling, no
matter what it is,
09:21 - whether it's 3.9 or 3.1 or 3.2,
goes up to the nearest integer.
09:25 - So floor goes down to
the nearest integer,
09:26 - [? ceil ?] goes up to
the nearest integer,
09:28 - and then round rounds it.
09:30 - So 3.4 becomes 3.
09:31 - 3.6 becomes 4.
09:33 - So it goes up or down,
depending on which is closer.
09:36 - It rounds the number.
09:37 - So floor is going to
be useful for me here.
09:40 - And now here's the thing.
09:41 - You know what it would
make sense for me
09:43 - to use in this video that I
hear a lot of people on YouTube
09:46 - asking me to use, and say,
what's wrong with you?
09:48 - How come you never use
a switch statement?
09:50 - And I'll tell you the reason.
09:51 - I got a thing in my brain.
09:54 - I can't ever remember
the syntax for it.
09:56 - So what I want to
do right now, which
09:58 - is more comfortable for me,
is just say, if r equals 0,
10:04 - do something.
10:06 - Otherwise, if r equals 1--
10:09 - and by the way, I also
want to talk about,
10:11 - someday, the difference being
triple equals and double
10:13 - equals, that's not really
a part of this video.
10:15 - Somebody remind me.
10:16 - I'll come back to
that somewhere else.
10:18 - But let's try to add
a switch statement.
10:20 - Let's do it in this video.
10:21 - It's a the kind of conditional
statement, like an if
10:24 - statement, where you can say,
hey, there are some cases here.
10:28 - I've got this value.
10:30 - And if this value is
equal to this, do this.
10:32 - If it's equal to this-- but it
looks more condensed syntax.
10:35 - So I'm going to have
to look up the syntax
10:37 - because I can freely admit
that I can ever remember this.
10:40 - Case statement JavaScript.
10:43 - Let's see where we get.
10:45 - Let's go to switch here.
10:47 - So you can see here
this is this statement.
10:51 - This is the syntax.
10:52 - Switch expression,
expression meaning,
10:56 - in this case, a
particular variable.
10:58 - The case of when this variable
has this value, do this stuff.
11:02 - Otherwise, do this stuff.
11:03 - And then I need
a break statement
11:05 - so that I get out of it once
it's found a particular value.
11:09 - So I can only do one.
11:10 - So I should be able to
do-- let me a copy this in.
11:14 - Let's copy this.
11:16 - And I can do switch
r case 0 case 1.
11:25 - Look at me.
11:26 - I'm all grown up.
11:29 - Case 2.
11:33 - This is very stressful.
11:35 - This is going to work.
11:36 - Case 3 break.
11:41 - And how did I do?
11:42 - So now the thing is,
what do I want to do?
11:45 - Well, if we look
back to here, I have
11:47 - to say, case 0,
move to the right.
11:49 - Case 1, move to the left.
11:50 - Case 2, move up.
11:51 - Case 3, move down.
11:51 - Again, the order
doesn't actually matter.
11:54 - So that's a long way
to walk from there
11:56 - to here, this new space.
11:58 - So I'm going to say, x
equals x plus 1 here.
12:03 - I'm going to say, x
equals x minus 1 here,
12:05 - to move to the left.
12:08 - To move down is y equals
y plus 1, and to move up
12:14 - is equals y minus 1.
12:17 - So we now have this
switch statement
12:19 - where I'm picking one
of these four options.
12:22 - And here we go.
12:24 - Let's go back to our code,
run it, and look at that.
12:27 - There's our random walk.
12:29 - Now, interestingly
enough, this doesn't
12:31 - look like some of the images
I showed you in the intro
12:34 - to this video that
I haven't actually
12:36 - made yet because that's
going to happen after.
12:38 - What I want to do
is I want to see
12:40 - the path of this random
walker just in terms
12:43 - of this sort of classic
way to visualize
12:45 - the random walk in a 2D space.
12:47 - And the easiest way
I can do that is just
12:49 - take the background function
and move that into setup.
12:53 - So I'm drawing the background
just once at the beginning,
12:56 - and then--
12:58 - I'm drawing the background
just once at the beginning
13:01 - so that when the dot
moves I don't I'm
13:03 - not erasing the previous dots.
13:04 - And now if I do this
again, we can see--
13:07 - look at this.
13:07 - There's are random walker.
13:09 - So I now propose to
you, at the end--
13:12 - I'm going to do a couple more
videos with some variations
13:14 - on this theme.
13:15 - But this is a really
simple concept.
13:18 - But you would be amazed if
you Google random walk art,
13:22 - random walk 2D, random walk
3D, and you do an image search,
13:27 - you're going to find a lot of
beautiful examples of people
13:30 - trying different styles.
13:31 - What if this random
walk, for example,
13:35 - color played a role in it?
13:36 - What if you had
multiple random walks,
13:38 - and when they
intersected each other
13:40 - they combined colors or gave
birth to a new random walk?
13:45 - What if you thought
about different ways
13:48 - to do probability so that
the way that it moved
13:50 - has some sort of
pattern or logic to it?
13:53 - And I will make some videos with
some kind of known techniques.
13:56 - There's a technique
called the Levy flight,
13:58 - which is a different
kind of walk
14:00 - where the step size varies.
14:02 - Right now I'm only ever
moving by one other things
14:05 - you might try and
think about is,
14:08 - what if the random
walk never was
14:11 - allowed to go where it
had previously been?
14:13 - This is known as a
self-avoiding walk.
14:15 - This is a pretty tricky
problem, but you might think
14:17 - about trying to solve that.
14:20 - I think I said 3D already.
14:21 - So there's a lot of things.
14:22 - Oh, and here's the thing
that's even more important.
14:25 - This is just a pure visual
example of the random walk.
14:30 - But what if you don't
think about the outcome
14:33 - of the random walk being just
a dot moving in a 2D space?
14:36 - What if it's a random walk
that's actually changing notes
14:39 - in a melody, a musical
composition, or a dance
14:43 - performance?
14:44 - What are some other ways you
can take this random walk idea
14:47 - and make it into
a project that has
14:48 - some kind of creative
expression associated with it?
14:51 - Or also, even in the land
of computer graphics, what
14:54 - if the random walk are
actually vertices of a polygon,
14:57 - and each one of those vertices
are doing a random walk?
15:00 - Or after random walk goes for
while, it sets [INAUDIBLE]??
15:02 - How could you control a design?
15:04 - What if your random walk
through color space?
15:06 - There are so many
possible ways you
15:08 - could think about what
the random walk is
15:10 - besides this sort of
traditional view of it.
15:12 - So if you're following along
this Nature of Code course
15:16 - that I'm sort of teaching online
through this YouTube channel
15:19 - and you make an example, please
tweet it to me @shiffman.
15:23 - You can share it in
this Slack channel
15:25 - if you're part of
the Patreon group.
15:26 - Or you can certainly
link to your work
15:28 - that you made in the
comments, and I'll
15:30 - try to come back
in future videos
15:32 - and show some random
walk examples that people
15:33 - from the community have made.
15:35 - OK?
15:35 - Thanks for watching
this tutorial.
15:36 - And if you stick around and
watch of the other videos,
15:39 - there'll be more random
walk examples to come.
15:41 - [BELL]
15:42 - [MUSIC PLAYING]

Cleaned transcript:

[TRAIN WHISTLE] All aboard. Here we are. Welcome to a new coding challenge. This coding challenge is part of my spring 2017 course, Nature of Code. I'm teaching it at New York University, and I have most of the materials for this course already online through videos. You can find the links to all those videos and the materials for the course in this video's description. But what I'm going to do periodically is do some coding challenges that fit with the material for that course week to week, and what I'm going to start with today is this thing called a random walk. What is a random walk? I'm going to diagram it for you on the whiteboard in a moment. But ultimately, a random walk, as you can see here, is visualized as this thing that moves around randomly. It's a random walk. And so I actually already have the program running here that I made in the coding challenge because I'm recording this after it, and it's being edited together through the magic of video editing technology. And so what I'm going to start with here is the very basic, traditional, simple random walk, a little dot moving around the screen, every frame of animation picking a random direction to move. From there, it's up to you to do something more creative with this. To think about this, what kinds of behaviors and ideas from nature or the world can you simulate with this? What types of visual outcomes can you get with this? At the end of the video, I'll give you some context and ideas about that. And this is just the first in a series of short experiments about random walks, and I'll do some variations on it in terms of moving this from 2D to 3D, thinking about the step size, thinking about vectors, objectoriented programming. But this video is going to be the most basic, simple, drop singing. I just want to say drop dead for some reason, but a very simple, just basic random walk. I hope you enjoy looking at the code for this and you make something creative out of it and you let me know. So I'm going to leave. I'm going to take the train to the past, my time travel train, to do this coding challenge. OK. I am here to get started with this coding challenge, the random walk. So the first thing I want to do is oh, you're over here now, I'm over here Is talk about what a random walk is. So a random walk is a stochastic stochastic being another word for random, that sounds about right a process where there is a value that changes with each time step randomly in one direction or another. And this is the kind of thing that can be used to model the way an animal forages for food or the stock price fluctuates, perhaps, or a kind of way a gambler makes decisions playing blackjack. There are a lot of processes by which this idea of a random walk and a random walk could be in one dimension or two dimensions or three dimensions are used in various kinds of scientific simulations. This is also related to something called Brownian motion, which maybe I'll come back on a separate video and kind of connect these two things more. But the kind of random walk I want to talk about is the random walk that happens in a twodimensional graphic space. And in a future video, a couple videos from now, I'm going to do couple of variations on it, and we'll do a 3D random walk as well, and we'll see how that works. So the idea here is that there is a dot in this twodimensional canvas. Maybe it's in the middle of the canvas. The dot has an x and y position. And every frame of animation, there are only four choices. Option number 1 is move to the right. Option number 2 the order of these doesn't matter move to the left. Option number 3, move up. Option number 4, move down. So every frame of animation, one of these is randomly picked. So we might move to the right and then move up, then move to the left, then move up, then move to the left, then move down, then move to the left, then move down, then move down, then move to the right, then move up. You can imagine how this would work. Now, I in a weird sort of way created a pattern there because I'm a human being, flawed in so many ways. You have no idea. But you know what the things I can't do, as most human beings can't do, is produce an actual random sequence of numbers because my brain is just pattern, pattern, pattern this, pattern this, pattern this. But computers can produce what's known as pseudorandom numbers, meaning there's a mathematical formula that's operating behind the scenes that generates a sequence of numbers that when looked at over time have an essentially random probability. Now, these are pseudorandom because it's not like we're actually measuring. And incidentally, a random walk is also related to measuring movements of particles moving around in the gas. I had this moment where I felt like I needed to burp. That was very strange. Everything is coming together in my brain. But there was a point to what I was saying, which is that if you really wanted to achieve true first of all, random numbers itself is something that lots of people study, a lifetime of study, or write PhD dissertations about getting a really good random number generator. The way that I can get random numbers with this pseudorandom number generator is with a function in P5 called random. And the key thing about this function is, well, first of all, it takes a minimum and a maximum as arguments. So I want to get random numbers between 4 and 10 or 0 and 5 or negative 5 and positive 5. But the key thing about this function is it gives you a uniform distribution, meaning you have the same likelihood as picking the number 1 as you have the picking the number 3 as you beginning of the 4, picking the number 2. And one thing I really want to look at as part of this little series about random walks is, what happens what I want a different distribution? What if I want to move down more often than I want to move up? Or what if I want to move towards the mouse? I want to have a 50% chance of moving toward the mouse and a 50% chance of picking something else random. Or what if I want to have a distribution of random numbers that follows something called the bell curve, or a normal distribution or a Gaussian distribution? And I have some videos about that. So I'm going to connect some of these themes in these videos about random walks. So all I need to do is have a program with an x and a y. I need to have the random function that picks and really, my random function is not going to pick 1, 2, 3, or 4. I could make it do that, but that's not really how numbers are ever picked on a computer. So I'm going to pick 0, 1, 2, or 3, because I'm going to look for a range starting with 0. And then whichever one of those I pick I'm going to adjust the x or the y position and move my random walker around on the screen. So come over here with me. Let's take the train over to the computer. OK, here we are. So let's start implementing this. I'm actually going to do this in a nonobjectoriented manner, and I'll come back in another video and maybe add objects to this. But just in the most the simplest way, I'm going to have an x variable and a y variable. And I'm going to start it in the middle of the screen, y equals 200. And I'm going to just draw a point at x and y. I'm going to say stroke 255, and I'm also going to say stroke weight 2 just so it's a little bit more visible. And if I now refresh the page, we can see, there it is. There's my random walker. It hasn't gone anywhere yet. So now I need to pick a random number. So that random number could be so I'm going to do that here in draw. I'll do it after I draw the point. And I'm going to say var r equals random 0 to 4. So this is what I'm going to start with. Now, first of all, I don't actually have to give a minimum and a maximum if my minimum is 0. So by definition, if I only give the random function a single argument, that's the maximum. So I want a random number between 0 and 4. Now, the issue with this is the random function in P5, by definition, will give me a random between 0 and 4 that has decimals, so 1.23, 3.5, 4.7, 0.3, 4.1 no, not 4.1. Actually, the highest number it will give me is 3.99999999999999999 I can go on. I lost my train of thought there. So it's never actually going to give me 4. But I can do something to this, which is I can put this function floor around it. And what the floor function does, there are a bunch of functions that I can use where's my marker, here it is in P5 to take a floating point number like 3.4 and convert it to an integer. If I use the floor function, it will make that number 3. If I use the ceiling function, CEIL, it will make that number 4. If I use the round function, it will make that number 3. So floor, even if it's even if it's 3.999999, lops off the decimal place and makes it 3. If ceiling, no matter what it is, whether it's 3.9 or 3.1 or 3.2, goes up to the nearest integer. So floor goes down to the nearest integer, [? ceil ?] goes up to the nearest integer, and then round rounds it. So 3.4 becomes 3. 3.6 becomes 4. So it goes up or down, depending on which is closer. It rounds the number. So floor is going to be useful for me here. And now here's the thing. You know what it would make sense for me to use in this video that I hear a lot of people on YouTube asking me to use, and say, what's wrong with you? How come you never use a switch statement? And I'll tell you the reason. I got a thing in my brain. I can't ever remember the syntax for it. So what I want to do right now, which is more comfortable for me, is just say, if r equals 0, do something. Otherwise, if r equals 1 and by the way, I also want to talk about, someday, the difference being triple equals and double equals, that's not really a part of this video. Somebody remind me. I'll come back to that somewhere else. But let's try to add a switch statement. Let's do it in this video. It's a the kind of conditional statement, like an if statement, where you can say, hey, there are some cases here. I've got this value. And if this value is equal to this, do this. If it's equal to this but it looks more condensed syntax. So I'm going to have to look up the syntax because I can freely admit that I can ever remember this. Case statement JavaScript. Let's see where we get. Let's go to switch here. So you can see here this is this statement. This is the syntax. Switch expression, expression meaning, in this case, a particular variable. The case of when this variable has this value, do this stuff. Otherwise, do this stuff. And then I need a break statement so that I get out of it once it's found a particular value. So I can only do one. So I should be able to do let me a copy this in. Let's copy this. And I can do switch r case 0 case 1. Look at me. I'm all grown up. Case 2. This is very stressful. This is going to work. Case 3 break. And how did I do? So now the thing is, what do I want to do? Well, if we look back to here, I have to say, case 0, move to the right. Case 1, move to the left. Case 2, move up. Case 3, move down. Again, the order doesn't actually matter. So that's a long way to walk from there to here, this new space. So I'm going to say, x equals x plus 1 here. I'm going to say, x equals x minus 1 here, to move to the left. To move down is y equals y plus 1, and to move up is equals y minus 1. So we now have this switch statement where I'm picking one of these four options. And here we go. Let's go back to our code, run it, and look at that. There's our random walk. Now, interestingly enough, this doesn't look like some of the images I showed you in the intro to this video that I haven't actually made yet because that's going to happen after. What I want to do is I want to see the path of this random walker just in terms of this sort of classic way to visualize the random walk in a 2D space. And the easiest way I can do that is just take the background function and move that into setup. So I'm drawing the background just once at the beginning, and then I'm drawing the background just once at the beginning so that when the dot moves I don't I'm not erasing the previous dots. And now if I do this again, we can see look at this. There's are random walker. So I now propose to you, at the end I'm going to do a couple more videos with some variations on this theme. But this is a really simple concept. But you would be amazed if you Google random walk art, random walk 2D, random walk 3D, and you do an image search, you're going to find a lot of beautiful examples of people trying different styles. What if this random walk, for example, color played a role in it? What if you had multiple random walks, and when they intersected each other they combined colors or gave birth to a new random walk? What if you thought about different ways to do probability so that the way that it moved has some sort of pattern or logic to it? And I will make some videos with some kind of known techniques. There's a technique called the Levy flight, which is a different kind of walk where the step size varies. Right now I'm only ever moving by one other things you might try and think about is, what if the random walk never was allowed to go where it had previously been? This is known as a selfavoiding walk. This is a pretty tricky problem, but you might think about trying to solve that. I think I said 3D already. So there's a lot of things. Oh, and here's the thing that's even more important. This is just a pure visual example of the random walk. But what if you don't think about the outcome of the random walk being just a dot moving in a 2D space? What if it's a random walk that's actually changing notes in a melody, a musical composition, or a dance performance? What are some other ways you can take this random walk idea and make it into a project that has some kind of creative expression associated with it? Or also, even in the land of computer graphics, what if the random walk are actually vertices of a polygon, and each one of those vertices are doing a random walk? Or after random walk goes for while, it sets [INAUDIBLE]?? How could you control a design? What if your random walk through color space? There are so many possible ways you could think about what the random walk is besides this sort of traditional view of it. So if you're following along this Nature of Code course that I'm sort of teaching online through this YouTube channel and you make an example, please tweet it to me @shiffman. You can share it in this Slack channel if you're part of the Patreon group. Or you can certainly link to your work that you made in the comments, and I'll try to come back in future videos and show some random walk examples that people from the community have made. OK? Thanks for watching this tutorial. And if you stick around and watch of the other videos, there'll be more random walk examples to come. [BELL] [MUSIC PLAYING]
