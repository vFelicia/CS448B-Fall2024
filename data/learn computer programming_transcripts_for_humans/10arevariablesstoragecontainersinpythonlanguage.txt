With timestamps:

00:00 - hello everyone today i have a topic to
00:02 - discuss
00:03 - is the variable is a container of data
00:05 - in python
00:07 - it is confusing right if you already
00:09 - learn other languages
00:11 - if a is equal to 1 then a is a variable
00:15 - which reserves some space
00:17 - to store the value the space is
00:21 - the size of the data type which a is
00:23 - declared
00:24 - so now one is stored in that particular
00:27 - space
00:28 - similarly if i have b is equal to 5
00:32 - and then b is a space reserved
00:35 - where 5 is been stored so now
00:38 - a and b both are space allocated to
00:42 - store the values
00:43 - if i change the value of b as 1
00:47 - and then 5 is overwritten as 1.
00:50 - my question is is this in python also
00:54 - the answer is no in python variable is
00:58 - address of memory location variables of
01:01 - python are not
01:02 - storage containers like other languages
01:05 - they refer to the memory location of
01:07 - values or objects for example
01:12 - here the values are there in a memory if
01:14 - i say
01:15 - a is equal to 1 this will have some
01:19 - reference to refer one where it is
01:21 - stored that references
01:23 - here this reference will change from one
01:26 - computer to other computer from one
01:28 - operating system to other operating
01:30 - system and then one session to even
01:33 - other session it will be changing
01:34 - it is not always a constant so now this
01:37 - has been referred to a
01:38 - if i say b is equal to 5 the address of
01:42 - 5 is been referred to b
01:46 - if i change b as 1 then the address of
01:51 - 1 is being only referred
01:55 - by the variable b so again
01:58 - again the value is not been stored
02:01 - only the address of the value is been
02:04 - referred by the variables in python
02:07 - come let us check with the python
02:10 - ideally
02:11 - to get the memory address of the
02:13 - variable which it is
02:15 - referencing we use id
02:18 - off that means if i am giving
02:22 - 1 here see this is the reference given
02:24 - for 1
02:25 - if i am storing this in x so x is equal
02:28 - to 1
02:29 - so if i am taking id of x it should be
02:31 - similar
02:32 - so you can see both are same now if i am
02:35 - changing the value for x
02:37 - i am telling x is equal to 20
02:41 - then if i am taking id of x now see the
02:45 - reference has been changed
02:46 - again we will confirm whether the 20 has
02:48 - the same reference so id
02:50 - of 20 see it is same
02:53 - now i give y also as 20
02:56 - now id of y also should be the same
03:03 - see you can see it is same now if i say
03:08 - x is equal to equal to y then it is
03:11 - checking
03:12 - whether both are equal or not so
03:15 - then it gives true one thing i would
03:17 - like to
03:18 - point out here which is very much
03:21 - important
03:22 - if we are having higher precision
03:24 - numbers for example i give here
03:27 - m is equal to 0.1
03:31 - plus 0.2
03:34 - and 0.3
03:37 - then what should be the answer it should
03:40 - be 0.6
03:42 - but here if we check m
03:45 - the answer is very slightly changed
03:48 - 15 digits precisions are allowed in
03:51 - python in float data type we know
03:55 - anything is to be stored it is stored in
03:57 - the binary form
03:58 - so here the approximation takes place
04:01 - which gives us unexpected result
04:04 - sometimes so we should be very careful
04:06 - that when we are
04:06 - having the floating point expressions
04:10 - to check with relational operator it may
04:13 - fail
04:14 - so please avoid it m we know the value
04:17 - we got here
04:18 - if i am comparing m is
04:21 - equal to 0.6
04:24 - then answer is going to be false
04:27 - but actually we know it is right
04:30 - i would like to recall now when we
04:33 - discussed about identity operators
04:36 - that is ease and e is not i said
04:39 - if both the operands are pointing the
04:41 - same
04:42 - object to the same memory location
04:45 - then it will be returning true otherwise
04:49 - it will be returning false so same
04:51 - example we will see
04:53 - m is 0.6
04:57 - say it is false we will also check one
04:59 - string object
05:00 - i have s1 is equal to note iq
05:06 - and then i also give s2
05:10 - also as note
05:13 - now i am checking s1 is
05:16 - s2 so it is true
05:20 - now i have s3 is equal to
05:24 - notebook i will also take
05:28 - s4 as same notebook only
05:35 - now i am checking s3
05:38 - is s4 can you see false there
05:44 - that means both the variables are not
05:47 - pointing to the
05:49 - same address of that memory
05:52 - so let us check the id of both id of
05:55 - s3 and then id
05:59 - of s4 see both are not
06:03 - same so if memory locations are same
06:07 - then it is going to return as true i
06:10 - hope you are very clear now
06:12 - whenever the value of a variable is been
06:14 - changed
06:15 - only the memory address get changed
06:19 - see few examples i have shown you can
06:21 - also practice
06:23 - more and clarify yourself
06:26 - if you are having any doubt on this
06:28 - topic you can write it on the comment
06:30 - box
06:31 - and then i will surely reply to it thank
06:34 - you

Cleaned transcript:

hello everyone today i have a topic to discuss is the variable is a container of data in python it is confusing right if you already learn other languages if a is equal to 1 then a is a variable which reserves some space to store the value the space is the size of the data type which a is declared so now one is stored in that particular space similarly if i have b is equal to 5 and then b is a space reserved where 5 is been stored so now a and b both are space allocated to store the values if i change the value of b as 1 and then 5 is overwritten as 1. my question is is this in python also the answer is no in python variable is address of memory location variables of python are not storage containers like other languages they refer to the memory location of values or objects for example here the values are there in a memory if i say a is equal to 1 this will have some reference to refer one where it is stored that references here this reference will change from one computer to other computer from one operating system to other operating system and then one session to even other session it will be changing it is not always a constant so now this has been referred to a if i say b is equal to 5 the address of 5 is been referred to b if i change b as 1 then the address of 1 is being only referred by the variable b so again again the value is not been stored only the address of the value is been referred by the variables in python come let us check with the python ideally to get the memory address of the variable which it is referencing we use id off that means if i am giving 1 here see this is the reference given for 1 if i am storing this in x so x is equal to 1 so if i am taking id of x it should be similar so you can see both are same now if i am changing the value for x i am telling x is equal to 20 then if i am taking id of x now see the reference has been changed again we will confirm whether the 20 has the same reference so id of 20 see it is same now i give y also as 20 now id of y also should be the same see you can see it is same now if i say x is equal to equal to y then it is checking whether both are equal or not so then it gives true one thing i would like to point out here which is very much important if we are having higher precision numbers for example i give here m is equal to 0.1 plus 0.2 and 0.3 then what should be the answer it should be 0.6 but here if we check m the answer is very slightly changed 15 digits precisions are allowed in python in float data type we know anything is to be stored it is stored in the binary form so here the approximation takes place which gives us unexpected result sometimes so we should be very careful that when we are having the floating point expressions to check with relational operator it may fail so please avoid it m we know the value we got here if i am comparing m is equal to 0.6 then answer is going to be false but actually we know it is right i would like to recall now when we discussed about identity operators that is ease and e is not i said if both the operands are pointing the same object to the same memory location then it will be returning true otherwise it will be returning false so same example we will see m is 0.6 say it is false we will also check one string object i have s1 is equal to note iq and then i also give s2 also as note now i am checking s1 is s2 so it is true now i have s3 is equal to notebook i will also take s4 as same notebook only now i am checking s3 is s4 can you see false there that means both the variables are not pointing to the same address of that memory so let us check the id of both id of s3 and then id of s4 see both are not same so if memory locations are same then it is going to return as true i hope you are very clear now whenever the value of a variable is been changed only the memory address get changed see few examples i have shown you can also practice more and clarify yourself if you are having any doubt on this topic you can write it on the comment box and then i will surely reply to it thank you
