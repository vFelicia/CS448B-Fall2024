With timestamps:

00:00 - hello everyone we have already learnt
00:02 - about operators
00:04 - in this class we are going to learn
00:05 - about operators precedence
00:07 - this has been followed when an
00:09 - expression is evaluated let me explain
00:12 - first with one example
00:13 - consider the following values assigned
00:15 - to the variables
00:17 - a is equal to 1 b is equal to 2 c and d
00:20 - both are having 10 s value and then e as
00:23 - 5. just consider the following
00:25 - expression which you would like to
00:27 - evaluate in the order it appears here
00:34 - then the result you expect to be
00:36 - calculated as
00:37 - a plus b that is 1 plus 2 as 3
00:40 - and then this result is being multiplied
00:43 - with c which is 10
00:45 - so you will be getting 30 as the result
00:48 - this result is being added again with
00:51 - value d that is 10 it becomes 40.
00:56 - so now this 40 to be divided by
00:59 - each value that is 5 and then
01:02 - totally you get 8.0 as the answer at
01:06 - last
01:07 - but when you are writing this expression
01:09 - the computer calculates in different way
01:11 - and then it produces
01:13 - 23 as result it will be evaluating first
01:16 - b into c that is 2 into 10 as 20
01:20 - and then d divided by e that is 10
01:23 - divided by 5
01:24 - as 2 here 1 plus 20
01:27 - 21 and then 21 plus 2 at last it gets
01:31 - 23.0
01:33 - in both the way step by step
01:35 - calculations are correct
01:36 - but the order of operation which has
01:40 - taken place
01:40 - is different that is the reason why the
01:43 - answers are different here
01:45 - as you learned in mathematics board mass
01:48 - is the rule which determines which
01:51 - operation to be taken
01:53 - in prior similarly in computer language
01:56 - we have
01:57 - operator precedence if you expect that 8
02:00 - to be given as the
02:01 - answer and then this expression would
02:04 - have been written
02:05 - using the brackets the innermost values
02:08 - in the brackets
02:09 - are done first as a plus b
02:12 - and then the next outer one into c and
02:15 - the next outer one as plus
02:17 - d and then at last the answer is divided
02:19 - by e
02:20 - and then which produces 8.0 as the
02:22 - result
02:25 - so when there are different operators
02:28 - present in the expression
02:30 - the order of expression of operation at
02:32 - the time of
02:33 - resolving the expression is called
02:35 - operator precedence
02:37 - sometimes different operators may also
02:41 - contain the
02:42 - same order of precedence
02:45 - operator associativity is used to
02:48 - determine the priority
02:50 - of execution this can be
02:54 - from left to right or right to lift
02:57 - all the operators have lift to right
03:00 - except
03:01 - exponentiation you will understand
03:03 - better when i demonstrate it
03:05 - now let us see the operator precedence
03:06 - of python
03:08 - the topmost is the highest prioritized
03:11 - operator and the lower one is below it
03:14 - the highest priority
03:15 - is given to parenthesis in the
03:18 - expression
03:19 - that means grouping so whatever is
03:21 - inside the
03:22 - parenthesis will be evaluated giving top
03:25 - most priority
03:27 - next function called slicing
03:30 - and then subscription these three you
03:32 - have not learned still but just remember
03:35 - the
03:35 - order of the precedence here next
03:38 - exponentiation
03:40 - next we are having bitwise not and then
03:43 - unary plus and unary minus
03:45 - see here two operators are at the same
03:48 - level
03:49 - so in this case the associativity will
03:51 - determine
03:52 - whether from left to right or right to
03:55 - left
03:55 - except exponentiation everything will be
03:58 - from left to right so this is from left
04:00 - to right
04:01 - similarly we are having multiplication
04:04 - division floor division and then modulus
04:06 - that is remainder
04:08 - all these operators at the same level so
04:10 - if
04:11 - many are in the expression it will be
04:13 - evaluated from left to right
04:17 - next addition and subtraction
04:20 - then bitwise shift operators
04:23 - bitwise and bitwise x are
04:26 - bitwise are and then membership
04:29 - operators
04:30 - identity operators comparison operators
04:33 - so all these are having same precedence
04:36 - next boolean not boolean and boolean
04:39 - are let us check some expressions using
04:42 - python
04:43 - i have first example as 10 plus
04:47 - 6 divided by 2. see there are two
04:50 - operators
04:51 - division operator is having higher
04:52 - priority so 6 divided by 2 it will be
04:56 - 3.0 10 plus 3.0 13.0
05:00 - next i have 5 plus 4 into 3
05:04 - plus 6 minus 3 see here
05:08 - multiplication will have higher order
05:10 - precedence so
05:11 - 4 into 3 12 is done first and then from
05:15 - left to right it will be coming 5 plus
05:17 - 12 will be 17
05:19 - plus 6 is 23 minus 3 is 20.
05:22 - next i have 2 into 8
05:25 - 4 division by 3 so here both are having
05:29 - same operator precedence so it will be
05:31 - coming from left
05:32 - to right 2 8 are 16 divided by 3
05:36 - 5 will be answer next example for
05:39 - exponentiation
05:40 - 2 to the power 2 to the power 3
05:44 - it will be done from right to left that
05:46 - means 2 to the power 3 will be done
05:48 - first
05:49 - 2 into 2 into 2 is 8 then 2 to the power
05:52 - 8
05:53 - that means 256 will be the answer in
05:56 - other words
05:56 - if we would have done 2 into 2 that
06:00 - means
06:00 - 2 to the power 2 4 4 to the power 3
06:03 - means it would have been 64. that is not
06:06 - the
06:06 - answer here so when it is an
06:08 - exponentiation it will be from
06:10 - right to left next example 2
06:13 - plus 5 greater than 4 into 2
06:17 - so here higher priority is 4 into 2 it
06:20 - is done
06:20 - first 8 and then 2 plus 5 7
06:23 - 7 is greater than 8 will be false next i
06:27 - have 2
06:27 - plus 1 r 4 and
06:31 - 0 see 2 plus 1 is having the higher
06:34 - priority so 3 are 4 and 0.
06:38 - next and will be done 4 and 0 will
06:41 - return 0
06:42 - so 3 or 0 now will be 3
06:45 - now i have 20 is greater than
06:49 - 100 and
06:52 - see something i have given it will be
06:55 - giving false
06:56 - as the first statement before and there
06:59 - is a false statement
07:01 - if it is false it is not going to check
07:03 - the second expression at all
07:05 - now i give 20 is
07:08 - lesser than 50 this is true and i am
07:12 - giving
07:12 - now which is not correct syntax see now
07:16 - you can see the syntax error shown
07:18 - when the first expression is right and
07:21 - then only it checks the
07:23 - next expression with the end next i have
07:26 - not
07:26 - x and 6 it will be giving false not
07:30 - x will be calculated first x is
07:32 - something
07:33 - which is in the code that means some
07:35 - value so not
07:36 - x is false so false and 6
07:40 - will be false you can create plenty of
07:42 - examples like this
07:44 - and then calculate the output yourself
07:46 - and also confirm using the python
07:53 - keep watching my channel thank you

Cleaned transcript:

hello everyone we have already learnt about operators in this class we are going to learn about operators precedence this has been followed when an expression is evaluated let me explain first with one example consider the following values assigned to the variables a is equal to 1 b is equal to 2 c and d both are having 10 s value and then e as 5. just consider the following expression which you would like to evaluate in the order it appears here then the result you expect to be calculated as a plus b that is 1 plus 2 as 3 and then this result is being multiplied with c which is 10 so you will be getting 30 as the result this result is being added again with value d that is 10 it becomes 40. so now this 40 to be divided by each value that is 5 and then totally you get 8.0 as the answer at last but when you are writing this expression the computer calculates in different way and then it produces 23 as result it will be evaluating first b into c that is 2 into 10 as 20 and then d divided by e that is 10 divided by 5 as 2 here 1 plus 20 21 and then 21 plus 2 at last it gets 23.0 in both the way step by step calculations are correct but the order of operation which has taken place is different that is the reason why the answers are different here as you learned in mathematics board mass is the rule which determines which operation to be taken in prior similarly in computer language we have operator precedence if you expect that 8 to be given as the answer and then this expression would have been written using the brackets the innermost values in the brackets are done first as a plus b and then the next outer one into c and the next outer one as plus d and then at last the answer is divided by e and then which produces 8.0 as the result so when there are different operators present in the expression the order of expression of operation at the time of resolving the expression is called operator precedence sometimes different operators may also contain the same order of precedence operator associativity is used to determine the priority of execution this can be from left to right or right to lift all the operators have lift to right except exponentiation you will understand better when i demonstrate it now let us see the operator precedence of python the topmost is the highest prioritized operator and the lower one is below it the highest priority is given to parenthesis in the expression that means grouping so whatever is inside the parenthesis will be evaluated giving top most priority next function called slicing and then subscription these three you have not learned still but just remember the order of the precedence here next exponentiation next we are having bitwise not and then unary plus and unary minus see here two operators are at the same level so in this case the associativity will determine whether from left to right or right to left except exponentiation everything will be from left to right so this is from left to right similarly we are having multiplication division floor division and then modulus that is remainder all these operators at the same level so if many are in the expression it will be evaluated from left to right next addition and subtraction then bitwise shift operators bitwise and bitwise x are bitwise are and then membership operators identity operators comparison operators so all these are having same precedence next boolean not boolean and boolean are let us check some expressions using python i have first example as 10 plus 6 divided by 2. see there are two operators division operator is having higher priority so 6 divided by 2 it will be 3.0 10 plus 3.0 13.0 next i have 5 plus 4 into 3 plus 6 minus 3 see here multiplication will have higher order precedence so 4 into 3 12 is done first and then from left to right it will be coming 5 plus 12 will be 17 plus 6 is 23 minus 3 is 20. next i have 2 into 8 4 division by 3 so here both are having same operator precedence so it will be coming from left to right 2 8 are 16 divided by 3 5 will be answer next example for exponentiation 2 to the power 2 to the power 3 it will be done from right to left that means 2 to the power 3 will be done first 2 into 2 into 2 is 8 then 2 to the power 8 that means 256 will be the answer in other words if we would have done 2 into 2 that means 2 to the power 2 4 4 to the power 3 means it would have been 64. that is not the answer here so when it is an exponentiation it will be from right to left next example 2 plus 5 greater than 4 into 2 so here higher priority is 4 into 2 it is done first 8 and then 2 plus 5 7 7 is greater than 8 will be false next i have 2 plus 1 r 4 and 0 see 2 plus 1 is having the higher priority so 3 are 4 and 0. next and will be done 4 and 0 will return 0 so 3 or 0 now will be 3 now i have 20 is greater than 100 and see something i have given it will be giving false as the first statement before and there is a false statement if it is false it is not going to check the second expression at all now i give 20 is lesser than 50 this is true and i am giving now which is not correct syntax see now you can see the syntax error shown when the first expression is right and then only it checks the next expression with the end next i have not x and 6 it will be giving false not x will be calculated first x is something which is in the code that means some value so not x is false so false and 6 will be false you can create plenty of examples like this and then calculate the output yourself and also confirm using the python keep watching my channel thank you
