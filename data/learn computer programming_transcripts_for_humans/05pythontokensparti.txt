With timestamps:

00:00 - my dear students in today's lesson we
00:02 - are going to learn about
00:04 - tokens of python here you can see
00:08 - 5 chocolates ok i give a statement
00:11 - 5 chocolates are here if you bifurcate
00:14 - into smaller units you can see a number
00:17 - which is
00:18 - at the starting 5 and then after the
00:20 - space
00:21 - you get a word called chocolates
00:23 - similarly r here also
00:25 - so this is a statement made up of
00:28 - small units called words are numbers
00:31 - similarly tokens are nothing but
00:34 - smallest individual
00:35 - unit in a program which interpreter can
00:39 - understand
00:41 - this is also called as a lexical unit
00:45 - most of the time when you give white
00:47 - space that
00:48 - ends the token python has following
00:51 - five types of tokens keywords
00:54 - identifiers we have already seen these
00:57 - two
00:58 - in my previous video still we will see
01:00 - little more elaborate
01:02 - then literals operators
01:06 - as well delhi meters we already know
01:09 - the keywords are the words which convey
01:13 - a special
01:13 - meaning to the language remember these
01:16 - words cannot be used for
01:18 - any other purpose in the program the
01:20 - current version which i
01:21 - install here that is 3.9.4 version it
01:26 - has
01:26 - 35 keywords if you go to previous
01:29 - version there may be little lesser than
01:31 - this
01:32 - for example 3.7 version has only 33
01:35 - keywords
01:36 - whenever they upgrade the language there
01:38 - may be one or two keywords
01:40 - added now here are the keywords
01:44 - available in this version if you see
01:46 - this first three words
01:47 - and the rest of the words can you make
01:50 - any difference
01:52 - yes you are absolutely right first three
01:55 - keywords are starting with
01:58 - capital letters rest of
02:01 - all the keywords are with small letters
02:06 - in computer language we always call it
02:08 - as
02:09 - uppercase letters and lowercase letters
02:12 - you must know one thing
02:13 - that python language is case sensitive
02:17 - that means for python language
02:21 - you type a alphabet in capital letter
02:25 - and you type a same alphabet in small
02:28 - letter
02:29 - both are different for it you cannot
02:31 - indicate the same
02:33 - alphabet with opposite case so
02:36 - the keywords are also same you need to
02:40 - have the same spelling with the case
02:42 - whenever you are using it okay now let
02:44 - us know
02:46 - how do you know the keywords of your
02:48 - version you go to interactive
02:50 - mode and then just type this health open
02:52 - the bracket
02:53 - inside the double quote keywords and
02:56 - then close the bracket
02:57 - you will have one extra thing if you are
03:00 - having 3.9 version
03:02 - let me know whether you are checking it
03:03 - or not just message
03:05 - what difference you can make from this
03:09 - surely i will reply to it if you want to
03:11 - know
03:12 - a detail about a particular keyword
03:15 - instead of this keyword inside the
03:18 - bracket you can directly type the
03:21 - keyword which you want to know about let
03:24 - me show that to you
03:25 - open the python ideally now type h-e-l-p
03:29 - open the bracket and then open the
03:32 - double quote
03:33 - i say continue continue is a keyword
03:36 - here
03:41 - so now the details about the keyword
03:44 - continuous
03:46 - display to v i said there are 35
03:49 - keywords right
03:50 - so all 35 keywords you can give like
03:53 - this
03:54 - but don't worry i am not telling you to
03:56 - do this and learn
03:57 - everything gradually when we start doing
04:00 - programming
04:01 - the keywords will automatically you will
04:03 - understand
04:04 - you don't need to do any exercise for
04:06 - this or you don't need to try to
04:08 - remember
04:08 - all the keyword in your memory now let
04:11 - us see
04:12 - identifiers i already told about this
04:16 - identifier
04:17 - it is nothing but a name given by the
04:20 - programmer
04:21 - to identify any part of the program
04:24 - but we cannot give any name as we like
04:27 - there are certain rules to follow
04:30 - let us check the rules first character
04:33 - of the identifier should be
04:35 - an alphabet
04:39 - the digits that is numbers can be the
04:42 - part of
04:43 - identifier except for the first
04:46 - character
04:46 - already it is been mentioned that it
04:48 - should start with alphabet right
04:50 - identifiers cannot be a keyword we have
04:52 - already seen
04:54 - that keywords cannot be used for any
04:56 - other purpose
04:58 - than mentioned in the programming
05:00 - language
05:01 - so keywords cannot be there as
05:05 - a name of the object or variable
05:09 - or class or whatever it is you cannot
05:12 - use
05:12 - any other character other than
05:16 - underscore only underscore is allowed
05:19 - to combine with alphabet or digit to
05:22 - create an identifier
05:24 - this underscore is always used to
05:27 - bifurcate
05:28 - two words in case you are giving two
05:31 - different words
05:32 - to name the part of a program then you
05:35 - can use this
05:36 - underscore so that easily you can read
05:38 - the name of the part
05:40 - we have already discussed that it is
05:42 - case sensitive so similarly
05:44 - even identifiers are case sensitive you
05:46 - need to
05:47 - remember whether you are given in upper
05:50 - case
05:51 - are lower case or mixed case whatever it
05:54 - is it should be as
05:55 - same as you have given previously if you
05:57 - want to reuse
05:58 - it can be arbitrarily long sequence of
06:03 - letters and digits hope you understood
06:05 - this very clearly
06:06 - now let us have a small exercise you
06:09 - just
06:10 - identify whether the identifiers given
06:14 - here
06:14 - are correct or wrong you can just
06:18 - take a paper and a pen or pencil
06:22 - you don't need to write whatever is
06:24 - appearing here just you put tick mark or
06:26 - wrong mark
06:28 - according whether it is valid or
06:31 - not valid one result
06:36 - to combine underscore
06:39 - follow while
06:44 - find hashtag val
06:49 - sum of series
06:53 - continue hyphen in
06:58 - q3 true
07:03 - lab underscore 3
07:06 - stu percentage tot
07:11 - area of try hope you all marked whether
07:15 - it is
07:15 - true or false that is valid or not
07:18 - you just check now result is right
07:23 - two combine is wrong do you know the
07:25 - reason
07:27 - yes the 2 is in the beginning which is
07:31 - digit
07:31 - it is not allowed
07:35 - and then underscore follow yes this is
07:37 - right
07:39 - it can start with underscore but
07:42 - you need to understand one thing here
07:44 - any name
07:45 - starts with underscore will have a
07:49 - special
07:50 - mention for it that you will learn in
07:52 - future classes no need to worry but
07:54 - as of now it is correct while is correct
07:58 - see actually while in all small letter
08:02 - is a keyword here i have mentioned
08:06 - while with capital w so small
08:09 - w while and capital w while
08:12 - has the difference this can be a
08:14 - identifier but
08:16 - if you use small w instead of capital w
08:20 - here it cannot be a valid one
08:23 - and then find hashtag it is wrong
08:26 - because
08:27 - hashtag is the symbol which is not
08:29 - allowed
08:30 - sum of series is correct continue
08:34 - hyphen in is again wrong because of the
08:37 - symbol
08:37 - hyphen given it is not underscore
08:40 - so to know the difference i have given
08:42 - there and then q3 is correct you can
08:45 - combine the
08:46 - digit after the first letter so it is at
08:48 - last no problem
08:51 - and then true is wrong because true is a
08:54 - keyword capital t and ru
08:57 - e is a keyword which is not allowed to
09:00 - have a
09:01 - name of a part of program so lab
09:04 - underscores
09:05 - 3 is correct
09:08 - the 11th one is also wrong because of
09:10 - the percentage symbol
09:12 - and then area of try is also
09:17 - say right or wrong some of you might
09:19 - have indicated as
09:21 - right but it is wrong because the space
09:24 - is available
09:25 - after each word which is not allowed we
09:28 - have already seen
09:29 - the space ends the token right so if it
09:32 - is a token
09:33 - completely one name is a token so now if
09:36 - you give space
09:37 - then it will take as another word or
09:40 - token after it i will give you some tips
09:44 - to create identifiers if you are
09:47 - combining more than one word
09:49 - use underscore to separate the words
09:54 - always choose descriptive identifiers
09:57 - starting with lowercase in case you are
10:00 - using
10:01 - identifier for creating class then you
10:04 - can use
10:05 - uppercase it should not be too short
10:08 - or too long but should be the right size
10:11 - to be clear
10:12 - and concise
10:16 - avoid using identifiers that are
10:18 - homophones
10:19 - that means for example b
10:22 - two in digit and d see i mentioned here
10:25 - binary to decimal
10:27 - okay the other one b underscore
10:30 - t o underscore d both may be different
10:33 - but when you read are similar you can
10:36 - avoid
10:36 - giving these types of identifiers
10:40 - in case you are using abbreviations
10:43 - avoid
10:43 - using 0 and capital o
10:47 - similarly if you are giving l r
10:51 - uppercase of i or sometimes even 1
10:54 - all these looks similar so please avoid
10:57 - this
10:58 - now i will take you to python window to
11:00 - experiment some identifiers
11:02 - i will dynamically initialize a variable
11:06 - for example x is equal to 10 i u
11:09 - it accepts now if i use like this
11:12 - if is equal to 20 see
11:15 - if is a keyword so it will not accept it
11:19 - will have only the special meaning
11:21 - in this language
11:24 - now i try to give with some symbol say
11:29 - total and then percentage symbol
11:33 - is equal to 85
11:36 - it will not accept it is good idea if
11:38 - you are giving many words
11:40 - to combine with underscore as i said
11:44 - some underscore of underscore
11:47 - series u see it is very easy also to
11:51 - read
11:52 - sum of series is equal to this is a
11:54 - variable dynamically we are initializing
11:56 - with some value
11:58 - so just i am giving like this in case it
12:00 - is a class name or
12:02 - maybe a function name or maybe a
12:05 - object you can use it when wherever is
12:08 - required
12:09 - if i start this with any digit for
12:11 - example
12:12 - uh 12 grade i say see it is not
12:16 - accepting right so it should not
12:18 - uh start with a digit now i say grade 12
12:21 - 85 index students i don't want to take a
12:25 - very lengthy class
12:26 - so we will stop here we will continue
12:29 - this
12:30 - in the next part until then bye students
12:34 - thank you

Cleaned transcript:

my dear students in today's lesson we are going to learn about tokens of python here you can see 5 chocolates ok i give a statement 5 chocolates are here if you bifurcate into smaller units you can see a number which is at the starting 5 and then after the space you get a word called chocolates similarly r here also so this is a statement made up of small units called words are numbers similarly tokens are nothing but smallest individual unit in a program which interpreter can understand this is also called as a lexical unit most of the time when you give white space that ends the token python has following five types of tokens keywords identifiers we have already seen these two in my previous video still we will see little more elaborate then literals operators as well delhi meters we already know the keywords are the words which convey a special meaning to the language remember these words cannot be used for any other purpose in the program the current version which i install here that is 3.9.4 version it has 35 keywords if you go to previous version there may be little lesser than this for example 3.7 version has only 33 keywords whenever they upgrade the language there may be one or two keywords added now here are the keywords available in this version if you see this first three words and the rest of the words can you make any difference yes you are absolutely right first three keywords are starting with capital letters rest of all the keywords are with small letters in computer language we always call it as uppercase letters and lowercase letters you must know one thing that python language is case sensitive that means for python language you type a alphabet in capital letter and you type a same alphabet in small letter both are different for it you cannot indicate the same alphabet with opposite case so the keywords are also same you need to have the same spelling with the case whenever you are using it okay now let us know how do you know the keywords of your version you go to interactive mode and then just type this health open the bracket inside the double quote keywords and then close the bracket you will have one extra thing if you are having 3.9 version let me know whether you are checking it or not just message what difference you can make from this surely i will reply to it if you want to know a detail about a particular keyword instead of this keyword inside the bracket you can directly type the keyword which you want to know about let me show that to you open the python ideally now type help open the bracket and then open the double quote i say continue continue is a keyword here so now the details about the keyword continuous display to v i said there are 35 keywords right so all 35 keywords you can give like this but don't worry i am not telling you to do this and learn everything gradually when we start doing programming the keywords will automatically you will understand you don't need to do any exercise for this or you don't need to try to remember all the keyword in your memory now let us see identifiers i already told about this identifier it is nothing but a name given by the programmer to identify any part of the program but we cannot give any name as we like there are certain rules to follow let us check the rules first character of the identifier should be an alphabet the digits that is numbers can be the part of identifier except for the first character already it is been mentioned that it should start with alphabet right identifiers cannot be a keyword we have already seen that keywords cannot be used for any other purpose than mentioned in the programming language so keywords cannot be there as a name of the object or variable or class or whatever it is you cannot use any other character other than underscore only underscore is allowed to combine with alphabet or digit to create an identifier this underscore is always used to bifurcate two words in case you are giving two different words to name the part of a program then you can use this underscore so that easily you can read the name of the part we have already discussed that it is case sensitive so similarly even identifiers are case sensitive you need to remember whether you are given in upper case are lower case or mixed case whatever it is it should be as same as you have given previously if you want to reuse it can be arbitrarily long sequence of letters and digits hope you understood this very clearly now let us have a small exercise you just identify whether the identifiers given here are correct or wrong you can just take a paper and a pen or pencil you don't need to write whatever is appearing here just you put tick mark or wrong mark according whether it is valid or not valid one result to combine underscore follow while find hashtag val sum of series continue hyphen in q3 true lab underscore 3 stu percentage tot area of try hope you all marked whether it is true or false that is valid or not you just check now result is right two combine is wrong do you know the reason yes the 2 is in the beginning which is digit it is not allowed and then underscore follow yes this is right it can start with underscore but you need to understand one thing here any name starts with underscore will have a special mention for it that you will learn in future classes no need to worry but as of now it is correct while is correct see actually while in all small letter is a keyword here i have mentioned while with capital w so small w while and capital w while has the difference this can be a identifier but if you use small w instead of capital w here it cannot be a valid one and then find hashtag it is wrong because hashtag is the symbol which is not allowed sum of series is correct continue hyphen in is again wrong because of the symbol hyphen given it is not underscore so to know the difference i have given there and then q3 is correct you can combine the digit after the first letter so it is at last no problem and then true is wrong because true is a keyword capital t and ru e is a keyword which is not allowed to have a name of a part of program so lab underscores 3 is correct the 11th one is also wrong because of the percentage symbol and then area of try is also say right or wrong some of you might have indicated as right but it is wrong because the space is available after each word which is not allowed we have already seen the space ends the token right so if it is a token completely one name is a token so now if you give space then it will take as another word or token after it i will give you some tips to create identifiers if you are combining more than one word use underscore to separate the words always choose descriptive identifiers starting with lowercase in case you are using identifier for creating class then you can use uppercase it should not be too short or too long but should be the right size to be clear and concise avoid using identifiers that are homophones that means for example b two in digit and d see i mentioned here binary to decimal okay the other one b underscore t o underscore d both may be different but when you read are similar you can avoid giving these types of identifiers in case you are using abbreviations avoid using 0 and capital o similarly if you are giving l r uppercase of i or sometimes even 1 all these looks similar so please avoid this now i will take you to python window to experiment some identifiers i will dynamically initialize a variable for example x is equal to 10 i u it accepts now if i use like this if is equal to 20 see if is a keyword so it will not accept it will have only the special meaning in this language now i try to give with some symbol say total and then percentage symbol is equal to 85 it will not accept it is good idea if you are giving many words to combine with underscore as i said some underscore of underscore series u see it is very easy also to read sum of series is equal to this is a variable dynamically we are initializing with some value so just i am giving like this in case it is a class name or maybe a function name or maybe a object you can use it when wherever is required if i start this with any digit for example uh 12 grade i say see it is not accepting right so it should not uh start with a digit now i say grade 12 85 index students i don't want to take a very lengthy class so we will stop here we will continue this in the next part until then bye students thank you
