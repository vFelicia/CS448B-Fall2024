With timestamps:

00:00 - hello students in this video lesson we
00:04 - will learn what is object-oriented
00:07 - programming before seeing
00:09 - object-oriented programming let us learn
00:12 - what is computer program computer
00:15 - program is a set of instructions to
00:18 - complete a specific task for an example
00:21 - just let us have adding two numbers and
00:25 - take the output from the computer for
00:28 - this first computer needs a first number
00:32 - so we will ask the computer to take the
00:35 - input for the first number and then
00:38 - store it in a variable again we have to
00:41 - ask computer to take a second number and
00:44 - store it in a another variable then we
00:48 - will ask the computer to add these two
00:51 - numbers which are in the variables and
00:54 - then put the answer in the another
00:57 - variable and then at last we will ask
01:00 - the computer to display whatever is
01:02 - there in the third variable so here we
01:06 - get the answer so to do this task we
01:09 - need a number of instruction to be given
01:11 - to the computer so this is what a set of
01:15 - instruction given to the computer to
01:17 - complete a specific task program can be
01:22 - written in any computer programming
01:25 - language there are so many computer
01:27 - programming languages for example we can
01:30 - say C C++ Java Python COBOL Fortran and
01:35 - so many let us see how computer
01:39 - understands these language computer can
01:43 - understand only zeros and ones
01:47 - instruction written in this form is
01:49 - called binary our machine language so
01:52 - computer directly does not understand
01:54 - whatever we write in the high level
01:56 - languages it should be converted into
01:59 - zeros and ones so it is very difficult
02:02 - task to write the code in zeros and ones
02:06 - computer languages were introduced which
02:10 - are closed to human language for this
02:13 - purpose
02:13 - these languages are called high-level
02:17 - languages programs written in high-level
02:21 - languages
02:22 - get converted into machine language
02:24 - using translators so now we should know
02:29 - water translators translation of a codes
02:35 - programs written in high-level languages
02:38 - are translated using compiler or
02:41 - interpreter to machine language so what
02:44 - is this compiler compiler converts the
02:48 - code written in high-level language into
02:50 - machine code in one go that is at once
02:55 - it will convert all the course into
02:57 - machine language that is zeros and ones
02:59 - but the interpreter is there the
03:02 - interpreter converts statement by
03:05 - statement that is the difference between
03:08 - compiler interpreter so any language
03:11 - will have one of this course written in
03:15 - high-level languages are called source
03:18 - code so whatever we write a programmer
03:20 - writes those course are called source
03:23 - code the translated code which the
03:28 - computer can understand are called
03:30 - object code the person who creates a
03:36 - programming code is called programmer
03:39 - that everybody knows very well there are
03:42 - two types of languages that is
03:45 - categorized into two lower level
03:48 - language and high level language let us
03:51 - see what is lower level language machine
03:54 - language so that already we have seen
03:56 - machine directly understands the code
03:59 - written in this language machine
04:01 - language can be written using only zeros
04:04 - and ones assembly level languages uses
04:09 - symbolic course which is more
04:11 - understandable than machine language
04:14 - assembly level language is used for
04:17 - device drivers high level language when
04:22 - we speak about programmer we probably
04:25 - think about the people who
04:27 - programming high-level languages only no
04:30 - knowledge of hardware is needed to
04:33 - create a sities machine independent
04:36 - source code written in any high-level
04:39 - language must be compiled or interpreted
04:42 - into machine code in order to run so
04:45 - that we all be discussed as every
04:49 - language has general set of rules or
04:51 - grammar for example English is a
04:53 - language so there is a grammar for that
04:56 - some set of rules given same like that
04:58 - any language you take there will be some
05:01 - rules to be followed that computer also
05:03 - has a set of rules our structure this is
05:07 - called as syntax example for computer
05:11 - language basic C++ C Java Python Perl
05:17 - all this so now we know what is computer
05:21 - language but when we write a program
05:23 - there will be different type of
05:25 - approaches high level languages gives
05:30 - easy approach to programmer to create a
05:33 - program to any task there are many
05:37 - approaches in the programming we will
05:40 - discuss about only two that is procedure
05:44 - oriented programming and object oriented
05:48 - programming
05:50 - what is this procedure oriented
05:53 - programming the procedure oriented
05:55 - programming approach allows the
05:57 - programmer to apply the large using
06:00 - number of functions many instructions
06:05 - are written to carry out the task these
06:08 - instructions group to form functions
06:13 - functions take more importance than data
06:17 - items data items are applied globally
06:23 - which is to be used in all the functions
06:28 - to make any changes in the functions may
06:31 - need to reschedule the Associated data
06:35 - values this affects the normal
06:38 - sequencing of the programming logic
06:43 - object-oriented programming the
06:47 - object-oriented programming
06:48 - increased the programmers productivity
06:51 - and overcome shortcomings of traditional
06:55 - approach of programming object-oriented
07:00 - programming does not allow data to flow
07:03 - freely from one function to another so
07:08 - that means it will be more secured one
07:10 - problem is decomposed into a number of
07:14 - entities called objects each object
07:20 - includes a set of data items and related
07:23 - functions data values are applicable
07:26 - within the functions associated with
07:28 - that object let us see the difference
07:33 - between procedure oriented programming
07:36 - and object oriented programming
07:41 - procedural programming language
07:44 - functions are more important than data
07:47 - but here in object-oriented programming
07:50 - stress put on data data can flow freely
07:57 - throughout the programming procedural
07:58 - programming but here in object-oriented
08:02 - programming data is restricted to be in
08:05 - the specific area wherever it is needed
08:07 - so it will be more secure as I told
08:10 - before here the top-down approach
08:14 - happens but in object-oriented
08:17 - programming bottom-up approach in
08:20 - procedural programming language there is
08:23 - no access specifiers available so we
08:26 - will come to know about this access
08:28 - specifier in upcoming classes
08:30 - object-oriented programming has access
08:34 - specifier
08:34 - so that means which will tell whether
08:37 - you have access to that particular part
08:40 - of a program or not so there are some
08:42 - keywords for this but in crucial
08:44 - programming it is not there so
08:47 - procedural programming becomes very less
08:49 - secure object-oriented programming is
08:53 - more say
08:54 - pure were loading is not possible in
08:58 - procedural programming language here
09:01 - object-oriented programming overloading
09:04 - is possible you will also come to know
09:05 - what is overloading in upcoming classes
09:11 - examples for procedural programming see
09:15 - Visual Basic Fortran and R for
09:19 - object-oriented programming C++ Java
09:22 - Python and Exeter students I would like
09:26 - to tell you one thing when you learn any
09:28 - language in the beginning you have to
09:30 - follow the set of rules whatever is been
09:33 - told later you will come to know the
09:36 - definition for those things when you
09:38 - come to know the definition for those
09:40 - things it will be very easy to
09:42 - understand so in the beginning just
09:44 - follow the instructions given to you so
09:47 - after learning the language once again
09:49 - come back to the beginning and start
09:52 - revising so that now you will understand
09:56 - everything so clear students keep
09:59 - watching my video we will meet in the
10:01 - next video lesson where I will be
10:04 - describing you about basic concepts of
10:08 - object-oriented programming
10:10 - Thank You students

Cleaned transcript:

hello students in this video lesson we will learn what is objectoriented programming before seeing objectoriented programming let us learn what is computer program computer program is a set of instructions to complete a specific task for an example just let us have adding two numbers and take the output from the computer for this first computer needs a first number so we will ask the computer to take the input for the first number and then store it in a variable again we have to ask computer to take a second number and store it in a another variable then we will ask the computer to add these two numbers which are in the variables and then put the answer in the another variable and then at last we will ask the computer to display whatever is there in the third variable so here we get the answer so to do this task we need a number of instruction to be given to the computer so this is what a set of instruction given to the computer to complete a specific task program can be written in any computer programming language there are so many computer programming languages for example we can say C C++ Java Python COBOL Fortran and so many let us see how computer understands these language computer can understand only zeros and ones instruction written in this form is called binary our machine language so computer directly does not understand whatever we write in the high level languages it should be converted into zeros and ones so it is very difficult task to write the code in zeros and ones computer languages were introduced which are closed to human language for this purpose these languages are called highlevel languages programs written in highlevel languages get converted into machine language using translators so now we should know water translators translation of a codes programs written in highlevel languages are translated using compiler or interpreter to machine language so what is this compiler compiler converts the code written in highlevel language into machine code in one go that is at once it will convert all the course into machine language that is zeros and ones but the interpreter is there the interpreter converts statement by statement that is the difference between compiler interpreter so any language will have one of this course written in highlevel languages are called source code so whatever we write a programmer writes those course are called source code the translated code which the computer can understand are called object code the person who creates a programming code is called programmer that everybody knows very well there are two types of languages that is categorized into two lower level language and high level language let us see what is lower level language machine language so that already we have seen machine directly understands the code written in this language machine language can be written using only zeros and ones assembly level languages uses symbolic course which is more understandable than machine language assembly level language is used for device drivers high level language when we speak about programmer we probably think about the people who programming highlevel languages only no knowledge of hardware is needed to create a sities machine independent source code written in any highlevel language must be compiled or interpreted into machine code in order to run so that we all be discussed as every language has general set of rules or grammar for example English is a language so there is a grammar for that some set of rules given same like that any language you take there will be some rules to be followed that computer also has a set of rules our structure this is called as syntax example for computer language basic C++ C Java Python Perl all this so now we know what is computer language but when we write a program there will be different type of approaches high level languages gives easy approach to programmer to create a program to any task there are many approaches in the programming we will discuss about only two that is procedure oriented programming and object oriented programming what is this procedure oriented programming the procedure oriented programming approach allows the programmer to apply the large using number of functions many instructions are written to carry out the task these instructions group to form functions functions take more importance than data items data items are applied globally which is to be used in all the functions to make any changes in the functions may need to reschedule the Associated data values this affects the normal sequencing of the programming logic objectoriented programming the objectoriented programming increased the programmers productivity and overcome shortcomings of traditional approach of programming objectoriented programming does not allow data to flow freely from one function to another so that means it will be more secured one problem is decomposed into a number of entities called objects each object includes a set of data items and related functions data values are applicable within the functions associated with that object let us see the difference between procedure oriented programming and object oriented programming procedural programming language functions are more important than data but here in objectoriented programming stress put on data data can flow freely throughout the programming procedural programming but here in objectoriented programming data is restricted to be in the specific area wherever it is needed so it will be more secure as I told before here the topdown approach happens but in objectoriented programming bottomup approach in procedural programming language there is no access specifiers available so we will come to know about this access specifier in upcoming classes objectoriented programming has access specifier so that means which will tell whether you have access to that particular part of a program or not so there are some keywords for this but in crucial programming it is not there so procedural programming becomes very less secure objectoriented programming is more say pure were loading is not possible in procedural programming language here objectoriented programming overloading is possible you will also come to know what is overloading in upcoming classes examples for procedural programming see Visual Basic Fortran and R for objectoriented programming C++ Java Python and Exeter students I would like to tell you one thing when you learn any language in the beginning you have to follow the set of rules whatever is been told later you will come to know the definition for those things when you come to know the definition for those things it will be very easy to understand so in the beginning just follow the instructions given to you so after learning the language once again come back to the beginning and start revising so that now you will understand everything so clear students keep watching my video we will meet in the next video lesson where I will be describing you about basic concepts of objectoriented programming Thank You students
