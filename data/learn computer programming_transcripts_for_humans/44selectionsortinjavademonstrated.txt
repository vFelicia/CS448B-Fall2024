With timestamps:

00:00 - welcome back students in this video
00:04 - lesson we will learn selections art in
00:07 - our a in selections art technique
00:10 - sorting takes place by stepping through
00:13 - all the elements one by one either
00:16 - smallest our largest element and
00:18 - swapping it into right position on each
00:22 - pass this algorithm selects a that
00:25 - largest or smallest of the remaining
00:28 - unsorted element and places them in the
00:31 - right order
00:32 - for example consider this array let us
00:35 - imagine that it needs to get sorted in
00:38 - ascending order in this technique it
00:41 - will search for the least value of that
00:43 - array in the beginning and swap the
00:46 - value at first index in this example we
00:50 - have 11 as the least number at index
00:53 - number for so value at index number for
00:57 - and value at index number 0 will get
00:59 - swamped here you can see it is having
01:02 - two main steps one is searching for the
01:05 - element and the other one is swapping
01:07 - searching will happen in the inner loop
01:09 - and the swapping will happen in the
01:12 - outer loop if the length of the array is
01:15 - n and then n minus 1 iterations we
01:18 - required for swapping here the first
01:21 - element got shorter so again it will
01:25 - search for the least element in this
01:27 - part of the array here we get 14 as the
01:30 - least number so the value at index
01:33 - number 3 will get swapped with the value
01:35 - at index number 1 now the remaining
01:38 - array from 2 to the last element so here
01:43 - we can again see 21 is the least element
01:45 - so 21 gets swapped with value at index
01:49 - number 2 now the fourth iteration that
01:52 - is index number 3 and 4 gets swapped to
01:55 - arrange in the particular order after n
01:58 - minus 1 swapping other get shorter and I
02:01 - will explain elaborately working up
02:04 - selection shock let us have array like
02:06 - this I already told you swapping will be
02:10 - in the outer loop and the searching will
02:12 - be in the
02:13 - inner loop for outer loop we need n
02:15 - minus one iterations that we will write
02:18 - is equal to zero is lesser than a RR dot
02:22 - length minus one now to search the least
02:26 - value in the array we will consider the
02:30 - first one is the least one and then we
02:32 - will compare with the rest of the
02:33 - element so temporarily to consider the
02:37 - first element as least element I will
02:39 - have variable count MV that is minimum
02:43 - value and index for that I will take it
02:46 - as minimum index so that is the index
02:50 - which is having the minimum value now I
02:53 - will assign the value that is a rrf ie
02:56 - temper over lead to minimum value and
03:00 - the index is for my that is I here in
03:05 - this example I will be 0 that is EMI is
03:08 - 0
03:09 - ARR of I that is MV will become 15 now
03:13 - inner loop to search again we need n
03:16 - minus 1 iterations already we are having
03:20 - value of this first index as youngbae so
03:25 - we can compare with the next element
03:27 - that is j equal to i plus 1 so the
03:30 - starting index value will be 1 and the
03:33 - last index value will be 4 that is I
03:37 - will be 3 3 plus 1 4 so J will go from 1
03:41 - to 4 in this example let us start
03:45 - comparing the element to compare the
03:47 - elements we will use the condition that
03:51 - is a or rfj that is here 25 we will
03:57 - check whether it is lesser than younghui
03:59 - that is 15 if that is true then we will
04:04 - put a or R of this value into minimum
04:07 - value if it is not true then it will not
04:10 - put the value into MV same like that the
04:13 - index number of J also will put in
04:16 - m-mike so it will do until the last
04:19 - index here when the iterations get
04:22 - completed it would have searched for
04:24 - minimum value and
04:26 - index for that so it will come out of
04:29 - the loop let us know how it will do in
04:32 - this example so yeah RR of J that is I
04:36 - plus 1 0 plus 1 will become 1 it will
04:40 - have 25 as its value so this 25 and 15
04:45 - is compared 15 is lesser than 25 so it
04:50 - is this becomes false now J will become
04:56 - 2 15 and 18 both are compared again 15
05:02 - is lesser so it is false
05:04 - now when J is 3 the value at 3 will be
05:08 - 12 which is lesser than 15 so what
05:13 - happens here ARR FJ that is yaara 3
05:17 - value 12 will go and story MV and then
05:22 - the index of that value will go to my so
05:27 - J will go to ma that becomes 3 now at
05:31 - index number for 10 nice available so 12
05:37 - and 10 will get compared so according to
05:40 - here are our FJ that is 10 is lesser
05:44 - than yum V that is 12 when it is true it
05:51 - changes the value to yum V so young V
05:55 - becomes 10 in the Nehemiah becomes 4
05:58 - when the first pass get over we will
06:01 - have the minimum value of that array
06:05 - element now we can swap the elements
06:08 - having least value and the first element
06:12 - we already know how to swap the values
06:15 - so we will have one more variable called
06:18 - temporary where we will put the ice
06:21 - value so the 15 will go on store in
06:26 - temple now
06:27 - yeah RRR mi so that is 10 will go to the
06:32 - air RFI so then get store in first index
06:38 - now we will have already the value of
06:43 - the first index which was there in temp
06:47 - that will be stored to value at EMI so
06:52 - it becomes 15 so this is the first pass
06:56 - the least element has gone to the first
06:59 - index now is 1 so that value will go to
07:05 - MB that is 25 here now J will be I plus
07:11 - 1 that is 2 a 2 we have 18 18 is lesser
07:17 - than 25 that is true
07:19 - Soyoung we will become 18 and then M
07:22 - maybe comes to next ARR of 3 will be 12
07:27 - so 2 and is lesser than 18 this is true
07:32 - so young we will become 2 you may become
07:36 - index after all you will be 3 now J will
07:41 - be 4 at 4:15 is available 15 is not
07:45 - lesser than 12 so it is wrong so when J
07:49 - is equal to 5 it comes out of the loop
07:52 - value at index number 1 and value at
07:55 - index number Creek should get swapped so
08:00 - value at index number 1 will go to 10
08:03 - and then value at 3 will go to 1 that is
08:12 - 12 and value at M my that is value at 3
08:18 - will get stored the value of temple so
08:23 - at the end of the second pass these two
08:26 - index get arranged so at the beginning
08:29 - of pass 3 I will be 2 and then ARR fi
08:35 - will be 18 here J will be I plus 1 that
08:39 - is 2 plus 1 will be 3 at 325 is
08:44 - available 25 is not lesser than 18 so it
08:48 - is wrong
08:50 - now Jay will become four at four we have
08:53 - fifty and this 15 is lesser than
08:58 - eighteen it is true so what happens
09:01 - young we becomes 15 my becomes four when
09:06 - J is five it is false it comes out of
09:09 - the loop now it gets swept now I becomes
09:16 - three so young we will be 25 and it will
09:22 - get compared with J that is at four it
09:26 - is 18 it is true and then what happens
09:29 - MV becomes 18 ma becomes four so here
09:33 - are 5 it becomes false it comes out of
09:36 - the loop
09:37 - then we'll get swapped and then when I
09:44 - becomes 4 it is false so it will come
09:47 - out of this loop so by the time all the
09:51 - elements get sorted
09:53 - so after that we will print the sorted
09:56 - array now let us go to the program and
09:59 - just write the codes and execute I will
10:03 - create a class called selection sort
10:16 - class selection sort
10:20 - instead of taking input using Java
10:24 - Ottawa I will take as argument so I go
10:28 - public static all right ring off instead
10:34 - of main I will go salt I will take
10:40 - integer type array int arr let me create
10:48 - the variables in either int young v mi
10:54 - Ling pimp
10:56 - let me how I and J owns so now array
11:01 - comes as argument I will write the far
11:03 - far I is equal to 0 I is dresser them a
11:10 - are a dot length minus 1 I plus plus so
11:21 - I am V is equal to v RR half I then my
11:28 - is equal to I now let me have the next
11:34 - Farlow far J is equal to I plus 1 J is
11:42 - lesser than ya rabb dot length then J
11:48 - plus plus I check the condition if a are
11:57 - of lesser the minimum value then what
12:04 - happens minimum value becomes ARR of J
12:13 - and then minimum index becomes J so now
12:18 - I come out of fog loop I swept so
12:23 - temp is equal to PR R of I and then yeah
12:32 - rap of ie is equal to PR a half ml now
12:42 - ARR half mi is equal to tempo now
12:49 - swapping it over now we will come out of
12:52 - this outer for loop now we can print
12:55 - this out an array so for that we will
12:58 - give a message system dot out dot print
13:02 - line off sorted arrays so I need a for
13:12 - loop far is equal to 0 is lesser then a
13:19 - RR dot length I plus plus system dot out
13:29 - dot print off I will go ARR half I then
13:39 - plus some space here take notice so let
13:46 - me compile this no syntax error so now I
13:53 - will give the array inside the flower
13:55 - brackets now I will give 7 198 2365 12
14:12 - minus 34 so array length ultimately it
14:17 - will take how much ever we you okay so
14:23 - we can see here minus 34 1 7 12 only 365
14:27 - 98 so it is sorter actually the program
14:31 - is very simple in elaborated way I have
14:35 - explained you how it works
14:37 - now let us know the difference between
14:40 - bubbles art and selections are in
14:45 - bubbles at adjacent elements are swept
14:48 - but here largest are smallest so
14:53 - whichever order we required according to
14:55 - that elements are swept then bubbles are
14:59 - swapping happens in inner loop but in
15:03 - selections art we have seen that
15:04 - swapping happens in the outer loop so it
15:08 - is slower selection serratus faster
15:13 - comparing to the bubbles are bubbles art
15:17 - is not so efficient assertions art is
15:22 - more efficient than the bubbles art
15:24 - students I hope this was very helpful to
15:28 - you to learn selections art keep
15:34 - watching my videos thank you students

Cleaned transcript:

welcome back students in this video lesson we will learn selections art in our a in selections art technique sorting takes place by stepping through all the elements one by one either smallest our largest element and swapping it into right position on each pass this algorithm selects a that largest or smallest of the remaining unsorted element and places them in the right order for example consider this array let us imagine that it needs to get sorted in ascending order in this technique it will search for the least value of that array in the beginning and swap the value at first index in this example we have 11 as the least number at index number for so value at index number for and value at index number 0 will get swamped here you can see it is having two main steps one is searching for the element and the other one is swapping searching will happen in the inner loop and the swapping will happen in the outer loop if the length of the array is n and then n minus 1 iterations we required for swapping here the first element got shorter so again it will search for the least element in this part of the array here we get 14 as the least number so the value at index number 3 will get swapped with the value at index number 1 now the remaining array from 2 to the last element so here we can again see 21 is the least element so 21 gets swapped with value at index number 2 now the fourth iteration that is index number 3 and 4 gets swapped to arrange in the particular order after n minus 1 swapping other get shorter and I will explain elaborately working up selection shock let us have array like this I already told you swapping will be in the outer loop and the searching will be in the inner loop for outer loop we need n minus one iterations that we will write is equal to zero is lesser than a RR dot length minus one now to search the least value in the array we will consider the first one is the least one and then we will compare with the rest of the element so temporarily to consider the first element as least element I will have variable count MV that is minimum value and index for that I will take it as minimum index so that is the index which is having the minimum value now I will assign the value that is a rrf ie temper over lead to minimum value and the index is for my that is I here in this example I will be 0 that is EMI is 0 ARR of I that is MV will become 15 now inner loop to search again we need n minus 1 iterations already we are having value of this first index as youngbae so we can compare with the next element that is j equal to i plus 1 so the starting index value will be 1 and the last index value will be 4 that is I will be 3 3 plus 1 4 so J will go from 1 to 4 in this example let us start comparing the element to compare the elements we will use the condition that is a or rfj that is here 25 we will check whether it is lesser than younghui that is 15 if that is true then we will put a or R of this value into minimum value if it is not true then it will not put the value into MV same like that the index number of J also will put in mmike so it will do until the last index here when the iterations get completed it would have searched for minimum value and index for that so it will come out of the loop let us know how it will do in this example so yeah RR of J that is I plus 1 0 plus 1 will become 1 it will have 25 as its value so this 25 and 15 is compared 15 is lesser than 25 so it is this becomes false now J will become 2 15 and 18 both are compared again 15 is lesser so it is false now when J is 3 the value at 3 will be 12 which is lesser than 15 so what happens here ARR FJ that is yaara 3 value 12 will go and story MV and then the index of that value will go to my so J will go to ma that becomes 3 now at index number for 10 nice available so 12 and 10 will get compared so according to here are our FJ that is 10 is lesser than yum V that is 12 when it is true it changes the value to yum V so young V becomes 10 in the Nehemiah becomes 4 when the first pass get over we will have the minimum value of that array element now we can swap the elements having least value and the first element we already know how to swap the values so we will have one more variable called temporary where we will put the ice value so the 15 will go on store in temple now yeah RRR mi so that is 10 will go to the air RFI so then get store in first index now we will have already the value of the first index which was there in temp that will be stored to value at EMI so it becomes 15 so this is the first pass the least element has gone to the first index now is 1 so that value will go to MB that is 25 here now J will be I plus 1 that is 2 a 2 we have 18 18 is lesser than 25 that is true Soyoung we will become 18 and then M maybe comes to next ARR of 3 will be 12 so 2 and is lesser than 18 this is true so young we will become 2 you may become index after all you will be 3 now J will be 4 at 415 is available 15 is not lesser than 12 so it is wrong so when J is equal to 5 it comes out of the loop value at index number 1 and value at index number Creek should get swapped so value at index number 1 will go to 10 and then value at 3 will go to 1 that is 12 and value at M my that is value at 3 will get stored the value of temple so at the end of the second pass these two index get arranged so at the beginning of pass 3 I will be 2 and then ARR fi will be 18 here J will be I plus 1 that is 2 plus 1 will be 3 at 325 is available 25 is not lesser than 18 so it is wrong now Jay will become four at four we have fifty and this 15 is lesser than eighteen it is true so what happens young we becomes 15 my becomes four when J is five it is false it comes out of the loop now it gets swept now I becomes three so young we will be 25 and it will get compared with J that is at four it is 18 it is true and then what happens MV becomes 18 ma becomes four so here are 5 it becomes false it comes out of the loop then we'll get swapped and then when I becomes 4 it is false so it will come out of this loop so by the time all the elements get sorted so after that we will print the sorted array now let us go to the program and just write the codes and execute I will create a class called selection sort class selection sort instead of taking input using Java Ottawa I will take as argument so I go public static all right ring off instead of main I will go salt I will take integer type array int arr let me create the variables in either int young v mi Ling pimp let me how I and J owns so now array comes as argument I will write the far far I is equal to 0 I is dresser them a are a dot length minus 1 I plus plus so I am V is equal to v RR half I then my is equal to I now let me have the next Farlow far J is equal to I plus 1 J is lesser than ya rabb dot length then J plus plus I check the condition if a are of lesser the minimum value then what happens minimum value becomes ARR of J and then minimum index becomes J so now I come out of fog loop I swept so temp is equal to PR R of I and then yeah rap of ie is equal to PR a half ml now ARR half mi is equal to tempo now swapping it over now we will come out of this outer for loop now we can print this out an array so for that we will give a message system dot out dot print line off sorted arrays so I need a for loop far is equal to 0 is lesser then a RR dot length I plus plus system dot out dot print off I will go ARR half I then plus some space here take notice so let me compile this no syntax error so now I will give the array inside the flower brackets now I will give 7 198 2365 12 minus 34 so array length ultimately it will take how much ever we you okay so we can see here minus 34 1 7 12 only 365 98 so it is sorter actually the program is very simple in elaborated way I have explained you how it works now let us know the difference between bubbles art and selections are in bubbles at adjacent elements are swept but here largest are smallest so whichever order we required according to that elements are swept then bubbles are swapping happens in inner loop but in selections art we have seen that swapping happens in the outer loop so it is slower selection serratus faster comparing to the bubbles are bubbles art is not so efficient assertions art is more efficient than the bubbles art students I hope this was very helpful to you to learn selections art keep watching my videos thank you students
