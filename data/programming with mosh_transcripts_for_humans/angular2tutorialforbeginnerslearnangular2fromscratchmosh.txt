With timestamps:

00:03 - hi my name is Muhammad Ali and I'm going
00:06 - to be instructor in this course let me
00:08 - quickly explain in three minutes what
00:11 - angular is what you can do with it and
00:13 - what you're going to learn in this
00:14 - course angular is a leading framework
00:17 - for building JavaScript heavy
00:19 - applications and often is used in
00:21 - building single page apps or spas what
00:24 - is a single page app well in a standard
00:27 - web application when we click on a link
00:29 - the entire page is reloaded in a single
00:31 - page app instead of reloading the entire
00:33 - page replace the view that is in the
00:36 - content area with another view you also
00:38 - keep track of history so if the user
00:40 - navigates using back and forward buttons
00:42 - we restore the application in the right
00:44 - State as you might guess these
00:46 - applications provide a very fast and
00:48 - fluid experience Gmail is a very good
00:51 - example of a single page application so
00:54 - anytime you want to build an application
00:55 - that has a lot of JavaScript like single
00:58 - page applications done necessarily you
01:00 - may want to look at angular to build
01:02 - this application in a modular
01:04 - maintainable and testable way sure
01:07 - there's lots of other frameworks out
01:08 - there that have the same promises so why
01:11 - angular well angular is one of the
01:13 - leading frameworks in this space it's
01:15 - been around for quite a few years it's
01:18 - just been rewritten with the best
01:19 - practices for the future it has a huge
01:21 - community support it's backed by Google
01:23 - it's not going away anytime soon and as
01:27 - google trends shows the demand for
01:29 - angular developers is increasing
01:31 - constantly so in this course I'll be
01:34 - teaching you angular 2 from scratch in a
01:36 - step-by-step fashion whether you are
01:38 - familiar with angular 1 we're not
01:39 - doesn't really matter because angular 2
01:41 - is an entirely new framework and by the
01:44 - way we'll be using typescript why not
01:46 - JavaScript
01:47 - well typescript is a superset of
01:50 - JavaScript any valid JavaScript code is
01:53 - valid typescript which means you don't
01:56 - have to learn a new programming language
01:58 - types great bring some useful features
02:00 - that are missing in the current version
02:02 - of JavaScript supported by most browsers
02:04 - we get modules classes interfaces access
02:09 - modifiers like public private
02:11 - intelligence and compile time checking
02:14 - so we can catch a lot of programming
02:16 - errors during compile time if you have
02:18 - never worked with typescript I can
02:20 - guarantee you're going to absolutely
02:21 - love it
02:22 - okay now you probably want to say Marsh
02:24 - tell me what I'll be able to do by the
02:27 - end of watching this course well it's
02:29 - easier to show you by the end of
02:34 - watching this course you're going to
02:36 - build a real-world application like this
02:38 - so we have a list of users coming from a
02:41 - RESTful API with crud operations we can
02:44 - add a new user here we have a form with
02:47 - custom validation and dirty tracking so
02:50 - if I fill out one or two fields and
02:52 - accidentally try to navigate away the
02:54 - application will warn me we also have a
02:58 - list of posts we have pagination which
03:01 - is done on the client and filtering
03:04 - which is done on the server
03:06 - you also have master detail so as we
03:10 - click on a post we can see it's details
03:12 - loaded dynamically from the server these
03:17 - are the patterns that you see in a lot
03:19 - of real-world applications and in this
03:21 - course you're going to learn how to
03:22 - implement these patterns with angular 2
03:30 - you
03:32 - in the nutshell we have four key players
03:34 - in an angular 2 app components
03:37 - directives routers and services let's
03:41 - take a look at each of these building
03:43 - blocks in more detail at the very core
03:46 - we have components a component
03:48 - encapsulate the template data and the
03:52 - behavior of a view so it's more accurate
03:55 - to call it a view component every
03:57 - angular 2 app has at least one component
04:00 - which we call the route component but in
04:03 - the real world an application often
04:05 - consists of tens or hundreds of
04:07 - components for example imagine we want
04:11 - to build an application like udemy we
04:14 - can divide this page into three
04:16 - components navigation bar sidebar and
04:19 - courses so each component has the
04:22 - template or HTML markup for the view as
04:25 - well as data and logic behind that view
04:29 - components can also contain other
04:31 - components so in the list of courses we
04:35 - can have multiple course components and
04:37 - in each course component we can have
04:40 - another component for rating that course
04:43 - the benefit of this architectural style
04:45 - is that it will help us break up a large
04:48 - application with various complex views
04:50 - into smaller more manageable components
04:53 - or as I said view components plus we can
04:58 - reuse these components in different
05:00 - parts of an application or even in a
05:02 - different application for example we can
05:05 - reuse this rating component here in a
05:07 - totally different application now you
05:10 - might be saying look much I understand
05:12 - what you're saying about components but
05:14 - what are these components really like in
05:16 - the code a component is nothing but a
05:19 - plain typescript class so just like
05:22 - classes in other programming languages
05:24 - it can have properties and methods these
05:28 - properties hold the data for the view
05:30 - and the methods implement the behavior
05:33 - of the view like what should happen when
05:35 - we click a button now if you have never
05:38 - worked with angular before one thing
05:40 - that may be new to you is that these
05:42 - components are completely decoupled from
05:44 - the document object model
05:46 - or dumb in applications written with
05:49 - plain JavaScript or jQuery we get a
05:51 - reference to a Dom element in order to
05:53 - modify it or handle its events in
05:56 - angular we don't do that instead we use
05:59 - binding so in the view we bind to the
06:02 - properties and methods of our component
06:05 - if there is a change in the value of a
06:07 - property the Dom element bound to this
06:10 - property will refresh automatically so
06:13 - we can't and shouldn't get a reference
06:15 - to that Dom element in order to update
06:17 - it similarly to handle an event raised
06:21 - from a Dom element like click we bind
06:23 - that event to a method in our component
06:26 - when the user clicks that element the
06:28 - corresponding method in our component
06:30 - will be called now in case you're
06:33 - curious why these components are
06:34 - decoupled from the Dom the reason is
06:37 - that this makes our components unit
06:39 - testable if you have a plain class that
06:42 - is nothing but a bunch of properties and
06:44 - methods we can easily unit test it
06:45 - without having a document object model
06:48 - now sometimes our components need to
06:51 - talk to back-end API s to get or save
06:53 - data to have good separation of concerns
06:56 - in our applications we delegate any
06:59 - logic that is not related to view to a
07:02 - service so a service is just a plain
07:05 - class that encapsulate any non user
07:08 - interface logic like making HTTP calls
07:10 - logging business rules and so on we have
07:15 - another key player in angular apps and
07:17 - that's a router which is purely
07:19 - responsible for navigation so as the
07:22 - user navigates from one page to another
07:24 - it will figure out based on changes in
07:27 - URL what component to present to the
07:29 - user you will learn more about this in
07:31 - the section titled building single page
07:34 - apps and the last key player in angular
07:37 - is a directive similar to components we
07:40 - use directives to work with the Dom but
07:43 - a directive unlike a component doesn't
07:46 - have the template or HTML markup review
07:48 - we often use them to add behavior to
07:51 - existing Dom elements for example we can
07:55 - use a directive
07:56 - make it text box automatically grow when
07:59 - it receives focus angular has a bunch of
08:02 - built in directives for common tasks
08:05 - like adding or removing Dom elements
08:07 - adding classes or styles to them
08:09 - repeating them but we can also create
08:12 - our own custom directives so this is the
08:15 - big picture
08:16 - as you go through this course you will
08:18 - see each of these building blocks in
08:20 - action
08:22 - you
08:24 - okay let's jump in and set up our
08:26 - development environment first in case
08:29 - you don't have node on your machine
08:30 - download it from node.js org and install
08:33 - it on your machine it's pretty easy and
08:36 - straightforward to install we'd note we
08:39 - get a tool called
08:39 - NPM or node package manager which we use
08:42 - for managing dependencies of our
08:44 - application so once you install node
08:46 - open up command prompt on windows or
08:49 - terminal on Mac and type NPM install - J
08:55 - typescript if you're a Mac user you need
08:59 - to put sudo in the front with this we
09:02 - install typescript globally on our
09:04 - machine the next thing you need is a
09:06 - code editor that supports typescript in
09:08 - this course I'll be using vs code which
09:11 - is a beautiful lightweight and
09:13 - cross-platform editor from Microsoft you
09:16 - can use sublime Adam IntelliJ Visual
09:19 - Studio and any other editors that
09:21 - support typescript and finally I'll be
09:25 - using Chrome as my browser you can use
09:27 - any browsers but I would highly
09:29 - recommend to use Chrome because we'll be
09:30 - working with Chrome developer tools
09:32 - throughout the course and I want to make
09:34 - sure you have the exact same experience
09:35 - as me during the videos
09:40 - the proper way to create an angular app
09:43 - is to use angular command-line interface
09:46 - or CLI but this tool is not ready yet
09:49 - so for the time being I've created a
09:52 - seed project that I've put together
09:53 - based on the guidelines on angular
09:56 - website we'll be using this seed project
09:58 - throughout the course so download the
10:01 - attached zip file and put it somewhere
10:02 - on your machine now let me show you what
10:05 - you will find inside this zip file so
10:07 - this is vs code editor that I'll be
10:10 - using throughout the course look inside
10:13 - this folder you will find a few
10:15 - configuration files an index dot HTML
10:17 - and an app folder which is the container
10:20 - for our application inside this app
10:23 - folder we got a couple of typescript
10:26 - files one is boot which is the main or
10:29 - starting module of our application and
10:31 - the other is app that component the TS
10:34 - which is the root component of our
10:37 - application we look at these files in
10:40 - more details in the next section this TS
10:44 - config that JSON is the configuration
10:47 - file for typescript compiler so it uses
10:50 - this configuration to determine how to
10:52 - compile or more accurately transpile our
10:55 - typescript files into javascript for
10:58 - example you can see that the target
11:00 - javascript is es5 which is the current
11:04 - version of javascript if you want to
11:06 - understand any of these settings in more
11:07 - detail it's best to look at TS config
11:10 - documentation and github
11:12 - typings like json is another
11:14 - configuration file for typescript when
11:17 - using external javascript libraries in
11:19 - time script we need to import what we
11:22 - call a typescript definition file this
11:25 - type definition file gives us static
11:28 - type checking and intellisense for that
11:30 - javascript library and this is where we
11:33 - reference that typescript definition
11:35 - file you'll learn more about this later
11:37 - in the course
11:38 - now this package that JSON is a standard
11:42 - node package configuration so here you
11:45 - see the name of our application and it's
11:47 - version under scripts we got a few
11:51 - some note commands which we'll look at
11:53 - shortly then we got the dependences for
11:56 - our application so we can see we've got
11:58 - dependency to angular to system J s and
12:01 - so on I'm going to move on because I
12:04 - would order to fast-track to running our
12:06 - first angular app but if you're the kind
12:08 - of developer who prefers to understand
12:10 - the details first I've attached a PDF
12:13 - with the details of these dependencies
12:15 - okay now we need to install these
12:17 - dependencies so open up command prompt
12:21 - on Windows or terminal on Mac and go to
12:23 - the folder where you extracted this zip
12:26 - file and then run NPM install NPM we'll
12:35 - look at our package that JSON file and
12:37 - download our dependencies from NPM
12:40 - registry just be aware that this is
12:42 - going to take several minutes for the
12:44 - first time so be patient
12:48 - once these dependencies are installed
12:50 - you will see a new folder here called
12:52 - node modules so all our dependencies and
12:55 - their dependencies will be stored here
12:58 - now let's have one more look at package
13:01 - that JSON look under the script section
13:05 - here we have a few custom node commands
13:08 - the one we'll be using a lot is start
13:12 - which is the shortcut for concurrently
13:15 - running two commands running typescript
13:18 - compiler in the watch mode and starting
13:21 - our Lite web server with typescript
13:24 - compiler running in the watch mode we
13:26 - can modify and save a typescript file
13:28 - and then the typescript compiler will
13:31 - automatically generate a JavaScript and
13:33 - JavaScript map file in the same folder
13:35 - this javascript file is eventually the
13:38 - one that will be loaded in the browser
13:39 - but we never have to view or modify it
13:42 - we code purely in typescript
13:46 - so back in the terminal type NPM start
13:51 - so now our typescript compiler is
13:54 - running in the watch mode and our Lite
13:56 - web server is started this also launches
13:59 - our default browser which on my machine
14:01 - is Safari so I have to manually open up
14:04 - Chrome and navigate to localhost port
14:08 - 3000 and this is our first angular app
14:11 - up and running
14:15 - okay now let me show you something look
14:19 - at this app folder next to each type
14:22 - script file we have two files that are
14:24 - generated by typescript compiler one is
14:27 - a JavaScript file and the other is a
14:30 - JavaScript map file which is used during
14:32 - debugging so if something goes wrong and
14:35 - we try to debug in the browser this map
14:38 - file will take us to the corresponding
14:40 - line in your type script file now let's
14:43 - open up this app component the TS and
14:46 - make a small change so i'm going to
14:50 - explain this very briefly but in the
14:52 - next section we'll have a closer look at
14:53 - this scene text and you will create a
14:55 - component from scratch so you will know
14:57 - exactly how everything works so
15:00 - basically our root component is nothing
15:02 - but a plain type script class it's just
15:05 - decorated with this component decorator
15:08 - this decorator or annotation add
15:11 - metadata about this class so all the
15:14 - building blocks of angular 2 apps that I
15:16 - talked about are essentially playing
15:18 - type script classes that are decorated
15:20 - with some decorator so here in the
15:24 - template we have a heading let's change
15:27 - this to hello angular now before saving
15:33 - the changes let me bring up my terminal
15:35 - here notice that when I save changes
15:38 - because typescript compiler is running
15:41 - in the watch mode it will detect that
15:43 - this file has changed and it will
15:45 - regenerate the corresponding JavaScript
15:47 - and JavaScript map files then I'm going
15:49 - to switch back to Chrome and you will
15:51 - see that it will get refreshed
15:52 - automatically so we don't have to press
15:55 - f5 to refresh the page every time our
15:57 - application code changes this is browser
16:00 - sync which is a node module that are
16:03 - Lite web server uses okay now I'm going
16:06 - to go ahead and save the file look at
16:10 - the terminal typescript compiler we
16:13 - generated our JavaScript file now let's
16:16 - switch over to Chrome
16:19 - so Chrome automatically refreshed so
16:22 - this is going to be our development
16:23 - experience throughout this course we
16:26 - write typescript code and typescript
16:28 - compiler automatically generates
16:30 - JavaScript files for us it's simple and
16:32 - easy but if you want to build a
16:34 - production application you may want to
16:36 - include typescript compile a ssin as
16:38 - part of your build process so if you're
16:41 - using a build automation tool like gulp
16:43 - or grunt typescript compiler ssin would
16:46 - be another step in your build process
16:48 - that's beyond the scope of this course
16:50 - or at least we shouldn't worry about
16:52 - this complex that is at this point and
16:54 - just focus on building angular 2 apps
16:57 - just be aware that with this workflow
17:00 - sometimes it may take a couple of
17:02 - seconds until typescript compiler
17:04 - detects your changes also I've noticed
17:08 - that this Lite web server has a bug and
17:10 - sometimes it terminates unexpectedly so
17:14 - if you're not seeing your changes have a
17:16 - look at the terminal and see if flight
17:18 - server has terminated if so just
17:21 - terminate the session with ctrl + C and
17:23 - then run NPM start again
17:29 - ok let me quickly give you a heads up
17:32 - about what you're going to see over the
17:34 - upcoming sections in the next section
17:36 - titled angular to jump start we're going
17:39 - to create a component a service and a
17:42 - directive from scratch so by the end of
17:44 - the next section you will have an idea
17:46 - of what it is like to build an angular 2
17:48 - app you will see the big picture in the
17:50 - code from that point in every section
17:53 - we'll explore one concept at a time
17:55 - you'll learn about property and event
17:58 - binding building reusable components
18:01 - controlling rendering of HTML building
18:04 - forms using reactive extensions and
18:07 - observables calling back-end services
18:10 - building single page apps and finally
18:12 - over the last two sections you'll put
18:14 - everything together and build a
18:16 - real-world application just to let you
18:18 - know in this course I'm not going to
18:20 - touch on angular 1 and how it's
18:22 - different from angular 2 and there is a
18:23 - reason for that not every student taking
18:26 - this course is familiar with angular 1
18:28 - so I don't want to distract this group
18:30 - of people with the old way of doing
18:32 - things which
18:33 - has no place in the future if you have
18:35 - an application written in angular one
18:37 - your best source for upgrading that is
18:40 - angular website they have fully
18:42 - documented the process and various
18:44 - strategies you can run angular one and
18:46 - two side by side and upgrade one module
18:49 - at a time with all that let's get
18:51 - started for the next section well hello
18:55 - my name is marsh
18:56 - thanks for watching my youtube channel
18:57 - this video you've been watching so far
18:59 - is actually part of my angular course on
19:02 - udemy if you're interested to have the
19:04 - complete six-and-a-half hour course you
19:07 - can get it with a discount using the
19:09 - link in the video description and if not
19:11 - that's perfectly fine continue watching
19:13 - as the second section is coming up I
19:15 - hope you enjoy and have a great day
19:22 - so in the introductory section you
19:25 - learned about the core building blocks
19:26 - of angular 2 apps components directives
19:30 - services and routers in this section
19:33 - we'll implement a component a directive
19:35 - and a service from scratch so by the end
19:37 - of this section you'll have an idea of
19:39 - what it is like to build an angular 2
19:41 - app will look at routers later in the
19:44 - section called building single page
19:46 - applications so let's get started
19:50 - all right so I've got the project open
19:52 - envious code I also got the terminal
19:56 - writing here so our lightweight web
19:58 - server is in the background
20:00 - plus our typescript compiler is in the
20:03 - watch mode it's looking for changes and
20:04 - when it observes a change in a file it
20:08 - will transpile it into JavaScript and
20:10 - then the browser sync will kick in and
20:13 - automatically refresh the browser you're
20:16 - going to see this in a second so back to
20:19 - vs code in angular 2 each of the
20:23 - building blocks I talked about like
20:24 - components directives and routers are
20:26 - plane type script classes and that's one
20:30 - thing that I love about angular 2 the
20:32 - API is much simpler and cleaner so I'm
20:35 - going to start by creating a class so
20:38 - right-click app new file I'm going to
20:44 - call it courses dot component dot TS
20:48 - note the naming convention so we start
20:51 - with the name of the component like
20:52 - courses then dot component then TS
21:01 - okay so to create a class we start by
21:04 - export class courses component what is
21:11 - this export here in typescript each file
21:14 - is considered a module in each module we
21:18 - often export one or more things like a
21:20 - class a function or a variable in this
21:23 - case I'm exporting course this component
21:25 - class so it will be available to other
21:28 - modules in my application later when I
21:30 - need this class I can import it as you
21:33 - will see shortly alright so we have a
21:36 - class now how does angular know that
21:38 - this class is going to be a component it
21:41 - looks for specific attributes or
21:43 - metadata on your classes for example to
21:47 - make this a component we need to apply
21:49 - the component decorator to this class a
21:52 - decorator in typescript is like an
21:54 - attribute in c-sharp or an annotation in
21:57 - java many other languages have similar
21:59 - concepts so first I need to import the
22:02 - component decorator from the core
22:05 - angular module import curly braces
22:11 - component from here is a string that
22:15 - specifies the name of the module angular
22:18 - 2 slash core so in angular 2 slash core
22:23 - module we have a decorator called
22:25 - component and here I'm importing it so
22:29 - if you look at the source code for that
22:30 - module you will see that they have
22:32 - exported this component there so we can
22:35 - import it here that's the idea now these
22:38 - decorators are functions so we need to
22:40 - call them at sign
22:44 - component all decorators need to be
22:47 - prefixed with an ADD sign I know this is
22:50 - a function we just call it like this
22:52 - look at the intellisense it's telling me
22:56 - that this function takes an object so
22:59 - here's my object and you can see the
23:01 - list of attributes that we can add in
23:03 - this object in this video we're going to
23:06 - look at two basic attributes one is
23:10 - selector which is a string as you can
23:14 - see in the intellisense
23:16 - I'm going to call it courses so this
23:20 - selector field here specifies a CSS
23:23 - selector for a host HTML element when
23:27 - angular sees an element that matches
23:28 - this CSS selector it will create an
23:31 - instance of our component in the host
23:33 - element so here I'm assuming the host
23:36 - element is an element with the tag
23:38 - courses the next attribute is template
23:43 - and this template specifies the HTML
23:48 - that will be inserted into the Dom when
23:50 - the components view is rendered we can
23:53 - either write the template here inline or
23:55 - put it in a separate file I'll get to
23:57 - that later in this section about
23:59 - components so let's just display
24:01 - something very simple courses so that's
24:07 - all we have built our first component as
24:09 - easy as that
24:14 - now we need to add this courses element
24:17 - here somewhere so first save this file
24:20 - and then go to app that component es if
24:25 - you're using vs code or sublime text you
24:29 - can press ctrl P on Windows or command +
24:31 - P on Mac and here you can type the name
24:34 - of the file in your project so app
24:37 - component dot TS if you're using a
24:43 - different editor and you don't have this
24:44 - shortcut just go to the app folder and
24:47 - you will see app dot component the TS
24:49 - there alright look at this component it
24:55 - looks familiar doesn't it so first we
24:57 - are importing the component decorator
24:59 - from angular here we're calling it so
25:03 - it's a function that takes an object and
25:06 - this object we have two fields selector
25:09 - and a template just like our other
25:11 - component and finally we've got export
25:14 - class app component so this app
25:17 - component is the root of your
25:19 - application it's a view component that
25:21 - takes control of the entire app or the
25:23 - entire page and here's a template for
25:27 - this view component I'm going to change
25:30 - this and add courses element here now if
25:36 - I run the application now you're not
25:38 - going to see the courses component why
25:41 - because angular sees this course is
25:43 - tagged but it doesn't know which
25:45 - component is responsible for that even
25:48 - though we defined a component in our
25:50 - application nowhere we have referenced
25:52 - it so angular does not scan all your
25:55 - files to discover your components it
25:56 - will only recognize the components that
25:59 - you have explicitly referenced so here
26:02 - we need to add a reference to course
26:04 - this component so it can be discovered
26:06 - by angular so we supply a new field here
26:11 - called directives which is an array
26:16 - inside this array we specify any
26:19 - directives or components we have used
26:21 - inside the template for this component
26:24 - just to refresh your memory we use
26:26 - directives to extend or control document
26:29 - object model we can define custom
26:32 - attributes or custom elements that are
26:34 - not part of standard HTML in this case
26:37 - we used our courses component to define
26:40 - a new element so every component is
26:43 - technically a directive the difference
26:45 - is that a component has a template and a
26:47 - directive dozen so back to app we need
26:52 - to reference our component here courses
26:56 - component
26:58 - the read online cannot find name courses
27:03 - component and that's what I love about
27:05 - typescript compile time checking so we
27:10 - need to import this courses component
27:13 - import curly-braces
27:17 - courses component from what is the name
27:21 - of our module for the custom modules
27:24 - that we define we need to specify their
27:26 - path in the file system so this file app
27:29 - that component the TS is in the folder
27:32 - app look app folder and here's app that
27:38 - component TS and here is our courses
27:40 - component so they're both in the same
27:42 - folder so back in app that component of
27:48 - TS here i type dot slash which means
27:53 - start searching from the current folder
27:55 - and then the name of the module so
27:58 - courses dot component without TS
28:02 - extension save now let's look at our
28:07 - terminal
28:10 - ok typescript compiler detected a change
28:13 - so it transpiled our TS files into
28:16 - javascript files and now if you go to
28:18 - Chrome look our courses component is
28:22 - successfully rendered on the page let's
28:25 - inspect the elements
28:29 - so in the HTML we have this my - app
28:33 - element which is the host element for
28:36 - our app component let's have another
28:39 - look at our app component look the
28:42 - selector is my - app so when angular
28:46 - sees my - app is going to put this
28:48 - template there and h1 with the courses
28:52 - element so I can chrome inside my - app
28:57 - you see h1 and courses and courses is
29:01 - the host element for our courses
29:03 - component and inside that you see h2 but
29:06 - where is this root my - app defined it
29:09 - in our HTML so I can vs code open the
29:15 - project folder collapse app open
29:19 - index.html scroll down in the body we
29:28 - have referenced my - app so angular saw
29:33 - this and it rendered app component
29:38 - as I explained a component encapsulate
29:42 - the data and the logic behind the view
29:44 - so we can define properties here in our
29:46 - component and display them in the
29:48 - template let's define a simple string
29:51 - property called title so title colon
29:57 - string and let's initialize it here
30:05 - so you see in typescript unlike
30:07 - JavaScript we can set the type of our
30:10 - variables now in this particular example
30:12 - we don't necessarily have to set the
30:14 - type because it can be inferred from the
30:17 - value assigned to the type so I can
30:19 - remove call and string directly
30:22 - initialize it and now if I hover my
30:25 - mouse over title
30:28 - the intellisense shows that this
30:30 - property is a string okay now let's
30:34 - change the template and display the
30:36 - title first I'm going to change this
30:40 - single quote to back tick which will
30:43 - allow me to break up this template into
30:46 - multiple lines the backtick character is
30:48 - on the top left of your keyboard just
30:51 - before the number one there you go and
30:54 - change the other one now I'll break it
30:59 - up and to render the title we use double
31:04 - curly braces this is called
31:08 - interpolation now if the value of this
31:12 - property in the component changes the
31:14 - view will be automatically refreshed
31:16 - angular will take care of that so we
31:19 - don't have to do anything special and
31:20 - this is called one-way binding we also
31:24 - have two-way binding which is used in
31:26 - forms for example when you type
31:28 - something into an input field that is
31:30 - bound to a property as you modify the
31:33 - value of the input field the property
31:35 - will be updated automatically you will
31:37 - see that later in the course
31:39 - so save back to Chrome it takes a couple
31:44 - of seconds until typescript compiler
31:46 - detects the changes regenerates the
31:49 - files and look browser sync updated the
31:51 - page automatically and here's the title
31:55 - now let's take this example to the next
31:58 - level I want to display a list of
32:00 - courses so first I would declare a
32:03 - property in the component courses and
32:08 - initialize it to a string array first
32:12 - one or two and three and then interview
32:19 - I'm going to use a ul and a bunch of lis
32:23 - to render the courses like this now I
32:33 - want these li is to be repeated for each
32:36 - course so we can use a special attribute
32:38 - here called ng for and note the asterisk
32:44 - this is part of the syntax and later I
32:46 - will explain why we set this to an
32:50 - expression something similar to the
32:54 - expressions we write in for each loops
32:56 - hash course of courses what does this
33:02 - mean
33:02 - courses is the object we are iterating
33:06 - which is in this case the property in
33:08 - our component of is just a keyword and
33:11 - hash course is a way to declare a local
33:15 - variable in our template so similar to
33:18 - forage loops this is our local variable
33:20 - that in every iteration it will hold one
33:23 - course at a time now between Li tags
33:28 - again we can use double curly braces or
33:31 - interpolation to display this course
33:34 - variable here save back to Chrome
33:40 - there you go so you see templates in
33:44 - angular look like HTML most of the time
33:47 - but sometimes we use special attribute
33:50 - like ng for here which is an example of
33:55 - a directive so this directive extends
33:58 - the HTML and adds extra behavior in this
34:00 - case it will repeat the Li element based
34:03 - on the expression assigned to it
34:09 - at this point our component is rendering
34:12 - a hard-coded list of courses but in a
34:15 - real-world application we often get the
34:17 - data from the server as I explained
34:20 - before this component should not include
34:22 - any logic other than the via logic so
34:26 - I'm not going to write the code to call
34:27 - the server and get the list of courses
34:29 - any logic that is not about this view
34:31 - should be encapsulated in a separate
34:34 - class which we call a service so let's
34:37 - create a service that this component
34:39 - will use to get the courses from the
34:41 - server so in the app folder right click
34:48 - you know file course dot service dot t--
34:53 - s note the naming convention we start
34:57 - with the name of the service in this
34:58 - case course then dot service as a suffix
35:01 - and then duct es a service is just a
35:07 - plain class nothing more
35:08 - so export glass course service I'm going
35:16 - to define a method here get courses I
35:22 - can explicitly set the return type here
35:26 - like string array but now the compiler
35:31 - is complaining because a function whose
35:35 - declare type is neither void or any must
35:38 - return a value or consists of a single
35:40 - throw statement basically the compiler
35:43 - is complaining because the return type
35:45 - is a string array but we have not
35:47 - returned anything so I'm going to go
35:50 - back to our component control P on
35:53 - Windows or command P on Mac courses that
35:58 - component the TS I'm going to get this
36:02 - array of courses cut and
36:08 - servus paste it here and return it for
36:15 - now we don't want to get distracted by
36:17 - details of consuming a restful api so
36:20 - let's just imagine this service will
36:22 - actually call the server to get the data
36:24 - for simplicity for now we just return an
36:26 - array all I want you to pay attention to
36:29 - is that the component is not going to
36:31 - have any code to get the data from the
36:33 - server it will simply delegate to this
36:36 - service as you will see soon
36:39 - so we created this service now we need
36:42 - to use it in our component so course
36:47 - that component of TS first way to import
36:51 - the service so I on the top import
36:56 - course service from dot slash which
37:02 - means straight from the current
37:03 - directory course dot service that's it
37:07 - no dot TS here now that we have imported
37:11 - the symbol we need a reference to the
37:13 - service one way to do it is to create it
37:16 - in the constructor of courses component
37:19 - so I can create a constructor here
37:23 - constructor a new up course service like
37:32 - this but this would cause tight coupling
37:36 - between courses component and course
37:38 - service and this will lead to two big
37:41 - issues the first issue is that let's say
37:44 - in the future we create a custom
37:46 - constructor for our service that takes
37:48 - one or two parameters then we would have
37:51 - to get back to this component and any
37:54 - other components in the application that
37:56 - is using the service and modify its
37:58 - instantiation so add the extra
38:01 - parameters here so this is very fragile
38:04 - it will cause a lot of cascading changes
38:07 - a more serious problem of this tight
38:09 - coupling is that we won't be able to
38:12 - isolate this component and unit tested
38:15 - because when unit testing this component
38:17 - we don't want to have a server up and
38:20 - running with a restful api you want to
38:22 - use a fake or a mock service that
38:26 - doesn't really need a server and this
38:28 - way we can isolate the component and
38:29 - unit test it so to solve this issue we
38:33 - should not use the new operator here
38:35 - delete instead we pass
38:39 - a parameter here course service which is
38:45 - of type course service now note the
38:49 - naming convention the parameter name
38:53 - here uses camelcase
38:55 - so the first letter of the first word is
38:57 - lowercase and the first letter of every
38:59 - word after that is upper case but the
39:03 - naming convention for our class uses
39:06 - Pascal case so the first letter of every
39:09 - word should be uppercase so with this
39:13 - change our component is no longer
39:15 - tightly coupled to the service when unit
39:19 - testing this I can simply create a mock
39:21 - or a fake service and pass it in the
39:23 - constructor it wouldn't care now you
39:26 - might ask but somewhere we need to
39:28 - create the service and pass it to this
39:29 - component so how is this going to happen
39:31 - that's when a dependency injection
39:34 - framework comes into the picture the job
39:37 - of dependency injection framework is to
39:39 - inject dependencies of your classes when
39:43 - creating them so when creating a course
39:46 - component it looks at the constructor
39:48 - and sees we need a course service here
39:51 - this is a dependency so first it will
39:53 - create an instance of the service and
39:55 - then inject it into the constructor of
39:58 - this class this is what we call
40:00 - dependency injection but how do we
40:03 - the dependency injection framework well
40:05 - angular already has that built into it
40:07 - so we don't have to do anything magical
40:09 - there is just one more tiny step we need
40:12 - to do here but I'm not going to do it
40:14 - yet I'm going to run the application now
40:16 - so you can see a very important error
40:18 - and then we'll come back and fix it so
40:21 - save back to Chrome okay
40:26 - right-click somewhere inspect
40:31 - you see we have three errors here in the
40:34 - console tab scroll up look at this error
40:40 - no provider for course service so from
40:44 - courses component to course service this
40:47 - is the kind of error that you may often
40:49 - encounter when building angular 2 apps
40:51 - and this simply means courses component
40:55 - has a dependency on course service but
40:57 - angular does not know how to create that
41:00 - service so we need to teach it so back
41:04 - in the code in our component metadata
41:08 - here I'm going to add a new field so
41:14 - after the template providers look at the
41:20 - intellisense its type is any array any
41:23 - in typescript
41:25 - is a type that can hold any objects it's
41:28 - like var so we pass it all right here in
41:31 - this array we specify the dependencies
41:35 - for this component in this case course
41:38 - service and this
41:41 - solve our problem now let's finish the
41:44 - initialization of the courses property
41:47 - so in the constructor this that courses
41:53 - equals course service dot look at the
41:57 - intellisense get courses now our
42:02 - component is not coupled to the service
42:04 - it doesn't care where the data is coming
42:06 - from we have good separation of concerns
42:08 - and the service we may get the data from
42:11 - a restful api on the server or we may
42:14 - get it from local storage in the browser
42:16 - or from a cage or we might have
42:19 - hard-coded in an array the component
42:21 - doesn't care now I've got a small
42:26 - exercise for you I want you to use what
42:29 - you learned in the past few videos and
42:30 - extend this application to something
42:33 - like this so below the courses I want
42:36 - you to display the list of authors just
42:39 - to give you a bit of direction start
42:41 - with a component then set the required
42:43 - properties in your component and use
42:46 - interpolation to render them like this
42:49 - then extract the part that is supposed
42:51 - to get the list of authors from the
42:53 - server and put it in a service and
42:55 - finally use dependency injection and
42:57 - please please please spend 10 minutes
43:01 - and do this exercise because later we'll
43:04 - get into more complex topics and I'm
43:07 - going to make sure you master the
43:09 - fundamentals before we get there so
43:11 - please do your exercise and if you get
43:13 - stuck that's perfectly fine in the next
43:16 - video I'll show you my code
43:22 - okay so first I started by creating
43:24 - authors that component at TS in this
43:29 - module first we import component
43:31 - decorator from angular then we import
43:34 - author service next we apply the
43:38 - component decorator on our authors
43:41 - component class the selector I have used
43:44 - for this component is authors so
43:47 - anywhere in the HTML where we have
43:48 - authors element this component is going
43:50 - to be rendered and here's a template
43:54 - this is pretty much identical to what we
43:57 - did in the previous video so I didn't
43:58 - want you to do anything additional I
44:00 - just wanted you to get used to this new
44:02 - syntax that's all
44:04 - also note the providers field here
44:08 - because we're using dependency injection
44:10 - to inject author service into this
44:13 - component we need to teach angular how
44:15 - to create an author service and we do
44:18 - that by using the providers field here
44:20 - in this component I have two properties
44:24 - authors which use an array of string and
44:28 - title which is just a simple string in
44:31 - the constructor we get author service
44:34 - and then use that to set the author's
44:37 - property and then in app the component
44:43 - the TS I modify the template here so I
44:48 - added authors element just below courses
44:51 - so you see with this component we can
44:54 - break up a big page with lots of
44:56 - different features into smaller more
44:58 - manageable more maintainable components
45:00 - plus in the future I can get these
45:03 - authors and put it on a separate page
45:05 - instead of putting below courses and
45:07 - we'll get there very soon now when I did
45:10 - all this
45:11 - I ran the application but I did not see
45:14 - the authors I didn't have any errors so
45:17 - I was wondering why is it not rendered
45:19 - then I came back here and I realized
45:21 - I've added this authors element here but
45:25 - angular doesn't know which component is
45:27 - responsible for that because I forgot to
45:30 - put authors component in the list of
45:33 - directives that this template is using
45:36 - so chances are you made the same mistake
45:38 - as me if so this is your solution
45:43 - all right now let me show you a real
45:46 - world example of a custom directive look
45:50 - at this text box here when I click it it
45:53 - expands and when it goes out of focus it
45:57 - shrinks you probably have seen this in a
46:00 - lot of websites of course the real world
46:02 - examples are a bit more fancy they have
46:04 - an animation for now we don't have to
46:06 - worry about this stuff so in HTML we use
46:09 - the input tag to render a text box now I
46:13 - want to use a directive to extend the
46:15 - input tag such that if it has the
46:18 - attribute oughta grow it will have this
46:20 - behavior so in vs code under app folder
46:26 - I'm going to create a new file call it
46:31 - Auto - grow then dot directive dot TS
46:41 - first we start with a class just like
46:44 - before export class oughta grow
46:48 - directive we need to decorate this class
46:52 - with the directive decorator so first we
46:56 - import it import directive from angular
47:02 - 2 slash core
47:05 - and then apply it here in the metadata
47:11 - I'm going to use two fields one is
47:14 - selector which you're familiar with from
47:16 - the components so this is going to be a
47:19 - CSS selector for the host element so
47:22 - when angular is scanning a template if
47:24 - it finds an element that matches this
47:27 - CSS selector it's going to apply this
47:29 - directive on that element I'm going to
47:32 - use square bracket to refer to an
47:35 - attribute so if an element like an input
47:38 - has the attribute Auto grill this
47:41 - directive is going to be applied on that
47:43 - element next I'm going to use host which
47:50 - takes an object and we use host to
47:53 - subscribe to events rays from this
47:56 - element so I want to subscribe to two
47:58 - events focus and blur note the syntax
48:02 - here we supply events and their handlers
48:05 - using key value pairs so string in
48:10 - parentheses the event a like focus and
48:14 - then we set the value on focus so this
48:21 - is going to be a method in our directive
48:23 - class and this parentheses here means
48:26 - we're binding this unfocus method to the
48:31 - focus event one more time
48:35 - parentheses blur on blur parentheses
48:42 - let's go ahead
48:43 - create this method now here we need to
48:52 - access the host element how do we do
48:54 - that we need to import two services from
48:57 - angular so on the top I'm going to
49:02 - import element ref which gives us access
49:05 - to the host element and render which is
49:10 - a service that we use to modify that
49:13 - element now we need to create a
49:16 - constructor for this directive we give
49:24 - it two arguments one is L just an
49:27 - arbitrary name which is of type element
49:30 - reference the second is render which is
49:34 - a type render so angular would
49:40 - automatically inject instances of
49:43 - element Rev and renderer into this class
49:46 - dependency injection right now we need
49:50 - these l and render objects in unfocus
49:54 - and unblurred methods one way is to
49:57 - declare two private fields in this class
49:59 - and initialize them in this constructor
50:02 - using these arguments here something
50:05 - like this let's call one of them on the
50:08 - line L so we use underline to indicate
50:12 - that this is a private field which is of
50:15 - type element reference and then we can
50:20 - type this that underline L equals L but
50:24 - there is a shorter and cleaner way to
50:26 - achieve the same thing we don't need any
50:28 - of this stuff here we can use the
50:32 - private keyword before the argument name
50:35 - and the typescript compiler would
50:37 - automatically create a field called L in
50:40 - this class and then initialize it with
50:42 - this argument so I'm going to do the
50:45 - same here that's it now we go to unfocus
50:51 - we use this dot render dot
50:57 - set element style you don't have to
51:00 - memorize any of this time I just want
51:02 - you to see a directive in action later
51:05 - we have a complete section on directive
51:07 - so don't worry if all of this looks new
51:08 - to you
51:09 - now the first argument is the element we
51:12 - want to apply a style on so this the
51:15 - tail the second argument is the name of
51:18 - the style width and the third is the
51:23 - value let's make it 200 pixels of course
51:27 - this is just arbitrary it's a very basic
51:29 - implementation I really want to
51:31 - calculate that based on the content of
51:34 - the input for now let's not worry about
51:36 - it and then I'm going to copy this line
51:39 - and put it here so when it goes out of
51:42 - focus I want to set it to let's say 120
51:46 - again this is arbitrary save so this is
51:50 - all we have to do to implement a
51:52 - directive so as you see a directive is
51:55 - just a class that has the directive
51:58 - decorator we give it a selector and then
52:03 - implement the logic inside this class
52:05 - now let's go to courses that components
52:09 - the TS in a template here just above the
52:16 - list of courses I want to add an input
52:19 - input of type text and apply Auto Gro
52:24 - attribute on it now if you run the
52:28 - application angular is going to ignore
52:30 - this because it doesn't know what is
52:32 - auto grow so we need to teach it to
52:35 - apply the auto group directive whenever
52:37 - it sees this selector so we use the
52:43 - directive field here in our component
52:45 - metadata directives which is an array
52:50 - and here we pass our to grow directive
52:55 - of course it's not recognized because we
52:58 - have an imported yet so on the top in
53:04 - part
53:06 - autograph directive from auto - growth
53:11 - dot directive
53:13 - now there is a temporary issue on my
53:15 - machine here and that's why you see this
53:16 - red underline don't worry about it
53:18 - everything is going to work now so in
53:24 - this section we had a brief look at
53:25 - components directives services and
53:28 - dependency injection throughout the rest
53:31 - of the course you will learn more about
53:33 - these building blocks in the next
53:35 - section I'm going to show you how to use
53:37 - property and event binding to display
53:40 - data and handle events raised from dom
53:42 - elements so i'll see in the next section
53:46 - so I guess you've been enjoying this
53:49 - video so far otherwise you wouldn't
53:51 - watch all these 50 minutes so I highly
53:54 - recommend you to take my complete
53:55 - angular course because there are lots of
53:58 - things I'm going to teach you there what
54:00 - do you have seen so far it's just the
54:01 - beginning it was just an introduction so
54:04 - as I told you before you can get this
54:06 - course with a discount using the link in
54:08 - the video description I hope to see you
54:10 - in the course

Cleaned transcript:

hi my name is Muhammad Ali and I'm going to be instructor in this course let me quickly explain in three minutes what angular is what you can do with it and what you're going to learn in this course angular is a leading framework for building JavaScript heavy applications and often is used in building single page apps or spas what is a single page app well in a standard web application when we click on a link the entire page is reloaded in a single page app instead of reloading the entire page replace the view that is in the content area with another view you also keep track of history so if the user navigates using back and forward buttons we restore the application in the right State as you might guess these applications provide a very fast and fluid experience Gmail is a very good example of a single page application so anytime you want to build an application that has a lot of JavaScript like single page applications done necessarily you may want to look at angular to build this application in a modular maintainable and testable way sure there's lots of other frameworks out there that have the same promises so why angular well angular is one of the leading frameworks in this space it's been around for quite a few years it's just been rewritten with the best practices for the future it has a huge community support it's backed by Google it's not going away anytime soon and as google trends shows the demand for angular developers is increasing constantly so in this course I'll be teaching you angular 2 from scratch in a stepbystep fashion whether you are familiar with angular 1 we're not doesn't really matter because angular 2 is an entirely new framework and by the way we'll be using typescript why not JavaScript well typescript is a superset of JavaScript any valid JavaScript code is valid typescript which means you don't have to learn a new programming language types great bring some useful features that are missing in the current version of JavaScript supported by most browsers we get modules classes interfaces access modifiers like public private intelligence and compile time checking so we can catch a lot of programming errors during compile time if you have never worked with typescript I can guarantee you're going to absolutely love it okay now you probably want to say Marsh tell me what I'll be able to do by the end of watching this course well it's easier to show you by the end of watching this course you're going to build a realworld application like this so we have a list of users coming from a RESTful API with crud operations we can add a new user here we have a form with custom validation and dirty tracking so if I fill out one or two fields and accidentally try to navigate away the application will warn me we also have a list of posts we have pagination which is done on the client and filtering which is done on the server you also have master detail so as we click on a post we can see it's details loaded dynamically from the server these are the patterns that you see in a lot of realworld applications and in this course you're going to learn how to implement these patterns with angular 2 you in the nutshell we have four key players in an angular 2 app components directives routers and services let's take a look at each of these building blocks in more detail at the very core we have components a component encapsulate the template data and the behavior of a view so it's more accurate to call it a view component every angular 2 app has at least one component which we call the route component but in the real world an application often consists of tens or hundreds of components for example imagine we want to build an application like udemy we can divide this page into three components navigation bar sidebar and courses so each component has the template or HTML markup for the view as well as data and logic behind that view components can also contain other components so in the list of courses we can have multiple course components and in each course component we can have another component for rating that course the benefit of this architectural style is that it will help us break up a large application with various complex views into smaller more manageable components or as I said view components plus we can reuse these components in different parts of an application or even in a different application for example we can reuse this rating component here in a totally different application now you might be saying look much I understand what you're saying about components but what are these components really like in the code a component is nothing but a plain typescript class so just like classes in other programming languages it can have properties and methods these properties hold the data for the view and the methods implement the behavior of the view like what should happen when we click a button now if you have never worked with angular before one thing that may be new to you is that these components are completely decoupled from the document object model or dumb in applications written with plain JavaScript or jQuery we get a reference to a Dom element in order to modify it or handle its events in angular we don't do that instead we use binding so in the view we bind to the properties and methods of our component if there is a change in the value of a property the Dom element bound to this property will refresh automatically so we can't and shouldn't get a reference to that Dom element in order to update it similarly to handle an event raised from a Dom element like click we bind that event to a method in our component when the user clicks that element the corresponding method in our component will be called now in case you're curious why these components are decoupled from the Dom the reason is that this makes our components unit testable if you have a plain class that is nothing but a bunch of properties and methods we can easily unit test it without having a document object model now sometimes our components need to talk to backend API s to get or save data to have good separation of concerns in our applications we delegate any logic that is not related to view to a service so a service is just a plain class that encapsulate any non user interface logic like making HTTP calls logging business rules and so on we have another key player in angular apps and that's a router which is purely responsible for navigation so as the user navigates from one page to another it will figure out based on changes in URL what component to present to the user you will learn more about this in the section titled building single page apps and the last key player in angular is a directive similar to components we use directives to work with the Dom but a directive unlike a component doesn't have the template or HTML markup review we often use them to add behavior to existing Dom elements for example we can use a directive make it text box automatically grow when it receives focus angular has a bunch of built in directives for common tasks like adding or removing Dom elements adding classes or styles to them repeating them but we can also create our own custom directives so this is the big picture as you go through this course you will see each of these building blocks in action you okay let's jump in and set up our development environment first in case you don't have node on your machine download it from node.js org and install it on your machine it's pretty easy and straightforward to install we'd note we get a tool called NPM or node package manager which we use for managing dependencies of our application so once you install node open up command prompt on windows or terminal on Mac and type NPM install J typescript if you're a Mac user you need to put sudo in the front with this we install typescript globally on our machine the next thing you need is a code editor that supports typescript in this course I'll be using vs code which is a beautiful lightweight and crossplatform editor from Microsoft you can use sublime Adam IntelliJ Visual Studio and any other editors that support typescript and finally I'll be using Chrome as my browser you can use any browsers but I would highly recommend to use Chrome because we'll be working with Chrome developer tools throughout the course and I want to make sure you have the exact same experience as me during the videos the proper way to create an angular app is to use angular commandline interface or CLI but this tool is not ready yet so for the time being I've created a seed project that I've put together based on the guidelines on angular website we'll be using this seed project throughout the course so download the attached zip file and put it somewhere on your machine now let me show you what you will find inside this zip file so this is vs code editor that I'll be using throughout the course look inside this folder you will find a few configuration files an index dot HTML and an app folder which is the container for our application inside this app folder we got a couple of typescript files one is boot which is the main or starting module of our application and the other is app that component the TS which is the root component of our application we look at these files in more details in the next section this TS config that JSON is the configuration file for typescript compiler so it uses this configuration to determine how to compile or more accurately transpile our typescript files into javascript for example you can see that the target javascript is es5 which is the current version of javascript if you want to understand any of these settings in more detail it's best to look at TS config documentation and github typings like json is another configuration file for typescript when using external javascript libraries in time script we need to import what we call a typescript definition file this type definition file gives us static type checking and intellisense for that javascript library and this is where we reference that typescript definition file you'll learn more about this later in the course now this package that JSON is a standard node package configuration so here you see the name of our application and it's version under scripts we got a few some note commands which we'll look at shortly then we got the dependences for our application so we can see we've got dependency to angular to system J s and so on I'm going to move on because I would order to fasttrack to running our first angular app but if you're the kind of developer who prefers to understand the details first I've attached a PDF with the details of these dependencies okay now we need to install these dependencies so open up command prompt on Windows or terminal on Mac and go to the folder where you extracted this zip file and then run NPM install NPM we'll look at our package that JSON file and download our dependencies from NPM registry just be aware that this is going to take several minutes for the first time so be patient once these dependencies are installed you will see a new folder here called node modules so all our dependencies and their dependencies will be stored here now let's have one more look at package that JSON look under the script section here we have a few custom node commands the one we'll be using a lot is start which is the shortcut for concurrently running two commands running typescript compiler in the watch mode and starting our Lite web server with typescript compiler running in the watch mode we can modify and save a typescript file and then the typescript compiler will automatically generate a JavaScript and JavaScript map file in the same folder this javascript file is eventually the one that will be loaded in the browser but we never have to view or modify it we code purely in typescript so back in the terminal type NPM start so now our typescript compiler is running in the watch mode and our Lite web server is started this also launches our default browser which on my machine is Safari so I have to manually open up Chrome and navigate to localhost port 3000 and this is our first angular app up and running okay now let me show you something look at this app folder next to each type script file we have two files that are generated by typescript compiler one is a JavaScript file and the other is a JavaScript map file which is used during debugging so if something goes wrong and we try to debug in the browser this map file will take us to the corresponding line in your type script file now let's open up this app component the TS and make a small change so i'm going to explain this very briefly but in the next section we'll have a closer look at this scene text and you will create a component from scratch so you will know exactly how everything works so basically our root component is nothing but a plain type script class it's just decorated with this component decorator this decorator or annotation add metadata about this class so all the building blocks of angular 2 apps that I talked about are essentially playing type script classes that are decorated with some decorator so here in the template we have a heading let's change this to hello angular now before saving the changes let me bring up my terminal here notice that when I save changes because typescript compiler is running in the watch mode it will detect that this file has changed and it will regenerate the corresponding JavaScript and JavaScript map files then I'm going to switch back to Chrome and you will see that it will get refreshed automatically so we don't have to press f5 to refresh the page every time our application code changes this is browser sync which is a node module that are Lite web server uses okay now I'm going to go ahead and save the file look at the terminal typescript compiler we generated our JavaScript file now let's switch over to Chrome so Chrome automatically refreshed so this is going to be our development experience throughout this course we write typescript code and typescript compiler automatically generates JavaScript files for us it's simple and easy but if you want to build a production application you may want to include typescript compile a ssin as part of your build process so if you're using a build automation tool like gulp or grunt typescript compiler ssin would be another step in your build process that's beyond the scope of this course or at least we shouldn't worry about this complex that is at this point and just focus on building angular 2 apps just be aware that with this workflow sometimes it may take a couple of seconds until typescript compiler detects your changes also I've noticed that this Lite web server has a bug and sometimes it terminates unexpectedly so if you're not seeing your changes have a look at the terminal and see if flight server has terminated if so just terminate the session with ctrl + C and then run NPM start again ok let me quickly give you a heads up about what you're going to see over the upcoming sections in the next section titled angular to jump start we're going to create a component a service and a directive from scratch so by the end of the next section you will have an idea of what it is like to build an angular 2 app you will see the big picture in the code from that point in every section we'll explore one concept at a time you'll learn about property and event binding building reusable components controlling rendering of HTML building forms using reactive extensions and observables calling backend services building single page apps and finally over the last two sections you'll put everything together and build a realworld application just to let you know in this course I'm not going to touch on angular 1 and how it's different from angular 2 and there is a reason for that not every student taking this course is familiar with angular 1 so I don't want to distract this group of people with the old way of doing things which has no place in the future if you have an application written in angular one your best source for upgrading that is angular website they have fully documented the process and various strategies you can run angular one and two side by side and upgrade one module at a time with all that let's get started for the next section well hello my name is marsh thanks for watching my youtube channel this video you've been watching so far is actually part of my angular course on udemy if you're interested to have the complete sixandahalf hour course you can get it with a discount using the link in the video description and if not that's perfectly fine continue watching as the second section is coming up I hope you enjoy and have a great day so in the introductory section you learned about the core building blocks of angular 2 apps components directives services and routers in this section we'll implement a component a directive and a service from scratch so by the end of this section you'll have an idea of what it is like to build an angular 2 app will look at routers later in the section called building single page applications so let's get started all right so I've got the project open envious code I also got the terminal writing here so our lightweight web server is in the background plus our typescript compiler is in the watch mode it's looking for changes and when it observes a change in a file it will transpile it into JavaScript and then the browser sync will kick in and automatically refresh the browser you're going to see this in a second so back to vs code in angular 2 each of the building blocks I talked about like components directives and routers are plane type script classes and that's one thing that I love about angular 2 the API is much simpler and cleaner so I'm going to start by creating a class so rightclick app new file I'm going to call it courses dot component dot TS note the naming convention so we start with the name of the component like courses then dot component then TS okay so to create a class we start by export class courses component what is this export here in typescript each file is considered a module in each module we often export one or more things like a class a function or a variable in this case I'm exporting course this component class so it will be available to other modules in my application later when I need this class I can import it as you will see shortly alright so we have a class now how does angular know that this class is going to be a component it looks for specific attributes or metadata on your classes for example to make this a component we need to apply the component decorator to this class a decorator in typescript is like an attribute in csharp or an annotation in java many other languages have similar concepts so first I need to import the component decorator from the core angular module import curly braces component from here is a string that specifies the name of the module angular 2 slash core so in angular 2 slash core module we have a decorator called component and here I'm importing it so if you look at the source code for that module you will see that they have exported this component there so we can import it here that's the idea now these decorators are functions so we need to call them at sign component all decorators need to be prefixed with an ADD sign I know this is a function we just call it like this look at the intellisense it's telling me that this function takes an object so here's my object and you can see the list of attributes that we can add in this object in this video we're going to look at two basic attributes one is selector which is a string as you can see in the intellisense I'm going to call it courses so this selector field here specifies a CSS selector for a host HTML element when angular sees an element that matches this CSS selector it will create an instance of our component in the host element so here I'm assuming the host element is an element with the tag courses the next attribute is template and this template specifies the HTML that will be inserted into the Dom when the components view is rendered we can either write the template here inline or put it in a separate file I'll get to that later in this section about components so let's just display something very simple courses so that's all we have built our first component as easy as that now we need to add this courses element here somewhere so first save this file and then go to app that component es if you're using vs code or sublime text you can press ctrl P on Windows or command + P on Mac and here you can type the name of the file in your project so app component dot TS if you're using a different editor and you don't have this shortcut just go to the app folder and you will see app dot component the TS there alright look at this component it looks familiar doesn't it so first we are importing the component decorator from angular here we're calling it so it's a function that takes an object and this object we have two fields selector and a template just like our other component and finally we've got export class app component so this app component is the root of your application it's a view component that takes control of the entire app or the entire page and here's a template for this view component I'm going to change this and add courses element here now if I run the application now you're not going to see the courses component why because angular sees this course is tagged but it doesn't know which component is responsible for that even though we defined a component in our application nowhere we have referenced it so angular does not scan all your files to discover your components it will only recognize the components that you have explicitly referenced so here we need to add a reference to course this component so it can be discovered by angular so we supply a new field here called directives which is an array inside this array we specify any directives or components we have used inside the template for this component just to refresh your memory we use directives to extend or control document object model we can define custom attributes or custom elements that are not part of standard HTML in this case we used our courses component to define a new element so every component is technically a directive the difference is that a component has a template and a directive dozen so back to app we need to reference our component here courses component the read online cannot find name courses component and that's what I love about typescript compile time checking so we need to import this courses component import curlybraces courses component from what is the name of our module for the custom modules that we define we need to specify their path in the file system so this file app that component the TS is in the folder app look app folder and here's app that component TS and here is our courses component so they're both in the same folder so back in app that component of TS here i type dot slash which means start searching from the current folder and then the name of the module so courses dot component without TS extension save now let's look at our terminal ok typescript compiler detected a change so it transpiled our TS files into javascript files and now if you go to Chrome look our courses component is successfully rendered on the page let's inspect the elements so in the HTML we have this my app element which is the host element for our app component let's have another look at our app component look the selector is my app so when angular sees my app is going to put this template there and h1 with the courses element so I can chrome inside my app you see h1 and courses and courses is the host element for our courses component and inside that you see h2 but where is this root my app defined it in our HTML so I can vs code open the project folder collapse app open index.html scroll down in the body we have referenced my app so angular saw this and it rendered app component as I explained a component encapsulate the data and the logic behind the view so we can define properties here in our component and display them in the template let's define a simple string property called title so title colon string and let's initialize it here so you see in typescript unlike JavaScript we can set the type of our variables now in this particular example we don't necessarily have to set the type because it can be inferred from the value assigned to the type so I can remove call and string directly initialize it and now if I hover my mouse over title the intellisense shows that this property is a string okay now let's change the template and display the title first I'm going to change this single quote to back tick which will allow me to break up this template into multiple lines the backtick character is on the top left of your keyboard just before the number one there you go and change the other one now I'll break it up and to render the title we use double curly braces this is called interpolation now if the value of this property in the component changes the view will be automatically refreshed angular will take care of that so we don't have to do anything special and this is called oneway binding we also have twoway binding which is used in forms for example when you type something into an input field that is bound to a property as you modify the value of the input field the property will be updated automatically you will see that later in the course so save back to Chrome it takes a couple of seconds until typescript compiler detects the changes regenerates the files and look browser sync updated the page automatically and here's the title now let's take this example to the next level I want to display a list of courses so first I would declare a property in the component courses and initialize it to a string array first one or two and three and then interview I'm going to use a ul and a bunch of lis to render the courses like this now I want these li is to be repeated for each course so we can use a special attribute here called ng for and note the asterisk this is part of the syntax and later I will explain why we set this to an expression something similar to the expressions we write in for each loops hash course of courses what does this mean courses is the object we are iterating which is in this case the property in our component of is just a keyword and hash course is a way to declare a local variable in our template so similar to forage loops this is our local variable that in every iteration it will hold one course at a time now between Li tags again we can use double curly braces or interpolation to display this course variable here save back to Chrome there you go so you see templates in angular look like HTML most of the time but sometimes we use special attribute like ng for here which is an example of a directive so this directive extends the HTML and adds extra behavior in this case it will repeat the Li element based on the expression assigned to it at this point our component is rendering a hardcoded list of courses but in a realworld application we often get the data from the server as I explained before this component should not include any logic other than the via logic so I'm not going to write the code to call the server and get the list of courses any logic that is not about this view should be encapsulated in a separate class which we call a service so let's create a service that this component will use to get the courses from the server so in the app folder right click you know file course dot service dot t s note the naming convention we start with the name of the service in this case course then dot service as a suffix and then duct es a service is just a plain class nothing more so export glass course service I'm going to define a method here get courses I can explicitly set the return type here like string array but now the compiler is complaining because a function whose declare type is neither void or any must return a value or consists of a single throw statement basically the compiler is complaining because the return type is a string array but we have not returned anything so I'm going to go back to our component control P on Windows or command P on Mac courses that component the TS I'm going to get this array of courses cut and servus paste it here and return it for now we don't want to get distracted by details of consuming a restful api so let's just imagine this service will actually call the server to get the data for simplicity for now we just return an array all I want you to pay attention to is that the component is not going to have any code to get the data from the server it will simply delegate to this service as you will see soon so we created this service now we need to use it in our component so course that component of TS first way to import the service so I on the top import course service from dot slash which means straight from the current directory course dot service that's it no dot TS here now that we have imported the symbol we need a reference to the service one way to do it is to create it in the constructor of courses component so I can create a constructor here constructor a new up course service like this but this would cause tight coupling between courses component and course service and this will lead to two big issues the first issue is that let's say in the future we create a custom constructor for our service that takes one or two parameters then we would have to get back to this component and any other components in the application that is using the service and modify its instantiation so add the extra parameters here so this is very fragile it will cause a lot of cascading changes a more serious problem of this tight coupling is that we won't be able to isolate this component and unit tested because when unit testing this component we don't want to have a server up and running with a restful api you want to use a fake or a mock service that doesn't really need a server and this way we can isolate the component and unit test it so to solve this issue we should not use the new operator here delete instead we pass a parameter here course service which is of type course service now note the naming convention the parameter name here uses camelcase so the first letter of the first word is lowercase and the first letter of every word after that is upper case but the naming convention for our class uses Pascal case so the first letter of every word should be uppercase so with this change our component is no longer tightly coupled to the service when unit testing this I can simply create a mock or a fake service and pass it in the constructor it wouldn't care now you might ask but somewhere we need to create the service and pass it to this component so how is this going to happen that's when a dependency injection framework comes into the picture the job of dependency injection framework is to inject dependencies of your classes when creating them so when creating a course component it looks at the constructor and sees we need a course service here this is a dependency so first it will create an instance of the service and then inject it into the constructor of this class this is what we call dependency injection but how do we the dependency injection framework well angular already has that built into it so we don't have to do anything magical there is just one more tiny step we need to do here but I'm not going to do it yet I'm going to run the application now so you can see a very important error and then we'll come back and fix it so save back to Chrome okay rightclick somewhere inspect you see we have three errors here in the console tab scroll up look at this error no provider for course service so from courses component to course service this is the kind of error that you may often encounter when building angular 2 apps and this simply means courses component has a dependency on course service but angular does not know how to create that service so we need to teach it so back in the code in our component metadata here I'm going to add a new field so after the template providers look at the intellisense its type is any array any in typescript is a type that can hold any objects it's like var so we pass it all right here in this array we specify the dependencies for this component in this case course service and this solve our problem now let's finish the initialization of the courses property so in the constructor this that courses equals course service dot look at the intellisense get courses now our component is not coupled to the service it doesn't care where the data is coming from we have good separation of concerns and the service we may get the data from a restful api on the server or we may get it from local storage in the browser or from a cage or we might have hardcoded in an array the component doesn't care now I've got a small exercise for you I want you to use what you learned in the past few videos and extend this application to something like this so below the courses I want you to display the list of authors just to give you a bit of direction start with a component then set the required properties in your component and use interpolation to render them like this then extract the part that is supposed to get the list of authors from the server and put it in a service and finally use dependency injection and please please please spend 10 minutes and do this exercise because later we'll get into more complex topics and I'm going to make sure you master the fundamentals before we get there so please do your exercise and if you get stuck that's perfectly fine in the next video I'll show you my code okay so first I started by creating authors that component at TS in this module first we import component decorator from angular then we import author service next we apply the component decorator on our authors component class the selector I have used for this component is authors so anywhere in the HTML where we have authors element this component is going to be rendered and here's a template this is pretty much identical to what we did in the previous video so I didn't want you to do anything additional I just wanted you to get used to this new syntax that's all also note the providers field here because we're using dependency injection to inject author service into this component we need to teach angular how to create an author service and we do that by using the providers field here in this component I have two properties authors which use an array of string and title which is just a simple string in the constructor we get author service and then use that to set the author's property and then in app the component the TS I modify the template here so I added authors element just below courses so you see with this component we can break up a big page with lots of different features into smaller more manageable more maintainable components plus in the future I can get these authors and put it on a separate page instead of putting below courses and we'll get there very soon now when I did all this I ran the application but I did not see the authors I didn't have any errors so I was wondering why is it not rendered then I came back here and I realized I've added this authors element here but angular doesn't know which component is responsible for that because I forgot to put authors component in the list of directives that this template is using so chances are you made the same mistake as me if so this is your solution all right now let me show you a real world example of a custom directive look at this text box here when I click it it expands and when it goes out of focus it shrinks you probably have seen this in a lot of websites of course the real world examples are a bit more fancy they have an animation for now we don't have to worry about this stuff so in HTML we use the input tag to render a text box now I want to use a directive to extend the input tag such that if it has the attribute oughta grow it will have this behavior so in vs code under app folder I'm going to create a new file call it Auto grow then dot directive dot TS first we start with a class just like before export class oughta grow directive we need to decorate this class with the directive decorator so first we import it import directive from angular 2 slash core and then apply it here in the metadata I'm going to use two fields one is selector which you're familiar with from the components so this is going to be a CSS selector for the host element so when angular is scanning a template if it finds an element that matches this CSS selector it's going to apply this directive on that element I'm going to use square bracket to refer to an attribute so if an element like an input has the attribute Auto grill this directive is going to be applied on that element next I'm going to use host which takes an object and we use host to subscribe to events rays from this element so I want to subscribe to two events focus and blur note the syntax here we supply events and their handlers using key value pairs so string in parentheses the event a like focus and then we set the value on focus so this is going to be a method in our directive class and this parentheses here means we're binding this unfocus method to the focus event one more time parentheses blur on blur parentheses let's go ahead create this method now here we need to access the host element how do we do that we need to import two services from angular so on the top I'm going to import element ref which gives us access to the host element and render which is a service that we use to modify that element now we need to create a constructor for this directive we give it two arguments one is L just an arbitrary name which is of type element reference the second is render which is a type render so angular would automatically inject instances of element Rev and renderer into this class dependency injection right now we need these l and render objects in unfocus and unblurred methods one way is to declare two private fields in this class and initialize them in this constructor using these arguments here something like this let's call one of them on the line L so we use underline to indicate that this is a private field which is of type element reference and then we can type this that underline L equals L but there is a shorter and cleaner way to achieve the same thing we don't need any of this stuff here we can use the private keyword before the argument name and the typescript compiler would automatically create a field called L in this class and then initialize it with this argument so I'm going to do the same here that's it now we go to unfocus we use this dot render dot set element style you don't have to memorize any of this time I just want you to see a directive in action later we have a complete section on directive so don't worry if all of this looks new to you now the first argument is the element we want to apply a style on so this the tail the second argument is the name of the style width and the third is the value let's make it 200 pixels of course this is just arbitrary it's a very basic implementation I really want to calculate that based on the content of the input for now let's not worry about it and then I'm going to copy this line and put it here so when it goes out of focus I want to set it to let's say 120 again this is arbitrary save so this is all we have to do to implement a directive so as you see a directive is just a class that has the directive decorator we give it a selector and then implement the logic inside this class now let's go to courses that components the TS in a template here just above the list of courses I want to add an input input of type text and apply Auto Gro attribute on it now if you run the application angular is going to ignore this because it doesn't know what is auto grow so we need to teach it to apply the auto group directive whenever it sees this selector so we use the directive field here in our component metadata directives which is an array and here we pass our to grow directive of course it's not recognized because we have an imported yet so on the top in part autograph directive from auto growth dot directive now there is a temporary issue on my machine here and that's why you see this red underline don't worry about it everything is going to work now so in this section we had a brief look at components directives services and dependency injection throughout the rest of the course you will learn more about these building blocks in the next section I'm going to show you how to use property and event binding to display data and handle events raised from dom elements so i'll see in the next section so I guess you've been enjoying this video so far otherwise you wouldn't watch all these 50 minutes so I highly recommend you to take my complete angular course because there are lots of things I'm going to teach you there what do you have seen so far it's just the beginning it was just an introduction so as I told you before you can get this course with a discount using the link in the video description I hope to see you in the course
