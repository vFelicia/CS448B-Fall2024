With timestamps:

00:01 - to load the module we use the require
00:04 - function this is one of the functions in
00:07 - node we don't have this in browsers this
00:09 - function takes one argument and that's
00:11 - the name or path of the target module we
00:14 - want to load so here we're gonna load
00:17 - the logger module now we can see both
00:20 - the app module and logger module are in
00:22 - the same folder so we use period slash
00:27 - to indicate the current folder and then
00:30 - we add the name of our module that is
00:32 - logger ojs or we can make it shorter and
00:36 - just use logger
00:37 - because node assumes this is a
00:39 - JavaScript file it automatically asked
00:42 - the GS extension now if this logger was
00:45 - in a subfolder we could add that
00:47 - subfolder here or if it was in the
00:50 - parent folder we could use dot dot slash
00:53 - so here we are using the relative path
00:56 - to the target module in this case that
00:58 - module is in the same folder now this
01:02 - required function returns the object
01:04 - that is exported from this target module
01:08 - so this exports object here this is what
01:12 - we get when we call the require function
01:14 - let me show you so I'm gonna declare a
01:17 - variable call it lager the name of the
01:21 - module and set it to the return value of
01:23 - the require function now let's log this
01:28 - logger and see what we get so node
01:35 - object yes look we get an object this
01:40 - object has a single method called log
01:42 - you can see that's a function so we can
01:46 - call this function or this method in app
01:48 - J s so back here we call logger dot and
01:53 - look here we have intellisense
01:55 - in vs code so we call log and pass a
01:59 - message now back in terminal let's run
02:06 - this app
02:08 - and we get message on the console so
02:12 - this is how we work with modules in node
02:14 - when we define a module we export one or
02:18 - more members and then to load the module
02:20 - we use the require function now in the
02:24 - recent versions of JavaScript we have
02:27 - the ability to define constants so as a
02:31 - best practice when loading a module
02:33 - using the required function it's better
02:36 - to store the result in a constant like
02:40 - this the reason for this is because we
02:43 - don't want to accidentally overwrite the
02:46 - value of logger like this here if we set
02:49 - this to one then when we call the log
02:52 - method we're going to get an exception
02:54 - let me show you so one more time
02:58 - look you got logger that log is not a
03:02 - function now in contrast if we define
03:06 - this as a constant now back in the
03:10 - terminal let's run this program one more
03:13 - time look we got a different kind of
03:16 - error assignment two constant variable
03:19 - now there are tools out there that check
03:22 - our JavaScript code for errors like that
03:24 - so by using this constructs properly we
03:27 - can prevent these errors from happening
03:28 - at runtime so one of these popular tools
03:31 - is J's hint if you have never used it
03:34 - before don't worry I'm just gonna show
03:35 - you a quick demo so if you're on J s
03:38 - hint app but j s we get this error
03:42 - attempting to override logger which is a
03:45 - constant so with tools like jeaious hint
03:47 - we can scan all our JavaScript code for
03:50 - errors like that so that's the benefit
03:53 - of using a constant as opposed to a
03:55 - variable here if you accidentally reset
03:58 - this object then we're gonna get an
04:00 - error at compile time instead of at run
04:02 - time okay and one last thing before we
04:06 - finish this lecture sometimes instead of
04:09 - exporting an object from a module you
04:11 - may want to export only a single
04:13 - function for example in our logger
04:17 - module we don't necessarily need an
04:19 - object because we have a single method
04:22 - an object would be useful if we had
04:24 - multiple methods or properties here but
04:27 - in this case instead of exporting an
04:29 - object we can export a single function
04:32 - so we can reset this export to the log
04:37 - function so initially it was an empty
04:39 - object but we reset it to just a
04:42 - function with that like in app Jas the
04:47 - logger is no longer an object it's a
04:49 - function that we can call directly like
04:52 - this so logger we call it and give it an
04:58 - argument now a better name for this
05:00 - function is lock so I'm gonna press f2
05:03 - to rename these log like this now back
05:08 - in terminal let's run node op j s and we
05:13 - get the same result so in your modules
05:16 - you can export a single function or an
05:19 - object
05:22 - hi guys it's mash here thank you for
05:25 - watching my node tutorial I just wanted
05:27 - to let you know that this video you've
05:28 - been watching is part of my complete
05:30 - note course where you will learn
05:32 - everything about node from the basic to
05:34 - the advanced topics if you're serious
05:36 - about learning node I highly recommend
05:38 - you to enroll in my node course because
05:41 - this is much faster than jumping from
05:43 - one tutorial to another it saves you
05:45 - time plus you're going to get a lot of
05:47 - exercises that will prepare you for the
05:49 - real work and also at the end of the
05:51 - course you'll receive a certificate of
05:53 - completion that you can provide your
05:56 - current or future employer so if you
05:58 - want to enroll click on the link in the
06:00 - video description I hope to see you in
06:02 - the course

Cleaned transcript:

to load the module we use the require function this is one of the functions in node we don't have this in browsers this function takes one argument and that's the name or path of the target module we want to load so here we're gonna load the logger module now we can see both the app module and logger module are in the same folder so we use period slash to indicate the current folder and then we add the name of our module that is logger ojs or we can make it shorter and just use logger because node assumes this is a JavaScript file it automatically asked the GS extension now if this logger was in a subfolder we could add that subfolder here or if it was in the parent folder we could use dot dot slash so here we are using the relative path to the target module in this case that module is in the same folder now this required function returns the object that is exported from this target module so this exports object here this is what we get when we call the require function let me show you so I'm gonna declare a variable call it lager the name of the module and set it to the return value of the require function now let's log this logger and see what we get so node object yes look we get an object this object has a single method called log you can see that's a function so we can call this function or this method in app J s so back here we call logger dot and look here we have intellisense in vs code so we call log and pass a message now back in terminal let's run this app and we get message on the console so this is how we work with modules in node when we define a module we export one or more members and then to load the module we use the require function now in the recent versions of JavaScript we have the ability to define constants so as a best practice when loading a module using the required function it's better to store the result in a constant like this the reason for this is because we don't want to accidentally overwrite the value of logger like this here if we set this to one then when we call the log method we're going to get an exception let me show you so one more time look you got logger that log is not a function now in contrast if we define this as a constant now back in the terminal let's run this program one more time look we got a different kind of error assignment two constant variable now there are tools out there that check our JavaScript code for errors like that so by using this constructs properly we can prevent these errors from happening at runtime so one of these popular tools is J's hint if you have never used it before don't worry I'm just gonna show you a quick demo so if you're on J s hint app but j s we get this error attempting to override logger which is a constant so with tools like jeaious hint we can scan all our JavaScript code for errors like that so that's the benefit of using a constant as opposed to a variable here if you accidentally reset this object then we're gonna get an error at compile time instead of at run time okay and one last thing before we finish this lecture sometimes instead of exporting an object from a module you may want to export only a single function for example in our logger module we don't necessarily need an object because we have a single method an object would be useful if we had multiple methods or properties here but in this case instead of exporting an object we can export a single function so we can reset this export to the log function so initially it was an empty object but we reset it to just a function with that like in app Jas the logger is no longer an object it's a function that we can call directly like this so logger we call it and give it an argument now a better name for this function is lock so I'm gonna press f2 to rename these log like this now back in terminal let's run node op j s and we get the same result so in your modules you can export a single function or an object hi guys it's mash here thank you for watching my node tutorial I just wanted to let you know that this video you've been watching is part of my complete note course where you will learn everything about node from the basic to the advanced topics if you're serious about learning node I highly recommend you to enroll in my node course because this is much faster than jumping from one tutorial to another it saves you time plus you're going to get a lot of exercises that will prepare you for the real work and also at the end of the course you'll receive a certificate of completion that you can provide your current or future employer so if you want to enroll click on the link in the video description I hope to see you in the course
