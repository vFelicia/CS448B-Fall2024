With timestamps:

00:01 - now in the real world is quite rare that
00:04 - you would work with this event emitter
00:07 - object directly instead you want to
00:10 - create a class that has all the
00:12 - capabilities of the event emitter and
00:15 - then you will use that class in your
00:17 - code let me explain what I mean by that
00:19 - and why so let's open up our lager
00:23 - module so in this module we're exporting
00:26 - a simple function log right
00:28 - and here we log that message on the
00:31 - console now after this we want to raise
00:34 - an event and then later in app module we
00:38 - will listen for that event and do
00:39 - something so let's go back to our app
00:41 - module and copy some code into the
00:45 - logger module so on the top I'm gonna
00:48 - copy these two lines to bring the event
00:51 - emitter in this module okay now back in
00:55 - app module I'm also gonna move these two
00:58 - lines for raising an event into the
01:01 - logger module because this code should
01:03 - not be here it's the logger module that
01:06 - emits or signals an event saying the
01:08 - message is locked so cut so here after
01:13 - we log the message you raise an event
01:16 - like this okay now back in app module we
01:21 - don't need this comment here we need to
01:23 - load the logger module and call the log
01:26 - function so constant log we call the
01:32 - require function and set the path to the
01:34 - logger module and here we simply call
01:38 - the log function with a message okay now
01:43 - when we run this application we are only
01:46 - going to see this message on the console
01:48 - in other words this event listener will
01:52 - not be caught let's verify that and then
01:55 - I'll explain why that happens
01:57 - so back in terminal node app J s look we
02:03 - only got the message on the console so
02:06 - our event listener was not caught the
02:09 - reason for this is because here we're
02:12 - working with two different event
02:14 - emitters in fjs we have this even
02:18 - emitter object and in logger module we
02:22 - have another event emitter object so
02:26 - earlier I told you that a class is like
02:28 - a blueprint and an object is an actual
02:31 - instance as a metaphor I said we could
02:34 - have a class called human or person but
02:37 - the objects could be Jack John Mary Bob
02:40 - whatever so in this case we have two
02:42 - different objects in the logger module
02:45 - you're using this emitter object to emit
02:48 - an event whereas in app module we're
02:51 - using another event a Mueller object to
02:54 - handle that event these are completely
02:57 - different so when we register a listener
03:00 - here that listener is only registered
03:03 - with this event emitter which is
03:05 - completely different from the other
03:07 - event emitter so that's why I told you
03:11 - in your applications it's very rare that
03:13 - you would want to work with this event
03:15 - emitter directly instead you want to
03:17 - create a class that has all the
03:19 - capabilities of this event emitter but
03:22 - it has additional capabilities in this
03:25 - case we want to create a class called
03:27 - lager that has this additional method
03:30 - lock okay so the first thing you want to
03:33 - do here is to define a class in es6 we
03:37 - have this keyword class which is a
03:39 - syntactical sugar for creating a
03:41 - constructor function with this we can
03:44 - define a class logger note that the
03:47 - first letter of every word in a class
03:50 - should be uppercase this is the Pascal
03:52 - case convention that we use for naming
03:55 - classes so class logger we got a code
03:59 - block now we need to move this log
04:02 - function inside this logger class so cut
04:06 - paste it here now we have an error
04:09 - because when we define a function inside
04:11 - a class we don't need this function
04:13 - keyword and from now on we refer to this
04:16 - function as a method so when a function
04:19 - is inside a class we say that's a method
04:22 - in that class okay so here we have this
04:24 - logger class now at the end is
04:28 - I'm exporting the log function we're
04:30 - going to export the logger class okay
04:34 - now I want this logger class to have all
04:37 - the capabilities of this event emitter
04:40 - the way we do that is by using the
04:42 - extends keyword that comes in es6 so
04:46 - extends and here we add the name of the
04:49 - parent or the base class so event
04:53 - emitter and with this simple change this
04:57 - logger class will have all the
04:59 - functionality that is defined in event
05:02 - emitter so here when raising this event
05:05 - instead of using this emitter object
05:08 - we're going to use this so in this class
05:11 - we can directly omit or raise events
05:16 - okay and now we no longer need this
05:19 - actual emitter object because we have
05:22 - not used it anywhere in this code so
05:25 - delete we're done with the logger module
05:28 - now back in the app module
05:31 - so here when requiring the logger module
05:34 - we get a class so I'm gonna rename this
05:37 - to logger with capital L that's a class
05:41 - now we create an object so new logger
05:50 - and then to log a message we call logger
05:53 - deadlock now similar to the change that
05:57 - we made in the logger module we no
06:00 - longer need this event a meter object
06:02 - here we want to work directly with this
06:05 - logger object so we're gonna register
06:08 - this listener on this logger object okay
06:12 - so I'm gonna move this code after
06:18 - creating the logger we say hey logger
06:22 - when you raise this message log event I
06:26 - want to execute this code okay and
06:29 - finally you can see we no longer need
06:31 - this van emitter object it's not used
06:34 - anywhere delete now when we run this
06:38 - application we're going to see this
06:40 - message on the console but also because
06:43 - we're using the same logger object for
06:46 - registering an event listener and also
06:48 - raising an event we're going to see this
06:51 - message on the console so note fjs look
06:57 - this is the message on the console and
07:00 - you can see our listener was
07:02 - successfully called
07:03 - so let's quickly recap if you want to
07:07 - raise events in your application to
07:09 - signal that something has happened you
07:11 - need to create a class that extend event
07:14 - emitter with this that class will have
07:17 - all the functionality defined in event
07:20 - emitter but you can also add additional
07:23 - functionality in this case we have the
07:25 - ability to log a message and then inside
07:28 - that class whenever you want to raise an
07:30 - event you use this that emit because
07:33 - this references this longer class itself
07:36 - which extends event emitter so all the
07:40 - methods defined an event emitter will
07:42 - also be part of this class okay and
07:45 - finally in app module again instead of
07:49 - using an instance of event emitter you
07:52 - will use an instance of the custom class
07:56 - that you have defined that extends event
07:59 - emitter
08:02 - hi guys its mosh here thank you for
08:04 - watching my node tutorial I just wanted
08:07 - to let you know that this video you've
08:08 - been watching is part of my complete
08:10 - note course where you will learn
08:12 - everything about node from the basic to
08:14 - the advanced topics if you're serious
08:16 - about learning node I highly recommend
08:18 - you to enroll in my node course because
08:20 - this is much faster than jumping from
08:22 - one tutorial to another it saves you
08:24 - time plus you're going to get a lot of
08:27 - exercises that will prepare you for the
08:29 - real work and also at the end of the
08:31 - course you'll receive a certificate of
08:33 - completion that you can provide your
08:35 - current or future employer so if you
08:38 - want to enroll click on the link in the
08:40 - video description I hope to see you in
08:42 - the course

Cleaned transcript:

now in the real world is quite rare that you would work with this event emitter object directly instead you want to create a class that has all the capabilities of the event emitter and then you will use that class in your code let me explain what I mean by that and why so let's open up our lager module so in this module we're exporting a simple function log right and here we log that message on the console now after this we want to raise an event and then later in app module we will listen for that event and do something so let's go back to our app module and copy some code into the logger module so on the top I'm gonna copy these two lines to bring the event emitter in this module okay now back in app module I'm also gonna move these two lines for raising an event into the logger module because this code should not be here it's the logger module that emits or signals an event saying the message is locked so cut so here after we log the message you raise an event like this okay now back in app module we don't need this comment here we need to load the logger module and call the log function so constant log we call the require function and set the path to the logger module and here we simply call the log function with a message okay now when we run this application we are only going to see this message on the console in other words this event listener will not be caught let's verify that and then I'll explain why that happens so back in terminal node app J s look we only got the message on the console so our event listener was not caught the reason for this is because here we're working with two different event emitters in fjs we have this even emitter object and in logger module we have another event emitter object so earlier I told you that a class is like a blueprint and an object is an actual instance as a metaphor I said we could have a class called human or person but the objects could be Jack John Mary Bob whatever so in this case we have two different objects in the logger module you're using this emitter object to emit an event whereas in app module we're using another event a Mueller object to handle that event these are completely different so when we register a listener here that listener is only registered with this event emitter which is completely different from the other event emitter so that's why I told you in your applications it's very rare that you would want to work with this event emitter directly instead you want to create a class that has all the capabilities of this event emitter but it has additional capabilities in this case we want to create a class called lager that has this additional method lock okay so the first thing you want to do here is to define a class in es6 we have this keyword class which is a syntactical sugar for creating a constructor function with this we can define a class logger note that the first letter of every word in a class should be uppercase this is the Pascal case convention that we use for naming classes so class logger we got a code block now we need to move this log function inside this logger class so cut paste it here now we have an error because when we define a function inside a class we don't need this function keyword and from now on we refer to this function as a method so when a function is inside a class we say that's a method in that class okay so here we have this logger class now at the end is I'm exporting the log function we're going to export the logger class okay now I want this logger class to have all the capabilities of this event emitter the way we do that is by using the extends keyword that comes in es6 so extends and here we add the name of the parent or the base class so event emitter and with this simple change this logger class will have all the functionality that is defined in event emitter so here when raising this event instead of using this emitter object we're going to use this so in this class we can directly omit or raise events okay and now we no longer need this actual emitter object because we have not used it anywhere in this code so delete we're done with the logger module now back in the app module so here when requiring the logger module we get a class so I'm gonna rename this to logger with capital L that's a class now we create an object so new logger and then to log a message we call logger deadlock now similar to the change that we made in the logger module we no longer need this event a meter object here we want to work directly with this logger object so we're gonna register this listener on this logger object okay so I'm gonna move this code after creating the logger we say hey logger when you raise this message log event I want to execute this code okay and finally you can see we no longer need this van emitter object it's not used anywhere delete now when we run this application we're going to see this message on the console but also because we're using the same logger object for registering an event listener and also raising an event we're going to see this message on the console so note fjs look this is the message on the console and you can see our listener was successfully called so let's quickly recap if you want to raise events in your application to signal that something has happened you need to create a class that extend event emitter with this that class will have all the functionality defined in event emitter but you can also add additional functionality in this case we have the ability to log a message and then inside that class whenever you want to raise an event you use this that emit because this references this longer class itself which extends event emitter so all the methods defined an event emitter will also be part of this class okay and finally in app module again instead of using an instance of event emitter you will use an instance of the custom class that you have defined that extends event emitter hi guys its mosh here thank you for watching my node tutorial I just wanted to let you know that this video you've been watching is part of my complete note course where you will learn everything about node from the basic to the advanced topics if you're serious about learning node I highly recommend you to enroll in my node course because this is much faster than jumping from one tutorial to another it saves you time plus you're going to get a lot of exercises that will prepare you for the real work and also at the end of the course you'll receive a certificate of completion that you can provide your current or future employer so if you want to enroll click on the link in the video description I hope to see you in the course
