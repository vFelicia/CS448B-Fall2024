With timestamps:

00:00 - [Music]
00:03 - react is a JavaScript library for
00:06 - building fast and interactive user
00:08 - interfaces
00:09 - it was developed at Facebook in 2011 and
00:12 - currently it's the most popular
00:14 - javascript library for building user
00:16 - interfaces as you can see on google
00:18 - trends react is dominating the space of
00:21 - libraries and frameworks for building
00:23 - user interfaces the other two players
00:25 - here are angular and view so if you want
00:28 - to expand your job opportunities as a
00:30 - front-end developer you should have
00:32 - react on your resume at the heart of all
00:35 - react applications are components a
00:37 - component is essentially a piece of the
00:39 - user interface so when building
00:41 - applications with react we build a bunch
00:44 - of independent isolated and reusable
00:46 - components and then compose them to
00:48 - build complex user interfaces every
00:51 - react application has at least one
00:53 - component which we refer to as the root
00:55 - component this component represents the
00:58 - internal application and contains other
01:00 - child components so every react
01:02 - application is essentially a tree of
01:05 - components if you have worked with
01:06 - angular 2 or higher it should sound
01:08 - familiar
01:09 - here is an example let's imagine we want
01:12 - to build an application like Twitter we
01:14 - can split this page into components like
01:16 - navbar profile trends and feet here's a
01:23 - representation of these components in a
01:25 - tree so audit elf we have app and below
01:28 - that we have navbar profile trends and
01:31 - feet now feet includes several tweet
01:34 - components each tweet component can
01:36 - include a light component which we can
01:39 - reuse on other pages or even in
01:41 - different applications so as you see
01:43 - each component is a piece of UI we can
01:46 - build these components in isolation and
01:48 - then put them together to build complex
01:51 - UIs in terms of implementation a
01:54 - component is typically implemented as a
01:56 - JavaScript class that has some state and
01:59 - render method the state here is the data
02:02 - that we want to display when the
02:04 - component is rendered and the render
02:06 - method as you can tell is responsible
02:08 - for describing what the UI should look
02:11 - like
02:11 - the output of this render method is a
02:14 - react element which is a simple plain
02:16 - JavaScript object that maps to a Dom
02:19 - element it's not a real Dom element is
02:22 - just a plain JavaScript object that
02:24 - represents that Dom element in memory so
02:28 - react keeps a lightweight representation
02:30 - of the Dom in memory which were referred
02:33 - to as the virtual Dom unlike the browser
02:36 - or the real Dom this virtual DOM is
02:39 - cheap to create when we change the state
02:41 - of a component we get a new react
02:44 - element react will then compare this
02:46 - element and his children with the
02:48 - previous one it figures out what is
02:50 - changed and then it will update a part
02:53 - of the real Dom to keep it in sync with
02:56 - the virtual Dom so that means when
02:58 - building applications we react unlike
03:00 - vanilla JavaScript or jQuery we no
03:03 - longer have to work with the Dom API in
03:05 - browsers in other words we no longer
03:08 - have to write code in query and
03:10 - manipulate the Dom or attached event
03:13 - handlers to Dom elements we simply
03:15 - change the state of our components and
03:17 - react will automatically update the Dom
03:20 - to match that state and that's exactly
03:22 - why this library is called react because
03:25 - when the state changes react essentially
03:28 - reacts to the state change and updates
03:31 - the dumb one of the questions that I
03:33 - often get is react or angular well both
03:37 - react and angular are similar in terms
03:39 - of their component based architecture
03:41 - however angular is a framework or a
03:44 - complete solution while react is a
03:46 - library it only takes care of rendering
03:49 - the view and making sure that the view
03:51 - is in sync with the state let's all
03:54 - react does nothing less nothing more for
03:56 - this very reason react has a very small
03:59 - API to learn so when building
04:01 - applications with react we need to use
04:03 - other libraries for things like routing
04:06 - or calling HTTP services and so on but
04:09 - this is not necessarily a bad thing
04:10 - because you get to choose the libraries
04:13 - that you prefer as opposed to being
04:15 - fixed with what angular gives you which
04:17 - often breaks from one version to another
04:19 - so that's all about react next we're
04:22 - going to set up our development
04:23 - environment
04:25 - [Music]

Cleaned transcript:

react is a JavaScript library for building fast and interactive user interfaces it was developed at Facebook in 2011 and currently it's the most popular javascript library for building user interfaces as you can see on google trends react is dominating the space of libraries and frameworks for building user interfaces the other two players here are angular and view so if you want to expand your job opportunities as a frontend developer you should have react on your resume at the heart of all react applications are components a component is essentially a piece of the user interface so when building applications with react we build a bunch of independent isolated and reusable components and then compose them to build complex user interfaces every react application has at least one component which we refer to as the root component this component represents the internal application and contains other child components so every react application is essentially a tree of components if you have worked with angular 2 or higher it should sound familiar here is an example let's imagine we want to build an application like Twitter we can split this page into components like navbar profile trends and feet here's a representation of these components in a tree so audit elf we have app and below that we have navbar profile trends and feet now feet includes several tweet components each tweet component can include a light component which we can reuse on other pages or even in different applications so as you see each component is a piece of UI we can build these components in isolation and then put them together to build complex UIs in terms of implementation a component is typically implemented as a JavaScript class that has some state and render method the state here is the data that we want to display when the component is rendered and the render method as you can tell is responsible for describing what the UI should look like the output of this render method is a react element which is a simple plain JavaScript object that maps to a Dom element it's not a real Dom element is just a plain JavaScript object that represents that Dom element in memory so react keeps a lightweight representation of the Dom in memory which were referred to as the virtual Dom unlike the browser or the real Dom this virtual DOM is cheap to create when we change the state of a component we get a new react element react will then compare this element and his children with the previous one it figures out what is changed and then it will update a part of the real Dom to keep it in sync with the virtual Dom so that means when building applications we react unlike vanilla JavaScript or jQuery we no longer have to work with the Dom API in browsers in other words we no longer have to write code in query and manipulate the Dom or attached event handlers to Dom elements we simply change the state of our components and react will automatically update the Dom to match that state and that's exactly why this library is called react because when the state changes react essentially reacts to the state change and updates the dumb one of the questions that I often get is react or angular well both react and angular are similar in terms of their component based architecture however angular is a framework or a complete solution while react is a library it only takes care of rendering the view and making sure that the view is in sync with the state let's all react does nothing less nothing more for this very reason react has a very small API to learn so when building applications with react we need to use other libraries for things like routing or calling HTTP services and so on but this is not necessarily a bad thing because you get to choose the libraries that you prefer as opposed to being fixed with what angular gives you which often breaks from one version to another so that's all about react next we're going to set up our development environment
