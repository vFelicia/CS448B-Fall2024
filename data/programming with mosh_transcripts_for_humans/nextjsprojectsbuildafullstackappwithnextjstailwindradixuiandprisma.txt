With timestamps:

00:02 - welcome back to the second part of the
00:04 - ultimate nextjs Series in part one we
00:07 - covered the essential concept to build
00:09 - full stack applications with nextjs and
00:11 - typescript in this part we'll take
00:14 - everything you have learned and apply it
00:16 - to a real word project we'll build and
00:18 - deploy a full stack production grade
00:21 - issue tracker this project includes all
00:23 - the common features you find in modern
00:26 - applications dashboard with charts
00:29 - filtering sorting and pagination forms
00:33 - with client side validation user
00:35 - authentication and access control model
00:38 - dialog boxes and toast notifications and
00:41 - much much more by the end of the course
00:43 - you will have a fast responsive fully
00:46 - functioning application in the cloud
00:48 - that you can share with your friends or
00:49 - potential employers to get your dream
00:51 - job we'll build this with a cutting is
00:54 - Tex stack for building modern
00:56 - applications nextjs typescript Tailwind
01:00 - Rix UI Prisma and NEX off I'll break
01:03 - down every line of code so you will
01:06 - grasp the whats the wise and the house I
01:09 - will also show you how to structure your
01:11 - projects effectively how to write clean
01:14 - professional quality code that aligns
01:16 - with industry standards and best
01:18 - practices how to use shortcuts to boost
01:21 - your coding speed and overall
01:23 - productivity and how to think like a
01:25 - software engineer and build software in
01:28 - a structured and methodic way this
01:31 - course has everything you need to become
01:33 - a professional nextjs developer so if
01:36 - you follow along you will gain the
01:38 - practical skills and knowledge to build
01:40 - real projects with confidence I'm m
01:42 - hamadani a software engineer with over
01:44 - 20 years of experience and I've taught
01:47 - Millions how to code and become
01:49 - professional software Engineers through
01:50 - my YouTube channel and online school
01:53 - code withm mar.com so are you ready to
01:55 - jump start your career as a next year
01:57 - developer then let's jump in and gu
02:01 - [Music]
02:10 - started all right so what exactly do you
02:13 - need to take this course as I mentioned
02:15 - in the introduction this course is the
02:17 - second part of my ultimate nextjs Series
02:20 - so ideally you should have watched the
02:22 - first part or at least know the basics
02:24 - of building applications with nextjs and
02:26 - typescript more specifically you need to
02:29 - know the basics of client and server
02:31 - components routing building apis
02:34 - database integration with Prisma and
02:37 - authentication with next off now in this
02:40 - course we'll heavily use Tailwind for
02:42 - styling our application so you need to
02:44 - know the basics of Tailwind as well if
02:47 - you're unfamiliar with these topics I
02:49 - highly recommend you to go back and
02:50 - start from part one otherwise you might
02:53 - find this course a little bit
02:58 - challenging
03:02 - now I've created a GitHub repository for
03:04 - the project we're going to build in this
03:06 - course so go to my GitHub account mh-
03:09 - hamadani and search for issue tracker
03:11 - it's right here in this repository we
03:14 - have the complete source code for the
03:16 - project we're going to build and also
03:19 - there is a separate commit for each
03:21 - lesson so as you're following the
03:23 - lessons if something doesn't work you
03:25 - can go and find that commit all these
03:27 - commits are named exactly like our
03:29 - lessons so if something doesn't work
03:31 - look at that comit to compare your code
03:33 - with
03:39 - mine now before we dive in let's talk
03:42 - about how to make the most out of this
03:44 - course there are two ways you can take
03:46 - this course some students prefer to code
03:49 - along with me and that's perfectly fine
03:51 - but I have meticulously edited these
03:54 - videos to take out all the unnecessary
03:56 - time consuming segments so everything is
03:58 - quick and to the point Point otherwise
04:00 - this 7-hour course would end up being 10
04:03 - hours or longer so if you're not a
04:05 - typing ninja you might need to hit the
04:07 - pause button a few times to keep up now
04:09 - here's another way to go about it and
04:12 - that's my recommendation I would say
04:14 - while watching each lesson don't do any
04:16 - coding instead watch closely take some
04:19 - quick notes and then after each lesson
04:22 - give it a shot on your own in my opinion
04:24 - this is a better way to learn because
04:26 - you're not just copying what I do you're
04:28 - thinking on your own and that makes the
04:30 - info stick
04:33 - [Music]
04:38 - better A lot of my students ask me msh I
04:41 - don't know how to start and finish a
04:43 - project so in this lesson I'm going to
04:45 - show you a road map that helps us plan
04:47 - our projects effectively this road map
04:50 - gives us a clear path and helps us
04:52 - decide what features to build
04:55 - first so before we get into the
04:57 - specifics let's classify our are
04:59 - features into two categories essential
05:02 - or core features and advanced or nice to
05:06 - have features this classification will
05:08 - help us prioritize and build our issue
05:11 - tracker or any project step by step so
05:14 - what are the essential or core features
05:17 - of an issue tracker I mean the absolute
05:19 - mus haves well the most fundamental
05:22 - feature is the ability to create an
05:24 - issue because that's the primary purpose
05:26 - of an issue tracker to create and Tackle
05:29 - issues right so we should build that
05:31 - feature first once we build that feature
05:33 - the next step is to allow the user to
05:35 - view details of individual issues so
05:38 - they can better understand the problem
05:40 - and after that we want to allow our
05:42 - users to update or delete an issue once
05:45 - we build these features then we can
05:47 - gradually enhance our application by
05:49 - adding more advanced features based on
05:51 - our project's needs so we will Implement
05:54 - features like user authentication
05:56 - assigning issues to users sorting and
05:59 - filtering issues pagination and
06:01 - dashboard now here's the key when
06:03 - building this application we're going to
06:05 - focus on one feature at a time so we're
06:08 - not going to get distracted with the
06:10 - complexity of the entire project also
06:12 - when building each feature our goal is
06:15 - not to come up with a perfect solution
06:17 - right away there's no such thing as
06:19 - perfect in software being a
06:21 - perfectionist wastes a lot of your time
06:23 - you'll spend hours and hours thinking
06:25 - about that perfect solution just to
06:28 - discover that it has flawed
06:30 - so we want to start coding right away
06:32 - and come up with a working solution once
06:34 - we have a working solution then we'll
06:36 - refine and improve our code step by step
06:39 - this is called refactoring okay our
06:42 - feature road map is set our journey is
06:44 - clear so let's set up our development
06:46 - environment and get
06:49 - [Music]
06:54 - started all right now let's talk about
06:56 - setting up our development environment
06:58 - in this course course just like my other
07:00 - courses I'll be using visual studio code
07:02 - or vs code you're welcome to use your
07:05 - preferred editor but if you want to use
07:07 - vs code I want you to install these
07:09 - extensions so head over to extensions
07:11 - panel and search for
07:15 - es7 it's this extension right here es7
07:19 - plus react Redux and react native with
07:22 - this extension we can quickly generate
07:24 - react components it's very handy the
07:27 - next extension we're going to use is
07:31 - typescript it's this one right here
07:34 - JavaScript and typescript nightly the
07:36 - next one is
07:39 - Tailwind Tailwind it's this one right
07:42 - here Tailwind CSS intelligence this
07:45 - gives us autoc completion when using
07:47 - Tailwind classes and the last one is
07:54 - Prisma so Prisma with this extension we
07:57 - get syntax highlighting and and autoc
07:59 - completion when creating Prisma models
08:02 - so make sure you have these extensions
08:04 - before moving on to the next
08:07 - [Music]
08:12 - lesson now to create our project open up
08:15 - a terminal window now I'm going to go to
08:18 - my desktop Now to create a nextjs
08:21 - project we run npx create next app
08:25 - version
08:27 - 13.4.1 19 make sure to use the same
08:30 - version so everything I show you in
08:32 - these videos work the same way on your
08:34 - machine let's go
08:36 - ahead let's proceed with the
08:38 - installation of this
08:40 - package now we should give our project a
08:42 - name I'm going to call it isio Das
08:45 - tracker and then we'll accept all the
08:48 - default values for these questions so
08:50 - we're going to use typescript as well as
08:53 - eslint and Tailwind we're not going to
08:56 - use the source directory and we're going
08:58 - to use the new new app router and the
09:01 - final question we don't care about
09:03 - customizing the default import Alias
09:06 - let's go
09:07 - ahead our project is created so let's C
09:11 - into this folder issue tracker and run
09:14 - npm run
09:16 - Dev all right our project is hosted at
09:19 - Local Host Port
09:21 - 3000 here's what we get beautiful now
09:24 - let's open this project in vs code so
09:27 - here in vs code first we have to do a
09:29 - little bit of cleanup so let's go to our
09:31 - app directory and open our homepage we
09:35 - don't care about any of the markup here
09:37 - so let's simplify things I'm going to
09:40 - delete all the mark
09:43 - off where is the end right here and add
09:48 - a simple div and here we say hello world
09:53 - we don't need the import statement on
09:54 - the top either so here's what we get now
09:58 - we have this weird background color
10:00 - because of the gradient applied to our
10:02 - body element so let's go to vs code
10:06 - we're going to go to global. CSS in this
10:10 - file we're going to remove a couple of
10:12 - custom CSS properties one is background
10:15 - start RGB and the other is background
10:17 - end
10:19 - RGB and then here in the body element we
10:22 - remove the background color with that
10:26 - here's what we get looks good and now we
10:29 - make our first commit so we go to our
10:32 - source control panel and make a commit
10:35 - and here we say initial commit now at
10:38 - this level I expect you to be familiar
10:40 - with Git and GitHub if not I highly
10:43 - recommend you to watch my 1 hour YouTube
10:45 - tutorial on this topic I also have a
10:47 - comprehensive course on my website if
10:49 - you want to master git and GitHub so
10:52 - let's make our first
10:54 - commit good all right we're done with
10:56 - this step let's move on to the next
10:58 - lesson
10:59 - [Music]
11:05 - all right now we're going to build a
11:07 - navigation bar so here in the app
11:09 - directory let's add a new file called
11:13 - navb bar.
11:14 - TSX now we're not going to put this into
11:17 - a components directory because as I
11:19 - explained in the first part of the
11:20 - course in nextjs 13 with the new app
11:23 - router we don't have to put all our
11:25 - components into a components directory
11:28 - instead we we can collocate our
11:30 - components with the pages or layouts
11:32 - where they are used in this case our
11:35 - navigation bar is not a reusable
11:37 - component the only place where we need
11:39 - it is in our layout so I put it right
11:41 - next to our layout now let's create a
11:45 - new component so we type RAF CE this is
11:48 - one of the shortcuts that come with the
11:50 - es7 extension that we installed at the
11:52 - beginning of the course let's press
11:54 - enter so here we have a navigation bar
11:58 - now let's change change the div element
12:00 - to nav so it's more sematic now in this
12:04 - navigation bar first we want to have our
12:06 - logo so we wrap it with a link component
12:09 - that is defined in the next SL link
12:13 - package when we click on the logo we
12:15 - should go to the homepage so we set href
12:17 - to the root for now I don't want to add
12:20 - a logo so I just want to type
12:22 - logo now right after that we want to add
12:26 - our navigation links so we add an on
12:29 - order list inside this we want to have
12:32 - two list items so Li * 2 tab beautiful
12:37 - now once again we're going to use the
12:39 - link component our first link is going
12:41 - to be our dashboard so let's set HRA to
12:45 - the root as well and our second link is
12:48 - going to be the issues page so here we
12:52 - set hf2 slash isues now before going
12:56 - further let's add our navigation bar to
12:58 - our lay layout so we go to our layout
13:01 - file and add our nav bar inside the body
13:06 - element so nav
13:08 - bar now I would prefer to wrap our
13:11 - children which is going to be a page
13:13 - inside the main element that makes our
13:17 - Pages more
13:19 - semantic good back in the browser here's
13:22 - what we get so we have the logo followed
13:24 - by dashboard and issues now we want to
13:27 - lay this out hard horizontally so back
13:30 - to our nav bar we have to make this nav
13:33 - element a flex container so we set class
13:36 - name to
13:37 - flex now our logo and list items are
13:41 - laid out horizontally and that means
13:44 - when we have a flex container our direct
13:46 - children are laid out horizontally in
13:49 - this case the logo and the UL element
13:52 - but inside the UL element we don't have
13:54 - a flex container and that is why the
13:57 - dashboard and issues are laid out
14:00 - vertically so to lay these out
14:02 - horizontally as well we should apply the
14:05 - flex class on the URL
14:09 - element good now these items are so
14:12 - close to each other so to give them some
14:15 - space we apply another tailb class that
14:18 - is
14:19 - space-x followed by a number in this
14:22 - case I'm going to go with six here's
14:25 - what we get so we have some space
14:27 - between the children or are our outer
14:29 - Flex container now we need to apply the
14:32 - same class to our unordered list so
14:37 - here's our Ur let's give it space
14:41 - X-6 that looks better now let's add a
14:44 - border below our navigation bar so we
14:48 - give our nav element the class of border
14:51 - dasb that is short for
14:54 - bottom that's better now to separate our
14:57 - navigation bar from the main page
15:00 - content we should give it a bottom
15:02 - margin so we add one more class here
15:04 - that is
15:08 - mb-5 I think that looks good next let's
15:11 - give our navigation bar a horizontal
15:13 - padding so we give it a padding X of
15:17 - let's say
15:18 - five that looks good now our navigation
15:21 - bar is too narrow so to increase the
15:24 - height we apply another class here
15:27 - h-14
15:30 - that looks good but our items are
15:32 - positioned on the top so to put them in
15:34 - a center we apply another class here
15:37 - items Dash Center take a look that looks
15:41 - good so we got the basic layout working
15:44 - next we need to replace our logo text
15:46 - with a beautiful icon and for that we're
15:49 - going to use the react icons Library so
15:52 - search for react icons you will find
15:54 - this page to use this Library first we
15:58 - have to install
15:59 - react icons so here in the terminal
16:01 - let's install react D icons version
16:08 - 4.1.0 beautiful now back to this website
16:12 - we want to have a bug icon as our logo
16:15 - so let's search for bug we have various
16:18 - shapes of bugs in different libraries
16:20 - I'm going to pick the first one AI fill
16:24 - bug now back to our navbar we import
16:28 - this
16:29 - class from react D icons SL AI because
16:34 - this component is defined in the AI
16:38 - library now let's replace our logo with
16:41 - AI fill
16:44 - bug here's what we get looks beautiful
16:47 - now I want to apply a hover effect on
16:50 - these navigation links so we want to
16:52 - make the text slightly lighter and when
16:54 - we hover over these links we want to
16:56 - make it a little bit darker as an
16:58 - example let's apply a few classes on our
17:01 - first navigation link so we said class
17:04 - name two the first class is text- zinc
17:08 - d500 this makes our text Medium gray
17:12 - here's what we get now to apply a hover
17:15 - effect we use the hover selector and
17:18 - change the text color to zinc
17:23 - 800 now take a look that looks good now
17:27 - I want to apply a trans ition so the
17:29 - change is smoother to do that we add
17:33 - another class here that is transition
17:35 - Das colors now take a look all right the
17:40 - transition is smotherer beautiful now we
17:43 - have to apply the same classes on this
17:46 - other navigation link and this is
17:48 - repetitive so let me show you a better
17:50 - way instead of defining our navigation
17:52 - links here we're going to Define them in
17:54 - an array then we will map that array to
17:56 - a bunch of list items
17:59 - so let's declare an array call
18:02 - links now each element in this array
18:04 - should be an object with two properties
18:06 - a label like
18:09 - dashboard and an
18:12 - href let's duplicate
18:14 - this and our second link should be
18:19 - issues all
18:22 - right now here we map our links
18:26 - array we map each link to a link
18:31 - component so I'm going to grab this
18:34 - piece of
18:36 - code cut it and then paste it
18:41 - here now each link should have a
18:45 - key we set the key to link. HRA because
18:50 - that value uniquely identifies each link
18:53 - now we no longer need these list items
18:57 - so let's delete them
18:59 - also let me put this on a new line so we
19:00 - can see things clearly so each link
19:03 - should have a key and a class this is
19:06 - the only place where we set these
19:08 - classes so there is no duplication in
19:10 - our
19:12 - code next we set the href prop and here
19:16 - we have to set the value dynamically we
19:19 - set it to link.
19:21 - href and similarly we should add the
19:24 - label dynamically so we add link.
19:28 - label now both our navigation links are
19:31 - dark gray and when we hover over them
19:34 - they become black beautiful so our
19:36 - navigation bar is in a good shape now
19:39 - before going further we have to make a
19:40 - commit to our repository so we go to the
19:43 - source control panel and make a commit
19:46 - and say build the nav
19:57 - bar all right now let's see how we can
19:59 - style the active or the currently
20:01 - selected Link in the navigation bar to
20:04 - do that first we have to create the
20:06 - issues page so back to our project here
20:10 - in the app folder let's add a new folder
20:13 - called
20:14 - issues then we add our page
20:19 - file next we create a react component
20:23 - and call it issues page with this if we
20:27 - click on the issues link we see the
20:29 - issues page beautiful but we want to
20:31 - highlight the active link in the
20:33 - navigation bar to do that we have to go
20:36 - back to our Navar component in this
20:39 - component we have to use one of the
20:41 - hooks that comes with nextjs to get the
20:43 - current pass or the current route that
20:47 - is use pass name use pass name now the
20:51 - auto comption is not picking it up so we
20:53 - have to manually import it on the top so
20:56 - on the top we import
20:59 - use P name make sure to spell it
21:02 - properly we import this from next slash
21:06 - navigation next we call this hook to get
21:11 - the current path now because in this
21:14 - component we are using this hook and
21:17 - this Hook is dependent on browser apis
21:19 - we have to convert this component to a
21:21 - client component because as I told you
21:23 - in part one we can only access browser
21:26 - apis in client components right so on
21:29 - the top we add the use client directive
21:34 - now before going further let's make sure
21:36 - that our application is working up to
21:38 - this point so let's do a console log and
21:43 - log the current pass to make sure we get
21:46 - the right value so let's bring up the
21:49 - console we're currently on the issues
21:51 - page lovely now if you go to the
21:53 - dashboard we see the root path okay so
21:57 - let's let's remove this lock statement
22:00 - now down here where we render our links
22:03 - we want to apply a class dynamically if
22:06 - the HF of the link that we rendering
22:08 - equals the current path instead of Tex
22:11 - sync 500 we want to render Tex sync 900
22:15 - which is darker so here we have to wrap
22:19 - this string in braces next we need to
22:23 - replace these quotation marks with a
22:25 - back tick so we can add stuff Dynam
22:28 - dally so we select the first quotation
22:31 - mark then we press command and D on Mac
22:34 - or control and D on Windows now we have
22:37 - selected both these quotation marks we
22:39 - have multic cursor editing so in one go
22:42 - we can replace both of them with a back
22:45 - tick good now we press escape to cancel
22:49 - multic cursor editing now here we add a
22:52 - dollar sign followed by braces inside
22:54 - braces we type our condition we say if
22:57 - link
22:58 - .h equals the current path then we
23:02 - render text zinc
23:05 - 900 otherwise we render text zinc
23:11 - 500 so let's grab this class from here
23:15 - and move it inside these quotation marks
23:20 - Let's test our application so back in
23:22 - the browser we're currently on the
23:24 - dashboard and the dashboard link is
23:26 - darker if you go to the issues page the
23:29 - issues link becomes darker beautiful so
23:33 - this is a simple way to style the active
23:35 - link in the navigation bar now as our
23:38 - applications get more complex we might
23:40 - end up with complicated conditions here
23:42 - and tracking what classes are rendered
23:45 - can be a little bit difficult in those
23:47 - cases we can use a very popular package
23:49 - called class names so bring up the
23:52 - terminal and install class names version
23:57 - 2. .
23:59 - 3.2 good now on the
24:04 - top first we import class
24:07 - names from class
24:10 - names now this is a function that we
24:13 - call and give it an object in this
24:16 - object we specify the classes that we
24:18 - want to render and the conditions that
24:20 - they should be rendered this function
24:22 - will then return a string that contains
24:24 - the classes we want to render let me
24:26 - show you how this works
24:28 - so down here let's remove everything
24:31 - inside the
24:36 - braces so here's what we have now here
24:39 - we call class names and give it an
24:42 - object in this object we add one or more
24:45 - key value pairs our keys should be our
24:48 - CSS classes like text zinc
24:52 - 900 and the values should be either true
24:55 - or false if we set this to true this
24:58 - class will always be rendered now in
25:00 - this case we want to render this class
25:02 - only if link. href equals the current
25:06 - path right now similarly we add another
25:09 - key value pair that is text zinc
25:13 - 500 and we want to render this if link.
25:17 - HF does not equal current
25:21 - path let's add one more that is hover
25:25 - text zinc 800
25:28 - and transition colors we want to render
25:31 - these classes at all times so we set
25:34 - this to true now look at the result we
25:37 - no longer have string manipulation and
25:40 - our code is cleaner we can easily look
25:41 - at this code and see what classes are
25:44 - rendered under what conditions Let's
25:46 - test our application one more time to
25:48 - make sure we haven't broken anything so
25:51 - we go to the dashboard dashboard is
25:53 - darker we go to the issues page the
25:55 - issues link is darker beautiful so we're
25:58 - done with this step and now it's time to
26:00 - make it commit to our repository so here
26:03 - I'm going to say style the active link
26:06 - in the nav
26:10 - [Music]
26:15 - bar in this section we're going to use
26:17 - MySQL for storing our data in case you
26:20 - don't know MySQL is a very popular
26:23 - database engine there are of course many
26:25 - other database engines out there like
26:26 - postgress SQL server mongodb and so on
26:30 - if you prefer a different database
26:32 - engine that's totally fine but I would
26:34 - suggest you to use MySQL in this section
26:36 - so you can easily follow the lessons so
26:40 - head over to myql.com go to downloads
26:45 - now at the bottom of this page you'll
26:48 - find this link MySQL Community version
26:50 - which is absolutely
26:52 - free then go to mySQL Community server
26:56 - and on this page page download the
26:59 - latest version for your operating system
27:01 - now for Mac keep in mind that we have
27:03 - two DMG files for different CPU
27:06 - architectures we have one for arm the
27:08 - other for x86 so if you're a Mac User
27:11 - depending on the type of your Mac you
27:13 - have to find the right DMG file once you
27:16 - download this you will get an
27:17 - installation wizard just click through
27:19 - it's very easy to set up just remember
27:22 - as part of that you'll be asked to enter
27:24 - a root password so root is like the
27:27 - admin user for our database engine so
27:30 - whatever password you use for the root
27:31 - user keep a note of that because in the
27:34 - next lesson we're going to come back to
27:35 - it okay now this is just a database
27:38 - server or database engine we also need a
27:41 - tool for viewing our database now MySQL
27:44 - gives you a tool called MySQL workbench
27:47 - again it's free I don't like this tool
27:50 - it's ugly so in this section I'll be
27:52 - using a tool called datag gripe from
27:55 - jetb brains.com I absolutely love this
27:58 - tool but you have to pay to use it
28:00 - having said that you can try it for free
28:02 - for 30 days so head over to jetb
28:05 - brains.com datag grip and download the
28:07 - latest
28:09 - [Music]
28:14 - version all right now we're going to
28:16 - install Prisma to allow our application
28:18 - to interact with our database so here in
28:21 - the terminal let's install prismo
28:24 - version
28:26 - 5.3.1
28:28 - good next we run npx Prisma in it to
28:33 - initialize Prisma in this
28:36 - project all right I told you in part one
28:39 - that when we run this command two things
28:41 - happen let's quickly review first Prisma
28:45 - creates this Prisma folder and here we
28:48 - have this Prisma schema file in this
28:51 - file first we have to change our
28:53 - provider from postgress to mySQL or if
28:57 - you if you prefer to use postgress or
28:59 - any other database engines that's
29:00 - totally fine just make sure that you
29:02 - have set the right provider here next we
29:05 - need to update our database URL which is
29:08 - an environment variable stored in this
29:10 - en file in the root of the project so
29:15 - let's go here first we change the
29:17 - protocol to
29:18 - mySQL then we change the root username
29:22 - in MySQL that is root next we set our
29:25 - password after the colon
29:29 - then we change the port for MySQL we
29:31 - have to use
29:34 - 3306 then we change our database name to
29:37 - issue Das tracker or whatever you prefer
29:41 - now we don't need this query parameter
29:44 - let's remove it we're done with setting
29:46 - up Prisma so let's make a commit and
29:49 - move on to the next step so setup
29:56 - Prisma
30:01 - all right to store issues in our
30:03 - database first we have to create a
30:05 - Prisma model so we go to our Prisma
30:08 - schema file and Define a new model
30:10 - called issue as a reminder make sure to
30:13 - use the Pascal naming convention so we
30:16 - capitalize the first letter of each word
30:19 - and also make sure to use singular names
30:22 - so we don't want to call this model
30:23 - issues just a singular name like
30:26 - issue now our issue is going to have
30:29 - various Fields or properties at this
30:31 - point we want to add only the absolute
30:33 - essential ones so right now we are not
30:35 - going to worry about assigning issues to
30:37 - users and that means we're not going to
30:39 - create a relationship between the issue
30:42 - model and the user model okay so we're
30:44 - going to add the core fields or
30:46 - properties what are those well every
30:49 - issue needs an ID the type of ID should
30:52 - be an integer now here we use the ID
30:55 - attribute to specify that this is an ID
30:59 - column we use the default attribute to
31:01 - give it a default value here we use the
31:04 - autoincrement function so every time a
31:07 - record is inserted into our table our
31:09 - database engine automatically assigns an
31:11 - ID to that record next we add the title
31:14 - field this has to be a string now when
31:17 - we use MySQL the type of the related
31:20 - column in our database is going to be
31:22 - varar of 191 now in case you are not
31:26 - familiar with MySQL or databases in
31:29 - general varar means variable character
31:33 - so varar of 191 means we can store
31:36 - string values up to 191 characters in
31:40 - these columns now 191 is kind of a weird
31:42 - value so here I want to overwrite the
31:45 - default convention and say I want to
31:47 - store a string up to 255 characters to
31:52 - do that we use the DB attribute to
31:55 - specify the type of underling column in
31:58 - our database here we're going to use
32:00 - varar of
32:03 - 255 next we add the description field
32:06 - this also has to be a string now again
32:09 - the type of this column is going to be
32:11 - varar of 1 191 but we want to have
32:14 - really long descriptions so for that we
32:17 - use db. text now every issue has to have
32:21 - a status and the status can be one of
32:23 - three values open in progress and closed
32:27 - we can use an enom to represent that so
32:30 - here we Define an enum called status an
32:34 - enum is a set of constant values so here
32:37 - we're going to add three values open in
32:40 - progress and closed and by convention we
32:43 - use all capital letters so each value on
32:47 - a separate line and here we don't need
32:49 - to separate them using a comma just
32:51 - remember that enums are supported in
32:54 - MySQL but not necessarily in all
32:56 - database engines so if you use a
32:58 - different provider look at the Prisma
33:00 - documentation to make sure that enom are
33:02 - supported so here we add the status
33:04 - field and set the type to status here we
33:08 - can give it the default value of if you
33:10 - press control and space we can see all
33:14 - the possible values so we set it to open
33:18 - now we want to know when each issue is
33:20 - created the next field we need is
33:23 - created at this has to be a datetime and
33:27 - we give it a default value of here we
33:29 - use the Now function so every time a
33:32 - record is inserted into the issue table
33:35 - the current daytime is inserted into
33:37 - this column we need a similar field that
33:40 - is updated at this also has to be a date
33:43 - time now for the value use a different
33:46 - attribute called updated at with this
33:49 - every time an issue record is updated
33:52 - the database engine automatically
33:53 - updates the value of this column okay so
33:57 - here's our issue model now let's
33:59 - reformat our code so here in the
34:01 - terminal we're run npx Prisma
34:06 - format here's the end result it's
34:08 - beautiful the next step is to create and
34:11 - apply a migration so back in the
34:13 - terminal we run npx Prisma migrate
34:19 - Dev let's give it a name like initial
34:22 - migration or we can be more specific and
34:24 - say create issue
34:29 - good so as you know when we create a
34:32 - migration Prisma creates this migrations
34:35 - folder and for each migration it creates
34:38 - a subfolder that has a timestamp and the
34:41 - name of the migration in this folder we
34:44 - have a migration file and here we have
34:46 - SQL instructions for creating or
34:49 - updating our database schema to match
34:51 - our models for example here we have an
34:54 - instruction for creating a table called
34:56 - issue
34:57 - with these
34:58 - columns all right now let's make sure
35:00 - that our database is migrated properly
35:03 - so I'm going to use data grip you can
35:04 - also use workbench in data grip we
35:07 - create a new project let's call it issue
35:10 - tracker now in this project we go to
35:13 - database Explorer we add a new data
35:18 - source here we select
35:21 - MySQL in this window we make sure that
35:24 - our host is Local Host and the port is
35:28 - 3306 we set the username and the
35:31 - password of the root
35:34 - user and next we set the database to
35:36 - issue Dash tracker or whatever you used
35:39 - earlier now down here let me resize the
35:42 - window look there's a link that says we
35:45 - should update the driver you might have
35:47 - a different link that says install
35:49 - missing driver files so make sure to
35:52 - either install or update the driver good
35:56 - so let's click test
35:59 - connection all right the connection is
36:01 - successful beautiful now click on
36:04 - okay let's expand our database so here's
36:07 - our issue tracker
36:09 - database in this database we have two
36:12 - tables Prisma migrations that keeps
36:15 - track of all the migrations we have run
36:17 - so far and the issue table where restore
36:21 - our
36:22 - issues so we're done with this stab and
36:25 - now it's time to make a commit to our
36:27 - repository so here I'm going to say
36:29 - create the issue
36:36 - [Music]
36:41 - model all right we have a model now to
36:44 - store issues we have to create an API
36:46 - that clients can call so here in the app
36:49 - folder let's add a new folder called
36:53 - API inside the API folder we add a new
36:56 - folder called
36:58 - issues and here we add our route
37:03 - file in this route file we export a
37:06 - function called post that takes a
37:09 - request object of type next request now
37:13 - here first we call request the Json this
37:17 - returns a promise so we waited to get
37:20 - the body of the request and of course we
37:23 - have to make this function async nothing
37:26 - new so far we covered all of this in
37:27 - part one so if you're not sure what I'm
37:29 - doing you have to go back and start from
37:31 - part one now that we have the request
37:33 - body before we create an issue first we
37:36 - have to validate our request to make
37:38 - sure it doesn't have bad data now for
37:40 - data validation we use zot so back in
37:43 - the terminal let's install Zod version
37:47 - 3.22.20
37:57 - Z from
37:59 - Zod next we call z. object and give it
38:04 - an object that defines the shape of the
38:06 - object and the body of our request so
38:09 - let's quickly go back to our Prisma
38:12 - schema file look in this issue model we
38:16 - only need values for the title and
38:18 - description because all the other fields
38:20 - have a default value the ID is
38:22 - automatically generated by the database
38:24 - and here we have assigned a default
38:26 - value to these other fields so we only
38:30 - need the title and description and the
38:33 - body of the request so back to our route
38:36 - file here we have two properties title
38:39 - this has to be a string with a minimum
38:42 - of one character and a maximum of 255
38:47 - characters similarly we add description
38:51 - this also has to be a string with a
38:53 - minimum of one character now now this
38:56 - returns a schema we store it here now in
39:00 - more complex applications we are going
39:02 - to have different schemas for different
39:05 - operations so in those situations we can
39:07 - be more specific in terms of naming here
39:10 - for example we can call this create
39:12 - issue schema okay now that we have this
39:16 - schema we can use it to validate the
39:19 - body of the request so here we call
39:22 - create issue schema. save pars and
39:27 - give it the body
39:29 - object now this returns an
39:32 - object we call it
39:34 - validation next we check if validation
39:38 - is not
39:40 - successful we return the next
39:44 - response and here we include validation.
39:47 - error. errors now for this status what
39:51 - code should we use 400 that means bad
39:55 - request meaning the C client sent
39:57 - invalid data otherwise if the request is
40:00 - valid we should store this issue in our
40:02 - database to do that we have to import
40:05 - Prisma client now in part one I
40:07 - explained that we should have a single
40:09 - instance of the Prisma client and I
40:11 - explained the proper way to create that
40:13 - single instance so back to our browser
40:16 - let's search for nextjs Prisma client
40:19 - you will find this
40:21 - page best practice for instantiating
40:24 - Prisma client with nextjs
40:27 - on this page we have sample code for
40:30 - creating an instance of Prisma client
40:33 - we're going to copy all this code
40:36 - now back to our project we go to our
40:40 - Prisma folder here we add a new file
40:44 - called client. TS and paste all that
40:47 - code here now if this looks complicated
40:50 - don't worry about it you never have to
40:52 - touch it you never have to maintain it
40:54 - all this code is doing is creating a
40:56 - single instance of prismo client it
40:58 - ensures that we don't have multiple
41:00 - instances running okay so we have a
41:03 - prismo client now back to a route file
41:07 - on the top we import Prisma from at
41:12 - which represents the root of our project
41:14 - SL Prisma client with this Prisma client
41:19 - we can insert a new issue in our
41:22 - database so here we call Prisma issue.
41:26 - create we pass an object here we set
41:29 - data to an object with two properties
41:31 - title which we set to body the title and
41:35 - description which we said to body dot
41:39 - description okay now we await the call
41:43 - to get the new
41:45 - issue and finally we return this to the
41:48 - client so we return and next
41:52 - response with the new issue now
41:56 - optionally we can set the status to 2011
42:00 - which means an object was created so
42:02 - we're done with the API now let's test
42:04 - it so let's bring up Postman and create
42:08 - a new request here we're going to send a
42:10 - post request
42:12 - to Local Host Port 3000 SL API SL isues
42:20 - here on the body tab we select raw and
42:23 - then Json
42:26 - let's pass a Json object first I'm going
42:28 - to set title to an M2 string and leave
42:31 - out the description property let's make
42:33 - sure our date of validation logic is
42:35 - working so
42:37 - send take a
42:40 - look all right we have a bad request and
42:43 - here in the response we have our error
42:45 - object beautiful so now let's send a
42:48 - valid issue I'm going to set the title
42:50 - to first
42:52 - issue and description to description of
42:57 - the first
42:59 - issue
43:01 - send now let's look at the response the
43:05 - status is 2011 and here's the issue that
43:07 - was created as you can see the ID was
43:10 - generated by the database and it's set
43:11 - to one now we can go back to data grip
43:15 - and refresh this table to make sure that
43:18 - our issue is stored in this table
43:20 - beautiful so let's make a commit and say
43:23 - build an API for creating
43:36 - issues all right to build the new issue
43:39 - page we're going to use radex UI which
43:41 - is a very popular component Library so
43:44 - head over to rui.com now radx comes in
43:47 - two flavors we have Radix themes which
43:50 - are beautifully styled components like
43:53 - the components you see here we have
43:55 - input fields buttons avatars and so on
43:58 - but we also have radic Primitives which
44:01 - are a bunch of unstyled components these
44:04 - components only have Behavior so we have
44:06 - to style it ourselves in this course
44:08 - we're going to use radic themes so back
44:11 - to this page let's click get started now
44:15 - to get started there are number of steps
44:17 - we have to follow first we have to
44:19 - install radx themes so let's copy this
44:23 - line and paste it in the terminal
44:28 - all right now let me show you the
44:30 - version that is installed here so let's
44:32 - go to package.json and search for radic
44:37 - the version that I'm using is
44:39 - 112 all right the second step is to
44:43 - import rad CSS file in our root layout
44:47 - so let's copy this
44:49 - line now we go to our root layout and
44:54 - import this style sheet on the
44:56 - top now the last step is to wrap our
44:59 - entire application inside the theme
45:02 - component that comes with Radix UI so
45:06 - back in our layout file here we import
45:09 - the theme component from radx ui/ themes
45:16 - next we wrap everything inside the body
45:20 - element with our theme
45:24 - component like this
45:26 - now to verify that we have set up
45:28 - everything properly let's go to our
45:30 - issues page so issues SL
45:33 - page and add a button here so on the top
45:36 - we import the button component from Rix
45:42 - ui/ themes now let's add a button
45:46 - here and set the label to new
45:49 - issue all right here's what we get so
45:52 - Radix UI set up properly now before we
45:55 - create the new your page let's make a
45:57 - commit and finish this step so setup
46:00 - Radix
46:06 - [Music]
46:09 - UI all right now we're going to build
46:12 - the new issue page in this lesson our
46:15 - focus is entirely on the look and feel
46:16 - of this page so we're not going to worry
46:18 - about submitting the form or handling
46:21 - validation errors we just want to build
46:22 - a page that has two input Fields okay so
46:26 - let's go back to the documentation of
46:28 - radx UI let's click on this navigation
46:31 - menu look here we have various
46:34 - components for creating layouts like box
46:37 - Flex grade and so on we also have
46:40 - various components for creating
46:41 - topography like text heading and so on
46:45 - and down here we have more full flesh
46:47 - components for example we have a
46:50 - component called text field so here's an
46:54 - example we start with is text field.
46:57 - root now if you want to have an icon
47:00 - like this magnifying glass inside the
47:02 - root component we add a slot and inside
47:05 - the slot we add our icon right after the
47:08 - slot we add a text field. input
47:11 - component in this case we don't care
47:13 - about an icon so all we need is a root
47:16 - and an input component so back to our
47:19 - project here in the issues folder let's
47:22 - add a new
47:23 - folder called new
47:26 - here we have our page
47:30 - file next we create a react
47:33 - component called new issue
47:38 - page on this page we need a text field
47:42 - component now if Auto completion doesn't
47:44 - work properly for you just restart vs
47:46 - code and the problem should go away so
47:49 - we add text field. root and inside that
47:52 - we add text field. input
47:56 - let's give it a placeholder like title
47:59 - now to add a link to this page we go to
48:02 - the issues page so issues slash
48:05 - page earlier we added this button now
48:08 - inside the button we're going to add a
48:11 - link component so we use the link
48:14 - component that is defined in next SL
48:17 - link package note that there is another
48:19 - link component defined in VX UI themes
48:22 - we don't want this one we should pick
48:24 - the one in the next package so we add a
48:27 - link and here we set href to SL isues
48:32 - slne and the label to new
48:36 - issue now back in the browser let's
48:39 - click this button all right we get an
48:41 - error saying cannot access text field.
48:44 - root on the server so because we're
48:46 - building a form and building forms
48:48 - requires user interaction the text build
48:51 - component cannot be rendered on the
48:53 - server so we have to make the new issue
48:55 - page a client component so on the top we
48:59 - add use
49:02 - client now refresh all right here's what
49:05 - we get by default our text input field
49:07 - takes the entire width of the page so to
49:10 - narrow it we can apply a Max WID to its
49:14 - container so here's the containing div
49:17 - we set class name to Max with x large
49:22 - with that here's what we get that looks
49:25 - better
49:26 - now this input field is so close to the
49:28 - left side of the screen so we should
49:30 - apply a padding to our main element so
49:34 - let's go back to our layout
49:36 - file here's our main element here we set
49:40 - class name to p-5 and with that we get a
49:44 - bit of padding here that looks better so
49:47 - here's our text field right after that
49:49 - we want to add a text area again if you
49:52 - look at the documentation you will find
49:54 - the text area area component it's right
49:57 - here it's very easy to use this one is
50:00 - simpler we just add text area and give
50:02 - it a placeholder so back to our page
50:05 - right after our text field we add a text
50:10 - area and give it a
50:13 - placeholder
50:14 - description here's what we get now these
50:17 - two input fields are so close to each
50:18 - other to solve this problem you apply
50:21 - some vertical spacing so back to this
50:24 - page we apply another class here called
50:28 - space-
50:31 - Y-3 that looks better now finally we
50:34 - need to add the submit button so right
50:37 - after our text area we add a button
50:40 - component that is defined in radex
50:43 - UI and here we set the label to submit
50:46 - new
50:48 - issue all right here's what we get so
50:50 - we're done with this step and now it's
50:52 - time to make a commit to our repository
50:55 - so so here we say build the new issue
51:02 - [Music]
51:07 - page one of the great things about Rix
51:09 - UI is that it allows us to easily
51:12 - customize our theme let me show you how
51:14 - to do this so let's go back to our
51:16 - layout file all right look this is where
51:19 - we are using the theme component inside
51:22 - this tag right after the main element we
51:26 - add the theme panel component from radex
51:30 - UI
51:32 - now we get this panel for customizing
51:35 - our theme so as you can see our accent
51:38 - color is set to Blue that is why our
51:40 - buttons blue we can easily change it
51:42 - here and preview the changes in this
51:45 - lesson I'm going to select
51:47 - Violet now we can also change the light
51:50 - or dark mode now for some reason this is
51:53 - not currently working it's a little bit
51:55 - flaky key but don't worry about it here
51:57 - we can also change the radius of our
51:59 - components for example currently the
52:01 - radius is medium we can set it to none
52:04 - now we have sharp Corners here or we can
52:06 - set it to full we have round corners I'm
52:09 - going to select
52:11 - medium now down the bottom we can copy
52:14 - this
52:15 - theme now back to our layout let's paste
52:18 - it here look we get this theme tag with
52:22 - two props appearance and accent color so
52:25 - let's remove this other tag and this is
52:29 - how we can customize our theme we're
52:31 - done with the theme panel let's remove
52:33 - it from here now there is one more thing
52:35 - I want to show you in this lesson so
52:37 - right now we are not using the inter
52:39 - font that is used in nextjs projects by
52:42 - default so to refresh your memory look
52:45 - here in this layout file we are using
52:48 - the inter font
52:50 - from next SL font SLG gooogle Now when
52:54 - using R UI the inter font is not used by
52:57 - default because we have to do a bit of
52:59 - configuration to make it work to verify
53:02 - that the inter font is used let's select
53:05 - one of these links and inspect it all
53:08 - right here in Dev tools let's select the
53:10 - computer tab and look at the font family
53:15 - so font family is set to Apple system
53:18 - this is the default system font so it's
53:20 - not enter now how can we solve this
53:22 - problem back to the documentation of
53:25 - Radix
53:26 - UI here we have a page for topography
53:31 - here under theme let's go to topography
53:35 - and search for next so here are the
53:38 - instructions for using the inter font
53:41 - with radx UI so we have to go to our
53:43 - layout file and assign a custom CSS
53:47 - variable to this font so we copy this
53:51 - line and paste it here so here is where
53:54 - we create and Inter font in this
53:58 - object we set the variable to a custom
54:02 - CSS property in the first part of this
54:04 - course I explained how this feature
54:07 - works so back to this page next we need
54:11 - to go to our root layout and set the
54:14 - class name of the HTML element to enter.
54:18 - variable so by default that is .cl class
54:21 - name we have to change it to enter.
54:23 - variable so we use that custom CSS
54:27 - property so this is our root layout now
54:31 - the font is applied to our body element
54:34 - so we set the class name to
54:36 - enter.
54:37 - variable next we should create a custom
54:40 - CSS file for overwriting the styles of
54:43 - radex UI so we're going to create a file
54:46 - called theme- conf. CSS and in that file
54:50 - We'll add this style so here in the app
54:53 - folder we add a new file called theme-
54:57 - config
54:59 - CSS now let's copy this piece of
55:03 - code and paste it here and finally we
55:07 - have to import this file in our root
55:09 - layout so let's go back to our root
55:12 - layout on the top so first we import the
55:15 - default styles of RX UI then we import
55:18 - our custom theme file that is period SL
55:23 - theme- config see SS and finally we add
55:27 - any Global
55:28 - Styles now back in the browser let's
55:31 - make sure that the inter font is loaded
55:33 - so let's select this element and inspect
55:37 - it now here on the computer tab look at
55:41 - the font family now we're using the
55:43 - inter font so we're done with this step
55:46 - and now it's time to make another commit
55:48 - so here I'm going to say customize radic
55:51 - UI
55:54 - theme
55:55 - hey guys M here I hope you're enjoying
55:57 - what you're seeing so far now after you
56:00 - finished this tutorial if you're ready
56:02 - to take your skills to the next level I
56:04 - highly recommend you to look at my
56:05 - ultimate nextjs series the full series
56:08 - contains two courses and is 12 hours
56:11 - long the first part which is 5 hours
56:13 - teaches you everything you need to know
56:15 - to build full stack applications with
56:17 - nextjs the second part which is 7 hours
56:20 - is where we build and deploy the
56:22 - complete issue tracker project so by the
56:25 - end you will have a complete project
56:28 - that you can show to your friends or
56:29 - potential employers and get your dream
56:31 - job the course comes with a certificate
56:34 - of completion and a 30-day money back
56:36 - guarantee so you can try it risk-free if
56:39 - you're not happy just contact us and ask
56:41 - for refund so if you're serious about
56:43 - learning nextjs and want to use it
56:45 - professionally I highly encourage you to
56:48 - enroll in the full course after you
56:50 - finish this tutorial again in case
56:52 - you're interested the link is below this
56:54 - video
56:56 - [Music]
57:02 - all right now let's see how we can
57:03 - replace this text area component with a
57:06 - markdown editor for that we're going to
57:08 - use a component called react simple MD
57:12 - editor so search for this you will find
57:14 - this page on npm this is a react
57:17 - component wrapper around e mde which is
57:20 - a popular JavaScript library for
57:22 - rendering a markdown editor so let's
57:25 - look at the installation instructions
57:27 - it's very
57:29 - easy first we have to install these two
57:32 - packages react simple MD editor and easy
57:35 - MD so let's copy this line and paste it
57:39 - in the
57:41 - terminal good now to use this component
57:44 - we have to import the simple MD
57:47 - component and a corresponding CSS file
57:50 - so let's copy these two lines now we go
57:54 - back to our new new issue page and paste
57:57 - these import statements on the top now
58:00 - here we don't need react so let's remove
58:02 - it also we no longer need the text area
58:06 - component now all we have to do is
58:09 - replace this component with simple
58:13 - MD with that we get this beautiful
58:15 - markdown editor now this is fully
58:17 - customizable we can change the buttons
58:19 - on the toolbar here we also have spell
58:22 - checking by default so if you type
58:24 - something that is not a valid English
58:26 - word we get this red highlight now in
58:29 - this course I'm not going to talk about
58:31 - customizing this editor it's really
58:32 - outside the scope and it doesn't value
58:35 - every student of this course so I leave
58:37 - it up to you to read the documentation
58:38 - and figure out how to customize this if
58:40 - you want to all right we're done with
58:43 - this step and now it's time to make
58:44 - another commit so here I'm going to say
58:47 - add a markdown
58:53 - editor
58:58 - all right our form is ready now it's
59:00 - time to handle the form submission and
59:02 - to do that we're going to use a very
59:04 - popular Library called react hook form
59:07 - chances are you're familiar with this
59:08 - library but if not this Library makes it
59:11 - incredibly easy to handle form
59:13 - submission track changes in our form and
59:16 - display validation errors so let's go to
59:18 - the terminal and install react - hook-
59:23 - form version
59:25 - 7.46
59:28 - point1 good now we go to our new issue
59:32 - page and on the top we import a hook
59:37 - called use
59:38 - form from react hook
59:41 - form next we Define an interface that
59:45 - defines the shape of our form it
59:47 - specifies What fields we have and what
59:49 - are their types so we Define an
59:51 - interface we can call it issue form
59:55 - here we have two properties title of
59:57 - type string and description of type
60:03 - string
60:04 - next we call this hook in our component
60:08 - so here we call use form and in angle
60:12 - brackets we specify the shape of our
60:14 - form in this case issue
60:17 - form we call this function and get an
60:20 - object now we destructure that object to
60:24 - grab the register function using this
60:27 - function we can register our input
60:29 - Fields with react hook form so it can
60:32 - keep track of them let me show you how
60:34 - this function works so let's do a
60:36 - console. log and call
60:39 - register and give it a label like
60:42 - title now back to the browser let's
60:46 - bring up the console look we get an
60:48 - object with four properties name which
60:51 - is title as well as onchange on blare
60:54 - and ref so these are the props that we
60:57 - should apply to an input field so react
60:59 - hook form can keep track of changes in
61:02 - that input field so let's remove
61:04 - console. log from here and call the
61:08 - register function right here where we
61:10 - use this input component so inside
61:14 - braces we call the register function and
61:18 - register this field with react form now
61:20 - you saw that the register function
61:22 - returns an object with four properties
61:25 - so here we have to use the spread
61:26 - operator so we can add those properties
61:29 - as props to this component now we cannot
61:32 - use the same technique with the simple
61:35 - MD component because it doesn't support
61:38 - additional props using the spread
61:40 - operator so if we add braces here and
61:44 - register this as the description
61:48 - field look we get a compile term error
61:51 - to solve this issue we have to use the
61:53 - controller component component in react
61:55 - hook form so on the
61:58 - top in addition to the use form hook we
62:02 - also import the controller
62:05 - component
62:08 - now let's remove these braces from
62:12 - here so instead of directly rendering
62:15 - this simple MD component we have to
62:18 - render a controller component that here
62:22 - we have to set a few props the first one
62:24 - is name which we set to
62:27 - description the second one is control
62:30 - and we set this to the control object
62:32 - that we can get from this hook so while
62:35 - D structuring this object we also pick
62:37 - the control property now we use that
62:41 - right
62:42 - here and
62:44 - finally here we set the render prop to a
62:48 - function for rendering an input field so
62:51 - we pass a function here and this is
62:53 - where we render a simple mde
62:58 - editor so let's paste it here now the
63:02 - final step we give this function an
63:04 - argument and destructure it to grab the
63:07 - Field property now this field has the
63:11 - same properties that you saw earlier
63:13 - like unblur unchange and so on so this
63:15 - is where we add braces to spread the
63:19 - field object okay so we have registered
63:23 - our input Fields with react hook form
63:26 - now we should handle the form submission
63:28 - to do that we have to grab another
63:31 - function from this object that is handle
63:34 - submit now we should wrap our input
63:37 - Fields with a form so I'm going to
63:38 - change this div to a form here we're
63:42 - going to use multic cursor editing so
63:44 - what was the shortcut command and D on
63:46 - Mac or control and D on
63:48 - Windows now both tags are selected let's
63:51 - change it to a form now here we set
63:56 - unsubmit here we call the handle submit
64:00 - function and give it a function that
64:03 - will be called when our form is
64:04 - submitted so we pass a function and here
64:07 - we can do a Conant the log that we want
64:10 - to display the data in our form data
64:12 - will be an argument in this function so
64:15 - we grab it here and pass it to
64:19 - console.log so let me put this on a new
64:21 - line so you can see things clearly
64:26 - this is how we can handle the submat now
64:29 - let's test our implementation
64:31 - so back in the browser I'm going to set
64:34 - the title to bug one and description to
64:37 - description of bug one now let's submit
64:40 - the form bring up the console here is
64:43 - the object that contains the data in our
64:46 - form all right now the final step
64:49 - instead of logging this data object on
64:50 - the console we want to send it to our
64:52 - API to do that we're going to use axas
64:55 - we can also use the fetch function in
64:57 - browsers but I personally prefer axas
65:00 - because the syntax is kind of easier to
65:01 - use but if you prefer to use fetch
65:04 - that's totally fine so let's bring up
65:06 - the terminal and install axis version
65:12 - 1.5.0 now on the top we import axus from
65:19 - axas now back to our submit Handler
65:23 - instead of Lo plug in the data on the
65:26 - console recall axis. poost as the URL we
65:31 - pass/ API SL
65:33 - isues and here we pass our data object
65:37 - now this returns a promise so we have to
65:39 - await it and make this function async
65:44 - now finally we want to redirect the user
65:46 - with the issues page to do that we have
65:48 - to use the router hook in nextjs so here
65:52 - we call use router now I explained this
65:56 - before you have two router hooks one is
65:58 - defined in next SL router the other is
66:01 - defined in next SL navigation make sure
66:04 - to use the second one because this is
66:06 - the one that works with the app
66:08 - router so we call this and get our
66:12 - router object and finally after this
66:15 - issue is saved we call router. push and
66:20 - send the user to the issues page let's
66:23 - test our implementation so one more time
66:27 - let's fill out this form description of
66:30 - book
66:31 - one and send this to the back
66:35 - end all right we got an error saying
66:38 - Navigator is not defined this is
66:40 - typically what happens when we use the
66:42 - wrong router hook in this case I haven't
66:45 - made a mistake so this could be a
66:47 - temporary issue I'm going to restart the
66:50 - web server and see if that solves a
66:52 - problem all right right now let's
66:55 - refresh this page as
66:59 - well so let's fill out this form one
67:01 - more
67:04 - time and submit
67:07 - it all right we are redirected to the
67:10 - issues page now let's go to our database
67:13 - and make sure this issue is properly
67:16 - saved there you go we have two instances
67:19 - of this book because previously even
67:21 - though we got an error with the
67:22 - Navigator object the bug was actually
67:25 - saved in our database all right we're
67:27 - done with this step so let's make
67:29 - another commit and say handle form
67:36 - [Music]
67:41 - submission our code doesn't currently
67:43 - have error handling so the next thing we
67:46 - want to do is to handle potential errors
67:48 - and provide feedback to the user if
67:50 - something goes wrong to do that we have
67:52 - to wrap these two lines inside a TR
67:55 - catch block so here we add a TR catch
67:59 - block select this item from Auto
68:01 - completion when we have the square box
68:04 - that means this is a code snippet so
68:06 - enter now we have this snippet press
68:09 - Escape now we grab these two lines and
68:13 - move them up like this now if you don't
68:15 - know how to do this let me show you the
68:17 - shortcut so on the top go to the
68:19 - selection menu and look at the shortcut
68:22 - for these move line up or down on Mac
68:26 - it's option with up and down I think on
68:29 - Windows should be alt so we put these
68:32 - two lines inside the tri block now let's
68:35 - just log the error that we get in the
68:38 - catch
68:40 - block now back in the browser let's open
68:43 - the form and see what we get in the
68:46 - console all right begin on axio error
68:49 - object now look at the properties here
68:51 - we have the code that is set to error
68:54 - bad request the message says request
68:56 - fail with status code of 400 now because
69:00 - this is an error that we anticipated in
69:02 - our API here we have a response so in
69:05 - the response object in the data property
69:09 - we have the error messages that are
69:10 - generated by zot so let's go back to our
69:14 - API we go to our route
69:16 - file take a look if the validation is
69:20 - not successful we are returning these
69:23 - validation errors now if you don't like
69:25 - the structure if you think this is too
69:27 - complicated here we can call the format
69:31 - method and with this will get a simpler
69:33 - structure so let's refresh and submit
69:37 - the form again take a look once again we
69:41 - go to response and data now for each
69:46 - field in our form we have a property
69:48 - like title and description we also have
69:51 - a generic error property for any
69:53 - validation error errors that are not
69:54 - specific to one of these fields now for
69:57 - each of these
69:58 - fields we have a property called
70:00 - underline errors and here we have a
70:03 - friendly error message like string must
70:04 - contain at least one character now we
70:07 - can also customize these error messages
70:10 - to do that we have to go back to our
70:13 - schema so over here as the second
70:16 - argument to the main method we can
70:18 - provide a custom error message like
70:21 - title is required
70:24 - we can do the same with our description
70:26 - field so description is
70:31 - required now let's submit the form one
70:33 - more time and look at our error
70:37 - object response data let's look at the
70:41 - title property there you go so we have
70:43 - title is required now in this case we
70:46 - don't really care about this error
70:47 - messages because we shouldn't be able to
70:49 - post the form if the form is invalid so
70:52 - in the next lesson we're going to
70:54 - implement client side validation and
70:56 - show errors to the user if the form is
70:58 - invalid but this technique is useful in
71:00 - situations where we have to rely on the
71:02 - backend to validate the data for example
71:05 - if you want to build a registration form
71:07 - we want to make sure that the user
71:09 - select a unique username that's not
71:12 - something that we can validate on the
71:13 - client we have to rely on the backend
71:15 - right in those cases this is how we can
71:19 - read the error messages returned from
71:20 - the server and then we can show that
71:22 - error to the user
71:24 - so back to our error handling code in
71:26 - this case we don't want to lock the
71:27 - error on the console instead we want to
71:30 - show a generic error message for
71:32 - unexpected errors and to do that first
71:35 - we have to declare a state variable for
71:38 - holding the error so here we use the
71:40 - state hook we initialize our variable to
71:43 - an empty
71:45 - string then we add error and set
71:49 - error and in our catch
71:52 - block wece simply
71:54 - call set
71:57 - error and give it a generic error
71:59 - message like an unexpected error
72:05 - occurred now we want to show the error
72:08 - message right above the form to do that
72:11 - we're going to use one of the components
72:13 - in R xui so let's look at our components
72:18 - here it is called where is it um call
72:22 - out so this is how a call out looks like
72:25 - we can also change the color to Red in
72:28 - terms of the structure we start with
72:30 - call out. Root if you want to add an
72:33 - icon then we add a callout icon and
72:36 - otherwise after that we add call out.
72:38 - text similar to how we use the text
72:41 - field component right so right above
72:44 - this form we want to add a call out to
72:47 - do that first we have to wrap this
72:49 - inside a fragment or inside a div I'm
72:52 - going to use a div because later we're
72:54 - going to apply a couple of classes here
72:57 - so let's wrap the form inside a
73:00 - div now right above the
73:04 - form we add call
73:07 - out. root and we want to render this
73:10 - only if we have an error so if we have
73:13 - an error then we render this call out
73:17 - now inside the call out we should add
73:19 - call out.
73:21 - text and this is where we Rend our error
73:24 - message now to change the color to Red
73:27 - we set the color prop to
73:29 - Red now save the changes back to the
73:33 - form let's submit it
73:35 - again now we have this call out on the
73:37 - top but the width of the call out is not
73:40 - the same as the width of our form so we
73:43 - have to move this Max width class to the
73:47 - containing div so let's grab it from
73:50 - here
73:52 - and add it
73:55 - here good now let's submit the form one
73:58 - more time all right that looks better I
74:01 - want to add a margin below this error
74:03 - message so let's give this call
74:06 - out a class of
74:12 - mb-5 all right let's try one more time
74:16 - that looks good we're done with this
74:18 - step now let's make a commit and say
74:21 - handle errors
74:26 - [Music]
74:32 - all right now let's Implement client
74:34 - side validation so let's go to our route
74:36 - file so earlier we defined this schema
74:39 - for validating the object that is sent
74:42 - with our request now wouldn't that be
74:43 - nice if we could reuse the same schema
74:46 - for validating our form we can certainly
74:48 - do that let me show you how to do it
74:50 - first we have to grab this schema and
74:52 - put it into a separate model module so
74:54 - we can reuse it in two places in our API
74:56 - here and also in our form to do that I'm
74:59 - not going to grab this code and cut it
75:01 - and paste it somewhere else because with
75:03 - that our project will break we'll have
75:05 - to come back here and explicitly import
75:07 - this schema from that other module a
75:10 - better way is to use the refactoring
75:12 - commands in vs code so we put the cursor
75:15 - right here then right click and go to
75:18 - refactor now let's move this to a new
75:21 - file with
75:23 - as you can see vs code put our schema
75:26 - into this module and automatically
75:28 - imported it on the top we didn't have to
75:30 - manually do this right now back to our
75:33 - API folder so this is where our schema
75:37 - exists right next to our route file now
75:39 - we should take it outside of this folder
75:41 - and put it somewhere more General
75:43 - because we want to use this in our form
75:45 - as well so let's grab it and move it to
75:48 - the app
75:49 - folder and
75:51 - also I would prefer to re name this file
75:53 - to something more General like
75:55 - validation schemas so in the future we
75:58 - can add all our validation schemas in
76:01 - this file all right now to use this in
76:03 - our form first we have to install a
76:05 - package so bring up the terminal window
76:08 - and install at hook for/ resolvers
76:13 - version
76:15 - 3.3.1 this package allows react hook
76:17 - form to integrate with various data
76:20 - validation libraries like zot so let's
76:23 - install
76:25 - it good now let's go back to our new
76:29 - issue
76:31 - page on the top we have to
76:35 - import Zod
76:37 - resolver
76:39 - from Hook form SL resolvers
76:44 - slz now when calling the use form hook
76:49 - here we pass a configuration object and
76:52 - set the resolver to Zod
76:55 - resolver and here we pass our Zod schema
76:59 - that is create issue schema so now this
77:03 - schema is imported on the top from our
77:05 - app folder so this is how we can
77:07 - integrate react book forms with Zod now
77:10 - look at this interface we have defined
77:12 - here it kind of looks redundant because
77:14 - here we are defining two properties that
77:17 - already exist in our schema in the
77:20 - future if we decide to extend this form
77:22 - and add a new property we have to add it
77:24 - in two places in this validation schema
77:28 - and also in this interface wouldn't that
77:31 - be nicer if we could generate this
77:33 - interface based on our schema let me
77:35 - show you how to do that so first we
77:38 - import Z from Zod next we remove this
77:42 - interface and here we call z. infer in
77:46 - angle brackets we type type of and here
77:49 - we pass our schema create issue schema
77:54 - this returns a type so we store it in
77:56 - the type object and call it issue
78:00 - form so now we are letting Zod infer
78:03 - this type based on this schema okay all
78:07 - right next so we have integrated react
78:09 - hook form with Zod now to display
78:12 - validation errors here we have to grab
78:15 - the form State object this object
78:18 - represents everything we need to know
78:20 - about our form so we can destructure it
78:22 - right here
78:23 - now let's press control and space to
78:25 - look at various properties so we have
78:28 - errors we have is dirty this is useful
78:31 - if you want to know the form is changed
78:33 - you also have is submitted is valid and
78:36 - so on is valid is useful if you want to
78:38 - disable the submit button if the form is
78:41 - not valid now in this case we only care
78:43 - about this property
78:45 - errors now we want to render an error
78:48 - message after each field so this is
78:51 - where we have the title field right
78:53 - after that here we check if errors. tile
78:57 - is truthy that means we have an error
78:59 - for the title field so here we render a
79:03 - paragraph or we can use the text
79:06 - components in rixi make sure to import
79:09 - it from radex UI and this is for
79:11 - consistency so in this file we're using
79:14 - rui components as much as possible here
79:17 - we can set the color of text to
79:20 - red and with this we can make sure that
79:22 - all our validation errors have the same
79:24 - color and right here we render errors.
79:28 - tile.
79:29 - message now we need to add an error
79:31 - message for the description field as
79:33 - well so right after this
79:36 - controller we check if errors the
79:39 - description is truthy then we add a text
79:42 - component we set the color to red and
79:46 - here we render errors the description do
79:49 - message that's all we had to do now back
79:53 - in the browser let's submit the form we
79:56 - get our validation messages beautiful
79:58 - now here we have a bit of styling issue
80:00 - because the text component is not a
80:03 - block level element so let's right click
80:06 - it and inspect it look it's a span to
80:10 - solve this problem here we can set the
80:14 - as prop to the type of element that
80:17 - should be rendered for this error
80:18 - message we're going to use a paragraph
80:22 - We need to do this
80:23 - same for our description error now let's
80:27 - submit the form one more
80:28 - time all right that looks good we're
80:31 - done with this step so let's make
80:33 - another commit and say Implement client
80:36 - side
80:42 - [Music]
80:46 - validation look at the way we are
80:48 - rendering errors on this page do you see
80:50 - a problem here here's a problem every
80:52 - time time we want to render an error we
80:54 - have to remember to set these two props
80:57 - so our errors look consistent this is
81:00 - where we can extract this markup and put
81:02 - it into a separate reusable component so
81:05 - here in our project in the app folder
81:08 - let's add a new folder called
81:12 - components here we add a new file we
81:16 - call it error
81:18 - message now let's create a react
81:21 - component now typically here we Define
81:24 - an interface called props we give it a
81:28 - property called children of type react
81:31 - node then we add props here now we can
81:35 - destructure this to grab children but
81:39 - this is kind of unnecessary because in
81:41 - react we have a type that defines the
81:44 - shape so instead of explicitly defining
81:47 - this interface every time here we can
81:50 - use props with children
81:54 - this type is defined in the react module
81:57 - so if we control click this look this is
82:00 - a type that defines an object with this
82:03 - shape children okay so we no longer need
82:07 - this
82:08 - interface good now here we return a text
82:13 - component that is defined in
82:16 - rui we set those two props so we set
82:19 - color to red and as to p
82:23 - and then here we
82:24 - render children now we have a single
82:28 - place where we Define the look and feel
82:30 - of our errors and with this we can get
82:32 - rid of this duplication or code so we
82:36 - replace this text component with our
82:38 - custom error
82:42 - message now we can take this to the next
82:44 - level instead of checking if there is an
82:47 - error for this property every single
82:49 - time we can move this responsibility
82:51 - inside the error message component so
82:54 - here we can check if
82:57 - children is falsy then we return null so
83:01 - nothing is rendered otherwise we return
83:04 - a text component and with that we can
83:07 - simplify our code we can get rid of this
83:11 - condition now here we get a compilation
83:13 - error because title may be undefined to
83:16 - solve this we use optional
83:19 - chaining so here's the end result it's
83:21 - much nicer much cleaner and we don't
83:23 - have any kind of duplication here let's
83:26 - apply the same technique to the
83:28 - description error so we remove the
83:32 - braces and replace the text component
83:35 - with an error
83:39 - message and here we use optional
83:42 - chaining Let's test our application to
83:44 - make sure we haven't broken anything so
83:47 - I'm going to submit the form beautiful
83:50 - so we're done with this step
83:53 - and now it's time to make another commit
83:55 - extract the error message
84:03 - [Music]
84:08 - component now to improve user experience
84:11 - we want to show a spinner in the button
84:13 - when submitting the form to do that
84:15 - search for Tailwind elements spinner on
84:19 - this page you can see various examples
84:22 - of showing Spinners using Tailwind so
84:24 - here's a basic example we can also
84:27 - change the color we can use a different
84:31 - effect we have all sorts of spinners so
84:34 - let's look at the basic example look at
84:37 - the code so we're going to grab this
84:39 - markup and put it into a reusable
84:42 - component so let's copy it here now back
84:45 - to our project here in the components
84:47 - folder let's add a new file called
84:51 - spinner
84:53 - we create a react component and then
84:55 - paste all that
84:57 - markup now we have two class attributes
85:00 - that we should rename to class name one
85:02 - way is to put the cursor here press
85:04 - command and D on Mac or control and D on
85:07 - Windows to select the next occurence but
85:09 - let me show you another technique if we
85:11 - have many instances that we want to
85:13 - rename in one go we don't want to keep
85:15 - pressing command and D we can select all
85:17 - of them using a special shortcut so on
85:20 - the top Under The Selection menu
85:23 - look at the shortcut for select all
85:25 - occurrences on Mac it's shift command
85:28 - and L I guess on Windows is shift
85:31 - control and L so let's press Escape I'm
85:35 - going to press shift command and L now
85:38 - all instances of the class keyword are
85:40 - selected so let's rename this to class
85:44 - name save the changes now to test this
85:47 - let's go to our new issue page and put a
85:51 - spinner inside this
85:56 - button all right here's what we get our
85:59 - spinner is a little bit too large so to
86:02 - make it smaller let's go back to our
86:03 - spinner component and change the height
86:07 - and the width to
86:09 - four now we can take this to the next
86:11 - level and give it a size prop so we can
86:13 - render Spinners at different sizes but
86:16 - at this point that is over engineering
86:18 - because we don't have that requirement
86:20 - that's one of the traps that a lot of
86:22 - software developers fall into they start
86:24 - predicting all kinds of what if
86:26 - scenarios that may never happen so don't
86:28 - over engineer your Solutions instead
86:30 - focus on existing problems as opposed to
86:33 - problems that may never happen in the
86:35 - future so we change the size to four now
86:39 - here's what we get our spinner is a
86:41 - little bit too thick for this size so to
86:44 - make it thinner we change the size of
86:47 - the border from four to
86:50 - two all right I think that looks good
86:53 - now we want to show this only when the
86:55 - form is submitted to do that we go back
86:58 - to our new issue page and declare a
87:01 - state
87:03 - variable we initialize it to false and
87:07 - call it is
87:13 - submitting now in our Tri
87:17 - block before we call the backend first
87:19 - we said submitting to true
87:22 - and in our catch block if something goes
87:24 - wrong we reset it so the spinner doesn't
87:28 - stay there now finally in our button we
87:32 - render the spinner only
87:34 - if the form is submitting so is
87:38 - submitting if it's truthy then we render
87:40 - a spinner now it's also a good practice
87:43 - to disable the button to prevent the
87:45 - user from submitting the form twice this
87:47 - is especially important when building
87:49 - applications that deal with money so so
87:52 - let's set disabled
87:55 - to is
87:58 - submitting all right here's what we have
88:00 - Let's test our application so once again
88:03 - if we submit the form without any values
88:06 - we get our validation errors beautiful
88:08 - now let's add a bug here description of
88:11 - bug
88:13 - three submit
88:16 - beautiful we're done with this step and
88:18 - now it's time to make another commit add
88:21 - a spinner
88:24 - [Music]
88:30 - we're almost done with implementing our
88:32 - first feature so now let's spend a few
88:34 - minutes and talk about better ways to
88:36 - organize our code now the first thing
88:38 - I'm going to talk about is this inline
88:40 - function in this component so some
88:43 - people argue that we shouldn't use
88:45 - inline functions in the middle of our
88:46 - markup because they make things
88:48 - unnecessarily complicated now there are
88:51 - other people who like inline functions
88:53 - they prefer inline functions and they
88:55 - argue that inline functions are easier
88:57 - to understand because they don't have to
88:59 - jump back and forth between different
89:01 - parts of the code to see what is going
89:03 - on so this is one of those areas where
89:06 - different people have different opinions
89:08 - there's really no right or wrong here in
89:10 - my opinion inline functions are not
89:12 - necessarily evil if there are one or two
89:14 - lines it's better to keep them in line
89:17 - but otherwise if they get more complex
89:19 - it's better to move them outside and
89:21 - separate them from our markup in this
89:24 - case our inline function has seven lines
89:26 - of code so I prefer to move this logic
89:29 - outside of this
89:31 - markup
89:33 - so let's declare a constant called
89:37 - unsubmit and we set it
89:39 - to this piece of
89:45 - code like this so now the logic for
89:49 - submitting the form is completely
89:50 - separated from our markup we just have
89:53 - to remember to add unsubmit here with
89:58 - this our markup is completely separated
90:00 - from our logic so that was good now
90:03 - there is another issue we want to talk
90:05 - about here and that is this line of code
90:08 - some people argue that using axis in the
90:10 - middle of a component violates the
90:12 - separation of concerns principle what is
90:15 - separation of concerns well it's one of
90:17 - the old computer science principles that
90:19 - says we should separate a program into
90:22 - distinct modules each having a separate
90:25 - concern if concerns are well separated
90:28 - there are more opportunities for code
90:30 - reuse so people who argue that we
90:33 - shouldn't use AXS or make HTTP calls
90:35 - inside a component suggest that we
90:37 - should move this logic into a separate
90:39 - function outside of this module and then
90:42 - call that function here for example we
90:44 - could have a function like create issue
90:47 - that takes the data so in that function
90:49 - we'll have the code for making the HTTP
90:51 - call I I have done this a lot in the
90:53 - past but over time My Views have changed
90:55 - in this application I don't see any
90:58 - value in moving this logic inside a
91:00 - separate function that is just
91:02 - unnecessary abstraction because
91:04 - realistically in this application this
91:06 - is the only place where we need to
91:08 - create an issue so we're not going to
91:10 - reuse this function in other parts of
91:12 - our application so the promise of
91:15 - reusing this piece of logic doesn't
91:17 - apply here but in other applications
91:19 - making HTTP calls might be more comp
91:21 - licated for example sometimes when
91:24 - calling third party apis we have to
91:26 - include certain HTTP headers in each
91:28 - request in those cases we don't want to
91:31 - throw all that complexity inside our
91:33 - components so it's better to move the
91:35 - logic for making HTTP calls into
91:38 - separate modules so here's what I want
91:40 - you to take away software engineering is
91:43 - not black and white there is no one-
91:45 - siiz feits all so if someone says this
91:47 - is the best practice you should always
91:49 - do things this way don't listen to that
91:51 - person every project is different every
91:53 - application has different requirements
91:55 - don't take someone else's solution and
91:57 - apply it as silver bullet in all your
91:59 - projects so in this application at this
92:02 - point I don't see a reason for moving
92:05 - this Logic for making HTTP call into a
92:08 - separate module so let's remove this
92:10 - comment we're done with this that so
92:13 - let's make one more commit here I'm
92:15 - going to say refactor move inline
92:20 - function
92:22 - congratulations on reaching this point
92:24 - and creating something awesome along
92:26 - with me now as I said before this
92:28 - tutorial is only the beginning so I
92:31 - invite you to join me in my ultimate
92:33 - nextjs Series this series contains two
92:35 - courses the first part covers everything
92:38 - about nextjs and part two is where we
92:41 - build and deploy this issue tracker
92:43 - project now because you have stuck with
92:45 - me till now I'm offering you a special
92:48 - discount but this is only available to
92:50 - the first 100 people
92:52 - so click the link below and let's
92:54 - continue this journey and build the eso
92:56 - tracker project
92:59 - [Music]
93:03 - together

Cleaned transcript:

welcome back to the second part of the ultimate nextjs Series in part one we covered the essential concept to build full stack applications with nextjs and typescript in this part we'll take everything you have learned and apply it to a real word project we'll build and deploy a full stack production grade issue tracker this project includes all the common features you find in modern applications dashboard with charts filtering sorting and pagination forms with client side validation user authentication and access control model dialog boxes and toast notifications and much much more by the end of the course you will have a fast responsive fully functioning application in the cloud that you can share with your friends or potential employers to get your dream job we'll build this with a cutting is Tex stack for building modern applications nextjs typescript Tailwind Rix UI Prisma and NEX off I'll break down every line of code so you will grasp the whats the wise and the house I will also show you how to structure your projects effectively how to write clean professional quality code that aligns with industry standards and best practices how to use shortcuts to boost your coding speed and overall productivity and how to think like a software engineer and build software in a structured and methodic way this course has everything you need to become a professional nextjs developer so if you follow along you will gain the practical skills and knowledge to build real projects with confidence I'm m hamadani a software engineer with over 20 years of experience and I've taught Millions how to code and become professional software Engineers through my YouTube channel and online school code withm mar.com so are you ready to jump start your career as a next year developer then let's jump in and gu started all right so what exactly do you need to take this course as I mentioned in the introduction this course is the second part of my ultimate nextjs Series so ideally you should have watched the first part or at least know the basics of building applications with nextjs and typescript more specifically you need to know the basics of client and server components routing building apis database integration with Prisma and authentication with next off now in this course we'll heavily use Tailwind for styling our application so you need to know the basics of Tailwind as well if you're unfamiliar with these topics I highly recommend you to go back and start from part one otherwise you might find this course a little bit challenging now I've created a GitHub repository for the project we're going to build in this course so go to my GitHub account mh hamadani and search for issue tracker it's right here in this repository we have the complete source code for the project we're going to build and also there is a separate commit for each lesson so as you're following the lessons if something doesn't work you can go and find that commit all these commits are named exactly like our lessons so if something doesn't work look at that comit to compare your code with mine now before we dive in let's talk about how to make the most out of this course there are two ways you can take this course some students prefer to code along with me and that's perfectly fine but I have meticulously edited these videos to take out all the unnecessary time consuming segments so everything is quick and to the point Point otherwise this 7hour course would end up being 10 hours or longer so if you're not a typing ninja you might need to hit the pause button a few times to keep up now here's another way to go about it and that's my recommendation I would say while watching each lesson don't do any coding instead watch closely take some quick notes and then after each lesson give it a shot on your own in my opinion this is a better way to learn because you're not just copying what I do you're thinking on your own and that makes the info stick better A lot of my students ask me msh I don't know how to start and finish a project so in this lesson I'm going to show you a road map that helps us plan our projects effectively this road map gives us a clear path and helps us decide what features to build first so before we get into the specifics let's classify our are features into two categories essential or core features and advanced or nice to have features this classification will help us prioritize and build our issue tracker or any project step by step so what are the essential or core features of an issue tracker I mean the absolute mus haves well the most fundamental feature is the ability to create an issue because that's the primary purpose of an issue tracker to create and Tackle issues right so we should build that feature first once we build that feature the next step is to allow the user to view details of individual issues so they can better understand the problem and after that we want to allow our users to update or delete an issue once we build these features then we can gradually enhance our application by adding more advanced features based on our project's needs so we will Implement features like user authentication assigning issues to users sorting and filtering issues pagination and dashboard now here's the key when building this application we're going to focus on one feature at a time so we're not going to get distracted with the complexity of the entire project also when building each feature our goal is not to come up with a perfect solution right away there's no such thing as perfect in software being a perfectionist wastes a lot of your time you'll spend hours and hours thinking about that perfect solution just to discover that it has flawed so we want to start coding right away and come up with a working solution once we have a working solution then we'll refine and improve our code step by step this is called refactoring okay our feature road map is set our journey is clear so let's set up our development environment and get started all right now let's talk about setting up our development environment in this course course just like my other courses I'll be using visual studio code or vs code you're welcome to use your preferred editor but if you want to use vs code I want you to install these extensions so head over to extensions panel and search for es7 it's this extension right here es7 plus react Redux and react native with this extension we can quickly generate react components it's very handy the next extension we're going to use is typescript it's this one right here JavaScript and typescript nightly the next one is Tailwind Tailwind it's this one right here Tailwind CSS intelligence this gives us autoc completion when using Tailwind classes and the last one is Prisma so Prisma with this extension we get syntax highlighting and and autoc completion when creating Prisma models so make sure you have these extensions before moving on to the next lesson now to create our project open up a terminal window now I'm going to go to my desktop Now to create a nextjs project we run npx create next app version 13.4.1 19 make sure to use the same version so everything I show you in these videos work the same way on your machine let's go ahead let's proceed with the installation of this package now we should give our project a name I'm going to call it isio Das tracker and then we'll accept all the default values for these questions so we're going to use typescript as well as eslint and Tailwind we're not going to use the source directory and we're going to use the new new app router and the final question we don't care about customizing the default import Alias let's go ahead our project is created so let's C into this folder issue tracker and run npm run Dev all right our project is hosted at Local Host Port 3000 here's what we get beautiful now let's open this project in vs code so here in vs code first we have to do a little bit of cleanup so let's go to our app directory and open our homepage we don't care about any of the markup here so let's simplify things I'm going to delete all the mark off where is the end right here and add a simple div and here we say hello world we don't need the import statement on the top either so here's what we get now we have this weird background color because of the gradient applied to our body element so let's go to vs code we're going to go to global. CSS in this file we're going to remove a couple of custom CSS properties one is background start RGB and the other is background end RGB and then here in the body element we remove the background color with that here's what we get looks good and now we make our first commit so we go to our source control panel and make a commit and here we say initial commit now at this level I expect you to be familiar with Git and GitHub if not I highly recommend you to watch my 1 hour YouTube tutorial on this topic I also have a comprehensive course on my website if you want to master git and GitHub so let's make our first commit good all right we're done with this step let's move on to the next lesson all right now we're going to build a navigation bar so here in the app directory let's add a new file called navb bar. TSX now we're not going to put this into a components directory because as I explained in the first part of the course in nextjs 13 with the new app router we don't have to put all our components into a components directory instead we we can collocate our components with the pages or layouts where they are used in this case our navigation bar is not a reusable component the only place where we need it is in our layout so I put it right next to our layout now let's create a new component so we type RAF CE this is one of the shortcuts that come with the es7 extension that we installed at the beginning of the course let's press enter so here we have a navigation bar now let's change change the div element to nav so it's more sematic now in this navigation bar first we want to have our logo so we wrap it with a link component that is defined in the next SL link package when we click on the logo we should go to the homepage so we set href to the root for now I don't want to add a logo so I just want to type logo now right after that we want to add our navigation links so we add an on order list inside this we want to have two list items so Li * 2 tab beautiful now once again we're going to use the link component our first link is going to be our dashboard so let's set HRA to the root as well and our second link is going to be the issues page so here we set hf2 slash isues now before going further let's add our navigation bar to our lay layout so we go to our layout file and add our nav bar inside the body element so nav bar now I would prefer to wrap our children which is going to be a page inside the main element that makes our Pages more semantic good back in the browser here's what we get so we have the logo followed by dashboard and issues now we want to lay this out hard horizontally so back to our nav bar we have to make this nav element a flex container so we set class name to flex now our logo and list items are laid out horizontally and that means when we have a flex container our direct children are laid out horizontally in this case the logo and the UL element but inside the UL element we don't have a flex container and that is why the dashboard and issues are laid out vertically so to lay these out horizontally as well we should apply the flex class on the URL element good now these items are so close to each other so to give them some space we apply another tailb class that is spacex followed by a number in this case I'm going to go with six here's what we get so we have some space between the children or are our outer Flex container now we need to apply the same class to our unordered list so here's our Ur let's give it space X6 that looks better now let's add a border below our navigation bar so we give our nav element the class of border dasb that is short for bottom that's better now to separate our navigation bar from the main page content we should give it a bottom margin so we add one more class here that is mb5 I think that looks good next let's give our navigation bar a horizontal padding so we give it a padding X of let's say five that looks good now our navigation bar is too narrow so to increase the height we apply another class here h14 that looks good but our items are positioned on the top so to put them in a center we apply another class here items Dash Center take a look that looks good so we got the basic layout working next we need to replace our logo text with a beautiful icon and for that we're going to use the react icons Library so search for react icons you will find this page to use this Library first we have to install react icons so here in the terminal let's install react D icons version 4.1.0 beautiful now back to this website we want to have a bug icon as our logo so let's search for bug we have various shapes of bugs in different libraries I'm going to pick the first one AI fill bug now back to our navbar we import this class from react D icons SL AI because this component is defined in the AI library now let's replace our logo with AI fill bug here's what we get looks beautiful now I want to apply a hover effect on these navigation links so we want to make the text slightly lighter and when we hover over these links we want to make it a little bit darker as an example let's apply a few classes on our first navigation link so we said class name two the first class is text zinc d500 this makes our text Medium gray here's what we get now to apply a hover effect we use the hover selector and change the text color to zinc 800 now take a look that looks good now I want to apply a trans ition so the change is smoother to do that we add another class here that is transition Das colors now take a look all right the transition is smotherer beautiful now we have to apply the same classes on this other navigation link and this is repetitive so let me show you a better way instead of defining our navigation links here we're going to Define them in an array then we will map that array to a bunch of list items so let's declare an array call links now each element in this array should be an object with two properties a label like dashboard and an href let's duplicate this and our second link should be issues all right now here we map our links array we map each link to a link component so I'm going to grab this piece of code cut it and then paste it here now each link should have a key we set the key to link. HRA because that value uniquely identifies each link now we no longer need these list items so let's delete them also let me put this on a new line so we can see things clearly so each link should have a key and a class this is the only place where we set these classes so there is no duplication in our code next we set the href prop and here we have to set the value dynamically we set it to link. href and similarly we should add the label dynamically so we add link. label now both our navigation links are dark gray and when we hover over them they become black beautiful so our navigation bar is in a good shape now before going further we have to make a commit to our repository so we go to the source control panel and make a commit and say build the nav bar all right now let's see how we can style the active or the currently selected Link in the navigation bar to do that first we have to create the issues page so back to our project here in the app folder let's add a new folder called issues then we add our page file next we create a react component and call it issues page with this if we click on the issues link we see the issues page beautiful but we want to highlight the active link in the navigation bar to do that we have to go back to our Navar component in this component we have to use one of the hooks that comes with nextjs to get the current pass or the current route that is use pass name use pass name now the auto comption is not picking it up so we have to manually import it on the top so on the top we import use P name make sure to spell it properly we import this from next slash navigation next we call this hook to get the current path now because in this component we are using this hook and this Hook is dependent on browser apis we have to convert this component to a client component because as I told you in part one we can only access browser apis in client components right so on the top we add the use client directive now before going further let's make sure that our application is working up to this point so let's do a console log and log the current pass to make sure we get the right value so let's bring up the console we're currently on the issues page lovely now if you go to the dashboard we see the root path okay so let's let's remove this lock statement now down here where we render our links we want to apply a class dynamically if the HF of the link that we rendering equals the current path instead of Tex sync 500 we want to render Tex sync 900 which is darker so here we have to wrap this string in braces next we need to replace these quotation marks with a back tick so we can add stuff Dynam dally so we select the first quotation mark then we press command and D on Mac or control and D on Windows now we have selected both these quotation marks we have multic cursor editing so in one go we can replace both of them with a back tick good now we press escape to cancel multic cursor editing now here we add a dollar sign followed by braces inside braces we type our condition we say if link .h equals the current path then we render text zinc 900 otherwise we render text zinc 500 so let's grab this class from here and move it inside these quotation marks Let's test our application so back in the browser we're currently on the dashboard and the dashboard link is darker if you go to the issues page the issues link becomes darker beautiful so this is a simple way to style the active link in the navigation bar now as our applications get more complex we might end up with complicated conditions here and tracking what classes are rendered can be a little bit difficult in those cases we can use a very popular package called class names so bring up the terminal and install class names version 2. . 3.2 good now on the top first we import class names from class names now this is a function that we call and give it an object in this object we specify the classes that we want to render and the conditions that they should be rendered this function will then return a string that contains the classes we want to render let me show you how this works so down here let's remove everything inside the braces so here's what we have now here we call class names and give it an object in this object we add one or more key value pairs our keys should be our CSS classes like text zinc 900 and the values should be either true or false if we set this to true this class will always be rendered now in this case we want to render this class only if link. href equals the current path right now similarly we add another key value pair that is text zinc 500 and we want to render this if link. HF does not equal current path let's add one more that is hover text zinc 800 and transition colors we want to render these classes at all times so we set this to true now look at the result we no longer have string manipulation and our code is cleaner we can easily look at this code and see what classes are rendered under what conditions Let's test our application one more time to make sure we haven't broken anything so we go to the dashboard dashboard is darker we go to the issues page the issues link is darker beautiful so we're done with this step and now it's time to make it commit to our repository so here I'm going to say style the active link in the nav bar in this section we're going to use MySQL for storing our data in case you don't know MySQL is a very popular database engine there are of course many other database engines out there like postgress SQL server mongodb and so on if you prefer a different database engine that's totally fine but I would suggest you to use MySQL in this section so you can easily follow the lessons so head over to myql.com go to downloads now at the bottom of this page you'll find this link MySQL Community version which is absolutely free then go to mySQL Community server and on this page page download the latest version for your operating system now for Mac keep in mind that we have two DMG files for different CPU architectures we have one for arm the other for x86 so if you're a Mac User depending on the type of your Mac you have to find the right DMG file once you download this you will get an installation wizard just click through it's very easy to set up just remember as part of that you'll be asked to enter a root password so root is like the admin user for our database engine so whatever password you use for the root user keep a note of that because in the next lesson we're going to come back to it okay now this is just a database server or database engine we also need a tool for viewing our database now MySQL gives you a tool called MySQL workbench again it's free I don't like this tool it's ugly so in this section I'll be using a tool called datag gripe from jetb brains.com I absolutely love this tool but you have to pay to use it having said that you can try it for free for 30 days so head over to jetb brains.com datag grip and download the latest version all right now we're going to install Prisma to allow our application to interact with our database so here in the terminal let's install prismo version 5.3.1 good next we run npx Prisma in it to initialize Prisma in this project all right I told you in part one that when we run this command two things happen let's quickly review first Prisma creates this Prisma folder and here we have this Prisma schema file in this file first we have to change our provider from postgress to mySQL or if you if you prefer to use postgress or any other database engines that's totally fine just make sure that you have set the right provider here next we need to update our database URL which is an environment variable stored in this en file in the root of the project so let's go here first we change the protocol to mySQL then we change the root username in MySQL that is root next we set our password after the colon then we change the port for MySQL we have to use 3306 then we change our database name to issue Das tracker or whatever you prefer now we don't need this query parameter let's remove it we're done with setting up Prisma so let's make a commit and move on to the next step so setup Prisma all right to store issues in our database first we have to create a Prisma model so we go to our Prisma schema file and Define a new model called issue as a reminder make sure to use the Pascal naming convention so we capitalize the first letter of each word and also make sure to use singular names so we don't want to call this model issues just a singular name like issue now our issue is going to have various Fields or properties at this point we want to add only the absolute essential ones so right now we are not going to worry about assigning issues to users and that means we're not going to create a relationship between the issue model and the user model okay so we're going to add the core fields or properties what are those well every issue needs an ID the type of ID should be an integer now here we use the ID attribute to specify that this is an ID column we use the default attribute to give it a default value here we use the autoincrement function so every time a record is inserted into our table our database engine automatically assigns an ID to that record next we add the title field this has to be a string now when we use MySQL the type of the related column in our database is going to be varar of 191 now in case you are not familiar with MySQL or databases in general varar means variable character so varar of 191 means we can store string values up to 191 characters in these columns now 191 is kind of a weird value so here I want to overwrite the default convention and say I want to store a string up to 255 characters to do that we use the DB attribute to specify the type of underling column in our database here we're going to use varar of 255 next we add the description field this also has to be a string now again the type of this column is going to be varar of 1 191 but we want to have really long descriptions so for that we use db. text now every issue has to have a status and the status can be one of three values open in progress and closed we can use an enom to represent that so here we Define an enum called status an enum is a set of constant values so here we're going to add three values open in progress and closed and by convention we use all capital letters so each value on a separate line and here we don't need to separate them using a comma just remember that enums are supported in MySQL but not necessarily in all database engines so if you use a different provider look at the Prisma documentation to make sure that enom are supported so here we add the status field and set the type to status here we can give it the default value of if you press control and space we can see all the possible values so we set it to open now we want to know when each issue is created the next field we need is created at this has to be a datetime and we give it a default value of here we use the Now function so every time a record is inserted into the issue table the current daytime is inserted into this column we need a similar field that is updated at this also has to be a date time now for the value use a different attribute called updated at with this every time an issue record is updated the database engine automatically updates the value of this column okay so here's our issue model now let's reformat our code so here in the terminal we're run npx Prisma format here's the end result it's beautiful the next step is to create and apply a migration so back in the terminal we run npx Prisma migrate Dev let's give it a name like initial migration or we can be more specific and say create issue good so as you know when we create a migration Prisma creates this migrations folder and for each migration it creates a subfolder that has a timestamp and the name of the migration in this folder we have a migration file and here we have SQL instructions for creating or updating our database schema to match our models for example here we have an instruction for creating a table called issue with these columns all right now let's make sure that our database is migrated properly so I'm going to use data grip you can also use workbench in data grip we create a new project let's call it issue tracker now in this project we go to database Explorer we add a new data source here we select MySQL in this window we make sure that our host is Local Host and the port is 3306 we set the username and the password of the root user and next we set the database to issue Dash tracker or whatever you used earlier now down here let me resize the window look there's a link that says we should update the driver you might have a different link that says install missing driver files so make sure to either install or update the driver good so let's click test connection all right the connection is successful beautiful now click on okay let's expand our database so here's our issue tracker database in this database we have two tables Prisma migrations that keeps track of all the migrations we have run so far and the issue table where restore our issues so we're done with this stab and now it's time to make a commit to our repository so here I'm going to say create the issue model all right we have a model now to store issues we have to create an API that clients can call so here in the app folder let's add a new folder called API inside the API folder we add a new folder called issues and here we add our route file in this route file we export a function called post that takes a request object of type next request now here first we call request the Json this returns a promise so we waited to get the body of the request and of course we have to make this function async nothing new so far we covered all of this in part one so if you're not sure what I'm doing you have to go back and start from part one now that we have the request body before we create an issue first we have to validate our request to make sure it doesn't have bad data now for data validation we use zot so back in the terminal let's install Zod version 3.22.20 Z from Zod next we call z. object and give it an object that defines the shape of the object and the body of our request so let's quickly go back to our Prisma schema file look in this issue model we only need values for the title and description because all the other fields have a default value the ID is automatically generated by the database and here we have assigned a default value to these other fields so we only need the title and description and the body of the request so back to our route file here we have two properties title this has to be a string with a minimum of one character and a maximum of 255 characters similarly we add description this also has to be a string with a minimum of one character now now this returns a schema we store it here now in more complex applications we are going to have different schemas for different operations so in those situations we can be more specific in terms of naming here for example we can call this create issue schema okay now that we have this schema we can use it to validate the body of the request so here we call create issue schema. save pars and give it the body object now this returns an object we call it validation next we check if validation is not successful we return the next response and here we include validation. error. errors now for this status what code should we use 400 that means bad request meaning the C client sent invalid data otherwise if the request is valid we should store this issue in our database to do that we have to import Prisma client now in part one I explained that we should have a single instance of the Prisma client and I explained the proper way to create that single instance so back to our browser let's search for nextjs Prisma client you will find this page best practice for instantiating Prisma client with nextjs on this page we have sample code for creating an instance of Prisma client we're going to copy all this code now back to our project we go to our Prisma folder here we add a new file called client. TS and paste all that code here now if this looks complicated don't worry about it you never have to touch it you never have to maintain it all this code is doing is creating a single instance of prismo client it ensures that we don't have multiple instances running okay so we have a prismo client now back to a route file on the top we import Prisma from at which represents the root of our project SL Prisma client with this Prisma client we can insert a new issue in our database so here we call Prisma issue. create we pass an object here we set data to an object with two properties title which we set to body the title and description which we said to body dot description okay now we await the call to get the new issue and finally we return this to the client so we return and next response with the new issue now optionally we can set the status to 2011 which means an object was created so we're done with the API now let's test it so let's bring up Postman and create a new request here we're going to send a post request to Local Host Port 3000 SL API SL isues here on the body tab we select raw and then Json let's pass a Json object first I'm going to set title to an M2 string and leave out the description property let's make sure our date of validation logic is working so send take a look all right we have a bad request and here in the response we have our error object beautiful so now let's send a valid issue I'm going to set the title to first issue and description to description of the first issue send now let's look at the response the status is 2011 and here's the issue that was created as you can see the ID was generated by the database and it's set to one now we can go back to data grip and refresh this table to make sure that our issue is stored in this table beautiful so let's make a commit and say build an API for creating issues all right to build the new issue page we're going to use radex UI which is a very popular component Library so head over to rui.com now radx comes in two flavors we have Radix themes which are beautifully styled components like the components you see here we have input fields buttons avatars and so on but we also have radic Primitives which are a bunch of unstyled components these components only have Behavior so we have to style it ourselves in this course we're going to use radic themes so back to this page let's click get started now to get started there are number of steps we have to follow first we have to install radx themes so let's copy this line and paste it in the terminal all right now let me show you the version that is installed here so let's go to package.json and search for radic the version that I'm using is 112 all right the second step is to import rad CSS file in our root layout so let's copy this line now we go to our root layout and import this style sheet on the top now the last step is to wrap our entire application inside the theme component that comes with Radix UI so back in our layout file here we import the theme component from radx ui/ themes next we wrap everything inside the body element with our theme component like this now to verify that we have set up everything properly let's go to our issues page so issues SL page and add a button here so on the top we import the button component from Rix ui/ themes now let's add a button here and set the label to new issue all right here's what we get so Radix UI set up properly now before we create the new your page let's make a commit and finish this step so setup Radix UI all right now we're going to build the new issue page in this lesson our focus is entirely on the look and feel of this page so we're not going to worry about submitting the form or handling validation errors we just want to build a page that has two input Fields okay so let's go back to the documentation of radx UI let's click on this navigation menu look here we have various components for creating layouts like box Flex grade and so on we also have various components for creating topography like text heading and so on and down here we have more full flesh components for example we have a component called text field so here's an example we start with is text field. root now if you want to have an icon like this magnifying glass inside the root component we add a slot and inside the slot we add our icon right after the slot we add a text field. input component in this case we don't care about an icon so all we need is a root and an input component so back to our project here in the issues folder let's add a new folder called new here we have our page file next we create a react component called new issue page on this page we need a text field component now if Auto completion doesn't work properly for you just restart vs code and the problem should go away so we add text field. root and inside that we add text field. input let's give it a placeholder like title now to add a link to this page we go to the issues page so issues slash page earlier we added this button now inside the button we're going to add a link component so we use the link component that is defined in next SL link package note that there is another link component defined in VX UI themes we don't want this one we should pick the one in the next package so we add a link and here we set href to SL isues slne and the label to new issue now back in the browser let's click this button all right we get an error saying cannot access text field. root on the server so because we're building a form and building forms requires user interaction the text build component cannot be rendered on the server so we have to make the new issue page a client component so on the top we add use client now refresh all right here's what we get by default our text input field takes the entire width of the page so to narrow it we can apply a Max WID to its container so here's the containing div we set class name to Max with x large with that here's what we get that looks better now this input field is so close to the left side of the screen so we should apply a padding to our main element so let's go back to our layout file here's our main element here we set class name to p5 and with that we get a bit of padding here that looks better so here's our text field right after that we want to add a text area again if you look at the documentation you will find the text area area component it's right here it's very easy to use this one is simpler we just add text area and give it a placeholder so back to our page right after our text field we add a text area and give it a placeholder description here's what we get now these two input fields are so close to each other to solve this problem you apply some vertical spacing so back to this page we apply another class here called space Y3 that looks better now finally we need to add the submit button so right after our text area we add a button component that is defined in radex UI and here we set the label to submit new issue all right here's what we get so we're done with this step and now it's time to make a commit to our repository so so here we say build the new issue page one of the great things about Rix UI is that it allows us to easily customize our theme let me show you how to do this so let's go back to our layout file all right look this is where we are using the theme component inside this tag right after the main element we add the theme panel component from radex UI now we get this panel for customizing our theme so as you can see our accent color is set to Blue that is why our buttons blue we can easily change it here and preview the changes in this lesson I'm going to select Violet now we can also change the light or dark mode now for some reason this is not currently working it's a little bit flaky key but don't worry about it here we can also change the radius of our components for example currently the radius is medium we can set it to none now we have sharp Corners here or we can set it to full we have round corners I'm going to select medium now down the bottom we can copy this theme now back to our layout let's paste it here look we get this theme tag with two props appearance and accent color so let's remove this other tag and this is how we can customize our theme we're done with the theme panel let's remove it from here now there is one more thing I want to show you in this lesson so right now we are not using the inter font that is used in nextjs projects by default so to refresh your memory look here in this layout file we are using the inter font from next SL font SLG gooogle Now when using R UI the inter font is not used by default because we have to do a bit of configuration to make it work to verify that the inter font is used let's select one of these links and inspect it all right here in Dev tools let's select the computer tab and look at the font family so font family is set to Apple system this is the default system font so it's not enter now how can we solve this problem back to the documentation of Radix UI here we have a page for topography here under theme let's go to topography and search for next so here are the instructions for using the inter font with radx UI so we have to go to our layout file and assign a custom CSS variable to this font so we copy this line and paste it here so here is where we create and Inter font in this object we set the variable to a custom CSS property in the first part of this course I explained how this feature works so back to this page next we need to go to our root layout and set the class name of the HTML element to enter. variable so by default that is .cl class name we have to change it to enter. variable so we use that custom CSS property so this is our root layout now the font is applied to our body element so we set the class name to enter. variable next we should create a custom CSS file for overwriting the styles of radex UI so we're going to create a file called theme conf. CSS and in that file We'll add this style so here in the app folder we add a new file called theme config CSS now let's copy this piece of code and paste it here and finally we have to import this file in our root layout so let's go back to our root layout on the top so first we import the default styles of RX UI then we import our custom theme file that is period SL theme config see SS and finally we add any Global Styles now back in the browser let's make sure that the inter font is loaded so let's select this element and inspect it now here on the computer tab look at the font family now we're using the inter font so we're done with this step and now it's time to make another commit so here I'm going to say customize radic UI theme hey guys M here I hope you're enjoying what you're seeing so far now after you finished this tutorial if you're ready to take your skills to the next level I highly recommend you to look at my ultimate nextjs series the full series contains two courses and is 12 hours long the first part which is 5 hours teaches you everything you need to know to build full stack applications with nextjs the second part which is 7 hours is where we build and deploy the complete issue tracker project so by the end you will have a complete project that you can show to your friends or potential employers and get your dream job the course comes with a certificate of completion and a 30day money back guarantee so you can try it riskfree if you're not happy just contact us and ask for refund so if you're serious about learning nextjs and want to use it professionally I highly encourage you to enroll in the full course after you finish this tutorial again in case you're interested the link is below this video all right now let's see how we can replace this text area component with a markdown editor for that we're going to use a component called react simple MD editor so search for this you will find this page on npm this is a react component wrapper around e mde which is a popular JavaScript library for rendering a markdown editor so let's look at the installation instructions it's very easy first we have to install these two packages react simple MD editor and easy MD so let's copy this line and paste it in the terminal good now to use this component we have to import the simple MD component and a corresponding CSS file so let's copy these two lines now we go back to our new new issue page and paste these import statements on the top now here we don't need react so let's remove it also we no longer need the text area component now all we have to do is replace this component with simple MD with that we get this beautiful markdown editor now this is fully customizable we can change the buttons on the toolbar here we also have spell checking by default so if you type something that is not a valid English word we get this red highlight now in this course I'm not going to talk about customizing this editor it's really outside the scope and it doesn't value every student of this course so I leave it up to you to read the documentation and figure out how to customize this if you want to all right we're done with this step and now it's time to make another commit so here I'm going to say add a markdown editor all right our form is ready now it's time to handle the form submission and to do that we're going to use a very popular Library called react hook form chances are you're familiar with this library but if not this Library makes it incredibly easy to handle form submission track changes in our form and display validation errors so let's go to the terminal and install react hook form version 7.46 point1 good now we go to our new issue page and on the top we import a hook called use form from react hook form next we Define an interface that defines the shape of our form it specifies What fields we have and what are their types so we Define an interface we can call it issue form here we have two properties title of type string and description of type string next we call this hook in our component so here we call use form and in angle brackets we specify the shape of our form in this case issue form we call this function and get an object now we destructure that object to grab the register function using this function we can register our input Fields with react hook form so it can keep track of them let me show you how this function works so let's do a console. log and call register and give it a label like title now back to the browser let's bring up the console look we get an object with four properties name which is title as well as onchange on blare and ref so these are the props that we should apply to an input field so react hook form can keep track of changes in that input field so let's remove console. log from here and call the register function right here where we use this input component so inside braces we call the register function and register this field with react form now you saw that the register function returns an object with four properties so here we have to use the spread operator so we can add those properties as props to this component now we cannot use the same technique with the simple MD component because it doesn't support additional props using the spread operator so if we add braces here and register this as the description field look we get a compile term error to solve this issue we have to use the controller component component in react hook form so on the top in addition to the use form hook we also import the controller component now let's remove these braces from here so instead of directly rendering this simple MD component we have to render a controller component that here we have to set a few props the first one is name which we set to description the second one is control and we set this to the control object that we can get from this hook so while D structuring this object we also pick the control property now we use that right here and finally here we set the render prop to a function for rendering an input field so we pass a function here and this is where we render a simple mde editor so let's paste it here now the final step we give this function an argument and destructure it to grab the Field property now this field has the same properties that you saw earlier like unblur unchange and so on so this is where we add braces to spread the field object okay so we have registered our input Fields with react hook form now we should handle the form submission to do that we have to grab another function from this object that is handle submit now we should wrap our input Fields with a form so I'm going to change this div to a form here we're going to use multic cursor editing so what was the shortcut command and D on Mac or control and D on Windows now both tags are selected let's change it to a form now here we set unsubmit here we call the handle submit function and give it a function that will be called when our form is submitted so we pass a function and here we can do a Conant the log that we want to display the data in our form data will be an argument in this function so we grab it here and pass it to console.log so let me put this on a new line so you can see things clearly this is how we can handle the submat now let's test our implementation so back in the browser I'm going to set the title to bug one and description to description of bug one now let's submit the form bring up the console here is the object that contains the data in our form all right now the final step instead of logging this data object on the console we want to send it to our API to do that we're going to use axas we can also use the fetch function in browsers but I personally prefer axas because the syntax is kind of easier to use but if you prefer to use fetch that's totally fine so let's bring up the terminal and install axis version 1.5.0 now on the top we import axus from axas now back to our submit Handler instead of Lo plug in the data on the console recall axis. poost as the URL we pass/ API SL isues and here we pass our data object now this returns a promise so we have to await it and make this function async now finally we want to redirect the user with the issues page to do that we have to use the router hook in nextjs so here we call use router now I explained this before you have two router hooks one is defined in next SL router the other is defined in next SL navigation make sure to use the second one because this is the one that works with the app router so we call this and get our router object and finally after this issue is saved we call router. push and send the user to the issues page let's test our implementation so one more time let's fill out this form description of book one and send this to the back end all right we got an error saying Navigator is not defined this is typically what happens when we use the wrong router hook in this case I haven't made a mistake so this could be a temporary issue I'm going to restart the web server and see if that solves a problem all right right now let's refresh this page as well so let's fill out this form one more time and submit it all right we are redirected to the issues page now let's go to our database and make sure this issue is properly saved there you go we have two instances of this book because previously even though we got an error with the Navigator object the bug was actually saved in our database all right we're done with this step so let's make another commit and say handle form submission our code doesn't currently have error handling so the next thing we want to do is to handle potential errors and provide feedback to the user if something goes wrong to do that we have to wrap these two lines inside a TR catch block so here we add a TR catch block select this item from Auto completion when we have the square box that means this is a code snippet so enter now we have this snippet press Escape now we grab these two lines and move them up like this now if you don't know how to do this let me show you the shortcut so on the top go to the selection menu and look at the shortcut for these move line up or down on Mac it's option with up and down I think on Windows should be alt so we put these two lines inside the tri block now let's just log the error that we get in the catch block now back in the browser let's open the form and see what we get in the console all right begin on axio error object now look at the properties here we have the code that is set to error bad request the message says request fail with status code of 400 now because this is an error that we anticipated in our API here we have a response so in the response object in the data property we have the error messages that are generated by zot so let's go back to our API we go to our route file take a look if the validation is not successful we are returning these validation errors now if you don't like the structure if you think this is too complicated here we can call the format method and with this will get a simpler structure so let's refresh and submit the form again take a look once again we go to response and data now for each field in our form we have a property like title and description we also have a generic error property for any validation error errors that are not specific to one of these fields now for each of these fields we have a property called underline errors and here we have a friendly error message like string must contain at least one character now we can also customize these error messages to do that we have to go back to our schema so over here as the second argument to the main method we can provide a custom error message like title is required we can do the same with our description field so description is required now let's submit the form one more time and look at our error object response data let's look at the title property there you go so we have title is required now in this case we don't really care about this error messages because we shouldn't be able to post the form if the form is invalid so in the next lesson we're going to implement client side validation and show errors to the user if the form is invalid but this technique is useful in situations where we have to rely on the backend to validate the data for example if you want to build a registration form we want to make sure that the user select a unique username that's not something that we can validate on the client we have to rely on the backend right in those cases this is how we can read the error messages returned from the server and then we can show that error to the user so back to our error handling code in this case we don't want to lock the error on the console instead we want to show a generic error message for unexpected errors and to do that first we have to declare a state variable for holding the error so here we use the state hook we initialize our variable to an empty string then we add error and set error and in our catch block wece simply call set error and give it a generic error message like an unexpected error occurred now we want to show the error message right above the form to do that we're going to use one of the components in R xui so let's look at our components here it is called where is it um call out so this is how a call out looks like we can also change the color to Red in terms of the structure we start with call out. Root if you want to add an icon then we add a callout icon and otherwise after that we add call out. text similar to how we use the text field component right so right above this form we want to add a call out to do that first we have to wrap this inside a fragment or inside a div I'm going to use a div because later we're going to apply a couple of classes here so let's wrap the form inside a div now right above the form we add call out. root and we want to render this only if we have an error so if we have an error then we render this call out now inside the call out we should add call out. text and this is where we Rend our error message now to change the color to Red we set the color prop to Red now save the changes back to the form let's submit it again now we have this call out on the top but the width of the call out is not the same as the width of our form so we have to move this Max width class to the containing div so let's grab it from here and add it here good now let's submit the form one more time all right that looks better I want to add a margin below this error message so let's give this call out a class of mb5 all right let's try one more time that looks good we're done with this step now let's make a commit and say handle errors all right now let's Implement client side validation so let's go to our route file so earlier we defined this schema for validating the object that is sent with our request now wouldn't that be nice if we could reuse the same schema for validating our form we can certainly do that let me show you how to do it first we have to grab this schema and put it into a separate model module so we can reuse it in two places in our API here and also in our form to do that I'm not going to grab this code and cut it and paste it somewhere else because with that our project will break we'll have to come back here and explicitly import this schema from that other module a better way is to use the refactoring commands in vs code so we put the cursor right here then right click and go to refactor now let's move this to a new file with as you can see vs code put our schema into this module and automatically imported it on the top we didn't have to manually do this right now back to our API folder so this is where our schema exists right next to our route file now we should take it outside of this folder and put it somewhere more General because we want to use this in our form as well so let's grab it and move it to the app folder and also I would prefer to re name this file to something more General like validation schemas so in the future we can add all our validation schemas in this file all right now to use this in our form first we have to install a package so bring up the terminal window and install at hook for/ resolvers version 3.3.1 this package allows react hook form to integrate with various data validation libraries like zot so let's install it good now let's go back to our new issue page on the top we have to import Zod resolver from Hook form SL resolvers slz now when calling the use form hook here we pass a configuration object and set the resolver to Zod resolver and here we pass our Zod schema that is create issue schema so now this schema is imported on the top from our app folder so this is how we can integrate react book forms with Zod now look at this interface we have defined here it kind of looks redundant because here we are defining two properties that already exist in our schema in the future if we decide to extend this form and add a new property we have to add it in two places in this validation schema and also in this interface wouldn't that be nicer if we could generate this interface based on our schema let me show you how to do that so first we import Z from Zod next we remove this interface and here we call z. infer in angle brackets we type type of and here we pass our schema create issue schema this returns a type so we store it in the type object and call it issue form so now we are letting Zod infer this type based on this schema okay all right next so we have integrated react hook form with Zod now to display validation errors here we have to grab the form State object this object represents everything we need to know about our form so we can destructure it right here now let's press control and space to look at various properties so we have errors we have is dirty this is useful if you want to know the form is changed you also have is submitted is valid and so on is valid is useful if you want to disable the submit button if the form is not valid now in this case we only care about this property errors now we want to render an error message after each field so this is where we have the title field right after that here we check if errors. tile is truthy that means we have an error for the title field so here we render a paragraph or we can use the text components in rixi make sure to import it from radex UI and this is for consistency so in this file we're using rui components as much as possible here we can set the color of text to red and with this we can make sure that all our validation errors have the same color and right here we render errors. tile. message now we need to add an error message for the description field as well so right after this controller we check if errors the description is truthy then we add a text component we set the color to red and here we render errors the description do message that's all we had to do now back in the browser let's submit the form we get our validation messages beautiful now here we have a bit of styling issue because the text component is not a block level element so let's right click it and inspect it look it's a span to solve this problem here we can set the as prop to the type of element that should be rendered for this error message we're going to use a paragraph We need to do this same for our description error now let's submit the form one more time all right that looks good we're done with this step so let's make another commit and say Implement client side validation look at the way we are rendering errors on this page do you see a problem here here's a problem every time time we want to render an error we have to remember to set these two props so our errors look consistent this is where we can extract this markup and put it into a separate reusable component so here in our project in the app folder let's add a new folder called components here we add a new file we call it error message now let's create a react component now typically here we Define an interface called props we give it a property called children of type react node then we add props here now we can destructure this to grab children but this is kind of unnecessary because in react we have a type that defines the shape so instead of explicitly defining this interface every time here we can use props with children this type is defined in the react module so if we control click this look this is a type that defines an object with this shape children okay so we no longer need this interface good now here we return a text component that is defined in rui we set those two props so we set color to red and as to p and then here we render children now we have a single place where we Define the look and feel of our errors and with this we can get rid of this duplication or code so we replace this text component with our custom error message now we can take this to the next level instead of checking if there is an error for this property every single time we can move this responsibility inside the error message component so here we can check if children is falsy then we return null so nothing is rendered otherwise we return a text component and with that we can simplify our code we can get rid of this condition now here we get a compilation error because title may be undefined to solve this we use optional chaining so here's the end result it's much nicer much cleaner and we don't have any kind of duplication here let's apply the same technique to the description error so we remove the braces and replace the text component with an error message and here we use optional chaining Let's test our application to make sure we haven't broken anything so I'm going to submit the form beautiful so we're done with this step and now it's time to make another commit extract the error message component now to improve user experience we want to show a spinner in the button when submitting the form to do that search for Tailwind elements spinner on this page you can see various examples of showing Spinners using Tailwind so here's a basic example we can also change the color we can use a different effect we have all sorts of spinners so let's look at the basic example look at the code so we're going to grab this markup and put it into a reusable component so let's copy it here now back to our project here in the components folder let's add a new file called spinner we create a react component and then paste all that markup now we have two class attributes that we should rename to class name one way is to put the cursor here press command and D on Mac or control and D on Windows to select the next occurence but let me show you another technique if we have many instances that we want to rename in one go we don't want to keep pressing command and D we can select all of them using a special shortcut so on the top Under The Selection menu look at the shortcut for select all occurrences on Mac it's shift command and L I guess on Windows is shift control and L so let's press Escape I'm going to press shift command and L now all instances of the class keyword are selected so let's rename this to class name save the changes now to test this let's go to our new issue page and put a spinner inside this button all right here's what we get our spinner is a little bit too large so to make it smaller let's go back to our spinner component and change the height and the width to four now we can take this to the next level and give it a size prop so we can render Spinners at different sizes but at this point that is over engineering because we don't have that requirement that's one of the traps that a lot of software developers fall into they start predicting all kinds of what if scenarios that may never happen so don't over engineer your Solutions instead focus on existing problems as opposed to problems that may never happen in the future so we change the size to four now here's what we get our spinner is a little bit too thick for this size so to make it thinner we change the size of the border from four to two all right I think that looks good now we want to show this only when the form is submitted to do that we go back to our new issue page and declare a state variable we initialize it to false and call it is submitting now in our Tri block before we call the backend first we said submitting to true and in our catch block if something goes wrong we reset it so the spinner doesn't stay there now finally in our button we render the spinner only if the form is submitting so is submitting if it's truthy then we render a spinner now it's also a good practice to disable the button to prevent the user from submitting the form twice this is especially important when building applications that deal with money so so let's set disabled to is submitting all right here's what we have Let's test our application so once again if we submit the form without any values we get our validation errors beautiful now let's add a bug here description of bug three submit beautiful we're done with this step and now it's time to make another commit add a spinner we're almost done with implementing our first feature so now let's spend a few minutes and talk about better ways to organize our code now the first thing I'm going to talk about is this inline function in this component so some people argue that we shouldn't use inline functions in the middle of our markup because they make things unnecessarily complicated now there are other people who like inline functions they prefer inline functions and they argue that inline functions are easier to understand because they don't have to jump back and forth between different parts of the code to see what is going on so this is one of those areas where different people have different opinions there's really no right or wrong here in my opinion inline functions are not necessarily evil if there are one or two lines it's better to keep them in line but otherwise if they get more complex it's better to move them outside and separate them from our markup in this case our inline function has seven lines of code so I prefer to move this logic outside of this markup so let's declare a constant called unsubmit and we set it to this piece of code like this so now the logic for submitting the form is completely separated from our markup we just have to remember to add unsubmit here with this our markup is completely separated from our logic so that was good now there is another issue we want to talk about here and that is this line of code some people argue that using axis in the middle of a component violates the separation of concerns principle what is separation of concerns well it's one of the old computer science principles that says we should separate a program into distinct modules each having a separate concern if concerns are well separated there are more opportunities for code reuse so people who argue that we shouldn't use AXS or make HTTP calls inside a component suggest that we should move this logic into a separate function outside of this module and then call that function here for example we could have a function like create issue that takes the data so in that function we'll have the code for making the HTTP call I I have done this a lot in the past but over time My Views have changed in this application I don't see any value in moving this logic inside a separate function that is just unnecessary abstraction because realistically in this application this is the only place where we need to create an issue so we're not going to reuse this function in other parts of our application so the promise of reusing this piece of logic doesn't apply here but in other applications making HTTP calls might be more comp licated for example sometimes when calling third party apis we have to include certain HTTP headers in each request in those cases we don't want to throw all that complexity inside our components so it's better to move the logic for making HTTP calls into separate modules so here's what I want you to take away software engineering is not black and white there is no one siiz feits all so if someone says this is the best practice you should always do things this way don't listen to that person every project is different every application has different requirements don't take someone else's solution and apply it as silver bullet in all your projects so in this application at this point I don't see a reason for moving this Logic for making HTTP call into a separate module so let's remove this comment we're done with this that so let's make one more commit here I'm going to say refactor move inline function congratulations on reaching this point and creating something awesome along with me now as I said before this tutorial is only the beginning so I invite you to join me in my ultimate nextjs Series this series contains two courses the first part covers everything about nextjs and part two is where we build and deploy this issue tracker project now because you have stuck with me till now I'm offering you a special discount but this is only available to the first 100 people so click the link below and let's continue this journey and build the eso tracker project together
