With timestamps:

00:00 - hey guys maj here today we're going to
00:03 - talk about insertion sort insertion sort
00:06 - is one of the many sorting algorithms
00:07 - that come up in coding interviews all
00:09 - the time
00:10 - in fact these days more and more
00:12 - companies ask data structure and
00:14 - algorithm questions in their interviews
00:15 - to see if you can think like a
00:17 - programmer in this video I'm going to
00:19 - show you how insertion sort works and
00:21 - how you can implement it in Java if you
00:23 - don't know Java that's perfectly fine
00:24 - you can still follow along and implement
00:27 - the insertion sort algorithm in your
00:28 - favorite programming language also if
00:31 - you want to learn Java I have a
00:32 - comprehensive to our tutorial for you
00:34 - here on my channel the link is below
00:36 - this video so let's jump in and get
00:38 - started
00:38 - [Music]
00:48 - the third sorting algorithm we're going
00:51 - to talk about is the insertion sort
00:53 - algorithm a good way to understand
00:55 - insertion sort is to think of playing a
00:57 - card game
00:57 - so imagine each item in this array
01:00 - represents a card the dealer gives you
01:02 - one item or one card at a time every
01:05 - time you get a card you insert it in the
01:07 - right position first you get 8 you keep
01:09 - it then you get 2 you insert it before 8
01:12 - next you get 4 you insert it between 8 &
01:15 - 2 then you get 1 you insert it before
01:17 - all the items finally get 3 and insert
01:20 - it after 2 so every time you get an item
01:23 - you insert it in the correct position
01:25 - that's why we call this algorithm
01:27 - insertion sort now let's see this in
01:29 - action so we get 8 and should find its
01:32 - correct position amongst the items or
01:34 - cards we have taken so far 8 is the only
01:38 - item we have seen so we assume it's in
01:40 - the correct position next we - we should
01:43 - insert it before 8 but how
01:45 - unlike the previous algorithms we're not
01:47 - going to do a swap here instead we're
01:50 - gonna look at all the items we have seen
01:51 - so far if they're greater than 2 we
01:54 - should shift them to the right to open
01:56 - space to insert - this is a key
01:59 - distinction between insertion sort and
02:01 - other algorithms we have talked about
02:02 - instead of swapping items with shift
02:05 - them to the right you'll see why in a
02:07 - second so 8 is greater than 2 and we
02:10 - should shift it to the right to open
02:11 - space for 2
02:13 - to do this first we store two in a
02:15 - separate variable called current next we
02:18 - shift 8 to the right well more
02:20 - accurately we copied to the right so it
02:23 - overrides two that's why you had to
02:25 - store two in a separate variable so we
02:27 - don't lose it now technically we have
02:30 - stored 8 in two places in this array but
02:32 - conceptually we can assume that we shift
02:34 - an 8 to the right so now the item at
02:37 - index 0 is empty so we store the value
02:40 - of the current variable here okay so we
02:43 - inserted 2 in the correct position
02:45 - amongst the items we have seen so far
02:47 - this is the sorted part of the array in
02:49 - every step we pick one item from the
02:52 - unsorted part and insert it at the
02:54 - correct position in the sorted part so
02:57 - next we read for now we look at the
02:58 - items we have seen so far if they're
03:00 - greater than 4 or shift them to the
03:02 - right to open space to insert 4 so here
03:05 - we shift 8 to the right now what about -
03:08 - should we shift it to the right
03:09 - no because 2 is smaller than 4 and it
03:13 - should stay where it is so we have found
03:15 - the right place to insert 4 all the
03:18 - items we have seen so far are in the
03:19 - correct position so next we read 1 again
03:22 - we should shift all the greater items to
03:24 - the right to open space for 1 here we
03:27 - should shift 8 4 and 2 to the right
03:30 - because they're all greater than 1 now
03:33 - we insert 1 in the correct position
03:35 - we're almost done one more time you read
03:38 - 3 and shift all the larger items that we
03:40 - have seen to the right now we insert 3
03:43 - at the correct position and we can see
03:45 - our array is fully sorted so this is
03:47 - insertion sort now let's do time
03:50 - complexity analysis here we need to
03:52 - iterate over the input array and read
03:54 - one item at a time
03:56 - that's an OL of an operation in each
03:58 - step of the iteration we need to iterate
04:01 - over the items we have seen so far and
04:03 - shift them if required in the best-case
04:05 - scenario if the array is sorted the
04:08 - current item is already in the correct
04:09 - position so we don't need to shift any
04:11 - items that's an O of one operation in
04:14 - the worst case scenario where the array
04:16 - is sorted in descending order we need to
04:19 - shift all the items we have seen to the
04:21 - right because the current item is
04:22 - smaller than all those items that's an O
04:25 - of n operation
04:26 - so the time complexity of insertion sort
04:29 - is all of n for a best-case scenario and
04:32 - om n squared for the worst-case scenario
04:34 - is the same as bubble sort now spend 20
04:38 - minutes and implement this algorithm on
04:39 - your own then come back see my solution
04:43 - you
04:47 - just like before let's add a new class
04:50 - called insertion sort in this class we
04:54 - need one method public void sort which
04:56 - takes an integer array now here we need
05:01 - to iterate over this array and insert
05:03 - each item in the correct position so we
05:06 - need a for loop we start from index one
05:09 - because as you saw in the previous video
05:11 - let me read the first item we assume
05:13 - it's in the correct position because
05:14 - there are no other items that we can
05:16 - compare this item to okay so we start at
05:19 - the second index as long as I is less
05:21 - than array that length we increment I
05:26 - now here we store the current item in a
05:29 - variable called current so we set this
05:32 - to array of I then we need another loop
05:35 - to look at all the previous items and if
05:38 - they're greater we need to shift them to
05:40 - the right we can use a for loop or a
05:42 - while loop in my opinion a while loop
05:44 - looks better here so let's say our loop
05:46 - variable is J we set it to I minus 1 we
05:50 - start from the previous item now as long
05:54 - as J is greater than or equal to 0 and
05:58 - the item that we have at this index is
06:01 - greater than the current then we need to
06:06 - shift this item to the right so we set
06:09 - array of J plus 1 to array of J so we
06:16 - copy the item at the same Dex to the
06:18 - right side okay and then we decrement J
06:21 - so after this while loop all the greater
06:24 - items have me shifted to the right
06:25 - finally we can store the current item at
06:28 - index J plus 1 so array of J plus 1
06:34 - equals current now let's test our
06:37 - implementation so back in the main class
06:40 - I'm gonna replace selection sort with
06:43 - insertion sort we have an empty array
06:45 - let's see if everything works no problem
06:49 - what if you have a single item so far so
06:54 - good what if you have two items
06:57 - they're sorted beautiful what if you
06:59 - have a few more items with some
07:02 - duplicates
07:06 - our array is sorted in ascending order
07:08 - beautiful
07:11 - hey guys Marcia I wanted to let you know
07:14 - that this video is actually part of my
07:16 - ultimate data structures and algorithms
07:18 - course the complete course is 13 hours
07:21 - long and I've divided it into three
07:23 - parts so you can take and complete each
07:24 - part easily if you're serious about
07:26 - learning data structures and algorithms
07:28 - I highly encourage you to take this
07:30 - course and learn all the essential data
07:32 - structures and algorithms from scratch
07:34 - it's much easier and faster than jumping
07:36 - from one tutorial to another we'll be
07:38 - talking about various types of data
07:40 - structures such as linked lists stacks
07:42 - queues hash tables binary trees AVL
07:46 - trees heaps tries graphs and various
07:49 - types of sorting searching and string
07:52 - manipulation algorithms the course is
07:54 - packed with almost 100 interview
07:55 - questions these are the interview
07:57 - questions that get asked that companies
07:58 - like Google Microsoft and Amazon you can
08:01 - watch the course online or offline
08:03 - anytime anywhere as many times as you
08:05 - want and you would also get a
08:07 - certificate of completion and a 30-day
08:09 - money-back guarantee it's exactly like
08:10 - this tutorial it just has more content
08:12 - if you're interested click on the link
08:15 - below this video to enroll in the course
08:16 - thank you and have a great day
08:21 - [Music]

Cleaned transcript:

hey guys maj here today we're going to talk about insertion sort insertion sort is one of the many sorting algorithms that come up in coding interviews all the time in fact these days more and more companies ask data structure and algorithm questions in their interviews to see if you can think like a programmer in this video I'm going to show you how insertion sort works and how you can implement it in Java if you don't know Java that's perfectly fine you can still follow along and implement the insertion sort algorithm in your favorite programming language also if you want to learn Java I have a comprehensive to our tutorial for you here on my channel the link is below this video so let's jump in and get started the third sorting algorithm we're going to talk about is the insertion sort algorithm a good way to understand insertion sort is to think of playing a card game so imagine each item in this array represents a card the dealer gives you one item or one card at a time every time you get a card you insert it in the right position first you get 8 you keep it then you get 2 you insert it before 8 next you get 4 you insert it between 8 & 2 then you get 1 you insert it before all the items finally get 3 and insert it after 2 so every time you get an item you insert it in the correct position that's why we call this algorithm insertion sort now let's see this in action so we get 8 and should find its correct position amongst the items or cards we have taken so far 8 is the only item we have seen so we assume it's in the correct position next we we should insert it before 8 but how unlike the previous algorithms we're not going to do a swap here instead we're gonna look at all the items we have seen so far if they're greater than 2 we should shift them to the right to open space to insert this is a key distinction between insertion sort and other algorithms we have talked about instead of swapping items with shift them to the right you'll see why in a second so 8 is greater than 2 and we should shift it to the right to open space for 2 to do this first we store two in a separate variable called current next we shift 8 to the right well more accurately we copied to the right so it overrides two that's why you had to store two in a separate variable so we don't lose it now technically we have stored 8 in two places in this array but conceptually we can assume that we shift an 8 to the right so now the item at index 0 is empty so we store the value of the current variable here okay so we inserted 2 in the correct position amongst the items we have seen so far this is the sorted part of the array in every step we pick one item from the unsorted part and insert it at the correct position in the sorted part so next we read for now we look at the items we have seen so far if they're greater than 4 or shift them to the right to open space to insert 4 so here we shift 8 to the right now what about should we shift it to the right no because 2 is smaller than 4 and it should stay where it is so we have found the right place to insert 4 all the items we have seen so far are in the correct position so next we read 1 again we should shift all the greater items to the right to open space for 1 here we should shift 8 4 and 2 to the right because they're all greater than 1 now we insert 1 in the correct position we're almost done one more time you read 3 and shift all the larger items that we have seen to the right now we insert 3 at the correct position and we can see our array is fully sorted so this is insertion sort now let's do time complexity analysis here we need to iterate over the input array and read one item at a time that's an OL of an operation in each step of the iteration we need to iterate over the items we have seen so far and shift them if required in the bestcase scenario if the array is sorted the current item is already in the correct position so we don't need to shift any items that's an O of one operation in the worst case scenario where the array is sorted in descending order we need to shift all the items we have seen to the right because the current item is smaller than all those items that's an O of n operation so the time complexity of insertion sort is all of n for a bestcase scenario and om n squared for the worstcase scenario is the same as bubble sort now spend 20 minutes and implement this algorithm on your own then come back see my solution you just like before let's add a new class called insertion sort in this class we need one method public void sort which takes an integer array now here we need to iterate over this array and insert each item in the correct position so we need a for loop we start from index one because as you saw in the previous video let me read the first item we assume it's in the correct position because there are no other items that we can compare this item to okay so we start at the second index as long as I is less than array that length we increment I now here we store the current item in a variable called current so we set this to array of I then we need another loop to look at all the previous items and if they're greater we need to shift them to the right we can use a for loop or a while loop in my opinion a while loop looks better here so let's say our loop variable is J we set it to I minus 1 we start from the previous item now as long as J is greater than or equal to 0 and the item that we have at this index is greater than the current then we need to shift this item to the right so we set array of J plus 1 to array of J so we copy the item at the same Dex to the right side okay and then we decrement J so after this while loop all the greater items have me shifted to the right finally we can store the current item at index J plus 1 so array of J plus 1 equals current now let's test our implementation so back in the main class I'm gonna replace selection sort with insertion sort we have an empty array let's see if everything works no problem what if you have a single item so far so good what if you have two items they're sorted beautiful what if you have a few more items with some duplicates our array is sorted in ascending order beautiful hey guys Marcia I wanted to let you know that this video is actually part of my ultimate data structures and algorithms course the complete course is 13 hours long and I've divided it into three parts so you can take and complete each part easily if you're serious about learning data structures and algorithms I highly encourage you to take this course and learn all the essential data structures and algorithms from scratch it's much easier and faster than jumping from one tutorial to another we'll be talking about various types of data structures such as linked lists stacks queues hash tables binary trees AVL trees heaps tries graphs and various types of sorting searching and string manipulation algorithms the course is packed with almost 100 interview questions these are the interview questions that get asked that companies like Google Microsoft and Amazon you can watch the course online or offline anytime anywhere as many times as you want and you would also get a certificate of completion and a 30day moneyback guarantee it's exactly like this tutorial it just has more content if you're interested click on the link below this video to enroll in the course thank you and have a great day
