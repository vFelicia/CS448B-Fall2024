With timestamps:

00:03 - okay we're gonna start our journey by
00:05 - learning about classes in this lecture
00:08 - I'm gonna introduce you to the basics of
00:10 - classes I'm going to show you a real
00:13 - world example of classes and why we need
00:15 - them then I'm gonna talk about what is
00:17 - an object and how it's different from a
00:19 - class and finally we'll talk about
00:21 - static members
00:24 - so what is a class a class is simply a
00:27 - building block of a software application
00:31 - so in the real world an application
00:33 - consists of multiple classes each
00:35 - responsible for a particular behavior in
00:38 - the application and overall all these
00:40 - classes together we'll provide the
00:42 - behavior expected from the application
00:44 - let's take a look at a real world
00:46 - example we all are familiar with the
00:49 - concept of blogs and posts let's say we
00:53 - would like to implement a web
00:54 - application as a blog engine with a
00:57 - typical layered architecture or software
00:59 - application consists of at least three
01:02 - layers presentation business logic which
01:05 - was also referred to as domain layer and
01:07 - data access which is also referred to as
01:10 - persistence layer in each of these
01:12 - layers we can have classes each
01:14 - responsible for something particular for
01:17 - example in the presentation layer we can
01:19 - have a class like post view which is
01:21 - purely responsible for displaying a post
01:24 - to the user
01:24 - in the business logic or domain layer we
01:27 - can have the concept of post itself and
01:29 - finally in the data access or
01:32 - persistence layer we can have a class
01:34 - like post repository which knows how to
01:36 - save a post to the database or load it
01:39 - from a database
01:41 - a real-world application often consists
01:43 - of hundreds or even thousands of classes
01:45 - collaborating with each other so for you
01:48 - as a c-sharp programmer it's absolutely
01:50 - crucial to understand classes and how to
01:53 - use them effectively to build a
01:55 - maintainable clean robust reliable
01:58 - application this lecture is pretty basic
02:01 - but as we progress in this course in
02:03 - every lecture and in every section I
02:05 - teach you something new about classes by
02:08 - the end of this course you're going to
02:10 - learn a lot of materials about how to
02:12 - use classes and interfaces to build
02:14 - loosely coupled extensible and
02:16 - maintainable applications so let's
02:19 - continue our journey now we know a
02:21 - little bit about a class so it's a type
02:23 - that we developers define and give it a
02:26 - responsibility depending on the kind of
02:28 - application we're building and the layer
02:30 - that class belongs to but what is inside
02:33 - a class a class essentially has two
02:35 - parts data which is represented by
02:37 - fields and behavior which is represented
02:41 - by methods or functions here is how we
02:45 - illustrate a class in UML or unified
02:48 - modeling language UML is a graphical
02:51 - language for representing classes and
02:53 - their collaboration and we use that as a
02:56 - communication tool as part of building
02:58 - software so in UML a class has three
03:01 - parts the first part is the name of the
03:04 - class then here are the fields or
03:06 - attributes of that class which represent
03:08 - data about that class and finally we've
03:11 - got the methods or functions which
03:13 - provides some behavior so in this
03:15 - example our person class has Phil's like
03:18 - name age height and weight and it has
03:21 - methods like walk talk eat and sleep
03:24 - let's take a look at another example
03:28 - talked about blogs and posts so a blog
03:31 - post can have attributes or fields like
03:34 - title description and day time and it
03:37 - can have methods like publish like or
03:40 - comment which receives a message
03:43 - a term that is often used with classes
03:46 - and sometimes used interchangeably is an
03:49 - object but an object is fundamentally
03:51 - different from a class yet a lot of
03:53 - developers including myself sometimes
03:55 - use the word object to refer to a class
03:57 - but an object is essentially an instance
04:00 - of a class that resides in the memory
04:04 - so back to our person example if person
04:06 - is a class we can have objects like John
04:09 - Mary and Scott these are instances of
04:12 - that person the person class or the
04:14 - person type defines the blueprint from
04:17 - which we can create objects at runtime
04:20 - these objects in the memory talk to each
04:22 - other and as a result we get the
04:24 - behavior expected from the application
04:27 - now let's see how we can declare a class
04:29 - in c-sharp
04:31 - here is a basic syntax for declaring a
04:33 - class public and class our keywords are
04:37 - reserved keywords in c-sharp and that's
04:39 - why i've indicated them with blue
04:41 -  is what we call an access
04:43 - modifier and that's something you're
04:44 - gonna learn later in this section so for
04:46 - now
04:47 - don't worry about it each class should
04:49 - have a name or an identifier like person
04:52 - in terms of naming convention and
04:54 - c-sharp we use paschal case to name our
04:56 - classes
04:57 - what is pascal case
04:59 - in pascal case the first letter of every
05:02 - word should be uppercase we also have
05:04 - camel case in which the first letter of
05:07 - the first word should be lowercase but
05:09 - the first letter of every word after
05:11 - that should be uppercase in still sharp
05:14 - we use camel case when naming parameters
05:16 - of methods as you will see later in this
05:18 - section so back to the declaration of
05:20 - our class the class can have fields and
05:23 - methods which we refer to as members of
05:26 - that class it put members inside these
05:28 - curly braces here we can declare a field
05:31 - for this class and call it name similar
05:34 - to the class we start with an access
05:35 - modifier in this case public then the
05:38 - datatype for that field and an
05:40 - identifier in the real world
05:42 - applications we shouldn't declare fields
05:44 - with public this is purely for taking
05:46 - you on a step-by-step journey without
05:48 - confusing you with a lot of details
05:50 - along the way as we progress in this
05:52 - section you will find the best way to
05:54 - declare fields okay now let's see how we
05:57 - can declare a method in this class very
06:00 - similar so we start with an access
06:02 - modifier and here is the signature of
06:03 - the method so a method can have a return
06:06 - type in this case void means it doesn't
06:08 - return any value then it has an
06:10 - identifier and here in brackets we can
06:13 - put any parameters that that method may
06:15 - need
06:16 - inside that method we have the code and
06:18 - here we can access any of the members of
06:20 - that class so in this example I'm simply
06:23 - using console table right line to
06:25 - display the name of that person on the
06:28 - console ok now that we have a class
06:30 - let's see how we can create an object or
06:32 - an instance from it
06:34 - to do that we use the new operator so we
06:37 - start with the type of the class in this
06:38 - case person we give it an identifier and
06:41 - then we use the new operator along with
06:44 - the name of the class to initialize an
06:46 - instance of that class note that here we
06:49 - are using camel notation for naming the
06:51 - person object
06:54 - a shorter way to write this code is to
06:56 - use var var is a c-sharp keyword and the
06:59 - reason we use that is to save us from
07:00 - typing the full name of a class because
07:03 - sometimes the name of the class might be
07:04 - quite a few characters plus as you see
07:07 - it's a little bit of duplication to
07:08 - repeat the name of the class in two
07:10 - places so we use the VAR keyword and the
07:13 - compiler automatically knows that this
07:15 - person object is of type person
07:20 - now that we have an object we can access
07:22 - members on that object like accessing
07:24 - the name field and giving a value or we
07:27 - can call one of its methods
07:30 - before we start coding let's talk about
07:32 - class members in c-sharp we have two
07:35 - types of class members we have instance
07:37 - members and study members an instance
07:40 - member is accessible from an object you
07:43 - have already seen that before so we
07:45 - create a person object and then call the
07:47 - introduced method on the object
07:50 - but we also have static members and a
07:52 - static member is accessible from the
07:54 - class not an object an example of that
07:58 - is console.writeline so console is a
08:01 - class and writeline is a static method
08:03 - so we don't have to create an instance
08:05 - of console using the new operator in
08:07 - order to call right line
08:11 - now you may wonder why do we use static
08:14 - members basically we use them to
08:16 - represent concepts that are singleton
08:18 - that means we should have only one
08:20 - instance of that concept in the memory
08:22 - think of the concept of the current date
08:25 - time we should have only one place in
08:27 - the memory where we know the current
08:29 - date time it doesn't make sense to have
08:32 - different objects it's telling us that
08:33 - current date time is a different value
08:36 - another example is console the right
08:39 - line when we run a console application
08:41 - basically we have only one console and
08:43 - that's why the console class and all his
08:46 - members are defined as static
08:50 - to declare a member as a study all you
08:52 - have to do is to use the static keyword
08:54 - after the access modifier
08:57 - you can use a static on any members of a
08:59 - class okay that's no fury let's open up
09:02 - visual studio and do some coding
09:06 - okay here I've got a console application
09:08 - in Visual Studio and that's where we're
09:11 - gonna do all the coding for this course
09:13 - you're not gonna get into the complexity
09:14 - of Windows applications or web
09:17 - applications or mobile apps we just want
09:19 - to learn about classes interfaces and
09:22 - object-oriented programming what you
09:24 - learn here you can always apply in any
09:26 - kind of application you're gonna build
09:28 - okay now let's start creating our first
09:30 - class so we create a class by public
09:35 - class let's give it a name like person
09:40 - let's define a field for it so a public
09:44 - string name again for now we're gonna
09:47 - use public until we get to the lecture
09:49 - about the access modifiers and then
09:51 - we're gonna learn a better way to define
09:53 - fields and let's create a method called
09:56 - introduce I want this method to take a
10:02 - parameter and that's the name of the
10:04 - other person that this person is going
10:06 - to introduce himself to so let's say
10:10 - introduce two and here we use the
10:13 - console class the right line method hi
10:18 - zero I am one basically what we have
10:24 - here is what we call a format string so
10:27 - it's like a template and here are
10:30 - parameters that we will fill by some
10:32 - values so I want the first parameter to
10:34 - be filled by the value of two argument
10:37 - and the second one is going to be the
10:40 - name field stored in the class
10:44 - now that we have this class let's create
10:46 - an object from it so we go to the main
10:49 - method we can either go person person
10:53 - equals new person or a shorter way is to
10:57 - use bar
11:00 - so with VAR well let the compiler figure
11:03 - out what is the type of this person
11:04 - object
11:05 - well compiler knows it's assigned to a
11:07 - new person object here so when you hover
11:10 - your mouse over VAR you see the tooltip
11:13 - says person
11:16 - we can assign this person named person
11:19 - that name equals a John and then we can
11:24 - call the introduced method
11:26 - and pass another name as an argument say
11:30 - introduce yourself to Marsh now if you
11:32 - run this application
11:36 - you see hi Marsh I'm John
11:41 - now let's take this to the next level
11:43 - let's say we would like to create a
11:45 - personal object from a string what we
11:48 - can do is to create a parse method so
11:51 - let's go and you find a parse method
11:54 - here the parse method should take a
11:57 - string and return a personal object so
12:00 - person parse string so STR basically
12:05 - what we need to do here is to create a
12:07 - person object set the name field based
12:09 - on the STR argument here and then return
12:12 - that so far personal equals new person
12:20 - we set the name to STR and finally
12:24 - returned that person now the interesting
12:28 - thing here is if you want to use this
12:30 - parse method we we have to use it on an
12:33 - object because it's an instance method
12:35 - so that means I can go here and say
12:38 - person dot parse and give it a name like
12:41 - John and that returns a person object so
12:45 - let's call it P and we can get rid of
12:49 - this name here for now see it's a little
12:52 - bit weird we have to create a person
12:54 - object first and then call the parse
12:56 - method to return a person object it's it
13:00 - just doesn't make sense that's where we
13:02 - use a static modifier so we can declare
13:05 - this parse method as a static and this
13:10 - way we don't have to create a person
13:12 - object first in order to parse a string
13:17 - so we can simply change this go to use
13:24 - the person class we parse that string
13:27 - and now we have a person object and
13:29 - finally we can call the introduced
13:31 - method on it let's run the application
13:38 - we get the same result so that's a use
13:41 - case for using a static member
13:44 - a static member is only accessible from
13:46 - the class and not an object that's
13:49 - pretty much it for this lecture in the
13:50 - next lecture we're going to learn about
13:52 - constructors I hope you enjoyed this
13:54 - lecture and thank you for watching
13:57 - hi guys ma chere I hope you're having a
14:00 - fantastic day or night wherever you are
14:03 - in the world this tutorial you have been
14:05 - watching is actually part of one of my C
14:07 - sharp courses where you will learn
14:09 - everything about classes interfaces and
14:12 - object-oriented programming in case
14:15 - you're interested to enroll in the full
14:16 - course I've put the link for you in the
14:18 - video description and if not that's
14:20 - perfectly fine have a great day

Cleaned transcript:

okay we're gonna start our journey by learning about classes in this lecture I'm gonna introduce you to the basics of classes I'm going to show you a real world example of classes and why we need them then I'm gonna talk about what is an object and how it's different from a class and finally we'll talk about static members so what is a class a class is simply a building block of a software application so in the real world an application consists of multiple classes each responsible for a particular behavior in the application and overall all these classes together we'll provide the behavior expected from the application let's take a look at a real world example we all are familiar with the concept of blogs and posts let's say we would like to implement a web application as a blog engine with a typical layered architecture or software application consists of at least three layers presentation business logic which was also referred to as domain layer and data access which is also referred to as persistence layer in each of these layers we can have classes each responsible for something particular for example in the presentation layer we can have a class like post view which is purely responsible for displaying a post to the user in the business logic or domain layer we can have the concept of post itself and finally in the data access or persistence layer we can have a class like post repository which knows how to save a post to the database or load it from a database a realworld application often consists of hundreds or even thousands of classes collaborating with each other so for you as a csharp programmer it's absolutely crucial to understand classes and how to use them effectively to build a maintainable clean robust reliable application this lecture is pretty basic but as we progress in this course in every lecture and in every section I teach you something new about classes by the end of this course you're going to learn a lot of materials about how to use classes and interfaces to build loosely coupled extensible and maintainable applications so let's continue our journey now we know a little bit about a class so it's a type that we developers define and give it a responsibility depending on the kind of application we're building and the layer that class belongs to but what is inside a class a class essentially has two parts data which is represented by fields and behavior which is represented by methods or functions here is how we illustrate a class in UML or unified modeling language UML is a graphical language for representing classes and their collaboration and we use that as a communication tool as part of building software so in UML a class has three parts the first part is the name of the class then here are the fields or attributes of that class which represent data about that class and finally we've got the methods or functions which provides some behavior so in this example our person class has Phil's like name age height and weight and it has methods like walk talk eat and sleep let's take a look at another example talked about blogs and posts so a blog post can have attributes or fields like title description and day time and it can have methods like publish like or comment which receives a message a term that is often used with classes and sometimes used interchangeably is an object but an object is fundamentally different from a class yet a lot of developers including myself sometimes use the word object to refer to a class but an object is essentially an instance of a class that resides in the memory so back to our person example if person is a class we can have objects like John Mary and Scott these are instances of that person the person class or the person type defines the blueprint from which we can create objects at runtime these objects in the memory talk to each other and as a result we get the behavior expected from the application now let's see how we can declare a class in csharp here is a basic syntax for declaring a class public and class our keywords are reserved keywords in csharp and that's why i've indicated them with blue is what we call an access modifier and that's something you're gonna learn later in this section so for now don't worry about it each class should have a name or an identifier like person in terms of naming convention and csharp we use paschal case to name our classes what is pascal case in pascal case the first letter of every word should be uppercase we also have camel case in which the first letter of the first word should be lowercase but the first letter of every word after that should be uppercase in still sharp we use camel case when naming parameters of methods as you will see later in this section so back to the declaration of our class the class can have fields and methods which we refer to as members of that class it put members inside these curly braces here we can declare a field for this class and call it name similar to the class we start with an access modifier in this case public then the datatype for that field and an identifier in the real world applications we shouldn't declare fields with public this is purely for taking you on a stepbystep journey without confusing you with a lot of details along the way as we progress in this section you will find the best way to declare fields okay now let's see how we can declare a method in this class very similar so we start with an access modifier and here is the signature of the method so a method can have a return type in this case void means it doesn't return any value then it has an identifier and here in brackets we can put any parameters that that method may need inside that method we have the code and here we can access any of the members of that class so in this example I'm simply using console table right line to display the name of that person on the console ok now that we have a class let's see how we can create an object or an instance from it to do that we use the new operator so we start with the type of the class in this case person we give it an identifier and then we use the new operator along with the name of the class to initialize an instance of that class note that here we are using camel notation for naming the person object a shorter way to write this code is to use var var is a csharp keyword and the reason we use that is to save us from typing the full name of a class because sometimes the name of the class might be quite a few characters plus as you see it's a little bit of duplication to repeat the name of the class in two places so we use the VAR keyword and the compiler automatically knows that this person object is of type person now that we have an object we can access members on that object like accessing the name field and giving a value or we can call one of its methods before we start coding let's talk about class members in csharp we have two types of class members we have instance members and study members an instance member is accessible from an object you have already seen that before so we create a person object and then call the introduced method on the object but we also have static members and a static member is accessible from the class not an object an example of that is console.writeline so console is a class and writeline is a static method so we don't have to create an instance of console using the new operator in order to call right line now you may wonder why do we use static members basically we use them to represent concepts that are singleton that means we should have only one instance of that concept in the memory think of the concept of the current date time we should have only one place in the memory where we know the current date time it doesn't make sense to have different objects it's telling us that current date time is a different value another example is console the right line when we run a console application basically we have only one console and that's why the console class and all his members are defined as static to declare a member as a study all you have to do is to use the static keyword after the access modifier you can use a static on any members of a class okay that's no fury let's open up visual studio and do some coding okay here I've got a console application in Visual Studio and that's where we're gonna do all the coding for this course you're not gonna get into the complexity of Windows applications or web applications or mobile apps we just want to learn about classes interfaces and objectoriented programming what you learn here you can always apply in any kind of application you're gonna build okay now let's start creating our first class so we create a class by public class let's give it a name like person let's define a field for it so a public string name again for now we're gonna use public until we get to the lecture about the access modifiers and then we're gonna learn a better way to define fields and let's create a method called introduce I want this method to take a parameter and that's the name of the other person that this person is going to introduce himself to so let's say introduce two and here we use the console class the right line method hi zero I am one basically what we have here is what we call a format string so it's like a template and here are parameters that we will fill by some values so I want the first parameter to be filled by the value of two argument and the second one is going to be the name field stored in the class now that we have this class let's create an object from it so we go to the main method we can either go person person equals new person or a shorter way is to use bar so with VAR well let the compiler figure out what is the type of this person object well compiler knows it's assigned to a new person object here so when you hover your mouse over VAR you see the tooltip says person we can assign this person named person that name equals a John and then we can call the introduced method and pass another name as an argument say introduce yourself to Marsh now if you run this application you see hi Marsh I'm John now let's take this to the next level let's say we would like to create a personal object from a string what we can do is to create a parse method so let's go and you find a parse method here the parse method should take a string and return a personal object so person parse string so STR basically what we need to do here is to create a person object set the name field based on the STR argument here and then return that so far personal equals new person we set the name to STR and finally returned that person now the interesting thing here is if you want to use this parse method we we have to use it on an object because it's an instance method so that means I can go here and say person dot parse and give it a name like John and that returns a person object so let's call it P and we can get rid of this name here for now see it's a little bit weird we have to create a person object first and then call the parse method to return a person object it's it just doesn't make sense that's where we use a static modifier so we can declare this parse method as a static and this way we don't have to create a person object first in order to parse a string so we can simply change this go to use the person class we parse that string and now we have a person object and finally we can call the introduced method on it let's run the application we get the same result so that's a use case for using a static member a static member is only accessible from the class and not an object that's pretty much it for this lecture in the next lecture we're going to learn about constructors I hope you enjoyed this lecture and thank you for watching hi guys ma chere I hope you're having a fantastic day or night wherever you are in the world this tutorial you have been watching is actually part of one of my C sharp courses where you will learn everything about classes interfaces and objectoriented programming in case you're interested to enroll in the full course I've put the link for you in the video description and if not that's perfectly fine have a great day
