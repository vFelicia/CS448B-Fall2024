With timestamps:

00:01 - one of the powerful building blocks of
00:03 - node is the HTTP module that we use for
00:06 - creating networking applications for
00:09 - example we can create a web server that
00:12 - listens for HTTP requests on a given
00:15 - port and with this we can easily create
00:17 - a back-end service for our client
00:20 - applications like a web application that
00:22 - we build with react or angular or a
00:25 - mobile application running on a mobile
00:27 - device so once again back in the note
00:30 - documentation and the list of modules we
00:32 - can find this HTTP module in this module
00:36 - you can see various classes like HTTP
00:39 - that agent HTTP that client request and
00:42 - so on each of this classes has a bunch
00:45 - of properties methods and events so back
00:49 - in vs code let's load the HTTP module so
00:52 - constant HTTP we set it to require HTTP
00:58 - okay now here we can call HTTP dot
01:03 - create server this is one of the
01:07 - functions defined in this module and
01:09 - with this we can create a web server so
01:12 - let's store the result in a server
01:15 - object now what is interesting is that
01:18 - this server is an event emitter so it
01:22 - has all the capabilities of event
01:24 - emitter that you saw earlier in this
01:26 - section so look server dot we have the
01:30 - on method or add listener or omit and so
01:35 - on also if you look at the documentation
01:39 - for the HTTP module on this page you can
01:42 - see HTTP that's server class here the
01:45 - documentation says that this class
01:47 - inherits from net dot server so this is
01:50 - another class defined in the net module
01:53 - let's have a look now here the
01:56 - documentation says that net the server
01:58 - is an event emitter so that's why I said
02:02 - a bunch of nodes core functionality is
02:04 - based on if an emitter
02:08 - so back to our server object now we can
02:11 - call server that listen and give it a
02:15 - port let's say port 3000 now following
02:19 - that I'm gonna add a console deadlock
02:23 - saying listening on port 3000 okay now
02:29 - when we run this application this server
02:31 - will listen on port 3000 as I told you
02:34 - before every time there is a new
02:36 - connection or new request this server
02:38 - raises an event so we can use the own
02:41 - method to handle that event so before
02:45 - listening we run a register a listener
02:47 - or a handler so server dot on the name
02:53 - of the event is connection then you can
02:55 - find in the documentation so you don't
02:58 - have to memorize any of these stuff okay
03:00 - and the second argument is a callback
03:03 - function or the actual listener as you
03:06 - can see in the tool tip here is listener
03:09 - is a function with one argument that is
03:11 - socket of type socket class and it
03:14 - returns void so here we have the arrow
03:17 - function syntax in es6 so let's add an
03:21 - error function that takes a socket and
03:24 - goes to this code block now here we can
03:29 - simply log something on the console new
03:32 - connection now back in the terminal
03:37 - let's run this application you can see
03:40 - we're listening on port 3,000 now back
03:44 - in the browser let's head over to
03:46 - localhost port 3000 and now if you look
03:50 - in the terminal you can see we have a
03:51 - new connection here so you can see this
03:55 - server object raises different kinds of
03:57 - events that you can respond to now in
03:59 - real world applications we are not going
04:01 - to respond to the connection event to
04:04 - build an HTTP service this is very low
04:07 - level so let's delete this what we
04:11 - commonly do is we pass a callback
04:14 - function to this create server method so
04:17 - function this function takes two
04:20 - parameter
04:21 - request and response or we can use the
04:26 - error function syntax so we remove the
04:28 - function keyword and add this fat arrow
04:32 - here now in this function instead of
04:35 - working with a socket we can work with
04:37 - the actual request or response objects
04:40 - so we can check if request that URL
04:43 - equals slash then we can send something
04:47 - to the client for example response dot
04:50 - write hello world and then we end the
04:57 - response okay now back in the terminal
05:01 - we can exit here by pressing ctrl + C
05:05 - and then run the application again okay
05:09 - we're still listening on port 3000 let's
05:12 - refresh this page so we got hello world
05:14 - on the home page now if you want to
05:18 - build a back-end service for our web or
05:20 - mobile applications we need to handle
05:22 - various routes here for example we can
05:26 - have another if block if requested URL
05:29 - equals slash API slash courses perhaps
05:34 - here we want to return the list of
05:36 - courses from the database so we would do
05:39 - something like this response dot right
05:42 - now here we want to return an array of
05:45 - objects using JSON so we use JSON dot
05:51 - stringify and give it an array of
05:54 - objects now for simplicity here we don't
05:57 - have to worry about the database or
05:59 - complex objects let's just return an
06:01 - array of numbers 1 2 & 3 so we pass this
06:07 - to json dot stringify which will convert
06:10 - this array into a string using JSON
06:12 - syntax and then we'll write it to the
06:15 - response and finally response good end
06:19 - now back in the terminal we need to stop
06:23 - this process again and run it one more
06:26 - time now in the future I will show you
06:28 - how we can automate this so every time
06:31 - we make a simple change to our
06:32 - application we don't have to restart it
06:34 - so now back in the browser if we go to
06:38 - slash API slash courses we get an array
06:42 - with three numbers so as you see
06:45 - building a web server we know it is very
06:47 - easy now in the real world we are not
06:50 - going to use this HTTP module to build a
06:53 - back-end service for our application the
06:55 - reason for this is because as you can
06:57 - see here as we add more routes this code
07:02 - gets more complex because we add all of
07:04 - them in a linear way inside this
07:07 - callback function so instead we use a
07:10 - framework called Express which gives our
07:13 - application a clean structure to handle
07:15 - various routes internally the Express
07:19 - framework is built on top of the HTTP
07:21 - module in node
07:25 - hi guys it's mash here thank you for
07:27 - watching my know tutorial I just wanted
07:29 - to let you know that this video you've
07:31 - been watching is part of my complete
07:33 - note course where you will learn
07:35 - everything about node from the basic to
07:37 - the advanced topics if you're serious
07:39 - about learning node I highly recommend
07:41 - you to enroll in my node course because
07:43 - this is much faster than jumping from
07:45 - one tutorial to another it saves you
07:47 - time plus you're going to get a lot of
07:50 - exercises that will prepare you for the
07:52 - real work and also at the end of the
07:54 - course you'll receive a certificate of
07:56 - completion that you can provide your
07:58 - current or future employer so if you
08:01 - want to enroll click on the link in the
08:03 - video description I hope to see you in
08:05 - the course

Cleaned transcript:

one of the powerful building blocks of node is the HTTP module that we use for creating networking applications for example we can create a web server that listens for HTTP requests on a given port and with this we can easily create a backend service for our client applications like a web application that we build with react or angular or a mobile application running on a mobile device so once again back in the note documentation and the list of modules we can find this HTTP module in this module you can see various classes like HTTP that agent HTTP that client request and so on each of this classes has a bunch of properties methods and events so back in vs code let's load the HTTP module so constant HTTP we set it to require HTTP okay now here we can call HTTP dot create server this is one of the functions defined in this module and with this we can create a web server so let's store the result in a server object now what is interesting is that this server is an event emitter so it has all the capabilities of event emitter that you saw earlier in this section so look server dot we have the on method or add listener or omit and so on also if you look at the documentation for the HTTP module on this page you can see HTTP that's server class here the documentation says that this class inherits from net dot server so this is another class defined in the net module let's have a look now here the documentation says that net the server is an event emitter so that's why I said a bunch of nodes core functionality is based on if an emitter so back to our server object now we can call server that listen and give it a port let's say port 3000 now following that I'm gonna add a console deadlock saying listening on port 3000 okay now when we run this application this server will listen on port 3000 as I told you before every time there is a new connection or new request this server raises an event so we can use the own method to handle that event so before listening we run a register a listener or a handler so server dot on the name of the event is connection then you can find in the documentation so you don't have to memorize any of these stuff okay and the second argument is a callback function or the actual listener as you can see in the tool tip here is listener is a function with one argument that is socket of type socket class and it returns void so here we have the arrow function syntax in es6 so let's add an error function that takes a socket and goes to this code block now here we can simply log something on the console new connection now back in the terminal let's run this application you can see we're listening on port 3,000 now back in the browser let's head over to localhost port 3000 and now if you look in the terminal you can see we have a new connection here so you can see this server object raises different kinds of events that you can respond to now in real world applications we are not going to respond to the connection event to build an HTTP service this is very low level so let's delete this what we commonly do is we pass a callback function to this create server method so function this function takes two parameter request and response or we can use the error function syntax so we remove the function keyword and add this fat arrow here now in this function instead of working with a socket we can work with the actual request or response objects so we can check if request that URL equals slash then we can send something to the client for example response dot write hello world and then we end the response okay now back in the terminal we can exit here by pressing ctrl + C and then run the application again okay we're still listening on port 3000 let's refresh this page so we got hello world on the home page now if you want to build a backend service for our web or mobile applications we need to handle various routes here for example we can have another if block if requested URL equals slash API slash courses perhaps here we want to return the list of courses from the database so we would do something like this response dot right now here we want to return an array of objects using JSON so we use JSON dot stringify and give it an array of objects now for simplicity here we don't have to worry about the database or complex objects let's just return an array of numbers 1 2 & 3 so we pass this to json dot stringify which will convert this array into a string using JSON syntax and then we'll write it to the response and finally response good end now back in the terminal we need to stop this process again and run it one more time now in the future I will show you how we can automate this so every time we make a simple change to our application we don't have to restart it so now back in the browser if we go to slash API slash courses we get an array with three numbers so as you see building a web server we know it is very easy now in the real world we are not going to use this HTTP module to build a backend service for our application the reason for this is because as you can see here as we add more routes this code gets more complex because we add all of them in a linear way inside this callback function so instead we use a framework called Express which gives our application a clean structure to handle various routes internally the Express framework is built on top of the HTTP module in node hi guys it's mash here thank you for watching my know tutorial I just wanted to let you know that this video you've been watching is part of my complete note course where you will learn everything about node from the basic to the advanced topics if you're serious about learning node I highly recommend you to enroll in my node course because this is much faster than jumping from one tutorial to another it saves you time plus you're going to get a lot of exercises that will prepare you for the real work and also at the end of the course you'll receive a certificate of completion that you can provide your current or future employer so if you want to enroll click on the link in the video description I hope to see you in the course
