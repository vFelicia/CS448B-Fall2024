With timestamps:

00:04 - a backroom view unlike what you might
00:07 - expect is not the page or view itself
00:09 - instead it's the object that is
00:12 - responsible for rendering the content of
00:14 - the view as well as responding to any
00:16 - events raised from there
00:17 - for example clicks drag and drops press
00:20 - keys and so on so backbone views are
00:23 - more like controllers in the classic MVC
00:26 - terms every view has a reference to a
00:29 - Dom element and is responsible for
00:31 - rendering the content of this element as
00:33 - well as responding to any events raised
00:36 - from it let's go ahead and create our
00:38 - first view
00:46 - you
01:01 - creating views is similar to creating
01:03 - models and collections we use the extend
01:06 - method to extend back upon that view
01:09 - let's see what's going on here the
01:11 - render method is where we implement the
01:13 - rendering logic this dollar L is a case
01:18 - jQuery object that contains the views
01:20 - Dom element we are using the jquery HTML
01:23 - method to display a hello world message
01:26 - on the view the convention returned a
01:29 - reference to the view at the end of the
01:31 - render method
01:32 - this helps chaining method calls as
01:35 - you'll see shortly
01:37 - now let's declare an instance of the
01:40 - view
01:47 - you
01:50 - when instantiate in the view were
01:52 - specifying Dom element to which this
01:54 - view should attach to we are doing this
01:57 - by setting the L property to a jQuery
01:59 - selector string in this case we are
02:02 - telling our view that there is an HTML
02:04 - element with the ID of container in our
02:06 - HTML markup this view will be
02:09 - responsible for rendering the content
02:10 - inside the container as well as
02:12 - responding to any events raised from it
02:17 - now let's go to our main that HTML and
02:19 - create this element
02:28 - you
02:30 - okay now let's try it in Chrome there
02:34 - you go
02:34 - we got the hello world message let's
02:37 - inspect the view object
02:44 - not the difference between the
02:47 - Elle and dollar L properties
02:50 - the L property is a jQuery selector that
02:53 - references the Dom element that this
02:55 - view owns the dollar L property is a
02:58 - case jQuery object that contains this
03:00 - Dom element
03:03 - it's faster to use this case jQuery
03:05 - object when we need to reference the Dom
03:07 - element or any of his children as
03:09 - opposed to constructing a jQuery object
03:11 - using the selector every time all right
03:14 - now let's go and make it tiny change to
03:16 - our code I'm going to remove the
03:19 - initialization of the L property let's
03:23 - refresh the page and see what happens
03:27 - the hello word message is gone but let
03:30 - me show you something interesting we're
03:32 - going to inspect the view again
03:39 - okay let's expand a dollar or property
03:42 - note that this property has initialized
03:45 - is referencing a div this means that if
03:48 - you don't specify the Dom element when
03:51 - instantiating a view backbone
03:53 - automatically creates one for the view
03:55 - but this Dom element is in the memory
03:57 - it's not inserted in the HTML markup and
04:00 - that's the reason we don't see the hello
04:02 - world message here let's go ahead and
04:05 - fix this
04:13 - you
04:18 - so we are using the jQuery selector to
04:20 - get the container element and then we
04:23 - use the HTML method to insert the views
04:25 - Dom element inside the container let's
04:28 - try it out there you go
04:34 - so the lesson is every view has a Dom
04:36 - element at all times if you specify a
04:39 - Dom element that exists on the page the
04:41 - view attaches itself to it otherwise the
04:44 - view will create a Dom element this Dom
04:47 - element is by default an empty div let
04:50 - me show this to you
04:53 - so let's inspect this element here now
04:57 - the div here we can overwrite the
05:00 - default and tell the view to create a
05:02 - different kind of HTML element let's see
05:05 - how it works
05:13 - we can use the tag name property to
05:16 - specify the type of HTML element to be
05:18 - created
05:24 - we can also give it a class
05:27 - or even an ID
05:30 - all righty HTML attributes
05:37 - you
05:43 - now let's see the result
05:49 - you
05:50 - note that this time we have a span with
05:53 - the idea of one two three four with the
05:55 - class song and it also has an html5 data
05:59 - attribute
06:05 - one last thing before we finish this
06:07 - lecture
06:09 - earlier I told you we should return a
06:11 - reference to the view at the end of the
06:13 - render method I told you this is used
06:16 - for chaining method calls let me clarify
06:19 - what I meant by not using this technique
06:22 - we can combine these two lines here into
06:25 - something like this
06:30 - because the return value from the render
06:33 - method is a reference to the song view
06:35 - object we can directly access its dollar
06:37 - L property you often see these in
06:40 - backbone code examples
06:45 - so to create a view we extend back on
06:48 - that view and implement the render
06:49 - method every view has a reference to a
06:52 - Dom element and is responsible for
06:54 - rendering anything inside that element
06:56 - are responding to events raised from
06:58 - there
07:01 - we can specify the element but
07:03 - instantiate interview using a jQuery
07:05 - selector if we don't specify the element
07:08 - backbone we'll create one for view this
07:11 - element is in the memory and we need to
07:13 - manually insert it on the page we can
07:16 - customize the Dom element that backbone
07:18 - creates for the view using the tag name
07:20 - class name ID and attributes properties
07:25 - okay so you have seen the basic
07:27 - structure of a view but backbone views
07:30 - are usually but not always used along
07:32 - with backbone models in this example
07:35 - when our view was rendered we saw a
07:37 - static hello world message in the next
07:40 - lecture I will show you how you can pass
07:42 - a model to a view this way we can render
07:44 - the view based on the values of the
07:46 - model's attributes thank you for
07:48 - watching

Cleaned transcript:

a backroom view unlike what you might expect is not the page or view itself instead it's the object that is responsible for rendering the content of the view as well as responding to any events raised from there for example clicks drag and drops press keys and so on so backbone views are more like controllers in the classic MVC terms every view has a reference to a Dom element and is responsible for rendering the content of this element as well as responding to any events raised from it let's go ahead and create our first view you creating views is similar to creating models and collections we use the extend method to extend back upon that view let's see what's going on here the render method is where we implement the rendering logic this dollar L is a case jQuery object that contains the views Dom element we are using the jquery HTML method to display a hello world message on the view the convention returned a reference to the view at the end of the render method this helps chaining method calls as you'll see shortly now let's declare an instance of the view you when instantiate in the view were specifying Dom element to which this view should attach to we are doing this by setting the L property to a jQuery selector string in this case we are telling our view that there is an HTML element with the ID of container in our HTML markup this view will be responsible for rendering the content inside the container as well as responding to any events raised from it now let's go to our main that HTML and create this element you okay now let's try it in Chrome there you go we got the hello world message let's inspect the view object not the difference between the Elle and dollar L properties the L property is a jQuery selector that references the Dom element that this view owns the dollar L property is a case jQuery object that contains this Dom element it's faster to use this case jQuery object when we need to reference the Dom element or any of his children as opposed to constructing a jQuery object using the selector every time all right now let's go and make it tiny change to our code I'm going to remove the initialization of the L property let's refresh the page and see what happens the hello word message is gone but let me show you something interesting we're going to inspect the view again okay let's expand a dollar or property note that this property has initialized is referencing a div this means that if you don't specify the Dom element when instantiating a view backbone automatically creates one for the view but this Dom element is in the memory it's not inserted in the HTML markup and that's the reason we don't see the hello world message here let's go ahead and fix this you so we are using the jQuery selector to get the container element and then we use the HTML method to insert the views Dom element inside the container let's try it out there you go so the lesson is every view has a Dom element at all times if you specify a Dom element that exists on the page the view attaches itself to it otherwise the view will create a Dom element this Dom element is by default an empty div let me show this to you so let's inspect this element here now the div here we can overwrite the default and tell the view to create a different kind of HTML element let's see how it works we can use the tag name property to specify the type of HTML element to be created we can also give it a class or even an ID all righty HTML attributes you now let's see the result you note that this time we have a span with the idea of one two three four with the class song and it also has an html5 data attribute one last thing before we finish this lecture earlier I told you we should return a reference to the view at the end of the render method I told you this is used for chaining method calls let me clarify what I meant by not using this technique we can combine these two lines here into something like this because the return value from the render method is a reference to the song view object we can directly access its dollar L property you often see these in backbone code examples so to create a view we extend back on that view and implement the render method every view has a reference to a Dom element and is responsible for rendering anything inside that element are responding to events raised from there we can specify the element but instantiate interview using a jQuery selector if we don't specify the element backbone we'll create one for view this element is in the memory and we need to manually insert it on the page we can customize the Dom element that backbone creates for the view using the tag name class name ID and attributes properties okay so you have seen the basic structure of a view but backbone views are usually but not always used along with backbone models in this example when our view was rendered we saw a static hello world message in the next lecture I will show you how you can pass a model to a view this way we can render the view based on the values of the model's attributes thank you for watching
