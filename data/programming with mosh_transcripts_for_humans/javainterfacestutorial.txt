With timestamps:

00:01 - in this video you're going to learn
00:02 - everything you need to know about java
00:04 - interfaces so by the end of this video
00:06 - you'll be able to write java code with
00:08 - confidence
00:09 - hi i'm mash hamadani and i've taught
00:11 - millions of people how to code through
00:13 - this channel and my online school
00:15 - codewoodmash.com this video is part of
00:18 - my ultimate java mastery course so once
00:20 - you finish this video if you want to
00:22 - learn more you may want to look at the
00:23 - complete course now let's jump in and
00:25 - get started
00:32 - let's start this section by defining
00:33 - functional interfaces a functional
00:36 - interface is an interface with only a
00:38 - single abstract method so earlier we
00:41 - talked about the comparable interface
00:43 - this interface has a single abstract
00:45 - method called
00:47 - compare2 so this is a functional
00:49 - interface we also talked about the
00:51 - comparator interface that is a
00:53 - functional interface as well
00:55 - now in this video i'm going to create a
00:56 - functional interface from scratch we're
00:58 - going to use this functional interface
01:00 - throughout this section
01:01 - so
01:02 - in this package lambdas i'm going to add
01:05 - a new class
01:06 - let's call this printer
01:08 - and change the kind to interface
01:14 - so this is the interface of a printer in
01:16 - one implementation we may want to print
01:18 - on the terminal in another
01:20 - implementation we may want to talk to an
01:22 - actual printer so we could have
01:24 - different implementations of this
01:26 - interface
01:27 - now what operations do we need here we
01:29 - need a single method for printing a
01:31 - message so
01:33 - void print
01:35 - message
01:36 - now we have an interface with a single
01:39 - abstract method so this is a functional
01:41 - interface
01:42 - now in the second part of this series i
01:44 - told you that in the recent years java
01:46 - introduced the concept of default
01:48 - methods in interfaces these default
01:50 - methods can have implementation so we
01:53 - can have a default method like this
01:55 - default void print twice which takes a
01:58 - message and
02:00 - prints it
02:01 - twice
02:02 - so we can have code we can have
02:04 - implementation in an interface i told
02:06 - you that in my opinion this is a bad
02:09 - approach that the java team has taken
02:11 - because interfaces should not have
02:13 - implementation they should only be used
02:15 - as contracts but that aside what i want
02:17 - to point out here is that this interface
02:19 - has two methods one of them is a default
02:22 - method with implementation the other is
02:24 - an abstract method this interface is
02:26 - still a functional interface because it
02:29 - has a single abstract method so it
02:31 - doesn't matter if we have many default
02:33 - or even static methods in our interfaces
02:36 - as long as we have a single abstract
02:38 - method we refer to that interface as a
02:40 - functional interface
02:42 - now let me delete this ugly default
02:44 - method
02:45 - all right
02:46 - so let's go ahead and implement this
02:48 - interface in a class
02:51 - i'm going to add a new class
02:53 - called console printer
02:57 - in this implementation we're going to
02:58 - print on the console or terminal so
03:01 - let's have this class implement the
03:03 - printer interface
03:07 - here we're going to add a print
03:08 - statement and print this message
03:11 - pretty straightforward right
03:13 - now back to our demo class
03:15 - here i'm going to create
03:17 - a static method
03:19 - public static i'm using static so i can
03:21 - easily call it from this other static
03:23 - method it doesn't have to be static so
03:26 - public static void grid
03:29 - this method needs a printer so here
03:31 - we're going to talk to the printer
03:33 - interface we don't care about the
03:34 - implementation we are programming to an
03:36 - interface okay so printer
03:39 - then we call printer
03:41 - dot print
03:43 - and here we can say hello world now in
03:46 - our show method i'm going to call
03:48 - the greet method
03:50 - here we need to pass an object that
03:52 - implements the printer interface so we
03:54 - can use our console printer object
03:58 - now when we run this program
04:00 - we see the hello world message so pretty
04:02 - straightforward now sometimes we don't
04:04 - want to explicitly create a class to
04:06 - implement an interface because this
04:08 - requires writing a bit of code sometimes
04:10 - we may not want to reuse this class
04:12 - in the next video i'm going to show you
04:14 - how to use anonymous inner classes for
04:16 - this purpose
04:20 - [Music]
04:24 - so in the last video we passed a new
04:27 - instance of our console printer class to
04:29 - agree method
04:30 - now as i told you sometimes we don't
04:32 - want to explicitly create a class to
04:34 - implement an interface perhaps we want
04:36 - to implement an interface only once and
04:38 - use it for a single purpose we don't
04:40 - want to reuse that class so that's where
04:43 - we use anonymous inner classes
04:45 - so instead of creating a new instance of
04:48 - the console printer class
04:50 - here we can type new
04:52 - printer so we type the name of the
04:54 - interface and press enter
04:56 - what we have here is called an anonymous
04:59 - inner class it's anonymous because this
05:01 - class doesn't have a name it's just an
05:03 - implementation and we call it an inner
05:06 - class because we're using this inside a
05:08 - method okay so
05:12 - in this class we're implementing the
05:14 - print method
05:15 - here we can use a print statement to
05:18 - print this message
05:20 - now when we run this program
05:23 - we get the exact same result so this is
05:25 - how we can use an anonymous inner class
05:29 - with anonymous inner classes we can
05:31 - achieve the same result by writing less
05:33 - code but java 8 introduced a better and
05:36 - more concise way to achieve the same
05:38 - result that's called a lambda expression
05:40 - and we're going to look at that next
05:45 - [Music]
05:49 - so our greet method talks to the printer
05:50 - interface and this is a functional
05:53 - interface because it has a single
05:55 - abstract method
05:57 - now wouldn't it be nice if we could
05:59 - implement this method in a standalone
06:01 - function like a function that exists on
06:03 - its own without belonging to a class
06:05 - that is what lambda expressions are for
06:08 - so a lambda expression is like an
06:10 - anonymous function that we can pass
06:11 - around let me show you so i'm going to
06:14 - rewrite this code using a lambda
06:16 - expression
06:17 - first recall
06:18 - the grid method
06:20 - now here we want to pass an
06:22 - implementation of the print method as an
06:24 - anonymous function
06:25 - so
06:27 - this print method has
06:29 - a single parameter of type string let's
06:31 - add that over here
06:33 - this is where we list our parameters so
06:35 - string message
06:37 - after parenthesis we add an arrow this
06:40 - is called the lambda operator
06:43 - and then we add braces to represent the
06:45 - body of this function
06:48 - now what should we do here we should add
06:50 - a print statement
06:51 - and print this message on the console
06:55 - what we have over here is called a
06:57 - lambda expression so if we have a
06:59 - functional interface we can represent
07:01 - this functional interface using a lambda
07:03 - expression that is why these interfaces
07:06 - are called functional because they
07:07 - represent a function
07:09 - so
07:11 - here we have a lambda expression as you
07:13 - can see this code is very clean and
07:15 - concise but we can make it better first
07:17 - of all we can remove the type of this
07:19 - parameter
07:21 - now the java compiler knows that this
07:23 - parameter is a string object because the
07:25 - lambda expression that we pass over here
07:28 - will be checked against the signature of
07:30 - the print method so the java compiler
07:32 - knows that this method has a single
07:34 - parameter and the type of this parameter
07:36 - is string so we don't have to repeat
07:38 - that type over here
07:40 - if i type message dot now we can see all
07:43 - the string methods
07:45 - by the same token if i add another
07:47 - parameter here
07:49 - the java compiler complains because it
07:51 - knows that our print method has a single
07:53 - parameter but here we're passing two
07:55 - parameters okay
07:57 - so for the most part we can exclude the
07:59 - type of parameters and let the java
08:01 - compiler infer them
08:03 - now if we have a single parameter we can
08:05 - also remove this parenthesis
08:08 - that makes our code cleaner and more
08:10 - concise we use parentheses only if we
08:12 - have no parameters or if we have a
08:15 - method with multiple parameters so we
08:18 - separate these parameters using a comma
08:20 - just like how we declare the parameters
08:22 - of a method okay
08:24 - so here we have
08:25 - a single parameter and we don't need
08:27 - parenthesis
08:28 - also if the body of this function has a
08:30 - single line of code we don't need these
08:33 - braces either
08:34 - so i can clean up this code by pressing
08:36 - alt on enter and selecting replace with
08:39 - expression lambda
08:42 - there you go
08:43 - so this download expression looks really
08:45 - clean and concise compare this with an
08:48 - anonymous inner class this is really
08:50 - ugly
08:51 - so let me remove this
08:54 - all right now here we're passing a
08:56 - lambda expression as an argument to a
08:58 - method but we can also store a lambda
09:00 - expression in a variable
09:02 - for example we can declare a variable of
09:05 - type printer
09:06 - and
09:07 - set it to a new console printer
09:10 - so this is the concrete implementation
09:13 - or we can set this to a lambda
09:15 - expression so here we say message goes
09:18 - to print message
09:20 - so lambda expressions are essentially
09:22 - objects but we can use them to represent
09:25 - anonymous functions
09:29 - [Music]
09:33 - in the body of this lambda we're using
09:35 - the message parameter that we have
09:37 - declared over here but we can also
09:39 - access the local variables in the
09:40 - enclosing method so i'm going to declare
09:43 - a variable called prefix and set it to
09:46 - hyphen
09:47 - now
09:48 - here we can reference prefix and then
09:50 - append the message so when we run
09:53 - we get hyphen hello world
09:55 - we can also access the static fields and
09:58 - the enclosing class so i'm going to move
10:00 - this from here and declare it as a
10:03 - static field in this class public static
10:06 - string prefix
10:07 - we set it to hyphen
10:10 - now we can access it in our lambda
10:12 - expression so when we run
10:14 - we get the same result as before
10:16 - we can also access the instance fields
10:19 - so i'm going to make this an instance
10:21 - field
10:22 - and also make the show method an
10:24 - instance method so as you can see we can
10:26 - access the prefix field now what about
10:30 - this
10:31 - what do you think
10:32 - this represents here it represents the
10:35 - current instance of the lambda's demo
10:37 - class so if we type dot you can see the
10:40 - prefix field and the show method so this
10:43 - is one of the differences between lambda
10:45 - expressions and anonymous inner classes
10:48 - in lambda expressions this references
10:51 - the enclosing object whereas in
10:53 - anonymous inner classes this references
10:56 - the current instance of the anonymous
10:58 - inner class another difference between
11:00 - these two types is that anonymous inner
11:02 - classes can have state so they can have
11:03 - fields to store some data
11:05 - in lambda expressions we cannot have
11:07 - fields because this lambda expression
11:09 - is just representing an anonymous
11:12 - function so we cannot have instance
11:14 - fields here we cannot have state we can
11:16 - only access the local variables declared
11:18 - in the enclosing object as well as the
11:20 - static and instance fields in the
11:22 - enclosing class
11:26 - [Music]
11:30 - sometimes all we do in a lambda
11:32 - expression is passing the parameter or
11:34 - parameters to an existing method for
11:37 - example over here we're simply passing
11:39 - this message to the print line method of
11:41 - this object
11:42 - in these cases it's easier to reference
11:44 - this method directly let me show you so
11:48 - here's the syntax we type the name of
11:50 - the class or the object that contains
11:52 - this method
11:53 - then we type double colons followed by
11:56 - the name of the method without
11:58 - parenthesis because we don't want to
11:59 - call this method we just want to add a
12:01 - reference to it for example if i want to
12:04 - rewrite this lambda expression using a
12:06 - method reference i would type
12:09 - greet
12:10 - now what is the object that contains the
12:12 - print line method
12:14 - it's this object right so we type
12:16 - system.out
12:18 - then we add double colons followed by
12:20 - the name of the method
12:22 - without parenthesis so
12:24 - this is a method reference and this code
12:26 - is identical to what we have over here
12:29 - now with intellij we can always convert
12:32 - these kind of lambda expressions to a
12:33 - method reference very easily so we put
12:36 - the carrot on the body of the lambda
12:38 - press alt enter and then replace lambda
12:41 - with metal reference there you go
12:44 - now with these method references we can
12:46 - reference static or instance methods in
12:48 - the class as well as constructors let me
12:51 - show you a few examples
12:52 - so i'm going to delete these
12:55 - and add a static method in this class
12:57 - public static void print
13:01 - message
13:02 - now the signature of this method matches
13:05 - the print method of our printer
13:07 - interface okay
13:08 - so
13:09 - here we call the grid method
13:12 - we should pass a printer object so here
13:14 - we can use a lambda expression
13:16 - message we take it and pass it to this
13:18 - method
13:21 - right again all we're doing here is
13:23 - passing the parameter to an existing
13:25 - method so we can use a method reference
13:27 - here
13:28 - we type the name of the class that
13:29 - contains this method in this case lam
13:32 - does demo so
13:34 - lambda's demo
13:36 - then double colons followed by the name
13:38 - of the method
13:39 - there you go
13:40 - or you can convert this using intellij
13:44 - now what if this was an instance
13:46 - method let's see how it works
13:49 - so i'm going to create
13:52 - a lambdas demo object
13:54 - demo we set it to a new instance of the
13:57 - lambdas demo class
13:59 - now we want to call the grid method
14:01 - and pass a lambda expression like this
14:03 - message
14:04 - goes to demo
14:05 - dot here we want to call this instance
14:07 - method so print message
14:10 - now to use a method reference
14:13 - we type the name of the object that
14:15 - contains this method
14:16 - demo double colons
14:19 - and print
14:21 - if we use intellij we get the exact same
14:24 - result
14:25 - now what about passing a value to a
14:27 - constructor let's take a look so delete
14:30 - i'm going to add a constructor here
14:34 - in this constructor we want to add a
14:36 - string parameter
14:38 - now let's say
14:40 - we call the greet method
14:42 - and pass a message to the constructor of
14:45 - the lambda's demo class
14:49 - how can we use a method reference here
14:52 - well
14:53 - we type the name of the class
14:54 - that is lambda's demo
14:56 - double colon and here we type new to
14:59 - represent the constructor
15:02 - if we use intellij we get the exact same
15:04 - result
15:06 - so with method references we can write
15:08 - compact and easier to read lambda
15:10 - expressions
15:14 - thank you so much for watching this
15:15 - video as i said this video is part of my
15:18 - ultimate java mastery course that
15:20 - teaches you everything you need to know
15:21 - about java from the basics to more
15:23 - advanced concepts so if you want to
15:25 - learn more i highly encourage you to
15:27 - take a full course it's much faster than
15:29 - jumping from one tutorial to another if
15:31 - you're interested the link is below this
15:33 - video thank you and have a great day
15:39 - [Music]
15:41 - you

Cleaned transcript:

in this video you're going to learn everything you need to know about java interfaces so by the end of this video you'll be able to write java code with confidence hi i'm mash hamadani and i've taught millions of people how to code through this channel and my online school codewoodmash.com this video is part of my ultimate java mastery course so once you finish this video if you want to learn more you may want to look at the complete course now let's jump in and get started let's start this section by defining functional interfaces a functional interface is an interface with only a single abstract method so earlier we talked about the comparable interface this interface has a single abstract method called compare2 so this is a functional interface we also talked about the comparator interface that is a functional interface as well now in this video i'm going to create a functional interface from scratch we're going to use this functional interface throughout this section so in this package lambdas i'm going to add a new class let's call this printer and change the kind to interface so this is the interface of a printer in one implementation we may want to print on the terminal in another implementation we may want to talk to an actual printer so we could have different implementations of this interface now what operations do we need here we need a single method for printing a message so void print message now we have an interface with a single abstract method so this is a functional interface now in the second part of this series i told you that in the recent years java introduced the concept of default methods in interfaces these default methods can have implementation so we can have a default method like this default void print twice which takes a message and prints it twice so we can have code we can have implementation in an interface i told you that in my opinion this is a bad approach that the java team has taken because interfaces should not have implementation they should only be used as contracts but that aside what i want to point out here is that this interface has two methods one of them is a default method with implementation the other is an abstract method this interface is still a functional interface because it has a single abstract method so it doesn't matter if we have many default or even static methods in our interfaces as long as we have a single abstract method we refer to that interface as a functional interface now let me delete this ugly default method all right so let's go ahead and implement this interface in a class i'm going to add a new class called console printer in this implementation we're going to print on the console or terminal so let's have this class implement the printer interface here we're going to add a print statement and print this message pretty straightforward right now back to our demo class here i'm going to create a static method public static i'm using static so i can easily call it from this other static method it doesn't have to be static so public static void grid this method needs a printer so here we're going to talk to the printer interface we don't care about the implementation we are programming to an interface okay so printer then we call printer dot print and here we can say hello world now in our show method i'm going to call the greet method here we need to pass an object that implements the printer interface so we can use our console printer object now when we run this program we see the hello world message so pretty straightforward now sometimes we don't want to explicitly create a class to implement an interface because this requires writing a bit of code sometimes we may not want to reuse this class in the next video i'm going to show you how to use anonymous inner classes for this purpose so in the last video we passed a new instance of our console printer class to agree method now as i told you sometimes we don't want to explicitly create a class to implement an interface perhaps we want to implement an interface only once and use it for a single purpose we don't want to reuse that class so that's where we use anonymous inner classes so instead of creating a new instance of the console printer class here we can type new printer so we type the name of the interface and press enter what we have here is called an anonymous inner class it's anonymous because this class doesn't have a name it's just an implementation and we call it an inner class because we're using this inside a method okay so in this class we're implementing the print method here we can use a print statement to print this message now when we run this program we get the exact same result so this is how we can use an anonymous inner class with anonymous inner classes we can achieve the same result by writing less code but java 8 introduced a better and more concise way to achieve the same result that's called a lambda expression and we're going to look at that next so our greet method talks to the printer interface and this is a functional interface because it has a single abstract method now wouldn't it be nice if we could implement this method in a standalone function like a function that exists on its own without belonging to a class that is what lambda expressions are for so a lambda expression is like an anonymous function that we can pass around let me show you so i'm going to rewrite this code using a lambda expression first recall the grid method now here we want to pass an implementation of the print method as an anonymous function so this print method has a single parameter of type string let's add that over here this is where we list our parameters so string message after parenthesis we add an arrow this is called the lambda operator and then we add braces to represent the body of this function now what should we do here we should add a print statement and print this message on the console what we have over here is called a lambda expression so if we have a functional interface we can represent this functional interface using a lambda expression that is why these interfaces are called functional because they represent a function so here we have a lambda expression as you can see this code is very clean and concise but we can make it better first of all we can remove the type of this parameter now the java compiler knows that this parameter is a string object because the lambda expression that we pass over here will be checked against the signature of the print method so the java compiler knows that this method has a single parameter and the type of this parameter is string so we don't have to repeat that type over here if i type message dot now we can see all the string methods by the same token if i add another parameter here the java compiler complains because it knows that our print method has a single parameter but here we're passing two parameters okay so for the most part we can exclude the type of parameters and let the java compiler infer them now if we have a single parameter we can also remove this parenthesis that makes our code cleaner and more concise we use parentheses only if we have no parameters or if we have a method with multiple parameters so we separate these parameters using a comma just like how we declare the parameters of a method okay so here we have a single parameter and we don't need parenthesis also if the body of this function has a single line of code we don't need these braces either so i can clean up this code by pressing alt on enter and selecting replace with expression lambda there you go so this download expression looks really clean and concise compare this with an anonymous inner class this is really ugly so let me remove this all right now here we're passing a lambda expression as an argument to a method but we can also store a lambda expression in a variable for example we can declare a variable of type printer and set it to a new console printer so this is the concrete implementation or we can set this to a lambda expression so here we say message goes to print message so lambda expressions are essentially objects but we can use them to represent anonymous functions in the body of this lambda we're using the message parameter that we have declared over here but we can also access the local variables in the enclosing method so i'm going to declare a variable called prefix and set it to hyphen now here we can reference prefix and then append the message so when we run we get hyphen hello world we can also access the static fields and the enclosing class so i'm going to move this from here and declare it as a static field in this class public static string prefix we set it to hyphen now we can access it in our lambda expression so when we run we get the same result as before we can also access the instance fields so i'm going to make this an instance field and also make the show method an instance method so as you can see we can access the prefix field now what about this what do you think this represents here it represents the current instance of the lambda's demo class so if we type dot you can see the prefix field and the show method so this is one of the differences between lambda expressions and anonymous inner classes in lambda expressions this references the enclosing object whereas in anonymous inner classes this references the current instance of the anonymous inner class another difference between these two types is that anonymous inner classes can have state so they can have fields to store some data in lambda expressions we cannot have fields because this lambda expression is just representing an anonymous function so we cannot have instance fields here we cannot have state we can only access the local variables declared in the enclosing object as well as the static and instance fields in the enclosing class sometimes all we do in a lambda expression is passing the parameter or parameters to an existing method for example over here we're simply passing this message to the print line method of this object in these cases it's easier to reference this method directly let me show you so here's the syntax we type the name of the class or the object that contains this method then we type double colons followed by the name of the method without parenthesis because we don't want to call this method we just want to add a reference to it for example if i want to rewrite this lambda expression using a method reference i would type greet now what is the object that contains the print line method it's this object right so we type system.out then we add double colons followed by the name of the method without parenthesis so this is a method reference and this code is identical to what we have over here now with intellij we can always convert these kind of lambda expressions to a method reference very easily so we put the carrot on the body of the lambda press alt enter and then replace lambda with metal reference there you go now with these method references we can reference static or instance methods in the class as well as constructors let me show you a few examples so i'm going to delete these and add a static method in this class public static void print message now the signature of this method matches the print method of our printer interface okay so here we call the grid method we should pass a printer object so here we can use a lambda expression message we take it and pass it to this method right again all we're doing here is passing the parameter to an existing method so we can use a method reference here we type the name of the class that contains this method in this case lam does demo so lambda's demo then double colons followed by the name of the method there you go or you can convert this using intellij now what if this was an instance method let's see how it works so i'm going to create a lambdas demo object demo we set it to a new instance of the lambdas demo class now we want to call the grid method and pass a lambda expression like this message goes to demo dot here we want to call this instance method so print message now to use a method reference we type the name of the object that contains this method demo double colons and print if we use intellij we get the exact same result now what about passing a value to a constructor let's take a look so delete i'm going to add a constructor here in this constructor we want to add a string parameter now let's say we call the greet method and pass a message to the constructor of the lambda's demo class how can we use a method reference here well we type the name of the class that is lambda's demo double colon and here we type new to represent the constructor if we use intellij we get the exact same result so with method references we can write compact and easier to read lambda expressions thank you so much for watching this video as i said this video is part of my ultimate java mastery course that teaches you everything you need to know about java from the basics to more advanced concepts so if you want to learn more i highly encourage you to take a full course it's much faster than jumping from one tutorial to another if you're interested the link is below this video thank you and have a great day you
