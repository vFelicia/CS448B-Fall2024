With timestamps:

00:00 - [Music]
00:00 - in this section we're going to look at
00:03 - the fundamentals of building
00:04 - applications with angular by the end of
00:07 - this section you will have a basic
00:09 - understanding of angular building blocks
00:10 - such as components templates directives
00:14 - and services so now let's get started
00:21 - so now that you have some basic
00:23 - familiarity with angular let's look at
00:26 - the building blocks of angular apps at
00:29 - the heart of every angular app we have
00:31 - one or more components in fact in a real
00:34 - world app we have tens or hundreds of
00:36 - components but what is a component a
00:39 - component encapsulate the data the HTML
00:43 - markup and the logic for a view which is
00:46 - the area of the screen that the user
00:47 - sees let's look at the real world
00:50 - example imagine we're gonna build a
00:52 - website like udemy so on this page we
00:55 - have a navigation bar a sidebar and an
00:59 - area to display the list of courses now
01:02 - we can think of all this as one view or
01:04 - one component or we can break this view
01:08 - into smaller more maintainable and
01:11 - potentially reusable components like
01:14 - navbar component sidebar component and
01:16 - courses component similarly in courses
01:19 - component we want to display one or more
01:22 - courses potentially we can break up this
01:25 - component into smaller components and
01:27 - also to take this to the next level each
01:30 - course component can include a rating
01:32 - component now we can reuse this rating
01:35 - component in multiple places in the same
01:38 - app or in an internal different app as
01:40 - you see angular embraces component-based
01:43 - architecture which allows us to work on
01:47 - smaller and more maintainable pieces
01:49 - that can also be reused in different
01:51 - places so once again a component
01:54 - encapsulate the data the HTML markup and
01:57 - the logic for a view which is an area of
02:00 - the screen that the user sees every
02:02 - application has at least one component
02:05 - which we call app component or route
02:08 - component a real word angular app is
02:10 - essentially a tree of components
02:12 - starting from the app component or the
02:15 - route component now in angular we also
02:17 - have another concept called modules a
02:20 - module is a container for a group of
02:23 - related components every angular app has
02:26 - at least one module which we call app
02:28 - module as your application grows you may
02:32 - want to break that module into smaller
02:35 - maintainable modules so in our udemy
02:38 - example we can potentially have modules
02:40 - like course module which includes all
02:42 - the components for displaying courses we
02:45 - can potentially have another module like
02:47 - messaging module which includes a bunch
02:49 - of components for the area of the
02:51 - website where you can send private
02:53 - messages to your instructors we can have
02:56 - an instructor module which includes the
02:58 - components for instructors dashboards
03:00 - that you don't see and potentially an
03:02 - admin module which is the area of the
03:04 - udemy website by the udemy staff as an
03:08 - analogy think of a supermarket in a
03:11 - supermarket we have different aisles for
03:13 - different products we have a section for
03:16 - fruits and vegetables we have another
03:18 - section for snacks another for hardware
03:21 - and so on
03:22 - the bigger the supermarket the more
03:24 - aisles we have in a tiny grocery store
03:27 - we have probably one or two aisles at
03:29 - the most the same applies to our angular
03:32 - apps so if you're building a simple
03:34 - application we have only one module
03:36 - which we call the app module but as our
03:39 - application grows in functionality we
03:42 - may need to break that module into
03:44 - smaller modules with each module
03:46 - responsible for a specific area of our
03:49 - application in that module we have a
03:51 - bunch of related components ok so this
03:54 - is the big picture as we go through this
03:56 - course you will learn about these
03:58 - building blocks in more detail
04:04 - all right now let's see these components
04:06 - in action there are basically three
04:08 - steps you need to follow in order to use
04:10 - a component first you need to create a
04:12 - component second you need to register
04:14 - that component in a module and third you
04:18 - need to add an element in your HTML
04:20 - markup let me show you what I mean by
04:22 - this so back in our first angular
04:25 - project first of all make sure to run
04:28 - and you serve to serve this application
04:34 - so now if you head over to local host
04:37 - port 4200 this is what you see beautiful
04:40 - now back in vs code
04:42 - I'm gonna create a new component so
04:45 - let's open up the file panel here in the
04:48 - source folder under app here I'm gonna
04:51 - add a new file now let's imagine I want
04:55 - to create a component to display the
04:57 - list of courses so look how I named this
05:00 - file courses dot component dot TS this
05:06 - is the convention that we use when
05:08 - building angular applications now if the
05:10 - name of the component has multiple words
05:12 - we separate them using a hyphen for
05:15 - example if you're building a component
05:17 - called course form it would call this
05:19 - course - form and then dot component TS
05:24 - okay so courses component the TS now
05:29 - here we start by creating a plain type
05:32 - script class so class courses component
05:38 - once again look at the naming convention
05:41 - here I'm using the Pascal naming
05:44 - convention so the first letter of every
05:46 - word should be capital and also by
05:49 - convention we use the suffix component
05:52 - in the name of the class so here's our
05:56 - class in order for angular to see this
05:58 - class first we need to export it now so
06:01 - far we have only a plain typescript
06:03 - class this is not a component in order
06:06 - to convert this to a component we need
06:08 - to add some metadata to it that angular
06:10 - understands we use a decorator to
06:13 - achieve this in angular we have a
06:15 - decorator called component
06:18 - we can attach to a class to make the
06:20 - class a component so first we need to
06:23 - import this decorator on the top so
06:26 - import curly braces component from now
06:32 - the name of the library so at angular
06:35 - slash core this is the core library of
06:38 - angular that you're going to see a lot
06:40 - in this course so here we import the
06:42 - component decorator and then we need to
06:44 - apply it there is type script class now
06:47 - look at the syntax we use add sign
06:50 - component and then call this like a
06:53 - function so this is what we call a
06:55 - decorator function now this function as
06:59 - you see here takes an argument so here
07:01 - we pass an object and in this object we
07:04 - add one or more properties to tell
07:06 - angular how this component works for
07:09 - example one property that we use quite
07:11 - often is selector so selector and we set
07:17 - this to a CSS selector so in CSS if I
07:19 - want to reference an element like this I
07:22 - use a selector like this if I want to
07:27 - reference an element like a div that has
07:29 - a class called courses my selector would
07:34 - be dot courses right and if I want to
07:37 - reference an element with the ID courses
07:41 - this is my selector just basic CSS okay
07:45 - so here we want to reference an element
07:48 - called courses why because with
07:51 - components we can extend HTML vocabulary
07:55 - so we can define new elements like
07:57 - courses and inside that we will have the
08:00 - list of courses or in the future we can
08:02 - define a custom elements a custom HTML
08:05 - element called rating and wherever we
08:07 - use that angular will render a rating
08:10 - component ok
08:11 - so let's delete this my selector for
08:15 - this component is courses now the second
08:18 - property we add here is template and
08:20 - that's the HTML markup we want to be
08:23 - rendered for this component now here I
08:26 - want to render something very simple so
08:28 - let's just add an h2 element
08:32 - and call this courses in a real-world
08:35 - application our templates can be several
08:37 - lines of code in that case we can put
08:39 - them in a separate file and I'm gonna
08:41 - show you how that works later in the
08:43 - course so this is a basic component in
08:47 - angular that was the first step the
08:49 - second step is to register this
08:51 - component in a module that currently our
08:54 - application has only one module which we
08:57 - call app module let me show you where
08:59 - that is so back here in the app folder
09:03 - look we have app add module now once
09:07 - again here we have three import
09:09 - statements on the top so nothing special
09:11 - here on the bottom we have a typescript
09:14 - class called app module and note that
09:18 - this class is decorated with another
09:20 - decorator function called ng module so
09:25 - with this we convert a plain Tasker
09:28 - class to a module from angular point of
09:31 - view now don't worry about all these
09:33 - properties here like declarations import
09:35 - providers and bootstrap you're going to
09:38 - learn about them later in the course
09:39 - what I want you to focus on now is this
09:42 - property declarations and this is where
09:45 - we add all the components that are part
09:47 - of this module so by default when we
09:50 - generate an application we have one
09:52 - component called app component and you
09:54 - can see that component is part of this
09:56 - module now I'm going to add our new
10:00 - component here so courses component so
10:05 - whenever I type the name of a class here
10:07 - and press ENTER it automatically
10:11 - imported on top of my file so import
10:14 - courses component from and here's the
10:17 - name of our typescript module so period
10:19 - slash which refers to the current folder
10:22 - and here's the name of the file courses
10:25 - that component I know that here we don't
10:27 - have dot TS in fact if you add that
10:30 - typescript compiler it doesn't like that
10:32 - so the name of the module is just the
10:34 - name of the file without the extension
10:36 - so if you want to add this plug-in to vs
10:39 - code simply go here and in the extension
10:44 - search box search
10:45 - for auto import so I currently I'm using
10:49 - auto import one point two point two
10:52 - simply install it and then you'll have
10:54 - to restart vs code alright so here's our
10:58 - second step now the third step back to
11:01 - our component so this is the selector
11:04 - for this component which means anywhere
11:06 - we have an element like courses angular
11:10 - is going to render the template for this
11:11 - component inside that element but where
11:15 - are we going to add that element let me
11:17 - show you so right here in the app folder
11:20 - we have this app dot component at HTML
11:23 - this is the external template for our
11:25 - app component let's have a look so all
11:30 - this markup you see here is for
11:32 - rendering the homepage and this is what
11:35 - we get now I want to simplify this I'm
11:38 - gonna get rid of all this markup add a
11:41 - simple h1 call this angular and below
11:46 - that I'm gonna add our custom element
11:49 - courses so when angular sees this
11:53 - element it's going to render the
11:54 - template of our courses component all
11:58 - right now back in the browser it's our
12:00 - new home page so let's right click this
12:03 - courses element and inspect this so look
12:07 - what we have here we have this h1 and
12:10 - below that we have our courses element
12:13 - and inside this you can see we have the
12:16 - template for our courses component so
12:19 - this is how angular applications work as
12:21 - another example look at this app root
12:24 - element inside the body element where is
12:28 - this app root well I can the source
12:31 - folder look at index dot HTML so this is
12:36 - the basic template for our application
12:38 - right now inside the body element we
12:41 - have an element called app - root this
12:44 - is a custom element because we don't
12:46 - have an element in HTML called app -
12:49 - root
12:49 - so from angular point of view we should
12:52 - have a component with a selector for
12:55 - this element and that's our app
12:57 - component let's have
12:59 - look at that so back in the app folder
13:03 - let's look at app that component at TS
13:07 - so here's our root component or app
13:09 - component look at the selector app -
13:12 - root
13:13 - so whenever angular sees an element like
13:15 - that it's going to render the template
13:18 - for this component inside that element
13:20 - in this case our template is external
13:23 - so if we have template URL and you can
13:26 - see the name of our template file after
13:28 - component at HTML so that's why inside
13:32 - app - root here we have the template for
13:35 - app component which includes an h1 and
13:37 - the courses element
13:43 - all right let's quickly review what we
13:45 - have done so far so we created this
13:47 - courses component here then we register
13:50 - this in-app module so here in applet
13:53 - module we added our component inside the
13:57 - declarations array and then finally use
13:59 - this component in the template for app
14:02 - component so let's click the review
14:04 - after component at HTML editors courses
14:07 - element here three steps ok now there
14:11 - are two problems with this approach the
14:13 - first problem is that this approach is a
14:16 - little bit tedious there are so many
14:17 - steps so first we had to create this
14:21 - typescript class then we had to import
14:23 - this component decorator on the top and
14:26 - next we had to apply it and this
14:28 - typescript class there's so much
14:30 - boilerplate code here now the second
14:32 - issue is that if you forget the second
14:35 - step our application is gonna break let
14:37 - me show you what happens so let's go to
14:40 - app top module I'm gonna delete this
14:45 - line here now let's see what happens
14:51 - back in the browser we got a blank page
14:54 - so now we need to look at the console
14:56 - tab of Chrome developer tools so right
15:00 - click anywhere on the page
15:01 - inspect so we can see we have two errors
15:05 - here you can see the details of these
15:07 - errors in the console tab so here's the
15:12 - error courses is not a known element so
15:16 - if you don't register a component in a
15:18 - module angular doesn't know about it and
15:21 - it doesn't know what to do with this
15:22 - courses element because this is not a
15:24 - native HTML element so now let me show
15:27 - you a quicker and more reliable way to
15:30 - create an angular component we need to
15:33 - go back to the terminal
15:34 - but look our terminal is always busy
15:36 - it's serving the application so we
15:38 - either have to open a new terminal
15:40 - window or we can actually open a
15:43 - terminal window inside vs code so back
15:47 - here if you press ctrl and backtick
15:50 - which is the character before the number
15:53 - 1 on your keyboard
15:56 - look we have a terminal window here and
15:57 - this is much easier to access and going
16:00 - back and forth between different windows
16:01 - so here we can use angular CLI to
16:05 - generate a component so just like how we
16:07 - generated an application with ng new we
16:10 - can also generate a component with this
16:13 - ng so the syntax is like this ng space G
16:18 - which is short for generate and C which
16:21 - is short for component and then the name
16:24 - of the component let's say we want to
16:26 - create a component called course so of
16:28 - course look at what happened angular CLI
16:33 - created a directory called course and
16:36 - inside this directory added four files a
16:39 - CSS file for storing the style sheets
16:42 - for this component an HTML file for
16:45 - storing the template a spec file which
16:48 - is for writing unit tests for this
16:49 - component and finally a typescript file
16:52 - which is the actual component itself now
16:55 - what is interesting here is that it also
16:57 - updated app dot module and registered
17:01 - this new component let's have a look so
17:04 - we can close this terminal window using
17:05 - the same shortcut which is control and
17:07 - backtick now we can open the files panel
17:10 - using command + B on Mac or control B on
17:14 - Windows okay look at Afton module so
17:20 - look inside the declarations array now
17:22 - we have course component so this way
17:25 - we don't have to remember to come back
17:27 - here and register our new components now
17:30 - before we move on let me just quickly
17:32 - add our courses component that I removed
17:35 - earlier ok now back in the files panel
17:40 - this is the folder for our new component
17:43 - so in this folder we have this four
17:46 - files now let's take a look at the
17:48 - typescript class it has all the
17:51 - boilerplate code that we wrote earlier
17:52 - plus a little bit more so here we are
17:55 - importing the component decorator and on
17:57 - NS which is an interface we're going to
17:59 - look at this later in the course we have
18:02 - this component decorator apply to our
18:03 - typescript class we have a selector you
18:06 - have the URL of our template file
18:09 - as well as the URL of our a style sheet
18:11 - file so angular CLI saves us a lot of
18:14 - time now as we go through this course I
18:17 - will show you how we can use this tool
18:18 - to generate other building blocks for
18:21 - your applications
18:25 - so earlier I told you that a component
18:28 - encapsulate the data the logic and the
18:31 - HTML markup for review so in this
18:34 - example in our courses component we have
18:37 - the HTML markup but we don't have any
18:40 - data or any logic so let's extend this
18:42 - example and take it to the next level I
18:45 - want to define a field in this class to
18:48 - hold the title of this page so title I'm
18:52 - going to set this to list of courses now
18:56 - I'm going to display this title in our
18:58 - template dynamically so I'm gonna remove
19:03 - this hard-coded label here in angular we
19:06 - have this special syntax double curly
19:09 - braces and we use this to render
19:11 - something in our template dynamically so
19:15 - here I can put this title field this
19:17 - expression will be evaluated at runtime
19:20 - and the value of this title field will
19:22 - be placed in our Dom now if the value of
19:25 - this title field changes at some point
19:27 - in the future angular will automatically
19:29 - update the Dom this is one of the
19:31 - beauties of angular framework so here we
19:34 - have this concept of data binding so
19:37 - we're binding our view to a filled in
19:39 - this component whenever the value of
19:41 - that field changes the view is
19:43 - automatically notified and updated all
19:45 - right now let's save the changes
19:47 - back in the browser alright here's our
19:50 - new title beautiful
19:53 - now back here we don't always have to
19:55 - put the name of a field here we can
19:57 - write any simple JavaScript expressions
20:00 - for example I can put a string here
20:03 - title colon and then concatenate this
20:07 - with our title field save look this is
20:12 - our new title here we can also call a
20:15 - method in this class to get some value
20:18 - for example let me define a method get
20:21 - title and here I'm gonna return this the
20:26 - title now here we can simply call our
20:31 - new method get title like this and we'll
20:36 - get the exact same result there you go
20:39 - list of courses so this special syntax
20:43 - here we call it string interpolation in
20:47 - the next lecture I'm gonna show you how
20:49 - to render a list of courses here
20:55 - alright now let's take this example to
20:57 - the next level instead of displaying a
20:59 - simple title field we want to display
21:01 - the list of courses so first we need a
21:04 - field to hold the list of courses so
21:07 - courses we set this to an array with
21:12 - three items course one course two and
21:16 - course three now this is a simplified
21:20 - example in a real world application
21:21 - instead of simple strings here we would
21:24 - have objects but don't worry we're gonna
21:26 - get there now I want to display these in
21:29 - our template how should we do that first
21:32 - we need to change this single quote to
21:35 - the backtick character so delete
21:38 - backtick backtick is the character
21:41 - before number one on your keyboard let
21:44 - me change this as well
21:45 - now the benefit of using the backtick is
21:48 - that we can break up this template into
21:50 - multiple lines and make it more readable
21:52 - so I want to put this h2 here and below
21:58 - that I want to add a ul and a bunch of
22:03 - list item elements like this now we want
22:06 - to repeat this Li for each course now
22:10 - for that we need to use one of the
22:11 - angular building blocks called directive
22:14 - we use directives to manipulate the Dom
22:17 - we can use them to add a Dom element or
22:20 - remove an existing Dom element or change
22:23 - the class of a Dom element or its style
22:26 - and so on so here we're gonna use a
22:29 - special directive called ng for we use
22:34 - it like an attribute in HTML so we set
22:36 - it to a string and here we're gonna
22:38 - write some expression now before going
22:40 - any further
22:41 - we should prefix this attribute with an
22:44 - asterisk this is a special syntax in
22:47 - angular so whenever you are using a
22:49 - directive that modifies the structure of
22:52 - a dumb you should prefix that directive
22:54 - with an asterisk in case you're curious
22:56 - about the reason I have covered it later
22:58 - in the section about directives so for
23:01 - now just remember whenever you are using
23:02 - a directive that modifies the structure
23:05 - of the Dom by adding or removing an
23:07 - element you need to prove
23:08 - fix that with an asterisk now here we
23:11 - want to write an expression similar to
23:14 - what we write in for each blocks so let
23:17 - course of courses what does this mean
23:22 - with the let keyword we are defining a
23:24 - variable so the name of our variable is
23:27 - course this is like a loop variable in
23:29 - JavaScript all is a special keyword and
23:32 - courses is the field in this class that
23:35 - we are iterating over so when angular
23:38 - sees this expression it's going to
23:40 - iterate over the courses field and in
23:43 - each iteration this course variable will
23:46 - hold the value of one course at a time
23:47 - now inside this list I know you want to
23:51 - display this course so once again we use
23:54 - string interpolation double curly braces
23:57 - and add this course variable here let's
24:01 - look at the result save back in the
24:04 - browser and here we have the list of our
24:07 - courses beautiful now in most real-world
24:09 - applications we get this courses from
24:12 - the server and for that we need to use
24:14 - another building block of and get our
24:15 - called a service and that's the topic
24:18 - for the next lecture
24:24 - all right now we have the list of
24:26 - courses here but in a real world
24:28 - application most of the time we get
24:30 - these courses from the server so instead
24:32 - of hard-coding them here we need to call
24:34 - an HTTP endpoint to get the list of
24:37 - courses now here we have two options one
24:41 - is to add the logic for calling an HTTP
24:44 - service here in this component but there
24:48 - are a couple of problems with this
24:49 - approach the first problem is that this
24:52 - logic is going to tightly couple this
24:54 - component to that HTTP endpoint now in
24:58 - the future when we want to write unit
25:00 - tests for this class we don't want to be
25:02 - dependent upon a live HTTP endpoint
25:05 - because this is going to make it harder
25:07 - to execute those unit tests so we want
25:11 - to create a fake implementation of an
25:14 - HTTP service so this is the first issue
25:16 - with writing this logic inside this
25:18 - class inside this component it's going
25:20 - to tightly couple this component to that
25:23 - HTTP endpoint the second issue is that
25:25 - maybe somewhere else in the application
25:27 - we're gonna have another page where we
25:30 - display the list of courses maybe it's
25:32 - part of a dashboard maybe it's somewhere
25:34 - for an admin with this implementation we
25:37 - have to repeat this logic the logic for
25:39 - consuming that HTTP service in multiple
25:42 - places and that's not good and finally
25:45 - the third issue with this implementation
25:46 - is that a component should not include
25:49 - any logic other than the presentation
25:52 - logic that is the logic behind this view
25:55 - what should happen when we click a
25:57 - button when we select an item from a
25:59 - drop-down list and so on details of how
26:02 - courses are retrieved should be
26:04 - delegated somewhere else in your
26:05 - application so where should we implement
26:07 - that logic in angular we use services
26:10 - for that so we're gonna define a
26:12 - separate class which we call a service
26:14 - and there we'll add this logic for
26:17 - getting the list of courses from an HTTP
26:19 - service then we can reuse this class in
26:22 - multiple places so let me show you how
26:24 - to do that here in the app folder I'm
26:27 - gonna add a new file now look at the
26:31 - naming convention courses dot service
26:35 - the TS
26:37 - so the name of our service is courses
26:39 - and by convention we have the word
26:42 - service in the file name
26:43 - and finally dot TS when creating a
26:47 - component we use courses does component
26:49 - at TS so note the difference now here
26:53 - once again we want to export a plane
26:55 - type script class so export class
26:59 - courses service so once again by
27:03 - convention we add the word service as a
27:06 - suffix in the class name now when
27:08 - creating components we decorate this
27:11 - class with the component decorator
27:13 - remember component but in angular we
27:17 - don't have a decorator for services so a
27:20 - service is essentially a plane type
27:22 - script class so delete now here we want
27:25 - to add a method for getting the list of
27:27 - courses get courses for now we don't
27:32 - want to get distracted with the
27:34 - complexity of consuming an HTTP service
27:37 - so let's just return the same array that
27:40 - we had in our component and later I will
27:42 - show you how to consume an HTTP service
27:45 - so back in our component
27:49 - I'm going to select this array here cut
27:53 - back in the service and simply return it
27:58 - from this method now imagine here in
28:00 - this method we have that logic for
28:02 - consuming an HTTP service with this
28:05 - implementation we can reuse this class
28:08 - we can reuse this logic in multiple
28:10 - places in our application and also this
28:14 - will separate or decouple our component
28:17 - from this logic so back in our component
28:20 - here we are not going to have any logic
28:23 - for consuming an HTTP service and this
28:26 - allows us to unit test this class
28:28 - without dependency upon that HTTP
28:32 - endpoint
28:32 - so while unit testing in this class we
28:35 - can provide a fake implementation of
28:37 - that service like if there's too
28:38 - complicated don't worry about it unit
28:41 - testing is something for the future ok
28:43 - now we have a service we need to use the
28:45 - service in our component how that's the
28:48 - topic for the next lecture
28:54 - okay now we have a service to get the
28:56 - list of courses from the server we need
28:59 - to use the service in this courses
29:01 - component so first we need to add a
29:04 - constructor here constructor because a
29:09 - constructor is where we initialize an
29:11 - object so here we need to create an
29:13 - instance of our courses service
29:16 - something like this let service be new
29:22 - courses service once again I'm using the
29:26 - auto import plug-in so when I press
29:28 - ENTER it automatically adds the import
29:32 - statement here on the top so import
29:35 - courses service from current folder
29:38 - courses dot service all right now back
29:42 - in the constructor so we have a service
29:46 - and then we can initialize this course
29:48 - is filled like this this that courses we
29:52 - set this to service that get courses
29:56 - let's test the application and make sure
29:58 - everything works up to this point same
30:01 - ok we get the same list beautiful
30:05 - however there is a problem with this
30:07 - implementation the first problem is that
30:10 - by using this new operator here we have
30:13 - tightly coupled this courses component
30:16 - to the courses service so this is
30:18 - exactly like the problem we had earlier
30:20 - if we implemented the logic for
30:23 - consuming an HTTP service inside this
30:26 - component we wouldn't be able to unit
30:28 - test this class now we put this logic in
30:30 - a different class courses service but
30:33 - because we're directly creating an
30:35 - instance of this class here we're still
30:37 - tightly coupled to that implementation
30:40 - the other issue here is that if in the
30:43 - future we decide to add a parameter to
30:46 - the constructor of course a service we
30:48 - have to come back here and anywhere else
30:51 - in our application where we have used
30:53 - this courses service and add a new
30:55 - argument like one so any time we change
30:58 - the constructor of the service we end up
31:01 - with multiple changes in our application
31:03 - code so this is very fragile so what
31:06 - should we do well in
31:08 - of recreating an instance of the courses
31:10 - service we can ask angular to do that
31:13 - for us so we can delete this line here
31:16 - and add a parameter in this constructor
31:20 - call it service of type courses service
31:26 - with this when anger is going to create
31:29 - an instance or component it looks at
31:32 - this constructor is that this
31:34 - constructor has a dependency this
31:36 - dependency is of type courses service so
31:40 - first it creates an instance of the
31:42 - courses service and then passes that to
31:45 - this constructor
31:45 - now with this implementation if we
31:48 - change the constructor of courses
31:51 - service and add a new parameter we don't
31:53 - have to modify a hundred places in our
31:55 - code to reflect the change angular will
31:58 - automatically instantiate a new courses
32:01 - service object the second benefit of
32:04 - this implementation is that when we're
32:06 - going to unit test this courses
32:08 - component instead of supplying an actual
32:11 - courses service to this constructor we
32:13 - can create a fake implementation of this
32:16 - service that doesn't use at HTTP service
32:19 - on the backend in other words we have
32:21 - decoupled our courses component from
32:24 - courses service so here's the lesson
32:26 - when you use the new operator like this
32:29 - inside a class you have tightly coupled
32:33 - your class to that implementation you
32:36 - cannot change this at runtime but when
32:38 - you add that dependency as a parameter
32:41 - of a constructor you have decoupled that
32:43 - class from that dependency now you're
32:46 - not done yet
32:47 - we need to instruct angular to create an
32:50 - instance of course a service and pass it
32:52 - to our courses component this concept is
32:55 - called dependency injection so we should
32:59 - instruct angular to inject the
33:01 - dependencies of this component into its
33:04 - constructor as simple as that
33:06 - that's dependency injection a lot of
33:08 - people think dependency injection is so
33:10 - complicated but it's really a $25 term
33:13 - for a five-cent concept so dependency
33:16 - injection means injecting or providing
33:19 - the dependencies of a class into its
33:21 - constructor
33:22 - now angular has a dependency injection
33:24 - framework built into it so when it's
33:27 - going to create an instance of a
33:29 - component it can inject the dependencies
33:31 - but in order for that to work we need to
33:34 - register these dependencies somewhere in
33:37 - our module so let's save the changes now
33:41 - we need to go to our app dot module so
33:45 - here is app dot module okay look at this
33:48 - engine module decorator here we have a
33:51 - property called providers which is set
33:54 - to an empty array in this array we need
33:58 - to register all the dependencies that
34:00 - components in this module are dependent
34:03 - upon for example our courses component
34:05 - is dependent upon courses service so we
34:09 - need to register courses service as a
34:11 - provider in this module so here I'm
34:17 - gonna add courses service now if you
34:21 - forget this step dependency injection is
34:23 - not gonna work let me show you what
34:25 - happens so I'm gonna comment out this
34:27 - line save back to the browser we get a
34:31 - blank page so that means something is
34:33 - wrong
34:34 - let's open up chrome developer tools
34:35 - with shift command and I on Mac or shift
34:39 - control I on Windows look at this error
34:42 - no provider for courses service this is
34:45 - an error that you might see quite often
34:47 - when building angular apps so the error
34:50 - is telling us that we have not
34:52 - registered courses service as a provider
34:55 - in our module so back in the app module
34:58 - I'm gonna add this courses service here
35:00 - save back in the browser and we have the
35:04 - list of courses now one more thing
35:06 - before we finish this lecture when you
35:08 - register at dependency as a provider in
35:11 - a module angular will create a single
35:14 - instance of that class for that entire
35:16 - module so imagine in this module we have
35:19 - 100 components and 50 of these
35:21 - components need the courses service in
35:25 - the memory we're gonna have only a
35:26 - single instance of courses service and
35:29 - angular will pass the same instance to
35:32 - all these components this is what we
35:34 - call the single
35:35 - on pattern so a single instance of a
35:38 - given object exists in the memory so a
35:41 - quick roundup vacuumer component we
35:44 - added courses service as a parameter in
35:46 - the constructor or in other words as a
35:48 - dependency of this class and then
35:50 - register this as a provider in our app
35:54 - module with this implementation when
35:57 - angular is going to create an instance
35:59 - of this component first it will
36:01 - instantiate its dependencies and then it
36:03 - will inject those dependencies into the
36:06 - constructor of this class and this is
36:08 - what we call dependency injection
36:14 - all right now let me show you a quick
36:16 - way to create a service in angular so we
36:20 - go to the terminal
36:20 - once again you can switch to the
36:22 - terminal window or you can press ctrl
36:25 - and backtick in vs code so here we have
36:29 - a small terminal window we're gonna use
36:31 - angular CLI to generate a service so ng
36:35 - g4 generate previously we use c4
36:39 - components now we're gonna use s for
36:41 - services imagine we're going to create a
36:44 - service for sending emails this service
36:47 - is going to call an HTTP endpoint
36:49 - somewhere for sending these emails so
36:52 - let's call this email I know that here I
36:54 - just add the service name I don't need
36:56 - to add dot service ok so this generates
37:02 - two files for us one is the actual
37:04 - service file and the other is a spec
37:07 - file which includes some boilerplate
37:09 - code for writing unit tests for that
37:11 - service so in the app folder look here's
37:15 - our new service email that service the
37:18 - TS so we have a plain type script class
37:21 - called email service but there is
37:24 - something extra here that you didn't see
37:25 - before we have this injectable which is
37:28 - another decorator function similar to
37:31 - the component decorator function what do
37:33 - we need this year you would need this
37:35 - decorator only if this service had
37:38 - dependencies in its constructor for
37:40 - example imagine here we had a dependency
37:43 - like log service of type log service in
37:48 - this case we need to apply this
37:50 - injectable decorate a function on this
37:53 - class and this tells angular that this
37:56 - class is an injectable class which means
37:58 - angular should be able to inject
38:00 - dependencies of this class into its
38:03 - constructor now we didn't use this
38:05 - decorator when defining components
38:07 - because when we use the component
38:09 - decorator that decorator internally
38:12 - includes this injectable decorator so
38:15 - that's all about injectable and by the
38:17 - way note that this decorator function is
38:19 - defined in angular slash core library
38:26 - right now I want you to use what you
38:29 - have learned in this section and build a
38:31 - page like this so apart from the main
38:33 - heading of our application you have a
38:35 - heading that includes the number of
38:37 - authors so here we have three authors
38:39 - and below that you have the name of
38:42 - these authors rendered using ul and Li
38:45 - so use angular CLI to generate a
38:48 - component and a service and write all
38:50 - the necessary code render a view like
38:53 - this you can see my solution in the next
38:55 - lecture hi
39:00 - thank you for watching my angular
39:01 - tutorial if you enjoyed this video
39:03 - please like it and share it with others
39:05 - also you can subscribe to my channel for
39:08 - free new videos every week this video is
39:11 - part of my complete angular course with
39:14 - almost 30 hours of high quality content
39:16 - where you learn everything about angular
39:19 - from the basic to the advanced topics
39:21 - all in one course so you don't have to
39:23 - jump from one tutorial to another in
39:25 - case you're interested you can get this
39:27 - course with a big discount using the
39:29 - link in the video description and if not
39:31 - that's perfectly fine continue watching
39:33 - as the next section is coming up

Cleaned transcript:

in this section we're going to look at the fundamentals of building applications with angular by the end of this section you will have a basic understanding of angular building blocks such as components templates directives and services so now let's get started so now that you have some basic familiarity with angular let's look at the building blocks of angular apps at the heart of every angular app we have one or more components in fact in a real world app we have tens or hundreds of components but what is a component a component encapsulate the data the HTML markup and the logic for a view which is the area of the screen that the user sees let's look at the real world example imagine we're gonna build a website like udemy so on this page we have a navigation bar a sidebar and an area to display the list of courses now we can think of all this as one view or one component or we can break this view into smaller more maintainable and potentially reusable components like navbar component sidebar component and courses component similarly in courses component we want to display one or more courses potentially we can break up this component into smaller components and also to take this to the next level each course component can include a rating component now we can reuse this rating component in multiple places in the same app or in an internal different app as you see angular embraces componentbased architecture which allows us to work on smaller and more maintainable pieces that can also be reused in different places so once again a component encapsulate the data the HTML markup and the logic for a view which is an area of the screen that the user sees every application has at least one component which we call app component or route component a real word angular app is essentially a tree of components starting from the app component or the route component now in angular we also have another concept called modules a module is a container for a group of related components every angular app has at least one module which we call app module as your application grows you may want to break that module into smaller maintainable modules so in our udemy example we can potentially have modules like course module which includes all the components for displaying courses we can potentially have another module like messaging module which includes a bunch of components for the area of the website where you can send private messages to your instructors we can have an instructor module which includes the components for instructors dashboards that you don't see and potentially an admin module which is the area of the udemy website by the udemy staff as an analogy think of a supermarket in a supermarket we have different aisles for different products we have a section for fruits and vegetables we have another section for snacks another for hardware and so on the bigger the supermarket the more aisles we have in a tiny grocery store we have probably one or two aisles at the most the same applies to our angular apps so if you're building a simple application we have only one module which we call the app module but as our application grows in functionality we may need to break that module into smaller modules with each module responsible for a specific area of our application in that module we have a bunch of related components ok so this is the big picture as we go through this course you will learn about these building blocks in more detail all right now let's see these components in action there are basically three steps you need to follow in order to use a component first you need to create a component second you need to register that component in a module and third you need to add an element in your HTML markup let me show you what I mean by this so back in our first angular project first of all make sure to run and you serve to serve this application so now if you head over to local host port 4200 this is what you see beautiful now back in vs code I'm gonna create a new component so let's open up the file panel here in the source folder under app here I'm gonna add a new file now let's imagine I want to create a component to display the list of courses so look how I named this file courses dot component dot TS this is the convention that we use when building angular applications now if the name of the component has multiple words we separate them using a hyphen for example if you're building a component called course form it would call this course form and then dot component TS okay so courses component the TS now here we start by creating a plain type script class so class courses component once again look at the naming convention here I'm using the Pascal naming convention so the first letter of every word should be capital and also by convention we use the suffix component in the name of the class so here's our class in order for angular to see this class first we need to export it now so far we have only a plain typescript class this is not a component in order to convert this to a component we need to add some metadata to it that angular understands we use a decorator to achieve this in angular we have a decorator called component we can attach to a class to make the class a component so first we need to import this decorator on the top so import curly braces component from now the name of the library so at angular slash core this is the core library of angular that you're going to see a lot in this course so here we import the component decorator and then we need to apply it there is type script class now look at the syntax we use add sign component and then call this like a function so this is what we call a decorator function now this function as you see here takes an argument so here we pass an object and in this object we add one or more properties to tell angular how this component works for example one property that we use quite often is selector so selector and we set this to a CSS selector so in CSS if I want to reference an element like this I use a selector like this if I want to reference an element like a div that has a class called courses my selector would be dot courses right and if I want to reference an element with the ID courses this is my selector just basic CSS okay so here we want to reference an element called courses why because with components we can extend HTML vocabulary so we can define new elements like courses and inside that we will have the list of courses or in the future we can define a custom elements a custom HTML element called rating and wherever we use that angular will render a rating component ok so let's delete this my selector for this component is courses now the second property we add here is template and that's the HTML markup we want to be rendered for this component now here I want to render something very simple so let's just add an h2 element and call this courses in a realworld application our templates can be several lines of code in that case we can put them in a separate file and I'm gonna show you how that works later in the course so this is a basic component in angular that was the first step the second step is to register this component in a module that currently our application has only one module which we call app module let me show you where that is so back here in the app folder look we have app add module now once again here we have three import statements on the top so nothing special here on the bottom we have a typescript class called app module and note that this class is decorated with another decorator function called ng module so with this we convert a plain Tasker class to a module from angular point of view now don't worry about all these properties here like declarations import providers and bootstrap you're going to learn about them later in the course what I want you to focus on now is this property declarations and this is where we add all the components that are part of this module so by default when we generate an application we have one component called app component and you can see that component is part of this module now I'm going to add our new component here so courses component so whenever I type the name of a class here and press ENTER it automatically imported on top of my file so import courses component from and here's the name of our typescript module so period slash which refers to the current folder and here's the name of the file courses that component I know that here we don't have dot TS in fact if you add that typescript compiler it doesn't like that so the name of the module is just the name of the file without the extension so if you want to add this plugin to vs code simply go here and in the extension search box search for auto import so I currently I'm using auto import one point two point two simply install it and then you'll have to restart vs code alright so here's our second step now the third step back to our component so this is the selector for this component which means anywhere we have an element like courses angular is going to render the template for this component inside that element but where are we going to add that element let me show you so right here in the app folder we have this app dot component at HTML this is the external template for our app component let's have a look so all this markup you see here is for rendering the homepage and this is what we get now I want to simplify this I'm gonna get rid of all this markup add a simple h1 call this angular and below that I'm gonna add our custom element courses so when angular sees this element it's going to render the template of our courses component all right now back in the browser it's our new home page so let's right click this courses element and inspect this so look what we have here we have this h1 and below that we have our courses element and inside this you can see we have the template for our courses component so this is how angular applications work as another example look at this app root element inside the body element where is this app root well I can the source folder look at index dot HTML so this is the basic template for our application right now inside the body element we have an element called app root this is a custom element because we don't have an element in HTML called app root so from angular point of view we should have a component with a selector for this element and that's our app component let's have look at that so back in the app folder let's look at app that component at TS so here's our root component or app component look at the selector app root so whenever angular sees an element like that it's going to render the template for this component inside that element in this case our template is external so if we have template URL and you can see the name of our template file after component at HTML so that's why inside app root here we have the template for app component which includes an h1 and the courses element all right let's quickly review what we have done so far so we created this courses component here then we register this inapp module so here in applet module we added our component inside the declarations array and then finally use this component in the template for app component so let's click the review after component at HTML editors courses element here three steps ok now there are two problems with this approach the first problem is that this approach is a little bit tedious there are so many steps so first we had to create this typescript class then we had to import this component decorator on the top and next we had to apply it and this typescript class there's so much boilerplate code here now the second issue is that if you forget the second step our application is gonna break let me show you what happens so let's go to app top module I'm gonna delete this line here now let's see what happens back in the browser we got a blank page so now we need to look at the console tab of Chrome developer tools so right click anywhere on the page inspect so we can see we have two errors here you can see the details of these errors in the console tab so here's the error courses is not a known element so if you don't register a component in a module angular doesn't know about it and it doesn't know what to do with this courses element because this is not a native HTML element so now let me show you a quicker and more reliable way to create an angular component we need to go back to the terminal but look our terminal is always busy it's serving the application so we either have to open a new terminal window or we can actually open a terminal window inside vs code so back here if you press ctrl and backtick which is the character before the number 1 on your keyboard look we have a terminal window here and this is much easier to access and going back and forth between different windows so here we can use angular CLI to generate a component so just like how we generated an application with ng new we can also generate a component with this ng so the syntax is like this ng space G which is short for generate and C which is short for component and then the name of the component let's say we want to create a component called course so of course look at what happened angular CLI created a directory called course and inside this directory added four files a CSS file for storing the style sheets for this component an HTML file for storing the template a spec file which is for writing unit tests for this component and finally a typescript file which is the actual component itself now what is interesting here is that it also updated app dot module and registered this new component let's have a look so we can close this terminal window using the same shortcut which is control and backtick now we can open the files panel using command + B on Mac or control B on Windows okay look at Afton module so look inside the declarations array now we have course component so this way we don't have to remember to come back here and register our new components now before we move on let me just quickly add our courses component that I removed earlier ok now back in the files panel this is the folder for our new component so in this folder we have this four files now let's take a look at the typescript class it has all the boilerplate code that we wrote earlier plus a little bit more so here we are importing the component decorator and on NS which is an interface we're going to look at this later in the course we have this component decorator apply to our typescript class we have a selector you have the URL of our template file as well as the URL of our a style sheet file so angular CLI saves us a lot of time now as we go through this course I will show you how we can use this tool to generate other building blocks for your applications so earlier I told you that a component encapsulate the data the logic and the HTML markup for review so in this example in our courses component we have the HTML markup but we don't have any data or any logic so let's extend this example and take it to the next level I want to define a field in this class to hold the title of this page so title I'm going to set this to list of courses now I'm going to display this title in our template dynamically so I'm gonna remove this hardcoded label here in angular we have this special syntax double curly braces and we use this to render something in our template dynamically so here I can put this title field this expression will be evaluated at runtime and the value of this title field will be placed in our Dom now if the value of this title field changes at some point in the future angular will automatically update the Dom this is one of the beauties of angular framework so here we have this concept of data binding so we're binding our view to a filled in this component whenever the value of that field changes the view is automatically notified and updated all right now let's save the changes back in the browser alright here's our new title beautiful now back here we don't always have to put the name of a field here we can write any simple JavaScript expressions for example I can put a string here title colon and then concatenate this with our title field save look this is our new title here we can also call a method in this class to get some value for example let me define a method get title and here I'm gonna return this the title now here we can simply call our new method get title like this and we'll get the exact same result there you go list of courses so this special syntax here we call it string interpolation in the next lecture I'm gonna show you how to render a list of courses here alright now let's take this example to the next level instead of displaying a simple title field we want to display the list of courses so first we need a field to hold the list of courses so courses we set this to an array with three items course one course two and course three now this is a simplified example in a real world application instead of simple strings here we would have objects but don't worry we're gonna get there now I want to display these in our template how should we do that first we need to change this single quote to the backtick character so delete backtick backtick is the character before number one on your keyboard let me change this as well now the benefit of using the backtick is that we can break up this template into multiple lines and make it more readable so I want to put this h2 here and below that I want to add a ul and a bunch of list item elements like this now we want to repeat this Li for each course now for that we need to use one of the angular building blocks called directive we use directives to manipulate the Dom we can use them to add a Dom element or remove an existing Dom element or change the class of a Dom element or its style and so on so here we're gonna use a special directive called ng for we use it like an attribute in HTML so we set it to a string and here we're gonna write some expression now before going any further we should prefix this attribute with an asterisk this is a special syntax in angular so whenever you are using a directive that modifies the structure of a dumb you should prefix that directive with an asterisk in case you're curious about the reason I have covered it later in the section about directives so for now just remember whenever you are using a directive that modifies the structure of the Dom by adding or removing an element you need to prove fix that with an asterisk now here we want to write an expression similar to what we write in for each blocks so let course of courses what does this mean with the let keyword we are defining a variable so the name of our variable is course this is like a loop variable in JavaScript all is a special keyword and courses is the field in this class that we are iterating over so when angular sees this expression it's going to iterate over the courses field and in each iteration this course variable will hold the value of one course at a time now inside this list I know you want to display this course so once again we use string interpolation double curly braces and add this course variable here let's look at the result save back in the browser and here we have the list of our courses beautiful now in most realworld applications we get this courses from the server and for that we need to use another building block of and get our called a service and that's the topic for the next lecture all right now we have the list of courses here but in a real world application most of the time we get these courses from the server so instead of hardcoding them here we need to call an HTTP endpoint to get the list of courses now here we have two options one is to add the logic for calling an HTTP service here in this component but there are a couple of problems with this approach the first problem is that this logic is going to tightly couple this component to that HTTP endpoint now in the future when we want to write unit tests for this class we don't want to be dependent upon a live HTTP endpoint because this is going to make it harder to execute those unit tests so we want to create a fake implementation of an HTTP service so this is the first issue with writing this logic inside this class inside this component it's going to tightly couple this component to that HTTP endpoint the second issue is that maybe somewhere else in the application we're gonna have another page where we display the list of courses maybe it's part of a dashboard maybe it's somewhere for an admin with this implementation we have to repeat this logic the logic for consuming that HTTP service in multiple places and that's not good and finally the third issue with this implementation is that a component should not include any logic other than the presentation logic that is the logic behind this view what should happen when we click a button when we select an item from a dropdown list and so on details of how courses are retrieved should be delegated somewhere else in your application so where should we implement that logic in angular we use services for that so we're gonna define a separate class which we call a service and there we'll add this logic for getting the list of courses from an HTTP service then we can reuse this class in multiple places so let me show you how to do that here in the app folder I'm gonna add a new file now look at the naming convention courses dot service the TS so the name of our service is courses and by convention we have the word service in the file name and finally dot TS when creating a component we use courses does component at TS so note the difference now here once again we want to export a plane type script class so export class courses service so once again by convention we add the word service as a suffix in the class name now when creating components we decorate this class with the component decorator remember component but in angular we don't have a decorator for services so a service is essentially a plane type script class so delete now here we want to add a method for getting the list of courses get courses for now we don't want to get distracted with the complexity of consuming an HTTP service so let's just return the same array that we had in our component and later I will show you how to consume an HTTP service so back in our component I'm going to select this array here cut back in the service and simply return it from this method now imagine here in this method we have that logic for consuming an HTTP service with this implementation we can reuse this class we can reuse this logic in multiple places in our application and also this will separate or decouple our component from this logic so back in our component here we are not going to have any logic for consuming an HTTP service and this allows us to unit test this class without dependency upon that HTTP endpoint so while unit testing in this class we can provide a fake implementation of that service like if there's too complicated don't worry about it unit testing is something for the future ok now we have a service we need to use the service in our component how that's the topic for the next lecture okay now we have a service to get the list of courses from the server we need to use the service in this courses component so first we need to add a constructor here constructor because a constructor is where we initialize an object so here we need to create an instance of our courses service something like this let service be new courses service once again I'm using the auto import plugin so when I press ENTER it automatically adds the import statement here on the top so import courses service from current folder courses dot service all right now back in the constructor so we have a service and then we can initialize this course is filled like this this that courses we set this to service that get courses let's test the application and make sure everything works up to this point same ok we get the same list beautiful however there is a problem with this implementation the first problem is that by using this new operator here we have tightly coupled this courses component to the courses service so this is exactly like the problem we had earlier if we implemented the logic for consuming an HTTP service inside this component we wouldn't be able to unit test this class now we put this logic in a different class courses service but because we're directly creating an instance of this class here we're still tightly coupled to that implementation the other issue here is that if in the future we decide to add a parameter to the constructor of course a service we have to come back here and anywhere else in our application where we have used this courses service and add a new argument like one so any time we change the constructor of the service we end up with multiple changes in our application code so this is very fragile so what should we do well in of recreating an instance of the courses service we can ask angular to do that for us so we can delete this line here and add a parameter in this constructor call it service of type courses service with this when anger is going to create an instance or component it looks at this constructor is that this constructor has a dependency this dependency is of type courses service so first it creates an instance of the courses service and then passes that to this constructor now with this implementation if we change the constructor of courses service and add a new parameter we don't have to modify a hundred places in our code to reflect the change angular will automatically instantiate a new courses service object the second benefit of this implementation is that when we're going to unit test this courses component instead of supplying an actual courses service to this constructor we can create a fake implementation of this service that doesn't use at HTTP service on the backend in other words we have decoupled our courses component from courses service so here's the lesson when you use the new operator like this inside a class you have tightly coupled your class to that implementation you cannot change this at runtime but when you add that dependency as a parameter of a constructor you have decoupled that class from that dependency now you're not done yet we need to instruct angular to create an instance of course a service and pass it to our courses component this concept is called dependency injection so we should instruct angular to inject the dependencies of this component into its constructor as simple as that that's dependency injection a lot of people think dependency injection is so complicated but it's really a $25 term for a fivecent concept so dependency injection means injecting or providing the dependencies of a class into its constructor now angular has a dependency injection framework built into it so when it's going to create an instance of a component it can inject the dependencies but in order for that to work we need to register these dependencies somewhere in our module so let's save the changes now we need to go to our app dot module so here is app dot module okay look at this engine module decorator here we have a property called providers which is set to an empty array in this array we need to register all the dependencies that components in this module are dependent upon for example our courses component is dependent upon courses service so we need to register courses service as a provider in this module so here I'm gonna add courses service now if you forget this step dependency injection is not gonna work let me show you what happens so I'm gonna comment out this line save back to the browser we get a blank page so that means something is wrong let's open up chrome developer tools with shift command and I on Mac or shift control I on Windows look at this error no provider for courses service this is an error that you might see quite often when building angular apps so the error is telling us that we have not registered courses service as a provider in our module so back in the app module I'm gonna add this courses service here save back in the browser and we have the list of courses now one more thing before we finish this lecture when you register at dependency as a provider in a module angular will create a single instance of that class for that entire module so imagine in this module we have 100 components and 50 of these components need the courses service in the memory we're gonna have only a single instance of courses service and angular will pass the same instance to all these components this is what we call the single on pattern so a single instance of a given object exists in the memory so a quick roundup vacuumer component we added courses service as a parameter in the constructor or in other words as a dependency of this class and then register this as a provider in our app module with this implementation when angular is going to create an instance of this component first it will instantiate its dependencies and then it will inject those dependencies into the constructor of this class and this is what we call dependency injection all right now let me show you a quick way to create a service in angular so we go to the terminal once again you can switch to the terminal window or you can press ctrl and backtick in vs code so here we have a small terminal window we're gonna use angular CLI to generate a service so ng g4 generate previously we use c4 components now we're gonna use s for services imagine we're going to create a service for sending emails this service is going to call an HTTP endpoint somewhere for sending these emails so let's call this email I know that here I just add the service name I don't need to add dot service ok so this generates two files for us one is the actual service file and the other is a spec file which includes some boilerplate code for writing unit tests for that service so in the app folder look here's our new service email that service the TS so we have a plain type script class called email service but there is something extra here that you didn't see before we have this injectable which is another decorator function similar to the component decorator function what do we need this year you would need this decorator only if this service had dependencies in its constructor for example imagine here we had a dependency like log service of type log service in this case we need to apply this injectable decorate a function on this class and this tells angular that this class is an injectable class which means angular should be able to inject dependencies of this class into its constructor now we didn't use this decorator when defining components because when we use the component decorator that decorator internally includes this injectable decorator so that's all about injectable and by the way note that this decorator function is defined in angular slash core library right now I want you to use what you have learned in this section and build a page like this so apart from the main heading of our application you have a heading that includes the number of authors so here we have three authors and below that you have the name of these authors rendered using ul and Li so use angular CLI to generate a component and a service and write all the necessary code render a view like this you can see my solution in the next lecture hi thank you for watching my angular tutorial if you enjoyed this video please like it and share it with others also you can subscribe to my channel for free new videos every week this video is part of my complete angular course with almost 30 hours of high quality content where you learn everything about angular from the basic to the advanced topics all in one course so you don't have to jump from one tutorial to another in case you're interested you can get this course with a big discount using the link in the video description and if not that's perfectly fine continue watching as the next section is coming up
