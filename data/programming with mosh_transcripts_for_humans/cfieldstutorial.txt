With timestamps:

00:03 - okay we got two fields at the beginning
00:06 - of this section I gave you a brief
00:08 - explanation of fields a film is like
00:10 - variable that we declare at the class
00:12 - level and we use that to store data
00:15 - about the class so in this lecture I'm
00:18 - gonna talk about a couple of different
00:19 - ways to initialize fields and then I'll
00:22 - talk about the concept of read-only
00:24 - fields so in the last lecture you saw me
00:27 - declaring a class called customer which
00:28 - had a list of orders
00:31 - and you also saw how I initialize that
00:33 - field using the default or the
00:35 - parameterless constructor while this
00:38 - approach is perfectly fine there is also
00:40 - another school of thought when it comes
00:42 - to initializing fields some developers
00:44 - believe we should use constructors only
00:47 - when we need to initialize our fields
00:49 - based on the values passed from the
00:51 - outside
00:53 - so in this case we are initializing the
00:55 - orders field without any external values
00:57 - the constructor as you see here has no
01:00 - parameters so in situations like that
01:03 - there is another way to initialize the
01:05 - orders field and that looks like the
01:08 - code you see here so we can directly
01:10 - initialize the orders field without the
01:12 - need to create a constructor
01:15 - this approach has an extra benefit and
01:17 - that is we can have multiple
01:19 - constructors and no matter which one is
01:21 - called
01:22 - the orders field will always be
01:24 - initialized to an empty list we'll
01:26 - explore that later when you start coding
01:30 - okay now let's take a look at read-only
01:31 - fields we can declare a field with the
01:35 - read-only modifier to make sure that
01:37 - that field is only assigned once so in
01:40 - that case that fill has to be
01:42 - initialized either directly like the
01:44 - slide you see here or in one of the
01:46 - constructors of the class
01:49 - you might wonder why do we need
01:50 - something like that the reason is to
01:53 - create some kind of safety in our
01:55 - application to improve robustness for
01:58 - example take a look at this customer
02:00 - class here by declaring the orders field
02:02 - as read-only I'll make sure that we'll
02:04 - only have one list where we will keep
02:07 - the list of orders if I accidentally as
02:10 - a developer try to reinitialize this
02:13 - field in another method the data that we
02:15 - had in the field will not be lost
02:18 - it's easier to explain that using an
02:20 - example so let's start coding and see
02:22 - this concepts in action
02:25 - okay let's start by creating a customer
02:28 - class so public class customer
02:37 - a couple of fields so public and ID
02:40 - public string name
02:46 - we can also create an order class public
02:49 - class order I'm gonna leave the
02:52 - implementation of this class for now we
02:54 - don't really need it for this example
02:56 - all we need to do is to create a list of
02:59 - orders and the customer so public list
03:03 - of order
03:08 - now let's declare a couple of
03:09 - instructors for this class
03:12 - so see tour
03:16 - make it just an ID so these that ID
03:19 - equals ID the second one is gonna get an
03:23 - ID and a name and just to recap what we
03:28 - learned in the Constructors lecture we
03:30 - can use it this keyword here and instead
03:33 - of repeating the initialization of the
03:35 - ID like the code you see here we can
03:39 - delegate the control to this constructor
03:42 - here so I'm just gonna use that this
03:44 - keyword has to ID at this point this
03:48 - constructor will be called so the ID
03:50 - will be initialized based on what we get
03:52 - here and then here I can say this name a
03:56 - cause name now if you remember from the
03:59 - lecture about constructors explained why
04:02 - we need to initialize these orders to an
04:05 - empty list
04:07 - just to recap whenever you have a class
04:08 - like customer and inside that class you
04:11 - have a list you should always initialize
04:13 - that list to an empty list now the
04:16 - technique I showed you in that lecture
04:18 - was to create a default constructor like
04:21 - the one here and set the orderers to an
04:25 - empty list like here
04:28 - this approach is perfectly fine but
04:30 - there is a slight problem with that and
04:32 - that is if you use any of these
04:34 - constructors here so this one or this
04:37 - one we have to make sure that the
04:39 - default constructor is always called
04:41 - first
04:42 - so the orders field will be initialized
04:44 - some developers argue and say no we
04:48 - shouldn't initialize feels like the
04:49 - orders here
04:51 - because orders is not dependent on any
04:53 - parameters from the outside so what we
04:57 - can do is we can get rid of this
04:58 - constructor
05:00 - and initialize the orders field here
05:07 - this way no matter which constructor is
05:09 - going to be called the orders field will
05:12 - always be initialized an empty list some
05:15 - developers do not like this approach
05:17 - because they don't like the idea of
05:19 - initializing some of the fields here
05:21 - while declaring them versus initializing
05:25 - the others in the Constructors it's
05:27 - entirely up to you it's more a personal
05:30 - taste I wanted to show you both
05:31 - approaches so you know what is possible
05:34 - they approach you choose is up to you
05:36 - but what I want to emphasize to you is
05:39 - to be consistent with your approach make
05:42 - sure you use the same approach
05:43 - everywhere this way your code would be
05:45 - cleaner okay now let's move on and look
05:48 - at read-only modifier so here I want to
05:51 - declare a method let's call it promote
05:55 - and the intention is this method will
05:58 - promote this customer to a gold customer
06:01 - I'm gonna leave the implementation here
06:03 - let's just put some comment
06:06 - but I want to show you a mistake that I
06:09 - as a developer and accidentally make
06:11 - let's say if I accidentally reinitialize
06:14 - these orders here what would happen
06:18 - so what I'm gonna do is to clean up our
06:21 - code I'm gonna put this customer class
06:23 - and a separate file so cursor here I
06:26 - explained this earlier so with resharper
06:29 - Alt + Enter
06:31 - and enter again now this class ended up
06:34 - in a separate file so that file is
06:36 - customer that's yes now we go back to
06:39 - program we can do the same with the
06:42 - order class back to the program now the
06:47 - code is cleaner let's create a customer
06:49 - object so if our customer equals new
06:55 - customer we're expected to supply an ID
06:59 - and/or a name because we don't have a
07:02 - default or parameterless constructor so
07:05 - look here we've got two constructors I'm
07:08 - gonna use the first one doesn't really
07:10 - matter I'm gonna add two orders to this
07:14 - customer
07:16 - so customer dot orders add new order and
07:24 - let's just copy paste this line
07:27 - so at this point if I display the number
07:30 - of orders the customer has we should see
07:32 - two on the console so let's quickly do
07:34 - that customer that orders that count
07:41 - let's run the application
07:44 - so we got two on the console now let me
07:47 - show you something
07:50 - imagine here we make a call to the
07:55 - promote method this method because of a
07:58 - bug accidentally reinitialized the
08:00 - orders field so now if you run the
08:03 - application all the data that we had in
08:06 - the orders field is lost we have zero
08:09 - this is where you use the read-only
08:12 - modifier
08:15 - go back to the customer
08:18 - there are situations where you know that
08:20 - this field should be initialized only
08:22 - once that's where you decorate that with
08:25 - the read-only modifier this way if you
08:30 - accidentally reset that field in the
08:32 - code you're gonna get a compile time
08:35 - error first of all we can immediately
08:37 - see this error here by the red underline
08:39 - it says read-only field cannot be used
08:42 - as an assignment target so if you don't
08:46 - see the red error when you compile the
08:48 - application you're definitely gonna see
08:50 - that so a read-only field cannot be
08:53 - assigned - except in a constructor or a
08:55 - variable initializer so what this means
08:58 - is
08:59 - this line is not acceptable
09:03 - we can only initialize a read-only field
09:06 - either here directly when we are
09:08 - declaring that or in the constructor
09:11 - so really is one of the ways that you
09:14 - can improve the robustness of your
09:16 - application that's it for this lecture I
09:18 - hope you enjoyed it and thank you for
09:20 - watching
09:22 - hi guys ma chere I hope you're having a
09:25 - fantastic day or night wherever you are
09:28 - in the world this tutorial you have been
09:30 - watching is actually part of one of my C
09:32 - sharp courses where you will learn
09:34 - everything about classes interfaces and
09:37 - object-oriented programming in case
09:40 - you're interested to enroll in the full
09:42 - course I've put the link for you in the
09:44 - video description and if not that's
09:46 - perfectly fine
09:47 - have a great day

Cleaned transcript:

okay we got two fields at the beginning of this section I gave you a brief explanation of fields a film is like variable that we declare at the class level and we use that to store data about the class so in this lecture I'm gonna talk about a couple of different ways to initialize fields and then I'll talk about the concept of readonly fields so in the last lecture you saw me declaring a class called customer which had a list of orders and you also saw how I initialize that field using the default or the parameterless constructor while this approach is perfectly fine there is also another school of thought when it comes to initializing fields some developers believe we should use constructors only when we need to initialize our fields based on the values passed from the outside so in this case we are initializing the orders field without any external values the constructor as you see here has no parameters so in situations like that there is another way to initialize the orders field and that looks like the code you see here so we can directly initialize the orders field without the need to create a constructor this approach has an extra benefit and that is we can have multiple constructors and no matter which one is called the orders field will always be initialized to an empty list we'll explore that later when you start coding okay now let's take a look at readonly fields we can declare a field with the readonly modifier to make sure that that field is only assigned once so in that case that fill has to be initialized either directly like the slide you see here or in one of the constructors of the class you might wonder why do we need something like that the reason is to create some kind of safety in our application to improve robustness for example take a look at this customer class here by declaring the orders field as readonly I'll make sure that we'll only have one list where we will keep the list of orders if I accidentally as a developer try to reinitialize this field in another method the data that we had in the field will not be lost it's easier to explain that using an example so let's start coding and see this concepts in action okay let's start by creating a customer class so public class customer a couple of fields so public and ID public string name we can also create an order class public class order I'm gonna leave the implementation of this class for now we don't really need it for this example all we need to do is to create a list of orders and the customer so public list of order now let's declare a couple of instructors for this class so see tour make it just an ID so these that ID equals ID the second one is gonna get an ID and a name and just to recap what we learned in the Constructors lecture we can use it this keyword here and instead of repeating the initialization of the ID like the code you see here we can delegate the control to this constructor here so I'm just gonna use that this keyword has to ID at this point this constructor will be called so the ID will be initialized based on what we get here and then here I can say this name a cause name now if you remember from the lecture about constructors explained why we need to initialize these orders to an empty list just to recap whenever you have a class like customer and inside that class you have a list you should always initialize that list to an empty list now the technique I showed you in that lecture was to create a default constructor like the one here and set the orderers to an empty list like here this approach is perfectly fine but there is a slight problem with that and that is if you use any of these constructors here so this one or this one we have to make sure that the default constructor is always called first so the orders field will be initialized some developers argue and say no we shouldn't initialize feels like the orders here because orders is not dependent on any parameters from the outside so what we can do is we can get rid of this constructor and initialize the orders field here this way no matter which constructor is going to be called the orders field will always be initialized an empty list some developers do not like this approach because they don't like the idea of initializing some of the fields here while declaring them versus initializing the others in the Constructors it's entirely up to you it's more a personal taste I wanted to show you both approaches so you know what is possible they approach you choose is up to you but what I want to emphasize to you is to be consistent with your approach make sure you use the same approach everywhere this way your code would be cleaner okay now let's move on and look at readonly modifier so here I want to declare a method let's call it promote and the intention is this method will promote this customer to a gold customer I'm gonna leave the implementation here let's just put some comment but I want to show you a mistake that I as a developer and accidentally make let's say if I accidentally reinitialize these orders here what would happen so what I'm gonna do is to clean up our code I'm gonna put this customer class and a separate file so cursor here I explained this earlier so with resharper Alt + Enter and enter again now this class ended up in a separate file so that file is customer that's yes now we go back to program we can do the same with the order class back to the program now the code is cleaner let's create a customer object so if our customer equals new customer we're expected to supply an ID and/or a name because we don't have a default or parameterless constructor so look here we've got two constructors I'm gonna use the first one doesn't really matter I'm gonna add two orders to this customer so customer dot orders add new order and let's just copy paste this line so at this point if I display the number of orders the customer has we should see two on the console so let's quickly do that customer that orders that count let's run the application so we got two on the console now let me show you something imagine here we make a call to the promote method this method because of a bug accidentally reinitialized the orders field so now if you run the application all the data that we had in the orders field is lost we have zero this is where you use the readonly modifier go back to the customer there are situations where you know that this field should be initialized only once that's where you decorate that with the readonly modifier this way if you accidentally reset that field in the code you're gonna get a compile time error first of all we can immediately see this error here by the red underline it says readonly field cannot be used as an assignment target so if you don't see the red error when you compile the application you're definitely gonna see that so a readonly field cannot be assigned except in a constructor or a variable initializer so what this means is this line is not acceptable we can only initialize a readonly field either here directly when we are declaring that or in the constructor so really is one of the ways that you can improve the robustness of your application that's it for this lecture I hope you enjoyed it and thank you for watching hi guys ma chere I hope you're having a fantastic day or night wherever you are in the world this tutorial you have been watching is actually part of one of my C sharp courses where you will learn everything about classes interfaces and objectoriented programming in case you're interested to enroll in the full course I've put the link for you in the video description and if not that's perfectly fine have a great day
