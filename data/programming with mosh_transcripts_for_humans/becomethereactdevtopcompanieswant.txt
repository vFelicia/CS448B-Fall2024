With timestamps:

00:00 - hey friends in today's video we're going
00:01 - to talk about a skill that can seriously
00:04 - boost your resume and that's automated
00:06 - testing you might have heard of unit
00:08 - testing integration testing end to end
00:10 - testing these are all various types of
00:13 - automated testing automated testing
00:15 - means we write code to test our code
00:17 - this way every time we make changes to
00:19 - our app we can run hundreds or thousands
00:22 - of tests in seconds to quickly find out
00:24 - if you have accidentally broken anything
00:26 - this is much faster than manually
00:28 - testing every feature every time we
00:30 - update our code that's why Tech Giants
00:33 - pay big bucks for engineers who know
00:35 - automated testing in this video I'm
00:37 - going to show you the basics but if you
00:38 - want to learn more I have a 1hour
00:40 - tutorial on my YouTube channel the link
00:42 - is below this
00:44 - [Music]
00:46 - video all right here we have a simple
00:48 - react project for rendering a welcome
00:50 - message this component has a name prop
00:52 - which is optional if we provide a name
00:54 - we see welcome back followed by the name
00:57 - otherwise we see a login button this is
00:59 - a very common pattern we have in our
01:01 - navigation bars now imagine if you want
01:03 - to test this manually every time we have
01:05 - to log in which often takes a few
01:07 - seconds and this is not the only feature
01:09 - in a real application in real
01:11 - applications we often have hundreds or
01:13 - thousands of features testing each
01:15 - feature manually often takes a long time
01:17 - so as our application gets more complex
01:19 - we need more time for manually testing
01:21 - each feature this is where we can use
01:23 - automated testing in this video I'm
01:25 - going to show you how we can rate a
01:27 - couple of unit tests for this component
01:29 - and test it it in just a few
01:30 - milliseconds instead of a few seconds
01:33 - now for testing react applications we
01:35 - need a bunch of tools first we need a
01:37 - testing framework for writing and
01:39 - executing tests in this lesson I'm going
01:41 - to use v test now we also need react
01:43 - testing library for rendering our
01:45 - component and interacting with it now in
01:47 - this project I've installed all these
01:49 - tools so we're not going to spend our
01:51 - time on the setup but if you want to
01:53 - learn this in detail I have a complete
01:55 - 1hour tutorial on this channel so back
01:57 - to our project here in the root we add a
02:00 - new folder called tests and here we add
02:03 - a new file for testing our welcome
02:06 - message component Now by convention we
02:08 - should also add the test keyword in the
02:10 - file name so our test framework picks up
02:12 - this test file now because we're going
02:14 - to write some typescript and jsx code in
02:16 - this file the extension should be TSX if
02:19 - you don't use typescript you have to use
02:21 - the jsx extension okay now in this test
02:24 - file first we have to import a few
02:26 - functions from vest now I have installed
02:28 - a very useful extension in vs code
02:31 - here's the extension I've installed vest
02:33 - Snippets from Dean software I also have
02:36 - another useful extension that is testing
02:39 - Library Snippets again from the same
02:42 - developer Dean software now with this
02:45 - extensions installed we can type IV and
02:48 - press enter to import a bunch of
02:50 - functions from vest with describe we can
02:53 - define a group of related tests with it
02:56 - we can define a test case and with
02:58 - expect we can make an assertion we can
03:01 - verify that our code behaves correctly
03:03 - now next we type ITR press enter and
03:07 - here we import a couple of objects from
03:09 - testing Library we have the render
03:11 - function for rendering our component and
03:14 - the screen object for looking up
03:15 - elements in the Dom so let's start by
03:18 - creating a test Suite we type D and
03:21 - press enter and here we have a test
03:23 - Suite or a group of related tests so we
03:26 - call the describe function first we give
03:28 - it a name for our test Suite in this
03:30 - case welcome message and as a second
03:34 - argument we give it a function this
03:36 - function gets executed by our test
03:38 - framework which is v test in this case
03:40 - now inside this test read we type I here
03:43 - we have a few options we select the one
03:45 - with this Square icon and with this we
03:49 - can quickly create a test case now the
03:51 - it function also has two arguments the
03:53 - first argument is the name of our test
03:55 - by convention we start with should for
03:58 - example here we can say should would
04:00 - render the welcome message if name is
04:04 - provided now the second argument is a
04:07 - function that gets executed by our test
04:09 - framework now similarly we can create
04:11 - another test case so I enter and here we
04:15 - can say should render the login button
04:18 - if name is not provided now in our first
04:21 - test first we render our component so we
04:24 - call render and pass the welcome message
04:28 - component now here we should set the
04:30 - name to whatever doesn't matter next we
04:33 - need to make an assertion let's go to
04:35 - our welcome message component look if
04:38 - name is provided we get welcome back
04:40 - followed by the name so here we can call
04:43 - screen now this object has a bunch of
04:45 - methods for looking up elements in the
04:47 - do we can look them by their role by
04:49 - their text by their test ID and so on in
04:52 - this lesson we're only going to look at
04:54 - one of these methods and that is get by
04:57 - text now here we can type the exact text
04:59 - like welcome back msh but the problem
05:03 - with this is that if we change our
05:05 - wording in the future our test is going
05:06 - to fail so instead of using a string
05:09 - literal it's better to use a regular
05:12 - expression to look for a specific
05:14 - keyword to do that we replace this
05:16 - string literal with two forward slashes
05:19 - which represents a regular expression
05:21 - and here we add our keyword that is MH
05:24 - now we get an element and then we call
05:28 - expect give it our element now this
05:31 - expect object has a bunch of matchers
05:34 - that all start with two for example we
05:36 - have to B to be called to be falsy and
05:39 - so on now when testing react
05:41 - applications we need to bring in some
05:43 - additional matchers from react testing
05:45 - Library so on the top we add another
05:48 - import statement and import at testing
05:51 - Library slj dd/ vest with this when we
05:57 - call the expect function we get
05:59 - additional matchers one of them is to be
06:01 - in the document now to run this test we
06:04 - bring up the terminal window and type
06:06 - npm
06:08 - test all right we have two passing tests
06:11 - now let's go back to our welcome message
06:13 - component and deliberately create a book
06:15 - let's say as part of changing this
06:17 - component we accidentally remove this
06:19 - piece of code so the name is not
06:21 - rendered in the do now we have one
06:23 - failing test now look at how much time
06:25 - was spent on running this test 86
06:28 - milliseconds if you wanted to test this
06:30 - manually we would have to log in and
06:31 - that would take a few seconds right this
06:33 - is the benefit of automated testing or
06:35 - unit testing in this case so let's bring
06:38 - back the name good now let's move on to
06:41 - our second test so to save time I'm
06:43 - going to copy these few lines and put
06:45 - them in our second test in this scenario
06:48 - we don't want to provide a name now here
06:50 - we should look for a login button so
06:52 - we're going to use a different method
06:54 - and that is get by roll as the first
06:57 - argument we pass button we're looking
07:01 - for a button now as the second argument
07:03 - we pass an object and here we set the
07:05 - name to login so we're looking for the
07:07 - login button look again we have two
07:10 - passing tests now if we go back to our
07:12 - welcome message component and
07:14 - accidentally change log into log out one
07:18 - of our tests fail so again with
07:20 - automated testing we get immediate
07:22 - feedback if we have broken anything now
07:24 - let's change this back to login now here
07:26 - I'm using a string literal but string
07:28 - literals are not great for writing tests
07:31 - because our tests can get very fragile
07:33 - and easily break so to make this test
07:35 - more robust we're going to replace this
07:38 - string literal with a regular expression
07:41 - so we look for the presence of the login
07:44 - keyword now to make this case
07:46 - insensitive we type an i at the end and
07:48 - with this our test will pass whether we
07:50 - have login in Pascal case or in
07:53 - uppercase or lowercase it doesn't really
07:56 - matter our test still passes so this was
07:59 - unit testing in action see that wasn't
08:01 - so bad right now if you're ready to
08:03 - level up I've got a full 1-hour tutorial
08:06 - on my channel totally free we'll dive
08:08 - deeper so you'll be writing tests like a
08:10 - pro in no time and if you're serious
08:12 - about automated testing and want to
08:14 - increase your job opportunities I also
08:16 - have a complete course on my website the
08:18 - links are in the description box

Cleaned transcript:

hey friends in today's video we're going to talk about a skill that can seriously boost your resume and that's automated testing you might have heard of unit testing integration testing end to end testing these are all various types of automated testing automated testing means we write code to test our code this way every time we make changes to our app we can run hundreds or thousands of tests in seconds to quickly find out if you have accidentally broken anything this is much faster than manually testing every feature every time we update our code that's why Tech Giants pay big bucks for engineers who know automated testing in this video I'm going to show you the basics but if you want to learn more I have a 1hour tutorial on my YouTube channel the link is below this video all right here we have a simple react project for rendering a welcome message this component has a name prop which is optional if we provide a name we see welcome back followed by the name otherwise we see a login button this is a very common pattern we have in our navigation bars now imagine if you want to test this manually every time we have to log in which often takes a few seconds and this is not the only feature in a real application in real applications we often have hundreds or thousands of features testing each feature manually often takes a long time so as our application gets more complex we need more time for manually testing each feature this is where we can use automated testing in this video I'm going to show you how we can rate a couple of unit tests for this component and test it it in just a few milliseconds instead of a few seconds now for testing react applications we need a bunch of tools first we need a testing framework for writing and executing tests in this lesson I'm going to use v test now we also need react testing library for rendering our component and interacting with it now in this project I've installed all these tools so we're not going to spend our time on the setup but if you want to learn this in detail I have a complete 1hour tutorial on this channel so back to our project here in the root we add a new folder called tests and here we add a new file for testing our welcome message component Now by convention we should also add the test keyword in the file name so our test framework picks up this test file now because we're going to write some typescript and jsx code in this file the extension should be TSX if you don't use typescript you have to use the jsx extension okay now in this test file first we have to import a few functions from vest now I have installed a very useful extension in vs code here's the extension I've installed vest Snippets from Dean software I also have another useful extension that is testing Library Snippets again from the same developer Dean software now with this extensions installed we can type IV and press enter to import a bunch of functions from vest with describe we can define a group of related tests with it we can define a test case and with expect we can make an assertion we can verify that our code behaves correctly now next we type ITR press enter and here we import a couple of objects from testing Library we have the render function for rendering our component and the screen object for looking up elements in the Dom so let's start by creating a test Suite we type D and press enter and here we have a test Suite or a group of related tests so we call the describe function first we give it a name for our test Suite in this case welcome message and as a second argument we give it a function this function gets executed by our test framework which is v test in this case now inside this test read we type I here we have a few options we select the one with this Square icon and with this we can quickly create a test case now the it function also has two arguments the first argument is the name of our test by convention we start with should for example here we can say should would render the welcome message if name is provided now the second argument is a function that gets executed by our test framework now similarly we can create another test case so I enter and here we can say should render the login button if name is not provided now in our first test first we render our component so we call render and pass the welcome message component now here we should set the name to whatever doesn't matter next we need to make an assertion let's go to our welcome message component look if name is provided we get welcome back followed by the name so here we can call screen now this object has a bunch of methods for looking up elements in the do we can look them by their role by their text by their test ID and so on in this lesson we're only going to look at one of these methods and that is get by text now here we can type the exact text like welcome back msh but the problem with this is that if we change our wording in the future our test is going to fail so instead of using a string literal it's better to use a regular expression to look for a specific keyword to do that we replace this string literal with two forward slashes which represents a regular expression and here we add our keyword that is MH now we get an element and then we call expect give it our element now this expect object has a bunch of matchers that all start with two for example we have to B to be called to be falsy and so on now when testing react applications we need to bring in some additional matchers from react testing Library so on the top we add another import statement and import at testing Library slj dd/ vest with this when we call the expect function we get additional matchers one of them is to be in the document now to run this test we bring up the terminal window and type npm test all right we have two passing tests now let's go back to our welcome message component and deliberately create a book let's say as part of changing this component we accidentally remove this piece of code so the name is not rendered in the do now we have one failing test now look at how much time was spent on running this test 86 milliseconds if you wanted to test this manually we would have to log in and that would take a few seconds right this is the benefit of automated testing or unit testing in this case so let's bring back the name good now let's move on to our second test so to save time I'm going to copy these few lines and put them in our second test in this scenario we don't want to provide a name now here we should look for a login button so we're going to use a different method and that is get by roll as the first argument we pass button we're looking for a button now as the second argument we pass an object and here we set the name to login so we're looking for the login button look again we have two passing tests now if we go back to our welcome message component and accidentally change log into log out one of our tests fail so again with automated testing we get immediate feedback if we have broken anything now let's change this back to login now here I'm using a string literal but string literals are not great for writing tests because our tests can get very fragile and easily break so to make this test more robust we're going to replace this string literal with a regular expression so we look for the presence of the login keyword now to make this case insensitive we type an i at the end and with this our test will pass whether we have login in Pascal case or in uppercase or lowercase it doesn't really matter our test still passes so this was unit testing in action see that wasn't so bad right now if you're ready to level up I've got a full 1hour tutorial on my channel totally free we'll dive deeper so you'll be writing tests like a pro in no time and if you're serious about automated testing and want to increase your job opportunities I also have a complete course on my website the links are in the description box
