With timestamps:

00:03 - in this lecture you're going to learn
00:04 - about another pattern for creating
00:07 - objects that is a constructor function
00:11 - so just like the factory function we're
00:13 - going to create a function and the job
00:16 - of this function is to construct or
00:18 - create an object however the naming
00:23 - convention we use for constructor
00:25 - functions is different so the naming
00:27 - convention we have for factory functions
00:29 - is what we call camel notation so the
00:32 - first letter of the first word is
00:34 - lowercase but the first letter of every
00:37 - word after is uppercase this is what we
00:40 - call camel notation so it looks like
00:43 - this camel notation we've got one two
00:46 - three four you can see the first letter
00:49 - of the first word is lowercase and these
00:52 - uppercase letters look like camel humps
00:55 - that's why we call it camel notation in
00:57 - contrast we have another notation that
01:00 - is called Pascal notation and in this
01:03 - notation the first letter of every word
01:05 - should be uppercase so one two three
01:09 - four you can see the pattern right now
01:12 - when naming constructor functions we
01:14 - should use Haskell notation by
01:16 - convention because that's something that
01:18 - other JavaScript developers expect when
01:20 - they read your code so we're going to
01:23 - call this function circle with a capital
01:26 - C note that I did not call this create
01:29 - circle and you will see that in a second
01:31 - now just like our factory function here
01:34 - we need to add a parameter radius
01:36 - however instead of returning an object
01:39 - we're going to use a different approach
01:41 - to initialize an object in JavaScript we
01:45 - have a keyword called this and this is a
01:50 - reference to the object that is
01:52 - executing this piece of code you're
01:54 - gonna see that in a second for now just
01:56 - imagine this references an empty object
01:59 - now you know that with dot notation we
02:02 - can access properties of an object we
02:05 - can read a property or we can set a
02:06 - property so on this new empty object you
02:10 - want to add a property called radius and
02:13 - we said that to this radius argument
02:15 - that we receive here
02:17 - so in JavaScript our objects are dynamic
02:19 - once we create them we can always add
02:21 - additional properties or methods to them
02:24 - so here we are adding a new property to
02:27 - an empty object as similarly we're gonna
02:31 - use this approach to add a draw method
02:34 - to this new empty object so this draw
02:38 - but we set this to a function and in the
02:42 - body of this function we simply do a
02:43 - console dot log of draw now finally in
02:49 - order to create a circle object using
02:51 - this constructor function we're going to
02:54 - define a constant called circle and here
02:58 - we're gonna use another keyword that is
03:00 - new circle and pass one as the radius
03:05 - what is happening here well when we use
03:09 - this new operator here three things
03:12 - happen this new operator creates an
03:14 - empty JavaScript object something like
03:18 - this Const an X set to an empty object
03:21 - that is happening under the hood but you
03:23 - don't see that next it will set this to
03:28 - point for this new empty object so in
03:31 - this code you have access to this new
03:33 - empty object and we said this radius
03:36 - property as well as the draw method in
03:38 - this new object finally this new
03:41 - operator will return this new object
03:45 - from this function so it looks like this
03:48 - return this we don't have to explicitly
03:51 - add this statement here in this function
03:54 - this will happen under the hood so let
03:57 - me recap when we use the new operator
03:59 - three things happen this operator first
04:02 - creates an empty object then it will set
04:06 - this to point to this object and finally
04:08 - it will return that object from this
04:11 - function so what we get here is that new
04:14 - object and we simply set circle to point
04:16 - to that object now let's see the
04:19 - difference between factory and
04:21 - constructor functions so with Factory
04:24 - functions we create an object like this
04:27 - constant my circle
04:30 - here recall create circle and pass an
04:33 - argument so with factory functions we
04:36 - simply call a function and in this
04:38 - function with return a new object in
04:41 - contrast with constructor functions we
04:44 - use the new operator and instead of
04:46 - returning an object we use that this
04:49 - keyword also in terms of naming
04:52 - convention with constructor functions we
04:54 - use the pascal naming convention but in
04:58 - factory functions we use the camel
05:00 - notation so you might be asking which
05:03 - approach or which pattern you should use
05:04 - to create new objects both these
05:07 - patterns are equally good for creating
05:09 - new objects the constructor function
05:12 - pattern is familiar to developers who
05:15 - have some experience programming and
05:17 - languages like C sharp or Java so with
05:20 - this pattern you can see we're creating
05:21 - a new circle now if you don't have any
05:24 - experience in languages like C sharp or
05:26 - Java you might want to go for a factory
05:29 - function there's really no difference
05:31 - between these two patterns however there
05:34 - are some discussions online by some
05:35 - strongly opinionated developers
05:38 - comparing these two patterns my
05:39 - suggestion to you is do not get hung up
05:42 - on these discussions they're just a
05:43 - waste of time pick one pattern and just
05:46 - stick to that
05:49 - hi guys thank you for watching my
05:52 - javascript tutorial this tutorial is
05:54 - part of my JavaScript course where you
05:56 - learn all the essential JavaScript
05:58 - features that every web and mobile
06:01 - application developer must know if
06:03 - you're an absolute beginner or have some
06:05 - experience in JavaScript and are looking
06:07 - for a fun and in-depth course that
06:09 - teaches you the fundamentals of
06:10 - JavaScript this course is for you this
06:13 - course is also packed with tons of
06:15 - exercises that help you master what you
06:17 - learned in the course in fact many of
06:19 - these exercises are questions that come
06:21 - up in technical programming interviews
06:24 - so if you're pursuing a job as a
06:26 - front-end or a back-end developer or if
06:29 - you simply want to have a more in-depth
06:31 - understanding of JavaScript I highly
06:33 - encourage you to enroll in the course
06:35 - for a limited time you can get this
06:37 - course with a discount using the link in
06:39 - the video description click the link to
06:41 - find out more about the course and
06:42 - enroll

Cleaned transcript:

in this lecture you're going to learn about another pattern for creating objects that is a constructor function so just like the factory function we're going to create a function and the job of this function is to construct or create an object however the naming convention we use for constructor functions is different so the naming convention we have for factory functions is what we call camel notation so the first letter of the first word is lowercase but the first letter of every word after is uppercase this is what we call camel notation so it looks like this camel notation we've got one two three four you can see the first letter of the first word is lowercase and these uppercase letters look like camel humps that's why we call it camel notation in contrast we have another notation that is called Pascal notation and in this notation the first letter of every word should be uppercase so one two three four you can see the pattern right now when naming constructor functions we should use Haskell notation by convention because that's something that other JavaScript developers expect when they read your code so we're going to call this function circle with a capital C note that I did not call this create circle and you will see that in a second now just like our factory function here we need to add a parameter radius however instead of returning an object we're going to use a different approach to initialize an object in JavaScript we have a keyword called this and this is a reference to the object that is executing this piece of code you're gonna see that in a second for now just imagine this references an empty object now you know that with dot notation we can access properties of an object we can read a property or we can set a property so on this new empty object you want to add a property called radius and we said that to this radius argument that we receive here so in JavaScript our objects are dynamic once we create them we can always add additional properties or methods to them so here we are adding a new property to an empty object as similarly we're gonna use this approach to add a draw method to this new empty object so this draw but we set this to a function and in the body of this function we simply do a console dot log of draw now finally in order to create a circle object using this constructor function we're going to define a constant called circle and here we're gonna use another keyword that is new circle and pass one as the radius what is happening here well when we use this new operator here three things happen this new operator creates an empty JavaScript object something like this Const an X set to an empty object that is happening under the hood but you don't see that next it will set this to point for this new empty object so in this code you have access to this new empty object and we said this radius property as well as the draw method in this new object finally this new operator will return this new object from this function so it looks like this return this we don't have to explicitly add this statement here in this function this will happen under the hood so let me recap when we use the new operator three things happen this operator first creates an empty object then it will set this to point to this object and finally it will return that object from this function so what we get here is that new object and we simply set circle to point to that object now let's see the difference between factory and constructor functions so with Factory functions we create an object like this constant my circle here recall create circle and pass an argument so with factory functions we simply call a function and in this function with return a new object in contrast with constructor functions we use the new operator and instead of returning an object we use that this keyword also in terms of naming convention with constructor functions we use the pascal naming convention but in factory functions we use the camel notation so you might be asking which approach or which pattern you should use to create new objects both these patterns are equally good for creating new objects the constructor function pattern is familiar to developers who have some experience programming and languages like C sharp or Java so with this pattern you can see we're creating a new circle now if you don't have any experience in languages like C sharp or Java you might want to go for a factory function there's really no difference between these two patterns however there are some discussions online by some strongly opinionated developers comparing these two patterns my suggestion to you is do not get hung up on these discussions they're just a waste of time pick one pattern and just stick to that hi guys thank you for watching my javascript tutorial this tutorial is part of my JavaScript course where you learn all the essential JavaScript features that every web and mobile application developer must know if you're an absolute beginner or have some experience in JavaScript and are looking for a fun and indepth course that teaches you the fundamentals of JavaScript this course is for you this course is also packed with tons of exercises that help you master what you learned in the course in fact many of these exercises are questions that come up in technical programming interviews so if you're pursuing a job as a frontend or a backend developer or if you simply want to have a more indepth understanding of JavaScript I highly encourage you to enroll in the course for a limited time you can get this course with a discount using the link in the video description click the link to find out more about the course and enroll
