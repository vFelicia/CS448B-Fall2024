With timestamps:

00:00 - [Music]
00:01 - let's start the section by a brief
00:03 - introduction to restful services also
00:06 - called restful api s-- if you already
00:09 - know what rest is all about feel free to
00:11 - skip this video so earlier at the
00:14 - beginning of the course I introduced you
00:16 - to the client-server architecture so
00:19 - most if not all applications we use
00:21 - these days
00:22 - follow this architecture the app itself
00:24 - is the client or the front-end part
00:27 - under the hood it needs to talk to a
00:30 - server or the back-end to get or save
00:33 - the data this communication happens
00:35 - using the HTTP protocol the same
00:38 - protocol that powers our web so on the
00:41 - server we expose a bunch of services
00:44 - that are accessible via the HTTP
00:46 - protocol the client can then directly
00:49 - call the services by sending HTTP
00:52 - requests now this is where rest comes
00:55 - into the picture
00:56 - rest is short for representational state
00:59 - transfer and I know it probably doesn't
01:01 - make any sense to you because it was
01:04 - introduced by a PhD student as part of
01:06 - his thesis but the theory aside rest is
01:10 - basically a convention for building
01:12 - these HTTP services so we use simple
01:15 - HTTP protocol principles to provide
01:18 - support to create read update and delete
01:21 - data we refer to these operations all
01:24 - together as crud operations now let's
01:28 - explore this convention using every
01:30 - award example let's say we have a
01:32 - company called bitly for renting out
01:34 - movies we have a client app where we
01:37 - manage the list of our customers on the
01:40 - server we should expose a service and an
01:42 - endpoint like this so really calm slash
01:45 - API slash customers so the client can
01:48 - send HTTP requests to this endpoint to
01:51 - talk to our service now a few things
01:54 - about this endpoint you need to know
01:55 - first of all the address can start with
01:58 - HTTP or HTTPS that depends on the
02:02 - application and its requirements if you
02:04 - want the data to be exchanged on a
02:06 - secure Channel you would use HTTPS after
02:10 - that we have the domain of the
02:11 - application
02:12 - next we have slash API this is not
02:15 - compulsory but you see a lot of
02:17 - companies follow this convention to
02:19 - expose their restful services they
02:22 - include the word API somewhere in the
02:24 - address it can be after the domain or it
02:28 - can be a subdomain like API that vidlink
02:31 - aam there is no hard and fast rule after
02:34 - that we have slash customers which
02:37 - refers to the collection of customers in
02:40 - our application in the rest world we
02:42 - refer to this part as a resource we can
02:45 - expose our resources such as customers
02:48 - movies rentals on various endpoints so
02:52 - this is our endpoint to work with the
02:54 - customers all the operations around
02:56 - customers such as creating a customer or
02:59 - updating a customer would be done by
03:01 - sending an HTTP request to this endpoint
03:03 - the type of the HTTP request determines
03:07 - the kind of the operation so every HTTP
03:10 - request has what we call a verb or
03:12 - method that determines its type or
03:15 - intention here are the standard HTTP
03:18 - methods we have yet for getting data
03:21 - post or creating data put for updating
03:25 - data and delayed for deleting data now
03:29 - let's explore each of these using our
03:31 - customers example to get the list of all
03:33 - customers we should send an HTTP GET
03:36 - request to this address note the full
03:39 - name customers here it indicates a list
03:42 - of customers so when we send an HTTP GET
03:45 - request to this endpoint our service
03:48 - should send us something like this so we
03:51 - have an array of customer objects if you
03:54 - want a single customer we should include
03:56 - the idea of that customer in the address
03:58 - then our server would respond with a
04:01 - customer object like this now to update
04:04 - a customer we should send an HTTP put
04:07 - request to this endpoint and note that
04:09 - again here we're specifying the idea of
04:12 - the customer to be updated but also we
04:15 - should include the customer object in
04:17 - the body of the request so this is a
04:20 - complete representation of the customer
04:22 - object with updated properties
04:25 - we send this to the server and the
04:26 - server updates the customer with the
04:28 - given ID according to these values
04:31 - similarly to delete a customer we should
04:34 - send an HTTP delete request to this
04:36 - endpoint but here we don't need to
04:38 - include the customer object in the body
04:40 - of the request because all we need to
04:42 - delete a customer is an ID and finally
04:46 - to create a customer we need to send an
04:48 - HTTP POST request to this endpoint note
04:51 - that here because we are adding a new
04:53 - customer you're not dealing with a
04:55 - specific customer so we don't have the
04:57 - ID in the address you're working with
05:00 - the collection of customers so we are
05:01 - posting a new customer to this collector
05:04 - and that's why we should include the
05:06 - customer object in the body of the
05:08 - request the server gets this object and
05:11 - creates the customer flask so this is
05:14 - the restful convention we expose our
05:16 - resources such as customers using a
05:18 - simple meaningful address and support
05:21 - various operations around them such as
05:24 - creating or updating them using standard
05:26 - HTTP methods hi guys it's March here
05:33 - thank you for watching my tutorial I
05:35 - just wanted to let you know that this
05:36 - video is part of my upcoming node course
05:39 - where you will learn everything about
05:40 - node from their basic to the advanced
05:42 - topics if you want to get the full
05:44 - course with up to 90% discount click on
05:48 - the link in the video description and
05:49 - join my mailing list I'm not gonna spam
05:52 - you and you can unsubscribe at any time
05:54 - as soon as I publish the course I'm
05:56 - gonna send you a coupon so you get the
05:59 - full course with a huge discount thank
06:01 - you and have a great day

Cleaned transcript:

let's start the section by a brief introduction to restful services also called restful api s if you already know what rest is all about feel free to skip this video so earlier at the beginning of the course I introduced you to the clientserver architecture so most if not all applications we use these days follow this architecture the app itself is the client or the frontend part under the hood it needs to talk to a server or the backend to get or save the data this communication happens using the HTTP protocol the same protocol that powers our web so on the server we expose a bunch of services that are accessible via the HTTP protocol the client can then directly call the services by sending HTTP requests now this is where rest comes into the picture rest is short for representational state transfer and I know it probably doesn't make any sense to you because it was introduced by a PhD student as part of his thesis but the theory aside rest is basically a convention for building these HTTP services so we use simple HTTP protocol principles to provide support to create read update and delete data we refer to these operations all together as crud operations now let's explore this convention using every award example let's say we have a company called bitly for renting out movies we have a client app where we manage the list of our customers on the server we should expose a service and an endpoint like this so really calm slash API slash customers so the client can send HTTP requests to this endpoint to talk to our service now a few things about this endpoint you need to know first of all the address can start with HTTP or HTTPS that depends on the application and its requirements if you want the data to be exchanged on a secure Channel you would use HTTPS after that we have the domain of the application next we have slash API this is not compulsory but you see a lot of companies follow this convention to expose their restful services they include the word API somewhere in the address it can be after the domain or it can be a subdomain like API that vidlink aam there is no hard and fast rule after that we have slash customers which refers to the collection of customers in our application in the rest world we refer to this part as a resource we can expose our resources such as customers movies rentals on various endpoints so this is our endpoint to work with the customers all the operations around customers such as creating a customer or updating a customer would be done by sending an HTTP request to this endpoint the type of the HTTP request determines the kind of the operation so every HTTP request has what we call a verb or method that determines its type or intention here are the standard HTTP methods we have yet for getting data post or creating data put for updating data and delayed for deleting data now let's explore each of these using our customers example to get the list of all customers we should send an HTTP GET request to this address note the full name customers here it indicates a list of customers so when we send an HTTP GET request to this endpoint our service should send us something like this so we have an array of customer objects if you want a single customer we should include the idea of that customer in the address then our server would respond with a customer object like this now to update a customer we should send an HTTP put request to this endpoint and note that again here we're specifying the idea of the customer to be updated but also we should include the customer object in the body of the request so this is a complete representation of the customer object with updated properties we send this to the server and the server updates the customer with the given ID according to these values similarly to delete a customer we should send an HTTP delete request to this endpoint but here we don't need to include the customer object in the body of the request because all we need to delete a customer is an ID and finally to create a customer we need to send an HTTP POST request to this endpoint note that here because we are adding a new customer you're not dealing with a specific customer so we don't have the ID in the address you're working with the collection of customers so we are posting a new customer to this collector and that's why we should include the customer object in the body of the request the server gets this object and creates the customer flask so this is the restful convention we expose our resources such as customers using a simple meaningful address and support various operations around them such as creating or updating them using standard HTTP methods hi guys it's March here thank you for watching my tutorial I just wanted to let you know that this video is part of my upcoming node course where you will learn everything about node from their basic to the advanced topics if you want to get the full course with up to 90% discount click on the link in the video description and join my mailing list I'm not gonna spam you and you can unsubscribe at any time as soon as I publish the course I'm gonna send you a coupon so you get the full course with a huge discount thank you and have a great day
