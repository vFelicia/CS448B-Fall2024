With timestamps:

00:01 - one of the core concepts a node is the
00:04 - concept of events in fact a lot of nodes
00:07 - core functionality is based on this
00:10 - concept of events an event is basically
00:13 - a signal that indicates that something
00:16 - has happened in our application for
00:19 - example in node we have a class called
00:21 - HTTP that we can use to build a web
00:24 - server so we listen on a given port and
00:27 - every time we receive a request on that
00:30 - port that HTTP class raises an event now
00:34 - our job is to respond to that event
00:36 - which basically involves reading that
00:38 - request and returning the right response
00:41 - so as you go through node documentation
00:43 - you can see that several classes in node
00:46 - raises different kinds of events and in
00:49 - your code you might be interested to
00:52 - respond to those events so in this
00:54 - lecture I'm gonna show you how to work
00:56 - with the events module now back in notes
01:00 - documentation once again in the list of
01:03 - modules you can see here we have this
01:06 - events module so in this module we have
01:10 - one class that is called event emitter
01:13 - it's one of the core building blocks of
01:16 - node and a lot of classes are based on
01:18 - this event emitter so let's see how we
01:21 - can work with this event emitter
01:24 - I can be asked Oh first let's load the
01:28 - events module so require events now here
01:32 - when we call the require function we get
01:35 - the event emitter class so constant
01:38 - event emitter note that here in terms of
01:43 - the naming the first letter of every
01:46 - word is uppercase this is a convention
01:49 - that indicates that this event emitter
01:52 - is a class it's not a function it's not
01:55 - a simple value it's a class a class is
01:58 - container for properties and functions
02:01 - which we call methods so in this event
02:04 - emitter class
02:06 - we have these metals that you see here
02:08 - in the documentation so a class is a
02:10 - container for a bunch of related methods
02:13 - and properties now here in order to use
02:17 - this event emitter first we need to
02:19 - create an instance of this class so
02:22 - constant emitter we set this to new
02:26 - event emitter so here this emitter is an
02:30 - object in case you don't know the
02:33 - difference between a class and an object
02:35 - let me give you a metaphor a class is
02:37 - like human and an object is like an
02:40 - actual person like John Mary and so on
02:43 - so a class defines the properties and
02:46 - behavior of a concept like a human but
02:50 - an object is an actual instance of that
02:53 - class okay
02:54 - so here this first event emitter is a
02:58 - class it's a blueprint it defines what
03:01 - an event emitter can do but this second
03:04 - emitter is an actual object this is the
03:06 - one that we're going to use in our
03:08 - application so this emitter has a bunch
03:13 - of methods look these are all the metals
03:16 - that you saw in the documentation
03:18 - now even though here we have more than
03:20 - ten metals most of the time we use only
03:23 - two of these methods one is m8 that we
03:26 - use to raise an event the first time I
03:29 - saw this method it didn't make sense to
03:31 - me because English is my second language
03:33 - and I didn't know what m8 means so if
03:37 - you're in the same boat ma it basically
03:39 - means making a noise or produce
03:42 - something in this case we're making a
03:44 - noise in our application
03:46 - we're signaling that an event has
03:49 - happened okay so that's the meaning of
03:51 - Emmett here we pass an argument that is
03:55 - the name of the event let's say message
03:58 - locked
04:00 - in the future we're going to extend our
04:02 - lager module and every time we log a
04:05 - message we're going to raise an event
04:07 - called message locked okay now if you
04:11 - run this application nothing is going to
04:13 - happen let me show you back in the
04:16 - terminal node fjs look nothing happened
04:19 - because we have raised an event here but
04:23 - nowhere in our application we have
04:25 - registered a listener that is interested
04:28 - in that event a listener is a function
04:31 - that will be called when that event is
04:33 - raised
04:34 - okay so let's register a listener that
04:38 - will be called when the message log
04:40 - event is raised so register a listener
04:45 - so emitter dot look here we have this
04:49 - method add listener but we have an alias
04:52 - for this that we use more often that is
04:54 - on if you're worked with jQuery you have
04:57 - seen this before so on or add listener
05:00 - they're exactly the same but quit often
05:02 - we use the on method now this method
05:04 - takes two arguments the first one is the
05:07 - name of the event in this case message
05:10 - locked and the second one is a callback
05:14 - function or the actual listener so here
05:17 - we pass a function and this function
05:20 - will be called when that event is raised
05:22 - okay now for now I just want to lock a
05:26 - message in the console so console let's
05:29 - say listener called like this now let's
05:35 - run this application so node FJ yes and
05:39 - we got this message listener called so
05:42 - this indicates that when we raise this
05:46 - event
05:48 - function or listener was caught okay and
05:51 - of course the order is important here if
05:54 - you register this listener after calling
05:58 - the Emmett method nothing would have
06:00 - happened because when we call the Emmett
06:02 - method this ammeter iterates over all
06:04 - the registered listeners and calls them
06:07 - synchronously okay so this is the basic
06:11 - of raising events and handling them
06:13 - using the eve an emitter class
06:17 - hi guys its mosh here thank you for
06:20 - watching my know tutorial I just wanted
06:22 - to let you know that this video you've
06:24 - been watching it's part of my complete
06:26 - note course where you will learn
06:28 - everything about node from the basic to
06:30 - the advanced topics if you're serious
06:32 - about learning node I highly recommend
06:34 - you to enroll in my node course because
06:36 - this is much faster than jumping from
06:38 - one tutorial to another it saves you
06:40 - time plus you're going to get a lot of
06:42 - exercises that will prepare you for the
06:45 - real work and also at the end of the
06:47 - course you'll receive a certificate of
06:49 - completion that you can provide your
06:51 - current or future employer so if you
06:54 - want to enroll click on the link in the
06:56 - video description I hope to see you in
06:57 - the course

Cleaned transcript:

one of the core concepts a node is the concept of events in fact a lot of nodes core functionality is based on this concept of events an event is basically a signal that indicates that something has happened in our application for example in node we have a class called HTTP that we can use to build a web server so we listen on a given port and every time we receive a request on that port that HTTP class raises an event now our job is to respond to that event which basically involves reading that request and returning the right response so as you go through node documentation you can see that several classes in node raises different kinds of events and in your code you might be interested to respond to those events so in this lecture I'm gonna show you how to work with the events module now back in notes documentation once again in the list of modules you can see here we have this events module so in this module we have one class that is called event emitter it's one of the core building blocks of node and a lot of classes are based on this event emitter so let's see how we can work with this event emitter I can be asked Oh first let's load the events module so require events now here when we call the require function we get the event emitter class so constant event emitter note that here in terms of the naming the first letter of every word is uppercase this is a convention that indicates that this event emitter is a class it's not a function it's not a simple value it's a class a class is container for properties and functions which we call methods so in this event emitter class we have these metals that you see here in the documentation so a class is a container for a bunch of related methods and properties now here in order to use this event emitter first we need to create an instance of this class so constant emitter we set this to new event emitter so here this emitter is an object in case you don't know the difference between a class and an object let me give you a metaphor a class is like human and an object is like an actual person like John Mary and so on so a class defines the properties and behavior of a concept like a human but an object is an actual instance of that class okay so here this first event emitter is a class it's a blueprint it defines what an event emitter can do but this second emitter is an actual object this is the one that we're going to use in our application so this emitter has a bunch of methods look these are all the metals that you saw in the documentation now even though here we have more than ten metals most of the time we use only two of these methods one is m8 that we use to raise an event the first time I saw this method it didn't make sense to me because English is my second language and I didn't know what m8 means so if you're in the same boat ma it basically means making a noise or produce something in this case we're making a noise in our application we're signaling that an event has happened okay so that's the meaning of Emmett here we pass an argument that is the name of the event let's say message locked in the future we're going to extend our lager module and every time we log a message we're going to raise an event called message locked okay now if you run this application nothing is going to happen let me show you back in the terminal node fjs look nothing happened because we have raised an event here but nowhere in our application we have registered a listener that is interested in that event a listener is a function that will be called when that event is raised okay so let's register a listener that will be called when the message log event is raised so register a listener so emitter dot look here we have this method add listener but we have an alias for this that we use more often that is on if you're worked with jQuery you have seen this before so on or add listener they're exactly the same but quit often we use the on method now this method takes two arguments the first one is the name of the event in this case message locked and the second one is a callback function or the actual listener so here we pass a function and this function will be called when that event is raised okay now for now I just want to lock a message in the console so console let's say listener called like this now let's run this application so node FJ yes and we got this message listener called so this indicates that when we raise this event function or listener was caught okay and of course the order is important here if you register this listener after calling the Emmett method nothing would have happened because when we call the Emmett method this ammeter iterates over all the registered listeners and calls them synchronously okay so this is the basic of raising events and handling them using the eve an emitter class hi guys its mosh here thank you for watching my know tutorial I just wanted to let you know that this video you've been watching it's part of my complete note course where you will learn everything about node from the basic to the advanced topics if you're serious about learning node I highly recommend you to enroll in my node course because this is much faster than jumping from one tutorial to another it saves you time plus you're going to get a lot of exercises that will prepare you for the real work and also at the end of the course you'll receive a certificate of completion that you can provide your current or future employer so if you want to enroll click on the link in the video description I hope to see you in the course
