With timestamps:

00:02 - finally the last group of operators
00:05 - we're going to look at is bitwise
00:07 - operators now this really requires me to
00:10 - go beyond the scope of this course I
00:12 - have to talk about some computer science
00:15 - stuff and honestly I don't really want
00:16 - to bore you because these stuff don't
00:19 - really have that much of practical users
00:21 - in the real world I'm not saying they're
00:23 - useless they definitely have their own
00:25 - use but there are more on this
00:27 - theoretical side and it's not something
00:29 - that you will use on a daily basis
00:30 - however if you're really enthusiastic
00:32 - I'm gonna explain what these bitwise
00:35 - operators are and how they work but feel
00:38 - free to skip this lecture if you just
00:40 - want to focus on the practicality so you
00:43 - know that we humans use the decimal
00:45 - system to represent numbers so 1 2 3 4 5
00:49 - but in computers these numbers are
00:51 - stored in the binary format which is a
00:54 - combination of zeros and ones so let's
00:57 - take a look at a few examples the number
01:00 - one in the decimal system is represented
01:02 - as seven zeros 1 2 3 4 5 6 7 and and 1
01:07 - so we have 8 digits each digit is what
01:11 - we call a bit so here we have 8 bits
01:14 - which represents one byte of information
01:17 - in a computer here's another example
01:20 - number 2 in the decimal system equals to
01:23 - 6 zeros and then 1 0 there are
01:28 - mathematical formulas behind this for
01:30 - converting numbers between decimal and
01:32 - binary systems if you don't want to
01:34 - learn the mathematics you can simply
01:36 - Google decimal to binary converter now
01:39 - bitwise operators in JavaScript or any
01:42 - other programming languages are similar
01:44 - to logical operators but they work on
01:47 - the individual bits of a number let me
01:50 - show you what I mean by this so I'm
01:52 - gonna do a console the log 1 or 2 note
01:58 - that here we have a single vertical line
02:00 - that represents a bitwise or so bitwise
02:05 - or logical ORS have double vertical line
02:09 - okay so when we applied the bitwise or
02:12 - between 1 and 2 this is what's going to
02:14 - happen so
02:16 - I had R as the result here now this
02:20 - operator is going to look at each of
02:22 - these beats like this in a vertical way
02:24 - if either of these bits is one the
02:27 - result will be 1 otherwise it will be 0
02:30 - so here in both these numbers the first
02:33 - 6 bits are 0 so in the result will also
02:37 - have 6 zeros now the 7 bits will be 1
02:41 - because here we have 1 at this position
02:44 - right and similarly the 8 bit will be 1
02:48 - because here we have a 1 now if we
02:51 - convert this binary number to a decimal
02:54 - number the result would be 3 so let's
02:57 - save the changes and you can see on the
03:00 - console we have 3 bitwise and is similar
03:05 - so let's duplicate this bitwise and
03:08 - we'll use a single and % for that now
03:12 - the result is going to be something like
03:14 - this so if both numbers are 1 1 will be
03:18 - returned otherwise the result will be 0
03:20 - so in this case all the bits will end up
03:24 - being 0 because if you look at these 2
03:26 - first numbers 1 & 2 their first 6 bits
03:31 - are 0 and here in the second number we
03:33 - have this bit that is 1 but the bit at
03:36 - the equivalent position here is 0 so if
03:39 - we applied the bitwise and between these
03:41 - 2 bits the result will be 0 okay so this
03:45 - binary number equals 0 in the decimal
03:48 - system let's save the changes and see
03:50 - this on the console save here it is
03:54 - this is the fundamental of bitwise
03:56 - operators now in JavaScript we have a
03:58 - few more bitwise operators but in the
04:00 - real word they're not that common now
04:03 - let me give you a real world example of
04:05 - when we can use these bitwise operators
04:07 - so at least they make sense to you
04:09 - imagine you want to implement an access
04:12 - control system so the user can have
04:16 - these permissions read write and execute
04:21 - now we can use one byte of information
04:24 - or 8 bits to determine the kind of
04:27 - permission a user can have for example
04:30 - we can use five zeros one two three four
04:35 - five we don't care about the first five
04:36 - bits but for the other three bits if the
04:40 - user has a permission we will use one
04:43 - otherwise we'll use zero so if the user
04:45 - has only the read permission we will use
04:48 - one for the read and four write and
04:51 - execute we'll use zero similarly if the
04:54 - user has read and write permissions we
04:57 - can represent these permission using
05:00 - this binary number and finally if the
05:03 - user has all these permissions we can
05:07 - represent that like this now this is
05:10 - where we use bitwise operators so I'm
05:13 - gonna delete these two lines as well as
05:15 - these few lines on the top let's see how
05:18 - we can implement this access control
05:21 - system using bitwise operators so I'm
05:24 - gonna define a constant called read
05:26 - permission now I need to set this to a
05:29 - decimal number that is equivalent to
05:32 - this binary number that decimal number
05:35 - is four again you can use an online
05:37 - converter to get this similarly I'm
05:40 - gonna define another constant write
05:43 - permission now what I want now is the
05:46 - decimal representation of this binary
05:49 - number so all these bits or flags are
05:52 - off only the right flag is on okay so
05:57 - this binary number 10 is equivalent to 2
06:00 - in the decimal system and finally
06:03 - execute permission so what we want is
06:07 - the decimal
06:08 - presentation of this binary number all
06:11 - these flags are zero only the execute
06:13 - flag or the execute bit is one and that
06:17 - number is one now I can declare a
06:21 - variable like my permission initially
06:24 - set back to zero now I can give myself
06:27 - extra permissions so I can update my
06:31 - permission like this my permission
06:34 - here we applied the bitwise or to add a
06:37 - permission like read permission as well
06:42 - as the write permission okay now let's
06:46 - take a look at the value of my
06:49 - permission on the console so we get six
06:53 - now we don't care about this decimal
06:56 - number we can use the bitwise and
06:58 - operator to see if I have a given
07:00 - permission so here's an example I'm
07:04 - gonna declare a variable let's call that
07:07 - message now here I'm gonna use the
07:09 - ternary operator the conditional
07:11 - operator remember so we start with a
07:13 - condition we take my permission and use
07:17 - the bitwise and operator along with the
07:21 - read permission now if this evaluates to
07:25 - true that means I have the read
07:27 - permission so let's say we want to
07:30 - display a message like yes otherwise we
07:33 - want to display no let me break this up
07:36 - into multiple lines so you can see
07:38 - clearly so here's our ternary operator
07:40 - we have a condition if that evaluates to
07:43 - true this value will be used otherwise
07:45 - this other value will be used
07:47 - finally let's log this message on the
07:49 - console so I have the read permission
07:52 - but if I remove this read permission
07:55 - here and save the changes now you can
07:59 - see my read permission is gone so here's
08:02 - what I want you to take away with the
08:04 - bitwise or operator we can add
08:07 - permissions and with the bitwise and
08:10 - operator we can
08:12 - check to see if we have a given
08:13 - permission of course this is just one
08:15 - real-world use case for using the
08:17 - bitwise operators there are other use
08:19 - cases but as I told you before there are
08:21 - really not that common so if this
08:23 - lecture was confusing don't worry about
08:25 - it
08:29 - hi guys thank you for watching my
08:31 - javascript tutorial this tutorial is
08:33 - part of my JavaScript course where you
08:36 - learn all the essential JavaScript
08:38 - features that every web and mobile
08:40 - application developer must know if
08:42 - you're an absolute beginner or have some
08:44 - experience in JavaScript and are looking
08:46 - for a fun and in-depth course that
08:48 - teaches you the fundamentals of
08:50 - JavaScript this course is for you this
08:52 - course is also packed with tons of
08:54 - exercises that help you master what you
08:56 - learned in the course in fact many of
08:58 - these exercises are questions that come
09:01 - up in technical programming interviews
09:03 - so if you're pursuing a job as a
09:05 - front-end or a back-end developer or if
09:08 - you simply want to have a more in-depth
09:10 - understanding of JavaScript I highly
09:12 - encourage you to enroll in the course
09:14 - for a limited time you can get this
09:16 - course with a discount using the link in
09:18 - the video description click the link to
09:20 - find out more about the course and
09:22 - enroll

Cleaned transcript:

finally the last group of operators we're going to look at is bitwise operators now this really requires me to go beyond the scope of this course I have to talk about some computer science stuff and honestly I don't really want to bore you because these stuff don't really have that much of practical users in the real world I'm not saying they're useless they definitely have their own use but there are more on this theoretical side and it's not something that you will use on a daily basis however if you're really enthusiastic I'm gonna explain what these bitwise operators are and how they work but feel free to skip this lecture if you just want to focus on the practicality so you know that we humans use the decimal system to represent numbers so 1 2 3 4 5 but in computers these numbers are stored in the binary format which is a combination of zeros and ones so let's take a look at a few examples the number one in the decimal system is represented as seven zeros 1 2 3 4 5 6 7 and and 1 so we have 8 digits each digit is what we call a bit so here we have 8 bits which represents one byte of information in a computer here's another example number 2 in the decimal system equals to 6 zeros and then 1 0 there are mathematical formulas behind this for converting numbers between decimal and binary systems if you don't want to learn the mathematics you can simply Google decimal to binary converter now bitwise operators in JavaScript or any other programming languages are similar to logical operators but they work on the individual bits of a number let me show you what I mean by this so I'm gonna do a console the log 1 or 2 note that here we have a single vertical line that represents a bitwise or so bitwise or logical ORS have double vertical line okay so when we applied the bitwise or between 1 and 2 this is what's going to happen so I had R as the result here now this operator is going to look at each of these beats like this in a vertical way if either of these bits is one the result will be 1 otherwise it will be 0 so here in both these numbers the first 6 bits are 0 so in the result will also have 6 zeros now the 7 bits will be 1 because here we have 1 at this position right and similarly the 8 bit will be 1 because here we have a 1 now if we convert this binary number to a decimal number the result would be 3 so let's save the changes and you can see on the console we have 3 bitwise and is similar so let's duplicate this bitwise and we'll use a single and % for that now the result is going to be something like this so if both numbers are 1 1 will be returned otherwise the result will be 0 so in this case all the bits will end up being 0 because if you look at these 2 first numbers 1 & 2 their first 6 bits are 0 and here in the second number we have this bit that is 1 but the bit at the equivalent position here is 0 so if we applied the bitwise and between these 2 bits the result will be 0 okay so this binary number equals 0 in the decimal system let's save the changes and see this on the console save here it is this is the fundamental of bitwise operators now in JavaScript we have a few more bitwise operators but in the real word they're not that common now let me give you a real world example of when we can use these bitwise operators so at least they make sense to you imagine you want to implement an access control system so the user can have these permissions read write and execute now we can use one byte of information or 8 bits to determine the kind of permission a user can have for example we can use five zeros one two three four five we don't care about the first five bits but for the other three bits if the user has a permission we will use one otherwise we'll use zero so if the user has only the read permission we will use one for the read and four write and execute we'll use zero similarly if the user has read and write permissions we can represent these permission using this binary number and finally if the user has all these permissions we can represent that like this now this is where we use bitwise operators so I'm gonna delete these two lines as well as these few lines on the top let's see how we can implement this access control system using bitwise operators so I'm gonna define a constant called read permission now I need to set this to a decimal number that is equivalent to this binary number that decimal number is four again you can use an online converter to get this similarly I'm gonna define another constant write permission now what I want now is the decimal representation of this binary number so all these bits or flags are off only the right flag is on okay so this binary number 10 is equivalent to 2 in the decimal system and finally execute permission so what we want is the decimal presentation of this binary number all these flags are zero only the execute flag or the execute bit is one and that number is one now I can declare a variable like my permission initially set back to zero now I can give myself extra permissions so I can update my permission like this my permission here we applied the bitwise or to add a permission like read permission as well as the write permission okay now let's take a look at the value of my permission on the console so we get six now we don't care about this decimal number we can use the bitwise and operator to see if I have a given permission so here's an example I'm gonna declare a variable let's call that message now here I'm gonna use the ternary operator the conditional operator remember so we start with a condition we take my permission and use the bitwise and operator along with the read permission now if this evaluates to true that means I have the read permission so let's say we want to display a message like yes otherwise we want to display no let me break this up into multiple lines so you can see clearly so here's our ternary operator we have a condition if that evaluates to true this value will be used otherwise this other value will be used finally let's log this message on the console so I have the read permission but if I remove this read permission here and save the changes now you can see my read permission is gone so here's what I want you to take away with the bitwise or operator we can add permissions and with the bitwise and operator we can check to see if we have a given permission of course this is just one realworld use case for using the bitwise operators there are other use cases but as I told you before there are really not that common so if this lecture was confusing don't worry about it hi guys thank you for watching my javascript tutorial this tutorial is part of my JavaScript course where you learn all the essential JavaScript features that every web and mobile application developer must know if you're an absolute beginner or have some experience in JavaScript and are looking for a fun and indepth course that teaches you the fundamentals of JavaScript this course is for you this course is also packed with tons of exercises that help you master what you learned in the course in fact many of these exercises are questions that come up in technical programming interviews so if you're pursuing a job as a frontend or a backend developer or if you simply want to have a more indepth understanding of JavaScript I highly encourage you to enroll in the course for a limited time you can get this course with a discount using the link in the video description click the link to find out more about the course and enroll
