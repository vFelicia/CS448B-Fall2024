With timestamps:

00:02 - okay access modifiers so far you have
00:06 - seen me declaring classes and their
00:08 - members with the public keyword public
00:10 - is what we call an access modifier in
00:13 - c-sharp we have totally five access
00:15 - modifiers public private protected
00:19 - internal and protected internal in this
00:23 - lecture I'm gonna talk about public and
00:24 - private and we leave the rest to when we
00:27 - get to the lecture about inheritance so
00:30 - what is an access modifier an access
00:33 - modifier is a way to control access to a
00:35 - class and/or its members
00:39 - now you may wonder why do we need to
00:41 - control access to a class or its members
00:43 - the reason is to create some kind of
00:46 - safety or guard in our applications to
00:49 - improve the robustness in the lecture
00:51 - about fields I explained how we can use
00:53 - the read-only modifier to make sure that
00:56 - a field is assigned only once and this
00:58 - way we developers will not accidentally
01:01 - create bugs in our code
01:03 - take a look at this example here I've
01:06 - declared a customer class with a name
01:08 - field that is declared as private
01:10 - with this code when we declare an
01:12 - instance of the customer we cannot
01:15 - access the name field so we cannot go
01:18 - John dot name that will not compile now
01:21 - you may wonder why do we need something
01:23 - like that
01:23 - well that's the beginning of
01:26 - object-oriented programming an
01:27 - object-oriented programming which is
01:29 - actually one of my absolute favorite
01:31 - topics we have three major concepts
01:35 - encapsulation which is also referred to
01:37 - as information hiding inheritance and
01:40 - polymorphism in this lecture we are
01:43 - going to learn about encapsulation and
01:44 - throughout this course we'll see more
01:47 - examples of achieving encapsulation
01:49 - we're going to leave inheritance and
01:51 - polymorphism to the later section in
01:53 - this course let's start with
01:55 - encapsulation
01:58 - I want to use an analogy think of a
02:00 - restaurant in a restaurant we have
02:03 - several roles we have a cashier we have
02:05 - a manager we have a chef we have one or
02:08 - more kitchen hands we have one or more
02:11 - waiters or waitresses and all these
02:13 - roles collaborate together to provide an
02:15 - amazing experience for you well
02:17 - hopefully because sometimes we go to a
02:19 - restaurant and we come back very
02:21 - disappointed but anyway think of the
02:23 - interaction between a waitress and a
02:26 - chef a waitress takes the order and
02:29 - passes it to the kitchen then the chef
02:31 - looks at the order and does his job and
02:33 - when it's ready he notifies the waitress
02:36 - so that chef is responsible or a few
02:39 - things which is outside the
02:41 - responsibility of the waitress a
02:43 - waitress is not gonna go to the kitchen
02:45 - tell the chef how to chop the vegetables
02:48 - and how to cook the meat and I don't
02:50 - know about different spices each of
02:52 - these roles are responsible for their
02:54 - own things they have some knowledge and
02:57 - some capabilities they perform some
03:00 - functions software should be the same in
03:03 - software we don't have a chef or a
03:05 - waitress but we have classes and these
03:08 - classes collaborate to perform the
03:10 - functionality required from the
03:12 - application now we want to design our
03:14 - classes such that each class is
03:16 - responsible for one thing it does only
03:19 - one job and does it perfectly
03:20 - we want our classes to hide some of the
03:24 - information about how they do the things
03:27 - they are responsible for we don't want
03:29 - other classes to know about the details
03:31 - of other classes and this is what we
03:34 - call encapsulation so we want to
03:36 - encapsulate some data in terms of fields
03:39 - as well as some behavior or
03:41 - functionality in terms of methods in
03:43 - classes and we want to hide the details
03:46 - from the outside
03:49 - so when it comes to field you want to
03:51 - declare them as private and provide
03:53 - methods that would give access to his
03:55 - fields
03:57 - we call these methods getters and
03:58 - setters and these methods are going to
04:01 - be public
04:03 - so we think of fields as the
04:05 - implementation detail which should be
04:07 - invisible from the outside it's how a
04:10 - class stores something in memory we
04:13 - don't want any other classes to know
04:14 - anything about that
04:17 - so to show you an example here we have a
04:19 - person class that has a name field that
04:21 - is declared as private
04:24 - so with this code if we create an
04:26 - instance of the person class we can have
04:28 - access the name field of that object
04:31 - instead we need to call one of the
04:33 - methods here set name or get knee
04:37 - look at the setname method here
04:40 - the interesting thing about this method
04:42 - is that it does a check before assigning
04:45 - the name field of the person so if the
04:49 - value that is passed to this method as
04:50 - the argument is null or empty it's not
04:53 - going to set the name field and this one
04:56 - of the advantages of providing setters
04:58 - and getters we cannot achieve the same
05:01 - thing with a field a field is purely a
05:04 - storage in the memory it doesn't have
05:06 - logic with a sitter or a getter we can
05:09 - have some logic when accessing that
05:11 - field
05:12 - okay before we start coding I just need
05:14 - to emphasize something here in terms of
05:16 - naming convention in c-sharp we have two
05:19 - naming conventions one is called Pascal
05:22 - case the other is called camel case with
05:25 - Pascal case the first letter of every
05:28 - word should be uppercase like the person
05:30 - here or name or setting note that the
05:34 - first letter of every word is uppercase
05:37 - with camelcase the first letter of only
05:41 - the first word is going to be lowercase
05:43 - but the first letter of every word after
05:46 - that is going to be uppercase
05:49 - example of camel case is the name
05:51 - parameter here so the first letter is
05:54 - lowercase
05:57 - now when it comes to classes we need to
05:58 - use the Pasco case our naming the class
06:01 - or any of its methods
06:04 - four fields the convention is to use the
06:07 - camelcase prefix with an underline so we
06:10 - need to change the name field here to
06:12 - something like this
06:15 - so private fields should start with an
06:18 - underline and they should follow the
06:20 - camelcase
06:22 - okay I think that's enough theory let's
06:24 - start coding and see all these concepts
06:25 - in action
06:29 - okay let's declare a class called person
06:38 - and now we can declare a field called
06:40 - birthdate which should be of type take
06:42 - time but we no longer are going to
06:45 - declare a field as public instead we're
06:48 - going to use private so private date
06:51 - time birthday note that I have used an
06:59 - underline here
07:01 - and camelcase
07:03 - so the first letter of the first word is
07:05 - lowercase
07:07 - now with this code we cannot access the
07:10 - birth date field outside the person
07:12 - class so if we go to the main method
07:14 - here and create a person object person
07:22 - dot see we don't see the birth date
07:25 - field
07:28 - it's hidden from the outside
07:31 - and that's what we mean by information
07:33 - hiding an object-oriented programming
07:35 - okay then how do we set a birth date for
07:39 - that to happen we need a method so let
07:42 - me remove this for now like in the
07:45 - person class I define two methods public
07:48 - void set birth date and this method
07:53 - takes a parameter of type daytime and we
07:57 - call it birth date at this point if
08:00 - there are any logics around birth date
08:02 - we can implement them here in this case
08:05 - we're going to keep things simple
08:07 - we don't necessarily need a logic around
08:09 - birth date at this point so what we need
08:11 - to do is simply set the birth date to
08:14 - the value passed to this method and we
08:18 - declare another method public date/time
08:25 - get birth date and this
08:29 - believe returns that birthday feel now
08:33 - with these two methods we can go back to
08:35 - the main method here as a person that
08:39 - set birthdate you can say new day time
08:45 - 1982 1 1 and of course we can read the
08:49 - birth date
08:50 - so console.writeline person that gets
08:54 - birth date
08:56 - we can run this application
09:00 - and we got the birth date on the console
09:02 - okay I know what you're thinking you
09:05 - probably are confused why we change the
09:07 - access modifier for birth date to
09:10 - private but then gave two methods here
09:13 - that directly modify their field or
09:16 - return this value how is it different
09:18 - from directly going to that field
09:20 - well if that's what you're thinking it's
09:23 - in fact a good question that's one of
09:25 - the questions I also had when I started
09:27 - with object-oriented programming
09:28 - the answer is objects are about behavior
09:31 - about what they do their fields is
09:35 - primarily their internals their
09:37 - implementation detail which should be
09:40 - hidden from the outside world even
09:42 - though in this example it doesn't really
09:44 - make a difference whether we had a
09:47 - public field or a private field with two
09:50 - methods but from an object-oriented
09:52 - perspective we want to follow the
09:54 - principle of encapsulation which
09:56 - suggests that objects should hide their
09:59 - implementation detail and reveal what
10:02 - they can do as opposed to how they do
10:05 - what they're supposed to do
10:08 - with the examples I will show you
10:10 - throughout this course you will realize
10:12 - the importance of this concept more and
10:14 - more well that's it for this lecture
10:17 - what I want you to take away from this
10:18 - lecture is we are going to declare our
10:21 - fields as private and the naming
10:23 - convention is underlined and camelcase
10:26 - in the real world applications we are
10:28 - not going to define two methods like the
10:30 - ones you see here this was purely for
10:32 - demonstration and because I want to take
10:35 - things in a step-by-step fashion in the
10:37 - next lecture I will show you an easier
10:40 - way to achieve the same functionality
10:41 - and that's what we call properties I
10:44 - hope you enjoyed this lecture and thank
10:46 - you for watching
10:49 - hi guys ma chere I hope you're having a
10:52 - fantastic day or night wherever you are
10:55 - in the world this tutorial you have been
10:57 - watching is actually part of one of my C
10:59 - sharp courses where you will learn
11:01 - everything about classes interfaces and
11:04 - object-oriented programming in case
11:07 - you're interested to enroll in the full
11:09 - course I've put the link for you in the
11:11 - video description and if not that's
11:13 - perfectly fine
11:14 - have a great day

Cleaned transcript:

okay access modifiers so far you have seen me declaring classes and their members with the public keyword public is what we call an access modifier in csharp we have totally five access modifiers public private protected internal and protected internal in this lecture I'm gonna talk about public and private and we leave the rest to when we get to the lecture about inheritance so what is an access modifier an access modifier is a way to control access to a class and/or its members now you may wonder why do we need to control access to a class or its members the reason is to create some kind of safety or guard in our applications to improve the robustness in the lecture about fields I explained how we can use the readonly modifier to make sure that a field is assigned only once and this way we developers will not accidentally create bugs in our code take a look at this example here I've declared a customer class with a name field that is declared as private with this code when we declare an instance of the customer we cannot access the name field so we cannot go John dot name that will not compile now you may wonder why do we need something like that well that's the beginning of objectoriented programming an objectoriented programming which is actually one of my absolute favorite topics we have three major concepts encapsulation which is also referred to as information hiding inheritance and polymorphism in this lecture we are going to learn about encapsulation and throughout this course we'll see more examples of achieving encapsulation we're going to leave inheritance and polymorphism to the later section in this course let's start with encapsulation I want to use an analogy think of a restaurant in a restaurant we have several roles we have a cashier we have a manager we have a chef we have one or more kitchen hands we have one or more waiters or waitresses and all these roles collaborate together to provide an amazing experience for you well hopefully because sometimes we go to a restaurant and we come back very disappointed but anyway think of the interaction between a waitress and a chef a waitress takes the order and passes it to the kitchen then the chef looks at the order and does his job and when it's ready he notifies the waitress so that chef is responsible or a few things which is outside the responsibility of the waitress a waitress is not gonna go to the kitchen tell the chef how to chop the vegetables and how to cook the meat and I don't know about different spices each of these roles are responsible for their own things they have some knowledge and some capabilities they perform some functions software should be the same in software we don't have a chef or a waitress but we have classes and these classes collaborate to perform the functionality required from the application now we want to design our classes such that each class is responsible for one thing it does only one job and does it perfectly we want our classes to hide some of the information about how they do the things they are responsible for we don't want other classes to know about the details of other classes and this is what we call encapsulation so we want to encapsulate some data in terms of fields as well as some behavior or functionality in terms of methods in classes and we want to hide the details from the outside so when it comes to field you want to declare them as private and provide methods that would give access to his fields we call these methods getters and setters and these methods are going to be public so we think of fields as the implementation detail which should be invisible from the outside it's how a class stores something in memory we don't want any other classes to know anything about that so to show you an example here we have a person class that has a name field that is declared as private so with this code if we create an instance of the person class we can have access the name field of that object instead we need to call one of the methods here set name or get knee look at the setname method here the interesting thing about this method is that it does a check before assigning the name field of the person so if the value that is passed to this method as the argument is null or empty it's not going to set the name field and this one of the advantages of providing setters and getters we cannot achieve the same thing with a field a field is purely a storage in the memory it doesn't have logic with a sitter or a getter we can have some logic when accessing that field okay before we start coding I just need to emphasize something here in terms of naming convention in csharp we have two naming conventions one is called Pascal case the other is called camel case with Pascal case the first letter of every word should be uppercase like the person here or name or setting note that the first letter of every word is uppercase with camelcase the first letter of only the first word is going to be lowercase but the first letter of every word after that is going to be uppercase example of camel case is the name parameter here so the first letter is lowercase now when it comes to classes we need to use the Pasco case our naming the class or any of its methods four fields the convention is to use the camelcase prefix with an underline so we need to change the name field here to something like this so private fields should start with an underline and they should follow the camelcase okay I think that's enough theory let's start coding and see all these concepts in action okay let's declare a class called person and now we can declare a field called birthdate which should be of type take time but we no longer are going to declare a field as public instead we're going to use private so private date time birthday note that I have used an underline here and camelcase so the first letter of the first word is lowercase now with this code we cannot access the birth date field outside the person class so if we go to the main method here and create a person object person dot see we don't see the birth date field it's hidden from the outside and that's what we mean by information hiding an objectoriented programming okay then how do we set a birth date for that to happen we need a method so let me remove this for now like in the person class I define two methods public void set birth date and this method takes a parameter of type daytime and we call it birth date at this point if there are any logics around birth date we can implement them here in this case we're going to keep things simple we don't necessarily need a logic around birth date at this point so what we need to do is simply set the birth date to the value passed to this method and we declare another method public date/time get birth date and this believe returns that birthday feel now with these two methods we can go back to the main method here as a person that set birthdate you can say new day time 1982 1 1 and of course we can read the birth date so console.writeline person that gets birth date we can run this application and we got the birth date on the console okay I know what you're thinking you probably are confused why we change the access modifier for birth date to private but then gave two methods here that directly modify their field or return this value how is it different from directly going to that field well if that's what you're thinking it's in fact a good question that's one of the questions I also had when I started with objectoriented programming the answer is objects are about behavior about what they do their fields is primarily their internals their implementation detail which should be hidden from the outside world even though in this example it doesn't really make a difference whether we had a public field or a private field with two methods but from an objectoriented perspective we want to follow the principle of encapsulation which suggests that objects should hide their implementation detail and reveal what they can do as opposed to how they do what they're supposed to do with the examples I will show you throughout this course you will realize the importance of this concept more and more well that's it for this lecture what I want you to take away from this lecture is we are going to declare our fields as private and the naming convention is underlined and camelcase in the real world applications we are not going to define two methods like the ones you see here this was purely for demonstration and because I want to take things in a stepbystep fashion in the next lecture I will show you an easier way to achieve the same functionality and that's what we call properties I hope you enjoyed this lecture and thank you for watching hi guys ma chere I hope you're having a fantastic day or night wherever you are in the world this tutorial you have been watching is actually part of one of my C sharp courses where you will learn everything about classes interfaces and objectoriented programming in case you're interested to enroll in the full course I've put the link for you in the video description and if not that's perfectly fine have a great day
