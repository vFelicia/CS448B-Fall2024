With timestamps:

00:03 - the second built-in object we're gonna
00:05 - look at is the string object so I'm
00:07 - gonna define a constant message and set
00:11 - it to a string now look at this message
00:15 - dot what's going on here
00:18 - it looks like we have a bunch of
00:20 - properties and methods but earlier in
00:22 - the course I told you that string is a
00:24 - primitive type primitive types don't
00:27 - have properties and methods only objects
00:30 - do so why is it that we see these
00:32 - properties and methods in this string
00:34 - well the reason for this is because in
00:37 - JavaScript we have two kinds of strings
00:40 - so this is what we call a string
00:43 - primitive but we also have a string
00:47 - object so we have this constructor
00:50 - function string and we can use that to
00:53 - create a new string object so we can
00:56 - pass the same string here now because
00:59 - this is a constructor function we need
01:01 - to apply the new operator and now we
01:04 - have another string now let's take a
01:07 - look at the type of each of these
01:09 - constants so type of message that's a
01:13 - string but type of another is an object
01:17 - so the first constant is a string
01:20 - primitive the second one is an object
01:22 - however when we use the dot notation
01:25 - with a string primitive JavaScript
01:29 - engine internally wraps this with a
01:32 - string object we don't see that but we
01:34 - can work with this like a string object
01:36 - now just like the math object if you
01:39 - want to learn about all these methods
01:41 - it's best to look at the documentation
01:43 - so simply search for a JavaScript string
01:48 - once again on developer mozilla.org
01:54 - on this page you can see all the
01:57 - properties and methods of the string
01:59 - object in this lecture I'm going to show
02:02 - you a few of these methods but I
02:03 - strongly recommend you to look at the
02:05 - documentation once just have a quick
02:07 - look to see what methods are there in
02:09 - case you need them so back to our code
02:12 - let's change this string to this is my
02:15 - first message here we have the length
02:19 - property which returns the number of
02:22 - characters in a string this is
02:24 - particularly useful in situations where
02:26 - you want to make sure the user types at
02:28 - least certain number of characters in an
02:31 - input field or maybe you want to put a
02:33 - limit you don't want the user to type in
02:35 - more than 100 characters now if you want
02:37 - to access a character and a given index
02:40 - you can use square brackets so message
02:44 - of 0 returns T message of 1 returns H if
02:48 - you want to see this string has a
02:50 - special word you can use the includes
02:54 - method so does the string have my yes it
03:00 - does but it doesn't have not we also
03:04 - have another method starts with so this
03:09 - string starts with this but if you pass
03:13 - a capital T here we get false so note
03:17 - that these Searchers are case sensitive
03:19 - we have a similar method ends with so
03:22 - message that ends with E so you can see
03:28 - the last character here is e if you want
03:31 - to find the index of a given character
03:32 - or a given string inside this string you
03:35 - can use the index of method so let's see
03:39 - what is the index of my so my start at
03:43 - index 8 we can also replace a part of a
03:47 - string so replace let's say you want to
03:50 - replace first ways second pretty easy
03:55 - note that this returns a new string and
03:57 - does not modify the original one so if
04:00 - you log the original one we still have
04:02 - this is my first message we also have
04:06 - a couple useful methods to uppercase
04:09 - once again this returns a new string
04:11 - where all characters are uppercase
04:13 - similar to this method we have two lower
04:15 - case and another useful method is trim
04:19 - so let me have a couple of white spaces
04:22 - here before and after our message now if
04:26 - we call the trim method it gets rid of
04:31 - all the white space before and after our
04:33 - message and of course this method has
04:36 - variations for example we have trim left
04:39 - which only removes the whitespace at the
04:42 - beginning of the string we have trim
04:44 - bright and so on another important
04:47 - concept you need to know in JavaScript
04:48 - is escape notation so if you look at the
04:52 - documentation for the string object you
04:54 - can see in this table under escape
04:56 - notation we've got these special
04:58 - characters so if you want to use these
05:00 - you need to encode them using the escape
05:02 - notation for example let's say you want
05:05 - to have a single quote in your string
05:08 - now in this example we have defined this
05:11 - string with a single code so if you want
05:13 - to have a single code inside of the
05:15 - string
05:17 - look our JavaScript engine gets confused
05:21 - because it thinks this second single
05:23 - code represents the end of the string to
05:25 - fix this we need to prefix this with a
05:28 - backslash and now this character is
05:31 - escaped it's encoded so when we log the
05:35 - message you can see the single code is
05:38 - actually part of the string another
05:41 - useful escape character is backslash n
05:43 - which represents a newline so back here
05:47 - if we add a backslash n after my this
05:51 - will add a new line so save the changes
05:54 - let's look at message on the console you
05:57 - can see we have a new line here another
06:00 - very useful method is the split method
06:02 - so message dot split with this we can
06:06 - split a string based on a given
06:08 - character so here I'm gonna pass a
06:11 - whitespace and see what we get we get an
06:14 - array of 5 items and each either
06:19 - in this array is a word in our message
06:21 - next we're going to look at template
06:23 - literals
06:27 - hi guys thank you for watching my
06:29 - javascript tutorial this tutorial is
06:31 - part of my JavaScript course where you
06:33 - learn all the essential JavaScript
06:36 - features that every web and mobile
06:38 - application developer must know if
06:40 - you're an absolute beginner or have some
06:42 - experience in JavaScript and are looking
06:44 - for a fun and in-depth course that
06:46 - teaches you the fundamentals of
06:48 - JavaScript this course is for you this
06:50 - course is also packed with tons of
06:52 - exercises that help you master what you
06:54 - learned in the course in fact many of
06:56 - these exercises are questions that come
06:59 - up in technical programming interviews
07:01 - so if you're pursuing a job as a
07:03 - front-end or a back-end developer or if
07:06 - you simply want to have a more in-depth
07:08 - understanding of JavaScript I highly
07:10 - encourage you to enroll in the course
07:12 - for a limited time you can get this
07:14 - course with a discount using the link in
07:16 - the video description click the link to
07:18 - find out more about the course and
07:20 - enroll

Cleaned transcript:

the second builtin object we're gonna look at is the string object so I'm gonna define a constant message and set it to a string now look at this message dot what's going on here it looks like we have a bunch of properties and methods but earlier in the course I told you that string is a primitive type primitive types don't have properties and methods only objects do so why is it that we see these properties and methods in this string well the reason for this is because in JavaScript we have two kinds of strings so this is what we call a string primitive but we also have a string object so we have this constructor function string and we can use that to create a new string object so we can pass the same string here now because this is a constructor function we need to apply the new operator and now we have another string now let's take a look at the type of each of these constants so type of message that's a string but type of another is an object so the first constant is a string primitive the second one is an object however when we use the dot notation with a string primitive JavaScript engine internally wraps this with a string object we don't see that but we can work with this like a string object now just like the math object if you want to learn about all these methods it's best to look at the documentation so simply search for a JavaScript string once again on developer mozilla.org on this page you can see all the properties and methods of the string object in this lecture I'm going to show you a few of these methods but I strongly recommend you to look at the documentation once just have a quick look to see what methods are there in case you need them so back to our code let's change this string to this is my first message here we have the length property which returns the number of characters in a string this is particularly useful in situations where you want to make sure the user types at least certain number of characters in an input field or maybe you want to put a limit you don't want the user to type in more than 100 characters now if you want to access a character and a given index you can use square brackets so message of 0 returns T message of 1 returns H if you want to see this string has a special word you can use the includes method so does the string have my yes it does but it doesn't have not we also have another method starts with so this string starts with this but if you pass a capital T here we get false so note that these Searchers are case sensitive we have a similar method ends with so message that ends with E so you can see the last character here is e if you want to find the index of a given character or a given string inside this string you can use the index of method so let's see what is the index of my so my start at index 8 we can also replace a part of a string so replace let's say you want to replace first ways second pretty easy note that this returns a new string and does not modify the original one so if you log the original one we still have this is my first message we also have a couple useful methods to uppercase once again this returns a new string where all characters are uppercase similar to this method we have two lower case and another useful method is trim so let me have a couple of white spaces here before and after our message now if we call the trim method it gets rid of all the white space before and after our message and of course this method has variations for example we have trim left which only removes the whitespace at the beginning of the string we have trim bright and so on another important concept you need to know in JavaScript is escape notation so if you look at the documentation for the string object you can see in this table under escape notation we've got these special characters so if you want to use these you need to encode them using the escape notation for example let's say you want to have a single quote in your string now in this example we have defined this string with a single code so if you want to have a single code inside of the string look our JavaScript engine gets confused because it thinks this second single code represents the end of the string to fix this we need to prefix this with a backslash and now this character is escaped it's encoded so when we log the message you can see the single code is actually part of the string another useful escape character is backslash n which represents a newline so back here if we add a backslash n after my this will add a new line so save the changes let's look at message on the console you can see we have a new line here another very useful method is the split method so message dot split with this we can split a string based on a given character so here I'm gonna pass a whitespace and see what we get we get an array of 5 items and each either in this array is a word in our message next we're going to look at template literals hi guys thank you for watching my javascript tutorial this tutorial is part of my JavaScript course where you learn all the essential JavaScript features that every web and mobile application developer must know if you're an absolute beginner or have some experience in JavaScript and are looking for a fun and indepth course that teaches you the fundamentals of JavaScript this course is for you this course is also packed with tons of exercises that help you master what you learned in the course in fact many of these exercises are questions that come up in technical programming interviews so if you're pursuing a job as a frontend or a backend developer or if you simply want to have a more indepth understanding of JavaScript I highly encourage you to enroll in the course for a limited time you can get this course with a discount using the link in the video description click the link to find out more about the course and enroll
