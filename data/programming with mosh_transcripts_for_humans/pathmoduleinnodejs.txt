With timestamps:

00:01 - so in the last lecture I told you that
00:03 - in ode we have a few useful modules that
00:06 - are built into the core of node with
00:09 - these modules we can work with files
00:11 - with the operating system with a network
00:13 - and so on so let's have a quick look at
00:16 - this built in modules head over to node
00:18 - J s org then go to Docs on the left side
00:23 - go to version eight point nine point
00:27 - three that's the current stable release
00:28 - chances are by the time you're watching
00:30 - this video this version might be
00:32 - different so that doesn't really matter
00:34 - just pick that version now hearing the
00:36 - table of contents you can see the
00:39 - built-in modules of course not
00:41 - everything you see here is a module for
00:43 - example we have console which is our
00:45 - console object we have buffer which
00:47 - we're going to learn about in the future
00:49 - in this course again that's a global
00:51 - object but you can see that this is a
00:53 - fairly short list and some of the items
00:56 - in this list are built in modules in No
00:59 - so just that you can see there are not
01:01 - many modules built into node
01:04 - I'm gonna highlight a few very useful
01:06 - modules that you should be aware of for
01:09 - example we have file system to work with
01:12 - files we have HTTP that you're going to
01:14 - learn about later in this section so
01:16 - with this we can create web servers that
01:19 - listen for HTTP requests we have OS to
01:23 - work with the operating system we have
01:25 - path which gives us a bunch of utility
01:27 - functions for working with paths we have
01:31 - process that gives us information about
01:33 - the current process we have query
01:35 - strings which is very useful in building
01:37 - HTTP services we have a stream which
01:40 - allows us to work with streams of data
01:42 - again you're going to learn about this
01:44 - in the future and a bunch of other
01:46 - modules now in this lecture we're going
01:48 - to look at is past module so on the
01:52 - documentation you can see all the
01:54 - functions defined in this module
01:57 - we're going to use the parse method now
02:01 - if you scroll down you can see how you
02:04 - can use this module so I've seen the
02:07 - required function before we call the
02:09 - module using the require function get
02:12 - the result which is an object and store
02:15 - it in a constant so back in vs code in
02:19 - app Jas let's call require and as the
02:23 - argument use path now the argument that
02:27 - we gave to this require function no it
02:29 - assumes that this is a built in module
02:32 - if there is no built in module by the
02:35 - name specified here then node looks for
02:38 - the existence of a relative path to a
02:40 - file in this application so if we have
02:43 - period / or period period / whatever
02:47 - then node assumes that this is a file in
02:50 - this application now in this case we're
02:53 - going to load the building path module
02:55 - and store it in a constant called pass
02:57 - so this is an object with a bunch of
03:00 - useful methods the method we're going to
03:04 - use is the parse method so I'm gonna
03:07 - give it is underline underline file name
03:10 - which is one of the arguments and the
03:13 - module wrapper function that you saw in
03:15 - the last lecture so let's call this and
03:18 - store the result in pass object and then
03:23 - finally log it on the console has object
03:29 - now back in the terminal let's run this
03:32 - application
03:34 - this is the past object it has a few
03:36 - useful properties we have root we have D
03:39 - which specifies the path to the folder
03:42 - containing this file here's the name of
03:46 - the file after Jas here's the extension
03:50 - and here's the name of the file without
03:52 - the extension so if you want to work
03:54 - with paths it's much easier to use the
03:56 - path module as opposed to working with
03:59 - strings in the next lecture we're going
04:01 - to look at another built-in module that
04:03 - gives us information about the operating
04:06 - system
04:08 - hi guys its mosh here thank you for
04:11 - watching my know tutorial I just wanted
04:13 - to let you know that this video you've
04:15 - been watching it's part of my complete
04:17 - note course where you will learn
04:19 - everything about node from the basic to
04:21 - the advanced topics if you're serious
04:23 - about learning node I highly recommend
04:25 - you to enroll in my node course because
04:27 - this is much faster than jumping from
04:29 - one tutorial to another it saves you
04:31 - time plus you're going to get a lot of
04:33 - exercises that will prepare you for the
04:36 - real work and also at the end of the
04:37 - course you'll receive a certificate of
04:40 - completion that you can provide your
04:42 - current or future employer so if you
04:45 - want to enroll click on the link in the
04:47 - video description I hope to see you in
04:48 - the course

Cleaned transcript:

so in the last lecture I told you that in ode we have a few useful modules that are built into the core of node with these modules we can work with files with the operating system with a network and so on so let's have a quick look at this built in modules head over to node J s org then go to Docs on the left side go to version eight point nine point three that's the current stable release chances are by the time you're watching this video this version might be different so that doesn't really matter just pick that version now hearing the table of contents you can see the builtin modules of course not everything you see here is a module for example we have console which is our console object we have buffer which we're going to learn about in the future in this course again that's a global object but you can see that this is a fairly short list and some of the items in this list are built in modules in No so just that you can see there are not many modules built into node I'm gonna highlight a few very useful modules that you should be aware of for example we have file system to work with files we have HTTP that you're going to learn about later in this section so with this we can create web servers that listen for HTTP requests we have OS to work with the operating system we have path which gives us a bunch of utility functions for working with paths we have process that gives us information about the current process we have query strings which is very useful in building HTTP services we have a stream which allows us to work with streams of data again you're going to learn about this in the future and a bunch of other modules now in this lecture we're going to look at is past module so on the documentation you can see all the functions defined in this module we're going to use the parse method now if you scroll down you can see how you can use this module so I've seen the required function before we call the module using the require function get the result which is an object and store it in a constant so back in vs code in app Jas let's call require and as the argument use path now the argument that we gave to this require function no it assumes that this is a built in module if there is no built in module by the name specified here then node looks for the existence of a relative path to a file in this application so if we have period / or period period / whatever then node assumes that this is a file in this application now in this case we're going to load the building path module and store it in a constant called pass so this is an object with a bunch of useful methods the method we're going to use is the parse method so I'm gonna give it is underline underline file name which is one of the arguments and the module wrapper function that you saw in the last lecture so let's call this and store the result in pass object and then finally log it on the console has object now back in the terminal let's run this application this is the past object it has a few useful properties we have root we have D which specifies the path to the folder containing this file here's the name of the file after Jas here's the extension and here's the name of the file without the extension so if you want to work with paths it's much easier to use the path module as opposed to working with strings in the next lecture we're going to look at another builtin module that gives us information about the operating system hi guys its mosh here thank you for watching my know tutorial I just wanted to let you know that this video you've been watching it's part of my complete note course where you will learn everything about node from the basic to the advanced topics if you're serious about learning node I highly recommend you to enroll in my node course because this is much faster than jumping from one tutorial to another it saves you time plus you're going to get a lot of exercises that will prepare you for the real work and also at the end of the course you'll receive a certificate of completion that you can provide your current or future employer so if you want to enroll click on the link in the video description I hope to see you in the course
