With timestamps:

00:03 - and it's lecture we're going to talk
00:04 - about a very important concept called
00:06 - scope so I'm gonna define a constant
00:10 - called message and set it to high
00:13 - now let's log this on the console so
00:17 - obviously we can high on the console but
00:21 - what would happen if I add this message
00:23 - in a code block I'll save the changes
00:27 - and see what happens we get this error
00:29 - uncut reference error message is not
00:32 - defined this is all about scoping so a
00:36 - scope of a variable or a constant
00:39 - determines where that variable or
00:41 - constant is accessible and let me
00:44 - declare variables and constants with let
00:46 - or Const their scope is limited to the
00:50 - block in which they are defined so
00:53 - message is accessible in this block but
00:56 - it's not accessible outside of this
00:58 - block now you might be wondering why do
01:00 - we need this code block here
01:02 - well this code block can be part of a
01:05 - function so here we can have a function
01:07 - called start I now we have a constant in
01:12 - this function so because the scope of
01:14 - this constant is limited to the block in
01:17 - which it's defined we cannot access this
01:20 - constant outside of the start function
01:22 - the same is true when we declare a
01:25 - variable or a constant in an if block so
01:28 - let's add an if block here some
01:31 - condition we don't care let's declare
01:33 - another constant and set it to by now
01:38 - this constant is only accessible in this
01:41 - block if I go out of this block and try
01:44 - to log it on the console we're gonna get
01:47 - an error so I'm gonna remove the last
01:50 - line let's just call the start function
01:53 - save the changes we get the same error
01:56 - reference error another is not defined
01:58 - we have the same concept in our loops so
02:02 - let's define a for loop let I equal to 0
02:06 - we're gonna run it 5 times now I is a
02:11 - variable that is only accessible in this
02:14 - block so here we can log I
02:17 - let's save the changes we get numbers
02:20 - zero to four but if we go outside of
02:23 - this four block and log I we're going to
02:26 - get the same error reference error I is
02:30 - not defined now let me simplify this
02:33 - code so we're gonna have a function with
02:37 - a constant called message we can have
02:40 - another function let's call that stop
02:42 - and in this function we can have a
02:45 - constant called message with a different
02:48 - value that's perfectly valid JavaScript
02:51 - code because the scope of this constant
02:54 - is limited to the block in which it's
02:57 - defined so we can have two variables or
02:59 - constants with the same name but in
03:02 - different functions that's perfectly
03:04 - valid now what if we define a variable
03:06 - or a constant outside of a function so
03:09 - here I'm gonna define a constant caller
03:12 - and set it to red now here we don't have
03:15 - any code blocks so what do you think is
03:18 - the scope of this constant this constant
03:21 - has global scope global means this
03:24 - constant is accessible everywhere
03:27 - globally so we can go to the start
03:29 - function and log caller save the changes
03:34 - we can see we have access to this
03:36 - constant caller right so this constant
03:39 - is accessible in all the functions we
03:42 - have in our program now what if we have
03:45 - a constant with the exact same name in
03:48 - our function so let's take a look I'm
03:51 - gonna define this color constant what
03:54 - set it to blue what do you think we're
03:57 - going to see when I save the changes
03:58 - let's take a look we get blue so local
04:03 - variables or local constants in a
04:05 - function take precedence over global
04:08 - variables or constants now in general
04:11 - you should avoid defining global
04:13 - variables or constants that is
04:15 - considered bad practice let me give you
04:17 - a metaphor imagine this is a toothbrush
04:20 - and each function is a person you don't
04:23 - want to have a toothbrush that is shared
04:25 - between multiple people each person
04:27 - should have their own toothbrush
04:29 - so you should avoid defining global
04:31 - variables or constants because they're
04:33 - accessible everywhere globally and each
04:36 - function can accidentally change their
04:38 - value and this will lead to all kinds of
04:40 - bugs and issues in our programs
04:45 - hi guys thank you for watching my
04:48 - javascript tutorial this tutorial is
04:50 - part of my JavaScript course where you
04:52 - learn all the essential JavaScript
04:54 - features that every web and mobile
04:57 - application developer must know if
04:59 - you're an absolute beginner or have some
05:01 - experience in JavaScript and are looking
05:03 - for a fun and in-depth course that
05:05 - teaches you the fundamentals of
05:06 - JavaScript this course is for you this
05:09 - course is also packed with tons of
05:11 - exercises that help you master what you
05:13 - learned in the course in fact many of
05:15 - these exercises are questions that come
05:17 - up in technical programming interviews
05:19 - so if you're pursuing a job as a
05:22 - front-end or a back-end developer or if
05:25 - you simply want to have a more in-depth
05:27 - understanding of JavaScript I highly
05:29 - encourage you to enroll in the course
05:31 - for a limited time you can get this
05:33 - course with a discount using the link in
05:35 - the video description click the link to
05:37 - find out more about the course and
05:38 - enroll

Cleaned transcript:

and it's lecture we're going to talk about a very important concept called scope so I'm gonna define a constant called message and set it to high now let's log this on the console so obviously we can high on the console but what would happen if I add this message in a code block I'll save the changes and see what happens we get this error uncut reference error message is not defined this is all about scoping so a scope of a variable or a constant determines where that variable or constant is accessible and let me declare variables and constants with let or Const their scope is limited to the block in which they are defined so message is accessible in this block but it's not accessible outside of this block now you might be wondering why do we need this code block here well this code block can be part of a function so here we can have a function called start I now we have a constant in this function so because the scope of this constant is limited to the block in which it's defined we cannot access this constant outside of the start function the same is true when we declare a variable or a constant in an if block so let's add an if block here some condition we don't care let's declare another constant and set it to by now this constant is only accessible in this block if I go out of this block and try to log it on the console we're gonna get an error so I'm gonna remove the last line let's just call the start function save the changes we get the same error reference error another is not defined we have the same concept in our loops so let's define a for loop let I equal to 0 we're gonna run it 5 times now I is a variable that is only accessible in this block so here we can log I let's save the changes we get numbers zero to four but if we go outside of this four block and log I we're going to get the same error reference error I is not defined now let me simplify this code so we're gonna have a function with a constant called message we can have another function let's call that stop and in this function we can have a constant called message with a different value that's perfectly valid JavaScript code because the scope of this constant is limited to the block in which it's defined so we can have two variables or constants with the same name but in different functions that's perfectly valid now what if we define a variable or a constant outside of a function so here I'm gonna define a constant caller and set it to red now here we don't have any code blocks so what do you think is the scope of this constant this constant has global scope global means this constant is accessible everywhere globally so we can go to the start function and log caller save the changes we can see we have access to this constant caller right so this constant is accessible in all the functions we have in our program now what if we have a constant with the exact same name in our function so let's take a look I'm gonna define this color constant what set it to blue what do you think we're going to see when I save the changes let's take a look we get blue so local variables or local constants in a function take precedence over global variables or constants now in general you should avoid defining global variables or constants that is considered bad practice let me give you a metaphor imagine this is a toothbrush and each function is a person you don't want to have a toothbrush that is shared between multiple people each person should have their own toothbrush so you should avoid defining global variables or constants because they're accessible everywhere globally and each function can accidentally change their value and this will lead to all kinds of bugs and issues in our programs hi guys thank you for watching my javascript tutorial this tutorial is part of my JavaScript course where you learn all the essential JavaScript features that every web and mobile application developer must know if you're an absolute beginner or have some experience in JavaScript and are looking for a fun and indepth course that teaches you the fundamentals of JavaScript this course is for you this course is also packed with tons of exercises that help you master what you learned in the course in fact many of these exercises are questions that come up in technical programming interviews so if you're pursuing a job as a frontend or a backend developer or if you simply want to have a more indepth understanding of JavaScript I highly encourage you to enroll in the course for a limited time you can get this course with a discount using the link in the video description click the link to find out more about the course and enroll
