With timestamps:

00:05 - as I explained in the introduction
00:07 - lecture in this section backbone videos
00:09 - have two major responsibilities they
00:12 - render the content and respond to events
00:14 - raised by the Dom element or the model
00:17 - so far you have seen how we can render
00:19 - content using backbone views in this
00:22 - lecture I'm going to show you how to
00:23 - respond to advanced raised by the Dom
00:25 - elements here we've got a basic view
00:28 - called song view with the render method
00:30 - that simply writes the title of the song
00:33 - on the page let's say we would like to
00:35 - add a bottom next to each song to give
00:38 - the user the ability to listen to that
00:39 - song we're going to call this listen
00:42 - button so let's go ahead and make this
00:44 - change in our render method
00:53 - you
00:55 - now let's create a handler for the click
00:58 - event of this button
01:05 - you
01:21 - to handle events raised by the Dom
01:23 - elements we use the events property
01:26 - which is a hash of event names and their
01:28 - associated handlers this is a clean and
01:31 - declarative way to register handlers for
01:33 - events here I'm telling backbone that if
01:36 - something is click inside this view the
01:38 - unclick method should be called which
01:41 - currently logs a message to the console
01:43 - ok now let's try it out
01:53 - you
01:56 - so this was the simplest way to handle
01:59 - Dom events now let's take these to the
02:02 - next level let's add another button next
02:05 - to the listen button
02:13 - you
02:17 - I gave this part in a class because I
02:19 - want to distinguish the click event
02:21 - raised by the listen button from the
02:24 - bookmark button so now we can declare a
02:27 - click event specific for any element
02:30 - with the bookmark class
02:32 - note that we can use jQuery selectors to
02:35 - filter elements that trigger the event
02:37 - we could use an ID or attribute selector
02:40 - here as well basically any selector that
02:43 - you use when handling events with jQuery
02:46 - works here
02:53 - okay now let's see what happens
03:01 - you
03:05 - see what happened when I click the
03:08 - bookmark button both are click handlers
03:10 - were executed didn't we assign a
03:13 - separate handler to the bookmark button
03:15 - yes but this is completely expected
03:17 - behavior let me explain what happened
03:22 - here in our event hash both these click
03:25 - events apply to the bookmark button
03:27 - the first one is generic and applies to
03:30 - any elements inside the views Dom
03:32 - element the second one is specific to
03:35 - the bookmark button so what happened
03:38 - here is that both these event handlers
03:40 - were attached to our bookmark button
03:43 - this is one of the issues that you often
03:45 - encounter when building real-world
03:47 - applications there are two ways to
03:49 - resolve this one is we can give our
03:52 - generic click event a class to make it
03:55 - specific to the listen button just like
03:57 - how we did with the bookmark button this
04:00 - is actually a good practice because your
04:02 - code will end up being more consistent
04:04 - and maintainable but there are times
04:07 - that you would need a generic handler
04:09 - for some reason in situations like this
04:12 - we would like the event to be only
04:14 - handled by one specific handler and not
04:17 - propagated to other handlers so let me
04:20 - show you how we can fix this
04:29 - you
04:34 - the ER argument is a standard jQuery
04:36 - event which has a method called stop
04:39 - propagation which we can use to stop the
04:42 - event from being dispatched to any other
04:44 - handlers in the chain
04:47 - okay now let's try it again
04:54 - so everything is working now as expected
04:58 - so to handle dummy events we register
05:01 - handlers for them in the events hash of
05:03 - the view we can use jQuery selectors to
05:07 - filter the elements that trigger the
05:09 - given event in the next lecture we will
05:12 - see how we can listen to the changes in
05:14 - the model state this is useful when you
05:17 - would like to refresh the view when the
05:19 - model state changes thank you for
05:21 - watching

Cleaned transcript:

as I explained in the introduction lecture in this section backbone videos have two major responsibilities they render the content and respond to events raised by the Dom element or the model so far you have seen how we can render content using backbone views in this lecture I'm going to show you how to respond to advanced raised by the Dom elements here we've got a basic view called song view with the render method that simply writes the title of the song on the page let's say we would like to add a bottom next to each song to give the user the ability to listen to that song we're going to call this listen button so let's go ahead and make this change in our render method you now let's create a handler for the click event of this button you to handle events raised by the Dom elements we use the events property which is a hash of event names and their associated handlers this is a clean and declarative way to register handlers for events here I'm telling backbone that if something is click inside this view the unclick method should be called which currently logs a message to the console ok now let's try it out you so this was the simplest way to handle Dom events now let's take these to the next level let's add another button next to the listen button you I gave this part in a class because I want to distinguish the click event raised by the listen button from the bookmark button so now we can declare a click event specific for any element with the bookmark class note that we can use jQuery selectors to filter elements that trigger the event we could use an ID or attribute selector here as well basically any selector that you use when handling events with jQuery works here okay now let's see what happens you see what happened when I click the bookmark button both are click handlers were executed didn't we assign a separate handler to the bookmark button yes but this is completely expected behavior let me explain what happened here in our event hash both these click events apply to the bookmark button the first one is generic and applies to any elements inside the views Dom element the second one is specific to the bookmark button so what happened here is that both these event handlers were attached to our bookmark button this is one of the issues that you often encounter when building realworld applications there are two ways to resolve this one is we can give our generic click event a class to make it specific to the listen button just like how we did with the bookmark button this is actually a good practice because your code will end up being more consistent and maintainable but there are times that you would need a generic handler for some reason in situations like this we would like the event to be only handled by one specific handler and not propagated to other handlers so let me show you how we can fix this you the ER argument is a standard jQuery event which has a method called stop propagation which we can use to stop the event from being dispatched to any other handlers in the chain okay now let's try it again so everything is working now as expected so to handle dummy events we register handlers for them in the events hash of the view we can use jQuery selectors to filter the elements that trigger the given event in the next lecture we will see how we can listen to the changes in the model state this is useful when you would like to refresh the view when the model state changes thank you for watching
