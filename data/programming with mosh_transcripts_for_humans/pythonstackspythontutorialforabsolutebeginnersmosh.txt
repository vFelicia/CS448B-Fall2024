With timestamps:

00:02 - in programming we have a common data
00:05 - structure called stack which resembles a
00:07 - stack of items in the real world imagine
00:10 - you have a stack of books the last book
00:13 - that you put on top of the stack is the
00:15 - first book that you can remove you refer
00:18 - to this behavior as life--all which is
00:20 - short for last in first out so this is a
00:23 - stack data structure and it's very
00:26 - common in real world applications a good
00:29 - example of that is your browser
00:30 - whenever you navigate to a new website
00:32 - your browser keeps your browsing session
00:34 - in a stack so when you click the back
00:37 - button it takes you to the previous
00:38 - website let me show you how it works so
00:41 - we start with an empty stack now let's
00:44 - say we navigate to website number one
00:45 - now here for simplicity I'm using a
00:48 - number if you're building a browser
00:50 - instead of a number we'll use a string
00:52 - which is the address of the current
00:54 - website now let's say we navigate to a
00:57 - couple more websites and then click the
01:00 - back button at this point the browser
01:02 - removes the item on top of this stack
01:05 - and then it will redirect us for the
01:08 - previous website now let's say we press
01:10 - the back button a couple more times so
01:13 - we'll end up with an empty stack at this
01:16 - point the browser will disable the back
01:18 - button this is how a stack works last in
01:21 - first out now let me show you how to use
01:25 - a stack in Python basically we can use a
01:27 - list object as a stack so here I'm gonna
01:30 - define a variable like browsing session
01:33 - and set it to an empty list now let's
01:37 - say the user navigates the website
01:38 - number one so we call browsing session
01:41 - dot append method and add the address of
01:45 - the current web site now let's say the
01:48 - user navigates to website number two and
01:51 - then three let's have a look at what we
01:55 - have in our stack so we printed and as
01:58 - you see we have a list of three items
02:00 - now when the user presses the back
02:03 - button we should remove the last item in
02:05 - this list right how do we do it we use
02:08 - the pop method so we call browsing
02:11 - session dot pop the
02:13 - we'll remove the last item from the
02:15 - stack and return it so we can get it
02:18 - here but in this case we're not gonna
02:20 - use this value let me just print it on
02:22 - the terminal so you can see that so
02:26 - three is removed from the stack now if
02:29 - we print our stack one more time print
02:32 - browsing session you can see three is
02:35 - removed and we have only two items in
02:38 - our stack so we need to take the user to
02:40 - the previous website which is the item
02:43 - on top of the stack and we can get that
02:45 - using a negative one index very easy so
02:48 - back here browsing session of negative
02:52 - one this returns the last item so we
02:55 - print it and I would like to add just a
03:00 - label for clarity redirect let's look at
03:05 - the result so when the user presses the
03:08 - back button we redirect them to the
03:10 - previous website which is website number
03:12 - two now here we need to check if the
03:15 - stack is empty or not if it becomes
03:18 - empty we need to disable the back button
03:20 - so that is very easy earlier in the
03:23 - course I told you about the faulty
03:25 - values so number zero an empty string an
03:28 - empty list these are all false II values
03:31 - so if you apply the not operator to an
03:35 - empty list
03:35 - we'll get the boolean true so to see if
03:39 - our stack is empty we can simply read
03:41 - code like this if not browsing session
03:45 - then at this point we'll disable the
03:48 - back button so let me recap we use the
03:52 - append method to add an item on top of
03:54 - this tag we use pop to remove the item
03:57 - on top of the stack we use index
04:00 - negative one to get the item on top of
04:02 - the stack and of course before doing
04:05 - that we need to check to see if our
04:06 - stack is empty or not because if it's
04:08 - empty when we run this code we'll get an
04:11 - error so if not browsing session then
04:16 - we'll get the item on top of this stack
04:18 - these are the operations that you can
04:20 - perform on stacks
04:25 - hi guys thank you for watching this
04:27 - tutorial my name is Mohamad ani and I
04:30 - have tons of tutorials like this for you
04:32 - on my channel so be sure to subscribe
04:34 - and also please like and share this
04:36 - video if you want to learn Python
04:38 - properly from scratch with depth I have
04:40 - a comprehensive python tutorial for you
04:43 - the link is below this video so click
04:45 - the link to get started thank you and
04:47 - have a fantastic day

Cleaned transcript:

in programming we have a common data structure called stack which resembles a stack of items in the real world imagine you have a stack of books the last book that you put on top of the stack is the first book that you can remove you refer to this behavior as lifeall which is short for last in first out so this is a stack data structure and it's very common in real world applications a good example of that is your browser whenever you navigate to a new website your browser keeps your browsing session in a stack so when you click the back button it takes you to the previous website let me show you how it works so we start with an empty stack now let's say we navigate to website number one now here for simplicity I'm using a number if you're building a browser instead of a number we'll use a string which is the address of the current website now let's say we navigate to a couple more websites and then click the back button at this point the browser removes the item on top of this stack and then it will redirect us for the previous website now let's say we press the back button a couple more times so we'll end up with an empty stack at this point the browser will disable the back button this is how a stack works last in first out now let me show you how to use a stack in Python basically we can use a list object as a stack so here I'm gonna define a variable like browsing session and set it to an empty list now let's say the user navigates the website number one so we call browsing session dot append method and add the address of the current web site now let's say the user navigates to website number two and then three let's have a look at what we have in our stack so we printed and as you see we have a list of three items now when the user presses the back button we should remove the last item in this list right how do we do it we use the pop method so we call browsing session dot pop the we'll remove the last item from the stack and return it so we can get it here but in this case we're not gonna use this value let me just print it on the terminal so you can see that so three is removed from the stack now if we print our stack one more time print browsing session you can see three is removed and we have only two items in our stack so we need to take the user to the previous website which is the item on top of the stack and we can get that using a negative one index very easy so back here browsing session of negative one this returns the last item so we print it and I would like to add just a label for clarity redirect let's look at the result so when the user presses the back button we redirect them to the previous website which is website number two now here we need to check if the stack is empty or not if it becomes empty we need to disable the back button so that is very easy earlier in the course I told you about the faulty values so number zero an empty string an empty list these are all false II values so if you apply the not operator to an empty list we'll get the boolean true so to see if our stack is empty we can simply read code like this if not browsing session then at this point we'll disable the back button so let me recap we use the append method to add an item on top of this tag we use pop to remove the item on top of the stack we use index negative one to get the item on top of the stack and of course before doing that we need to check to see if our stack is empty or not because if it's empty when we run this code we'll get an error so if not browsing session then we'll get the item on top of this stack these are the operations that you can perform on stacks hi guys thank you for watching this tutorial my name is Mohamad ani and I have tons of tutorials like this for you on my channel so be sure to subscribe and also please like and share this video if you want to learn Python properly from scratch with depth I have a comprehensive python tutorial for you the link is below this video so click the link to get started thank you and have a fantastic day
