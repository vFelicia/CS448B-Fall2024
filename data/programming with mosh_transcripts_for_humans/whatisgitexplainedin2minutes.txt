With timestamps:

00:00 - [Music]
00:01 - so what is git and why is it so popular
00:04 - git is the most popular version control
00:06 - system in the world
00:07 - a version control system records the
00:09 - changes made to our code over time
00:11 - in a special database called repository
00:14 - we can look at our project history and
00:15 - see
00:16 - who has made what changes when and why
00:19 - and if we screw something up we can
00:21 - easily revert our project back to an
00:22 - earlier state
00:24 - without a version control system we'll
00:26 - have to constantly store
00:27 - copies of the entire project in various
00:29 - folders
00:30 - this is very slow and doesn't scale at
00:32 - all especially if multiple people have
00:34 - to work on the same project
00:36 - you would have to constantly toss around
00:38 - the latest code via email or some other
00:40 - mechanisms
00:41 - and then manually merge the changes so
00:44 - in a nutshell
00:44 - with a version control system we can
00:47 - track our project history and work
00:49 - together
00:49 - now version control systems fall into
00:52 - two categories
00:53 - centralized and distributed in a
00:56 - centralized system
00:57 - all team members connect to a central
00:59 - server to get the latest copy of the
01:01 - code
01:02 - and to share their changes with others
01:04 - subversion and microsoft team foundation
01:06 - server
01:06 - are examples of centralized version
01:08 - control systems
01:10 - the problem with the centralized
01:11 - architecture is the single point of
01:13 - failure
01:14 - if the server goes offline we cannot
01:16 - collaborate or save snapshots of our
01:18 - project
01:19 - so we have to wait until the server
01:20 - comes back online
01:22 - in distributed systems we don't have
01:24 - these problems every team member has a
01:26 - copy of the project with its history on
01:28 - their machine
01:29 - so we can save snapshots of our project
01:31 - locally on our machine
01:33 - if the central server is offline we can
01:35 - synchronize our work directly with
01:37 - others
01:37 - git and mercurial are examples of
01:40 - distributed version control systems
01:42 - out of all these git is the most popular
01:45 - version control system in the world
01:46 - because it's free open source super fast
01:49 - and scalable
01:50 - operations like branching and merging
01:52 - are slow and painful in
01:54 - other version control systems like
01:55 - subversion or tfs
01:57 - but they're very fast and git we'll talk
01:59 - about this later
02:00 - so git is almost everywhere more than 90
02:03 - of software projects in the world use
02:05 - get
02:05 - that's why almost every job description
02:08 - for a software developer mentions git
02:10 - so if you're looking for a job as a
02:12 - software developer git is one of the
02:14 - skills you must have on your resume
02:16 - you should know it inside out you should
02:17 - know how it works and how to use it to
02:19 - track your project history
02:21 - and collaborate with others effectively
02:23 - if you want to learn git
02:24 - i have a one hour tutorial here on my
02:26 - channel the link is below this video
02:28 - if you enjoyed this video please give it
02:30 - a like and subscribe to my channel for
02:32 - more videos like this
02:37 - [Music]
02:39 - you

Cleaned transcript:

so what is git and why is it so popular git is the most popular version control system in the world a version control system records the changes made to our code over time in a special database called repository we can look at our project history and see who has made what changes when and why and if we screw something up we can easily revert our project back to an earlier state without a version control system we'll have to constantly store copies of the entire project in various folders this is very slow and doesn't scale at all especially if multiple people have to work on the same project you would have to constantly toss around the latest code via email or some other mechanisms and then manually merge the changes so in a nutshell with a version control system we can track our project history and work together now version control systems fall into two categories centralized and distributed in a centralized system all team members connect to a central server to get the latest copy of the code and to share their changes with others subversion and microsoft team foundation server are examples of centralized version control systems the problem with the centralized architecture is the single point of failure if the server goes offline we cannot collaborate or save snapshots of our project so we have to wait until the server comes back online in distributed systems we don't have these problems every team member has a copy of the project with its history on their machine so we can save snapshots of our project locally on our machine if the central server is offline we can synchronize our work directly with others git and mercurial are examples of distributed version control systems out of all these git is the most popular version control system in the world because it's free open source super fast and scalable operations like branching and merging are slow and painful in other version control systems like subversion or tfs but they're very fast and git we'll talk about this later so git is almost everywhere more than 90 of software projects in the world use get that's why almost every job description for a software developer mentions git so if you're looking for a job as a software developer git is one of the skills you must have on your resume you should know it inside out you should know how it works and how to use it to track your project history and collaborate with others effectively if you want to learn git i have a one hour tutorial here on my channel the link is below this video if you enjoyed this video please give it a like and subscribe to my channel for more videos like this you
