With timestamps:

00:00 - [Music]
00:01 - welcome to the ultimate react course in
00:04 - this course you will learn everything
00:06 - you need to know about react from the
00:08 - basics to more advanced concepts so by
00:10 - the end of the course you'll be able to
00:12 - confidently build fast and scalable apps
00:14 - with react if you are looking for a
00:16 - comprehensive easy to follow
00:18 - well-organized and practical course that
00:20 - takes you from Zero to Hero this is the
00:22 - right react course for you you won't
00:24 - need any prior knowledge of react to get
00:26 - started everything you need to know is
00:28 - right here so you won't need to jump
00:29 - back and forth between random tutorials
00:32 - now unlike other courses we won't be
00:34 - building a dummy App instead we'll be
00:37 - building and deploying a beautiful
00:39 - production grade app for discovering
00:41 - video games this app has all the
00:43 - features and UI patterns you would
00:45 - expect from a modern application we can
00:48 - toggle within the dark and light modes
00:50 - we can search for games filter them by
00:52 - genre as well as platform now as we
00:55 - change filters the page title gets
00:57 - updated dynamically we can also sort
00:59 - games and here we see loading skeletons
01:02 - while games are being fetched from the
01:04 - back end and that's just the start in
01:06 - the next part which I'm currently
01:07 - working on we'll dive into advanced
01:09 - topics like routing State Management
01:11 - fetching data with react query
01:14 - authentication error handling
01:16 - performance optimization and much much
01:18 - more I've put my heart and soul into
01:20 - creating this course and I'm confident
01:22 - that it's going to be a game changer for
01:24 - your react skills I'm Marsha madani I'm
01:27 - a software engineer with over 20 years
01:29 - of experience and I've taught millions
01:31 - of people how to code and become
01:32 - professional software Engineers through
01:34 - my YouTube channel and online school
01:36 - codebitmarsh.com if you're new here make
01:39 - sure to subscribe as I upload new videos
01:41 - all the time so if you're ready to
01:44 - master react and build front-end apps
01:46 - with confidence let's jump in and get
01:48 - started
01:50 - [Music]
01:52 - thank you
01:56 - [Music]
02:01 - before we get started let's talk about
02:03 - what you will need to know to take this
02:05 - course first things first you don't need
02:07 - to know react to take this course
02:09 - however you should have a good
02:11 - understanding of HTML CSS and JavaScript
02:14 - if you're comfortable writing code in
02:16 - these languages you are in a great
02:18 - position to start learning react now
02:20 - throughout the course we'll be using
02:21 - typescript typescript is a superset of
02:24 - JavaScript that adds static typing to
02:26 - the language essentially it helps us
02:28 - catch errors earlier in the development
02:30 - process which can save us time and
02:32 - headaches down the road now don't worry
02:34 - if you have never coded in typescript
02:36 - before I'll hold your hands and teach
02:38 - you everything from scratch with that
02:40 - out of the way we can dive right into
02:42 - learning react
02:45 - before we begin coding let's take a few
02:48 - minutes and discuss what reacting is and
02:51 - how it helps us create better
02:52 - applications react is a JavaScript
02:55 - library for building Dynamic and
02:57 - interactive user interfaces it was
03:00 - created at Facebook in 2011 and is
03:02 - currently the most widely used
03:04 - JavaScript library for front-end
03:06 - development so if you're looking for a
03:08 - job as a front-end developer you should
03:10 - know how to confidently build
03:12 - applications with react but why was
03:14 - react created well as you probably know
03:17 - when a web page is loaded in a browser
03:19 - the browser takes the HTML code and
03:22 - creates a tree like structure called the
03:25 - document object model or the Dom for
03:27 - short this allows us to use JavaScript
03:30 - and change the page content in response
03:32 - to user actions for example we can use
03:35 - JavaScript to hide an element when a
03:37 - button is clicked this is called vanilla
03:40 - JavaScript meaning plain JavaScript code
03:42 - without any third part tools now as our
03:45 - applications grow working with a Dom can
03:47 - become quite complex and challenging to
03:50 - manage this is where react comes into
03:52 - play with react we no longer need to
03:54 - worry about querying and updating Dom
03:56 - elements instead with this grab a web
03:59 - page using small reusable components and
04:02 - react will take care of efficiently
04:04 - creating and updating Dom elements so
04:08 - components help us write reusable
04:09 - modular and better organized code now
04:13 - let's look at a real word example
04:14 - imagine you want to build a web page
04:16 - like this on this page we have a
04:19 - navigation bar on the top a side panel
04:21 - on the left and a grid of video games in
04:24 - the main area we can build each of these
04:26 - sections as separate components now in
04:29 - this grid each game is displayed in a
04:31 - cart which is an independent component
04:33 - with a like button that's another
04:35 - component itself we can build all these
04:38 - components individually and then combine
04:40 - them to build this page essentially a
04:42 - react application is a tree of
04:44 - components with the app being the root
04:46 - bringing everything together all right
04:49 - that's enough theory for now next we're
04:51 - going to set up our development
04:52 - environment and get a feel for what it's
04:54 - like to build applications with react
04:57 - foreign
05:02 - foreign
05:03 - to take this course you need to have
05:05 - node version 16 or higher now to check
05:08 - the version of node on your machine open
05:10 - up your command prompt or terminal
05:11 - window and run node Dash V so on this
05:15 - machine I'm running node version 19. you
05:17 - might be running a newer version that's
05:19 - totally fine it's not going to impact
05:21 - the materials in this course but you
05:23 - need to have node version 16 or higher
05:25 - if you don't head over to
05:28 - nodejs.org and download the latest
05:30 - version on this page now in this course
05:32 - just like my other courses I'll be using
05:35 - visual studio code or vs code as my
05:37 - editor you're welcome to use any editor
05:40 - that you prefer but if you want to use
05:42 - vs code I strongly suggest you to use
05:45 - the printer extension for formatting
05:47 - your code so here's the extensions panel
05:50 - over here search for prettier
05:53 - and install this extension once you do
05:57 - that on the top under the code menu go
06:01 - to preferences and settings now this
06:03 - layout might be different on Windows or
06:05 - Linux I'm not entirely sure but find the
06:08 - settings dialog and on this page search
06:11 - for format on Save
06:14 - if you take this box every time you save
06:16 - a file that file gets automatically
06:18 - reformatted with all that now we are
06:21 - ready to create our first react
06:22 - application
06:24 - [Music]
06:30 - there are two ways to create a react app
06:32 - we can use the official tool provided by
06:34 - the react team it's called create react
06:37 - app or CRA but we also have another tool
06:40 - called Veet that's getting increasingly
06:42 - popular these days because it's much
06:44 - faster and gives us smaller bundle sizes
06:48 - so here in the terminal window I'm
06:50 - currently on my desktop to create a new
06:52 - app using Veet all you have to do is run
06:55 - npm create Veet at latest or if you want
07:00 - to use the exact same version as me
07:02 - which is what I recommend you because I
07:04 - want to make sure you have the exact
07:05 - same experience then you need to specify
07:08 - the version that is 4.1.0
07:12 - okay now npm is asking if you want to
07:15 - install this package let's proceed
07:19 - next we need to specify our project name
07:21 - which is Veet project by default but we
07:24 - can change that to anything like react
07:26 - app
07:28 - next we need to select a framework so
07:30 - using meet we can create any kind of
07:32 - JavaScript project we can use vanilla
07:34 - JavaScript which is Javascript without
07:36 - any third-party tools we can also create
07:38 - a view project a react project and so on
07:41 - so using up and down arrows we can move
07:43 - down this list let's select react
07:46 - next we need to select a language so
07:49 - here we have JavaScript and typescript
07:51 - we're going to use typescript in this
07:52 - course
07:53 - good so now we have a new project next
07:56 - we need to go into this folder install
07:58 - all the third party dependencies and run
08:01 - our web server so let's set it into the
08:05 - react app folder and type npm install or
08:09 - npmi that is shorter and with this we
08:12 - can install all the third-party
08:13 - libraries
08:19 - all right now we need to open this
08:22 - project in vs code to do that we type
08:24 - code period if this doesn't work on your
08:27 - machine simply drag and drop that folder
08:29 - into vs code
08:31 - now here in vs code we can open an
08:34 - embedded terminal by pressing Ctrl and
08:36 - backtick if this doesn't work on your
08:38 - machine just go to the terminal window
08:40 - and open a new terminal you can also see
08:43 - the shortcut right here
08:45 - so this is our embedded terminal it's
08:48 - much easier to use this than switch back
08:50 - and forth between vs code and a
08:52 - different terminal window now to run our
08:54 - web server we type npm run Dev
08:59 - now this launched a web server at this
09:01 - address localhost Port 5173 this might
09:05 - be different on your machine so don't
09:07 - worry about that just open this address
09:08 - in your browser and this is our first
09:12 - react application next we're going to
09:14 - create our first react component
09:23 - so this is our project loaded in vs code
09:26 - now let me give you a brief overview of
09:28 - the key files and folders in this
09:30 - project here we have the node modules
09:33 - folder this is where all the third-party
09:36 - libraries like react and other tools are
09:38 - installed you'll never have to touch
09:40 - this
09:41 - next we have the public folder this is
09:44 - where the public assets of our website
09:46 - exist like images video files and so on
09:49 - next we have the source folder this is
09:51 - the source code of our application in
09:54 - this folder currently we have a
09:56 - component called the app component don't
09:59 - worry about any of the code here we're
10:00 - going to rewrite everything from scratch
10:02 - all I want you to note here is that
10:04 - currently in this application we have a
10:07 - single component called the app
10:08 - component
10:10 - now outside of the source folder we have
10:14 - index.html which is a very basic HTML
10:17 - template in this template we have a div
10:20 - with the idea of root that is the
10:22 - container for our application
10:24 - below that we have a script element
10:26 - referencing Source slash main.tsx this
10:30 - is the entry point to our application
10:31 - next we have
10:34 - package.json in this file you can find
10:37 - information about this project so we
10:39 - have the name of the project its version
10:41 - a bunch of script
10:44 - the list of dependencies So currently
10:46 - we're dependent on two libraries react
10:49 - and react on version 18. we also have a
10:52 - bunch of development dependencies these
10:54 - are only used for development they're
10:56 - not going to be deployed with our
10:57 - application in the future
10:59 - next we have a typescript configuration
11:01 - file here we have a bunch of settings
11:04 - for telling the typescript compiler how
11:06 - to compile our code to JavaScript now
11:08 - for the most part you never have to
11:10 - touch this file unless you're an
11:11 - advanced user and finally we also have a
11:14 - configuration file for Veet again for
11:17 - the most part you don't have to touch
11:18 - this file
11:21 - [Music]
11:26 - Now to create a react component we right
11:28 - click on the source folder and add a new
11:31 - file called
11:33 - message.tsx so the extension of
11:35 - typescript files should be either TS or
11:38 - TSX quite often we use Ts for plain
11:41 - typescript files and TSX for react
11:44 - components
11:45 - now there are two ways to create a react
11:47 - component we can use a JavaScript class
11:49 - or a function these days function based
11:52 - components have become more popular
11:54 - because they are more concise and easier
11:56 - to write so that's what we'll use in
11:58 - this course but if you're maintaining an
12:00 - older react project that is built with
12:03 - class components you can look at my
12:04 - previous react course to learn about
12:06 - them
12:07 - but function based components are the
12:09 - recommended approach for new projects so
12:11 - here we declare a function called
12:13 - message
12:15 - that pay attention to how I have named
12:17 - this function this convention is called
12:19 - Pascal casing with Pascal casing we
12:22 - should capitalize the first letter of
12:25 - every word in this case p and C it's
12:28 - really important to follow this
12:29 - convention because this is the
12:31 - convention that both react and other
12:33 - developers expect us to follow so in
12:35 - react application whenever we want to
12:37 - create a function component we should
12:39 - always follow Pascal casing now here we
12:43 - should describe what the UI is going to
12:45 - look like where we use this component so
12:47 - let's say wherever we use this component
12:49 - we want to render an H1 element with a
12:52 - message like hello work so here we
12:54 - return an H1 element with hello world
12:58 - now this syntax might make you a little
13:00 - bit confused you might be thinking that
13:02 - you're writing HTML code in the middle
13:03 - of JavaScript code but that is not
13:05 - correct this syntax you see here is
13:07 - called jsx which is short for JavaScript
13:11 - XML so this code under the hood is going
13:15 - to get compiled down to JavaScript
13:18 - if you head over to
13:20 - babblejs.io repo that is repl you can
13:24 - see how this code gets converted to
13:26 - JavaScript let me show you
13:28 - so on the left side we can write jsx
13:30 - code like H1 hello world
13:33 - and on the right side we can see the
13:36 - equivalent JavaScript code so this piece
13:38 - of code gets eventually converted to
13:41 - react.createelement the type of element
13:43 - is H1 and the message inside the element
13:46 - is hello world
13:48 - so this is a very basic component now to
13:52 - use this first we need to export it as a
13:54 - default object from this module
13:57 - now let's go to the app component and
13:59 - use this new component so back to our
14:02 - project
14:03 - here's the app component
14:04 - now we're going to delete everything in
14:07 - this file
14:08 - now let's create a new component called
14:10 - app
14:11 - now in this component let's say we want
14:13 - to have a div and inside the div we want
14:16 - to have our message component so first
14:19 - we need to import our message component
14:22 - from period slash message so period
14:25 - means the current folder
14:27 - now we can use this component just like
14:29 - regular HTML elements so we add the
14:33 - opening tag and close it it's really
14:36 - important to close it we should always
14:37 - close our react components or we'll get
14:39 - a compilation error now here we can also
14:42 - use the self-closing syntax that is more
14:44 - concise
14:45 - now just like the message component we
14:48 - should export
14:49 - the app
14:50 - component so it can be used somewhere
14:53 - else
14:54 - now here in the terminal you can see our
14:56 - web server is still running and here we
14:58 - have HMR which is short for hot module
15:01 - replacement so read under the hood
15:03 - monitors our files for changes whenever
15:06 - we make any changes it will
15:07 - automatically refresh our page in the
15:09 - browser
15:11 - so now you can see our message component
15:13 - rendered on the screen now this is a
15:16 - very simple example in a real world
15:17 - application a component can have
15:19 - Behavior so here we can have a button
15:22 - when the button gets clicked perhaps we
15:24 - can change the message we can do all
15:25 - sorts of things
15:27 - so with jsx we can easily describe the
15:30 - user interface of our application with
15:32 - HTML and JavaScript now the great thing
15:35 - about jsx is that it allows us to easily
15:37 - create Dynamic content for example here
15:40 - we can declare a constant Cod name I set
15:43 - it to my name Marsh now we can replace
15:46 - this word with my name dynamically so
15:49 - here we add braces and inside the braces
15:52 - we can write any JavaScript expression
15:55 - an expression is a piece of code that
15:58 - produces a value so here we can
16:00 - reference the name constant we can also
16:02 - call a function like get name basically
16:05 - any piece of code that returns a value
16:08 - so here we can add my name dynamically
16:12 - we can also write if statement so we can
16:15 - say if name is true theme return this
16:18 - markup otherwise return a different
16:21 - markup like Hello World
16:23 - now back to the browser you can see my
16:26 - name is rendered on the screen however
16:28 - if I change the name to an empty string
16:32 - we see Hello World so this is the beauty
16:34 - of jsx using this syntax we can easily
16:38 - describe the user interface of our
16:39 - applications
16:42 - [Music]
16:47 - So currently we have a component tree
16:49 - with the app being the root or top level
16:52 - component and the message being a child
16:54 - when our application starts react takes
16:57 - this component tree and builds a
16:59 - JavaScript data structure called the
17:01 - virtual Dom this virtual Dom is
17:03 - different from the actual Dom in the
17:05 - browser it's a lightweight in-memory
17:07 - representation of our component tree
17:09 - where each node represents a component
17:12 - and its properties when the state or the
17:15 - data of a component changes react
17:17 - updates the corresponding node in the
17:19 - virtual Dom to reflect the new state
17:22 - then it compares the current version of
17:24 - virtual Dom with the previous version to
17:26 - identify the nodes that should be
17:28 - updated it will then update those nodes
17:30 - in the actual Dom now technically
17:33 - updating the Dom is not done by react
17:35 - itself it's done by companion Library
17:37 - called react Dom so earlier we talked
17:40 - about package.json in this file we can
17:43 - see the dependencies of our application
17:45 - so currently our application is
17:47 - dependent on two libraries react and
17:50 - react on let me show you how these work
17:52 - together
17:53 - so in index.html I told you that we have
17:58 - a div with the idea of root and this is
18:00 - the container of our application
18:02 - below that we have a script element
18:03 - referencing
18:05 - main.tsx now if you look at this file
18:08 - you can see that here we're using react
18:10 - Dom to render this component tree inside
18:14 - an element with the ID of root
18:17 - so this is our component tree here is
18:19 - our app component that is wrapped by
18:21 - another component called strict mode
18:24 - this is one of the built-in components
18:26 - in react it doesn't have a visual
18:27 - representation its purpose is to
18:30 - identify potential problems so we're
18:32 - taking this component tree and rendering
18:35 - or displaying it inside an element with
18:38 - the idea of root and to do that we're
18:40 - using the react on library but we can
18:43 - also render this component Tree in a
18:45 - mobile app using a different Library
18:47 - called react native so react itself is
18:50 - not tied to a particular platform like
18:52 - web or mobile it's platform agnostic and
18:55 - we can use it to build apps for web
18:57 - mobile and desktop devices
19:01 - [Music]
19:06 - so you have learned that react is a
19:08 - JavaScript library for creating user
19:10 - interfaces in contrast to react we have
19:13 - other tools like angular and view which
19:15 - are Frameworks but what is the
19:17 - difference between a library and a
19:19 - framework a library is a tool that
19:21 - provides specific functionality while a
19:24 - framework provides a set of tools and
19:26 - guidelines for building applications so
19:29 - a library is like a tool while a
19:31 - framework is like a tool set now react
19:34 - is just a library or a tool for building
19:36 - user interfaces so the only thing that
19:39 - it does and is good at is creating
19:41 - Dynamic and interactive user interfaces
19:43 - but we hardly use only react to build
19:46 - modern applications we often need
19:48 - additional tools for concerns such as
19:50 - routing which means allowing the user to
19:53 - go from one page to another making HTTP
19:55 - calls managing the application State
19:57 - internationalization form validation
20:00 - animations and so now the great thing
20:02 - about react is that it doesn't have an
20:04 - opinion about the additional tools we
20:06 - should use for these concerns so we can
20:08 - pick the right tools for the job in this
20:10 - part of the course our focus is entirely
20:13 - on react and no third-party libraries
20:15 - once you master react in the next part
20:17 - we'll explore some additional useful
20:19 - libraries in the react ecosystem
20:23 - hey guys Marsh here before we dive back
20:26 - into the tutorial I just wanted to say
20:28 - that this tutorial is actually the first
20:30 - hour of my complete react course the
20:33 - full course includes eight hours of
20:35 - content jam-packed with the latest
20:37 - techniques and best practices it's got
20:39 - everything you need to become a react
20:41 - Pro including exercises summary notes
20:44 - cheat sheets and even the project I
20:46 - showed you at the beginning of this
20:48 - tutorial and the best part is it comes
20:50 - with a 30 day money back guarantee so if
20:53 - you're loving this tutorial and want to
20:55 - take your react skills to the next level
20:56 - I highly recommend checking out the
20:59 - complete course using the link below
21:00 - this video thanks for watching and now
21:03 - let's get back to the tutorial
21:06 - so you got a taste of building
21:08 - applications with react in this section
21:10 - we'll be covering the fundamental
21:12 - concepts in react applications this is
21:15 - the most important section in this
21:17 - course you don't want to miss the
21:18 - materials I've covered here help you
21:20 - build a strong foundation in react we'll
21:23 - talk about building components rendering
21:25 - markup with jsx managing State passing
21:28 - input to components where props and
21:31 - debugging react applications so let's
21:33 - jump in and get started
21:37 - [Music]
21:45 - all right in this lesson we're going to
21:47 - create a basic list group component
21:49 - first we're going to install bootstrap
21:51 - to give our application a modern look
21:54 - and feel now in case you are not
21:55 - familiar with bootstrap it's a very
21:58 - popular CSS library that gives us a
22:00 - bunch of CSS classes for styling our
22:02 - applications
22:04 - so here we open up our terminal window
22:06 - you can see our web server is running so
22:09 - we open a new terminal window and run
22:12 - npm install bootstrap the version that
22:16 - I'm using in this video is
22:18 - 5.2.3 let's go ahead
22:21 - good now we need to import it in one of
22:25 - our CSS files so here in the source
22:27 - folder we have a couple of CSS files one
22:30 - is app.css
22:32 - this file contains all the styles for
22:34 - our app component we don't need any of
22:36 - this stuff anymore
22:38 - delete
22:39 - we also have
22:41 - index.css where we have Global styles
22:43 - for our application again we don't need
22:46 - any of these Styles here because all of
22:48 - them were generated by wheat so we can
22:51 - delete this file entirely
22:53 - now let's go to main.tsx
22:56 - you can see that our index.css file was
22:59 - imported here we're going to replace
23:01 - this line with import bootstrap slash
23:05 - dist slash CSS slash bootstrap.css
23:11 - okay now to make sure that bootstrap is
23:14 - imported properly we go back to the
23:16 - browser so previously hello world was in
23:19 - the middle of the page and we had a
23:21 - different font now it's up here and it
23:23 - has a different font beautiful so now
23:25 - let's create a list group component
23:28 - so back to our project here in the
23:30 - source folder we add a new folder called
23:33 - components this is not necessary but by
23:36 - convention we put all of our components
23:38 - in a folder called components now here
23:41 - we add a new file
23:43 - called list group dot TSX again pay
23:47 - attention to how I have named this file
23:49 - here we're following the Pascal
23:51 - convention so we're capitalizing the
23:53 - first letter of each word
23:55 - now in this file with declare a function
23:58 - called list group
24:00 - for now let's just return an H1 element
24:03 - list group
24:05 - and Export this from this module
24:09 - next we need to import this in our app
24:12 - component so if you're on Mac press
24:14 - command and P if you are on Windows
24:16 - press Ctrl NP here we can search for
24:18 - files like app.tsx okay now we don't
24:23 - need the message component anymore so
24:24 - let's remove the slide instead we're
24:27 - going to import our list group com
24:29 - component okay and we're going to use
24:32 - that right here
24:34 - okay let's make sure everything is
24:36 - working up to this point so here in the
24:39 - browser we have our list group component
24:41 - beautiful now finally we need to display
24:44 - a list of items here and for that we're
24:46 - going to borrow some code from bootstrap
24:49 - so head over to
24:51 - getboosttrap.com go to the docs
24:54 - and on the left side
24:56 - under component section
24:59 - you should find list group so
25:03 - this is a list group component in
25:05 - bootstrap
25:06 - to create a list like this we need to
25:09 - use
25:09 - this markup so we need a UL with this
25:13 - class and a bunch of list items with
25:15 - these classes so we copy this we go back
25:19 - to our list group component and return
25:22 - this markup now here we get a bunch of
25:25 - Errors because class is a reserved
25:27 - keyword in JavaScript or typescript so
25:30 - here we need to rename all these classes
25:31 - to class name now let me show you
25:34 - another shortcut let's rewrite this back
25:38 - we select the class keyword now if
25:40 - you're on Mac press command and D if
25:42 - you're on Windows press Ctrl and d and
25:44 - with this we select the next occurrence
25:47 - of the selected keyword so now we have
25:49 - multiple cursors we can press command
25:52 - and d one more time and again and again
25:54 - and again now all of these are selected
25:57 - so we delete them and type class name
26:00 - then we press escape a couple of times
26:03 - to disable multi-cursor editing okay now
26:06 - finally I save the changes but my code
26:09 - is not reformatted so let's investigate
26:12 - why this is happening
26:13 - on the top Under The View menu
26:16 - we go to the command palette note the
26:18 - shortcut on Mac it's shift command and P
26:22 - and here we search for format document
26:25 - okay here we have an error saying there
26:27 - are multiple formatters for typescript
26:29 - jsx files so let's click on configure
26:34 - and here we're going to use prettier as
26:37 - our default code formatter good now this
26:40 - file is formatted Beautiful Just note
26:42 - that prelayer automatically wrapped our
26:45 - jsx markup in parenthesis this is
26:47 - necessary to break the markup into
26:49 - multiple lines so if you're not using vs
26:52 - code with prettier be sure to add the
26:54 - left bracket in front of the return
26:55 - keyword so you can spread your jsx into
26:58 - multiple lines so now back to the
27:00 - browser here's our list group component
27:02 - but this is pretty boring this doesn't
27:05 - have any functionality and it doesn't
27:07 - allow us to render or display these
27:09 - items dynamically so we're going to
27:11 - solve these issues one by one over the
27:13 - next few lessons
27:15 - [Music]
27:21 - now what if we want to add a heading
27:23 - here well if we add another element here
27:26 - like an H1
27:28 - we get a bunch of Errors because in
27:30 - react a component cannot return more
27:32 - than one element so earlier I told you
27:34 - that this H1 expression that we have
27:37 - here eventually gets compiled to
27:39 - JavaScript so this line gets translated
27:42 - to something like
27:44 - react.createelement with H1 being the
27:46 - type of the element
27:48 - the same thing will happen for the
27:50 - second element so in this function we
27:52 - are returning multiple elements and this
27:54 - is not allowed in react now to solve
27:56 - this problem we have a couple of
27:58 - different ways one simple way is to wrap
28:01 - this entire expression inside a div or
28:04 - another element
28:05 - so let me show you another shortcut we
28:07 - select all this code
28:09 - then we bring up the command palette so
28:12 - we go to the view menu and bring up the
28:14 - command palette or better we use the
28:16 - shortcut
28:17 - and here we search for wrap with
28:20 - abbreviation now we press enter
28:22 - and here we specify the type of element
28:25 - that we want to use to wrap this entire
28:27 - code so div
28:29 - enter done okay so that's one way but
28:33 - we're adding one extra element in the
28:36 - Dom purely for making react happy this
28:38 - is unnecessary a better way is to use a
28:40 - fragment so on the top
28:43 - we import fragment
28:46 - from react make sure to put it in braces
28:49 - now we replace the div with a fragment
28:52 - so just like before I've selected the
28:55 - div element now we can press command and
28:58 - D to select the other div and now with
29:01 - multiple cursors we can edit both of
29:03 - them
29:05 - in one go okay
29:06 - now with this change when this component
29:09 - is rendered on the screen we're not
29:11 - going to have an additional element like
29:12 - a div in the Dom okay now there is even
29:15 - a better way to achieve the same result
29:17 - we have a shorter syntax we don't have
29:19 - to import the fragment component from
29:21 - react so let's delete this line
29:24 - and we select the fragment tags both of
29:28 - them and remove them
29:30 - so if you add empty angle brackets we're
29:33 - telling react to use a fragment to wrap
29:35 - all these children
29:37 - now back to the browser so here's our
29:39 - heading and our items beautiful
29:43 - [Music]
29:48 - now this list is kind of useless because
29:51 - we have hard-coded these items in our
29:53 - markup what if you want to render a list
29:55 - of items dynamically well let's declare
29:58 - a constant
29:59 - called items and set it to an array of
30:02 - strings here we can use the name of
30:04 - series like New York
30:07 - San Francisco Tokyo
30:10 - London
30:12 - and Paris
30:14 - now in jsx we don't have a for Loop so
30:17 - we cannot write code like four item in
30:20 - items render whatever it doesn't work
30:23 - that way so we have to use a different
30:25 - technique in JavaScript as you probably
30:28 - know arrays have a method called map for
30:31 - mapping or converting each item to an
30:34 - item of a different type
30:35 - so if you type items dot map
30:39 - here we can pass an arrow function we
30:42 - can say take each item and convert it to
30:44 - an item of a different type
30:46 - so here we want to convert each item to
30:49 - an Li element so here we type Li and
30:53 - inside the tags we want to render or
30:56 - display the item itself earlier I told
30:58 - you that in jsx we use curly braces to
31:01 - render data dynamically so here we
31:04 - render the item itself okay now
31:07 - we're going to delete all these list
31:10 - items
31:11 - and instead we're going to bring down
31:13 - this piece of code
31:15 - however we get a compilation error
31:17 - because this expression is not allowed
31:20 - in the middle of a jsx markup in jsx we
31:23 - can only use HTML elements or other
31:27 - react components so to render data
31:30 - dynamically we need to wrap this
31:32 - expression in braces
31:34 - okay
31:36 - now save the changes
31:38 - our code got reformatted so Predator
31:41 - plugin broke down our code into multiple
31:43 - lines and added parentheses to wrap them
31:46 - now back to the browser here's our list
31:48 - of cities beautiful while reviewing this
31:51 - video I just realized that I made a
31:53 - mistake earlier and forgot to apply a
31:55 - CSS class to our list items that's why
31:58 - we have lost styling here but don't
32:00 - worry I'll fix that in a later video
32:02 - however if we right click anywhere on
32:05 - this page and go to inspect
32:08 - this is Chrome developer tools you
32:09 - should probably be familiar with it here
32:12 - on the console tab we have a warning
32:14 - saying eat child in a list should have a
32:16 - unique key prop what does this mean well
32:19 - back to our code this is where we are
32:22 - mapping each item to a list item
32:25 - here the warning is saying that each
32:27 - list item should have a key prop or key
32:29 - property that uniquely identifies that
32:32 - item react needs this to keep track of
32:34 - our items so later when we add or remove
32:37 - items dynamically react knows what part
32:40 - of the page should be updated so when
32:42 - rendering a list of items using the map
32:45 - method we should give each item a unique
32:47 - key now in this case each item has a
32:50 - unique string so we can use the item
32:53 - itself as a unique key but in a real
32:55 - world application where we retrieve
32:57 - items from an API quite often each item
33:00 - has a property like ID
33:02 - we don't have that in this case so we
33:04 - don't have to worry about it now back to
33:06 - the browser let's refresh the warning is
33:08 - gone and here's our list beautiful
33:11 - [Music]
33:17 - sometimes we want to render different
33:19 - content based on certain conditions for
33:22 - example here we can add an if statement
33:25 - and say if items the length equals zero
33:28 - perhaps we want to show the user a
33:30 - different message so here we can return
33:32 - a completely different markup for
33:35 - example we can add a paragraph and here
33:37 - we say no item found
33:39 - now to make sure this works I'm going to
33:41 - change the constant to a variable so we
33:45 - can reassign this on the next line
33:48 - okay now back in the browser so here we
33:51 - have no item found beautiful but our
33:53 - heading is gone
33:55 - so we can come back here and add our
33:57 - heading as well
33:59 - list and now we need to wrap this entire
34:02 - expression inside a fragment so let's
34:05 - add a fragment
34:08 - okay now if I save the changes Predator
34:11 - reformats our code and here once again
34:13 - we have parenthesis for spreading this
34:16 - code over multiple lines
34:18 - with this our heading is back but I
34:21 - don't like this implementation because
34:23 - we have a bit of duplication and
34:25 - generally speaking duplication in code
34:27 - is not considered a good practice so let
34:29 - me show you a different way to achieve
34:31 - the same result
34:32 - we're going to get rid of the if
34:34 - statement
34:35 - instead we're going to render things
34:37 - conditionally inside our jsx expression
34:41 - however inside this jsx expression we
34:45 - cannot write an if statement because as
34:47 - I told you earlier here we can only use
34:49 - HTML elements or other react components
34:53 - The Only Exception is
34:55 - braces with braces we can render
34:58 - anything dynamically so here we can use
35:01 - the ternary operator in JavaScript so we
35:03 - start with our condition items the
35:06 - length equals zero then we type a
35:09 - question mark if this condition is true
35:11 - we're going to return a paragraph with
35:14 - this message
35:15 - otherwise
35:16 - we're going to return null meaning
35:19 - nothing will be rendered with this
35:22 - we have the same result as before and
35:25 - our implementation is a little bit more
35:26 - concise
35:27 - now sometimes this logic can get a
35:30 - little bit too complicated and it can
35:32 - pollute our jsx markup in those cases we
35:35 - can always extract this logic and store
35:37 - it in a separate variable or constant
35:40 - for example here we can declare a
35:42 - constant called message
35:44 - Now we move this expression
35:47 - right here
35:49 - and then we can simply render our
35:52 - message constant in our jsx markup so
35:55 - now our j6 markup is a little bit
35:57 - cleaner now we can also move this logic
35:59 - inside a function for example we can
36:02 - declare a function called get message
36:05 - and here I'm using the arrow function
36:07 - syntax
36:08 - now we can move this logic right here
36:13 - and now we don't need this constant
36:15 - anymore
36:15 - so here we have a function and we can
36:18 - call that function to get the right
36:20 - message now the benefit of using F
36:22 - function in this case is that our
36:24 - functions can have parameters so perhaps
36:27 - we can get different messages depending
36:29 - on different conditions so here we can
36:31 - pass different arguments like one or
36:33 - whatever and get a different message if
36:36 - you don't have that scenario it's better
36:38 - to use a constant in this case
36:40 - now let me revert this code back to the
36:43 - previous state
36:45 - I'm going to move this expression
36:47 - right here
36:49 - so I can show you a more concise way to
36:52 - write the same code
36:53 - so let's remove this function
36:56 - okay look this piece of code is fine and
36:59 - it works but the part that bugs me a
37:01 - little bit is the second part returning
37:04 - null here let me show you a better way
37:05 - to write this code we start with our
37:08 - condition items that length we call zero
37:12 - now instead of using the ternary
37:14 - operator instead of using a question
37:15 - mark we do a logical and between this
37:19 - condition and the value that we want to
37:21 - return if this condition is true that is
37:24 - the paragraph element
37:26 - okay
37:28 - with this implementation we don't have
37:30 - the null keyword and our code is a
37:32 - little bit more concise but how does
37:34 - this work well let's go back to the
37:36 - browser and open up Chrome developer
37:39 - tools
37:41 - here in the console tab this is going to
37:43 - be our JavaScript playground if you have
37:45 - a Boolean value like true
37:47 - and perform a logical and with another
37:50 - value like one
37:52 - see what happened the result of this
37:55 - entire expression is equal to the second
37:57 - value what if we type true and mosh
38:01 - the result of the expression is mosh now
38:04 - what if you have false and mush
38:07 - the result is false so what does this
38:10 - mean well that means if our condition is
38:13 - true the result of this entire
38:15 - expression will be our paragraph element
38:17 - but if the condition is false the result
38:20 - of the entire expression will be false
38:22 - and nothing will be rendered on the
38:24 - screen so this is a very common
38:26 - technique react developers use to render
38:28 - content dynamically okay with this we
38:31 - can remove the slide and this is our
38:33 - final implementation
38:36 - foreign
38:37 - [Music]
38:41 - now let's see how we can handle click
38:44 - events in a component first I'm going to
38:46 - remove this line so we bring back our
38:48 - items good now I just realized that
38:51 - earlier I made a mistake and forgot to
38:53 - apply one of the Boost trap classes to
38:56 - these items so back to our code this is
38:59 - where we're rendering a list item we
39:01 - should give this a class of
39:04 - list Dash group Dash item
39:07 - okay that's better now we want to be
39:10 - able to click on each item and see it on
39:13 - the console in react each element has a
39:16 - property or a prop called on click
39:20 - so here is that on click to braces now
39:24 - inside the braces we can write an arrow
39:27 - function so a function with no
39:28 - parameters
39:29 - and here we can just say console.log
39:32 - clicked as simple as that now I'm going
39:35 - to save the changes so the code is
39:38 - reformatted so now each property or each
39:41 - prop is on a separate line okay now back
39:45 - to the browser we had an internal server
39:47 - error from this web server don't worry
39:49 - about it just refresh error is gone now
39:52 - if we click on each item we see this
39:55 - message beautiful but what if you want
39:57 - to see the actual item that was clicked
39:58 - well
40:00 - look this is where we are mapping each
40:02 - item to a list item so when creating
40:05 - this list item we have access to each
40:08 - item because we are using that item as
40:10 - the key of each list item right so
40:13 - instead of logging clicked we can simply
40:16 - log item
40:19 - now if we click on each item we see it
40:21 - on the console beautiful and by the way
40:24 - when mapping items we can optionally add
40:28 - a second parameter as an index and with
40:31 - this we can see the index of the item
40:34 - that was clicked so let me show you I'm
40:37 - going to clear the console now if we
40:40 - click on each item we can also see its
40:43 - index in the array lovely
40:45 - now this Arrow function can optionally
40:47 - have a parameter that represents the
40:50 - browser event we can call that e or
40:52 - event whatever we prefer
40:55 - now let's log this on the console and
40:57 - see what we get
41:00 - so clear click look the type of this
41:03 - object is synthetic base event I know
41:07 - it's a fancy term this is one of the
41:08 - built-in classes in react because
41:10 - different browsers have different
41:12 - implementations of event objects so to
41:15 - make this cross browser react team have
41:17 - created a class called synthetic bass
41:19 - event that is a wrapper around the
41:22 - native browser event object now if you
41:24 - look at the properties of this object
41:26 - you see properties that you're probably
41:28 - familiar with for example we have client
41:31 - X and client Y which represent the
41:33 - position where we clicked
41:36 - we also have type which represents the
41:39 - type of event we have Target which is
41:41 - the element where I clicked that was a
41:44 - list item with this class
41:46 - now our event handling logic here is
41:48 - very simple it's just a one-liner so
41:50 - writing a function here is totally fine
41:52 - but if our logic gets more complex we
41:55 - don't want to write that logic here in
41:56 - the middle of a jsx markup instead we
41:59 - should move that logic into a separate
42:01 - function so
42:03 - in this component we declare a function
42:06 - by convention we start with the word
42:08 - handle and then we specify the type of
42:11 - event in this case click
42:13 - now we set this to
42:15 - let's grab this piece of code
42:20 - and paste it here
42:22 - now we have a warning from the
42:24 - typescript compiler saying parameter
42:26 - event implicitly has an any type so the
42:30 - reason I know this is a typescript issue
42:31 - is that here we have Ts that is short
42:34 - for typescript but why are we getting
42:36 - this warning well the reason we're
42:38 - getting this error is that the
42:39 - typescript compiler doesn't know the
42:41 - type of this parameter is event a number
42:43 - is it a string is it an object what is
42:46 - it so if we use the dot operator we
42:49 - cannot see any properties of this event
42:51 - object this is where we need to specify
42:53 - the type of our parameter so we get Auto
42:55 - completion and type safety so let's
42:58 - hover our Mouse over this event
43:00 - parameter look the type of this
43:02 - parameter is react.mouse event so when
43:06 - we pass an inline function here the
43:08 - typescript compiler knows the type of
43:10 - our parameter that is why we didn't get
43:12 - a warning earlier but in this case we're
43:15 - declaring a brand new function the
43:16 - typescript compiler doesn't know where
43:18 - we're going to use this so it doesn't
43:20 - know the type of this parameter so we
43:22 - should go on the top add import
43:25 - mouse event from react
43:28 - and then after the parameter we type a
43:31 - colon followed by its type this is
43:34 - called type annotation in typescript so
43:37 - we type annotation we can specify the
43:39 - type of variables parameters and so on
43:41 - now with this annotation
43:44 - if we use the dot operator we can see
43:46 - all the properties of this mouse event
43:48 - object this is one of the beauties of
43:50 - typescript we get Auto completion we get
43:53 - type safety and it's easier to refactor
43:56 - or restructure our code you'll see more
43:58 - examples as we go through the quest
44:00 - so let's finish this example
44:04 - so now we have a function here this
44:06 - function is called an event handler
44:09 - because its job is handling an event in
44:12 - this case The Click event
44:14 - now over here
44:16 - we're going to remove this inline
44:18 - function and simply reference our handle
44:21 - click function note that I'm not calling
44:24 - this function we don't want to call it
44:25 - we just want to pass a reference so
44:27 - you're telling react that whenever the
44:29 - user clicks on this event this function
44:31 - should be caught so calling this
44:33 - function will be done later at runtime
44:36 - now let's make sure everything is
44:38 - working so let's click on one of these
44:40 - items beautiful
44:42 - [Music]
44:48 - all right now the next step when we
44:50 - click on an item we want to highlight it
44:52 - to do that we have a CSS class in
44:54 - bootstrap called active so back to our
44:58 - code this is where we are rendering a
45:00 - list item I'm going to give this a
45:02 - second class called active now
45:05 - look all of them are highlighted or
45:07 - activated this is not what we want we
45:09 - want to highlight one item at a time to
45:12 - do that we need a variable to keep track
45:14 - of the index of the selected item so
45:17 - back to our component
45:20 - let's declare a variable
45:22 - called selected index we can initialize
45:26 - this to negative one that means no item
45:28 - is selected if we set this to zero that
45:31 - means the first item should be selected
45:34 - now down here
45:36 - we can render this active class
45:38 - dynamically so we're going to use the
45:40 - same technique you learned in the
45:42 - conditional rendering lesson so I'm
45:45 - going to remove
45:46 - the quotations here we add braces so we
45:49 - render content dynamically here we can
45:51 - check the selected index if it equals
45:54 - the index of the current item
45:57 - that means that items should be active
45:59 - so we're going to give it two classes
46:01 - list group item and active
46:05 - otherwise we should only give it the
46:08 - list group item class
46:10 - this is a very simple way to add classes
46:13 - dynamically there are other more
46:15 - Advanced Techniques let's not worry
46:16 - about them at this stage let's just see
46:18 - if this works or not so back to the
46:20 - browser now the first item is selected
46:23 - beautiful now when we click on an item
46:25 - we should change the selected index so
46:29 - this is very good handling the click
46:31 - event now in this case we need a simple
46:34 - error function to update the selected
46:35 - index so I'm going to get rid of this
46:37 - handle click function so we deleted from
46:40 - here
46:41 - as well as here
46:44 - we should also delete
46:46 - the mouse event import on the top okay
46:48 - so always pay attention to cleaning up
46:51 - your code so here we write a simple
46:54 - arrow function and here we set selected
46:57 - index to the index of the current item
46:59 - okay now back to the browser let's click
47:02 - on item
47:04 - nothing is happening why is that well
47:07 - this variable we have declared here is
47:09 - local to this function component so
47:11 - react is not aware of it it's like a
47:13 - little secret inside this component to
47:16 - solve this problem we should tell react
47:18 - that this component is going to have
47:20 - data or state that might change over
47:23 - time and to do that we have to use one
47:25 - of the built-in functions in react
47:27 - called use state so when we type this
47:30 - here and press enter it gets imported on
47:33 - the top okay now this function is called
47:36 - a hook
47:38 - a hook is a function that allows us to
47:41 - tap into built-in features in react so
47:43 - this is called the statehook we have
47:45 - other hooks that you will learn about as
47:47 - we go through this course using the
47:49 - state hook we can tell react that this
47:51 - component can have data or state that
47:53 - will change over time so instead of
47:56 - declaring a variable this way we're
47:58 - going to call this function
48:00 - that we're going to initialize our
48:02 - variable we can give it the initial
48:04 - value of negative one
48:05 - now this returns an array
48:08 - in this array we're going to have two
48:10 - elements the first element is going to
48:13 - be a variable like our selected index
48:16 - variable
48:17 - and the second element is going to be an
48:20 - updater function using that updater
48:23 - function we can update this variable and
48:26 - at that point react will be notified so
48:28 - it knows that the state of our component
48:30 - is changed and then it will re-render
48:33 - our component which causes the Dom to be
48:35 - updated under the hood so as I told you
48:38 - earlier in the course with react we
48:40 - almost never have to touch the Dom
48:42 - directly we think in terms of components
48:44 - that have state when the state of a
48:46 - component changes react will update the
48:49 - Dom to match the new component State
48:51 - okay now let's see how we can use this
48:53 - so instead of working with two
48:55 - individual elements here it's easier to
48:58 - destructure this array into two elements
49:01 - so the first element is going to be
49:03 - select an index and the second element
49:06 - is going to be a function which we call
49:07 - set selected Index this is a convention
49:11 - we follow in react applications so here
49:14 - we have a state variable called selected
49:16 - index and here we have a function called
49:19 - set selected index now as another
49:21 - example we can use the state hook to
49:24 - declare another variable called name so
49:27 - we call view state
49:28 - we can initialize the name to an empty
49:30 - string this returns an array which we
49:33 - can destructure into two elements name
49:36 - and set name
49:38 - that's the idea now in this case we
49:40 - don't need a name variable so let's
49:42 - delete this line
49:43 - and the comment and the slide
49:47 - so here we have a state variable called
49:49 - selected index now down here
49:52 - to update this variable we're going to
49:54 - call set selected index and give it
49:58 - the new index
50:00 - with this when we click on an item it
50:03 - gets selected beautiful
50:05 - so this is how we tell react that our
50:07 - component can have state that will
50:09 - change over time now one thing you need
50:11 - to know about component state is that
50:13 - each component is going to have its own
50:15 - state so if we go back to our app
50:18 - component and add another instance of
50:21 - our list group here
50:22 - each list group is going to have its own
50:25 - state so
50:26 - in our first list group Paris is
50:28 - selected but in our second list group
50:30 - nothing is selected because this
50:33 - component has its own state so there
50:35 - will be independent of each other okay
50:38 - now we don't need to list groups here so
50:41 - I'm going to remove the second one
50:44 - [Music]
50:49 - so we're showing a list of cities here
50:52 - but what if we want to show a list of
50:54 - names or a list of colors we don't want
50:56 - to recreate a separate component for
50:58 - each type of list right so how can we
51:01 - make this component reusable this is
51:03 - where we use props or properties props
51:06 - are the inputs to our components so back
51:09 - to our code
51:10 - instead of defining these items here we
51:13 - should be able to pass them as an input
51:15 - to this component just like how we can
51:17 - call a function and give it an argument
51:19 - now the same principle applies to this
51:22 - heading instead of hard coding this
51:24 - label here it would be nicer if you
51:26 - could pass different labels like cities
51:28 - names colors and so on so how can we do
51:31 - that well first we need to decide the
51:34 - shape of the input to this component so
51:36 - we should be able to pass an object with
51:39 - two properties items which is going to
51:42 - be an array and heading which is going
51:45 - to be a string to do that we use one of
51:48 - the typescript features called an
51:50 - interface using an interface we can
51:52 - Define the shape or the interface of an
51:55 - object so you start with the interface
51:57 - keyword give this a name by conventional
52:00 - use props but some people prefer to
52:02 - prefix it with the name of the component
52:05 - so list group props either way it works
52:09 - I prefer a shorter name
52:11 - that he Embraces would define various
52:14 - properties and their types so we want to
52:16 - have items which is going to be an array
52:19 - of strings so string array and heading
52:23 - which is going to be a string
52:26 - so once again we're using type
52:27 - annotation to specify the type of
52:30 - various properties okay
52:31 - now we don't need this comment anymore
52:34 - next we give this function a parameter
52:36 - called props of type props
52:40 - now if we go back to our app component
52:42 - we have two compilation errors saying
52:45 - type is missing the following properties
52:48 - from type props items and heading so the
52:52 - typescript compiler is saying that this
52:54 - component expects two properties which
52:56 - are items and heading we have not
52:58 - specified them this is yet another
53:00 - benefit of using typescript so the
53:03 - typescript compiler is reminding us that
53:04 - we have forgotten to pass these props so
53:07 - it's helping us to catch a bunch of
53:09 - potential errors at compile time before
53:11 - running our application
53:13 - so back to our list group
53:15 - I'm going to grab the list of items and
53:17 - move it to
53:19 - the app component
53:21 - now we can pass this just like how we
53:24 - said the attributes of HTML element so
53:27 - we set items to we add braces so we can
53:29 - reference this variable
53:31 - now similarly we should also set the
53:33 - heading to
53:35 - series
53:36 - now in this case I'm using quotation
53:38 - marks but we could also wrap this in
53:40 - braces but this is unnecessary because
53:42 - we're passing a static value
53:45 - so let's rewrite it that's better now
53:48 - the compilation error is gone so back to
53:50 - our list group component
53:52 - now there are a couple of issues here we
53:55 - don't have the items variable anymore so
53:57 - we have to prefix it with props dot okay
54:01 - but we have to do the same thing here
54:03 - this looks a little bit repetitive and
54:06 - ugly a better solution is to destructure
54:09 - this parameter right here so we remove
54:11 - the name and add braces and pick the two
54:14 - properties items and heading now we have
54:18 - access to these properties anywhere in
54:20 - this function so we can remove props Dot
54:24 - and our code is cleaner
54:27 - now the final part is to replace the
54:30 - list with
54:31 - The Heading dynamically okay
54:34 - back to the browser our app still
54:37 - working so using props we can pass data
54:40 - to our components
54:43 - foreign
54:48 - our list group component is in a fairly
54:50 - good shape when we click an item it gets
54:52 - selected but in a real world application
54:55 - quite often something should happen
54:57 - after an item is selected perhaps we
54:59 - want to filter a list of objects or
55:01 - maybe we want to redirect the user to a
55:03 - different page so something should
55:05 - happen after an item is selected now
55:08 - what happens is different from one
55:09 - application to another there is no
55:11 - one-size-fits all so we don't want to
55:13 - implement that piece of logic inside our
55:16 - list group component because then it's
55:18 - not going to be a reusable component
55:20 - anymore so we need a mechanism to notify
55:23 - the consumer or the parent of this
55:25 - component that an item is selected in
55:28 - this case the consumer or the parent of
55:30 - this component is our app component this
55:33 - is where we are using the list group so
55:36 - when an item is selected we should
55:37 - notify the app component that an item is
55:39 - selected but how can we implement this
55:41 - well that's very easy so look at our
55:44 - props object currently we have two
55:46 - properties and we are using these to
55:48 - pass data to our list group component
55:51 - now we can add a third property which is
55:54 - going to be a function now down here
55:57 - when we select an item we're going to
55:59 - call that function with this our app
56:01 - component will be notified let me show
56:03 - you how this works it's really simple
56:05 - so first let's define the signature of
56:08 - that function let's imagine that we want
56:10 - a function that takes a parameter called
56:13 - item of type string that is the selected
56:16 - item
56:17 - and returns void so it doesn't return a
56:19 - value so here we have a property by
56:22 - convention we start with the word on and
56:25 - then we specify the type of event in
56:27 - this case select item this is just like
56:30 - the on click prop that you saw earlier
56:33 - but here we have on select item
56:36 - so we have a property called unselect
56:38 - item the type of this property is a
56:40 - function
56:42 - that has a parameter of type string and
56:44 - returns void okay
56:47 - with that now we have a compilation
56:49 - error in our app component how can I
56:51 - tell look it turned red also we can go
56:54 - to the top under View
56:57 - open up the problems panel
56:59 - so the typescript compiler is telling us
57:01 - that in the app component we have
57:03 - forgotten to pass this prop so once
57:06 - again the typescript compiler is helping
57:08 - us catch a lot of potential problems
57:10 - early on so let's go back to our app
57:13 - component
57:15 - now here we set on select item we can
57:19 - write an inline function here just like
57:21 - how we handled the click event earlier
57:23 - or we can write a separate event handler
57:26 - if you want to write a separate event
57:28 - handler
57:29 - again just like before by convention we
57:32 - start with the word handle and then we
57:35 - specify the type of event select item
57:38 - now we set this to a function with a
57:40 - signature that we just defined so item
57:42 - of type string goes to nothing now here
57:46 - we can just do a console.log
57:49 - and print the item on the console now we
57:52 - can pass that down here
57:54 - handle select item now the last step
57:59 - back to our list group over here when
58:01 - destructuring the props we should pick
58:03 - the on select item property
58:07 - and then
58:08 - When selecting an item
58:10 - we should call this function
58:12 - so we call this and pass the selected
58:14 - item which is
58:16 - this item variable here
58:18 - now back to the browser when we select
58:20 - an item the app component is notified
58:22 - and it's now printing the name of the
58:24 - selected City on the console
58:27 - [Music]
58:32 - now let's talk about the differences and
58:35 - similarities between props and state as
58:38 - you have seen props or properties are
58:40 - the inputs or arguments passed to a
58:43 - component State on the other hand is the
58:45 - internal data managed by a component
58:47 - that can change over time so Props are
58:50 - like functional arguments and state is
58:52 - like local variables inside a function
58:54 - now one thing you need to know about
58:56 - props is that we should treat them as
58:58 - immutable what does this mean in English
59:01 - to mute it something means to change it
59:03 - so mutable means changeable and
59:06 - immutable means unchangeable so when we
59:09 - say something is immutable it means it's
59:11 - read only so in our list group component
59:14 - here are our props we should not change
59:16 - any of them here we should not set the
59:18 - heading to a new value if we do so
59:21 - nothing is going to happen nobody is
59:22 - going to yell at us but this is an
59:24 - anti-pattern in react you will
59:26 - understand the philosophy behind this as
59:28 - we go through the course this is based
59:30 - on functional programming principles so
59:33 - we should treat props as immutable or
59:36 - unchangeable State on the other hand is
59:39 - mutable and that's the whole purpose of
59:41 - using State variables we want to tell
59:43 - react that this component has data that
59:45 - can change over time right so these were
59:48 - the differences between State and props
59:50 - but one thing they both have in common
59:52 - is that anytime they change react will
59:55 - re-render our component and update the
59:57 - Dom accordingly
60:00 - [Music]
60:05 - sometimes we want to pass children to a
60:08 - component just like how we are passing a
60:10 - list group to this div element here so
60:12 - in this lesson I'm going to show you how
60:14 - to create a component that can accept
60:16 - children
60:17 - so
60:19 - back to our components folder let's add
60:21 - a new file called alert.tsx
60:25 - now let me show you a shortcut instead
60:27 - of defining a function here and then
60:30 - exporting it
60:32 - we can use a shortcut
60:33 - so here in the extensions panel if you
60:36 - search for es7 plus you will find this
60:39 - extension
60:40 - it's called es7 plus react Redux and
60:44 - react native it's a very popular
60:46 - extension look at how many times it's
60:48 - been downloaded so once you install this
60:51 - you can type RAF CE now it's not coming
60:54 - up I don't know why so let's close this
60:57 - file and open it one more time
61:00 - now let's try again good so this is
61:02 - short for react Arrow function component
61:05 - export so if you press enter we get this
61:08 - code snippet lovely now here we have
61:11 - multi-cursor editing so we can change
61:13 - the name of the component
61:15 - if you made a mistake but in this case
61:17 - no so let's go back to alert and then we
61:19 - press escape to exit multi-cursor
61:22 - editing good now we don't need to import
61:24 - react on the top
61:25 - so here's our alert component now let's
61:29 - add this to our app component and test
61:30 - our application up to this point so we
61:33 - go to the app component
61:35 - that we're done with our list group for
61:37 - now so let's delete all the code here
61:43 - now inside this div we want to add an
61:45 - alert so let's add alert
61:48 - good now back to the browser so here's
61:51 - our alert component lovely now to
61:53 - display an alert we're going to borrow
61:55 - some code from bootstrap
61:57 - so head over to bootstrap website go to
61:59 - the docs and here on the left side under
62:03 - components
62:05 - you should find alerts so let's find out
62:08 - the markup we need to render an alert
62:10 - like this so that is very
62:12 - straightforward we need a div with two
62:15 - classes the base class is alert that all
62:17 - of these have the second class is a
62:20 - class that determines the color so if
62:22 - you use alert primary we get this Blue
62:25 - Alert by default
62:27 - so back to our alert component let's
62:29 - give this div a couple of classes alert
62:32 - and alert
62:33 - primary
62:35 - all right this is what we get lovely now
62:37 - we need to make this Dynamic so we want
62:39 - to pass the text as a prop to do that
62:43 - first we need to use an interface to
62:45 - define the shape of props so Props here
62:49 - we need a property called text of type
62:51 - string
62:53 - then we add a parameter here of type
62:55 - props
62:56 - in fact it's better to de-structure this
62:58 - and grab the text property
63:01 - and render it right here
63:04 - okay now back to our app component
63:08 - here we should set the text to something
63:10 - like
63:11 - hello world
63:13 - before going further Let's test our
63:15 - implementation
63:16 - okay it's working lovely
63:18 - now while this works this way of passing
63:21 - text to this component is kind of ugly
63:23 - what if the text is a bit too long what
63:25 - if you want to pass HTML content passing
63:28 - HTML content has a prop like this is
63:31 - kind of ugly wouldn't that be nicer if
63:33 - you could pass text as a child to this
63:35 - component let me show you how so we want
63:37 - to be able to use this component like
63:41 - this this is better so to do that we go
63:45 - back to our component
63:47 - now there is a special prop that all
63:49 - components support and it's called
63:51 - children so if you simply rename text to
63:54 - children now we can pass our text as a
63:56 - child to this component but we have a
63:59 - couple of Errors because we need to
64:01 - rename these two references to text so
64:04 - I'm going to rename them both in one go
64:06 - good there is our con and our
64:10 - application is still working lovely now
64:12 - what if you want to pass HTML content
64:15 - here
64:17 - we get a compilation error because we
64:19 - told the typescript compiler
64:21 - that the children prop is a string but
64:24 - in this case we are not passing a string
64:26 - we are passing a more complex structure
64:28 - to solve this problem
64:30 - we need to change the type of children
64:33 - from string to react node now here in
64:36 - order completion box we have two react
64:38 - nodes the first one is an abbreviation
64:40 - so if you press enter here we get this
64:43 - markup this is not what we want we want
64:45 - the second item this is the react node
64:48 - class defined in the react module so
64:51 - let's import it on the top like this and
64:53 - with that we can pass HTML content to
64:57 - our alert component
64:58 - so to recap using the children prop we
65:01 - can pass children to a component
65:06 - [Music]
65:10 - all right the last thing we're going to
65:12 - cover in this section is react Dev tools
65:14 - which is a very useful browser extension
65:16 - for inspecting and analyzing our react
65:19 - applications it's available for Chrome
65:21 - Firefox and Microsoft Edge so simply
65:25 - Google reactive upper tools or reactive
65:27 - tools and install it in your browser
65:30 - once you do that then go back to this
65:33 - page here in the dev tools you will see
65:36 - a couple of new tabs one is components
65:38 - the other is profiler now look at the
65:41 - components tab here we can see the
65:43 - hierarchy of our components so on the
65:45 - top we have the app component and below
65:47 - that we have the alert component so this
65:50 - is the component tree that react takes
65:52 - and renders in the actual Dom now down
65:55 - here you can see the props of this
65:57 - component so here we have the children
65:59 - prop which is set to an array of two
66:02 - objects the first element is a string
66:04 - the second element is a span object
66:07 - below that you can see how this
66:09 - component was rendered so it was
66:11 - rendered by the app component now
66:13 - finally down here you can see where this
66:16 - component is implemented in this case in
66:18 - app.tsx but that is not visible in my
66:21 - recording window now in a large
66:23 - application with a lot of components
66:25 - finding the right component might be a
66:27 - little bit tedious so we can always
66:28 - search for them here also here we have a
66:31 - couple more useful features for example
66:33 - we can select a component and inspect
66:36 - the matching Dom element so if you click
66:39 - this and then go to the elements tab
66:42 - we can see the matching Dom element that
66:44 - represents this component now back to
66:47 - the components tab
66:49 - there's also another useful feature here
66:51 - so we can select the component and click
66:54 - on this icon to see its source code so
66:56 - in this case this is our alert component
67:00 - so it's pretty straightforward it
67:02 - doesn't really need more explanation as
67:04 - you're building applications if you want
67:06 - to better understand your components and
67:08 - how they work if you want to inspect
67:10 - their props and state use reactive tools
67:14 - [Music]
67:19 - all right now it's your turn I want you
67:22 - to create a bootstrap button component
67:25 - so here on bootstrap website if you look
67:28 - at the buttons page you can see we have
67:30 - different types of buttons now for this
67:32 - exercise I want you to only focus on
67:35 - this set of buttons because here we have
67:37 - other flavors don't worry about them
67:39 - don't worry about the sizes or outline
67:41 - buttons just simple bootstrap buttons
67:44 - now the markup is really simple each
67:46 - button has two classes one is BTN which
67:49 - is a base class and the other is a class
67:51 - that identifies the color so by default
67:54 - primary buttons are blue secondary
67:57 - buttons are gray and so on so I want you
67:59 - to encapsulate this markup inside a
68:01 - reusable react component so span a few
68:04 - minutes on this then be sure to come
68:06 - back and see my solution as I'll be
68:08 - showing you a really cool typescript
68:10 - technique
68:14 - all right here in the components folder
68:17 - we add a new file called button.tsx
68:21 - now we use our shortcut rough C
68:24 - good next we rename div to button and
68:29 - give it a couple of classes now I'm
68:31 - typing a little bit too fast because I'm
68:33 - assuming you have already done your
68:34 - exercise so I'm not expecting you to
68:36 - code along with me okay so here we have
68:39 - two classes for now let's just stick to
68:41 - primary buttons and then we make this
68:44 - Dynamic so this is the approach I want
68:46 - you to take while building applications
68:48 - one step at a time don't try to do too
68:51 - many things together okay so for now I
68:53 - just want to render a basic button I
68:55 - don't even want to make the text Dynamic
68:57 - let's see if our application works up to
68:59 - this point
69:00 - so we go to our app component
69:03 - and in this div we add a button
69:07 - component okay
69:09 - now back to the browser here's our
69:12 - button beautiful so the first step is
69:14 - done now the next step is to make the
69:17 - text or label Dynamic so back to our
69:20 - button component here we need to use an
69:22 - interface to define the shape of props
69:25 - now I want to use the children prop here
69:28 - so we can pass the text just like HTML
69:31 - buttons so I'm going to set the type of
69:33 - children to string
69:34 - we could also use react node but I
69:36 - prefer to use a string in this case
69:39 - next we add the props parameter and
69:42 - de-structure it
69:45 - and finally we render children right
69:49 - here
69:50 - good now we go back to our app component
69:53 - and give this button a label like my
69:55 - button
69:57 - let's see if our application is working
69:59 - good again don't worry about these
70:01 - errors everything is good so far next we
70:04 - need to handle the click event because
70:06 - in a real run application when this
70:08 - button is clicked we have to do
70:09 - something what happens next should not
70:12 - be implemented in our button component
70:13 - otherwise it's not going to be reusable
70:16 - okay so back to the button component
70:19 - here in the props object we need to add
70:21 - a new prop called on click
70:24 - and this is going to be a function with
70:26 - no parameters that returns void
70:29 - next we added here on click and finally
70:33 - we set the on click prop of the HTML
70:36 - button to the function that is passed
70:38 - from the outside so on click is going to
70:40 - be a function that is passed from the
70:42 - outside so the parent of this component
70:44 - is going to pass that function we get
70:46 - that function and simply pass it to this
70:48 - HTML button okay now in our app
70:51 - component we have an arrow because we
70:53 - haven't set the unclick prop
70:55 - for now I just want to add a simple
70:57 - inline function
70:59 - and log clicked on the console
71:02 - let's see if our application is working
71:04 - so click click click beautiful now the
71:08 - final step is implementing the color so
71:11 - we want to be able to pass the color of
71:13 - this button from the outside like this
71:16 - so we can set it to primary or secondary
71:18 - or whatever
71:20 - so let's add a new prop called color
71:24 - of type string I prefer to sort these
71:28 - props in alphabetical order it makes our
71:30 - code a little bit easier to read That's
71:32 - nicer
71:33 - next we add the color prop here and we
71:36 - use that to add the second CSS class
71:39 - dynamically so we wrap the codes in
71:42 - braces
71:43 - we terminate our string here and then
71:46 - append the color right after okay we
71:50 - have a compilation error because this
71:52 - quotation mark is unnecessary good now
71:56 - in our app component we have set the
71:58 - color to secondary let's see if it's
72:00 - working good if we change it to primary
72:06 - it's still working great now what if you
72:09 - want to give this a default value so we
72:11 - don't have to specify the color every
72:12 - single time
72:13 - to do that we go to our button class and
72:17 - give this color prop that default value
72:19 - of primary
72:21 - with that we get this blue button
72:23 - beautiful however we have a compilation
72:26 - error in the app component saying
72:29 - property color is missing in type so
72:32 - even though
72:33 - we gave this prop a default value the
72:36 - typescript compiler still expects us to
72:39 - set the color prop when using the button
72:42 - component to solve this problem we have
72:45 - to tell the typescript compiler that
72:46 - this property is optional so we add a
72:49 - question mark after and now
72:52 - the area is gone okay now what if we
72:55 - pass an invalid color here like let's
72:58 - say react what happens
73:00 - well there are no errors or Warnings but
73:03 - this is not how a button supposed to
73:05 - look like this is where we can use
73:07 - typescript to catch this kind of bugs
73:09 - early on before we deploy our
73:11 - application let me show you how so back
73:14 - to our button component instead of
73:16 - setting the type of color to string we
73:18 - can set it to a string literal like
73:20 - primary and with this we can only set
73:23 - this property to the value of primary so
73:26 - if you set it to something else we get a
73:29 - compilation error now we don't want to
73:31 - be limited to primary we want to support
73:33 - other colors so here we can use the
73:36 - union operator and add a second string
73:39 - literal so we can add secondary we can
73:42 - also add danger success and other
73:45 - bootstrap colors with this
73:47 - implementation we can only set this
73:49 - property to one of these values and
73:52 - nothing else so if we set it to react
73:54 - for example the typescript compiler is
73:56 - yelling at us we can see this file
73:58 - turned red and also if we go to the view
74:01 - menu and look at the problems panel we
74:04 - can see that we have a problem in this
74:06 - file so now if we change this back to
74:08 - primary or secondary or one of the
74:12 - supported values the arrow goes away
74:15 - [Music]
74:20 - all right here's the next exercise I
74:23 - want you to write the necessary code so
74:25 - when we click this button we see an
74:27 - alert and here we have a close button
74:29 - when we click it the alert disappears
74:31 - this is a great exercise for you to
74:33 - practice pretty much everything you have
74:35 - learned in this section now let me give
74:37 - you a hint on bootstrap website
74:39 - look at the alerts component on the
74:42 - right side you will find a link called
74:44 - dismissing now
74:46 - down here
74:47 - you can see that to make an alert
74:49 - dismissable you need to add a class here
74:51 - called alert dismissable you should also
74:54 - add
74:55 - a button this is the close button with
74:57 - this class and other stuff
75:00 - so spend a few minutes on this then come
75:02 - back see my solution
75:06 - all right this is so much fun so here in
75:09 - the app component right above our button
75:12 - we're going to add an alert
75:15 - and here let's say my alert now before
75:18 - going any further I just want to test
75:20 - our implementation up to this point I
75:22 - don't want to show or hide anything I
75:23 - just want to make sure if we can see an
75:25 - alert beautiful now we don't want to
75:28 - show this at all times we want to show
75:30 - this only when this button is clicked to
75:33 - do that we need a state variable
75:35 - here in the app component that
75:37 - determines the visibility of the alert
75:39 - so we want to render this part only if
75:42 - that variable is true
75:44 - so here we need to use the state hook
75:49 - to declare a state variable we
75:51 - initialize it to false so our alert is
75:53 - initially hidden now this returns an
75:55 - array that we can de-structure into two
75:58 - elements we can call the first one alert
76:00 - visible
76:01 - and the second one set alert visibility
76:05 - you could call them anything whatever
76:07 - you prefer now we want to render
76:10 - the alert only if alert is visible alert
76:14 - visible is true
76:16 - sober wrap is Embraces and perform a
76:19 - logical and between alert visible and
76:22 - this expression so alert visible
76:26 - and okay
76:28 - now when we click the button instead of
76:31 - logging something on the console we
76:33 - simply call set alert visibility to true
76:37 - so set alert visibility to true
76:41 - let's see if our implementation is
76:43 - working
76:44 - all right now we click and here's our
76:46 - alert beautiful let me explain how this
76:49 - works
76:50 - so when we click on this button this
76:52 - function is called at this point we set
76:55 - our state variable to true so the state
76:57 - of this component is changed and react
76:59 - will re-render this component and all
77:01 - its children this is why we see the
77:04 - alert now we need to add the close
77:06 - button to the alert so here on bootstrap
77:08 - website I'm going to copy some code
77:11 - I'm going to grab this class so there
77:13 - are no typos let's add that
77:16 - to our alert
77:17 - component
77:19 - okay we also need a close button
77:23 - I'm going to copy that from this website
77:25 - as well
77:28 - paste it here
77:29 - we just need to rename class to class
77:31 - name
77:33 - good now once again before we implement
77:35 - the hiding logic first we want to test
77:38 - our application and make sure that we
77:40 - can see the close button so one more
77:42 - time click okay here's a close button
77:45 - now the final part when we click this
77:47 - button we should notify the app
77:49 - component that the user clicked on this
77:52 - button at that point the app component
77:54 - will set the visibility of the alert to
77:56 - false which will cause the app component
77:58 - and all its children to re-render
78:01 - so to notify the parent or the consumer
78:04 - of this component that the user has
78:06 - clicked on the close button here we need
78:08 - to add a new prop
78:10 - on lows so remember the convention we
78:13 - start with the word on and then we
78:15 - specify the event in this case close
78:17 - this is going to be a function with no
78:19 - parameters that returns void
78:22 - now we need to add that here
78:25 - and finally
78:27 - when the user clicks on this button
78:30 - so unclick we simply call on close and
78:34 - more accurately we are not calling this
78:36 - function we're not calling it like this
78:37 - we're just setting on click to unclose
78:40 - so on close will be a function that is
78:43 - passed from the outside from the parent
78:44 - we pass that function to this prop when
78:47 - the user clicks on the close button
78:49 - react will call that function for us
78:51 - okay now we have a completion error in
78:54 - the app component because we haven't set
78:56 - the unclose prop
78:59 - pass
79:01 - and error function and set alert
79:03 - visibility
79:05 - to false
79:08 - as simple as that okay now
79:11 - the final test click click lovely
79:17 - congratulations you made it to the end
79:19 - of this tutorial I hope you found it
79:20 - helpful and learned a lot about react
79:22 - but wait there is more this tutorial was
79:25 - just a small part of my complete react
79:27 - course the full course includes eight
79:29 - hours of content and is jam-packed with
79:32 - the latest tools and best practices
79:33 - you'll get access to exercises summary
79:36 - notes cheat sheets and a project I
79:38 - showed you at the beginning of this
79:40 - tutorial and if you're not completely
79:41 - satisfied no problem the course comes
79:44 - with a 30-day money-back guarantee so
79:46 - there is no risk in giving it a try so
79:49 - if you are serious about master react I
79:51 - encourage you to check out the full
79:52 - course using the link below this video
79:54 - thanks for watching and happy coding
79:57 - [Music]

Cleaned transcript:

welcome to the ultimate react course in this course you will learn everything you need to know about react from the basics to more advanced concepts so by the end of the course you'll be able to confidently build fast and scalable apps with react if you are looking for a comprehensive easy to follow wellorganized and practical course that takes you from Zero to Hero this is the right react course for you you won't need any prior knowledge of react to get started everything you need to know is right here so you won't need to jump back and forth between random tutorials now unlike other courses we won't be building a dummy App instead we'll be building and deploying a beautiful production grade app for discovering video games this app has all the features and UI patterns you would expect from a modern application we can toggle within the dark and light modes we can search for games filter them by genre as well as platform now as we change filters the page title gets updated dynamically we can also sort games and here we see loading skeletons while games are being fetched from the back end and that's just the start in the next part which I'm currently working on we'll dive into advanced topics like routing State Management fetching data with react query authentication error handling performance optimization and much much more I've put my heart and soul into creating this course and I'm confident that it's going to be a game changer for your react skills I'm Marsha madani I'm a software engineer with over 20 years of experience and I've taught millions of people how to code and become professional software Engineers through my YouTube channel and online school codebitmarsh.com if you're new here make sure to subscribe as I upload new videos all the time so if you're ready to master react and build frontend apps with confidence let's jump in and get started thank you before we get started let's talk about what you will need to know to take this course first things first you don't need to know react to take this course however you should have a good understanding of HTML CSS and JavaScript if you're comfortable writing code in these languages you are in a great position to start learning react now throughout the course we'll be using typescript typescript is a superset of JavaScript that adds static typing to the language essentially it helps us catch errors earlier in the development process which can save us time and headaches down the road now don't worry if you have never coded in typescript before I'll hold your hands and teach you everything from scratch with that out of the way we can dive right into learning react before we begin coding let's take a few minutes and discuss what reacting is and how it helps us create better applications react is a JavaScript library for building Dynamic and interactive user interfaces it was created at Facebook in 2011 and is currently the most widely used JavaScript library for frontend development so if you're looking for a job as a frontend developer you should know how to confidently build applications with react but why was react created well as you probably know when a web page is loaded in a browser the browser takes the HTML code and creates a tree like structure called the document object model or the Dom for short this allows us to use JavaScript and change the page content in response to user actions for example we can use JavaScript to hide an element when a button is clicked this is called vanilla JavaScript meaning plain JavaScript code without any third part tools now as our applications grow working with a Dom can become quite complex and challenging to manage this is where react comes into play with react we no longer need to worry about querying and updating Dom elements instead with this grab a web page using small reusable components and react will take care of efficiently creating and updating Dom elements so components help us write reusable modular and better organized code now let's look at a real word example imagine you want to build a web page like this on this page we have a navigation bar on the top a side panel on the left and a grid of video games in the main area we can build each of these sections as separate components now in this grid each game is displayed in a cart which is an independent component with a like button that's another component itself we can build all these components individually and then combine them to build this page essentially a react application is a tree of components with the app being the root bringing everything together all right that's enough theory for now next we're going to set up our development environment and get a feel for what it's like to build applications with react foreign foreign to take this course you need to have node version 16 or higher now to check the version of node on your machine open up your command prompt or terminal window and run node Dash V so on this machine I'm running node version 19. you might be running a newer version that's totally fine it's not going to impact the materials in this course but you need to have node version 16 or higher if you don't head over to nodejs.org and download the latest version on this page now in this course just like my other courses I'll be using visual studio code or vs code as my editor you're welcome to use any editor that you prefer but if you want to use vs code I strongly suggest you to use the printer extension for formatting your code so here's the extensions panel over here search for prettier and install this extension once you do that on the top under the code menu go to preferences and settings now this layout might be different on Windows or Linux I'm not entirely sure but find the settings dialog and on this page search for format on Save if you take this box every time you save a file that file gets automatically reformatted with all that now we are ready to create our first react application there are two ways to create a react app we can use the official tool provided by the react team it's called create react app or CRA but we also have another tool called Veet that's getting increasingly popular these days because it's much faster and gives us smaller bundle sizes so here in the terminal window I'm currently on my desktop to create a new app using Veet all you have to do is run npm create Veet at latest or if you want to use the exact same version as me which is what I recommend you because I want to make sure you have the exact same experience then you need to specify the version that is 4.1.0 okay now npm is asking if you want to install this package let's proceed next we need to specify our project name which is Veet project by default but we can change that to anything like react app next we need to select a framework so using meet we can create any kind of JavaScript project we can use vanilla JavaScript which is Javascript without any thirdparty tools we can also create a view project a react project and so on so using up and down arrows we can move down this list let's select react next we need to select a language so here we have JavaScript and typescript we're going to use typescript in this course good so now we have a new project next we need to go into this folder install all the third party dependencies and run our web server so let's set it into the react app folder and type npm install or npmi that is shorter and with this we can install all the thirdparty libraries all right now we need to open this project in vs code to do that we type code period if this doesn't work on your machine simply drag and drop that folder into vs code now here in vs code we can open an embedded terminal by pressing Ctrl and backtick if this doesn't work on your machine just go to the terminal window and open a new terminal you can also see the shortcut right here so this is our embedded terminal it's much easier to use this than switch back and forth between vs code and a different terminal window now to run our web server we type npm run Dev now this launched a web server at this address localhost Port 5173 this might be different on your machine so don't worry about that just open this address in your browser and this is our first react application next we're going to create our first react component so this is our project loaded in vs code now let me give you a brief overview of the key files and folders in this project here we have the node modules folder this is where all the thirdparty libraries like react and other tools are installed you'll never have to touch this next we have the public folder this is where the public assets of our website exist like images video files and so on next we have the source folder this is the source code of our application in this folder currently we have a component called the app component don't worry about any of the code here we're going to rewrite everything from scratch all I want you to note here is that currently in this application we have a single component called the app component now outside of the source folder we have index.html which is a very basic HTML template in this template we have a div with the idea of root that is the container for our application below that we have a script element referencing Source slash main.tsx this is the entry point to our application next we have package.json in this file you can find information about this project so we have the name of the project its version a bunch of script the list of dependencies So currently we're dependent on two libraries react and react on version 18. we also have a bunch of development dependencies these are only used for development they're not going to be deployed with our application in the future next we have a typescript configuration file here we have a bunch of settings for telling the typescript compiler how to compile our code to JavaScript now for the most part you never have to touch this file unless you're an advanced user and finally we also have a configuration file for Veet again for the most part you don't have to touch this file Now to create a react component we right click on the source folder and add a new file called message.tsx so the extension of typescript files should be either TS or TSX quite often we use Ts for plain typescript files and TSX for react components now there are two ways to create a react component we can use a JavaScript class or a function these days function based components have become more popular because they are more concise and easier to write so that's what we'll use in this course but if you're maintaining an older react project that is built with class components you can look at my previous react course to learn about them but function based components are the recommended approach for new projects so here we declare a function called message that pay attention to how I have named this function this convention is called Pascal casing with Pascal casing we should capitalize the first letter of every word in this case p and C it's really important to follow this convention because this is the convention that both react and other developers expect us to follow so in react application whenever we want to create a function component we should always follow Pascal casing now here we should describe what the UI is going to look like where we use this component so let's say wherever we use this component we want to render an H1 element with a message like hello work so here we return an H1 element with hello world now this syntax might make you a little bit confused you might be thinking that you're writing HTML code in the middle of JavaScript code but that is not correct this syntax you see here is called jsx which is short for JavaScript XML so this code under the hood is going to get compiled down to JavaScript if you head over to babblejs.io repo that is repl you can see how this code gets converted to JavaScript let me show you so on the left side we can write jsx code like H1 hello world and on the right side we can see the equivalent JavaScript code so this piece of code gets eventually converted to react.createelement the type of element is H1 and the message inside the element is hello world so this is a very basic component now to use this first we need to export it as a default object from this module now let's go to the app component and use this new component so back to our project here's the app component now we're going to delete everything in this file now let's create a new component called app now in this component let's say we want to have a div and inside the div we want to have our message component so first we need to import our message component from period slash message so period means the current folder now we can use this component just like regular HTML elements so we add the opening tag and close it it's really important to close it we should always close our react components or we'll get a compilation error now here we can also use the selfclosing syntax that is more concise now just like the message component we should export the app component so it can be used somewhere else now here in the terminal you can see our web server is still running and here we have HMR which is short for hot module replacement so read under the hood monitors our files for changes whenever we make any changes it will automatically refresh our page in the browser so now you can see our message component rendered on the screen now this is a very simple example in a real world application a component can have Behavior so here we can have a button when the button gets clicked perhaps we can change the message we can do all sorts of things so with jsx we can easily describe the user interface of our application with HTML and JavaScript now the great thing about jsx is that it allows us to easily create Dynamic content for example here we can declare a constant Cod name I set it to my name Marsh now we can replace this word with my name dynamically so here we add braces and inside the braces we can write any JavaScript expression an expression is a piece of code that produces a value so here we can reference the name constant we can also call a function like get name basically any piece of code that returns a value so here we can add my name dynamically we can also write if statement so we can say if name is true theme return this markup otherwise return a different markup like Hello World now back to the browser you can see my name is rendered on the screen however if I change the name to an empty string we see Hello World so this is the beauty of jsx using this syntax we can easily describe the user interface of our applications So currently we have a component tree with the app being the root or top level component and the message being a child when our application starts react takes this component tree and builds a JavaScript data structure called the virtual Dom this virtual Dom is different from the actual Dom in the browser it's a lightweight inmemory representation of our component tree where each node represents a component and its properties when the state or the data of a component changes react updates the corresponding node in the virtual Dom to reflect the new state then it compares the current version of virtual Dom with the previous version to identify the nodes that should be updated it will then update those nodes in the actual Dom now technically updating the Dom is not done by react itself it's done by companion Library called react Dom so earlier we talked about package.json in this file we can see the dependencies of our application so currently our application is dependent on two libraries react and react on let me show you how these work together so in index.html I told you that we have a div with the idea of root and this is the container of our application below that we have a script element referencing main.tsx now if you look at this file you can see that here we're using react Dom to render this component tree inside an element with the ID of root so this is our component tree here is our app component that is wrapped by another component called strict mode this is one of the builtin components in react it doesn't have a visual representation its purpose is to identify potential problems so we're taking this component tree and rendering or displaying it inside an element with the idea of root and to do that we're using the react on library but we can also render this component Tree in a mobile app using a different Library called react native so react itself is not tied to a particular platform like web or mobile it's platform agnostic and we can use it to build apps for web mobile and desktop devices so you have learned that react is a JavaScript library for creating user interfaces in contrast to react we have other tools like angular and view which are Frameworks but what is the difference between a library and a framework a library is a tool that provides specific functionality while a framework provides a set of tools and guidelines for building applications so a library is like a tool while a framework is like a tool set now react is just a library or a tool for building user interfaces so the only thing that it does and is good at is creating Dynamic and interactive user interfaces but we hardly use only react to build modern applications we often need additional tools for concerns such as routing which means allowing the user to go from one page to another making HTTP calls managing the application State internationalization form validation animations and so now the great thing about react is that it doesn't have an opinion about the additional tools we should use for these concerns so we can pick the right tools for the job in this part of the course our focus is entirely on react and no thirdparty libraries once you master react in the next part we'll explore some additional useful libraries in the react ecosystem hey guys Marsh here before we dive back into the tutorial I just wanted to say that this tutorial is actually the first hour of my complete react course the full course includes eight hours of content jampacked with the latest techniques and best practices it's got everything you need to become a react Pro including exercises summary notes cheat sheets and even the project I showed you at the beginning of this tutorial and the best part is it comes with a 30 day money back guarantee so if you're loving this tutorial and want to take your react skills to the next level I highly recommend checking out the complete course using the link below this video thanks for watching and now let's get back to the tutorial so you got a taste of building applications with react in this section we'll be covering the fundamental concepts in react applications this is the most important section in this course you don't want to miss the materials I've covered here help you build a strong foundation in react we'll talk about building components rendering markup with jsx managing State passing input to components where props and debugging react applications so let's jump in and get started all right in this lesson we're going to create a basic list group component first we're going to install bootstrap to give our application a modern look and feel now in case you are not familiar with bootstrap it's a very popular CSS library that gives us a bunch of CSS classes for styling our applications so here we open up our terminal window you can see our web server is running so we open a new terminal window and run npm install bootstrap the version that I'm using in this video is 5.2.3 let's go ahead good now we need to import it in one of our CSS files so here in the source folder we have a couple of CSS files one is app.css this file contains all the styles for our app component we don't need any of this stuff anymore delete we also have index.css where we have Global styles for our application again we don't need any of these Styles here because all of them were generated by wheat so we can delete this file entirely now let's go to main.tsx you can see that our index.css file was imported here we're going to replace this line with import bootstrap slash dist slash CSS slash bootstrap.css okay now to make sure that bootstrap is imported properly we go back to the browser so previously hello world was in the middle of the page and we had a different font now it's up here and it has a different font beautiful so now let's create a list group component so back to our project here in the source folder we add a new folder called components this is not necessary but by convention we put all of our components in a folder called components now here we add a new file called list group dot TSX again pay attention to how I have named this file here we're following the Pascal convention so we're capitalizing the first letter of each word now in this file with declare a function called list group for now let's just return an H1 element list group and Export this from this module next we need to import this in our app component so if you're on Mac press command and P if you are on Windows press Ctrl NP here we can search for files like app.tsx okay now we don't need the message component anymore so let's remove the slide instead we're going to import our list group com component okay and we're going to use that right here okay let's make sure everything is working up to this point so here in the browser we have our list group component beautiful now finally we need to display a list of items here and for that we're going to borrow some code from bootstrap so head over to getboosttrap.com go to the docs and on the left side under component section you should find list group so this is a list group component in bootstrap to create a list like this we need to use this markup so we need a UL with this class and a bunch of list items with these classes so we copy this we go back to our list group component and return this markup now here we get a bunch of Errors because class is a reserved keyword in JavaScript or typescript so here we need to rename all these classes to class name now let me show you another shortcut let's rewrite this back we select the class keyword now if you're on Mac press command and D if you're on Windows press Ctrl and d and with this we select the next occurrence of the selected keyword so now we have multiple cursors we can press command and d one more time and again and again and again now all of these are selected so we delete them and type class name then we press escape a couple of times to disable multicursor editing okay now finally I save the changes but my code is not reformatted so let's investigate why this is happening on the top Under The View menu we go to the command palette note the shortcut on Mac it's shift command and P and here we search for format document okay here we have an error saying there are multiple formatters for typescript jsx files so let's click on configure and here we're going to use prettier as our default code formatter good now this file is formatted Beautiful Just note that prelayer automatically wrapped our jsx markup in parenthesis this is necessary to break the markup into multiple lines so if you're not using vs code with prettier be sure to add the left bracket in front of the return keyword so you can spread your jsx into multiple lines so now back to the browser here's our list group component but this is pretty boring this doesn't have any functionality and it doesn't allow us to render or display these items dynamically so we're going to solve these issues one by one over the next few lessons now what if we want to add a heading here well if we add another element here like an H1 we get a bunch of Errors because in react a component cannot return more than one element so earlier I told you that this H1 expression that we have here eventually gets compiled to JavaScript so this line gets translated to something like react.createelement with H1 being the type of the element the same thing will happen for the second element so in this function we are returning multiple elements and this is not allowed in react now to solve this problem we have a couple of different ways one simple way is to wrap this entire expression inside a div or another element so let me show you another shortcut we select all this code then we bring up the command palette so we go to the view menu and bring up the command palette or better we use the shortcut and here we search for wrap with abbreviation now we press enter and here we specify the type of element that we want to use to wrap this entire code so div enter done okay so that's one way but we're adding one extra element in the Dom purely for making react happy this is unnecessary a better way is to use a fragment so on the top we import fragment from react make sure to put it in braces now we replace the div with a fragment so just like before I've selected the div element now we can press command and D to select the other div and now with multiple cursors we can edit both of them in one go okay now with this change when this component is rendered on the screen we're not going to have an additional element like a div in the Dom okay now there is even a better way to achieve the same result we have a shorter syntax we don't have to import the fragment component from react so let's delete this line and we select the fragment tags both of them and remove them so if you add empty angle brackets we're telling react to use a fragment to wrap all these children now back to the browser so here's our heading and our items beautiful now this list is kind of useless because we have hardcoded these items in our markup what if you want to render a list of items dynamically well let's declare a constant called items and set it to an array of strings here we can use the name of series like New York San Francisco Tokyo London and Paris now in jsx we don't have a for Loop so we cannot write code like four item in items render whatever it doesn't work that way so we have to use a different technique in JavaScript as you probably know arrays have a method called map for mapping or converting each item to an item of a different type so if you type items dot map here we can pass an arrow function we can say take each item and convert it to an item of a different type so here we want to convert each item to an Li element so here we type Li and inside the tags we want to render or display the item itself earlier I told you that in jsx we use curly braces to render data dynamically so here we render the item itself okay now we're going to delete all these list items and instead we're going to bring down this piece of code however we get a compilation error because this expression is not allowed in the middle of a jsx markup in jsx we can only use HTML elements or other react components so to render data dynamically we need to wrap this expression in braces okay now save the changes our code got reformatted so Predator plugin broke down our code into multiple lines and added parentheses to wrap them now back to the browser here's our list of cities beautiful while reviewing this video I just realized that I made a mistake earlier and forgot to apply a CSS class to our list items that's why we have lost styling here but don't worry I'll fix that in a later video however if we right click anywhere on this page and go to inspect this is Chrome developer tools you should probably be familiar with it here on the console tab we have a warning saying eat child in a list should have a unique key prop what does this mean well back to our code this is where we are mapping each item to a list item here the warning is saying that each list item should have a key prop or key property that uniquely identifies that item react needs this to keep track of our items so later when we add or remove items dynamically react knows what part of the page should be updated so when rendering a list of items using the map method we should give each item a unique key now in this case each item has a unique string so we can use the item itself as a unique key but in a real world application where we retrieve items from an API quite often each item has a property like ID we don't have that in this case so we don't have to worry about it now back to the browser let's refresh the warning is gone and here's our list beautiful sometimes we want to render different content based on certain conditions for example here we can add an if statement and say if items the length equals zero perhaps we want to show the user a different message so here we can return a completely different markup for example we can add a paragraph and here we say no item found now to make sure this works I'm going to change the constant to a variable so we can reassign this on the next line okay now back in the browser so here we have no item found beautiful but our heading is gone so we can come back here and add our heading as well list and now we need to wrap this entire expression inside a fragment so let's add a fragment okay now if I save the changes Predator reformats our code and here once again we have parenthesis for spreading this code over multiple lines with this our heading is back but I don't like this implementation because we have a bit of duplication and generally speaking duplication in code is not considered a good practice so let me show you a different way to achieve the same result we're going to get rid of the if statement instead we're going to render things conditionally inside our jsx expression however inside this jsx expression we cannot write an if statement because as I told you earlier here we can only use HTML elements or other react components The Only Exception is braces with braces we can render anything dynamically so here we can use the ternary operator in JavaScript so we start with our condition items the length equals zero then we type a question mark if this condition is true we're going to return a paragraph with this message otherwise we're going to return null meaning nothing will be rendered with this we have the same result as before and our implementation is a little bit more concise now sometimes this logic can get a little bit too complicated and it can pollute our jsx markup in those cases we can always extract this logic and store it in a separate variable or constant for example here we can declare a constant called message Now we move this expression right here and then we can simply render our message constant in our jsx markup so now our j6 markup is a little bit cleaner now we can also move this logic inside a function for example we can declare a function called get message and here I'm using the arrow function syntax now we can move this logic right here and now we don't need this constant anymore so here we have a function and we can call that function to get the right message now the benefit of using F function in this case is that our functions can have parameters so perhaps we can get different messages depending on different conditions so here we can pass different arguments like one or whatever and get a different message if you don't have that scenario it's better to use a constant in this case now let me revert this code back to the previous state I'm going to move this expression right here so I can show you a more concise way to write the same code so let's remove this function okay look this piece of code is fine and it works but the part that bugs me a little bit is the second part returning null here let me show you a better way to write this code we start with our condition items that length we call zero now instead of using the ternary operator instead of using a question mark we do a logical and between this condition and the value that we want to return if this condition is true that is the paragraph element okay with this implementation we don't have the null keyword and our code is a little bit more concise but how does this work well let's go back to the browser and open up Chrome developer tools here in the console tab this is going to be our JavaScript playground if you have a Boolean value like true and perform a logical and with another value like one see what happened the result of this entire expression is equal to the second value what if we type true and mosh the result of the expression is mosh now what if you have false and mush the result is false so what does this mean well that means if our condition is true the result of this entire expression will be our paragraph element but if the condition is false the result of the entire expression will be false and nothing will be rendered on the screen so this is a very common technique react developers use to render content dynamically okay with this we can remove the slide and this is our final implementation foreign now let's see how we can handle click events in a component first I'm going to remove this line so we bring back our items good now I just realized that earlier I made a mistake and forgot to apply one of the Boost trap classes to these items so back to our code this is where we're rendering a list item we should give this a class of list Dash group Dash item okay that's better now we want to be able to click on each item and see it on the console in react each element has a property or a prop called on click so here is that on click to braces now inside the braces we can write an arrow function so a function with no parameters and here we can just say console.log clicked as simple as that now I'm going to save the changes so the code is reformatted so now each property or each prop is on a separate line okay now back to the browser we had an internal server error from this web server don't worry about it just refresh error is gone now if we click on each item we see this message beautiful but what if you want to see the actual item that was clicked well look this is where we are mapping each item to a list item so when creating this list item we have access to each item because we are using that item as the key of each list item right so instead of logging clicked we can simply log item now if we click on each item we see it on the console beautiful and by the way when mapping items we can optionally add a second parameter as an index and with this we can see the index of the item that was clicked so let me show you I'm going to clear the console now if we click on each item we can also see its index in the array lovely now this Arrow function can optionally have a parameter that represents the browser event we can call that e or event whatever we prefer now let's log this on the console and see what we get so clear click look the type of this object is synthetic base event I know it's a fancy term this is one of the builtin classes in react because different browsers have different implementations of event objects so to make this cross browser react team have created a class called synthetic bass event that is a wrapper around the native browser event object now if you look at the properties of this object you see properties that you're probably familiar with for example we have client X and client Y which represent the position where we clicked we also have type which represents the type of event we have Target which is the element where I clicked that was a list item with this class now our event handling logic here is very simple it's just a oneliner so writing a function here is totally fine but if our logic gets more complex we don't want to write that logic here in the middle of a jsx markup instead we should move that logic into a separate function so in this component we declare a function by convention we start with the word handle and then we specify the type of event in this case click now we set this to let's grab this piece of code and paste it here now we have a warning from the typescript compiler saying parameter event implicitly has an any type so the reason I know this is a typescript issue is that here we have Ts that is short for typescript but why are we getting this warning well the reason we're getting this error is that the typescript compiler doesn't know the type of this parameter is event a number is it a string is it an object what is it so if we use the dot operator we cannot see any properties of this event object this is where we need to specify the type of our parameter so we get Auto completion and type safety so let's hover our Mouse over this event parameter look the type of this parameter is react.mouse event so when we pass an inline function here the typescript compiler knows the type of our parameter that is why we didn't get a warning earlier but in this case we're declaring a brand new function the typescript compiler doesn't know where we're going to use this so it doesn't know the type of this parameter so we should go on the top add import mouse event from react and then after the parameter we type a colon followed by its type this is called type annotation in typescript so we type annotation we can specify the type of variables parameters and so on now with this annotation if we use the dot operator we can see all the properties of this mouse event object this is one of the beauties of typescript we get Auto completion we get type safety and it's easier to refactor or restructure our code you'll see more examples as we go through the quest so let's finish this example so now we have a function here this function is called an event handler because its job is handling an event in this case The Click event now over here we're going to remove this inline function and simply reference our handle click function note that I'm not calling this function we don't want to call it we just want to pass a reference so you're telling react that whenever the user clicks on this event this function should be caught so calling this function will be done later at runtime now let's make sure everything is working so let's click on one of these items beautiful all right now the next step when we click on an item we want to highlight it to do that we have a CSS class in bootstrap called active so back to our code this is where we are rendering a list item I'm going to give this a second class called active now look all of them are highlighted or activated this is not what we want we want to highlight one item at a time to do that we need a variable to keep track of the index of the selected item so back to our component let's declare a variable called selected index we can initialize this to negative one that means no item is selected if we set this to zero that means the first item should be selected now down here we can render this active class dynamically so we're going to use the same technique you learned in the conditional rendering lesson so I'm going to remove the quotations here we add braces so we render content dynamically here we can check the selected index if it equals the index of the current item that means that items should be active so we're going to give it two classes list group item and active otherwise we should only give it the list group item class this is a very simple way to add classes dynamically there are other more Advanced Techniques let's not worry about them at this stage let's just see if this works or not so back to the browser now the first item is selected beautiful now when we click on an item we should change the selected index so this is very good handling the click event now in this case we need a simple error function to update the selected index so I'm going to get rid of this handle click function so we deleted from here as well as here we should also delete the mouse event import on the top okay so always pay attention to cleaning up your code so here we write a simple arrow function and here we set selected index to the index of the current item okay now back to the browser let's click on item nothing is happening why is that well this variable we have declared here is local to this function component so react is not aware of it it's like a little secret inside this component to solve this problem we should tell react that this component is going to have data or state that might change over time and to do that we have to use one of the builtin functions in react called use state so when we type this here and press enter it gets imported on the top okay now this function is called a hook a hook is a function that allows us to tap into builtin features in react so this is called the statehook we have other hooks that you will learn about as we go through this course using the state hook we can tell react that this component can have data or state that will change over time so instead of declaring a variable this way we're going to call this function that we're going to initialize our variable we can give it the initial value of negative one now this returns an array in this array we're going to have two elements the first element is going to be a variable like our selected index variable and the second element is going to be an updater function using that updater function we can update this variable and at that point react will be notified so it knows that the state of our component is changed and then it will rerender our component which causes the Dom to be updated under the hood so as I told you earlier in the course with react we almost never have to touch the Dom directly we think in terms of components that have state when the state of a component changes react will update the Dom to match the new component State okay now let's see how we can use this so instead of working with two individual elements here it's easier to destructure this array into two elements so the first element is going to be select an index and the second element is going to be a function which we call set selected Index this is a convention we follow in react applications so here we have a state variable called selected index and here we have a function called set selected index now as another example we can use the state hook to declare another variable called name so we call view state we can initialize the name to an empty string this returns an array which we can destructure into two elements name and set name that's the idea now in this case we don't need a name variable so let's delete this line and the comment and the slide so here we have a state variable called selected index now down here to update this variable we're going to call set selected index and give it the new index with this when we click on an item it gets selected beautiful so this is how we tell react that our component can have state that will change over time now one thing you need to know about component state is that each component is going to have its own state so if we go back to our app component and add another instance of our list group here each list group is going to have its own state so in our first list group Paris is selected but in our second list group nothing is selected because this component has its own state so there will be independent of each other okay now we don't need to list groups here so I'm going to remove the second one so we're showing a list of cities here but what if we want to show a list of names or a list of colors we don't want to recreate a separate component for each type of list right so how can we make this component reusable this is where we use props or properties props are the inputs to our components so back to our code instead of defining these items here we should be able to pass them as an input to this component just like how we can call a function and give it an argument now the same principle applies to this heading instead of hard coding this label here it would be nicer if you could pass different labels like cities names colors and so on so how can we do that well first we need to decide the shape of the input to this component so we should be able to pass an object with two properties items which is going to be an array and heading which is going to be a string to do that we use one of the typescript features called an interface using an interface we can Define the shape or the interface of an object so you start with the interface keyword give this a name by conventional use props but some people prefer to prefix it with the name of the component so list group props either way it works I prefer a shorter name that he Embraces would define various properties and their types so we want to have items which is going to be an array of strings so string array and heading which is going to be a string so once again we're using type annotation to specify the type of various properties okay now we don't need this comment anymore next we give this function a parameter called props of type props now if we go back to our app component we have two compilation errors saying type is missing the following properties from type props items and heading so the typescript compiler is saying that this component expects two properties which are items and heading we have not specified them this is yet another benefit of using typescript so the typescript compiler is reminding us that we have forgotten to pass these props so it's helping us to catch a bunch of potential errors at compile time before running our application so back to our list group I'm going to grab the list of items and move it to the app component now we can pass this just like how we said the attributes of HTML element so we set items to we add braces so we can reference this variable now similarly we should also set the heading to series now in this case I'm using quotation marks but we could also wrap this in braces but this is unnecessary because we're passing a static value so let's rewrite it that's better now the compilation error is gone so back to our list group component now there are a couple of issues here we don't have the items variable anymore so we have to prefix it with props dot okay but we have to do the same thing here this looks a little bit repetitive and ugly a better solution is to destructure this parameter right here so we remove the name and add braces and pick the two properties items and heading now we have access to these properties anywhere in this function so we can remove props Dot and our code is cleaner now the final part is to replace the list with The Heading dynamically okay back to the browser our app still working so using props we can pass data to our components foreign our list group component is in a fairly good shape when we click an item it gets selected but in a real world application quite often something should happen after an item is selected perhaps we want to filter a list of objects or maybe we want to redirect the user to a different page so something should happen after an item is selected now what happens is different from one application to another there is no onesizefits all so we don't want to implement that piece of logic inside our list group component because then it's not going to be a reusable component anymore so we need a mechanism to notify the consumer or the parent of this component that an item is selected in this case the consumer or the parent of this component is our app component this is where we are using the list group so when an item is selected we should notify the app component that an item is selected but how can we implement this well that's very easy so look at our props object currently we have two properties and we are using these to pass data to our list group component now we can add a third property which is going to be a function now down here when we select an item we're going to call that function with this our app component will be notified let me show you how this works it's really simple so first let's define the signature of that function let's imagine that we want a function that takes a parameter called item of type string that is the selected item and returns void so it doesn't return a value so here we have a property by convention we start with the word on and then we specify the type of event in this case select item this is just like the on click prop that you saw earlier but here we have on select item so we have a property called unselect item the type of this property is a function that has a parameter of type string and returns void okay with that now we have a compilation error in our app component how can I tell look it turned red also we can go to the top under View open up the problems panel so the typescript compiler is telling us that in the app component we have forgotten to pass this prop so once again the typescript compiler is helping us catch a lot of potential problems early on so let's go back to our app component now here we set on select item we can write an inline function here just like how we handled the click event earlier or we can write a separate event handler if you want to write a separate event handler again just like before by convention we start with the word handle and then we specify the type of event select item now we set this to a function with a signature that we just defined so item of type string goes to nothing now here we can just do a console.log and print the item on the console now we can pass that down here handle select item now the last step back to our list group over here when destructuring the props we should pick the on select item property and then When selecting an item we should call this function so we call this and pass the selected item which is this item variable here now back to the browser when we select an item the app component is notified and it's now printing the name of the selected City on the console now let's talk about the differences and similarities between props and state as you have seen props or properties are the inputs or arguments passed to a component State on the other hand is the internal data managed by a component that can change over time so Props are like functional arguments and state is like local variables inside a function now one thing you need to know about props is that we should treat them as immutable what does this mean in English to mute it something means to change it so mutable means changeable and immutable means unchangeable so when we say something is immutable it means it's read only so in our list group component here are our props we should not change any of them here we should not set the heading to a new value if we do so nothing is going to happen nobody is going to yell at us but this is an antipattern in react you will understand the philosophy behind this as we go through the course this is based on functional programming principles so we should treat props as immutable or unchangeable State on the other hand is mutable and that's the whole purpose of using State variables we want to tell react that this component has data that can change over time right so these were the differences between State and props but one thing they both have in common is that anytime they change react will rerender our component and update the Dom accordingly sometimes we want to pass children to a component just like how we are passing a list group to this div element here so in this lesson I'm going to show you how to create a component that can accept children so back to our components folder let's add a new file called alert.tsx now let me show you a shortcut instead of defining a function here and then exporting it we can use a shortcut so here in the extensions panel if you search for es7 plus you will find this extension it's called es7 plus react Redux and react native it's a very popular extension look at how many times it's been downloaded so once you install this you can type RAF CE now it's not coming up I don't know why so let's close this file and open it one more time now let's try again good so this is short for react Arrow function component export so if you press enter we get this code snippet lovely now here we have multicursor editing so we can change the name of the component if you made a mistake but in this case no so let's go back to alert and then we press escape to exit multicursor editing good now we don't need to import react on the top so here's our alert component now let's add this to our app component and test our application up to this point so we go to the app component that we're done with our list group for now so let's delete all the code here now inside this div we want to add an alert so let's add alert good now back to the browser so here's our alert component lovely now to display an alert we're going to borrow some code from bootstrap so head over to bootstrap website go to the docs and here on the left side under components you should find alerts so let's find out the markup we need to render an alert like this so that is very straightforward we need a div with two classes the base class is alert that all of these have the second class is a class that determines the color so if you use alert primary we get this Blue Alert by default so back to our alert component let's give this div a couple of classes alert and alert primary all right this is what we get lovely now we need to make this Dynamic so we want to pass the text as a prop to do that first we need to use an interface to define the shape of props so Props here we need a property called text of type string then we add a parameter here of type props in fact it's better to destructure this and grab the text property and render it right here okay now back to our app component here we should set the text to something like hello world before going further Let's test our implementation okay it's working lovely now while this works this way of passing text to this component is kind of ugly what if the text is a bit too long what if you want to pass HTML content passing HTML content has a prop like this is kind of ugly wouldn't that be nicer if you could pass text as a child to this component let me show you how so we want to be able to use this component like this this is better so to do that we go back to our component now there is a special prop that all components support and it's called children so if you simply rename text to children now we can pass our text as a child to this component but we have a couple of Errors because we need to rename these two references to text so I'm going to rename them both in one go good there is our con and our application is still working lovely now what if you want to pass HTML content here we get a compilation error because we told the typescript compiler that the children prop is a string but in this case we are not passing a string we are passing a more complex structure to solve this problem we need to change the type of children from string to react node now here in order completion box we have two react nodes the first one is an abbreviation so if you press enter here we get this markup this is not what we want we want the second item this is the react node class defined in the react module so let's import it on the top like this and with that we can pass HTML content to our alert component so to recap using the children prop we can pass children to a component all right the last thing we're going to cover in this section is react Dev tools which is a very useful browser extension for inspecting and analyzing our react applications it's available for Chrome Firefox and Microsoft Edge so simply Google reactive upper tools or reactive tools and install it in your browser once you do that then go back to this page here in the dev tools you will see a couple of new tabs one is components the other is profiler now look at the components tab here we can see the hierarchy of our components so on the top we have the app component and below that we have the alert component so this is the component tree that react takes and renders in the actual Dom now down here you can see the props of this component so here we have the children prop which is set to an array of two objects the first element is a string the second element is a span object below that you can see how this component was rendered so it was rendered by the app component now finally down here you can see where this component is implemented in this case in app.tsx but that is not visible in my recording window now in a large application with a lot of components finding the right component might be a little bit tedious so we can always search for them here also here we have a couple more useful features for example we can select a component and inspect the matching Dom element so if you click this and then go to the elements tab we can see the matching Dom element that represents this component now back to the components tab there's also another useful feature here so we can select the component and click on this icon to see its source code so in this case this is our alert component so it's pretty straightforward it doesn't really need more explanation as you're building applications if you want to better understand your components and how they work if you want to inspect their props and state use reactive tools all right now it's your turn I want you to create a bootstrap button component so here on bootstrap website if you look at the buttons page you can see we have different types of buttons now for this exercise I want you to only focus on this set of buttons because here we have other flavors don't worry about them don't worry about the sizes or outline buttons just simple bootstrap buttons now the markup is really simple each button has two classes one is BTN which is a base class and the other is a class that identifies the color so by default primary buttons are blue secondary buttons are gray and so on so I want you to encapsulate this markup inside a reusable react component so span a few minutes on this then be sure to come back and see my solution as I'll be showing you a really cool typescript technique all right here in the components folder we add a new file called button.tsx now we use our shortcut rough C good next we rename div to button and give it a couple of classes now I'm typing a little bit too fast because I'm assuming you have already done your exercise so I'm not expecting you to code along with me okay so here we have two classes for now let's just stick to primary buttons and then we make this Dynamic so this is the approach I want you to take while building applications one step at a time don't try to do too many things together okay so for now I just want to render a basic button I don't even want to make the text Dynamic let's see if our application works up to this point so we go to our app component and in this div we add a button component okay now back to the browser here's our button beautiful so the first step is done now the next step is to make the text or label Dynamic so back to our button component here we need to use an interface to define the shape of props now I want to use the children prop here so we can pass the text just like HTML buttons so I'm going to set the type of children to string we could also use react node but I prefer to use a string in this case next we add the props parameter and destructure it and finally we render children right here good now we go back to our app component and give this button a label like my button let's see if our application is working good again don't worry about these errors everything is good so far next we need to handle the click event because in a real run application when this button is clicked we have to do something what happens next should not be implemented in our button component otherwise it's not going to be reusable okay so back to the button component here in the props object we need to add a new prop called on click and this is going to be a function with no parameters that returns void next we added here on click and finally we set the on click prop of the HTML button to the function that is passed from the outside so on click is going to be a function that is passed from the outside so the parent of this component is going to pass that function we get that function and simply pass it to this HTML button okay now in our app component we have an arrow because we haven't set the unclick prop for now I just want to add a simple inline function and log clicked on the console let's see if our application is working so click click click beautiful now the final step is implementing the color so we want to be able to pass the color of this button from the outside like this so we can set it to primary or secondary or whatever so let's add a new prop called color of type string I prefer to sort these props in alphabetical order it makes our code a little bit easier to read That's nicer next we add the color prop here and we use that to add the second CSS class dynamically so we wrap the codes in braces we terminate our string here and then append the color right after okay we have a compilation error because this quotation mark is unnecessary good now in our app component we have set the color to secondary let's see if it's working good if we change it to primary it's still working great now what if you want to give this a default value so we don't have to specify the color every single time to do that we go to our button class and give this color prop that default value of primary with that we get this blue button beautiful however we have a compilation error in the app component saying property color is missing in type so even though we gave this prop a default value the typescript compiler still expects us to set the color prop when using the button component to solve this problem we have to tell the typescript compiler that this property is optional so we add a question mark after and now the area is gone okay now what if we pass an invalid color here like let's say react what happens well there are no errors or Warnings but this is not how a button supposed to look like this is where we can use typescript to catch this kind of bugs early on before we deploy our application let me show you how so back to our button component instead of setting the type of color to string we can set it to a string literal like primary and with this we can only set this property to the value of primary so if you set it to something else we get a compilation error now we don't want to be limited to primary we want to support other colors so here we can use the union operator and add a second string literal so we can add secondary we can also add danger success and other bootstrap colors with this implementation we can only set this property to one of these values and nothing else so if we set it to react for example the typescript compiler is yelling at us we can see this file turned red and also if we go to the view menu and look at the problems panel we can see that we have a problem in this file so now if we change this back to primary or secondary or one of the supported values the arrow goes away all right here's the next exercise I want you to write the necessary code so when we click this button we see an alert and here we have a close button when we click it the alert disappears this is a great exercise for you to practice pretty much everything you have learned in this section now let me give you a hint on bootstrap website look at the alerts component on the right side you will find a link called dismissing now down here you can see that to make an alert dismissable you need to add a class here called alert dismissable you should also add a button this is the close button with this class and other stuff so spend a few minutes on this then come back see my solution all right this is so much fun so here in the app component right above our button we're going to add an alert and here let's say my alert now before going any further I just want to test our implementation up to this point I don't want to show or hide anything I just want to make sure if we can see an alert beautiful now we don't want to show this at all times we want to show this only when this button is clicked to do that we need a state variable here in the app component that determines the visibility of the alert so we want to render this part only if that variable is true so here we need to use the state hook to declare a state variable we initialize it to false so our alert is initially hidden now this returns an array that we can destructure into two elements we can call the first one alert visible and the second one set alert visibility you could call them anything whatever you prefer now we want to render the alert only if alert is visible alert visible is true sober wrap is Embraces and perform a logical and between alert visible and this expression so alert visible and okay now when we click the button instead of logging something on the console we simply call set alert visibility to true so set alert visibility to true let's see if our implementation is working all right now we click and here's our alert beautiful let me explain how this works so when we click on this button this function is called at this point we set our state variable to true so the state of this component is changed and react will rerender this component and all its children this is why we see the alert now we need to add the close button to the alert so here on bootstrap website I'm going to copy some code I'm going to grab this class so there are no typos let's add that to our alert component okay we also need a close button I'm going to copy that from this website as well paste it here we just need to rename class to class name good now once again before we implement the hiding logic first we want to test our application and make sure that we can see the close button so one more time click okay here's a close button now the final part when we click this button we should notify the app component that the user clicked on this button at that point the app component will set the visibility of the alert to false which will cause the app component and all its children to rerender so to notify the parent or the consumer of this component that the user has clicked on the close button here we need to add a new prop on lows so remember the convention we start with the word on and then we specify the event in this case close this is going to be a function with no parameters that returns void now we need to add that here and finally when the user clicks on this button so unclick we simply call on close and more accurately we are not calling this function we're not calling it like this we're just setting on click to unclose so on close will be a function that is passed from the outside from the parent we pass that function to this prop when the user clicks on the close button react will call that function for us okay now we have a completion error in the app component because we haven't set the unclose prop pass and error function and set alert visibility to false as simple as that okay now the final test click click lovely congratulations you made it to the end of this tutorial I hope you found it helpful and learned a lot about react but wait there is more this tutorial was just a small part of my complete react course the full course includes eight hours of content and is jampacked with the latest tools and best practices you'll get access to exercises summary notes cheat sheets and a project I showed you at the beginning of this tutorial and if you're not completely satisfied no problem the course comes with a 30day moneyback guarantee so there is no risk in giving it a try so if you are serious about master react I encourage you to check out the full course using the link below this video thanks for watching and happy coding
