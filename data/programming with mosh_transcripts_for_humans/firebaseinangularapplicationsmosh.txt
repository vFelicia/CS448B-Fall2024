With timestamps:

00:00 - [Music]
00:01 - so far our focus has been purely on the
00:04 - front end but as you know most if not
00:07 - all angular applications need a back-end
00:10 - now we can build it back end yourself
00:12 - but then requires learning a different
00:15 - set of technologies and spending a lot
00:17 - of extra time another approach is to use
00:20 - firebase which is a platform provided by
00:23 - Google for building the backend of web
00:26 - and mobile apps so in this section I'm
00:29 - going to show you how to use firebase as
00:31 - the backend of your angular applications
00:34 - or storing data by the end of this
00:37 - section you'll be able to perform crud
00:39 - operations that means you'll be able to
00:41 - create read update and delete objects in
00:45 - a firebase database now before we get
00:47 - started I just want to let you know that
00:49 - this section is purely an introduction
00:51 - to firebase and you're not going to be a
00:54 - firebase expert by the end of this
00:56 - section because in this course our focus
00:58 - is mostly on the front end and firebase
01:01 - is a back-end platform plus there is
01:04 - more to firebase than we can cover in
01:06 - one section so if you want to learn more
01:08 - you can look at the additional resources
01:10 - that I've provided at the end of this
01:12 - section now let's get started
01:18 - so at the beginning of this course we
01:21 - looked at the architecture of web
01:23 - applications you learned that each web
01:25 - application consists of two parts the
01:28 - front end which sits on the client and
01:30 - we use angular to build it and the back
01:33 - end which sits on the server and we use
01:35 - a different set of languages and
01:37 - frameworks to build it this front-end
01:40 - talks to the backend to get or save data
01:43 - via a bunch of HTTP services behind
01:47 - these HTTP services we have one or more
01:50 - databases such as sequel server
01:53 - Raven and so on this is the architecture
01:55 - behind most web applications out there
01:58 - now as an angular or a front-end
02:01 - developer you don't have to worry about
02:02 - building the back-end that's the job of
02:05 - a back-end or a full stack developer but
02:08 - that aside building backends is time
02:10 - consuming and that's where firebase
02:13 - shines with firebase you can build a
02:15 - back-end for your angular apps in less
02:17 - than a minute you get a super fast
02:20 - scalable and real time database in the
02:23 - cloud and a library to talk to this
02:25 - database in your angular apps on top of
02:28 - that you also get authentication cloud
02:31 - messaging for sending notifications
02:33 - storage for storing your files and
02:36 - analytics many modern and popular
02:39 - applications out there use firebase as
02:41 - their back-end the beauty of firebase is
02:44 - that it provides libraries for iOS
02:46 - Android JavaScript and C++ so today you
02:51 - can use it as the backend of your
02:53 - angular app but tomorrow you may decide
02:55 - to build a mobile app for iOS or Android
02:58 - then all you have to do is to build that
03:01 - new client app and let that app talk to
03:04 - your back-end and with this you can
03:06 - quickly deliver a cross-platform
03:08 - solution to your users now what about
03:10 - the pricing
03:11 - you might be thinking all these amazing
03:13 - services they should come with a big
03:16 - price tag right well not really we can
03:20 - get most of these features for free and
03:22 - if your application grows you can either
03:24 - pay $25 a month or use their
03:27 - pay-as-you-go subscription model to
03:30 - learn more about their pricing
03:32 - head over to firebase at google.com
03:34 - slash pricing
03:39 - alright now let's create our first
03:41 - firebase project so I want you to head
03:44 - over to firebase Google comm log in and
03:47 - then on the navigation bar you're going
03:50 - to see a button called go to console
03:53 - alternatively you can simply head over
03:55 - to console dot firebase at google.com
03:58 - once you log in on this page you can
04:01 - create a new firebase project so scroll
04:04 - down add a project let's give our
04:09 - project a name I'm gonna call this
04:11 - firebase demo then select the country or
04:14 - region and create project
04:23 - okay here we are on the homepage of our
04:26 - new project you can see that you can add
04:28 - firebase to your iOS Android and web
04:31 - applications and when you click these we
04:33 - can see the documentation about the
04:35 - steps involved now the documentation for
04:37 - adding this to a web app is just a
04:39 - general JavaScript documentation adding
04:43 - firebase to an angular app is a slightly
04:45 - different and that's what I'm going to
04:46 - show you in this section now let's have
04:48 - a quick tour of some of the features you
04:50 - get here so on the left side on this
04:55 - sidebar we have our database so this is
05:00 - where all our data will be stored now if
05:03 - you have any experience with databases
05:05 - you know that in general we have two
05:08 - types of databases relational databases
05:11 - and no sequel databases which are also
05:14 - called document databases in relational
05:18 - databases we have tables and
05:20 - relationships and each table has one or
05:23 - more records we refer to the combination
05:25 - of these tables and their structure as
05:27 - the schema of the database in know
05:30 - sequel databases we don't have schema in
05:34 - fact we don't have any tables we don't
05:36 - have any columns our database is
05:38 - essentially a tree of nodes each node is
05:42 - a key value pair now this value can be a
05:45 - simple primitive value or it can be a
05:48 - complex object MongoDB is an example of
05:51 - a no sequel database firebase databases
05:54 - are also no sequel databases let's have
05:57 - a look at an example so here we have the
06:01 - root node of our database under this I'm
06:04 - gonna add a node called courses so this
06:07 - is for listing all the courses in our
06:09 - application now you can see that each
06:11 - node has a name and value now I don't
06:14 - want to assign a primitive value to this
06:16 - node I want to make this a complex
06:19 - object so I click this plus here and you
06:23 - can see now we have a child under
06:24 - courses again this child has a name and
06:28 - value I'm gonna set the name to one and
06:31 - the value to course one
06:35 - you
06:37 - so now you see we have a tree of nodes
06:39 - in our database I'm gonna add another
06:42 - child node under courses so here plus
06:46 - I'm gonna set the name to two and the
06:48 - value to course two now one thing I want
06:55 - you to pay attention to here is that
06:57 - each node in this database can have a
06:59 - different structure that's why we refer
07:02 - to this kind of database as a no sequel
07:04 - or schema-less database here is an
07:07 - example so all our courses have an ID
07:10 - and a name now I'm gonna add another
07:13 - course here I'm gonna set the ID to
07:16 - three but for the value I'm not gonna
07:18 - use a string like course three I want
07:21 - the value to be complex object so I'm
07:24 - gonna click this plus now we have a
07:27 - child under this node here in this child
07:30 - node I'm gonna set the name to title and
07:32 - the value to course three now look at
07:36 - the result so our third course is an
07:41 - object and this object has a property
07:43 - called title you can add another
07:46 - property here under three let's set the
07:49 - author Marsh a Madani now we have two
07:56 - properties and let's add one more here
07:58 - so let's set the price this time I'm
08:01 - gonna use a number let's say 150 dollars
08:05 - so what I want you to note here is that
08:08 - each node in this database can have a
08:10 - different structure our first two
08:12 - courses are simple key value pairs
08:14 - values or strings but our third course
08:17 - it's value is a complex object with
08:20 - three properties author price and title
08:23 - if you have never worked with this kind
08:25 - of database before swiping new to you it
08:27 - might be a little bit scary but in fact
08:28 - this is extremely powerful super fast
08:31 - and super scalable but the downside of
08:34 - this structure is that it's not
08:36 - optimized for reporting so unlike
08:40 - traditional relational databases where
08:42 - we can join multiple tables and run
08:45 - complex queries against them we cannot
08:47 - do that here so if that's what you need
08:49 - in your applique
08:51 - perhaps you need to use a relational
08:52 - database or if you want to use firebase
08:55 - or another know sequel database like
08:57 -  you can use this as your main
08:59 - database but set up some background job
09:02 - that takes all the data from this no
09:04 - sequel database into a relational
09:06 - database for reporting so this is our
09:10 - firebase database next we're going to
09:12 - get back to our angular project install
09:14 - firebase and work with this database
09:20 - in this section I'm gonna start on a new
09:23 - angular project so let's generate a new
09:26 - project using angular CLI ng new and
09:30 - call this firebase - demo
09:37 - all right our project is ready now let's
09:40 - go to firebase demo here we need to
09:43 - install a couple of node packages so NPM
09:46 - install the first one is firebase which
09:50 - is the standard firebase library written
09:52 - in JavaScript and the second one is
09:55 - angular fire two which is a library for
09:59 - working with firebase and an angular 2
10:02 - plus app ok now add the save flag okay
10:10 - all the packages installed successfully
10:12 - now let's open this project in vs code
10:16 - now here under the source folder we have
10:20 - environments and here we have two files
10:23 - or storing our configuration settings
10:26 - for the production and development
10:27 - environment so open up environment es so
10:34 - you can see here we are exporting an
10:35 - object called environment and this
10:37 - object has a simple property called
10:39 - production that is set to false here we
10:42 - need to copy some settings about our
10:44 - firebase project so back on firebase
10:48 - console if you go to the overview page
10:52 - for your project back here click this
10:57 - button at firebase your web app now here
11:02 - on this config object you can see a
11:03 - bunch of properties such as API key ask
11:07 - domain database URL and so on we're
11:11 - going to copy all these properties only
11:14 - the properties nothing else here
11:16 - okay so copy these now back here add a
11:21 - comma here we add a new key firebase set
11:25 - it to an object and then paste all those
11:28 - properties that we copied like this so
11:33 - this is our firebase database for the
11:35 - development environment in a real world
11:37 - scenario you should have a separate
11:39 - firebase back-end for your production
11:41 - environment so then you go to firebase
11:43 - create another project that project has
11:46 - its own settings then you would copy all
11:48 - the settings and environment
11:51 - prod the TS so it's a very similar file
11:55 - but the production property here is set
11:58 - to true okay now don't worry about these
12:01 - various environments we're going to look
12:03 - at them later when it comes to
12:04 - deployment so let's continue adding
12:07 - firebase to this project next we need to
12:10 - go to app add module here in the imports
12:15 - array we need to import one or more
12:17 - modules of angularfire but for some
12:20 - reason that I don't know my auto import
12:22 - plug-in doesn't work here so we need to
12:25 - explicitly import these modules on the
12:27 - top import angular fire module from
12:35 - angular fire to then in the imports
12:41 - array we add angular fire module dot
12:47 - initialize app now here we need to pass
12:51 - the configuration object for our
12:53 - firebase database so we need to import
12:56 - the environment object that was exported
12:59 - in the other module so environment auto
13:03 - import let's look on the top so this is
13:06 - our environment object imported from the
13:10 - environments folder slash environment
13:12 - module and here we have all the settings
13:15 - for our development environment now back
13:18 - here in the imports array this
13:20 - environment object has a property that
13:22 - we just added called firebase and this
13:27 - is an object that includes all the
13:28 - settings for firebase okay now this
13:31 - angularfire module is the main module in
13:33 - angular fire they are additional modules
13:37 - such as angular fire database and get
13:39 - fire authentication and so on
13:41 - so here because we're going to work with
13:43 - the database we should also import the
13:46 - angular fire database module so once
13:49 - again on the top we need to import
13:53 - another module this one is called and
13:55 - get a fire database module and we're
13:59 - going to import this from angularfire 2
14:01 - slash database
14:04 - okay then we add this to the import
14:09 - array after initializing the app so
14:12 - angularfire database module now we have
14:16 - successfully installed firebase and
14:19 - angular fire in our project next I'm
14:21 - gonna show you how to get the data from
14:24 - our firebase database
14:30 - so earlier we added these courses in our
14:33 - firebase database we have three courses
14:36 - the first two are simple key value pairs
14:38 - the values are a string and the third
14:42 - course it's value it's a complex object
14:44 - with three properties so you can see
14:47 - that in a no sequel database each node
14:49 - can have a different structure now this
14:52 - is powerful because it allows you to
14:54 - quickly build your database without
14:56 - having a schema it allows you to go
14:58 - faster it increases your productivity
15:01 - but also on the flip side if you don't
15:04 - manage it properly you can run into
15:06 - issues so let's see how we can read
15:08 - these courses and display them on a page
15:11 - back in the terminal first I'm gonna
15:14 - serve our application now here in the
15:19 - ESCO let's go to app that component so
15:24 - here we have only one component and I'm
15:26 - gonna display all our courses here in a
15:28 - real-world scenario you would have a
15:30 - separate component like courses
15:31 - component okay now we don't need this
15:34 - title here let's delete this we add a
15:38 - constructor here we need to inject one
15:42 - of angularfire classes now once again my
15:45 - auto import plugin cannot recognize this
15:48 - so we need to go on the top and
15:50 - explicitly import angular fire database
15:55 - note that this is angular fired database
15:58 - not angular fire database module we only
16:02 - imported the module in app module okay
16:04 - now if your we need to import this from
16:07 - angular fire to slash database okay
16:13 - now let's add this to the constructor so
16:17 - DB of type angular fire database now
16:23 - this object has a couple of methods list
16:26 - for reading a list of objects and an
16:28 - object for reading one object here we
16:32 - want to get a list of objects so let's
16:35 - call this method as the first argument
16:38 - we need to pass the path to our node in
16:41 - firebase so
16:43 - starting from the root we have another
16:46 - note here called courses so this is the
16:49 - past two our courses note now look at
16:53 - the return type of this method it
16:55 - returns
16:56 - firebase list observable so firebase
17:00 - lists observable is like an observable
17:02 - but it has additional methods that
17:04 - you're going to learn about in this
17:06 - section so we're going to treat this
17:08 - like an observable you're going to
17:10 - subscribe to it here we get the courses
17:14 - and we can use this to set a field in
17:17 - this class so let me define courses here
17:21 - it's an any array and then in the
17:27 - SUBSCRIBE method we can set they start
17:32 - courses for these courses but also I'm
17:36 - going to show this in the console they
17:39 - start courses that's it now let's test
17:43 - the application up to this point so back
17:46 - in the browser okay here's our home page
17:49 - let's take a look at the console we have
17:52 - an error permission denied at courses
17:55 - client doesn't have permission to access
17:57 - the desired data because by default only
18:01 - authenticated users can read from or
18:04 - write to your firebase database now in
18:07 - this section we're not gonna worry about
18:08 - authentication that's more of an
18:10 - advanced topic that I have covered in my
18:12 - other angular course called build
18:15 - enterprise applications with angular so
18:18 - let's simplify things and focus on the
18:20 - fundamentals' act our firebase console
18:24 - on the database page on the top you can
18:26 - see this tab called rules so here we
18:33 - have a couple of rules for reading and
18:35 - writing data as you can see these rules
18:38 - are defined as a JSON object this object
18:40 - has two properties dot read and dot
18:43 - write and their value is an expression
18:46 - here us not null is something that
18:50 - firebase understands it means only users
18:54 - who are authenticated can read and write
18:57 - so I'm gonna temporarily change this to
19:01 - true that means anyone can read from
19:04 - this database now in a real-world
19:06 - scenario you may want to open up read
19:09 - access to certain notes in your database
19:11 - so you can allow anonymous users to read
19:14 - from these nodes but you can have other
19:16 - nodes that have higher level of security
19:19 - perhaps only authenticated users or
19:22 - users within a specific role can read
19:25 - from these nodes again we don't want to
19:27 - worry about this now
19:28 - so let's move forward now every time you
19:31 - make a change here you need to publish
19:33 - your changes ok done now back in our
19:37 - angular app refresh this page and look
19:41 - at the console so this is what we get
19:44 - from firebase an array of three objects
19:47 - let's take a look you can see each
19:50 - object has two properties dollar value
19:53 - and daughter key now look at the second
19:56 - object here once again we have dollar
19:59 - value and dollar key but let's take a
20:02 - look and the third object this is our
20:05 - third course that has additional
20:06 - properties look at the structure of this
20:10 - object here we have additional
20:12 - properties like author price and title
20:16 - note that we no longer have the dollar
20:19 - value property so it's not like daughter
20:21 - value is a complex object and that
20:23 - object has these properties no it's not
20:26 - like that these properties are part of
20:29 - our course object now if I want to
20:32 - display the name of these courses I'm
20:34 - gonna have some difficulty because the
20:36 - title of the first two courses is stored
20:38 - and the dollar value property but in the
20:41 - third course the title is stored in the
20:44 - title property so that's why I said but
20:47 - if you don't manage your no sequel
20:49 - database properly you're going to run
20:50 - into issues so back in our firebase
20:54 - database I'm gonna delete the third node
20:58 - delete and add a new node that is
21:03 - consistent with the other nodes on their
21:05 - courses so three and course three
21:10 - okay now let's display these on our
21:13 - angular app so let's go to app but
21:17 - component that HTML delete all the
21:21 - markup here we need a ul and Li we're
21:25 - going to use the ng 4 directive let
21:29 - course of courses and here we use
21:32 - interpolation course dot dollar value
21:37 - back in the browser and we successfully
21:41 - read data from our firebase database
21:49 - now let me show you my favorite feature
21:51 - of firebase firebase databases are
21:54 - real-time that means any time the data
21:57 - in the database is modified the changes
22:00 - are reflected in our client apps
22:02 - automatically so here's an example
22:04 - currently we have three courses now I'm
22:07 - going to go back to our firebase console
22:09 - and add a new course here for course for
22:16 - now back to our angular app course for
22:19 - is here and I didn't even refresh the
22:21 - page so the data appeared here
22:23 - automatically similarly if I go back to
22:26 - our firebase console and delete this
22:29 - course now back in our angular app look
22:34 - the course is gone and we didn't write
22:36 - any code for implementing this kind of
22:39 - behavior all we did was subscribing to a
22:42 - list in firebase without firebase if we
22:45 - wanted to implement a real-time app we
22:47 - would have to write a lot more code for
22:49 - it so this is something that you get
22:51 - with firebase out-of-the-box this is
22:55 - especially important if you have an
22:56 - application that involves multiple users
22:59 - so as one user modifies the data the
23:02 - changes are immediately visible to other
23:05 - users a real-world example of this is if
23:07 - you want to build a chat application
23:09 - firebase is going to be your best friend
23:11 - because as soon as a user sends a
23:13 - message the other user is going to see
23:15 - it immediately
23:20 - so in the last lecture you learned that
23:22 - firebase databases are real-time now
23:25 - let's take a closer look at this feature
23:27 - so back in our angular app here we have
23:31 - three courses and I've cleared the
23:33 - console now let's go back to our
23:35 - firebase database here I'm gonna add a
23:39 - new course for course for now back in
23:46 - our angular app course for is here and
23:48 - then let's take a look at the console so
23:51 - when we added the fourth course we got a
23:54 - new array of all the courses from the
23:56 - server let's try this one more time I'm
24:00 - gonna go back here this time I'm gonna
24:03 - delete course for now back in our
24:08 - angular app course four is gone let's
24:11 - take a look at the console we got a new
24:14 - array of courses this array has three
24:17 - elements so this is what I want you to
24:19 - note here every time you make it change
24:22 - to the courses node whether we add an
24:24 - object or remove an object or modify an
24:27 - existing object we get the entire array
24:30 - of courses from the server the reason
24:33 - for this is because we have subscribed
24:36 - to the courses list in our database now
24:39 - in terms of the performance you don't
24:41 - have to worry about this even though we
24:43 - get the entire list firebase is
24:45 - optimized for this kind of scenarios but
24:47 - there is something tricky you need to be
24:49 - aware of currently we have only one
24:51 - component in this application app
24:53 - component right now in a real world
24:56 - application we're going to have tens or
24:57 - hundreds of components and we're going
24:59 - to have routing and navigation so the
25:02 - user may navigate to the courses page
25:04 - and on that page we're going to have a
25:06 - subscription to the courses list and
25:09 - firebase now if they navigate away from
25:12 - that page this subscription is still in
25:14 - memory so every time something happens
25:17 - to that node you're going to get the
25:20 - list of courses from the database even
25:22 - though the user is not on the courses
25:24 - page so if you don't manage this
25:26 - properly you're going to end up with
25:28 - memory leaks that means your application
25:31 - is going to consume more memory than it
25:33 - needs
25:33 - now to clarify in the section about
25:36 - consuming HTTP services with subscribe
25:39 - to the observables returned from the
25:41 - HTTP class there we didn't have to worry
25:44 - about this because these observables
25:46 - terminate when we get the response from
25:49 - the server because in those situations
25:51 - we get only one response object from our
25:53 - server but here when working with
25:55 - firebase we don't have one response from
25:58 - the server every time there is a change
26:00 - in the notes we have subscribed to
26:02 - you're going to be notified so in the
26:05 - next lecture I'm gonna show you how to
26:06 - prevent memory leaks in your
26:08 - applications
26:09 - when using firebase hi thank you for
26:14 - watching my angular tutorial if you
26:16 - enjoyed this video please like it and
26:18 - share it with others also you can
26:20 - subscribe to my channel for free new
26:23 - videos every week this video is part of
26:26 - my complete angular course with almost
26:28 - 30 hours of high quality content where
26:31 - you learn everything about angular from
26:33 - the basic to the advanced topics all in
26:36 - one course so you don't have to jump
26:37 - from one tutorial to another in case
26:40 - you're interested you can get this
26:41 - course with a big discount using the
26:43 - link in the video description but if not
26:45 - that's perfectly fine continue watching
26:47 - as the next section is coming up

Cleaned transcript:

so far our focus has been purely on the front end but as you know most if not all angular applications need a backend now we can build it back end yourself but then requires learning a different set of technologies and spending a lot of extra time another approach is to use firebase which is a platform provided by Google for building the backend of web and mobile apps so in this section I'm going to show you how to use firebase as the backend of your angular applications or storing data by the end of this section you'll be able to perform crud operations that means you'll be able to create read update and delete objects in a firebase database now before we get started I just want to let you know that this section is purely an introduction to firebase and you're not going to be a firebase expert by the end of this section because in this course our focus is mostly on the front end and firebase is a backend platform plus there is more to firebase than we can cover in one section so if you want to learn more you can look at the additional resources that I've provided at the end of this section now let's get started so at the beginning of this course we looked at the architecture of web applications you learned that each web application consists of two parts the front end which sits on the client and we use angular to build it and the back end which sits on the server and we use a different set of languages and frameworks to build it this frontend talks to the backend to get or save data via a bunch of HTTP services behind these HTTP services we have one or more databases such as sequel server Raven and so on this is the architecture behind most web applications out there now as an angular or a frontend developer you don't have to worry about building the backend that's the job of a backend or a full stack developer but that aside building backends is time consuming and that's where firebase shines with firebase you can build a backend for your angular apps in less than a minute you get a super fast scalable and real time database in the cloud and a library to talk to this database in your angular apps on top of that you also get authentication cloud messaging for sending notifications storage for storing your files and analytics many modern and popular applications out there use firebase as their backend the beauty of firebase is that it provides libraries for iOS Android JavaScript and C++ so today you can use it as the backend of your angular app but tomorrow you may decide to build a mobile app for iOS or Android then all you have to do is to build that new client app and let that app talk to your backend and with this you can quickly deliver a crossplatform solution to your users now what about the pricing you might be thinking all these amazing services they should come with a big price tag right well not really we can get most of these features for free and if your application grows you can either pay $25 a month or use their payasyougo subscription model to learn more about their pricing head over to firebase at google.com slash pricing alright now let's create our first firebase project so I want you to head over to firebase Google comm log in and then on the navigation bar you're going to see a button called go to console alternatively you can simply head over to console dot firebase at google.com once you log in on this page you can create a new firebase project so scroll down add a project let's give our project a name I'm gonna call this firebase demo then select the country or region and create project okay here we are on the homepage of our new project you can see that you can add firebase to your iOS Android and web applications and when you click these we can see the documentation about the steps involved now the documentation for adding this to a web app is just a general JavaScript documentation adding firebase to an angular app is a slightly different and that's what I'm going to show you in this section now let's have a quick tour of some of the features you get here so on the left side on this sidebar we have our database so this is where all our data will be stored now if you have any experience with databases you know that in general we have two types of databases relational databases and no sequel databases which are also called document databases in relational databases we have tables and relationships and each table has one or more records we refer to the combination of these tables and their structure as the schema of the database in know sequel databases we don't have schema in fact we don't have any tables we don't have any columns our database is essentially a tree of nodes each node is a key value pair now this value can be a simple primitive value or it can be a complex object MongoDB is an example of a no sequel database firebase databases are also no sequel databases let's have a look at an example so here we have the root node of our database under this I'm gonna add a node called courses so this is for listing all the courses in our application now you can see that each node has a name and value now I don't want to assign a primitive value to this node I want to make this a complex object so I click this plus here and you can see now we have a child under courses again this child has a name and value I'm gonna set the name to one and the value to course one you so now you see we have a tree of nodes in our database I'm gonna add another child node under courses so here plus I'm gonna set the name to two and the value to course two now one thing I want you to pay attention to here is that each node in this database can have a different structure that's why we refer to this kind of database as a no sequel or schemaless database here is an example so all our courses have an ID and a name now I'm gonna add another course here I'm gonna set the ID to three but for the value I'm not gonna use a string like course three I want the value to be complex object so I'm gonna click this plus now we have a child under this node here in this child node I'm gonna set the name to title and the value to course three now look at the result so our third course is an object and this object has a property called title you can add another property here under three let's set the author Marsh a Madani now we have two properties and let's add one more here so let's set the price this time I'm gonna use a number let's say 150 dollars so what I want you to note here is that each node in this database can have a different structure our first two courses are simple key value pairs values or strings but our third course it's value is a complex object with three properties author price and title if you have never worked with this kind of database before swiping new to you it might be a little bit scary but in fact this is extremely powerful super fast and super scalable but the downside of this structure is that it's not optimized for reporting so unlike traditional relational databases where we can join multiple tables and run complex queries against them we cannot do that here so if that's what you need in your applique perhaps you need to use a relational database or if you want to use firebase or another know sequel database like you can use this as your main database but set up some background job that takes all the data from this no sequel database into a relational database for reporting so this is our firebase database next we're going to get back to our angular project install firebase and work with this database in this section I'm gonna start on a new angular project so let's generate a new project using angular CLI ng new and call this firebase demo all right our project is ready now let's go to firebase demo here we need to install a couple of node packages so NPM install the first one is firebase which is the standard firebase library written in JavaScript and the second one is angular fire two which is a library for working with firebase and an angular 2 plus app ok now add the save flag okay all the packages installed successfully now let's open this project in vs code now here under the source folder we have environments and here we have two files or storing our configuration settings for the production and development environment so open up environment es so you can see here we are exporting an object called environment and this object has a simple property called production that is set to false here we need to copy some settings about our firebase project so back on firebase console if you go to the overview page for your project back here click this button at firebase your web app now here on this config object you can see a bunch of properties such as API key ask domain database URL and so on we're going to copy all these properties only the properties nothing else here okay so copy these now back here add a comma here we add a new key firebase set it to an object and then paste all those properties that we copied like this so this is our firebase database for the development environment in a real world scenario you should have a separate firebase backend for your production environment so then you go to firebase create another project that project has its own settings then you would copy all the settings and environment prod the TS so it's a very similar file but the production property here is set to true okay now don't worry about these various environments we're going to look at them later when it comes to deployment so let's continue adding firebase to this project next we need to go to app add module here in the imports array we need to import one or more modules of angularfire but for some reason that I don't know my auto import plugin doesn't work here so we need to explicitly import these modules on the top import angular fire module from angular fire to then in the imports array we add angular fire module dot initialize app now here we need to pass the configuration object for our firebase database so we need to import the environment object that was exported in the other module so environment auto import let's look on the top so this is our environment object imported from the environments folder slash environment module and here we have all the settings for our development environment now back here in the imports array this environment object has a property that we just added called firebase and this is an object that includes all the settings for firebase okay now this angularfire module is the main module in angular fire they are additional modules such as angular fire database and get fire authentication and so on so here because we're going to work with the database we should also import the angular fire database module so once again on the top we need to import another module this one is called and get a fire database module and we're going to import this from angularfire 2 slash database okay then we add this to the import array after initializing the app so angularfire database module now we have successfully installed firebase and angular fire in our project next I'm gonna show you how to get the data from our firebase database so earlier we added these courses in our firebase database we have three courses the first two are simple key value pairs the values are a string and the third course it's value it's a complex object with three properties so you can see that in a no sequel database each node can have a different structure now this is powerful because it allows you to quickly build your database without having a schema it allows you to go faster it increases your productivity but also on the flip side if you don't manage it properly you can run into issues so let's see how we can read these courses and display them on a page back in the terminal first I'm gonna serve our application now here in the ESCO let's go to app that component so here we have only one component and I'm gonna display all our courses here in a realworld scenario you would have a separate component like courses component okay now we don't need this title here let's delete this we add a constructor here we need to inject one of angularfire classes now once again my auto import plugin cannot recognize this so we need to go on the top and explicitly import angular fire database note that this is angular fired database not angular fire database module we only imported the module in app module okay now if your we need to import this from angular fire to slash database okay now let's add this to the constructor so DB of type angular fire database now this object has a couple of methods list for reading a list of objects and an object for reading one object here we want to get a list of objects so let's call this method as the first argument we need to pass the path to our node in firebase so starting from the root we have another note here called courses so this is the past two our courses note now look at the return type of this method it returns firebase list observable so firebase lists observable is like an observable but it has additional methods that you're going to learn about in this section so we're going to treat this like an observable you're going to subscribe to it here we get the courses and we can use this to set a field in this class so let me define courses here it's an any array and then in the SUBSCRIBE method we can set they start courses for these courses but also I'm going to show this in the console they start courses that's it now let's test the application up to this point so back in the browser okay here's our home page let's take a look at the console we have an error permission denied at courses client doesn't have permission to access the desired data because by default only authenticated users can read from or write to your firebase database now in this section we're not gonna worry about authentication that's more of an advanced topic that I have covered in my other angular course called build enterprise applications with angular so let's simplify things and focus on the fundamentals' act our firebase console on the database page on the top you can see this tab called rules so here we have a couple of rules for reading and writing data as you can see these rules are defined as a JSON object this object has two properties dot read and dot write and their value is an expression here us not null is something that firebase understands it means only users who are authenticated can read and write so I'm gonna temporarily change this to true that means anyone can read from this database now in a realworld scenario you may want to open up read access to certain notes in your database so you can allow anonymous users to read from these nodes but you can have other nodes that have higher level of security perhaps only authenticated users or users within a specific role can read from these nodes again we don't want to worry about this now so let's move forward now every time you make a change here you need to publish your changes ok done now back in our angular app refresh this page and look at the console so this is what we get from firebase an array of three objects let's take a look you can see each object has two properties dollar value and daughter key now look at the second object here once again we have dollar value and dollar key but let's take a look and the third object this is our third course that has additional properties look at the structure of this object here we have additional properties like author price and title note that we no longer have the dollar value property so it's not like daughter value is a complex object and that object has these properties no it's not like that these properties are part of our course object now if I want to display the name of these courses I'm gonna have some difficulty because the title of the first two courses is stored and the dollar value property but in the third course the title is stored in the title property so that's why I said but if you don't manage your no sequel database properly you're going to run into issues so back in our firebase database I'm gonna delete the third node delete and add a new node that is consistent with the other nodes on their courses so three and course three okay now let's display these on our angular app so let's go to app but component that HTML delete all the markup here we need a ul and Li we're going to use the ng 4 directive let course of courses and here we use interpolation course dot dollar value back in the browser and we successfully read data from our firebase database now let me show you my favorite feature of firebase firebase databases are realtime that means any time the data in the database is modified the changes are reflected in our client apps automatically so here's an example currently we have three courses now I'm going to go back to our firebase console and add a new course here for course for now back to our angular app course for is here and I didn't even refresh the page so the data appeared here automatically similarly if I go back to our firebase console and delete this course now back in our angular app look the course is gone and we didn't write any code for implementing this kind of behavior all we did was subscribing to a list in firebase without firebase if we wanted to implement a realtime app we would have to write a lot more code for it so this is something that you get with firebase outofthebox this is especially important if you have an application that involves multiple users so as one user modifies the data the changes are immediately visible to other users a realworld example of this is if you want to build a chat application firebase is going to be your best friend because as soon as a user sends a message the other user is going to see it immediately so in the last lecture you learned that firebase databases are realtime now let's take a closer look at this feature so back in our angular app here we have three courses and I've cleared the console now let's go back to our firebase database here I'm gonna add a new course for course for now back in our angular app course for is here and then let's take a look at the console so when we added the fourth course we got a new array of all the courses from the server let's try this one more time I'm gonna go back here this time I'm gonna delete course for now back in our angular app course four is gone let's take a look at the console we got a new array of courses this array has three elements so this is what I want you to note here every time you make it change to the courses node whether we add an object or remove an object or modify an existing object we get the entire array of courses from the server the reason for this is because we have subscribed to the courses list in our database now in terms of the performance you don't have to worry about this even though we get the entire list firebase is optimized for this kind of scenarios but there is something tricky you need to be aware of currently we have only one component in this application app component right now in a real world application we're going to have tens or hundreds of components and we're going to have routing and navigation so the user may navigate to the courses page and on that page we're going to have a subscription to the courses list and firebase now if they navigate away from that page this subscription is still in memory so every time something happens to that node you're going to get the list of courses from the database even though the user is not on the courses page so if you don't manage this properly you're going to end up with memory leaks that means your application is going to consume more memory than it needs now to clarify in the section about consuming HTTP services with subscribe to the observables returned from the HTTP class there we didn't have to worry about this because these observables terminate when we get the response from the server because in those situations we get only one response object from our server but here when working with firebase we don't have one response from the server every time there is a change in the notes we have subscribed to you're going to be notified so in the next lecture I'm gonna show you how to prevent memory leaks in your applications when using firebase hi thank you for watching my angular tutorial if you enjoyed this video please like it and share it with others also you can subscribe to my channel for free new videos every week this video is part of my complete angular course with almost 30 hours of high quality content where you learn everything about angular from the basic to the advanced topics all in one course so you don't have to jump from one tutorial to another in case you're interested you can get this course with a big discount using the link in the video description but if not that's perfectly fine continue watching as the next section is coming up
