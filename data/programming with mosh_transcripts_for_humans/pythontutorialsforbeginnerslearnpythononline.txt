With timestamps:

00:01 - In this course you're going to learn everything
00:03 - You need to get started with Python just be aware that I've designed this course for beginners
00:08 - So if you have some programming experience check out my other Python course for developers
00:13 - You can see the link on the top right corner of this video
00:16 - so
00:17 - Python is the world's fastest-growing and most
00:21 - popular programming language not just amongst software developers, but also amongst
00:27 - mathematicians data analysts
00:29 - scientists
00:30 - accountants network engineers and even kids
00:33 - In fact, it's the ideal programming language to learn first
00:37 - But what makes Python so special here are six reasons with Python
00:42 - You can solve complex problems in less time with fewer lines of code than many other languages
00:49 - That's why huge companies like Google
00:52 - Spotify Dropbox and Facebook have embraced this beautiful and powerful language. Here is an example
00:59 - Let's say we want to extract the first three characters of the text. Hello world
01:05 - This is the code we would have to write in c-sharp
01:08 - This is how we would do this in JavaScript. And here's how we would do it in Python
01:13 - See how clean and simple the language is and that's just the beginning
01:18 - Python is a multi-purpose language and you can use it for a wide range of jobs such as data analysis AI and machine learning
01:26 - writing automation scripts
01:28 - building web mobile and desktop applications
01:31 - As well as software testing or even hacking so if you want a high-paying long lasting career in any of these areas
01:39 - Especially AI and machine learning
01:42 - Python is the language to put those opportunities at your fingertips. In fact, according to indeed.com
01:49 - The average salary of a Python developer in the US was over one hundred and fifteen thousand dollars in March
01:57 - 2018
01:58 - And here are four more reasons that make Python the most desirable language
02:03 - Python is a high-level language so you don't have to worry about
02:07 - Complex tasks such as memory management as you do in C++
02:12 - It's cross platform, which means we can build and run Python apps on Windows
02:17 - Mac and Linux it has a huge community
02:20 - So whenever you get stuck
02:21 - There is someone out there to help and it has a large ecosystem of libraries frameworks and tools
02:29 - Whatever you want to do. It is likely that someone else has done it before because python has been around for over 20 years
02:36 - There are two versions of Python out there Python 2
02:40 - Which is the legacy version of Python and is going to be supported until year 2020 and Python 3
02:47 - Which is Python for the future in this course, you're gonna learn Python 3
02:51 - Hi, my name is Muhammed Ani, and I'm going to be your instructor in this course
02:55 - I'm a software engineer with 18 years of experience
02:59 - And I've taught way over a million people how to code or how to become top
03:05 - professional software engineers
03:06 - To learn more about me and my courses head over to code with mass comm. Alright now, let's get started
03:23 - All right now we were ready to download and install Python
03:26 - The first thing I want you to do is to open up your browser and head over to python org on
03:33 - This page under the downloads. You can see the latest version of python currently. The latest version is
03:39 - 3.7
03:40 - Chances are in the future when you're watching this video. There is a newer version available
03:44 - Don't worry, all the materials in this course will continue to apply with the future versions of Python. So go ahead and download Python
03:55 - Then run it if you're on Windows, we're going to see this checkbox here add
04:00 - Python to path this is very important. Make sure to take it. Otherwise, you're not going to be able to follow the course
04:07 - So now go ahead and install it
04:12 - Now let's verify that we have installed Python properly if you're on Windows here in this search bar type
04:19 - CMD which is short for command prompt
04:24 - Dr. In command prompt type Python
04:28 - You can see we have successfully installed Python version
04:32 - 3.7 now to exit press ctrl-z and then enter
04:39 - If you're on Mac, press command and space this opens up the spotlight search
04:45 - So here type terminal
04:50 - Terminal and Mac is like command prompt on Windows now Mac and Linux by default come with an older version of Python
04:56 - That is version 2. So if you type Python you can see Python 2 here. Let's start what we want
05:02 - so press control D to exit and then run Python 3 and
05:07 - This verifies that we have successfully installed Python 3.7
05:20 - So this environment you see here is what we call Python interpreter
05:24 - Which is basically a program that executes Python code we can type our Python code in a file and give it to this
05:31 - Interpreter or we can type our code directly here in this interactive shell
05:36 - So here we can write an expression like 2+2 in
05:40 - Programming an expression is a piece of code that produces a value
05:44 - So here when we add two plus two we get a value that is why we refer to this piece of code as an expression
05:52 - So enter we get four. Let's try a different kind of expression
05:56 - Let's see if two is greater than one
06:00 - We get true, which is an example of a boolean value. You're gonna learn about these boolean values in the next section
06:06 - Now what if we type 2 is greater than 5
06:11 - Enter we get false. So in programming, we have true and false which are similar to yes, and no in English
06:19 - Now what if we type 2 is greater than but we don't add a second value here. Just press Enter
06:26 - We get a syntax error in
06:29 - Programming syntax means grammar. So just like we have the concept of grammar in the languages that we speak
06:35 - We have the exact same concept in programming if we write a sentence that is not grammatically, correct?
06:41 - Chances are some people may not understand that sentence. So in this example, we have this expression, which is incomplete
06:48 - It doesn't have the right grammar or syntax
06:51 - That is why Python interpreter is complaining by returning an error
06:56 - So this interactive shell is a great way to quickly experiment with a bit of Python code
07:01 - But that's not how we build real world applications to do that
07:05 - We need a code editor and that's what I'm gonna show you in the next lecture
07:17 - When it comes to typing Python code you have two options
07:20 - You can use a code editor or an IDE
07:24 - Which is short for integrated
07:26 - Development environment an IDE is basically a code editor with some fancy features like auto completion
07:33 - Which means as you type code this feature helps you complete your code so you don't have to type every character by hand
07:40 - It's a productivity boosting feature
07:42 - It also gives you additional features like debugging which means finding and fixing bugs in your programs testing and so on
07:50 - For both code editors and IDs are so many options out there
07:54 - The most popular code editors are vs code atom and sublime
07:59 - You can use the code editor that you prefer in terms of the idea is again
08:04 - There are so many options out there
08:05 - The most popular one is pie chart in this course
08:09 - I'm gonna use vs code or Visual Studio code because that's my favorite code editor later in the course
08:15 - I will show you how to install a plugin or an extension that will convert vs code to a powerful ID
08:22 - So before going any further head over to code that visual studio comm and download the latest version of vs code
08:38 - Now it vs code open on the top from the file menu go to open
08:44 - And somewhere on your desk create a new folder
08:48 - Let's call this folder. Hello world and
08:52 - Then open it
08:54 - Beautiful now click this icon on the top this opens up the Explorer panel in this panel
09:01 - You can see all the files and folders in your project. So let's add a new file and
09:07 - Call that app that PI. So all our Python files should have the PI
09:13 - extension press Enter
09:16 - now, let's close this and
09:18 - type a bit of Python code in this lecture
09:21 - We're gonna use one of the built-in functions in Python called print so in Python
09:26 - We have a lot of built-in functions for performing various kinds of tasks
09:30 - For example as a metaphor think of the remote control of your TV on this remote control
09:35 - You have a bunch of functions like turn on turn off change the channel change the volume and so on
09:41 - These are the built-in functions and your TV
09:44 - We have the same concept in Python and many other programming languages
09:49 - so one of these built-in functions that comes with Python is print and
09:54 - We can use this to print something on the screen now whenever you want to use a function you should open and close
10:02 - parenthesis in
10:04 - Programming we say we're calling the print function calling a function means executing it
10:10 - Now let's display the hello world message on the screen whenever you want to work with text. You should put your text in between
10:18 - quotes either double quotes or single quotes
10:22 - now I'm gonna go with double quotes and
10:25 - add hello world and
10:29 - Then put a happy Persian cat here
10:31 - Beautiful save the changes with command and s on Mac or ctrl + S on Windows
10:38 - Now to execute this code we need to go back to command prompt on Windows or terminal on Mac
10:44 - But the good news is that we don't have to switch programs here in vs code
10:49 - We have an integrated terminal. So press ctrl + backtick
10:54 - That is the key before number 1 on your keyboard
10:58 - That is just below the escape button
11:01 - So this is our integrated terminal now you front windows type
11:05 - Python if you're on Mac or Linux type Python 3 and next to that at the name of our file
11:12 - that is up at PI and
11:15 - Here's our hello world message in the terminal beautiful
11:19 - Now, let's take this to the next level and make it a little bit more interesting
11:23 - let's close this terminal window by pressing ctrl and backtick and
11:28 - Add a second line of code
11:30 - So one more time print
11:33 - This time let's add quotes with a star in between them
11:37 - Now, let's see if you want to repeat this star ten times. So here we can multiply this
11:43 - By 10 save the changes
11:46 - open up the terminal and run our program and
11:50 - You can see this star is repeated 10 times
11:54 - So as you see the instructions on our program are executed from top to bottom in order in the next lecture
12:02 - I'm going to show you how to convert this vs code to a powerful IDE for building Python applications
12:15 - In this lecture
12:16 - I'm gonna show you how to convert vs code to a powerful IDE by using an extension called
12:22 - Python with this extension or plugin we get a number of features such as linting which basically means
12:29 - Analyzing our code for potential errors. You also get debugging which involves finding and fixing errors
12:36 - We'll look at this later in the course
12:38 - We also get auto completion which basically helps us write code faster
12:43 - So we don't have to type every character we get code formatting which is all about making our code clean and readable
12:50 - Just like how we format our articles
12:53 - newspapers books to make them clean and readable
12:56 - We get unit testing which involves writing a bunch of tests for our code
13:01 - we can run these tests in an automated fashion to make sure our code is behaving correctly and
13:07 - finally we get code snippets which are
13:10 - Reusable code blocks that we can quickly generate so we don't have to type them all by hand
13:15 - Now don't worry about memorizing any of these as we go through the course. You're going to learn about these features
13:21 - Now here in vs code on the left side. Click this icon
13:25 - This opens the extensions tab. So these are the extensions that we can install in vs code to bring in additional
13:32 - Functionality here under the recommend the tab
13:35 - You can see the python extension if you don't see this simply type Python here on the top
13:42 - and here's the extension to go ahead and install this and
13:47 - Then you'll have to reload yes code
13:53 - Now here on the bottom right corner you can see this message
13:56 - Linter pilant is not in stock. So as I told you before linting is about finding potential errors in our code
14:04 - Linter is a program or a tool that analyzes our code and finds these potential problems now for Python
14:11 - There are several interceptor pilant is one of the most popular ones that this Python extension uses by default
14:19 - So we need to go ahead and install pylons as well now to do this first. We need to change our Python environment
14:26 - So if you look here on the bottom left corner, you can see the current python that is used in vs code
14:31 - That is python 2 point 6 point 9 on my machine chances. Are you see a different version here? So click here and
14:40 - In this list, make sure to select
14:42 - python 3 point 7
14:45 - So this changes our Python environment to Python 3 point 7 and then we can install pilant by clicking this button
14:56 - Ok pilant is installed beautiful in the next lecture. I will show you how linting works
15:10 - In this lecture, I'm gonna show you linting and action
15:13 - so let's start by writing some invalid code like this print space with no parentheses and
15:20 - Then hello work
15:22 - Earlier, I told you that print is a built-in function and whenever you want to use or call a function
15:28 - You should always use parentheses now to be more precise
15:31 - This is actually valid Python 2 code, but because we're using Python 3 here
15:36 - This is invalid code from Python 3 point of view
15:40 - So now when I save the changes you can see this red underline here. Let's hover our mouse
15:47 - Over this underline you can see this tooltip
15:50 - It's coming from Pyland
15:52 - And here's the error message missing parentheses in call to print did you mean print with parentheses?
15:58 - So this is the benefit of linting as you're writing code, you can see potential problems in your code
16:04 - You don't have to wait to run your program to see these errors
16:08 - so now if we put
16:11 - Parentheses here and save the changes you can see that red underline is gone. Let's look at another error
16:20 - Let's type two plus and then save the changes
16:23 - Earlier, we run this code in Python interpreters interactive shell there. We got a syntax or grammar error
16:32 - So if you hover your mouse here one more time
16:34 - You can see pylons is telling us that this is invalid syntax or invalid grammar
16:40 - It's like an incomplete sentence. So this is linting in action
16:44 - Now let me show you a couple useful shortcuts here on the top. Look at the View menu
16:51 - Here we have this problems menu
16:54 - Look at the shortcut on Mac is shift command and M on windows is probably shift control M
17:01 - So as you're working with vs code try to memorize these shortcuts because they really help you write code faster
17:08 - Now, let's take a look
17:10 - At these problems panel. So this problems panel lists all the issues in your code in one place
17:17 - So if you have an application with multiple files, this is really useful because some of those files may not currently be open
17:24 - So this linter Pyland will analyze all your files and if it finds any issues
17:29 - It will list them here in the problems panel. Now, you can also put this on the right side of your screen
17:35 - So let's put it here
17:37 - So as you write code these problems will appear here. Now. Let's fix this issue
17:42 - so I'm gonna add three here save the changes and you can see the problem disappear and
17:49 - One last thing before we finish this lecture
17:51 - Once again on the top, let's go to the View menu. The first item is command palette
17:57 - This is a very important feature in vs code
18:00 - Once again, look at the shortcut that is shift command and P on Mac or shift control P on Windows
18:08 - This command palette you can execute various commands in vs
18:12 - Co if you type lint here you can see all
18:15 - commands related to linting as you can see all these commands are prefixed with Python because these
18:23 - Commands come with a Python extension that we installed earlier
18:26 - So these are additional features available to us in vs code. The first command here is select linter
18:34 - In this list, you can see various linters available for pilot
18:38 - So as you're reading tutorials or talking to other people
18:41 - You will hear about linters such as flake ate my pie pep 8 and so on
18:47 - Different developers prefer different linters. I personally prefer pilant
18:52 - That is the most popular one and that's the default linter set and the Python extension of vs code if you're adventurous
18:59 - You can try using other linters on your own the difference between these linters is in how they find and report errors
19:07 - Some error messages are more meaningful or more friendly the others are more ambiguous
19:13 - So that's all about linting in the next lecture. We'll talk about formatting code
19:26 - In Python community we have a bunch of documents called Python
19:31 - enhancement proposals or peps here on Google if you search for Python peps
19:37 - You can see the list of all these paps
19:40 - under python.org slash dev slash paps
19:44 - Let's have a quick look here
19:48 - So here are the paps you can see each PAP has a number and a title
19:53 - the one that is very popular amongst Python developers is pep 8
19:57 - which is a style guide for Python code a
20:00 - Style guide is basically a document that defines a bunch of rules for formatting and styling our code if you follow these conventions
20:08 - The code that you write will end up being consistent with other people's code
20:13 - now if you have time you can go ahead and read this PAP 8 documentation, but if not,
20:18 - Don't worry because throughout this course I'm gonna explain the key things in pep 8 in this lecture
20:24 - I'm gonna show you a tool that helps you automatically format your code according to pap 8
20:31 - So back in vs code, let's write some Python code
20:34 - x
20:35 - Equals one here. I'm declaring a variable and setting it to one if you're not familiar with variables. Don't worry in the next section
20:42 - You're gonna learn about them
20:44 - So according to pep 8 this code is considered ugly
20:48 - Because by convention we should add a space around this equal sign or the assignment operator
20:55 - Now since you're starting out with Python, you probably don't know these rules
20:59 - So let me show you a tool that helps you automatically format your code. Let's revert this back to its original state
21:05 - Now we need to go back to the command palette remember?
21:09 - So it's right here under view and the shortcut is shift command and P
21:16 - Here if you search for format, you can see this command format document the first time you execute this command
21:23 - You're going to see this message here
21:26 - Formatter Auto kept 8 is not installed. So there are a bunch of tools for formatting Python code
21:32 - The most popular one is auto kept 8 and this is the tool that this Python extension
21:38 - We installed uses to format our code. So let's go ahead and install this
21:44 - Good
21:46 - Now one more time, let's open up the command palette and execute format document
21:52 - See is tool automatically formats our code beautiful. Let's take a look at another example
21:58 - I'm going to declare another variable Y and set it to two and a variable with a long name like unit
22:05 - Underlined price. I'm set this to 3
22:07 - Now some developers have this habit of formatting their variable declarations like this
22:14 - So they put all these
22:17 - Equal signs in the same column according to pepp 8 this is considered ugly
22:22 - So once again, let's format our code
22:26 - That is better beautiful. Now, let me show you a trick
22:30 - Opening up this command palette and searching for format document every time is a little bit time-consuming
22:36 - So I want to show you how to have your file automatically formatted as soon as you save the changes
22:43 - On the top. Let's go to the code menu
22:46 - preferences and
22:48 - settings
22:50 - Here in the search box search for format on save
22:55 - So we have this option editor format unsaved take this
23:00 - Now back to app top I I'm gonna change the formatting of these lines make them really ugly
23:07 - Now as soon as I save the changes
23:10 - You can see my code is reformatted beautiful
23:22 - So you have learned that in order to run this Python program
23:25 - We'll have to open up the terminal window and run Python on windows or Python 3 on Mac and an app that pi
23:33 - This is a little bit tedious. So let me show you a shortcut
23:38 - Once again, let's go to the extensions panel here search for code runner
23:45 - There are multiple code runners out there the one that I'm talking about is this one with the yellow icon
23:52 - So go ahead and install this and then reload yes code
23:59 - Now instead of opening up the terminal and manually typing Python after pi
24:04 - All you have to do is to press ctrl, alt and in
24:10 - You can see the output here beautiful just be aware of that
24:13 - If you make any changes, you'll have to save the changes before using this shortcut
24:18 - Otherwise you're going to see the old result now. There is a tiny problem here
24:23 - So you can see this is the command that is executed to run this Python program
24:28 - So by default this command is using Python - U and here is the name of our file if you're on Windows
24:36 - That's perfectly fine
24:37 - But if you're on Mac, you know that Python refers to Python - here we want to change this to Python 3
24:43 - This is very easy
24:45 - Once again on the top under the code menu, let's go to preferences
24:50 - settings and
24:52 - then here
24:54 - Under this dot go to open settings that JSON
24:59 - Now here in the search bar type code - runner dot
25:06 - executors map
25:08 - So these are the default settings
25:10 - used by this code runner extension
25:12 - You can see this extension support executing code in a lot of languages like JavaScript Java and so on
25:19 - now if you scroll down
25:21 - Here we can see Python and in front of that you can see the command that is used to execute
25:26 - Python code we need to change this
25:28 - However, we cannot change the default settings. We should change the user settings. So on the right side
25:34 - after the last setting type a comma and then
25:38 - in quotes type code - runner dot
25:42 - executors map and then press enter
25:45 - This will automatically copy all the settings on the left side to the right side
25:50 - Now we can easily
25:52 - Change one of this. So here's Python. Let's change the command to Python 3
26:00 - You only have to do this if you're on Mac, and by the way
26:04 - Sorry, if I have mentioned Windows and Mac a few times throughout this course, that's pretty much it
26:08 - We are not going to differentiate between Windows and Mac in the future. So save the changes and we're done
26:22 - So I've got a few questions for you guys
26:24 - I want to see if you have been really paying attention to this video or not
26:27 - You better have so here is the first question for each question. I want you to pause the video
26:33 - Think about the answer for a few seconds when you're ready continue watching. So here's the first question. What is an expression?
26:41 - An expression is a piece of code that produces a value
26:46 - Here's an example of an expression. What do you think is the value of this expression?
26:51 - Well here we have this string. We're multiplying this by 3
26:57 - So the result will be a string of three asterisks like this
27:03 - Here's another question. What is a syntax error a
27:07 - syntax error is a kind of error that is due to bad syntax or bad grammar in the code and
27:13 - Finally the last question. What does a linter do a
27:18 - Linter is a tool that checks our code or potential errors mostly in the category of seen tactical errors
27:25 - So if you have grand medical issues in our code, the linker will tell us before running our program
27:30 - Okay, that's it for now
27:32 - if you like more quizzes and programming exercises look at the link below this video and if you enjoyed this video
27:39 - I hope you have please support me by giving a thumbs up
27:42 - Please like this video and share it with others in the next section. We're going to look at the fundamentals of Python
27:51 - You
27:58 - Well, hello Marsh here thank you for watching my Python tutorial
28:02 - I wanted to let you know that this tutorial is the first two hours of my
28:06 - Complete Python course where you will learn how to use Python in real-world scenarios such as data analysis and visualization
28:14 - Automating repetitive boring tasks that involve working with files and folders
28:19 - spreadsheets PDFs data compression sending emails web crawling
28:24 - Consuming API is like Yelp to get information about businesses and much much more. This course comes with a 30 day
28:31 - No questions asked money back guarantee and a certificate of completion
28:35 - If you're interested, click the link below this video to access the course
28:47 - Let's start this section by a discussion of variables which are one of the core concepts in programming
28:53 - We use variables to store data in computer's memory. Here are a few examples
28:58 - I'm gonna define a variable called students under line count and setting it to a
29:04 - Thousand when we run this program
29:06 - Python interpreter will allocate some memory and store this number thousand in that memory space
29:13 - Then it will have this variable
29:16 - reference that memory location
29:19 - So this variable is just like a label for that memory location
29:23 - We can use this variable or this label anywhere in our program to get access to that memory location and the data is stored there
29:31 - so now if we print
29:34 - students count and run our program we will get
29:38 - The number of thousand so this is the basic of variables
29:42 - Now what kind of data can be a store in computer's memory? Well, we have several different kinds of data in this section
29:50 - We're going to look at the built-in primitive types in Python
29:54 - primitive types can be numbers
29:57 - boolean and strings
29:58 - Let me show you so here we have a whole number we refer to this as an integer in programming
30:05 - We can also have numbers with a decimal point. Let's take a look
30:09 - So rating we set this to four point nine nine
30:13 - this is what we call a
30:15 - float
30:15 - Or a floating-point number and this terminology is not specific to Python in the future when you learn a new
30:22 - Programming language. You're going to hear these terms again
30:25 - Now, let's take a look at an example of a boolean
30:28 - is
30:30 - Published we set this to true or false
30:35 - These are examples of boolean values in programming
30:38 - So boolean values can either be true or false and these are exactly like yes and no in English
30:45 - Later in the course. You will learn that will use these boolean values to make decisions in our programs
30:52 - For example, if the user is an admin user perhaps we want to give them extra permissions
30:58 - So these are the boolean values now take into account that Python is a case sensitive language
31:04 - Which means lower case and upper case characters have different meanings
31:08 - So boolean values should always start with a capital letter
31:12 - Like what you see here if we type false or false
31:16 - These are not accepted boolean values in Python
31:20 - only what you see here is a valid boolean value so false or true and
31:25 - Finally, let's take a look at an example of a string. So course under line name
31:30 - We set this to your string like Python
31:34 - Programming so string as I told you before is like text
31:38 - Whenever you want to work with text in your programs, you need to surround your text with quotes
31:43 - So these are the basics of variables
31:53 - So these are the variables from the last lecture
31:56 - Now, I've got a question for you. There are four things that have consistently used in this program
32:01 - Can you spot them if you want you can pause the video think about this for a few seconds and then continue watching?
32:09 - So here are those four things the first thing is that all my variable names are descriptive and meaningful
32:17 - So students count represents the number of students for a course, or course name
32:23 - Clearly explains that this variable holds the name of a course
32:26 - One of the issues that I see a lot amongst beginner programmers is that they use mystical names for their variables?
32:34 - Something like this
32:35 - CN has ensured for course name when someone else reads this code
32:40 - They have no idea what CN stands for or they use variable names like c1 when I look at that code
32:46 - I wonder where is c2 and what is the difference between c1 and c2 so these variable names are very mystical
32:54 - That's a bad practice. Make sure your variable names are always descriptive and meaningful because this makes your code more maintainable
33:02 - now there are times that you can use short variable names like X Y Z if you're dealing with things like
33:10 - Coordinates, so that's an exception now
33:13 - The second thing that I have consistently used in this code is that I have used lowercase letters to name my variables
33:20 - So here we don't have
33:22 - Course name all in capital or in title case all letters are lowercase
33:29 - right
33:30 - Let's delete this
33:32 - the third thing that I've consistently used here is that I have used an
33:37 - underscore to separate multiple words
33:39 - And I've done this to make my variable names more readable because in Python we cannot have a space in
33:46 - Variable names so we cannot have course name and if you put these two words together
33:51 - It's a little bit hard to read
33:53 - That's why we use an underscore and the fourth thing that I have used consistently here is that I have put a space
34:00 - around this equal sign
34:02 - Again, that's one of the issues. I see a lot amongst beginners. They write code like this
34:09 - This is a little bit ugly. This is what we call dirty code dirty
34:14 - Stinky smelly you should write code that is clean and beautiful
34:18 - So other people can read it like a story like a newspaper article
34:23 - It should be formatted properly and that's why we have pep 8 in Python
34:28 - Now the good thing is if you forget these rules when you save the changes
34:32 - Auto-pay 8 kicks in I didn't automatically reformat your code
34:36 - But that aside you should always give yourself the habit of writing clean code without relying too much on the tooling
34:44 - So these are all the best practices about naming your variables next. We're going to look at strings in more detail
34:58 - So here we have this course variable set to Python programming as I told you before whenever you work with text
35:04 - You should surround your text with quotes. You can either use double quotes or single quotes
35:10 - That's more of a personal preference, but quite often we use double quotes
35:15 - You also have triple quotes and we use them to format a long string
35:20 - For example if you have let's say a variable message
35:25 - That is the message. We want to include in the body of an email
35:30 - You can use triple quotes to format it like this
35:33 - Hi, John
35:35 - This is Marsh from code with marsh comm blah blah blah. So that's when we use triple quotes
35:44 - Now we don't need this in this lecture. So delete. Let me show you a few useful things you can do with strings
35:51 - First of all, we have this built-in function in Python for getting the lengths of strings
35:57 - What is a function a function is basically a reusable piece of code that?
36:03 - Carries out a task as a metaphor think of the remote control of your TV
36:08 - On this remote control you have buttons for different functions, like turn on turn off change the channel and so on
36:14 - These are the built-in functions in your TV in Python and many other programming languages
36:21 - We have the exact same concept. So we have functions that are built into the language on the platform
36:26 - You can reuse these functions to perform various tasks
36:30 - So here we can use the built-in Len function to get the length of a string which means the number of characters in that string
36:38 - Now whenever you want to use a function you should use
36:42 - parentheses
36:43 - Now we say we're calling this function which basically means we are using this function now
36:49 - some functions take
36:50 - Additional data which we refer to as arguments
36:54 - These arguments are inputs to these functions. So this Len function takes an input or an argument
37:02 - Here we pass our course variable and this will return the number of characters in this string
37:09 - so let's print that and
37:11 - See what we get run the program we get 18 because we have 18 characters here
37:19 - Let's look at another example
37:21 - If you want to get access to a specific character in this string you use the square bracket notation
37:27 - So here we add course
37:30 - square brackets to get the first character you use the index 0
37:35 - So in Python like many other languages
37:38 - Strings are 0 index which means the index of the first cat or the first element is zero
37:46 - so now when we print this
37:50 - Will get P. Okay
37:54 - Now you can also use a negative index
37:57 - Like minus one. What does that mean? Well if zero
38:03 - represents the first character here
38:05 - What do you think negative one represents that takes us back to the end of this string?
38:11 - So that returns the first character from the end of this string, let's run this program. You will see it will get G
38:20 - There you go
38:22 - Using a similar syntax you can slice strings
38:25 - Let me show you so I'm gonna duplicate this line and remove negative one now
38:32 - Let's say we want to extract the first three characters in this string. So here we need two indexes the
38:39 - start index
38:40 - colon the end index
38:42 - So this will return a new string that contains the first three characters in
38:48 - This course variable that will be P Y and T
38:52 - So the index of these characters are 0 1 and 2
38:56 - So that means the character at the end index is not included. Ok
39:02 - Let's run the program and make sure we get the right result. There you go py T
39:08 - Now what if we don't include the end index?
39:12 - What do you think we're gonna get?
39:14 - It's common sense. We start from index 0 and go all the way to the end of this string
39:20 - So this will return a new string that is exactly the same as the original string. Let's take a look
39:28 - So we get Python programming
39:31 - Now what if we don't include the start index but include the end index. What do you think? We're gonna get?
39:38 - Once again, it's common sense. So by default Python will put 0 here so it will start from the beginning of this string
39:46 - So when I run this program we should get py t one more time. There you go. And
39:53 - Finally as the last example if we don't include the start
39:57 - And the end index this will return a copy of the original string
40:02 - Let's look at this. So we get Python programming
40:07 - Now you don't have to memorize any of these. Just remember we use the Len function to get the length of a string
40:13 - we use bracket notation to get access to a specific element or a specific character and
40:19 - We use this notation to a slice a string
40:30 - So we have this string here Python programming
40:33 - Now, let's say we want to put a double quote in the middle of this string. There is a problem here
40:40 - Python interpreter
40:42 - Sees this second string as the end of the string
40:45 - So the rest of the code is meaningless and invalid. How do you solve this problem?
40:51 - Well, there are two ways one way is to use
40:55 - single quotes
40:56 - For our string and then we can use a double code in the middle of this string
41:02 - But what if for whatever reason perhaps for being consistent in our code we decided to use double quotes
41:09 - How can we add another double code in the middle of this string? Well, we can prefix this
41:16 - with a backslash
41:18 - Backslash in Python strings is a special character
41:22 - We have a jargon for that called escape character. We use it to escape the character after
41:29 - Let me show you what I mean. So let's print this course and run this program
41:37 - What's going on here we don't have the backslash because we use that to escape this double code and basically
41:45 - Displayed here
41:46 - So backslash is an escape character and backslash double quote is an escape sequence
41:53 - In Python strings. We have a few other escape sequences that you should be aware of
41:58 - Let me show you
42:00 - so in Python
42:01 - We use high sign to indicate a comment a comment is like additional note that we add to our program
42:08 - It's not executed by Python interpreter
42:10 - Okay. So here are the escape sequences you have seen backslash double quote. We also have
42:18 - backslash single quote
42:20 - So we can use that to add a single code here
42:24 - Let's run the program
42:26 - Here it is, beautiful
42:28 - We also have double backslash. So if you want to include a backslash in your strings
42:35 - You should prefix it with another backslash
42:37 - let me show you so when we run this we get python one backslash programming and
42:45 - finally we have
42:46 - Backslash n which is short for newline
42:49 - So now if I add a backslash n here see what we get
42:56 - We get a new line after Python so programming will end up on the second line
43:02 - So these are the escape sequences in Python
43:12 - Here we have two variables first and last let's say we want to print my full name on the console
43:19 - So we can define another variable
43:22 - full
43:23 - Set it to first
43:25 - Then concatenate it with a space
43:28 - and one more time concatenate it with
43:31 - last
43:32 - now when we print full
43:35 - We get my full name on the console beautiful
43:39 - Now this approach are using concatenation to build a string is okay
43:44 - But there is a better and newer approach we can use formatted strings
43:49 - So here we can set full
43:52 - to this string and
43:53 - Prefix it with an F which can be lowercase or uppercase
43:58 - This formatted string doesn't have a constant value like these two strings here
44:04 - It's actually an expression that will be evaluated at runtime. So
44:09 - Here we want to add our first name. We use curly braces to print the value of the first variable
44:17 - After that, we had in your space and then we add curly braces one more time to print
44:24 - The last name so at runtime this expression will be evaluated
44:28 - What we have in between curly braces will be replaced at runtime
44:35 - Now, let's run this program one more time
44:37 - We get the exact same result just be aware that you can put any valid expressions in between curly braces
44:46 - So earlier you learned about the built-in Len function
44:50 - We can call Len here to get the length of this string
44:55 - Let's run this program one more time. So we get four
44:59 - We can also replace last with an expression like this 2+2
45:04 - Let's run this program we get 4 & 4
45:08 - So when using formatted strings you can put any valid expressions in between curly braces
45:22 - In
45:23 - This lecture we're going to look at a few useful functions available to work with strings
45:28 - So earlier you learned about this built-in Len function
45:32 - This function is general-purpose. So it's not limited to strings later
45:36 - I will show you how to use this function with other kind of objects
45:40 - But in Python, we have quite a few functions that are specific to strings. Let me show you so here if we type course
45:48 - dot
45:50 - C all these are functions
45:53 - Available on strings now in precise terms. We refer to these functions as methods
46:00 - This is a term in object-oriented programming that you will learn about later in the course for
46:06 - now what I want you to take away is that everything in Python is an object and
46:12 - Objects have functions we call methods that we can access using the dot notation
46:18 - So here course is an object. We use the dot notation to access its functions or more accurately methods
46:26 - Let's take a look at a few of these methods. We have upper to convert a string to uppercase now
46:33 - Let's print this and run the program
46:36 - Here is what we get beautiful now note that the metals that you call here return a new string
46:43 - So the original string is not affected. Let me show you so print course
46:49 - Run the program one more time. Look, this is our original string, right?
46:54 - So course the upper
46:56 - Returns a new string a new value we can store it in a variable like course
47:02 - underlined capital
47:04 - like this
47:06 - Now to keep this demo simple and consistent. I'm gonna revert this back and use a print statement
47:13 - We also have the lower method to convert a string to lowercase. We also have
47:20 - Title which will capitalize the first letter of every word. So if our string was like this
47:29 - When we call the title method we get Python programming as you see here, okay?
47:36 - Another useful method is strip and we use it to trim any white space at the beginning or end of a string
47:43 - This is particularly useful when we receive input from the user. Let me show you so let's imagine
47:50 - The user entered a couple of white spaces at the beginning of their string
47:56 - When we call course that strip
47:59 - Those white spaces will be removed. Take a look
48:03 - So note that in the first three examples, we have those white spaces, but in the last one it is removed
48:10 - So a strip removed the whitespace from both the beginning and end of a string
48:15 - We also have L strip, which is short for left strip and our strip, which is short for right strip
48:22 - so it will remove the white space from the end of a string if
48:26 - You want to get the index of a character or a sequence of characters in your string?
48:31 - You should use the find method and mosura
48:34 - so
48:35 - course that find
48:38 - so as an argument here, we pass another string we can pass a
48:44 - Character or a series of characters. Let's find the index of Pro
48:50 - Run the program. So the index of Pro is 9
48:53 - So if you start from 0 here all the way to 9, this is the index of Pro
49:00 - Ok
49:01 - Now as I told you before python is a case sensitive language
49:05 - So if I pass a capital P here, obviously
49:08 - We don't have these exact characters in our string. So let's see what we get
49:15 - We get negative 1 that means this string was not found in the original string
49:21 - Another useful method is replaced
49:24 - so
49:25 - We call replace
49:27 - With this we can replace a character or a sequence of characters with something else
49:32 - so let's say we want to replace all lowercase Peas with
49:36 - J
49:37 - with this we get
49:40 - jython, Jeremy
49:42 - whatever that means and
49:44 - finally if you want to check for the
49:46 - Existence of a character or a sequence of characters in your string you can use the in operator
49:53 - Let me show you so print
49:56 - rewrite an expression like this pro in
50:00 - chorus
50:02 - So this is an expression as I told you before an expression is a piece of code that produces a value
50:08 - So this expression checks to see if you have Pro in
50:12 - course the difference between this expression and
50:16 - Calling the find method is that the find method returns the index of these characters in our string?
50:23 - But as this expression returns a boolean, so it's a true or false. Let me show you so run the program
50:30 - we get the boolean true and
50:34 - Finally, we have the not operator and we use that to see if our string does not
50:40 - Contain a character or sequence of characters
50:43 - so
50:46 - Let's change this to swift
50:50 - not in
50:51 - course
50:52 - When this expression is evaluated, what do you think? We're gonna get? Well, we don't have Swift in this string
51:00 - So not in we'll return true. Let's take a look. There you go
51:07 - So these are the useful string methods next we'll look at numbers
51:19 - In Python, we have three types of numbers two of these you have already seen before they are integers and
51:27 - floats
51:28 - we also have
51:30 - Complex numbers so complex numbers in math are in the form a plus bi
51:36 - Where I is the imaginary number now if you're not familiar with this concept, don't worry
51:41 - This is something that is used a lot in mathematics and electrical engineering if you want to use Python to build web applications
51:49 - You're never gonna use complex numbers, but let me quickly show you the syntax for representing complex numbers
51:56 - Instead of I we use J. So here is an example 1 plus 2 J
52:02 - So X now is a complex number
52:04 - and by the way
52:06 - As I told you before this is just a comment or an additional note in our program when we run this program
52:12 - anything after this hash sign will be ignored so
52:16 - These are the three types of numbers we have in Python for all these types of numbers. We have the standard arithmetic
52:23 - operations that we have in math, let me show you so we have
52:29 - addition
52:31 - Subtraction multiplication
52:33 - division
52:35 - But we actually have two different types of divisions, let me show you first let's run this program
52:41 - so with this division operator
52:43 - Which is a slash we get a floating-point number if you want an integer, you use double slashes
52:51 - Let me show you
52:54 - So double slash run the program
52:57 - We get 3, ok. We also have
53:02 - modulus, which is the remainder of a division and finally
53:06 - Exponent, which is left to the power of right? So 10 to the power of 3 will be a thousand
53:13 - These are the standard arithmetic operators now for all these operators. We have a special operator called augmented
53:22 - Assignment operator, let me show you so let's imagine
53:26 - We have X set to 10
53:29 - we want to increment X by
53:31 - let's say three we can write an expression like this x equals x plus three or we can use an
53:39 - Augmented assignment operator that is a little bit shorter. So we write x plus
53:45 - Equal three these two statements are exactly the same
53:50 - Now here I'm using
53:52 - Addition as an example. You can use any of these operators here
53:57 - Next I'm going to show you some useful functions to work with numbers
54:08 - In this lecture, we're going to look at a few useful functions to work with numbers so we have this built-in function round
54:16 - For rounding a number. So if we pass 2.9 here and print the result
54:22 - we'll get 3
54:25 - We have another useful built-in function called
54:28 - ABS which returns the absolute value of a number. So if you pass negative 2.9 here we'll get
54:37 - Positive
54:38 - 2.9
54:40 - Technically we have only a handful of built-in functions to work with numbers if you want to write a program that involves
54:47 - complex
54:48 - Mathematical calculations you need to use the math module a module is like a separate file with some Python code
54:56 - So in Python, we have this math module which includes lots of mathematical functions or working with numbers
55:03 - But we need to import this module so we can use it
55:06 - On the top we type import
55:10 - math
55:11 - now math in this program is an object so we can use the dot notation to
55:18 - see all the functions or more accurately all the methods available in this object as an example we have
55:26 - Math dot seal for getting the sealing of a number. So if you pass 2.2 here and
55:34 - run this program
55:36 - we get 3
55:38 - Now in this math module, we have lots of functions. Let me show you how to find the conflict list
55:44 - Here on Google search for Python 3, make sure to add the version number
55:51 - math
55:52 - module on
55:54 - this page
55:56 - You can see all the functions in the math module. So in this lecture, we looked at math dot seal
56:03 - We also have math but copy sign fabs and so on as an exercise
56:08 - I encourage you to play with a couple of functions in this module
56:19 - Alright now, let's take a look at another useful built-in function in Python
56:24 - We use the input function to get input from the user
56:28 - As an argument to pass a string
56:31 - This will be a label that will be displayed in the terminal you will see that in a second. So let's add X
56:38 - : now this function returns a string
56:42 - So we can store it in
56:44 - this variable
56:45 - now, let's imagine that Y should be X plus 1
56:50 - Save the changes now
56:52 - Don't run this program using the code runner
56:55 - Extension because code Runner by default runs your program in the output window
57:00 - Which is read-only so you won't be able to enter a value
57:04 - So open up the terminal using ctrl + backspace
57:08 - once again, if you're on Windows type Python if you're on Mac or Linux
57:12 - Type Python 3 and then app that PI
57:16 - So here's our label. Let's enter a value like fun
57:20 - We got an error type error. What is going on here?
57:25 - well
57:26 - When we receive input from the user this input always comes as a string
57:32 - So this expression at runtime will look like this
57:36 - String 1 plus 1 note that the number 1 is different from string 1 because these are two different types
57:44 - now when Python sees this expression, it doesn't know what to do because two objects can be
57:50 - Concatenated if there are of the same type
57:52 - So here we need to convert this string 1 to a number in Python
57:58 - We have a few built-in functions for type conversion we have int
58:03 - for converting a number to an integer
58:06 - We have float
58:08 - We have bull and
58:10 - Stir or string?
58:12 - now in this case
58:13 - We don't need to convert eggs to a string because X is already a string if you don't believe me
58:18 - Let me show you so I'm gonna comment out these few lines
58:23 - Now let's print
58:27 - Type of X. So type is another built-in function
58:31 - We pass an object as an argument and it returns its type
58:36 - Also, I'm gonna comment out this line because that's the bad boy
58:39 - We don't want to execute this save the changes back in the terminal. Let's run this program one more time
58:46 - Enter 1 look
58:48 - This is what the type function returns. Don't worry about the class. We'll talk about classes later in the course
58:55 - so the type of X is
58:57 - histor or string
58:59 - So let's delete this line
59:02 - To fix this problem. We need to convert X to an integer and
59:08 - Then we can print both x and y using a formatted string
59:12 - Remember so we had an F close now here. We add a label like X then we'll add a field
59:20 - So here we want to print the value of X variable
59:24 - after that, we add some more text and
59:28 - Finally, we want to print the value of y
59:31 - Let's run this program one more time
59:34 - So here in the terminal
59:37 - Let's enter 1 and here's the result X is 1 and Y is 2 beautiful
59:43 - Now all these built-in functions are self explanatory
59:46 - The only tricky one is bull because in Python we have this concept of truthy and falsy
59:53 - Values these are values that are not exactly a boolean true or false
59:57 - But they can be interpreted as a boolean true or false
60:02 - So here are the false if values in Python
60:06 - Empty strings are considered false e so they're interpreted as a boolean false
60:11 - number zero is also false e
60:14 - We have an object called nan which represents the absence of a value. We'll look at this later in the course
60:20 - So whenever we use these values in a boolean context will get false
60:27 - Anything else will be true. Let me show you a few examples
60:31 - So in this interactive shell in Python, let's convert
60:36 - Number 0 to bull that's false II so we get false
60:40 - What about pool of 1 we get true if you pass a negative number will also get true
60:47 - If we pass a number larger than 1 like 5 we still get true so we only get false
60:54 - When we try to convert 0 to a boolean
60:57 - Now it strings. I told you that an empty string is false e so here we'll get false
61:03 - Anything else is true. So even if I have a string that is false
61:09 - We'll get true because this is not an empty string. It's a string with a few characters
61:15 - That's why it's evaluated as true
61:24 - All right, once again it's time for another quiz, let's see if you have been really paying attention to this tutorial
61:30 - So here's the first question, what are the built in primitive types in Python?
61:40 - We have strings numbers and boolean
61:43 - Numbers can be integers floats or complex numbers
61:49 - Here's the second question. You have this variable fruit set to Apple. What do you think?
61:54 - We will see on the terminal when we print fruit of one
62:03 - Well using square brackets we can access individual characters the index of the first character is zero
62:09 - So this expression returns the second character, which is P
62:14 - What if you add a colon and negative one here?
62:22 - Well using the syntax we can slice a string
62:25 - Re stored index is one and our end index is negative one which refers to the first character from the end of the string
62:33 - Now when slicing a string the character at the end index or negative one is not included
62:40 - So with this expression we'll get all the characters starting from the second character
62:45 - which is P all the way until we get to e so the result of this expression is
62:52 - Ppl
62:53 - Here's another question. What is the result of this expression?
63:01 - Well, this is what we call the modulus operator and it returns the remainder of a division which is in this case one and
63:11 - Finally the last question. What do you think? We will see when we print wool of FOSS?
63:21 - Well earlier I told you about faulty values in Python so number zero an empty string and the non object
63:29 - These are all false if values anything that is not false is considered true. See here
63:34 - We have a string that has five characters. It doesn't matter what those characters are
63:39 - This is not an empty string. So it's not fall. See it's true
63:43 - See, so when we convert it using the bull function
63:46 - We'll get a boolean true and this brings us to the end of this section in the next section
63:52 - You're going to learn the fundamentals of computer programming. I hope you have enjoyed this section and thank you for watching
64:11 - We're gonna start this section by exploring comparison operators
64:15 - We use comparison operators to compare values. Here are a few examples
64:19 - So 10 is greater than 3 we get true. So what we have here is a boolean expression
64:27 - Because when this expression is evaluated we'll get a boolean value. That is true or false
64:33 - Here is another example 10 is greater than or equal to 3 once again, we get true
64:39 - We also have less than so 10 is less than 20 we have less than or equal to
64:46 - Here's the Equality operator. So 10 is equal to 10
64:51 - What about this expression? What do you think?
64:54 - we're gonna get we get false because these values have different types and they're stored differently in the computer's memory and
65:02 - Finally we have the nut equal operator
65:06 - So now with this expression we should get true beautiful we can also use this comparison operators with strings
65:14 - let me show you so we can check to see if bag is greater than
65:20 - Apple we get true because when we sort these two words bag comes after so it's considered greater
65:27 - Now what about this one bag?
65:30 - equals capital bag
65:32 - We get false here is the reason
65:35 - Every character you see here has a numeric representation in programming
65:39 - Let me show you so we have this built-in function called Ord
65:43 - Don't worry about memorizing this because you're probably never gonna use this in the future
65:47 - But let me show you the numeric representation of the letter P
65:53 - So that is 98 in contrast
65:56 - Capital B is represented as 66 that is the reason these two strings are not equal. So
66:04 - These are the comparison operators in Python next. We'll look at conditional statements
66:16 - In almost every program there are times you need to make decisions and that's when you use an if statement
66:23 - Here is an example
66:25 - Let's say we have a variable called temperature
66:28 - We set it to 35
66:30 - Now if temperature is greater than 30, perhaps we want to display a message to the user. So we use an if statement if
66:38 - After if we add a condition which is basically a boolean expression an expression that produces a boolean value
66:46 - So if temperature is greater than 30 here
66:50 - We have a boolean expression if this expression evaluates to true the following statements will be executed
66:57 - Let me show you now here is the important part that a lot of beginners miss when you use an if statement, you should always
67:05 - Terminate your statement with a colon
67:08 - Now, let's see. What happens when I press ENTER
67:11 - Our cursor is indented. So here we have two white spaces
67:15 - This is very important because using these
67:18 - Indentations Python interpreter will know what statements should be executed
67:23 - if this condition is true here, we want to print a message like
67:28 - It's warm we can print another message as well
67:33 - Drink water so we can have as many statements as we want here as long as they are indented they belong
67:41 - to this if block
67:42 - Now when we finish here
67:44 - We should remove indentation to indicate the end of this if block so here we can add a print statement
67:51 - With a message like done. This statement will always be executed whether this condition is true or not
67:58 - Now note that when I save the changes
68:02 - This indentation you see here is going to be doubled up take a look save. There you go
68:08 - So when we save the changes auto kept eight reformat our code and uses four white spaces for indentation
68:14 - So one two, three four, it uses four white spaces because that's what pepp eight recommends
68:22 - Alright now let's run this program
68:25 - so because temperature is greater than 30 we see the first two messages and
68:30 - We see the dawn message regardless
68:32 - So if I change the temperature to let's say 15 and run the program one more time
68:38 - look this dawn message is
68:41 - Executed whether our condition is true or not. So pay great attention to these indentations
68:47 - That's one of the issues. I see in beginners code
68:50 - Let's say they want both these print statements to be executed if the condition is true
68:56 - Accidentally, they remove the indentation on the fourth line and that's why their program doesn't work as they expect
69:03 - So be careful about this
69:05 - Now what if you want to have multiple conditions?
69:08 - we use an elephant so L if that is short for LS if
69:14 - Here we can add another condition another expression. So temperature is greater than 20 once again :
69:23 - Enter a by default here vs code is using two white spaces. So don't worry about this as soon as you save the changes
69:30 - Those two white spaces will be converted to four white spaces
69:35 - So let's print a different message
69:37 - It's nice
69:40 - Save the changes now look all these lines are indented
69:45 - consistently you can have as many Elif statements as you want and
69:49 - Optionally you can also have an else statement
69:53 - So if none of the previous conditions are true, then what you have in the else block will be executed once again
70:00 - We add the colon
70:02 - annotation print
70:04 - Here we can add a message like it's called
70:08 - Saying the changes in this case temperature is 15
70:12 - So none of these two conditions will be true and we will see it's called. Let's run the program
70:19 - There you go
70:28 - In this lecture, I'm going to show you a technique for writing cleaner code
70:32 - So let's say we're building an application for University and we want to check to see if the person who's applying
70:39 - For this university program is eligible or not
70:43 - So we start by defining a variable called age set it to 22
70:48 - Now if H is greater than or equal to 18 colon
70:54 - print
70:55 - eligible
70:58 - Remove the indentation else colon print
71:02 - Not eligible
71:04 - Let's run the program
71:06 - Make sure it works
71:08 - Beautiful now there is nothing wrong in this piece of code, but I want to show you a cleaner way to achieve the same result
71:16 - Instead of having a print statement here. We can define a variable like message and set it to this string
71:24 - That is the first step. So
71:26 - Message equals this string and then we will print
71:32 - this message
71:34 - Now when you have an if-else statement with this structure where you're basically assigning a value to a variable
71:41 - you can rewrite this in a simpler way, so
71:45 - This is how it works. All we want to do over these few lines is to assign a value to this message variable
71:52 - Right, so we start with message
71:55 - We set it to eligible
71:57 - If age is greater than or equal to 18 else we set it to not eligible
72:05 - This statement is almost like plain English. So what we have on line 7 is
72:11 - Exactly equivalent to these four lines of code
72:15 - delete
72:16 - Save the changes run the program you can see this person is eligible if I change the age to 12
72:24 - And run the program we get not eligible
72:28 - So what we have here is called ternary operator
72:38 - In
72:39 - Python we have three logical operators and we use these operators to model more complex conditions
72:47 - so these operators are and
72:49 - or and not
72:52 - Let's see a real-world example of using these operators, so imagine we're building an application for processing loans
72:59 - So we need two variables
73:01 - high
73:02 - income we can set this to true and
73:07 - Good underline credit we set it to true
73:11 - Now here's the condition
73:12 - We want to implement if the applicant has high income and good credit score
73:18 - Then they are eligible for the loan. So if
73:22 - high income and
73:24 - Good credit, we add the colon and print
73:29 - eligible
73:30 - Now note that here. I have not compared the value of this variable with true that is one of the issues
73:37 - I see in a lot of beginners code. This is redundant and unprofessional
73:41 - Because high income is a boolean, so it's either true or false. We don't need to compare true with true
73:49 - so if this condition is true and
73:52 - This second condition is true, then we will print
73:56 - eligible in the terminal
73:58 - So save the changes and run the program obviously this person is eligible
74:04 - However, if one of these conditions is false, we will not see eligible in the terminal. So let's add an
74:12 - else statement here and print
74:15 - Not eligible
74:18 - run the program
74:20 - We see not eligible
74:22 - So this is how the and operator works with and operator. If both conditions are true. The result will be true in
74:30 - Contrast with the or operator as long as at least one of the conditions is true. The result will be true
74:37 - So if I replace and with or here we should see
74:43 - Eligible in the terminal let's run it one more time. There you go
74:47 - So these are the and and or operators
74:50 - Now, let's take a look at an example of the nut operator. So I'm going to define another variable
74:56 - student set it to true
74:58 - Temporarily I'm gonna remove this expression and simplify it. We'll come back to this later
75:03 - So let's say if the person is eligible if they are not a student
75:09 - The nut operator basically inverses the value of a boolean. So in this case student is true
75:16 - When we apply the not operator the result will be false
75:20 - So in this case, our condition will be false and that's why this print statement will not be executed
75:26 - Let me show you so save
75:28 - Run the program they are not eligible if student was false
75:35 - When we apply the nut operator will get true so our condition will be true and we'll see it eligible
75:40 - Let's run it one more time. There you go
75:44 - With this operators, we can model even more complex conditions
75:48 - here is an example a person can be eligible if they have either high income or
75:55 - good credit and
75:57 - They should not be used to do that. Let me show you how to implement this condition. So
76:02 - if high income
76:04 - Or good credit we want at least one of these conditions to be true. So we put these in
76:13 - Parentheses. We want to separate these from the other condition
76:16 - Which is not a student now the result of this should be true, which means at least one of these conditions should be true
76:25 - after that, we'll add and
76:27 - not student
76:30 - and finally caught
76:32 - So with this operators you can model all kinds of real-world scenarios
76:44 - So here's the example from the last lecture a person is eligible for a loan if they have high income and
76:51 - good credit and
76:53 - They are not a student. Now one thing you need to know about these boolean operators is that they're a short circuit
77:00 - What do we mean by that? Well when Python interpreter
77:04 - Wants to evaluate this expression it starts from the first argument
77:08 - If this is true, it continues the evaluation to see if the second argument is also true
77:14 - So it continues the evaluation all the way to the end of this expression
77:20 - However, as soon as one of these arguments is false the evaluation stops. Let me show you what I mean
77:27 - So if I change high-income to false when Python interpreter sees this expression
77:33 - It starts here. It knows that high-income is false. So it doesn't matter what comes after
77:40 - the result of this entire expression will always be false because at least
77:45 - One of the arguments or one of the operands is false. This is what we call
77:51 - Short-circuiting just like the short-circuit concept we have in electronics. So the evaluation stops as soon as one of these arguments
78:00 - evaluates to false
78:01 - We have the same concept with the or operator. So if I change these and operators to or
78:09 - Let's see what happens
78:11 - With the or operator, we know that at least one of the arguments should be true
78:16 - So the evaluation stops as soon as we find an argument that evaluates to true in this case when Python interpreter
78:23 - Evaluates this expression it sees that high-income is false
78:27 - So it continues the evaluation hoping that the next argument will be true
78:32 - Here good credit is true. So evaluation stops and the result of this entire expression will be true
78:40 - so in Python logical operators are
78:44 - short-circuit
78:52 - In this lecture, I'm gonna show you how to chain comparison operators
78:56 - This is a very powerful technique for writing clean code. Here's an example
79:01 - let's say we want to implement a rule that says age should be between
79:05 - 18 and
79:07 - 65
79:08 - Here's how we can implement it. So we define a variable like age set it to 22
79:14 - now if age is greater than or equal to 18 and
79:18 - Age is less than 65 then we print
79:23 - Eligible now, here's a question for you. How do we write this rule in mass? We can write it like this
79:32 - Well more accurately we shall have
79:34 - an equal sign here, so age should be between
79:38 - 18 and 65. This is how we write this rule in math now. I've got some good news for you
79:44 - We can write the exact same expression in Python. So
79:48 - I'm going to move this up put an if statement here
79:53 - Line 4 and line 3 are exactly equivalent
79:57 - but as you can see line 4 is cleaner and easier to read so
80:01 - Let's get rid of line 3
80:04 - This is what we call chaining comparison operators
80:16 - All right, here is a little quiz for you
80:18 - I want you to pause the video and think about this quiz for 10 to 20 seconds. What do you think?
80:25 - We'll see on the terminal when we run this program
80:28 - So pause the video figure out the answer when you're ready. Come back continue watching
80:36 - All right, let's see what happens when we run this program
80:39 - First we get this if statement in this case, we're comparing two different objects for equality
80:44 - And these objects have different types. We have a number compared for this string
80:50 - So number 10 and string 10 are not equal that is why a will not be printed on the terminal
80:56 - So the control moves to the Elif part here. We have two boolean expressions. Here's the first one
81:04 - here is a second one and
81:06 - They are combined using the logical end. So if both these expressions are evaluated to true
81:12 - Then this entire expression will be true and we will see beyond the terminal
81:18 - Let's see if both these expressions are evaluated to true
81:21 - Here's the first part
81:23 - Bag is greater than Apple. That is true. Because when we sort this words bag comes after Apple
81:30 - But look at the second part this expression is evaluated to false because bag is not greater than cat
81:37 - So when we applied the logical end between true and false
81:41 - The result will be false
81:44 - That is why this statement will not be executed. So the control moves to the else part and
81:50 - When we run this program the letter C will be printed on the terminal
82:02 - There are times that we may want to repeat a task a number of times
82:06 - For example, let's say we send a message to a user if that message cannot be delivered
82:11 - Perhaps we want to retry three times now for simplicity
82:15 - Let's imagine
82:16 - this print statement is equivalent to sending a
82:20 - Message in a real-world program to send a message to a user we have to write five to ten lines of code
82:26 - Now if you want to retry three times, we don't want to repeat all that code. That is ugly
82:31 - That's when we use a loop. We use loops to create
82:35 - Repetition. So here is how it works
82:38 - We start with four
82:40 - Number in we have a built-in function called range
82:45 - Now how many times we want to repeat this task? Let's say three times. So we call range and pass three as an argument
82:53 - Now similar to our if statements we need to terminate this line with a colon
82:59 - Enter we get indentation. So in this block we can write all the statements that should be repeated three times
83:06 - Let's do a print a message like attempt
83:10 - Save the changes
83:12 - Run the program so we have attempt printed three times beautiful. Now. What is this number? Let's take a look
83:20 - It's a variable of type integer. So let's pass it as the second argument to the print function number
83:29 - Run the program. This is what we get zero one two
83:34 - So here we have a for loop this for loop is executed three times in each iteration
83:40 - Number will have a different value initially. It will be zero in the second iteration
83:45 - It will be one and finally in the last iteration. It will be two now here we can do something fun we can add
83:53 - one to this
83:54 - Run the program and now the message is that the print are kind of more meaningful or more user-friendly
84:01 - Like attempting number one attempting number two and so on
84:04 - We can take this to the next level so we can pass another argument
84:09 - Here, I'm gonna add an expression one more time number plus one
84:13 - So we'll get one two three now. I want to put this expression in parentheses. So let's select this
84:20 - put it in parentheses and then
84:23 - Multiply it by a dot
84:26 - So here we have a string that is multiplied by a number. The result will be that string repeated that number of times
84:34 - Let's take a look around the program
84:37 - See, that's pretty cool, isn't it?
84:40 - now let me show you one more thing before we finish this lecture as
84:43 - You saw this range function generates numbers starting from zero all the way up to this number here
84:49 - But it doesn't include this number here. We can pass another argument say start from 1 and
84:56 - finish before 4
84:58 - With this change, we don't need to add 1 to number every time
85:02 - Because in the first iteration this number variable will be set to 1
85:06 - So we can simplify our code and make it clean air
85:10 - Let's run it one more time. We get the exact same result
85:14 - We can also pass a third argument as a step. So I'm going to change the second argument to 10 and
85:22 - Pass two as a step look at the result
85:26 - These are the numbers we get 1 3 5 and so on
85:29 - So pretty useful you're going to use this function a lot in real-world applications
85:42 - Continuing with the example from the last lecture
85:44 - Let's imagine the scenario where after the first attempt we can successfully send the message in that case
85:50 - You want to jump out of this loop? We don't want to repeat this task of sending a message three times
85:57 - Let me show you how to implement this so in this demo
86:00 - I'm gonna simulate the scenario where we can successfully send a message. So we define a variable
86:07 - Successful and set it to true
86:11 - Now here after this print statement
86:13 - We'll have an if statement
86:16 - If successful
86:18 - : then perhaps we can print
86:22 - successful
86:24 - Now here we want to jump out of this loop for that. We use the break statement
86:29 - Let's run this program and see what happens
86:32 - So there you go after the first attempt, we are successful and there are no more attempts
86:39 - So once again, I want you to pay great attention to the indentation here because that's one of the common issues amongst beginners
86:47 - So here's our for loop
86:49 - These two lines are indented with four spaces and they belong to our for loop in every iteration
86:55 - These two lines will be executed
86:58 - Now when we get to line four if this condition is true
87:02 - Then these two lines will be executed because both these lines are indented below this if statement
87:11 - Now, let's take this program to the next level
87:13 - What if we attempt three times and we still cannot send an email?
87:18 - Perhaps we want to display a different message to the user we say hey, we tried three times, but it didn't work. So
87:24 - I'm gonna change
87:26 - successful to false
87:29 - Now at the end here we can add an else statement
87:32 - This is what we call a for else statement
87:36 - What we put under this else statement will only be executed if this loop completes without an early termination
87:43 - So if we never break out of this loop, then the else statement will be executed
87:49 - so here we can print a message like
87:52 - attempt at three times and failed
87:55 - So run the program
88:00 - See what we get three attempts followed by this message attempted three times and failed in
88:06 - Contrast if we change successful to true
88:10 - Because we terminate this loop using this break statement what we have in the else block will not be executed
88:17 - Take a look run the program. We have one attempt successful done
88:30 - In programming we have this concept called nested loops so we can put one loop
88:35 - Inside of another loop and with this we can get some interesting results
88:39 - Let me show you so I'm going to start with this loop for X in range
88:45 - 5
88:47 - : now inside of this loop I'm gonna add another loop so for Y in range
88:55 - 3
88:56 - : and
88:57 - Then in our second loop, I'm gonna add a print statement
89:01 - Here we can use
89:03 - formatted strings to display coordinates
89:06 - Remember formatted string so we have F followed by quotes
89:11 - Now here we add parentheses for our coordinate first we want to display
89:16 - X and then comma followed by Y
89:20 - Let's run this program and see what happens there
89:23 - You go pretty cool, isn't it?
89:26 - So we get 0 + 0
89:28 - 0 1 0 & 2 then we get 1 & 0 1 & 1 1 & 2 and so on
89:34 - Now let me explain how exactly Python interpreter executes this code. So here we have two loops
89:41 - this is what we call the outer loop and
89:44 - This is the inner loop
89:46 - so the execution of our program starts here in the first iteration of this loop X is 0
89:52 - now we get to this statement which is a child of
89:57 - This for statement because it's indented four times. This statement itself is a loop
90:03 - So what we have inside of this loop will be executed
90:07 - three times in the first iteration
90:10 - X is 0 because we're still in the first iteration of the outer loop and
90:16 - Y is also 0 because we're in the first iteration of the inner loop that is why we get 0 and 0
90:23 - now we go to the second iteration of this inner loop in this iteration Y will be 1
90:29 - whereas X is still 0 that is why we get 0 and 1 and similarly in the third iteration of our inner loop we'll get
90:38 - 0 and 2 in the turn
90:40 - Now we're done with the execution of the inner loop. So the control moves back to our outer loop here
90:47 - We'll be in the second iteration
90:48 - So X will be one and then we start here again
90:53 - So we have to execute this inner loop three times in the first iteration
90:58 - Y will be 0 and X is 1 so here we have 1 and 0
91:02 - Then we'll get one on one and one and two you got the point
91:06 - So this is all about nested loops
91:16 - So you have learned how to use four loops to repeat one or more statements in your programs
91:22 - Now let's dive deeper and see what this range function returns
91:26 - so
91:27 - earlier you learn about
91:29 - The built in type function with this function we can get the type of an object. So if I pass five here and
91:37 - run this program
91:39 - This is what we get. So the type of this number or this object is int or integer
91:45 - now, let's look at the type of
91:48 - The value that we get from the range function. So as an argument we pass range of a number
91:56 - Let's run this program
91:57 - So this range function returns an object of type?
92:02 - range, so in Python we have
92:05 - primitive types like numbers strings and boolean
92:08 - But we also have complex types range is an example one of those complex types throughout this course
92:15 - You're going to learn about a lot of other complex types now
92:19 - What is interesting about this range object is?
92:22 - That it's iterable which means we can iterate over it or use it in a for loop
92:29 - That is why we can write code like this
92:33 - So this range function returns a range object, which is interval
92:38 - Which means we can iterate over it in each iteration X will have a different value
92:45 - Now range objects are not the only iterable objects in Python
92:50 - Strings are also iterable. So here we can add a
92:54 - string
92:55 - like Python
92:57 - Now in each iteration X will hold one character in this string. Let me show you so print Peg's
93:05 - And I'm gonna delete these two lines here
93:09 - Let's run this program
93:11 - So in each iteration, we'll get one character and print it
93:16 - We have another complex type called list which we use to store a list of objects
93:22 - So we add square brackets this indicates a list
93:26 - Now we can add a list of numbers or a list of strings like a list of names
93:31 - You will learn about lists later in the course
93:33 - so let's run this one more time as
93:37 - We can see we can iterate over lists in each iteration. We'll get one object in this list now
93:44 - Later in the course. I will show you how to create your own custom objects that are eatable
93:50 - For example, you will learn how to write code like this
93:53 - for item in
93:55 - shopping cart
93:58 - Print item. So shopping cart is going to be custom object that you will create
94:03 - It's not going to be an integer or a string or boolean. It's a custom object
94:08 - It has a different structure and we'll make it eatable
94:11 - so we can use it in a for loop and in each iteration we can get one item in the shopping cart and
94:17 - Print it on a terminal
94:26 - So you have learned that we use for loops to iterate over each ruble objects in Python
94:32 - We have another kind of loop that is a while loop and we use that to repeat something as long as a condition is true
94:39 - Here's an example. So let's define a variable number and set it to a hundred
94:46 - Now we use while and here we add a condition as long as number is greater than zero. We add a colon
94:54 - Once again, we have indentation so we can repeat one or more statements
94:59 - we can print this number and
95:03 - Then we can divide it by half so number equals number
95:08 - Use the integer division
95:10 - To divide it by two or we can use the augment and assignment operator to shorten this code
95:17 - like this
95:20 - Now let's run this program
95:23 - So here is what we get initially. Our number is a hundred we divide it by half
95:28 - We get 50 then 25 and so on
95:31 - So as you can see in this example
95:33 - We are not iterating over an iterable like a range object or a string or a list
95:39 - We are evaluating a condition and repeating a task
95:44 - Let me show you a real world example of a while loop in this interactive shell
95:49 - Python is waiting for an input
95:51 - We can type something like 2 plus 2 it will evaluate it and ask for the next input
95:56 - we can add another expression like 10 is greater than 2 so these steps will continue until
96:03 - We press
96:04 - control-d
96:06 - So behind the scene we have a while loop that continuous execution until we press control-d
96:12 - That is the condition that causes the while loop to terminate. Let me show you how to build something like this in Python. So
96:20 - Let's define a variable
96:23 - And set it to an empty string
96:26 - Now here we need a while loop. We want this while loop to execute as long as command does not equal to quit
96:34 - So command does not equal to quit
96:38 - :
96:40 - In this loop, we want to continuously get input from the user
96:44 - So we use the built-in input function. We add a label like this
96:50 - Get the result and store it in the command variable
96:55 - Now at this point python interactive shell will evaluate this command
96:58 - We are not going to do that in this lecture because that's way too complex for simplicity
97:03 - We can just echo back what the user entered so print
97:08 - Echo and as the second argument we pass this command
97:13 - So this is our while loop it will execute until we type quit
97:18 - Now as I told you before don't run this program using the code runner
97:22 - Extension because by default it will run your program in the output window, which is read-only
97:28 - so open up a terminal using ctrl + back take and
97:32 - run Python or Python 3 AB dot pi
97:36 - So here's our command prompt. Let's type 2 + 2 it it goes back
97:41 - Let's type 3 times 2. There you go if we type quit our
97:47 - Program terminates now. Let's try it one more time
97:50 - What if we type quit an upper case?
97:54 - The program doesn't terminate because as you learned before lower case and upper case characters have different numeric representations
98:02 - So quit in lower case is different from quit in upper case
98:07 - now to solve this problem an amateur programmer may do something like this and
98:14 - Command does not equal to
98:17 - Capital quit so while command does not equal
98:22 - Quit in lower case and quit in upper case continue getting input from the user
98:27 - Let's run this program in terminal and see what happens. So
98:31 - one more time Python after pie
98:34 - Which I've quit
98:36 - Beautiful it works. We type quit an uppercase that would work too. But what if I type quit with an uppercase Q and
98:44 - lowercase uit
98:46 - our program doesn't terminate
98:49 - So this is a poor way of checking for the quit command. What is a better way?
98:54 - let me show you so we don't need this and
98:57 - operator here
98:59 - instead
99:00 - Because command is a string we can call the lower method
99:05 - So whatever the user types in first
99:08 - We'll convert it to lowercase and then compare it with quit in lower case with this change
99:15 - It doesn't matter how the user types the word quit will always terminate the program
99:27 - Now the last thing I want to discuss in this section is the concept of infinite loops an
99:32 - Infinite loop is a loop that runs forever
99:36 - so if I change this condition to true
99:40 - Because true is always true this while loop will run forever
99:45 - So to jump out of this we need a break statement. So after we get the input from the user
99:51 - We can get the command
99:53 - Convert it to lowercase and see if it equals to quit if that's the case. We want to break
100:01 - Now with this change, we no longer need to initialize command to an empty string
100:07 - Previously we needed this because we had a wild statement like this while command does not equal quit
100:15 - So we had to define this command variable and that's why we have set it to an empty string without this line when Python interpreter
100:23 - Tries to execute this code. It doesn't know what command is
100:27 - So now that we have an infinite loop we no longer need to define command and set it to an empty string
100:33 - So in terms of functionality, this program is exactly the same as the program
100:38 - We wrote in the last lecture just be aware of these infinite loops because they run forever
100:44 - You should always have a way to jump out of them
100:48 - otherwise your program will run forever and this can sometimes cause issues because if you're executing
100:54 - Operations that consume memory at some point your program may run out of memory and crash
101:07 - Alright time for an exercise. I want you to write a program to display the even numbers between 1 to 10
101:15 - So when you run this program?
101:16 - You should see 2 4 6 and 8 and after these I want you to print this message. We have 4 even numbers
101:25 - Now here is a quick hint before you get started. You should call the range function with 1 and 10
101:31 - Do not use this third argument, which is called step
101:34 - so basically
101:35 - I want you to iterate over all the numbers we can want to tab
101:38 - Check if each number is an even number and then print it on the terminal
101:43 - So pause the video spend two minutes on this exercise when you're done come back continue watching
101:53 - So it started with a four loop for a number in range one to ten :
102:00 - We check to see if the remainder of division of this number by two equals zero
102:05 - so if number modulus two equals zero then
102:10 - We print
102:12 - this number
102:15 - Now let's run this program
102:17 - So we get two four six eight beautiful now to count the even numbers
102:23 - We need a separate variable. So let's call that count
102:27 - Initially, we set it to zero now in this if block every time we find an even number we need to increment count
102:34 - so we set count plus equals one and
102:38 - finally after our for loop we can print a
102:42 - formatted string we have
102:45 - count
102:47 - even numbers
102:49 - let's run the program and
102:51 - Here's the result
102:53 - So that brings us to the end of this section in the next section. You're going to learn how to create your own functions
102:59 - I hope you enjoyed the section and thank you for watching
103:14 - So far you have learned how to use some of the built-in functions in Python such as print
103:20 - Round and so on in this section, you're gonna learn how to write your own functions
103:26 - Now you might ask but why do you even need to write our own functions?
103:29 - well
103:30 - When you build a real program that program is going to consist hundreds or thousands of lines of code
103:36 - You shouldn't write all that code in one file like we have done so far
103:41 - You should break that code into smaller more maintainable and potentially more reusable chunks
103:47 - We refer to these chunks as functions
103:50 - So let me show you how to create your own custom functions. We start with the DEF keyword, which is short for define
103:59 - Next we need to give our function and name
104:01 - So let's call this greet all the best practices. You'll learn about naming your variables also apply to naming your functions
104:08 - So make sure your function names are meaningful
104:12 - Descriptive use lowercase letters to name your functions and an underscore to separate multiple words
104:19 - Now after the name we need to add parentheses you will see why shortly and then we'll add a colon
104:27 - Now what is going to happen?
104:28 - You know it you're gonna get indentation which means the following statements will belong to this function
104:35 - So here I'm gonna add two statements
104:39 - Hi there and welcome
104:42 - aboard
104:44 - Both designs belong to this function because they're indented
104:48 - Now we're done with this function. We need to call it. So we remove the indentation and we add two line breaks
104:56 - after this function
104:57 - This is what Papp 8 recommends to keep our code clean and maintainable now if you forget to add two line breaks
105:04 - Don't worry. As soon as you save the changes auto-pay of eight will automatically add these line breaks for you
105:10 - let me show you so I'm gonna remove these line breaks and
105:14 - Call this function create with parentheses
105:17 - Just like how we call the built-in functions now save the changes. There you go
105:23 - So we two line breaks after our function
105:27 - Now let's run this program
105:29 - So we get these two messages on a terminal
105:41 - Now here's a question for you, what is the difference between the greed and
105:45 - Trent functions the difference is that this print function takes an input
105:51 - Whereas our greet function doesn't take any inputs
105:55 - So let me show you how to pass inputs like first name and last name to this function
106:00 - When defining a function in between parentheses will list our parameters
106:05 - So here we add two parameters like first underline name and last underline name
106:12 - Now when calling this function we need to supply two values for those parameters. We refer to them as
106:20 - arguments, so
106:22 - maash
106:23 - Madani these are the arguments to the greet function. That's one of the terms that a lot of developers out there
106:29 - Don't know. They don't know the difference between
106:31 - parameters and arguments a
106:34 - Parameter is the input that you define for your function
106:37 - Where as an argument is the actual value for a given parameter? Okay
106:42 - Now, let's change line two and instead of saying hi there
106:46 - we can greet a person by their full name so we can convert this to a
106:51 - formatted string and
106:53 - Pass two fields here. First name as well as last name
106:59 - Save the changes run the program and this is what we get in terminal now
107:05 - This function is more useful. We can reuse it and call it with different arguments. So let's create
107:11 - John Smith as well
107:14 - Run the program so we get hi Muhammad on e and hi John Smith
107:19 - Now note that by default all the parameters that you define for a function are required
107:25 - So here our greet function takes two parameters if I exclude one of these arguments and save the changes
107:33 - You can see we have this red underline. So pilant is complaining and saying there is no value for argument last name
107:41 - Also, if we run the program we get this type error greet missing one required positional argument
107:49 - So let's put this back now later. I will show you how to define optional parameters
108:03 - So this is the simplified version of this greet function we created earlier
108:07 - Now in programming we have two types of functions
108:11 - functions that perform a task and
108:15 - Functions that calculate and return a value
108:19 - here are some examples both the print and greet functions are examples of type 1 the
108:26 - Performing a task, which is printing something on the terminal in
108:30 - contrast the brown function is
108:34 - An example of a function that calculates and returns a value so the functions that you create fall into these two categories
108:42 - Now let me show you how to rewrite this greet function but in the second form, so instead of printing this string on the terminal
108:51 - We simply return it. Let me show you so I'm going to delete all this code
108:57 - Define a new function
108:58 - But call it get underline
109:01 - greeting
109:02 - we add the name parameter and
109:05 - simply return this formatted string high
109:08 - name
109:10 - That's all we have to do. So we use the return statement to return a value from this function now we can call this function
109:18 - Get underlined greeting has a name
109:22 - Like Maj because it returns a value we can store that value in a separate variable like message
109:30 - Now you might be curious which form of these greeting functions is better
109:34 - well with this first implementation
109:36 - We are locked to printing something in the terminal in the future if you want to write that
109:42 - Message in a file or send it in an email
109:44 - You have to create another function so we cannot reuse this greet function in other scenarios in
109:52 - Contrast this second form is not tied to printing something on the terminal it simply returns a value
109:59 - Now we get this value and we can do whatever we want with it. We can print it on the terminal or
110:06 - We can use the built-in open function
110:10 - To write this message to a file so we can create a like content
110:15 - Txt
110:17 - Openings for writing this returns a file object and then we can call file the right
110:22 - message
110:24 - Now don't worry about these two lines later in the course
110:27 - I'm gonna talk about working with files
110:29 - But what I want you to take away here is that we have this message variable and we can do whatever we want with it
110:35 - we can print it on the terminal write it to a file send it in an email and so on and
110:41 - One more thing before we finish this lecture. So here's our greet function
110:44 - And as you can see, we're simply printing a string now if we call greet
110:51 - Give it a name run the program we get this message. Hi, Maj, but what if we put this?
110:58 - inside of a call to the print function
111:01 - Let's see what we get
111:03 - We get high Marsh followed by not. What is this? None is the return value of the greet function
111:11 - So in Python all functions by default return the non value non is an object that represents
111:18 - The absence of a value later in the course
111:20 - you're gonna learn more about not what matters now is that all functions return non by default unless
111:27 - You specifically return a value
111:30 - So here if we return
111:33 - Some string
111:36 - None will no longer be returned now. I just want to clarify something
111:40 - Earlier, I told you that we have two types of functions in programming functions that carry out the tasks or functions that calculate and return
111:47 - a value
111:48 - So back to the code we previously had
111:52 - So even though this function returns none by default, it is still classified as a function that carries out a task
112:07 - Let's create another function
112:10 - We call it increment you want to use this function to increment a number by a given value
112:17 - So here we simply return number plus by
112:23 - Now we can call this function like this increment two and one this returns a value so we can store it in
112:31 - a variable
112:32 - Like result and then print it on the terminal
112:36 - Let's run the program. We get three beautiful now we can simplify this code
112:41 - We have used this result variable only in a single place that is line six, so we don't really need it
112:48 - So on line six, we can replace result with a call to increment function
112:55 - like this so
112:57 - When python interpreter executes this code first
113:00 - It will call the increment function. It will get the result and temporary store it in a variable for us
113:07 - We don't see that variable and then it will pass that variable as an argument to the print function
113:13 - Now if we run this program we get the exact same result beautiful
113:18 - Now we can make this code more readable. If someone else looks at line five, they may not know exactly what
113:25 - These arguments are for we can use a keyword argument to make this code more readable
113:32 - So this one here is the value of this by parameter we can prefix it with
113:39 - The name of the parameter like this
113:42 - Now we can read this code almost like playing English
113:46 - increment two by one
113:48 - So if you're calling a function with multiple arguments, and it's not quite clear
113:52 - What is arguments are for you can make your code more readable by using keyword arguments
113:58 - So here y equals one is a keyword argument
114:10 - Earlier I told you that all the parameters that you define for a function are required by default in this lecture
114:17 - I'm gonna show you how to make the by parameter optional. So let's say we don't want to explicitly
114:24 - Pass y equals 1 every time we want to call this increment function
114:29 - we want to use this function to increment a value by 1 so
114:34 - We remove the second argument
114:36 - Now we need to give this parameter a default value. So we set it to 1
114:41 - Now if we call this function and don't supply the second argument this default value will be used
114:48 - Otherwise the value that we specify here will be used. Let me show you so we've run this program
114:54 - The result is 3 but if we pass the second argument here
115:00 - We'll increment 2 by 5. So we'll get 7
115:04 - So you can see it's pretty easy to make a parameter optional just be aware that all these optional parameters should come after
115:12 - the
115:13 - Required parameters in other words. I cannot add another required parameter here
115:20 - Let's call that another. I cannot add that here. If I save the changes you can see we get a red underline here
115:28 - So all the optional parameters should come
115:32 - after the required parameters
115:34 - Now obviously in this case, we don't need the second parameter. So let's delete it
115:47 - There are times that you may want to create a function that takes a variable number of arguments here is an example
115:54 - Let's define this function
115:56 - multiplied
115:57 - That takes two parameters x and y and simply returns x times y now
116:04 - We can call this function like this
116:09 - So far so good, but what if you want to pass
116:12 - one or two more arguments here that doesn't work because our multiply function takes only two parameters to
116:19 - Solve this problem. We need to replace these two parameters with a single parameter
116:25 - we use a plural name here to indicate that this is a collection of
116:30 - Arguments and then we prefix it with an asterisk. This is the magical part
116:35 - Let me show you what happens when you use an asterisk here. So temporarily let's delete this line and simply print
116:43 - Numbers, let's see what we get here
116:46 - So run the program
116:48 - You can see all our arguments and they're packed in parentheses. What is this?
116:54 - Well earlier you learned about lists
116:57 - I briefly mentioned that you can use square brackets to create a list of objects like 2 3 4 5 now
117:04 - Later in the course. We have a comprehensive section about lists. So don't worry about the details of lists and how they work
117:11 - But what I want you to note here is that the only difference between this list and what we have here is in the notation
117:19 - so use square brackets to create lists and
117:23 - Parentheses to create tuples some people call it two poles or two poles. So a top pole is similar to a list in that
117:30 - it's a collection of objects the
117:32 - Difference is that we cannot modify this collection. We cannot add a new object to this topple once again later in the course
117:40 - We're going to have a comprehensive section about lists tuples and other data structures
117:45 - What matters now is that?
117:47 - These topples just like lists are iterable so we can each raid over them
117:52 - Which means we can use them in loops. Let me show you so
117:57 - That's right for number in numbers : let's just print one number at a time
118:06 - Actually, we don't need this line. So delete and run the program
118:11 - So we iterate over this topple and in each iteration we get one number and print it on the terminal
118:18 - So now with a simple change we can calculate the product of all these numbers
118:23 - All we have to do is to define a variable like total
118:27 - initially, we set it to one and then in each iteration we get total and
118:34 - Multiplied by the current number or we can rewrite this statement
118:39 - Using an Augmented assignment operator. So total times equal number
118:46 - Line five and four are exactly identical. So I'm gonna use line five because it's shorter and cleaner delete and
118:55 - Finally, we'll return the total now
118:59 - One of the issues I see often in beginners code is that they don't use this indentation
119:05 - Properly so they put the return statement here and then they wonder why their function doesn't work properly if you put the return statement
119:13 - Here it will be part of the for loop. So
119:16 - It will be executed in each iteration in this case after the first iteration
119:22 - Because of this return statement, we'll return from this multiply function. So the total will not be calculated properly
119:29 - We need to put this at the same level of indentation as other statements in this function
119:35 - So here we have our for statement. We loop over all the numbers
119:40 - We calculate the total and then finally return it
119:44 - So with this implementation we can get the result and printed on the terminal
119:50 - let's run the program and you can see the product of these numbers is
119:56 - 120
120:04 - So in the last lecture, you learned the syntax to pass a variable number of arguments to a function
120:10 - We have a variation of this syntax with double asterisk. And that's what I'm gonna show you in this lecture
120:17 - So for this demo, let's rename this function to save
120:21 - underline user and
120:24 - Rename the argument to user. So let's imagine we're gonna use this function to save information about a user
120:32 - Now in this function, let's just print this user argument. We're done with our function
120:39 - Let's call it save underline user
120:42 - Now instead of passing arbitrary arguments here. We can pass arbitrary keyword arguments
120:48 - Remember keyword arguments so we have name equals value
120:52 - So here we can add multiple keyword arguments like ID equals 1 name equals John
121:00 - Age equals 22 and so on so we are passing 3 keyword arguments to this function
121:07 - Now let's run this program
121:09 - This is what we get. Look at the syntax. We have these curly braces and in between them we have
121:16 - multiple key value pairs so key colon value
121:20 - Comma here's another key value pair and here is the last one
121:25 - This object you see here is called a dictionary
121:28 - It's another complex type or a data structure in Python, and I'm going to talk about that in detail later in the course
121:35 - for now
121:36 - All I want you to take away is that when we use double asterisk here we can pass multiple
121:42 - key value pairs or multiple keyword arguments to a function and
121:46 - Python will automatically package them into a dictionary. So this user object here is a dictionary
121:53 - now using the bracket notation
121:55 - We can get the value of various keys in this dictionary so we can print user
122:01 - Square brackets we pass a string and this is the name of our key like ID. Let's run the program
122:08 - We get 1 or we can access the value of
122:12 - Name key
122:13 - Run program so name is John. So this is how deeksha Mary's work
122:25 - In programming we have a very important concept called scope which refers to the region of the code
122:32 - Where a variable is defined so in this example?
122:36 - We have this message variable
122:37 - The scope of this variable is the greet function it only exists inside of this function
122:43 - so if we go outside of this function and try to print
122:48 - Message see what happens. As soon as I save the change as we get this red underlined
122:54 - undefined variable message and
122:57 - If we run our program
122:59 - We get this name error named message is not defined
123:04 - the same rule applies to the parameters of our functions
123:07 - So if we add a name parameter here and then try to print it outside of the greet function we get the same error
123:15 - so the scope of the name and message variables are the greet function and we refer to these variables as
123:22 - Local variables in this function. They're local in this function, which means they don't exist anywhere else and
123:30 - That means we can have another function. Let's say send email
123:35 - With a parameter with the same name here. We can have a message variable
123:41 - But this message variable is completely different from the message variable we have in the greet function
123:46 - And of course the same rule applies to the named parameters in these functions
123:51 - They're completely separate these local variables have a short lifetime. So when we call
123:59 - Let's say the greet function and pass a name
124:02 - Python interpreter will allocate some memory and have the name and message variables
124:08 - Reference those memory locations when we finish executing the greet function
124:13 - Because these variables are not referenced or used anywhere else
124:17 - Eventually, they get garbage collector
124:19 - Which means Python interpreter will release the memory that allocated for these variables
124:25 - So these are the local variables in
124:28 - Contrast to local variables we have global variables
124:31 - So if we move this message variable outside of the great function now, it's a global variable
124:38 - Which means it's accessible anywhere in this file
124:41 - So the scope of this variable is this file we can use it anywhere in this file in any functions or outside of a function
124:48 - now for this reason
124:50 - Global variables stay in memory for a longer period of time until they are garbage collected and you should not use them that often
124:57 - In fact global variables are really evil. So as a best practice
125:02 - Create functions with parameters and local variables. Now what if here in the greet function?
125:09 - We set message to let's say B
125:12 - Now let's delete this second function. We don't really need it for now. So we call the greet function in this function
125:19 - We assign a new value to the message variable now, let's print
125:23 - This message and see what we get
125:26 - What do you think? We're gonna get? Well, let's take a look
125:30 - We get a but didn't we change the value of message variable to be?
125:35 - Not really because by default python interpreter treats this message variable as a local variable in the greet function
125:43 - Even though it has the same name as the global variable that we have on line one
125:49 - So these two variables are separate now
125:51 - I've seen some tutorials or even books teaching you bad practices, for example
125:56 - They show you how to modify the value of this global message variable
126:01 - Inside of a function. Let me show you how to do that
126:04 - But remember this is a bad practice and you should avoid it at all times. I will explain the reason in a second
126:11 - so these tutorials or books teach you to use the global keyword here and
126:17 - Reference the message variable when python interpreter sees this line it will realize that in this function
126:24 - We want to use the global message variable. So it will not define a local variable in this function
126:31 - Now with this change if we run our program
126:35 - You can see we get beyond the terminal because in this function we are
126:39 - Modifying the value of the global message variable. Why is this bad?
126:44 - Because it is possible that you might have multiple functions that rely on the of this global variable
126:51 - If you're accidentally or deliberately change the value of this global variable in one function
126:57 - This might have a side effect in other functions
127:01 - Those functions may not behave properly and this way we can create a bug in our program. So
127:07 - Global variables have always been bad. This is not a Python thing. This is a discussion that's been going on for decades
127:14 - Avoid them as much as you can or if there are situations that you really need to define a variable globally in a file
127:21 - That's okay, but do not modify it in a function as you see here. This is a really bad practice
127:26 - So that's all about local and global variables
127:37 - In this lecture, I'm going to show you how to find and fix bugs in your programs. So here's the multiply function we wrote earlier
127:46 - Let's add a couple of statements after this function. So print start and
127:53 - Then we'll call the multiply function
127:56 - give it three arguments one two and three so the result should be six and
128:02 - Here we print the result on the terminal now
128:06 - To create a bug in this program. I'm going to deliberately
128:10 - indent this return statement
128:12 - so now when we run this program
128:15 - Instead of six we get one
128:17 - So we're gonna use a technique called debugging to find and fix this bug
128:23 - Alright first we need to open the debugging panel
128:27 - The first time you want to use debugging in a Python project you need to click this icon
128:32 - This would generate a new file called launch the JSON in this file
128:38 - We have a bunch of debugging configuration. You never have to touch any of this, so don't worry about it
128:43 - Close it you can see this file is placed
128:47 - Inside of this vs code folder. It's right here. Launched a JSON
128:51 - Now when we have this file, we can go to the debugging panel and from this list
128:57 - We can select a debug in configuration
129:00 - Some of these configurations are useful for more complex applications
129:05 - For example, we use Python Django to debug a web application built with Python for this course
129:12 - We're going to use Python current file with integrated terminal. So select this now to start debugging
129:20 - First we need to add a breakpoint on one of these statements. So I'm going to put the cursor on line 8 and
129:27 - insert a breakpoint by pressing f9
129:30 - So this is a breakpoint we can press f9 one more time to remove it
129:35 - If you're on a Mac keyboard, you should press the function key
129:38 - Which is on the bottom left corner of your keyboard, and then press f9
129:43 - So here we have a breakpoint now we can press f5 to run the application up to this point
129:50 - so f5
129:53 - So this automatically opens the integrated terminal here don't worry about this I'm going to close it
130:00 - So you can see our program is running up to this point. This line is highlighted
130:05 - now we can execute this program line by line and see exactly what happens at runtime, so
130:12 - To execute one statement at a time, press f10
130:17 - Okay, we are done now we are on line 9
130:20 - However on line 9 you are calling the multiply function if we press f10 again
130:27 - The execution stops, so we couldn't figure out why we got one as the result of multiplying these numbers
130:34 - So let's start debugging one more time. We press f5
130:39 - So once again, we are on line 8, let's step over this line with f10
130:45 - Now this time we want to step into this multiply function. So we see exactly what is going on here
130:51 - so instead of f10, press f11
130:55 - Now we are on line 2
130:58 - So if you're calling a function that you have to find you can step into that function using f11
131:04 - Now here we are in the multiply function on the left side inside the variables panel
131:09 - You can see all the variables that are meaningful in this function. So hungry. Locals we have numbers
131:16 - So this is our numbers argument you can see this is set to a topple with 3 numbers 1 2 3
131:23 - Right now our total variable is not in this list because it's not defined yet
131:28 - The moment we step over this line with f10
131:32 - total comes to existence and you can see initially is set to 1
131:36 - Now we are at the beginning of our for loop. Let's press f10 one more time
131:43 - Here we are we're going to multiply total by number so let's step over this line as well
131:50 - Now at this point we have a new variable called number
131:54 - That is our loop variable
131:56 - Initially, it's set to 1
131:58 - Now here we are on line 5 if you press f10
132:02 - We can see we jump out of this function
132:05 - So our loop did not execute to completion and that is the reason our program has a bug
132:12 - So to fix this I'm gonna stop the debugger with Shift + f5
132:18 - Now back here let's remove the indentation
132:23 - Save the changes run the program in debug mode one more time. So we press f5
132:31 - Here we are
132:32 - let's step over this with f10 now step into this with f11 and
132:37 - step over these lines with f10 a few more times, so
132:41 - f10 one more time
132:44 - Total it's set. Now. We are in the second iteration
132:47 - Let's press f10 one more time in this iteration
132:50 - You can see number is set to two our total is still one. So let's step over this line as well
132:58 - Now total is updated to two
133:01 - Here we are at the beginning of the third iteration
133:04 - Let's step over this line in this iteration number is three
133:09 - So after we execute this line because total is currently two when we multiply it by three
133:15 - We'll get 6 so f10 one more time
133:19 - Now we only have three iterations in this loop
133:22 - so if you press f10 one more time our loop completes now, we are ready to return total which is currently six so
133:31 - f10 we are on line nine and
133:34 - We're done
133:35 - Now one more tip in this demo. I put the breakpoint on the first line of the program
133:40 - You don't always have to do this. For example here. We know that our multiply function has a bug
133:46 - So instead of putting the breakpoint on line eight we could put it on line two
133:53 - so when we start the program in debug mode with f5
133:57 - We immediately start in the multiply function
134:01 - And one more tip before we finish this lecture if you step into a function and you know that that function works properly
134:08 - We can immediately step out of that function with Shift + f11
134:14 - So you don't have to execute the entire function line by line
134:18 - You can press shift and f11 to step out of that function
134:30 - Alright, let's finish up this section by looking at a few very useful shortcuts for writing code fast first
134:36 - I'm going to show you the shortcuts for Windows users. And in the next lecture. We will look at the shortcuts for Mac
134:42 - So if you're a Mac user feel free to skip this lecture
134:45 - So here we are on line 9 and my cursor is right at the beginning of the line
134:50 - Let's say you want to move the cursor to the end of the line
134:52 - Instead of pressing the right arrow to go all the way to the end
134:56 - we can simply press the end key and here is the cursor or
135:00 - If you want to move the cursor to the beginning of the line simply, press the HOME key. There you go
135:06 - Similarly, if you want to move the cursor to the beginning of the file, press ctrl + home
135:12 - Here it is or ctrl + end/2 go to the end of the file
135:16 - now, let's say we want to move this line up instead of cutting it from here and then copying it somewhere else we can simply
135:24 - move it up by pressing Alt +
135:27 - The up or down
135:29 - arrows or
135:30 - If you want to move these two lines up and down simply select them then hold alt and then up or down very easy
135:38 - Now if you want to duplicate a line or multiple lines simply select them now hold down shift
135:44 - Alt and then press the down key. We can duplicate it as many times as you want. There you go
135:51 - Here's another useful shortcut. If you want to convert this line, or maybe these two lines into a comment simply hold down control and press
136:00 - Slash using the same shortcut. You can remove the comment so you can toggle it very easy and
136:07 - Finally if you want to type the name of a variable or a function like multiplied
136:12 - You don't have to type all characters. Here are a few ways to type this quickly
136:17 - We can just type the first few characters and here in the intellisense. You can see that so if you press ENTER
136:24 - This is what we call auto-completion
136:26 - Here's another way. So instead of writing the first few letters
136:31 - You can just pick any letters in sequence and type them so I can type mty
136:37 - or I can just type mpy or
136:40 - Why there you go, here it is. So I hope you enjoyed these shortcuts and thank you for watching
136:53 - Alright now, let's take a look at the shortcuts for a Mac keyboard
136:57 - So here we are on line 9 and my cursor is right at the beginning of the line if you want to move the cursor
137:03 - To the end of the line instead of using the right arrow to go all the way
137:08 - Simply hold down the function key and press right?
137:11 - Here it is. Or you can press function and left to jump to the beginning of the line
137:18 - Similarly, you can press function and up
137:21 - To go to the top of the file or function and down to jump to the end of the file
137:27 - Pretty useful now. Let's say you want to move this line up
137:31 - Instead of cutting it from here and then copying it somewhere else
137:34 - You can simply move it up by holding down alt or option and then pressing the up arrow or down
137:42 - Very easy, or we can select these two lines hold down the alt or option key
137:47 - Move it up or down
137:50 - Here's another useful shortcut
137:52 - we can convert these two lines into a comment by pressing command and slash and
137:57 - Then we can remove the comment using the same shortcut
138:01 - so we can toggle it and
138:03 - finally if you want to type the name of a variable or a function like multiply you don't have to type all the letters like
138:10 - Multiply that is very slow
138:12 - You can type the first few letters like mult and here in the intellisense. You can see it's selected, so press Enter or
138:20 - You can pick any characters in sequence and type them like mty
138:25 - here it is, or we can type an py or
138:29 - M TP so you can abbreviate it any way you want. I hope you enjoyed these shortcuts and thank you for watching
138:44 - One of the questions that often comes in programming interviews is the fizzbuzz
138:50 - Algorithm you might be surprised that there are a lot of developers out there with even years of experience
138:55 - But they don't know how to solve this simple programming problem. That's why I decided to include this in my course
139:02 - So, let's see how this algorithm works and then you can spend 10 to 15 minutes on this exercise on your own
139:09 - So here we have a function
139:10 - Fizz buzz that takes an input and depending on the input we give it it returns
139:16 - Different results here are the rules if the input that we give it is divisible by 3
139:22 - It will return the string fizz. Let me show you so we run this program we get fizz
139:29 - If the input is divisible by 5, it will return buzz take a look
139:35 - Here's buzz
139:37 - Now the third rule if the input is divisible by both 3 & 5 it will return
139:44 - Fizzbuzz, so let's pass 15 here
139:48 - We'll get fizzbuzz
139:50 - For any other numbers it will return the same input. So if I pass
139:55 - 7 it's not divisible by 3 or 5. It will return
140:01 - 7 itself, so spend 10 to 15 minutes on this exercise. You will see my solution next
140:14 - All right, let's see how we can solve this problem so we get the input and check to see if input is divisible by 3
140:23 - Then we can set a variable like result to phase
140:28 - Now let me temporarily
140:30 - Simplify these rules because I want to show you a really cool technique
140:34 - So let's imagine if the input is divisible by 3. We'll return fizz
140:40 - Otherwise, we'll return bus, so
140:44 - LS : we set the result to buzz and finally we'll return this resolved variable
140:52 - This is one way to implement these rules, but it's not the best way there is a better and cleaner way
140:58 - Let me show you so instead of defining this result variable and then returning it we can simply return
141:06 - this string here and
141:10 - also here and
141:12 - Then we can get rid of line six. So we remove one unnecessary line of code
141:17 - this was one technique the other technique I want to show you is when you have an if statement and
141:24 - In your if flock you're returning a value. You don't really need an else clause
141:30 - because if this condition is evaluated to false the control moves to the else clause and all we're doing here is
141:38 - Returning a different value. So this is the only possible outcome
141:43 - so here we can remove this else clause and
141:46 - simply
141:47 - return bus
141:49 - So with this technique I remove an unnecessary
141:53 - Indentation as well. I've made our code more linear. Okay. Now, let's go back to our original algorithm
141:59 - So if the input is divisible by three, we'll return fizz
142:04 - Now we check to see if the input is divisible by five. We'll return buzz
142:08 - So here we don't really need an Elif because if this condition is false
142:14 - we'll get here anyway, so we can check if
142:18 - Input is divisible by five
142:22 - We will return buzz
142:25 - once again
142:25 - if this condition is false the control moves here now we check the same if the input is divisible by three and
142:35 - It is also divisible by five then we will return
142:41 - Fizz buzz
142:43 - Now this expression is a little bit long
142:45 - I would prefer to make it more readable by putting parentheses around the first and second parts
142:53 - like this
142:55 - That is cleaner. Now if this condition is also false the control moves here
143:01 - That means our number is not divisible by three or five so we should simply return the input
143:07 - Once again, we don't need an else or another if we simply return the input
143:12 - Now, let's run this program and see if it's working properly or not
143:16 - so we call our function with three and
143:19 - We get fizz beautiful. Let's call it with five
143:23 - We get Buzz perfect. What if we call it with 15 we should get fizz bus
143:30 - However, we get fizz what is going on here?
143:33 - The reason this happened was because when we pass 15 here line two is executed
143:39 - Obviously 15 is divisible by three. So that is why we immediately return fizz to solve this problem
143:47 - We need to move this condition, which is more specific to the top
143:51 - So I've selected these two lines using alt + up. I
143:56 - Move these lines up beautiful. All right. Now, let's run the program one more time
144:02 - So we get fizzbuzz. Once again, let's test it with
144:05 - three
144:07 - Now we get fares. Let's test it with five when writing functions don't assume that your function is working
144:13 - Make sure to test it with all different kinds of values
144:16 - Let's test it but 5 we get Buzz beautiful. What if you pass?
144:21 - 7 which is not divisible by 3 or 5 we get 7 beautiful
144:26 - so what you see here is the simplest and most elegant implementation of the fizzbuzz algorithm and that
144:32 - Brings us to the end of this section in the next lecture. We're going to explore data structures in Python
144:38 - You're going to learn about lists tuples sets and dictionaries. I hope you enjoyed this section and thank you for watching
144:48 - You
144:54 - You made it this far and that makes me think that you're really enthusiastic about learning Python
145:00 - So I highly encourage you to enroll in my complete Python course where we go way beyond this crash course
145:06 - You will learn how to use Python in real-world scenarios such as data analysis and visualization
145:12 - automating repetitive
145:13 - boring tasks that involve working with files and folders
145:17 - spreadsheets PDFs
145:19 - data compression
145:20 - Sending emails web crawling consuming api's and much much more. This course comes with a 30 day
145:27 - No questions asked money back guarantee and a certificate of completion if you're interested click the link below this video to access the course
145:35 - Once again, thank you for watching
145:37 - Please support me by liking and sharing this video and also subscribe to my channel to get free new videos every week
145:44 - Thank you, and have a great day

Cleaned transcript:

In this course you're going to learn everything You need to get started with Python just be aware that I've designed this course for beginners So if you have some programming experience check out my other Python course for developers You can see the link on the top right corner of this video so Python is the world's fastestgrowing and most popular programming language not just amongst software developers, but also amongst mathematicians data analysts scientists accountants network engineers and even kids In fact, it's the ideal programming language to learn first But what makes Python so special here are six reasons with Python You can solve complex problems in less time with fewer lines of code than many other languages That's why huge companies like Google Spotify Dropbox and Facebook have embraced this beautiful and powerful language. Here is an example Let's say we want to extract the first three characters of the text. Hello world This is the code we would have to write in csharp This is how we would do this in JavaScript. And here's how we would do it in Python See how clean and simple the language is and that's just the beginning Python is a multipurpose language and you can use it for a wide range of jobs such as data analysis AI and machine learning writing automation scripts building web mobile and desktop applications As well as software testing or even hacking so if you want a highpaying long lasting career in any of these areas Especially AI and machine learning Python is the language to put those opportunities at your fingertips. In fact, according to indeed.com The average salary of a Python developer in the US was over one hundred and fifteen thousand dollars in March 2018 And here are four more reasons that make Python the most desirable language Python is a highlevel language so you don't have to worry about Complex tasks such as memory management as you do in C++ It's cross platform, which means we can build and run Python apps on Windows Mac and Linux it has a huge community So whenever you get stuck There is someone out there to help and it has a large ecosystem of libraries frameworks and tools Whatever you want to do. It is likely that someone else has done it before because python has been around for over 20 years There are two versions of Python out there Python 2 Which is the legacy version of Python and is going to be supported until year 2020 and Python 3 Which is Python for the future in this course, you're gonna learn Python 3 Hi, my name is Muhammed Ani, and I'm going to be your instructor in this course I'm a software engineer with 18 years of experience And I've taught way over a million people how to code or how to become top professional software engineers To learn more about me and my courses head over to code with mass comm. Alright now, let's get started All right now we were ready to download and install Python The first thing I want you to do is to open up your browser and head over to python org on This page under the downloads. You can see the latest version of python currently. The latest version is 3.7 Chances are in the future when you're watching this video. There is a newer version available Don't worry, all the materials in this course will continue to apply with the future versions of Python. So go ahead and download Python Then run it if you're on Windows, we're going to see this checkbox here add Python to path this is very important. Make sure to take it. Otherwise, you're not going to be able to follow the course So now go ahead and install it Now let's verify that we have installed Python properly if you're on Windows here in this search bar type CMD which is short for command prompt Dr. In command prompt type Python You can see we have successfully installed Python version 3.7 now to exit press ctrlz and then enter If you're on Mac, press command and space this opens up the spotlight search So here type terminal Terminal and Mac is like command prompt on Windows now Mac and Linux by default come with an older version of Python That is version 2. So if you type Python you can see Python 2 here. Let's start what we want so press control D to exit and then run Python 3 and This verifies that we have successfully installed Python 3.7 So this environment you see here is what we call Python interpreter Which is basically a program that executes Python code we can type our Python code in a file and give it to this Interpreter or we can type our code directly here in this interactive shell So here we can write an expression like 2+2 in Programming an expression is a piece of code that produces a value So here when we add two plus two we get a value that is why we refer to this piece of code as an expression So enter we get four. Let's try a different kind of expression Let's see if two is greater than one We get true, which is an example of a boolean value. You're gonna learn about these boolean values in the next section Now what if we type 2 is greater than 5 Enter we get false. So in programming, we have true and false which are similar to yes, and no in English Now what if we type 2 is greater than but we don't add a second value here. Just press Enter We get a syntax error in Programming syntax means grammar. So just like we have the concept of grammar in the languages that we speak We have the exact same concept in programming if we write a sentence that is not grammatically, correct? Chances are some people may not understand that sentence. So in this example, we have this expression, which is incomplete It doesn't have the right grammar or syntax That is why Python interpreter is complaining by returning an error So this interactive shell is a great way to quickly experiment with a bit of Python code But that's not how we build real world applications to do that We need a code editor and that's what I'm gonna show you in the next lecture When it comes to typing Python code you have two options You can use a code editor or an IDE Which is short for integrated Development environment an IDE is basically a code editor with some fancy features like auto completion Which means as you type code this feature helps you complete your code so you don't have to type every character by hand It's a productivity boosting feature It also gives you additional features like debugging which means finding and fixing bugs in your programs testing and so on For both code editors and IDs are so many options out there The most popular code editors are vs code atom and sublime You can use the code editor that you prefer in terms of the idea is again There are so many options out there The most popular one is pie chart in this course I'm gonna use vs code or Visual Studio code because that's my favorite code editor later in the course I will show you how to install a plugin or an extension that will convert vs code to a powerful ID So before going any further head over to code that visual studio comm and download the latest version of vs code Now it vs code open on the top from the file menu go to open And somewhere on your desk create a new folder Let's call this folder. Hello world and Then open it Beautiful now click this icon on the top this opens up the Explorer panel in this panel You can see all the files and folders in your project. So let's add a new file and Call that app that PI. So all our Python files should have the PI extension press Enter now, let's close this and type a bit of Python code in this lecture We're gonna use one of the builtin functions in Python called print so in Python We have a lot of builtin functions for performing various kinds of tasks For example as a metaphor think of the remote control of your TV on this remote control You have a bunch of functions like turn on turn off change the channel change the volume and so on These are the builtin functions and your TV We have the same concept in Python and many other programming languages so one of these builtin functions that comes with Python is print and We can use this to print something on the screen now whenever you want to use a function you should open and close parenthesis in Programming we say we're calling the print function calling a function means executing it Now let's display the hello world message on the screen whenever you want to work with text. You should put your text in between quotes either double quotes or single quotes now I'm gonna go with double quotes and add hello world and Then put a happy Persian cat here Beautiful save the changes with command and s on Mac or ctrl + S on Windows Now to execute this code we need to go back to command prompt on Windows or terminal on Mac But the good news is that we don't have to switch programs here in vs code We have an integrated terminal. So press ctrl + backtick That is the key before number 1 on your keyboard That is just below the escape button So this is our integrated terminal now you front windows type Python if you're on Mac or Linux type Python 3 and next to that at the name of our file that is up at PI and Here's our hello world message in the terminal beautiful Now, let's take this to the next level and make it a little bit more interesting let's close this terminal window by pressing ctrl and backtick and Add a second line of code So one more time print This time let's add quotes with a star in between them Now, let's see if you want to repeat this star ten times. So here we can multiply this By 10 save the changes open up the terminal and run our program and You can see this star is repeated 10 times So as you see the instructions on our program are executed from top to bottom in order in the next lecture I'm going to show you how to convert this vs code to a powerful IDE for building Python applications In this lecture I'm gonna show you how to convert vs code to a powerful IDE by using an extension called Python with this extension or plugin we get a number of features such as linting which basically means Analyzing our code for potential errors. You also get debugging which involves finding and fixing errors We'll look at this later in the course We also get auto completion which basically helps us write code faster So we don't have to type every character we get code formatting which is all about making our code clean and readable Just like how we format our articles newspapers books to make them clean and readable We get unit testing which involves writing a bunch of tests for our code we can run these tests in an automated fashion to make sure our code is behaving correctly and finally we get code snippets which are Reusable code blocks that we can quickly generate so we don't have to type them all by hand Now don't worry about memorizing any of these as we go through the course. You're going to learn about these features Now here in vs code on the left side. Click this icon This opens the extensions tab. So these are the extensions that we can install in vs code to bring in additional Functionality here under the recommend the tab You can see the python extension if you don't see this simply type Python here on the top and here's the extension to go ahead and install this and Then you'll have to reload yes code Now here on the bottom right corner you can see this message Linter pilant is not in stock. So as I told you before linting is about finding potential errors in our code Linter is a program or a tool that analyzes our code and finds these potential problems now for Python There are several interceptor pilant is one of the most popular ones that this Python extension uses by default So we need to go ahead and install pylons as well now to do this first. We need to change our Python environment So if you look here on the bottom left corner, you can see the current python that is used in vs code That is python 2 point 6 point 9 on my machine chances. Are you see a different version here? So click here and In this list, make sure to select python 3 point 7 So this changes our Python environment to Python 3 point 7 and then we can install pilant by clicking this button Ok pilant is installed beautiful in the next lecture. I will show you how linting works In this lecture, I'm gonna show you linting and action so let's start by writing some invalid code like this print space with no parentheses and Then hello work Earlier, I told you that print is a builtin function and whenever you want to use or call a function You should always use parentheses now to be more precise This is actually valid Python 2 code, but because we're using Python 3 here This is invalid code from Python 3 point of view So now when I save the changes you can see this red underline here. Let's hover our mouse Over this underline you can see this tooltip It's coming from Pyland And here's the error message missing parentheses in call to print did you mean print with parentheses? So this is the benefit of linting as you're writing code, you can see potential problems in your code You don't have to wait to run your program to see these errors so now if we put Parentheses here and save the changes you can see that red underline is gone. Let's look at another error Let's type two plus and then save the changes Earlier, we run this code in Python interpreters interactive shell there. We got a syntax or grammar error So if you hover your mouse here one more time You can see pylons is telling us that this is invalid syntax or invalid grammar It's like an incomplete sentence. So this is linting in action Now let me show you a couple useful shortcuts here on the top. Look at the View menu Here we have this problems menu Look at the shortcut on Mac is shift command and M on windows is probably shift control M So as you're working with vs code try to memorize these shortcuts because they really help you write code faster Now, let's take a look At these problems panel. So this problems panel lists all the issues in your code in one place So if you have an application with multiple files, this is really useful because some of those files may not currently be open So this linter Pyland will analyze all your files and if it finds any issues It will list them here in the problems panel. Now, you can also put this on the right side of your screen So let's put it here So as you write code these problems will appear here. Now. Let's fix this issue so I'm gonna add three here save the changes and you can see the problem disappear and One last thing before we finish this lecture Once again on the top, let's go to the View menu. The first item is command palette This is a very important feature in vs code Once again, look at the shortcut that is shift command and P on Mac or shift control P on Windows This command palette you can execute various commands in vs Co if you type lint here you can see all commands related to linting as you can see all these commands are prefixed with Python because these Commands come with a Python extension that we installed earlier So these are additional features available to us in vs code. The first command here is select linter In this list, you can see various linters available for pilot So as you're reading tutorials or talking to other people You will hear about linters such as flake ate my pie pep 8 and so on Different developers prefer different linters. I personally prefer pilant That is the most popular one and that's the default linter set and the Python extension of vs code if you're adventurous You can try using other linters on your own the difference between these linters is in how they find and report errors Some error messages are more meaningful or more friendly the others are more ambiguous So that's all about linting in the next lecture. We'll talk about formatting code In Python community we have a bunch of documents called Python enhancement proposals or peps here on Google if you search for Python peps You can see the list of all these paps under python.org slash dev slash paps Let's have a quick look here So here are the paps you can see each PAP has a number and a title the one that is very popular amongst Python developers is pep 8 which is a style guide for Python code a Style guide is basically a document that defines a bunch of rules for formatting and styling our code if you follow these conventions The code that you write will end up being consistent with other people's code now if you have time you can go ahead and read this PAP 8 documentation, but if not, Don't worry because throughout this course I'm gonna explain the key things in pep 8 in this lecture I'm gonna show you a tool that helps you automatically format your code according to pap 8 So back in vs code, let's write some Python code x Equals one here. I'm declaring a variable and setting it to one if you're not familiar with variables. Don't worry in the next section You're gonna learn about them So according to pep 8 this code is considered ugly Because by convention we should add a space around this equal sign or the assignment operator Now since you're starting out with Python, you probably don't know these rules So let me show you a tool that helps you automatically format your code. Let's revert this back to its original state Now we need to go back to the command palette remember? So it's right here under view and the shortcut is shift command and P Here if you search for format, you can see this command format document the first time you execute this command You're going to see this message here Formatter Auto kept 8 is not installed. So there are a bunch of tools for formatting Python code The most popular one is auto kept 8 and this is the tool that this Python extension We installed uses to format our code. So let's go ahead and install this Good Now one more time, let's open up the command palette and execute format document See is tool automatically formats our code beautiful. Let's take a look at another example I'm going to declare another variable Y and set it to two and a variable with a long name like unit Underlined price. I'm set this to 3 Now some developers have this habit of formatting their variable declarations like this So they put all these Equal signs in the same column according to pepp 8 this is considered ugly So once again, let's format our code That is better beautiful. Now, let me show you a trick Opening up this command palette and searching for format document every time is a little bit timeconsuming So I want to show you how to have your file automatically formatted as soon as you save the changes On the top. Let's go to the code menu preferences and settings Here in the search box search for format on save So we have this option editor format unsaved take this Now back to app top I I'm gonna change the formatting of these lines make them really ugly Now as soon as I save the changes You can see my code is reformatted beautiful So you have learned that in order to run this Python program We'll have to open up the terminal window and run Python on windows or Python 3 on Mac and an app that pi This is a little bit tedious. So let me show you a shortcut Once again, let's go to the extensions panel here search for code runner There are multiple code runners out there the one that I'm talking about is this one with the yellow icon So go ahead and install this and then reload yes code Now instead of opening up the terminal and manually typing Python after pi All you have to do is to press ctrl, alt and in You can see the output here beautiful just be aware of that If you make any changes, you'll have to save the changes before using this shortcut Otherwise you're going to see the old result now. There is a tiny problem here So you can see this is the command that is executed to run this Python program So by default this command is using Python U and here is the name of our file if you're on Windows That's perfectly fine But if you're on Mac, you know that Python refers to Python here we want to change this to Python 3 This is very easy Once again on the top under the code menu, let's go to preferences settings and then here Under this dot go to open settings that JSON Now here in the search bar type code runner dot executors map So these are the default settings used by this code runner extension You can see this extension support executing code in a lot of languages like JavaScript Java and so on now if you scroll down Here we can see Python and in front of that you can see the command that is used to execute Python code we need to change this However, we cannot change the default settings. We should change the user settings. So on the right side after the last setting type a comma and then in quotes type code runner dot executors map and then press enter This will automatically copy all the settings on the left side to the right side Now we can easily Change one of this. So here's Python. Let's change the command to Python 3 You only have to do this if you're on Mac, and by the way Sorry, if I have mentioned Windows and Mac a few times throughout this course, that's pretty much it We are not going to differentiate between Windows and Mac in the future. So save the changes and we're done So I've got a few questions for you guys I want to see if you have been really paying attention to this video or not You better have so here is the first question for each question. I want you to pause the video Think about the answer for a few seconds when you're ready continue watching. So here's the first question. What is an expression? An expression is a piece of code that produces a value Here's an example of an expression. What do you think is the value of this expression? Well here we have this string. We're multiplying this by 3 So the result will be a string of three asterisks like this Here's another question. What is a syntax error a syntax error is a kind of error that is due to bad syntax or bad grammar in the code and Finally the last question. What does a linter do a Linter is a tool that checks our code or potential errors mostly in the category of seen tactical errors So if you have grand medical issues in our code, the linker will tell us before running our program Okay, that's it for now if you like more quizzes and programming exercises look at the link below this video and if you enjoyed this video I hope you have please support me by giving a thumbs up Please like this video and share it with others in the next section. We're going to look at the fundamentals of Python You Well, hello Marsh here thank you for watching my Python tutorial I wanted to let you know that this tutorial is the first two hours of my Complete Python course where you will learn how to use Python in realworld scenarios such as data analysis and visualization Automating repetitive boring tasks that involve working with files and folders spreadsheets PDFs data compression sending emails web crawling Consuming API is like Yelp to get information about businesses and much much more. This course comes with a 30 day No questions asked money back guarantee and a certificate of completion If you're interested, click the link below this video to access the course Let's start this section by a discussion of variables which are one of the core concepts in programming We use variables to store data in computer's memory. Here are a few examples I'm gonna define a variable called students under line count and setting it to a Thousand when we run this program Python interpreter will allocate some memory and store this number thousand in that memory space Then it will have this variable reference that memory location So this variable is just like a label for that memory location We can use this variable or this label anywhere in our program to get access to that memory location and the data is stored there so now if we print students count and run our program we will get The number of thousand so this is the basic of variables Now what kind of data can be a store in computer's memory? Well, we have several different kinds of data in this section We're going to look at the builtin primitive types in Python primitive types can be numbers boolean and strings Let me show you so here we have a whole number we refer to this as an integer in programming We can also have numbers with a decimal point. Let's take a look So rating we set this to four point nine nine this is what we call a float Or a floatingpoint number and this terminology is not specific to Python in the future when you learn a new Programming language. You're going to hear these terms again Now, let's take a look at an example of a boolean is Published we set this to true or false These are examples of boolean values in programming So boolean values can either be true or false and these are exactly like yes and no in English Later in the course. You will learn that will use these boolean values to make decisions in our programs For example, if the user is an admin user perhaps we want to give them extra permissions So these are the boolean values now take into account that Python is a case sensitive language Which means lower case and upper case characters have different meanings So boolean values should always start with a capital letter Like what you see here if we type false or false These are not accepted boolean values in Python only what you see here is a valid boolean value so false or true and Finally, let's take a look at an example of a string. So course under line name We set this to your string like Python Programming so string as I told you before is like text Whenever you want to work with text in your programs, you need to surround your text with quotes So these are the basics of variables So these are the variables from the last lecture Now, I've got a question for you. There are four things that have consistently used in this program Can you spot them if you want you can pause the video think about this for a few seconds and then continue watching? So here are those four things the first thing is that all my variable names are descriptive and meaningful So students count represents the number of students for a course, or course name Clearly explains that this variable holds the name of a course One of the issues that I see a lot amongst beginner programmers is that they use mystical names for their variables? Something like this CN has ensured for course name when someone else reads this code They have no idea what CN stands for or they use variable names like c1 when I look at that code I wonder where is c2 and what is the difference between c1 and c2 so these variable names are very mystical That's a bad practice. Make sure your variable names are always descriptive and meaningful because this makes your code more maintainable now there are times that you can use short variable names like X Y Z if you're dealing with things like Coordinates, so that's an exception now The second thing that I have consistently used in this code is that I have used lowercase letters to name my variables So here we don't have Course name all in capital or in title case all letters are lowercase right Let's delete this the third thing that I've consistently used here is that I have used an underscore to separate multiple words And I've done this to make my variable names more readable because in Python we cannot have a space in Variable names so we cannot have course name and if you put these two words together It's a little bit hard to read That's why we use an underscore and the fourth thing that I have used consistently here is that I have put a space around this equal sign Again, that's one of the issues. I see a lot amongst beginners. They write code like this This is a little bit ugly. This is what we call dirty code dirty Stinky smelly you should write code that is clean and beautiful So other people can read it like a story like a newspaper article It should be formatted properly and that's why we have pep 8 in Python Now the good thing is if you forget these rules when you save the changes Autopay 8 kicks in I didn't automatically reformat your code But that aside you should always give yourself the habit of writing clean code without relying too much on the tooling So these are all the best practices about naming your variables next. We're going to look at strings in more detail So here we have this course variable set to Python programming as I told you before whenever you work with text You should surround your text with quotes. You can either use double quotes or single quotes That's more of a personal preference, but quite often we use double quotes You also have triple quotes and we use them to format a long string For example if you have let's say a variable message That is the message. We want to include in the body of an email You can use triple quotes to format it like this Hi, John This is Marsh from code with marsh comm blah blah blah. So that's when we use triple quotes Now we don't need this in this lecture. So delete. Let me show you a few useful things you can do with strings First of all, we have this builtin function in Python for getting the lengths of strings What is a function a function is basically a reusable piece of code that? Carries out a task as a metaphor think of the remote control of your TV On this remote control you have buttons for different functions, like turn on turn off change the channel and so on These are the builtin functions in your TV in Python and many other programming languages We have the exact same concept. So we have functions that are built into the language on the platform You can reuse these functions to perform various tasks So here we can use the builtin Len function to get the length of a string which means the number of characters in that string Now whenever you want to use a function you should use parentheses Now we say we're calling this function which basically means we are using this function now some functions take Additional data which we refer to as arguments These arguments are inputs to these functions. So this Len function takes an input or an argument Here we pass our course variable and this will return the number of characters in this string so let's print that and See what we get run the program we get 18 because we have 18 characters here Let's look at another example If you want to get access to a specific character in this string you use the square bracket notation So here we add course square brackets to get the first character you use the index 0 So in Python like many other languages Strings are 0 index which means the index of the first cat or the first element is zero so now when we print this Will get P. Okay Now you can also use a negative index Like minus one. What does that mean? Well if zero represents the first character here What do you think negative one represents that takes us back to the end of this string? So that returns the first character from the end of this string, let's run this program. You will see it will get G There you go Using a similar syntax you can slice strings Let me show you so I'm gonna duplicate this line and remove negative one now Let's say we want to extract the first three characters in this string. So here we need two indexes the start index colon the end index So this will return a new string that contains the first three characters in This course variable that will be P Y and T So the index of these characters are 0 1 and 2 So that means the character at the end index is not included. Ok Let's run the program and make sure we get the right result. There you go py T Now what if we don't include the end index? What do you think we're gonna get? It's common sense. We start from index 0 and go all the way to the end of this string So this will return a new string that is exactly the same as the original string. Let's take a look So we get Python programming Now what if we don't include the start index but include the end index. What do you think? We're gonna get? Once again, it's common sense. So by default Python will put 0 here so it will start from the beginning of this string So when I run this program we should get py t one more time. There you go. And Finally as the last example if we don't include the start And the end index this will return a copy of the original string Let's look at this. So we get Python programming Now you don't have to memorize any of these. Just remember we use the Len function to get the length of a string we use bracket notation to get access to a specific element or a specific character and We use this notation to a slice a string So we have this string here Python programming Now, let's say we want to put a double quote in the middle of this string. There is a problem here Python interpreter Sees this second string as the end of the string So the rest of the code is meaningless and invalid. How do you solve this problem? Well, there are two ways one way is to use single quotes For our string and then we can use a double code in the middle of this string But what if for whatever reason perhaps for being consistent in our code we decided to use double quotes How can we add another double code in the middle of this string? Well, we can prefix this with a backslash Backslash in Python strings is a special character We have a jargon for that called escape character. We use it to escape the character after Let me show you what I mean. So let's print this course and run this program What's going on here we don't have the backslash because we use that to escape this double code and basically Displayed here So backslash is an escape character and backslash double quote is an escape sequence In Python strings. We have a few other escape sequences that you should be aware of Let me show you so in Python We use high sign to indicate a comment a comment is like additional note that we add to our program It's not executed by Python interpreter Okay. So here are the escape sequences you have seen backslash double quote. We also have backslash single quote So we can use that to add a single code here Let's run the program Here it is, beautiful We also have double backslash. So if you want to include a backslash in your strings You should prefix it with another backslash let me show you so when we run this we get python one backslash programming and finally we have Backslash n which is short for newline So now if I add a backslash n here see what we get We get a new line after Python so programming will end up on the second line So these are the escape sequences in Python Here we have two variables first and last let's say we want to print my full name on the console So we can define another variable full Set it to first Then concatenate it with a space and one more time concatenate it with last now when we print full We get my full name on the console beautiful Now this approach are using concatenation to build a string is okay But there is a better and newer approach we can use formatted strings So here we can set full to this string and Prefix it with an F which can be lowercase or uppercase This formatted string doesn't have a constant value like these two strings here It's actually an expression that will be evaluated at runtime. So Here we want to add our first name. We use curly braces to print the value of the first variable After that, we had in your space and then we add curly braces one more time to print The last name so at runtime this expression will be evaluated What we have in between curly braces will be replaced at runtime Now, let's run this program one more time We get the exact same result just be aware that you can put any valid expressions in between curly braces So earlier you learned about the builtin Len function We can call Len here to get the length of this string Let's run this program one more time. So we get four We can also replace last with an expression like this 2+2 Let's run this program we get 4 & 4 So when using formatted strings you can put any valid expressions in between curly braces In This lecture we're going to look at a few useful functions available to work with strings So earlier you learned about this builtin Len function This function is generalpurpose. So it's not limited to strings later I will show you how to use this function with other kind of objects But in Python, we have quite a few functions that are specific to strings. Let me show you so here if we type course dot C all these are functions Available on strings now in precise terms. We refer to these functions as methods This is a term in objectoriented programming that you will learn about later in the course for now what I want you to take away is that everything in Python is an object and Objects have functions we call methods that we can access using the dot notation So here course is an object. We use the dot notation to access its functions or more accurately methods Let's take a look at a few of these methods. We have upper to convert a string to uppercase now Let's print this and run the program Here is what we get beautiful now note that the metals that you call here return a new string So the original string is not affected. Let me show you so print course Run the program one more time. Look, this is our original string, right? So course the upper Returns a new string a new value we can store it in a variable like course underlined capital like this Now to keep this demo simple and consistent. I'm gonna revert this back and use a print statement We also have the lower method to convert a string to lowercase. We also have Title which will capitalize the first letter of every word. So if our string was like this When we call the title method we get Python programming as you see here, okay? Another useful method is strip and we use it to trim any white space at the beginning or end of a string This is particularly useful when we receive input from the user. Let me show you so let's imagine The user entered a couple of white spaces at the beginning of their string When we call course that strip Those white spaces will be removed. Take a look So note that in the first three examples, we have those white spaces, but in the last one it is removed So a strip removed the whitespace from both the beginning and end of a string We also have L strip, which is short for left strip and our strip, which is short for right strip so it will remove the white space from the end of a string if You want to get the index of a character or a sequence of characters in your string? You should use the find method and mosura so course that find so as an argument here, we pass another string we can pass a Character or a series of characters. Let's find the index of Pro Run the program. So the index of Pro is 9 So if you start from 0 here all the way to 9, this is the index of Pro Ok Now as I told you before python is a case sensitive language So if I pass a capital P here, obviously We don't have these exact characters in our string. So let's see what we get We get negative 1 that means this string was not found in the original string Another useful method is replaced so We call replace With this we can replace a character or a sequence of characters with something else so let's say we want to replace all lowercase Peas with J with this we get jython, Jeremy whatever that means and finally if you want to check for the Existence of a character or a sequence of characters in your string you can use the in operator Let me show you so print rewrite an expression like this pro in chorus So this is an expression as I told you before an expression is a piece of code that produces a value So this expression checks to see if you have Pro in course the difference between this expression and Calling the find method is that the find method returns the index of these characters in our string? But as this expression returns a boolean, so it's a true or false. Let me show you so run the program we get the boolean true and Finally, we have the not operator and we use that to see if our string does not Contain a character or sequence of characters so Let's change this to swift not in course When this expression is evaluated, what do you think? We're gonna get? Well, we don't have Swift in this string So not in we'll return true. Let's take a look. There you go So these are the useful string methods next we'll look at numbers In Python, we have three types of numbers two of these you have already seen before they are integers and floats we also have Complex numbers so complex numbers in math are in the form a plus bi Where I is the imaginary number now if you're not familiar with this concept, don't worry This is something that is used a lot in mathematics and electrical engineering if you want to use Python to build web applications You're never gonna use complex numbers, but let me quickly show you the syntax for representing complex numbers Instead of I we use J. So here is an example 1 plus 2 J So X now is a complex number and by the way As I told you before this is just a comment or an additional note in our program when we run this program anything after this hash sign will be ignored so These are the three types of numbers we have in Python for all these types of numbers. We have the standard arithmetic operations that we have in math, let me show you so we have addition Subtraction multiplication division But we actually have two different types of divisions, let me show you first let's run this program so with this division operator Which is a slash we get a floatingpoint number if you want an integer, you use double slashes Let me show you So double slash run the program We get 3, ok. We also have modulus, which is the remainder of a division and finally Exponent, which is left to the power of right? So 10 to the power of 3 will be a thousand These are the standard arithmetic operators now for all these operators. We have a special operator called augmented Assignment operator, let me show you so let's imagine We have X set to 10 we want to increment X by let's say three we can write an expression like this x equals x plus three or we can use an Augmented assignment operator that is a little bit shorter. So we write x plus Equal three these two statements are exactly the same Now here I'm using Addition as an example. You can use any of these operators here Next I'm going to show you some useful functions to work with numbers In this lecture, we're going to look at a few useful functions to work with numbers so we have this builtin function round For rounding a number. So if we pass 2.9 here and print the result we'll get 3 We have another useful builtin function called ABS which returns the absolute value of a number. So if you pass negative 2.9 here we'll get Positive 2.9 Technically we have only a handful of builtin functions to work with numbers if you want to write a program that involves complex Mathematical calculations you need to use the math module a module is like a separate file with some Python code So in Python, we have this math module which includes lots of mathematical functions or working with numbers But we need to import this module so we can use it On the top we type import math now math in this program is an object so we can use the dot notation to see all the functions or more accurately all the methods available in this object as an example we have Math dot seal for getting the sealing of a number. So if you pass 2.2 here and run this program we get 3 Now in this math module, we have lots of functions. Let me show you how to find the conflict list Here on Google search for Python 3, make sure to add the version number math module on this page You can see all the functions in the math module. So in this lecture, we looked at math dot seal We also have math but copy sign fabs and so on as an exercise I encourage you to play with a couple of functions in this module Alright now, let's take a look at another useful builtin function in Python We use the input function to get input from the user As an argument to pass a string This will be a label that will be displayed in the terminal you will see that in a second. So let's add X now this function returns a string So we can store it in this variable now, let's imagine that Y should be X plus 1 Save the changes now Don't run this program using the code runner Extension because code Runner by default runs your program in the output window Which is readonly so you won't be able to enter a value So open up the terminal using ctrl + backspace once again, if you're on Windows type Python if you're on Mac or Linux Type Python 3 and then app that PI So here's our label. Let's enter a value like fun We got an error type error. What is going on here? well When we receive input from the user this input always comes as a string So this expression at runtime will look like this String 1 plus 1 note that the number 1 is different from string 1 because these are two different types now when Python sees this expression, it doesn't know what to do because two objects can be Concatenated if there are of the same type So here we need to convert this string 1 to a number in Python We have a few builtin functions for type conversion we have int for converting a number to an integer We have float We have bull and Stir or string? now in this case We don't need to convert eggs to a string because X is already a string if you don't believe me Let me show you so I'm gonna comment out these few lines Now let's print Type of X. So type is another builtin function We pass an object as an argument and it returns its type Also, I'm gonna comment out this line because that's the bad boy We don't want to execute this save the changes back in the terminal. Let's run this program one more time Enter 1 look This is what the type function returns. Don't worry about the class. We'll talk about classes later in the course so the type of X is histor or string So let's delete this line To fix this problem. We need to convert X to an integer and Then we can print both x and y using a formatted string Remember so we had an F close now here. We add a label like X then we'll add a field So here we want to print the value of X variable after that, we add some more text and Finally, we want to print the value of y Let's run this program one more time So here in the terminal Let's enter 1 and here's the result X is 1 and Y is 2 beautiful Now all these builtin functions are self explanatory The only tricky one is bull because in Python we have this concept of truthy and falsy Values these are values that are not exactly a boolean true or false But they can be interpreted as a boolean true or false So here are the false if values in Python Empty strings are considered false e so they're interpreted as a boolean false number zero is also false e We have an object called nan which represents the absence of a value. We'll look at this later in the course So whenever we use these values in a boolean context will get false Anything else will be true. Let me show you a few examples So in this interactive shell in Python, let's convert Number 0 to bull that's false II so we get false What about pool of 1 we get true if you pass a negative number will also get true If we pass a number larger than 1 like 5 we still get true so we only get false When we try to convert 0 to a boolean Now it strings. I told you that an empty string is false e so here we'll get false Anything else is true. So even if I have a string that is false We'll get true because this is not an empty string. It's a string with a few characters That's why it's evaluated as true All right, once again it's time for another quiz, let's see if you have been really paying attention to this tutorial So here's the first question, what are the built in primitive types in Python? We have strings numbers and boolean Numbers can be integers floats or complex numbers Here's the second question. You have this variable fruit set to Apple. What do you think? We will see on the terminal when we print fruit of one Well using square brackets we can access individual characters the index of the first character is zero So this expression returns the second character, which is P What if you add a colon and negative one here? Well using the syntax we can slice a string Re stored index is one and our end index is negative one which refers to the first character from the end of the string Now when slicing a string the character at the end index or negative one is not included So with this expression we'll get all the characters starting from the second character which is P all the way until we get to e so the result of this expression is Ppl Here's another question. What is the result of this expression? Well, this is what we call the modulus operator and it returns the remainder of a division which is in this case one and Finally the last question. What do you think? We will see when we print wool of FOSS? Well earlier I told you about faulty values in Python so number zero an empty string and the non object These are all false if values anything that is not false is considered true. See here We have a string that has five characters. It doesn't matter what those characters are This is not an empty string. So it's not fall. See it's true See, so when we convert it using the bull function We'll get a boolean true and this brings us to the end of this section in the next section You're going to learn the fundamentals of computer programming. I hope you have enjoyed this section and thank you for watching We're gonna start this section by exploring comparison operators We use comparison operators to compare values. Here are a few examples So 10 is greater than 3 we get true. So what we have here is a boolean expression Because when this expression is evaluated we'll get a boolean value. That is true or false Here is another example 10 is greater than or equal to 3 once again, we get true We also have less than so 10 is less than 20 we have less than or equal to Here's the Equality operator. So 10 is equal to 10 What about this expression? What do you think? we're gonna get we get false because these values have different types and they're stored differently in the computer's memory and Finally we have the nut equal operator So now with this expression we should get true beautiful we can also use this comparison operators with strings let me show you so we can check to see if bag is greater than Apple we get true because when we sort these two words bag comes after so it's considered greater Now what about this one bag? equals capital bag We get false here is the reason Every character you see here has a numeric representation in programming Let me show you so we have this builtin function called Ord Don't worry about memorizing this because you're probably never gonna use this in the future But let me show you the numeric representation of the letter P So that is 98 in contrast Capital B is represented as 66 that is the reason these two strings are not equal. So These are the comparison operators in Python next. We'll look at conditional statements In almost every program there are times you need to make decisions and that's when you use an if statement Here is an example Let's say we have a variable called temperature We set it to 35 Now if temperature is greater than 30, perhaps we want to display a message to the user. So we use an if statement if After if we add a condition which is basically a boolean expression an expression that produces a boolean value So if temperature is greater than 30 here We have a boolean expression if this expression evaluates to true the following statements will be executed Let me show you now here is the important part that a lot of beginners miss when you use an if statement, you should always Terminate your statement with a colon Now, let's see. What happens when I press ENTER Our cursor is indented. So here we have two white spaces This is very important because using these Indentations Python interpreter will know what statements should be executed if this condition is true here, we want to print a message like It's warm we can print another message as well Drink water so we can have as many statements as we want here as long as they are indented they belong to this if block Now when we finish here We should remove indentation to indicate the end of this if block so here we can add a print statement With a message like done. This statement will always be executed whether this condition is true or not Now note that when I save the changes This indentation you see here is going to be doubled up take a look save. There you go So when we save the changes auto kept eight reformat our code and uses four white spaces for indentation So one two, three four, it uses four white spaces because that's what pepp eight recommends Alright now let's run this program so because temperature is greater than 30 we see the first two messages and We see the dawn message regardless So if I change the temperature to let's say 15 and run the program one more time look this dawn message is Executed whether our condition is true or not. So pay great attention to these indentations That's one of the issues. I see in beginners code Let's say they want both these print statements to be executed if the condition is true Accidentally, they remove the indentation on the fourth line and that's why their program doesn't work as they expect So be careful about this Now what if you want to have multiple conditions? we use an elephant so L if that is short for LS if Here we can add another condition another expression. So temperature is greater than 20 once again Enter a by default here vs code is using two white spaces. So don't worry about this as soon as you save the changes Those two white spaces will be converted to four white spaces So let's print a different message It's nice Save the changes now look all these lines are indented consistently you can have as many Elif statements as you want and Optionally you can also have an else statement So if none of the previous conditions are true, then what you have in the else block will be executed once again We add the colon annotation print Here we can add a message like it's called Saying the changes in this case temperature is 15 So none of these two conditions will be true and we will see it's called. Let's run the program There you go In this lecture, I'm going to show you a technique for writing cleaner code So let's say we're building an application for University and we want to check to see if the person who's applying For this university program is eligible or not So we start by defining a variable called age set it to 22 Now if H is greater than or equal to 18 colon print eligible Remove the indentation else colon print Not eligible Let's run the program Make sure it works Beautiful now there is nothing wrong in this piece of code, but I want to show you a cleaner way to achieve the same result Instead of having a print statement here. We can define a variable like message and set it to this string That is the first step. So Message equals this string and then we will print this message Now when you have an ifelse statement with this structure where you're basically assigning a value to a variable you can rewrite this in a simpler way, so This is how it works. All we want to do over these few lines is to assign a value to this message variable Right, so we start with message We set it to eligible If age is greater than or equal to 18 else we set it to not eligible This statement is almost like plain English. So what we have on line 7 is Exactly equivalent to these four lines of code delete Save the changes run the program you can see this person is eligible if I change the age to 12 And run the program we get not eligible So what we have here is called ternary operator In Python we have three logical operators and we use these operators to model more complex conditions so these operators are and or and not Let's see a realworld example of using these operators, so imagine we're building an application for processing loans So we need two variables high income we can set this to true and Good underline credit we set it to true Now here's the condition We want to implement if the applicant has high income and good credit score Then they are eligible for the loan. So if high income and Good credit, we add the colon and print eligible Now note that here. I have not compared the value of this variable with true that is one of the issues I see in a lot of beginners code. This is redundant and unprofessional Because high income is a boolean, so it's either true or false. We don't need to compare true with true so if this condition is true and This second condition is true, then we will print eligible in the terminal So save the changes and run the program obviously this person is eligible However, if one of these conditions is false, we will not see eligible in the terminal. So let's add an else statement here and print Not eligible run the program We see not eligible So this is how the and operator works with and operator. If both conditions are true. The result will be true in Contrast with the or operator as long as at least one of the conditions is true. The result will be true So if I replace and with or here we should see Eligible in the terminal let's run it one more time. There you go So these are the and and or operators Now, let's take a look at an example of the nut operator. So I'm going to define another variable student set it to true Temporarily I'm gonna remove this expression and simplify it. We'll come back to this later So let's say if the person is eligible if they are not a student The nut operator basically inverses the value of a boolean. So in this case student is true When we apply the not operator the result will be false So in this case, our condition will be false and that's why this print statement will not be executed Let me show you so save Run the program they are not eligible if student was false When we apply the nut operator will get true so our condition will be true and we'll see it eligible Let's run it one more time. There you go With this operators, we can model even more complex conditions here is an example a person can be eligible if they have either high income or good credit and They should not be used to do that. Let me show you how to implement this condition. So if high income Or good credit we want at least one of these conditions to be true. So we put these in Parentheses. We want to separate these from the other condition Which is not a student now the result of this should be true, which means at least one of these conditions should be true after that, we'll add and not student and finally caught So with this operators you can model all kinds of realworld scenarios So here's the example from the last lecture a person is eligible for a loan if they have high income and good credit and They are not a student. Now one thing you need to know about these boolean operators is that they're a short circuit What do we mean by that? Well when Python interpreter Wants to evaluate this expression it starts from the first argument If this is true, it continues the evaluation to see if the second argument is also true So it continues the evaluation all the way to the end of this expression However, as soon as one of these arguments is false the evaluation stops. Let me show you what I mean So if I change highincome to false when Python interpreter sees this expression It starts here. It knows that highincome is false. So it doesn't matter what comes after the result of this entire expression will always be false because at least One of the arguments or one of the operands is false. This is what we call Shortcircuiting just like the shortcircuit concept we have in electronics. So the evaluation stops as soon as one of these arguments evaluates to false We have the same concept with the or operator. So if I change these and operators to or Let's see what happens With the or operator, we know that at least one of the arguments should be true So the evaluation stops as soon as we find an argument that evaluates to true in this case when Python interpreter Evaluates this expression it sees that highincome is false So it continues the evaluation hoping that the next argument will be true Here good credit is true. So evaluation stops and the result of this entire expression will be true so in Python logical operators are shortcircuit In this lecture, I'm gonna show you how to chain comparison operators This is a very powerful technique for writing clean code. Here's an example let's say we want to implement a rule that says age should be between 18 and 65 Here's how we can implement it. So we define a variable like age set it to 22 now if age is greater than or equal to 18 and Age is less than 65 then we print Eligible now, here's a question for you. How do we write this rule in mass? We can write it like this Well more accurately we shall have an equal sign here, so age should be between 18 and 65. This is how we write this rule in math now. I've got some good news for you We can write the exact same expression in Python. So I'm going to move this up put an if statement here Line 4 and line 3 are exactly equivalent but as you can see line 4 is cleaner and easier to read so Let's get rid of line 3 This is what we call chaining comparison operators All right, here is a little quiz for you I want you to pause the video and think about this quiz for 10 to 20 seconds. What do you think? We'll see on the terminal when we run this program So pause the video figure out the answer when you're ready. Come back continue watching All right, let's see what happens when we run this program First we get this if statement in this case, we're comparing two different objects for equality And these objects have different types. We have a number compared for this string So number 10 and string 10 are not equal that is why a will not be printed on the terminal So the control moves to the Elif part here. We have two boolean expressions. Here's the first one here is a second one and They are combined using the logical end. So if both these expressions are evaluated to true Then this entire expression will be true and we will see beyond the terminal Let's see if both these expressions are evaluated to true Here's the first part Bag is greater than Apple. That is true. Because when we sort this words bag comes after Apple But look at the second part this expression is evaluated to false because bag is not greater than cat So when we applied the logical end between true and false The result will be false That is why this statement will not be executed. So the control moves to the else part and When we run this program the letter C will be printed on the terminal There are times that we may want to repeat a task a number of times For example, let's say we send a message to a user if that message cannot be delivered Perhaps we want to retry three times now for simplicity Let's imagine this print statement is equivalent to sending a Message in a realworld program to send a message to a user we have to write five to ten lines of code Now if you want to retry three times, we don't want to repeat all that code. That is ugly That's when we use a loop. We use loops to create Repetition. So here is how it works We start with four Number in we have a builtin function called range Now how many times we want to repeat this task? Let's say three times. So we call range and pass three as an argument Now similar to our if statements we need to terminate this line with a colon Enter we get indentation. So in this block we can write all the statements that should be repeated three times Let's do a print a message like attempt Save the changes Run the program so we have attempt printed three times beautiful. Now. What is this number? Let's take a look It's a variable of type integer. So let's pass it as the second argument to the print function number Run the program. This is what we get zero one two So here we have a for loop this for loop is executed three times in each iteration Number will have a different value initially. It will be zero in the second iteration It will be one and finally in the last iteration. It will be two now here we can do something fun we can add one to this Run the program and now the message is that the print are kind of more meaningful or more userfriendly Like attempting number one attempting number two and so on We can take this to the next level so we can pass another argument Here, I'm gonna add an expression one more time number plus one So we'll get one two three now. I want to put this expression in parentheses. So let's select this put it in parentheses and then Multiply it by a dot So here we have a string that is multiplied by a number. The result will be that string repeated that number of times Let's take a look around the program See, that's pretty cool, isn't it? now let me show you one more thing before we finish this lecture as You saw this range function generates numbers starting from zero all the way up to this number here But it doesn't include this number here. We can pass another argument say start from 1 and finish before 4 With this change, we don't need to add 1 to number every time Because in the first iteration this number variable will be set to 1 So we can simplify our code and make it clean air Let's run it one more time. We get the exact same result We can also pass a third argument as a step. So I'm going to change the second argument to 10 and Pass two as a step look at the result These are the numbers we get 1 3 5 and so on So pretty useful you're going to use this function a lot in realworld applications Continuing with the example from the last lecture Let's imagine the scenario where after the first attempt we can successfully send the message in that case You want to jump out of this loop? We don't want to repeat this task of sending a message three times Let me show you how to implement this so in this demo I'm gonna simulate the scenario where we can successfully send a message. So we define a variable Successful and set it to true Now here after this print statement We'll have an if statement If successful then perhaps we can print successful Now here we want to jump out of this loop for that. We use the break statement Let's run this program and see what happens So there you go after the first attempt, we are successful and there are no more attempts So once again, I want you to pay great attention to the indentation here because that's one of the common issues amongst beginners So here's our for loop These two lines are indented with four spaces and they belong to our for loop in every iteration These two lines will be executed Now when we get to line four if this condition is true Then these two lines will be executed because both these lines are indented below this if statement Now, let's take this program to the next level What if we attempt three times and we still cannot send an email? Perhaps we want to display a different message to the user we say hey, we tried three times, but it didn't work. So I'm gonna change successful to false Now at the end here we can add an else statement This is what we call a for else statement What we put under this else statement will only be executed if this loop completes without an early termination So if we never break out of this loop, then the else statement will be executed so here we can print a message like attempt at three times and failed So run the program See what we get three attempts followed by this message attempted three times and failed in Contrast if we change successful to true Because we terminate this loop using this break statement what we have in the else block will not be executed Take a look run the program. We have one attempt successful done In programming we have this concept called nested loops so we can put one loop Inside of another loop and with this we can get some interesting results Let me show you so I'm going to start with this loop for X in range 5 now inside of this loop I'm gonna add another loop so for Y in range 3 and Then in our second loop, I'm gonna add a print statement Here we can use formatted strings to display coordinates Remember formatted string so we have F followed by quotes Now here we add parentheses for our coordinate first we want to display X and then comma followed by Y Let's run this program and see what happens there You go pretty cool, isn't it? So we get 0 + 0 0 1 0 & 2 then we get 1 & 0 1 & 1 1 & 2 and so on Now let me explain how exactly Python interpreter executes this code. So here we have two loops this is what we call the outer loop and This is the inner loop so the execution of our program starts here in the first iteration of this loop X is 0 now we get to this statement which is a child of This for statement because it's indented four times. This statement itself is a loop So what we have inside of this loop will be executed three times in the first iteration X is 0 because we're still in the first iteration of the outer loop and Y is also 0 because we're in the first iteration of the inner loop that is why we get 0 and 0 now we go to the second iteration of this inner loop in this iteration Y will be 1 whereas X is still 0 that is why we get 0 and 1 and similarly in the third iteration of our inner loop we'll get 0 and 2 in the turn Now we're done with the execution of the inner loop. So the control moves back to our outer loop here We'll be in the second iteration So X will be one and then we start here again So we have to execute this inner loop three times in the first iteration Y will be 0 and X is 1 so here we have 1 and 0 Then we'll get one on one and one and two you got the point So this is all about nested loops So you have learned how to use four loops to repeat one or more statements in your programs Now let's dive deeper and see what this range function returns so earlier you learn about The built in type function with this function we can get the type of an object. So if I pass five here and run this program This is what we get. So the type of this number or this object is int or integer now, let's look at the type of The value that we get from the range function. So as an argument we pass range of a number Let's run this program So this range function returns an object of type? range, so in Python we have primitive types like numbers strings and boolean But we also have complex types range is an example one of those complex types throughout this course You're going to learn about a lot of other complex types now What is interesting about this range object is? That it's iterable which means we can iterate over it or use it in a for loop That is why we can write code like this So this range function returns a range object, which is interval Which means we can iterate over it in each iteration X will have a different value Now range objects are not the only iterable objects in Python Strings are also iterable. So here we can add a string like Python Now in each iteration X will hold one character in this string. Let me show you so print Peg's And I'm gonna delete these two lines here Let's run this program So in each iteration, we'll get one character and print it We have another complex type called list which we use to store a list of objects So we add square brackets this indicates a list Now we can add a list of numbers or a list of strings like a list of names You will learn about lists later in the course so let's run this one more time as We can see we can iterate over lists in each iteration. We'll get one object in this list now Later in the course. I will show you how to create your own custom objects that are eatable For example, you will learn how to write code like this for item in shopping cart Print item. So shopping cart is going to be custom object that you will create It's not going to be an integer or a string or boolean. It's a custom object It has a different structure and we'll make it eatable so we can use it in a for loop and in each iteration we can get one item in the shopping cart and Print it on a terminal So you have learned that we use for loops to iterate over each ruble objects in Python We have another kind of loop that is a while loop and we use that to repeat something as long as a condition is true Here's an example. So let's define a variable number and set it to a hundred Now we use while and here we add a condition as long as number is greater than zero. We add a colon Once again, we have indentation so we can repeat one or more statements we can print this number and Then we can divide it by half so number equals number Use the integer division To divide it by two or we can use the augment and assignment operator to shorten this code like this Now let's run this program So here is what we get initially. Our number is a hundred we divide it by half We get 50 then 25 and so on So as you can see in this example We are not iterating over an iterable like a range object or a string or a list We are evaluating a condition and repeating a task Let me show you a real world example of a while loop in this interactive shell Python is waiting for an input We can type something like 2 plus 2 it will evaluate it and ask for the next input we can add another expression like 10 is greater than 2 so these steps will continue until We press controld So behind the scene we have a while loop that continuous execution until we press controld That is the condition that causes the while loop to terminate. Let me show you how to build something like this in Python. So Let's define a variable And set it to an empty string Now here we need a while loop. We want this while loop to execute as long as command does not equal to quit So command does not equal to quit In this loop, we want to continuously get input from the user So we use the builtin input function. We add a label like this Get the result and store it in the command variable Now at this point python interactive shell will evaluate this command We are not going to do that in this lecture because that's way too complex for simplicity We can just echo back what the user entered so print Echo and as the second argument we pass this command So this is our while loop it will execute until we type quit Now as I told you before don't run this program using the code runner Extension because by default it will run your program in the output window, which is readonly so open up a terminal using ctrl + back take and run Python or Python 3 AB dot pi So here's our command prompt. Let's type 2 + 2 it it goes back Let's type 3 times 2. There you go if we type quit our Program terminates now. Let's try it one more time What if we type quit an upper case? The program doesn't terminate because as you learned before lower case and upper case characters have different numeric representations So quit in lower case is different from quit in upper case now to solve this problem an amateur programmer may do something like this and Command does not equal to Capital quit so while command does not equal Quit in lower case and quit in upper case continue getting input from the user Let's run this program in terminal and see what happens. So one more time Python after pie Which I've quit Beautiful it works. We type quit an uppercase that would work too. But what if I type quit with an uppercase Q and lowercase uit our program doesn't terminate So this is a poor way of checking for the quit command. What is a better way? let me show you so we don't need this and operator here instead Because command is a string we can call the lower method So whatever the user types in first We'll convert it to lowercase and then compare it with quit in lower case with this change It doesn't matter how the user types the word quit will always terminate the program Now the last thing I want to discuss in this section is the concept of infinite loops an Infinite loop is a loop that runs forever so if I change this condition to true Because true is always true this while loop will run forever So to jump out of this we need a break statement. So after we get the input from the user We can get the command Convert it to lowercase and see if it equals to quit if that's the case. We want to break Now with this change, we no longer need to initialize command to an empty string Previously we needed this because we had a wild statement like this while command does not equal quit So we had to define this command variable and that's why we have set it to an empty string without this line when Python interpreter Tries to execute this code. It doesn't know what command is So now that we have an infinite loop we no longer need to define command and set it to an empty string So in terms of functionality, this program is exactly the same as the program We wrote in the last lecture just be aware of these infinite loops because they run forever You should always have a way to jump out of them otherwise your program will run forever and this can sometimes cause issues because if you're executing Operations that consume memory at some point your program may run out of memory and crash Alright time for an exercise. I want you to write a program to display the even numbers between 1 to 10 So when you run this program? You should see 2 4 6 and 8 and after these I want you to print this message. We have 4 even numbers Now here is a quick hint before you get started. You should call the range function with 1 and 10 Do not use this third argument, which is called step so basically I want you to iterate over all the numbers we can want to tab Check if each number is an even number and then print it on the terminal So pause the video spend two minutes on this exercise when you're done come back continue watching So it started with a four loop for a number in range one to ten We check to see if the remainder of division of this number by two equals zero so if number modulus two equals zero then We print this number Now let's run this program So we get two four six eight beautiful now to count the even numbers We need a separate variable. So let's call that count Initially, we set it to zero now in this if block every time we find an even number we need to increment count so we set count plus equals one and finally after our for loop we can print a formatted string we have count even numbers let's run the program and Here's the result So that brings us to the end of this section in the next section. You're going to learn how to create your own functions I hope you enjoyed the section and thank you for watching So far you have learned how to use some of the builtin functions in Python such as print Round and so on in this section, you're gonna learn how to write your own functions Now you might ask but why do you even need to write our own functions? well When you build a real program that program is going to consist hundreds or thousands of lines of code You shouldn't write all that code in one file like we have done so far You should break that code into smaller more maintainable and potentially more reusable chunks We refer to these chunks as functions So let me show you how to create your own custom functions. We start with the DEF keyword, which is short for define Next we need to give our function and name So let's call this greet all the best practices. You'll learn about naming your variables also apply to naming your functions So make sure your function names are meaningful Descriptive use lowercase letters to name your functions and an underscore to separate multiple words Now after the name we need to add parentheses you will see why shortly and then we'll add a colon Now what is going to happen? You know it you're gonna get indentation which means the following statements will belong to this function So here I'm gonna add two statements Hi there and welcome aboard Both designs belong to this function because they're indented Now we're done with this function. We need to call it. So we remove the indentation and we add two line breaks after this function This is what Papp 8 recommends to keep our code clean and maintainable now if you forget to add two line breaks Don't worry. As soon as you save the changes autopay of eight will automatically add these line breaks for you let me show you so I'm gonna remove these line breaks and Call this function create with parentheses Just like how we call the builtin functions now save the changes. There you go So we two line breaks after our function Now let's run this program So we get these two messages on a terminal Now here's a question for you, what is the difference between the greed and Trent functions the difference is that this print function takes an input Whereas our greet function doesn't take any inputs So let me show you how to pass inputs like first name and last name to this function When defining a function in between parentheses will list our parameters So here we add two parameters like first underline name and last underline name Now when calling this function we need to supply two values for those parameters. We refer to them as arguments, so maash Madani these are the arguments to the greet function. That's one of the terms that a lot of developers out there Don't know. They don't know the difference between parameters and arguments a Parameter is the input that you define for your function Where as an argument is the actual value for a given parameter? Okay Now, let's change line two and instead of saying hi there we can greet a person by their full name so we can convert this to a formatted string and Pass two fields here. First name as well as last name Save the changes run the program and this is what we get in terminal now This function is more useful. We can reuse it and call it with different arguments. So let's create John Smith as well Run the program so we get hi Muhammad on e and hi John Smith Now note that by default all the parameters that you define for a function are required So here our greet function takes two parameters if I exclude one of these arguments and save the changes You can see we have this red underline. So pilant is complaining and saying there is no value for argument last name Also, if we run the program we get this type error greet missing one required positional argument So let's put this back now later. I will show you how to define optional parameters So this is the simplified version of this greet function we created earlier Now in programming we have two types of functions functions that perform a task and Functions that calculate and return a value here are some examples both the print and greet functions are examples of type 1 the Performing a task, which is printing something on the terminal in contrast the brown function is An example of a function that calculates and returns a value so the functions that you create fall into these two categories Now let me show you how to rewrite this greet function but in the second form, so instead of printing this string on the terminal We simply return it. Let me show you so I'm going to delete all this code Define a new function But call it get underline greeting we add the name parameter and simply return this formatted string high name That's all we have to do. So we use the return statement to return a value from this function now we can call this function Get underlined greeting has a name Like Maj because it returns a value we can store that value in a separate variable like message Now you might be curious which form of these greeting functions is better well with this first implementation We are locked to printing something in the terminal in the future if you want to write that Message in a file or send it in an email You have to create another function so we cannot reuse this greet function in other scenarios in Contrast this second form is not tied to printing something on the terminal it simply returns a value Now we get this value and we can do whatever we want with it. We can print it on the terminal or We can use the builtin open function To write this message to a file so we can create a like content Txt Openings for writing this returns a file object and then we can call file the right message Now don't worry about these two lines later in the course I'm gonna talk about working with files But what I want you to take away here is that we have this message variable and we can do whatever we want with it we can print it on the terminal write it to a file send it in an email and so on and One more thing before we finish this lecture. So here's our greet function And as you can see, we're simply printing a string now if we call greet Give it a name run the program we get this message. Hi, Maj, but what if we put this? inside of a call to the print function Let's see what we get We get high Marsh followed by not. What is this? None is the return value of the greet function So in Python all functions by default return the non value non is an object that represents The absence of a value later in the course you're gonna learn more about not what matters now is that all functions return non by default unless You specifically return a value So here if we return Some string None will no longer be returned now. I just want to clarify something Earlier, I told you that we have two types of functions in programming functions that carry out the tasks or functions that calculate and return a value So back to the code we previously had So even though this function returns none by default, it is still classified as a function that carries out a task Let's create another function We call it increment you want to use this function to increment a number by a given value So here we simply return number plus by Now we can call this function like this increment two and one this returns a value so we can store it in a variable Like result and then print it on the terminal Let's run the program. We get three beautiful now we can simplify this code We have used this result variable only in a single place that is line six, so we don't really need it So on line six, we can replace result with a call to increment function like this so When python interpreter executes this code first It will call the increment function. It will get the result and temporary store it in a variable for us We don't see that variable and then it will pass that variable as an argument to the print function Now if we run this program we get the exact same result beautiful Now we can make this code more readable. If someone else looks at line five, they may not know exactly what These arguments are for we can use a keyword argument to make this code more readable So this one here is the value of this by parameter we can prefix it with The name of the parameter like this Now we can read this code almost like playing English increment two by one So if you're calling a function with multiple arguments, and it's not quite clear What is arguments are for you can make your code more readable by using keyword arguments So here y equals one is a keyword argument Earlier I told you that all the parameters that you define for a function are required by default in this lecture I'm gonna show you how to make the by parameter optional. So let's say we don't want to explicitly Pass y equals 1 every time we want to call this increment function we want to use this function to increment a value by 1 so We remove the second argument Now we need to give this parameter a default value. So we set it to 1 Now if we call this function and don't supply the second argument this default value will be used Otherwise the value that we specify here will be used. Let me show you so we've run this program The result is 3 but if we pass the second argument here We'll increment 2 by 5. So we'll get 7 So you can see it's pretty easy to make a parameter optional just be aware that all these optional parameters should come after the Required parameters in other words. I cannot add another required parameter here Let's call that another. I cannot add that here. If I save the changes you can see we get a red underline here So all the optional parameters should come after the required parameters Now obviously in this case, we don't need the second parameter. So let's delete it There are times that you may want to create a function that takes a variable number of arguments here is an example Let's define this function multiplied That takes two parameters x and y and simply returns x times y now We can call this function like this So far so good, but what if you want to pass one or two more arguments here that doesn't work because our multiply function takes only two parameters to Solve this problem. We need to replace these two parameters with a single parameter we use a plural name here to indicate that this is a collection of Arguments and then we prefix it with an asterisk. This is the magical part Let me show you what happens when you use an asterisk here. So temporarily let's delete this line and simply print Numbers, let's see what we get here So run the program You can see all our arguments and they're packed in parentheses. What is this? Well earlier you learned about lists I briefly mentioned that you can use square brackets to create a list of objects like 2 3 4 5 now Later in the course. We have a comprehensive section about lists. So don't worry about the details of lists and how they work But what I want you to note here is that the only difference between this list and what we have here is in the notation so use square brackets to create lists and Parentheses to create tuples some people call it two poles or two poles. So a top pole is similar to a list in that it's a collection of objects the Difference is that we cannot modify this collection. We cannot add a new object to this topple once again later in the course We're going to have a comprehensive section about lists tuples and other data structures What matters now is that? These topples just like lists are iterable so we can each raid over them Which means we can use them in loops. Let me show you so That's right for number in numbers let's just print one number at a time Actually, we don't need this line. So delete and run the program So we iterate over this topple and in each iteration we get one number and print it on the terminal So now with a simple change we can calculate the product of all these numbers All we have to do is to define a variable like total initially, we set it to one and then in each iteration we get total and Multiplied by the current number or we can rewrite this statement Using an Augmented assignment operator. So total times equal number Line five and four are exactly identical. So I'm gonna use line five because it's shorter and cleaner delete and Finally, we'll return the total now One of the issues I see often in beginners code is that they don't use this indentation Properly so they put the return statement here and then they wonder why their function doesn't work properly if you put the return statement Here it will be part of the for loop. So It will be executed in each iteration in this case after the first iteration Because of this return statement, we'll return from this multiply function. So the total will not be calculated properly We need to put this at the same level of indentation as other statements in this function So here we have our for statement. We loop over all the numbers We calculate the total and then finally return it So with this implementation we can get the result and printed on the terminal let's run the program and you can see the product of these numbers is 120 So in the last lecture, you learned the syntax to pass a variable number of arguments to a function We have a variation of this syntax with double asterisk. And that's what I'm gonna show you in this lecture So for this demo, let's rename this function to save underline user and Rename the argument to user. So let's imagine we're gonna use this function to save information about a user Now in this function, let's just print this user argument. We're done with our function Let's call it save underline user Now instead of passing arbitrary arguments here. We can pass arbitrary keyword arguments Remember keyword arguments so we have name equals value So here we can add multiple keyword arguments like ID equals 1 name equals John Age equals 22 and so on so we are passing 3 keyword arguments to this function Now let's run this program This is what we get. Look at the syntax. We have these curly braces and in between them we have multiple key value pairs so key colon value Comma here's another key value pair and here is the last one This object you see here is called a dictionary It's another complex type or a data structure in Python, and I'm going to talk about that in detail later in the course for now All I want you to take away is that when we use double asterisk here we can pass multiple key value pairs or multiple keyword arguments to a function and Python will automatically package them into a dictionary. So this user object here is a dictionary now using the bracket notation We can get the value of various keys in this dictionary so we can print user Square brackets we pass a string and this is the name of our key like ID. Let's run the program We get 1 or we can access the value of Name key Run program so name is John. So this is how deeksha Mary's work In programming we have a very important concept called scope which refers to the region of the code Where a variable is defined so in this example? We have this message variable The scope of this variable is the greet function it only exists inside of this function so if we go outside of this function and try to print Message see what happens. As soon as I save the change as we get this red underlined undefined variable message and If we run our program We get this name error named message is not defined the same rule applies to the parameters of our functions So if we add a name parameter here and then try to print it outside of the greet function we get the same error so the scope of the name and message variables are the greet function and we refer to these variables as Local variables in this function. They're local in this function, which means they don't exist anywhere else and That means we can have another function. Let's say send email With a parameter with the same name here. We can have a message variable But this message variable is completely different from the message variable we have in the greet function And of course the same rule applies to the named parameters in these functions They're completely separate these local variables have a short lifetime. So when we call Let's say the greet function and pass a name Python interpreter will allocate some memory and have the name and message variables Reference those memory locations when we finish executing the greet function Because these variables are not referenced or used anywhere else Eventually, they get garbage collector Which means Python interpreter will release the memory that allocated for these variables So these are the local variables in Contrast to local variables we have global variables So if we move this message variable outside of the great function now, it's a global variable Which means it's accessible anywhere in this file So the scope of this variable is this file we can use it anywhere in this file in any functions or outside of a function now for this reason Global variables stay in memory for a longer period of time until they are garbage collected and you should not use them that often In fact global variables are really evil. So as a best practice Create functions with parameters and local variables. Now what if here in the greet function? We set message to let's say B Now let's delete this second function. We don't really need it for now. So we call the greet function in this function We assign a new value to the message variable now, let's print This message and see what we get What do you think? We're gonna get? Well, let's take a look We get a but didn't we change the value of message variable to be? Not really because by default python interpreter treats this message variable as a local variable in the greet function Even though it has the same name as the global variable that we have on line one So these two variables are separate now I've seen some tutorials or even books teaching you bad practices, for example They show you how to modify the value of this global message variable Inside of a function. Let me show you how to do that But remember this is a bad practice and you should avoid it at all times. I will explain the reason in a second so these tutorials or books teach you to use the global keyword here and Reference the message variable when python interpreter sees this line it will realize that in this function We want to use the global message variable. So it will not define a local variable in this function Now with this change if we run our program You can see we get beyond the terminal because in this function we are Modifying the value of the global message variable. Why is this bad? Because it is possible that you might have multiple functions that rely on the of this global variable If you're accidentally or deliberately change the value of this global variable in one function This might have a side effect in other functions Those functions may not behave properly and this way we can create a bug in our program. So Global variables have always been bad. This is not a Python thing. This is a discussion that's been going on for decades Avoid them as much as you can or if there are situations that you really need to define a variable globally in a file That's okay, but do not modify it in a function as you see here. This is a really bad practice So that's all about local and global variables In this lecture, I'm going to show you how to find and fix bugs in your programs. So here's the multiply function we wrote earlier Let's add a couple of statements after this function. So print start and Then we'll call the multiply function give it three arguments one two and three so the result should be six and Here we print the result on the terminal now To create a bug in this program. I'm going to deliberately indent this return statement so now when we run this program Instead of six we get one So we're gonna use a technique called debugging to find and fix this bug Alright first we need to open the debugging panel The first time you want to use debugging in a Python project you need to click this icon This would generate a new file called launch the JSON in this file We have a bunch of debugging configuration. You never have to touch any of this, so don't worry about it Close it you can see this file is placed Inside of this vs code folder. It's right here. Launched a JSON Now when we have this file, we can go to the debugging panel and from this list We can select a debug in configuration Some of these configurations are useful for more complex applications For example, we use Python Django to debug a web application built with Python for this course We're going to use Python current file with integrated terminal. So select this now to start debugging First we need to add a breakpoint on one of these statements. So I'm going to put the cursor on line 8 and insert a breakpoint by pressing f9 So this is a breakpoint we can press f9 one more time to remove it If you're on a Mac keyboard, you should press the function key Which is on the bottom left corner of your keyboard, and then press f9 So here we have a breakpoint now we can press f5 to run the application up to this point so f5 So this automatically opens the integrated terminal here don't worry about this I'm going to close it So you can see our program is running up to this point. This line is highlighted now we can execute this program line by line and see exactly what happens at runtime, so To execute one statement at a time, press f10 Okay, we are done now we are on line 9 However on line 9 you are calling the multiply function if we press f10 again The execution stops, so we couldn't figure out why we got one as the result of multiplying these numbers So let's start debugging one more time. We press f5 So once again, we are on line 8, let's step over this line with f10 Now this time we want to step into this multiply function. So we see exactly what is going on here so instead of f10, press f11 Now we are on line 2 So if you're calling a function that you have to find you can step into that function using f11 Now here we are in the multiply function on the left side inside the variables panel You can see all the variables that are meaningful in this function. So hungry. Locals we have numbers So this is our numbers argument you can see this is set to a topple with 3 numbers 1 2 3 Right now our total variable is not in this list because it's not defined yet The moment we step over this line with f10 total comes to existence and you can see initially is set to 1 Now we are at the beginning of our for loop. Let's press f10 one more time Here we are we're going to multiply total by number so let's step over this line as well Now at this point we have a new variable called number That is our loop variable Initially, it's set to 1 Now here we are on line 5 if you press f10 We can see we jump out of this function So our loop did not execute to completion and that is the reason our program has a bug So to fix this I'm gonna stop the debugger with Shift + f5 Now back here let's remove the indentation Save the changes run the program in debug mode one more time. So we press f5 Here we are let's step over this with f10 now step into this with f11 and step over these lines with f10 a few more times, so f10 one more time Total it's set. Now. We are in the second iteration Let's press f10 one more time in this iteration You can see number is set to two our total is still one. So let's step over this line as well Now total is updated to two Here we are at the beginning of the third iteration Let's step over this line in this iteration number is three So after we execute this line because total is currently two when we multiply it by three We'll get 6 so f10 one more time Now we only have three iterations in this loop so if you press f10 one more time our loop completes now, we are ready to return total which is currently six so f10 we are on line nine and We're done Now one more tip in this demo. I put the breakpoint on the first line of the program You don't always have to do this. For example here. We know that our multiply function has a bug So instead of putting the breakpoint on line eight we could put it on line two so when we start the program in debug mode with f5 We immediately start in the multiply function And one more tip before we finish this lecture if you step into a function and you know that that function works properly We can immediately step out of that function with Shift + f11 So you don't have to execute the entire function line by line You can press shift and f11 to step out of that function Alright, let's finish up this section by looking at a few very useful shortcuts for writing code fast first I'm going to show you the shortcuts for Windows users. And in the next lecture. We will look at the shortcuts for Mac So if you're a Mac user feel free to skip this lecture So here we are on line 9 and my cursor is right at the beginning of the line Let's say you want to move the cursor to the end of the line Instead of pressing the right arrow to go all the way to the end we can simply press the end key and here is the cursor or If you want to move the cursor to the beginning of the line simply, press the HOME key. There you go Similarly, if you want to move the cursor to the beginning of the file, press ctrl + home Here it is or ctrl + end/2 go to the end of the file now, let's say we want to move this line up instead of cutting it from here and then copying it somewhere else we can simply move it up by pressing Alt + The up or down arrows or If you want to move these two lines up and down simply select them then hold alt and then up or down very easy Now if you want to duplicate a line or multiple lines simply select them now hold down shift Alt and then press the down key. We can duplicate it as many times as you want. There you go Here's another useful shortcut. If you want to convert this line, or maybe these two lines into a comment simply hold down control and press Slash using the same shortcut. You can remove the comment so you can toggle it very easy and Finally if you want to type the name of a variable or a function like multiplied You don't have to type all characters. Here are a few ways to type this quickly We can just type the first few characters and here in the intellisense. You can see that so if you press ENTER This is what we call autocompletion Here's another way. So instead of writing the first few letters You can just pick any letters in sequence and type them so I can type mty or I can just type mpy or Why there you go, here it is. So I hope you enjoyed these shortcuts and thank you for watching Alright now, let's take a look at the shortcuts for a Mac keyboard So here we are on line 9 and my cursor is right at the beginning of the line if you want to move the cursor To the end of the line instead of using the right arrow to go all the way Simply hold down the function key and press right? Here it is. Or you can press function and left to jump to the beginning of the line Similarly, you can press function and up To go to the top of the file or function and down to jump to the end of the file Pretty useful now. Let's say you want to move this line up Instead of cutting it from here and then copying it somewhere else You can simply move it up by holding down alt or option and then pressing the up arrow or down Very easy, or we can select these two lines hold down the alt or option key Move it up or down Here's another useful shortcut we can convert these two lines into a comment by pressing command and slash and Then we can remove the comment using the same shortcut so we can toggle it and finally if you want to type the name of a variable or a function like multiply you don't have to type all the letters like Multiply that is very slow You can type the first few letters like mult and here in the intellisense. You can see it's selected, so press Enter or You can pick any characters in sequence and type them like mty here it is, or we can type an py or M TP so you can abbreviate it any way you want. I hope you enjoyed these shortcuts and thank you for watching One of the questions that often comes in programming interviews is the fizzbuzz Algorithm you might be surprised that there are a lot of developers out there with even years of experience But they don't know how to solve this simple programming problem. That's why I decided to include this in my course So, let's see how this algorithm works and then you can spend 10 to 15 minutes on this exercise on your own So here we have a function Fizz buzz that takes an input and depending on the input we give it it returns Different results here are the rules if the input that we give it is divisible by 3 It will return the string fizz. Let me show you so we run this program we get fizz If the input is divisible by 5, it will return buzz take a look Here's buzz Now the third rule if the input is divisible by both 3 & 5 it will return Fizzbuzz, so let's pass 15 here We'll get fizzbuzz For any other numbers it will return the same input. So if I pass 7 it's not divisible by 3 or 5. It will return 7 itself, so spend 10 to 15 minutes on this exercise. You will see my solution next All right, let's see how we can solve this problem so we get the input and check to see if input is divisible by 3 Then we can set a variable like result to phase Now let me temporarily Simplify these rules because I want to show you a really cool technique So let's imagine if the input is divisible by 3. We'll return fizz Otherwise, we'll return bus, so LS we set the result to buzz and finally we'll return this resolved variable This is one way to implement these rules, but it's not the best way there is a better and cleaner way Let me show you so instead of defining this result variable and then returning it we can simply return this string here and also here and Then we can get rid of line six. So we remove one unnecessary line of code this was one technique the other technique I want to show you is when you have an if statement and In your if flock you're returning a value. You don't really need an else clause because if this condition is evaluated to false the control moves to the else clause and all we're doing here is Returning a different value. So this is the only possible outcome so here we can remove this else clause and simply return bus So with this technique I remove an unnecessary Indentation as well. I've made our code more linear. Okay. Now, let's go back to our original algorithm So if the input is divisible by three, we'll return fizz Now we check to see if the input is divisible by five. We'll return buzz So here we don't really need an Elif because if this condition is false we'll get here anyway, so we can check if Input is divisible by five We will return buzz once again if this condition is false the control moves here now we check the same if the input is divisible by three and It is also divisible by five then we will return Fizz buzz Now this expression is a little bit long I would prefer to make it more readable by putting parentheses around the first and second parts like this That is cleaner. Now if this condition is also false the control moves here That means our number is not divisible by three or five so we should simply return the input Once again, we don't need an else or another if we simply return the input Now, let's run this program and see if it's working properly or not so we call our function with three and We get fizz beautiful. Let's call it with five We get Buzz perfect. What if we call it with 15 we should get fizz bus However, we get fizz what is going on here? The reason this happened was because when we pass 15 here line two is executed Obviously 15 is divisible by three. So that is why we immediately return fizz to solve this problem We need to move this condition, which is more specific to the top So I've selected these two lines using alt + up. I Move these lines up beautiful. All right. Now, let's run the program one more time So we get fizzbuzz. Once again, let's test it with three Now we get fares. Let's test it with five when writing functions don't assume that your function is working Make sure to test it with all different kinds of values Let's test it but 5 we get Buzz beautiful. What if you pass? 7 which is not divisible by 3 or 5 we get 7 beautiful so what you see here is the simplest and most elegant implementation of the fizzbuzz algorithm and that Brings us to the end of this section in the next lecture. We're going to explore data structures in Python You're going to learn about lists tuples sets and dictionaries. I hope you enjoyed this section and thank you for watching You You made it this far and that makes me think that you're really enthusiastic about learning Python So I highly encourage you to enroll in my complete Python course where we go way beyond this crash course You will learn how to use Python in realworld scenarios such as data analysis and visualization automating repetitive boring tasks that involve working with files and folders spreadsheets PDFs data compression Sending emails web crawling consuming api's and much much more. This course comes with a 30 day No questions asked money back guarantee and a certificate of completion if you're interested click the link below this video to access the course Once again, thank you for watching Please support me by liking and sharing this video and also subscribe to my channel to get free new videos every week Thank you, and have a great day
