With timestamps:

00:03 - okay we got two interfaces which is one
00:06 - of my absolute favorite topics
00:09 - in this section I'm going to talk about
00:10 - what is an interface how to declare and
00:13 - implement interfaces and then I will
00:16 - explain how interfaces improve the
00:18 - testability and extensibility of your
00:21 - application
00:23 - so what is an interface an interface is
00:26 - a language construct that is similar to
00:28 - class in terms of syntax but it's
00:30 - fundamentally different let's take a
00:33 - look at the syntax first
00:35 - so here is how we can declare an
00:37 - interface
00:39 - instead of using the class keyword we
00:40 - use the interface keyword and note that
00:43 - in dotnet all interfaces start with the
00:46 - letter I so wherever you see a type that
00:49 - starts with I that represents an
00:51 - interface it's a convention
00:53 - but unlike classes interfaces do not
00:56 - have implementation so you see here we
00:59 - have a method called calculate that is
01:01 - simply a declaration it doesn't have a
01:03 - body it doesn't have curly braces
01:06 - also note that interface members do not
01:09 - have access modifiers so here we don't
01:11 - have public private protected whatever
01:14 - now you may wonder why do we need to
01:16 - construct like that well in simple terms
01:18 - interfaces are used to build loosely
01:21 - coupled applications that is an
01:23 - application whose components are not
01:25 - tightly related to each other
01:27 - which means making a change in one of
01:29 - these components is easier and has less
01:32 - or zero impact on other components
01:35 - let me use an analogy think of the
01:37 - concept of a restaurant and a chef we
01:40 - can say a restaurant needs a chef with
01:42 - certain capabilities by that definition
01:46 - we can fill that role with anyone anyone
01:48 - who has those capabilities can fill the
01:51 - role of the chef for that restaurant so
01:53 - the dependency between the restaurant
01:55 - and the chef is loose
01:58 - if something happens to that chef like
02:00 - he gets seek or it decides to move on to
02:02 - a different job we can fill that role
02:04 - with someone else now in contrary if we
02:07 - said a restaurant needs John as a chef
02:11 - that means we are very dependent on John
02:14 - if something happens to John if he
02:16 - decides to not to come to work and the
02:18 - restaurant is in trouble so this is a
02:20 - definition of a tightly coupled
02:22 - dependency the restaurant is tightly
02:24 - coupled tightly related tightly
02:26 - dependent on John now I use this analogy
02:30 - to explain that when building software
02:32 - we want for classes or our components to
02:34 - be loosely related or dependent on each
02:37 - other so if we decide to make a change
02:39 - in one of these classes it has minimal
02:41 - or zero impact in other classes
02:45 - take a look at this picture here we have
02:47 - two classes order processor and tax
02:49 - calculator in this UML diagram you see a
02:52 - dependency as demonstrated here between
02:55 - order processor and tax calculator
02:58 - in c-sharp terms that means order
03:00 - processor has a filled or a property
03:02 - that is of type tax calculator
03:05 - now this is an example of tight coupling
03:07 - between oral processor and tax
03:09 - calculator if we make it change to these
03:12 - tax calculator here it may affect order
03:15 - processor and subsequently any of the
03:17 - classes that depend on order processor
03:19 - now we use interfaces to reduce this
03:23 - coupling how well we can change this
03:25 - picture to something like this
03:28 - so instead of order processor being
03:30 - dependent on tax calculator is going to
03:33 - be dependent on an interface that is I
03:36 - tax calculator
03:38 - an interface as you saw earlier is
03:40 - simply a declaration it's not a concrete
03:43 - class it doesn't have code its methods
03:46 - do not have a body
03:48 - so as long as we keep that interface the
03:50 - way it is as in like we are not gonna
03:52 - remove any of its methods or change its
03:54 - parameters it's not going to have any
03:56 - impact on the order processor
03:59 - now if we decide to change the algorithm
04:01 - for calculation of tax we can create
04:04 - different classes that implement this
04:06 - interface here and that would have
04:08 - absolutely no impact on order processor
04:11 - if that concept is new to you don't
04:13 - worry about it I'm going to show you
04:14 - exactly how it works in code interfaces
04:18 - are extremely powerful and once you
04:20 - really understand them you're gonna fall
04:21 - in love with them
04:24 - of this section I'm going to explain how
04:25 - interfaces help improving the
04:27 - testability and extensibility of your
04:30 - application so thank you for watching
04:32 - and I'll see you in the next lecture
04:36 - hi guys Marsh here I hope you're having
04:39 - a fantastic day or night wherever you
04:41 - are in the world this tutorial you have
04:43 - been watching is actually part of one of
04:46 - my C sharp courses where you will learn
04:48 - everything about classes interfaces and
04:51 - object-oriented programming in case
04:54 - you're interested to enroll in the full
04:55 - course I've put the link for you in the
04:57 - video description and if not that's
04:59 - perfectly fine
05:00 - have a great day

Cleaned transcript:

okay we got two interfaces which is one of my absolute favorite topics in this section I'm going to talk about what is an interface how to declare and implement interfaces and then I will explain how interfaces improve the testability and extensibility of your application so what is an interface an interface is a language construct that is similar to class in terms of syntax but it's fundamentally different let's take a look at the syntax first so here is how we can declare an interface instead of using the class keyword we use the interface keyword and note that in dotnet all interfaces start with the letter I so wherever you see a type that starts with I that represents an interface it's a convention but unlike classes interfaces do not have implementation so you see here we have a method called calculate that is simply a declaration it doesn't have a body it doesn't have curly braces also note that interface members do not have access modifiers so here we don't have public private protected whatever now you may wonder why do we need to construct like that well in simple terms interfaces are used to build loosely coupled applications that is an application whose components are not tightly related to each other which means making a change in one of these components is easier and has less or zero impact on other components let me use an analogy think of the concept of a restaurant and a chef we can say a restaurant needs a chef with certain capabilities by that definition we can fill that role with anyone anyone who has those capabilities can fill the role of the chef for that restaurant so the dependency between the restaurant and the chef is loose if something happens to that chef like he gets seek or it decides to move on to a different job we can fill that role with someone else now in contrary if we said a restaurant needs John as a chef that means we are very dependent on John if something happens to John if he decides to not to come to work and the restaurant is in trouble so this is a definition of a tightly coupled dependency the restaurant is tightly coupled tightly related tightly dependent on John now I use this analogy to explain that when building software we want for classes or our components to be loosely related or dependent on each other so if we decide to make a change in one of these classes it has minimal or zero impact in other classes take a look at this picture here we have two classes order processor and tax calculator in this UML diagram you see a dependency as demonstrated here between order processor and tax calculator in csharp terms that means order processor has a filled or a property that is of type tax calculator now this is an example of tight coupling between oral processor and tax calculator if we make it change to these tax calculator here it may affect order processor and subsequently any of the classes that depend on order processor now we use interfaces to reduce this coupling how well we can change this picture to something like this so instead of order processor being dependent on tax calculator is going to be dependent on an interface that is I tax calculator an interface as you saw earlier is simply a declaration it's not a concrete class it doesn't have code its methods do not have a body so as long as we keep that interface the way it is as in like we are not gonna remove any of its methods or change its parameters it's not going to have any impact on the order processor now if we decide to change the algorithm for calculation of tax we can create different classes that implement this interface here and that would have absolutely no impact on order processor if that concept is new to you don't worry about it I'm going to show you exactly how it works in code interfaces are extremely powerful and once you really understand them you're gonna fall in love with them of this section I'm going to explain how interfaces help improving the testability and extensibility of your application so thank you for watching and I'll see you in the next lecture hi guys Marsh here I hope you're having a fantastic day or night wherever you are in the world this tutorial you have been watching is actually part of one of my C sharp courses where you will learn everything about classes interfaces and objectoriented programming in case you're interested to enroll in the full course I've put the link for you in the video description and if not that's perfectly fine have a great day
