With timestamps:

00:05 - in the last lecture you learned how to
00:07 - have the view subscribe to events raised
00:10 - by the model in this lecture we're gonna
00:12 - explore how to listen to collection
00:14 - events this is often useful when models
00:17 - are added to or removed from a
00:19 - collection in situations like this you
00:21 - will like the view to reflect the
00:23 - changes automatically a good real-world
00:26 - example of this is the conversation
00:28 - exchange between you and another
00:29 - Facebook user as you type a message and
00:32 - press the enter the message appears on
00:35 - the page immediately
00:36 - I don't know how Facebook has
00:38 - implemented this but if you want to
00:40 - implement something like this with
00:41 - backbone you need a collection of
00:43 - messages every time you post a message
00:46 - the message is added to the collection
00:48 - the view is listening to the changes and
00:50 - is notified that there is a new message
00:53 - in the collection so it appends the
00:55 - message to the conversation or think of
00:58 - tweets as another example you post a
01:01 - tweet and you immediately see that
01:03 - appearing in the list of tweets alright
01:06 - now that you have an understanding of
01:08 - why and when we need to listen to
01:10 - collection events let's see how we can
01:12 - implement it with pack form here is the
01:15 - code we wrote earlier in the lecture
01:17 - passing data to views we are simply
01:20 - passing a song's collection to our view
01:22 - which renders each song separately
01:26 - so here's our song model along with the
01:28 - songs collection
01:31 - here's a song view which renders one
01:34 - song as an li element
01:37 - and here's the songs view which
01:40 - basically authorized the collection and
01:42 - wraps each model with a song view
01:45 - renders it and then appends it to its
01:48 - dom element
01:51 - and finally here's the instantiation of
01:53 - our collection and the view
01:57 - let's try it is in Chrome first
02:02 - okay nothing special here yet let's see
02:05 - what happens if I add a new song to this
02:07 - collection
02:14 - you
02:17 - see the view is not refreshed and that's
02:20 - because it's not listening to the
02:21 - advance published by the collection so
02:24 - let's go ahead and fix this
02:33 - you
02:55 - so here we're using the initialized
02:57 - method to register a handler for the add
03:00 - event of our collection this is similar
03:02 - to what you learned in the last lecture
03:04 - about responding to events raised by a
03:08 - model all backbone connections trigger
03:10 - events when items are added to or remove
03:13 - from them so when a song is added to our
03:16 - collection this method is called which
03:18 - simply logs a message let's see if the
03:21 - plumbing code is working first just baby
03:24 - steps this is a great way to increase
03:27 - your productivity and write code fast
03:29 - instead of doing too many things at once
03:31 - and facing an application that's not
03:34 - working for a million reasons just write
03:36 - a little bit of code test it and make
03:38 - sure it works if it doesn't there is
03:41 - only one reason which hopefully you can
03:43 - identify immediately if you do too much
03:45 - at once
03:46 - it would be hard and time-consuming to
03:48 - identify what is not working
03:52 - okay let's add a new song to the
03:53 - collection
03:58 - note the message in the console this
04:01 - verifies that the event handling code is
04:03 - working so let's move on to the next
04:05 - step
04:06 - now instead of login a message we would
04:09 - like to append the song to the list of
04:11 - songs this is similar to a conversation
04:14 - exchange on Facebook that I mentioned in
04:16 - their introduction
04:24 - you
04:32 - when an object is added to a collection
04:35 - the ativan is triggered the handler for
04:38 - this event gets an argument which is the
04:40 - object that was just added in this case
04:43 - it refers to a song model so we simply
04:46 - pass it to our song view which is
04:48 - responsible for rendering a song and
04:50 - then we use the jQuery append method to
04:53 - append it to our list now let's try it
04:56 - out
05:00 - so I'm gonna add a song to our
05:02 - collection
05:06 - there you go the song was successfully
05:08 - rendered on the page now let's take this
05:11 - to the next level and make it a bit more
05:13 - challenging we have implemented handling
05:16 - of the add event but how about the
05:19 - remove event if we remove a song from
05:22 - the collection the view should be
05:23 - notified and respond accordingly so
05:26 - let's register a handler for the remove
05:28 - event first
05:36 - you
05:53 - nothing new yet let's make sure that our
05:56 - plumbing code is working and gain baby
05:58 - steps
06:06 - there you go so I removed the first song
06:09 - from the collection and we got the song
06:11 - removed message in the console but the
06:14 - view is not refreshed now we need to
06:17 - write some code to remove the
06:18 - corresponding Dom element from the page
06:22 - there is just one problem here there is
06:25 - no way for us to identify which Dom
06:27 - element to remove let's inspect the list
06:32 - for each song we have an Li but there is
06:35 - no association between these lis and the
06:39 - songs they represent we need to give
06:42 - each Li and ID so we can later use
06:44 - jQuery to select a given Ally and remove
06:48 - it from the Dom so let's go ahead and
06:51 - implement this
06:59 - you
07:06 - here we are using the jQuery attribute
07:09 - function to set the ID attribute of this
07:11 - Dom element there is just one problem
07:14 - here in the section on models I told you
07:17 - that the ID property of a model
07:19 - represents its persistent ID which is
07:22 - generated by the server in this example
07:25 - we don't have a persistent ID because we
07:27 - didn't fetch our songs from a REST API
07:29 - all our songs are manually created on
07:33 - the client what we can resolve this by
07:35 - manually assigning each model and ID as
07:38 - if it was generated by the server
07:48 - you
07:53 - okay now let's test this bit before
07:55 - moving to the next step
07:59 - so I'm gonna inspect the element note
08:02 - that now each Li has an ID which is the
08:05 - idea of the song it refers to
08:08 - okay now we need to modify our code such
08:11 - that when a song is removed we find the
08:14 - Associated li and remove it from the DOM
08:24 - you
08:33 - this code should be pretty familiar to
08:35 - you we use dollar L to get the top Dom
08:38 - element of the view then we use the
08:40 - jQuery find method to find an Li with
08:43 - the given ID and finally remove it there
08:47 - is also a shorter way to write this code
08:57 - every view has a dollar property which
09:00 - allows us to select elements scoped to
09:03 - the view
09:04 - okay now let's test the result
09:08 - so I'm gonna remove a song there you go
09:12 - the first song was removed from the page
09:16 - so to handle collection events we use
09:19 - the on method to register handlers for
09:21 - them
09:22 - banking on collections raise an add
09:25 - event when a model is added to them and
09:27 - you remove event when a model is removed
09:29 - in the next lecture we will see how we
09:32 - can use templates to simplify rendering
09:34 - of the views thank you for watching

Cleaned transcript:

in the last lecture you learned how to have the view subscribe to events raised by the model in this lecture we're gonna explore how to listen to collection events this is often useful when models are added to or removed from a collection in situations like this you will like the view to reflect the changes automatically a good realworld example of this is the conversation exchange between you and another Facebook user as you type a message and press the enter the message appears on the page immediately I don't know how Facebook has implemented this but if you want to implement something like this with backbone you need a collection of messages every time you post a message the message is added to the collection the view is listening to the changes and is notified that there is a new message in the collection so it appends the message to the conversation or think of tweets as another example you post a tweet and you immediately see that appearing in the list of tweets alright now that you have an understanding of why and when we need to listen to collection events let's see how we can implement it with pack form here is the code we wrote earlier in the lecture passing data to views we are simply passing a song's collection to our view which renders each song separately so here's our song model along with the songs collection here's a song view which renders one song as an li element and here's the songs view which basically authorized the collection and wraps each model with a song view renders it and then appends it to its dom element and finally here's the instantiation of our collection and the view let's try it is in Chrome first okay nothing special here yet let's see what happens if I add a new song to this collection you see the view is not refreshed and that's because it's not listening to the advance published by the collection so let's go ahead and fix this you so here we're using the initialized method to register a handler for the add event of our collection this is similar to what you learned in the last lecture about responding to events raised by a model all backbone connections trigger events when items are added to or remove from them so when a song is added to our collection this method is called which simply logs a message let's see if the plumbing code is working first just baby steps this is a great way to increase your productivity and write code fast instead of doing too many things at once and facing an application that's not working for a million reasons just write a little bit of code test it and make sure it works if it doesn't there is only one reason which hopefully you can identify immediately if you do too much at once it would be hard and timeconsuming to identify what is not working okay let's add a new song to the collection note the message in the console this verifies that the event handling code is working so let's move on to the next step now instead of login a message we would like to append the song to the list of songs this is similar to a conversation exchange on Facebook that I mentioned in their introduction you when an object is added to a collection the ativan is triggered the handler for this event gets an argument which is the object that was just added in this case it refers to a song model so we simply pass it to our song view which is responsible for rendering a song and then we use the jQuery append method to append it to our list now let's try it out so I'm gonna add a song to our collection there you go the song was successfully rendered on the page now let's take this to the next level and make it a bit more challenging we have implemented handling of the add event but how about the remove event if we remove a song from the collection the view should be notified and respond accordingly so let's register a handler for the remove event first you nothing new yet let's make sure that our plumbing code is working and gain baby steps there you go so I removed the first song from the collection and we got the song removed message in the console but the view is not refreshed now we need to write some code to remove the corresponding Dom element from the page there is just one problem here there is no way for us to identify which Dom element to remove let's inspect the list for each song we have an Li but there is no association between these lis and the songs they represent we need to give each Li and ID so we can later use jQuery to select a given Ally and remove it from the Dom so let's go ahead and implement this you here we are using the jQuery attribute function to set the ID attribute of this Dom element there is just one problem here in the section on models I told you that the ID property of a model represents its persistent ID which is generated by the server in this example we don't have a persistent ID because we didn't fetch our songs from a REST API all our songs are manually created on the client what we can resolve this by manually assigning each model and ID as if it was generated by the server you okay now let's test this bit before moving to the next step so I'm gonna inspect the element note that now each Li has an ID which is the idea of the song it refers to okay now we need to modify our code such that when a song is removed we find the Associated li and remove it from the DOM you this code should be pretty familiar to you we use dollar L to get the top Dom element of the view then we use the jQuery find method to find an Li with the given ID and finally remove it there is also a shorter way to write this code every view has a dollar property which allows us to select elements scoped to the view okay now let's test the result so I'm gonna remove a song there you go the first song was removed from the page so to handle collection events we use the on method to register handlers for them banking on collections raise an add event when a model is added to them and you remove event when a model is removed in the next lecture we will see how we can use templates to simplify rendering of the views thank you for watching
