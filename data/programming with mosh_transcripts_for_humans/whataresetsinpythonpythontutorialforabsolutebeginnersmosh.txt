With timestamps:

00:02 - in Python we have another very useful
00:06 - data structure called a set which is
00:09 - basically a collection with no
00:11 - duplicates so let's say we have a list
00:13 - of numbers with a bunch of duplicate
00:16 - items like this if you want to remove
00:19 - the duplicates we can convert this list
00:22 - to a set so I'm gonna define a variable
00:24 - UNIX we call the set function and pass
00:28 - the numbers list now when we print this
00:33 - take a look
00:35 - you only have unique items so one is not
00:38 - repeated also note that we use curly
00:41 - braces to define sets so here we can
00:44 - define a second set using curly braces
00:47 - with two items one and fourth now
00:51 - similar to lists we can add new items to
00:53 - a set or remove an existing one so here
00:56 - we can call second that add we can
00:59 - append a new number here we can also
01:02 - call remove and we can use the Len
01:06 - function to get the number of items in a
01:09 - set so these are the basics but we're
01:12 - set shine are in the powerful
01:15 - mathematical operations that are
01:17 - supported by them let me show you so I'm
01:20 - going to delete these three lines these
01:22 - are pretty basic and renamed UNIX to
01:26 - first so
01:29 - we have two sets first and second now we
01:34 - can get a union of two sets using the
01:37 - vertical bar so this expression will
01:39 - return a new set that includes all the
01:42 - items that are either in the first or in
01:46 - the second set let me show you so print
01:50 - actually I'm gonna change this four to
01:54 - five so now when we run this code you
01:58 - can see the union of these two sets is
02:00 - another set that includes all the items
02:03 - that are either in the first set or the
02:05 - second set we can also get the
02:08 - intersection of two sets so print first
02:12 - and second this will return a new set
02:16 - that includes all the items that are in
02:19 - both first and second sets take a look
02:22 - so the only number that exists in both
02:26 - these sets is one we can also get the
02:29 - difference between two sets so print
02:33 - first - second when we run this code we
02:37 - get two three four so the first set has
02:41 - these additional numbers that we don't
02:43 - have in the second set and finally we
02:46 - have symmetric difference so print first
02:50 - carrot second this will return the items
02:54 - that are either in the first or second
02:57 - sets but not both so let's run this we
03:02 - get two three four five now one thing
03:05 - you need to know about sets is that
03:06 - unlike lists they're unordered
03:09 - collection which means the items that we
03:11 - have in a set are not in sequence so we
03:14 - cannot access them using an index in
03:16 - other words if we try to print 1st of 0
03:21 - we will get a runtime error set object
03:25 - does not support indexing so if you need
03:28 - to access items by an index you need to
03:30 - use a list we'd set quite often we use
03:33 - one of these operations here or we can
03:36 - check for the existence of an item in a
03:39 - set so we can check to see if one is
03:42 - in the first set then we can print yes
03:46 - there you go
03:48 - so to recap set is an unordered
03:51 - collection of unique items we cannot
03:54 - have duplicates and these objects are
03:56 - unordered they are not in sequence so we
03:59 - cannot access them using an index
04:05 - hi guys thank you for watching this
04:07 - tutorial my name is Mohammad Ani and I
04:09 - have tons of tutorials like this for you
04:11 - on my channel so be sure to subscribe
04:13 - and also please like and share this
04:16 - video if you want to learn Python
04:17 - properly from scratch with depth I have
04:20 - a comprehensive python tutorial for you
04:22 - the link is below this video so click
04:24 - the link to get started thank you and
04:26 - have a fantastic day

Cleaned transcript:

in Python we have another very useful data structure called a set which is basically a collection with no duplicates so let's say we have a list of numbers with a bunch of duplicate items like this if you want to remove the duplicates we can convert this list to a set so I'm gonna define a variable UNIX we call the set function and pass the numbers list now when we print this take a look you only have unique items so one is not repeated also note that we use curly braces to define sets so here we can define a second set using curly braces with two items one and fourth now similar to lists we can add new items to a set or remove an existing one so here we can call second that add we can append a new number here we can also call remove and we can use the Len function to get the number of items in a set so these are the basics but we're set shine are in the powerful mathematical operations that are supported by them let me show you so I'm going to delete these three lines these are pretty basic and renamed UNIX to first so we have two sets first and second now we can get a union of two sets using the vertical bar so this expression will return a new set that includes all the items that are either in the first or in the second set let me show you so print actually I'm gonna change this four to five so now when we run this code you can see the union of these two sets is another set that includes all the items that are either in the first set or the second set we can also get the intersection of two sets so print first and second this will return a new set that includes all the items that are in both first and second sets take a look so the only number that exists in both these sets is one we can also get the difference between two sets so print first second when we run this code we get two three four so the first set has these additional numbers that we don't have in the second set and finally we have symmetric difference so print first carrot second this will return the items that are either in the first or second sets but not both so let's run this we get two three four five now one thing you need to know about sets is that unlike lists they're unordered collection which means the items that we have in a set are not in sequence so we cannot access them using an index in other words if we try to print 1st of 0 we will get a runtime error set object does not support indexing so if you need to access items by an index you need to use a list we'd set quite often we use one of these operations here or we can check for the existence of an item in a set so we can check to see if one is in the first set then we can print yes there you go so to recap set is an unordered collection of unique items we cannot have duplicates and these objects are unordered they are not in sequence so we cannot access them using an index hi guys thank you for watching this tutorial my name is Mohammad Ani and I have tons of tutorials like this for you on my channel so be sure to subscribe and also please like and share this video if you want to learn Python properly from scratch with depth I have a comprehensive python tutorial for you the link is below this video so click the link to get started thank you and have a fantastic day
