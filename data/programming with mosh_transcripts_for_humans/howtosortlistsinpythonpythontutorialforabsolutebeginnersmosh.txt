With timestamps:

00:03 - here we have this list with a bunch of
00:05 - numbers that are not in any particular
00:07 - order to sort this list we call numbers
00:11 - that's sort now let's print it and you
00:16 - can see our numbers are sorted in
00:17 - ascending order what if you want to sort
00:20 - these items in descending order well
00:23 - this sort method takes two parameters
00:26 - key which we'll look at later and
00:28 - reverse which we can use to change the
00:30 - sort order so here we can use a keyword
00:33 - argument to set a value for the reverse
00:36 - parameter we set this to true and with
00:41 - this you can see our numbers are sorted
00:43 - in descending order so this is the basic
00:45 - of sorting lists however in addition to
00:49 - the sort method we have a built-in
00:51 - function called sorted as you can see
00:54 - this function takes an iterable so we
00:57 - can pass any eatables here and it will
00:59 - sort it for us so we can pass our
01:03 - numbers list and this will return a new
01:06 - list that is sorted so unlike the sort
01:09 - method this will not modify the original
01:12 - list it will return a new sorted list so
01:15 - let me comment out this line and print
01:18 - the result of calling this function now
01:21 - let's run this program you can see here
01:24 - is our new list that is sorted and below
01:27 - that we have our original list that is
01:29 - not sorted also similar to the sort
01:31 - method if you want to change the sort
01:34 - order you can simply set the reverse
01:37 - argument to true let's run it one more
01:41 - time and here's the result beautiful so
01:44 - sorting numbers and strings is pretty
01:47 - easy but what if you're dealing with a
01:49 - list of complex objects for example what
01:52 - if we have a list of tuples let me show
01:54 - you so I'm going to delete everything
01:57 - here let's imagine we are building an
01:59 - application for processing orders and we
02:02 - have this list of order items every item
02:05 - in this list is a topple with two items
02:08 - the product name followed by the
02:13 - so here's the first item now let's add
02:16 - another item with a different price and
02:19 - finally the third item what happens if
02:23 - we try to sort this list let's take a
02:26 - look so items the sort and then we print
02:29 - the items so nothing is changed here
02:34 - because python doesn't know how to sort
02:36 - this list in situations like this we
02:39 - need to define a function that Python we
02:41 - use for sorting lists let me show you so
02:44 - here I'm going to define a function
02:46 - let's call it sort under line item this
02:50 - function should take an item like this
02:53 - topple there you go and it should return
02:57 - a value that will be used for sorting in
03:00 - this example let's imagine we want to
03:02 - sort these items based on their price so
03:06 - if each item is a topple we can get the
03:09 - price using square brackets of one so
03:13 - we'll return item of one so all these
03:16 - function does is that it takes an item
03:18 - and it returns its price
03:20 - now Python is dealing with a list of
03:22 - numbers and it can easily sort that list
03:24 - now finally we need to pass this
03:27 - function when sorting our list of items
03:30 - so once again look at this sort method
03:32 - the first parameter is key and this is
03:36 - where we need to pass our sorting
03:38 - function so we pass sort underlying item
03:42 - but note that I'm not calling this
03:44 - function I'm simply passing a reference
03:47 - to this function when python attempts to
03:50 - sort this list the list of items it gets
03:53 - each item and it will pass each item to
03:55 - our sort function okay so let's run this
03:59 - program and see what happens we get a
04:03 - type error sort takes no positional
04:06 - arguments which basically means here we
04:08 - can only use keyword arguments so we
04:11 - need to specify our argument that is key
04:14 - we set it to sort item now let's run
04:18 - this program one more time okay look our
04:21 - list of items is sorted by the price of
04:24 - each item
04:25 - however the
04:26 - we have implemented this sort function
04:29 - is a little bit ugly there is a better
04:31 - way and that's what I'm gonna show you
04:32 - next
04:39 - if you have any experience with other
04:42 - programming languages you've probably
04:44 - heard of the term lambda expression or
04:46 - lambda function it's basically a simple
04:49 - one-line anonymous function that we can
04:52 - pass to other functions so here on line
04:55 - 12 we're passing a reference to our sort
04:58 - under line item function we can improve
05:00 - this code and make it cleaner by using a
05:03 - lambda expression or an anonymous
05:06 - function so we don't have to define this
05:08 - function first and then pass it here so
05:11 - we remove this and add lambda with this
05:16 - per telling Python that we're defining a
05:18 - lambda or anonymous function the syntax
05:21 - for writing a lambda function is like
05:23 - this we add parameters colon expression
05:26 - so using this syntax we can rewrite this
05:30 - function how many parameters do we have
05:32 - here only one so we add that here item
05:36 - then after the colon we should add an
05:40 - expression what are we returning in our
05:43 - sort under an item function we are
05:45 - returning item of one so we simply add
05:48 - that here item of one now you can see
05:52 - with this syntax we don't need to use
05:53 - def for defining a function we don't
05:56 - need to give our function and name we
06:00 - don't need these parentheses here and we
06:02 - don't need the return statement so this
06:04 - is a shorter and cleaner way to define a
06:07 - function that we're going to use only
06:09 - once as an argument to another function
06:12 - now let's delete these two lines run our
06:17 - program again we'll get the exact same
06:21 - result our items are sorted by their
06:24 - price
06:28 - hi guys thank you for watching this
06:30 - tutorial my name is Mohamad ani and I
06:32 - have tons of tutorials like this for you
06:34 - on my channel so be sure to subscribe
06:36 - and also please like and share this
06:39 - video if you want to learn Python
06:40 - properly from scratch please depth I
06:43 - have a comprehensive Python tutorial for
06:45 - you the link is below this video so
06:47 - click the link to get started thank you
06:49 - and have a fantastic day

Cleaned transcript:

here we have this list with a bunch of numbers that are not in any particular order to sort this list we call numbers that's sort now let's print it and you can see our numbers are sorted in ascending order what if you want to sort these items in descending order well this sort method takes two parameters key which we'll look at later and reverse which we can use to change the sort order so here we can use a keyword argument to set a value for the reverse parameter we set this to true and with this you can see our numbers are sorted in descending order so this is the basic of sorting lists however in addition to the sort method we have a builtin function called sorted as you can see this function takes an iterable so we can pass any eatables here and it will sort it for us so we can pass our numbers list and this will return a new list that is sorted so unlike the sort method this will not modify the original list it will return a new sorted list so let me comment out this line and print the result of calling this function now let's run this program you can see here is our new list that is sorted and below that we have our original list that is not sorted also similar to the sort method if you want to change the sort order you can simply set the reverse argument to true let's run it one more time and here's the result beautiful so sorting numbers and strings is pretty easy but what if you're dealing with a list of complex objects for example what if we have a list of tuples let me show you so I'm going to delete everything here let's imagine we are building an application for processing orders and we have this list of order items every item in this list is a topple with two items the product name followed by the so here's the first item now let's add another item with a different price and finally the third item what happens if we try to sort this list let's take a look so items the sort and then we print the items so nothing is changed here because python doesn't know how to sort this list in situations like this we need to define a function that Python we use for sorting lists let me show you so here I'm going to define a function let's call it sort under line item this function should take an item like this topple there you go and it should return a value that will be used for sorting in this example let's imagine we want to sort these items based on their price so if each item is a topple we can get the price using square brackets of one so we'll return item of one so all these function does is that it takes an item and it returns its price now Python is dealing with a list of numbers and it can easily sort that list now finally we need to pass this function when sorting our list of items so once again look at this sort method the first parameter is key and this is where we need to pass our sorting function so we pass sort underlying item but note that I'm not calling this function I'm simply passing a reference to this function when python attempts to sort this list the list of items it gets each item and it will pass each item to our sort function okay so let's run this program and see what happens we get a type error sort takes no positional arguments which basically means here we can only use keyword arguments so we need to specify our argument that is key we set it to sort item now let's run this program one more time okay look our list of items is sorted by the price of each item however the we have implemented this sort function is a little bit ugly there is a better way and that's what I'm gonna show you next if you have any experience with other programming languages you've probably heard of the term lambda expression or lambda function it's basically a simple oneline anonymous function that we can pass to other functions so here on line 12 we're passing a reference to our sort under line item function we can improve this code and make it cleaner by using a lambda expression or an anonymous function so we don't have to define this function first and then pass it here so we remove this and add lambda with this per telling Python that we're defining a lambda or anonymous function the syntax for writing a lambda function is like this we add parameters colon expression so using this syntax we can rewrite this function how many parameters do we have here only one so we add that here item then after the colon we should add an expression what are we returning in our sort under an item function we are returning item of one so we simply add that here item of one now you can see with this syntax we don't need to use def for defining a function we don't need to give our function and name we don't need these parentheses here and we don't need the return statement so this is a shorter and cleaner way to define a function that we're going to use only once as an argument to another function now let's delete these two lines run our program again we'll get the exact same result our items are sorted by their price hi guys thank you for watching this tutorial my name is Mohamad ani and I have tons of tutorials like this for you on my channel so be sure to subscribe and also please like and share this video if you want to learn Python properly from scratch please depth I have a comprehensive Python tutorial for you the link is below this video so click the link to get started thank you and have a fantastic day
