With timestamps:

00:01 - in this video you're going to learn
00:02 - everything you need to know about java
00:04 - generics so by the end of this video
00:06 - you'll be able to write java code with
00:08 - confidence hi i'm mash hamadani and i've
00:11 - taught millions of people how to code
00:13 - through this channel and my online
00:14 - school codewoodmash.com this video is
00:17 - part of my ultimate java mastery course
00:20 - so once you finish this video if you
00:21 - want to learn more you may want to look
00:23 - at the complete course now let's jump in
00:25 - and get started
00:32 - before we talk about what generics are
00:34 - let's look at the problem they try to
00:35 - solve so in this project
00:38 - i'm going to add a new package
00:40 - a new package called generics i'm going
00:42 - to write all the code for this section
00:44 - inside this package
00:46 - now let's say we want to implement a
00:48 - class for storing a list of integers so
00:51 - in this package we add a new class
00:54 - called list
00:57 - in this class we need an array to store
00:59 - our integers so let's declare a private
01:01 - field
01:02 - private integer array items
01:04 - and we set it to a new int array of 10.
01:08 - now we shouldn't hard code the length of
01:10 - this array here it's better to add a
01:12 - constructor and receive the initial
01:14 - capacity of this array as a parameter
01:16 - but let's not worry about this and
01:18 - instead implement a basic list class
01:20 - so what is the next thing we need here
01:22 - we need a method for adding a new
01:24 - integer to this list so
01:26 - a public method public void add which
01:29 - gets an integer called item
01:33 - now here we also need a private field
01:35 - for keeping track of the number of items
01:37 - in this list so private end count
01:41 - now back to our add method we type items
01:44 - of count and we set this to
01:47 - this new item so initially count is zero
01:49 - and we store this item at index zero now
01:52 - here we should increment count so next
01:54 - time we add an item it will be stored at
01:56 - index one okay
01:58 - now we also need a method for getting an
02:00 - integer by its index so
02:03 - public
02:04 - integer get
02:06 - we give it an index and here we return
02:09 - items of index
02:12 - now here we're not validating this index
02:14 - parameter we're not checking to see if
02:16 - it's negative or greater than the number
02:18 - of items in this list let's not worry
02:20 - about these details and focus on an
02:22 - absolute basic implementation of a list
02:25 - so now that we have a list let's go back
02:26 - to our main class
02:28 - here we create
02:30 - a new list
02:31 - new list
02:33 - you want to import the one that is
02:34 - declared in this package that we just
02:36 - created because we have another class by
02:39 - the same name in java it's declared in
02:41 - java.util package we don't want that one
02:43 - so let's import our own class
02:47 - all right now we call the add method and
02:50 - insert an item in this list
02:52 - now let's say tomorrow we want to have a
02:53 - list of users
02:55 - so
02:56 - first i'm going to add a new class in
02:58 - this package
03:01 - called user
03:02 - now in this class we could have fields
03:04 - like username password email and so on
03:06 - for now let's not worry about this
03:08 - instead we want to have a list of users
03:10 - here's the problem
03:12 - this list that we have here we cannot
03:14 - use this class for storing users we can
03:16 - only store integers in this class
03:18 - so with this approach we'll have to
03:20 - create another class
03:22 - called user list
03:25 - user list
03:26 - and
03:27 - in this class we're going to have a user
03:29 - array so
03:30 - private user array
03:33 - let's import this type
03:34 - we call it items and set it to new
03:37 - user array of 10.
03:41 - similarly we need account fields of
03:43 - private image account then we'll have to
03:45 - implement our add and get methods that's
03:47 - a lot of code duplication what if in the
03:49 - future we want to have a list of strings
03:52 - so this approach is very tedious and not
03:54 - scalable in the next video i'm going to
03:56 - show you one way to solve this problem
04:01 - [Music]
04:05 - one way to solve the problem in the last
04:06 - video is to use an area of objects here
04:09 - because the object class is the base or
04:11 - the parent of all reference types in
04:13 - java remember reference types we talked
04:15 - about them in the first part of this
04:17 - series to refresh your memory we have
04:19 - two categories of types in java
04:21 - primitive types and reference types
04:24 - primitive types are numbers characters
04:26 - and booleans everything else is a
04:28 - reference type so if we use an area of
04:30 - objects here we can store anything in
04:32 - this array for example we can store user
04:34 - objects because the user class extends
04:36 - the object class
04:38 - so let's replace all these integers with
04:40 - the object class
04:41 - so here we have an object a
04:44 - and
04:45 - here as well
04:47 - the parameter of the atmeter should be
04:48 - an object
04:51 - and also the return type of the get
04:53 - method should be an object
04:55 - now
04:56 - back to our main class
04:58 - we can store numbers in this array we
05:00 - can also store strings
05:04 - we can also store
05:06 - user objects
05:08 - so that's great isn't it not really this
05:11 - is a very bad solution for a couple of
05:12 - reasons but before we talk about these
05:14 - reasons i got a question for you earlier
05:17 - i told you that the object class is the
05:19 - parent of all reference types so we can
05:21 - store any objects in this list however
05:24 - this integer here
05:25 - this is a primitive value it's not an
05:27 - object it's not a reference type so how
05:29 - can we store it here well when we
05:32 - compile this code the java compiler will
05:34 - convert this code to something like this
05:37 - integer dot value of 1.
05:40 - so we have this integer class in java
05:42 - it's a reference type it derives from
05:44 - the object class
05:45 - and this class has a static method
05:47 - valueof which returns a new instance of
05:50 - the integer class so this is the reason
05:52 - why we can pass a primitive value to
05:54 - this method
05:56 - by the same token we have a wrapper
05:58 - class for every primitive type in java
06:00 - we have float we have double
06:03 - boolean
06:04 - character and so on okay
06:07 - so
06:08 - let's rewrite this back what are the
06:10 - problems with this implementation well
06:12 - the first problem is that if you want to
06:13 - get the first item in this list
06:16 - we call the get method
06:19 - now we know that this is an integer so
06:21 - we may hope to store it in an integer
06:22 - variable called number
06:25 - but we have a compilation error because
06:27 - this get method returns an object but we
06:30 - expect that integer so here we have to
06:32 - explicitly cast the result to an integer
06:36 - and this makes our code a little bit
06:37 - verbose and noisy the second problem is
06:40 - that if we use the wrong type here we'll
06:42 - get an invalid cast exception for
06:44 - example let's change zero to one we know
06:47 - that the second item in this list is a
06:49 - string what if we accidentally try to
06:52 - cast it to an integer we run our program
06:56 - we get
06:58 - a class cast exception
07:01 - now the problem here is that we will not
07:03 - be aware of bugs like this until we run
07:05 - our application and test all the
07:07 - functions so we can only identify these
07:09 - problems at runtime
07:12 - it would be great if we could cache
07:13 - these problems at compile time and
07:15 - that's what generics are for in the next
07:18 - video i will show you how generic
07:19 - classes help us solve these problems
07:24 - [Music]
07:28 - let's see how generics prevent the
07:30 - problems we discussed earlier
07:32 - so let's add a new class in this package
07:36 - we call this generic list to
07:38 - differentiate from the other list
07:39 - implementation
07:42 - now we want this class to be generic so
07:44 - we can reuse it to store different types
07:46 - of objects so right after the name of
07:48 - the class we type these angle brackets
07:51 - and inside these brackets we type a
07:54 - capital t as in short for type or
07:56 - template now we could use any letters
07:58 - here it doesn't have to be a t but t is
08:00 - a common convention another convention
08:03 - is e
08:04 - as in short for element we use that when
08:06 - we want to implement a class that acts
08:08 - as a collection so it can store many
08:11 - elements so here we could use either e
08:13 - or t i'm going to go with t
08:15 - now this t is a type parameter for this
08:17 - class so just like our methods can have
08:20 - parameters our classes can have
08:22 - parameters as well
08:23 - this t over here represents the type of
08:26 - objects we want to store in this list
08:28 - when we create an instance of this class
08:30 - we'll have to specify an argument or a
08:32 - value for this parameter for example
08:34 - back in our main class let me delete all
08:36 - this
08:38 - code if you want to create an instance
08:41 - or generic list we type new generic list
08:45 - now here we specify the type of objects
08:47 - we want to store in this list for
08:49 - example user
08:51 - or string
08:53 - or integer okay
08:56 - so back to our generic list
08:57 - implementation this t represents the
08:59 - type of objects we want to store here
09:02 - now we need an array of type t so
09:04 - private
09:05 - t array we call it items
09:08 - and set it to new t array of 10. now
09:11 - here we have a compilation error because
09:13 - the java compiler doesn't know the type
09:15 - of t at this stage is it the character
09:18 - class or the string class or the user
09:20 - class it doesn't know what it is that is
09:22 - why it cannot instantiate it
09:24 - now one simple workaround is to use new
09:26 - object array here
09:29 - and then
09:30 - cast the result
09:32 - to t
09:33 - array
09:34 - okay now just like before we need
09:38 - a field for keeping track of the number
09:40 - of items in this list so private and
09:42 - count
09:43 - next we implement our add method so
09:45 - public void add now instead of an
09:48 - integer or an object we pass t
09:52 - the type of t will be determined later
09:54 - when we create an instance of this class
09:56 - so we call it item just like before
09:59 - and here we store
10:00 - item in our array so items of count plus
10:04 - plus equals item
10:07 - finally we need our get method so public
10:10 - t
10:11 - get integer index again instead of an
10:14 - integer or an object we return t okay
10:18 - so here we return
10:20 - items of index
10:23 - now back to our main class
10:26 - when we create a generic list of integer
10:29 - and call the add method
10:31 - look the type of this parameter becomes
10:34 - integer so if i call this method and
10:36 - pass a string i get a compile-time error
10:39 - this is the benefit of generics this
10:42 - generic class ensures that every object
10:44 - in this list is an integer okay
10:47 - now
10:48 - actually let's store this in a variable
10:51 - called list
10:52 - and here we call
10:54 - list dot add
10:58 - let's pass an integer
11:00 - now here's the second benefit when we
11:02 - call the get method look we get an
11:06 - integer so if we get the first item
11:09 - we can simply store it in an integer
11:12 - and here we don't need an explicit cast
11:15 - if we had a generic list of users
11:18 - we could add a user object here
11:22 - and when reading the first item we would
11:24 - store it
11:25 - in a user
11:26 - object okay again we don't need an
11:29 - explicit cast
11:30 - so our code becomes cleaner and we get
11:33 - compile time type safety so we can catch
11:36 - our mistakes at compile time rather than
11:38 - at runtime that is the beauty of
11:40 - generics now over the next few videos
11:42 - we're going to study generics in more
11:44 - detail you're going to understand how
11:45 - exactly genetics work under the hood
11:48 - so i'll see in the next video
11:52 - [Music]
11:56 - when creating an instance of a generic
11:58 - type we can only use a reference type as
12:01 - a generic type argument let me show you
12:03 - what i mean so i'm going to create a
12:05 - generic list of user
12:08 - we can pass the user class as a generic
12:09 - type argument because this class is a
12:12 - reference type we can also use the
12:14 - object class or the string class these
12:17 - are all reference types in java but here
12:19 - we cannot pass the primitive integer
12:21 - type or short or boolean or float these
12:25 - are all primitive types if you want to
12:27 - store these primitive values inside a
12:30 - generic list we have to use their
12:32 - wrapper class
12:33 - so every primitive type in java has a
12:35 - wrapper class let me show you so
12:38 - for the primitive int
12:40 - we have the integer class
12:42 - for the float we have the float class
12:45 - for the boolean we have the boolean
12:46 - class and so on
12:48 - so this boolean class is a reference
12:50 - type that stores a boolean value so if
12:53 - you want to create a generic list of
12:55 - integers we have to write code like this
12:58 - new generic list of integer
13:02 - now let's store this object in a
13:03 - variable of type generic list of integer
13:07 - call it numbers
13:10 - now
13:10 - look over here this integer is grayed
13:13 - out because it's unnecessary we're
13:15 - duplicating our code so
13:18 - let's remove that that's better
13:22 - now look at the signature of the add
13:24 - method
13:26 - it takes an instance of the integer
13:27 - class but we can pass a primitive
13:29 - integer like one and the java compiler
13:32 - will automatically wrap this value
13:35 - inside an instance of the integer class
13:37 - so it's going to create an instance of
13:39 - the energy class to store this value
13:41 - this process is called boxing
13:44 - so the java compiler is going to put
13:46 - this primitive value inside the box
13:49 - now when we call the get method
13:52 - look at the return type we get an
13:54 - instance of the integer class
13:56 - so let's get the first item and store it
13:59 - in a primitive int called number
14:02 - now in this case the java compiler is
14:04 - going to extract the value that is
14:06 - stored in that integer object this is
14:08 - called unboxing
14:11 - so this is how we can create generic
14:12 - types that work with primitive values
14:17 - [Music]
14:21 - there are times you want to add a
14:23 - constraint or a restriction on a type
14:25 - parameter for example let's say we only
14:28 - want to store numbers in this list
14:30 - perhaps this list is going to support
14:31 - some operations that only make sense for
14:34 - numbers to do that here we type
14:36 - extends
14:38 - number
14:39 - now t can only be the number class or
14:42 - any of its child classes but what is
14:45 - this number class well if you search for
14:47 - java number class
14:49 - here you can find the documentation for
14:51 - this class let's look at the
14:52 - documentation for java platform standard
14:55 - edition version 8.
14:58 - so
14:59 - here you can see that the number class
15:00 - is declared in java.lang package and
15:04 - it's the base class
15:05 - for these classes like byte double float
15:09 - integer long and so on so all these
15:11 - wrapper classes around numeric primitive
15:13 - types derive from the number class
15:16 - so with this constraint
15:18 - if we create a new list
15:20 - of string
15:22 - we get a compilation error because this
15:24 - string is not a number so here we can
15:26 - only pass the number class or any class
15:29 - that derives from the number like
15:31 - integer or float or short
15:35 - also
15:36 - this constraint doesn't have to be a
15:37 - class it can also be an interface for
15:39 - example in java we have a popular
15:42 - interface called comparable we use this
15:45 - interface for implementing classes that
15:47 - can be compared with each other for
15:49 - example if we implement this interface
15:51 - in our user class we can compare two
15:53 - user objects based on some criteria like
15:56 - their last login date
15:58 - then we can sort all users based on
16:00 - their last login date we'll look at the
16:02 - comparable interface later in this
16:03 - section but let's see how applying this
16:05 - constraint works
16:07 - so now we're saying
16:08 - that this list can only store objects
16:10 - that are comparable
16:12 - so back in the main class
16:14 - we can pass short here because short
16:16 - values are comparable
16:18 - we can also pass integer or string but
16:21 - we cannot pass user
16:23 - because our user class does not
16:25 - implement the comparable interface
16:27 - now if we go to our user class
16:29 - and type implement
16:31 - comparable
16:33 - now don't worry about this compilation
16:35 - error we'll come back and fix this later
16:37 - but we're saying that the user class
16:38 - implements the comparable interface
16:41 - now
16:43 - you can see that the error is gone in
16:44 - the main method
16:46 - also here we can add multiple interfaces
16:48 - as constraints for example we can type
16:51 - and cloneable this is another popular
16:55 - interface in java
16:56 - if you want to be able to clone or copy
16:58 - a class we should implement this
17:00 - interface in that class
17:02 - now we are saying that this generic list
17:04 - can only store objects that are
17:06 - comparable and
17:08 - cloneable and by the way note that here
17:10 - we have a single ampersand so this is
17:12 - not the logical and operator okay
17:16 - now back in the main class we cannot
17:18 - pass the user class here anymore because
17:20 - this class only implements the
17:22 - comparable interface
17:24 - we can only pass classes that implement
17:26 - both the comparable and clonable
17:28 - interfaces so this is all about applying
17:31 - constraints
17:32 - now with this constraint we say that we
17:35 - have a bounded type parameter this type
17:38 - parameter this t is bounded it's
17:40 - restricted
17:43 - thank you so much for watching this
17:45 - video as i said this video is part of my
17:48 - ultimate java mastery course that
17:50 - teaches you everything you need to know
17:51 - about java from the basics to more
17:53 - advanced concepts so if you want to
17:55 - learn more i highly encourage you to
17:57 - take a full course it's much faster than
17:59 - jumping from one tutorial to another if
18:01 - you're interested the link is below this
18:03 - video thank you and have a great day
18:09 - [Music]

Cleaned transcript:

in this video you're going to learn everything you need to know about java generics so by the end of this video you'll be able to write java code with confidence hi i'm mash hamadani and i've taught millions of people how to code through this channel and my online school codewoodmash.com this video is part of my ultimate java mastery course so once you finish this video if you want to learn more you may want to look at the complete course now let's jump in and get started before we talk about what generics are let's look at the problem they try to solve so in this project i'm going to add a new package a new package called generics i'm going to write all the code for this section inside this package now let's say we want to implement a class for storing a list of integers so in this package we add a new class called list in this class we need an array to store our integers so let's declare a private field private integer array items and we set it to a new int array of 10. now we shouldn't hard code the length of this array here it's better to add a constructor and receive the initial capacity of this array as a parameter but let's not worry about this and instead implement a basic list class so what is the next thing we need here we need a method for adding a new integer to this list so a public method public void add which gets an integer called item now here we also need a private field for keeping track of the number of items in this list so private end count now back to our add method we type items of count and we set this to this new item so initially count is zero and we store this item at index zero now here we should increment count so next time we add an item it will be stored at index one okay now we also need a method for getting an integer by its index so public integer get we give it an index and here we return items of index now here we're not validating this index parameter we're not checking to see if it's negative or greater than the number of items in this list let's not worry about these details and focus on an absolute basic implementation of a list so now that we have a list let's go back to our main class here we create a new list new list you want to import the one that is declared in this package that we just created because we have another class by the same name in java it's declared in java.util package we don't want that one so let's import our own class all right now we call the add method and insert an item in this list now let's say tomorrow we want to have a list of users so first i'm going to add a new class in this package called user now in this class we could have fields like username password email and so on for now let's not worry about this instead we want to have a list of users here's the problem this list that we have here we cannot use this class for storing users we can only store integers in this class so with this approach we'll have to create another class called user list user list and in this class we're going to have a user array so private user array let's import this type we call it items and set it to new user array of 10. similarly we need account fields of private image account then we'll have to implement our add and get methods that's a lot of code duplication what if in the future we want to have a list of strings so this approach is very tedious and not scalable in the next video i'm going to show you one way to solve this problem one way to solve the problem in the last video is to use an area of objects here because the object class is the base or the parent of all reference types in java remember reference types we talked about them in the first part of this series to refresh your memory we have two categories of types in java primitive types and reference types primitive types are numbers characters and booleans everything else is a reference type so if we use an area of objects here we can store anything in this array for example we can store user objects because the user class extends the object class so let's replace all these integers with the object class so here we have an object a and here as well the parameter of the atmeter should be an object and also the return type of the get method should be an object now back to our main class we can store numbers in this array we can also store strings we can also store user objects so that's great isn't it not really this is a very bad solution for a couple of reasons but before we talk about these reasons i got a question for you earlier i told you that the object class is the parent of all reference types so we can store any objects in this list however this integer here this is a primitive value it's not an object it's not a reference type so how can we store it here well when we compile this code the java compiler will convert this code to something like this integer dot value of 1. so we have this integer class in java it's a reference type it derives from the object class and this class has a static method valueof which returns a new instance of the integer class so this is the reason why we can pass a primitive value to this method by the same token we have a wrapper class for every primitive type in java we have float we have double boolean character and so on okay so let's rewrite this back what are the problems with this implementation well the first problem is that if you want to get the first item in this list we call the get method now we know that this is an integer so we may hope to store it in an integer variable called number but we have a compilation error because this get method returns an object but we expect that integer so here we have to explicitly cast the result to an integer and this makes our code a little bit verbose and noisy the second problem is that if we use the wrong type here we'll get an invalid cast exception for example let's change zero to one we know that the second item in this list is a string what if we accidentally try to cast it to an integer we run our program we get a class cast exception now the problem here is that we will not be aware of bugs like this until we run our application and test all the functions so we can only identify these problems at runtime it would be great if we could cache these problems at compile time and that's what generics are for in the next video i will show you how generic classes help us solve these problems let's see how generics prevent the problems we discussed earlier so let's add a new class in this package we call this generic list to differentiate from the other list implementation now we want this class to be generic so we can reuse it to store different types of objects so right after the name of the class we type these angle brackets and inside these brackets we type a capital t as in short for type or template now we could use any letters here it doesn't have to be a t but t is a common convention another convention is e as in short for element we use that when we want to implement a class that acts as a collection so it can store many elements so here we could use either e or t i'm going to go with t now this t is a type parameter for this class so just like our methods can have parameters our classes can have parameters as well this t over here represents the type of objects we want to store in this list when we create an instance of this class we'll have to specify an argument or a value for this parameter for example back in our main class let me delete all this code if you want to create an instance or generic list we type new generic list now here we specify the type of objects we want to store in this list for example user or string or integer okay so back to our generic list implementation this t represents the type of objects we want to store here now we need an array of type t so private t array we call it items and set it to new t array of 10. now here we have a compilation error because the java compiler doesn't know the type of t at this stage is it the character class or the string class or the user class it doesn't know what it is that is why it cannot instantiate it now one simple workaround is to use new object array here and then cast the result to t array okay now just like before we need a field for keeping track of the number of items in this list so private and count next we implement our add method so public void add now instead of an integer or an object we pass t the type of t will be determined later when we create an instance of this class so we call it item just like before and here we store item in our array so items of count plus plus equals item finally we need our get method so public t get integer index again instead of an integer or an object we return t okay so here we return items of index now back to our main class when we create a generic list of integer and call the add method look the type of this parameter becomes integer so if i call this method and pass a string i get a compiletime error this is the benefit of generics this generic class ensures that every object in this list is an integer okay now actually let's store this in a variable called list and here we call list dot add let's pass an integer now here's the second benefit when we call the get method look we get an integer so if we get the first item we can simply store it in an integer and here we don't need an explicit cast if we had a generic list of users we could add a user object here and when reading the first item we would store it in a user object okay again we don't need an explicit cast so our code becomes cleaner and we get compile time type safety so we can catch our mistakes at compile time rather than at runtime that is the beauty of generics now over the next few videos we're going to study generics in more detail you're going to understand how exactly genetics work under the hood so i'll see in the next video when creating an instance of a generic type we can only use a reference type as a generic type argument let me show you what i mean so i'm going to create a generic list of user we can pass the user class as a generic type argument because this class is a reference type we can also use the object class or the string class these are all reference types in java but here we cannot pass the primitive integer type or short or boolean or float these are all primitive types if you want to store these primitive values inside a generic list we have to use their wrapper class so every primitive type in java has a wrapper class let me show you so for the primitive int we have the integer class for the float we have the float class for the boolean we have the boolean class and so on so this boolean class is a reference type that stores a boolean value so if you want to create a generic list of integers we have to write code like this new generic list of integer now let's store this object in a variable of type generic list of integer call it numbers now look over here this integer is grayed out because it's unnecessary we're duplicating our code so let's remove that that's better now look at the signature of the add method it takes an instance of the integer class but we can pass a primitive integer like one and the java compiler will automatically wrap this value inside an instance of the integer class so it's going to create an instance of the energy class to store this value this process is called boxing so the java compiler is going to put this primitive value inside the box now when we call the get method look at the return type we get an instance of the integer class so let's get the first item and store it in a primitive int called number now in this case the java compiler is going to extract the value that is stored in that integer object this is called unboxing so this is how we can create generic types that work with primitive values there are times you want to add a constraint or a restriction on a type parameter for example let's say we only want to store numbers in this list perhaps this list is going to support some operations that only make sense for numbers to do that here we type extends number now t can only be the number class or any of its child classes but what is this number class well if you search for java number class here you can find the documentation for this class let's look at the documentation for java platform standard edition version 8. so here you can see that the number class is declared in java.lang package and it's the base class for these classes like byte double float integer long and so on so all these wrapper classes around numeric primitive types derive from the number class so with this constraint if we create a new list of string we get a compilation error because this string is not a number so here we can only pass the number class or any class that derives from the number like integer or float or short also this constraint doesn't have to be a class it can also be an interface for example in java we have a popular interface called comparable we use this interface for implementing classes that can be compared with each other for example if we implement this interface in our user class we can compare two user objects based on some criteria like their last login date then we can sort all users based on their last login date we'll look at the comparable interface later in this section but let's see how applying this constraint works so now we're saying that this list can only store objects that are comparable so back in the main class we can pass short here because short values are comparable we can also pass integer or string but we cannot pass user because our user class does not implement the comparable interface now if we go to our user class and type implement comparable now don't worry about this compilation error we'll come back and fix this later but we're saying that the user class implements the comparable interface now you can see that the error is gone in the main method also here we can add multiple interfaces as constraints for example we can type and cloneable this is another popular interface in java if you want to be able to clone or copy a class we should implement this interface in that class now we are saying that this generic list can only store objects that are comparable and cloneable and by the way note that here we have a single ampersand so this is not the logical and operator okay now back in the main class we cannot pass the user class here anymore because this class only implements the comparable interface we can only pass classes that implement both the comparable and clonable interfaces so this is all about applying constraints now with this constraint we say that we have a bounded type parameter this type parameter this t is bounded it's restricted thank you so much for watching this video as i said this video is part of my ultimate java mastery course that teaches you everything you need to know about java from the basics to more advanced concepts so if you want to learn more i highly encourage you to take a full course it's much faster than jumping from one tutorial to another if you're interested the link is below this video thank you and have a great day
