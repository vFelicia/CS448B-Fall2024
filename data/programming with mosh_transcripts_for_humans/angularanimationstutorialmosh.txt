With timestamps:

00:00 - [Music]
00:01 - animations are getting more common in a
00:04 - lot of modern applications so in this
00:07 - section I'm going to teach you how to
00:08 - add animations to your angular apps by
00:12 - the end of this section you will have a
00:13 - good understanding of the structure of
00:15 - animations you'll be able to animate
00:18 - various elements in the Dom you'll be
00:21 - able to create reusable animations you
00:24 - will learn how to work with the new
00:26 - animation functions in angular 4.3 and
00:29 - finally I will show you how to write
00:31 - clean and maintainable animation code
00:34 - this section is about one and a half
00:36 - hours long so it's best to watch it over
00:39 - two sessions now let's get started
00:47 - alright first let me show you the kind
00:49 - of animations you're going to build in
00:50 - this section so here's one example here
00:54 - we have this to do list when i refresh
00:56 - the page these items these elements are
00:58 - going to appear with an animation so
01:01 - let's have a look one by one I'm going
01:03 - to refresh the page let's have a closer
01:06 - look so our heading slides down let's
01:10 - have a look
01:11 - refresh slide down one more time
01:14 - slide down right now our items they
01:18 - appear with a fade in effect so have a
01:21 - look here refresh see one more time nice
01:25 - now also note that these items they
01:29 - don't appear all together at the same
01:31 - time they appear one after another so
01:35 - you have the first item then the second
01:37 - item then the third item let's have a
01:39 - look
01:39 - refresh did you see one more time this
01:44 - is what we call a staggering effect like
01:47 - a curtain also if I add a new item here
01:50 - here is my new task again it appears
01:54 - with a fade in effect and look what
01:57 - happens when I click an item to remove
02:00 - it the background turns red then the
02:03 - item slides to the right for a fraction
02:05 - of second and then it quickly slides to
02:07 - the left of the screen let's have a look
02:11 - did you see so here's one example so I'm
02:19 - gonna comment out but to do the element
02:21 - and bring in the zipi by the way I have
02:24 - attached this project as a zip file so
02:26 - if you want to play with it download it
02:28 - and run it you can see all these
02:30 - animations on your machine as well but
02:32 - we're going to build all these
02:34 - step-by-step in this section so don't
02:36 - worry if you don't understand the code
02:37 - now let's take a look at this zipping
02:40 - so this is our zippy now I'm going to
02:43 - click this this zippy is going to expand
02:46 - with an animation and then the content
02:49 - will fade in have a look did you see
02:54 - it's a very nice animation
02:58 - so these are the two examples we'll be
03:01 - working on in this section but the
03:03 - principles you learn here you can apply
03:04 - them to build various kinds of
03:06 - animations
03:11 - there are two primary ways to create
03:14 - animations in web applications we can
03:16 - use CSS and JavaScript in CSS we have a
03:21 - couple of properties like transition and
03:23 - animation and with these properties we
03:26 - can animate Dom elements so here's an
03:29 - example I've defined a CSS class called
03:31 - stretch in this class we have two
03:34 - properties animation name and animation
03:37 - duration when we apply this class to a
03:39 - Dom element the browser will animate
03:42 - that element okay
03:43 - now if you have been working with CSS
03:45 - for a while chances are you have heard
03:47 - of a library called animate at CSS so if
03:52 - you go to google and search for animate
03:54 - that CSS alright look at this first link
03:58 - here so this is a library that gives us
04:03 - a bunch of predefined classes for
04:05 - various kinds of animations so we don't
04:08 - have to manually build these animations
04:10 - with CSS properties so here's an example
04:13 - from this drop-down list you can select
04:16 - an animation and then see that animation
04:19 - in action
04:20 - see that's the bouncing effect okay now
04:25 - here's another example
04:26 - you've got pulse so very simple and
04:31 - beautiful animation you can look at the
04:33 - github page it's very easy to use all
04:35 - you have to do is install this animated
04:40 - CSS via NPM then add it to your HTML
04:43 - files or in angular world you need to
04:46 - import it into Styles dot CSS just like
04:49 - how we imported bootstrap into our
04:51 - styles but CSS okay
04:54 - and then finally all you have to do is
04:57 - to apply these classes on your elements
04:59 - it's really easy to use I'm not gonna go
05:02 - over this more because our focus here is
05:04 - purely on angular and not CSS so as you
05:08 - saw we can certainly use CSS to create
05:11 - animations but this CSS animations give
05:14 - us limited control so we often use these
05:17 - for simple one-shot animations like
05:20 - showing a tooltip or toggling UI element
05:24 - States
05:24 - if you want to build something more
05:26 - complex that needs fine-tuned control
05:29 - then you really need to use JavaScript
05:31 - now in terms of the implementation there
05:34 - are various libraries out there that
05:36 - give you an API for implementing
05:38 - animations in JavaScript I personally
05:41 - have used jQuery before but there are
05:43 - many other libraries out there but the
05:45 - recommended approach is to use the web
05:47 - animations API which is basically a
05:50 - specification for animating Dom elements
05:53 - and it's currently supported natively in
05:56 - Chrome Firefox and opera so if you head
06:01 - over to can I use com
06:03 - on this page you can see what features
06:06 - are implemented in what browsers so
06:08 - let's search for web animations API now
06:15 - here you can see web animations API is
06:18 - widely supported in Firefox Chrome and
06:21 - opera Microsoft Internet Explorer and
06:24 - edge just like always are behind the
06:26 - game but don't worry because there are
06:28 - polyfills that you can install and then
06:31 - you can use web animations in these
06:32 - other browsers now what does our code
06:35 - look like here's an example so we get a
06:38 - reference to a Dom element and then we
06:40 - can call the animate method on that
06:42 - element as simple as that so there are
06:46 - basically two ways to create animations
06:47 - in web applications you can use CSS
06:50 - and/or JavaScript but where does angular
06:54 - come in this picture well angular has a
06:57 - module called angular animations and
07:00 - this module is built on top of the
07:03 - standard web animations API so instead
07:07 - of us directly working with this API
07:08 - we're going to work with the
07:10 - abstractions provided by angular the
07:13 - benefit is that our code is going to be
07:15 - easier to unit test and also easier to
07:18 - port to a different platform so when we
07:21 - code against these abstractions and
07:23 - potentially we can take our code and run
07:25 - it inside an iOS or an Android
07:28 - environment and use animations natively
07:30 - in that environment so we are not
07:32 - tightly coupled to the implementation of
07:35 - web animations in browsers next we're
07:38 - going to
07:38 - look at animations in angular in more
07:40 - detail
07:44 - so in the last lecture you learned about
07:46 - two ways to create animations now let's
07:50 - see how we can build animations in our
07:52 - angular apps so as I told you before in
07:55 - angular we have a module called angular
07:58 - slash animations in this module we have
08:01 - a bunch of helper functions for creating
08:03 - animations such as trigger transition
08:06 - state animate and so on before we
08:10 - explore these functions in detail let's
08:13 - take a look at the anatomy of an
08:14 - animation look at this illustration what
08:18 - you see here is the concept behind every
08:20 - animation whether you're a programmer or
08:23 - an animator you're dealing with the same
08:25 - concept so what does this mean this
08:29 - means an element or here more accurately
08:32 - a Dom element can be in any given state
08:35 - let's say state 1 in this state it has a
08:39 - certain look and feel
08:40 - perhaps it's background is blue now
08:42 - during an animation it transitions to a
08:46 - different state and in this state it has
08:49 - a different look perhaps its background
08:51 - is now yellow this is the anatomy of
08:54 - every animation we have various states
08:57 - in each state our element has a
08:59 - different look and during an animation
09:02 - it transitions from one state to another
09:04 - okay now what are these states well in
09:08 - angular we have three kinds of states we
09:12 - have the Void state the default state
09:14 - and custom States let's explore each of
09:17 - these the Void state represents the
09:21 - state of an element that is not part of
09:23 - the dom and this can happen when an
09:26 - element is created but not placed in the
09:29 - dom yet or when it's removed from the
09:32 - dom here's a real-world example think of
09:35 - it to-do lists every time we add an item
09:38 - in the list the corresponding element is
09:40 - first created but it's not in the Dom
09:43 - yet so it's in the void State then it
09:47 - transitions from this state into a new
09:49 - state similarly when we delete an item
09:52 - from the list the corresponding element
09:54 - transitions from its current state into
09:57 - the void stay
09:58 - so here this asterisk represents what we
10:02 - call the default state so all elements
10:05 - do have a default state now back to the
10:09 - list of states one more time we have
10:11 - three types of states the void state the
10:15 - default state which is indicated by an
10:17 - asterisk and also custom states we don't
10:21 - always use custom States because they
10:23 - only make sense in certain scenarios for
10:26 - example think of a zippy or an accordion
10:29 - component this component is always
10:32 - visible in the view but its state can
10:35 - change from collapsed to expand it so if
10:38 - you want to implement an animation
10:40 - during this transition then we'll have
10:42 - to work with two custom states here
10:44 - collapsed and expand it so this is a big
10:48 - picture now let's take a look at the
10:50 - implementation let's say we want to
10:53 - apply an animation to each to the item
10:55 - in a list we start with the components
10:58 - metadata here we have a property called
11:01 - animation which takes an array in this
11:05 - array we register one or more triggers
11:08 - each trigger has a name and an
11:11 - implementation in this implementation we
11:14 - define all the states and transitions
11:17 - for that kind of animation so these
11:20 - functions you see here like trigger
11:21 - state and transition these are the
11:25 - helper functions that are defined in
11:27 - angular slash animations module you're
11:30 - going to see this in action soon so here
11:32 - we have a trigger called fainting now we
11:36 - can apply this trigger on any Dom
11:38 - element using this notation so we use an
11:42 - @ sign followed by the trigger name so
11:46 - this is the big picture next we'll
11:48 - create our first animation
11:54 - all right you're ready to implement our
11:56 - first animation now if you want to code
11:58 - along with me which I highly recommend
11:59 - you to do so download the zip file I've
12:02 - attached to this lecture then just as
12:05 - usual run npm install and finally ng sir
12:11 - so in this application we have a simple
12:14 - to-do list we can add a new to the item
12:16 - and we can delete existing items by
12:20 - clicking them now currently we don't
12:22 - have any animation here and that's what
12:24 - we're going to implement over the next
12:26 - few lectures so I can be s code the
12:30 - first step is to import the animations
12:32 - module into an app module so let's go to
12:35 - app that module on the top I'm gonna
12:40 - import browser animations module from at
12:47 - angular slash platform
12:50 - - browser slash animations so this
12:56 - module includes all the code or running
12:58 - animations in a browser now we need to
13:01 - import this into our module so browser
13:07 - animations module as I told you before
13:11 - this browser animations module is
13:13 - implemented on top of the standard web
13:16 - animations API and this API is natively
13:20 - supported in Firefox Chrome and opera so
13:24 - to support the other browsers you need
13:26 - to add polyfills polyfill is basically
13:29 - code that allows you to use modern
13:31 - JavaScript features in older browsers so
13:35 - back here in the source folder you can
13:37 - see we have a typescript file called
13:40 - polyfills now if you scroll down on line
13:46 - 40 and 41 you can see a commented line
13:49 - for importing web animations polyfill so
13:54 - here we need to remove the comment and
13:56 - as we can see in the comment in front of
13:58 - this line you need to manually install
14:01 - this node module web - animations
14:04 - that's j/s so
14:07 - back in the terminal npm install web
14:11 - - animations - je s and remember the
14:16 - save flag so this is how we add
14:21 - animation support to an existing
14:23 - application first we import the browser
14:26 - animations module and then we add web
14:28 - animations polyfill to support older
14:31 - browsers next we're going to implement
14:33 - our first animation
14:39 - all right let's go to our to do this
14:41 - component so to those dot TS so here we
14:47 - have a basic to those component now in
14:50 - the component metadata we're going to
14:53 - add a new property animations
14:57 - and we set this to an array in this
15:02 - array we define one or more triggers so
15:06 - we call the trigger function which comes
15:09 - in angular slash animations library
15:11 - let's import this on the top and by the
15:14 - way look here we have a couple of
15:16 - options one is to import this from
15:18 - angular slash animations the other is to
15:21 - import it from angular slash core
15:24 - initially the animation functions were
15:26 - part of the core angular module but
15:29 - starting from version four or four point
15:31 - one I don't exactly remember angular
15:34 - team moved these functions into a
15:36 - different module called angular slash
15:38 - animations so be sure to import all
15:41 - these functions from angular such
15:43 - animations okay now here we need to give
15:47 - this trigger and name so let's call this
15:50 - fate and then as a second argument we
15:53 - need to pass an array in this array we
15:57 - register all the states and the
15:59 - transitions to implement this animation
16:02 - okay so we have a trigger called fade
16:07 - before going any further let's go to our
16:10 - template and apply this trigger so to
16:14 - those that HTML so this is where we
16:17 - render all the to-do items each to-do
16:20 - item is a button and here you can see
16:23 - I've applied that into for directive so
16:26 - I'm gonna apply our trigger using this
16:28 - notation at sign and then the name of
16:31 - the trigger fade
16:33 - okay if you don't do this you're not
16:35 - gonna see the animation okay so back in
16:39 - the component
16:42 - now here in disarray we need to register
16:44 - all the states and the transitions for
16:47 - this animation so we often have calls to
16:50 - two functions one is the state function
16:52 - and the other is transition again both
16:57 - these functions are defined in angular
16:59 - slash animations so let's quickly import
17:02 - them from angular slash animations now
17:07 - it's easier to start with this
17:09 - transition function so I'm going to
17:12 - temporarily delete this line and we'll
17:14 - come back to it later
17:16 - now this transition function requires
17:19 - two arguments the first one is a string
17:22 - and this is what we call a state change
17:25 - expression with this expression we
17:27 - define the source and the target States
17:30 - so here's an example void goes to
17:34 - default
17:35 - that means when our element goes from
17:39 - the void state to the default state then
17:42 - here we add an array and in this array
17:45 - we define the steps that should run
17:48 - during this animation okay
17:50 - so in order to implement a fading effect
17:53 - we want to apply certain Styles during
17:56 - this transition when the element is
17:58 - created but it's not placed in the Dom
18:00 - yet here often we have calls to two
18:04 - functions one is the style function and
18:07 - the other is the animate function what
18:12 - are these well first of all let's import
18:15 - both of this from angular slash
18:16 - animations okay starting with the style
18:22 - function this function takes an object
18:25 - and this object contains one or more key
18:28 - value pairs where keys are CSS
18:31 - properties so if I want to change the
18:34 - background color of this element during
18:36 - this transition I can say that here
18:39 - background color yellow I can also set
18:43 - the opacity here opacity zero so this
18:48 - style function will apply these styles
18:51 - here immediately during this transition
18:55 - okay now the animate function is similar
18:58 - but it takes two arguments the first
19:00 - argument is the timing so let's say 2000
19:04 - milliseconds and the second argument is
19:07 - the style object so I'm gonna apply two
19:12 - stars background color white and opacity
19:19 - one so this animate function will apply
19:25 - these Styles over this period of time in
19:28 - this case two seconds that's the only
19:30 - difference between the style and animate
19:32 - functions the style function applies the
19:35 - Styles immediately but the animate
19:38 - function applies them over a period of
19:39 - time so when we run this code the
19:42 - background color of our element is going
19:44 - to be initially yellow and then over two
19:47 - seconds it will gradually change to
19:49 - white also similarly their opacity will
19:53 - be initially zero and then it will
19:55 - gradually change to one let's see this
19:58 - in action save back in the browser
20:01 - refresh okay look our items initially
20:06 - had a yellow background but that changed
20:08 - to white over two seconds now back to
20:11 - our component let's make this code a
20:13 - little bit cleaner here on line 12 where
20:16 - we call the animate function we can
20:18 - totally delete the second argument we
20:21 - don't need to explicitly tell angular to
20:23 - change the background color to white and
20:25 - the opacity to 1 because angular is
20:28 - smart enough to know that in the target
20:30 - state which is the default state here
20:33 - our item should have a white background
20:36 - and their opacity should be 1 so we
20:38 - don't need to explicitly specify them
20:41 - here so let's delete the call to the
20:43 - style function okay that's cleaner so
20:50 - here's the lesson in the list of steps
20:52 - and a transition if you have a call to
20:55 - the animate function with only a timing
20:57 - value without any Styles this animate
21:00 - function is going to undo all the
21:02 - previous Styles applied over this period
21:05 - of time so because earlier we changed
21:08 - style of our to two items this animate
21:11 - function is going to make any necessary
21:13 - changes to undo these styles okay
21:17 - also for the fade effect we don't really
21:20 - need this background color I just added
21:22 - this as a demonstration so here's how we
21:26 - implement the fade in effect when an
21:29 - element transitions from the void state
21:31 - to the default state initially we want
21:34 - to set its opacity to zero which will
21:36 - make this element invisible and then
21:39 - over a period of time in this case two
21:41 - seconds we want to change that opacity
21:44 - to 1 which will make the element appear
21:46 - on the view
21:52 - so here on this page if you add a new
21:55 - item it will appear with a fading effect
21:57 - so a new item there you go
22:01 - however if we click an item it will
22:04 - disappear immediately there is no
22:06 - animation let's have a look see they
22:10 - disappear immediately so let me show you
22:12 - how to implement a fade out effect here
22:16 - back to our component in the animations
22:19 - metadata property we defined a trigger
22:22 - called fade in this trigger we have a
22:25 - transition from the voice state to the
22:27 - default state now we want to define
22:30 - another transition from the default
22:33 - state to the void state because when we
22:35 - click an item it's going to be removed
22:37 - from the Dom at this point it will go
22:41 - from the default state to the Void state
22:43 - so here I'm gonna define a second
22:48 - transition transition from the default
22:55 - state to the voice state and here are
22:59 - the steps during this transition we want
23:02 - to change the opacity of this element
23:04 - from 1 to 0 over a period of time and
23:08 - this will make the element fade out so
23:11 - because we want to change the style over
23:14 - a period of time we're going to call the
23:16 - animate function so animate we give it a
23:21 - timing value let's say 2000 milliseconds
23:24 - and then we set the style so you want to
23:29 - change the opacity to zero over two
23:33 - seconds that's all we have to do let's
23:36 - test this back in the browser I'm gonna
23:40 - click this item now it fades out here's
23:44 - another example beautiful
23:51 - so this is our implementation of the
23:53 - fade in and fade out effects in this
23:56 - implementation as you see we have
23:58 - something that is duplicated that is
24:01 - this style object here how can we make
24:04 - this code cleaner well if you pay close
24:06 - attention here this is the style of the
24:08 - element in the void State so when the
24:11 - element is out of the Dom its opacity
24:14 - should be zero so to clean up this code
24:17 - we can define this style for the void
24:20 - state so earlier I told you that here in
24:23 - the trigger
24:24 - we often have calls to the transition
24:27 - and/or state functions so here we can
24:31 - call the state function to define a
24:33 - state state the first parameter is the
24:39 - name so here we want to work with the
24:42 - void state now look at the second
24:45 - parameter the type of this parameter is
24:48 - animation style metadata this might
24:51 - sound a little bit confusing and in fact
24:54 - a lot of functions in the animations
24:56 - module their parameters look something
24:59 - like this
24:59 - so they always have animation bla bla
25:02 - bla
25:02 - metadata now here's a tip for you
25:05 - whenever you see types like that drop
25:08 - the animation and metadata words so here
25:11 - if we drop these what do we have style
25:14 - that means we should call this style
25:16 - function to get a style object okay
25:20 - so recall style and here we can set this
25:26 - to I love this element in the void State
25:28 - so opacity 0 and then we don't have to
25:34 - repeat this in two places so we can
25:36 - delete it from here and also here so
25:44 - once again inside a trigger
25:45 - we often have calls to the state and/or
25:48 - transition functions most of the time we
25:51 - use the transition function but
25:53 - depending on what we're implementing you
25:55 - may use the state function to make our
25:57 - code cleaner and more maintainable now
26:00 - one last thing before we finish this
26:01 - lecture on angular website
26:04 - when you search for animation functions
26:06 - you will see two versions of these
26:09 - functions so here's an example let's say
26:11 - you want to read about this style
26:13 - function
26:13 - let's search okay look here we have two
26:17 - instances let's click on the first one
26:19 - you can see this function is defined in
26:23 - angular slash core package so as I told
26:26 - you before initially all the animation
26:29 - functions were defined in this package
26:31 - but starting from angular 4 or 4.1
26:34 - angular team move these functions into a
26:37 - separate package however for
26:40 - compatibility they have kept these
26:42 - functions in the angular / core package
26:44 - but they will be deprecated soon so now
26:47 - right here let's click on the second one
26:51 - you can see this function is defined in
26:53 - an angular slash animations package and
26:56 - it has the full documentation
27:03 - so continuing from the last lecture we
27:06 - still have a little bit of duplication
27:08 - in our code so look we have repeated
27:11 - this animate 2,000 milliseconds in two
27:14 - places so let me show you a cleaner way
27:17 - to implement the fade in and fade out
27:19 - effect in the transition function as the
27:22 - first argument we can supply multiple
27:25 - state change expressions so here I can
27:30 - add a comma and add the other state
27:32 - change expression that is the default
27:35 - state goes to void and then we can
27:38 - delete the second transition better
27:42 - right but we can make this even cleaner
27:45 - so
27:47 - instead of having two unidirectional
27:49 - state change expressions we can have a
27:52 - bi-directional state change expression
27:55 - so I can delete the second expression
27:58 - and make this bi-directional this is
28:02 - much better from where we started so
28:05 - here is the lesson if you have multiple
28:08 - transitions and these transitions have
28:10 - the same implementation you can refactor
28:13 - them into one transition with multiple
28:15 - state change expressions also here we
28:19 - have a couple of aliases so let me
28:22 - revert this back to what we had earlier
28:24 - these two expressions are very common so
28:27 - in angular we have an alias for these
28:30 - expressions so for the first one when
28:33 - the element transitions from the void to
28:35 - the default state our alias is in turn
28:39 - so we add : enter and for the second
28:43 - expression our alias is leave so that's
28:47 - when the element is leaving the Dom like
28:50 - this so using these aliases in my
28:53 - opinion is cleaner and more readable
28:55 - than a bi-directional state change
28:59 - expression like this but if you prefer
29:02 - the other syntax at all means go for it
29:04 - I'm going to delete this so this is all
29:08 - about transitions
29:14 - so we have defined this fate trigger in
29:17 - art to do is component a chances are
29:19 - somewhere else in an application you may
29:21 - want to apply a fade effect to another
29:23 - element we don't want to repeat all this
29:26 - code so it's better to extract this code
29:28 - and put it into a different module that
29:31 - we can reuse in multiple places so back
29:35 - in the app folder I'm gonna add a new
29:36 - file animations dot TS in this file
29:43 - we're going to define our reusable
29:45 - animations if you have a lot of
29:48 - animations instead of one file you may
29:50 - want to create a directory and in that
29:52 - directory you will have different files
29:54 - for different kinds of animations but
29:56 - for this example
29:57 - that's an overkill so acting our
30:01 - component this trigger is basically a
30:04 - function that is defined in angular
30:06 - slash animations module so if you look
30:09 - at the return type it returns an
30:13 - animation trigger metadata object once
30:17 - again as a tip I told you whenever you
30:19 - see these types drop the word animation
30:22 - and metadata so this trigger function
30:25 - returns a trigger object all we have to
30:28 - do is export a trigger object from our
30:31 - animations module so I'm gonna select
30:35 - all this code cut it back to the new
30:39 - module export a variable let's call this
30:43 - fade and set it to the return value of
30:46 - this trigger function now let's clean up
30:49 - the code finally we need to import all
30:52 - these functions from angular special
30:54 - animations package so back to our
30:57 - component on the top I'm gonna cut this
31:01 - line and move it to this new module
31:05 - beautiful now we can reuse this fade
31:08 - trigger in multiple places so back to
31:11 - our component here in this array I'm
31:14 - gonna add the fade trigger so fade and
31:18 - you can see this is defined in
31:21 - animations module
31:26 - all right now it's time for an exercise
31:29 - so I want you to implement a slide
31:32 - animation like this if i refresh this
31:35 - page look elements slide on the left
31:39 - side of the screen one more time that's
31:42 - it if I add a new item here publish a
31:46 - new section look it slides from the left
31:50 - to the right and when we click an item
31:54 - it slides to the left side of the screen
31:56 - and exits now here's a tip for you in
32:00 - order to implement this slide animation
32:02 - you need to apply the transform CSS
32:05 - property when you said this to translate
32:08 - X can move an item to the left or to the
32:11 - right side of the screen next we can see
32:14 - my solution hi thank you for watching my
32:20 - angular tutorial if you enjoyed this
32:22 - video please like it and share it with
32:24 - others also you can subscribe to my
32:26 - channel for free new videos every week
32:29 - this video is part of my complete
32:31 - angular course with almost 30 hours of
32:34 - high quality content where you learn
32:37 - everything about angular from the basic
32:39 - to the advanced topics all in one course
32:41 - so you don't have to jump from one
32:43 - tutorial to another in case you're
32:45 - interested you can get this course but a
32:47 - big discount using the link in the video
32:49 - description and if not that's perfectly
32:51 - fine
32:52 - continue watching as the next section is
32:54 - coming up

Cleaned transcript:

animations are getting more common in a lot of modern applications so in this section I'm going to teach you how to add animations to your angular apps by the end of this section you will have a good understanding of the structure of animations you'll be able to animate various elements in the Dom you'll be able to create reusable animations you will learn how to work with the new animation functions in angular 4.3 and finally I will show you how to write clean and maintainable animation code this section is about one and a half hours long so it's best to watch it over two sessions now let's get started alright first let me show you the kind of animations you're going to build in this section so here's one example here we have this to do list when i refresh the page these items these elements are going to appear with an animation so let's have a look one by one I'm going to refresh the page let's have a closer look so our heading slides down let's have a look refresh slide down one more time slide down right now our items they appear with a fade in effect so have a look here refresh see one more time nice now also note that these items they don't appear all together at the same time they appear one after another so you have the first item then the second item then the third item let's have a look refresh did you see one more time this is what we call a staggering effect like a curtain also if I add a new item here here is my new task again it appears with a fade in effect and look what happens when I click an item to remove it the background turns red then the item slides to the right for a fraction of second and then it quickly slides to the left of the screen let's have a look did you see so here's one example so I'm gonna comment out but to do the element and bring in the zipi by the way I have attached this project as a zip file so if you want to play with it download it and run it you can see all these animations on your machine as well but we're going to build all these stepbystep in this section so don't worry if you don't understand the code now let's take a look at this zipping so this is our zippy now I'm going to click this this zippy is going to expand with an animation and then the content will fade in have a look did you see it's a very nice animation so these are the two examples we'll be working on in this section but the principles you learn here you can apply them to build various kinds of animations there are two primary ways to create animations in web applications we can use CSS and JavaScript in CSS we have a couple of properties like transition and animation and with these properties we can animate Dom elements so here's an example I've defined a CSS class called stretch in this class we have two properties animation name and animation duration when we apply this class to a Dom element the browser will animate that element okay now if you have been working with CSS for a while chances are you have heard of a library called animate at CSS so if you go to google and search for animate that CSS alright look at this first link here so this is a library that gives us a bunch of predefined classes for various kinds of animations so we don't have to manually build these animations with CSS properties so here's an example from this dropdown list you can select an animation and then see that animation in action see that's the bouncing effect okay now here's another example you've got pulse so very simple and beautiful animation you can look at the github page it's very easy to use all you have to do is install this animated CSS via NPM then add it to your HTML files or in angular world you need to import it into Styles dot CSS just like how we imported bootstrap into our styles but CSS okay and then finally all you have to do is to apply these classes on your elements it's really easy to use I'm not gonna go over this more because our focus here is purely on angular and not CSS so as you saw we can certainly use CSS to create animations but this CSS animations give us limited control so we often use these for simple oneshot animations like showing a tooltip or toggling UI element States if you want to build something more complex that needs finetuned control then you really need to use JavaScript now in terms of the implementation there are various libraries out there that give you an API for implementing animations in JavaScript I personally have used jQuery before but there are many other libraries out there but the recommended approach is to use the web animations API which is basically a specification for animating Dom elements and it's currently supported natively in Chrome Firefox and opera so if you head over to can I use com on this page you can see what features are implemented in what browsers so let's search for web animations API now here you can see web animations API is widely supported in Firefox Chrome and opera Microsoft Internet Explorer and edge just like always are behind the game but don't worry because there are polyfills that you can install and then you can use web animations in these other browsers now what does our code look like here's an example so we get a reference to a Dom element and then we can call the animate method on that element as simple as that so there are basically two ways to create animations in web applications you can use CSS and/or JavaScript but where does angular come in this picture well angular has a module called angular animations and this module is built on top of the standard web animations API so instead of us directly working with this API we're going to work with the abstractions provided by angular the benefit is that our code is going to be easier to unit test and also easier to port to a different platform so when we code against these abstractions and potentially we can take our code and run it inside an iOS or an Android environment and use animations natively in that environment so we are not tightly coupled to the implementation of web animations in browsers next we're going to look at animations in angular in more detail so in the last lecture you learned about two ways to create animations now let's see how we can build animations in our angular apps so as I told you before in angular we have a module called angular slash animations in this module we have a bunch of helper functions for creating animations such as trigger transition state animate and so on before we explore these functions in detail let's take a look at the anatomy of an animation look at this illustration what you see here is the concept behind every animation whether you're a programmer or an animator you're dealing with the same concept so what does this mean this means an element or here more accurately a Dom element can be in any given state let's say state 1 in this state it has a certain look and feel perhaps it's background is blue now during an animation it transitions to a different state and in this state it has a different look perhaps its background is now yellow this is the anatomy of every animation we have various states in each state our element has a different look and during an animation it transitions from one state to another okay now what are these states well in angular we have three kinds of states we have the Void state the default state and custom States let's explore each of these the Void state represents the state of an element that is not part of the dom and this can happen when an element is created but not placed in the dom yet or when it's removed from the dom here's a realworld example think of it todo lists every time we add an item in the list the corresponding element is first created but it's not in the Dom yet so it's in the void State then it transitions from this state into a new state similarly when we delete an item from the list the corresponding element transitions from its current state into the void stay so here this asterisk represents what we call the default state so all elements do have a default state now back to the list of states one more time we have three types of states the void state the default state which is indicated by an asterisk and also custom states we don't always use custom States because they only make sense in certain scenarios for example think of a zippy or an accordion component this component is always visible in the view but its state can change from collapsed to expand it so if you want to implement an animation during this transition then we'll have to work with two custom states here collapsed and expand it so this is a big picture now let's take a look at the implementation let's say we want to apply an animation to each to the item in a list we start with the components metadata here we have a property called animation which takes an array in this array we register one or more triggers each trigger has a name and an implementation in this implementation we define all the states and transitions for that kind of animation so these functions you see here like trigger state and transition these are the helper functions that are defined in angular slash animations module you're going to see this in action soon so here we have a trigger called fainting now we can apply this trigger on any Dom element using this notation so we use an @ sign followed by the trigger name so this is the big picture next we'll create our first animation all right you're ready to implement our first animation now if you want to code along with me which I highly recommend you to do so download the zip file I've attached to this lecture then just as usual run npm install and finally ng sir so in this application we have a simple todo list we can add a new to the item and we can delete existing items by clicking them now currently we don't have any animation here and that's what we're going to implement over the next few lectures so I can be s code the first step is to import the animations module into an app module so let's go to app that module on the top I'm gonna import browser animations module from at angular slash platform browser slash animations so this module includes all the code or running animations in a browser now we need to import this into our module so browser animations module as I told you before this browser animations module is implemented on top of the standard web animations API and this API is natively supported in Firefox Chrome and opera so to support the other browsers you need to add polyfills polyfill is basically code that allows you to use modern JavaScript features in older browsers so back here in the source folder you can see we have a typescript file called polyfills now if you scroll down on line 40 and 41 you can see a commented line for importing web animations polyfill so here we need to remove the comment and as we can see in the comment in front of this line you need to manually install this node module web animations that's j/s so back in the terminal npm install web animations je s and remember the save flag so this is how we add animation support to an existing application first we import the browser animations module and then we add web animations polyfill to support older browsers next we're going to implement our first animation all right let's go to our to do this component so to those dot TS so here we have a basic to those component now in the component metadata we're going to add a new property animations and we set this to an array in this array we define one or more triggers so we call the trigger function which comes in angular slash animations library let's import this on the top and by the way look here we have a couple of options one is to import this from angular slash animations the other is to import it from angular slash core initially the animation functions were part of the core angular module but starting from version four or four point one I don't exactly remember angular team moved these functions into a different module called angular slash animations so be sure to import all these functions from angular such animations okay now here we need to give this trigger and name so let's call this fate and then as a second argument we need to pass an array in this array we register all the states and the transitions to implement this animation okay so we have a trigger called fade before going any further let's go to our template and apply this trigger so to those that HTML so this is where we render all the todo items each todo item is a button and here you can see I've applied that into for directive so I'm gonna apply our trigger using this notation at sign and then the name of the trigger fade okay if you don't do this you're not gonna see the animation okay so back in the component now here in disarray we need to register all the states and the transitions for this animation so we often have calls to two functions one is the state function and the other is transition again both these functions are defined in angular slash animations so let's quickly import them from angular slash animations now it's easier to start with this transition function so I'm going to temporarily delete this line and we'll come back to it later now this transition function requires two arguments the first one is a string and this is what we call a state change expression with this expression we define the source and the target States so here's an example void goes to default that means when our element goes from the void state to the default state then here we add an array and in this array we define the steps that should run during this animation okay so in order to implement a fading effect we want to apply certain Styles during this transition when the element is created but it's not placed in the Dom yet here often we have calls to two functions one is the style function and the other is the animate function what are these well first of all let's import both of this from angular slash animations okay starting with the style function this function takes an object and this object contains one or more key value pairs where keys are CSS properties so if I want to change the background color of this element during this transition I can say that here background color yellow I can also set the opacity here opacity zero so this style function will apply these styles here immediately during this transition okay now the animate function is similar but it takes two arguments the first argument is the timing so let's say 2000 milliseconds and the second argument is the style object so I'm gonna apply two stars background color white and opacity one so this animate function will apply these Styles over this period of time in this case two seconds that's the only difference between the style and animate functions the style function applies the Styles immediately but the animate function applies them over a period of time so when we run this code the background color of our element is going to be initially yellow and then over two seconds it will gradually change to white also similarly their opacity will be initially zero and then it will gradually change to one let's see this in action save back in the browser refresh okay look our items initially had a yellow background but that changed to white over two seconds now back to our component let's make this code a little bit cleaner here on line 12 where we call the animate function we can totally delete the second argument we don't need to explicitly tell angular to change the background color to white and the opacity to 1 because angular is smart enough to know that in the target state which is the default state here our item should have a white background and their opacity should be 1 so we don't need to explicitly specify them here so let's delete the call to the style function okay that's cleaner so here's the lesson in the list of steps and a transition if you have a call to the animate function with only a timing value without any Styles this animate function is going to undo all the previous Styles applied over this period of time so because earlier we changed style of our to two items this animate function is going to make any necessary changes to undo these styles okay also for the fade effect we don't really need this background color I just added this as a demonstration so here's how we implement the fade in effect when an element transitions from the void state to the default state initially we want to set its opacity to zero which will make this element invisible and then over a period of time in this case two seconds we want to change that opacity to 1 which will make the element appear on the view so here on this page if you add a new item it will appear with a fading effect so a new item there you go however if we click an item it will disappear immediately there is no animation let's have a look see they disappear immediately so let me show you how to implement a fade out effect here back to our component in the animations metadata property we defined a trigger called fade in this trigger we have a transition from the voice state to the default state now we want to define another transition from the default state to the void state because when we click an item it's going to be removed from the Dom at this point it will go from the default state to the Void state so here I'm gonna define a second transition transition from the default state to the voice state and here are the steps during this transition we want to change the opacity of this element from 1 to 0 over a period of time and this will make the element fade out so because we want to change the style over a period of time we're going to call the animate function so animate we give it a timing value let's say 2000 milliseconds and then we set the style so you want to change the opacity to zero over two seconds that's all we have to do let's test this back in the browser I'm gonna click this item now it fades out here's another example beautiful so this is our implementation of the fade in and fade out effects in this implementation as you see we have something that is duplicated that is this style object here how can we make this code cleaner well if you pay close attention here this is the style of the element in the void State so when the element is out of the Dom its opacity should be zero so to clean up this code we can define this style for the void state so earlier I told you that here in the trigger we often have calls to the transition and/or state functions so here we can call the state function to define a state state the first parameter is the name so here we want to work with the void state now look at the second parameter the type of this parameter is animation style metadata this might sound a little bit confusing and in fact a lot of functions in the animations module their parameters look something like this so they always have animation bla bla bla metadata now here's a tip for you whenever you see types like that drop the animation and metadata words so here if we drop these what do we have style that means we should call this style function to get a style object okay so recall style and here we can set this to I love this element in the void State so opacity 0 and then we don't have to repeat this in two places so we can delete it from here and also here so once again inside a trigger we often have calls to the state and/or transition functions most of the time we use the transition function but depending on what we're implementing you may use the state function to make our code cleaner and more maintainable now one last thing before we finish this lecture on angular website when you search for animation functions you will see two versions of these functions so here's an example let's say you want to read about this style function let's search okay look here we have two instances let's click on the first one you can see this function is defined in angular slash core package so as I told you before initially all the animation functions were defined in this package but starting from angular 4 or 4.1 angular team move these functions into a separate package however for compatibility they have kept these functions in the angular / core package but they will be deprecated soon so now right here let's click on the second one you can see this function is defined in an angular slash animations package and it has the full documentation so continuing from the last lecture we still have a little bit of duplication in our code so look we have repeated this animate 2,000 milliseconds in two places so let me show you a cleaner way to implement the fade in and fade out effect in the transition function as the first argument we can supply multiple state change expressions so here I can add a comma and add the other state change expression that is the default state goes to void and then we can delete the second transition better right but we can make this even cleaner so instead of having two unidirectional state change expressions we can have a bidirectional state change expression so I can delete the second expression and make this bidirectional this is much better from where we started so here is the lesson if you have multiple transitions and these transitions have the same implementation you can refactor them into one transition with multiple state change expressions also here we have a couple of aliases so let me revert this back to what we had earlier these two expressions are very common so in angular we have an alias for these expressions so for the first one when the element transitions from the void to the default state our alias is in turn so we add enter and for the second expression our alias is leave so that's when the element is leaving the Dom like this so using these aliases in my opinion is cleaner and more readable than a bidirectional state change expression like this but if you prefer the other syntax at all means go for it I'm going to delete this so this is all about transitions so we have defined this fate trigger in art to do is component a chances are somewhere else in an application you may want to apply a fade effect to another element we don't want to repeat all this code so it's better to extract this code and put it into a different module that we can reuse in multiple places so back in the app folder I'm gonna add a new file animations dot TS in this file we're going to define our reusable animations if you have a lot of animations instead of one file you may want to create a directory and in that directory you will have different files for different kinds of animations but for this example that's an overkill so acting our component this trigger is basically a function that is defined in angular slash animations module so if you look at the return type it returns an animation trigger metadata object once again as a tip I told you whenever you see these types drop the word animation and metadata so this trigger function returns a trigger object all we have to do is export a trigger object from our animations module so I'm gonna select all this code cut it back to the new module export a variable let's call this fade and set it to the return value of this trigger function now let's clean up the code finally we need to import all these functions from angular special animations package so back to our component on the top I'm gonna cut this line and move it to this new module beautiful now we can reuse this fade trigger in multiple places so back to our component here in this array I'm gonna add the fade trigger so fade and you can see this is defined in animations module all right now it's time for an exercise so I want you to implement a slide animation like this if i refresh this page look elements slide on the left side of the screen one more time that's it if I add a new item here publish a new section look it slides from the left to the right and when we click an item it slides to the left side of the screen and exits now here's a tip for you in order to implement this slide animation you need to apply the transform CSS property when you said this to translate X can move an item to the left or to the right side of the screen next we can see my solution hi thank you for watching my angular tutorial if you enjoyed this video please like it and share it with others also you can subscribe to my channel for free new videos every week this video is part of my complete angular course with almost 30 hours of high quality content where you learn everything about angular from the basic to the advanced topics all in one course so you don't have to jump from one tutorial to another in case you're interested you can get this course but a big discount using the link in the video description and if not that's perfectly fine continue watching as the next section is coming up
