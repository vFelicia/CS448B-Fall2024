With timestamps:

00:03 - in the last lecture you learned that
00:05 - backslash n adds a newline to a string
00:07 - now what I don't like about this
00:09 - approach is that it doesn't allow us to
00:12 - visualize what the output looks like in
00:15 - other words if we log message on the
00:17 - console you can see this is what the
00:19 - output looks like so on the first line
00:21 - we have this is my and on the second
00:23 - line we have first message but when
00:25 - writing code our string looks different
00:28 - now if you want to make this string
00:30 - similar to what the output looks like we
00:33 - have to do something like this so we
00:36 - break this string into two parts and
00:39 - concatenate them like this and then we
00:43 - add the second part and a newline we can
00:46 - also put the first part on a new line
00:48 - and now this kind of looks similar to
00:51 - what we have in the output but we still
00:53 - have this backslash n getting in the way
00:56 - creating some noise in the code to make
00:58 - the matter worse if you want to surround
01:00 - first with single quotes will have to
01:03 - escape the single code character like
01:06 - this again this is very very ugly
01:09 - let's lock this one more time very very
01:12 - ugly and noisy that's where template
01:15 - literals come in the picture so so far
01:18 - you have learned about different kinds
01:19 - of literals in JavaScript so we have
01:22 - object literals which are indicated by
01:24 - curly braces we have boolean literals
01:26 - which are true or false we have string
01:30 - literals
01:30 - which are indicated by single or double
01:33 - quotes now starting from es6 we have
01:37 - template literals which are indicated by
01:40 - the backtick character this backtick
01:43 - character is the character before number
01:46 - 1 on your keyboard so let's see how
01:48 - template literals help us read cleaner
01:51 - code I'm gonna define another constant
01:54 - but this time I'm gonna use a template
01:57 - literal instead of a string literal so
02:01 - we add the backtick character this is my
02:04 - now to add a new line we don't need
02:06 - backslash in here we can simply add a
02:09 - line break and then type first message
02:12 - so we can format our string the way we
02:15 - want it to look like
02:16 - so now let's log message and another see
02:23 - what we have in code
02:24 - looks very similar to what we have and
02:26 - the output that we can also put this on
02:29 - a new line now if you want to surround
02:32 - first with single codes we can simply
02:34 - add them here there is no need to escape
02:36 - them because we have used a different
02:39 - character to define our string so save
02:42 - the changes one more time message
02:45 - another they look identical but compare
02:49 - this code with the former code this is
02:53 - particularly useful if you want to send
02:55 - out email messages in your application
02:57 - for example let's say you want to send
03:00 - an email to the user like this hi John
03:03 - thank you for joining my mailing list
03:07 - regards mush so we can format our string
03:11 - exactly the way we want it to look like
03:13 - there is no need for any of these plus
03:15 - or backslash n characters so let me
03:19 - delete all this stuff now another
03:21 - benefit of using template literals is
03:24 - that here we can add placeholders so
03:26 - let's say we want to add the name
03:28 - dynamically with a regular string we'll
03:31 - have to do something like this so
03:34 - message we set it to high then you have
03:38 - to concatenate this with some variable
03:41 - or constant let me define name here set
03:44 - it to John now we'll have to concatenate
03:47 - this message with name then add a comma
03:50 - then backslash n this is really really
03:53 - ugly let me show you a better way with
03:56 - template literals we can add a
03:59 - placeholder using a dollar sign and
04:02 - curly braces now inside these curly
04:05 - braces we add an expression we can pass
04:07 - the name of a variable or a constant now
04:10 - save the changes let's take a look at
04:13 - another you can see we've got John here
04:16 - dynamically so this is a placeholder for
04:20 - our name constant now here we can add
04:22 - any kind of expression we can also add a
04:25 - simple mathematical expression like this
04:29 - let's log this one more time so hi John
04:35 - five so technically we can add any
04:38 - expression that produces a value in
04:41 - between the curly braces we can also
04:43 - call a function that returns a value and
04:46 - that's perfectly valid so these are the
04:48 - benefits of using template literals
04:53 - hi guys thank you for watching my
04:56 - javascript tutorial this tutorial is
04:58 - part of my JavaScript course where you
05:00 - learn all the essential JavaScript
05:03 - features that every web and mobile
05:05 - application developer must know if
05:07 - you're an absolute beginner or have some
05:09 - experience in JavaScript and are looking
05:11 - for a fun and in-depth course that
05:13 - teaches you the fundamentals of
05:14 - JavaScript this course is for you this
05:17 - course is also packed with tons of
05:19 - exercises that help you master what you
05:21 - learned in the course in fact many of
05:23 - these exercises are questions that come
05:25 - up in technical programming interviews
05:28 - so if you're pursuing a job as a
05:30 - front-end or a back-end developer or if
05:33 - you simply want to have a more in-depth
05:35 - understanding of JavaScript I highly
05:37 - encourage you to enroll in the course
05:39 - for a limited time you can get this
05:41 - course with a discount using the link in
05:43 - the video description click the link to
05:45 - find out more about the course and
05:47 - enroll

Cleaned transcript:

in the last lecture you learned that backslash n adds a newline to a string now what I don't like about this approach is that it doesn't allow us to visualize what the output looks like in other words if we log message on the console you can see this is what the output looks like so on the first line we have this is my and on the second line we have first message but when writing code our string looks different now if you want to make this string similar to what the output looks like we have to do something like this so we break this string into two parts and concatenate them like this and then we add the second part and a newline we can also put the first part on a new line and now this kind of looks similar to what we have in the output but we still have this backslash n getting in the way creating some noise in the code to make the matter worse if you want to surround first with single quotes will have to escape the single code character like this again this is very very ugly let's lock this one more time very very ugly and noisy that's where template literals come in the picture so so far you have learned about different kinds of literals in JavaScript so we have object literals which are indicated by curly braces we have boolean literals which are true or false we have string literals which are indicated by single or double quotes now starting from es6 we have template literals which are indicated by the backtick character this backtick character is the character before number 1 on your keyboard so let's see how template literals help us read cleaner code I'm gonna define another constant but this time I'm gonna use a template literal instead of a string literal so we add the backtick character this is my now to add a new line we don't need backslash in here we can simply add a line break and then type first message so we can format our string the way we want it to look like so now let's log message and another see what we have in code looks very similar to what we have and the output that we can also put this on a new line now if you want to surround first with single codes we can simply add them here there is no need to escape them because we have used a different character to define our string so save the changes one more time message another they look identical but compare this code with the former code this is particularly useful if you want to send out email messages in your application for example let's say you want to send an email to the user like this hi John thank you for joining my mailing list regards mush so we can format our string exactly the way we want it to look like there is no need for any of these plus or backslash n characters so let me delete all this stuff now another benefit of using template literals is that here we can add placeholders so let's say we want to add the name dynamically with a regular string we'll have to do something like this so message we set it to high then you have to concatenate this with some variable or constant let me define name here set it to John now we'll have to concatenate this message with name then add a comma then backslash n this is really really ugly let me show you a better way with template literals we can add a placeholder using a dollar sign and curly braces now inside these curly braces we add an expression we can pass the name of a variable or a constant now save the changes let's take a look at another you can see we've got John here dynamically so this is a placeholder for our name constant now here we can add any kind of expression we can also add a simple mathematical expression like this let's log this one more time so hi John five so technically we can add any expression that produces a value in between the curly braces we can also call a function that returns a value and that's perfectly valid so these are the benefits of using template literals hi guys thank you for watching my javascript tutorial this tutorial is part of my JavaScript course where you learn all the essential JavaScript features that every web and mobile application developer must know if you're an absolute beginner or have some experience in JavaScript and are looking for a fun and indepth course that teaches you the fundamentals of JavaScript this course is for you this course is also packed with tons of exercises that help you master what you learned in the course in fact many of these exercises are questions that come up in technical programming interviews so if you're pursuing a job as a frontend or a backend developer or if you simply want to have a more indepth understanding of JavaScript I highly encourage you to enroll in the course for a limited time you can get this course with a discount using the link in the video description click the link to find out more about the course and enroll
