With timestamps:

00:00 - this picture has been floating on the
00:02 - internet the past few days and a lot of
00:04 - people hate the code that is presented
00:06 - here so in this video I'm going to talk
00:08 - about some of the common arguments I
00:10 - will explain my point of view and at the
00:13 - end I will explain why I think the
00:15 - direction that react and Nyx are taking
00:18 - is in fact a great
00:20 - [Music]
00:22 - Direction my name is Mos and I've helped
00:25 - millions of people Advance their
00:27 - software engineering skills through this
00:29 - Channel and my online school code
00:31 - with.com so back to this picture to give
00:34 - you some context this picture is part of
00:36 - the nexj conference that was held last
00:38 - week now if you're are not familiar with
00:40 - nextjs it's basically a framework for
00:43 - building full stack applications with
00:45 - react on the front end and node on the
00:47 - back end so if you're a react developer
00:49 - you know that you can build the front
00:51 - end using react but to build the back
00:53 - end you have to use a separate backend
00:56 - framework like expressjs d Jango Ruby on
00:59 - Rails asp.net core and so on now with
01:02 - nextjs we can build both the front end
01:05 - and back end within the same project
01:07 - using the same language and the same set
01:09 - of tools now if you want to learn nextjs
01:12 - I have a couple of tutorials here on
01:13 - this channel and comprehensive courses
01:15 - on my website Cod with.com so what are
01:19 - the arguments against this code so
01:22 - here's the code that you saw in the
01:23 - slide here we have a react component
01:26 - called bookmark that renders a button
01:28 - with an icon and here we have a
01:31 - relatively new feature called a server
01:33 - action and that is this function you see
01:35 - here it's called a server action meaning
01:38 - it's an action or a function that gets
01:41 - executed on the server so when this
01:43 - button is clicked this piece of code is
01:45 - executed and as a result a bookmark is
01:48 - inserted into the database now a lot of
01:51 - people are arguing that this is like PHP
01:53 - but it took us 20 years to get back to
01:56 - where PHP was 20 years ago but this is
01:59 - not a valid argument argument because
02:00 - PHP runs entirely on the backend but
02:03 - here we have full power of front end and
02:06 - backend development now the second
02:08 - argument is that this code is vulnerable
02:11 - to SQL injection attacks a SQL injection
02:14 - attack is a kind of attack where a
02:16 - hacker can send SQL instructions to our
02:19 - application and do crazy things like
02:21 - inserting data deleting data and so on
02:24 - now this happens when we build SQL
02:26 - instructions dynamically using string
02:29 - concatenation
02:30 - so in this example we're building a SQL
02:32 - statement for inserting a bookmark into
02:35 - the bookmark table now because we're
02:37 - building this statement using string
02:39 - concatenation a hacker can send this
02:42 - input to our application and change our
02:45 - statement to something like this so in
02:48 - addition to inserting a bookmark they're
02:50 - also deleting all the users from the
02:52 - user table now the way we can prevent
02:55 - this is by using parameterized SQL
02:57 - statements so we Define our SQL
03:00 - statement with parameters which are
03:02 - placeholders for values what the user
03:04 - sends will be inserted into these
03:06 - placeholders so with this technique a
03:09 - hacker cannot change a SQL statement
03:11 - because it's fixed okay now the example
03:14 - that they were presenting at the next
03:16 - year's conference is using versel
03:18 - postgress package this page clearly
03:20 - explains that our SQL queries are
03:23 - constructed with the SQL template
03:25 - literal tag this function translates
03:28 - your query into a native postgress
03:30 - parameterized query to help prevent SQL
03:34 - injections so the argument that this
03:36 - code is vulnerable to SQL injection
03:38 - attacks is invalid now the third
03:40 - argument is that this code violates the
03:43 - separation of concerns principle but
03:45 - what is separation of concerns and why
03:47 - does it matter well separation of
03:49 - concerns is a fundamental design
03:51 - principle in software engineering it's
03:53 - suggests that by separating concerns we
03:56 - can make our code better organized more
03:58 - maintainable and potentially more
04:01 - reusable in this case we have some
04:04 - presentation code like the button and
04:06 - the icon mixed up with database related
04:09 - code so yes this code does violate the
04:12 - separation of concerns principle so to
04:14 - improve this the first thing we can do
04:16 - is take out this
04:18 - function outside of this component so
04:21 - I'm going to cut this code now let's
04:23 - define a function called add
04:28 - bookmark here we should give this a
04:30 - parameter called
04:31 - slug now back to our
04:34 - component here we pass an arrow function
04:36 - and call add
04:38 - bookmark so look the end result is
04:40 - cleaner and more maintainable now we
04:43 - could take this further and move this
04:45 - function at bookmark outside of this
04:48 - module and put it into a separate module
04:50 - but in this case I prefer to keep it
04:53 - here because realistically this is part
04:55 - of the implementation of this component
04:57 - so we are not going to get any extra
04:59 - value in terms of maintainability by
05:02 - moving these two lines of code into a
05:04 - separate file or module however if this
05:07 - component was more complex if it had
05:09 - hundreds of lines of code and if our
05:11 - database related code was more
05:13 - complicated yes then it would make sense
05:16 - to take this function and put it into a
05:18 - separate module the separation of
05:20 - concerns principle doesn't care how we
05:22 - should separate concerns it only
05:24 - suggests that by separating concerns we
05:26 - can make our code better organized more
05:29 - maintained and more reusable how we
05:31 - separate concerns is up to us and we
05:34 - have to decide on a caseby casee basis
05:36 - sometimes different functions within the
05:38 - same module sometimes different modules
05:41 - sometimes different folders sometimes
05:43 - different projects what I want you to
05:45 - take away from this video is that
05:46 - software engineering is not black and
05:48 - white you cannot take a principle and
05:51 - blindly apply it to solve every problem
05:53 - every problem is different so in this
05:56 - example I prefer to keep this function
05:59 - with in this module now the other
06:01 - argument is that we should not write SQL
06:03 - code in our components to start with and
06:06 - that is a fair argument the good thing
06:08 - is that server actions are not tied to
06:10 - this SQL function so here we can use an
06:13 - object relational mapper like Prisma and
06:15 - that's what I personally prefer as well
06:18 - so these were some of the common
06:19 - arguments now let me explain why I think
06:22 - the direction that nextjs is taking is
06:25 - in fact a great Direction so look before
06:28 - server actions if we wanted to implement
06:30 - this functionality first we would have
06:32 - to manually create an API endpoint for
06:35 - adding a bookmark then we would have to
06:37 - handle the click event of this button in
06:40 - our click Handler we would have to use
06:42 - the fetch API or a library like AXS to
06:45 - make an HTTP call to the back end most
06:48 - of the time this process is Trivial and
06:50 - very repetitive now let me take you a
06:52 - few steps back you know that when we
06:54 - call a function the control of execution
06:57 - moves from one place to another but to
07:00 - make this happen some magic has to
07:02 - happen under the hood that is invisible
07:04 - to us we don't have to worry about it
07:05 - these days right I learned this almost
07:07 - 20 years ago when I was coding in
07:09 - assembly now in most applications at
07:12 - some point the front end needs to talk
07:14 - to the back end so far we have been in
07:16 - charge of making that communication
07:18 - happen but nextjs is trying to free us
07:21 - from having to do so just like we don't
07:23 - have to think about how the control of
07:25 - execution moves from one place to
07:27 - another when we call a function
07:29 - so server actions allow the client code
07:32 - like this button to communicate with the
07:34 - back end without worrying about the
07:36 - transport without worrying about the
07:38 - HTTP protocol without worrying about
07:41 - creating API and points using the right
07:43 - HTTP verb like put post delete and
07:46 - without worrying about including the
07:48 - right data in the request server actions
07:51 - are going to take care of all that
07:52 - complexity so we can focus on solving
07:55 - real business problems so that was my
07:58 - take on this code if you enjoyed this
08:00 - video please like and share it with
08:02 - others and also make sure to subscribe
08:04 - to my channel for more videos like
08:10 - this

Cleaned transcript:

this picture has been floating on the internet the past few days and a lot of people hate the code that is presented here so in this video I'm going to talk about some of the common arguments I will explain my point of view and at the end I will explain why I think the direction that react and Nyx are taking is in fact a great Direction my name is Mos and I've helped millions of people Advance their software engineering skills through this Channel and my online school code with.com so back to this picture to give you some context this picture is part of the nexj conference that was held last week now if you're are not familiar with nextjs it's basically a framework for building full stack applications with react on the front end and node on the back end so if you're a react developer you know that you can build the front end using react but to build the back end you have to use a separate backend framework like expressjs d Jango Ruby on Rails asp.net core and so on now with nextjs we can build both the front end and back end within the same project using the same language and the same set of tools now if you want to learn nextjs I have a couple of tutorials here on this channel and comprehensive courses on my website Cod with.com so what are the arguments against this code so here's the code that you saw in the slide here we have a react component called bookmark that renders a button with an icon and here we have a relatively new feature called a server action and that is this function you see here it's called a server action meaning it's an action or a function that gets executed on the server so when this button is clicked this piece of code is executed and as a result a bookmark is inserted into the database now a lot of people are arguing that this is like PHP but it took us 20 years to get back to where PHP was 20 years ago but this is not a valid argument argument because PHP runs entirely on the backend but here we have full power of front end and backend development now the second argument is that this code is vulnerable to SQL injection attacks a SQL injection attack is a kind of attack where a hacker can send SQL instructions to our application and do crazy things like inserting data deleting data and so on now this happens when we build SQL instructions dynamically using string concatenation so in this example we're building a SQL statement for inserting a bookmark into the bookmark table now because we're building this statement using string concatenation a hacker can send this input to our application and change our statement to something like this so in addition to inserting a bookmark they're also deleting all the users from the user table now the way we can prevent this is by using parameterized SQL statements so we Define our SQL statement with parameters which are placeholders for values what the user sends will be inserted into these placeholders so with this technique a hacker cannot change a SQL statement because it's fixed okay now the example that they were presenting at the next year's conference is using versel postgress package this page clearly explains that our SQL queries are constructed with the SQL template literal tag this function translates your query into a native postgress parameterized query to help prevent SQL injections so the argument that this code is vulnerable to SQL injection attacks is invalid now the third argument is that this code violates the separation of concerns principle but what is separation of concerns and why does it matter well separation of concerns is a fundamental design principle in software engineering it's suggests that by separating concerns we can make our code better organized more maintainable and potentially more reusable in this case we have some presentation code like the button and the icon mixed up with database related code so yes this code does violate the separation of concerns principle so to improve this the first thing we can do is take out this function outside of this component so I'm going to cut this code now let's define a function called add bookmark here we should give this a parameter called slug now back to our component here we pass an arrow function and call add bookmark so look the end result is cleaner and more maintainable now we could take this further and move this function at bookmark outside of this module and put it into a separate module but in this case I prefer to keep it here because realistically this is part of the implementation of this component so we are not going to get any extra value in terms of maintainability by moving these two lines of code into a separate file or module however if this component was more complex if it had hundreds of lines of code and if our database related code was more complicated yes then it would make sense to take this function and put it into a separate module the separation of concerns principle doesn't care how we should separate concerns it only suggests that by separating concerns we can make our code better organized more maintained and more reusable how we separate concerns is up to us and we have to decide on a caseby casee basis sometimes different functions within the same module sometimes different modules sometimes different folders sometimes different projects what I want you to take away from this video is that software engineering is not black and white you cannot take a principle and blindly apply it to solve every problem every problem is different so in this example I prefer to keep this function with in this module now the other argument is that we should not write SQL code in our components to start with and that is a fair argument the good thing is that server actions are not tied to this SQL function so here we can use an object relational mapper like Prisma and that's what I personally prefer as well so these were some of the common arguments now let me explain why I think the direction that nextjs is taking is in fact a great Direction so look before server actions if we wanted to implement this functionality first we would have to manually create an API endpoint for adding a bookmark then we would have to handle the click event of this button in our click Handler we would have to use the fetch API or a library like AXS to make an HTTP call to the back end most of the time this process is Trivial and very repetitive now let me take you a few steps back you know that when we call a function the control of execution moves from one place to another but to make this happen some magic has to happen under the hood that is invisible to us we don't have to worry about it these days right I learned this almost 20 years ago when I was coding in assembly now in most applications at some point the front end needs to talk to the back end so far we have been in charge of making that communication happen but nextjs is trying to free us from having to do so just like we don't have to think about how the control of execution moves from one place to another when we call a function so server actions allow the client code like this button to communicate with the back end without worrying about the transport without worrying about the HTTP protocol without worrying about creating API and points using the right HTTP verb like put post delete and without worrying about including the right data in the request server actions are going to take care of all that complexity so we can focus on solving real business problems so that was my take on this code if you enjoyed this video please like and share it with others and also make sure to subscribe to my channel for more videos like this
