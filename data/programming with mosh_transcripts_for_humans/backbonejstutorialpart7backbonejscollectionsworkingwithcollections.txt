With timestamps:

00:06 - in the last lecture you'll learn some
00:07 - basic underscore methods that are
00:09 - supported by backbone collections
00:11 - in this lecture we're going to extend
00:13 - this topic with more
00:15 - here you see an example of using the add
00:17 - method that you learned in the last
00:18 - lecture
00:20 - the add method by default adds the given
00:22 - model at the end of the collection
00:25 - but you can use its second argument to
00:28 - specify the index at which
00:30 - you would like to insert the model
00:38 - this technique is useful if you want to
00:40 - insert a model at the beginning of a
00:42 - collection
00:45 - note that we are not simply passing an
00:47 - index we're passing a json object
00:49 - with a property called at which
00:51 - specifies the index
00:54 - apart from the add method underscore
00:56 - also provides another method to add
00:58 - models to a collection
01:13 - if you're wondering about the difference
01:15 - between the add and push methods
01:18 - basically the push method comes from
01:20 - working with stacks
01:21 - if you're familiar with stacks you know
01:23 - that stacks support two basic operations
01:27 - push and pop push always inserts an
01:30 - object on top of a stack
01:32 - and pop takes out the object on the top
01:36 - so the push and add methods behave
01:38 - exactly the same by default but with the
01:40 - add method you can specify an
01:42 - index at which you would like to insert
01:44 - an object
01:48 - okay now let's see how we can search for
01:50 - models in a collection
01:53 - underscore provides two useful and
01:55 - simple methods for
01:56 - searching collections where and find
02:06 - where
02:30 - both the wear and find where methods
02:32 - take a hash of attributes you would like
02:34 - to filter the collection by
02:37 - they check these attributes against the
02:39 - attributes of the models inside the
02:41 - collection for equality
02:43 - note that in case of strings the
02:45 - comparison is case sensitive
02:48 - the difference between the where and
02:50 - findware methods is
02:52 - that the where method returns an array
02:55 - whereas the findware
02:56 - returns only the first instance
02:59 - i know the naming is a bit confusing and
03:02 - i wish underscore developers called this
03:04 - method first
03:05 - instead of findware
03:08 - okay now let's see the result in chrome
03:12 - there you go note that the result is an
03:14 - array let's expand it
03:26 - we can also add multiple filters in the
03:28 - where method
03:30 - for example we can search for any songs
03:33 - with the genre of jazz
03:34 - whose title is song 2.
04:03 - what if we want to find the songs with
04:05 - the number of downloads greater than 100
04:08 - we can't use the where method for that
04:10 - the where method
04:11 - simply does an equality check between
04:14 - the attributes you pass
04:15 - and the attributes of the models inside
04:17 - the collection
04:19 - so to filter the collection by some
04:20 - custom logic we should use the filter
04:26 - method
04:48 - the argument to the filter method is
04:50 - interesting
04:51 - this is what we call a predicate when we
04:54 - call the filter method
04:56 - underscore iterates the collection and
04:58 - for every model in the collection
05:00 - it executes this predicate function
05:03 - the job of this function is to check if
05:05 - the given model has the criteria we're
05:07 - looking for
05:09 - in this case we're checking if the
05:10 - number of downloads is greater than a
05:12 - hundred
05:14 - the return value of this function should
05:15 - be a true or false
05:17 - if it's true underscore adds this model
05:19 - in the list of filtered models
05:30 - one more useful underscore method that
05:32 - is available in collections
05:33 - is the each method which is used for
05:35 - iterating collections
05:37 - let's iterate our songs collection and
05:40 - log every model to the console
05:44 - similar to the filter method the each
05:46 - method expects a callback function
05:48 - that will be executed at each iteration
05:52 - this function receives the model in the
05:54 - current iteration
06:03 - so the add method allows us to specify
06:06 - the index at which we would like to
06:08 - insert
06:09 - a model inside a collection we can also
06:11 - use the push method
06:13 - to insert a model at the end of a
06:14 - collection
06:16 - the pop method removes and returns the
06:18 - model at the end of the collection
06:21 - we can search collections by attributes
06:23 - using the where
06:24 - or find where methods both these methods
06:27 - check the attributes we pass
06:28 - against the attributes of the models
06:30 - inside the collection for equality
06:33 - for more complicated filtering we can
06:35 - use the filter method
06:37 - and finally we can use the each method
06:38 - to iterate collections
06:43 - underscore has a few more methods to
06:45 - work with collections and arrays
06:47 - and covering them all is beyond the
06:48 - scope of this course you can always
06:50 - check the underscore documentation
06:52 - at underscorejs.org in the next lecture
06:56 - we'll cover how to get collections from
06:58 - a restful api
06:59 - on the server

Cleaned transcript:

in the last lecture you'll learn some basic underscore methods that are supported by backbone collections in this lecture we're going to extend this topic with more here you see an example of using the add method that you learned in the last lecture the add method by default adds the given model at the end of the collection but you can use its second argument to specify the index at which you would like to insert the model this technique is useful if you want to insert a model at the beginning of a collection note that we are not simply passing an index we're passing a json object with a property called at which specifies the index apart from the add method underscore also provides another method to add models to a collection if you're wondering about the difference between the add and push methods basically the push method comes from working with stacks if you're familiar with stacks you know that stacks support two basic operations push and pop push always inserts an object on top of a stack and pop takes out the object on the top so the push and add methods behave exactly the same by default but with the add method you can specify an index at which you would like to insert an object okay now let's see how we can search for models in a collection underscore provides two useful and simple methods for searching collections where and find where both the wear and find where methods take a hash of attributes you would like to filter the collection by they check these attributes against the attributes of the models inside the collection for equality note that in case of strings the comparison is case sensitive the difference between the where and findware methods is that the where method returns an array whereas the findware returns only the first instance i know the naming is a bit confusing and i wish underscore developers called this method first instead of findware okay now let's see the result in chrome there you go note that the result is an array let's expand it we can also add multiple filters in the where method for example we can search for any songs with the genre of jazz whose title is song 2. what if we want to find the songs with the number of downloads greater than 100 we can't use the where method for that the where method simply does an equality check between the attributes you pass and the attributes of the models inside the collection so to filter the collection by some custom logic we should use the filter method the argument to the filter method is interesting this is what we call a predicate when we call the filter method underscore iterates the collection and for every model in the collection it executes this predicate function the job of this function is to check if the given model has the criteria we're looking for in this case we're checking if the number of downloads is greater than a hundred the return value of this function should be a true or false if it's true underscore adds this model in the list of filtered models one more useful underscore method that is available in collections is the each method which is used for iterating collections let's iterate our songs collection and log every model to the console similar to the filter method the each method expects a callback function that will be executed at each iteration this function receives the model in the current iteration so the add method allows us to specify the index at which we would like to insert a model inside a collection we can also use the push method to insert a model at the end of a collection the pop method removes and returns the model at the end of the collection we can search collections by attributes using the where or find where methods both these methods check the attributes we pass against the attributes of the models inside the collection for equality for more complicated filtering we can use the filter method and finally we can use the each method to iterate collections underscore has a few more methods to work with collections and arrays and covering them all is beyond the scope of this course you can always check the underscore documentation at underscorejs.org in the next lecture we'll cover how to get collections from a restful api on the server
