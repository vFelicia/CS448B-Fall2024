With timestamps:

00:01 - all right now let's see how we can use
00:03 - custom types in typescript so I'm gonna
00:06 - start by declaring a function like draw
00:08 - point so this function takes an x and a
00:13 - y and simply draws it on the screen now
00:17 - we don't want to worry about the actual
00:18 - drawing algorithm we just want to focus
00:20 - on the signature of this function now
00:23 - this function is not too bad here we
00:25 - have only two parameters but sometimes
00:27 - when working with more complex concepts
00:29 - we may end up with a function that has
00:32 - so many parameters like this this is
00:36 - really really bad and it's something you
00:37 - should avoid at all times in those
00:40 - situations it's very likely that a group
00:43 - of these parameters maybe all of them
00:45 - belong to a single concept as an example
00:48 - think of a car a car has so many
00:50 - different properties we don't want to
00:52 - pass all those properties to a function
00:54 - like drive car instead you want to
00:57 - encapsulate them inside an object and
01:00 - only pass that one object here so in
01:03 - this example instead of passing x and y
01:07 - here it's better to pass a point object
01:09 - and then we can call this function like
01:12 - this draw a point we give it an object
01:15 - with two properties x and y so now our
01:20 - function has a cleaner syntax however
01:23 - there is a problem with this
01:25 - implementation instead of a point object
01:27 - I can pass a person object that has a
01:30 - name property I know where here we are
01:33 - getting a compile time error but we know
01:36 - that this code is gonna break at runtime
01:37 - because the algorithm in our drop point
01:40 - function is expecting x and y properties
01:44 - so what's the solution well let me
01:46 - revert this back okay we've got x and y
01:50 - so there are two solutions to solve this
01:52 - problem one way is to use what we call
01:55 - inline annotation so just like we can
01:58 - annotate this parameter with the type
02:00 - like number we can annotate it with a
02:03 - custom type or a custom object so here
02:07 - we add curly braces to indicate an
02:10 - object this object is going to have a
02:12 - property called X which is a number
02:15 - and also another property called wine
02:17 - which is again a number so this is what
02:20 - we call inline annotation it works fine
02:23 - for simple cases but the problem with
02:26 - this as you can see is that this is a
02:28 - little bit verbose also chances are
02:32 - somewhere else we might have another
02:33 - function that expects a point object we
02:36 - don't want to repeat this object literal
02:38 - in multiple places so in those cases a
02:41 - better approach is to use an interface
02:43 - if you worked with object-oriented
02:45 - programming languages like C sharp and
02:47 - Java you know the concept of interfaces
02:49 - we have the same concept in typescript
02:51 - if you have never worked with interfaces
02:54 - let me show you how they work so on the
02:56 - top I define an interface and I'm gonna
03:01 - call this point curly braces then I add
03:06 - X it's a number and Y is a number so
03:12 - with this interface I'm defining the
03:14 - shape of an object and then I can
03:17 - simplify this declaration and set the
03:21 - type of this parameter to point this is
03:24 - much cleaner and we can also reuse this
03:27 - in multiple places just one thing note
03:31 - the naming convention I have used here
03:32 - so because I'm introducing a custom type
03:36 - I've used Pascal naming convention so
03:39 - the first letter of every word in the
03:42 - name of the interface should be
03:43 - capitalized so here we have our per case
03:45 - P not a lowercase P okay so when using
03:49 - interfaces always use Pascal naming
03:52 - convention hi thank you for watching my
03:57 - angular tutorial if you enjoyed this
03:59 - video please like it and share it with
04:01 - others also you can subscribe to my
04:03 - channel for free new videos every week
04:06 - this video is part of my complete
04:08 - angular course with almost 30 hours of
04:11 - high quality content where you learn
04:14 - everything about angular from the basic
04:16 - to the advanced topics all in one course
04:18 - so you don't have to jump from one
04:20 - tutorial to another in case you're
04:22 - interested we can get this course but
04:24 - discount using the link in the video
04:26 - description and if not that's perfectly
04:28 - fine continue watching as the next
04:30 - section is coming up

Cleaned transcript:

all right now let's see how we can use custom types in typescript so I'm gonna start by declaring a function like draw point so this function takes an x and a y and simply draws it on the screen now we don't want to worry about the actual drawing algorithm we just want to focus on the signature of this function now this function is not too bad here we have only two parameters but sometimes when working with more complex concepts we may end up with a function that has so many parameters like this this is really really bad and it's something you should avoid at all times in those situations it's very likely that a group of these parameters maybe all of them belong to a single concept as an example think of a car a car has so many different properties we don't want to pass all those properties to a function like drive car instead you want to encapsulate them inside an object and only pass that one object here so in this example instead of passing x and y here it's better to pass a point object and then we can call this function like this draw a point we give it an object with two properties x and y so now our function has a cleaner syntax however there is a problem with this implementation instead of a point object I can pass a person object that has a name property I know where here we are getting a compile time error but we know that this code is gonna break at runtime because the algorithm in our drop point function is expecting x and y properties so what's the solution well let me revert this back okay we've got x and y so there are two solutions to solve this problem one way is to use what we call inline annotation so just like we can annotate this parameter with the type like number we can annotate it with a custom type or a custom object so here we add curly braces to indicate an object this object is going to have a property called X which is a number and also another property called wine which is again a number so this is what we call inline annotation it works fine for simple cases but the problem with this as you can see is that this is a little bit verbose also chances are somewhere else we might have another function that expects a point object we don't want to repeat this object literal in multiple places so in those cases a better approach is to use an interface if you worked with objectoriented programming languages like C sharp and Java you know the concept of interfaces we have the same concept in typescript if you have never worked with interfaces let me show you how they work so on the top I define an interface and I'm gonna call this point curly braces then I add X it's a number and Y is a number so with this interface I'm defining the shape of an object and then I can simplify this declaration and set the type of this parameter to point this is much cleaner and we can also reuse this in multiple places just one thing note the naming convention I have used here so because I'm introducing a custom type I've used Pascal naming convention so the first letter of every word in the name of the interface should be capitalized so here we have our per case P not a lowercase P okay so when using interfaces always use Pascal naming convention hi thank you for watching my angular tutorial if you enjoyed this video please like it and share it with others also you can subscribe to my channel for free new videos every week this video is part of my complete angular course with almost 30 hours of high quality content where you learn everything about angular from the basic to the advanced topics all in one course so you don't have to jump from one tutorial to another in case you're interested we can get this course but discount using the link in the video description and if not that's perfectly fine continue watching as the next section is coming up
