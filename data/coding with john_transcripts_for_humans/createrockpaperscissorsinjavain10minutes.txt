With timestamps:

00:01 - hey everybody in this video we are going
00:03 - to create a rock paper scissors game in
00:04 - java it'll be fast easy to make and
00:07 - great for beginners to practice your
00:08 - fundamentals before we get started as
00:10 - always the full source is available in
00:12 - the link down below in the description
00:13 - so go and get it
00:14 - be sure to hit that subscribe button to
00:15 - get more java lessons and tutorials like
00:17 - this
00:18 - every week there's just a few pieces of
00:20 - this program we'll need in order to make
00:21 - it work properly so we're going to need
00:22 - to
00:23 - accept a move from the player rock paper
00:26 - or scissors from the keyboard
00:27 - and we're also going to need the
00:28 - computer to select a move at random rock
00:31 - paper or scissors to play against
00:33 - the player and then once we have those
00:35 - moves we're going to compare them
00:36 - and print out who wins okay so let's
00:39 - just get started with the
00:40 - randomized computer input first so i
00:42 - think what we're going to do for this
00:44 - is create a string array called rps
00:47 - for rock paper or scissors and what
00:49 - we're going to put in that array are
00:50 - just three strings rps
00:52 - for rock paper and scissors and then the
00:54 - computer's move is just going to be a
00:56 - randomized element of that list
00:58 - it's going to be the rock paper scissors
00:59 - at random so we'll just create our list
01:01 - here
01:02 - of r p
01:06 - and s and there we go
01:10 - okay all right now to get the computer
01:12 - move we'll say string
01:14 - computer move and we're going to set it
01:16 - equal to
01:17 - an element from this array um but what
01:20 - the index we want to get is random we
01:22 - want to get a random index between
01:24 - 0 and 2 for the zero first or
01:27 - second element of this list rps and so
01:30 - to do that
01:30 - we'll say new random because we want a
01:32 - random generator here
01:35 - and we're going to need to import that
01:36 - java util random
01:38 - and then so then we'll do next int where
01:41 - what will pass
01:42 - in is going to be the size of that array
01:45 - rps
01:46 - dot length so rps.length is the length
01:50 - of this array which is
01:51 - 3 and when we pass a 3 into this random
01:54 - next int
01:55 - method it's going to give us a random
01:57 - number between zero
01:58 - and one less than the number we pass in
02:00 - and since we're passing in
02:02 - three the length of this array is going
02:04 - to give us a zero one or a two
02:06 - at random so that's exactly what we want
02:08 - we have a random computer move all right
02:10 - so now we have to get the move
02:11 - from the player from the user and to do
02:13 - that we're going to use what you might
02:14 - expect
02:15 - scanner so we've got a scanner scanner
02:19 - equals new scanner system dot
02:22 - in for keyboard input
02:25 - again we'll do our importing javautil
02:28 - scanner and now we're going to print
02:30 - sis out please enter your move
02:36 - r p or s
02:39 - for rock paper or scissors and then to
02:41 - actually get the player's move we're
02:43 - going to write string
02:44 - player move equals scanner dot next
02:48 - line and that is going to get the next
02:50 - line of input from the user via the
02:52 - keyboard but now what if the player
02:54 - types in
02:54 - garbage like something anything other
02:56 - than rp or s well we'd like to validate
02:58 - for that but we want to do it quickly
02:59 - here we're pressed for time so we're
03:00 - just going to write a little while loop
03:02 - that once we get correct input we're
03:03 - going to jump out of
03:04 - so what we can do is just write a while
03:07 - true loop
03:08 - so that'll loop forever until we write a
03:10 - break statement that kicks us out of it
03:12 - right so what we're going to do is we've
03:15 - got this player move from the player
03:17 - and actually let's go ahead and move
03:18 - this declaration outside of this while
03:20 - loop because we're going to
03:21 - need that player move outside of the
03:24 - while loop when we're done with it
03:25 - and so basically all we have to do here
03:26 - is check to see if the player entered rp
03:28 - or s and if they did we can break out of
03:30 - the loop
03:31 - otherwise we're going to write a
03:32 - complaint message to the user and make
03:33 - them put in something else
03:34 - so just if player move dot equals
03:39 - r or and we're just going to copy and
03:42 - paste this
03:43 - with the other two or player move equals
03:46 - p
03:47 - or player move equals s get rid of this
03:50 - last or here
03:51 - we don't need it then break
03:54 - and then after this if if we're still in
03:56 - this loop we know that the player didn't
03:58 - enter
03:58 - valid input so we need to complain to
03:59 - them about it so just sis out
04:03 - player move plus
04:06 - is not a valid move
04:10 - so it'll print back to them what they
04:12 - typed in and say hey that's not a valid
04:13 - move
04:13 - it'll jump back to the top of the wild
04:15 - loop and force them to try again
04:16 - okay so now we have a valid move from
04:18 - the player we should have a valid move
04:20 - from the computer
04:21 - and now we just need to compare them so
04:23 - first i think what we should do is print
04:24 - out what the computer chose
04:26 - and then print out the results of the
04:27 - game so what the computer chose sys out
04:30 - uh we can just say computer played
04:33 - space and then plus to concatenate the
04:36 - computer
04:37 - move so now we can see what the computer
04:39 - played so first what i think we can
04:41 - check for is a tie i think that'll be
04:42 - the simplest check to make so that's
04:44 - just
04:44 - if player move dot equals
04:48 - computer move so if those are the same
04:50 - we'll just print out uh
04:52 - the game was a tie the game was a tie
05:01 - all right so else else if so now we're
05:04 - going to go through all the different
05:06 - conditions that a player could have
05:07 - chosen
05:08 - it compared to what the computer chose
05:10 - so we're going to go through rock
05:11 - against the things the computer could
05:12 - have chosen then paper then scissors so
05:14 - we've got else if player move
05:16 - dot equals r
05:19 - so the player chose rock now we already
05:22 - know the computer didn't choose rock
05:23 - because the game didn't end in a tie
05:24 - we've already checked for that right
05:26 - above so we can just say
05:28 - if computer move dot equals
05:32 - p so the player chose rock and the
05:34 - computer chose paper then the computer
05:36 - wins so in other words you lose
05:38 - so we'll just do a sis out you
05:41 - lose and then otherwise
05:45 - else if the computer move uh was
05:48 - an s scissors then we can say you
05:52 - win you chose rock and the computer
05:54 - chose scissors all right so let's
05:55 - copy this whole else if for the
05:58 - paper so the player move was paper
06:02 - so we know the computer didn't choose
06:03 - paper because we already checked for a
06:04 - tie
06:05 - so if the computer shows rock
06:08 - then you win because you chose paper the
06:10 - computer shows rock
06:11 - and then if the computer chose scissors
06:15 - you lose because scissors beats paper
06:17 - and then let's copy this
06:18 - one more time for if you chose scissors
06:22 - then if the computer chose paper then
06:25 - that means
06:26 - you win scissors beats paper otherwise
06:28 - if the computer chose
06:30 - rock then you write you lose because
06:32 - rock beats scissors
06:34 - okay i think that's it let's run our
06:35 - program and do a quick test okay please
06:37 - enter your move rock paper or scissors
06:39 - i'll choose paper
06:40 - computer played rock and you win yes
06:42 - paper beats rock so awesome that worked
06:44 - let's try it a few more times
06:45 - country move rock computer plays paper
06:48 - and i lose
06:49 - but it is working okay now let's test if
06:51 - i put in some garbage input like
06:53 - uh blah it's not a valid move please
06:56 - enter your move
06:56 - garbage okay that is working the
06:58 - validation is working now i can put in
07:00 - scissors
07:01 - computer played scissors game was a tie
07:03 - all right so i think our logic is
07:04 - working and that's the main part of the
07:06 - game the hard part
07:07 - is is good to go but now i think i just
07:09 - want to i hate having to restart the
07:11 - game every time
07:12 - to play again and i would really like to
07:14 - just have the option to play again if i
07:15 - want to
07:16 - so what we can do is just loop through
07:17 - this entire program in a while loop and
07:20 - break out when the user
07:21 - doesn't want to play anymore all right
07:23 - so to do that way up at the top we're
07:24 - going to put a while loop around
07:26 - just about our whole program so while
07:30 - true we're going to do this whole thing
07:33 - so i highlight the whole thing
07:34 - move it over and end our while loop here
07:37 - at the very end
07:38 - but one part that we actually want to
07:39 - move out of this loop is the scanner
07:41 - declaration we don't want
07:42 - to create a new scanner each time java
07:45 - gets really weird if you create multiple
07:47 - system.n scanners so we'll remove that
07:49 - out of the loop we can reuse it every
07:51 - iteration of the loop with no problems
07:53 - so then way at the bottom of our program
07:55 - just before the end of our while loop
07:58 - we can print something out to the user
08:00 - that just says
08:02 - play again
08:05 - and then we just say you know y or
08:08 - n or yes or no and then we can create a
08:10 - string for play
08:12 - again and set it equal to what the user
08:15 - types in next
08:16 - so that's going to be scanner.nextline
08:20 - all right so we can do something pretty
08:22 - simple here we can just say
08:23 - if not play again dot
08:27 - equals y right
08:30 - so basically if they didn't say yes then
08:32 - we'll just assume no they don't want to
08:34 - play again
08:34 - so if it doesn't equal y just say break
08:37 - and that will break
08:38 - out of this uh overall while loop and
08:41 - end the program all right let's go ahead
08:43 - and run this again and make sure our
08:44 - outer loop works
08:45 - enter your move let's put in some
08:47 - garbage make sure that still works okay
08:49 - so i can choose
08:50 - rock computer played rocket was a tie
08:52 - play again
08:53 - yes now please enter your moves scissors
08:56 - computer played rock i lose but it is
08:59 - working our loop is working
09:00 - let's play it one more time yes enter
09:03 - your move
09:03 - um paper computer played rock i win
09:07 - play again no and the game ends
09:11 - awesome i cool i think that did it so
09:12 - it's a pretty neat little program right
09:14 - i know it seems simple there's a lot of
09:15 - little pieces of it that are you know
09:17 - part of your java fundamentals like
09:18 - while loops getting a random number
09:21 - some arrays some string comparisons
09:24 - a set of if and else if statements to do
09:26 - some logic
09:27 - and you got keyboard input from the user
09:29 - so there's a lot of little things that
09:30 - you did here so even though it's quite a
09:32 - simple little program
09:33 - it's fun to play and you've used a lot
09:36 - of your java fundamentals getting it
09:37 - going now if you've watched any of my
09:38 - videos you know there's still a step
09:40 - left this scanner we've got a resource
09:43 - leak and scanner is not
09:45 - closed now we got to and like on all of
09:47 - our programs you've got to be a good boy
09:49 - scout
09:49 - at the end of our program close your
09:52 - scanner
09:53 - just makes you feel like a fine
09:54 - upstanding citizen now if you enjoyed
09:56 - making this game or perhaps you want a
09:57 - little bit more of a challenge
09:59 - go and check out either my hangman video
10:01 - or my tic-tac-toe game video
10:03 - both of those are a decent amount more
10:04 - complicated but a whole lot of fun to
10:06 - make and i think you'll really enjoy
10:07 - them
10:08 - now if you enjoyed this video or learned
10:09 - something please let me know with a like
10:11 - and if you have questions or run in any
10:13 - sort of problems please let me know in
10:14 - the comments i'd be more than happy to
10:15 - help and be sure to click that subscribe
10:17 - button to get more
10:18 - java tutorials and lessons like this in
10:19 - the future and see you in the next video

Cleaned transcript:

hey everybody in this video we are going to create a rock paper scissors game in java it'll be fast easy to make and great for beginners to practice your fundamentals before we get started as always the full source is available in the link down below in the description so go and get it be sure to hit that subscribe button to get more java lessons and tutorials like this every week there's just a few pieces of this program we'll need in order to make it work properly so we're going to need to accept a move from the player rock paper or scissors from the keyboard and we're also going to need the computer to select a move at random rock paper or scissors to play against the player and then once we have those moves we're going to compare them and print out who wins okay so let's just get started with the randomized computer input first so i think what we're going to do for this is create a string array called rps for rock paper or scissors and what we're going to put in that array are just three strings rps for rock paper and scissors and then the computer's move is just going to be a randomized element of that list it's going to be the rock paper scissors at random so we'll just create our list here of r p and s and there we go okay all right now to get the computer move we'll say string computer move and we're going to set it equal to an element from this array um but what the index we want to get is random we want to get a random index between 0 and 2 for the zero first or second element of this list rps and so to do that we'll say new random because we want a random generator here and we're going to need to import that java util random and then so then we'll do next int where what will pass in is going to be the size of that array rps dot length so rps.length is the length of this array which is 3 and when we pass a 3 into this random next int method it's going to give us a random number between zero and one less than the number we pass in and since we're passing in three the length of this array is going to give us a zero one or a two at random so that's exactly what we want we have a random computer move all right so now we have to get the move from the player from the user and to do that we're going to use what you might expect scanner so we've got a scanner scanner equals new scanner system dot in for keyboard input again we'll do our importing javautil scanner and now we're going to print sis out please enter your move r p or s for rock paper or scissors and then to actually get the player's move we're going to write string player move equals scanner dot next line and that is going to get the next line of input from the user via the keyboard but now what if the player types in garbage like something anything other than rp or s well we'd like to validate for that but we want to do it quickly here we're pressed for time so we're just going to write a little while loop that once we get correct input we're going to jump out of so what we can do is just write a while true loop so that'll loop forever until we write a break statement that kicks us out of it right so what we're going to do is we've got this player move from the player and actually let's go ahead and move this declaration outside of this while loop because we're going to need that player move outside of the while loop when we're done with it and so basically all we have to do here is check to see if the player entered rp or s and if they did we can break out of the loop otherwise we're going to write a complaint message to the user and make them put in something else so just if player move dot equals r or and we're just going to copy and paste this with the other two or player move equals p or player move equals s get rid of this last or here we don't need it then break and then after this if if we're still in this loop we know that the player didn't enter valid input so we need to complain to them about it so just sis out player move plus is not a valid move so it'll print back to them what they typed in and say hey that's not a valid move it'll jump back to the top of the wild loop and force them to try again okay so now we have a valid move from the player we should have a valid move from the computer and now we just need to compare them so first i think what we should do is print out what the computer chose and then print out the results of the game so what the computer chose sys out uh we can just say computer played space and then plus to concatenate the computer move so now we can see what the computer played so first what i think we can check for is a tie i think that'll be the simplest check to make so that's just if player move dot equals computer move so if those are the same we'll just print out uh the game was a tie the game was a tie all right so else else if so now we're going to go through all the different conditions that a player could have chosen it compared to what the computer chose so we're going to go through rock against the things the computer could have chosen then paper then scissors so we've got else if player move dot equals r so the player chose rock now we already know the computer didn't choose rock because the game didn't end in a tie we've already checked for that right above so we can just say if computer move dot equals p so the player chose rock and the computer chose paper then the computer wins so in other words you lose so we'll just do a sis out you lose and then otherwise else if the computer move uh was an s scissors then we can say you win you chose rock and the computer chose scissors all right so let's copy this whole else if for the paper so the player move was paper so we know the computer didn't choose paper because we already checked for a tie so if the computer shows rock then you win because you chose paper the computer shows rock and then if the computer chose scissors you lose because scissors beats paper and then let's copy this one more time for if you chose scissors then if the computer chose paper then that means you win scissors beats paper otherwise if the computer chose rock then you write you lose because rock beats scissors okay i think that's it let's run our program and do a quick test okay please enter your move rock paper or scissors i'll choose paper computer played rock and you win yes paper beats rock so awesome that worked let's try it a few more times country move rock computer plays paper and i lose but it is working okay now let's test if i put in some garbage input like uh blah it's not a valid move please enter your move garbage okay that is working the validation is working now i can put in scissors computer played scissors game was a tie all right so i think our logic is working and that's the main part of the game the hard part is is good to go but now i think i just want to i hate having to restart the game every time to play again and i would really like to just have the option to play again if i want to so what we can do is just loop through this entire program in a while loop and break out when the user doesn't want to play anymore all right so to do that way up at the top we're going to put a while loop around just about our whole program so while true we're going to do this whole thing so i highlight the whole thing move it over and end our while loop here at the very end but one part that we actually want to move out of this loop is the scanner declaration we don't want to create a new scanner each time java gets really weird if you create multiple system.n scanners so we'll remove that out of the loop we can reuse it every iteration of the loop with no problems so then way at the bottom of our program just before the end of our while loop we can print something out to the user that just says play again and then we just say you know y or n or yes or no and then we can create a string for play again and set it equal to what the user types in next so that's going to be scanner.nextline all right so we can do something pretty simple here we can just say if not play again dot equals y right so basically if they didn't say yes then we'll just assume no they don't want to play again so if it doesn't equal y just say break and that will break out of this uh overall while loop and end the program all right let's go ahead and run this again and make sure our outer loop works enter your move let's put in some garbage make sure that still works okay so i can choose rock computer played rocket was a tie play again yes now please enter your moves scissors computer played rock i lose but it is working our loop is working let's play it one more time yes enter your move um paper computer played rock i win play again no and the game ends awesome i cool i think that did it so it's a pretty neat little program right i know it seems simple there's a lot of little pieces of it that are you know part of your java fundamentals like while loops getting a random number some arrays some string comparisons a set of if and else if statements to do some logic and you got keyboard input from the user so there's a lot of little things that you did here so even though it's quite a simple little program it's fun to play and you've used a lot of your java fundamentals getting it going now if you've watched any of my videos you know there's still a step left this scanner we've got a resource leak and scanner is not closed now we got to and like on all of our programs you've got to be a good boy scout at the end of our program close your scanner just makes you feel like a fine upstanding citizen now if you enjoyed making this game or perhaps you want a little bit more of a challenge go and check out either my hangman video or my tictactoe game video both of those are a decent amount more complicated but a whole lot of fun to make and i think you'll really enjoy them now if you enjoyed this video or learned something please let me know with a like and if you have questions or run in any sort of problems please let me know in the comments i'd be more than happy to help and be sure to click that subscribe button to get more java tutorials and lessons like this in the future and see you in the next video
