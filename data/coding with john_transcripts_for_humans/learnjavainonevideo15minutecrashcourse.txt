With timestamps:

00:00 - if you're struggling learning java i
00:01 - understand how you're feeling it can
00:02 - feel like everyone around you is some
00:04 - kind of programming genius who just gets
00:06 - everything with no problem at all and
00:07 - you feel like you must be the only one
00:09 - having trouble with it you're absolutely
00:10 - not alone and you're in the right place
00:12 - i remember in my first java class in
00:14 - college i really struggled to understand
00:16 - some of just the basic concepts and
00:18 - really just felt overwhelmed but now
00:20 - i've been programming in java for a
00:21 - living for the past 10 years and i want
00:23 - to make sure you don't have to struggle
00:24 - the same way i did my name's john and i
00:26 - love sharing what i've learned about
00:27 - java in a clear and understandable way
00:29 - so please consider subscribing if you'd
00:30 - like to see more helpful java videos in
00:32 - this video we'll go over everything you
00:34 - need to know to get started writing
00:35 - great java programs before you can code
00:37 - anything in java there's a couple of
00:38 - things you have to have installed if
00:39 - you've already done that awesome and if
00:41 - not it's super easy it just takes a few
00:42 - minutes i have a video here going
00:44 - through the whole process one of the
00:45 - things you'll want to install is called
00:46 - an ide and integrated development
00:48 - environment and that's what i have open
00:49 - here the name sounds really complicated
00:51 - but it's basically just a program that
00:52 - makes it easier to write code kind of
00:54 - like microsoft word makes it easier to
00:56 - write school papers here the ide that
00:57 - i'm using is called eclipse basically
00:59 - we're going to write our java programs
01:01 - here in eclipse and then it is going to
01:02 - take our programs and automatically
01:04 - translate them into a format the
01:05 - computer can understand something called
01:07 - byte code you know essentially the ones
01:08 - and zeros that make the computer happy
01:10 - and it's going to run it when you open
01:12 - eclipse to get started creating a java
01:13 - program just right click here in this
01:15 - area called uh the package explorer and
01:17 - go to new java project you can give it
01:19 - whatever name you want we'll just call
01:20 - it a project pineapple you can uncheck
01:23 - this module thing down here we don't
01:24 - need that and click finish you can see
01:26 - it created our project for us here
01:27 - project pineapple then you can expand
01:29 - this drop down and right click this src
01:31 - folder here which stands for source and
01:33 - go to new class a class is basically
01:36 - just a fancy name for a java file give
01:37 - that name to whatever you want like
01:39 - awesome java program and you want to
01:41 - check this box down here that says
01:42 - public static void main string args
01:45 - we'll talk a little more about what that
01:46 - means later then click finish and then
01:47 - eclipse will automatically generate this
01:49 - kind of framework for a working java
01:51 - program for you now all of these
01:52 - programming looking terms and keywords
01:54 - might feel really intimidating but
01:55 - really all this is saying is hey java
01:57 - i've got this new program called awesome
01:59 - java program and when i tell you to run
02:01 - here's all the stuff that i want you to
02:02 - do this whole section here is what we
02:03 - call the main method and all the
02:05 - commands we put in between these two
02:07 - curly brackets in the main method are
02:08 - what it's going to do when we tell it to
02:10 - run so that's where we're going to be
02:11 - writing most of our code this line here
02:12 - with the two slashes is just an
02:14 - automatically generated thing that we
02:15 - don't need so we can just get rid of it
02:16 - just about everything we'll do in java
02:18 - revolves around creating and using
02:20 - things called variables variables are
02:22 - just used to store data so here's an
02:23 - example and myint equals seven now
02:27 - variables have a name a type and a value
02:30 - for this variable int is the type it
02:32 - stands for integer int is basically just
02:34 - a number this my int is the name of the
02:36 - variable we can give it whatever name we
02:37 - want and this equals seven here is
02:39 - giving this my into the value of seven
02:41 - so this just says hey java i have a
02:43 - number here i want to call it myant and
02:45 - please give it the value of seven to
02:47 - start out with and then we have this
02:48 - semicolon in java most lines will end
02:50 - with a semicolon it's just telling java
02:52 - that's the end of the statement now
02:53 - anywhere after that line in our program
02:55 - we can get the value stored in that
02:57 - variable just by using its name for
02:59 - example if we want to just print it out
03:00 - the command to print something out in
03:02 - java is system.out.println
03:06 - and in parentheses we specify the name
03:08 - of that variable myant and we end with a
03:10 - semicolon and we can click save and then
03:12 - click run to run our program and we see
03:14 - our output of the program here in our
03:16 - console so it just prints out the value
03:18 - of this my int variable which is seven
03:20 - int isn't the only type of variable we
03:22 - can create for example if you want to
03:23 - create a decimal number you can use
03:25 - double let's say we want to make a shoe
03:26 - size double shoe size equals 9.5 if you
03:29 - want to store a character you can use
03:31 - the char type char my initial equals j
03:35 - that'll be in single quotes a lot of the
03:37 - magic encoding happens when we take
03:39 - these variables and have them interact
03:40 - with each other so we can take this
03:42 - mayan variable and multiply it by the
03:44 - shoe size if we want in java to multiply
03:46 - you just use star so my int times shoe
03:49 - size save and run it we see that we get
03:51 - the result 66.5 which is 7 times 9.5 and
03:54 - also instead of just printing out that
03:56 - result you can actually store the result
03:59 - of that calculation in another variable
04:01 - so we can say double result equals my
04:03 - int times shoe size all of these types
04:06 - so far and double and char those are
04:08 - called primitive types in java there are
04:10 - eight primitive types total in java and
04:12 - i have a video going over all of them
04:13 - and how to use them in detail here
04:15 - primitives are like the absolute basic
04:17 - types in java like the sticks and stones
04:19 - you'll know it's a primitive type in
04:20 - java if it starts with a lowercase
04:22 - letter every other type you use in java
04:24 - is built on top of these primitive types
04:26 - but there are tons of other types you
04:28 - can use and you can even create your own
04:29 - like we'll see later probably the
04:31 - non-primitive type that you're going to
04:32 - use most is called string string
04:35 - variables are used to hold text string
04:37 - my name equals john for strings you put
04:40 - them in double quotes instead of single
04:42 - quotes you can tell that string is not a
04:43 - primitive type because it starts with a
04:44 - capital s and also the primitive types
04:46 - have a different coloring in eclipse
04:48 - than other types do when you create a
04:49 - non-primitive variable like this there's
04:51 - also even more stuff you can do with it
04:53 - that can be different for each type to
04:54 - see what you can do with the variable if
04:56 - you're using a fancy ide like eclipse
04:58 - you can start out by just typing the
04:59 - variable name then type a period and
05:01 - you'll immediately see all the cool
05:03 - things you can do with this variable
05:04 - these are all called methods and when we
05:06 - use any of them it's called calling a
05:08 - method as you're scrolling through these
05:10 - you can click one and you'll get a
05:11 - description of what that method does for
05:13 - example this length method says it
05:15 - returns the length of this string and if
05:16 - we want to use it we just double click
05:18 - it or you can also just type it out if
05:19 - you want to so if we move this down here
05:21 - so we can print out the result of this
05:24 - method call it prints out four because
05:26 - john the value of the my name variable
05:28 - is four characters long but there are a
05:30 - ton of other methods available like for
05:31 - example there's one called a two
05:33 - uppercase and if we use that it gives
05:35 - you an all uppercase version of that
05:37 - string and if you already have the
05:38 - method out here in your code and you
05:40 - want to remind yourself what it does you
05:41 - can just hover over the method name and
05:43 - a little pop-up will appear with the
05:44 - description one thing you can't do is
05:46 - you can't call a method on a primitive
05:48 - variable like my interior if i try to do
05:50 - my int dot nothing pops up it just
05:52 - doesn't work speaking of methods you can
05:54 - also create your own to create a new
05:56 - method here in the same java file i'll
05:57 - type it out first and then we'll talk a
05:58 - bit about what it means private static
06:01 - void burp this whole line here is called
06:03 - the method declaration and this part
06:05 - right here before the parentheses is the
06:07 - name of the method here we called it
06:08 - burp and any code that we put between
06:10 - these two curly brackets is what it's
06:12 - going to do when this method is called
06:13 - let's just have it print out
06:15 - burp but if we go ahead and save and run
06:18 - our code now nothing happens nothing's
06:20 - printed out why is that that's because
06:22 - if you remember when we run our java
06:24 - program java just runs everything that
06:26 - we put inside our main method and right
06:28 - now there's nothing in here that calls
06:30 - this other method that we created so
06:31 - let's change that now if we want to call
06:33 - this method all we have to do is use its
06:35 - name burp and we also need an open and
06:38 - close parentheses whenever you see this
06:39 - open and close parentheses you'll know
06:41 - that it's a method being called now if
06:43 - we save and run our program successfully
06:45 - burps so now we can have our program
06:47 - burp whenever we want just by calling
06:49 - burp of course a method can be a whole
06:50 - lot more complicated than this and a big
06:52 - reason to make a method is because you
06:54 - might have a whole big complicated chunk
06:56 - of code that you don't want to repeat
06:58 - package it up in a method and you can
06:59 - just call it as many times you want from
07:01 - anywhere in your code just by using its
07:02 - name now a method can also take what is
07:05 - called parameters so for example if this
07:07 - method was called print name between
07:09 - these two parentheses is where you would
07:11 - put the parameters let's say it had a
07:13 - string parameter that was called name
07:15 - and then just printed out my name is
07:18 - plus name this plus is how you link two
07:21 - strings together in java that's called
07:23 - concatenating strings but now when you
07:25 - call this print name method you have to
07:27 - pass in a value for that name parameter
07:29 - and you pass in that value by putting it
07:31 - between these two parentheses uh john
07:33 - and we can run it and see that it prints
07:35 - out my name is john you can even take
07:37 - multiple parameters if you want just
07:38 - separate them by commas so i can also
07:40 - take in like int number and when you're
07:42 - calling it you just do the same thing
07:44 - you just separate the values that you're
07:45 - passing in with a comma if you want you
07:47 - can also have your method return a value
07:49 - right here in the method declaration
07:51 - where we have this void void means it's
07:53 - not returning any values but if you want
07:55 - it to return a value this is where we
07:56 - specify the type of the thing that it's
07:58 - going to return so if we want it to
08:00 - return a string we can just change this
08:01 - to a string but now we have to actually
08:03 - return a string somewhere in our method
08:04 - so what we can do instead of just
08:06 - printing out my name is blah we can just
08:08 - change this to return
08:10 - that value my name is blah the code that
08:13 - calls this can do whatever it wants with
08:15 - the string that's returned for example
08:16 - we could just print it out ourselves
08:17 - here or if we want since this returns a
08:20 - string we can actually save that
08:21 - resulting value in our own string
08:23 - variable so string name equals the
08:25 - result of this method call one of the
08:27 - most useful things you'll ever use in
08:28 - java is called conditional statements
08:30 - that's your basic if this then that
08:32 - conditional statements in java will look
08:34 - like this if whatever condition we put
08:36 - in here is true run this stuff otherwise
08:39 - if whatever condition we put in here is
08:41 - true run this stuff and if neither one
08:43 - of those are the case run this and you
08:45 - don't necessarily need all three pieces
08:47 - for this you might just have an if you
08:49 - might just have an if else you don't
08:50 - need all three so what kind of
08:51 - conditions can we have in here so we
08:53 - could say like if name equals john then
08:57 - print this guy is awesome else if the
09:00 - name equals larry this guy is okay i
09:03 - guess and if it's not john and not larry
09:06 - prince i don't know this guy at all this
09:08 - example uses strings as its conditions
09:10 - but if you want to use the like a number
09:12 - as the condition you can do things like
09:14 - if number
09:15 - double equals five in java you use
09:17 - double equal to check equality like this
09:19 - that's because the single equals is
09:20 - already being used for assigning values
09:22 - to variables so just remember to use
09:24 - double equals but with numbers you don't
09:25 - always just have to check for equals you
09:27 - can do other things like if the number
09:28 - is greater than 5 or less than 5 or if
09:31 - you want to say if the number is not
09:32 - equal to 5 you use exclamation point
09:35 - equals next if you want to be able to
09:37 - repeat a piece of code a whole bunch of
09:38 - times without actually copying and
09:40 - pasting the same code over and over and
09:42 - over again you can use what's called a
09:44 - loop one type of loop in java is a for
09:46 - loop and it looks like this and i equals
09:48 - 0 i less than 10 i plus plus what this
09:51 - will do is run everything inside these
09:53 - curly brackets 10 times how it does that
09:55 - is it declares this variable i and says
09:58 - hey keep looping while i is less than
10:01 - 10. and every time it goes through the
10:02 - loop increment i by one that's what this
10:05 - i plus plus does so we can have it print
10:07 - out these pretzels are making me thirsty
10:11 - if we run it it'll print out these
10:13 - pretzels are making me thirsty 10 times
10:15 - and we can have this for loop do this
10:17 - however many times we want so if we
10:18 - change this 10 to a thousand and run our
10:21 - program it'll print it out a thousand
10:23 - times one huge thing about java is that
10:25 - it's an object oriented programming
10:27 - language a big part of being object
10:28 - oriented is that you can take a whole
10:30 - bunch of code and put it in another java
10:32 - file called a class and you can use that
10:34 - code in some other java file like your
10:36 - main file so let's do that now we can go
10:38 - over and right click on source again and
10:40 - go to new class say we want to create a
10:43 - cat class so we'll call it cat and you
10:45 - can create a method in your class like
10:46 - this public static void ding dong which
10:50 - prints out ding dong this public keyword
10:52 - here makes it so this method can be
10:54 - called from any other java file if you
10:56 - remember in our other method we used
10:58 - private private makes it so this method
11:00 - can only be called from within this file
11:02 - that was fine because that's all we
11:03 - needed it for but if you make it public
11:05 - it can be used anywhere so now we can
11:07 - call this cat ding dong method from our
11:09 - main program like this we just say cat
11:11 - dot ding dong so you can absolutely use
11:14 - a separate class just like this a place
11:16 - to put other methods so they don't
11:18 - clutter up your main class but the main
11:20 - use of a separate class like this is
11:22 - actually as a blueprint to create what
11:24 - are called objects so here we have a cat
11:27 - class now this class itself isn't a cat
11:30 - object but we can use this class to
11:32 - create cat objects as many as we want
11:34 - and here's how so back in our main
11:35 - program we can just say cat i cat equals
11:39 - new cat this creates a brand new cat
11:42 - object and stores it in this variable my
11:44 - cat and we can create another one if we
11:45 - want so cat
11:46 - another cat equals new cat right now we
11:49 - haven't really put much of anything in
11:51 - this cat class so our individual cats
11:53 - that we've created from it can't really
11:54 - do a whole lot but we can change that so
11:56 - we know a cat in real life probably has
11:58 - a name and an age and it can meow right
12:00 - we can make our cat class like that too
12:02 - so that the cats we create can do those
12:04 - things so here's how we do that we just
12:06 - add string name int age and we'll create
12:10 - a new method public void meow that
12:13 - prints meow now note that we didn't
12:16 - actually set a value for the name or the
12:19 - age here remember the class isn't a cat
12:21 - in itself it's a blueprint for creating
12:23 - cats and it tells you what kind of
12:24 - attributes it has and what it can do so
12:26 - what this is saying is that each
12:27 - individual cat made from this class can
12:29 - have a name it can have an age and it
12:32 - can do this thing it can meow and back
12:34 - here where we're actually creating our
12:36 - individual cats that's when we can
12:38 - actually set the name and age of these
12:41 - individual cats my cat dot name equals
12:44 - fred my cat.age equals six we use this
12:48 - dot to access the fields on these
12:51 - objects very similarly to how we call
12:53 - methods but you'll know the difference
12:54 - because when we call methods we always
12:56 - have an open and close parentheses and
12:58 - when we're accessing a field on that
13:00 - class like name or age we don't have any
13:02 - parentheses and on another cat a whole
13:04 - separate cat object we can set its own
13:06 - values so another cat.name equals stella
13:09 - stella's age is five later on in our
13:12 - program we can get those values and do
13:13 - whatever we want with them so if we want
13:15 - to print out fred's age later we can do
13:16 - that icat dot age and it prints out six
13:19 - one huge point of confusion for me
13:21 - personally when i was learning java is
13:23 - this whole static thing you might have
13:26 - noticed in our methods sometimes we use
13:28 - this static keyword and sometimes we
13:30 - didn't all this static keyword means is
13:33 - that this method can be called without
13:36 - using an individual cat object for
13:39 - example we made this ding dong method
13:41 - static so back here in our main method
13:43 - we could just call cat dot ding dong
13:46 - notice we're just calling this method on
13:48 - the clasp itself not on any specific cat
13:50 - object that we created we don't need to
13:52 - create a cat object first if we just
13:54 - want to use this method but if it's not
13:56 - static like this meow method you can
13:58 - only call that method using an
13:59 - individual cat object so back here
14:02 - notice that i can't call
14:04 - hat.meow just using the class name it
14:06 - gives me an error that says i can't make
14:08 - a static reference to this non-static
14:10 - method but down here where i've actually
14:12 - created a cat object like my cat i can
14:15 - call meow on that just fine whether a
14:17 - certain method that you make is static
14:19 - or non-static just depends on what makes
14:21 - sense for what you're trying to do of
14:22 - course java is much deeper than what can
14:24 - be covered in one video like this but
14:26 - this should give you a ton of tools that
14:27 - you can use and build off of to start
14:29 - making some awesome programs i do have a
14:31 - full java course available in a link
14:33 - down in the description if you're
14:34 - interested that goes way more into depth
14:36 - on a ton of topics but if not that's
14:37 - awesome too i'm just thrilled to have
14:39 - you here with me my goal is really just
14:41 - to help as many people as i possibly can
14:43 - for real if you ever have any sort of
14:44 - java questions that i might be able to
14:45 - help with just put them in the comments
14:47 - and i'll do my best to respond thanks so
14:48 - much for watching i'm so glad to have
14:50 - you here with me and i'll see you in the
14:52 - next video

Cleaned transcript:

if you're struggling learning java i understand how you're feeling it can feel like everyone around you is some kind of programming genius who just gets everything with no problem at all and you feel like you must be the only one having trouble with it you're absolutely not alone and you're in the right place i remember in my first java class in college i really struggled to understand some of just the basic concepts and really just felt overwhelmed but now i've been programming in java for a living for the past 10 years and i want to make sure you don't have to struggle the same way i did my name's john and i love sharing what i've learned about java in a clear and understandable way so please consider subscribing if you'd like to see more helpful java videos in this video we'll go over everything you need to know to get started writing great java programs before you can code anything in java there's a couple of things you have to have installed if you've already done that awesome and if not it's super easy it just takes a few minutes i have a video here going through the whole process one of the things you'll want to install is called an ide and integrated development environment and that's what i have open here the name sounds really complicated but it's basically just a program that makes it easier to write code kind of like microsoft word makes it easier to write school papers here the ide that i'm using is called eclipse basically we're going to write our java programs here in eclipse and then it is going to take our programs and automatically translate them into a format the computer can understand something called byte code you know essentially the ones and zeros that make the computer happy and it's going to run it when you open eclipse to get started creating a java program just right click here in this area called uh the package explorer and go to new java project you can give it whatever name you want we'll just call it a project pineapple you can uncheck this module thing down here we don't need that and click finish you can see it created our project for us here project pineapple then you can expand this drop down and right click this src folder here which stands for source and go to new class a class is basically just a fancy name for a java file give that name to whatever you want like awesome java program and you want to check this box down here that says public static void main string args we'll talk a little more about what that means later then click finish and then eclipse will automatically generate this kind of framework for a working java program for you now all of these programming looking terms and keywords might feel really intimidating but really all this is saying is hey java i've got this new program called awesome java program and when i tell you to run here's all the stuff that i want you to do this whole section here is what we call the main method and all the commands we put in between these two curly brackets in the main method are what it's going to do when we tell it to run so that's where we're going to be writing most of our code this line here with the two slashes is just an automatically generated thing that we don't need so we can just get rid of it just about everything we'll do in java revolves around creating and using things called variables variables are just used to store data so here's an example and myint equals seven now variables have a name a type and a value for this variable int is the type it stands for integer int is basically just a number this my int is the name of the variable we can give it whatever name we want and this equals seven here is giving this my into the value of seven so this just says hey java i have a number here i want to call it myant and please give it the value of seven to start out with and then we have this semicolon in java most lines will end with a semicolon it's just telling java that's the end of the statement now anywhere after that line in our program we can get the value stored in that variable just by using its name for example if we want to just print it out the command to print something out in java is system.out.println and in parentheses we specify the name of that variable myant and we end with a semicolon and we can click save and then click run to run our program and we see our output of the program here in our console so it just prints out the value of this my int variable which is seven int isn't the only type of variable we can create for example if you want to create a decimal number you can use double let's say we want to make a shoe size double shoe size equals 9.5 if you want to store a character you can use the char type char my initial equals j that'll be in single quotes a lot of the magic encoding happens when we take these variables and have them interact with each other so we can take this mayan variable and multiply it by the shoe size if we want in java to multiply you just use star so my int times shoe size save and run it we see that we get the result 66.5 which is 7 times 9.5 and also instead of just printing out that result you can actually store the result of that calculation in another variable so we can say double result equals my int times shoe size all of these types so far and double and char those are called primitive types in java there are eight primitive types total in java and i have a video going over all of them and how to use them in detail here primitives are like the absolute basic types in java like the sticks and stones you'll know it's a primitive type in java if it starts with a lowercase letter every other type you use in java is built on top of these primitive types but there are tons of other types you can use and you can even create your own like we'll see later probably the nonprimitive type that you're going to use most is called string string variables are used to hold text string my name equals john for strings you put them in double quotes instead of single quotes you can tell that string is not a primitive type because it starts with a capital s and also the primitive types have a different coloring in eclipse than other types do when you create a nonprimitive variable like this there's also even more stuff you can do with it that can be different for each type to see what you can do with the variable if you're using a fancy ide like eclipse you can start out by just typing the variable name then type a period and you'll immediately see all the cool things you can do with this variable these are all called methods and when we use any of them it's called calling a method as you're scrolling through these you can click one and you'll get a description of what that method does for example this length method says it returns the length of this string and if we want to use it we just double click it or you can also just type it out if you want to so if we move this down here so we can print out the result of this method call it prints out four because john the value of the my name variable is four characters long but there are a ton of other methods available like for example there's one called a two uppercase and if we use that it gives you an all uppercase version of that string and if you already have the method out here in your code and you want to remind yourself what it does you can just hover over the method name and a little popup will appear with the description one thing you can't do is you can't call a method on a primitive variable like my interior if i try to do my int dot nothing pops up it just doesn't work speaking of methods you can also create your own to create a new method here in the same java file i'll type it out first and then we'll talk a bit about what it means private static void burp this whole line here is called the method declaration and this part right here before the parentheses is the name of the method here we called it burp and any code that we put between these two curly brackets is what it's going to do when this method is called let's just have it print out burp but if we go ahead and save and run our code now nothing happens nothing's printed out why is that that's because if you remember when we run our java program java just runs everything that we put inside our main method and right now there's nothing in here that calls this other method that we created so let's change that now if we want to call this method all we have to do is use its name burp and we also need an open and close parentheses whenever you see this open and close parentheses you'll know that it's a method being called now if we save and run our program successfully burps so now we can have our program burp whenever we want just by calling burp of course a method can be a whole lot more complicated than this and a big reason to make a method is because you might have a whole big complicated chunk of code that you don't want to repeat package it up in a method and you can just call it as many times you want from anywhere in your code just by using its name now a method can also take what is called parameters so for example if this method was called print name between these two parentheses is where you would put the parameters let's say it had a string parameter that was called name and then just printed out my name is plus name this plus is how you link two strings together in java that's called concatenating strings but now when you call this print name method you have to pass in a value for that name parameter and you pass in that value by putting it between these two parentheses uh john and we can run it and see that it prints out my name is john you can even take multiple parameters if you want just separate them by commas so i can also take in like int number and when you're calling it you just do the same thing you just separate the values that you're passing in with a comma if you want you can also have your method return a value right here in the method declaration where we have this void void means it's not returning any values but if you want it to return a value this is where we specify the type of the thing that it's going to return so if we want it to return a string we can just change this to a string but now we have to actually return a string somewhere in our method so what we can do instead of just printing out my name is blah we can just change this to return that value my name is blah the code that calls this can do whatever it wants with the string that's returned for example we could just print it out ourselves here or if we want since this returns a string we can actually save that resulting value in our own string variable so string name equals the result of this method call one of the most useful things you'll ever use in java is called conditional statements that's your basic if this then that conditional statements in java will look like this if whatever condition we put in here is true run this stuff otherwise if whatever condition we put in here is true run this stuff and if neither one of those are the case run this and you don't necessarily need all three pieces for this you might just have an if you might just have an if else you don't need all three so what kind of conditions can we have in here so we could say like if name equals john then print this guy is awesome else if the name equals larry this guy is okay i guess and if it's not john and not larry prince i don't know this guy at all this example uses strings as its conditions but if you want to use the like a number as the condition you can do things like if number double equals five in java you use double equal to check equality like this that's because the single equals is already being used for assigning values to variables so just remember to use double equals but with numbers you don't always just have to check for equals you can do other things like if the number is greater than 5 or less than 5 or if you want to say if the number is not equal to 5 you use exclamation point equals next if you want to be able to repeat a piece of code a whole bunch of times without actually copying and pasting the same code over and over and over again you can use what's called a loop one type of loop in java is a for loop and it looks like this and i equals 0 i less than 10 i plus plus what this will do is run everything inside these curly brackets 10 times how it does that is it declares this variable i and says hey keep looping while i is less than 10. and every time it goes through the loop increment i by one that's what this i plus plus does so we can have it print out these pretzels are making me thirsty if we run it it'll print out these pretzels are making me thirsty 10 times and we can have this for loop do this however many times we want so if we change this 10 to a thousand and run our program it'll print it out a thousand times one huge thing about java is that it's an object oriented programming language a big part of being object oriented is that you can take a whole bunch of code and put it in another java file called a class and you can use that code in some other java file like your main file so let's do that now we can go over and right click on source again and go to new class say we want to create a cat class so we'll call it cat and you can create a method in your class like this public static void ding dong which prints out ding dong this public keyword here makes it so this method can be called from any other java file if you remember in our other method we used private private makes it so this method can only be called from within this file that was fine because that's all we needed it for but if you make it public it can be used anywhere so now we can call this cat ding dong method from our main program like this we just say cat dot ding dong so you can absolutely use a separate class just like this a place to put other methods so they don't clutter up your main class but the main use of a separate class like this is actually as a blueprint to create what are called objects so here we have a cat class now this class itself isn't a cat object but we can use this class to create cat objects as many as we want and here's how so back in our main program we can just say cat i cat equals new cat this creates a brand new cat object and stores it in this variable my cat and we can create another one if we want so cat another cat equals new cat right now we haven't really put much of anything in this cat class so our individual cats that we've created from it can't really do a whole lot but we can change that so we know a cat in real life probably has a name and an age and it can meow right we can make our cat class like that too so that the cats we create can do those things so here's how we do that we just add string name int age and we'll create a new method public void meow that prints meow now note that we didn't actually set a value for the name or the age here remember the class isn't a cat in itself it's a blueprint for creating cats and it tells you what kind of attributes it has and what it can do so what this is saying is that each individual cat made from this class can have a name it can have an age and it can do this thing it can meow and back here where we're actually creating our individual cats that's when we can actually set the name and age of these individual cats my cat dot name equals fred my cat.age equals six we use this dot to access the fields on these objects very similarly to how we call methods but you'll know the difference because when we call methods we always have an open and close parentheses and when we're accessing a field on that class like name or age we don't have any parentheses and on another cat a whole separate cat object we can set its own values so another cat.name equals stella stella's age is five later on in our program we can get those values and do whatever we want with them so if we want to print out fred's age later we can do that icat dot age and it prints out six one huge point of confusion for me personally when i was learning java is this whole static thing you might have noticed in our methods sometimes we use this static keyword and sometimes we didn't all this static keyword means is that this method can be called without using an individual cat object for example we made this ding dong method static so back here in our main method we could just call cat dot ding dong notice we're just calling this method on the clasp itself not on any specific cat object that we created we don't need to create a cat object first if we just want to use this method but if it's not static like this meow method you can only call that method using an individual cat object so back here notice that i can't call hat.meow just using the class name it gives me an error that says i can't make a static reference to this nonstatic method but down here where i've actually created a cat object like my cat i can call meow on that just fine whether a certain method that you make is static or nonstatic just depends on what makes sense for what you're trying to do of course java is much deeper than what can be covered in one video like this but this should give you a ton of tools that you can use and build off of to start making some awesome programs i do have a full java course available in a link down in the description if you're interested that goes way more into depth on a ton of topics but if not that's awesome too i'm just thrilled to have you here with me my goal is really just to help as many people as i possibly can for real if you ever have any sort of java questions that i might be able to help with just put them in the comments and i'll do my best to respond thanks so much for watching i'm so glad to have you here with me and i'll see you in the next video
