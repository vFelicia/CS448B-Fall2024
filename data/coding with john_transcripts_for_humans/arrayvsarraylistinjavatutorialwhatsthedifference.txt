With timestamps:

00:00 - when you got started programming in java
00:01 - and began working with data structures
00:03 - you probably first learned about arrays
00:05 - and then a little bit later on you
00:06 - probably also learned about array lists
00:08 - but it's super easy to get them confused
00:10 - when are you supposed to use one versus
00:12 - the other what are the differences in
00:13 - how you
00:13 - create it add things to it remove things
00:16 - from it we're going to talk all about
00:17 - all of that in this video and then i'll
00:18 - tell you exactly which one
00:20 - i use and recommend that you use the
00:22 - vast majority of the time
00:23 - and why hi i'm john and if this is your
00:25 - first time watching this channel i put
00:27 - up a brand new java lesson video every
00:29 - single week it could be a lesson on a
00:30 - java concept or a full coding tutorial
00:32 - where i programmed something beginning
00:33 - to end so please be sure to like and hit
00:35 - the subscribe button so you don't miss
00:37 - the video every week
00:38 - and a sincere thanks to those of you who
00:39 - do take the time to like and subscribe
00:41 - it's the only way this channel grows so
00:42 - i really do appreciate it
00:44 - as always the full source with all the
00:45 - examples for this video is available in
00:47 - a link down in the description so go
00:49 - and get it so let's get right into it
00:50 - arrays and array lists so when would you
00:53 - use any of these at all well typically
00:54 - an array or an array list either one
00:56 - are used when you have just a group a
00:58 - collection of the same types of objects
01:00 - and you just want to hold a bunch of
01:02 - them
01:02 - you can have an array of just numbers
01:04 - maybe a list of cards in a deck
01:06 - or even look an array of string
01:08 - arguments to pass to your main method
01:09 - and if you've wondered what that's all
01:10 - about that string array args and the
01:12 - main method declaration in every single
01:14 - java program you've made
01:15 - ever be sure to check out this video i
01:17 - made all about that main method it
01:18 - describes exactly what that string array
01:20 - is used for and how you can use it in
01:22 - your own programs
01:23 - anyway let's say for your purposes you
01:24 - want to create an array of strings
01:27 - let's say you just have a list of your
01:28 - friends so you want to create an array
01:30 - that holds all of your friends names
01:32 - right
01:32 - so here's how you would do that if you
01:33 - wanted to use an array you would say
01:35 - string and then open close bracket that
01:38 - indicates that this is an array
01:40 - of strings so that's just java's type
01:42 - declaration
01:43 - and then after that of course you want
01:45 - to have your variable name just like you
01:47 - do
01:47 - for any variable so here since we're
01:49 - going to create an array of friends
01:51 - names let's just call it
01:52 - friends array and then you say equals
01:55 - and we need to initialize
01:56 - this array well there's a couple of ways
01:58 - you can do it the first way
01:59 - is just that you can say new string
02:02 - array but you have to also give it
02:06 - the capacity so notice that right now
02:08 - eclipse is giving us an error that says
02:09 - variable must provide either dimension
02:10 - expressions or an array initializer well
02:12 - basically what it is saying is
02:14 - you need to give this a size arrays in
02:16 - java have a fixed
02:17 - size which means that after you've
02:18 - declared your array
02:20 - it can't grow or shrink it has to stay
02:22 - that exact size
02:24 - so here we have to start out and declare
02:26 - its size so let's just say it we give it
02:28 - size four so this array can hold
02:30 - four elements inside of it and since
02:31 - that size is fixed for arrays
02:33 - that array will never ever grow or
02:35 - shrink from four it will always have
02:36 - exactly
02:37 - four elements some of those elements
02:39 - might be null and actually
02:40 - when a string array starts out like this
02:42 - all four elements will be null until we
02:44 - set them but it will never contain fewer
02:46 - or more than exactly
02:47 - four elements you can also initialize
02:49 - the values in your array right away when
02:51 - you declare it meaning you can
02:52 - fill up your entire array with values
02:54 - within your declaration
02:55 - so to do that you just do string array
02:58 - same thing
02:58 - friends array so we need a different
03:01 - name here so we'll just call it friends
03:02 - array 2
03:03 - and then say equals and then in curly
03:05 - brackets curly braces
03:06 - you just put in all of the values you
03:09 - want to have in your array
03:10 - separated by commas so we've got strings
03:12 - here so let's just say we've got
03:14 - john yours truly i think i could be my
03:16 - own friend um
03:18 - chris eric and luke
03:21 - so notice that when we did it this way
03:23 - we didn't have to specify a capacity
03:25 - that's because we have an implied
03:26 - capacity
03:27 - by the values that we set so since we're
03:28 - setting exactly four
03:30 - values the capacity of this array will
03:32 - be exactly four and again because arrays
03:34 - can't grow or shrink it'll always have
03:35 - exactly four values
03:36 - okay so that's how you declare and
03:38 - initialize an array so how do you do it
03:40 - with an array list
03:42 - so to make your arraylist you'll say
03:43 - array list and in angle brackets you put
03:46 - in the data type that you want to hold
03:47 - in this arraylist so of course here we
03:49 - want it to be of strings so we say
03:51 - string
03:51 - and then we put in your variable name
03:53 - just like we did above and we'll call
03:54 - this one
03:55 - friends array list
03:58 - and then we say equals and now we need
04:00 - to instantiate this arraylist
04:02 - so uh to do that we do it like we do a
04:04 - lot of objects we say new
04:05 - array list and then we do something a
04:07 - little weird here we have
04:09 - what's called a diamond operator it's
04:10 - just the full set of open and closed
04:12 - angle brackets and then
04:14 - an open and close parentheses and then a
04:16 - semicolon
04:17 - so this open and close angle brackets is
04:19 - often called a diamond operator
04:21 - in older versions of java you had to
04:22 - specify the data type you wanted to hold
04:24 - in your array
04:25 - all over again here in this part then in
04:27 - later versions of java they said
04:28 - that's kind of silly you're already
04:30 - specifying it here java can just
04:31 - infer that you still mean that this is
04:34 - uh
04:34 - an arraylist of strings and so now you
04:37 - can just use this
04:38 - which is called a diamond operator so
04:40 - now we do have to add our imports for
04:41 - arraylist so i'm using uh
04:43 - eclipse so i can just say ctrl shift o
04:45 - and organize my import but if you're not
04:46 - using any special ide this is the import
04:48 - you will need java.util.arraylist
04:51 - so notice i didn't have to specify a
04:53 - size like i did
04:54 - for the arrays but here in the arraylist
04:56 - i didn't have to specify a size and the
04:58 - reason for that
04:59 - is arraylists do not have a fixed size
05:02 - that is one of the big benefits of
05:04 - arraylists over arrays
05:06 - arrays always have a fixed size that you
05:08 - cannot change but array lists will
05:10 - dynamically either expand or contract
05:12 - their size automatically
05:14 - by however many elements you are adding
05:16 - or removing from it so it's pretty handy
05:18 - that way so it can make programming with
05:19 - them
05:20 - a lot easier and you can just like we
05:22 - filled up the array
05:24 - with an explicit list of values here we
05:26 - can also do something similar
05:28 - with arraylist what we do is array list
05:31 - a string this part's all the same we
05:34 - give it a
05:34 - name friends array list
05:38 - 2 equals new array list
05:42 - open and close angle brackets and then
05:44 - in the parentheses here
05:45 - you'll type in arrays dot as
05:49 - list and then you'll pass into this
05:50 - arrays as list method just a a comma
05:53 - separated a list
05:54 - of the values you want to have in your
05:56 - arraylist but no curly braces here
05:58 - just the values separated by commas john
06:02 - chris eric luke
06:06 - okay i'm gonna go ahead and move some of
06:08 - this down to a new line so you can see
06:10 - all of it okay so instead of just saying
06:11 - new arraylist which doesn't fill up any
06:14 - values at all
06:14 - you could say new arraylist then you
06:16 - pass in arrays dot as
06:18 - list and then explicitly the list of all
06:21 - the values you want to have in there
06:23 - there are some other ways you can do it
06:24 - such as only having this arrays.aslist
06:26 - part but that actually gives you what's
06:28 - called an immutable list it gives you a
06:30 - list that you can't change
06:31 - so you couldn't ever add remove or
06:32 - change any values inside of it
06:34 - doing it this way with the new array
06:36 - list and then passing in the
06:37 - arrays.adslist call
06:38 - gives you a list that is mutable that
06:40 - you can mess around with and do whatever
06:42 - you want with so that's what we want for
06:43 - this purpose here so this is the first
06:45 - set of differences right between the
06:46 - arrays and the array lists
06:48 - just declaring them and initializing
06:50 - them is different and also we know now
06:52 - that arrays have a fixed size
06:54 - while an array list has a completely
06:56 - dynamic sizing
06:57 - and another difference between arrays
06:59 - and arraylist before we move on is what
07:01 - kind of data they can actually
07:02 - hold now an array can hold basically
07:06 - anything it can hold a primitive
07:08 - data type like an int a long a boolean
07:11 - and it can also hold objects like string
07:13 - or whatever cat or dog kind of object
07:16 - that you make in your own programs
07:17 - however an array list
07:19 - can only hold objects it cannot hold
07:21 - primitive so if you try to make it
07:23 - an arraylist of ins you're going to get
07:25 - an error that's one very small
07:26 - limitation of arraylists but you can get
07:29 - around it pretty easily
07:30 - by just using the wrapper class of
07:32 - whatever
07:33 - primitive data type you want to put in
07:35 - your arraylist so here instead of int
07:37 - you can just put in integer and it'll
07:39 - work exactly the same way so really not
07:41 - much of a downside to something you
07:42 - should know if you want to use an
07:44 - arraylist with a primitive data type
07:45 - like
07:46 - int just use its associated wrapper
07:48 - class so just
07:49 - integer for inst capital l for long
07:52 - capital b
07:52 - for boolean that kind of thing okay
07:54 - let's change this back to a
07:56 - string now that we've gone over the
07:57 - differences in the instantiations let's
07:59 - go ahead and just clean up our code a
08:00 - little bit
08:01 - so that we can have an array and array
08:04 - list that have some values that we can
08:07 - mess around with so next how do we get
08:09 - values from an array versus getting a
08:11 - value from an array list
08:12 - to get a value from an array you just
08:14 - have to specify the index of the value
08:16 - that you want
08:16 - indexes for arrays and array lists both
08:19 - work the same they both start at zero
08:21 - which means they look
08:22 - something like this so the first element
08:24 - will have index zero the second element
08:26 - will have index
08:27 - one and so on since we have four
08:29 - elements in both our array and our array
08:31 - list examples
08:32 - uh the indexes will look like this zero
08:34 - one two and three
08:36 - for the last element in each one so
08:38 - let's say we wanted to get the second
08:40 - element in each of these so how do we
08:41 - get the second element
08:43 - from our friends array all you have to
08:44 - do is say friends
08:46 - array and then in brackets you specify
08:49 - the index that you want since we want
08:51 - the second item it will actually have
08:52 - index
08:53 - one because it goes zero then one now
08:54 - this piece of code doesn't do much on
08:55 - its own so we might wanna do something
08:57 - like
08:57 - print out the value that we get so
08:59 - instead we can do system dot
09:01 - out dot print line and then friends
09:05 - array and in brackets
09:09 - the index that we want which is one all
09:11 - right so now we should get the element
09:12 - at index one which is the second element
09:14 - of our list which
09:15 - should be chris and it is
09:18 - so how do we do exactly the same thing
09:21 - with our friends arraylist
09:23 - well let's go ahead and copy this so
09:24 - instead of having the
09:26 - index in brackets like that you actually
09:28 - do a method call so you say friends
09:30 - array list dot get
09:34 - and you pass in the index that you want
09:36 - so of course here we want
09:37 - index one just like we did above so
09:39 - let's run our code
09:40 - again and we should get chris printed
09:42 - out twice
09:43 - and we do so to compare the two in this
09:45 - case they're pretty similar and one
09:46 - isn't really easier or harder than the
09:47 - other you just do them a little bit
09:49 - differently so next
09:50 - how do you get the size of each of these
09:52 - let's say we made an array we want to
09:53 - know how big it is well to get the
09:55 - length of an array
09:56 - you do this so we can print it out again
09:58 - system dot out
09:59 - dot print line friends array
10:02 - dot length notice that's just a field
10:05 - there's no
10:06 - parentheses in that like there would be
10:08 - for a method call and that's because
10:10 - it's just a field
10:11 - on that array let's go ahead and run
10:12 - that and see if it works we should get a
10:13 - length of four
10:15 - and we do now similarly for an arraylist
10:19 - system.out.printline friends arraylist
10:22 - dot not length but size and notice that
10:26 - it is a method call
10:27 - and not a fields we have an open and
10:29 - close parentheses here because
10:30 - this size is a method call again these
10:32 - two are very similar one is a method
10:34 - call and one is a field
10:35 - this returns how big the array is this
10:37 - returns how big the array list is
10:40 - so next how do we add an element to the
10:42 - end of an array or the end of an
10:44 - arraylist
10:45 - well here's how you do it with arrays
10:47 - you
10:48 - can't do that with arrays and why can't
10:51 - you do that well it's what we talked
10:52 - about before arrays have a fixed
10:54 - size and can't grow or shrink so our
10:56 - friends array will always be of size
10:58 - 4 because that's how many elements we
11:00 - put into it when we initialized it
11:02 - so we just can't do that with our arrays
11:04 - but that's where array
11:06 - lists come in to kind of save the day so
11:08 - we can do that easily
11:09 - with our array lists and to do that you
11:12 - just say friends
11:13 - array list dot add you call the method
11:16 - add and then you pass in the element
11:18 - that you want to add so i wanted to add
11:20 - a mitch it's that simple so and we can
11:22 - prove that that works by
11:24 - copying this get and then we can instead
11:27 - get the element at index
11:28 - four which should be the fifth and last
11:30 - element of our
11:32 - arraylist and that should give us mitch
11:35 - and it does and that's another point on
11:37 - the side of arraylist and it's for the
11:38 - same reason as before arrays always have
11:41 - a fixed length and it can't grow
11:43 - array lists can grow dynamically like
11:45 - we're doing here
11:46 - actually let's take a second to add some
11:47 - comments what we're doing here add
11:49 - an element get size
11:53 - get element create next how do we set a
11:57 - particular element let's say we want to
11:58 - change
11:59 - the element at index 0 to be something
12:02 - else so instead of john i want to make
12:04 - it
12:04 - carl well it's pretty easy to do in
12:06 - either case in the case of arrays you
12:07 - just say
12:08 - friends array and pass in in brackets
12:10 - the index
12:11 - that you want to set and just set it
12:14 - just like you would any other variable
12:15 - so friends array at 0
12:17 - equals carl and so now if i get
12:21 - the element at index 0
12:24 - from my friend's array it should be carl
12:27 - instead of john
12:28 - and yep there it is so for arraylist
12:30 - again it's very similar
12:32 - except you do it with a method call
12:34 - instead of specifying your index
12:36 - in brackets so you just say friends
12:38 - array
12:39 - list dot set and then you pass in your
12:42 - index so here i want to pass in the
12:44 - index 0
12:45 - for it to be the first element in the
12:47 - list and then as the second argument you
12:49 - pass in what you want to set the value
12:51 - to so again here i can say
12:53 - carl we can print that out as well so we
12:55 - want to do friends
12:56 - array list dot get the element
13:00 - at zero and yes we have properly changed
13:02 - the first element of the list
13:04 - to be carl instead of john next what if
13:06 - we want to remove
13:08 - an element from our array or our array
13:10 - list well
13:12 - again for arrays sorry you just can't do
13:14 - it
13:15 - can't do this with arrays we have a
13:17 - fixed length in our array
13:19 - so i can't just take out this second
13:21 - element and leave it with an array of
13:23 - size 3 because i can't change the size
13:25 - of my array but with arraylist it is
13:27 - dead simple with just a method call
13:29 - friends array list dot remove
13:32 - and as you can see you can specify one
13:34 - of two things when you call this method
13:36 - you can either specify the index
13:38 - so i could pass in zero it will remove
13:39 - that very first element at index zero
13:42 - from our list
13:42 - or i can specify the object itself so
13:44 - let's say i wanted to remove this
13:46 - second element from my arraylist i can
13:49 - either pass in the number one because
13:50 - the index of the second value is one
13:52 - that will remove it
13:53 - or i can pass in the text chris i could
13:57 - pass in the exact
13:58 - element i want to remove and since we've
13:59 - been messing with indexes so much let's
14:01 - switch it up and do it this way and we
14:02 - can prove that we have removed it
14:04 - because now when we get the element at
14:07 - index
14:07 - 1 it should be eric because chris
14:11 - should be removed from the list and yes
14:12 - it did the value at index 1
14:14 - in our arraylist is now eric gotta say
14:17 - that's another point for arraylist the
14:18 - flexibility is just
14:19 - great the last thing we want to compare
14:21 - is just printing
14:22 - say you wanted to print your array or
14:24 - print your arraylist how do we do it
14:25 - well let's
14:26 - try the first thing you would probably
14:27 - try just dot print line
14:30 - friends array and similarly we'll do
14:32 - system dot
14:33 - out dot print line friends array
14:37 - list let's just print both of those out
14:39 - and compare what they look like so you
14:41 - can see the last two lines we printed
14:42 - out here
14:43 - this is printing out our array and this
14:45 - is printing out our array list
14:47 - so just looking at those you'll probably
14:48 - get a good idea of what i personally
14:50 - like better what happens when you print
14:51 - out an array is java just basically
14:53 - gives you the memory address of that
14:55 - array maybe that's what you want but
14:57 - probably not you probably want to print
14:58 - out all the elements in the array right
15:00 - that's what would make
15:01 - sense and that's exactly what the
15:03 - arraylist implementation
15:05 - does and that's because the arraylist
15:06 - has implemented the tostring method
15:09 - and it has made it print out in this
15:11 - nice fancy way where it does
15:13 - and you know an open bracket it prints
15:14 - out the first element
15:16 - and then a comma a space and the second
15:18 - element and so on
15:19 - see this is just so clean you can print
15:21 - out your list super easily and know
15:23 - exactly what is in it and that's
15:24 - something you just don't get easily with
15:26 - arrays if you want to print out all the
15:28 - elements in an array you pretty much
15:30 - have to do a for loop and iterate over
15:32 - all elements in that array and print it
15:33 - out
15:34 - but with an arraylist it is already done
15:36 - for you so if after going through all of
15:38 - this you say
15:39 - man arraylists really rock i should use
15:41 - those i think you are absolutely right
15:43 - what arraylist really is is a
15:45 - wrapper around java's arrays that make
15:48 - them so much easier
15:49 - to work with it gives you automatic
15:51 - resizing easy adding
15:53 - easy removing and easy printing and
15:56 - that's not even to mention
15:57 - all the other things that you get
15:58 - because an arraylist is part of java's
16:01 - collections so you can see just a
16:03 - glimpse of that by saying okay i'm going
16:04 - to take my friend's arraylist what
16:06 - methods can i call on it
16:07 - oh man i can see if it contains an
16:09 - object i can call for each on it and
16:11 - loop through every element in it i can
16:12 - call a method to see if it's
16:14 - empty i can see what the last index is i
16:17 - can easily sort the list i can create a
16:18 - stream from it and do all kinds of cool
16:20 - things from that
16:20 - it really is awesome how much the
16:22 - arraylist class gives you to use
16:24 - so it'll probably come as no shock to
16:26 - you that arraylist is the one that i
16:28 - use and recommend that you use the vast
16:30 - majority of the time
16:31 - it just makes life so much easier and it
16:33 - makes your code so much easier to work
16:35 - with using arraylist over regular arrays
16:38 - using an arraylist does add a little bit
16:40 - of overhead you know when you're adding
16:41 - and removing values and stuff
16:43 - java has to do some work behind the
16:44 - scenes to make that happen but the vast
16:46 - majority of the time for
16:48 - most use cases i've ever worked with the
16:50 - difference in speed was just
16:51 - so negligible and it flat out didn't
16:53 - matter and the arraylist just being so
16:55 - much easier to work with as a programmer
16:57 - just far and away outweighs the little
17:00 - bit of performance
17:01 - increase you'll get from just using
17:03 - arrays so i just don't think it's worth
17:04 - it to use a raise unless you absolutely
17:06 - have to
17:07 - if you enjoyed this video or learned
17:08 - something please let me know with a like
17:10 - and if you'd like to see more videos
17:11 - like this
17:11 - every single week where we go over a new
17:14 - java
17:15 - lesson or tutorial or complete coding
17:17 - walkthrough please be sure to subscribe
17:19 - so you don't miss the video every week
17:21 - again a special thanks to you for liking
17:23 - and subscribing it's the only way these
17:24 - videos get out to more people so i
17:26 - really do appreciate it
17:28 - i wonder if chris will be offended that
17:30 - i chose to use his name as the
17:32 - example of a friend to remove from my
17:33 - list sorry chris

Cleaned transcript:

when you got started programming in java and began working with data structures you probably first learned about arrays and then a little bit later on you probably also learned about array lists but it's super easy to get them confused when are you supposed to use one versus the other what are the differences in how you create it add things to it remove things from it we're going to talk all about all of that in this video and then i'll tell you exactly which one i use and recommend that you use the vast majority of the time and why hi i'm john and if this is your first time watching this channel i put up a brand new java lesson video every single week it could be a lesson on a java concept or a full coding tutorial where i programmed something beginning to end so please be sure to like and hit the subscribe button so you don't miss the video every week and a sincere thanks to those of you who do take the time to like and subscribe it's the only way this channel grows so i really do appreciate it as always the full source with all the examples for this video is available in a link down in the description so go and get it so let's get right into it arrays and array lists so when would you use any of these at all well typically an array or an array list either one are used when you have just a group a collection of the same types of objects and you just want to hold a bunch of them you can have an array of just numbers maybe a list of cards in a deck or even look an array of string arguments to pass to your main method and if you've wondered what that's all about that string array args and the main method declaration in every single java program you've made ever be sure to check out this video i made all about that main method it describes exactly what that string array is used for and how you can use it in your own programs anyway let's say for your purposes you want to create an array of strings let's say you just have a list of your friends so you want to create an array that holds all of your friends names right so here's how you would do that if you wanted to use an array you would say string and then open close bracket that indicates that this is an array of strings so that's just java's type declaration and then after that of course you want to have your variable name just like you do for any variable so here since we're going to create an array of friends names let's just call it friends array and then you say equals and we need to initialize this array well there's a couple of ways you can do it the first way is just that you can say new string array but you have to also give it the capacity so notice that right now eclipse is giving us an error that says variable must provide either dimension expressions or an array initializer well basically what it is saying is you need to give this a size arrays in java have a fixed size which means that after you've declared your array it can't grow or shrink it has to stay that exact size so here we have to start out and declare its size so let's just say it we give it size four so this array can hold four elements inside of it and since that size is fixed for arrays that array will never ever grow or shrink from four it will always have exactly four elements some of those elements might be null and actually when a string array starts out like this all four elements will be null until we set them but it will never contain fewer or more than exactly four elements you can also initialize the values in your array right away when you declare it meaning you can fill up your entire array with values within your declaration so to do that you just do string array same thing friends array so we need a different name here so we'll just call it friends array 2 and then say equals and then in curly brackets curly braces you just put in all of the values you want to have in your array separated by commas so we've got strings here so let's just say we've got john yours truly i think i could be my own friend um chris eric and luke so notice that when we did it this way we didn't have to specify a capacity that's because we have an implied capacity by the values that we set so since we're setting exactly four values the capacity of this array will be exactly four and again because arrays can't grow or shrink it'll always have exactly four values okay so that's how you declare and initialize an array so how do you do it with an array list so to make your arraylist you'll say array list and in angle brackets you put in the data type that you want to hold in this arraylist so of course here we want it to be of strings so we say string and then we put in your variable name just like we did above and we'll call this one friends array list and then we say equals and now we need to instantiate this arraylist so uh to do that we do it like we do a lot of objects we say new array list and then we do something a little weird here we have what's called a diamond operator it's just the full set of open and closed angle brackets and then an open and close parentheses and then a semicolon so this open and close angle brackets is often called a diamond operator in older versions of java you had to specify the data type you wanted to hold in your array all over again here in this part then in later versions of java they said that's kind of silly you're already specifying it here java can just infer that you still mean that this is uh an arraylist of strings and so now you can just use this which is called a diamond operator so now we do have to add our imports for arraylist so i'm using uh eclipse so i can just say ctrl shift o and organize my import but if you're not using any special ide this is the import you will need java.util.arraylist so notice i didn't have to specify a size like i did for the arrays but here in the arraylist i didn't have to specify a size and the reason for that is arraylists do not have a fixed size that is one of the big benefits of arraylists over arrays arrays always have a fixed size that you cannot change but array lists will dynamically either expand or contract their size automatically by however many elements you are adding or removing from it so it's pretty handy that way so it can make programming with them a lot easier and you can just like we filled up the array with an explicit list of values here we can also do something similar with arraylist what we do is array list a string this part's all the same we give it a name friends array list 2 equals new array list open and close angle brackets and then in the parentheses here you'll type in arrays dot as list and then you'll pass into this arrays as list method just a a comma separated a list of the values you want to have in your arraylist but no curly braces here just the values separated by commas john chris eric luke okay i'm gonna go ahead and move some of this down to a new line so you can see all of it okay so instead of just saying new arraylist which doesn't fill up any values at all you could say new arraylist then you pass in arrays dot as list and then explicitly the list of all the values you want to have in there there are some other ways you can do it such as only having this arrays.aslist part but that actually gives you what's called an immutable list it gives you a list that you can't change so you couldn't ever add remove or change any values inside of it doing it this way with the new array list and then passing in the arrays.adslist call gives you a list that is mutable that you can mess around with and do whatever you want with so that's what we want for this purpose here so this is the first set of differences right between the arrays and the array lists just declaring them and initializing them is different and also we know now that arrays have a fixed size while an array list has a completely dynamic sizing and another difference between arrays and arraylist before we move on is what kind of data they can actually hold now an array can hold basically anything it can hold a primitive data type like an int a long a boolean and it can also hold objects like string or whatever cat or dog kind of object that you make in your own programs however an array list can only hold objects it cannot hold primitive so if you try to make it an arraylist of ins you're going to get an error that's one very small limitation of arraylists but you can get around it pretty easily by just using the wrapper class of whatever primitive data type you want to put in your arraylist so here instead of int you can just put in integer and it'll work exactly the same way so really not much of a downside to something you should know if you want to use an arraylist with a primitive data type like int just use its associated wrapper class so just integer for inst capital l for long capital b for boolean that kind of thing okay let's change this back to a string now that we've gone over the differences in the instantiations let's go ahead and just clean up our code a little bit so that we can have an array and array list that have some values that we can mess around with so next how do we get values from an array versus getting a value from an array list to get a value from an array you just have to specify the index of the value that you want indexes for arrays and array lists both work the same they both start at zero which means they look something like this so the first element will have index zero the second element will have index one and so on since we have four elements in both our array and our array list examples uh the indexes will look like this zero one two and three for the last element in each one so let's say we wanted to get the second element in each of these so how do we get the second element from our friends array all you have to do is say friends array and then in brackets you specify the index that you want since we want the second item it will actually have index one because it goes zero then one now this piece of code doesn't do much on its own so we might wanna do something like print out the value that we get so instead we can do system dot out dot print line and then friends array and in brackets the index that we want which is one all right so now we should get the element at index one which is the second element of our list which should be chris and it is so how do we do exactly the same thing with our friends arraylist well let's go ahead and copy this so instead of having the index in brackets like that you actually do a method call so you say friends array list dot get and you pass in the index that you want so of course here we want index one just like we did above so let's run our code again and we should get chris printed out twice and we do so to compare the two in this case they're pretty similar and one isn't really easier or harder than the other you just do them a little bit differently so next how do you get the size of each of these let's say we made an array we want to know how big it is well to get the length of an array you do this so we can print it out again system dot out dot print line friends array dot length notice that's just a field there's no parentheses in that like there would be for a method call and that's because it's just a field on that array let's go ahead and run that and see if it works we should get a length of four and we do now similarly for an arraylist system.out.printline friends arraylist dot not length but size and notice that it is a method call and not a fields we have an open and close parentheses here because this size is a method call again these two are very similar one is a method call and one is a field this returns how big the array is this returns how big the array list is so next how do we add an element to the end of an array or the end of an arraylist well here's how you do it with arrays you can't do that with arrays and why can't you do that well it's what we talked about before arrays have a fixed size and can't grow or shrink so our friends array will always be of size 4 because that's how many elements we put into it when we initialized it so we just can't do that with our arrays but that's where array lists come in to kind of save the day so we can do that easily with our array lists and to do that you just say friends array list dot add you call the method add and then you pass in the element that you want to add so i wanted to add a mitch it's that simple so and we can prove that that works by copying this get and then we can instead get the element at index four which should be the fifth and last element of our arraylist and that should give us mitch and it does and that's another point on the side of arraylist and it's for the same reason as before arrays always have a fixed length and it can't grow array lists can grow dynamically like we're doing here actually let's take a second to add some comments what we're doing here add an element get size get element create next how do we set a particular element let's say we want to change the element at index 0 to be something else so instead of john i want to make it carl well it's pretty easy to do in either case in the case of arrays you just say friends array and pass in in brackets the index that you want to set and just set it just like you would any other variable so friends array at 0 equals carl and so now if i get the element at index 0 from my friend's array it should be carl instead of john and yep there it is so for arraylist again it's very similar except you do it with a method call instead of specifying your index in brackets so you just say friends array list dot set and then you pass in your index so here i want to pass in the index 0 for it to be the first element in the list and then as the second argument you pass in what you want to set the value to so again here i can say carl we can print that out as well so we want to do friends array list dot get the element at zero and yes we have properly changed the first element of the list to be carl instead of john next what if we want to remove an element from our array or our array list well again for arrays sorry you just can't do it can't do this with arrays we have a fixed length in our array so i can't just take out this second element and leave it with an array of size 3 because i can't change the size of my array but with arraylist it is dead simple with just a method call friends array list dot remove and as you can see you can specify one of two things when you call this method you can either specify the index so i could pass in zero it will remove that very first element at index zero from our list or i can specify the object itself so let's say i wanted to remove this second element from my arraylist i can either pass in the number one because the index of the second value is one that will remove it or i can pass in the text chris i could pass in the exact element i want to remove and since we've been messing with indexes so much let's switch it up and do it this way and we can prove that we have removed it because now when we get the element at index 1 it should be eric because chris should be removed from the list and yes it did the value at index 1 in our arraylist is now eric gotta say that's another point for arraylist the flexibility is just great the last thing we want to compare is just printing say you wanted to print your array or print your arraylist how do we do it well let's try the first thing you would probably try just dot print line friends array and similarly we'll do system dot out dot print line friends array list let's just print both of those out and compare what they look like so you can see the last two lines we printed out here this is printing out our array and this is printing out our array list so just looking at those you'll probably get a good idea of what i personally like better what happens when you print out an array is java just basically gives you the memory address of that array maybe that's what you want but probably not you probably want to print out all the elements in the array right that's what would make sense and that's exactly what the arraylist implementation does and that's because the arraylist has implemented the tostring method and it has made it print out in this nice fancy way where it does and you know an open bracket it prints out the first element and then a comma a space and the second element and so on see this is just so clean you can print out your list super easily and know exactly what is in it and that's something you just don't get easily with arrays if you want to print out all the elements in an array you pretty much have to do a for loop and iterate over all elements in that array and print it out but with an arraylist it is already done for you so if after going through all of this you say man arraylists really rock i should use those i think you are absolutely right what arraylist really is is a wrapper around java's arrays that make them so much easier to work with it gives you automatic resizing easy adding easy removing and easy printing and that's not even to mention all the other things that you get because an arraylist is part of java's collections so you can see just a glimpse of that by saying okay i'm going to take my friend's arraylist what methods can i call on it oh man i can see if it contains an object i can call for each on it and loop through every element in it i can call a method to see if it's empty i can see what the last index is i can easily sort the list i can create a stream from it and do all kinds of cool things from that it really is awesome how much the arraylist class gives you to use so it'll probably come as no shock to you that arraylist is the one that i use and recommend that you use the vast majority of the time it just makes life so much easier and it makes your code so much easier to work with using arraylist over regular arrays using an arraylist does add a little bit of overhead you know when you're adding and removing values and stuff java has to do some work behind the scenes to make that happen but the vast majority of the time for most use cases i've ever worked with the difference in speed was just so negligible and it flat out didn't matter and the arraylist just being so much easier to work with as a programmer just far and away outweighs the little bit of performance increase you'll get from just using arrays so i just don't think it's worth it to use a raise unless you absolutely have to if you enjoyed this video or learned something please let me know with a like and if you'd like to see more videos like this every single week where we go over a new java lesson or tutorial or complete coding walkthrough please be sure to subscribe so you don't miss the video every week again a special thanks to you for liking and subscribing it's the only way these videos get out to more people so i really do appreciate it i wonder if chris will be offended that i chose to use his name as the example of a friend to remove from my list sorry chris
