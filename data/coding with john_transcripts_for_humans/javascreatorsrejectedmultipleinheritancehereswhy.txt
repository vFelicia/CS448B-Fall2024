With timestamps:

00:00 - you've probably heard that Java doesn't
00:01 - support multiple inheritance that was a
00:04 - very deliberate choice that Java's
00:05 - creators made but why would they choose
00:07 - not to include a feature like multiple
00:09 - inheritance when so many other popular
00:11 - languages like Python and C plus have it
00:14 - also I think they were correct to leave
00:16 - it out and I'll tell you why before we
00:18 - get right into it I also have a full
00:19 - Java course available in a link down in
00:21 - the description there you'll find dozens
00:23 - of videos exclusive to the course where
00:25 - you'll find tons of java knowledge so go
00:27 - check it out now before we talk about
00:29 - why Java's creators chose not to include
00:31 - multiple inheritance we first have to
00:33 - understand exactly what it is now as you
00:35 - may already know inheritance and
00:37 - object-oriented programming is when one
00:40 - class acquires the fields and methods of
00:42 - another so as a very simple example
00:44 - let's say I had this class called animal
00:47 - now this class has a couple of different
00:49 - attributes that would make sense for any
00:51 - animal like say age and name and maybe
00:56 - some kind of a method that enables that
00:58 - animal to make noise now then of course
01:02 - there are a ton of different types of
01:04 - animals that might have their own unique
01:06 - sorts of attributes so I might have a
01:09 - cat class that inherits from the animal
01:12 - class now in this relationship the
01:14 - animal class is called the parent class
01:17 - or sometimes the superclass and the cat
01:19 - class is the child class or subclass by
01:23 - extending the animal class the cat class
01:25 - automatically gets the fields and the
01:28 - methods from the animal class a cat
01:30 - automatically can have an age and a name
01:32 - and some way to make noise but you can
01:35 - also customize that method of making
01:37 - noise to make it specific to cats so
01:41 - here's what that inheritance
01:42 - relationship looks like in the Java code
01:43 - so this class animal is going to be the
01:46 - parent class to our cat class so now in
01:50 - Java if we want this cat class to be a
01:53 - child of the animal class all we have to
01:55 - do is right here at the end of the class
01:57 - declaration is ADD extends and animal so
02:01 - now any cat that we make will also have
02:03 - all of the attributes and methods of the
02:06 - animal class so for example back over
02:08 - here in our main method we can create a
02:12 - new cat we'll call it my cat equals new
02:15 - cat and even though we don't have the
02:17 - make noise method defined specifically
02:20 - in the cat class we can call my cat dot
02:23 - make noise and each cat also has access
02:26 - to the fields that are defined in the
02:29 - animal class so for example I can set a
02:32 - name on my cat even though the name
02:34 - field is only defined in animals my cat
02:37 - dot name equals Kramer so this is how
02:41 - inheritance Works in Java but what
02:44 - exactly is multiple inheritance multiple
02:46 - inheritance is when one class has more
02:49 - than one parent class so let's check out
02:52 - what that would look like so here we
02:54 - have our cat class that extends from the
02:56 - animal class let's say that on top of
02:58 - that we had another other class that
03:01 - extended from animal called dogged and
03:04 - remember there's nothing at all wrong
03:05 - with that this is not what multiple
03:07 - inheritance means a class can totally
03:09 - have more than one child class but what
03:12 - if on top of that we wanted to create
03:15 - another class called Cog that inherited
03:18 - all the features of both a cat and a dog
03:24 - in concept that seems like it might be
03:26 - okay right but let's see what happens
03:28 - when we try to implement that in Java
03:30 - code so let's hop over to our Cog class
03:33 - notice right now it's an empty class
03:34 - it's not extending anything so first
03:37 - let's have it extend the cat class okay
03:40 - that all seems to work fine no errors
03:42 - but when we try and add the dog class we
03:46 - now get an error and it says class
03:48 - cannot extend multiple classes so this
03:51 - is Java telling you flat out you can't
03:53 - do multiple inheritance you're not
03:55 - allowed to inherit from or extend more
03:58 - than one class so clearly Java doesn't
04:01 - allow multiple inheritance but now the
04:02 - question is why what's the harm what's
04:05 - the problem a lot of people when they
04:07 - talk about potential problems or issues
04:09 - with multiple inheritance they'll talk
04:11 - about something called The Diamond
04:12 - problem some people even call it the
04:15 - deadly Diamond of death sounds pretty
04:17 - scary right well here's what it is so
04:19 - let's say that we had our classes set up
04:21 - just like we do here and then let's say
04:23 - that in our cat class we implemented
04:25 - that make noise method in a certain way
04:28 - that would make sense for a cat so in
04:30 - our cat class it might make sense to
04:32 - print out meow terrible handwriting but
04:34 - you get the picture and then what if
04:36 - similarly over in our dog class we
04:39 - implemented that make noise method in a
04:42 - way that made sense for a dog so for a
04:44 - dog maybe we would print out woof but
04:47 - now we have this new Cog class which
04:49 - we're trying to have inherit from both
04:51 - the cat and the dog class and of course
04:54 - since it inherits all the methods from
04:56 - both of its parents it's going to
04:57 - inherit the make noise method from each
05:00 - of those parents but the problem is it's
05:03 - completely ambiguous which version of
05:06 - the make noise method that this Cog
05:09 - class should inherit should it inherit
05:11 - the functionality from the cat class
05:13 - that prints out meow or should it
05:15 - inherit the functionality from dog that
05:17 - prints Out woof this problem is often
05:19 - called The Diamond problem perhaps for
05:21 - obvious reasons the pattern of
05:22 - inheritance that causes this kind of
05:24 - issue is shaped like a diamond so what
05:27 - does Java do about this well basically
05:29 - it just doesn't allow it Java doesn't
05:31 - allow any multiple inheritance so you
05:33 - will never run into the diamond problem
05:34 - but like I said in the intro there are
05:37 - other programming languages like Python
05:38 - and C plus that do allow multiple
05:41 - inheritance so what do those languages
05:43 - do when the diamond problem comes up for
05:46 - the most part they just kind of pick one
05:48 - and as the programmer you just have to
05:50 - know how that particular programming
05:52 - language chooses which one that it
05:54 - accepts for example let's say that this
05:56 - was a programming language that did
05:58 - support multiple inheritance if you are
06:00 - allowed to extend both cat and dog and
06:03 - you were inheriting a method the same
06:05 - method from both of them it has to
06:08 - choose which version of that method that
06:10 - it should inherit and usually it would
06:13 - just choose the first one in the list
06:15 - that you're inheriting from that can
06:18 - change a bit depending on the language
06:19 - that you're using especially for really
06:21 - deep complicated inheritance hierarchies
06:24 - it gets really messy of course the
06:27 - people who created Java could have done
06:29 - exactly the same thing they could have
06:31 - allowed multiple inheritance and then
06:33 - whenever this diamond problem came up it
06:35 - could just pick one and call it a day
06:37 - but instead they chose not to so why
06:40 - number one they wanted to keep the
06:42 - language as simple as they could if they
06:45 - allowed multiple inheritance developers
06:47 - that didn't have a really good feel for
06:49 - how it worked especially when the
06:50 - diamond problem came up would run into
06:52 - all kinds of strange functionality and
06:54 - unexpected problems and number two in
06:56 - languages where multiple inheritance is
06:58 - allowed it's used incredibly rarely
07:01 - basically in a real world scenario
07:03 - there's no reason that you ever have to
07:06 - use it to do what you need to do when
07:08 - they were creating the Java programming
07:10 - language they modeled a lot of it after
07:12 - C plus which was a programming language
07:15 - that a lot of developers use at the time
07:17 - and they did that to make it familiar
07:18 - with those developers which makes sense
07:20 - one of Java's original creators a guy
07:23 - named James Gosling actually wrote about
07:25 - it at the time he said Java omits many
07:28 - rarely used poorly understood confusing
07:31 - features of C plus than in our
07:33 - experience bring more grief than benefit
07:35 - and one of those was multiple
07:37 - inheritance now honestly this argument
07:40 - really resonates with me I've been
07:42 - programming professionally in Java for
07:44 - more than 10 years and I can't think of
07:46 - even one time when I was like oh man I
07:50 - have this big problem and the only way I
07:52 - could possibly solve it would be with
07:54 - multiple inheritance but I don't have it
07:57 - in Java curse you James Gosling now I'm
07:59 - sure sure some of you are just screaming
08:01 - at your screen right now with the
08:03 - perfect example of when multiple
08:05 - inheritance was the only decent solution
08:07 - to some problem you were having if
08:09 - that's you number one let me know in the
08:11 - comments and number two I don't believe
08:14 - you so yes it's true Java does not
08:17 - support multiple inheritance however
08:19 - Java does support a class implementing
08:23 - multiple interfaces that's different
08:25 - from multiple inheritance but almost
08:27 - always gives you the functionality that
08:29 - you're actually looking for and
08:31 - implementing multiple interfaces is
08:33 - something we do all the time all over
08:35 - our code AS Enterprise level Java
08:37 - developers for example in our situation
08:39 - with the Cog class we couldn't extend
08:42 - both cat and dog that's not allowed but
08:44 - maybe what we needed isn't really a
08:47 - class that is both a cat and a dog
08:49 - because that concept doesn't really make
08:52 - much sense anyway maybe what we wanted
08:53 - was more of a cat that offers some of
08:56 - the functionality that a dog might have
08:59 - like Forex example the ability to play
09:01 - fetch well when we want to specify
09:03 - something that a class is able to do
09:06 - like play fetch that's exactly what
09:09 - interfaces are for now interfaces are a
09:12 - huge separate topic that warrant an
09:14 - entire video of their own but briefly an
09:17 - interface is basically just a contract
09:19 - so it says any class that implements me
09:22 - must be able to do these things then
09:25 - when a class implements that interface
09:27 - they are required to provide that
09:30 - functionality so for example I have this
09:32 - interface called Fetch and inside this
09:35 - interface I can add the signature of a
09:38 - fetch method and it takes in no
09:40 - parameters and has no return type so all
09:42 - this interface does is say that any
09:45 - class that chooses to implement this
09:47 - interface must provide their own
09:49 - implementation of this fetch method so
09:53 - back over in our Cog class instead of
09:55 - extending both cat and dog I can extend
09:58 - only the a cat class and then implement
10:02 - the fetch interface and now you can see
10:05 - that we're getting an error here and
10:07 - it's saying that this Cog class because
10:09 - it is implementing the fetch interface
10:11 - it is required to implement this fetch
10:15 - method we signed up for the contract
10:17 - that said that this class will be able
10:18 - to fetch but right now we aren't
10:20 - fulfilling the contract so we have to
10:22 - add that functionality we have to add
10:24 - that method so let's go ahead and
10:26 - implement it and if you're using
10:27 - IntelliJ you can just hover over this
10:29 - error and click Implement methods and
10:32 - then hit OK and it will provide you the
10:34 - method signature for the method that you
10:36 - have to implement okay so we are a cog
10:38 - which is a cat that can fetch so how
10:41 - would a cat fetch so how about we would
10:43 - print out I got the stick but not
10:47 - because you asked me to I did it because
10:51 - I wanted to it will fetch if it pleases
10:55 - it to fetch so now though if I go all
10:57 - the way back to my main method if I
11:00 - create a new Cog object let's call it my
11:03 - Cog equals new Cog since Cog implements
11:07 - the fetch interface I know that I can
11:10 - call mycog Dot Fetch and now if we go
11:13 - ahead and run it of course our fetching
11:16 - cat works as planned what's cool about
11:19 - implementing interfaces is that you
11:21 - don't have the same limitation that you
11:23 - have for extending classes you are
11:25 - totally allowed to implement as many
11:27 - interfaces as you want in a class so
11:30 - back over in our Cog class in addition
11:32 - to implementing fetch we can add any
11:35 - number of other interfaces so we can
11:37 - Implement runnable comparable deprecated
11:41 - serializable so you get the point right
11:43 - you can Implement as many interfaces as
11:46 - you want now of course for all of these
11:48 - interfaces that you implement you are
11:50 - required to then Implement all the
11:52 - methods that they require you to
11:54 - implement so if I hover over this and
11:56 - said okay go ahead and Implement all of
11:58 - these methods I have a lot of work to do
12:01 - in order to fulfill the contracts that
12:03 - I've signed up for for all the
12:05 - interfaces that I'm implementing now the
12:07 - reason that Java gives you the ability
12:08 - to implement multiple interfaces but not
12:11 - inherit from multiple classes is that an
12:13 - interface specifies what you are able to
12:17 - do not what you are and it makes plenty
12:20 - of sense to allow a class to be able to
12:23 - do all kinds of different things
12:25 - extending classes however really
12:28 - specifies what a class is and the
12:31 - creators of java decided that in
12:33 - practice it really made more sense to
12:35 - have a class only be able to extend one
12:38 - other class rather than introduce what
12:40 - they consider to be a ton of unnecessary
12:43 - complexity into the class hierarchies
12:46 - it's a lot more likely that you'll need
12:48 - a cat that can fetch than it is that
12:50 - you'll need some sort of mutant cat dog
12:53 - hybrid if you enjoyed this video or
12:55 - learned something please let me know by
12:56 - hitting the like button and be sure to
12:58 - subscribe so you don't miss each new
12:59 - video and if you didn't like this video
13:01 - thanks for watching anyway not really
13:04 - sure why you're still here but I
13:05 - appreciate it thanks so much for
13:07 - watching I really do appreciate all your
13:09 - support and comments they really mean
13:11 - the world to me and I'll see you next
13:12 - time

Cleaned transcript:

you've probably heard that Java doesn't support multiple inheritance that was a very deliberate choice that Java's creators made but why would they choose not to include a feature like multiple inheritance when so many other popular languages like Python and C plus have it also I think they were correct to leave it out and I'll tell you why before we get right into it I also have a full Java course available in a link down in the description there you'll find dozens of videos exclusive to the course where you'll find tons of java knowledge so go check it out now before we talk about why Java's creators chose not to include multiple inheritance we first have to understand exactly what it is now as you may already know inheritance and objectoriented programming is when one class acquires the fields and methods of another so as a very simple example let's say I had this class called animal now this class has a couple of different attributes that would make sense for any animal like say age and name and maybe some kind of a method that enables that animal to make noise now then of course there are a ton of different types of animals that might have their own unique sorts of attributes so I might have a cat class that inherits from the animal class now in this relationship the animal class is called the parent class or sometimes the superclass and the cat class is the child class or subclass by extending the animal class the cat class automatically gets the fields and the methods from the animal class a cat automatically can have an age and a name and some way to make noise but you can also customize that method of making noise to make it specific to cats so here's what that inheritance relationship looks like in the Java code so this class animal is going to be the parent class to our cat class so now in Java if we want this cat class to be a child of the animal class all we have to do is right here at the end of the class declaration is ADD extends and animal so now any cat that we make will also have all of the attributes and methods of the animal class so for example back over here in our main method we can create a new cat we'll call it my cat equals new cat and even though we don't have the make noise method defined specifically in the cat class we can call my cat dot make noise and each cat also has access to the fields that are defined in the animal class so for example I can set a name on my cat even though the name field is only defined in animals my cat dot name equals Kramer so this is how inheritance Works in Java but what exactly is multiple inheritance multiple inheritance is when one class has more than one parent class so let's check out what that would look like so here we have our cat class that extends from the animal class let's say that on top of that we had another other class that extended from animal called dogged and remember there's nothing at all wrong with that this is not what multiple inheritance means a class can totally have more than one child class but what if on top of that we wanted to create another class called Cog that inherited all the features of both a cat and a dog in concept that seems like it might be okay right but let's see what happens when we try to implement that in Java code so let's hop over to our Cog class notice right now it's an empty class it's not extending anything so first let's have it extend the cat class okay that all seems to work fine no errors but when we try and add the dog class we now get an error and it says class cannot extend multiple classes so this is Java telling you flat out you can't do multiple inheritance you're not allowed to inherit from or extend more than one class so clearly Java doesn't allow multiple inheritance but now the question is why what's the harm what's the problem a lot of people when they talk about potential problems or issues with multiple inheritance they'll talk about something called The Diamond problem some people even call it the deadly Diamond of death sounds pretty scary right well here's what it is so let's say that we had our classes set up just like we do here and then let's say that in our cat class we implemented that make noise method in a certain way that would make sense for a cat so in our cat class it might make sense to print out meow terrible handwriting but you get the picture and then what if similarly over in our dog class we implemented that make noise method in a way that made sense for a dog so for a dog maybe we would print out woof but now we have this new Cog class which we're trying to have inherit from both the cat and the dog class and of course since it inherits all the methods from both of its parents it's going to inherit the make noise method from each of those parents but the problem is it's completely ambiguous which version of the make noise method that this Cog class should inherit should it inherit the functionality from the cat class that prints out meow or should it inherit the functionality from dog that prints Out woof this problem is often called The Diamond problem perhaps for obvious reasons the pattern of inheritance that causes this kind of issue is shaped like a diamond so what does Java do about this well basically it just doesn't allow it Java doesn't allow any multiple inheritance so you will never run into the diamond problem but like I said in the intro there are other programming languages like Python and C plus that do allow multiple inheritance so what do those languages do when the diamond problem comes up for the most part they just kind of pick one and as the programmer you just have to know how that particular programming language chooses which one that it accepts for example let's say that this was a programming language that did support multiple inheritance if you are allowed to extend both cat and dog and you were inheriting a method the same method from both of them it has to choose which version of that method that it should inherit and usually it would just choose the first one in the list that you're inheriting from that can change a bit depending on the language that you're using especially for really deep complicated inheritance hierarchies it gets really messy of course the people who created Java could have done exactly the same thing they could have allowed multiple inheritance and then whenever this diamond problem came up it could just pick one and call it a day but instead they chose not to so why number one they wanted to keep the language as simple as they could if they allowed multiple inheritance developers that didn't have a really good feel for how it worked especially when the diamond problem came up would run into all kinds of strange functionality and unexpected problems and number two in languages where multiple inheritance is allowed it's used incredibly rarely basically in a real world scenario there's no reason that you ever have to use it to do what you need to do when they were creating the Java programming language they modeled a lot of it after C plus which was a programming language that a lot of developers use at the time and they did that to make it familiar with those developers which makes sense one of Java's original creators a guy named James Gosling actually wrote about it at the time he said Java omits many rarely used poorly understood confusing features of C plus than in our experience bring more grief than benefit and one of those was multiple inheritance now honestly this argument really resonates with me I've been programming professionally in Java for more than 10 years and I can't think of even one time when I was like oh man I have this big problem and the only way I could possibly solve it would be with multiple inheritance but I don't have it in Java curse you James Gosling now I'm sure sure some of you are just screaming at your screen right now with the perfect example of when multiple inheritance was the only decent solution to some problem you were having if that's you number one let me know in the comments and number two I don't believe you so yes it's true Java does not support multiple inheritance however Java does support a class implementing multiple interfaces that's different from multiple inheritance but almost always gives you the functionality that you're actually looking for and implementing multiple interfaces is something we do all the time all over our code AS Enterprise level Java developers for example in our situation with the Cog class we couldn't extend both cat and dog that's not allowed but maybe what we needed isn't really a class that is both a cat and a dog because that concept doesn't really make much sense anyway maybe what we wanted was more of a cat that offers some of the functionality that a dog might have like Forex example the ability to play fetch well when we want to specify something that a class is able to do like play fetch that's exactly what interfaces are for now interfaces are a huge separate topic that warrant an entire video of their own but briefly an interface is basically just a contract so it says any class that implements me must be able to do these things then when a class implements that interface they are required to provide that functionality so for example I have this interface called Fetch and inside this interface I can add the signature of a fetch method and it takes in no parameters and has no return type so all this interface does is say that any class that chooses to implement this interface must provide their own implementation of this fetch method so back over in our Cog class instead of extending both cat and dog I can extend only the a cat class and then implement the fetch interface and now you can see that we're getting an error here and it's saying that this Cog class because it is implementing the fetch interface it is required to implement this fetch method we signed up for the contract that said that this class will be able to fetch but right now we aren't fulfilling the contract so we have to add that functionality we have to add that method so let's go ahead and implement it and if you're using IntelliJ you can just hover over this error and click Implement methods and then hit OK and it will provide you the method signature for the method that you have to implement okay so we are a cog which is a cat that can fetch so how would a cat fetch so how about we would print out I got the stick but not because you asked me to I did it because I wanted to it will fetch if it pleases it to fetch so now though if I go all the way back to my main method if I create a new Cog object let's call it my Cog equals new Cog since Cog implements the fetch interface I know that I can call mycog Dot Fetch and now if we go ahead and run it of course our fetching cat works as planned what's cool about implementing interfaces is that you don't have the same limitation that you have for extending classes you are totally allowed to implement as many interfaces as you want in a class so back over in our Cog class in addition to implementing fetch we can add any number of other interfaces so we can Implement runnable comparable deprecated serializable so you get the point right you can Implement as many interfaces as you want now of course for all of these interfaces that you implement you are required to then Implement all the methods that they require you to implement so if I hover over this and said okay go ahead and Implement all of these methods I have a lot of work to do in order to fulfill the contracts that I've signed up for for all the interfaces that I'm implementing now the reason that Java gives you the ability to implement multiple interfaces but not inherit from multiple classes is that an interface specifies what you are able to do not what you are and it makes plenty of sense to allow a class to be able to do all kinds of different things extending classes however really specifies what a class is and the creators of java decided that in practice it really made more sense to have a class only be able to extend one other class rather than introduce what they consider to be a ton of unnecessary complexity into the class hierarchies it's a lot more likely that you'll need a cat that can fetch than it is that you'll need some sort of mutant cat dog hybrid if you enjoyed this video or learned something please let me know by hitting the like button and be sure to subscribe so you don't miss each new video and if you didn't like this video thanks for watching anyway not really sure why you're still here but I appreciate it thanks so much for watching I really do appreciate all your support and comments they really mean the world to me and I'll see you next time
