With timestamps:

00:00 - so you want to create your own custom
00:02 - exception in java but how exactly do you
00:05 - do it we'll walk through the process of
00:06 - creating custom exceptions in detail in
00:09 - this video it's way easier than you
00:11 - might think and we'll also talk about
00:13 - how you can make those custom exceptions
00:15 - way more useful i'm john i'm a lead java
00:17 - software engineer and i also have a full
00:19 - java course available in a link down in
00:21 - the description so go check it out but
00:23 - first thanks to mailgun for sponsoring
00:25 - this video mailgun is how modern
00:27 - companies work with email mail gun is
00:29 - easy to use has amazing customer support
00:32 - and simple but powerful apis that smart
00:34 - developers can use to reach customers at
00:37 - scale so their organizations can grow
00:39 - faster with whatever language you're
00:41 - using including java of course you can
00:43 - use the mail gun apis to send emails
00:45 - with just a few lines of code like this
00:47 - you can send and track marketing and
00:49 - transactional emails remove invalid
00:52 - emails from your lists or prevent fake
00:54 - signups in the first place easily
00:56 - milgann also has an awesome sendtime
00:58 - optimization feature that automatically
01:00 - finds the perfect time to send the email
01:02 - to each and every individual person on
01:05 - your list at the exact time that they're
01:07 - most likely to engage you'll also have
01:09 - access to their team of email experts to
01:12 - help you improve your email
01:13 - deliverability and drive higher
01:15 - conversion rates mailgun works through
01:17 - the entire email lifecycle from
01:19 - conception to delivery and then
01:21 - gathering insights and analytics for
01:23 - your next send mailgun handles over 240
01:26 - billion emails a year for over a hundred
01:29 - thousand companies such as wikipedia dhl
01:32 - toast lyft and microsoft mail gun makes
01:35 - it easier than ever to build connected
01:37 - experiences through email thanks again
01:39 - to mailgun for sponsoring this video try
01:41 - mailgun for free right now by using my
01:43 - link down in the description mailgun.com
01:46 - john now let's get to it okay so
01:49 - creating your own custom exceptions how
01:51 - do you do it well let's start with a
01:53 - quick example of a situation where you
01:55 - might actually want to create your own
01:57 - custom exception so let's say we had a
01:59 - method that all it does is take in an
02:01 - int that represents an age and all it
02:04 - has to do is validate that that is a
02:06 - valid age so that would look something
02:08 - like uh private static void we'll call
02:11 - it validate age and all that would take
02:14 - in is an int age okay and then up here
02:17 - in our main method we can call this
02:20 - validate age method with whatever int we
02:22 - want let's just say 3. now one
02:24 - reasonable validation we might want to
02:26 - use in this method is just validating
02:28 - that this age is not negative because a
02:31 - negative age doesn't make any sense so
02:33 - we can just say if age is less than zero
02:37 - then what we want to do is throw some
02:39 - type of exception that this is an
02:41 - invalid age now there are tons of
02:43 - different types of exceptions that are
02:45 - already built into java and if we wanted
02:47 - we could always just throw a generic
02:50 - exception and some built-in exceptions
02:52 - might get pretty close to the type of
02:54 - exception that we want to throw but what
02:56 - you might want to do is create your very
02:58 - own exception to match this exact
03:00 - situation so how exactly do you do that
03:03 - well the first thing that you need to do
03:05 - is create a new class so over here in
03:08 - our java folder we'll just right click
03:09 - and go to new java class now this class
03:12 - will be our new exception type so we
03:15 - need to name it exactly what we want our
03:18 - new exception to be it's good to be as
03:20 - specific as you can with the name and
03:22 - it's also convention to have exception
03:25 - at the end of the name you don't
03:26 - technically have to but
03:28 - you have to and i'll make sure that you
03:30 - do don't let me catch you making a
03:32 - custom exception without exception at
03:34 - the end of its name i will find out i
03:36 - have eyes everywhere anyway we'll name
03:39 - this one age less than zero exception
03:43 - pretty descriptive name so go ahead and
03:45 - hit enter and it will create that class
03:47 - for us okay so now we've created our
03:49 - exception class right but if we go back
03:52 - to our method here and try to throw
03:56 - a new age less than zero exception we
04:01 - get an error and that's because to make
04:03 - this an exception that we can throw over
04:06 - here in our class declaration we have to
04:09 - add extends exception so now if we go
04:13 - back here that error is gone but we have
04:15 - a new one so what this error is saying
04:17 - is that hey i know here that you're
04:20 - throwing this exception so you either
04:22 - need to surround it with a try catch and
04:24 - deal with the exception or declare up
04:27 - here in the method signature that this
04:29 - method can throw that exception for now
04:32 - we'll just go ahead and add it to our
04:33 - method signature here and we can use
04:35 - intellij to do that by just hovering
04:38 - over the error message and clicking add
04:40 - exception to method signature but now
04:42 - since this method can throw this
04:44 - exception up here where we're calling
04:46 - this method we're going to have to do
04:47 - the same thing so let's go ahead and
04:49 - click add exception to method signature
04:51 - here in our main method also as a quick
04:54 - note though if over in your custom
04:56 - exception class instead of extending
04:59 - exception you extend runtime exception
05:02 - that makes this custom exception into
05:04 - what's called an unchecked exception and
05:07 - for an unchecked exception you
05:09 - technically don't have to have these
05:11 - throws declarations in your methods and
05:14 - you still won't get an error if you
05:16 - don't have them but before you do that
05:18 - be sure to check out my video on checked
05:20 - versus unchecked exceptions to make sure
05:23 - that's something you actually want to do
05:25 - for now we'll go ahead and keep our
05:26 - throws declarations and have this just
05:28 - extend exception you can also check out
05:31 - my exception handling video for
05:33 - everything you need to know about using
05:35 - a try catch anyway there we go now we
05:37 - have no more errors and here in our
05:39 - method we're throwing our very own
05:42 - custom age less than zero exception so
05:44 - now of course if we go ahead and run our
05:46 - program since we're sending in a valid
05:48 - positive age of three we don't get any
05:51 - exceptions but if we change this to
05:53 - something like negative 1 and run it
05:55 - again we can see that we get this age
05:58 - less than 0 exception that we made
06:00 - ourselves pretty cool so really that's
06:03 - how you can get a basic bare bones
06:05 - version of a custom exception literally
06:07 - the only thing that you need to do is
06:10 - create a class that extends exception
06:13 - and you have your very own custom
06:14 - exception however there's definitely a
06:16 - few things you're going to want to do to
06:18 - make this custom exception more useful
06:21 - first notice here where we're throwing
06:23 - our new custom exception we aren't
06:25 - sending any parameters to the
06:27 - constructor method here now if you've
06:30 - ever used a standard exception before
06:32 - you might know that you can pass in some
06:34 - parameters to this constructor if you
06:37 - want for example you can pass in a
06:39 - string message here that will print out
06:42 - along with the exception whenever it's
06:44 - thrown so in here we could put something
06:45 - like oh no
06:47 - something went wrong
06:49 - before we run it we have to change these
06:51 - throws declarations to exception to make
06:54 - it happy so now if we run this whenever
06:57 - it throws this exception it also prints
06:59 - out this string message along with it
07:02 - but now if we try to do the same thing
07:05 - with our own custom exception that we
07:08 - created so maybe in that case the
07:10 - message can be
07:12 - age cannot be negative you see we're
07:14 - getting an error here and that's because
07:16 - our new custom exception class doesn't
07:19 - have any constructors that actually take
07:22 - in that string message as a parameter so
07:24 - how do we go about adding one so we can
07:26 - have this capability well all we have to
07:28 - do is over in our exception class we
07:31 - need to create that new constructor that
07:34 - takes in that string parameter so that
07:36 - would be something like
07:38 - public
07:39 - age less than zero exception and here
07:42 - we'll take in our string message as a
07:44 - parameter but then what do we want to do
07:47 - in the body of this constructor well it
07:49 - turns out since our custom exception is
07:52 - a child of the exception class we can
07:55 - actually call the exception classes
07:58 - version of that constructor directly and
08:00 - we can do that by just calling super
08:02 - here in the body of our constructor and
08:04 - passing in
08:06 - our message as a parameter so our
08:08 - constructor is essentially just calling
08:11 - the exception classes version of the
08:13 - same constructor to do all the hard work
08:15 - so now if we go back to our main program
08:18 - we don't have any errors anymore and now
08:20 - if we go ahead and run it we get our own
08:23 - custom string message printed out along
08:25 - with our custom exception one important
08:27 - thing to note here is that if we try to
08:30 - use the version of the constructor that
08:32 - didn't take any parameters well now we
08:34 - actually get an exception that's kind of
08:36 - weird though right why was this exact
08:38 - thing working before but now that we
08:41 - added that new constructor it's not
08:43 - working anymore well the reason for that
08:45 - is that in java if you create a class
08:47 - but don't create any constructors
08:49 - yourself java will create a constructor
08:52 - for you that takes in no arguments and
08:54 - that's often called a default no args
08:57 - constructor however if you do provide
09:00 - any constructors at all then java won't
09:02 - provide that default constructor for you
09:05 - so once you've provided any other
09:07 - constructor yourself if you still want
09:09 - that no args constructor you're going to
09:12 - have to add it yourself luckily that's
09:14 - pretty easy to do so over here in our
09:17 - custom exception class all we need to do
09:19 - is add public age less than zero
09:22 - exception and just an open and closed
09:24 - parenthesis because this doesn't take in
09:26 - any parameters and you don't even need a
09:28 - message body so you can just open and
09:30 - close curly braces now we have our basic
09:33 - no args constructor available just like
09:35 - we did before now there's another
09:37 - constructor that is offered by the
09:38 - generic exception class that you might
09:41 - also want to add into your own custom
09:43 - class depending on your situation and
09:45 - that's a constructor that actually takes
09:47 - in a throwable as a parameter so it
09:49 - looks like this public age less than
09:52 - zero exception and then as a parameter
09:55 - it takes in a throwable and that
09:57 - throwable is called
09:59 - cause
10:00 - and then inside the constructor all we
10:02 - have to do is call the exception classes
10:05 - version of the same constructor again by
10:07 - just calling super and passing in our
10:10 - cause parameter now this constructor can
10:12 - be particularly useful if the custom
10:14 - exception that you're creating can be
10:17 - caused by some other exception now when
10:20 - that happens and you're throwing your
10:22 - own custom exception you can pass in the
10:25 - throwable that actually caused this
10:28 - exception to be generated so that could
10:30 - be any error or any exception anything
10:32 - like that and then whenever this
10:34 - exception gets printed out it also
10:36 - prints out the cause of that exception
10:39 - whichever throwable caused this
10:41 - exception to be thrown so as a quick
10:43 - example if a runtime exception could
10:46 - cause this age less than zero exception
10:49 - all you have to do is pass in that
10:51 - runtime exception into the constructor
10:54 - when you throw your custom exception and
10:57 - then when you run your code it will show
11:00 - your exception like it did before but
11:02 - also show that it is caused by
11:05 - this particular runtime exception too
11:07 - there's also a version of the
11:09 - constructor that actually takes in both
11:11 - of these things so a string message and
11:14 - a throwable cause just in case you need
11:16 - both and so it's pretty simple to
11:18 - include so you might as well do that as
11:20 - well so that's just public age less than
11:23 - zero exception takes in a string message
11:26 - and a throwable
11:28 - cause we'll call super in exactly the
11:31 - same way and just pass in our message
11:34 - and the cause so now over here where
11:36 - we're throwing our custom exception we
11:38 - can now include both parameters so i can
11:41 - include a message like uh oh no
11:44 - and then also the runtime exception
11:46 - cause and now when we run our code when
11:49 - our exception is thrown it prints out
11:51 - the message here oh no along with the
11:54 - cause this runtime exception now here's
11:56 - another thing that i want to talk about
11:58 - now some of you might be asking now hey
12:00 - why do i need to extend exception can't
12:03 - i just extend throwable here or even
12:06 - extend error if i want to now the answer
12:09 - to that is technically yes but don't
12:13 - again if you do i will find out but now
12:15 - why exactly is that why is it a bad idea
12:18 - to extend throwable or error well part
12:21 - of the answer is just that it's the
12:23 - convention and generally unless you have
12:25 - a really good reason not to it's always
12:27 - best practice to just go by the coding
12:30 - conventions that way it's way easier for
12:32 - anyone who's dealing with your code or
12:35 - maintaining it or working with it in the
12:37 - future everyone would expect that some
12:39 - custom exception would extend exception
12:43 - or maybe runtime exception if you wanted
12:44 - it to be unchecked but not a generic
12:47 - throwable and also not error and that's
12:50 - because errors are separate from
12:52 - exceptions and they usually indicate a
12:55 - serious problem that you should never
12:57 - try to catch and deal with like an out
12:59 - of memory error a stack overflow error
13:01 - things like that so you can create your
13:04 - own subclasses of error but you'll
13:06 - probably never run into a situation
13:08 - where you should do that in your entire
13:11 - java career also it's actually best to
13:13 - extend the type of exception that
13:15 - already exists that is closest to your
13:18 - custom exception as possible so in our
13:21 - case there's an exception that's
13:22 - actually built into java called illegal
13:25 - argument exception and we can see here
13:27 - that it's meant to be used when a method
13:30 - has been passed an illegal or
13:32 - inappropriate argument now that's very
13:34 - similar to what we need because all
13:36 - we're doing here is throwing an
13:38 - exception if this argument passed into
13:40 - this method is invalid so although
13:43 - extending exception is totally fine in
13:45 - our case it's probably a little bit
13:47 - better to actually extend illegal
13:49 - argument exception and if we do that
13:51 - everything we've already written works
13:53 - exactly the same way and we don't have
13:54 - to change anything if you enjoyed this
13:56 - video or learned something please let me
13:58 - know by hitting the like button and be
14:00 - sure to subscribe so you don't miss each
14:01 - new java tutorial and be sure to check
14:03 - out my full java course in the link down
14:05 - in the description there you'll find
14:07 - more than 30 full video lessons that you
14:09 - can enjoy at your own pace fully
14:11 - downloadable so that you can watch
14:13 - wherever and whenever you want once you
14:15 - get it you'll have access to it forever
14:17 - and that includes any lessons that might
14:19 - be added to the course in the future so
14:21 - go check it out as always thank you so
14:24 - much for watching i really do appreciate
14:25 - you being here with me i'll see you next
14:27 - time

Cleaned transcript:

so you want to create your own custom exception in java but how exactly do you do it we'll walk through the process of creating custom exceptions in detail in this video it's way easier than you might think and we'll also talk about how you can make those custom exceptions way more useful i'm john i'm a lead java software engineer and i also have a full java course available in a link down in the description so go check it out but first thanks to mailgun for sponsoring this video mailgun is how modern companies work with email mail gun is easy to use has amazing customer support and simple but powerful apis that smart developers can use to reach customers at scale so their organizations can grow faster with whatever language you're using including java of course you can use the mail gun apis to send emails with just a few lines of code like this you can send and track marketing and transactional emails remove invalid emails from your lists or prevent fake signups in the first place easily milgann also has an awesome sendtime optimization feature that automatically finds the perfect time to send the email to each and every individual person on your list at the exact time that they're most likely to engage you'll also have access to their team of email experts to help you improve your email deliverability and drive higher conversion rates mailgun works through the entire email lifecycle from conception to delivery and then gathering insights and analytics for your next send mailgun handles over 240 billion emails a year for over a hundred thousand companies such as wikipedia dhl toast lyft and microsoft mail gun makes it easier than ever to build connected experiences through email thanks again to mailgun for sponsoring this video try mailgun for free right now by using my link down in the description mailgun.com john now let's get to it okay so creating your own custom exceptions how do you do it well let's start with a quick example of a situation where you might actually want to create your own custom exception so let's say we had a method that all it does is take in an int that represents an age and all it has to do is validate that that is a valid age so that would look something like uh private static void we'll call it validate age and all that would take in is an int age okay and then up here in our main method we can call this validate age method with whatever int we want let's just say 3. now one reasonable validation we might want to use in this method is just validating that this age is not negative because a negative age doesn't make any sense so we can just say if age is less than zero then what we want to do is throw some type of exception that this is an invalid age now there are tons of different types of exceptions that are already built into java and if we wanted we could always just throw a generic exception and some builtin exceptions might get pretty close to the type of exception that we want to throw but what you might want to do is create your very own exception to match this exact situation so how exactly do you do that well the first thing that you need to do is create a new class so over here in our java folder we'll just right click and go to new java class now this class will be our new exception type so we need to name it exactly what we want our new exception to be it's good to be as specific as you can with the name and it's also convention to have exception at the end of the name you don't technically have to but you have to and i'll make sure that you do don't let me catch you making a custom exception without exception at the end of its name i will find out i have eyes everywhere anyway we'll name this one age less than zero exception pretty descriptive name so go ahead and hit enter and it will create that class for us okay so now we've created our exception class right but if we go back to our method here and try to throw a new age less than zero exception we get an error and that's because to make this an exception that we can throw over here in our class declaration we have to add extends exception so now if we go back here that error is gone but we have a new one so what this error is saying is that hey i know here that you're throwing this exception so you either need to surround it with a try catch and deal with the exception or declare up here in the method signature that this method can throw that exception for now we'll just go ahead and add it to our method signature here and we can use intellij to do that by just hovering over the error message and clicking add exception to method signature but now since this method can throw this exception up here where we're calling this method we're going to have to do the same thing so let's go ahead and click add exception to method signature here in our main method also as a quick note though if over in your custom exception class instead of extending exception you extend runtime exception that makes this custom exception into what's called an unchecked exception and for an unchecked exception you technically don't have to have these throws declarations in your methods and you still won't get an error if you don't have them but before you do that be sure to check out my video on checked versus unchecked exceptions to make sure that's something you actually want to do for now we'll go ahead and keep our throws declarations and have this just extend exception you can also check out my exception handling video for everything you need to know about using a try catch anyway there we go now we have no more errors and here in our method we're throwing our very own custom age less than zero exception so now of course if we go ahead and run our program since we're sending in a valid positive age of three we don't get any exceptions but if we change this to something like negative 1 and run it again we can see that we get this age less than 0 exception that we made ourselves pretty cool so really that's how you can get a basic bare bones version of a custom exception literally the only thing that you need to do is create a class that extends exception and you have your very own custom exception however there's definitely a few things you're going to want to do to make this custom exception more useful first notice here where we're throwing our new custom exception we aren't sending any parameters to the constructor method here now if you've ever used a standard exception before you might know that you can pass in some parameters to this constructor if you want for example you can pass in a string message here that will print out along with the exception whenever it's thrown so in here we could put something like oh no something went wrong before we run it we have to change these throws declarations to exception to make it happy so now if we run this whenever it throws this exception it also prints out this string message along with it but now if we try to do the same thing with our own custom exception that we created so maybe in that case the message can be age cannot be negative you see we're getting an error here and that's because our new custom exception class doesn't have any constructors that actually take in that string message as a parameter so how do we go about adding one so we can have this capability well all we have to do is over in our exception class we need to create that new constructor that takes in that string parameter so that would be something like public age less than zero exception and here we'll take in our string message as a parameter but then what do we want to do in the body of this constructor well it turns out since our custom exception is a child of the exception class we can actually call the exception classes version of that constructor directly and we can do that by just calling super here in the body of our constructor and passing in our message as a parameter so our constructor is essentially just calling the exception classes version of the same constructor to do all the hard work so now if we go back to our main program we don't have any errors anymore and now if we go ahead and run it we get our own custom string message printed out along with our custom exception one important thing to note here is that if we try to use the version of the constructor that didn't take any parameters well now we actually get an exception that's kind of weird though right why was this exact thing working before but now that we added that new constructor it's not working anymore well the reason for that is that in java if you create a class but don't create any constructors yourself java will create a constructor for you that takes in no arguments and that's often called a default no args constructor however if you do provide any constructors at all then java won't provide that default constructor for you so once you've provided any other constructor yourself if you still want that no args constructor you're going to have to add it yourself luckily that's pretty easy to do so over here in our custom exception class all we need to do is add public age less than zero exception and just an open and closed parenthesis because this doesn't take in any parameters and you don't even need a message body so you can just open and close curly braces now we have our basic no args constructor available just like we did before now there's another constructor that is offered by the generic exception class that you might also want to add into your own custom class depending on your situation and that's a constructor that actually takes in a throwable as a parameter so it looks like this public age less than zero exception and then as a parameter it takes in a throwable and that throwable is called cause and then inside the constructor all we have to do is call the exception classes version of the same constructor again by just calling super and passing in our cause parameter now this constructor can be particularly useful if the custom exception that you're creating can be caused by some other exception now when that happens and you're throwing your own custom exception you can pass in the throwable that actually caused this exception to be generated so that could be any error or any exception anything like that and then whenever this exception gets printed out it also prints out the cause of that exception whichever throwable caused this exception to be thrown so as a quick example if a runtime exception could cause this age less than zero exception all you have to do is pass in that runtime exception into the constructor when you throw your custom exception and then when you run your code it will show your exception like it did before but also show that it is caused by this particular runtime exception too there's also a version of the constructor that actually takes in both of these things so a string message and a throwable cause just in case you need both and so it's pretty simple to include so you might as well do that as well so that's just public age less than zero exception takes in a string message and a throwable cause we'll call super in exactly the same way and just pass in our message and the cause so now over here where we're throwing our custom exception we can now include both parameters so i can include a message like uh oh no and then also the runtime exception cause and now when we run our code when our exception is thrown it prints out the message here oh no along with the cause this runtime exception now here's another thing that i want to talk about now some of you might be asking now hey why do i need to extend exception can't i just extend throwable here or even extend error if i want to now the answer to that is technically yes but don't again if you do i will find out but now why exactly is that why is it a bad idea to extend throwable or error well part of the answer is just that it's the convention and generally unless you have a really good reason not to it's always best practice to just go by the coding conventions that way it's way easier for anyone who's dealing with your code or maintaining it or working with it in the future everyone would expect that some custom exception would extend exception or maybe runtime exception if you wanted it to be unchecked but not a generic throwable and also not error and that's because errors are separate from exceptions and they usually indicate a serious problem that you should never try to catch and deal with like an out of memory error a stack overflow error things like that so you can create your own subclasses of error but you'll probably never run into a situation where you should do that in your entire java career also it's actually best to extend the type of exception that already exists that is closest to your custom exception as possible so in our case there's an exception that's actually built into java called illegal argument exception and we can see here that it's meant to be used when a method has been passed an illegal or inappropriate argument now that's very similar to what we need because all we're doing here is throwing an exception if this argument passed into this method is invalid so although extending exception is totally fine in our case it's probably a little bit better to actually extend illegal argument exception and if we do that everything we've already written works exactly the same way and we don't have to change anything if you enjoyed this video or learned something please let me know by hitting the like button and be sure to subscribe so you don't miss each new java tutorial and be sure to check out my full java course in the link down in the description there you'll find more than 30 full video lessons that you can enjoy at your own pace fully downloadable so that you can watch wherever and whenever you want once you get it you'll have access to it forever and that includes any lessons that might be added to the course in the future so go check it out as always thank you so much for watching i really do appreciate you being here with me i'll see you next time
