With timestamps:

00:00 - in this video we're going to be coding
00:01 - the insertion sort algorithm in java
00:03 - although it's not the fastest sorting
00:05 - algorithm in the world it's definitely
00:06 - one of the easiest to understand and one
00:08 - of the simplest to code my name is john
00:10 - i'm a lead java software engineer and i
00:12 - love sharing what i've learned with you
00:14 - in a clear and understandable way the
00:15 - full source for this program is
00:16 - available in a link down in the
00:17 - description below so go and grab it i
00:19 - also have a full java course available
00:21 - in the link down in the description if
00:22 - you're interested alright so i know it's
00:24 - really tempting to just jump into
00:26 - eclipse and start coding but before we
00:28 - do we have to make sure we have a clear
00:29 - understanding of how exactly the
00:32 - insertion sort algorithm works but
00:34 - luckily it's pretty straightforward
00:35 - let's say this is our array of numbers
00:37 - that we need to sort all that insertion
00:40 - sort does is walk through this array
00:42 - from beginning to end and taking each
00:44 - value and inserting it into the sorted
00:47 - array wherever it goes let's walk
00:49 - through this example step by step so we
00:51 - start with the first element three a
00:54 - single element is always in order with
00:56 - itself so we can just insert it the next
00:58 - element is the number one and we need to
01:00 - insert it in its proper place in the
01:02 - list which is before the number three
01:05 - next we have the number eight and we
01:07 - insert it in its proper place which is
01:09 - after the number three then we have the
01:10 - number six which needs to be inserted
01:13 - between the three and the eight
01:16 - finally we have the number two which
01:18 - needs to be inserted between the one and
01:21 - the three once we have gone through each
01:23 - element in the array and inserted it
01:25 - into its proper spot we know that we now
01:27 - have a sorted array so you might be
01:30 - saying okay i understand the concept of
01:32 - an insertion sort but how can i think
01:34 - about how we're going to actually code
01:36 - that insertion here's a great way to
01:38 - visualize that again of course we start
01:40 - with the number three which is in order
01:42 - with itself so we can just move on to
01:44 - the next number one what we're going to
01:46 - do is copy the value of this spot in the
01:49 - array out to a temporary variable then
01:51 - what we're going to do from here is walk
01:53 - backwards towards the beginning of the
01:55 - array and for each element if it is
01:57 - greater than one we are going to shift
02:00 - it to the right and we keep going back
02:02 - until we either reach the beginning of
02:04 - the array or we run into a number that
02:07 - is less than the number we're looking at
02:09 - so in this case three is greater than
02:11 - one so we are going to shift it one spot
02:14 - to the right in this case since that's
02:16 - the beginning of the array that's where
02:18 - we now insert our number one then we
02:21 - move on to the next element in the array
02:23 - eight we still copy it out to a
02:25 - temporary variable then we start walking
02:27 - backwards towards the beginning of the
02:29 - array and we compare the number that we
02:31 - find to the number eight and again if
02:33 - it's greater we shift it right in this
02:35 - case three is not greater than eight so
02:37 - we end up making no shifts and inserting
02:40 - eight into its correct spot in the array
02:42 - where it was next we have the number six
02:45 - again we copy six out to a temporary
02:47 - variable and then start walking backward
02:49 - toward the beginning of the array and we
02:51 - compare each number that we run into to
02:53 - six in this case eight is greater than
02:56 - six so we shift it to the right next we
02:59 - compare three with six three is not
03:02 - greater than six so we stop there and
03:04 - insert 6 into its correct spot in the
03:07 - array the final element in our array is
03:09 - the number 2. we copy that 2 out to a
03:11 - temporary variable 8 is greater than 2
03:14 - so we shift it right 6 is also greater
03:16 - than 2 so we shift it to the right 3 is
03:19 - also greater than 2 so we shift it to
03:21 - the right 1 is not greater than 2 so we
03:24 - stop there insert 2 and since that was
03:26 - the final element now we know that we
03:28 - have a perfectly sorted array and now
03:30 - for the fun part let's get coding i'm
03:32 - starting here with a little bit of a
03:33 - setup just so we can easily test the
03:36 - sorting algorithm that we write this
03:37 - first part will create an array of 10
03:40 - random integers between 0 and 99 that
03:43 - just gives us a randomized array that we
03:44 - can sort then we print out the unsorted
03:47 - array then call this insertion sort
03:49 - method which is going to contain the
03:51 - algorithm we're going to write then
03:53 - after that print out the array again
03:54 - hopefully in perfectly sorted order so
03:57 - all the magic here is going to happen
03:58 - inside this insertion sort method where
04:01 - we're going to write our algorithm so
04:02 - let's do that right now in this method
04:04 - the array to be sorted is sent in as the
04:07 - input array parameter so now remember
04:09 - from our example that we want to walk
04:10 - through our unsorted array from
04:12 - beginning to end inserting our values
04:14 - where they go so what we're going to
04:16 - start with is just a basic for loop to
04:18 - walk through the array so for int i
04:21 - equals one now you might be asking
04:23 - though hey john why aren't we starting
04:24 - with into i equals zero like we usually
04:27 - do in a for loop but remember in our
04:29 - example this first element is already
04:31 - sorted with itself there's never
04:32 - anything we need to do with it so it
04:34 - makes sense to just start with the
04:36 - second element in the array which is
04:37 - going to be at index one to go through
04:40 - the entire array we're going to go while
04:42 - i is less than the input array dot
04:46 - length then of course i plus plus to
04:48 - iterate i each time remember how our
04:51 - program is going to work for each value
04:53 - that we look at we're going to take that
04:55 - current value
04:56 - and copy it off to a temporary variable
04:59 - so to do that we're just going to create
05:01 - an int and call it current value and set
05:04 - it equal to the value in that spot in
05:07 - the input array so that would be input
05:09 - array of i next we need to walk our way
05:12 - from the current element in the array
05:14 - back toward the beginning and for each
05:16 - element that we run into that is greater
05:18 - than the current value that we're
05:19 - looking at we need to shift it to the
05:21 - right so how can we walk our way back
05:23 - from here towards the beginning of the
05:24 - array we could probably do it with
05:26 - either a for loop or a while loop in
05:28 - this case i think a while loop is
05:29 - probably a little bit simpler so we're
05:31 - going to use an int j to walk back
05:33 - towards the beginning of the array and
05:35 - we want to initialize it to be one space
05:37 - before the value that we're currently
05:39 - looking at which is i so to have j
05:41 - reference the position right next to it
05:43 - we just have to set j to i minus one now
05:47 - we can start our while loop our while
05:49 - loop is going to have a couple of
05:51 - conditions the first is while j is
05:54 - greater than or equal to
05:56 - zero basically all that's going to do is
05:58 - make us stop walking back once we
06:00 - actually hit the beginning of the array
06:02 - the other part of our condition we're
06:04 - going to look at the value of that spot
06:06 - in the array at j and keep going while
06:09 - that value is greater than the current
06:12 - value that we're looking at at i so this
06:15 - will have us walk back towards the
06:16 - beginning of the array and only stop
06:18 - when we either reach the beginning of
06:20 - the array or until we run into a value
06:22 - that's less than or equal to the current
06:24 - value that we want to insert inside this
06:27 - while loop is where our shifting right
06:29 - is going to happen for example in this
06:31 - case we know that 3 is greater than one
06:33 - so we need to take the value at j
06:36 - currently which is the number three and
06:38 - we want to shift it right by one so to
06:42 - do that we need to take the input array
06:44 - at position j plus one and set it equal
06:48 - to the value of that input array at
06:50 - position j so in this example j is
06:53 - currently the position of this 3 here
06:55 - right so we're going to set the value at
06:57 - j plus 1 to be equal to the value at j
07:01 - so it's going to look like this
07:02 - next inside this while loop to keep
07:04 - moving towards the beginning of the
07:06 - array we just need to decrement j by one
07:09 - so to do that we can just do j minus
07:11 - minus which is the same thing as saying
07:13 - j equals j minus one so what this while
07:16 - loop is going to do is work its way
07:18 - toward the beginning of the array until
07:20 - it finally reaches the beginning of the
07:22 - array or it reaches a number that is
07:24 - less than or equal to the current value
07:26 - that it's looking at and when it does
07:28 - it'll pop out of this while loop and
07:30 - that's when we need to insert this value
07:32 - that we're looking at into its correct
07:34 - spot so to do that we need to set the
07:36 - value at input array position j plus 1
07:40 - and set that equal to current value so
07:43 - in this case what that will do is take
07:45 - this position here and set it to the
07:47 - value that we saved off as a temporary
07:49 - variable all right so let's go ahead and
07:51 - test our insertion sort algorithm with
07:53 - an array of 10 random integers
07:56 - okay so it prints out the before in
07:58 - completely random order and then prints
08:00 - out the after and they are perfectly
08:02 - sorted awesome and we can run it a
08:04 - couple more times to make sure it wasn't
08:07 - a fluke and as you can see with this
08:09 - example even if we get duplicates of the
08:10 - same number like we have two threes here
08:13 - it still does the right thing and keeps
08:14 - them right next to each other in the
08:16 - array now that we know that this works
08:17 - let's have some fun and see how long it
08:19 - takes to sort really large arrays of
08:22 - numbers so instead of just 10 numbers
08:24 - let's do a thousand numbers and also
08:27 - let's make those random numbers be
08:28 - between about zero and ten thousand
08:31 - instead of a hundred all right so that
08:33 - happened
08:34 - pretty instantaneously it took less than
08:36 - one second so let's step it up let's try
08:39 - a hundred thousand we go
08:41 - okay that took a little bit longer took
08:43 - about six seconds so let's try
08:46 - one million here we go
08:50 - okay it took a second just to print them
08:51 - out let's see how long it takes to run
08:54 - still hasn't finished
08:56 - this one is taking quite a while so
08:58 - sorting a hundred thousand elements took
09:00 - about six seconds so you might think
09:02 - that sorting 10 times that amount a
09:04 - million is going to take 10 times as
09:06 - long or about 60 seconds but this
09:08 - algorithm has a time complexity of n
09:11 - squared which means that as you increase
09:13 - the number of elements that you want to
09:15 - sort the amount of time it takes to sort
09:17 - those elements goes up exponentially so
09:20 - the jump from sorting a hundred thousand
09:21 - elements to sorting a million elements
09:24 - could be a lot worse than you think so
09:26 - i'm gonna let this run and we'll come
09:27 - back and see exactly how long it ends up
09:29 - taking okay it finally finished looks
09:32 - like it ended up taking about seven
09:34 - minutes that's not great so this sorting
09:37 - algorithm doesn't make a whole lot of
09:39 - sense for sorting a raise larger than
09:41 - about a hundred thousand or so elements
09:43 - once you get beyond that it starts
09:45 - taking just way too much time of course
09:47 - this is far from the worst sorting
09:49 - algorithm we've looked at check out this
09:51 - video if you want to see one that is
09:52 - truly ridiculous and awful and if you
09:55 - want to try creating a much faster
09:56 - sorting algorithm check out my tutorial
09:58 - on merge sort either way don't stop now
10:01 - and continue your java learning by
10:02 - checking out one of these other videos
10:04 - if you enjoyed this video or learned
10:05 - something please let me know by hitting
10:07 - the like button and leaving a comment
10:08 - and be sure to subscribe so you don't
10:10 - miss each new java tutorial as always
10:12 - thank you so much for watching i really
10:14 - do appreciate having you here with me
10:15 - i'll see you next time

Cleaned transcript:

in this video we're going to be coding the insertion sort algorithm in java although it's not the fastest sorting algorithm in the world it's definitely one of the easiest to understand and one of the simplest to code my name is john i'm a lead java software engineer and i love sharing what i've learned with you in a clear and understandable way the full source for this program is available in a link down in the description below so go and grab it i also have a full java course available in the link down in the description if you're interested alright so i know it's really tempting to just jump into eclipse and start coding but before we do we have to make sure we have a clear understanding of how exactly the insertion sort algorithm works but luckily it's pretty straightforward let's say this is our array of numbers that we need to sort all that insertion sort does is walk through this array from beginning to end and taking each value and inserting it into the sorted array wherever it goes let's walk through this example step by step so we start with the first element three a single element is always in order with itself so we can just insert it the next element is the number one and we need to insert it in its proper place in the list which is before the number three next we have the number eight and we insert it in its proper place which is after the number three then we have the number six which needs to be inserted between the three and the eight finally we have the number two which needs to be inserted between the one and the three once we have gone through each element in the array and inserted it into its proper spot we know that we now have a sorted array so you might be saying okay i understand the concept of an insertion sort but how can i think about how we're going to actually code that insertion here's a great way to visualize that again of course we start with the number three which is in order with itself so we can just move on to the next number one what we're going to do is copy the value of this spot in the array out to a temporary variable then what we're going to do from here is walk backwards towards the beginning of the array and for each element if it is greater than one we are going to shift it to the right and we keep going back until we either reach the beginning of the array or we run into a number that is less than the number we're looking at so in this case three is greater than one so we are going to shift it one spot to the right in this case since that's the beginning of the array that's where we now insert our number one then we move on to the next element in the array eight we still copy it out to a temporary variable then we start walking backwards towards the beginning of the array and we compare the number that we find to the number eight and again if it's greater we shift it right in this case three is not greater than eight so we end up making no shifts and inserting eight into its correct spot in the array where it was next we have the number six again we copy six out to a temporary variable and then start walking backward toward the beginning of the array and we compare each number that we run into to six in this case eight is greater than six so we shift it to the right next we compare three with six three is not greater than six so we stop there and insert 6 into its correct spot in the array the final element in our array is the number 2. we copy that 2 out to a temporary variable 8 is greater than 2 so we shift it right 6 is also greater than 2 so we shift it to the right 3 is also greater than 2 so we shift it to the right 1 is not greater than 2 so we stop there insert 2 and since that was the final element now we know that we have a perfectly sorted array and now for the fun part let's get coding i'm starting here with a little bit of a setup just so we can easily test the sorting algorithm that we write this first part will create an array of 10 random integers between 0 and 99 that just gives us a randomized array that we can sort then we print out the unsorted array then call this insertion sort method which is going to contain the algorithm we're going to write then after that print out the array again hopefully in perfectly sorted order so all the magic here is going to happen inside this insertion sort method where we're going to write our algorithm so let's do that right now in this method the array to be sorted is sent in as the input array parameter so now remember from our example that we want to walk through our unsorted array from beginning to end inserting our values where they go so what we're going to start with is just a basic for loop to walk through the array so for int i equals one now you might be asking though hey john why aren't we starting with into i equals zero like we usually do in a for loop but remember in our example this first element is already sorted with itself there's never anything we need to do with it so it makes sense to just start with the second element in the array which is going to be at index one to go through the entire array we're going to go while i is less than the input array dot length then of course i plus plus to iterate i each time remember how our program is going to work for each value that we look at we're going to take that current value and copy it off to a temporary variable so to do that we're just going to create an int and call it current value and set it equal to the value in that spot in the input array so that would be input array of i next we need to walk our way from the current element in the array back toward the beginning and for each element that we run into that is greater than the current value that we're looking at we need to shift it to the right so how can we walk our way back from here towards the beginning of the array we could probably do it with either a for loop or a while loop in this case i think a while loop is probably a little bit simpler so we're going to use an int j to walk back towards the beginning of the array and we want to initialize it to be one space before the value that we're currently looking at which is i so to have j reference the position right next to it we just have to set j to i minus one now we can start our while loop our while loop is going to have a couple of conditions the first is while j is greater than or equal to zero basically all that's going to do is make us stop walking back once we actually hit the beginning of the array the other part of our condition we're going to look at the value of that spot in the array at j and keep going while that value is greater than the current value that we're looking at at i so this will have us walk back towards the beginning of the array and only stop when we either reach the beginning of the array or until we run into a value that's less than or equal to the current value that we want to insert inside this while loop is where our shifting right is going to happen for example in this case we know that 3 is greater than one so we need to take the value at j currently which is the number three and we want to shift it right by one so to do that we need to take the input array at position j plus one and set it equal to the value of that input array at position j so in this example j is currently the position of this 3 here right so we're going to set the value at j plus 1 to be equal to the value at j so it's going to look like this next inside this while loop to keep moving towards the beginning of the array we just need to decrement j by one so to do that we can just do j minus minus which is the same thing as saying j equals j minus one so what this while loop is going to do is work its way toward the beginning of the array until it finally reaches the beginning of the array or it reaches a number that is less than or equal to the current value that it's looking at and when it does it'll pop out of this while loop and that's when we need to insert this value that we're looking at into its correct spot so to do that we need to set the value at input array position j plus 1 and set that equal to current value so in this case what that will do is take this position here and set it to the value that we saved off as a temporary variable all right so let's go ahead and test our insertion sort algorithm with an array of 10 random integers okay so it prints out the before in completely random order and then prints out the after and they are perfectly sorted awesome and we can run it a couple more times to make sure it wasn't a fluke and as you can see with this example even if we get duplicates of the same number like we have two threes here it still does the right thing and keeps them right next to each other in the array now that we know that this works let's have some fun and see how long it takes to sort really large arrays of numbers so instead of just 10 numbers let's do a thousand numbers and also let's make those random numbers be between about zero and ten thousand instead of a hundred all right so that happened pretty instantaneously it took less than one second so let's step it up let's try a hundred thousand we go okay that took a little bit longer took about six seconds so let's try one million here we go okay it took a second just to print them out let's see how long it takes to run still hasn't finished this one is taking quite a while so sorting a hundred thousand elements took about six seconds so you might think that sorting 10 times that amount a million is going to take 10 times as long or about 60 seconds but this algorithm has a time complexity of n squared which means that as you increase the number of elements that you want to sort the amount of time it takes to sort those elements goes up exponentially so the jump from sorting a hundred thousand elements to sorting a million elements could be a lot worse than you think so i'm gonna let this run and we'll come back and see exactly how long it ends up taking okay it finally finished looks like it ended up taking about seven minutes that's not great so this sorting algorithm doesn't make a whole lot of sense for sorting a raise larger than about a hundred thousand or so elements once you get beyond that it starts taking just way too much time of course this is far from the worst sorting algorithm we've looked at check out this video if you want to see one that is truly ridiculous and awful and if you want to try creating a much faster sorting algorithm check out my tutorial on merge sort either way don't stop now and continue your java learning by checking out one of these other videos if you enjoyed this video or learned something please let me know by hitting the like button and leaving a comment and be sure to subscribe so you don't miss each new java tutorial as always thank you so much for watching i really do appreciate having you here with me i'll see you next time
