With timestamps:

00:01 - hey everybody how's it going john here
00:03 - today in this video we're going to write
00:05 - a hangman game in
00:07 - java and what's more we're going to have
00:08 - a two player version and even a single
00:11 - player
00:11 - version single player hang man how are
00:13 - you going to make that work
00:14 - i will show you and we're going to code
00:16 - it beginning to end the entire thing
00:17 - from scratch right here
00:18 - now before we get started the full
00:20 - source of this hangman game is available
00:22 - in a link down below in the description
00:24 - so go get it all right so first i think
00:26 - we're going to do the hard version of
00:27 - this with one player so you're thinking
00:28 - how are we going to do that how are we
00:30 - going to write a hangman game for just
00:31 - one player you need somebody to
00:33 - give you a word right well we're going
00:34 - to do that with a
00:36 - big huge file full of english words
00:40 - again down the link down in the
00:41 - description it's not my file but go grab
00:43 - it and use it
00:44 - it's awesome so how we're going to make
00:45 - that work is we're just going to find a
00:47 - random word
00:48 - inside that huge file full of words
00:50 - there's like hundreds of thousands of
00:51 - words in that file
00:52 - first things first let's do the file
00:54 - input and we'll just grab
00:56 - all of the words in that file and put it
00:58 - in a big giant list in our program so
00:59 - that we can use it
01:00 - all right so to do that um you might
01:02 - have done a keyboard input with the
01:04 - scanner class well you can also do
01:06 - pretty simple file input with the
01:08 - scanner class and so
01:10 - let's do that so we're going to use a
01:12 - new we're going to create a scanner
01:14 - we'll call it scanner equals new scanner
01:17 - now instead of you doing uh like
01:18 - system.n to get
01:19 - keyboard input like we normally would a
01:21 - keyboard input
01:22 - we're instead going to do a new file
01:26 - to get this with file input and the
01:28 - parameter that it takes that this
01:29 - constructor for new file takes
01:31 - is just the location of the file on our
01:34 - computer so you can just put in the full
01:35 - path just realizing you might not be
01:36 - able to see that all with my wonderful
01:38 - beautiful face in the corner so i moved
01:39 - it down yeah you just paste in the
01:41 - entire path and file name
01:43 - of the dictionary file so now we're
01:44 - going to organize imports
01:46 - because we're using sweet eclipse and it
01:48 - does this all for us and we do the
01:50 - import of java io file for the file
01:52 - class
01:53 - and java util scanner for the scanner
01:54 - class now you can see it's complaining
01:56 - to us because
01:57 - it's forcing us to handle this like file
01:59 - not found exception
02:00 - um so we can just declare that we throw
02:03 - it that we throw a file not found
02:04 - exception we don't care if we can't find
02:06 - the file there's nothing the program can
02:07 - do anyway
02:08 - we can't like handle it in any good way
02:09 - it could just blow up so
02:11 - that's how we'll handle that so now we
02:13 - need to prove that we can actually
02:15 - read the words from the file so let's go
02:18 - ahead and do that here
02:20 - and so we'll do that here by just doing
02:22 - a while
02:24 - scanner.hasnext that's just like while
02:26 - there is another line to still get
02:28 - we want to do a sys out
02:32 - and we're going to print out um just
02:35 - what that next line is scanner.nextline
02:39 - so this is just going to loop the whole
02:40 - file and print out the line
02:42 - uh each time just print out each line of
02:45 - the file uh there it goes
02:47 - you can see there's some freaking weird
02:50 - words in this file
02:51 - so once we get this game working we're
02:53 - going to have a tough time ahead of us
02:55 - but
02:55 - that's for later and also as a side note
02:57 - if you want to make your own dictionary
02:59 - of words and
03:00 - you know exclude all these wacko words
03:02 - that you don't even know what they are
03:03 - that's fine too just make your own word
03:05 - file separate amount by line
03:07 - and this exact same program will work so
03:09 - anyway we've proved that we can loop
03:11 - through the file
03:12 - and just grab each line of it that's
03:14 - pretty cool right we've already done
03:16 - file input we're only a couple lines
03:17 - into this program so now instead of just
03:19 - um
03:19 - printing all these out to align let's
03:21 - actually put it into a list that we can
03:23 - can mess with and do stuff with so we're
03:25 - just gonna say list
03:26 - of we're gonna have a list of strings
03:28 - and we're gonna call it words
03:30 - and equals new array list
03:33 - this little diamond operator just says
03:36 - uh i want to use string 2.
03:37 - you could put string in here also but
03:39 - after java 7 or 8 one of those it's not
03:42 - necessary anymore you don't need it
03:44 - equals new arraylist so we're just
03:46 - declaring a new arraylist
03:48 - and we want java util list we're
03:51 - organized imports
03:52 - so so we've got a new empty list of
03:55 - strings and what we want to do
03:57 - is loop through every line in this file
04:00 - and just add that string to the list so
04:03 - we're going to have a big giant list of
04:04 - 100 000
04:05 - or hundreds of thousands of words
04:07 - instead of printing them out
04:08 - and that just allows us to like work
04:10 - with them in the program more than
04:11 - having to deal with the file so instead
04:12 - of printing it out we're going to
04:14 - do a words dot add
04:18 - scanner dot next line so we're just
04:21 - going to add that word to our list
04:23 - okay so now what we want to do so now
04:26 - in the program we've got our list of
04:28 - words in uh
04:29 - a list called words so what we want the
04:32 - the program to do next for the single
04:34 - player version
04:35 - uh is just to pick a random word out of
04:38 - that giant list
04:39 - that the player has to guess so first in
04:41 - order to do that we're going to need
04:42 - like a randomizer so in
04:44 - java that is done with the random class
04:47 - not just any class the random class not
04:50 - some random class
04:51 - the random class so we're going to call
04:53 - it random rand
04:55 - equals new random
04:58 - whoops all right and then we'll go ahead
05:00 - and organize imports again
05:02 - and we can see we get java util random
05:04 - we're starting to build a nice little
05:06 - list of imports and now we can use
05:10 - this rand but we're going to get our
05:13 - word
05:14 - kind of in one line here let's see if we
05:15 - can do it i think we can do it so what
05:17 - we're going to do is make a new string
05:19 - called
05:19 - word and this is going to be the word
05:21 - that we pick out of that big giant list
05:23 - we might change the name later but word
05:24 - is fine for now
05:25 - string word equals words dot get
05:28 - and this you get an individual index of
05:30 - the list so if you get the zero thing
05:32 - that's the very first
05:34 - word in our list we don't want just the
05:35 - first one we want some random
05:38 - element in that big giant list in order
05:40 - to get that
05:42 - we will say rand
05:45 - dot next int whoops
05:48 - next int and it takes as a parameter
05:52 - just the like the upper bound and so
05:54 - what that means is basically if we put
05:55 - in a hundred this is going to give us a
05:57 - random number between
05:59 - zero and uh this number minus one so in
06:02 - this case
06:02 - zero and ninety nine but we don't we
06:05 - don't just have 99
06:06 - numbers we have a huge list of numbers
06:08 - we don't even know how long it is but we
06:09 - don't need to we can just say
06:11 - um words dot
06:15 - uh size so so this is kind of a lot of
06:17 - little nested method calls but what it
06:19 - does is say
06:20 - hey i want to pick one word from our
06:22 - list of words
06:24 - and the the index of that word that i
06:26 - want i want it to be a random number
06:28 - between zero
06:29 - and the length of my list of words the
06:31 - size of that list so if we had 100 words
06:34 - in our list this would give us a random
06:35 - number between 0 and 100
06:37 - and would get us that word from that
06:39 - list so for right now let's just go
06:41 - ahead and
06:42 - print out this word to the console to
06:43 - make sure it's working right every time
06:44 - we
06:45 - run it it gives us some random word from
06:46 - our list
06:48 - so let's just do a sis out and print out
06:51 - word and run it culminating
06:55 - that's a great word i like that word
06:57 - let's keep running it fidded
06:59 - kukeri xylose obsoleted
07:03 - correctorship under laborer
07:06 - i am learning new words just by running
07:08 - this program where
07:10 - i've definitely heard of that word so i
07:12 - think there's a pretty sweet dictionary
07:14 - full of words
07:15 - so the r code is definitely working to
07:17 - pick a random word in our big giant list
07:20 - awesome so now the core of our one
07:22 - player game is ready now we just need to
07:24 - write
07:25 - all the hard part of the whole hangman
07:28 - game so now our computer
07:29 - can come up with a random word that we
07:31 - the the player need to guess
07:33 - and now we need to create the whole
07:35 - hangman game
07:36 - around it so for some reason you've
07:38 - never played a hangman game before
07:40 - um typically you play it with one other
07:42 - person and they come up with some word
07:43 - or phrase in their head and here we're
07:45 - just using words
07:46 - they come up with some word and um
07:49 - like i say it's a six letter word
07:50 - instead of writing the word they write
07:51 - six dashes
07:52 - you just guess whether a letter appears
07:54 - in that word kind of like wheel of
07:56 - fortune so if i say hmm
07:58 - s well if there is an s he writes
08:00 - everywhere that there is an s
08:02 - he replaces that dash with an s and if
08:04 - an s doesn't appear
08:06 - in that word or phrase you actually
08:08 - start drawing out
08:09 - a hanged man like you start drawing his
08:11 - head and then his
08:13 - arms and his body and his legs and once
08:15 - the full hangman
08:16 - is is drawn out then you lose so it's
08:19 - kind of
08:20 - super morbid but hey that's the way we
08:23 - play kids games right you just
08:24 - draw out dead guys anyway so now in our
08:26 - program we want to print out
08:28 - our word as hyphens right because that's
08:30 - how hangman works we don't just print
08:32 - out hey here's the word guess it no
08:34 - we start out with hyphens and then have
08:35 - the player start to guess letters so
08:37 - let's go ahead and
08:38 - see how we're going to print out
08:41 - our word uh with hyphens so here's how i
08:43 - think it can work right so the core
08:45 - problem that we're trying to solve as
08:47 - programmers here
08:48 - is being able to print out the the
08:51 - length of the word just in dashes
08:54 - but if the player has guessed one of
08:57 - those letters
08:58 - we shouldn't have a dash there anymore
08:59 - we should just have the letter itself so
09:01 - but what i think we can do is keep a
09:03 - list
09:04 - of the letters of the characters that
09:06 - the player has guessed
09:07 - right and then iterate through each
09:10 - letter in our actual word and if it's in
09:14 - the list that the player has guessed we
09:15 - just saw the letter and if not we show a
09:16 - dash
09:17 - so i think that seems pretty simple and
09:18 - straightforward right let's go ahead and
09:20 - create that list we're going to have a
09:21 - list
09:22 - of um character
09:26 - we can't just do char because java
09:28 - doesn't let us do collections
09:29 - of primitive types so we have to do a
09:32 - list of character instead of list of
09:33 - char
09:34 - we're going to call it player guesses uh
09:36 - sounds good enough it's
09:37 - a list of guesses that the player has
09:39 - made equals new array
09:42 - list okay so now we've got our list of
09:47 - characters
09:48 - so now let's go ahead and write the
09:49 - piece of code that's going to
09:51 - look at the word that the player is
09:53 - supposed to be guessing
09:54 - and put dashes in there except uh where
09:57 - the player has already guessed that
09:59 - letter
09:59 - so let's just go ahead and do that with
10:01 - a for loop so we're going to create a
10:03 - new for loop
10:04 - or um we'll just start of course int i
10:07 - equals 0 as every good for loop
10:09 - starts and then i less than we're going
10:12 - to do
10:13 - word dot length we're going to go from
10:16 - the beginning to the end of of the word
10:19 - of course i plus plus as our iterator so
10:22 - what we want to do is
10:23 - if the player has guessed the letter we
10:25 - want to print it and if they haven't
10:26 - guessed the letter yet we want to print
10:27 - a dash
10:28 - so let's just have a simple if statement
10:30 - we're going to check if
10:32 - player guesses dot contains
10:38 - word dot char at
10:42 - index i so basically that is saying if
10:45 - the player has guessed the character
10:48 - at the location i'm currently working at
10:51 - so if that's the case
10:52 - we want to do system dot out dot
10:55 - print not print line because printing a
10:58 - line uh we'll we'll do a new line and
11:01 - we'll
11:02 - end up writing individual letters on
11:03 - each uh you know one per line we don't
11:06 - want to do that we want to just print
11:07 - with the letters one after another so
11:08 - this is just printing a single character
11:09 - and not going down to the next line so
11:11 - then we want to
11:12 - print the actual character otherwise
11:16 - so else we want to print a dash
11:19 - to show that they haven't guessed that
11:20 - character yet
11:22 - so that's as simple as just printing
11:26 - a dash and so now that should go through
11:28 - every letter in the word if they've
11:29 - guessed it it should print it if they
11:30 - haven't it prints a dash
11:31 - and then at the end of this we want to
11:33 - actually we want to actually print out a
11:35 - new line just so that it
11:36 - goes to the next line so now let's go
11:38 - ahead and test this code and see whether
11:40 - it just gives us
11:41 - dashes so this is our word is
11:44 - interchased
11:45 - and right now since we haven't made any
11:46 - guesses we show all dashes and that is
11:49 - correct so now let's work on the code to
11:51 - take the user input
11:52 - of letters and make guesses and actually
11:56 - add
11:57 - letters to that uh player guesses array
12:00 - but first since we're going to need to
12:01 - do this a lot we're going to need the
12:02 - print of the current state of the game
12:04 - kind of
12:05 - a lot let's go ahead and move this to a
12:07 - new method and we we can do that with
12:09 - alt
12:09 - shift m in eclipse here and we just have
12:12 - to pass in the word and the player guess
12:15 - so we're going to need to print we're
12:17 - going to so let's call
12:18 - so let's call it like print word state
12:22 - the current state of the word i guess
12:25 - ah it doesn't really matter now all the
12:26 - logic is nicely contained in this method
12:28 - and whenever we want to print to the
12:29 - current state
12:30 - of the the word of the game we can do
12:33 - that so of course we at some point we
12:35 - also want to get rid of this
12:38 - cheating of printing out the real word
12:39 - but for now while we're programming the
12:40 - game let's keep it in there to make sure
12:41 - our program's working nicely
12:43 - now we need to start the loop of getting
12:45 - the input from the user
12:47 - and adding to that list so to do that
12:50 - let's just print out
12:52 - a quick just a message to the user that
12:53 - says please
12:55 - enter a letter and then actually
12:58 - we're going to need another scanner to
13:00 - do a keyboard input because this one's
13:01 - only for
13:02 - file input so let's just say a scanner
13:05 - we'll call this one keyboard
13:07 - equals new scanner and we are going to
13:09 - need system
13:10 - dot in and we don't want to use this
13:14 - file
13:16 - okay so now we've got a keyboard scanner
13:18 - so now we want to
13:20 - make a new string
13:23 - letter guess equals equals keyboard
13:29 - equals keyboard dot next
13:33 - line so this gets the next string input
13:37 - from the user so now we need to take
13:38 - what they guessed and add it
13:40 - to our list of characters player guesses
13:43 - now you could have like a jerk user who
13:45 - types in like 18 characters and what you
13:48 - just asked them to enter here what we
13:49 - could do is have like a loop if they
13:50 - enter more than one character we say oh
13:52 - no come on
13:53 - enter just one character you jerk but
13:55 - what we're just going to do here is
13:56 - we're just going to take
13:57 - the first character of whatever they put
14:00 - in and it's their problem if they're
14:01 - being a jerk and trying to cheat
14:02 - and so to do that is easy we're just
14:04 - going to take player guesses
14:06 - our list of guesses that the player has
14:07 - made and we're going to add
14:09 - um a new character to that list and the
14:11 - character we're going to add
14:12 - is letter guess uh dot
14:16 - char at zero that's going to get the
14:19 - zeroth character that they put in the
14:20 - very first character whatever it is
14:22 - and add it to the list so now that that
14:24 - guess has been added to the list let's
14:26 - go ahead and
14:27 - print uh the game state again so what it
14:30 - should do is
14:31 - wherever that letter appears now on the
14:33 - real word
14:34 - it should replace that with a real
14:35 - letter so let's uh run that and see if
14:37 - it works i'm excited to see
14:39 - okay so now we have the word twal i have
14:42 - no idea what that is
14:44 - but it says please enter a letter that's
14:46 - right let's say we enter a w
14:49 - and it's working awesome that is so
14:51 - sweet it's working right so it's
14:52 - replacing
14:53 - the letter that we entered with the
14:56 - actual letter instead of just the dash
14:58 - and it's only replacing that letter and
15:00 - not
15:00 - others so now the chord the hangman-ness
15:02 - of the game is is working great so let's
15:04 - so now let's uh loopify this
15:06 - we can keep putting in guesses and until
15:09 - we fill out the word right well it's
15:10 - first like we did uh last time let's
15:12 - take um all of this code and put it in a
15:15 - method of its own
15:16 - and let's just call it like get player
15:20 - guess
15:20 - it's going to take the word that the
15:22 - player has to guess and it's going to
15:23 - take the current list of player guesses
15:24 - it needs all that information
15:26 - so it's automatically created our method
15:28 - for us where it does all that
15:30 - and we don't have to worry about it now
15:31 - let's just just to test our program a
15:33 - little bit more
15:34 - let's just do this all in a while true
15:36 - loop so this is just going to go on
15:38 - forever
15:38 - until we kill it and eventually we will
15:41 - but it's just so we can we know that we
15:42 - can add guesses
15:44 - and have it uh fill out the word for us
15:48 - otoscopy so let's say we put in an o
15:51 - right it should put that o in the three
15:53 - places where there's an o
15:54 - and it does that is sweet so now let's
15:57 - try um the y
16:00 - and it fills that out too and a p
16:03 - awesome
16:04 - this is pretty cool s c
16:08 - and then last well i guess let's try a
16:11 - letter that doesn't have anything to do
16:12 - with it
16:12 - like um r not in there anywhere
16:15 - it doesn't change anything it doesn't
16:17 - tell us it's wrong but it's just not in
16:18 - there
16:19 - so that's working i could write q
16:21 - nothing happens
16:22 - i write a t and we've got the whole word
16:26 - now that's pretty cool how that works
16:28 - right pretty neat so let's say what we
16:30 - want to do now
16:30 - is we want to exit the game once the
16:33 - player has
16:34 - correctly guessed all the letters right
16:35 - that's going to be one of the conditions
16:37 - where the game is over
16:38 - they just guessed all the letters and
16:40 - the game is over they
16:41 - clearly have the word because they
16:42 - guessed all the letters so this is maybe
16:44 - a weird way to do it but here's one way
16:45 - i think we can do it
16:47 - so let's say we're going like we're in
16:49 - this print word state method where we're
16:51 - printing out you know the current state
16:53 - of the player's guesses in relation to
16:55 - the word
16:55 - so what we can do is actually keep a
16:58 - like an int
16:59 - correct count started at zero
17:02 - and what we can do is every time uh when
17:05 - we're going through the word that the
17:07 - the player has already guessed that word
17:09 - we can uh
17:10 - increment correct count and say so
17:12 - correct count
17:14 - plus plus and then at the end of this
17:16 - method we can return whether the player
17:18 - has already guessed all the the
17:19 - characters we can return that as a
17:21 - boolean
17:21 - and we'll know that the player has
17:23 - correctly guessed all the characters
17:24 - if this correct count matches the word
17:27 - length of course
17:28 - first we have to change this from void
17:30 - to boolean because now we'll be
17:31 - returning
17:32 - a boolean value instead of returning
17:34 - nothing and what we'll be returning
17:36 - is the value of word dot length
17:41 - equals correct count
17:45 - okay so now this will be returning true
17:48 - if the player has already guessed
17:50 - all the letters in that word and let's
17:51 - also move this print word state out of
17:54 - this get player guess
17:55 - method because we don't need to always
17:57 - print it when we're getting the player
17:58 - guess
17:58 - we instead want to do that kind of right
18:00 - afterwards that way we can say
18:02 - if print word state
18:06 - so this will return true if uh
18:09 - basically if the player has one and so
18:12 - if
18:12 - the player has won then we want to break
18:16 - so if this method has returned uh true
18:19 - that the player has guessed
18:20 - all the letters then it will break out
18:22 - of this while loop and
18:23 - uh complete the game we can print out a
18:25 - statement that just says uh so sis out
18:29 - you win and this will all this will all
18:32 - change and evolve but for now that's
18:33 - what we're going to do
18:34 - unsloping these are some words
18:39 - all right so u n s
18:42 - oh it did fill out both ends that's good
18:44 - l o
18:45 - p i and g so now it should end the game
18:49 - when i put this in
18:51 - and does awesome so that is working
18:54 - so now but another thing we want uh to
18:56 - allow the player to do
18:58 - is so after they they put in their guess
19:00 - and we
19:01 - we print to the current state of the
19:02 - game uh and of course
19:04 - if they have already won if they guessed
19:05 - everything then we say you won but if
19:07 - not they get a chance to
19:08 - guess the word and if they guess the
19:11 - word correctly then the game is over too
19:13 - and they win
19:13 - so we're going to do is print out
19:15 - another statement sis out
19:19 - please enter your
19:22 - your guess or the word
19:26 - okay and then we're going to accept
19:28 - their guess for the words with keyboard
19:30 - dot next line
19:33 - as usual and we'll just say
19:37 - so if keyboard.nextline
19:41 - dot equals the word
19:46 - so if they guess the right word we will
19:48 - break
19:49 - so right now when the player guesses the
19:51 - correct word
19:52 - it matches then we will break out of
19:54 - here and it'll print you win
19:57 - but what we might want to do is move
19:58 - this u win down to inside these if
20:00 - statements
20:03 - the reason for that is later on we might
20:05 - want to break out of this loop because
20:06 - the player lost we haven't coded that
20:08 - yet
20:08 - but um right now if we left that in
20:12 - every time it broke out even if the
20:13 - player lost it would say you win and
20:15 - that doesn't make any sense
20:16 - so now we have the opportunity to guess
20:18 - the word
20:19 - so brassert brasshart
20:23 - art made from brass so let's type in s
20:26 - is our guess okay so now it says please
20:27 - enter your guess for the word
20:29 - now if i put in something like stupid um
20:34 - it's not right so actually let's print
20:36 - out a quick message that says that's not
20:37 - right
20:40 - so just else cis out
20:46 - nope try again
20:50 - and then it'll it'll keep going so let's
20:52 - go ahead and run that again
20:54 - a psychiatric i don't even care i don't
20:57 - even want to try and pronounce it
20:58 - so let's guess p okay it's in there now
21:00 - please enter your guess for the word
21:03 - blah blah blah blah blah some garbage
21:05 - and it says nope try again
21:06 - enter a letter so quickly another thing
21:08 - i notice that we're missing is we need
21:09 - to print the word state again
21:11 - each time in this loop so let's just go
21:12 - ahead and move this
21:15 - down to here so each time in the loop
21:18 - we'll print the current state get their
21:19 - guess and allow them to guess
21:21 - all right let's do that again coleman
21:25 - gary coleman um m
21:29 - please enter your guess for the word
21:30 - garbage and then it says nope try again
21:32 - and prints out the state of the game
21:34 - again so i think that is helpful i like
21:36 - that enter
21:37 - your guess let's say it's uh e
21:41 - okay so now we have this so let's say if
21:43 - i put in
21:44 - so now what happens if i put in the
21:46 - right word it should end the game
21:48 - coleman and it does you got it okay so
21:51 - now we have all the winning conditions
21:53 - in the game
21:54 - so now for the fun part i think the
21:56 - losing conditions
21:58 - and this is where we're going to have
21:59 - all the fun of printing out the hanged
22:01 - man picture okay so so this is what i've
22:04 - come up with
22:06 - for um what we're going to print out
22:09 - like in text for the hang demand guy
22:11 - right so what we're going to start with
22:12 - is essentially like a line of dashes and
22:15 - these two
22:16 - uh pipes and as the player guesses
22:19 - incorrectly
22:20 - we'll fill out this little this o at the
22:22 - top
22:23 - and then the arm and then the other arm
22:25 - and then the body and then the leg and
22:26 - then the other leg
22:27 - and once this is all printed out that
22:30 - means the player is lost
22:31 - what this equates to is one two three
22:34 - four five
22:35 - six total bad guesses once the player
22:37 - enters six total bad guesses
22:39 - then the game is over some of the fun
22:41 - we're going to have coming up here is
22:43 - printing out um this picture
22:46 - so first i guess for now let's just put
22:48 - this at the beginning of our while loop
22:50 - it could very well move
22:51 - but i think it works fine here for right
22:53 - now so let's just write our code here
22:55 - and then we'll move it out to another
22:56 - method
22:57 - so let's just uh first print out the the
22:59 - top part
23:00 - the the whole thing the guy hangs from
23:02 - so what we're going to do is just cis
23:04 - out and
23:07 - so let's see this is actually what we're
23:09 - going to print out
23:12 - all right so we'll print out this part
23:14 - here in
23:15 - quotes and
23:19 - this part here again we'll need the
23:22 - space in the beginning to uh
23:23 - account for the space uh for the guy's
23:26 - arms later
23:27 - okay so we're always going to print out
23:29 - that we're only going to print out the
23:30 - rest of these as the player
23:31 - guesses wrong values so uh let's also
23:35 - put in
23:36 - a ant um wrong count
23:40 - so we can keep track of how many times
23:42 - the player has been wrong and we're
23:43 - going to start it
23:44 - at zero so
23:47 - if a wrong count
23:51 - is um greater than or equal to
23:54 - one then we want to print out this next
23:58 - line here right
24:01 - let's just paste that in there and this
24:02 - is our next line
24:06 - bam reprint the guy's head then after
24:08 - that if the wrong count
24:10 - is greater than or equal to 2
24:14 - then we also want to print the guy's
24:15 - left arm but then notice that we also
24:17 - have to
24:18 - print uh the other arm if
24:21 - it is three so we don't really
24:22 - necessarily want to do a print line here
24:24 - because that will always skip to the
24:25 - next line and the guy's arm will be all
24:27 - it'll all be in the wrong spot so
24:29 - actually what we want to do is if it's
24:30 - greater than or equal to two we'll just
24:32 - do a system
24:33 - dot out dot print
24:37 - uh the left arm there or the right arm
24:39 - however your perspective works there
24:43 - so we'll print oh yeah we need to
24:45 - actually escape it
24:47 - so that we can get one slash there
24:49 - because that's the escape character so
24:50 - we need to put in two slashes
24:52 - to get one and then we'll also put the
24:54 - space
24:55 - and then in still inside that if
25:00 - we have to say if the wrong count is
25:03 - greater than or equal to
25:04 - three then we do a print line
25:09 - of the other arm so we can put in that
25:12 - arm
25:13 - and finish the line otherwise if it's
25:15 - not greater than or equal to three
25:16 - meaning it's exactly two
25:18 - we need to just do a print line just to
25:20 - finish off the
25:21 - just to do a next line okay so now we've
25:23 - accounted for two
25:24 - and three four is a little easier
25:27 - because there's only one thing on that
25:29 - line
25:31 - so we'll just say after that if the
25:34 - wrong count
25:35 - is greater than or equal to four
25:38 - then we want to print out what is that
25:40 - like space and then a
25:42 - bar a pipe and then
25:45 - five and six are going to be similar to
25:47 - two and three except
25:48 - we got legs instead of arms
25:52 - let's kind of break this let's add some
25:53 - spaces in here to keep this a little bit
25:55 - less confusing this is already pretty
25:56 - confusing but
25:58 - hopefully it's not too bad so if the
25:59 - wrong count is greater than or equal to
26:01 - five then we need to do
26:04 - uh the left leg here
26:08 - with a space afterwards we're just
26:10 - printing that but then if it's greater
26:11 - than or equal to
26:12 - six we want to do uh the other
26:17 - the other leg otherwise it's just five
26:19 - and we want to do a next line all right
26:22 - so now let's get our get rid of our
26:23 - helpful little guy here okay so
26:26 - how we're going to increment this wrong
26:27 - count is i think
26:29 - after so when we're getting the player
26:31 - guess
26:33 - we can have this method also return a
26:35 - boolean
26:36 - um that indicates whether this word
26:40 - um contains the letter that the player
26:42 - guessed right
26:44 - so we're going to say return
26:47 - uh just word dot contains
26:52 - letter guess so that's easy
26:55 - so then out here when we're getting the
26:57 - player guess
26:59 - we can say if not
27:02 - get player guess so we're still getting
27:04 - the guess and doing everything
27:06 - there but if it wasn't contained in the
27:09 - word
27:10 - then we can do wrong count plus plus
27:14 - what we can't do is pass wrongcount as a
27:16 - parameter into the method and make the
27:18 - method
27:19 - increment it that doesn't work because
27:21 - of how java
27:22 - handles passing values into
27:25 - methods it just doesn't work so we have
27:27 - to do it a different way
27:29 - so now let's run our program and see if
27:30 - it prints our hanged man
27:32 - in chastity
27:36 - um so let's just pick uh letter x is not
27:38 - in there
27:39 - so no it didn't that was an incorrect
27:41 - guess and it you have to enter your
27:43 - guess for the word
27:44 - this is wrong nope try again but it
27:46 - printed out our little head
27:48 - that is pretty cool all right now um
27:52 - let's enter
27:52 - another letter just make sure this works
27:56 - t so that worked and i can type in a
27:59 - garbage
28:00 - word but i wasn't an incorrect guess so
28:03 - it still just prints
28:04 - the head let's print out another letter
28:08 - p please enter your guess for the word
28:10 - blah blah blah
28:11 - nothing but we have a left arm so i'm
28:13 - going to keep doing this until i filled
28:14 - out the whole guy just to make sure it
28:15 - works
28:19 - so yeah and so we've put in six uh wrong
28:22 - guesses
28:23 - and it's filled out the whole hanged man
28:24 - so we should lose the game here
28:26 - so we have to still do that
28:29 - first before we get ahead of ourselves
28:30 - let's move all of this complex stuff out
28:33 - to
28:33 - another method so we'll do alt
28:37 - shift m and that's going to be print
28:40 - hanged man and all it needs is the
28:42 - current wrong count it just needs to
28:44 - know how wrong i currently am and that's
28:45 - all it needs to print out uh the hangman
28:48 - so now we just have uh this method call
28:52 - here where we just had where we used to
28:53 - have the very complicated
28:54 - code but now it's abstracted away and we
28:57 - never have to worry about it again
28:58 - so we can print the hangman but then we
29:00 - can say
29:01 - if a wrong count
29:05 - is uh greater than or equal to
29:08 - six then that means the player has lost
29:12 - the hangman is completely printed the
29:14 - player loses and we gotta exit out of
29:15 - this game
29:17 - so we want to do assists out
29:21 - you lose and then break
29:26 - okay so let's just test that out and
29:27 - make sure it ends the game
29:29 - and we lose if we should lose
29:37 - no idea what that is either so let's
29:38 - just put in some garbage it'll fill out
29:41 - our hanged man
29:43 - almost dead and we lose
29:47 - perfect that is working so that's it
29:49 - we've got we've got a complete
29:51 - one player hand man game right so the
29:53 - few outcomes of the game are you can
29:55 - win by guessing all the letters that
29:57 - works you can win by guessing the exact
29:59 - word that works and you can lose by
30:02 - putting in
30:03 - so many guesses that you fill out the
30:05 - hangman so
30:06 - all of that works that's pretty cool
30:08 - right you've created a full hangman game
30:10 - in just a little while and you don't
30:12 - even need a friend you can just use a
30:13 - whacked out computer program that knows
30:15 - hundreds of thousands of words
30:17 - and gives you completely strange words
30:19 - for you to mess with
30:20 - anyway i promised that we would do a two
30:23 - player version as well
30:24 - and guess what that is super easy so all
30:27 - we have to do the only little
30:28 - modification we have to do
30:30 - is change the way that we get our word
30:33 - that's it we can have the player we can
30:36 - have one of the players type in a word
30:38 - um instead of getting a random word from
30:41 - our uh our file like we are right now so
30:44 - way up at the beginning of our program
30:46 - we can just ask the user do we want
30:48 - one or two players so we can just do a
30:50 - sys
30:51 - out and we just say one or two
30:55 - players question mark and then we
30:59 - use well we're going to need this
31:00 - keyboard input up here actually so let's
31:02 - move that
31:03 - we're going to need a keyboard input
31:04 - here and we're just going to say
31:06 - string players
31:11 - equals keyboard dot
31:14 - next line and then just say
31:18 - if so if players dot
31:21 - equals one if they put in one as the
31:25 - string
31:26 - then we want to do everything we already
31:28 - did here to get
31:30 - uh the the the word from the file and
31:32 - all this
31:33 - this crazy stuff here so let's go ahead
31:35 - and cut all this code and put it here
31:38 - in uh this if statement so now it's all
31:41 - in this if statement right but we need
31:43 - this word to be accessible
31:45 - outside of the if statement so we need
31:46 - to declare this word
31:49 - up here before the if statement so let
31:52 - me just get rid of the declaration
31:54 - here as well we only need it declared in
31:56 - one spot and can't declare it twice
31:59 - so now currently our code is complaining
32:00 - because hey this word may not have been
32:02 - initialized and that's right
32:04 - so if the player didn't choose one we're
32:06 - going to assume they mean too so if they
32:08 - type in garbage the code will still work
32:11 - so we'll just say else we assume they
32:13 - mean two players
32:14 - and then we say how about like sis out
32:17 - player one please
32:21 - enter your word and then we just say
32:24 - word equals keyboard
32:27 - dot next line
32:30 - so then after we get that word from the
32:32 - user basically we would like to be able
32:34 - to clear the console
32:35 - output all that output so that the next
32:37 - player can't
32:38 - see what the first player has entered
32:40 - but i looked it up like crazy there's no
32:43 - way to clear
32:44 - the console that works reliably
32:46 - everywhere and i couldn't get it to work
32:48 - i don't think there's a way to do it
32:49 - it's it's it's not intended to work like
32:51 - that for you to be able to clear console
32:53 - so what i'm instead going to do is just
32:56 - put a whole bunch of lines
32:58 - uh before the player starts so the
33:00 - player can still cheat by scrolling way
33:02 - up
33:02 - don't let your stupid friend do that and
33:04 - cheat because hey that's not fun
33:06 - so what we are going to do actually is
33:08 - just print out a whole bunch of new
33:10 - lines like this
33:11 - slash n slash n slash n i'm going to
33:14 - print out a whole bunch of them
33:15 - and i need a whole bunch of them it's a
33:18 - whole bunch of new lines
33:20 - and then print out i don't know like
33:24 - ready for player two
33:27 - good luck just something that indicates
33:31 - a player two it's your turn player one
33:32 - is done
33:33 - they've put in their word and it's your
33:35 - turn so let's go ahead and run this bad
33:38 - boy
33:39 - one or two players let's say we want to
33:40 - do one player
33:43 - okay so it has picked the word for us
33:45 - metrized
33:46 - it still prints it out so in a second we
33:48 - can we can take out this cheating but
33:50 - for now let's just make sure the one
33:51 - player game still works um
33:53 - okay yes it worked metrised you win
33:57 - cool all right all right so now let's go
33:59 - ahead and see if the
34:00 - the two player game is working so let's
34:02 - play two players player one please enter
34:04 - your word
34:05 - um halitosis
34:08 - so now you can see it put a whole bunch
34:10 - of lines here so that
34:12 - we could cheat by scrolling up if we
34:13 - want but we shouldn't
34:15 - you can put in i don't know millions of
34:16 - lines if you really want the player to
34:18 - have a tough time scrolling up to get to
34:20 - it but we're not going to worry about
34:21 - that too much let's just jump through
34:22 - this and make sure this works
34:23 - i can put an s that works great i can
34:25 - guess the word it's wrong
34:27 - i can enter another letter like h fills
34:30 - it in
34:30 - i can enter my guess halitosis and i win
34:34 - awesome that works also there's only a
34:37 - couple of things left to do
34:38 - first take out the cheating right now
34:42 - it's printing out the word
34:44 - don't do that comment it out later on if
34:46 - you need to change
34:47 - uh fancy up your program and do some
34:49 - debugging and know the word
34:51 - just uncomment that line and you'll be
34:53 - golden but for now
34:54 - no more cheating so first let's go ahead
34:56 - and see what this is like
34:57 - without cheating it's probably a lot
34:59 - harder i'm gonna play with one player
35:02 - please enter a letter boy that is a big
35:04 - word
35:05 - wow s okay it's in there i have no idea
35:09 - what my guess is for the word so i'm
35:10 - gonna skip that
35:11 - okay enter a letter a blank a s um guess
35:16 - for the word i still don't have one how
35:18 - about a t
35:19 - no it's not in there enter a letter this
35:22 - is the toughest word
35:24 - one thing i'm thinking of as i play this
35:26 - um if the person loses we should
35:28 - probably print out the word so they know
35:29 - what the heck
35:30 - it was because right now i'm going to be
35:31 - real mad that i don't know what this
35:32 - word is
35:33 - when when this game finishes let's enter
35:35 - so i still have no idea enter a letter
35:42 - i
35:48 - i lose i have no idea what that word was
35:51 - wow i really need to have it print out
35:53 - that word when i lose so when you lose
35:57 - we want to print out the word
36:00 - was plus
36:04 - word so now we'll actually know the
36:07 - mystery when we lose let's try it again
36:09 - that's kind of fun
36:10 - one player another enormous word wow
36:14 - this game hates us
36:15 - s
36:23 - sub a approbation i do not feel bad for
36:27 - not getting
36:28 - sub approbation but it works and it is
36:32 - pretty awesome but that's real tough now
36:34 - what you can do
36:35 - as an enhancement or something is if you
36:37 - want to like limit the difficulty of the
36:39 - game
36:40 - you can have it so it'll only find like
36:42 - words that are like six or seven or ten
36:45 - characters or less or something and only
36:46 - give you
36:47 - those and not sub approbation or you can
36:50 - make it really difficult and say it'll
36:51 - only use words that are you know 10 or
36:53 - higher
36:54 - or you can let the user choose a
36:55 - difficulty and go by the size of words
36:57 - based on that
36:58 - yeah that was a good time that game was
36:59 - a lot of fun to make and now we have a
37:01 - really cool hangman game we can play
37:02 - either by ourselves or with a friend so
37:04 - if you had a lot of fun too and you got
37:06 - some value out of this video please
37:08 - let me know with a like it means so much
37:10 - and if you'd like to see more videos
37:12 - like this in the future where we make
37:13 - fun cool programs in java and do other
37:16 - tutorials like that
37:17 - please be sure to subscribe and you'll
37:19 - be able to see a lot more of this in the
37:20 - future and again if you guys want the
37:22 - full source for this program go grab it
37:24 - in the link down below
37:25 - and we'll see you guys in the next video

Cleaned transcript:

hey everybody how's it going john here today in this video we're going to write a hangman game in java and what's more we're going to have a two player version and even a single player version single player hang man how are you going to make that work i will show you and we're going to code it beginning to end the entire thing from scratch right here now before we get started the full source of this hangman game is available in a link down below in the description so go get it all right so first i think we're going to do the hard version of this with one player so you're thinking how are we going to do that how are we going to write a hangman game for just one player you need somebody to give you a word right well we're going to do that with a big huge file full of english words again down the link down in the description it's not my file but go grab it and use it it's awesome so how we're going to make that work is we're just going to find a random word inside that huge file full of words there's like hundreds of thousands of words in that file first things first let's do the file input and we'll just grab all of the words in that file and put it in a big giant list in our program so that we can use it all right so to do that um you might have done a keyboard input with the scanner class well you can also do pretty simple file input with the scanner class and so let's do that so we're going to use a new we're going to create a scanner we'll call it scanner equals new scanner now instead of you doing uh like system.n to get keyboard input like we normally would a keyboard input we're instead going to do a new file to get this with file input and the parameter that it takes that this constructor for new file takes is just the location of the file on our computer so you can just put in the full path just realizing you might not be able to see that all with my wonderful beautiful face in the corner so i moved it down yeah you just paste in the entire path and file name of the dictionary file so now we're going to organize imports because we're using sweet eclipse and it does this all for us and we do the import of java io file for the file class and java util scanner for the scanner class now you can see it's complaining to us because it's forcing us to handle this like file not found exception um so we can just declare that we throw it that we throw a file not found exception we don't care if we can't find the file there's nothing the program can do anyway we can't like handle it in any good way it could just blow up so that's how we'll handle that so now we need to prove that we can actually read the words from the file so let's go ahead and do that here and so we'll do that here by just doing a while scanner.hasnext that's just like while there is another line to still get we want to do a sys out and we're going to print out um just what that next line is scanner.nextline so this is just going to loop the whole file and print out the line uh each time just print out each line of the file uh there it goes you can see there's some freaking weird words in this file so once we get this game working we're going to have a tough time ahead of us but that's for later and also as a side note if you want to make your own dictionary of words and you know exclude all these wacko words that you don't even know what they are that's fine too just make your own word file separate amount by line and this exact same program will work so anyway we've proved that we can loop through the file and just grab each line of it that's pretty cool right we've already done file input we're only a couple lines into this program so now instead of just um printing all these out to align let's actually put it into a list that we can can mess with and do stuff with so we're just gonna say list of we're gonna have a list of strings and we're gonna call it words and equals new array list this little diamond operator just says uh i want to use string 2. you could put string in here also but after java 7 or 8 one of those it's not necessary anymore you don't need it equals new arraylist so we're just declaring a new arraylist and we want java util list we're organized imports so so we've got a new empty list of strings and what we want to do is loop through every line in this file and just add that string to the list so we're going to have a big giant list of 100 000 or hundreds of thousands of words instead of printing them out and that just allows us to like work with them in the program more than having to deal with the file so instead of printing it out we're going to do a words dot add scanner dot next line so we're just going to add that word to our list okay so now what we want to do so now in the program we've got our list of words in uh a list called words so what we want the the program to do next for the single player version uh is just to pick a random word out of that giant list that the player has to guess so first in order to do that we're going to need like a randomizer so in java that is done with the random class not just any class the random class not some random class the random class so we're going to call it random rand equals new random whoops all right and then we'll go ahead and organize imports again and we can see we get java util random we're starting to build a nice little list of imports and now we can use this rand but we're going to get our word kind of in one line here let's see if we can do it i think we can do it so what we're going to do is make a new string called word and this is going to be the word that we pick out of that big giant list we might change the name later but word is fine for now string word equals words dot get and this you get an individual index of the list so if you get the zero thing that's the very first word in our list we don't want just the first one we want some random element in that big giant list in order to get that we will say rand dot next int whoops next int and it takes as a parameter just the like the upper bound and so what that means is basically if we put in a hundred this is going to give us a random number between zero and uh this number minus one so in this case zero and ninety nine but we don't we don't just have 99 numbers we have a huge list of numbers we don't even know how long it is but we don't need to we can just say um words dot uh size so so this is kind of a lot of little nested method calls but what it does is say hey i want to pick one word from our list of words and the the index of that word that i want i want it to be a random number between zero and the length of my list of words the size of that list so if we had 100 words in our list this would give us a random number between 0 and 100 and would get us that word from that list so for right now let's just go ahead and print out this word to the console to make sure it's working right every time we run it it gives us some random word from our list so let's just do a sis out and print out word and run it culminating that's a great word i like that word let's keep running it fidded kukeri xylose obsoleted correctorship under laborer i am learning new words just by running this program where i've definitely heard of that word so i think there's a pretty sweet dictionary full of words so the r code is definitely working to pick a random word in our big giant list awesome so now the core of our one player game is ready now we just need to write all the hard part of the whole hangman game so now our computer can come up with a random word that we the the player need to guess and now we need to create the whole hangman game around it so for some reason you've never played a hangman game before um typically you play it with one other person and they come up with some word or phrase in their head and here we're just using words they come up with some word and um like i say it's a six letter word instead of writing the word they write six dashes you just guess whether a letter appears in that word kind of like wheel of fortune so if i say hmm s well if there is an s he writes everywhere that there is an s he replaces that dash with an s and if an s doesn't appear in that word or phrase you actually start drawing out a hanged man like you start drawing his head and then his arms and his body and his legs and once the full hangman is is drawn out then you lose so it's kind of super morbid but hey that's the way we play kids games right you just draw out dead guys anyway so now in our program we want to print out our word as hyphens right because that's how hangman works we don't just print out hey here's the word guess it no we start out with hyphens and then have the player start to guess letters so let's go ahead and see how we're going to print out our word uh with hyphens so here's how i think it can work right so the core problem that we're trying to solve as programmers here is being able to print out the the length of the word just in dashes but if the player has guessed one of those letters we shouldn't have a dash there anymore we should just have the letter itself so but what i think we can do is keep a list of the letters of the characters that the player has guessed right and then iterate through each letter in our actual word and if it's in the list that the player has guessed we just saw the letter and if not we show a dash so i think that seems pretty simple and straightforward right let's go ahead and create that list we're going to have a list of um character we can't just do char because java doesn't let us do collections of primitive types so we have to do a list of character instead of list of char we're going to call it player guesses uh sounds good enough it's a list of guesses that the player has made equals new array list okay so now we've got our list of characters so now let's go ahead and write the piece of code that's going to look at the word that the player is supposed to be guessing and put dashes in there except uh where the player has already guessed that letter so let's just go ahead and do that with a for loop so we're going to create a new for loop or um we'll just start of course int i equals 0 as every good for loop starts and then i less than we're going to do word dot length we're going to go from the beginning to the end of of the word of course i plus plus as our iterator so what we want to do is if the player has guessed the letter we want to print it and if they haven't guessed the letter yet we want to print a dash so let's just have a simple if statement we're going to check if player guesses dot contains word dot char at index i so basically that is saying if the player has guessed the character at the location i'm currently working at so if that's the case we want to do system dot out dot print not print line because printing a line uh we'll we'll do a new line and we'll end up writing individual letters on each uh you know one per line we don't want to do that we want to just print with the letters one after another so this is just printing a single character and not going down to the next line so then we want to print the actual character otherwise so else we want to print a dash to show that they haven't guessed that character yet so that's as simple as just printing a dash and so now that should go through every letter in the word if they've guessed it it should print it if they haven't it prints a dash and then at the end of this we want to actually we want to actually print out a new line just so that it goes to the next line so now let's go ahead and test this code and see whether it just gives us dashes so this is our word is interchased and right now since we haven't made any guesses we show all dashes and that is correct so now let's work on the code to take the user input of letters and make guesses and actually add letters to that uh player guesses array but first since we're going to need to do this a lot we're going to need the print of the current state of the game kind of a lot let's go ahead and move this to a new method and we we can do that with alt shift m in eclipse here and we just have to pass in the word and the player guess so we're going to need to print we're going to so let's call so let's call it like print word state the current state of the word i guess ah it doesn't really matter now all the logic is nicely contained in this method and whenever we want to print to the current state of the the word of the game we can do that so of course we at some point we also want to get rid of this cheating of printing out the real word but for now while we're programming the game let's keep it in there to make sure our program's working nicely now we need to start the loop of getting the input from the user and adding to that list so to do that let's just print out a quick just a message to the user that says please enter a letter and then actually we're going to need another scanner to do a keyboard input because this one's only for file input so let's just say a scanner we'll call this one keyboard equals new scanner and we are going to need system dot in and we don't want to use this file okay so now we've got a keyboard scanner so now we want to make a new string letter guess equals equals keyboard equals keyboard dot next line so this gets the next string input from the user so now we need to take what they guessed and add it to our list of characters player guesses now you could have like a jerk user who types in like 18 characters and what you just asked them to enter here what we could do is have like a loop if they enter more than one character we say oh no come on enter just one character you jerk but what we're just going to do here is we're just going to take the first character of whatever they put in and it's their problem if they're being a jerk and trying to cheat and so to do that is easy we're just going to take player guesses our list of guesses that the player has made and we're going to add um a new character to that list and the character we're going to add is letter guess uh dot char at zero that's going to get the zeroth character that they put in the very first character whatever it is and add it to the list so now that that guess has been added to the list let's go ahead and print uh the game state again so what it should do is wherever that letter appears now on the real word it should replace that with a real letter so let's uh run that and see if it works i'm excited to see okay so now we have the word twal i have no idea what that is but it says please enter a letter that's right let's say we enter a w and it's working awesome that is so sweet it's working right so it's replacing the letter that we entered with the actual letter instead of just the dash and it's only replacing that letter and not others so now the chord the hangmanness of the game is is working great so let's so now let's uh loopify this we can keep putting in guesses and until we fill out the word right well it's first like we did uh last time let's take um all of this code and put it in a method of its own and let's just call it like get player guess it's going to take the word that the player has to guess and it's going to take the current list of player guesses it needs all that information so it's automatically created our method for us where it does all that and we don't have to worry about it now let's just just to test our program a little bit more let's just do this all in a while true loop so this is just going to go on forever until we kill it and eventually we will but it's just so we can we know that we can add guesses and have it uh fill out the word for us otoscopy so let's say we put in an o right it should put that o in the three places where there's an o and it does that is sweet so now let's try um the y and it fills that out too and a p awesome this is pretty cool s c and then last well i guess let's try a letter that doesn't have anything to do with it like um r not in there anywhere it doesn't change anything it doesn't tell us it's wrong but it's just not in there so that's working i could write q nothing happens i write a t and we've got the whole word now that's pretty cool how that works right pretty neat so let's say what we want to do now is we want to exit the game once the player has correctly guessed all the letters right that's going to be one of the conditions where the game is over they just guessed all the letters and the game is over they clearly have the word because they guessed all the letters so this is maybe a weird way to do it but here's one way i think we can do it so let's say we're going like we're in this print word state method where we're printing out you know the current state of the player's guesses in relation to the word so what we can do is actually keep a like an int correct count started at zero and what we can do is every time uh when we're going through the word that the the player has already guessed that word we can uh increment correct count and say so correct count plus plus and then at the end of this method we can return whether the player has already guessed all the the characters we can return that as a boolean and we'll know that the player has correctly guessed all the characters if this correct count matches the word length of course first we have to change this from void to boolean because now we'll be returning a boolean value instead of returning nothing and what we'll be returning is the value of word dot length equals correct count okay so now this will be returning true if the player has already guessed all the letters in that word and let's also move this print word state out of this get player guess method because we don't need to always print it when we're getting the player guess we instead want to do that kind of right afterwards that way we can say if print word state so this will return true if uh basically if the player has one and so if the player has won then we want to break so if this method has returned uh true that the player has guessed all the letters then it will break out of this while loop and uh complete the game we can print out a statement that just says uh so sis out you win and this will all this will all change and evolve but for now that's what we're going to do unsloping these are some words all right so u n s oh it did fill out both ends that's good l o p i and g so now it should end the game when i put this in and does awesome so that is working so now but another thing we want uh to allow the player to do is so after they they put in their guess and we we print to the current state of the game uh and of course if they have already won if they guessed everything then we say you won but if not they get a chance to guess the word and if they guess the word correctly then the game is over too and they win so we're going to do is print out another statement sis out please enter your your guess or the word okay and then we're going to accept their guess for the words with keyboard dot next line as usual and we'll just say so if keyboard.nextline dot equals the word so if they guess the right word we will break so right now when the player guesses the correct word it matches then we will break out of here and it'll print you win but what we might want to do is move this u win down to inside these if statements the reason for that is later on we might want to break out of this loop because the player lost we haven't coded that yet but um right now if we left that in every time it broke out even if the player lost it would say you win and that doesn't make any sense so now we have the opportunity to guess the word so brassert brasshart art made from brass so let's type in s is our guess okay so now it says please enter your guess for the word now if i put in something like stupid um it's not right so actually let's print out a quick message that says that's not right so just else cis out nope try again and then it'll it'll keep going so let's go ahead and run that again a psychiatric i don't even care i don't even want to try and pronounce it so let's guess p okay it's in there now please enter your guess for the word blah blah blah blah blah some garbage and it says nope try again enter a letter so quickly another thing i notice that we're missing is we need to print the word state again each time in this loop so let's just go ahead and move this down to here so each time in the loop we'll print the current state get their guess and allow them to guess all right let's do that again coleman gary coleman um m please enter your guess for the word garbage and then it says nope try again and prints out the state of the game again so i think that is helpful i like that enter your guess let's say it's uh e okay so now we have this so let's say if i put in so now what happens if i put in the right word it should end the game coleman and it does you got it okay so now we have all the winning conditions in the game so now for the fun part i think the losing conditions and this is where we're going to have all the fun of printing out the hanged man picture okay so so this is what i've come up with for um what we're going to print out like in text for the hang demand guy right so what we're going to start with is essentially like a line of dashes and these two uh pipes and as the player guesses incorrectly we'll fill out this little this o at the top and then the arm and then the other arm and then the body and then the leg and then the other leg and once this is all printed out that means the player is lost what this equates to is one two three four five six total bad guesses once the player enters six total bad guesses then the game is over some of the fun we're going to have coming up here is printing out um this picture so first i guess for now let's just put this at the beginning of our while loop it could very well move but i think it works fine here for right now so let's just write our code here and then we'll move it out to another method so let's just uh first print out the the top part the the whole thing the guy hangs from so what we're going to do is just cis out and so let's see this is actually what we're going to print out all right so we'll print out this part here in quotes and this part here again we'll need the space in the beginning to uh account for the space uh for the guy's arms later okay so we're always going to print out that we're only going to print out the rest of these as the player guesses wrong values so uh let's also put in a ant um wrong count so we can keep track of how many times the player has been wrong and we're going to start it at zero so if a wrong count is um greater than or equal to one then we want to print out this next line here right let's just paste that in there and this is our next line bam reprint the guy's head then after that if the wrong count is greater than or equal to 2 then we also want to print the guy's left arm but then notice that we also have to print uh the other arm if it is three so we don't really necessarily want to do a print line here because that will always skip to the next line and the guy's arm will be all it'll all be in the wrong spot so actually what we want to do is if it's greater than or equal to two we'll just do a system dot out dot print uh the left arm there or the right arm however your perspective works there so we'll print oh yeah we need to actually escape it so that we can get one slash there because that's the escape character so we need to put in two slashes to get one and then we'll also put the space and then in still inside that if we have to say if the wrong count is greater than or equal to three then we do a print line of the other arm so we can put in that arm and finish the line otherwise if it's not greater than or equal to three meaning it's exactly two we need to just do a print line just to finish off the just to do a next line okay so now we've accounted for two and three four is a little easier because there's only one thing on that line so we'll just say after that if the wrong count is greater than or equal to four then we want to print out what is that like space and then a bar a pipe and then five and six are going to be similar to two and three except we got legs instead of arms let's kind of break this let's add some spaces in here to keep this a little bit less confusing this is already pretty confusing but hopefully it's not too bad so if the wrong count is greater than or equal to five then we need to do uh the left leg here with a space afterwards we're just printing that but then if it's greater than or equal to six we want to do uh the other the other leg otherwise it's just five and we want to do a next line all right so now let's get our get rid of our helpful little guy here okay so how we're going to increment this wrong count is i think after so when we're getting the player guess we can have this method also return a boolean um that indicates whether this word um contains the letter that the player guessed right so we're going to say return uh just word dot contains letter guess so that's easy so then out here when we're getting the player guess we can say if not get player guess so we're still getting the guess and doing everything there but if it wasn't contained in the word then we can do wrong count plus plus what we can't do is pass wrongcount as a parameter into the method and make the method increment it that doesn't work because of how java handles passing values into methods it just doesn't work so we have to do it a different way so now let's run our program and see if it prints our hanged man in chastity um so let's just pick uh letter x is not in there so no it didn't that was an incorrect guess and it you have to enter your guess for the word this is wrong nope try again but it printed out our little head that is pretty cool all right now um let's enter another letter just make sure this works t so that worked and i can type in a garbage word but i wasn't an incorrect guess so it still just prints the head let's print out another letter p please enter your guess for the word blah blah blah nothing but we have a left arm so i'm going to keep doing this until i filled out the whole guy just to make sure it works so yeah and so we've put in six uh wrong guesses and it's filled out the whole hanged man so we should lose the game here so we have to still do that first before we get ahead of ourselves let's move all of this complex stuff out to another method so we'll do alt shift m and that's going to be print hanged man and all it needs is the current wrong count it just needs to know how wrong i currently am and that's all it needs to print out uh the hangman so now we just have uh this method call here where we just had where we used to have the very complicated code but now it's abstracted away and we never have to worry about it again so we can print the hangman but then we can say if a wrong count is uh greater than or equal to six then that means the player has lost the hangman is completely printed the player loses and we gotta exit out of this game so we want to do assists out you lose and then break okay so let's just test that out and make sure it ends the game and we lose if we should lose no idea what that is either so let's just put in some garbage it'll fill out our hanged man almost dead and we lose perfect that is working so that's it we've got we've got a complete one player hand man game right so the few outcomes of the game are you can win by guessing all the letters that works you can win by guessing the exact word that works and you can lose by putting in so many guesses that you fill out the hangman so all of that works that's pretty cool right you've created a full hangman game in just a little while and you don't even need a friend you can just use a whacked out computer program that knows hundreds of thousands of words and gives you completely strange words for you to mess with anyway i promised that we would do a two player version as well and guess what that is super easy so all we have to do the only little modification we have to do is change the way that we get our word that's it we can have the player we can have one of the players type in a word um instead of getting a random word from our uh our file like we are right now so way up at the beginning of our program we can just ask the user do we want one or two players so we can just do a sys out and we just say one or two players question mark and then we use well we're going to need this keyboard input up here actually so let's move that we're going to need a keyboard input here and we're just going to say string players equals keyboard dot next line and then just say if so if players dot equals one if they put in one as the string then we want to do everything we already did here to get uh the the the word from the file and all this this crazy stuff here so let's go ahead and cut all this code and put it here in uh this if statement so now it's all in this if statement right but we need this word to be accessible outside of the if statement so we need to declare this word up here before the if statement so let me just get rid of the declaration here as well we only need it declared in one spot and can't declare it twice so now currently our code is complaining because hey this word may not have been initialized and that's right so if the player didn't choose one we're going to assume they mean too so if they type in garbage the code will still work so we'll just say else we assume they mean two players and then we say how about like sis out player one please enter your word and then we just say word equals keyboard dot next line so then after we get that word from the user basically we would like to be able to clear the console output all that output so that the next player can't see what the first player has entered but i looked it up like crazy there's no way to clear the console that works reliably everywhere and i couldn't get it to work i don't think there's a way to do it it's it's it's not intended to work like that for you to be able to clear console so what i'm instead going to do is just put a whole bunch of lines uh before the player starts so the player can still cheat by scrolling way up don't let your stupid friend do that and cheat because hey that's not fun so what we are going to do actually is just print out a whole bunch of new lines like this slash n slash n slash n i'm going to print out a whole bunch of them and i need a whole bunch of them it's a whole bunch of new lines and then print out i don't know like ready for player two good luck just something that indicates a player two it's your turn player one is done they've put in their word and it's your turn so let's go ahead and run this bad boy one or two players let's say we want to do one player okay so it has picked the word for us metrized it still prints it out so in a second we can we can take out this cheating but for now let's just make sure the one player game still works um okay yes it worked metrised you win cool all right all right so now let's go ahead and see if the the two player game is working so let's play two players player one please enter your word um halitosis so now you can see it put a whole bunch of lines here so that we could cheat by scrolling up if we want but we shouldn't you can put in i don't know millions of lines if you really want the player to have a tough time scrolling up to get to it but we're not going to worry about that too much let's just jump through this and make sure this works i can put an s that works great i can guess the word it's wrong i can enter another letter like h fills it in i can enter my guess halitosis and i win awesome that works also there's only a couple of things left to do first take out the cheating right now it's printing out the word don't do that comment it out later on if you need to change uh fancy up your program and do some debugging and know the word just uncomment that line and you'll be golden but for now no more cheating so first let's go ahead and see what this is like without cheating it's probably a lot harder i'm gonna play with one player please enter a letter boy that is a big word wow s okay it's in there i have no idea what my guess is for the word so i'm gonna skip that okay enter a letter a blank a s um guess for the word i still don't have one how about a t no it's not in there enter a letter this is the toughest word one thing i'm thinking of as i play this um if the person loses we should probably print out the word so they know what the heck it was because right now i'm going to be real mad that i don't know what this word is when when this game finishes let's enter so i still have no idea enter a letter i i lose i have no idea what that word was wow i really need to have it print out that word when i lose so when you lose we want to print out the word was plus word so now we'll actually know the mystery when we lose let's try it again that's kind of fun one player another enormous word wow this game hates us s sub a approbation i do not feel bad for not getting sub approbation but it works and it is pretty awesome but that's real tough now what you can do as an enhancement or something is if you want to like limit the difficulty of the game you can have it so it'll only find like words that are like six or seven or ten characters or less or something and only give you those and not sub approbation or you can make it really difficult and say it'll only use words that are you know 10 or higher or you can let the user choose a difficulty and go by the size of words based on that yeah that was a good time that game was a lot of fun to make and now we have a really cool hangman game we can play either by ourselves or with a friend so if you had a lot of fun too and you got some value out of this video please let me know with a like it means so much and if you'd like to see more videos like this in the future where we make fun cool programs in java and do other tutorials like that please be sure to subscribe and you'll be able to see a lot more of this in the future and again if you guys want the full source for this program go grab it in the link down below and we'll see you guys in the next video
