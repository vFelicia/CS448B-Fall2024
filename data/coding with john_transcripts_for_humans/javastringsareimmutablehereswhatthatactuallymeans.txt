With timestamps:

00:00 - you've probably heard the concept that
00:01 - strings are immutable in java which
00:03 - means they can't be changed but you may
00:04 - be thinking hey i've changed a string
00:06 - object before all you have to do is take
00:07 - your variable and set it to something
00:09 - else yes you can do that but that's not
00:11 - what string immutability means in this
00:12 - video we'll talk about what strings
00:14 - being immutable actually does mean all
00:15 - the reasons why they were made to be
00:17 - immutable and what it means to your
00:18 - programs my name is john i'm a lead java
00:20 - software engineer and i love sharing
00:22 - what i've learned in a clear
00:22 - understandable way so if you like this
00:24 - video consider subscribing so you don't
00:25 - miss each new java tutorial i also have
00:27 - a full java course available in a link
00:28 - down in the description if you're
00:29 - interested so go check it out all right
00:31 - so we know that string objects are
00:33 - immutable and they can't be changed but
00:34 - you know that you can declare some
00:36 - string and set it to some initial value
00:38 - and if you want you know you can set it
00:39 - to some other value right so what's the
00:40 - deal there to answer that question it's
00:42 - important to know what actually happens
00:43 - when you create a string object so in
00:45 - our example we create this name variable
00:47 - and assign it the value john what java
00:49 - does is create that string variable
00:51 - called name but that name variable isn't
00:53 - the string object itself what it is is a
00:55 - reference to a string object in memory
00:57 - that it creates with the value of john
01:00 - but when you take this name variable and
01:02 - assign it a new value java doesn't
01:04 - actually modify this string object in
01:06 - memory what it does is create a brand
01:08 - new string object in memory with the
01:11 - value larry and changes this name
01:13 - variable to point to that string object
01:15 - instead and it no longer points to that
01:17 - john string so when we say that string
01:19 - objects are immutable we're talking
01:20 - about the string object in memory the
01:24 - string variables themselves can be
01:26 - changed to point to whatever string we
01:27 - want it's the string objects themselves
01:30 - that are not changeable they're
01:31 - immutable so that's cool and all right
01:33 - but who cares why does it matter why do
01:35 - we not want to be able to change these
01:37 - string objects there's actually a few
01:38 - great reasons the first reason is that
01:40 - it enables java to save a ton of memory
01:42 - space so let's say we had this string
01:44 - name equals john then we also had string
01:47 - another name and it also equals john
01:49 - these are of course the exact same
01:50 - string literals right when you create
01:52 - multiple string variables and set them
01:54 - all to the same literal string values
01:56 - java does something pretty smart so of
01:58 - course java creates another variable
02:00 - another
02:01 - name flawless handwriting and you might
02:03 - think that java is going to go ahead and
02:04 - create a whole new object with the value
02:06 - of john and it's just going to point to
02:08 - that right well it actually doesn't do
02:10 - that when java creates a string object
02:12 - from a literal it actually puts that
02:14 - string object in something called the
02:17 - string
02:18 - pool and then every time another string
02:20 - literal is created java will check that
02:22 - string pool to see if that value is
02:25 - already anywhere in there so over here
02:26 - when we say another name equals the
02:28 - literal string value john java goes okay
02:31 - do i have that john anywhere in the pool
02:33 - already ah yes i do and it takes that
02:35 - another name string variable and points
02:37 - it to the exact same string object that
02:40 - it already created before that's pretty
02:41 - cool right it's using half the memory
02:43 - that it would if it were to just create
02:45 - a brand new string object each time but
02:46 - what does that have to do with strings
02:48 - being immutable well the string objects
02:49 - weren't immutable this wouldn't work at
02:51 - all if you had both of these string
02:52 - variables pointing to the exact same
02:54 - string object in memory if this name
02:56 - variable was able to change this string
02:58 - object in memory like instead of saying
03:00 - john it said carl that would also change
03:03 - the value of the string being referenced
03:05 - by our another name variable so this
03:07 - whole memory saving scheme using the
03:08 - string pool wouldn't even be possible if
03:11 - strings were changeable but because
03:12 - strings are immutable we don't have to
03:14 - worry about any of that we can have 2 3
03:16 - 10
03:17 - a million different variables all with
03:19 - the exact same string value and pointing
03:21 - to the same string object in memory and
03:23 - we know that none of them are going to
03:24 - be disrupted because that string object
03:26 - and memory can never be changed there is
03:28 - something to keep in mind there though
03:29 - so java will do that automatically with
03:32 - string literals like this it'll
03:34 - automatically use that string pool but
03:36 - if instead you go ahead and create
03:38 - another string variable a third name and
03:41 - instead of just assigning it to a string
03:43 - literal you use the new keyword and say
03:45 - new string john so java will go ahead
03:48 - and create that third name variable but
03:51 - because we use the new keyword it won't
03:53 - use this shared object in the string
03:55 - pool instead it'll go ahead and create a
03:57 - brand new object outside of the string
03:59 - pool with the value of john even though
04:02 - it has the exact same value in it java
04:04 - will go and create a whole separate
04:05 - object for it and there's a way we can
04:07 - prove that too if we print out the value
04:10 - of name double equals another name
04:13 - java's double equals will always return
04:15 - true if both of these variables are
04:17 - referring to the exact same object in
04:19 - memory and of course we know that our
04:20 - name and another name variables should
04:22 - both be pointing to the exact same john
04:24 - string in the string pool and if we go
04:26 - ahead and run our program yes indeed it
04:28 - prints out true but if instead we
04:29 - compared name with a third name it
04:32 - prints out false and that's because the
04:34 - name and third name variables are
04:36 - pointing to separate strings in memory
04:39 - they're not pointing to the same objects
04:40 - the second reason that java has chosen
04:42 - to have immutable strings is for
04:43 - security so let's say we had uh some
04:45 - method public void add money to account
04:49 - and that takes in a string account
04:51 - holder and like an int or money to add
04:55 - you know for like a simple banking
04:56 - system this could be a method that just
04:58 - adds some money to somebody's account so
04:59 - if you were to write this method you
05:00 - might have some like validations to make
05:02 - sure this is an okay transaction to make
05:04 - and then you have a bunch of code to
05:05 - actually add the money to the account
05:07 - but if string objects could be changed
05:08 - you have a potential security flaw here
05:10 - this method will be called from
05:12 - somewhere else in the code right so i
05:13 - can call add money to account and pass
05:16 - in the name string which should be
05:17 - referring to the value john and some
05:19 - amount of money like uh five thousand
05:21 - dollars and we do need to go ahead and
05:22 - make this method static so we can call
05:24 - it from here so we've got a situation
05:25 - like this where this name variable is
05:27 - pointing to the string object in memory
05:29 - with the value john and when it's passed
05:31 - into that method there's another
05:32 - variable called account holder and
05:34 - that's going to be pointing to that
05:35 - exact same string object in memory but
05:37 - the code here that's calling this method
05:39 - still has access to this name variable
05:42 - that is pointing to the string object in
05:44 - memory right so if java allowed changing
05:46 - that string object in memory you could
05:48 - write some really mean nefarious code
05:50 - right here that would try to wait until
05:52 - these validations are performed in this
05:54 - method and then it can go and use this
05:56 - name reference to this object in memory
05:58 - and it could just change it to something
06:00 - completely different like carl it just
06:02 - did all its validations on the account
06:04 - holder being john but then when it goes
06:06 - to actually add the money to the account
06:08 - it adds it to carl's account instead but
06:10 - that's not the case in java because
06:12 - strings are immutable it doesn't matter
06:15 - that this name variable still has a
06:16 - reference to that same shared object in
06:18 - memory this method knows that the string
06:20 - object that this account holder variable
06:22 - is pointing to is never going to change
06:25 - with strings being immutable that
06:26 - security risk just goes away that leads
06:28 - to the third benefit of immutable
06:30 - strings which is that strings are
06:31 - completely thread safe so in your java
06:33 - program you could have dozens or
06:34 - hundreds or thousands of threads all
06:37 - pointing to the exact same string object
06:39 - in memory and all of them can be reading
06:41 - that value from memory whenever they
06:42 - want even though all those threads are
06:44 - using it none of them are able to change
06:46 - it so they can all use it completely
06:47 - safely if you learned a little something
06:49 - in this video let me know by hitting the
06:50 - like button and as always if you really
06:51 - want to support the channel you can do
06:52 - the whole youtube trifecta of leaving a
06:54 - like a comment and hitting the subscribe
06:56 - button and if i got something wrong here
06:57 - feel free to yell and scream at me in
06:59 - the comments and be sure to check out
07:00 - all my other java videos as well i know
07:01 - you'll find a ton of stuff you'll like
07:02 - thank you so much for watching i'll see
07:04 - you next time

Cleaned transcript:

you've probably heard the concept that strings are immutable in java which means they can't be changed but you may be thinking hey i've changed a string object before all you have to do is take your variable and set it to something else yes you can do that but that's not what string immutability means in this video we'll talk about what strings being immutable actually does mean all the reasons why they were made to be immutable and what it means to your programs my name is john i'm a lead java software engineer and i love sharing what i've learned in a clear understandable way so if you like this video consider subscribing so you don't miss each new java tutorial i also have a full java course available in a link down in the description if you're interested so go check it out all right so we know that string objects are immutable and they can't be changed but you know that you can declare some string and set it to some initial value and if you want you know you can set it to some other value right so what's the deal there to answer that question it's important to know what actually happens when you create a string object so in our example we create this name variable and assign it the value john what java does is create that string variable called name but that name variable isn't the string object itself what it is is a reference to a string object in memory that it creates with the value of john but when you take this name variable and assign it a new value java doesn't actually modify this string object in memory what it does is create a brand new string object in memory with the value larry and changes this name variable to point to that string object instead and it no longer points to that john string so when we say that string objects are immutable we're talking about the string object in memory the string variables themselves can be changed to point to whatever string we want it's the string objects themselves that are not changeable they're immutable so that's cool and all right but who cares why does it matter why do we not want to be able to change these string objects there's actually a few great reasons the first reason is that it enables java to save a ton of memory space so let's say we had this string name equals john then we also had string another name and it also equals john these are of course the exact same string literals right when you create multiple string variables and set them all to the same literal string values java does something pretty smart so of course java creates another variable another name flawless handwriting and you might think that java is going to go ahead and create a whole new object with the value of john and it's just going to point to that right well it actually doesn't do that when java creates a string object from a literal it actually puts that string object in something called the string pool and then every time another string literal is created java will check that string pool to see if that value is already anywhere in there so over here when we say another name equals the literal string value john java goes okay do i have that john anywhere in the pool already ah yes i do and it takes that another name string variable and points it to the exact same string object that it already created before that's pretty cool right it's using half the memory that it would if it were to just create a brand new string object each time but what does that have to do with strings being immutable well the string objects weren't immutable this wouldn't work at all if you had both of these string variables pointing to the exact same string object in memory if this name variable was able to change this string object in memory like instead of saying john it said carl that would also change the value of the string being referenced by our another name variable so this whole memory saving scheme using the string pool wouldn't even be possible if strings were changeable but because strings are immutable we don't have to worry about any of that we can have 2 3 10 a million different variables all with the exact same string value and pointing to the same string object in memory and we know that none of them are going to be disrupted because that string object and memory can never be changed there is something to keep in mind there though so java will do that automatically with string literals like this it'll automatically use that string pool but if instead you go ahead and create another string variable a third name and instead of just assigning it to a string literal you use the new keyword and say new string john so java will go ahead and create that third name variable but because we use the new keyword it won't use this shared object in the string pool instead it'll go ahead and create a brand new object outside of the string pool with the value of john even though it has the exact same value in it java will go and create a whole separate object for it and there's a way we can prove that too if we print out the value of name double equals another name java's double equals will always return true if both of these variables are referring to the exact same object in memory and of course we know that our name and another name variables should both be pointing to the exact same john string in the string pool and if we go ahead and run our program yes indeed it prints out true but if instead we compared name with a third name it prints out false and that's because the name and third name variables are pointing to separate strings in memory they're not pointing to the same objects the second reason that java has chosen to have immutable strings is for security so let's say we had uh some method public void add money to account and that takes in a string account holder and like an int or money to add you know for like a simple banking system this could be a method that just adds some money to somebody's account so if you were to write this method you might have some like validations to make sure this is an okay transaction to make and then you have a bunch of code to actually add the money to the account but if string objects could be changed you have a potential security flaw here this method will be called from somewhere else in the code right so i can call add money to account and pass in the name string which should be referring to the value john and some amount of money like uh five thousand dollars and we do need to go ahead and make this method static so we can call it from here so we've got a situation like this where this name variable is pointing to the string object in memory with the value john and when it's passed into that method there's another variable called account holder and that's going to be pointing to that exact same string object in memory but the code here that's calling this method still has access to this name variable that is pointing to the string object in memory right so if java allowed changing that string object in memory you could write some really mean nefarious code right here that would try to wait until these validations are performed in this method and then it can go and use this name reference to this object in memory and it could just change it to something completely different like carl it just did all its validations on the account holder being john but then when it goes to actually add the money to the account it adds it to carl's account instead but that's not the case in java because strings are immutable it doesn't matter that this name variable still has a reference to that same shared object in memory this method knows that the string object that this account holder variable is pointing to is never going to change with strings being immutable that security risk just goes away that leads to the third benefit of immutable strings which is that strings are completely thread safe so in your java program you could have dozens or hundreds or thousands of threads all pointing to the exact same string object in memory and all of them can be reading that value from memory whenever they want even though all those threads are using it none of them are able to change it so they can all use it completely safely if you learned a little something in this video let me know by hitting the like button and as always if you really want to support the channel you can do the whole youtube trifecta of leaving a like a comment and hitting the subscribe button and if i got something wrong here feel free to yell and scream at me in the comments and be sure to check out all my other java videos as well i know you'll find a ton of stuff you'll like thank you so much for watching i'll see you next time
