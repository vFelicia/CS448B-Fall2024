With timestamps:

00:00 - in this video we are going to talk about
00:01 - all of the primitive
00:03 - data types in java that's bite short and
00:06 - long float double boolean and char we're
00:08 - going to talk about what primitives are
00:10 - and what each of those primitive types
00:12 - can do and what they can hold
00:13 - if you're new to the channel my name is
00:14 - john and i do a java tutorial video just
00:16 - like this one
00:17 - every single week either a video on a
00:18 - java tutorial like this one or a full
00:20 - walkthrough tutorial of a complete java
00:22 - program so be sure to like and subscribe
00:24 - to get the new video every week
00:26 - again thanks for taking the time to like
00:27 - and subscribe is the only way these
00:29 - videos get out to more people
00:30 - and so i really do appreciate it now
00:31 - first just what are primitive types
00:34 - or they're like the sticks and stones
00:36 - data types in java
00:37 - they are welded right into the java
00:39 - language itself and every other type in
00:41 - java is built on top of these primitive
00:43 - data types
00:43 - there are eight primitive data types in
00:45 - java that's byte short int
00:47 - long float double boolean and char to
00:50 - declare any of these primitives that
00:51 - we're looking at you just type the
00:53 - data type that you want to create byte
00:55 - short and long whatever
00:57 - and next the name of the variable you
00:59 - can give it whatever name you want
01:00 - and then equals and then the value that
01:03 - you want to give
01:04 - that variable the kind of value that you
01:06 - put here
01:07 - of course can change depending on what
01:09 - data type that you have but that's the
01:10 - general pattern
01:11 - that you're going to use every single
01:13 - time you make a primitive bytes are the
01:14 - first of
01:15 - four data types that hold whole numbers
01:18 - meaning not decimals or anything like
01:19 - that just whole numbers one two three
01:21 - whatever so first
01:22 - is byte what byte technically is is just
01:24 - um
01:25 - eight bits essentially eight ones and
01:27 - zeros basically what that means is it
01:29 - can hold a very small number from
01:31 - negative 128 to positive 127. it can
01:35 - also technically hold things like
01:36 - uh characters so if you notice i can
01:38 - change this to like the character
01:40 - c and this is valid but generally if you
01:42 - need a character
01:43 - it's a lot easier to just use the char
01:46 - data type that we're going to talk about
01:47 - later
01:48 - so because of the limited size of bytes
01:49 - and the fact that if you need a
01:50 - character
01:51 - there are easier ways to do it generally
01:53 - you can just ignore the byte
01:55 - data type at least while you're getting
01:56 - started learning java and short is the
01:58 - next step
01:59 - up in size short still holds whole
02:02 - numbers
02:02 - again not decimals now a short can hold
02:05 - about from negative 32 000 to positive
02:07 - 32 000
02:08 - these are the exact values here so
02:10 - because of the increase in size there
02:12 - it's a little bit more useful
02:13 - than a byte you know you can do a lot
02:15 - more things with 32 000 than you can
02:17 - with just 128 but still just because the
02:20 - limit is so
02:20 - low you'll find yourself just not using
02:22 - shorts very much i find myself
02:24 - not really using either of these first
02:26 - two values but it is important to know
02:28 - that they exist
02:29 - and as you get way more advanced in your
02:30 - java career you'll probably run into
02:31 - them from time to time
02:32 - but while you're learning they're just
02:34 - easier things to use next one is one
02:35 - you've definitely heard of and probably
02:37 - used already and that is an
02:38 - int and that's because this is when the
02:41 - limit of the numbers
02:42 - starts getting actually useful it goes
02:44 - from about negative 2 billion to
02:46 - positive 2 billion now most numbers that
02:48 - you're going to work with in your
02:49 - everyday programs
02:50 - fall within that range and so that's why
02:52 - you find yourself using an int pretty
02:53 - often
02:54 - but if you know you're going to have to
02:55 - write something where you are likely to
02:57 - go past
02:58 - 2 billion then you're going to want to
02:59 - use long now long goes to i don't even
03:02 - know what this is
03:03 - this is thousands millions billions
03:05 - trillions
03:06 - quadrillions quintillions i think that's
03:09 - right so
03:10 - negative nine quintillion to positive
03:12 - nine quintillion
03:14 - so this is the largest whole number java
03:17 - primitive type that you have
03:18 - if you're doing anything with whole
03:19 - numbers and you know you're likely to go
03:21 - well past 2 billion
03:22 - then just use a long don't worry too
03:24 - much about it once you get into really
03:25 - large numbers
03:26 - just use a long now the trade-off of
03:28 - course is that when you use a long or
03:30 - anything
03:30 - as you get from the smaller data types
03:32 - to the larger ones
03:33 - you do use a little bit more memory but
03:35 - nowadays this memory is so cheap and
03:37 - there's so much of it on every computer
03:38 - unless you're doing something
03:40 - ridiculous you generally don't have to
03:42 - worry about memory
03:43 - too much and so just whenever you're
03:45 - picking one of these values just be on
03:46 - the safe side and pick the one that you
03:48 - know is going to fit the number that you
03:50 - need to use
03:50 - and keep in mind that if you try to
03:51 - store something that is too large
03:54 - and outside of the number range for each
03:55 - of these values that we've looked at so
03:57 - far
03:57 - you could run into all kinds of weird
03:59 - behavior from exceptions to what are
04:01 - called overflow errors so maybe your
04:02 - program will silently just have the
04:04 - wrong value if it tried to fit
04:06 - a large number into a little bitty box
04:08 - it may have just cut off the part that
04:09 - didn't fit and kept the rest of it and
04:10 - after that happens who knows what your
04:12 - program's going to do so always be sure
04:13 - to use the data type that you know will
04:15 - fit for your particular situation for
04:17 - example this is what you'll see if you
04:18 - try to assign a value that is out of
04:20 - range
04:20 - for what you're making so here i'm
04:22 - trying to assign a very large number
04:25 - as an int but i get an error here in
04:27 - eclipse that says
04:28 - this literal of type int is out of range
04:31 - for an int so it won't let me do it but
04:32 - also if i actually take this exact same
04:34 - value and try to assign it here
04:36 - you'll notice i get the same error so it
04:38 - says this literal of type int
04:40 - is out of range well it is out of range
04:42 - for int but of course it's not out of
04:44 - range for a long so what do you do
04:46 - all you need to do is put an l either
04:48 - uppercase or lowercase
04:49 - doesn't matter just a personal
04:50 - preference there i tend to like
04:52 - lowercase but either way works
04:53 - that just indicates to java that i want
04:55 - this value to be a long and you can see
04:57 - it's quite happy with this now and you
04:58 - can assign
04:59 - very large values to your long so that's
05:01 - all the whole number so you can see the
05:03 - first
05:03 - four out of the eight primitive data
05:05 - types are just for storing whole numbers
05:07 - generally you'll use ins and longs just
05:09 - depending
05:10 - on what size of numbers you need to deal
05:12 - with so let's move on down here next
05:14 - we have floats and doubles floats and
05:16 - doubles are used for
05:18 - decimal numbers and you can kind of
05:19 - think of them as well you have ins and
05:21 - longs for whole numbers and you have
05:23 - floats and doubles for decimal numbers
05:24 - they're the same type of thing they just
05:26 - hold
05:27 - different sizes of values now for
05:29 - decimals instead of just size
05:30 - the difference in these is kind of their
05:32 - precision
05:33 - floating point math gets kind of weird
05:35 - in the programming world but generally
05:37 - you can think about it like this a
05:38 - a float gives you about six
05:41 - decimal digits of precision and a double
05:44 - makes that much larger and you get about
05:46 - 15 decimal digits of precision so again
05:49 - it's just a trade-off of memory
05:50 - versus having enough space to hold what
05:52 - you need so just use the one that fits
05:54 - best for your particular situation if
05:56 - you know you're going to have just a
05:57 - very small decimal number maybe you have
05:58 - shoe sizes or something
06:00 - and you're only going to be up to maybe
06:01 - like a 14 and a half then you know that
06:03 - float is going to work
06:04 - just fine for your purposes but if you
06:05 - know you're going to be in a situation
06:06 - where you need a lot of decimal numbers
06:08 - then you're going to want to use double
06:10 - something to note here is you'll see
06:11 - that
06:11 - i have an f where i'm assigning my float
06:14 - value here and if i don't
06:15 - include it java is assuming that this is
06:18 - a double and it can't put a double value
06:20 - into a float it can't put 10 pounds of
06:22 - you know what into a five pound sack so
06:24 - you just have to put the f in there
06:25 - again
06:26 - either capital or lowercase just to
06:28 - indicate to java that this is a float
06:30 - and for doubles you don't need it
06:31 - because java does assume
06:33 - that this number is going to be a double
06:34 - you can put a d there if you want to be
06:36 - super cool
06:37 - but you don't need it even though there
06:38 - were four different data types for
06:40 - different sizes of whole numbers there
06:41 - are only the two
06:43 - for decimal numbers just float and
06:45 - double so it's a little easier to
06:46 - remember there so now we're done with
06:47 - primitive types for
06:48 - numbers next we're going to move on to
06:51 - booleans
06:52 - we've probably used booleans quite a bit
06:54 - already as well a boolean either holds
06:57 - true or false that's it a boolean has a
07:01 - truth value and it is either true or is
07:03 - false so when you create your booleans
07:05 - you just assign it the value
07:07 - true or false not in quotes or anything
07:10 - like that just
07:11 - true or false if you put it in quotes it
07:12 - thinks it's a string and it's a whole
07:14 - different thing
07:15 - so that is how you assign a boolean
07:17 - literal so if you wanted to start out a
07:19 - boolean and you want to
07:20 - tell java that this is true or this is
07:22 - false you can do that
07:23 - like this but more often when
07:25 - programming you want it to hold
07:27 - the result of some comparison that you
07:29 - don't know while you're programming
07:30 - whether it's necessarily going to
07:32 - be true or false so you might do
07:33 - something like this where you create a
07:35 - boolean
07:36 - here i call it more than a thousand
07:38 - where i assign it
07:39 - the the truth value of my int
07:42 - greater than a thousand so this my int
07:44 - greater than a thousand
07:46 - is either true or it's not my int is
07:48 - either greater than a thousand
07:50 - or it's not greater than a thousand so
07:51 - in this situation my boolean variable
07:53 - will hold the result of this comparison
07:55 - so at this point in the code if mayan is
07:57 - greater than a thousand
07:58 - this will contain true and if not it
08:00 - will contain false in this particular
08:02 - program my int
08:03 - up here is 2837 so this more than a
08:06 - thousand variable would contain
08:08 - true after this part of the program runs
08:10 - because a boolean just holds either true
08:12 - or false it's probably the simplest of
08:14 - all the primitive data types but
08:15 - booleans are everywhere in every
08:18 - programming language so it's probably
08:19 - one of the most
08:20 - important to get a good understanding of
08:22 - now finally we have
08:24 - char or car some people like to
08:26 - pronounce it car because it's characters
08:28 - i'm gonna call it char and you can call
08:29 - it whatever you want you can be wrong
08:31 - and call it car
08:32 - or be cool and call it a char anyway all
08:34 - a char holds is a single
08:36 - character and you put that character in
08:38 - single quotes if you try to put it in
08:40 - double quotes you're going to get an
08:42 - error because java considers anything in
08:44 - double quotes a string
08:45 - and it can't put a string into a char
08:49 - variable char is again just one of those
08:50 - data types that i don't find myself
08:52 - using very often
08:53 - usually in 99 of the use cases that i
08:56 - have i just use
08:57 - a string which can of course hold any
08:59 - number of letters
09:00 - and you probably use string before it
09:01 - looks like this string my string
09:04 - equals hello but the reason we're not
09:07 - talking about string in this lesson is
09:08 - because
09:08 - string is not a primitive data type you
09:11 - can even notice by just the syntax
09:13 - highlighting here
09:14 - in eclipse all the primitive data types
09:16 - are highlighted in one color orange for
09:18 - me
09:18 - and all other data data types are
09:19 - highlighted in blue like string so
09:22 - string is not a primitive data type
09:23 - that's why we're not talking about it
09:25 - but i will say that whenever i want to
09:26 - use anything that involves a character
09:28 - i'll usually just use a string anyway
09:30 - because if i have to do something else
09:31 - with it later
09:33 - add to it or anything like that it's
09:34 - easy to do with a string whereas with a
09:36 - char i just have to throw it out and
09:37 - create a string anyway so i've used char
09:39 - in some very limited circumstances like
09:41 - in my tic-tac-toe program here
09:43 - where of course in every position in
09:45 - that tic-tac-toe board it's either an x
09:46 - or an o well it's simply to use a string
09:48 - there because we know we're only ever
09:49 - going to need
09:50 - one single character so in that instance
09:52 - i did use a char but most of the time i
09:54 - do just use a string but this is one
09:56 - that you're likely to run into from time
09:57 - to time so it is good to know about
09:59 - if you enjoyed this video or learned
10:00 - something please let me know with a like
10:02 - and if you'd like to see more videos
10:03 - like this
10:04 - every single week either a java tutorial
10:06 - on a concept like this one or a full
10:07 - tutorial walkthrough writing a java
10:09 - program from scratch please be sure to
10:11 - subscribe so you get the new video every
10:12 - week
10:13 - and again thanks to those of you who do
10:14 - take the time to like and subscribe it
10:16 - may seem like a little thing to you but
10:17 - it's the only thing
10:18 - that helps get these videos out to more
10:19 - people so i really do appreciate that
10:21 - see you next time

Cleaned transcript:

in this video we are going to talk about all of the primitive data types in java that's bite short and long float double boolean and char we're going to talk about what primitives are and what each of those primitive types can do and what they can hold if you're new to the channel my name is john and i do a java tutorial video just like this one every single week either a video on a java tutorial like this one or a full walkthrough tutorial of a complete java program so be sure to like and subscribe to get the new video every week again thanks for taking the time to like and subscribe is the only way these videos get out to more people and so i really do appreciate it now first just what are primitive types or they're like the sticks and stones data types in java they are welded right into the java language itself and every other type in java is built on top of these primitive data types there are eight primitive data types in java that's byte short int long float double boolean and char to declare any of these primitives that we're looking at you just type the data type that you want to create byte short and long whatever and next the name of the variable you can give it whatever name you want and then equals and then the value that you want to give that variable the kind of value that you put here of course can change depending on what data type that you have but that's the general pattern that you're going to use every single time you make a primitive bytes are the first of four data types that hold whole numbers meaning not decimals or anything like that just whole numbers one two three whatever so first is byte what byte technically is is just um eight bits essentially eight ones and zeros basically what that means is it can hold a very small number from negative 128 to positive 127. it can also technically hold things like uh characters so if you notice i can change this to like the character c and this is valid but generally if you need a character it's a lot easier to just use the char data type that we're going to talk about later so because of the limited size of bytes and the fact that if you need a character there are easier ways to do it generally you can just ignore the byte data type at least while you're getting started learning java and short is the next step up in size short still holds whole numbers again not decimals now a short can hold about from negative 32 000 to positive 32 000 these are the exact values here so because of the increase in size there it's a little bit more useful than a byte you know you can do a lot more things with 32 000 than you can with just 128 but still just because the limit is so low you'll find yourself just not using shorts very much i find myself not really using either of these first two values but it is important to know that they exist and as you get way more advanced in your java career you'll probably run into them from time to time but while you're learning they're just easier things to use next one is one you've definitely heard of and probably used already and that is an int and that's because this is when the limit of the numbers starts getting actually useful it goes from about negative 2 billion to positive 2 billion now most numbers that you're going to work with in your everyday programs fall within that range and so that's why you find yourself using an int pretty often but if you know you're going to have to write something where you are likely to go past 2 billion then you're going to want to use long now long goes to i don't even know what this is this is thousands millions billions trillions quadrillions quintillions i think that's right so negative nine quintillion to positive nine quintillion so this is the largest whole number java primitive type that you have if you're doing anything with whole numbers and you know you're likely to go well past 2 billion then just use a long don't worry too much about it once you get into really large numbers just use a long now the tradeoff of course is that when you use a long or anything as you get from the smaller data types to the larger ones you do use a little bit more memory but nowadays this memory is so cheap and there's so much of it on every computer unless you're doing something ridiculous you generally don't have to worry about memory too much and so just whenever you're picking one of these values just be on the safe side and pick the one that you know is going to fit the number that you need to use and keep in mind that if you try to store something that is too large and outside of the number range for each of these values that we've looked at so far you could run into all kinds of weird behavior from exceptions to what are called overflow errors so maybe your program will silently just have the wrong value if it tried to fit a large number into a little bitty box it may have just cut off the part that didn't fit and kept the rest of it and after that happens who knows what your program's going to do so always be sure to use the data type that you know will fit for your particular situation for example this is what you'll see if you try to assign a value that is out of range for what you're making so here i'm trying to assign a very large number as an int but i get an error here in eclipse that says this literal of type int is out of range for an int so it won't let me do it but also if i actually take this exact same value and try to assign it here you'll notice i get the same error so it says this literal of type int is out of range well it is out of range for int but of course it's not out of range for a long so what do you do all you need to do is put an l either uppercase or lowercase doesn't matter just a personal preference there i tend to like lowercase but either way works that just indicates to java that i want this value to be a long and you can see it's quite happy with this now and you can assign very large values to your long so that's all the whole number so you can see the first four out of the eight primitive data types are just for storing whole numbers generally you'll use ins and longs just depending on what size of numbers you need to deal with so let's move on down here next we have floats and doubles floats and doubles are used for decimal numbers and you can kind of think of them as well you have ins and longs for whole numbers and you have floats and doubles for decimal numbers they're the same type of thing they just hold different sizes of values now for decimals instead of just size the difference in these is kind of their precision floating point math gets kind of weird in the programming world but generally you can think about it like this a a float gives you about six decimal digits of precision and a double makes that much larger and you get about 15 decimal digits of precision so again it's just a tradeoff of memory versus having enough space to hold what you need so just use the one that fits best for your particular situation if you know you're going to have just a very small decimal number maybe you have shoe sizes or something and you're only going to be up to maybe like a 14 and a half then you know that float is going to work just fine for your purposes but if you know you're going to be in a situation where you need a lot of decimal numbers then you're going to want to use double something to note here is you'll see that i have an f where i'm assigning my float value here and if i don't include it java is assuming that this is a double and it can't put a double value into a float it can't put 10 pounds of you know what into a five pound sack so you just have to put the f in there again either capital or lowercase just to indicate to java that this is a float and for doubles you don't need it because java does assume that this number is going to be a double you can put a d there if you want to be super cool but you don't need it even though there were four different data types for different sizes of whole numbers there are only the two for decimal numbers just float and double so it's a little easier to remember there so now we're done with primitive types for numbers next we're going to move on to booleans we've probably used booleans quite a bit already as well a boolean either holds true or false that's it a boolean has a truth value and it is either true or is false so when you create your booleans you just assign it the value true or false not in quotes or anything like that just true or false if you put it in quotes it thinks it's a string and it's a whole different thing so that is how you assign a boolean literal so if you wanted to start out a boolean and you want to tell java that this is true or this is false you can do that like this but more often when programming you want it to hold the result of some comparison that you don't know while you're programming whether it's necessarily going to be true or false so you might do something like this where you create a boolean here i call it more than a thousand where i assign it the the truth value of my int greater than a thousand so this my int greater than a thousand is either true or it's not my int is either greater than a thousand or it's not greater than a thousand so in this situation my boolean variable will hold the result of this comparison so at this point in the code if mayan is greater than a thousand this will contain true and if not it will contain false in this particular program my int up here is 2837 so this more than a thousand variable would contain true after this part of the program runs because a boolean just holds either true or false it's probably the simplest of all the primitive data types but booleans are everywhere in every programming language so it's probably one of the most important to get a good understanding of now finally we have char or car some people like to pronounce it car because it's characters i'm gonna call it char and you can call it whatever you want you can be wrong and call it car or be cool and call it a char anyway all a char holds is a single character and you put that character in single quotes if you try to put it in double quotes you're going to get an error because java considers anything in double quotes a string and it can't put a string into a char variable char is again just one of those data types that i don't find myself using very often usually in 99 of the use cases that i have i just use a string which can of course hold any number of letters and you probably use string before it looks like this string my string equals hello but the reason we're not talking about string in this lesson is because string is not a primitive data type you can even notice by just the syntax highlighting here in eclipse all the primitive data types are highlighted in one color orange for me and all other data data types are highlighted in blue like string so string is not a primitive data type that's why we're not talking about it but i will say that whenever i want to use anything that involves a character i'll usually just use a string anyway because if i have to do something else with it later add to it or anything like that it's easy to do with a string whereas with a char i just have to throw it out and create a string anyway so i've used char in some very limited circumstances like in my tictactoe program here where of course in every position in that tictactoe board it's either an x or an o well it's simply to use a string there because we know we're only ever going to need one single character so in that instance i did use a char but most of the time i do just use a string but this is one that you're likely to run into from time to time so it is good to know about if you enjoyed this video or learned something please let me know with a like and if you'd like to see more videos like this every single week either a java tutorial on a concept like this one or a full tutorial walkthrough writing a java program from scratch please be sure to subscribe so you get the new video every week and again thanks to those of you who do take the time to like and subscribe it may seem like a little thing to you but it's the only thing that helps get these videos out to more people so i really do appreciate that see you next time
