With timestamps:

00:00 - hey guys today we're going to code a
00:02 - tic-tac-toe game in java starting from
00:04 - scratch you're going to see the whole
00:05 - thing
00:06 - the thought process behind it the
00:08 - mistakes i make if
00:09 - any now before we get started here guys
00:11 - i want you know the full source code of
00:12 - this completed tic-tac-toe game is
00:14 - available in the link down in the
00:15 - description
00:16 - so go grab it don't just grab it and use
00:18 - it to cheat
00:19 - grab it so you can pull it down and mess
00:20 - with it and play with it and improve
00:22 - upon it and break stuff and mess around
00:23 - with it
00:24 - have fun with it and if you like having
00:26 - that source code please let me know by
00:27 - liking the video it really means so much
00:29 - to me thank
00:30 - you so yeah we're gonna work it out as
00:32 - we go so
00:33 - let's get to it so for this game example
00:36 - we're just going to do
00:37 - the output like in the console and not
00:39 - use a gui or anything that just to keep
00:41 - it simple
00:42 - and work through the logic of how to
00:44 - create a tic-tac-toe game we're going to
00:45 - make sure we can
00:46 - print the board and then take user input
00:49 - and put it in the right place
00:51 - we need to have some kind of a computer
00:54 - opponent that
00:54 - does some kind of moves and also we
00:58 - need to be able to check if the game is
01:00 - over
01:01 - meaning if the player or the computer
01:02 - has one or if the board is full and
01:05 - nobody has one then we've got a tie so
01:06 - those are kind of all the little pieces
01:08 - i'm thinking of there may be more to it
01:10 - as we work it out but
01:11 - who knows let's get going so first let's
01:14 - just
01:14 - come up with a way to print a board so
01:16 - we can look at the console and see
01:18 - what's happening
01:19 - i think the board that we're going to
01:20 - have is a probably a 2d
01:22 - array of char of characters so you can
01:25 - imagine they all start out blank
01:27 - and then we'll turn them into x's or o's
01:30 - depending on if the computer or the
01:32 - human player places something there so
01:35 - um let's just start out with that so
01:37 - we've got char
01:40 - double array and if you don't understand
01:42 - the multi-dimensional or 2d arrays
01:44 - it's not so bad here you're probably
01:46 - familiar with regular arrays like this
01:48 - this is just an array of characters and
01:50 - this you can kind of just think as a
01:52 - grid of characters and we'll type out
01:54 - what it looks like
01:56 - when we declare it so call it board
01:59 - good name for a board and we're going to
02:03 - essentially what we want is three rows
02:07 - of
02:07 - three characters a piece so we can come
02:09 - up with that grid so we're going to
02:10 - start out with all of them being just
02:12 - blank spaces and then later on when they
02:14 - get filled in they'll be x's and o's so
02:16 - we're going to declare our um
02:19 - board with just spaces so the first
02:22 - array
02:23 - the first row will be space
02:26 - space space
02:31 - and then it'll be the same for the
02:32 - second row so we'll copy that
02:34 - paste that and then of course the same
02:36 - for the third
02:39 - and that's it that's essentially our our
02:40 - game board now
02:42 - um let me reformat that to kind of show
02:46 - to get a better representation of what
02:49 - of what the board actually looks like
02:51 - here so this spot here
02:53 - is the top left spot on our game board
02:56 - and
02:56 - this one's the bottom right and
02:57 - everything else fits in exactly how you
02:59 - would expect
03:01 - so now let's um just come up with a way
03:03 - that we can print the board
03:05 - so so to print the board we not only
03:06 - want to print what's in
03:08 - each of these um spots but we also want
03:11 - to print the grid the
03:13 - hashtag the pound between all of these
03:16 - spots so to do that i think what we're
03:20 - going to do
03:20 - is like for the example for the top row
03:23 - we'll print this first value
03:25 - then we'll print a vertical bar and then
03:26 - print the second value and then print a
03:28 - vertical bar and then this third value
03:29 - and then we'll have like a
03:31 - we'll print out a line separator and
03:33 - then we'll print the second row
03:34 - similarly to how we did the first row
03:36 - and so on till we get the whole thing
03:38 - printed
03:39 - so let's just write out a
03:41 - system.out.printline
03:43 - so first we want to print out this top
03:45 - left spot and to get
03:47 - that spot um it's the zeroth
03:50 - spot the first the first is the zero the
03:53 - zeroth spot
03:54 - on the zeroth array so we can reference
03:57 - that by just
03:58 - board zero
04:02 - zero but let's actually go ahead and
04:04 - test that we can refer to that spot just
04:07 - by
04:07 - let's say we this was an x and we run
04:10 - our program
04:11 - it prints out an x it is success board
04:13 - zero zero is successfully referencing
04:15 - this first spot so now let's change that
04:18 - back before we
04:19 - mess something up and then we want to
04:22 - print a
04:23 - vertical bar and then um
04:27 - board zero one
04:31 - still the first the zeroth row and then
04:33 - the
04:34 - second spot in it is one
04:38 - not two nope one all right
04:41 - and then uh we just got one more we want
04:44 - to print
04:47 - the third spot here and i'm sorry this
04:49 - line's going pretty long
04:50 - that's okay okay so let's just test that
04:54 - out real quick
04:55 - x o
04:58 - o run bam we've got our first row
05:03 - um now let's print the um the row
05:07 - of like a line separator so i'm thinking
05:10 - under that first spot we just have a
05:12 - hyphen
05:14 - and then i think we do a plus sign so we
05:16 - can get the the cross
05:17 - part of the hash tag pound um
05:21 - and then hyphen plus hyphen
05:25 - uh let's see how that looks
05:29 - so we're going to copy this first line
05:30 - and we'll just we're just going to
05:31 - change what we're printing here so we're
05:33 - going to change
05:34 - um we're going to do the first row for
05:36 - everything the first row meaning the
05:37 - second row this row we're now printing
05:39 - this row
05:41 - so we got one zero one one and one
05:44 - two cool cool cool
05:48 - and then we're going to print the
05:49 - separator again we'll just copy that
05:51 - paste it
05:53 - and then let's do our third row so we've
05:56 - got
05:56 - two zero two one and two
05:59 - two so let's just try this out one two
06:03 - three four five
06:06 - six seven you get the drill here
06:10 - nine cool all right let's expand this so
06:13 - we can see it
06:14 - awesome we can print our board
06:18 - so now what we probably want to do is
06:20 - move all of this printing out to its own
06:22 - method so we can call it whenever we
06:23 - need to because we're going to print the
06:24 - board
06:25 - many times during this program's running
06:28 - um
06:28 - so you know how you can do that you can
06:30 - write our like private
06:34 - print but if you're working in an ide
06:37 - quick tip
06:38 - i'm working in eclipse right now i can
06:40 - highlight all of this
06:41 - and i can either right click and go to
06:44 - refactor extract method or i can just
06:46 - hit alt
06:46 - shift m with all of this highlighted so
06:48 - i'm going to do that alt shift
06:50 - m and you just tell it the name the
06:53 - method
06:53 - that you want this to be but guess what
06:55 - we're going to call it
06:56 - print board and look awesome it made it
07:00 - a private static void print board
07:02 - takes in the character array of the
07:04 - board and prints it out so now whenever
07:06 - we want to print out the current state
07:07 - of the board all we have to do is call
07:08 - that method
07:10 - and now we can forget about this
07:11 - completely put it out of your mind it's
07:12 - already written
07:13 - whenever we want to print the board we
07:15 - can just print the board all right now
07:16 - again before i forget i'm just going to
07:17 - change all these
07:18 - back to blanks
07:22 - and now that we know that we can print
07:22 - the board we don't need to really mess
07:24 - with that anymore
07:25 - so now we need to have a way to take
07:28 - user input like say i want to put my
07:31 - x in this spot here or i want to put it
07:34 - here
07:35 - we want to be able to take the user's
07:36 - input and put it in the right spot so i
07:38 - think what we're going to do
07:39 - is instead of making the user like type
07:41 - in zero zero or zero one nobody wants to
07:44 - do that
07:44 - we're probably going to allow them to
07:45 - type in one of these numbers for these
07:47 - positions so if they want to insert it
07:49 - into the top left they'll
07:50 - enter a one if they want to insert the
07:52 - middle and give it a five etc
07:54 - so first let's just do this simple part
07:57 - of taking in that number from the user
08:01 - and to do that we're going to use the
08:03 - scanner class
08:04 - so the scanner scanner equals new
08:07 - scanner and we're going to use system.in
08:10 - for the user input we're going to
08:13 - organize
08:13 - imports so we can automatically import
08:16 - java util scanner
08:17 - by the way that was control shift o in
08:19 - eclipse to automatically do that
08:21 - and if by the way if you want a full
08:22 - tutorial on scanner and how to get user
08:25 - input with it
08:26 - go ahead and click this link up here
08:26 - i've got a whole video on it it's great
08:28 - all right so we're going to
08:31 - get the input from the user as a string
08:33 - string
08:34 - user input equals
08:38 - scanner dot next line
08:41 - and that gets the line entered by the
08:43 - user and puts it in this user and it
08:44 - puts it in this user input
08:47 - variable and let's go ahead and test
08:50 - that too
08:51 - i like testing system.printline
08:56 - user input oh and we might also want to
08:59 - prompt
09:00 - the user um where would you
09:03 - like to play kind of weird but
09:07 - hey that's i guess the best thing i can
09:08 - think of right now it doesn't matter and
09:10 - we'll we'll tell them uh
09:11 - one through nine so they know what that
09:15 - one to input
09:17 - so let's go ahead and give that a test
09:18 - and now it says where would you like to
09:20 - play one through nine and we could say
09:22 - one and it prints out one so cool we're
09:24 - getting that input right
09:25 - now what we want to be able to do is
09:27 - take this user input
09:29 - and actually place the
09:32 - x we'll make player one the x we want to
09:35 - be able to place the x and the spot
09:36 - where they asked it to go
09:38 - so we can use a big if else block or we
09:41 - can use a switch statement
09:42 - and for for ones with a lot of options
09:44 - like this i kind of like to use a switch
09:45 - statement
09:46 - so what we're going to say is switch on
09:49 - the value of the user input
09:51 - and then in the case get over there
09:55 - that the user input is um 1
09:58 - we want to assign this value as x
10:02 - right so case one is
10:05 - uh board zero
10:09 - zero set equal to an
10:12 - x oh and this is a string not in it so
10:14 - we're gonna just put quotes
10:16 - around that and then we want to remember
10:19 - to add our break statements
10:21 - you just want to remember to add breaks
10:22 - whenever you uh write your switch
10:24 - statements otherwise you could have
10:25 - you have potential for some weird
10:26 - behavior just put in breaks so
10:28 - we're going to copy and paste for the
10:30 - other eight values
10:32 - so two would be zero one this spot here
10:36 - there's our zero one this spot here
10:39 - and so on
10:54 - okay so that should be all of them i'm
10:55 - going to zoom out actually a little bit
10:57 - so you can actually see all of this for
10:59 - just a second
11:00 - and we're going to fix the formatting on
11:02 - this i don't know why i formatted it
11:03 - like that
11:04 - as you can see we've got a case for each
11:06 - of what a user should put in
11:07 - if they put in something else we'll put
11:09 - in some validation for that later on but
11:10 - right now we're going to have a default
11:12 - statement
11:12 - so if they don't send one through nine
11:14 - we're just going to be sad
11:16 - so default that means if none of those
11:19 - are met
11:20 - it'll just it'll just pronounce that
11:23 - base
11:25 - then after we've gotten the input from
11:26 - the user and assigned the right spot on
11:28 - the board with an x let's go ahead and
11:31 - print the board again which
11:32 - now that we've got a method we can just
11:33 - say print board
11:35 - that's it print board board and let's
11:38 - run it
11:39 - where would you like to play um three
11:43 - bam we get an x on the three spot how
11:45 - awesome is that right
11:46 - you're making a game it's really cool
11:49 - even simple games like this are
11:50 - just a lot of fun to make so let's clean
11:52 - this up a bit and um extract
11:54 - all of this stuff that's getting the
11:56 - printing the the message to the user
11:58 - getting the input and putting it in the
11:59 - right spot on the board let's put that
12:01 - in its own method two
12:02 - so alt shift m um player
12:05 - turn hit okay
12:09 - and now whenever we want the player to
12:10 - take a turn it's all right there and if
12:12 - we
12:13 - need to enhance it or do anything else
12:14 - special in there we can just fix up this
12:16 - player turn method
12:18 - let's go ahead and zoom in back a little
12:19 - bit here actually we
12:21 - we don't need this print line of what
12:24 - the user
12:25 - input anymore we can get rid of that so
12:28 - now this method for the player term just
12:30 - prints out where would you like to play
12:33 - takes the input from the user
12:34 - puts it in the right spot and returns
12:37 - awesome
12:38 - so now we come on so now we're coming to
12:40 - what might seem like a complicated part
12:43 - and that's how to get the computer's
12:45 - turn to work
12:46 - um so you might be thinking hi am i
12:47 - going to write some kind of really
12:48 - complex algorithm to do all the optimal
12:50 - stuff we're not going to worry about
12:51 - that here we're just going to make the
12:52 - computer kind of play in a random open
12:54 - spot so if you want to learn how to make
12:56 - like the
12:57 - the perfect algorithm for how the
12:58 - computer could play to never ever lose
13:00 - and have no fun playing your game
13:02 - i'm sure you can find other videos on
13:04 - that it's not the focus of this here
13:05 - so essentially what we're going to do
13:06 - here is have the computer pick a random
13:08 - spot between 1 and 9
13:09 - and if that spots available that's what
13:11 - it's going to pick so to generate random
13:13 - numbers in java
13:14 - generally use the random class so
13:17 - random rand equals new random
13:21 - and then if you want to make a random
13:23 - int we'll organize
13:24 - imports uh ctrl shift o or if you need
13:27 - the import
13:29 - java.util.random and then the method
13:31 - call to get a random int is called rand
13:35 - dot next int so what you can type in
13:39 - is a number and it's going to give you a
13:42 - random int between
13:43 - zero and one less than that number so
13:46 - what we actually have to do is
13:48 - because we want to get a number between
13:50 - 1 and
13:51 - 9 is we have to get
13:54 - a random int between 0 and 8 and add 1
13:58 - to it
14:00 - and so to do that we're going to pass in
14:03 - uh
14:03 - nine and then we're going to add
14:06 - one to our results type this out and
14:08 - we'll go over it in a second so int
14:10 - computer play
14:14 - equals rand dot next in
14:17 - nine plus one so this will give us a
14:19 - random int
14:21 - between zero and eight but we want the
14:23 - random in
14:24 - to be between one and nine so we're just
14:26 - gonna take the zero to eight
14:28 - add one to it and we've got a random
14:29 - number between one and nine
14:31 - okay but what if this spot is already
14:33 - taken by an
14:34 - x or an o um then this play won't work
14:38 - so what we have to do is add a check for
14:41 - whether that spot is taken or not
14:42 - whether if that spot is blank we're good
14:44 - if it's not blank
14:45 - yeah the computer needs to try again and
14:47 - now we're also probably going to need a
14:49 - way to do that
14:50 - for the player turns too and so let's
14:53 - just go ahead and make
14:55 - a standalone method that just takes in
14:58 - one of these numbers one through nine
15:00 - and
15:01 - just tells you whether or not that space
15:03 - is available with a boolean
15:05 - let's create that method from scratch
15:06 - right private
15:08 - static boolean the return value is going
15:11 - to be a boolean
15:14 - is space available
15:17 - there's a good name for that and it's
15:18 - going to take in the board
15:21 - and the uh whoops so it's going to be a
15:24 - char
15:25 - double array board
15:29 - and the position int position
15:32 - okay so a lot of logic is going to match
15:35 - um exactly what we've got here so let's
15:38 - go ahead and steal the switch statement
15:40 - from ourselves and paste that up here so
15:44 - first we want to switch
15:45 - on the position that is sent into this
15:49 - method
15:50 - and um of course since the this case
15:52 - statement we had before was looking at
15:53 - strings but here it's taking an
15:55 - int we're just going to change all these
15:57 - uh to numbers
16:02 - okay then in all these spots instead of
16:04 - assigning a value
16:06 - we just want to return whether or not
16:09 - that space is occupied
16:10 - so um to do a character equals check you
16:13 - can just use double equals
16:15 - so we can say if this spot on the board
16:19 - is equal to a space
16:23 - then we can return true
16:26 - right and then else of course return
16:30 - false and now you can see this break is
16:33 - dead code because we're either returning
16:34 - true or false when we're in here there's
16:36 - no way it's going to reach this so you
16:37 - don't need break statements here
16:39 - it's an exception a little small pro tip
16:41 - if you want to clean up this code a
16:42 - little bit you have
16:43 - if blah blah blah equals blank then
16:45 - return true else return false
16:47 - what you can actually do is shortcut
16:49 - this and just return
16:51 - the value of this evaluation here
16:55 - and so this will do exactly the same
16:56 - thing it will return
16:58 - true if this is the case it will just
17:00 - return the truth
17:02 - value of this statement so if the board
17:04 - at this spot
17:05 - is equal to blank it'll return true but
17:08 - it's just a lot less
17:09 - messy code to look at and figure out so
17:11 - let's just go ahead and copy that for
17:13 - each of these
17:14 - other spots
17:26 - and actually come to think of it instead
17:28 - of saying is space available we can just
17:30 - use like is this a valid move
17:33 - so like and that way if they put in
17:36 - something like the user puts in
17:37 - something like
17:37 - 0 or 10 or something we can also say
17:41 - that's just not a valid move
17:42 - because so it's a little bit more broad
17:44 - and helps us more
17:46 - than just in the space available just
17:47 - this makes this method a little bit more
17:49 - useful to us
17:50 - so let's say is valid move okay so great
17:53 - now we've got a method that
17:55 - takes in the board in a position and
17:57 - tells us whether or not
17:58 - that's a valid move okay so then we want
18:00 - to default to
18:01 - false so if they if they didn't if they
18:04 - so if they entered one two three four et
18:06 - cetera
18:07 - we'd look in the right spot and tell
18:09 - them whether or not that space is
18:10 - available
18:11 - but otherwise we return false that's not
18:14 - a valid move
18:14 - they can't enter anything except for one
18:17 - through nine
18:19 - okay so right now this isn't called
18:21 - anywhere
18:22 - so what we want to do is if this
18:23 - computer play if it's taken already if
18:26 - that spot is taken we want to loop
18:28 - until the computer comes up with a value
18:30 - that is available so probably the
18:31 - easiest way to do that here is just use
18:33 - a while true loop and
18:36 - and then we can just say that if the
18:39 - computer makes a valid move we can break
18:41 - out of that loop
18:42 - and then if it doesn't make a valid move
18:44 - and doesn't break out the loop it just
18:45 - goes in and tries it again so we can
18:46 - just say
18:47 - if is valid move
18:50 - pass in the board pass in our position
18:54 - which is our computer play
18:58 - so if that's a valid move break
19:01 - and that kicks us out of this while loop
19:02 - so we know that when we exit this
19:04 - loop this computer play is a valid move
19:07 - great
19:07 - so now that we have this valid computer
19:10 - play we want to be able to
19:11 - place that play on the board now i'm
19:14 - thinking about it so we've got this
19:16 - method that allows the player to take a
19:19 - turn and does all of this
19:20 - check logic and assigning but i think
19:23 - what we can
19:24 - do is refactor this a bit to
19:27 - this section of the logic so we don't
19:29 - have to duplicate this logic anywhere
19:31 - and it can be
19:31 - able to either take the computer's play
19:33 - or the player's play
19:35 - and put it in the right spot and this
19:37 - will happen a lot as you're writing your
19:38 - code if you keep an eye out for it you
19:40 - might find yourself
19:41 - starting to duplicate something and go
19:42 - ah maybe i can reuse some other part of
19:44 - my code
19:45 - okay so how are we going to do that
19:46 - basically the we don't want
19:48 - to copy the part where the uh
19:52 - where we ask the user what they want to
19:55 - play because we don't need that for the
19:56 - computer we don't need to use the
19:58 - scanner to get anything from the user
20:00 - but we do want effectively this part of
20:02 - this the switch statement here
20:04 - so let's extract this switch statement
20:08 - into its own method so we called it a
20:11 - move
20:11 - before so i guess we'll just call it
20:13 - place move
20:15 - um let's go ahead and do that but i
20:18 - think we might have called this a play
20:20 - let's rename this to computer move to be
20:23 - consistent
20:23 - throughout our code
20:27 - and we'll even call this a player move
20:31 - right and by the way to rename any clips
20:34 - you can just
20:34 - uh be selecting the the the method or
20:38 - the variable that you want to rename and
20:39 - hit alt
20:40 - shift r and then you can rename it to
20:42 - whatever you want and as you can see it
20:44 - renames it across the entire application
20:46 - so you don't need to go and copy and
20:47 - paste everywhere like a mental patient
20:49 - you can just do it in one spot so now
20:50 - we've got this place
20:51 - move method now the uh the string that
20:54 - comes in won't be the user input it'll
20:56 - instead
20:57 - be the position that we want to place
20:59 - that move but we also
21:01 - need to know since we're going to be
21:03 - using this for the computer plays
21:05 - the computer moves and the player moves
21:07 - we need to know which character we
21:09 - should be putting in there because we
21:10 - want this
21:10 - method to be able to be used for both
21:12 - computer and player so we're going to
21:14 - take
21:14 - a char symbol that might be a terrible
21:18 - name maybe you come up with a better one
21:20 - if so
21:21 - let me know in the comments because i'm
21:22 - interested in the best name for this
21:24 - for this variable so anyway now we're
21:26 - still going to switch on this position
21:28 - and in the case of one we're going to
21:32 - insert the symbol in the case of one
21:34 - instead of
21:35 - always putting in x we're just going to
21:37 - put in what that symbol is
21:39 - so again this can be used for computer
21:41 - or player
21:45 - and still if something sends this method
21:47 - a bad number which it shouldn't
21:49 - we'll just print out a sad face okay so
21:52 - now that we've made this
21:53 - method that can place a move for either
21:55 - player
21:57 - in this player turn method we need to
21:58 - actually send it the right stuff so
22:00 - we're going to send them the user input
22:01 - which is the position
22:03 - but we also need to send it the symbol
22:04 - so for a player turn
22:06 - we want the player to be an x right
22:09 - so this is telling this method hey when
22:11 - you place this move put an x in there so
22:13 - now that works for the player
22:14 - now let's hook that up for the computer
22:16 - so back up here in our main method it's
22:19 - still in our main method
22:20 - after we've got the valid computer move
22:24 - we want to tell this place move method
22:27 - to
22:27 - play the move for the computer so let's
22:30 - do it we're going to
22:30 - place move and what does it take
22:34 - i can hit uh control space in eclipse to
22:36 - show this
22:37 - uh this kind of autocomplete so i need a
22:40 - char
22:40 - board so if we pass in board a string
22:43 - position
22:44 - which we know the computer move is the
22:47 - position
22:48 - and char symbol which for us is going to
22:50 - be an
22:51 - o for the computer now if you notice
22:53 - we've got a red underline here and
22:55 - that's because it's saying well computer
22:56 - move
22:57 - can't be resolved to a variable and
22:58 - that's because it's declared inside the
23:00 - scope of this
23:01 - while loop here so once it exits this
23:04 - scope
23:04 - there's no such thing as this variable
23:05 - so what we actually have to do is take
23:08 - this int and declare it here get rid of
23:11 - our int
23:11 - declaration there and we're good except
23:15 - except oh no okay the method please move
23:19 - char a string char is not compatible
23:21 - with arguments
23:22 - char a int char and that's because this
23:24 - computer move variable is an
23:26 - int and not a string so um we need to
23:29 - quickly just
23:30 - convert that to a string before we can
23:31 - pass it in and the easiest way to do
23:33 - that is
23:34 - just using the integer dot
23:37 - 2 string method and you pass in the inch
23:41 - that you want to convert to a string
23:43 - and it does it now great it's happy
23:46 - so now we've added a lot of stuff and
23:47 - refactored a lot of things so let's
23:50 - real quickly um assess what we've got
23:52 - and then we're going to test so let's
23:53 - see we're making the board we're
23:55 - printing the blank board
23:57 - we're declaring scanner why are we
23:58 - declaring scanner in here we only need
24:00 - it inside this player turn method so
24:01 - actually let's
24:02 - do a little bit more refactoring get rid
24:04 - of the scanner here we don't need to
24:05 - pass it into player turn
24:07 - we can just go into this player turn
24:09 - method and create our scanner here
24:12 - exactly when we need it and we'll get
24:14 - rid of
24:15 - scanner input so you might see this
24:17 - yellow wavy line for this
24:19 - scanner not being closed it's probably
24:21 - not a big deal in a small program like
24:23 - this but if you want to be a
24:24 - good little boy scout you can go ahead
24:26 - and close your scanner here at the end
24:27 - of the method when it's done being used
24:29 - by calling scanner dot close
24:33 - anyway back to here so now we are we
24:36 - create our board print the blank board
24:39 - the player takes a turn
24:40 - and then we do all of this stuff to have
24:42 - the computer
24:44 - play a move and print the board again so
24:46 - that's what we've got so far we've got
24:47 - the player takes a move the computer
24:49 - takes a move and we print the board so
24:50 - let's go ahead and test and see if all
24:51 - that works so where would you like to
24:53 - play
24:54 - um let's play in two okay so
24:57 - now the computer made a move on spot
25:00 - four so awesome let's try it again
25:04 - um i'll play in spot four okay and the
25:07 - computer placed here let's just do it a
25:08 - few more times to see if we run into any
25:10 - weirdness
25:10 - i'm gonna play one all of one through
25:12 - nine and make sure my stuff gets placed
25:14 - right
25:15 - and if there's any exceptions or
25:16 - anything
25:22 - okay so one thing i am noticing when i
25:24 - play a six
25:25 - and it might not have been only because
25:28 - of the six i might have just shown up
25:29 - here at random but
25:30 - so i played six and it looks like the
25:32 - computer was able to override that
25:34 - but it shouldn't be able to do that
25:35 - because we have this is valid move check
25:38 - and so it should only be doing that if
25:41 - that space isn't occupied so let's try
25:43 - and figure out what's going on there
25:45 - um and in eclipse if you want to go
25:47 - directly to a method that you're looking
25:48 - at
25:49 - um like if this is the method call you
25:51 - can hold control
25:52 - and click the method name and it'll
25:54 - bring you right to that method
25:56 - so i saw it specifically happen for
25:58 - sixes let's look
26:00 - and uh i can already see the problem
26:02 - case six we've got a copy and paste
26:03 - error i missed
26:04 - changing this value it should be um
26:08 - row one which is the second row um
26:11 - and then spot three red spot two which
26:13 - is the third column
26:15 - that's what should so that that so that
26:18 - check wasn't working properly and that's
26:19 - why we got those issues on six so let's
26:21 - take a second and
26:22 - confirm all the rest of these zero zero
26:25 - zero one zero two one zero one one one
26:27 - two two zero two one two two cool let's
26:29 - test six again a few more times
26:35 - okay awesome it appears to be working
26:36 - now that's why you test like that
26:38 - don't worry about making mistakes like
26:39 - that you're going to make them just make
26:41 - sure you test your programs thoroughly
26:42 - and
26:43 - you'll be able to quickly find and fix
26:44 - your errors no problem at all so let's
26:46 - go through the rest of them we still
26:47 - have 789 to test
26:51 - okay cool now that all appears to be
26:53 - working now of course we've only got i
26:55 - take a turn the computer takes a turn
26:56 - and then the game's over
26:58 - um so we've got to fix that so let's go
27:00 - ahead and um
27:01 - first let's clean this up just a little
27:03 - bit so that this oh so all of this code
27:06 - here is to make the computer take them
27:08 - turn so let's go ahead and extract that
27:12 - to a method so we can reuse it all we
27:15 - want and we'll call it
27:16 - a computer turn so now when we want the
27:19 - computer to take a turn we just call
27:20 - this method
27:21 - i guess it would be nice to be able to
27:23 - see the board between turns so
27:24 - we're just going to add in another uh
27:26 - print board here between these turns
27:28 - it would also just be nice to see a
27:30 - little print out a sentence of where the
27:31 - computer
27:32 - chose to put their move so let's go to
27:34 - the computer turn method and just add a
27:36 - little statement for that
27:42 - now let's give that all a quick test
27:44 - because we just rearranged a lot of
27:45 - stuff let's make sure we do it right
27:47 - where would you like to
27:49 - play one computer chose nine
27:52 - bam okay so now um of course the we only
27:55 - have one move for me and
27:56 - one move for the computer so um let's go
27:59 - ahead and just add in a little
28:01 - simple wild true loop to just keep it
28:03 - going back and forth
28:04 - so basically we're going to have the
28:05 - player take a turn print the board have
28:06 - the computer take a turn print the board
28:08 - etc etc so let's go ahead and just copy
28:11 - this up here
28:12 - and we'll do a while we might
28:16 - we might make this a little more fancy
28:17 - in the future but for now we're just
28:18 - going to do a while true
28:21 - and it might stay that way we're just
28:23 - going to loop through this forever and
28:25 - of course now this is dead code so
28:26 - it's going to complain we're going to
28:27 - comment it out for now so let's give it
28:29 - a test
28:30 - where would you like to play one
28:34 - so i see an exception when it was trying
28:37 - to prompt me
28:39 - um for where i want to play next i think
28:41 - it could be because um
28:44 - i'm recreating this scanner maybe i do
28:46 - need to just have one scanner at the top
28:47 - that's passed in everywhere
28:49 - so one let's see if that solves the
28:50 - issue go ahead and grab this scanner
28:52 - and put it back where it was and but
28:56 - then
28:56 - we have to pass that into the player
28:58 - turn
29:00 - again if you didn't know a quick way to
29:02 - do that so say you want to add
29:04 - a parameter to this method but you don't
29:07 - have to actually go to this method and
29:09 - type in that extra parameter you can
29:10 - just slap it in as a parameter here
29:13 - and then it'll say hey the method is not
29:16 - applicable for these arguments well you
29:17 - can just say
29:18 - hey change the method to add that
29:19 - parameter and then you can see it
29:21 - automatically does it
29:22 - how awesome is that now let's re-test
29:26 - by the way i'm hitting ctrl f11 to run
29:28 - my program instead of having to come up
29:30 - to
29:30 - run run or click this button ctrl f11
29:34 - where would you like to play one oh i
29:36 - also forgot i'm closing
29:38 - the scanner and i can't be doing that
29:40 - after every turn so let's go back into
29:42 - player turn
29:42 - get rid of this scanner close and we're
29:45 - going to put that
29:46 - at the end of the program so we at the
29:48 - beginning of the program we create our
29:49 - new scanner we do everything we need to
29:50 - do
29:51 - and then at the end of the program uh
29:53 - well actually let's put it
29:55 - here at the end we can't even put it at
29:57 - the end right now because this is dead
29:59 - code
30:00 - because we have a wild true loop here
30:01 - that we never can get out of so let's
30:03 - just put it here
30:04 - comment it out so we remember it for
30:05 - later be a good boy scout and close your
30:07 - scanner
30:08 - and now we're going to test again but
30:09 - the sub programming works you're going
30:10 - to you're going to write some code
30:12 - think everything's going to be just fine
30:14 - see a problem figure it out
30:16 - fix it move on where would you like to
30:18 - play one
30:19 - computer chose 3 where would you like to
30:21 - play two
30:24 - computer chose six where would you like
30:26 - to play now one thing i'm thinking i may
30:28 - have forgotten about is i don't know if
30:29 - it's validating
30:30 - my moves it's make sure the computer is
30:32 - putting it in a valid spot but i don't
30:34 - think it's checking mine so let's see if
30:35 - i can expose that bug by trying to
30:37 - choose spot three right now
30:40 - and yes i can so right now this program
30:43 - allows me to cheat let's go ahead and
30:44 - fix that so what we're going to need to
30:45 - go and fix
30:46 - is this player turn method so let's hop
30:50 - into this player turn method
30:51 - so we've of course got this system.our
30:53 - print line
30:55 - uh where would you like to play and then
30:56 - we use the scanner to get that input
30:57 - from the user well what we need to do
30:59 - before we just place the move
31:01 - is make sure it's valid just like we did
31:04 - for the computer move and so again we're
31:07 - going to put
31:08 - this in a while true loop
31:12 - um if it's a valid move we'll break out
31:14 - of that loop otherwise
31:15 - we will just repeat that loop until we
31:17 - have a valid move
31:19 - and remember our method name was our
31:21 - method name called
31:23 - by the way hit ctrl o to open up the
31:25 - outline of all the methods here i have
31:27 - in this class
31:28 - so it's called is valid move and it
31:31 - takes the
31:32 - board and the int position okay so we're
31:35 - going to
31:36 - call that is valid move takes the board
31:39 - in an int position but our position is a
31:43 - string that comes from the user so we're
31:46 - going to have to convert our user input
31:47 - to an end and um
31:49 - and to do that quickly we're just going
31:50 - to use the integer.parseint
31:53 - cool now we just need to add our if
31:55 - statement if
31:57 - is valid move then we know we've got a
32:01 - valid move
32:02 - and we can break out of our loop and
32:05 - place the move on the board but again we
32:07 - have the same problem we did before
32:08 - where this user input can't be resolved
32:10 - to a variable and that's because again
32:12 - it's declared inside the scope of this
32:13 - wild true loop
32:14 - we need to change it to be declared
32:16 - outside the scope
32:18 - of that loop so it can be used outside
32:21 - that loop
32:22 - so now again let's test okay where would
32:24 - you like to play
32:26 - one so the computer placed at seven
32:28 - let's see if i can override it at seven
32:31 - no i cannot it's making me put it in
32:32 - again but let's put in a useful message
32:34 - to the user
32:35 - um so just else it's not a valid move
32:40 - so we can just print out hey that's
32:42 - that's not a valid move
32:44 - so you can copy this paste that in there
32:46 - and we're going to tell them
32:48 - your input user input
32:52 - plus is
32:55 - is not a valid move so then they can try
32:57 - again let's retest
33:01 - seven is not a valid mover would you
33:03 - like to play seven seven is not a bad
33:05 - move where would you like to play
33:07 - five okay five is good and it continues
33:10 - so now let's let's keep going um
33:13 - two computer chose nine as you can
33:16 - already see we've got to put in some
33:18 - logic to see if it's the end of the game
33:19 - but for now let's just keep going
33:21 - let's put it in spot three okay down the
33:23 - only spot left is
33:25 - six now as you can see it kind of looks
33:28 - like it froze
33:29 - but i have my suspicion that um it
33:32 - probably didn't freeze it's probably
33:34 - churning right now in a while loop and i
33:36 - bet if i open my
33:37 - task manager i'll be able to see that
33:40 - yeah we're using a ton of cpu and
33:42 - eclipse
33:43 - and that's probably because the first of
33:46 - all let's kill this program before it
33:47 - kills my computer
33:48 - now i'm thinking it's looking it's in
33:50 - the middle of this computer turn right
33:51 - now
33:52 - and it's in the middle of this while
33:54 - true loop where the
33:56 - where the computer um gets a random in
33:59 - between one and nine and checks if it's
34:00 - a valid move
34:01 - and if it's not it just tries again well
34:03 - it's out of valid moves so
34:04 - it's gonna just do this forever unless
34:06 - we fix it that brings us to the final
34:08 - main chunk of our program
34:10 - where we have to determine if the game
34:12 - is over
34:13 - and then if the game is over who won or
34:15 - is it a tie
34:16 - so let's just think about that where do
34:17 - we want that in our
34:19 - in our code here so we've got the player
34:21 - takes a turn we print the board the
34:22 - computer takes a turn we print the board
34:24 - and then we keep going through that loop
34:25 - so i think after each turn we can have
34:27 - some code for
34:28 - is the game over and if it is over we
34:30 - kick it out of this loop
34:32 - but we don't need to actually write all
34:33 - of that is the game over
34:35 - code here we can just call a method that
34:37 - does that just like we have player turn
34:39 - print board and whatever
34:40 - so we can actually use the ide to make
34:42 - the shell of
34:43 - that method really quickly right here so
34:45 - let's say we want to call it is
34:47 - game finished and we of course need to
34:50 - pass in the board so we can
34:52 - read the stuff on the board to see if
34:53 - the game's finished well it's like well
34:55 - this method is undefined well you can
34:56 - just hover over this and say
34:58 - okay create it and then we can control
35:01 - click
35:01 - the method name and it'll bring us to
35:03 - the method stub that it created now we
35:05 - just need to write
35:06 - our implementation of is game finished
35:08 - here so now we've got to think we've got
35:10 - a couple of different ways that the game
35:12 - could be finished either we could have a
35:13 - winner
35:14 - um when somebody gets three in a row one
35:17 - way or another you know across or
35:19 - diagonal or up and down or the board is
35:22 - full and there's nothing else anybody
35:24 - can do and it's a tie
35:25 - so first i think we should check is
35:27 - there a winner and then second if we get
35:29 - a no there isn't a winner we just check
35:30 - if the board is full
35:32 - and i'm thinking before we start writing
35:33 - this we want this method to return
35:36 - a boolean for whether the game is
35:38 - finished that's why we call today's game
35:39 - finished
35:40 - and we want to take the result of this
35:43 - if the game is finished
35:45 - then we want to break from our loop so
35:48 - we want to do that after the player's
35:49 - turn and after the computer's turn
35:51 - so okay so now let's implement our is
35:54 - game finished
35:55 - method so right now it's right now it's
35:56 - just angry because we aren't returning
35:58 - any booleans yet we will but for now
36:00 - just to make it happy um we'll just add
36:03 - a
36:04 - return statement so it's so it's happy
36:06 - first let's go ahead and write the check
36:07 - for if the board is full because i think
36:09 - that'll honestly just be easier to do
36:11 - so basically so what we want to do for
36:13 - checking if the if the board is full
36:16 - is just loop through this entire board
36:19 - and if just one of them is blank we know
36:21 - that the the board isn't full yet
36:23 - so how are we going to loop through that
36:26 - 2d array well we're going to have
36:28 - a nested for loop we're going to have
36:31 - one for loop that goes through
36:32 - each of these rows and then one for loop
36:36 - that goes through each of the columns in
36:38 - each of those rows
36:39 - so in our is game finished method where
36:41 - we're checking for a full board
36:42 - we're going to do 4 int
36:46 - i the classic for loop variable
36:50 - we're going to loop through the the
36:51 - length of the board array so that's
36:54 - until i while i is less than
36:58 - board dot length i plus plus
37:02 - and then inside of that we're going to
37:03 - loop through the columns
37:05 - so 4 and j the
37:08 - secondary classic for loop variable
37:12 - j less than board i
37:15 - dot length j plus plus oh and i see i
37:19 - just forgot to initialize these to zero
37:21 - gotta remember that
37:23 - so this might look a little bit
37:24 - confusing but what that enables me to do
37:26 - is look at board
37:29 - i j and
37:33 - find out exactly what's there in that
37:34 - spot in the board so i know this nested
37:36 - for loop is
37:37 - going to loop through every position in
37:40 - the board one by one
37:41 - so what we can do is check board i j
37:45 - equal to blank
37:49 - and if that's the case we can say if
37:53 - board i j equals blank then return
37:57 - false so what that does is loop through
37:59 - the whole board as soon as we find one
38:01 - blank spot
38:02 - we know it's not full and the game's not
38:03 - finished and if it gets through this
38:05 - whole
38:06 - for loop and never finds a blank spot
38:09 - well we got to return true the game's
38:11 - over again let's go ahead and test it
38:18 - and then cool it worked um it ended the
38:20 - program
38:21 - it's not in some infinite while loop or
38:23 - anything like that
38:24 - um it just ended but uh we didn't put in
38:26 - any message or anything we didn't print
38:28 - the ending board so let's go ahead and
38:29 - do that here
38:32 - we also want to print what happened so
38:35 - what happened here is if the game is
38:37 - full it ended in a tie nobody won
38:43 - let's go ahead and test that
38:47 - the game ended in tie awesome so that's
38:49 - now that's all working great
38:50 - what we have left to do is write the
38:52 - code to determine if there is a winner
38:54 - and not just check for a full board so
38:56 - we're going to write it here in our is
38:58 - game finished method so again we're
38:59 - going to
39:00 - check to see if anybody won and if
39:02 - nobody when we do this
39:03 - is the board full check so think about
39:05 - the way we want to implement
39:06 - this check for whether there's a winner
39:08 - so the way i see it there's
39:10 - there's only so many different
39:11 - possibilities you might as well just
39:12 - hard code each one we don't write some
39:14 - clever
39:15 - mathematical method we can just check
39:16 - all of them there's only so many of them
39:18 - so we could have the three
39:19 - rows one two three you could win in any
39:22 - of those ways the three columns
39:24 - one two three so that's six total and
39:27 - then
39:28 - each diagonal seven and eight so we've
39:30 - only got eight different possibilities
39:32 - to code for
39:33 - so first let's i think let's write all
39:35 - of these as if we're checking to see if
39:36 - the player the human player won
39:39 - um and then we'll kind of uh refactor it
39:41 - a little bit so we can either check for
39:43 - a player or computer so let's go ahead
39:45 - and just
39:46 - write all of those checks let's start
39:47 - with the first one the first row
39:49 - so we're going to check if all of this
39:51 - first row are x's then player 1 1.
39:53 - so we got if board zero
39:57 - zero equals x and
40:01 - board zero
40:04 - one equals x i'm gonna copy it for the
40:08 - last one here
40:10 - and board zero two equals x so that's
40:13 - the condition for the first row right
40:15 - and then we just need
40:16 - an or condition for the second row and
40:18 - the third row and the four so we're just
40:20 - gonna have one big giant if statement
40:21 - here for all this
40:22 - we're going to contain all of that in
40:24 - some parentheses here
40:27 - or we're going to copy all of this
40:30 - if player 1 wins on the second row
40:33 - and the second row is just everything
40:36 - change but with a
40:37 - 1 here check the third row so
40:41 - 2 0 2 1
40:44 - and 2 2 so now we got all of our rows
40:47 - checked let's check all the columns
40:49 - and so let's just copy this whole thing
40:51 - we know we've got three
40:52 - checks for columns let's go ahead and
40:56 - put that here so our columns are going
40:58 - to be
41:00 - we've got 0 0 1 0
41:04 - and 2 0. so this is 0 0 this is 1
41:07 - 0 and this is 2 0. we're going to do our
41:09 - second column which is just taking
41:11 - this first column check and then just
41:13 - changing
41:14 - all of these to a 1 and then we take for
41:17 - the third column check we
41:18 - take all of these and change them all to
41:20 - a 2.
41:22 - so now for the diagonal checks we have
41:24 - just two of them
41:26 - and so that's 0 0
41:29 - and then 1 1 2
41:32 - 2 and zero two
41:36 - one one and two zero so i think that's
41:39 - right so now we've got our check
41:41 - for this whole check should check it did
41:43 - the player win
41:45 - so now we just gotta end our
41:48 - if statement here so if all any of these
41:51 - things happened
41:52 - if the player went like this or the
41:54 - player one like this or the player one
41:56 - like this
41:57 - then we want to print out system
42:01 - that out that print line player
42:04 - wins but we also want to uh print the
42:07 - board
42:10 - and we want to return true because the
42:13 - game ended we want to return uh true
42:16 - because the game
42:17 - finished so let's go for it let's run
42:18 - some tests let's see if i can beat the
42:20 - computer playing absolutely randomly
42:23 - one creator chose eight i want to choose
42:26 - two
42:26 - computer shows seven i'm going to choose
42:28 - three
42:30 - and i win i'm a genius wow
42:34 - i'm going to try and go through all of
42:35 - these options and win with all of them
42:36 - so i know that these checks actually
42:38 - work because it's super easy to make a
42:40 - copy paste error and something
42:41 - that looks like this
42:52 - so i am realizing while i'm testing this
42:54 - that when the player enters into valid
42:56 - value it doesn't tell them what's wrong
42:57 - it loops through it right and makes you
42:59 - put in the right value but it doesn't
43:00 - tell you that that value is wrong so
43:01 - let's find the player turn
43:03 - method to fix that so if it's a valid
43:06 - move
43:06 - great we break otherwise we print well
43:09 - we got started with it
43:10 - but we didn't finish it so we're
43:12 - printing out user input
43:14 - uh is not a valid move and now let's uh
43:18 - keep testing
43:26 - awesome i just got done testing all
43:28 - eight possible win scenarios for the
43:30 - player
43:31 - and they all work so that's perfect
43:34 - awesome but right now we're only
43:35 - checking if the player wins we're going
43:37 - to now modify this
43:38 - to check whether the computer is winning
43:40 - also so in order to do that the first
43:42 - thing i'm going to do is extract
43:43 - all of this code this whole big check
43:46 - into a method by itself
43:47 - and allow the symbol that you're looking
43:49 - for to be sent in as a parameter
43:50 - so when we want to check if the player
43:52 - one we can send an x to the method
43:54 - and when we want to check the computer
43:55 - one we can just send an o to the method
43:57 - then we don't have to rewrite all this
43:58 - code or have duplication of a lot of the
44:00 - same kinds of checks
44:01 - so first we want to take out the
44:04 - printing the board and
44:05 - and saying that the player one inside of
44:07 - this method um
44:09 - we'll take that out and put that here
44:10 - because because we don't want the method
44:12 - that just determines whether
44:13 - a player or a computer wants to be
44:15 - responsible for also printing out the
44:16 - board and printing out the player one
44:18 - we'd like to just separate those
44:19 - concerns a little bit so let's go and
44:22 - instruct all of this logic to a method
44:24 - right now alt
44:25 - shift m maybe has contestant
44:29 - one this is also the name of a method i
44:30 - don't love but i can't think of a better
44:32 - one
44:32 - so if you can think of a better one
44:33 - please let me know in the comments i'd
44:35 - love to get a better one here
44:36 - now we can see that the automatically
44:38 - generated method shell here
44:40 - thinks it's a void method because we
44:42 - didn't have a return statement
44:44 - for every possible branch here we
44:45 - actually want to return a boolean here
44:48 - for whether the contestant has won so of
44:50 - course if it meets any of these criteria
44:52 - we return it true
44:53 - and if it gets outside of that we can
44:55 - return false
44:56 - because it didn't meet all those
44:58 - criteria and you don't need to have an
44:59 - else statement here because if
45:01 - any of these conditions are met it will
45:02 - return true and we'll already have left
45:04 - the method
45:04 - and if it gets to this point we know
45:06 - that none of these conditions are met
45:07 - and we can just return false we don't
45:08 - need an else
45:09 - and remember here we also want to take
45:10 - in the character of the symbol that
45:13 - we're looking for whether it's
45:14 - the o for the computer or the x for the
45:16 - player and then instead of explicitly
45:18 - looking for x everywhere here we want to
45:19 - instead
45:20 - look for symbol so let's do a quick find
45:23 - and replace here so i don't have to go
45:25 - insane pasting everything
45:31 - oh and i just realized i spelt constant
45:33 - instead of contestant
45:35 - got constants on the brain so now the
45:37 - check for whether the player has won
45:39 - is a call to has contestant one where we
45:42 - send in the board
45:43 - and the letter x as the symbol so now we
45:46 - can say
45:47 - if this contestant has won this
45:48 - contestant being the player
45:50 - then we know that uh the player has one
45:54 - so we can print that out here
45:58 - and then we do want to return true here
45:59 - still because this still is the method
46:01 - that determines whether the game is
46:02 - finished we want to say yeah the game's
46:04 - finished
46:05 - so now um to do the check for weather
46:07 - computer one it's exactly the same
46:09 - except um we have to
46:13 - look for an o and then we can say
46:16 - if that's the case the computer wins
46:19 - so again let's give it a test first
46:22 - let's test um if i can win still
46:24 - i'll play one and then four
46:28 - and then seven and player wins
46:31 - i'm gonna try and let the computer win
46:32 - but of course it kind of plays dom it
46:33 - plays completely randomly
46:35 - so we'll just see what happens computer
46:38 - wins
46:39 - o got three in a row and that worked out
46:41 - how awesome is that right and all this
46:43 - is not too hard
46:44 - it's all simple programming concepts
46:46 - just just combined in a way that you can
46:47 - make a simple
46:48 - working great tic-tac-toe game complete
46:50 - with a computer opponent
46:52 - super quickly now one thing i do want to
46:54 - address because i'm super picky
46:56 - as a programmer about having everything
46:57 - be super clean is
46:59 - right now i think when you enter
47:00 - something that isn't a number it'll blow
47:02 - up
47:03 - so what i'm saying is right now if i
47:04 - enter like this it explodes with a
47:06 - number format exception now
47:08 - why is that that is because in the
47:11 - player turn method
47:12 - when we gather the user input the the
47:15 - move from the player
47:16 - we immediately try to parse an integer
47:19 - from it
47:19 - in order to call this is valid move
47:21 - method with an integer
47:23 - so there's a couple of ways we could
47:24 - take care of that we could do like a try
47:26 - catch around this uh
47:28 - this parse end here and there's an
47:30 - example of how to do that kind of input
47:31 - validation in this gpa calculator video
47:34 - right here
47:35 - but i think what we can do instead here
47:36 - is just change this is valid move method
47:39 - to accept a string
47:40 - instead of an integer and then we can
47:42 - just pass the string directly to this
47:44 - method and we don't have to ever
47:47 - convert it to an integer we can just
47:49 - check the string the user enters
47:51 - against strings of one or two or
47:54 - whatever
47:55 - so first let's change this method to
47:57 - instead take a string of a position
47:59 - and then we'll fix all the little syntax
48:00 - errors that eclipse tells us about after
48:02 - we do that to me it's kind of easier
48:04 - that way just make the change that
48:06 - you want and then let eclipse flag all
48:08 - the places that you need to change to
48:09 - accommodate that
48:10 - so we'll just change this to a string
48:12 - position and then
48:13 - of course we need to change all these
48:14 - two strings so now here at the end if i
48:21 - send in some garbage that isn't a valid
48:22 - move and isn't even a valid number
48:24 - it doesn't matter it'll just default and
48:26 - return false hey that's not a valid move
48:28 - and won't explode with this number
48:29 - format exception anymore
48:31 - so and then we'll go down to where we're
48:32 - calling that method from the player turn
48:34 - and instead of parsing an
48:35 - int from this user input we just send
48:37 - the user input as a string directly
48:39 - perfect but now there is one other place
48:42 - where that method is called
48:44 - and that's inside the computer term now
48:45 - for the computer turn remember it does
48:47 - send in an int because it uses this
48:49 - rand.nextint
48:51 - in order to produce the random move it
48:52 - wants to make
48:54 - but all we need to do to fix that is
48:56 - just use another method
48:57 - called integer.2 string
49:01 - and pass in that move to convert it to a
49:03 - string
49:04 - and you might be thinking well aren't we
49:05 - just replacing one problem with another
49:08 - well no all ins can be converted into a
49:11 - string
49:12 - any series of numbers is also going to
49:13 - be a valid string so we won't have the
49:15 - same
49:16 - formatting exceptions as we would
49:17 - converting a string
49:19 - to an integer so that should be all we
49:21 - have to do let's go ahead and test the
49:22 - user input validation now
49:24 - put in my garbage and it says it's not a
49:27 - valid move
49:28 - awesome and then i can say one and of
49:31 - course one is a valid move so it accepts
49:33 - it
49:33 - and i like doing stuff like that being
49:35 - able to validate the user input like
49:37 - that
49:37 - so it doesn't create a bad experience
49:39 - for the user somebody's playing your
49:40 - tic-tac-toe game and they accidentally
49:41 - type something that isn't a number
49:42 - doesn't just blow up on them and make
49:44 - them start over
49:45 - it adapts to the situation and allows
49:47 - you to put in the correct input and
49:48 - that's what a good program should always
49:50 - do
49:50 - it's got to be a good boy scout with
49:51 - your programs so now one other thing um
49:54 - we just have some commented code that we
49:56 - don't need anymore that we can get rid
49:57 - of
49:58 - let's go ahead and get rid of this i
50:00 - don't i still think we're not closing
50:02 - our scanner so let's go ahead and do
50:03 - that at the end of the program
50:05 - and so yeah now at the end here let's go
50:07 - ahead and like zoom out and just get a
50:08 - high level view of this program and
50:10 - what it looks like zoom on out here
50:13 - there's not a whole lot to it it's 173
50:16 - lines and that's with a bunch of these
50:17 - blank lines and stuff there's not a
50:19 - whole lot to it and we probably could
50:20 - whittle it down a little bit more if we
50:21 - really wanted to
50:23 - but we don't really have to this is a
50:24 - very simple program that you can make
50:26 - tic-tac-toe with another thing i like
50:27 - about it is the main method is very
50:29 - simple all it does is set up the board
50:30 - print it and then do the player turn and
50:33 - the computer turn in a loop
50:35 - and then stop and all the complexity is
50:37 - broken down into these other methods so
50:39 - it's really easy
50:40 - to keep in your brain how it works when
50:41 - you're looking at an individual part of
50:43 - this
50:43 - and that's kind of a mark of a good
50:45 - program too you don't want one big
50:47 - giant main method where it's really hard
50:49 - to just
50:50 - keep in your brain what's happening at
50:52 - any given time for any part of this
50:54 - you can look at that method and
50:55 - understand what it's doing and you can
50:57 - break it down too like i can go into the
50:58 - player turn method
50:59 - so i can see it's getting input from the
51:01 - user validating it
51:03 - and then placing that move on the board
51:04 - and that's it it's super dead simple
51:06 - each method has one job and it does it
51:08 - well and it does exactly what you would
51:10 - think it would do by the name of it
51:11 - so i think that's going to be it today
51:13 - guys thank you so much for watching
51:15 - now remember the whole source code that
51:16 - you're looking at here is available in a
51:18 - link down in the description so go
51:19 - grab it take a look at it make it better
51:22 - rearrange stuff play with it have fun
51:24 - if you enjoyed this video got some value
51:26 - out of it had some fun making
51:27 - tic-tac-toe please give me a like it
51:28 - means so much it's so appreciated
51:30 - and if you'd like to see more videos
51:31 - like this please be sure to subscribe
51:33 - alright that's it until next time guys
51:35 - keep at it happy programming and i will
51:36 - see you in the next video

Cleaned transcript:

hey guys today we're going to code a tictactoe game in java starting from scratch you're going to see the whole thing the thought process behind it the mistakes i make if any now before we get started here guys i want you know the full source code of this completed tictactoe game is available in the link down in the description so go grab it don't just grab it and use it to cheat grab it so you can pull it down and mess with it and play with it and improve upon it and break stuff and mess around with it have fun with it and if you like having that source code please let me know by liking the video it really means so much to me thank you so yeah we're gonna work it out as we go so let's get to it so for this game example we're just going to do the output like in the console and not use a gui or anything that just to keep it simple and work through the logic of how to create a tictactoe game we're going to make sure we can print the board and then take user input and put it in the right place we need to have some kind of a computer opponent that does some kind of moves and also we need to be able to check if the game is over meaning if the player or the computer has one or if the board is full and nobody has one then we've got a tie so those are kind of all the little pieces i'm thinking of there may be more to it as we work it out but who knows let's get going so first let's just come up with a way to print a board so we can look at the console and see what's happening i think the board that we're going to have is a probably a 2d array of char of characters so you can imagine they all start out blank and then we'll turn them into x's or o's depending on if the computer or the human player places something there so um let's just start out with that so we've got char double array and if you don't understand the multidimensional or 2d arrays it's not so bad here you're probably familiar with regular arrays like this this is just an array of characters and this you can kind of just think as a grid of characters and we'll type out what it looks like when we declare it so call it board good name for a board and we're going to essentially what we want is three rows of three characters a piece so we can come up with that grid so we're going to start out with all of them being just blank spaces and then later on when they get filled in they'll be x's and o's so we're going to declare our um board with just spaces so the first array the first row will be space space space and then it'll be the same for the second row so we'll copy that paste that and then of course the same for the third and that's it that's essentially our our game board now um let me reformat that to kind of show to get a better representation of what of what the board actually looks like here so this spot here is the top left spot on our game board and this one's the bottom right and everything else fits in exactly how you would expect so now let's um just come up with a way that we can print the board so so to print the board we not only want to print what's in each of these um spots but we also want to print the grid the hashtag the pound between all of these spots so to do that i think what we're going to do is like for the example for the top row we'll print this first value then we'll print a vertical bar and then print the second value and then print a vertical bar and then this third value and then we'll have like a we'll print out a line separator and then we'll print the second row similarly to how we did the first row and so on till we get the whole thing printed so let's just write out a system.out.printline so first we want to print out this top left spot and to get that spot um it's the zeroth spot the first the first is the zero the zeroth spot on the zeroth array so we can reference that by just board zero zero but let's actually go ahead and test that we can refer to that spot just by let's say we this was an x and we run our program it prints out an x it is success board zero zero is successfully referencing this first spot so now let's change that back before we mess something up and then we want to print a vertical bar and then um board zero one still the first the zeroth row and then the second spot in it is one not two nope one all right and then uh we just got one more we want to print the third spot here and i'm sorry this line's going pretty long that's okay okay so let's just test that out real quick x o o run bam we've got our first row um now let's print the um the row of like a line separator so i'm thinking under that first spot we just have a hyphen and then i think we do a plus sign so we can get the the cross part of the hash tag pound um and then hyphen plus hyphen uh let's see how that looks so we're going to copy this first line and we'll just we're just going to change what we're printing here so we're going to change um we're going to do the first row for everything the first row meaning the second row this row we're now printing this row so we got one zero one one and one two cool cool cool and then we're going to print the separator again we'll just copy that paste it and then let's do our third row so we've got two zero two one and two two so let's just try this out one two three four five six seven you get the drill here nine cool all right let's expand this so we can see it awesome we can print our board so now what we probably want to do is move all of this printing out to its own method so we can call it whenever we need to because we're going to print the board many times during this program's running um so you know how you can do that you can write our like private print but if you're working in an ide quick tip i'm working in eclipse right now i can highlight all of this and i can either right click and go to refactor extract method or i can just hit alt shift m with all of this highlighted so i'm going to do that alt shift m and you just tell it the name the method that you want this to be but guess what we're going to call it print board and look awesome it made it a private static void print board takes in the character array of the board and prints it out so now whenever we want to print out the current state of the board all we have to do is call that method and now we can forget about this completely put it out of your mind it's already written whenever we want to print the board we can just print the board all right now again before i forget i'm just going to change all these back to blanks and now that we know that we can print the board we don't need to really mess with that anymore so now we need to have a way to take user input like say i want to put my x in this spot here or i want to put it here we want to be able to take the user's input and put it in the right spot so i think what we're going to do is instead of making the user like type in zero zero or zero one nobody wants to do that we're probably going to allow them to type in one of these numbers for these positions so if they want to insert it into the top left they'll enter a one if they want to insert the middle and give it a five etc so first let's just do this simple part of taking in that number from the user and to do that we're going to use the scanner class so the scanner scanner equals new scanner and we're going to use system.in for the user input we're going to organize imports so we can automatically import java util scanner by the way that was control shift o in eclipse to automatically do that and if by the way if you want a full tutorial on scanner and how to get user input with it go ahead and click this link up here i've got a whole video on it it's great all right so we're going to get the input from the user as a string string user input equals scanner dot next line and that gets the line entered by the user and puts it in this user and it puts it in this user input variable and let's go ahead and test that too i like testing system.printline user input oh and we might also want to prompt the user um where would you like to play kind of weird but hey that's i guess the best thing i can think of right now it doesn't matter and we'll we'll tell them uh one through nine so they know what that one to input so let's go ahead and give that a test and now it says where would you like to play one through nine and we could say one and it prints out one so cool we're getting that input right now what we want to be able to do is take this user input and actually place the x we'll make player one the x we want to be able to place the x and the spot where they asked it to go so we can use a big if else block or we can use a switch statement and for for ones with a lot of options like this i kind of like to use a switch statement so what we're going to say is switch on the value of the user input and then in the case get over there that the user input is um 1 we want to assign this value as x right so case one is uh board zero zero set equal to an x oh and this is a string not in it so we're gonna just put quotes around that and then we want to remember to add our break statements you just want to remember to add breaks whenever you uh write your switch statements otherwise you could have you have potential for some weird behavior just put in breaks so we're going to copy and paste for the other eight values so two would be zero one this spot here there's our zero one this spot here and so on okay so that should be all of them i'm going to zoom out actually a little bit so you can actually see all of this for just a second and we're going to fix the formatting on this i don't know why i formatted it like that as you can see we've got a case for each of what a user should put in if they put in something else we'll put in some validation for that later on but right now we're going to have a default statement so if they don't send one through nine we're just going to be sad so default that means if none of those are met it'll just it'll just pronounce that base then after we've gotten the input from the user and assigned the right spot on the board with an x let's go ahead and print the board again which now that we've got a method we can just say print board that's it print board board and let's run it where would you like to play um three bam we get an x on the three spot how awesome is that right you're making a game it's really cool even simple games like this are just a lot of fun to make so let's clean this up a bit and um extract all of this stuff that's getting the printing the the message to the user getting the input and putting it in the right spot on the board let's put that in its own method two so alt shift m um player turn hit okay and now whenever we want the player to take a turn it's all right there and if we need to enhance it or do anything else special in there we can just fix up this player turn method let's go ahead and zoom in back a little bit here actually we we don't need this print line of what the user input anymore we can get rid of that so now this method for the player term just prints out where would you like to play takes the input from the user puts it in the right spot and returns awesome so now we come on so now we're coming to what might seem like a complicated part and that's how to get the computer's turn to work um so you might be thinking hi am i going to write some kind of really complex algorithm to do all the optimal stuff we're not going to worry about that here we're just going to make the computer kind of play in a random open spot so if you want to learn how to make like the the perfect algorithm for how the computer could play to never ever lose and have no fun playing your game i'm sure you can find other videos on that it's not the focus of this here so essentially what we're going to do here is have the computer pick a random spot between 1 and 9 and if that spots available that's what it's going to pick so to generate random numbers in java generally use the random class so random rand equals new random and then if you want to make a random int we'll organize imports uh ctrl shift o or if you need the import java.util.random and then the method call to get a random int is called rand dot next int so what you can type in is a number and it's going to give you a random int between zero and one less than that number so what we actually have to do is because we want to get a number between 1 and 9 is we have to get a random int between 0 and 8 and add 1 to it and so to do that we're going to pass in uh nine and then we're going to add one to our results type this out and we'll go over it in a second so int computer play equals rand dot next in nine plus one so this will give us a random int between zero and eight but we want the random in to be between one and nine so we're just gonna take the zero to eight add one to it and we've got a random number between one and nine okay but what if this spot is already taken by an x or an o um then this play won't work so what we have to do is add a check for whether that spot is taken or not whether if that spot is blank we're good if it's not blank yeah the computer needs to try again and now we're also probably going to need a way to do that for the player turns too and so let's just go ahead and make a standalone method that just takes in one of these numbers one through nine and just tells you whether or not that space is available with a boolean let's create that method from scratch right private static boolean the return value is going to be a boolean is space available there's a good name for that and it's going to take in the board and the uh whoops so it's going to be a char double array board and the position int position okay so a lot of logic is going to match um exactly what we've got here so let's go ahead and steal the switch statement from ourselves and paste that up here so first we want to switch on the position that is sent into this method and um of course since the this case statement we had before was looking at strings but here it's taking an int we're just going to change all these uh to numbers okay then in all these spots instead of assigning a value we just want to return whether or not that space is occupied so um to do a character equals check you can just use double equals so we can say if this spot on the board is equal to a space then we can return true right and then else of course return false and now you can see this break is dead code because we're either returning true or false when we're in here there's no way it's going to reach this so you don't need break statements here it's an exception a little small pro tip if you want to clean up this code a little bit you have if blah blah blah equals blank then return true else return false what you can actually do is shortcut this and just return the value of this evaluation here and so this will do exactly the same thing it will return true if this is the case it will just return the truth value of this statement so if the board at this spot is equal to blank it'll return true but it's just a lot less messy code to look at and figure out so let's just go ahead and copy that for each of these other spots and actually come to think of it instead of saying is space available we can just use like is this a valid move so like and that way if they put in something like the user puts in something like 0 or 10 or something we can also say that's just not a valid move because so it's a little bit more broad and helps us more than just in the space available just this makes this method a little bit more useful to us so let's say is valid move okay so great now we've got a method that takes in the board in a position and tells us whether or not that's a valid move okay so then we want to default to false so if they if they didn't if they so if they entered one two three four et cetera we'd look in the right spot and tell them whether or not that space is available but otherwise we return false that's not a valid move they can't enter anything except for one through nine okay so right now this isn't called anywhere so what we want to do is if this computer play if it's taken already if that spot is taken we want to loop until the computer comes up with a value that is available so probably the easiest way to do that here is just use a while true loop and and then we can just say that if the computer makes a valid move we can break out of that loop and then if it doesn't make a valid move and doesn't break out the loop it just goes in and tries it again so we can just say if is valid move pass in the board pass in our position which is our computer play so if that's a valid move break and that kicks us out of this while loop so we know that when we exit this loop this computer play is a valid move great so now that we have this valid computer play we want to be able to place that play on the board now i'm thinking about it so we've got this method that allows the player to take a turn and does all of this check logic and assigning but i think what we can do is refactor this a bit to this section of the logic so we don't have to duplicate this logic anywhere and it can be able to either take the computer's play or the player's play and put it in the right spot and this will happen a lot as you're writing your code if you keep an eye out for it you might find yourself starting to duplicate something and go ah maybe i can reuse some other part of my code okay so how are we going to do that basically the we don't want to copy the part where the uh where we ask the user what they want to play because we don't need that for the computer we don't need to use the scanner to get anything from the user but we do want effectively this part of this the switch statement here so let's extract this switch statement into its own method so we called it a move before so i guess we'll just call it place move um let's go ahead and do that but i think we might have called this a play let's rename this to computer move to be consistent throughout our code and we'll even call this a player move right and by the way to rename any clips you can just uh be selecting the the the method or the variable that you want to rename and hit alt shift r and then you can rename it to whatever you want and as you can see it renames it across the entire application so you don't need to go and copy and paste everywhere like a mental patient you can just do it in one spot so now we've got this place move method now the uh the string that comes in won't be the user input it'll instead be the position that we want to place that move but we also need to know since we're going to be using this for the computer plays the computer moves and the player moves we need to know which character we should be putting in there because we want this method to be able to be used for both computer and player so we're going to take a char symbol that might be a terrible name maybe you come up with a better one if so let me know in the comments because i'm interested in the best name for this for this variable so anyway now we're still going to switch on this position and in the case of one we're going to insert the symbol in the case of one instead of always putting in x we're just going to put in what that symbol is so again this can be used for computer or player and still if something sends this method a bad number which it shouldn't we'll just print out a sad face okay so now that we've made this method that can place a move for either player in this player turn method we need to actually send it the right stuff so we're going to send them the user input which is the position but we also need to send it the symbol so for a player turn we want the player to be an x right so this is telling this method hey when you place this move put an x in there so now that works for the player now let's hook that up for the computer so back up here in our main method it's still in our main method after we've got the valid computer move we want to tell this place move method to play the move for the computer so let's do it we're going to place move and what does it take i can hit uh control space in eclipse to show this uh this kind of autocomplete so i need a char board so if we pass in board a string position which we know the computer move is the position and char symbol which for us is going to be an o for the computer now if you notice we've got a red underline here and that's because it's saying well computer move can't be resolved to a variable and that's because it's declared inside the scope of this while loop here so once it exits this scope there's no such thing as this variable so what we actually have to do is take this int and declare it here get rid of our int declaration there and we're good except except oh no okay the method please move char a string char is not compatible with arguments char a int char and that's because this computer move variable is an int and not a string so um we need to quickly just convert that to a string before we can pass it in and the easiest way to do that is just using the integer dot 2 string method and you pass in the inch that you want to convert to a string and it does it now great it's happy so now we've added a lot of stuff and refactored a lot of things so let's real quickly um assess what we've got and then we're going to test so let's see we're making the board we're printing the blank board we're declaring scanner why are we declaring scanner in here we only need it inside this player turn method so actually let's do a little bit more refactoring get rid of the scanner here we don't need to pass it into player turn we can just go into this player turn method and create our scanner here exactly when we need it and we'll get rid of scanner input so you might see this yellow wavy line for this scanner not being closed it's probably not a big deal in a small program like this but if you want to be a good little boy scout you can go ahead and close your scanner here at the end of the method when it's done being used by calling scanner dot close anyway back to here so now we are we create our board print the blank board the player takes a turn and then we do all of this stuff to have the computer play a move and print the board again so that's what we've got so far we've got the player takes a move the computer takes a move and we print the board so let's go ahead and test and see if all that works so where would you like to play um let's play in two okay so now the computer made a move on spot four so awesome let's try it again um i'll play in spot four okay and the computer placed here let's just do it a few more times to see if we run into any weirdness i'm gonna play one all of one through nine and make sure my stuff gets placed right and if there's any exceptions or anything okay so one thing i am noticing when i play a six and it might not have been only because of the six i might have just shown up here at random but so i played six and it looks like the computer was able to override that but it shouldn't be able to do that because we have this is valid move check and so it should only be doing that if that space isn't occupied so let's try and figure out what's going on there um and in eclipse if you want to go directly to a method that you're looking at um like if this is the method call you can hold control and click the method name and it'll bring you right to that method so i saw it specifically happen for sixes let's look and uh i can already see the problem case six we've got a copy and paste error i missed changing this value it should be um row one which is the second row um and then spot three red spot two which is the third column that's what should so that that so that check wasn't working properly and that's why we got those issues on six so let's take a second and confirm all the rest of these zero zero zero one zero two one zero one one one two two zero two one two two cool let's test six again a few more times okay awesome it appears to be working now that's why you test like that don't worry about making mistakes like that you're going to make them just make sure you test your programs thoroughly and you'll be able to quickly find and fix your errors no problem at all so let's go through the rest of them we still have 789 to test okay cool now that all appears to be working now of course we've only got i take a turn the computer takes a turn and then the game's over um so we've got to fix that so let's go ahead and um first let's clean this up just a little bit so that this oh so all of this code here is to make the computer take them turn so let's go ahead and extract that to a method so we can reuse it all we want and we'll call it a computer turn so now when we want the computer to take a turn we just call this method i guess it would be nice to be able to see the board between turns so we're just going to add in another uh print board here between these turns it would also just be nice to see a little print out a sentence of where the computer chose to put their move so let's go to the computer turn method and just add a little statement for that now let's give that all a quick test because we just rearranged a lot of stuff let's make sure we do it right where would you like to play one computer chose nine bam okay so now um of course the we only have one move for me and one move for the computer so um let's go ahead and just add in a little simple wild true loop to just keep it going back and forth so basically we're going to have the player take a turn print the board have the computer take a turn print the board etc etc so let's go ahead and just copy this up here and we'll do a while we might we might make this a little more fancy in the future but for now we're just going to do a while true and it might stay that way we're just going to loop through this forever and of course now this is dead code so it's going to complain we're going to comment it out for now so let's give it a test where would you like to play one so i see an exception when it was trying to prompt me um for where i want to play next i think it could be because um i'm recreating this scanner maybe i do need to just have one scanner at the top that's passed in everywhere so one let's see if that solves the issue go ahead and grab this scanner and put it back where it was and but then we have to pass that into the player turn again if you didn't know a quick way to do that so say you want to add a parameter to this method but you don't have to actually go to this method and type in that extra parameter you can just slap it in as a parameter here and then it'll say hey the method is not applicable for these arguments well you can just say hey change the method to add that parameter and then you can see it automatically does it how awesome is that now let's retest by the way i'm hitting ctrl f11 to run my program instead of having to come up to run run or click this button ctrl f11 where would you like to play one oh i also forgot i'm closing the scanner and i can't be doing that after every turn so let's go back into player turn get rid of this scanner close and we're going to put that at the end of the program so we at the beginning of the program we create our new scanner we do everything we need to do and then at the end of the program uh well actually let's put it here at the end we can't even put it at the end right now because this is dead code because we have a wild true loop here that we never can get out of so let's just put it here comment it out so we remember it for later be a good boy scout and close your scanner and now we're going to test again but the sub programming works you're going to you're going to write some code think everything's going to be just fine see a problem figure it out fix it move on where would you like to play one computer chose 3 where would you like to play two computer chose six where would you like to play now one thing i'm thinking i may have forgotten about is i don't know if it's validating my moves it's make sure the computer is putting it in a valid spot but i don't think it's checking mine so let's see if i can expose that bug by trying to choose spot three right now and yes i can so right now this program allows me to cheat let's go ahead and fix that so what we're going to need to go and fix is this player turn method so let's hop into this player turn method so we've of course got this system.our print line uh where would you like to play and then we use the scanner to get that input from the user well what we need to do before we just place the move is make sure it's valid just like we did for the computer move and so again we're going to put this in a while true loop um if it's a valid move we'll break out of that loop otherwise we will just repeat that loop until we have a valid move and remember our method name was our method name called by the way hit ctrl o to open up the outline of all the methods here i have in this class so it's called is valid move and it takes the board and the int position okay so we're going to call that is valid move takes the board in an int position but our position is a string that comes from the user so we're going to have to convert our user input to an end and um and to do that quickly we're just going to use the integer.parseint cool now we just need to add our if statement if is valid move then we know we've got a valid move and we can break out of our loop and place the move on the board but again we have the same problem we did before where this user input can't be resolved to a variable and that's because again it's declared inside the scope of this wild true loop we need to change it to be declared outside the scope of that loop so it can be used outside that loop so now again let's test okay where would you like to play one so the computer placed at seven let's see if i can override it at seven no i cannot it's making me put it in again but let's put in a useful message to the user um so just else it's not a valid move so we can just print out hey that's that's not a valid move so you can copy this paste that in there and we're going to tell them your input user input plus is is not a valid move so then they can try again let's retest seven is not a valid mover would you like to play seven seven is not a bad move where would you like to play five okay five is good and it continues so now let's let's keep going um two computer chose nine as you can already see we've got to put in some logic to see if it's the end of the game but for now let's just keep going let's put it in spot three okay down the only spot left is six now as you can see it kind of looks like it froze but i have my suspicion that um it probably didn't freeze it's probably churning right now in a while loop and i bet if i open my task manager i'll be able to see that yeah we're using a ton of cpu and eclipse and that's probably because the first of all let's kill this program before it kills my computer now i'm thinking it's looking it's in the middle of this computer turn right now and it's in the middle of this while true loop where the where the computer um gets a random in between one and nine and checks if it's a valid move and if it's not it just tries again well it's out of valid moves so it's gonna just do this forever unless we fix it that brings us to the final main chunk of our program where we have to determine if the game is over and then if the game is over who won or is it a tie so let's just think about that where do we want that in our in our code here so we've got the player takes a turn we print the board the computer takes a turn we print the board and then we keep going through that loop so i think after each turn we can have some code for is the game over and if it is over we kick it out of this loop but we don't need to actually write all of that is the game over code here we can just call a method that does that just like we have player turn print board and whatever so we can actually use the ide to make the shell of that method really quickly right here so let's say we want to call it is game finished and we of course need to pass in the board so we can read the stuff on the board to see if the game's finished well it's like well this method is undefined well you can just hover over this and say okay create it and then we can control click the method name and it'll bring us to the method stub that it created now we just need to write our implementation of is game finished here so now we've got to think we've got a couple of different ways that the game could be finished either we could have a winner um when somebody gets three in a row one way or another you know across or diagonal or up and down or the board is full and there's nothing else anybody can do and it's a tie so first i think we should check is there a winner and then second if we get a no there isn't a winner we just check if the board is full and i'm thinking before we start writing this we want this method to return a boolean for whether the game is finished that's why we call today's game finished and we want to take the result of this if the game is finished then we want to break from our loop so we want to do that after the player's turn and after the computer's turn so okay so now let's implement our is game finished method so right now it's right now it's just angry because we aren't returning any booleans yet we will but for now just to make it happy um we'll just add a return statement so it's so it's happy first let's go ahead and write the check for if the board is full because i think that'll honestly just be easier to do so basically so what we want to do for checking if the if the board is full is just loop through this entire board and if just one of them is blank we know that the the board isn't full yet so how are we going to loop through that 2d array well we're going to have a nested for loop we're going to have one for loop that goes through each of these rows and then one for loop that goes through each of the columns in each of those rows so in our is game finished method where we're checking for a full board we're going to do 4 int i the classic for loop variable we're going to loop through the the length of the board array so that's until i while i is less than board dot length i plus plus and then inside of that we're going to loop through the columns so 4 and j the secondary classic for loop variable j less than board i dot length j plus plus oh and i see i just forgot to initialize these to zero gotta remember that so this might look a little bit confusing but what that enables me to do is look at board i j and find out exactly what's there in that spot in the board so i know this nested for loop is going to loop through every position in the board one by one so what we can do is check board i j equal to blank and if that's the case we can say if board i j equals blank then return false so what that does is loop through the whole board as soon as we find one blank spot we know it's not full and the game's not finished and if it gets through this whole for loop and never finds a blank spot well we got to return true the game's over again let's go ahead and test it and then cool it worked um it ended the program it's not in some infinite while loop or anything like that um it just ended but uh we didn't put in any message or anything we didn't print the ending board so let's go ahead and do that here we also want to print what happened so what happened here is if the game is full it ended in a tie nobody won let's go ahead and test that the game ended in tie awesome so that's now that's all working great what we have left to do is write the code to determine if there is a winner and not just check for a full board so we're going to write it here in our is game finished method so again we're going to check to see if anybody won and if nobody when we do this is the board full check so think about the way we want to implement this check for whether there's a winner so the way i see it there's there's only so many different possibilities you might as well just hard code each one we don't write some clever mathematical method we can just check all of them there's only so many of them so we could have the three rows one two three you could win in any of those ways the three columns one two three so that's six total and then each diagonal seven and eight so we've only got eight different possibilities to code for so first let's i think let's write all of these as if we're checking to see if the player the human player won um and then we'll kind of uh refactor it a little bit so we can either check for a player or computer so let's go ahead and just write all of those checks let's start with the first one the first row so we're going to check if all of this first row are x's then player 1 1. so we got if board zero zero equals x and board zero one equals x i'm gonna copy it for the last one here and board zero two equals x so that's the condition for the first row right and then we just need an or condition for the second row and the third row and the four so we're just gonna have one big giant if statement here for all this we're going to contain all of that in some parentheses here or we're going to copy all of this if player 1 wins on the second row and the second row is just everything change but with a 1 here check the third row so 2 0 2 1 and 2 2 so now we got all of our rows checked let's check all the columns and so let's just copy this whole thing we know we've got three checks for columns let's go ahead and put that here so our columns are going to be we've got 0 0 1 0 and 2 0. so this is 0 0 this is 1 0 and this is 2 0. we're going to do our second column which is just taking this first column check and then just changing all of these to a 1 and then we take for the third column check we take all of these and change them all to a 2. so now for the diagonal checks we have just two of them and so that's 0 0 and then 1 1 2 2 and zero two one one and two zero so i think that's right so now we've got our check for this whole check should check it did the player win so now we just gotta end our if statement here so if all any of these things happened if the player went like this or the player one like this or the player one like this then we want to print out system that out that print line player wins but we also want to uh print the board and we want to return true because the game ended we want to return uh true because the game finished so let's go for it let's run some tests let's see if i can beat the computer playing absolutely randomly one creator chose eight i want to choose two computer shows seven i'm going to choose three and i win i'm a genius wow i'm going to try and go through all of these options and win with all of them so i know that these checks actually work because it's super easy to make a copy paste error and something that looks like this so i am realizing while i'm testing this that when the player enters into valid value it doesn't tell them what's wrong it loops through it right and makes you put in the right value but it doesn't tell you that that value is wrong so let's find the player turn method to fix that so if it's a valid move great we break otherwise we print well we got started with it but we didn't finish it so we're printing out user input uh is not a valid move and now let's uh keep testing awesome i just got done testing all eight possible win scenarios for the player and they all work so that's perfect awesome but right now we're only checking if the player wins we're going to now modify this to check whether the computer is winning also so in order to do that the first thing i'm going to do is extract all of this code this whole big check into a method by itself and allow the symbol that you're looking for to be sent in as a parameter so when we want to check if the player one we can send an x to the method and when we want to check the computer one we can just send an o to the method then we don't have to rewrite all this code or have duplication of a lot of the same kinds of checks so first we want to take out the printing the board and and saying that the player one inside of this method um we'll take that out and put that here because because we don't want the method that just determines whether a player or a computer wants to be responsible for also printing out the board and printing out the player one we'd like to just separate those concerns a little bit so let's go and instruct all of this logic to a method right now alt shift m maybe has contestant one this is also the name of a method i don't love but i can't think of a better one so if you can think of a better one please let me know in the comments i'd love to get a better one here now we can see that the automatically generated method shell here thinks it's a void method because we didn't have a return statement for every possible branch here we actually want to return a boolean here for whether the contestant has won so of course if it meets any of these criteria we return it true and if it gets outside of that we can return false because it didn't meet all those criteria and you don't need to have an else statement here because if any of these conditions are met it will return true and we'll already have left the method and if it gets to this point we know that none of these conditions are met and we can just return false we don't need an else and remember here we also want to take in the character of the symbol that we're looking for whether it's the o for the computer or the x for the player and then instead of explicitly looking for x everywhere here we want to instead look for symbol so let's do a quick find and replace here so i don't have to go insane pasting everything oh and i just realized i spelt constant instead of contestant got constants on the brain so now the check for whether the player has won is a call to has contestant one where we send in the board and the letter x as the symbol so now we can say if this contestant has won this contestant being the player then we know that uh the player has one so we can print that out here and then we do want to return true here still because this still is the method that determines whether the game is finished we want to say yeah the game's finished so now um to do the check for weather computer one it's exactly the same except um we have to look for an o and then we can say if that's the case the computer wins so again let's give it a test first let's test um if i can win still i'll play one and then four and then seven and player wins i'm gonna try and let the computer win but of course it kind of plays dom it plays completely randomly so we'll just see what happens computer wins o got three in a row and that worked out how awesome is that right and all this is not too hard it's all simple programming concepts just just combined in a way that you can make a simple working great tictactoe game complete with a computer opponent super quickly now one thing i do want to address because i'm super picky as a programmer about having everything be super clean is right now i think when you enter something that isn't a number it'll blow up so what i'm saying is right now if i enter like this it explodes with a number format exception now why is that that is because in the player turn method when we gather the user input the the move from the player we immediately try to parse an integer from it in order to call this is valid move method with an integer so there's a couple of ways we could take care of that we could do like a try catch around this uh this parse end here and there's an example of how to do that kind of input validation in this gpa calculator video right here but i think what we can do instead here is just change this is valid move method to accept a string instead of an integer and then we can just pass the string directly to this method and we don't have to ever convert it to an integer we can just check the string the user enters against strings of one or two or whatever so first let's change this method to instead take a string of a position and then we'll fix all the little syntax errors that eclipse tells us about after we do that to me it's kind of easier that way just make the change that you want and then let eclipse flag all the places that you need to change to accommodate that so we'll just change this to a string position and then of course we need to change all these two strings so now here at the end if i send in some garbage that isn't a valid move and isn't even a valid number it doesn't matter it'll just default and return false hey that's not a valid move and won't explode with this number format exception anymore so and then we'll go down to where we're calling that method from the player turn and instead of parsing an int from this user input we just send the user input as a string directly perfect but now there is one other place where that method is called and that's inside the computer term now for the computer turn remember it does send in an int because it uses this rand.nextint in order to produce the random move it wants to make but all we need to do to fix that is just use another method called integer.2 string and pass in that move to convert it to a string and you might be thinking well aren't we just replacing one problem with another well no all ins can be converted into a string any series of numbers is also going to be a valid string so we won't have the same formatting exceptions as we would converting a string to an integer so that should be all we have to do let's go ahead and test the user input validation now put in my garbage and it says it's not a valid move awesome and then i can say one and of course one is a valid move so it accepts it and i like doing stuff like that being able to validate the user input like that so it doesn't create a bad experience for the user somebody's playing your tictactoe game and they accidentally type something that isn't a number doesn't just blow up on them and make them start over it adapts to the situation and allows you to put in the correct input and that's what a good program should always do it's got to be a good boy scout with your programs so now one other thing um we just have some commented code that we don't need anymore that we can get rid of let's go ahead and get rid of this i don't i still think we're not closing our scanner so let's go ahead and do that at the end of the program and so yeah now at the end here let's go ahead and like zoom out and just get a high level view of this program and what it looks like zoom on out here there's not a whole lot to it it's 173 lines and that's with a bunch of these blank lines and stuff there's not a whole lot to it and we probably could whittle it down a little bit more if we really wanted to but we don't really have to this is a very simple program that you can make tictactoe with another thing i like about it is the main method is very simple all it does is set up the board print it and then do the player turn and the computer turn in a loop and then stop and all the complexity is broken down into these other methods so it's really easy to keep in your brain how it works when you're looking at an individual part of this and that's kind of a mark of a good program too you don't want one big giant main method where it's really hard to just keep in your brain what's happening at any given time for any part of this you can look at that method and understand what it's doing and you can break it down too like i can go into the player turn method so i can see it's getting input from the user validating it and then placing that move on the board and that's it it's super dead simple each method has one job and it does it well and it does exactly what you would think it would do by the name of it so i think that's going to be it today guys thank you so much for watching now remember the whole source code that you're looking at here is available in a link down in the description so go grab it take a look at it make it better rearrange stuff play with it have fun if you enjoyed this video got some value out of it had some fun making tictactoe please give me a like it means so much it's so appreciated and if you'd like to see more videos like this please be sure to subscribe alright that's it until next time guys keep at it happy programming and i will see you in the next video
