With timestamps:

00:00 - do you need to write a program in java
00:01 - to find prime numbers if so this is the
00:03 - video you're looking for
00:04 - we're going to write a java program to
00:06 - find prime numbers from scratch
00:07 - first a program to find all prime
00:09 - numbers between 1 and 100 and then we'll
00:10 - expand it to find all prime numbers
00:12 - between
00:12 - 1 and n a number that the user inputs
00:15 - and then once we get to be able to find
00:16 - the first
00:17 - n prime numbers so whatever way you need
00:19 - to find prime numbers in java we're
00:20 - going to cover it here
00:21 - if this is your first time watching this
00:23 - channel my name is john and i do a java
00:24 - tutorial video every week either a
00:26 - lesson on a java concept or a full
00:28 - walkthrough of a program from scratch
00:30 - like this one so be sure to like and hit
00:31 - the subscribe button so you don't miss
00:33 - the new video every week
00:34 - and a sincere thanks for taking the time
00:35 - to like and subscribe it's the only way
00:37 - the channel grows and these videos reach
00:38 - more people so i really do appreciate it
00:40 - before we get started as always the full
00:42 - source is available in the link down
00:43 - below in the description so go and get
00:45 - it alright let's get right into it
00:47 - finding prime numbers in java well first
00:49 - thing what is a prime number
00:51 - so definition of a prime number is a
00:53 - whole number greater than one
00:55 - that only has two factors one and
00:58 - that number so it's only divisible by
01:00 - one and itself it's not divisible by any
01:02 - other number so first we're going to
01:03 - write the code that finds all prime
01:05 - numbers between 1 and 100 and then we'll
01:07 - easily expand it to be able to find all
01:08 - the prime numbers between 1
01:10 - and a number that the user inputs and
01:11 - then it'll be just another small tweak
01:13 - to find the first
01:14 - n prime numbers first we're just going
01:16 - to need a list somewhere we can store
01:18 - all the prime numbers that we actually
01:20 - do find that we can print out at the end
01:22 - of the program so we'll just make a list
01:24 - of integers called prime numbers
01:27 - then we'll initialize that to a new
01:29 - array list
01:31 - since we're using eclipse we can press
01:32 - ctrl shift o to organize
01:34 - imports so we'll import java util list
01:37 - and
01:38 - java.util.arraylist okay so if we're
01:40 - going to find all prime numbers between
01:42 - uh one and a hundred
01:43 - um probably what we should start out
01:44 - with is a for loop that goes through all
01:46 - those numbers
01:47 - uh one to a hundred so we'll say for int
01:50 - a number to check that's a good name for
01:52 - it we could call it i
01:53 - or something like that but it's just a
01:55 - little bit easier to read in the code
01:56 - later when we see
01:57 - number to check as the variable name it
01:59 - means the number that we're checking
02:00 - instead of i which doesn't have a whole
02:02 - lot of meaning at all it just makes our
02:03 - program easier to read and understand
02:05 - so we'll start this at 2 because we know
02:08 - that we don't need to check
02:09 - zero or one uh those don't meet the
02:11 - definition of a prime number
02:13 - remember a prime number is a whole
02:14 - number greater than one so we'll just
02:16 - start
02:17 - at two and since we're only checking up
02:18 - to 100 here we're just going to go while
02:21 - number to check is less than
02:24 - or equal to 100 and then of course we
02:27 - will increment
02:28 - number to check each time by one so this
02:31 - will loop the number to check variable
02:33 - from 2
02:33 - to 100 so what do we need to do for
02:35 - every number that we want to check here
02:37 - so what we're actually going to do is
02:38 - loop from 2 up to the number that we're
02:40 - checking and see if any of those numbers
02:42 - divide
02:43 - evenly into our number now to do that
02:45 - we're going to actually use a
02:46 - nested for loop which is a for loop
02:49 - inside a for loop and it's probably
02:50 - easiest to just write that for loop out
02:52 - and then we'll talk about the pieces and
02:54 - what it does so in here we'll have a 4
02:57 - inch factor equals 2 and we'll go while
03:01 - that factor
03:02 - is less than or equal to the number
03:05 - to check divided by two
03:08 - and of course increment the factor uh
03:11 - each time so basically what we're going
03:12 - to do is for each
03:14 - number that we want to check whether
03:15 - it's prime or not we're going to loop
03:16 - through all the numbers from
03:18 - two up to halfway to the number that we
03:20 - want to check
03:21 - and see if any of those divide evenly
03:23 - into the number that we're checking
03:25 - and if we do find a number that's
03:26 - divisible into the number that we're
03:28 - checking
03:28 - we know it's not a prime number and we
03:30 - can skip it and look at the next one so
03:32 - what programming tool do we use to find
03:34 - out if a number
03:35 - is perfectly divisible by another number
03:37 - will you use the mod
03:38 - symbol which is just a percent so what
03:40 - we can do is say
03:41 - if our number to check
03:45 - mod the factor equals
03:48 - zero then we know that this is not a
03:51 - prime number
03:52 - so what this mod actually does is it
03:54 - takes this number to check
03:56 - and divides it by our factor and the mod
04:00 - is the remainder so how this works is
04:02 - pretend we were checking the number
04:03 - seven for our number to check and three
04:06 - as our factor so what this operation
04:08 - actually does
04:09 - is finds the remainder of seven divided
04:11 - by three
04:12 - so seven divided by 3 is 2 with a
04:14 - remainder of 1.
04:15 - so in that case 7 mod 3 would equal
04:19 - 1. but if our number to check was 6
04:21 - instead well
04:22 - 6 mod 3 equals 0 because 6 divided by 3
04:26 - is 2 with no remainder it has a
04:28 - remainder of 0 and that's how we know
04:30 - that
04:30 - 6 is perfectly divisible by 3 and 6 is
04:33 - not a prime number so what do we want to
04:35 - do if we find that the number that we're
04:36 - checking
04:37 - is perfectly divisible by this factor
04:39 - that we're checking well we want to tell
04:41 - the program that the number that we're
04:42 - checking is not a prime number
04:44 - and skip to checking the next one so to
04:45 - do that we're actually going to need a
04:47 - boolean here before our nested for loop
04:49 - and we'll call it is prime and we'll
04:51 - initialize it
04:52 - to true so we'll basically be starting
04:54 - out assuming each number
04:56 - is prime until we find a number that
04:58 - it's perfectly divisible by that proves
05:00 - that it's not
05:00 - prime so in that case we want to set is
05:02 - prime to
05:04 - false and we want to break out of our
05:07 - inner for loop so this break will break
05:09 - out of our inner for
05:11 - loop but it won't break out of our outer
05:13 - for loop we don't necessarily need the
05:14 - break statement but it's kind of silly
05:16 - to keep it once we find out that a
05:18 - number is not prime
05:19 - there's no sense checking out all the
05:21 - other factors of it we don't need to
05:22 - check them we already know the number is
05:23 - not prime
05:24 - and note that we're only checking
05:25 - factors up to the number to check
05:28 - divided by two well once we get up past
05:30 - halfway to the number that we're
05:31 - checking we know that none of those
05:32 - remaining numbers are going to divide
05:34 - evenly
05:35 - into the number we're checking so this
05:36 - just makes the performance a little
05:38 - better so then after all that if it got
05:40 - all the way through all the iterations
05:41 - of this inner for loop
05:43 - and is prime is still true then we now
05:45 - know that this number to check that we
05:47 - were checking is in fact a prime number
05:49 - it was not divisible
05:50 - by any of the factors that we checked so
05:52 - it's prime so we have to do here is
05:54 - check
05:55 - if is prime is still true and so we can
05:58 - just say if
05:59 - is prime then we want to add it to our
06:01 - prime numbers list
06:02 - and that's simple to do we just say
06:04 - prime numbers dot
06:06 - add our number that we were checking
06:08 - which we called number two
06:09 - check so then at the very end of our
06:11 - program outside
06:13 - of our outer for loop here once that has
06:15 - completed that means we have checked all
06:17 - the numbers up to 100 all the numbers
06:19 - that we wanted to check whether they
06:20 - were prime
06:20 - and everyone that was prime we added to
06:22 - our prime numbers list
06:24 - all we have to do is print out our list
06:26 - so we just say system dot out dot print
06:28 - line
06:29 - uh prime numbers from 1 to
06:32 - 100 are and then we can loop through our
06:35 - prime numbers list with a simple
06:36 - for each loop and print out each one so
06:39 - to do that it's just
06:40 - for int number in
06:43 - our prime numbers list so this will loop
06:46 - through
06:47 - each entry in our prime numbers list and
06:50 - assign it to this variable
06:51 - number for each iteration and so we can
06:53 - do it that what we please here we just
06:55 - want to print it out so we just say
06:57 - system.out.printline
06:59 - number so that should work let's just
07:00 - run it and see how it goes
07:02 - all right so we got prime numbers from 1
07:04 - to 100 r we've got 2 3
07:05 - 5 7 11 13 17 all the way up to 97 is the
07:10 - highest
07:10 - prime number below 100. so it looks like
07:12 - this is working like a charm
07:14 - no no wait charms don't work this is
07:16 - working like a like a clock
07:18 - like a finely tuned rolex with fresh
07:20 - batteries
07:21 - all right so we've written the program
07:22 - to find all prime numbers between one
07:24 - and a hundred
07:24 - now what if you want to find all prime
07:26 - numbers between one and
07:28 - n some number that the user inputs well
07:31 - to do that is really simple we just need
07:33 - to replace this 100
07:34 - with the user input so to get user input
07:37 - we use the
07:38 - scanner class and we'll say scanner
07:40 - scanner equals new scanner
07:43 - and we pass in system dot in for this to
07:46 - be
07:46 - a keyboard input from the user and again
07:48 - we'll organize imports
07:50 - but if you aren't using a fancy ide like
07:52 - eclipse you will need to import
07:54 - java.util.scanner
07:55 - and then we'll need to get a number as
07:56 - input from the user and we'll want to
07:58 - store that input from the user in a
07:59 - variable in an int so we'll just call it
08:01 - limit it'll be the limit of numbers that
08:03 - we check to see if they're prime and
08:05 - we'll set it equal to scanner.nextint
08:08 - that's the method
08:09 - that gets an int as keyboard input from
08:11 - the user and check out my other video
08:13 - here if you're interested in a full
08:14 - tutorial on the scanner class
08:16 - how to get all different types of data
08:17 - from the user so this will set this
08:19 - limit variable to be the int
08:21 - that was input by the user via the
08:22 - keyboard so we have to do is
08:24 - change the limit here from 100 to the
08:26 - limit that was set
08:27 - by the user and of course we just want
08:29 - to change
08:30 - this output here at the end of our
08:32 - program too so instead of saying 100
08:34 - we say from 1 to whatever the limit is
08:38 - and also we just want to print a little
08:39 - message to the user to prompt them to
08:41 - input a number
08:42 - system.out.printline please
08:45 - input the limit all right let's go ahead
08:47 - and run this and see how it goes
08:48 - okay so please input the limit let's say
08:50 - we want to go from one to
08:51 - a thousand all right awesome again that
08:54 - worked like a clock
08:55 - oh let's run it again ctrl f11 to run an
08:58 - eclipse
08:58 - let's see if we can go up to a hundred
09:00 - thousand
09:03 - this one's taking a bit of time oh but
09:04 - just a couple of seconds so this program
09:06 - is working great so now we found
09:08 - all the primes from 1 to 100 we found
09:10 - all the primes from 1
09:11 - to n any number that the user can input
09:14 - now let's say we want to find the first
09:15 - n prime numbers so for example if the
09:18 - user types in the number 50 we print the
09:20 - first
09:20 - 50 prime numbers so here we're going to
09:22 - use our limit in a little bit different
09:24 - way
09:24 - so now instead of looping up to a limit
09:27 - of numbers to check we want to keep
09:29 - going just
09:29 - until we found that many prime numbers
09:32 - right so we're actually going to do is
09:33 - make our int
09:34 - number to check variable above
09:38 - our loop but now instead of a for loop
09:40 - since we don't want to go up to some
09:41 - limit we actually just want to do
09:43 - a while true loop and this is going to
09:46 - keep us looping forever
09:47 - until we reach a break statement that
09:49 - we're going to write in the code once we
09:50 - find the number of primes that we're
09:52 - looking for
09:52 - and we're also going to want to make an
09:54 - int count a variable
09:56 - for counting the number of primes so
09:57 - once we hit the right number we can exit
09:59 - our loop
10:00 - okay so now our number to check starts
10:01 - at 2 and our account starts at 0. so
10:03 - this still checks our number to check to
10:05 - see if it's prime
10:06 - and at this point if it is prime we add
10:08 - it to our list but we also want to
10:10 - increment
10:11 - our count so every time we find a prime
10:13 - number we can increment our count and we
10:14 - know exactly how many prime numbers we
10:16 - have and at the end of each iteration
10:18 - of this while true loop we also want to
10:20 - increment our number to check
10:22 - because we don't have the statement in
10:23 - our for loop doing it anymore this
10:24 - increments our number to check each time
10:26 - we go through this while loop so the
10:28 - first time we go through this loop we'll
10:29 - be checking two to see if it's prime
10:30 - then three then four etcetera etcetera
10:32 - so now all we need is to be able to exit
10:34 - the loop once we found
10:35 - the number of primes that we're looking
10:37 - for so we can do that here after
10:39 - we increment the count we can say if the
10:42 - count
10:43 - is greater than or equal to our limit
10:45 - the number of primes that we're looking
10:47 - for
10:47 - then we can break you can probably also
10:50 - do just equals here when the count
10:52 - equals the limit i just like the safety
10:53 - of greater than or equal to limit so
10:55 - once we find the number of primes we're
10:56 - looking for
10:57 - this break statement will kick the
10:59 - program out of this while true loop
11:01 - down to here and then we just want to
11:02 - change our little print statement here
11:04 - to show what exactly we're printing out
11:05 - so that's just the first
11:08 - limit prime numbers are
11:11 - get rid of this so it's just the first n
11:14 - prime numbers are whatever
11:15 - so let's give this a run and see if it
11:17 - works let's just give it something easy
11:18 - um like the first
11:19 - two prime numbers and yeah the first two
11:22 - prime numbers are two
11:24 - and three and now let's run it again and
11:25 - give it a little bit more of a challenge
11:27 - let's say we want to do the first
11:29 - thousand prime numbers bam there goes
11:32 - finished in no time
11:33 - when you write this you can go ahead and
11:34 - put in a very large number and see how
11:37 - long it takes to find that many prime
11:38 - numbers
11:39 - and after you get to a certain point
11:40 - it's going to take a very long time to
11:42 - find that many prime numbers
11:43 - and also what you can do when your
11:45 - program starts taking that long instead
11:46 - of
11:47 - adding each prime number to a list and
11:48 - printing them all out when you're done
11:50 - you can just go here where you're adding
11:52 - your number to the list instead of
11:53 - adding it to a list
11:54 - you can just print it out right there
11:56 - and then as your program runs you'll see
11:58 - it print out each prime number that it
12:00 - finds
12:00 - and let's just put that in here too
12:01 - right now just for fun uh why not
12:03 - system.out
12:04 - dot print line number two check
12:08 - we know that this number is prime we can
12:09 - just print it out and then for now we'll
12:10 - just comment out
12:11 - the end of the program where we're
12:12 - printing them all out we don't need to
12:13 - print them all out twice so let's run it
12:15 - so we want to find the first
12:17 - 10 000 prime numbers let's see how this
12:19 - works that finished super fast it's
12:21 - already done
12:22 - so let's try a million and see what
12:23 - happens
12:26 - okay
12:30 - it's going so if we had kept it to just
12:32 - print out the list at the very end
12:34 - uh the program would have printed out
12:35 - nothing by now we'd just see a blank
12:36 - screen but now that we're printing it
12:38 - out as it finds the prime numbers
12:40 - we can see it kind of working this is
12:42 - going to take a kind of a long time to
12:43 - find a million
12:44 - prime numbers if you think this is
12:46 - abusing a computer check out this other
12:48 - video i did
12:49 - on the worst sorting algorithm in the
12:51 - world called bogosort where i left my
12:53 - computer running for hours
12:55 - and hours trying to sort a really small
12:57 - list of integers in the worst
12:59 - way imaginable if you learned something
13:01 - or enjoyed this video please let me know
13:03 - with a like and if you'd like to see
13:04 - more java tutorial videos and lessons
13:06 - like this one every single week be sure
13:08 - to hit the subscribe button and again
13:09 - thank you for taking the time to like
13:10 - and subscribe
13:11 - it really is the only way these videos
13:13 - get to more people and i really do
13:14 - appreciate it
13:15 - see you next time

Cleaned transcript:

do you need to write a program in java to find prime numbers if so this is the video you're looking for we're going to write a java program to find prime numbers from scratch first a program to find all prime numbers between 1 and 100 and then we'll expand it to find all prime numbers between 1 and n a number that the user inputs and then once we get to be able to find the first n prime numbers so whatever way you need to find prime numbers in java we're going to cover it here if this is your first time watching this channel my name is john and i do a java tutorial video every week either a lesson on a java concept or a full walkthrough of a program from scratch like this one so be sure to like and hit the subscribe button so you don't miss the new video every week and a sincere thanks for taking the time to like and subscribe it's the only way the channel grows and these videos reach more people so i really do appreciate it before we get started as always the full source is available in the link down below in the description so go and get it alright let's get right into it finding prime numbers in java well first thing what is a prime number so definition of a prime number is a whole number greater than one that only has two factors one and that number so it's only divisible by one and itself it's not divisible by any other number so first we're going to write the code that finds all prime numbers between 1 and 100 and then we'll easily expand it to be able to find all the prime numbers between 1 and a number that the user inputs and then it'll be just another small tweak to find the first n prime numbers first we're just going to need a list somewhere we can store all the prime numbers that we actually do find that we can print out at the end of the program so we'll just make a list of integers called prime numbers then we'll initialize that to a new array list since we're using eclipse we can press ctrl shift o to organize imports so we'll import java util list and java.util.arraylist okay so if we're going to find all prime numbers between uh one and a hundred um probably what we should start out with is a for loop that goes through all those numbers uh one to a hundred so we'll say for int a number to check that's a good name for it we could call it i or something like that but it's just a little bit easier to read in the code later when we see number to check as the variable name it means the number that we're checking instead of i which doesn't have a whole lot of meaning at all it just makes our program easier to read and understand so we'll start this at 2 because we know that we don't need to check zero or one uh those don't meet the definition of a prime number remember a prime number is a whole number greater than one so we'll just start at two and since we're only checking up to 100 here we're just going to go while number to check is less than or equal to 100 and then of course we will increment number to check each time by one so this will loop the number to check variable from 2 to 100 so what do we need to do for every number that we want to check here so what we're actually going to do is loop from 2 up to the number that we're checking and see if any of those numbers divide evenly into our number now to do that we're going to actually use a nested for loop which is a for loop inside a for loop and it's probably easiest to just write that for loop out and then we'll talk about the pieces and what it does so in here we'll have a 4 inch factor equals 2 and we'll go while that factor is less than or equal to the number to check divided by two and of course increment the factor uh each time so basically what we're going to do is for each number that we want to check whether it's prime or not we're going to loop through all the numbers from two up to halfway to the number that we want to check and see if any of those divide evenly into the number that we're checking and if we do find a number that's divisible into the number that we're checking we know it's not a prime number and we can skip it and look at the next one so what programming tool do we use to find out if a number is perfectly divisible by another number will you use the mod symbol which is just a percent so what we can do is say if our number to check mod the factor equals zero then we know that this is not a prime number so what this mod actually does is it takes this number to check and divides it by our factor and the mod is the remainder so how this works is pretend we were checking the number seven for our number to check and three as our factor so what this operation actually does is finds the remainder of seven divided by three so seven divided by 3 is 2 with a remainder of 1. so in that case 7 mod 3 would equal 1. but if our number to check was 6 instead well 6 mod 3 equals 0 because 6 divided by 3 is 2 with no remainder it has a remainder of 0 and that's how we know that 6 is perfectly divisible by 3 and 6 is not a prime number so what do we want to do if we find that the number that we're checking is perfectly divisible by this factor that we're checking well we want to tell the program that the number that we're checking is not a prime number and skip to checking the next one so to do that we're actually going to need a boolean here before our nested for loop and we'll call it is prime and we'll initialize it to true so we'll basically be starting out assuming each number is prime until we find a number that it's perfectly divisible by that proves that it's not prime so in that case we want to set is prime to false and we want to break out of our inner for loop so this break will break out of our inner for loop but it won't break out of our outer for loop we don't necessarily need the break statement but it's kind of silly to keep it once we find out that a number is not prime there's no sense checking out all the other factors of it we don't need to check them we already know the number is not prime and note that we're only checking factors up to the number to check divided by two well once we get up past halfway to the number that we're checking we know that none of those remaining numbers are going to divide evenly into the number we're checking so this just makes the performance a little better so then after all that if it got all the way through all the iterations of this inner for loop and is prime is still true then we now know that this number to check that we were checking is in fact a prime number it was not divisible by any of the factors that we checked so it's prime so we have to do here is check if is prime is still true and so we can just say if is prime then we want to add it to our prime numbers list and that's simple to do we just say prime numbers dot add our number that we were checking which we called number two check so then at the very end of our program outside of our outer for loop here once that has completed that means we have checked all the numbers up to 100 all the numbers that we wanted to check whether they were prime and everyone that was prime we added to our prime numbers list all we have to do is print out our list so we just say system dot out dot print line uh prime numbers from 1 to 100 are and then we can loop through our prime numbers list with a simple for each loop and print out each one so to do that it's just for int number in our prime numbers list so this will loop through each entry in our prime numbers list and assign it to this variable number for each iteration and so we can do it that what we please here we just want to print it out so we just say system.out.printline number so that should work let's just run it and see how it goes all right so we got prime numbers from 1 to 100 r we've got 2 3 5 7 11 13 17 all the way up to 97 is the highest prime number below 100. so it looks like this is working like a charm no no wait charms don't work this is working like a like a clock like a finely tuned rolex with fresh batteries all right so we've written the program to find all prime numbers between one and a hundred now what if you want to find all prime numbers between one and n some number that the user inputs well to do that is really simple we just need to replace this 100 with the user input so to get user input we use the scanner class and we'll say scanner scanner equals new scanner and we pass in system dot in for this to be a keyboard input from the user and again we'll organize imports but if you aren't using a fancy ide like eclipse you will need to import java.util.scanner and then we'll need to get a number as input from the user and we'll want to store that input from the user in a variable in an int so we'll just call it limit it'll be the limit of numbers that we check to see if they're prime and we'll set it equal to scanner.nextint that's the method that gets an int as keyboard input from the user and check out my other video here if you're interested in a full tutorial on the scanner class how to get all different types of data from the user so this will set this limit variable to be the int that was input by the user via the keyboard so we have to do is change the limit here from 100 to the limit that was set by the user and of course we just want to change this output here at the end of our program too so instead of saying 100 we say from 1 to whatever the limit is and also we just want to print a little message to the user to prompt them to input a number system.out.printline please input the limit all right let's go ahead and run this and see how it goes okay so please input the limit let's say we want to go from one to a thousand all right awesome again that worked like a clock oh let's run it again ctrl f11 to run an eclipse let's see if we can go up to a hundred thousand this one's taking a bit of time oh but just a couple of seconds so this program is working great so now we found all the primes from 1 to 100 we found all the primes from 1 to n any number that the user can input now let's say we want to find the first n prime numbers so for example if the user types in the number 50 we print the first 50 prime numbers so here we're going to use our limit in a little bit different way so now instead of looping up to a limit of numbers to check we want to keep going just until we found that many prime numbers right so we're actually going to do is make our int number to check variable above our loop but now instead of a for loop since we don't want to go up to some limit we actually just want to do a while true loop and this is going to keep us looping forever until we reach a break statement that we're going to write in the code once we find the number of primes that we're looking for and we're also going to want to make an int count a variable for counting the number of primes so once we hit the right number we can exit our loop okay so now our number to check starts at 2 and our account starts at 0. so this still checks our number to check to see if it's prime and at this point if it is prime we add it to our list but we also want to increment our count so every time we find a prime number we can increment our count and we know exactly how many prime numbers we have and at the end of each iteration of this while true loop we also want to increment our number to check because we don't have the statement in our for loop doing it anymore this increments our number to check each time we go through this while loop so the first time we go through this loop we'll be checking two to see if it's prime then three then four etcetera etcetera so now all we need is to be able to exit the loop once we found the number of primes that we're looking for so we can do that here after we increment the count we can say if the count is greater than or equal to our limit the number of primes that we're looking for then we can break you can probably also do just equals here when the count equals the limit i just like the safety of greater than or equal to limit so once we find the number of primes we're looking for this break statement will kick the program out of this while true loop down to here and then we just want to change our little print statement here to show what exactly we're printing out so that's just the first limit prime numbers are get rid of this so it's just the first n prime numbers are whatever so let's give this a run and see if it works let's just give it something easy um like the first two prime numbers and yeah the first two prime numbers are two and three and now let's run it again and give it a little bit more of a challenge let's say we want to do the first thousand prime numbers bam there goes finished in no time when you write this you can go ahead and put in a very large number and see how long it takes to find that many prime numbers and after you get to a certain point it's going to take a very long time to find that many prime numbers and also what you can do when your program starts taking that long instead of adding each prime number to a list and printing them all out when you're done you can just go here where you're adding your number to the list instead of adding it to a list you can just print it out right there and then as your program runs you'll see it print out each prime number that it finds and let's just put that in here too right now just for fun uh why not system.out dot print line number two check we know that this number is prime we can just print it out and then for now we'll just comment out the end of the program where we're printing them all out we don't need to print them all out twice so let's run it so we want to find the first 10 000 prime numbers let's see how this works that finished super fast it's already done so let's try a million and see what happens okay it's going so if we had kept it to just print out the list at the very end uh the program would have printed out nothing by now we'd just see a blank screen but now that we're printing it out as it finds the prime numbers we can see it kind of working this is going to take a kind of a long time to find a million prime numbers if you think this is abusing a computer check out this other video i did on the worst sorting algorithm in the world called bogosort where i left my computer running for hours and hours trying to sort a really small list of integers in the worst way imaginable if you learned something or enjoyed this video please let me know with a like and if you'd like to see more java tutorial videos and lessons like this one every single week be sure to hit the subscribe button and again thank you for taking the time to like and subscribe it really is the only way these videos get to more people and i really do appreciate it see you next time
