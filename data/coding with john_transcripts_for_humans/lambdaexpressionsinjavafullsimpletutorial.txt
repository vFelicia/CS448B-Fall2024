With timestamps:

00:00 - lambdas are one of the coolest elements
00:01 - of the java language but they can also
00:03 - be one of the most confusing to
00:04 - understand especially for a beginner
00:06 - when can you use one what exactly is it
00:08 - doing and how do you make sense of the
00:10 - weird syntax that it has in this video
00:12 - we'll talk all about why lambdas exist
00:14 - what they do and when you can use them
00:16 - and how you can implement them into your
00:18 - java programs my name is john i'm a lead
00:20 - java software engineer and i also have a
00:22 - full java course available in a link
00:24 - down in the description so go check it
00:25 - out lambdas in java can only be used
00:28 - along with certain types of interfaces
00:30 - so to understand exactly what a lambda
00:32 - is and when we can use them we first
00:34 - need to go over a little bit about
00:35 - interfaces you probably know that an
00:37 - interface is kind of like a contract
00:39 - that says that any class that implements
00:41 - that interface has to provide their own
00:44 - implementations of the methods specified
00:47 - by that interface so for example if we
00:49 - have an interface like this one called
00:51 - printable this void print here is
00:54 - declaring a method called print but
00:56 - notice it doesn't have any
00:57 - implementation at all but the idea is
00:59 - that you can create a class that
01:01 - implements this printable interface and
01:03 - when you do that class has to provide
01:06 - its own implementation of the print
01:08 - method so over here in our cat class
01:10 - inside the class declaration at the top
01:12 - we can write implements printable now
01:15 - notice it's giving us an error here
01:17 - because we're implementing the printable
01:18 - interface but we haven't yet defined our
01:21 - implementation of the print method so
01:23 - let's go ahead and do that now so that
01:25 - would be public void print that takes no
01:28 - parameters so for our implementation to
01:30 - print out a cat let's just print out
01:33 - meow so now we can hop back here to our
01:35 - main method and create a cat my cat
01:38 - equals new cat and with this my cat we
01:41 - can call the print method on it that
01:43 - we've just implemented and now if we run
01:45 - our program we can see that it prints
01:47 - out meow but also down here we have this
01:50 - method print thing which takes in as a
01:52 - parameter a printable which can be any
01:55 - object that implements the printable
01:57 - interface and inside this method it
01:59 - knows that whatever this thing is it
02:02 - does implement the printable interface
02:04 - so it knows that it's able to call the
02:06 - print method on it so that's what it's
02:08 - doing here since our cat class
02:10 - implements the printable interface we
02:12 - can call this print thing method and
02:14 - send in our cat as the printable thing
02:17 - so back up here instead of calling
02:19 - mycat.print we can instead call the
02:22 - print thing method and pass in our mycat
02:25 - object and if we run our program we get
02:27 - the same output as before meow because
02:29 - inside this print thing method it's just
02:32 - calling the print method on the cat
02:34 - object that we sent in here's where
02:36 - lambdas come in now the only special
02:38 - thing that you can do with a printable
02:40 - is call this print method on it right
02:42 - because that's the only method specified
02:45 - by this interface so when this method
02:47 - takes in a printable the only thing that
02:49 - really matters about it is what that
02:51 - thing's implementation of this print
02:53 - method is but right now even though
02:56 - really all we want to do is provide a
02:58 - specific implementation of the print
03:00 - method here there was a whole bunch of
03:02 - things that we had to do to be able to
03:04 - do that first we had to have some class
03:06 - implement the printable interface then
03:09 - we had to provide an implementation of
03:11 - that print method so it would print out
03:13 - what we wanted then over here we had to
03:15 - create a new object of that class then
03:18 - finally we could pass in that object
03:20 - into this method as the printable
03:22 - parameter lambdas allow us to just pass
03:25 - in a specific implementation of this
03:28 - print method as the printable parameter
03:31 - without needing all of that extra stuff
03:32 - so you can literally think about it like
03:35 - this so let's go over to our cat class
03:37 - and copy the specific implementation of
03:40 - this print method that we want to use
03:42 - and then over here where we're calling
03:44 - this print thing and we need to pass in
03:46 - a printable instead of passing in this
03:48 - my cat object let's just try and pass in
03:51 - the specific implementation of this
03:53 - print method that we want it to use this
03:56 - gives you the concept of what we're
03:57 - doing with a lambda instead of passing
03:59 - in an object that contains a specific
04:02 - implementation of the print method we're
04:04 - just passing in that specific
04:06 - implementation of the print method
04:07 - directly when you're implementing a
04:09 - method inside of a class it looks like
04:11 - this but when you're using lambdas to
04:13 - pass in a method implementation as a
04:15 - parameter there's some things that we
04:17 - leave out first the access level public
04:20 - in this case is not needed so we leave
04:22 - that out we also don't need the name of
04:24 - the method we just need what it does and
04:26 - so we can leave out the name too we also
04:28 - don't even need the return type which in
04:30 - this case is void because the compiler
04:32 - can figure out the return type
04:34 - automatically so we can get rid of that
04:36 - too so now we're left with the only
04:38 - things that we really need to define a
04:40 - method implementation and that is the
04:42 - parameters which in this case we don't
04:44 - have any parameters and the actual
04:46 - method implementation now to make this a
04:48 - valid lambda syntax all we need to do is
04:51 - add an arrow operator here between the
04:53 - parameters and the method implementation
04:55 - the arrow operator is just a hyphen and
04:58 - then the greater than symbol and you can
05:00 - see that we now have no more errors
05:01 - because this is a valid lambda
05:04 - expression now we can compile and run
05:06 - our code and it does exactly the same
05:08 - thing as before it prints out meow but
05:10 - instead of having to do all that work
05:12 - where we implemented the printable
05:14 - interface inside the cat class and then
05:16 - we defined the print method that we
05:17 - wanted inside that cat class and then
05:19 - created an object from that class and
05:21 - passed that into the print thing method
05:23 - instead of doing all of that we're
05:25 - instead just passing in the
05:28 - implementation of the print method that
05:30 - we want it to use as our printable
05:33 - parameter basically instead of sending
05:35 - in an object which contains an action
05:38 - we're just sending in the action itself
05:40 - we can actually simplify this lambda
05:42 - expression even more though if the
05:44 - implementation that you're passing in is
05:46 - just one single expression you can leave
05:48 - out the curly braces and then you can
05:50 - have your whole entire lambda expression
05:52 - just be one line like this so notice
05:55 - that we're using a lambda to pass in our
05:58 - implementation of that print method as
06:00 - an object like we would any other object
06:03 - that means that we can save this
06:05 - implementation of the print method as a
06:08 - variable just like we could with any
06:10 - other object as well so we can say
06:12 - printable
06:13 - lambda printable equals this entire
06:16 - lambda expression and then we can pass
06:18 - in this lambda printable object into the
06:20 - method and then if we run it it does
06:23 - exactly what it did before so lambdas in
06:25 - java give you the ability to make method
06:27 - implementations into objects like any
06:30 - other that can be saved into variables
06:32 - and passed into methods as parameters
06:34 - right now the print method inside our
06:36 - printable interface doesn't take any
06:38 - parameters but let's see what it would
06:40 - look like if it did let's say it took in
06:42 - as a parameter some string suffix that
06:45 - is intended to just go at the end of
06:47 - whatever is printed now back over here
06:49 - in our lambda expression let's go ahead
06:51 - and get rid of this cat because we don't
06:52 - need it anymore over here in the lambda
06:54 - expression we now have an error and
06:56 - that's because the interface method that
06:57 - we are implementing has one parameter
07:00 - but our lambda doesn't so all we have to
07:01 - do is give it whatever name we want it
07:03 - to use for that parameter so we could
07:05 - use the same name that it has in the
07:07 - interface and just call it suffix but we
07:09 - don't have to we can name it whatever we
07:11 - want so we can even just name it s and
07:13 - we don't have to specify the type here
07:15 - of string because java already knows
07:18 - that because the type in the interface
07:20 - is defined as a string then that's what
07:22 - the type of this parameter has to be as
07:24 - well and also if you have a single
07:26 - parameter in your lambda expression you
07:28 - can exclude the parentheses as well but
07:30 - if it doesn't have any parameters or it
07:32 - has more than one parameter you will
07:34 - need the parentheses anyway then we can
07:36 - use this parameter however we want
07:38 - inside our method implementation and you
07:40 - don't have to use it at all if you don't
07:42 - want to notice that we're not getting
07:44 - any errors at all here if we don't use s
07:47 - in our method implementation but of
07:48 - course we can if we want to so it's a
07:51 - suffix right so what we can do is after
07:53 - meow we can just append whatever that
07:55 - string is on the end since that print
07:58 - method now takes in that string suffix
08:00 - parameter we also have to add it when
08:03 - we're calling that print method down
08:05 - here so maybe we wanted to use like an
08:07 - exclamation point as the suffix so then
08:09 - we can run our program and now it prints
08:11 - out meow with an exclamation point now
08:14 - if you had more than one parameter like
08:16 - over here if we had a string
08:19 - prefix as well then over here in your
08:21 - lambda expression all you have to do is
08:23 - just separate those two parameters with
08:26 - a comma like this so we can use like p
08:28 - for the prefix and s for the suffix so
08:30 - what happens if your interface method
08:33 - also has a return type so instead of
08:35 - being void let's say this instead
08:37 - returned a string so now back here in
08:39 - our lambda expression in order to
08:41 - implement that print method properly we
08:43 - have to return a string object and there
08:45 - are a couple ways we can do that first
08:47 - if your implementation has more than one
08:49 - line like ours did before you can just
08:52 - put your return statement inside your
08:53 - implementation here like you would for
08:55 - any normal method so you can just return
08:57 - whatever string you want like meow and
08:59 - in that case we need a semicolon here
09:01 - and here also after the ending curly
09:03 - braces but if your method implementation
09:06 - is only one expression java interprets
09:09 - that as being your return value and you
09:11 - don't even need to use the return
09:13 - keyword so if we wanted this method to
09:15 - just return meow plus the suffix and not
09:18 - print out anything to the console all we
09:20 - have to do is make that expression into
09:22 - our implementation so now this
09:25 - expression is our entire method
09:27 - implementation and java interprets that
09:29 - expression as the return value so java
09:32 - interprets this as meaning the exact
09:34 - same thing as if we used the curly
09:36 - braces and had the return keyword to
09:39 - return this value but this just allows
09:41 - us a much cleaner way to do exactly the
09:43 - same thing let's talk a little bit about
09:45 - how exactly this is working behind the
09:47 - scenes because i think it helps to give
09:49 - you a little bit deeper understanding of
09:51 - what's going on going back to our
09:52 - interface here remember that we just
09:54 - have one method to find this string
09:57 - print when a method inside an interface
09:59 - has no implementation like this one does
10:01 - it's called an abstract method and when
10:04 - an interface has exactly one abstract
10:07 - method it's called a functional
10:09 - interface when you have a functional
10:11 - interface you can even add an annotation
10:13 - here above the top of your class at
10:16 - functional interface you don't
10:17 - technically have to have this annotation
10:19 - at the top of your interface for it to
10:21 - be a functional interface but it is best
10:23 - practice to do so because if you do the
10:25 - compiler will enforce that you have
10:28 - exactly one abstract method in your
10:30 - interface so if we tried to add another
10:32 - abstract method to this interface like
10:34 - void do thing now it's giving us an
10:37 - error because we're saying this should
10:39 - be a functional interface but we're
10:41 - providing more than one abstract method
10:44 - for it to be a proper functional
10:45 - interface it can only have one abstract
10:47 - method defined these are also sometimes
10:49 - called sam interfaces because they have
10:52 - a single abstract method s-a-m this
10:55 - interface could contain other types of
10:57 - methods like static methods or default
11:00 - methods and still technically be a
11:01 - functional interface it just has to have
11:04 - exactly one abstract method so what does
11:07 - this have to do with lambdas well
11:09 - lambdas can only be used in the context
11:12 - of a functional interface if an
11:14 - interface has more than one abstract
11:16 - method then you can't use a lambda for
11:18 - it so if we got rid of this functional
11:20 - interface annotation and added our void
11:24 - do thing method now we have a problem
11:27 - over here in our lambda implementation
11:29 - and it says multiple non-overriding
11:31 - abstract methods found in interface
11:34 - printable the reason this happens is
11:36 - that in a lambda you're only able to
11:38 - define the implementation of one method
11:41 - when the interface has only one abstract
11:44 - method it works fine because java knows
11:46 - exactly the method that you're
11:48 - implementing in your lambda because
11:50 - there's only one so if our printable
11:52 - interface had two abstract methods we
11:54 - would always be leaving one of them
11:56 - completely undefined if we were allowed
11:58 - to create them with a lambda expression
12:01 - if you want to do something similar to
12:02 - this where you have an interface with
12:04 - more than one abstract method you can do
12:07 - what you need to with an anonymous class
12:09 - and you can learn more about anonymous
12:11 - classes in this video here from a
12:12 - technical perspective all a lambda is is
12:15 - a shortcut to defining an implementation
12:19 - of a functional interface so here we
12:21 - have a functional interface but instead
12:23 - of having to create a class that
12:26 - implements that functional interface and
12:28 - then adding the implementation that you
12:30 - want of that single abstract method and
12:32 - then creating an object of this class
12:34 - and using that you can instead just
12:36 - simply create a lambda expression that
12:39 - contains the implementation of that
12:42 - functional interface method that you
12:43 - want it allows you to effectively treat
12:46 - code as a parameter if you enjoyed this
12:49 - video or learned something let me know
12:50 - by leaving a like and be sure to
12:52 - subscribe so you don't miss each new
12:53 - java tutorial and if you're interested
12:55 - in my full java course you can find it
12:57 - in a link down in the description as
12:59 - always thank you so much for watching i
13:00 - really do appreciate you being here with
13:02 - me see you next time

Cleaned transcript:

lambdas are one of the coolest elements of the java language but they can also be one of the most confusing to understand especially for a beginner when can you use one what exactly is it doing and how do you make sense of the weird syntax that it has in this video we'll talk all about why lambdas exist what they do and when you can use them and how you can implement them into your java programs my name is john i'm a lead java software engineer and i also have a full java course available in a link down in the description so go check it out lambdas in java can only be used along with certain types of interfaces so to understand exactly what a lambda is and when we can use them we first need to go over a little bit about interfaces you probably know that an interface is kind of like a contract that says that any class that implements that interface has to provide their own implementations of the methods specified by that interface so for example if we have an interface like this one called printable this void print here is declaring a method called print but notice it doesn't have any implementation at all but the idea is that you can create a class that implements this printable interface and when you do that class has to provide its own implementation of the print method so over here in our cat class inside the class declaration at the top we can write implements printable now notice it's giving us an error here because we're implementing the printable interface but we haven't yet defined our implementation of the print method so let's go ahead and do that now so that would be public void print that takes no parameters so for our implementation to print out a cat let's just print out meow so now we can hop back here to our main method and create a cat my cat equals new cat and with this my cat we can call the print method on it that we've just implemented and now if we run our program we can see that it prints out meow but also down here we have this method print thing which takes in as a parameter a printable which can be any object that implements the printable interface and inside this method it knows that whatever this thing is it does implement the printable interface so it knows that it's able to call the print method on it so that's what it's doing here since our cat class implements the printable interface we can call this print thing method and send in our cat as the printable thing so back up here instead of calling mycat.print we can instead call the print thing method and pass in our mycat object and if we run our program we get the same output as before meow because inside this print thing method it's just calling the print method on the cat object that we sent in here's where lambdas come in now the only special thing that you can do with a printable is call this print method on it right because that's the only method specified by this interface so when this method takes in a printable the only thing that really matters about it is what that thing's implementation of this print method is but right now even though really all we want to do is provide a specific implementation of the print method here there was a whole bunch of things that we had to do to be able to do that first we had to have some class implement the printable interface then we had to provide an implementation of that print method so it would print out what we wanted then over here we had to create a new object of that class then finally we could pass in that object into this method as the printable parameter lambdas allow us to just pass in a specific implementation of this print method as the printable parameter without needing all of that extra stuff so you can literally think about it like this so let's go over to our cat class and copy the specific implementation of this print method that we want to use and then over here where we're calling this print thing and we need to pass in a printable instead of passing in this my cat object let's just try and pass in the specific implementation of this print method that we want it to use this gives you the concept of what we're doing with a lambda instead of passing in an object that contains a specific implementation of the print method we're just passing in that specific implementation of the print method directly when you're implementing a method inside of a class it looks like this but when you're using lambdas to pass in a method implementation as a parameter there's some things that we leave out first the access level public in this case is not needed so we leave that out we also don't need the name of the method we just need what it does and so we can leave out the name too we also don't even need the return type which in this case is void because the compiler can figure out the return type automatically so we can get rid of that too so now we're left with the only things that we really need to define a method implementation and that is the parameters which in this case we don't have any parameters and the actual method implementation now to make this a valid lambda syntax all we need to do is add an arrow operator here between the parameters and the method implementation the arrow operator is just a hyphen and then the greater than symbol and you can see that we now have no more errors because this is a valid lambda expression now we can compile and run our code and it does exactly the same thing as before it prints out meow but instead of having to do all that work where we implemented the printable interface inside the cat class and then we defined the print method that we wanted inside that cat class and then created an object from that class and passed that into the print thing method instead of doing all of that we're instead just passing in the implementation of the print method that we want it to use as our printable parameter basically instead of sending in an object which contains an action we're just sending in the action itself we can actually simplify this lambda expression even more though if the implementation that you're passing in is just one single expression you can leave out the curly braces and then you can have your whole entire lambda expression just be one line like this so notice that we're using a lambda to pass in our implementation of that print method as an object like we would any other object that means that we can save this implementation of the print method as a variable just like we could with any other object as well so we can say printable lambda printable equals this entire lambda expression and then we can pass in this lambda printable object into the method and then if we run it it does exactly what it did before so lambdas in java give you the ability to make method implementations into objects like any other that can be saved into variables and passed into methods as parameters right now the print method inside our printable interface doesn't take any parameters but let's see what it would look like if it did let's say it took in as a parameter some string suffix that is intended to just go at the end of whatever is printed now back over here in our lambda expression let's go ahead and get rid of this cat because we don't need it anymore over here in the lambda expression we now have an error and that's because the interface method that we are implementing has one parameter but our lambda doesn't so all we have to do is give it whatever name we want it to use for that parameter so we could use the same name that it has in the interface and just call it suffix but we don't have to we can name it whatever we want so we can even just name it s and we don't have to specify the type here of string because java already knows that because the type in the interface is defined as a string then that's what the type of this parameter has to be as well and also if you have a single parameter in your lambda expression you can exclude the parentheses as well but if it doesn't have any parameters or it has more than one parameter you will need the parentheses anyway then we can use this parameter however we want inside our method implementation and you don't have to use it at all if you don't want to notice that we're not getting any errors at all here if we don't use s in our method implementation but of course we can if we want to so it's a suffix right so what we can do is after meow we can just append whatever that string is on the end since that print method now takes in that string suffix parameter we also have to add it when we're calling that print method down here so maybe we wanted to use like an exclamation point as the suffix so then we can run our program and now it prints out meow with an exclamation point now if you had more than one parameter like over here if we had a string prefix as well then over here in your lambda expression all you have to do is just separate those two parameters with a comma like this so we can use like p for the prefix and s for the suffix so what happens if your interface method also has a return type so instead of being void let's say this instead returned a string so now back here in our lambda expression in order to implement that print method properly we have to return a string object and there are a couple ways we can do that first if your implementation has more than one line like ours did before you can just put your return statement inside your implementation here like you would for any normal method so you can just return whatever string you want like meow and in that case we need a semicolon here and here also after the ending curly braces but if your method implementation is only one expression java interprets that as being your return value and you don't even need to use the return keyword so if we wanted this method to just return meow plus the suffix and not print out anything to the console all we have to do is make that expression into our implementation so now this expression is our entire method implementation and java interprets that expression as the return value so java interprets this as meaning the exact same thing as if we used the curly braces and had the return keyword to return this value but this just allows us a much cleaner way to do exactly the same thing let's talk a little bit about how exactly this is working behind the scenes because i think it helps to give you a little bit deeper understanding of what's going on going back to our interface here remember that we just have one method to find this string print when a method inside an interface has no implementation like this one does it's called an abstract method and when an interface has exactly one abstract method it's called a functional interface when you have a functional interface you can even add an annotation here above the top of your class at functional interface you don't technically have to have this annotation at the top of your interface for it to be a functional interface but it is best practice to do so because if you do the compiler will enforce that you have exactly one abstract method in your interface so if we tried to add another abstract method to this interface like void do thing now it's giving us an error because we're saying this should be a functional interface but we're providing more than one abstract method for it to be a proper functional interface it can only have one abstract method defined these are also sometimes called sam interfaces because they have a single abstract method sam this interface could contain other types of methods like static methods or default methods and still technically be a functional interface it just has to have exactly one abstract method so what does this have to do with lambdas well lambdas can only be used in the context of a functional interface if an interface has more than one abstract method then you can't use a lambda for it so if we got rid of this functional interface annotation and added our void do thing method now we have a problem over here in our lambda implementation and it says multiple nonoverriding abstract methods found in interface printable the reason this happens is that in a lambda you're only able to define the implementation of one method when the interface has only one abstract method it works fine because java knows exactly the method that you're implementing in your lambda because there's only one so if our printable interface had two abstract methods we would always be leaving one of them completely undefined if we were allowed to create them with a lambda expression if you want to do something similar to this where you have an interface with more than one abstract method you can do what you need to with an anonymous class and you can learn more about anonymous classes in this video here from a technical perspective all a lambda is is a shortcut to defining an implementation of a functional interface so here we have a functional interface but instead of having to create a class that implements that functional interface and then adding the implementation that you want of that single abstract method and then creating an object of this class and using that you can instead just simply create a lambda expression that contains the implementation of that functional interface method that you want it allows you to effectively treat code as a parameter if you enjoyed this video or learned something let me know by leaving a like and be sure to subscribe so you don't miss each new java tutorial and if you're interested in my full java course you can find it in a link down in the description as always thank you so much for watching i really do appreciate you being here with me see you next time
