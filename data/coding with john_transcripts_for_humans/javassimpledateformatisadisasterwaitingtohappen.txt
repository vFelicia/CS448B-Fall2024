With timestamps:

00:00 - hey everybody it's john from coding with
00:02 - john today we're going to go over
00:03 - something that i've seen
00:04 - bite so many developers and development
00:07 - teams that
00:08 - i've personally worked with something
00:09 - that probably all of you have used if
00:11 - you've worked with dates in java before
00:13 - is simple date format
00:14 - it seems to be just a very nice simple
00:18 - way to deal with dates and getting them
00:20 - from strings and turning dates back into
00:22 - strings
00:23 - and it is it works great in normal
00:26 - small single threaded circumstances but
00:30 - so i what i've worked with them uh we
00:33 - we're usually working on web
00:34 - applications which are multi-threaded
00:35 - environments by default you can take in
00:37 - a bunch of different web
00:39 - service calls at a time so you have to
00:41 - it's
00:42 - by default running in a multi-threaded
00:43 - environment so
00:46 - the simple day format class explodes
00:49 - in completely crazy unpredictable ways
00:52 - when you are in a multi-threaded
00:54 - environment and we're going to go over
00:55 - the example of that
00:57 - here here's what you what we've got
00:58 - we've got a
01:00 - just a simple class simple date format
01:02 - is unsafe
01:03 - with a shared date format
01:06 - object uh a simple date format and
01:09 - here's the format year your year your
01:10 - monthly white
01:11 - this is whatever there's a format if
01:12 - you've done this before it should look
01:14 - familiar even if you haven't
01:15 - it should be pretty simple to see okay
01:17 - i've got a date formatting thing
01:19 - um excuse me object is going to format a
01:22 - date like this or taken a date that
01:23 - looks like this
01:25 - as a string and give you a date so
01:27 - awesome perfect
01:29 - um so now we start our main method and
01:32 - we're going to what's actually going to
01:33 - happen here is we're going to take this
01:35 - string of a date of an actual date
01:38 - and we're going to run 10
01:42 - threads at a time just parsing that date
01:45 - just i want to parse this date a bunch
01:46 - of times
01:47 - but do it in a multi-threaded way so i'm
01:49 - trying to do all of those at the same
01:51 - time i'm trying to
01:52 - parse this date 10 times at the same
01:55 - time
01:55 - in parallel so if you haven't worked
01:57 - with too much multi-threaded stuff in
01:58 - java yet
01:59 - that's okay but but just briefly what
02:02 - we're doing here
02:03 - is this executive service is going to be
02:06 - used to offer those 10 threads to us to
02:09 - use so we're
02:10 - we're creating a new fixed thread pool
02:12 - of 10 so this is a pool of 10 threads
02:15 - that we can grab from
02:16 - and this is this runnable that we're
02:19 - defining here
02:20 - with this public void run method is
02:23 - just saying when i run this runnable
02:26 - here's what i want you to do
02:28 - and here we're going through a loop and
02:30 - 10 times running this runnable
02:32 - so all of that to say what this program
02:35 - will do
02:36 - is 10 times it's going to uh
02:39 - trigger this method in a new thread
02:43 - and so those 10 threads are going to be
02:45 - running in parallel in kind of
02:46 - unpredictable ways
02:48 - so but all it's going to be doing is
02:50 - parsing the this exact
02:51 - same date string 10 times and just
02:53 - printing it out
02:54 - it parses this date string as a date
02:56 - prints it out
02:58 - if there's an exception it goes oh no
02:59 - there's an exception and prints out the
03:01 - exception
03:02 - and so that's it you can just think of
03:04 - it as it's parsing
03:05 - this date in this format 10 times all at
03:09 - the same time
03:10 - but all using this one date format
03:13 - object not using separate ones all of
03:16 - them are using this same object this
03:17 - date format object
03:19 - so let's run it and see what output we
03:22 - get
03:26 - so cool at first glance it looks like
03:28 - this one may have worked okay look at it
03:30 - there's no exceptions it parsed
03:32 - out dates and printed them but if you
03:34 - look there's some
03:35 - really strange behavior
03:39 - so the first one looked great yeah as
03:41 - you can see this is
03:42 - you know um october 17 2020 at 12 30 4
03:47 - 51
03:48 - and this first one is great saturday
03:49 - october 17th 2020
03:51 - 12 30 4 51 cool and it also goes like
03:54 - that for a while here and it's fine and
03:55 - then all of a sudden it says it's
03:57 - wednesday october 17th
04:01 - in 5100 and then it's
04:04 - and then these are all okay let's run a
04:07 - few more times
04:08 - but that you wouldn't expect that to
04:10 - happen right so
04:11 - let's run a few more times oh now we get
04:13 - an exception this time for
04:15 - an input string of something bizarre
04:18 - uh the ones that worked oh those seem to
04:20 - look okay
04:21 - but kind of as you can see each time we
04:23 - run it we get different behavior
04:26 - so this one everyone seemed to work okay
04:28 - so if you if this would have been our
04:29 - first run we might have thought
04:31 - everything's great but i'm going to keep
04:33 - running it
04:34 - mind you all all it's trying to do is
04:37 - print out
04:38 - the date that it creates from this date
04:41 - string
04:41 - and this one is even stranger there's an
04:43 - exception it's
04:44 - oh here's it successfully parsed it but
04:46 - now it's trying to take an input string
04:48 - of
04:48 - the empty string and it somehow came up
04:50 - with the year 17 here and it's saturday
04:52 - and it's monday
04:53 - and it's sunday and it's a different
04:55 - time
04:57 - it's obvious you get completely
04:58 - unpredictable behavior here and the
05:00 - reason for that is simple date format is
05:03 - not
05:04 - thread safe you can't use it a shared
05:08 - simple date format
05:09 - object across multiple threads that are
05:12 - using at the same time
05:13 - and have them be guaranteed to work
05:16 - properly
05:17 - the reason for that is due to some
05:20 - intricate
05:21 - weird old junkiness in the way simple
05:24 - date format
05:25 - parses dates as it's trying to figure
05:28 - out
05:29 - what the date is in this format it's
05:32 - it's taking individual
05:34 - things that it comes up with and
05:36 - populating them in instance variables
05:38 - inside this date format so what that
05:40 - means is
05:41 - essentially it's like once it decides oh
05:43 - this is the year i'll put it in the year
05:45 - thing
05:46 - in the in this date format object but in
05:48 - the meantime
05:49 - some other thread is also parsing that
05:52 - date
05:53 - using using this same date format object
05:56 - and messing up the calculations
05:58 - happening
05:58 - for the other running instance for the
06:01 - other thread so they're all stepping on
06:02 - each other's toes and tearing each other
06:04 - up
06:04 - because we're all sharing the same
06:06 - object for many kinds of classes
06:08 - if you have one same object like this
06:10 - that you're using across multiple
06:11 - threads
06:12 - they're coded in such a way to be thread
06:14 - safe that they don't step on each
06:15 - other's toes but simple date format is
06:16 - old enough
06:17 - it's been around since god knows when in
06:20 - java
06:20 - so it's not fred's safe you can't do it
06:23 - like this so
06:25 - what can you do to get around this
06:28 - hidden danger
06:29 - of thread safety and simple labor well
06:32 - to begin with this is such a
06:34 - it's such a dangerous kind of bug
06:36 - because it's so quiet there's nothing on
06:38 - here that that calls out there oh my
06:40 - gosh there's a problem
06:41 - and and unless you're you know if you're
06:43 - just running one or
06:44 - two or three threads at a time you
06:46 - probably wouldn't run this into this
06:47 - very much so for example
06:48 - if we change this to only do this three
06:50 - times
06:53 - we probably have a lot less of an
06:56 - opportunity to run into problems
06:58 - although we're still running into it
06:59 - pretty many times here
07:00 - but sometimes it seems to be okay but
07:02 - just gives you
07:03 - wacky dates so you could like be running
07:06 - this
07:07 - in real code in production just every
07:10 - once in a while you see some just
07:11 - wacky dates and you don't really know
07:13 - why it might be because of something
07:14 - like this
07:15 - whenever you see a shared simple date
07:17 - format object
07:19 - that isn't just created used once and
07:21 - thrown away
07:22 - flag it it's a terrible idea it's going
07:24 - to blow stuff up and it's going to cause
07:26 - you a lot of pain
07:27 - so now let's go over what we can
07:28 - actually do to get around that
07:30 - so number one a symbol change
07:34 - is just to instead of using a shared
07:36 - symbol date format object
07:38 - just instantiate a new simple date
07:40 - format object
07:41 - every time you need to use it so instead
07:43 - of having this private static final
07:44 - simple date format here at the top
07:46 - just create a new one here whenever you
07:49 - want
07:51 - do it so it's creating its own simple
07:53 - date format here and it's never going to
07:55 - step
07:55 - on anything else's toes always using its
07:58 - own simple date format
07:59 - it's only it's going to be operating in
08:01 - its own little tent so now if we run it
08:04 - as you can see they're all perfect and i
08:07 - can run it a whole bunch of times
08:09 - and we don't get any issues at all
08:12 - but um somebody might say that well
08:14 - that's a lot more like work
08:16 - for java to have to create that each
08:18 - time and that's that's
08:19 - it's false and it's true like it's in
08:21 - the big world of java this probably
08:23 - isn't that big of a deal to create this
08:25 - object nobody's probably
08:26 - ever going to notice that performance
08:27 - difference but still people are going to
08:28 - be like oh come on that just looks bad
08:30 - why are you creating that each time
08:31 - so what you can do instead is there's
08:34 - other classes that are offered that
08:35 - are thread safe that are pretty much
08:38 - interchangeable
08:39 - one of them is called fast
08:42 - date format so if we just want to change
08:45 - to use that
08:46 - fast date format and that's offered by
08:50 - um it's offered by apache common lang 3
08:53 - so you're going to have to
08:54 - add that jar to your project or if
08:56 - you're using maven add it to your
08:57 - dependencies
08:58 - go online you can download that jar put
09:01 - it in your project
09:02 - and you'll be able to use fast date
09:03 - format the only little difference
09:05 - with it is instead of saying new fast
09:08 - date format
09:10 - this is not a valid constructor doesn't
09:12 - work so you have to do fast date format
09:14 - dot get instance and then give it that
09:18 - pattern
09:18 - that's the only difference there is and
09:21 - so now
09:22 - we've got this date format and we've got
09:23 - to change this code back
09:26 - so now it's the same it's all using the
09:28 - shared fast state format
09:30 - object but fast date format is thread
09:33 - safe
09:34 - so now let's go ahead and organize
09:35 - imports and give this a shot
09:38 - oh and we'll also go back to hitting it
09:40 - hard with 10 threads at a time
09:45 - and if you look we i can keep running it
09:46 - every time and
09:48 - perfect results each and every time no
09:50 - exceptions no weird dates
09:52 - so that's another great way to get
09:54 - around the problems with simple date
09:55 - format and multi-threaded environment
09:57 - so if you were if you happen to work in
09:59 - a company and
10:00 - see somebody using a simple date format
10:02 - in an environment
10:04 - that's multi-threaded maybe a web
10:05 - application maybe just some other kind
10:06 - of
10:07 - complex application that does multiple
10:09 - things at a time if you ever see anybody
10:11 - using a shared
10:12 - simple date format object red flags call
10:15 - them out on it
10:16 - you'll be the savior and if you happen
10:18 - to see any really weird behavior with
10:20 - dates
10:22 - keep an eye out for people using simple
10:24 - date format look around in the code
10:26 - that you're working with and see if
10:28 - anybody is using simple date format in a
10:30 - shared way like that if something is
10:31 - perhaps
10:32 - using a class level simple date format
10:35 - that's
10:35 - probably a good candidate for what could
10:38 - be causing your hidden problems
10:39 - so yeah thanks for watching if you like
10:41 - this video give me a thumbs up if you
10:42 - got some value out of it give me a
10:44 - thumbs down
10:44 - if not and tell me what you'd like to
10:46 - see in the future so until next time
10:48 - this is john with coding with john
10:51 - thanks for watching see you next time

Cleaned transcript:

hey everybody it's john from coding with john today we're going to go over something that i've seen bite so many developers and development teams that i've personally worked with something that probably all of you have used if you've worked with dates in java before is simple date format it seems to be just a very nice simple way to deal with dates and getting them from strings and turning dates back into strings and it is it works great in normal small single threaded circumstances but so i what i've worked with them uh we we're usually working on web applications which are multithreaded environments by default you can take in a bunch of different web service calls at a time so you have to it's by default running in a multithreaded environment so the simple day format class explodes in completely crazy unpredictable ways when you are in a multithreaded environment and we're going to go over the example of that here here's what you what we've got we've got a just a simple class simple date format is unsafe with a shared date format object uh a simple date format and here's the format year your year your monthly white this is whatever there's a format if you've done this before it should look familiar even if you haven't it should be pretty simple to see okay i've got a date formatting thing um excuse me object is going to format a date like this or taken a date that looks like this as a string and give you a date so awesome perfect um so now we start our main method and we're going to what's actually going to happen here is we're going to take this string of a date of an actual date and we're going to run 10 threads at a time just parsing that date just i want to parse this date a bunch of times but do it in a multithreaded way so i'm trying to do all of those at the same time i'm trying to parse this date 10 times at the same time in parallel so if you haven't worked with too much multithreaded stuff in java yet that's okay but but just briefly what we're doing here is this executive service is going to be used to offer those 10 threads to us to use so we're we're creating a new fixed thread pool of 10 so this is a pool of 10 threads that we can grab from and this is this runnable that we're defining here with this public void run method is just saying when i run this runnable here's what i want you to do and here we're going through a loop and 10 times running this runnable so all of that to say what this program will do is 10 times it's going to uh trigger this method in a new thread and so those 10 threads are going to be running in parallel in kind of unpredictable ways so but all it's going to be doing is parsing the this exact same date string 10 times and just printing it out it parses this date string as a date prints it out if there's an exception it goes oh no there's an exception and prints out the exception and so that's it you can just think of it as it's parsing this date in this format 10 times all at the same time but all using this one date format object not using separate ones all of them are using this same object this date format object so let's run it and see what output we get so cool at first glance it looks like this one may have worked okay look at it there's no exceptions it parsed out dates and printed them but if you look there's some really strange behavior so the first one looked great yeah as you can see this is you know um october 17 2020 at 12 30 4 51 and this first one is great saturday october 17th 2020 12 30 4 51 cool and it also goes like that for a while here and it's fine and then all of a sudden it says it's wednesday october 17th in 5100 and then it's and then these are all okay let's run a few more times but that you wouldn't expect that to happen right so let's run a few more times oh now we get an exception this time for an input string of something bizarre uh the ones that worked oh those seem to look okay but kind of as you can see each time we run it we get different behavior so this one everyone seemed to work okay so if you if this would have been our first run we might have thought everything's great but i'm going to keep running it mind you all all it's trying to do is print out the date that it creates from this date string and this one is even stranger there's an exception it's oh here's it successfully parsed it but now it's trying to take an input string of the empty string and it somehow came up with the year 17 here and it's saturday and it's monday and it's sunday and it's a different time it's obvious you get completely unpredictable behavior here and the reason for that is simple date format is not thread safe you can't use it a shared simple date format object across multiple threads that are using at the same time and have them be guaranteed to work properly the reason for that is due to some intricate weird old junkiness in the way simple date format parses dates as it's trying to figure out what the date is in this format it's it's taking individual things that it comes up with and populating them in instance variables inside this date format so what that means is essentially it's like once it decides oh this is the year i'll put it in the year thing in the in this date format object but in the meantime some other thread is also parsing that date using using this same date format object and messing up the calculations happening for the other running instance for the other thread so they're all stepping on each other's toes and tearing each other up because we're all sharing the same object for many kinds of classes if you have one same object like this that you're using across multiple threads they're coded in such a way to be thread safe that they don't step on each other's toes but simple date format is old enough it's been around since god knows when in java so it's not fred's safe you can't do it like this so what can you do to get around this hidden danger of thread safety and simple labor well to begin with this is such a it's such a dangerous kind of bug because it's so quiet there's nothing on here that that calls out there oh my gosh there's a problem and and unless you're you know if you're just running one or two or three threads at a time you probably wouldn't run this into this very much so for example if we change this to only do this three times we probably have a lot less of an opportunity to run into problems although we're still running into it pretty many times here but sometimes it seems to be okay but just gives you wacky dates so you could like be running this in real code in production just every once in a while you see some just wacky dates and you don't really know why it might be because of something like this whenever you see a shared simple date format object that isn't just created used once and thrown away flag it it's a terrible idea it's going to blow stuff up and it's going to cause you a lot of pain so now let's go over what we can actually do to get around that so number one a symbol change is just to instead of using a shared symbol date format object just instantiate a new simple date format object every time you need to use it so instead of having this private static final simple date format here at the top just create a new one here whenever you want do it so it's creating its own simple date format here and it's never going to step on anything else's toes always using its own simple date format it's only it's going to be operating in its own little tent so now if we run it as you can see they're all perfect and i can run it a whole bunch of times and we don't get any issues at all but um somebody might say that well that's a lot more like work for java to have to create that each time and that's that's it's false and it's true like it's in the big world of java this probably isn't that big of a deal to create this object nobody's probably ever going to notice that performance difference but still people are going to be like oh come on that just looks bad why are you creating that each time so what you can do instead is there's other classes that are offered that are thread safe that are pretty much interchangeable one of them is called fast date format so if we just want to change to use that fast date format and that's offered by um it's offered by apache common lang 3 so you're going to have to add that jar to your project or if you're using maven add it to your dependencies go online you can download that jar put it in your project and you'll be able to use fast date format the only little difference with it is instead of saying new fast date format this is not a valid constructor doesn't work so you have to do fast date format dot get instance and then give it that pattern that's the only difference there is and so now we've got this date format and we've got to change this code back so now it's the same it's all using the shared fast state format object but fast date format is thread safe so now let's go ahead and organize imports and give this a shot oh and we'll also go back to hitting it hard with 10 threads at a time and if you look we i can keep running it every time and perfect results each and every time no exceptions no weird dates so that's another great way to get around the problems with simple date format and multithreaded environment so if you were if you happen to work in a company and see somebody using a simple date format in an environment that's multithreaded maybe a web application maybe just some other kind of complex application that does multiple things at a time if you ever see anybody using a shared simple date format object red flags call them out on it you'll be the savior and if you happen to see any really weird behavior with dates keep an eye out for people using simple date format look around in the code that you're working with and see if anybody is using simple date format in a shared way like that if something is perhaps using a class level simple date format that's probably a good candidate for what could be causing your hidden problems so yeah thanks for watching if you like this video give me a thumbs up if you got some value out of it give me a thumbs down if not and tell me what you'd like to see in the future so until next time this is john with coding with john thanks for watching see you next time
