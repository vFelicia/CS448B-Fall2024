With timestamps:

00:00 - in this video we're going to talk all
00:01 - about using maps in java i remember back
00:03 - when i was learning java just the
00:04 - concept of what a map was and what it
00:06 - was used for
00:07 - seemed complicated and hard to grasp but
00:09 - what a map is and how you can use it is
00:11 - really simple and you're going to have a
00:12 - great understanding of it by the end of
00:13 - this video my name is john and i put up
00:15 - a new java tutorial video every single
00:16 - week so if you like this video please
00:18 - consider subscribing so you don't miss
00:19 - each week's video i also have a full
00:21 - java course available in a link down in
00:23 - the description if you're interested so
00:24 - go check it out
00:25 - what exactly is a map what is it used
00:27 - for and what does it represent
00:29 - so at its most basic level a map is just
00:32 - a
00:32 - set of key value pairs i think this is
00:35 - so much easier to grasp if we just
00:37 - start with an example so imagine if i'm
00:39 - running a company and i have a bunch of
00:40 - employees and they all have
00:42 - id numbers i would probably want
00:43 - something where i could put in an
00:45 - employee name
00:46 - and get their id number that is the kind
00:48 - of thing a map can do for you we can
00:49 - create
00:50 - a map of employee names to id numbers so
00:53 - let's do that right now
00:54 - so how would we create a map like that
00:56 - in our code here's how we can do it we
00:57 - can do
00:58 - hash map amp ids for employee ids
01:01 - equals new hash map we'll need to go
01:03 - ahead and import java.util.hashmap
01:06 - normally when you create an object this
01:07 - is pretty much everything you need but
01:09 - when you're creating a map you need a
01:10 - little bit more
01:10 - one of the things that eclipse is
01:12 - complaining about here is it says
01:13 - hashmap is a raw type references to
01:15 - generic type hashmap
01:17 - should be parameterized so what does
01:18 - that mean that means java wants to know
01:21 - what this is going to be a map to and
01:24 - from
01:24 - this is going to be a map of what to
01:26 - what and it's just looking for data
01:27 - types there like you could have a map of
01:29 - integers to strings uh strings to
01:31 - doubles or if you created your own class
01:33 - like dog you could create a map of
01:35 - strings to dogs so here in our case we
01:37 - want to create a map
01:38 - of employee names to their id numbers
01:41 - that's the keys and the values in our
01:43 - case the keys are going to be the
01:44 - employee names and the values are going
01:46 - to be
01:47 - the employee numbers the employee ids so
01:49 - it makes sense for the names to be a
01:51 - string and the employee id to be an
01:53 - integer so here's how we specify that
01:55 - in angle brackets here right after this
01:57 - hash map we put in string
01:58 - comma integer this tells java that this
02:01 - is going to be a map of
02:02 - strings to integers the keys of our map
02:05 - are going to be strings
02:06 - and the values are going to be integers
02:08 - also to get rid of this little warning
02:09 - here on new hash map we have to add
02:11 - what's called
02:12 - a diamond operator and that's just less
02:14 - than greater than that might seem kind
02:15 - of weird but it comes from um in old
02:17 - versions of java
02:18 - you had to re-specify the types of the
02:20 - keys and values of your map here so you
02:22 - had to put in string
02:24 - and integer again but later on i think
02:25 - it was in java seven they changed it so
02:27 - you could just take that out
02:28 - and java would just infer that obviously
02:30 - you just mean the same type of hash map
02:32 - that you declared up here so now all you
02:34 - have to do is put in this little diamond
02:35 - operator
02:36 - and you're good to go you don't have to
02:37 - repeat yourself so this is declaring an
02:39 - employee ids hash map there's nothing in
02:41 - it yet but we're telling java we want a
02:43 - map of
02:43 - strings to integers so we're going to
02:45 - map employee names
02:47 - to their ids so this map will hold that
02:49 - information for us
02:50 - and allow us to do that look up so you
02:52 - might be one so you might be wondering
02:53 - why do we have hash map here why can't
02:54 - we just say
02:55 - um map string integer and new map why do
02:58 - we have to say it's a hash map
03:00 - well in java this map is actually what's
03:01 - called an interface the map interface
03:03 - just specifies what kind of methods
03:06 - a real map implementation have to
03:08 - support and there are different types of
03:09 - implementations of that map interface
03:12 - and a hashmap is just one of those
03:14 - implementations
03:14 - it's probably the most common map
03:16 - implementation that you see used by
03:18 - programmers
03:18 - the way you interact with them is going
03:20 - to be the same it's just how it works
03:21 - underneath that's a little bit different
03:23 - but for our example we're just going to
03:24 - use hashmap alright so now i have this
03:26 - employee ids
03:27 - map how do i actually add a new mapping
03:30 - to it so let's say i'm an employee of
03:32 - this company my name is
03:33 - john and my employee id is one two three
03:35 - four five
03:36 - to add that value to my map i would just
03:38 - say mpids.put
03:40 - and you can see here i just need to
03:41 - specify the string key and the integer
03:44 - value so the key will be the employee
03:46 - name in this case
03:47 - john and the value is the employee id
03:49 - itself which is an integer
03:51 - one two three four five so now my map
03:53 - knows that for the key
03:54 - john it has the value one two three four
03:56 - five and of course you can add more so
03:58 - we can say amp ids.put
04:00 - carl uh his employee id will be 54321
04:04 - and amp ids.put jerry
04:07 - and this can be 8675309 just so we can
04:10 - get a quick visual of what this map
04:11 - looks like
04:12 - let's go ahead and print it out
04:14 - system.out.printline
04:16 - amp ids save that and run it and it
04:18 - prints out what our map
04:19 - looks like in a very clear way see carl
04:21 - has an id of 54321 john has one two
04:23 - three four five and jerry has
04:25 - 8675309 it's a mapping of keys to values
04:28 - employee names
04:29 - to their employee ids one thing you'll
04:31 - probably notice is that these are in a
04:32 - different order
04:33 - than we added them in i added john
04:35 - before carl but this has carl before
04:37 - john
04:38 - one of the things about maps is that it
04:39 - doesn't guarantee a certain order
04:41 - it's there to store these key value
04:43 - pairs and that's what you care about you
04:44 - don't necessarily care about the
04:45 - ordering you just want to know
04:46 - that the name is properly linked up
04:48 - paired with that id
04:50 - properly all right so we can print out
04:51 - the whole thing but how do we get
04:53 - one specific value so i put in all these
04:55 - employee ids how do i say get
04:57 - carl's employee id from my map to do
05:00 - that i can just say amp ids.get
05:02 - and you can see you pass in the key so
05:05 - if i want to get carl's id i just do
05:07 - empids.get
05:08 - carl we can just print that out so we
05:10 - make sure we're getting the right value
05:12 - there
05:15 - systemoutprintlineampids.getcarl
05:16 - save it and run it and we can see we got
05:19 - carl's id successfully
05:20 - so this is what a map allows you to do
05:22 - you can store key value pairs this key
05:24 - corresponds with this value and later on
05:26 - you can look them up oh what
05:28 - value corresponded with this key in this
05:30 - case what's carl's employee id
05:32 - and we can look it up easily like this
05:34 - and this is really the basics of using a
05:36 - map you can put
05:37 - values in there in key value pairs and
05:39 - later on you can look up a key and see
05:41 - which value it corresponds to in your
05:42 - mapping
05:43 - but put and git aren't the only two
05:45 - methods that are supported by this hash
05:46 - map
05:47 - what else can we do well one thing we
05:48 - can do is just check to see
05:50 - if a certain key exists in our map so if
05:52 - we wanted to see if
05:54 - jerry had an employee id in this table
05:56 - we could just do empids dot contains
05:58 - key and pass in jerry and it says true
06:01 - because jerry does
06:02 - exist in the map but if we put in george
06:05 - we get false because george was never
06:06 - added to our map
06:07 - another cool thing you can do is see if
06:09 - your map contains a certain
06:10 - value so if i want to see if i have the
06:13 - employee id
06:14 - 6 in my map i can just do empids dot
06:17 - contains value and pass in the number
06:20 - six
06:20 - the number six doesn't exist anywhere in
06:22 - our mapping yet so we get
06:23 - false but if i put 8675309
06:26 - you see that i get true because it does
06:28 - exist in our set
06:30 - of values in our map it's also good to
06:32 - know that if you do amp ids.put
06:34 - and you put the exact same key that you
06:36 - had before let's say i put in
06:38 - john again but instead of one two three
06:40 - four five i put in
06:42 - 98765. what that will do if john already
06:45 - exists it will override that current
06:46 - value
06:47 - and update it with the new value so
06:48 - let's copy paste printing out our
06:50 - employee ids map after that
06:52 - and at the beginning you can see that
06:53 - the key john had the value one two three
06:55 - four five
06:56 - and at the end it was updated to be
06:58 - 98765 to put replaced that value
07:00 - so put will add a key value pair and it
07:03 - will update a certain key's value if
07:05 - that key already exists in your map
07:06 - there's another similar method here and
07:08 - it is called
07:09 - replace so there's a subtle difference
07:11 - between replace and put
07:12 - so if i say replace the value for the
07:15 - key john
07:16 - with uh 777 print out our mapping again
07:19 - we can see that it successfully replaced
07:21 - the value at john with 777.
07:23 - however if i instead say uh replace
07:25 - kramer
07:26 - with 777 well kramer doesn't exist
07:29 - anywhere in our map yet so what do you
07:30 - think it's going to do
07:31 - let's run it and see well it actually
07:33 - looks like it didn't change the mapping
07:35 - at all and that's because this replace
07:37 - acts a little bit differently than the
07:39 - put
07:39 - when you run replace and this key
07:41 - doesn't exist in your map yet it won't
07:42 - do anything
07:43 - it'll only replace the current value if
07:45 - it does exist whereas put
07:46 - if it doesn't exist will go ahead and
07:48 - add it to your math so you just need to
07:49 - know that so you know which one works
07:51 - best for your particular use case
07:52 - so similarly there is actually a method
07:55 - called put
07:56 - if absent and you can maybe kind of take
07:58 - a guess at what that does that will only
08:00 - add the key value pair that you specify
08:02 - if that key doesn't already exist
08:04 - somewhere in your map so for example if
08:06 - i said put if absent
08:08 - john 222 print out the map again we see
08:11 - that john still has the value 98765 it
08:14 - doesn't have the value
08:15 - 222 because put if absent only does the
08:18 - update of that key value pair
08:20 - if it's not already currently in the map
08:22 - so if instead of john i said
08:23 - steve run that we see that since steve
08:26 - wasn't in the map already
08:28 - it does get added when we use put if
08:30 - absent now what if you want to remove
08:32 - a key value pair from your map it's
08:33 - pretty straightforward you could just do
08:35 - amp ids dot
08:36 - remove and pass in the key of what you
08:39 - want to remove let's say we want to go
08:40 - ahead and remove that steve entry that
08:42 - we just put right here
08:43 - print out our map again run it we can
08:45 - see that the steve value that was added
08:47 - here has now been
08:48 - removed another important thing to note
08:50 - is that these two types that we're using
08:52 - here for the
08:53 - key type and the value type in our hash
08:55 - map those have to be java classes they
08:57 - can't be
08:58 - primitive types so things like lowercase
09:00 - int or lowercase
09:02 - long or float or double those won't work
09:05 - here and you get kind of a strange
09:06 - looking error if you try
09:08 - it says insert dimensions to complete
09:10 - reference type
09:11 - that's a pretty vague weird error and it
09:12 - can be hard to understand what that
09:14 - means the first time you run into that
09:15 - but to get around it you just need to
09:16 - use the full
09:18 - java wrapper classes for those so for
09:20 - lowercase int
09:21 - use capital i integer for lowercase flow
09:24 - use uppercase float etc and everything
09:26 - will still work exactly how you want so
09:27 - i understand that maps can certainly be
09:28 - confusing the first time you're kind of
09:30 - getting introduced to them and there's
09:31 - all these different methods and stuff
09:33 - that we went over that you can use
09:34 - but the really important thing to
09:35 - remember is that a map is just
09:37 - a collection of key value pairs it's
09:39 - like a lookup table
09:40 - in this case we have employee names to
09:42 - their ids you could have
09:44 - golf players to their golf scores you
09:46 - could have like your pets as the keys
09:48 - and their birthdays is the values
09:49 - anything where you need to create like a
09:51 - relationship like that that's where
09:52 - you're going to want to use map it's a
09:54 - really useful tool and
09:55 - definitely one you're going to want to
09:56 - be familiar with and comfortable with if
09:58 - you're going to be learning and using
10:00 - java or any other programming language
10:01 - if you liked this video or learned
10:03 - something please let me know by leaving
10:04 - a like and hit the subscribe button so
10:05 - you don't miss each week's new video
10:07 - thanks for watching and i'll see you
10:08 - next time

Cleaned transcript:

in this video we're going to talk all about using maps in java i remember back when i was learning java just the concept of what a map was and what it was used for seemed complicated and hard to grasp but what a map is and how you can use it is really simple and you're going to have a great understanding of it by the end of this video my name is john and i put up a new java tutorial video every single week so if you like this video please consider subscribing so you don't miss each week's video i also have a full java course available in a link down in the description if you're interested so go check it out what exactly is a map what is it used for and what does it represent so at its most basic level a map is just a set of key value pairs i think this is so much easier to grasp if we just start with an example so imagine if i'm running a company and i have a bunch of employees and they all have id numbers i would probably want something where i could put in an employee name and get their id number that is the kind of thing a map can do for you we can create a map of employee names to id numbers so let's do that right now so how would we create a map like that in our code here's how we can do it we can do hash map amp ids for employee ids equals new hash map we'll need to go ahead and import java.util.hashmap normally when you create an object this is pretty much everything you need but when you're creating a map you need a little bit more one of the things that eclipse is complaining about here is it says hashmap is a raw type references to generic type hashmap should be parameterized so what does that mean that means java wants to know what this is going to be a map to and from this is going to be a map of what to what and it's just looking for data types there like you could have a map of integers to strings uh strings to doubles or if you created your own class like dog you could create a map of strings to dogs so here in our case we want to create a map of employee names to their id numbers that's the keys and the values in our case the keys are going to be the employee names and the values are going to be the employee numbers the employee ids so it makes sense for the names to be a string and the employee id to be an integer so here's how we specify that in angle brackets here right after this hash map we put in string comma integer this tells java that this is going to be a map of strings to integers the keys of our map are going to be strings and the values are going to be integers also to get rid of this little warning here on new hash map we have to add what's called a diamond operator and that's just less than greater than that might seem kind of weird but it comes from um in old versions of java you had to respecify the types of the keys and values of your map here so you had to put in string and integer again but later on i think it was in java seven they changed it so you could just take that out and java would just infer that obviously you just mean the same type of hash map that you declared up here so now all you have to do is put in this little diamond operator and you're good to go you don't have to repeat yourself so this is declaring an employee ids hash map there's nothing in it yet but we're telling java we want a map of strings to integers so we're going to map employee names to their ids so this map will hold that information for us and allow us to do that look up so you might be one so you might be wondering why do we have hash map here why can't we just say um map string integer and new map why do we have to say it's a hash map well in java this map is actually what's called an interface the map interface just specifies what kind of methods a real map implementation have to support and there are different types of implementations of that map interface and a hashmap is just one of those implementations it's probably the most common map implementation that you see used by programmers the way you interact with them is going to be the same it's just how it works underneath that's a little bit different but for our example we're just going to use hashmap alright so now i have this employee ids map how do i actually add a new mapping to it so let's say i'm an employee of this company my name is john and my employee id is one two three four five to add that value to my map i would just say mpids.put and you can see here i just need to specify the string key and the integer value so the key will be the employee name in this case john and the value is the employee id itself which is an integer one two three four five so now my map knows that for the key john it has the value one two three four five and of course you can add more so we can say amp ids.put carl uh his employee id will be 54321 and amp ids.put jerry and this can be 8675309 just so we can get a quick visual of what this map looks like let's go ahead and print it out system.out.printline amp ids save that and run it and it prints out what our map looks like in a very clear way see carl has an id of 54321 john has one two three four five and jerry has 8675309 it's a mapping of keys to values employee names to their employee ids one thing you'll probably notice is that these are in a different order than we added them in i added john before carl but this has carl before john one of the things about maps is that it doesn't guarantee a certain order it's there to store these key value pairs and that's what you care about you don't necessarily care about the ordering you just want to know that the name is properly linked up paired with that id properly all right so we can print out the whole thing but how do we get one specific value so i put in all these employee ids how do i say get carl's employee id from my map to do that i can just say amp ids.get and you can see you pass in the key so if i want to get carl's id i just do empids.get carl we can just print that out so we make sure we're getting the right value there systemoutprintlineampids.getcarl save it and run it and we can see we got carl's id successfully so this is what a map allows you to do you can store key value pairs this key corresponds with this value and later on you can look them up oh what value corresponded with this key in this case what's carl's employee id and we can look it up easily like this and this is really the basics of using a map you can put values in there in key value pairs and later on you can look up a key and see which value it corresponds to in your mapping but put and git aren't the only two methods that are supported by this hash map what else can we do well one thing we can do is just check to see if a certain key exists in our map so if we wanted to see if jerry had an employee id in this table we could just do empids dot contains key and pass in jerry and it says true because jerry does exist in the map but if we put in george we get false because george was never added to our map another cool thing you can do is see if your map contains a certain value so if i want to see if i have the employee id 6 in my map i can just do empids dot contains value and pass in the number six the number six doesn't exist anywhere in our mapping yet so we get false but if i put 8675309 you see that i get true because it does exist in our set of values in our map it's also good to know that if you do amp ids.put and you put the exact same key that you had before let's say i put in john again but instead of one two three four five i put in 98765. what that will do if john already exists it will override that current value and update it with the new value so let's copy paste printing out our employee ids map after that and at the beginning you can see that the key john had the value one two three four five and at the end it was updated to be 98765 to put replaced that value so put will add a key value pair and it will update a certain key's value if that key already exists in your map there's another similar method here and it is called replace so there's a subtle difference between replace and put so if i say replace the value for the key john with uh 777 print out our mapping again we can see that it successfully replaced the value at john with 777. however if i instead say uh replace kramer with 777 well kramer doesn't exist anywhere in our map yet so what do you think it's going to do let's run it and see well it actually looks like it didn't change the mapping at all and that's because this replace acts a little bit differently than the put when you run replace and this key doesn't exist in your map yet it won't do anything it'll only replace the current value if it does exist whereas put if it doesn't exist will go ahead and add it to your math so you just need to know that so you know which one works best for your particular use case so similarly there is actually a method called put if absent and you can maybe kind of take a guess at what that does that will only add the key value pair that you specify if that key doesn't already exist somewhere in your map so for example if i said put if absent john 222 print out the map again we see that john still has the value 98765 it doesn't have the value 222 because put if absent only does the update of that key value pair if it's not already currently in the map so if instead of john i said steve run that we see that since steve wasn't in the map already it does get added when we use put if absent now what if you want to remove a key value pair from your map it's pretty straightforward you could just do amp ids dot remove and pass in the key of what you want to remove let's say we want to go ahead and remove that steve entry that we just put right here print out our map again run it we can see that the steve value that was added here has now been removed another important thing to note is that these two types that we're using here for the key type and the value type in our hash map those have to be java classes they can't be primitive types so things like lowercase int or lowercase long or float or double those won't work here and you get kind of a strange looking error if you try it says insert dimensions to complete reference type that's a pretty vague weird error and it can be hard to understand what that means the first time you run into that but to get around it you just need to use the full java wrapper classes for those so for lowercase int use capital i integer for lowercase flow use uppercase float etc and everything will still work exactly how you want so i understand that maps can certainly be confusing the first time you're kind of getting introduced to them and there's all these different methods and stuff that we went over that you can use but the really important thing to remember is that a map is just a collection of key value pairs it's like a lookup table in this case we have employee names to their ids you could have golf players to their golf scores you could have like your pets as the keys and their birthdays is the values anything where you need to create like a relationship like that that's where you're going to want to use map it's a really useful tool and definitely one you're going to want to be familiar with and comfortable with if you're going to be learning and using java or any other programming language if you liked this video or learned something please let me know by leaving a like and hit the subscribe button so you don't miss each week's new video thanks for watching and i'll see you next time
