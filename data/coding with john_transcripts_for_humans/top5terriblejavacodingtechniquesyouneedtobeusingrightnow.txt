With timestamps:

00:00 - we talk a lot about how to make your
00:01 - java code clean and easy to read and
00:03 - maintain today we're going to have some
00:05 - fun and talk about ways we can make some
00:06 - truly terrible java code my name is john
00:09 - i'm a lead java software engineer i also
00:11 - have a full java course available and a
00:13 - link down in the description if you're
00:14 - interested but i promise we won't be
00:16 - learning any of these terrible
00:17 - techniques in that course first you've
00:19 - probably heard that to keep your code
00:20 - clean and reusable you should create
00:23 - methods that only do one thing and do it
00:25 - well like this print board method here
00:27 - all it does is take in a tic-tac-toe
00:29 - board and print it out to the console it
00:31 - does exactly what the method name says
00:33 - it will do pretty boring if you ask me
00:36 - predictable and just not exciting that's
00:38 - why instead of having a whole bunch of
00:40 - single-use methods that just do one
00:41 - thing i like to have just one method
00:44 - that can do anything i want it to do
00:46 - let's call it do
00:48 - anything so sure yeah it could print out
00:50 - a tic-tac-toe board but it can also do
00:52 - anything else i want it to like for
00:54 - example call my mom phone phone equals
00:58 - new phone phone dot call mom and it can
01:01 - feed my cat cat feeder feeder equals new
01:06 - cat feeder feeder dot feed
01:09 - new cat or it can even calculate the
01:11 - monthly payment on my mortgage this
01:13 - makes your method super versatile it can
01:15 - do anything you want now i know what
01:17 - you're thinking but john you're thinking
01:19 - what if i want to call my do anything
01:21 - method to feed my cat but i don't want
01:23 - to call my mom or calculate my house
01:25 - payment don't worry i am way ahead of
01:27 - you you can fine-tune your method by
01:29 - taking in a string parameter of what to
01:33 - do and then have if statements that
01:34 - check the value of that string and only
01:37 - do the thing that you want it to do for
01:38 - example if what to do
01:41 - dot equals print board
01:44 - then we'll print the board else if what
01:47 - to do dot equals call mom
01:49 - then we can call mom and so on down the
01:52 - line for everything you want your method
01:54 - to do or better yet instead of having
01:56 - one string parameter you can have a
01:59 - whole bunch of individual boolean
02:01 - parameters one for each thing the method
02:03 - can do so like boolean print board
02:06 - boolean call mom boolean feed cat
02:11 - calculate mortgage
02:13 - boolean take out trash and then just
02:17 - check the value of any of those booleans
02:18 - to see if your method should do that
02:20 - thing so if print board is true we'll
02:23 - print the board and if call mom is true
02:27 - then we'll call mom
02:29 - so now up here in my main method i can
02:32 - call do anything
02:34 - false true true false true and it will
02:38 - feed my cat call my mom and take out my
02:40 - trash what could be easier to remember
02:42 - than that next in your programs you're
02:44 - probably declaring variables in your
02:45 - methods right where you need them and
02:47 - then passing those variables into any
02:49 - other methods that you make as needed
02:51 - but that means you won't have access to
02:53 - every single variable in your program
02:55 - from every single place in your program
02:58 - what are you going to do if you need
02:59 - some variable value and a method that
03:01 - you're writing sure you can just add it
03:03 - as another parameter but that's the
03:05 - old-fashioned lazy way to solve the
03:07 - problem instead what you can do is
03:09 - declare all the variables you're ever
03:10 - going to need across your entire program
03:13 - as globals just in case you end up
03:15 - needing them somewhere you don't expect
03:17 - so if you have something like a tic tac
03:19 - toe board that you're passing around to
03:21 - various methods in your program you can
03:23 - rip it right out and add it as a global
03:25 - and be sure to make it public static to
03:27 - guarantee it can be accessed from
03:29 - anywhere do you have variables to hold
03:31 - what move the player chose or what move
03:33 - the computer chose that's right make
03:35 - them globals do you have an int i
03:38 - variable for your for loop yep you
03:40 - guessed it global a truly great program
03:43 - has all the variables it will ever need
03:45 - declared as globals there are no more
03:47 - restrictions to any variable at all
03:49 - everything is accessible from everywhere
03:51 - what could be better than that one
03:53 - excellent coding pattern is to just make
03:55 - one huge class called variables and just
03:58 - put all of your global variables in
03:59 - there
04:00 - then when you ever need to use any of
04:01 - these globals you can just call
04:03 - variables dot whatever variable you want
04:07 - and you can do that everywhere all
04:08 - across your entire program and you're on
04:10 - your way one of the main benefits to
04:12 - this design pattern is that you no
04:14 - longer have to pass in any variables to
04:16 - any method ever do you know how heavy a
04:19 - 2d array of characters is why bother
04:21 - having to pass that from method to
04:23 - method when each one can just pluck that
04:25 - off the globals list itself this makes
04:27 - your code leaner and faster your
04:29 - computer will thank you you might even
04:31 - want to go over to your variables class
04:33 - and just rename it v to cut down on any
04:36 - unnecessary file size bloat of course
04:38 - all of this means that any piece of code
04:40 - anywhere in your program could alter any
04:43 - variable in a way that another piece
04:45 - doesn't expect which makes it almost
04:46 - impossible to debug when something
04:48 - inevitably goes wrong but that's a small
04:50 - price to pay to be working with cutting
04:52 - edge software development techniques
04:54 - next when you're coding sometimes it
04:56 - might make sense to put a certain chunk
04:58 - of code inside a method so that it can
05:00 - be called and reused from other places
05:02 - in your code without having to write the
05:04 - code again this is okay at first but if
05:06 - you leave it like that it can become
05:08 - problematic just think about it if
05:10 - you're a computer running a program what
05:12 - would you rather do would you rather
05:14 - have a whole bunch of methods hopping
05:16 - from one to another having to pass
05:17 - variables in and out of methods if
05:20 - you're still silly enough not to have
05:21 - all your variables as global or just run
05:24 - one single enormous horrifically
05:27 - complicated method the answer should be
05:29 - obvious so once you're done coding get
05:32 - rid of all those extra methods and
05:34 - method calls and just put the full
05:36 - contents of each method everywhere it
05:38 - was called luckily modern find and
05:40 - replace tools inside your ide were made
05:42 - for exactly this purpose making doing
05:44 - this a breeze so we can just take the
05:46 - entire contents of this print board
05:48 - method and then everywhere print board
05:51 - is called we can just replace that with
05:53 - the entire contents of our method
05:55 - replace all so now we just have the full
05:58 - contents of what used to be the print
06:00 - board method completely written out
06:02 - everywhere that we need to print the
06:03 - board feel free to take a moment to just
06:06 - marvel at how clean and simple our code
06:08 - looks now and keep doing this for all
06:09 - the other methods in your program like
06:11 - this has contestant one method take the
06:13 - entire contents of the method and then
06:16 - search for everywhere that code is being
06:18 - called and replace it with the contents
06:20 - of the method
06:21 - now all the code in this entire program
06:23 - is contained in one convenient method
06:25 - this is the definition of streamlined
06:28 - code last but certainly not least
06:30 - everybody's always trying to find ways
06:32 - to reduce the number of lines in their
06:33 - code right but it's a whole lot of work
06:35 - to really think deeply about what your
06:37 - program is doing and how you might
06:39 - rewrite your code to make it simpler or
06:41 - more efficient or easier to read you're
06:43 - not here to think you're here to code so
06:46 - i think it's best to not worry about how
06:47 - to make your program better at all many
06:50 - programmers don't know or simply forget
06:52 - that you can have multiple statements on
06:54 - one line and you just need to separate
06:56 - them with semicolons this offers a great
06:58 - way to reduce the number of lines in
07:00 - your program again modern ide tools make
07:03 - this extremely easy all you have to do
07:05 - is find and replace all new lines with
07:08 - spaces and replace all and just like
07:12 - that your entire program is now one
07:15 - single line of code just imagine the
07:17 - processing power you're going to save by
07:19 - only having to execute one line of code
07:21 - instead of hundreds or thousands plus as
07:24 - an added benefit if you're running your
07:26 - program and suddenly you run into some
07:28 - kind of an exception you'll always know
07:30 - exactly which line the exception
07:32 - happened on which makes finding and
07:34 - resolving bugs
07:36 - fast and easy
07:40 - of course please don't actually use any
07:43 - of these ridiculously idiotic coding
07:45 - techniques or if you do please just
07:47 - don't join my development team you can
07:49 - get started learning to code java the
07:50 - right way by subscribing and also by
07:52 - checking out my full java course in the
07:54 - link down in the description i hope you
07:56 - enjoyed it and i'll see you next time

Cleaned transcript:

we talk a lot about how to make your java code clean and easy to read and maintain today we're going to have some fun and talk about ways we can make some truly terrible java code my name is john i'm a lead java software engineer i also have a full java course available and a link down in the description if you're interested but i promise we won't be learning any of these terrible techniques in that course first you've probably heard that to keep your code clean and reusable you should create methods that only do one thing and do it well like this print board method here all it does is take in a tictactoe board and print it out to the console it does exactly what the method name says it will do pretty boring if you ask me predictable and just not exciting that's why instead of having a whole bunch of singleuse methods that just do one thing i like to have just one method that can do anything i want it to do let's call it do anything so sure yeah it could print out a tictactoe board but it can also do anything else i want it to like for example call my mom phone phone equals new phone phone dot call mom and it can feed my cat cat feeder feeder equals new cat feeder feeder dot feed new cat or it can even calculate the monthly payment on my mortgage this makes your method super versatile it can do anything you want now i know what you're thinking but john you're thinking what if i want to call my do anything method to feed my cat but i don't want to call my mom or calculate my house payment don't worry i am way ahead of you you can finetune your method by taking in a string parameter of what to do and then have if statements that check the value of that string and only do the thing that you want it to do for example if what to do dot equals print board then we'll print the board else if what to do dot equals call mom then we can call mom and so on down the line for everything you want your method to do or better yet instead of having one string parameter you can have a whole bunch of individual boolean parameters one for each thing the method can do so like boolean print board boolean call mom boolean feed cat calculate mortgage boolean take out trash and then just check the value of any of those booleans to see if your method should do that thing so if print board is true we'll print the board and if call mom is true then we'll call mom so now up here in my main method i can call do anything false true true false true and it will feed my cat call my mom and take out my trash what could be easier to remember than that next in your programs you're probably declaring variables in your methods right where you need them and then passing those variables into any other methods that you make as needed but that means you won't have access to every single variable in your program from every single place in your program what are you going to do if you need some variable value and a method that you're writing sure you can just add it as another parameter but that's the oldfashioned lazy way to solve the problem instead what you can do is declare all the variables you're ever going to need across your entire program as globals just in case you end up needing them somewhere you don't expect so if you have something like a tic tac toe board that you're passing around to various methods in your program you can rip it right out and add it as a global and be sure to make it public static to guarantee it can be accessed from anywhere do you have variables to hold what move the player chose or what move the computer chose that's right make them globals do you have an int i variable for your for loop yep you guessed it global a truly great program has all the variables it will ever need declared as globals there are no more restrictions to any variable at all everything is accessible from everywhere what could be better than that one excellent coding pattern is to just make one huge class called variables and just put all of your global variables in there then when you ever need to use any of these globals you can just call variables dot whatever variable you want and you can do that everywhere all across your entire program and you're on your way one of the main benefits to this design pattern is that you no longer have to pass in any variables to any method ever do you know how heavy a 2d array of characters is why bother having to pass that from method to method when each one can just pluck that off the globals list itself this makes your code leaner and faster your computer will thank you you might even want to go over to your variables class and just rename it v to cut down on any unnecessary file size bloat of course all of this means that any piece of code anywhere in your program could alter any variable in a way that another piece doesn't expect which makes it almost impossible to debug when something inevitably goes wrong but that's a small price to pay to be working with cutting edge software development techniques next when you're coding sometimes it might make sense to put a certain chunk of code inside a method so that it can be called and reused from other places in your code without having to write the code again this is okay at first but if you leave it like that it can become problematic just think about it if you're a computer running a program what would you rather do would you rather have a whole bunch of methods hopping from one to another having to pass variables in and out of methods if you're still silly enough not to have all your variables as global or just run one single enormous horrifically complicated method the answer should be obvious so once you're done coding get rid of all those extra methods and method calls and just put the full contents of each method everywhere it was called luckily modern find and replace tools inside your ide were made for exactly this purpose making doing this a breeze so we can just take the entire contents of this print board method and then everywhere print board is called we can just replace that with the entire contents of our method replace all so now we just have the full contents of what used to be the print board method completely written out everywhere that we need to print the board feel free to take a moment to just marvel at how clean and simple our code looks now and keep doing this for all the other methods in your program like this has contestant one method take the entire contents of the method and then search for everywhere that code is being called and replace it with the contents of the method now all the code in this entire program is contained in one convenient method this is the definition of streamlined code last but certainly not least everybody's always trying to find ways to reduce the number of lines in their code right but it's a whole lot of work to really think deeply about what your program is doing and how you might rewrite your code to make it simpler or more efficient or easier to read you're not here to think you're here to code so i think it's best to not worry about how to make your program better at all many programmers don't know or simply forget that you can have multiple statements on one line and you just need to separate them with semicolons this offers a great way to reduce the number of lines in your program again modern ide tools make this extremely easy all you have to do is find and replace all new lines with spaces and replace all and just like that your entire program is now one single line of code just imagine the processing power you're going to save by only having to execute one line of code instead of hundreds or thousands plus as an added benefit if you're running your program and suddenly you run into some kind of an exception you'll always know exactly which line the exception happened on which makes finding and resolving bugs fast and easy of course please don't actually use any of these ridiculously idiotic coding techniques or if you do please just don't join my development team you can get started learning to code java the right way by subscribing and also by checking out my full java course in the link down in the description i hope you enjoyed it and i'll see you next time
