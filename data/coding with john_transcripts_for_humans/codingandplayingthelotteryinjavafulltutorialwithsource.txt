With timestamps:

00:00 - in this video we are going to write a
00:01 - complete program from scratch to play
00:03 - the lottery in java
00:04 - we're going to randomly generate six
00:06 - winning lottery numbers and then allow
00:07 - the user to input their six lottery
00:09 - number picks
00:10 - and then print out which of the users
00:11 - numbers match the winning lottery
00:13 - numbers and tell the user whether
00:14 - they've won or not we're also going to
00:16 - go over your odds of
00:17 - winning this lottery if you're new to
00:18 - this channel my name is john and i make
00:20 - a java tutorial video every single week
00:22 - either a video of a java concept or a
00:24 - full tutorial where we walk through
00:25 - creating a complete java program from
00:27 - scratch
00:28 - like this one so be sure to leave a like
00:29 - and hit the subscribe button so you
00:30 - don't miss the video every week and as
00:32 - always the full source for this video is
00:33 - available in a link down in the
00:34 - description so go get it
00:36 - okay so in order to make a program like
00:37 - this where you can play the lottery
00:39 - first of course we need to randomly
00:40 - create the winning lottery numbers
00:42 - for this particular lottery we are going
00:43 - to use six numbers and each of those
00:45 - numbers can range
00:46 - from 1 to 49 and we'll also have a rule
00:49 - that those numbers can't repeat the
00:50 - winning lottery numbers have to all be
00:52 - different from each other first we just
00:53 - need a list of integers
00:55 - so we can hold the winning lottery
00:57 - numbers that we randomly create so list
00:59 - integer
01:00 - winning numbers equals new
01:03 - arraylist we're in eclipse so we can do
01:06 - ctrl shift o
01:06 - to organize our imports we want to
01:08 - import java.util.list
01:10 - and java.util.array to generate random
01:13 - numbers in java it's probably easiest to
01:14 - use the
01:15 - random class not just any class the
01:18 - random class
01:19 - not some random class the random class
01:21 - we'll say random random
01:23 - equals new random again we'll organize
01:26 - imports and we import java.util.random
01:29 - so now we want to create
01:30 - six random numbers between 1 and 49 but
01:33 - they also have to be
01:34 - different because we want to generate
01:36 - six random lottery numbers we can start
01:37 - with a for loop
01:39 - that begins with into i equals zero
01:42 - i less than six because we want six
01:44 - lottery numbers i plus plus so we'll go
01:46 - through this loop exactly six times
01:48 - so in here we want to create a random
01:50 - number between 1 and 49
01:52 - six times first let's just create an int
01:54 - variable uh
01:55 - called winning number so that we can put
01:57 - our winning number into it now to
01:59 - generate a new random number we'll use
02:01 - random dot next int and we'll pass in
02:04 - the number
02:05 - of 49 and then we're going to add one to
02:08 - it
02:08 - so how this next int method works is it
02:10 - takes the number that you passed in and
02:12 - then it generates for you
02:14 - a random integer between zero and
02:17 - one less than the number that you've
02:19 - entered so when we give it
02:20 - random.nextint random.nextint49 it's
02:22 - going to give us a random end
02:23 - between 0 and 48. and since what we want
02:26 - is a random int between 1 and 49
02:28 - all we have to do is add 1 to it and
02:30 - then poof a random number between 1 and
02:32 - 49. but now that we have our new random
02:34 - winning number we have to check whether
02:36 - this winning number
02:37 - is already in this winding numbers list
02:39 - and if it is
02:40 - we have to try again so we get a
02:41 - different one and to do that is simple
02:43 - we can just say if
02:45 - not winning numbers dot
02:48 - contains and then pass in the winning
02:50 - number
02:51 - that we just generated this contains
02:53 - method is a really useful helper method
02:55 - on all of the java collections classes
02:57 - and list is the java collection that
02:58 - we're using here and you can just pass
03:00 - in a value and it will tell you whether
03:01 - that value is in the list
03:03 - so here we just want to say if this
03:04 - value is not in the list
03:06 - then great it's not a duplicate and we
03:08 - can add it to the list of winning
03:09 - numbers and to add to the list of
03:11 - winning numbers
03:11 - is also easy we can just say winning
03:13 - numbers dot
03:15 - add winning number but the thing is if
03:17 - that winning number is already on the
03:18 - list of winning numbers we don't want to
03:20 - add it to the list
03:21 - and we want to make sure to try again so
03:23 - to implement that logic we're actually
03:24 - going to put all of this code right here
03:27 - inside a wild true loop just say while
03:30 - true
03:31 - will do all of this so right now this is
03:33 - going to just loop infinitely so we have
03:35 - to have a way to break out of this loop
03:37 - when we do successfully add a new
03:38 - winning number and to do that all we
03:40 - have to do is literally write
03:41 - a break statement after we add our
03:43 - number so let's talk about exactly how
03:45 - this is working we're going to go
03:46 - through this for loop
03:47 - six times right and each of those six
03:49 - times we're going to go through this
03:50 - while true loop where we generate a new
03:53 - number
03:54 - and then make sure it's not already in
03:55 - the list and if it isn't we add it but
03:57 - if it is already in the list it's going
03:58 - to skip this break statement
04:00 - and restart at the top of this while
04:01 - loop and try to make a new winning
04:03 - number again
04:03 - so when we finally get completely out of
04:05 - this and passed our for loop we should
04:07 - have exactly
04:08 - six random numbers between 1 and 49
04:11 - that are different from each other let's
04:13 - actually go ahead and give that a test
04:15 - so we can see if we're generating the
04:17 - winning numbers correctly so all we need
04:19 - to do is actually pass in
04:20 - winning numbers to system.out.printline
04:24 - okay let's go ahead and run that all
04:26 - right so we got 18
04:27 - 5 29 23 33 and 30. so that's good that's
04:30 - six numbers
04:31 - they're between 1 and 49 and they are
04:32 - all different let's run a few more times
04:34 - to make sure we get that every time
04:37 - that all looks good all right perfect we
04:39 - have generated our winning lottery
04:40 - numbers
04:41 - now that we have the winning lottery
04:42 - numbers we need to work on the code to
04:44 - allow the user to add in
04:46 - their six lottery number picks let's
04:48 - just start with a quick
04:49 - print statement to the user please enter
04:52 - your six numbers between 1
04:56 - and 49 inclusive to get the user input
05:00 - as you may have guessed we're going to
05:01 - use the scanner class so we'll create a
05:03 - new scanner
05:03 - scanner scanner equals new scanner
05:07 - system in to get keyboard input from the
05:10 - user
05:10 - again we'll organize imports and when
05:13 - java.util.scanner since we want to get
05:14 - exactly six number picks from the user
05:16 - we can use this exact same uh for loop
05:19 - structure here
05:20 - as we did above so we can just copy and
05:22 - paste that this for loop will again go
05:23 - through exactly six times so
05:25 - that's what we need for each iteration
05:26 - through the for loop we want to
05:28 - collect a number from the user what you
05:30 - can use is the scanner classes
05:32 - next int method but what i actually like
05:34 - to do is create a string
05:36 - let's call it number string and instead
05:38 - of using next int i like to use scanner
05:40 - dot
05:41 - next line of course that gets just any
05:44 - string from the user it doesn't have to
05:45 - just be a number but i tend to like to
05:47 - use next
05:47 - line instead of next in to next float
05:49 - and those other methods on scanner
05:51 - just because those other methods tend to
05:53 - act really weird because they don't take
05:55 - the entire line that you input they stop
05:57 - when it finds one number and then it
05:58 - could act really strangely trying to
06:00 - interpret the rest of the line later
06:02 - whereas if you use next line
06:03 - it takes the entire thing that the user
06:05 - input before they hit
06:07 - enter and then we can just take what
06:08 - they input as a string and parse it into
06:10 - a number
06:11 - and here's how we do that we create a
06:13 - new int we'll just call it
06:14 - number why not equals integer dot
06:18 - parse int and then we pass in our number
06:20 - string this integer.parseint method
06:23 - takes a string that you pass in and
06:24 - converts it to an int
06:26 - so now that we have the user's lottery
06:28 - pick we actually need to add it to a
06:29 - list of guesses that the user has input
06:31 - which we do need to create we haven't
06:32 - created that yet let's go ahead and
06:33 - create a new
06:34 - list of integers again we'll call it
06:37 - guest
06:38 - numbers equals new array
06:41 - list so then down here all we have to do
06:44 - is take
06:44 - guest numbers and then add
06:48 - the number so pretty easy right and it
06:50 - seems like that should work however
06:51 - there's a couple of things that we need
06:53 - to account for here
06:54 - one is that we want the lottery numbers
06:55 - to be between 1 and 49
06:58 - and here the user could input whatever
06:59 - the heck number that they want they
07:00 - could input 10 thousand they could input
07:01 - negative
07:02 - six and neither of those makes sense so
07:04 - we'd actually want them to retry if they
07:05 - put in some number
07:06 - that isn't between one and forty nine
07:08 - and also what else could happen is they
07:10 - could enter something that isn't even a
07:11 - number at all
07:12 - if they enter in potato here as their
07:14 - number string and we try to parse an int
07:16 - from a potato we're going to run into an
07:18 - exception that we have to account for or
07:19 - the program will blow up so what we want
07:21 - to do if that happens is catch the
07:22 - exception and allow the user to retry
07:24 - and enter another number
07:25 - we'll do one thing at a time so first
07:27 - we're just going to validate that if
07:28 - it's a number as long as there's no
07:29 - exceptions
07:30 - that that number is indeed between 1 and
07:32 - 49.
07:33 - but if it's not in order to allow the
07:35 - user to retry we are going to have to do
07:37 - this again
07:37 - inside a while true loop so while true
07:41 - indent all of this stuff and end our
07:43 - loop after that so all of this stuff in
07:45 - here is now in a while true loop
07:47 - so what we can do right after we get
07:48 - this int number we can just check to
07:50 - make sure that
07:51 - if that number is greater than or equal
07:54 - to 1
07:55 - and that number is less than or equal to
07:59 - 49 then we know we are fine to add
08:02 - that number to our list of guest numbers
08:05 - otherwise we'll go back to the start of
08:07 - this while true loop and the user will
08:08 - have to input another number
08:10 - so if that's the case and the user
08:11 - entered a valid number we can break
08:14 - out of our while true loop and go back
08:16 - to the next iteration of our for loop
08:17 - until they go through six times and
08:19 - guess six numbers
08:20 - but we also want to add an else so that
08:22 - if the number that they enter
08:24 - is not between 1 and 49 if it's an
08:26 - invalid number then we want to print out
08:28 - something to let the user know
08:29 - a number the number that they entered is
08:32 - not
08:33 - between 1 and 49.
08:36 - please try again so now what this will
08:38 - do is if the number that the user
08:39 - entered is between 1 and 49
08:41 - it adds that number to the list and
08:43 - breaks out of this loop and gets the
08:44 - next number until it gets all
08:45 - 6 that we need otherwise if it's not
08:48 - between 1 and 49 we print out a helpful
08:50 - message to the user
08:51 - and we'll restart our while true loop
08:53 - which allows the user to enter that
08:54 - number again they can try again
08:56 - so since we've written a bit of code
08:57 - there let's go ahead and run it and test
09:00 - that our logic is working so it does say
09:01 - please enter your six numbers between 1
09:03 - and 49 inclusive
09:04 - so let's go ahead and enter like the
09:06 - number one okay one is valid so that
09:08 - works let's
09:09 - try um 50. 50 is not between 1 and 49.
09:12 - okay so it does say 50 is not between 1
09:13 - and 49
09:14 - please try again and then let's also try
09:16 - 0 and we get the same message
09:18 - perfect now just to test our edge cases
09:20 - let's try 49 and that should be allowed
09:22 - and it is so it looks like that logic is
09:25 - working one thing i would like to do is
09:26 - each time we successfully collect a
09:28 - number from the user is perhaps like
09:29 - return the current
09:30 - list of numbers that they have input and
09:32 - we can do that right here at the
09:33 - beginning of our for loop we can do
09:34 - another system
09:35 - out statement your current numbers
09:39 - are and then we can just print out guest
09:42 - numbers and then prompt them to enter
09:44 - another number please
09:46 - enter a number and then just a reminder
09:49 - that it has to be
09:50 - between 1 and 49. okay let's run a quick
09:52 - test and make sure that works
09:53 - so we're still printing out our winning
09:55 - lottery numbers here for debugging
09:56 - purposes
09:57 - but it allows us to cheat so before
09:58 - we're done we're going to have to take
09:59 - that out
10:00 - anyway so our current numbers are empty
10:02 - we don't have any current numbers so we
10:03 - can add
10:04 - let's say 15 to our list okay and it
10:06 - does say your current numbers are
10:07 - 15. we can add another number let's say
10:10 - we make a mistake and we say 50 well
10:12 - that's out of the range between 149
10:14 - and it does say that then we should get
10:16 - the same thing if we try to enter
10:17 - zero and we do and then let's go ahead
10:19 - and try the number
10:20 - one all right that works and it shows
10:22 - that our current numbers are 15
10:23 - and one and then last but not least
10:25 - let's try 49
10:26 - and that works as well however what
10:29 - doesn't work is we can still go in and
10:30 - enter
10:31 - a potato and our program explodes with a
10:34 - number format exception
10:36 - and it happens right here on this line
10:38 - when it tries to
10:40 - parse an int from a potato that's
10:42 - because this parse int method needs
10:44 - some kind of string input that actually
10:46 - makes sense as a number
10:47 - to create an int and if you give it
10:49 - potato or some other garbage
10:51 - it doesn't know what the heck to do and
10:52 - ends up throwing a number format
10:54 - exception
10:54 - so we have to do here is catch that
10:56 - exception and allow the user to try
10:58 - again
10:58 - to do that right inside this while true
11:00 - loop we can create our
11:02 - try block and we'll put everything
11:04 - that's currently in here
11:05 - inside the try and then after that try
11:07 - we'll create our catch block where we'll
11:09 - catch
11:10 - a number format exception call it nfe
11:13 - in this cash box there's not a whole lot
11:14 - that we actually have to do except for
11:16 - just print out a message to the user
11:17 - that hey you gave me garbage and you
11:19 - have to try again
11:20 - so we can just say sis out dude
11:24 - that's not even a number please try
11:26 - again
11:27 - so let's give that a quick test as well
11:29 - let's enter some garbage like potato
11:32 - dude that's not even a number please try
11:34 - again and then make sure it recovers
11:35 - from that nicely and we can enter five
11:37 - and it adds it to the list so our
11:39 - exception handling is working
11:40 - exceptionally and if you'd like a full
11:42 - video going through exception handling
11:44 - in java
11:44 - with try catch finally catching multiple
11:47 - types of exceptions
11:48 - check out this video here i did on
11:49 - exception handling anyway now we have
11:51 - this big giant for loop
11:52 - and after that for loop completes we
11:55 - should have all
11:56 - six lottery number picks from the user
11:58 - and we have already gotten the six
11:59 - winning lottery numbers that we
12:01 - generated
12:02 - above now all we have to do is compare
12:04 - those lists of numbers
12:05 - and see if the user won so first let's
12:06 - just print out what the winning lottery
12:08 - numbers were
12:09 - the winning numbers were
12:12 - let me just put in winning numbers and
12:14 - then we'll print out
12:16 - the numbers that the user input so that
12:18 - just be your numbers
12:19 - are guest numbers
12:23 - now what we'd like to do is to get a
12:25 - list of all the numbers that the user
12:26 - guessed
12:27 - that were winning numbers so really what
12:29 - we want to get is
12:30 - all the elements of the guest numbers
12:32 - list that
12:33 - are also present in the winning numbers
12:36 - list
12:37 - and you might think we're about to have
12:38 - to do something really complicated with
12:39 - like a loop to get that to work
12:41 - but the list class actually offers a
12:42 - really cool helper method for us to be
12:44 - able to do that
12:45 - so what we can do is say guest numbers
12:48 - dot retain all and then pass
12:51 - in the winning numbers so what this will
12:53 - do is take our guest numbers list
12:55 - and remove all the elements of this list
12:58 - that are not
12:59 - in the winning numbers list and so what
13:01 - you'll be left with is everything in the
13:02 - guest numbers list that was a winning
13:04 - number
13:04 - so that'll leave essentially the matched
13:06 - numbers the numbers that the user
13:07 - guessed
13:08 - that we're winning numbers so we can
13:09 - print that out too
13:11 - your matched numbers
13:14 - are and it's still in this guest numbers
13:17 - variable
13:18 - and then we can finally do the big check
13:20 - did the user guess
13:22 - all of the winning lottery numbers and
13:23 - we could do something really complicated
13:25 - for that too but
13:26 - let's just keep it simple we can do that
13:27 - really easily here with another method
13:29 - that is offered by java lists so we just
13:31 - say if
13:32 - our guest numbers list contains all
13:35 - of the elements of the winning numbers
13:38 - list so we're going to be using this
13:39 - contains all method this will return
13:41 - true if this guess numbers list
13:43 - contains all of the elements that are in
13:45 - the winning numbers list
13:46 - and that'll only be true here if the
13:48 - user guessed all the numbers exactly
13:50 - correctly and if they did that is
13:52 - amazing so we can print out
13:54 - holy crap you actually won
13:57 - how did you do that and then otherwise
13:59 - if the user didn't guess all the numbers
14:01 - correctly which they
14:02 - probably didn't you just print out sorry
14:05 - you lost
14:06 - not surprising all right let's go ahead
14:08 - and run this and give it a test
14:10 - okay so let's enter some numbers so we
14:11 - got 5 13
14:14 - 45 49 16
14:18 - and 3. so we printed out the winning
14:20 - numbers printed out my numbers
14:22 - and then i printed out the match numbers
14:23 - which this is the result of that retain
14:25 - all it took the list that i guessed and
14:27 - took out every element that
14:28 - wasn't a winning number so all that was
14:30 - left was five so five was the only
14:32 - number that i guessed correctly and then
14:34 - of course it printed out sorry you lost
14:36 - so now let's run it again and make sure
14:37 - that if we win it actually tells us that
14:40 - so for now we're cheating and we have
14:41 - all the winning lottery numbers so let's
14:42 - just start typing them in
14:43 - 28 15 19 48
14:47 - 42 and 18. and
14:51 - holy crap we actually won how did you do
14:53 - that we cheated and since the numbers
14:55 - that we guessed exactly match the
14:56 - winning lottery numbers the result of
14:57 - that retain all call
14:59 - didn't remove anything all the numbers
15:00 - existed in the list because we guessed
15:02 - the right lottery numbers
15:03 - exactly now we're not done quite yet as
15:05 - always for all the programs that we use
15:07 - the scanner for
15:08 - we need to remember to close our scanner
15:11 - that's what this yellow squiggly line is
15:13 - here in eclipse it's telling us
15:14 - hey you might have a resource leak here
15:16 - because you aren't closing your scanner
15:17 - so to fix that we will just call scanner
15:19 - dot close closing your scanner just
15:22 - makes you feel all
15:23 - warm and cozy right so in order to make
15:25 - this uh not
15:26 - stupid we are going to have to take out
15:29 - where we print
15:30 - the winning numbers before the player
15:31 - puts in their guesses so to do that we
15:32 - can just comment it out that way we can
15:34 - just come back in later and uncommented
15:36 - if we have to do some kind of
15:37 - enhancement or something we have an easy
15:38 - way to debug
15:39 - so now let's run it and make sure it
15:41 - still works 5
15:42 - 13 49 18
15:47 - 8 and 6. and this time i matched
15:50 - zero of the winning lottery numbers but
15:52 - everything is still working so you might
15:54 - be wondering what exactly are the odds
15:55 - of guessing all six of these numbers
15:57 - exactly right what are the odds of
15:59 - winning the lottery here so it turns out
16:01 - the odds are 1
16:02 - in 49 times 48
16:06 - times 47 times 46 times 45
16:10 - times 44. and that turns out to be 10
16:12 - billion 68 million 347 thousand 520. so
16:16 - now technically this would give you the
16:17 - odds of getting all the numbers
16:19 - exactly right and in the right order but
16:21 - we don't need our number picks to be in
16:22 - the right order we can match the numbers
16:24 - however we want the order doesn't matter
16:26 - but the number of ways that these six
16:28 - numbers can be ordered is actually
16:30 - six factorial which of course is just
16:32 - six times five
16:33 - times four times three times two
16:36 - times one which turns out to be seven
16:38 - hundred and twenty so to get our true
16:40 - odds here with the order not mattering
16:41 - we can take our
16:43 - number here and divide it by seven
16:44 - hundred and twenty so ten billion sixty
16:46 - eight million three hundred forty seven
16:47 - thousand five hundred and twenty
16:49 - divided by 720 turns out to be
16:52 - this 13 million 983
16:55 - 8116 so your odds of getting all of
16:58 - these numbers
16:58 - exactly right in this program are one in
17:01 - 13983
17:03 - 800 8116 so not great i looked up the
17:06 - odds of some other stuff in comparison
17:08 - and it turns out
17:09 - your odds of getting hit by falling
17:11 - airplane parts
17:12 - are about 1 in 10 million so your odds
17:14 - of getting all of these lottery numbers
17:16 - exactly right
17:17 - are about 30 percent worse than your
17:19 - odds of getting hit by falling airplane
17:21 - parts
17:22 - and even these odds are way better than
17:23 - the odds of like the real lottery in the
17:25 - u.s
17:26 - those odds are something like 1 in 300
17:28 - million where you probably have better
17:30 - odds of getting
17:31 - struck by lightning a hundred times in a
17:33 - row when you're
17:34 - a thousand miles under the ground
17:35 - wearing a rubber suit
17:37 - if one of you ends up writing this
17:38 - program and guessing all of the numbers
17:40 - exactly correctly
17:41 - i would love to know in the comments if
17:43 - you enjoyed this video or learned
17:44 - something please let me know by giving
17:45 - the video a like and hit the subscribe
17:46 - button if you'd like to see more java
17:48 - videos and tutorials like this in the
17:49 - future and sincere thanks for taking the
17:51 - time to like and subscribe it's the only
17:53 - way these videos get out to help more
17:54 - people see you next time

Cleaned transcript:

in this video we are going to write a complete program from scratch to play the lottery in java we're going to randomly generate six winning lottery numbers and then allow the user to input their six lottery number picks and then print out which of the users numbers match the winning lottery numbers and tell the user whether they've won or not we're also going to go over your odds of winning this lottery if you're new to this channel my name is john and i make a java tutorial video every single week either a video of a java concept or a full tutorial where we walk through creating a complete java program from scratch like this one so be sure to leave a like and hit the subscribe button so you don't miss the video every week and as always the full source for this video is available in a link down in the description so go get it okay so in order to make a program like this where you can play the lottery first of course we need to randomly create the winning lottery numbers for this particular lottery we are going to use six numbers and each of those numbers can range from 1 to 49 and we'll also have a rule that those numbers can't repeat the winning lottery numbers have to all be different from each other first we just need a list of integers so we can hold the winning lottery numbers that we randomly create so list integer winning numbers equals new arraylist we're in eclipse so we can do ctrl shift o to organize our imports we want to import java.util.list and java.util.array to generate random numbers in java it's probably easiest to use the random class not just any class the random class not some random class the random class we'll say random random equals new random again we'll organize imports and we import java.util.random so now we want to create six random numbers between 1 and 49 but they also have to be different because we want to generate six random lottery numbers we can start with a for loop that begins with into i equals zero i less than six because we want six lottery numbers i plus plus so we'll go through this loop exactly six times so in here we want to create a random number between 1 and 49 six times first let's just create an int variable uh called winning number so that we can put our winning number into it now to generate a new random number we'll use random dot next int and we'll pass in the number of 49 and then we're going to add one to it so how this next int method works is it takes the number that you passed in and then it generates for you a random integer between zero and one less than the number that you've entered so when we give it random.nextint random.nextint49 it's going to give us a random end between 0 and 48. and since what we want is a random int between 1 and 49 all we have to do is add 1 to it and then poof a random number between 1 and 49. but now that we have our new random winning number we have to check whether this winning number is already in this winding numbers list and if it is we have to try again so we get a different one and to do that is simple we can just say if not winning numbers dot contains and then pass in the winning number that we just generated this contains method is a really useful helper method on all of the java collections classes and list is the java collection that we're using here and you can just pass in a value and it will tell you whether that value is in the list so here we just want to say if this value is not in the list then great it's not a duplicate and we can add it to the list of winning numbers and to add to the list of winning numbers is also easy we can just say winning numbers dot add winning number but the thing is if that winning number is already on the list of winning numbers we don't want to add it to the list and we want to make sure to try again so to implement that logic we're actually going to put all of this code right here inside a wild true loop just say while true will do all of this so right now this is going to just loop infinitely so we have to have a way to break out of this loop when we do successfully add a new winning number and to do that all we have to do is literally write a break statement after we add our number so let's talk about exactly how this is working we're going to go through this for loop six times right and each of those six times we're going to go through this while true loop where we generate a new number and then make sure it's not already in the list and if it isn't we add it but if it is already in the list it's going to skip this break statement and restart at the top of this while loop and try to make a new winning number again so when we finally get completely out of this and passed our for loop we should have exactly six random numbers between 1 and 49 that are different from each other let's actually go ahead and give that a test so we can see if we're generating the winning numbers correctly so all we need to do is actually pass in winning numbers to system.out.printline okay let's go ahead and run that all right so we got 18 5 29 23 33 and 30. so that's good that's six numbers they're between 1 and 49 and they are all different let's run a few more times to make sure we get that every time that all looks good all right perfect we have generated our winning lottery numbers now that we have the winning lottery numbers we need to work on the code to allow the user to add in their six lottery number picks let's just start with a quick print statement to the user please enter your six numbers between 1 and 49 inclusive to get the user input as you may have guessed we're going to use the scanner class so we'll create a new scanner scanner scanner equals new scanner system in to get keyboard input from the user again we'll organize imports and when java.util.scanner since we want to get exactly six number picks from the user we can use this exact same uh for loop structure here as we did above so we can just copy and paste that this for loop will again go through exactly six times so that's what we need for each iteration through the for loop we want to collect a number from the user what you can use is the scanner classes next int method but what i actually like to do is create a string let's call it number string and instead of using next int i like to use scanner dot next line of course that gets just any string from the user it doesn't have to just be a number but i tend to like to use next line instead of next in to next float and those other methods on scanner just because those other methods tend to act really weird because they don't take the entire line that you input they stop when it finds one number and then it could act really strangely trying to interpret the rest of the line later whereas if you use next line it takes the entire thing that the user input before they hit enter and then we can just take what they input as a string and parse it into a number and here's how we do that we create a new int we'll just call it number why not equals integer dot parse int and then we pass in our number string this integer.parseint method takes a string that you pass in and converts it to an int so now that we have the user's lottery pick we actually need to add it to a list of guesses that the user has input which we do need to create we haven't created that yet let's go ahead and create a new list of integers again we'll call it guest numbers equals new array list so then down here all we have to do is take guest numbers and then add the number so pretty easy right and it seems like that should work however there's a couple of things that we need to account for here one is that we want the lottery numbers to be between 1 and 49 and here the user could input whatever the heck number that they want they could input 10 thousand they could input negative six and neither of those makes sense so we'd actually want them to retry if they put in some number that isn't between one and forty nine and also what else could happen is they could enter something that isn't even a number at all if they enter in potato here as their number string and we try to parse an int from a potato we're going to run into an exception that we have to account for or the program will blow up so what we want to do if that happens is catch the exception and allow the user to retry and enter another number we'll do one thing at a time so first we're just going to validate that if it's a number as long as there's no exceptions that that number is indeed between 1 and 49. but if it's not in order to allow the user to retry we are going to have to do this again inside a while true loop so while true indent all of this stuff and end our loop after that so all of this stuff in here is now in a while true loop so what we can do right after we get this int number we can just check to make sure that if that number is greater than or equal to 1 and that number is less than or equal to 49 then we know we are fine to add that number to our list of guest numbers otherwise we'll go back to the start of this while true loop and the user will have to input another number so if that's the case and the user entered a valid number we can break out of our while true loop and go back to the next iteration of our for loop until they go through six times and guess six numbers but we also want to add an else so that if the number that they enter is not between 1 and 49 if it's an invalid number then we want to print out something to let the user know a number the number that they entered is not between 1 and 49. please try again so now what this will do is if the number that the user entered is between 1 and 49 it adds that number to the list and breaks out of this loop and gets the next number until it gets all 6 that we need otherwise if it's not between 1 and 49 we print out a helpful message to the user and we'll restart our while true loop which allows the user to enter that number again they can try again so since we've written a bit of code there let's go ahead and run it and test that our logic is working so it does say please enter your six numbers between 1 and 49 inclusive so let's go ahead and enter like the number one okay one is valid so that works let's try um 50. 50 is not between 1 and 49. okay so it does say 50 is not between 1 and 49 please try again and then let's also try 0 and we get the same message perfect now just to test our edge cases let's try 49 and that should be allowed and it is so it looks like that logic is working one thing i would like to do is each time we successfully collect a number from the user is perhaps like return the current list of numbers that they have input and we can do that right here at the beginning of our for loop we can do another system out statement your current numbers are and then we can just print out guest numbers and then prompt them to enter another number please enter a number and then just a reminder that it has to be between 1 and 49. okay let's run a quick test and make sure that works so we're still printing out our winning lottery numbers here for debugging purposes but it allows us to cheat so before we're done we're going to have to take that out anyway so our current numbers are empty we don't have any current numbers so we can add let's say 15 to our list okay and it does say your current numbers are 15. we can add another number let's say we make a mistake and we say 50 well that's out of the range between 149 and it does say that then we should get the same thing if we try to enter zero and we do and then let's go ahead and try the number one all right that works and it shows that our current numbers are 15 and one and then last but not least let's try 49 and that works as well however what doesn't work is we can still go in and enter a potato and our program explodes with a number format exception and it happens right here on this line when it tries to parse an int from a potato that's because this parse int method needs some kind of string input that actually makes sense as a number to create an int and if you give it potato or some other garbage it doesn't know what the heck to do and ends up throwing a number format exception so we have to do here is catch that exception and allow the user to try again to do that right inside this while true loop we can create our try block and we'll put everything that's currently in here inside the try and then after that try we'll create our catch block where we'll catch a number format exception call it nfe in this cash box there's not a whole lot that we actually have to do except for just print out a message to the user that hey you gave me garbage and you have to try again so we can just say sis out dude that's not even a number please try again so let's give that a quick test as well let's enter some garbage like potato dude that's not even a number please try again and then make sure it recovers from that nicely and we can enter five and it adds it to the list so our exception handling is working exceptionally and if you'd like a full video going through exception handling in java with try catch finally catching multiple types of exceptions check out this video here i did on exception handling anyway now we have this big giant for loop and after that for loop completes we should have all six lottery number picks from the user and we have already gotten the six winning lottery numbers that we generated above now all we have to do is compare those lists of numbers and see if the user won so first let's just print out what the winning lottery numbers were the winning numbers were let me just put in winning numbers and then we'll print out the numbers that the user input so that just be your numbers are guest numbers now what we'd like to do is to get a list of all the numbers that the user guessed that were winning numbers so really what we want to get is all the elements of the guest numbers list that are also present in the winning numbers list and you might think we're about to have to do something really complicated with like a loop to get that to work but the list class actually offers a really cool helper method for us to be able to do that so what we can do is say guest numbers dot retain all and then pass in the winning numbers so what this will do is take our guest numbers list and remove all the elements of this list that are not in the winning numbers list and so what you'll be left with is everything in the guest numbers list that was a winning number so that'll leave essentially the matched numbers the numbers that the user guessed that we're winning numbers so we can print that out too your matched numbers are and it's still in this guest numbers variable and then we can finally do the big check did the user guess all of the winning lottery numbers and we could do something really complicated for that too but let's just keep it simple we can do that really easily here with another method that is offered by java lists so we just say if our guest numbers list contains all of the elements of the winning numbers list so we're going to be using this contains all method this will return true if this guess numbers list contains all of the elements that are in the winning numbers list and that'll only be true here if the user guessed all the numbers exactly correctly and if they did that is amazing so we can print out holy crap you actually won how did you do that and then otherwise if the user didn't guess all the numbers correctly which they probably didn't you just print out sorry you lost not surprising all right let's go ahead and run this and give it a test okay so let's enter some numbers so we got 5 13 45 49 16 and 3. so we printed out the winning numbers printed out my numbers and then i printed out the match numbers which this is the result of that retain all it took the list that i guessed and took out every element that wasn't a winning number so all that was left was five so five was the only number that i guessed correctly and then of course it printed out sorry you lost so now let's run it again and make sure that if we win it actually tells us that so for now we're cheating and we have all the winning lottery numbers so let's just start typing them in 28 15 19 48 42 and 18. and holy crap we actually won how did you do that we cheated and since the numbers that we guessed exactly match the winning lottery numbers the result of that retain all call didn't remove anything all the numbers existed in the list because we guessed the right lottery numbers exactly now we're not done quite yet as always for all the programs that we use the scanner for we need to remember to close our scanner that's what this yellow squiggly line is here in eclipse it's telling us hey you might have a resource leak here because you aren't closing your scanner so to fix that we will just call scanner dot close closing your scanner just makes you feel all warm and cozy right so in order to make this uh not stupid we are going to have to take out where we print the winning numbers before the player puts in their guesses so to do that we can just comment it out that way we can just come back in later and uncommented if we have to do some kind of enhancement or something we have an easy way to debug so now let's run it and make sure it still works 5 13 49 18 8 and 6. and this time i matched zero of the winning lottery numbers but everything is still working so you might be wondering what exactly are the odds of guessing all six of these numbers exactly right what are the odds of winning the lottery here so it turns out the odds are 1 in 49 times 48 times 47 times 46 times 45 times 44. and that turns out to be 10 billion 68 million 347 thousand 520. so now technically this would give you the odds of getting all the numbers exactly right and in the right order but we don't need our number picks to be in the right order we can match the numbers however we want the order doesn't matter but the number of ways that these six numbers can be ordered is actually six factorial which of course is just six times five times four times three times two times one which turns out to be seven hundred and twenty so to get our true odds here with the order not mattering we can take our number here and divide it by seven hundred and twenty so ten billion sixty eight million three hundred forty seven thousand five hundred and twenty divided by 720 turns out to be this 13 million 983 8116 so your odds of getting all of these numbers exactly right in this program are one in 13983 800 8116 so not great i looked up the odds of some other stuff in comparison and it turns out your odds of getting hit by falling airplane parts are about 1 in 10 million so your odds of getting all of these lottery numbers exactly right are about 30 percent worse than your odds of getting hit by falling airplane parts and even these odds are way better than the odds of like the real lottery in the u.s those odds are something like 1 in 300 million where you probably have better odds of getting struck by lightning a hundred times in a row when you're a thousand miles under the ground wearing a rubber suit if one of you ends up writing this program and guessing all of the numbers exactly correctly i would love to know in the comments if you enjoyed this video or learned something please let me know by giving the video a like and hit the subscribe button if you'd like to see more java videos and tutorials like this in the future and sincere thanks for taking the time to like and subscribe it's the only way these videos get out to help more people see you next time
