With timestamps:

00:00 - when you got started programming in java
00:02 - i bet somebody just
00:03 - told you that you had to have this
00:04 - public static
00:06 - void main string args and in there is
00:08 - where you write your code
00:10 - then i bet you probably thought oh wait
00:12 - what does that mean wait
00:13 - wait what's with public static void main
00:15 - string
00:16 - what does all that mean and they
00:17 - probably told you shut up nope don't ask
00:19 - no shut up stop no just program just do
00:23 - it
00:24 - write it put that in there that's what
00:27 - you got to do
00:28 - and you probably went whoa okay all
00:29 - right i'll do it but that question is
00:30 - probably still going on your head what
00:32 - does all of that
00:33 - actually mean so i promise that in just
00:35 - a few minutes you're gonna know what
00:36 - each individual piece of that means what
00:38 - it does and what it's used for
00:41 - so let's get to it so i think the best
00:44 - way to
00:45 - think about what is happening here is
00:47 - that the jre the java runtime
00:49 - environment on your computer
00:51 - has to call your program's main method
00:54 - to trigger the program to run so for
00:56 - example i have a class here called main
00:57 - method explanation that has a main
00:59 - method
01:00 - and what the jre is actually going to do
01:02 - is call this main method
01:04 - uh something like this so with the main
01:07 - method
01:08 - explanation dot
01:11 - main and it's going to pass in
01:14 - arguments and all the pieces of this
01:16 - public static void main string args
01:19 - uh method signature are designed to make
01:22 - that call work
01:23 - so first things first public why is it
01:26 - public well it's public
01:27 - because this method has to be callable
01:31 - by something outside of this class if
01:33 - this method was something else like
01:35 - private or protected the jre wouldn't
01:38 - have the access to call it so the method
01:40 - has to be public this was private
01:42 - instead
01:43 - only this class would be able to call it
01:46 - and so
01:46 - it's it's kind of like saying hey i'm a
01:48 - great program and the jre goes great how
01:50 - can i run you he's like yeah he can't he
01:52 - can't
01:52 - only i can run me and that's pretty
01:54 - useless program
01:56 - so next why static so a static
01:59 - method is a method that can be called on
02:01 - a class without
02:02 - needing an instance of that class to run
02:05 - it against
02:06 - and that's how the jre is actually going
02:08 - to call your program it's not going to
02:11 - create an
02:11 - object of main method explanation and
02:14 - then
02:14 - run a main method on it it's just going
02:16 - to run the main method directly on the
02:18 - class
02:19 - exactly as i have it written here so
02:21 - here's what it's not going to do
02:24 - create a new variable of type main
02:26 - method
02:27 - explanation called explanation
02:31 - equals new main method explanation
02:34 - and then take explanation dot
02:37 - main it's not going to do that it's
02:39 - designed to make the call
02:41 - directly on your class like this so
02:43 - that's why it has to be static
02:45 - it's not going to be called on an
02:47 - instance of your class it's going to be
02:49 - called on your class
02:50 - so your main method has to be static now
02:52 - next is this void now
02:54 - void is actually the return type of your
02:56 - main method
02:58 - just like you have methods that return
02:59 - an int or a long or a string or whatever
03:02 - your main method just returns nothing
03:03 - it's
03:04 - void it has no need to actually return
03:06 - anything
03:07 - so when your program gets called it gets
03:09 - run and it finishes
03:12 - it doesn't have to return anything when
03:13 - this main method is done your program
03:15 - just ends
03:16 - now next why is it called main
03:20 - it just is it's just called main you
03:22 - can't call it anything else
03:23 - the jre is going to call your class dot
03:26 - main and so your main method better be
03:29 - called main
03:30 - or won't work so i know at the beginning
03:33 - i told you
03:34 - yes people told you and it's just the
03:35 - way it is in this case
03:37 - that's just the way it is that's what
03:39 - the jbm is going to call
03:40 - that's what you better name your method
03:41 - now the last part of this is probably
03:43 - the most
03:43 - interesting this string array called
03:46 - args
03:46 - and what this actually is is an array of
03:49 - strings that are arguments that can be
03:52 - passed to your program and if you've
03:53 - never used it it can actually be pretty
03:55 - cool
03:56 - now a lot of programs that you write you
03:57 - just don't care what is passed in
04:00 - in this uh array of strings arguments
04:02 - you don't need to do anything your
04:04 - program is going to do what it's going
04:05 - to do
04:05 - you don't need to give it any other
04:07 - argument at the beginning you might take
04:09 - input later or something like that but
04:10 - you don't need to when you kick off the
04:12 - program give it input you get input from
04:14 - the user later or something
04:15 - but you can do it so i'm going to show
04:17 - you a quick example of how you can
04:18 - actually take in an argument and
04:20 - use it in your program so let's say you
04:21 - just wanted to print a message from
04:23 - whoever's starting up your program and
04:24 - they can
04:25 - answer that message as the argument you
04:26 - just want to print it out so you can do
04:28 - system dot out dot print line
04:33 - args zero so that's just getting the
04:36 - zeroth
04:37 - the first element on this array
04:40 - and it's going to print it out so how do
04:43 - you pass in that argument
04:45 - now i'm going to show you a couple ways
04:46 - first is in the ide i'm using
04:48 - i'm using eclipse right here so if
04:50 - you're programming eclipse for example
04:51 - if you want to change these arguments
04:53 - you can
04:54 - right click anywhere on the class and go
04:57 - to run as and then click run
04:59 - configurations
05:00 - and then you'll see this arguments tab
05:02 - and that's where you can put in your
05:03 - arguments
05:04 - so for example we can put in chimichanga
05:09 - and apply and then we can hit run and
05:11 - what that's going to do is
05:13 - pass in as an array one element array
05:17 - um with the string chimichanga and
05:19 - that's going to be at the zeroth
05:20 - position of those args
05:22 - as you can see it prints out chimichanga
05:25 - so you can imagine what kind of things
05:26 - you can do with this you could
05:28 - let's say you want to print out
05:30 - something like x number of times
05:32 - you can give it that number in the input
05:34 - arguments there's all kinds of fancy
05:35 - stuff you could do with that
05:37 - but also if you're not running in an ide
05:38 - and you're just using a text editor or
05:40 - something you can still do this
05:42 - so here's my folder with main method
05:45 - explanation.java in it
05:46 - and i can open a powershell window here
05:49 - you can use
05:50 - command window or whatever you've got
05:51 - this is just basically a command window
05:53 - and so i can compile my program with
05:55 - java c
05:57 - and what's the name of it java c main
06:01 - method explanation dot java
06:05 - so it's compiled you can see my class
06:07 - file here and now i can run that command
06:09 - with
06:10 - java space
06:13 - main method explanation
06:17 - and then i can just put my arguments
06:19 - right after that so i can also put
06:21 - jimmy junga's
06:25 - and i can see it printed out
06:26 - chimichangas but something to note if
06:28 - you are actually
06:29 - using these arguments in your program
06:33 - you have to pass them in so for example
06:35 - here if you don't pass it in you're
06:36 - going to have problems so we could run
06:37 - that last
06:39 - command again just without that
06:42 - parameter
06:43 - and you could see oh no i got an array
06:45 - index out of bounds exception
06:47 - it was looking for something in an array
06:49 - that wasn't there and blew up so you can
06:51 - run into problems if you don't use that
06:52 - right but
06:53 - in the right hands it can offer some
06:55 - pretty cool functionality so i hope you
06:56 - learned something today hope i've
06:58 - demystified a little bit of the java
06:59 - world here today for you and
07:01 - if i did give me a thumbs up it's super
07:03 - appreciated
07:04 - if you'd like to see more videos like
07:05 - this in the future hit that subscription
07:07 - button thanks so much everybody see you
07:08 - next time

Cleaned transcript:

when you got started programming in java i bet somebody just told you that you had to have this public static void main string args and in there is where you write your code then i bet you probably thought oh wait what does that mean wait wait what's with public static void main string what does all that mean and they probably told you shut up nope don't ask no shut up stop no just program just do it write it put that in there that's what you got to do and you probably went whoa okay all right i'll do it but that question is probably still going on your head what does all of that actually mean so i promise that in just a few minutes you're gonna know what each individual piece of that means what it does and what it's used for so let's get to it so i think the best way to think about what is happening here is that the jre the java runtime environment on your computer has to call your program's main method to trigger the program to run so for example i have a class here called main method explanation that has a main method and what the jre is actually going to do is call this main method uh something like this so with the main method explanation dot main and it's going to pass in arguments and all the pieces of this public static void main string args uh method signature are designed to make that call work so first things first public why is it public well it's public because this method has to be callable by something outside of this class if this method was something else like private or protected the jre wouldn't have the access to call it so the method has to be public this was private instead only this class would be able to call it and so it's it's kind of like saying hey i'm a great program and the jre goes great how can i run you he's like yeah he can't he can't only i can run me and that's pretty useless program so next why static so a static method is a method that can be called on a class without needing an instance of that class to run it against and that's how the jre is actually going to call your program it's not going to create an object of main method explanation and then run a main method on it it's just going to run the main method directly on the class exactly as i have it written here so here's what it's not going to do create a new variable of type main method explanation called explanation equals new main method explanation and then take explanation dot main it's not going to do that it's designed to make the call directly on your class like this so that's why it has to be static it's not going to be called on an instance of your class it's going to be called on your class so your main method has to be static now next is this void now void is actually the return type of your main method just like you have methods that return an int or a long or a string or whatever your main method just returns nothing it's void it has no need to actually return anything so when your program gets called it gets run and it finishes it doesn't have to return anything when this main method is done your program just ends now next why is it called main it just is it's just called main you can't call it anything else the jre is going to call your class dot main and so your main method better be called main or won't work so i know at the beginning i told you yes people told you and it's just the way it is in this case that's just the way it is that's what the jbm is going to call that's what you better name your method now the last part of this is probably the most interesting this string array called args and what this actually is is an array of strings that are arguments that can be passed to your program and if you've never used it it can actually be pretty cool now a lot of programs that you write you just don't care what is passed in in this uh array of strings arguments you don't need to do anything your program is going to do what it's going to do you don't need to give it any other argument at the beginning you might take input later or something like that but you don't need to when you kick off the program give it input you get input from the user later or something but you can do it so i'm going to show you a quick example of how you can actually take in an argument and use it in your program so let's say you just wanted to print a message from whoever's starting up your program and they can answer that message as the argument you just want to print it out so you can do system dot out dot print line args zero so that's just getting the zeroth the first element on this array and it's going to print it out so how do you pass in that argument now i'm going to show you a couple ways first is in the ide i'm using i'm using eclipse right here so if you're programming eclipse for example if you want to change these arguments you can right click anywhere on the class and go to run as and then click run configurations and then you'll see this arguments tab and that's where you can put in your arguments so for example we can put in chimichanga and apply and then we can hit run and what that's going to do is pass in as an array one element array um with the string chimichanga and that's going to be at the zeroth position of those args as you can see it prints out chimichanga so you can imagine what kind of things you can do with this you could let's say you want to print out something like x number of times you can give it that number in the input arguments there's all kinds of fancy stuff you could do with that but also if you're not running in an ide and you're just using a text editor or something you can still do this so here's my folder with main method explanation.java in it and i can open a powershell window here you can use command window or whatever you've got this is just basically a command window and so i can compile my program with java c and what's the name of it java c main method explanation dot java so it's compiled you can see my class file here and now i can run that command with java space main method explanation and then i can just put my arguments right after that so i can also put jimmy junga's and i can see it printed out chimichangas but something to note if you are actually using these arguments in your program you have to pass them in so for example here if you don't pass it in you're going to have problems so we could run that last command again just without that parameter and you could see oh no i got an array index out of bounds exception it was looking for something in an array that wasn't there and blew up so you can run into problems if you don't use that right but in the right hands it can offer some pretty cool functionality so i hope you learned something today hope i've demystified a little bit of the java world here today for you and if i did give me a thumbs up it's super appreciated if you'd like to see more videos like this in the future hit that subscription button thanks so much everybody see you next time
