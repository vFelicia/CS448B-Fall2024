With timestamps:

00:00 - records are a relatively new addition to
00:02 - java that you can use to avoid a ton of
00:04 - boilerplate code in certain types of
00:06 - classes in this video we'll talk about
00:08 - exactly what records are how they can
00:10 - simplify your code and when and how you
00:13 - can implement them into your java
00:15 - programs my name is john and i'm a lead
00:16 - java software engineer i also have a
00:18 - full java course available and a link
00:20 - down in the description so go check it
00:21 - out to understand why records are so
00:23 - useful it helps to know what programmers
00:26 - had to do before they existed which is
00:28 - probably what you are still doing if
00:29 - you're not using records yet let's say
00:31 - you wanted to make a very simple java
00:33 - class that all it contained was a bunch
00:35 - of fields to carry data about something
00:38 - these kinds of classes are super common
00:40 - in the java world like for example if
00:42 - you had an employee class that carried
00:44 - the employee's name and their employee
00:46 - number maybe that employee info exists
00:48 - in some database and all this class has
00:50 - to do is hold that employee info and
00:53 - return it to the user so before records
00:55 - existed here's everything you had to do
00:57 - let's give it two private fields a
00:59 - string employee name and an int employee
01:03 - number let's also go ahead and make
01:05 - these final so they can't be modified
01:08 - after the employee object is created so
01:10 - because these two fields are final we
01:12 - want to be able to set them right when
01:14 - we create an employee object so we have
01:17 - to add them to a constructor so maybe
01:19 - our constructor is just public
01:21 - employee class and that takes in the
01:24 - string name and the int employee number
01:27 - as parameters then all it does is just
01:29 - set this dot name equals name and this
01:32 - dot employee number equals employee
01:35 - number then let's go ahead and generate
01:37 - some getter methods for these two fields
01:39 - so they can be accessed from outside the
01:41 - class next you also want a good tostring
01:44 - implementation that returns all the data
01:46 - in the class in a nice readable string
01:48 - format something like this next you're
01:50 - going to want to override the hashcode
01:52 - method with a good implementation as
01:54 - well now we're almost done but not yet
01:57 - you're also going to want a good equals
01:59 - method implementation to check whether
02:01 - one instance of this class is equal to
02:04 - another so now finally after all of that
02:07 - we can come back here to our main method
02:09 - and create a new employee class object
02:11 - we'll just call it employee equals new
02:14 - employee class and we pass in a name and
02:17 - employee number here in the constructor
02:19 - and there you go but that was a whole
02:21 - lot of code that's almost 50 lines of
02:23 - code for a class that does something so
02:26 - simple like hold two pieces of data but
02:29 - that's how you have to do it with a
02:30 - traditional java class now to compare
02:33 - let's show how to do the exact same
02:35 - thing but using a record we just say
02:38 - public
02:39 - record we'll call it employee record it
02:42 - has a string name and an int employee
02:46 - number open and close the curly brackets
02:49 - and
02:51 - that's it this single line of code gives
02:54 - us the equivalent of everything we just
02:56 - created in this employee class so now
02:59 - with just that we can go back here to
03:01 - our main method and create an employee
03:04 - record object in the exact same way that
03:06 - we created the employee class object so
03:09 - we'll call this employee record equals
03:11 - new employee record and pass in the name
03:14 - of kramer and kramer is employee number
03:17 - 54321 so now let's break it down a bit
03:20 - to create a record first we say public
03:22 - record instead of public class that's
03:25 - because a record is a certain special
03:27 - type of class kind of like an enum is
03:30 - also a special type of class next we
03:32 - just give it a name here we're calling
03:34 - it employee record next in parentheses
03:37 - we list out all the components that we
03:39 - want to hold inside our record in a way
03:41 - that looks a lot like the parameters to
03:43 - a method so this is just all the
03:44 - different data elements that you want to
03:46 - hold in your record so here we have a
03:48 - string name and employee number so with
03:50 - just that java gives us a whole ton of
03:53 - other stuff for free first it generates
03:55 - private fields for all the components
03:58 - that we listed here just like we did
04:00 - over here in our employee class these
04:02 - will also be generated as final fields
04:05 - by default just like we did in our class
04:07 - so that they can't be changed after an
04:09 - employee record object is created it
04:12 - also generates public getter methods for
04:14 - each of these components similar to the
04:16 - getters that we created here the only
04:18 - difference is that the getters that it
04:20 - automatically generates for a record
04:23 - don't have get in their method name they
04:25 - just have the name of that field so just
04:28 - to demonstrate that back over here in
04:30 - our main method if we wanted to print
04:32 - out this employee class object's
04:36 - name we would just call employee.getname
04:39 - but to do the exact same thing with our
04:42 - employee record object we would just
04:44 - have to call employee record dot
04:46 - name without the get but if we go ahead
04:49 - and run our program we can see that the
04:51 - functionality is the same next it will
04:53 - also generate for you a certain type of
04:56 - constructor now you might know that when
04:58 - you create a normal java class what it
05:00 - automatically creates for you behind the
05:02 - scenes even if you don't make any
05:04 - constructor at all is a no args
05:07 - constructor like this that doesn't take
05:09 - any parameters when you create a record
05:12 - however it works a bit differently
05:14 - instead what it creates is a constructor
05:16 - like this one that takes in as
05:19 - parameters all of the different
05:21 - components that you listed up here
05:24 - in the record declaration then it sets
05:27 - all of that records fields with the
05:29 - values in those parameters just like we
05:31 - did over here in our employee class
05:34 - constructor that we made this type of
05:36 - constructor that is automatically
05:37 - generated when you create a record is
05:39 - known as a canonical constructor even
05:42 - though we didn't explicitly create any
05:44 - constructor over here in our record we
05:46 - were still in our main class able to
05:49 - call a new constructor and pass in
05:52 - our two component values and that's
05:54 - because that constructor was
05:55 - automatically generated behind the
05:56 - scenes there's also some really cool
05:58 - things that you can do with constructors
06:00 - only in records that you can't do in any
06:03 - other type of java class that we'll talk
06:04 - about in just a little bit finally it'll
06:07 - also automatically generate
06:08 - implementations of the tostring equals
06:12 - and hash code methods very similar to
06:14 - the ones that we created over here in
06:17 - our class so the tostring method will
06:19 - give you the name of the record class
06:21 - and then the name and value of all of
06:23 - its components and we can actually test
06:25 - out that automatically generated
06:26 - tostring method just by passing in the
06:30 - actual object to the
06:32 - system.out.printline method because when
06:34 - you pass in an object that isn't a
06:36 - string to system out print line it
06:39 - automatically calls the tostring method
06:41 - to get the string representation of that
06:43 - object so if we go ahead and run our
06:45 - code we can see that it prints out the
06:47 - contents of these objects in a very
06:49 - readable way so we can see that the
06:51 - record automatically created a tostring
06:53 - that has the name of the record and then
06:55 - the value of each of its components and
06:57 - it will generate equals and hash code
06:59 - methods that will consider two objects
07:02 - of that record class equal if all of
07:04 - their components are equal to each other
07:07 - these three methods can be somewhat
07:09 - tedious to write and so often
07:10 - programmers will just skip implementing
07:12 - them and even if they do bother to do it
07:15 - they can be really easy to mess up
07:16 - especially the equals and hashcode
07:18 - methods so with records you don't have
07:21 - to worry about them at all it will
07:22 - automatically create them for you you
07:24 - are allowed to override those methods
07:26 - with implementations of your own but
07:28 - most of the time there's just no reason
07:29 - to do it one thing to note is that it
07:31 - does not generate any setter methods one
07:35 - of the main features of a record and one
07:37 - of the main reasons to use a record is
07:39 - that they are immutable by default that
07:42 - just means that a record object cannot
07:45 - be changed once it's created once your
07:48 - employee record object is created with a
07:51 - certain name and employee number you can
07:53 - no longer change this employee record's
07:56 - name or employee number to anything else
07:58 - so it really wouldn't make sense to have
08:00 - any setters created anyway there are a
08:02 - few other things that you'll have to
08:04 - know if you're going to be using records
08:06 - first like any other class you can
08:08 - create instance methods if you want so
08:10 - for example you might have some method a
08:13 - public string name in uppercase and
08:16 - maybe all that does is just return name
08:19 - dot to uppercase and so you can call
08:21 - this method on an employee record object
08:24 - just like you would any other type of
08:25 - object so over here we can call employee
08:28 - record dot
08:29 - name in uppercase and if we run it we
08:32 - can see that we get the employee name in
08:35 - uppercase you can also create your own
08:38 - static methods as well so like public
08:40 - static void print whatever and that can
08:44 - just print
08:45 - whatever of course to call a static
08:47 - method you should call it using the name
08:49 - of the class itself and not a certain
08:51 - instance of that class so over here we
08:54 - would just call employee record with
08:56 - capital e capital r dot print whatever
09:00 - and of course that will just print
09:02 - whatever you can also create static
09:04 - fields like you could in any other class
09:07 - for example you could have a public
09:09 - static final string
09:11 - default employee name
09:14 - equals george
09:16 - however you cannot define your own
09:18 - non-static instance fields so something
09:21 - like private string something you are
09:24 - not allowed to do this you'll get an
09:26 - error that says instance field is not
09:28 - allowed in record any instance fields
09:31 - like this that you want have to be
09:33 - defined up here in your list of
09:35 - components another thing is that records
09:37 - cannot extend any other class so up here
09:40 - if you try to do something like extends
09:43 - employee class you would get an error
09:45 - that says no extends clause allowed for
09:48 - record all java records implicitly
09:51 - extend the record class kind of like all
09:54 - enums implicitly extend the enum class
09:57 - so because java doesn't allow multiple
09:59 - inheritance your record can't be a child
10:02 - of any other class records are also
10:05 - implicitly final classes which means
10:07 - that they can't be extended by any other
10:10 - class either you are allowed to put
10:12 - final in your record declaration but
10:14 - it's redundant to do so because it's
10:16 - already automatically going to be final
10:18 - however you are allowed to implement
10:20 - interfaces in records so to do that
10:23 - right up here after your record
10:24 - declaration like any other class you can
10:27 - just put in implements whatever
10:28 - interface you want so if you want you
10:30 - can implement the runnable interface it
10:32 - would probably be kind of weird for a
10:34 - record to be runnable but if you want to
10:36 - do it you can do it you just have to
10:38 - implement this run method like you would
10:41 - for any other runnable i mentioned
10:43 - before that we'd talk a little bit more
10:44 - about constructors in records remember
10:47 - that for records java will automatically
10:49 - create this canonical constructor that
10:52 - takes in all of the components and just
10:54 - sets all of those fields based on those
10:57 - components that are passed in so the
10:58 - idea is once you use that canonical
11:01 - constructor to create an object of that
11:04 - record class all of its fields will be
11:06 - set and can never be changed the record
11:08 - only exists to carry that collection of
11:11 - data through your program however you
11:13 - can also define your own constructors
11:16 - first even though it gives you that
11:18 - canonical constructor for free you can
11:21 - override it with your own implementation
11:23 - if you want so if i want i can create
11:25 - public employee record which takes in a
11:29 - string name and an int employee number
11:32 - so to override that default constructor
11:34 - it has to take in the exact same
11:36 - parameters in the exact same order one
11:39 - reason you might want to override the
11:41 - default constructor is just to do some
11:43 - sort of validation on the values being
11:45 - set like maybe it doesn't make sense for
11:48 - an employee number to be negative so you
11:50 - might do something like if the employee
11:52 - number is less than zero throw a new
11:56 - illegal argument exception employee
11:58 - number cannot be negative after that
12:01 - though you still have to set your
12:02 - records fields using the values passed
12:05 - in like this so this dot name equals
12:08 - name and this dot employee number equals
12:12 - employee number however with records
12:15 - there's a really cool little shortcut
12:16 - you can use to override your canonical
12:18 - constructor if you want and that's
12:20 - called a compact constructor this is
12:22 - something that is unique only to records
12:25 - all a compact constructor is is this
12:28 - exact same constructor except with the
12:31 - parameters removed and these assignments
12:35 - removed it will automatically add these
12:37 - same parameters in the same order and at
12:40 - the end of this constructor it will
12:41 - automatically set all of this records
12:43 - fields with those parameters you can
12:45 - also have additional regular
12:47 - constructors that take in different sets
12:49 - of parameters if you want and for those
12:51 - all the normal constructor rules apply
12:53 - you can learn a ton more about java
12:55 - constructors in this video here i think
12:58 - the ability to create this kind of
13:00 - compact constructor is really cool and
13:02 - it really serves to illustrate exactly
13:04 - why records exist records are just a
13:07 - super simple and fast way to create a
13:10 - certain type of class that we have to
13:12 - use all the time in the java world and
13:15 - that's a class that just holds data now
13:17 - remember we didn't even need any of this
13:19 - extra stuff we added so just this is all
13:22 - that we needed to create a full-featured
13:24 - class whose purpose is to just hold and
13:27 - carry this data and if you ask me that's
13:30 - a whole lot better than having to write
13:32 - out all of this to do exactly the same
13:35 - thing if you enjoyed this video or
13:36 - learned something please let me know by
13:38 - leaving a like be sure to subscribe for
13:40 - more java tutorials and for my full java
13:42 - course just check out the link down in
13:43 - the description thank you so much for
13:45 - watching i'll see you next time

Cleaned transcript:

records are a relatively new addition to java that you can use to avoid a ton of boilerplate code in certain types of classes in this video we'll talk about exactly what records are how they can simplify your code and when and how you can implement them into your java programs my name is john and i'm a lead java software engineer i also have a full java course available and a link down in the description so go check it out to understand why records are so useful it helps to know what programmers had to do before they existed which is probably what you are still doing if you're not using records yet let's say you wanted to make a very simple java class that all it contained was a bunch of fields to carry data about something these kinds of classes are super common in the java world like for example if you had an employee class that carried the employee's name and their employee number maybe that employee info exists in some database and all this class has to do is hold that employee info and return it to the user so before records existed here's everything you had to do let's give it two private fields a string employee name and an int employee number let's also go ahead and make these final so they can't be modified after the employee object is created so because these two fields are final we want to be able to set them right when we create an employee object so we have to add them to a constructor so maybe our constructor is just public employee class and that takes in the string name and the int employee number as parameters then all it does is just set this dot name equals name and this dot employee number equals employee number then let's go ahead and generate some getter methods for these two fields so they can be accessed from outside the class next you also want a good tostring implementation that returns all the data in the class in a nice readable string format something like this next you're going to want to override the hashcode method with a good implementation as well now we're almost done but not yet you're also going to want a good equals method implementation to check whether one instance of this class is equal to another so now finally after all of that we can come back here to our main method and create a new employee class object we'll just call it employee equals new employee class and we pass in a name and employee number here in the constructor and there you go but that was a whole lot of code that's almost 50 lines of code for a class that does something so simple like hold two pieces of data but that's how you have to do it with a traditional java class now to compare let's show how to do the exact same thing but using a record we just say public record we'll call it employee record it has a string name and an int employee number open and close the curly brackets and that's it this single line of code gives us the equivalent of everything we just created in this employee class so now with just that we can go back here to our main method and create an employee record object in the exact same way that we created the employee class object so we'll call this employee record equals new employee record and pass in the name of kramer and kramer is employee number 54321 so now let's break it down a bit to create a record first we say public record instead of public class that's because a record is a certain special type of class kind of like an enum is also a special type of class next we just give it a name here we're calling it employee record next in parentheses we list out all the components that we want to hold inside our record in a way that looks a lot like the parameters to a method so this is just all the different data elements that you want to hold in your record so here we have a string name and employee number so with just that java gives us a whole ton of other stuff for free first it generates private fields for all the components that we listed here just like we did over here in our employee class these will also be generated as final fields by default just like we did in our class so that they can't be changed after an employee record object is created it also generates public getter methods for each of these components similar to the getters that we created here the only difference is that the getters that it automatically generates for a record don't have get in their method name they just have the name of that field so just to demonstrate that back over here in our main method if we wanted to print out this employee class object's name we would just call employee.getname but to do the exact same thing with our employee record object we would just have to call employee record dot name without the get but if we go ahead and run our program we can see that the functionality is the same next it will also generate for you a certain type of constructor now you might know that when you create a normal java class what it automatically creates for you behind the scenes even if you don't make any constructor at all is a no args constructor like this that doesn't take any parameters when you create a record however it works a bit differently instead what it creates is a constructor like this one that takes in as parameters all of the different components that you listed up here in the record declaration then it sets all of that records fields with the values in those parameters just like we did over here in our employee class constructor that we made this type of constructor that is automatically generated when you create a record is known as a canonical constructor even though we didn't explicitly create any constructor over here in our record we were still in our main class able to call a new constructor and pass in our two component values and that's because that constructor was automatically generated behind the scenes there's also some really cool things that you can do with constructors only in records that you can't do in any other type of java class that we'll talk about in just a little bit finally it'll also automatically generate implementations of the tostring equals and hash code methods very similar to the ones that we created over here in our class so the tostring method will give you the name of the record class and then the name and value of all of its components and we can actually test out that automatically generated tostring method just by passing in the actual object to the system.out.printline method because when you pass in an object that isn't a string to system out print line it automatically calls the tostring method to get the string representation of that object so if we go ahead and run our code we can see that it prints out the contents of these objects in a very readable way so we can see that the record automatically created a tostring that has the name of the record and then the value of each of its components and it will generate equals and hash code methods that will consider two objects of that record class equal if all of their components are equal to each other these three methods can be somewhat tedious to write and so often programmers will just skip implementing them and even if they do bother to do it they can be really easy to mess up especially the equals and hashcode methods so with records you don't have to worry about them at all it will automatically create them for you you are allowed to override those methods with implementations of your own but most of the time there's just no reason to do it one thing to note is that it does not generate any setter methods one of the main features of a record and one of the main reasons to use a record is that they are immutable by default that just means that a record object cannot be changed once it's created once your employee record object is created with a certain name and employee number you can no longer change this employee record's name or employee number to anything else so it really wouldn't make sense to have any setters created anyway there are a few other things that you'll have to know if you're going to be using records first like any other class you can create instance methods if you want so for example you might have some method a public string name in uppercase and maybe all that does is just return name dot to uppercase and so you can call this method on an employee record object just like you would any other type of object so over here we can call employee record dot name in uppercase and if we run it we can see that we get the employee name in uppercase you can also create your own static methods as well so like public static void print whatever and that can just print whatever of course to call a static method you should call it using the name of the class itself and not a certain instance of that class so over here we would just call employee record with capital e capital r dot print whatever and of course that will just print whatever you can also create static fields like you could in any other class for example you could have a public static final string default employee name equals george however you cannot define your own nonstatic instance fields so something like private string something you are not allowed to do this you'll get an error that says instance field is not allowed in record any instance fields like this that you want have to be defined up here in your list of components another thing is that records cannot extend any other class so up here if you try to do something like extends employee class you would get an error that says no extends clause allowed for record all java records implicitly extend the record class kind of like all enums implicitly extend the enum class so because java doesn't allow multiple inheritance your record can't be a child of any other class records are also implicitly final classes which means that they can't be extended by any other class either you are allowed to put final in your record declaration but it's redundant to do so because it's already automatically going to be final however you are allowed to implement interfaces in records so to do that right up here after your record declaration like any other class you can just put in implements whatever interface you want so if you want you can implement the runnable interface it would probably be kind of weird for a record to be runnable but if you want to do it you can do it you just have to implement this run method like you would for any other runnable i mentioned before that we'd talk a little bit more about constructors in records remember that for records java will automatically create this canonical constructor that takes in all of the components and just sets all of those fields based on those components that are passed in so the idea is once you use that canonical constructor to create an object of that record class all of its fields will be set and can never be changed the record only exists to carry that collection of data through your program however you can also define your own constructors first even though it gives you that canonical constructor for free you can override it with your own implementation if you want so if i want i can create public employee record which takes in a string name and an int employee number so to override that default constructor it has to take in the exact same parameters in the exact same order one reason you might want to override the default constructor is just to do some sort of validation on the values being set like maybe it doesn't make sense for an employee number to be negative so you might do something like if the employee number is less than zero throw a new illegal argument exception employee number cannot be negative after that though you still have to set your records fields using the values passed in like this so this dot name equals name and this dot employee number equals employee number however with records there's a really cool little shortcut you can use to override your canonical constructor if you want and that's called a compact constructor this is something that is unique only to records all a compact constructor is is this exact same constructor except with the parameters removed and these assignments removed it will automatically add these same parameters in the same order and at the end of this constructor it will automatically set all of this records fields with those parameters you can also have additional regular constructors that take in different sets of parameters if you want and for those all the normal constructor rules apply you can learn a ton more about java constructors in this video here i think the ability to create this kind of compact constructor is really cool and it really serves to illustrate exactly why records exist records are just a super simple and fast way to create a certain type of class that we have to use all the time in the java world and that's a class that just holds data now remember we didn't even need any of this extra stuff we added so just this is all that we needed to create a fullfeatured class whose purpose is to just hold and carry this data and if you ask me that's a whole lot better than having to write out all of this to do exactly the same thing if you enjoyed this video or learned something please let me know by leaving a like be sure to subscribe for more java tutorials and for my full java course just check out the link down in the description thank you so much for watching i'll see you next time
