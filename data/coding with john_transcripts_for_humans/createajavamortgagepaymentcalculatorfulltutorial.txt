With timestamps:

00:00 - in this video we're going to be creating
00:01 - a mortgage calculator in java sounds
00:03 - like an absolute blast of a program to
00:05 - write right but it's a great beginner
00:06 - java program to create and we're going
00:08 - to start from scratch here and write the
00:09 - whole thing
00:10 - beginning to end hi my name is john and
00:11 - i do a new java tutorial video every
00:13 - single week so if you enjoyed this video
00:15 - be sure to subscribe so you don't miss a
00:16 - new video each week i also have a full
00:18 - java course available in the link down
00:19 - in the description if you're interested
00:21 - and of course the full source of this
00:22 - program is available in a link down in
00:23 - the description so go and grab it so
00:25 - we're going to take as
00:26 - input from the user the principal amount
00:28 - the interest rate and the term
00:30 - the number of years for that loan and
00:31 - our output is going to be the monthly
00:32 - payment amount and on top of that we're
00:34 - going to calculate the total amount that
00:36 - you pay
00:36 - throughout the whole course of the loan
00:38 - before we get started actually writing
00:39 - the code we need to know what the actual
00:41 - formula is for the monthly payment that
00:43 - we're going to have to implement in java
00:45 - here it is now i know it might look a
00:46 - little bit scary but i promise it's not
00:48 - so bad
00:49 - once you understand what all of these
00:50 - letters stand for it's really not all
00:51 - that complex
00:52 - so m here this capital m on the left is
00:55 - going to be our monthly payment amount
00:56 - this is what we're going to try
00:58 - and generate and we're going to
00:59 - calculate that monthly payment amount
01:00 - using this formula the p
01:02 - in this case is the principal amount
01:04 - that's the total amount of the loan so
01:05 - for example if you're borrowing a
01:06 - hundred thousand dollars to pay for a
01:08 - house
01:08 - your principal amount would be a hundred
01:10 - thousand dollars i in this case
01:12 - is the interest rate in our case since
01:13 - we're coming up with monthly payments
01:15 - we're going to need to generate the
01:16 - monthly interest rate and that's very
01:18 - simple to get from the annual interest
01:19 - rate we'll talk about that later
01:20 - the only other term here we haven't
01:21 - talked about is n n here is the number
01:24 - of
01:24 - payments again in this case since we're
01:26 - doing monthly payments it'll be the
01:27 - total number of monthly payments so it
01:29 - would just be whatever the number of
01:31 - years of the loan is
01:32 - times 12. so the goal of this program is
01:34 - going to be to take in the principal
01:36 - the annual interest rate and the term in
01:39 - years of the loan
01:40 - as input from the user make this
01:41 - calculation and then return what the
01:43 - monthly payment is
01:44 - let's get to it okay so we know we have
01:46 - to get input from the user so what do we
01:48 - use to get input from the user
01:50 - we're going to use the scanner class so
01:51 - we'll create a new scanner
01:53 - scanner scanner equals new scanner
01:56 - system dot in so it is keyword input
01:59 - from the user
02:00 - and to use scanner we have to import
02:03 - java.util.scanner so looking at our
02:04 - formula here what's one thing we need to
02:06 - take in we need to take in the
02:07 - principal amount of the loan for that
02:09 - we're going to use a double just in case
02:10 - the amount of this loan is super huge
02:12 - so we'll just say double principal
02:14 - equals scanner
02:16 - dot next double so what that'll do is
02:18 - take keyboard input from the user of
02:20 - some double and store it in that
02:21 - principle variable and also we do want
02:22 - to put in some sort of prompt for the
02:24 - user so they know what they have to
02:25 - enter
02:27 - system.out.printline enter
02:29 - the principal amount so next what else
02:32 - do we need we need the
02:34 - interest rate so again we'll prompt the
02:35 - user with a system.out.printline
02:38 - enter the annual interest rate
02:41 - for an interest rate i think a float
02:43 - will be just fine it's usually only a
02:44 - couple of decimal places
02:45 - so float annual interest rate
02:50 - equals scanner dot next float now we
02:53 - have one more thing we need to get from
02:54 - the user and that is the
02:56 - term of the loan we're going to get it
02:57 - from the user in years just because
02:59 - that's the normal way loans are given
03:00 - out it's giving out you know 10
03:02 - 15 30 year terms so again prompt the
03:04 - user with the system.out.printline
03:07 - enter the term in years and that'll be a
03:10 - whole number so we can just use int for
03:12 - that
03:12 - term in years equals scanner.next
03:16 - int all right now we have all the
03:18 - information we need from the user
03:20 - going back to our formula let's look at
03:21 - everything we're going to need
03:23 - to be able to plug in and get the right
03:24 - monthly payment we need the total
03:26 - principal amount we've already got that
03:27 - from the user but this i
03:29 - is the monthly interest rate right now
03:31 - we have the annual interest rate and we
03:32 - need to use that to calculate the
03:34 - monthly interest rate luckily to do that
03:35 - is pretty simple we can create a new
03:37 - float
03:38 - monthly interest rate that will just
03:41 - equal the annual interest rate
03:43 - divided by 12. and if you want to just
03:44 - use the number 12 here in the code
03:46 - that's fine but a little tip for your
03:48 - professional java programming career in
03:50 - the future
03:50 - is never have like magic numbers like
03:52 - these in the code so right now you
03:54 - probably understand what that 12 is for
03:55 - and what it means but sometime in the
03:57 - future you or some other programmer
03:59 - might look at this and say well why is
04:00 - he dividing it by 12
04:01 - so what you can do is create a well
04:03 - named constant for this number
04:05 - so that would look a little something
04:06 - like this you want to put this
04:08 - here above the main method in your class
04:11 - you just make a private
04:12 - static final int and we're going to call
04:16 - it
04:16 - months in a
04:19 - year and we're going to initialize it to
04:21 - 12.
04:22 - so this creates what's called a constant
04:24 - this month's in a year variable
04:26 - can never be changed because we have
04:28 - told java that this is
04:30 - final so once we initialize it here to
04:32 - 12 we can't ever set it to anything else
04:34 - and you can even see what happens if you
04:35 - try to down here in the code let's say
04:37 - we try to set it to
04:38 - 13 java is going to give us a
04:39 - compilation here before we can even run
04:41 - it final field
04:42 - months in a year cannot be assigned so
04:44 - now instead of just using this magic
04:45 - number 12 here
04:46 - we can use our months in a year variable
04:49 - now future you or some other programmer
04:51 - can look at this and know exactly what
04:53 - is going on
04:53 - anyway easy enough now we've got our
04:55 - monthly interest rate which we will use
04:57 - for our
04:57 - i to plug in our formula so now we have
05:00 - p the principal i the monthly interest
05:02 - rate the only other term we don't have
05:03 - is n the number of payments and we do
05:06 - have the term
05:07 - in years from the user so as you might
05:08 - guess we can easily use that to get the
05:10 - total number of monthly payments
05:12 - we can use int for that because of
05:13 - course it'll just be a whole number also
05:15 - inch number of payments to get the total
05:19 - number of monthly payments we just need
05:20 - to take the term in years
05:22 - and multiply it by 12. so we can set
05:24 - that equal to
05:25 - term in years times and again we could
05:28 - just say 12 but remember we've got a
05:30 - sweet constant we can use
05:32 - for months and a year so let's go ahead
05:34 - and do that
05:35 - all right so now we've got all the terms
05:36 - of this formula that we need let's go
05:38 - ahead and write the code
05:40 - to implement that formula remember the
05:42 - goal of this formula is to produce
05:43 - a monthly payment amount so we're going
05:45 - to create a new double
05:46 - call it monthly payment and we're going
05:49 - to set it equal to
05:50 - the result of running that formula so
05:52 - let's just start writing it out first
05:54 - we're going to need the principal amount
05:55 - and we're going to multiply it by
05:57 - the entire rest of this formula so
05:59 - equals principal
06:01 - times when you're typing out this
06:03 - formula in the java code you're going to
06:04 - need to pay close attention to the
06:06 - parentheses and things that you use
06:08 - so you make sure the order of operations
06:10 - happens like it should
06:11 - so for the numerator here we need our
06:13 - monthly interest rate
06:15 - times 1 plus the monthly interest rate
06:17 - to the power of the number of payments
06:19 - so again that might sound complicated
06:20 - but let's just break it down
06:21 - i here is our monthly interest rate so
06:23 - we have monthly
06:25 - interest rate times so for what's in
06:28 - these parentheses here we need to take
06:29 - one plus
06:30 - our monthly interest rate and raise it
06:32 - to the power of the number
06:34 - of payments there's a method available
06:35 - in java that makes it really easy to do
06:37 - exponents like this
06:38 - and that's just called math dot pow for
06:41 - power
06:41 - math.power takes two parameters and what
06:44 - it does is it takes the first number and
06:45 - raises it to the power of the second
06:47 - number
06:47 - in our case we want to take one plus the
06:49 - monthly interest rate and raise it to
06:51 - the power of
06:52 - the number of payments so let's just
06:53 - type that out we want to take one
06:55 - plus the monthly interest rate and raise
06:58 - it to the power of
06:59 - the number of payments let's zoom out a
07:02 - bit here so we can see the whole thing
07:03 - so now this line is that whole numerator
07:05 - the monthly interest rate
07:06 - times one plus the monthly interest rate
07:08 - to the power of the number of payments
07:10 - and that's exactly what we have here so
07:11 - let's contain that whole thing
07:13 - in parentheses and then we're going to
07:15 - want to divide it by
07:16 - this whole denominator so we put in a
07:17 - slash to divide and then we'll put in
07:20 - our
07:20 - denominator and you can see we have 1
07:22 - plus i raised to the power of
07:24 - n that's the same as one of the terms we
07:25 - have in our numerator here so we can
07:26 - just copy that part
07:27 - that's this whole dot pow piece we can
07:30 - just copy that
07:31 - and paste it here in our denominator and
07:33 - we just need to take that
07:35 - and subtract one so just minus one and
07:37 - that should work for the monthly payment
07:39 - calculation
07:40 - before we move on and calculate the full
07:42 - total payback amount for the loan let's
07:44 - test
07:44 - this out and make sure it works so let's
07:46 - just print out system.out.printline
07:49 - monthly payment and print out
07:53 - monthly payment let's give this a run
07:55 - and see how it works
07:56 - enter the principal amount let's say it
07:58 - was 100 000
08:00 - nice round number enter the annual
08:02 - interest rate let's say
08:03 - four percent so 0.04 as a quick tip if
08:06 - you want the user to be able to enter in
08:08 - something like
08:08 - four if their interest rate is four
08:10 - percent instead of having to put in
08:12 - 0.04 you can just take this number that
08:14 - they pass in and divide it by 100 so it
08:16 - works in your calculations but for here
08:18 - we're just going to have the user enter
08:19 - 0.04 for a 4 interest rate enter the
08:22 - term in years let's say it's a
08:24 - 15-year term and once we hit enter our
08:26 - program will do its thing
08:27 - and we get 739.6884 blah blah blah blah
08:31 - so about 740
08:33 - a month will be your payment so how are
08:35 - we actually going to confirm that this
08:36 - is the right number
08:37 - one way is to compare our results with
08:38 - google's own mortgage calculator
08:40 - so we have a hundred thousand dollar
08:41 - mortgage amount four percent interest
08:43 - rate
08:43 - and a period of 15 years our monthly
08:46 - payment is 740.
08:48 - so it looks like google is just rounding
08:50 - but our results are correct
08:51 - real quick though before we move on to
08:53 - calculating the full payback amount now
08:55 - this amount doesn't look anything like a
08:57 - standard currency amount right nobody
08:59 - prints out a number of dollars that
09:00 - looks like this so how do we format it
09:02 - properly to look like a good
09:04 - currency amount well there's another
09:05 - really convenient java class you can use
09:07 - to do just that
09:08 - and that class is called number format
09:10 - so we can call number format dot get
09:12 - currency instance open close parentheses
09:15 - dot
09:15 - format and then we can pass into this
09:17 - format method the number that we want to
09:19 - format as a currency
09:21 - and in our case we just want to format
09:22 - the monthly payment what this actually
09:24 - does is give you a currency formatter
09:26 - for the default locale
09:28 - of your java instance so because i'm in
09:30 - america it'll just be an
09:31 - english usa formatting of the currency
09:33 - let's go ahead and run this again to see
09:34 - what that number format looks like
09:36 - 100 000 four percent annual interest
09:39 - rate
09:40 - 15-year term now we get 739.69 but it's
09:44 - rounded and formatted really nicely
09:45 - right we get a dollar sign and it cuts
09:47 - off as two decimal places for cents and
09:49 - rounds it very nicely
09:50 - this number format class is really
09:52 - convenient for this kind of stuff so now
09:53 - that we've got this monthly payment
09:54 - printing out all pretty
09:55 - let's do the calculation for the total
09:57 - payback amount for example if you take
09:59 - out a hundred thousand dollars and have
10:00 - to pay it back at four percent for 15
10:02 - years
10:03 - what's the total amount you're going to
10:05 - have to pay back
10:06 - for that hundred thousand dollars so to
10:08 - calculate that is actually pretty simple
10:09 - right
10:10 - we know the monthly payment amount and
10:12 - we know the number of payments so all we
10:14 - have to do is take this monthly payment
10:15 - amount and multiply it by the number of
10:16 - payments and we have the total payback
10:18 - amount so we'll just do another
10:21 - system.out.printline
10:22 - total payback amount let's just format
10:26 - this nicely right from the get go so
10:28 - so we'll use number format dot get
10:30 - currency instance
10:32 - dot format so this is where we'll do our
10:34 - simple calculation we have
10:36 - the monthly payment we just need to
10:38 - multiply it by
10:39 - the number of payments and that should
10:42 - work let's go ahead and run it and see
10:44 - what we get let's just enter the same
10:45 - numbers we did before so
10:46 - a hundred thousand dollars four percent
10:49 - interest rate
10:50 - 15-year term let's see what we get our
10:52 - total payback amount for this hundred
10:54 - thousand dollar loan will be
10:55 - about a hundred and thirty three
10:57 - thousand dollars
10:58 - so you're going to be paying about 33
11:00 - 000 for the privilege of borrowing a
11:03 - hundred thousand dollars so that's a
11:04 - pretty good chunk of change but here you
11:05 - can see we're only doing a 15-year term
11:07 - a lot of people use
11:09 - a 30-year loan on their house so if you
11:10 - did a 30-year loan
11:12 - how do you think that would affect the
11:13 - total payback amount well we've got a
11:15 - calculator let's give it a try
11:16 - same numbers a hundred thousand dollars
11:19 - four percent annual interest rate
11:21 - but a 30-year term we get
11:25 - your monthly payment is way lower only
11:27 - 477 dollars
11:28 - but your total payback amount is almost
11:31 - 172
11:32 - 000 so for doubling the term from 15 to
11:35 - 30 years
11:36 - yes your monthly payment does go down
11:38 - but you end up paying more than twice
11:40 - the amount in
11:40 - interest that you would for 15-year loan
11:43 - ouch
11:44 - you also may have noticed while we're
11:45 - coding this program that if you enter
11:46 - some kind of an invalid number
11:48 - let's say you entered the number cheese
11:50 - your program explodes with this input
11:52 - mismatch exception and that's because
11:54 - this scanner method is trying to look
11:55 - for
11:56 - a double in the input that you put in
11:57 - when you put in cheese it can't really
11:59 - make a double out of cheese so it blows
12:01 - up
12:01 - if you'd like to learn how to deal with
12:02 - those exceptions and validate the user
12:04 - input so you know you always eventually
12:06 - get good input from the user go and
12:07 - check out this other video i made on
12:09 - exception handling and another thing you
12:10 - should never forget when you're using
12:11 - the scanner class right now we have a
12:13 - warning because our scanner
12:14 - is never closed and that is a potential
12:16 - resource leak and we can't have that
12:18 - so here after this point in the code
12:20 - we're already finished using the scanner
12:21 - we don't need to get any more user input
12:22 - so we can just call scanner.close here
12:25 - that gets rid of that warning and makes
12:27 - java happy and gives you that nice warm
12:29 - cozy fuzzy feeling inside
12:31 - if you're interested in seeing more java
12:32 - tutorial videos like this one in the
12:33 - future
12:34 - be sure to subscribe so you don't miss
12:35 - each week's video thanks a lot for
12:37 - watching and i'll see you next time

Cleaned transcript:

in this video we're going to be creating a mortgage calculator in java sounds like an absolute blast of a program to write right but it's a great beginner java program to create and we're going to start from scratch here and write the whole thing beginning to end hi my name is john and i do a new java tutorial video every single week so if you enjoyed this video be sure to subscribe so you don't miss a new video each week i also have a full java course available in the link down in the description if you're interested and of course the full source of this program is available in a link down in the description so go and grab it so we're going to take as input from the user the principal amount the interest rate and the term the number of years for that loan and our output is going to be the monthly payment amount and on top of that we're going to calculate the total amount that you pay throughout the whole course of the loan before we get started actually writing the code we need to know what the actual formula is for the monthly payment that we're going to have to implement in java here it is now i know it might look a little bit scary but i promise it's not so bad once you understand what all of these letters stand for it's really not all that complex so m here this capital m on the left is going to be our monthly payment amount this is what we're going to try and generate and we're going to calculate that monthly payment amount using this formula the p in this case is the principal amount that's the total amount of the loan so for example if you're borrowing a hundred thousand dollars to pay for a house your principal amount would be a hundred thousand dollars i in this case is the interest rate in our case since we're coming up with monthly payments we're going to need to generate the monthly interest rate and that's very simple to get from the annual interest rate we'll talk about that later the only other term here we haven't talked about is n n here is the number of payments again in this case since we're doing monthly payments it'll be the total number of monthly payments so it would just be whatever the number of years of the loan is times 12. so the goal of this program is going to be to take in the principal the annual interest rate and the term in years of the loan as input from the user make this calculation and then return what the monthly payment is let's get to it okay so we know we have to get input from the user so what do we use to get input from the user we're going to use the scanner class so we'll create a new scanner scanner scanner equals new scanner system dot in so it is keyword input from the user and to use scanner we have to import java.util.scanner so looking at our formula here what's one thing we need to take in we need to take in the principal amount of the loan for that we're going to use a double just in case the amount of this loan is super huge so we'll just say double principal equals scanner dot next double so what that'll do is take keyboard input from the user of some double and store it in that principle variable and also we do want to put in some sort of prompt for the user so they know what they have to enter system.out.printline enter the principal amount so next what else do we need we need the interest rate so again we'll prompt the user with a system.out.printline enter the annual interest rate for an interest rate i think a float will be just fine it's usually only a couple of decimal places so float annual interest rate equals scanner dot next float now we have one more thing we need to get from the user and that is the term of the loan we're going to get it from the user in years just because that's the normal way loans are given out it's giving out you know 10 15 30 year terms so again prompt the user with the system.out.printline enter the term in years and that'll be a whole number so we can just use int for that term in years equals scanner.next int all right now we have all the information we need from the user going back to our formula let's look at everything we're going to need to be able to plug in and get the right monthly payment we need the total principal amount we've already got that from the user but this i is the monthly interest rate right now we have the annual interest rate and we need to use that to calculate the monthly interest rate luckily to do that is pretty simple we can create a new float monthly interest rate that will just equal the annual interest rate divided by 12. and if you want to just use the number 12 here in the code that's fine but a little tip for your professional java programming career in the future is never have like magic numbers like these in the code so right now you probably understand what that 12 is for and what it means but sometime in the future you or some other programmer might look at this and say well why is he dividing it by 12 so what you can do is create a well named constant for this number so that would look a little something like this you want to put this here above the main method in your class you just make a private static final int and we're going to call it months in a year and we're going to initialize it to 12. so this creates what's called a constant this month's in a year variable can never be changed because we have told java that this is final so once we initialize it here to 12 we can't ever set it to anything else and you can even see what happens if you try to down here in the code let's say we try to set it to 13 java is going to give us a compilation here before we can even run it final field months in a year cannot be assigned so now instead of just using this magic number 12 here we can use our months in a year variable now future you or some other programmer can look at this and know exactly what is going on anyway easy enough now we've got our monthly interest rate which we will use for our i to plug in our formula so now we have p the principal i the monthly interest rate the only other term we don't have is n the number of payments and we do have the term in years from the user so as you might guess we can easily use that to get the total number of monthly payments we can use int for that because of course it'll just be a whole number also inch number of payments to get the total number of monthly payments we just need to take the term in years and multiply it by 12. so we can set that equal to term in years times and again we could just say 12 but remember we've got a sweet constant we can use for months and a year so let's go ahead and do that all right so now we've got all the terms of this formula that we need let's go ahead and write the code to implement that formula remember the goal of this formula is to produce a monthly payment amount so we're going to create a new double call it monthly payment and we're going to set it equal to the result of running that formula so let's just start writing it out first we're going to need the principal amount and we're going to multiply it by the entire rest of this formula so equals principal times when you're typing out this formula in the java code you're going to need to pay close attention to the parentheses and things that you use so you make sure the order of operations happens like it should so for the numerator here we need our monthly interest rate times 1 plus the monthly interest rate to the power of the number of payments so again that might sound complicated but let's just break it down i here is our monthly interest rate so we have monthly interest rate times so for what's in these parentheses here we need to take one plus our monthly interest rate and raise it to the power of the number of payments there's a method available in java that makes it really easy to do exponents like this and that's just called math dot pow for power math.power takes two parameters and what it does is it takes the first number and raises it to the power of the second number in our case we want to take one plus the monthly interest rate and raise it to the power of the number of payments so let's just type that out we want to take one plus the monthly interest rate and raise it to the power of the number of payments let's zoom out a bit here so we can see the whole thing so now this line is that whole numerator the monthly interest rate times one plus the monthly interest rate to the power of the number of payments and that's exactly what we have here so let's contain that whole thing in parentheses and then we're going to want to divide it by this whole denominator so we put in a slash to divide and then we'll put in our denominator and you can see we have 1 plus i raised to the power of n that's the same as one of the terms we have in our numerator here so we can just copy that part that's this whole dot pow piece we can just copy that and paste it here in our denominator and we just need to take that and subtract one so just minus one and that should work for the monthly payment calculation before we move on and calculate the full total payback amount for the loan let's test this out and make sure it works so let's just print out system.out.printline monthly payment and print out monthly payment let's give this a run and see how it works enter the principal amount let's say it was 100 000 nice round number enter the annual interest rate let's say four percent so 0.04 as a quick tip if you want the user to be able to enter in something like four if their interest rate is four percent instead of having to put in 0.04 you can just take this number that they pass in and divide it by 100 so it works in your calculations but for here we're just going to have the user enter 0.04 for a 4 interest rate enter the term in years let's say it's a 15year term and once we hit enter our program will do its thing and we get 739.6884 blah blah blah blah so about 740 a month will be your payment so how are we actually going to confirm that this is the right number one way is to compare our results with google's own mortgage calculator so we have a hundred thousand dollar mortgage amount four percent interest rate and a period of 15 years our monthly payment is 740. so it looks like google is just rounding but our results are correct real quick though before we move on to calculating the full payback amount now this amount doesn't look anything like a standard currency amount right nobody prints out a number of dollars that looks like this so how do we format it properly to look like a good currency amount well there's another really convenient java class you can use to do just that and that class is called number format so we can call number format dot get currency instance open close parentheses dot format and then we can pass into this format method the number that we want to format as a currency and in our case we just want to format the monthly payment what this actually does is give you a currency formatter for the default locale of your java instance so because i'm in america it'll just be an english usa formatting of the currency let's go ahead and run this again to see what that number format looks like 100 000 four percent annual interest rate 15year term now we get 739.69 but it's rounded and formatted really nicely right we get a dollar sign and it cuts off as two decimal places for cents and rounds it very nicely this number format class is really convenient for this kind of stuff so now that we've got this monthly payment printing out all pretty let's do the calculation for the total payback amount for example if you take out a hundred thousand dollars and have to pay it back at four percent for 15 years what's the total amount you're going to have to pay back for that hundred thousand dollars so to calculate that is actually pretty simple right we know the monthly payment amount and we know the number of payments so all we have to do is take this monthly payment amount and multiply it by the number of payments and we have the total payback amount so we'll just do another system.out.printline total payback amount let's just format this nicely right from the get go so so we'll use number format dot get currency instance dot format so this is where we'll do our simple calculation we have the monthly payment we just need to multiply it by the number of payments and that should work let's go ahead and run it and see what we get let's just enter the same numbers we did before so a hundred thousand dollars four percent interest rate 15year term let's see what we get our total payback amount for this hundred thousand dollar loan will be about a hundred and thirty three thousand dollars so you're going to be paying about 33 000 for the privilege of borrowing a hundred thousand dollars so that's a pretty good chunk of change but here you can see we're only doing a 15year term a lot of people use a 30year loan on their house so if you did a 30year loan how do you think that would affect the total payback amount well we've got a calculator let's give it a try same numbers a hundred thousand dollars four percent annual interest rate but a 30year term we get your monthly payment is way lower only 477 dollars but your total payback amount is almost 172 000 so for doubling the term from 15 to 30 years yes your monthly payment does go down but you end up paying more than twice the amount in interest that you would for 15year loan ouch you also may have noticed while we're coding this program that if you enter some kind of an invalid number let's say you entered the number cheese your program explodes with this input mismatch exception and that's because this scanner method is trying to look for a double in the input that you put in when you put in cheese it can't really make a double out of cheese so it blows up if you'd like to learn how to deal with those exceptions and validate the user input so you know you always eventually get good input from the user go and check out this other video i made on exception handling and another thing you should never forget when you're using the scanner class right now we have a warning because our scanner is never closed and that is a potential resource leak and we can't have that so here after this point in the code we're already finished using the scanner we don't need to get any more user input so we can just call scanner.close here that gets rid of that warning and makes java happy and gives you that nice warm cozy fuzzy feeling inside if you're interested in seeing more java tutorial videos like this one in the future be sure to subscribe so you don't miss each week's video thanks a lot for watching and i'll see you next time
