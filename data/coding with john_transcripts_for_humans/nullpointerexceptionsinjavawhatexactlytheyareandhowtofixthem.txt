With timestamps:

00:00 - if you've been coding in java for any
00:01 - length of time you've definitely run
00:03 - into the dreaded null pointer exception
00:06 - it's one of the most common exceptions
00:08 - and probably the biggest source of bugs
00:10 - in all of java in this video we'll talk
00:12 - about what exactly causes a null pointer
00:14 - exception how to fix it when you
00:16 - encounter one and strategies for
00:18 - avoiding them in the first place my name
00:20 - is john and i'm a lead java software
00:21 - engineer i also have a full java course
00:23 - available in a link down in the
00:24 - description so go check it out first
00:26 - what exactly causes a null pointer
00:28 - exception let's talk about it with an
00:30 - example let's say you're coding along
00:32 - and at some point you decide you need a
00:34 - new cat object so you go ahead and
00:35 - create cat my cat equals new cat and
00:39 - let's say you want to make that cat make
00:41 - noise so you go ahead and call it's make
00:44 - noise method with my cat dot make noise
00:47 - and we can see that in that method it
00:49 - just prints out meow so of course if we
00:51 - go back here and run our program that's
00:54 - exactly what it does it just prints out
00:56 - meow but what if instead of
00:57 - instantiating this my cat variable to a
01:00 - new cat we instead set it to null let's
01:03 - go ahead and run it and see what happens
01:05 - and oh no we get the dreaded null
01:08 - pointer exception now why exactly is
01:11 - that sure we can see that we're setting
01:13 - our mycat variable to null but what
01:15 - exactly does null mean and why does our
01:18 - code now result in a null pointer
01:21 - exception to visualize it so what we
01:23 - have in our code is a mycat variable
01:26 - right that my cat variable isn't a cat
01:29 - object itself but instead it's a
01:31 - reference to a cat object in memory so
01:35 - when we instantiate our mycat variable
01:38 - to a new cat that means this my cat
01:41 - variable is now a reference to an actual
01:44 - cat object in memory so after that when
01:48 - we call my cat dot make noise it has no
01:51 - problem doing that at all our my cat
01:53 - variable references an actual cat object
01:56 - in memory and so we're able to tell this
01:58 - cat object to make noise with no problem
02:02 - but what happens if instead we set it to
02:05 - null well instead of my cat pointing to
02:08 - an actual cat object in memory it's
02:10 - instead null which essentially means
02:13 - it's pointing at nothing not even like
02:16 - some empty box with no cat in it it's
02:18 - pointing to nothing at all this is a
02:21 - null pointer so when we call the make
02:24 - noise method on our my cat variable that
02:26 - has been set to null there's no cat to
02:29 - make noise we have a mycat variable but
02:32 - it's not pointing to any actual cat
02:34 - object there's nothing to meow all we
02:37 - have is a null pointer and so we get a
02:40 - null pointer exception in our code most
02:43 - of the time when we get a null pointer
02:44 - exception this is the reason we have
02:47 - some variable that's been set to null
02:49 - and we try to call some method on it
02:51 - more generally speaking just having some
02:53 - variable set to null won't give you a
02:55 - null pointer exception but you will get
02:57 - a null pointer exception if you try to
02:59 - do pretty much anything with a null
03:02 - variable for example if you try to get
03:05 - or set a field on that object like my
03:07 - cat dot age equals three we get a null
03:10 - pointer exception for essentially the
03:12 - same reason there is no actual cat
03:14 - object so we can't set its age to three
03:17 - there are other things that can give you
03:18 - a null pointer exception that you might
03:20 - not expect for example what if we had a
03:23 - boolean just called should print hello
03:26 - and right now let's just initialize it
03:28 - to true then we can have some if
03:30 - statement so if should print hello then
03:34 - we will print out hello so obviously if
03:37 - we run that it will print out hello but
03:39 - what will happen if instead of setting
03:41 - this to true or false we initialize it
03:44 - to null well as you may have guessed we
03:46 - get a null pointer exception if you're
03:48 - using a capital b boolean variable this
03:51 - is the wrapper class for jabba's
03:53 - lowercase b primitive boolean a
03:56 - primitive boolean like all java
03:58 - primitives can't be set to null as we
04:01 - can see by the error we're getting here
04:03 - but a capital b boolean the wrapper
04:05 - class can be set to null and if you do
04:08 - have a capital b boolean that is set to
04:10 - null and you try to evaluate it in an if
04:13 - statement it'll give you a null pointer
04:14 - exception best practice in this
04:16 - situation is to always use the java
04:19 - primitive boolean whenever possible a
04:22 - primitive boolean will never be null
04:24 - it'll always be true or false another
04:27 - way you might get an old pointer
04:28 - exception that you may not expect is
04:30 - let's say you have a collection like a
04:32 - list of strings called like favorite
04:35 - cheeseburgers and let's say you wanted
04:37 - to use a for each loop to loop through
04:40 - those cheeseburgers and just print them
04:42 - all out so four string burger
04:45 - in favorite cheeseburgers we're just
04:47 - going to print out that burger what
04:49 - happens is if this favorite
04:51 - cheeseburgers list has been set to null
04:54 - you get an old pointer exception so best
04:56 - practice in these sorts of situations is
04:58 - even if you have nothing to put in that
05:00 - list instead of initializing it to null
05:03 - you should just set it to be some empty
05:05 - list so like new arraylist so when you
05:08 - run this program with an empty list
05:10 - instead of a null list which are two
05:12 - very different things you don't get any
05:14 - null pointer exception so all of that is
05:16 - of course good to know right but what if
05:18 - you're running into a null pointer
05:19 - exception in your code right now how
05:22 - should you go about fixing it well the
05:24 - great news is with recent versions of
05:26 - java starting with java 14 when you get
05:28 - a null pointer exception the error
05:30 - message that it prints out is enormously
05:32 - helpful so if we go ahead and run this
05:34 - our original code if we take a closer
05:37 - look at this null pointer exception when
05:38 - it's thrown it says cannot invoke cat
05:41 - dot make noise because my cat is null
05:44 - and it gives an exact line number in our
05:47 - class in line 9. with earlier versions
05:50 - of java all it would tell you is the
05:52 - line number so you would basically just
05:54 - see this part you'd see that there's a
05:56 - null pointer exception and you could see
05:58 - which line it was on but it wouldn't say
06:00 - anything about which method it was
06:01 - trying to call or which variable was
06:04 - null that caused the problem now that
06:06 - might be enough in a simple case like
06:08 - this right where on line nine there's
06:10 - only one thing that can be null that can
06:12 - cause this problem it would have to be
06:13 - when this my cat object is null and it
06:16 - tries to call the make noise method on
06:18 - it but there are plenty of other times
06:20 - when just the line number wasn't enough
06:22 - to know exactly what was going wrong for
06:24 - example what if in our code we had
06:26 - something like this if we got an error
06:29 - and all it said was there was a null
06:31 - pointer exception on line 36
06:34 - we have no idea what's actually causing
06:37 - the problem it could be that this cat's
06:39 - variable is null and it gets a null
06:41 - pointer exception when it tries to call
06:43 - the get method on it or it could be that
06:45 - this zeroth element in the cats list is
06:48 - null and it gets a null pointer
06:50 - exception when it tries to call the get
06:51 - name method on it or it could be that
06:53 - neither of these are null but instead
06:56 - the name of that first cat in that list
06:59 - is null and you get a null pointer
07:00 - exception when you try to call the dot
07:02 - length method on it but now with our
07:04 - nice modern error messages we can scroll
07:08 - over here and see okay cannot invoke
07:11 - string.length because the return value
07:14 - of cat.getname is null so once you know
07:17 - what exactly is causing your
07:19 - nullpointerexception how do you go about
07:21 - fixing it you basically have two options
07:23 - the first option is you can identify the
07:26 - exact variable that's null that is
07:28 - causing you problems and initialize it
07:30 - with some value if the variable causing
07:33 - your null pointer exception should never
07:35 - be null this is what you'll need to do
07:37 - so here i can look at the code that was
07:40 - calling this method and see that okay
07:43 - i'm creating this new cat object and i'm
07:46 - adding it to my list but i never gave it
07:48 - a name and that's why down here when
07:51 - it's trying to get the name of that cat
07:53 - object and then getting its length it's
07:55 - causing a null pointer exception so just
07:57 - back up here where i'm creating my cat
07:59 - object i just need to set
08:02 - the name on this my other cat so just my
08:04 - other cat dot set name to jerry so now
08:08 - when we run the program there are no no
08:10 - pointer exceptions and it's correctly
08:11 - printing out the length of the name that
08:14 - we gave our cat and jerry has five
08:15 - characters so it's printing out five but
08:17 - what do you do if you don't have any
08:19 - control over whether the variable that
08:21 - you're working with is null or not or
08:23 - maybe the variable being null is just a
08:26 - valid situation that you have to deal
08:28 - with the simplest way to fix it in that
08:30 - situation is to just add a piece of code
08:32 - that checks to see if that variable is
08:34 - null and only performs the operation on
08:37 - that variable if it's not null this is
08:39 - commonly referred to just as a null
08:41 - check so from our first example we know
08:44 - that if this mycat variable is null if
08:46 - we try to call the make noise method on
08:48 - it we're going to get a null pointer
08:50 - exception so what we can do is add just
08:52 - a simple null check so we can say if my
08:55 - cat is not equal to null
08:58 - then we can call the make noise method
09:00 - on it you'll see this kind of coding
09:02 - pattern all over for the rest of your
09:04 - java coding career it might seem overly
09:07 - simplistic but there's really no need to
09:09 - complicate things if a simple piece of
09:11 - code like this will do the trick now if
09:14 - you have a long chain of method calls
09:16 - like this one and any one of these
09:18 - values might be null you might need
09:20 - multiple null checks which can get a
09:22 - little bit nasty looking so to make sure
09:24 - we can call this.length method at the
09:26 - end first we need to make sure that this
09:28 - getname method won't return null but to
09:31 - make sure that we can even call this
09:33 - getname method we have to make sure that
09:35 - this get method won't return null and to
09:37 - make sure that that won't cause a null
09:39 - point or exception we first need to make
09:41 - sure that cats is not null so that means
09:44 - that we have to have a pretty large
09:45 - series of null checks so we can say if
09:48 - cats is not equal to null and
09:51 - cats.get zero is not equal to null and
09:56 - cats.get
09:57 - zero
09:58 - dot get name is not equal to null
10:02 - then we know that we can successfully
10:04 - return this value as the length of that
10:08 - name otherwise maybe we'll just return
10:10 - zero so this can definitely get kind of
10:12 - ugly but sometimes you don't really have
10:14 - a good way around it and the only way
10:16 - you can make sure that you won't get a
10:18 - null pointer exception is just having a
10:20 - large series of null checks so now we
10:23 - know how we can fix null pointer
10:24 - exceptions when we get them but what are
10:26 - some strategies for avoiding them in the
10:28 - first place so in situations where you
10:30 - have just a local variable like this
10:33 - where you're declaring it and
10:34 - instantiating it right in the same
10:36 - method that you're using it you have
10:38 - complete and full control in general
10:40 - just try to avoid initializing variables
10:43 - like that to null it's almost always
10:45 - best to just initialize it properly
10:48 - right there when you declare it there
10:50 - are some very specific situations where
10:52 - you might have to initialize a variable
10:54 - to null just take very good care to make
10:57 - sure that it is always getting
10:58 - initialized to some actual object
11:01 - somewhere down the line before you use
11:03 - it also try to avoid returning null as
11:06 - the return value in methods that you
11:08 - write if at all possible for example if
11:11 - you have some method that returns like a
11:13 - collection right so this method here git
11:15 - cats returns some list of cats so what
11:18 - if at the end of this method ah you
11:20 - don't have any cats that you want to
11:21 - return you might think well it's a good
11:23 - idea to just return null well that's
11:26 - okay but then in whatever piece of code
11:28 - that's calling this method it has to
11:30 - deal with the possibility of the result
11:32 - of this method being null what you can
11:34 - do instead is just return an empty
11:36 - collection so here we're using a list so
11:38 - instead of returning null we can just
11:40 - return a new arraylist as we saw earlier
11:44 - an empty list won't give you any null
11:45 - pointer exceptions when you try to loop
11:47 - through it but a null list will another
11:50 - small tip often you'll find yourself
11:52 - having to do some string comparisons
11:55 - where you need to take some string that
11:56 - you have and compare it to some constant
11:59 - value or some string literal for example
12:02 - let's say we just wanted to take the
12:03 - name of this my other cat object and we
12:06 - wanted to see if it was equal to some
12:09 - string literal which is just a string
12:10 - that you write out literally in quotes
12:13 - in the code like this so if we wanted to
12:15 - see if this name was equal to newman so
12:19 - we could write something like this so we
12:20 - can say if
12:22 - my other cat.getname
12:26 - then we print out hello newman so this
12:29 - code will work fine right but what will
12:32 - happen if instead of setting the name to
12:33 - jerry we have it set to null well if we
12:37 - try and run that we're going to get a
12:38 - null pointer exception and we can see
12:40 - that it says we can't invoke string dot
12:43 - equals because the return value of
12:46 - cat.getname
12:47 - is null so what's happening here is
12:51 - get myothercat.getname is returning null
12:52 - because that cat's name has been set to
12:55 - null so when we try to call the dot
12:57 - equals method on that null name we get a
13:00 - null pointer exception so what you can
13:02 - do instead to eliminate the possibility
13:04 - of a null pointer exception in this
13:06 - scenario is just flip this comparison
13:09 - around so instead of saying my other cat
13:11 - dot get name dot equals newman we can
13:14 - say newman as a string literal in quotes
13:18 - dot equals and pass in my other cat dot
13:21 - get name so now when we run our code
13:24 - just by flipping around that comparison
13:26 - we no longer get a null pointer
13:28 - exception this string literal newman is
13:30 - of course not null we can see the string
13:33 - value right there so there's no chance
13:35 - of a null pointer exception when we call
13:37 - dot equals on it and if this my other
13:39 - cat dot get name does return null here
13:42 - it doesn't cause any problems this
13:43 - equals method just compares newman to
13:46 - null and sees that they're not equal so
13:49 - this equals method just ends up
13:50 - returning false and everything just
13:52 - works as it should with no exceptions
13:54 - sometimes though you just don't have
13:56 - complete control over the code that
13:57 - you're having to deal with in those
13:59 - cases it's best to just do a simple null
14:01 - check before doing anything with that
14:03 - variable if you enjoyed this video or
14:05 - learned something please let me know by
14:07 - leaving a like and be sure to subscribe
14:08 - so you don't miss each new java tutorial
14:11 - and be sure to check out the full java
14:12 - course in the link down in the
14:13 - description thank you so much for
14:15 - watching i really do appreciate you
14:17 - being here with me i'll see you next
14:18 - time

Cleaned transcript:

if you've been coding in java for any length of time you've definitely run into the dreaded null pointer exception it's one of the most common exceptions and probably the biggest source of bugs in all of java in this video we'll talk about what exactly causes a null pointer exception how to fix it when you encounter one and strategies for avoiding them in the first place my name is john and i'm a lead java software engineer i also have a full java course available in a link down in the description so go check it out first what exactly causes a null pointer exception let's talk about it with an example let's say you're coding along and at some point you decide you need a new cat object so you go ahead and create cat my cat equals new cat and let's say you want to make that cat make noise so you go ahead and call it's make noise method with my cat dot make noise and we can see that in that method it just prints out meow so of course if we go back here and run our program that's exactly what it does it just prints out meow but what if instead of instantiating this my cat variable to a new cat we instead set it to null let's go ahead and run it and see what happens and oh no we get the dreaded null pointer exception now why exactly is that sure we can see that we're setting our mycat variable to null but what exactly does null mean and why does our code now result in a null pointer exception to visualize it so what we have in our code is a mycat variable right that my cat variable isn't a cat object itself but instead it's a reference to a cat object in memory so when we instantiate our mycat variable to a new cat that means this my cat variable is now a reference to an actual cat object in memory so after that when we call my cat dot make noise it has no problem doing that at all our my cat variable references an actual cat object in memory and so we're able to tell this cat object to make noise with no problem but what happens if instead we set it to null well instead of my cat pointing to an actual cat object in memory it's instead null which essentially means it's pointing at nothing not even like some empty box with no cat in it it's pointing to nothing at all this is a null pointer so when we call the make noise method on our my cat variable that has been set to null there's no cat to make noise we have a mycat variable but it's not pointing to any actual cat object there's nothing to meow all we have is a null pointer and so we get a null pointer exception in our code most of the time when we get a null pointer exception this is the reason we have some variable that's been set to null and we try to call some method on it more generally speaking just having some variable set to null won't give you a null pointer exception but you will get a null pointer exception if you try to do pretty much anything with a null variable for example if you try to get or set a field on that object like my cat dot age equals three we get a null pointer exception for essentially the same reason there is no actual cat object so we can't set its age to three there are other things that can give you a null pointer exception that you might not expect for example what if we had a boolean just called should print hello and right now let's just initialize it to true then we can have some if statement so if should print hello then we will print out hello so obviously if we run that it will print out hello but what will happen if instead of setting this to true or false we initialize it to null well as you may have guessed we get a null pointer exception if you're using a capital b boolean variable this is the wrapper class for jabba's lowercase b primitive boolean a primitive boolean like all java primitives can't be set to null as we can see by the error we're getting here but a capital b boolean the wrapper class can be set to null and if you do have a capital b boolean that is set to null and you try to evaluate it in an if statement it'll give you a null pointer exception best practice in this situation is to always use the java primitive boolean whenever possible a primitive boolean will never be null it'll always be true or false another way you might get an old pointer exception that you may not expect is let's say you have a collection like a list of strings called like favorite cheeseburgers and let's say you wanted to use a for each loop to loop through those cheeseburgers and just print them all out so four string burger in favorite cheeseburgers we're just going to print out that burger what happens is if this favorite cheeseburgers list has been set to null you get an old pointer exception so best practice in these sorts of situations is even if you have nothing to put in that list instead of initializing it to null you should just set it to be some empty list so like new arraylist so when you run this program with an empty list instead of a null list which are two very different things you don't get any null pointer exception so all of that is of course good to know right but what if you're running into a null pointer exception in your code right now how should you go about fixing it well the great news is with recent versions of java starting with java 14 when you get a null pointer exception the error message that it prints out is enormously helpful so if we go ahead and run this our original code if we take a closer look at this null pointer exception when it's thrown it says cannot invoke cat dot make noise because my cat is null and it gives an exact line number in our class in line 9. with earlier versions of java all it would tell you is the line number so you would basically just see this part you'd see that there's a null pointer exception and you could see which line it was on but it wouldn't say anything about which method it was trying to call or which variable was null that caused the problem now that might be enough in a simple case like this right where on line nine there's only one thing that can be null that can cause this problem it would have to be when this my cat object is null and it tries to call the make noise method on it but there are plenty of other times when just the line number wasn't enough to know exactly what was going wrong for example what if in our code we had something like this if we got an error and all it said was there was a null pointer exception on line 36 we have no idea what's actually causing the problem it could be that this cat's variable is null and it gets a null pointer exception when it tries to call the get method on it or it could be that this zeroth element in the cats list is null and it gets a null pointer exception when it tries to call the get name method on it or it could be that neither of these are null but instead the name of that first cat in that list is null and you get a null pointer exception when you try to call the dot length method on it but now with our nice modern error messages we can scroll over here and see okay cannot invoke string.length because the return value of cat.getname is null so once you know what exactly is causing your nullpointerexception how do you go about fixing it you basically have two options the first option is you can identify the exact variable that's null that is causing you problems and initialize it with some value if the variable causing your null pointer exception should never be null this is what you'll need to do so here i can look at the code that was calling this method and see that okay i'm creating this new cat object and i'm adding it to my list but i never gave it a name and that's why down here when it's trying to get the name of that cat object and then getting its length it's causing a null pointer exception so just back up here where i'm creating my cat object i just need to set the name on this my other cat so just my other cat dot set name to jerry so now when we run the program there are no no pointer exceptions and it's correctly printing out the length of the name that we gave our cat and jerry has five characters so it's printing out five but what do you do if you don't have any control over whether the variable that you're working with is null or not or maybe the variable being null is just a valid situation that you have to deal with the simplest way to fix it in that situation is to just add a piece of code that checks to see if that variable is null and only performs the operation on that variable if it's not null this is commonly referred to just as a null check so from our first example we know that if this mycat variable is null if we try to call the make noise method on it we're going to get a null pointer exception so what we can do is add just a simple null check so we can say if my cat is not equal to null then we can call the make noise method on it you'll see this kind of coding pattern all over for the rest of your java coding career it might seem overly simplistic but there's really no need to complicate things if a simple piece of code like this will do the trick now if you have a long chain of method calls like this one and any one of these values might be null you might need multiple null checks which can get a little bit nasty looking so to make sure we can call this.length method at the end first we need to make sure that this getname method won't return null but to make sure that we can even call this getname method we have to make sure that this get method won't return null and to make sure that that won't cause a null point or exception we first need to make sure that cats is not null so that means that we have to have a pretty large series of null checks so we can say if cats is not equal to null and cats.get zero is not equal to null and cats.get zero dot get name is not equal to null then we know that we can successfully return this value as the length of that name otherwise maybe we'll just return zero so this can definitely get kind of ugly but sometimes you don't really have a good way around it and the only way you can make sure that you won't get a null pointer exception is just having a large series of null checks so now we know how we can fix null pointer exceptions when we get them but what are some strategies for avoiding them in the first place so in situations where you have just a local variable like this where you're declaring it and instantiating it right in the same method that you're using it you have complete and full control in general just try to avoid initializing variables like that to null it's almost always best to just initialize it properly right there when you declare it there are some very specific situations where you might have to initialize a variable to null just take very good care to make sure that it is always getting initialized to some actual object somewhere down the line before you use it also try to avoid returning null as the return value in methods that you write if at all possible for example if you have some method that returns like a collection right so this method here git cats returns some list of cats so what if at the end of this method ah you don't have any cats that you want to return you might think well it's a good idea to just return null well that's okay but then in whatever piece of code that's calling this method it has to deal with the possibility of the result of this method being null what you can do instead is just return an empty collection so here we're using a list so instead of returning null we can just return a new arraylist as we saw earlier an empty list won't give you any null pointer exceptions when you try to loop through it but a null list will another small tip often you'll find yourself having to do some string comparisons where you need to take some string that you have and compare it to some constant value or some string literal for example let's say we just wanted to take the name of this my other cat object and we wanted to see if it was equal to some string literal which is just a string that you write out literally in quotes in the code like this so if we wanted to see if this name was equal to newman so we could write something like this so we can say if my other cat.getname then we print out hello newman so this code will work fine right but what will happen if instead of setting the name to jerry we have it set to null well if we try and run that we're going to get a null pointer exception and we can see that it says we can't invoke string dot equals because the return value of cat.getname is null so what's happening here is get myothercat.getname is returning null because that cat's name has been set to null so when we try to call the dot equals method on that null name we get a null pointer exception so what you can do instead to eliminate the possibility of a null pointer exception in this scenario is just flip this comparison around so instead of saying my other cat dot get name dot equals newman we can say newman as a string literal in quotes dot equals and pass in my other cat dot get name so now when we run our code just by flipping around that comparison we no longer get a null pointer exception this string literal newman is of course not null we can see the string value right there so there's no chance of a null pointer exception when we call dot equals on it and if this my other cat dot get name does return null here it doesn't cause any problems this equals method just compares newman to null and sees that they're not equal so this equals method just ends up returning false and everything just works as it should with no exceptions sometimes though you just don't have complete control over the code that you're having to deal with in those cases it's best to just do a simple null check before doing anything with that variable if you enjoyed this video or learned something please let me know by leaving a like and be sure to subscribe so you don't miss each new java tutorial and be sure to check out the full java course in the link down in the description thank you so much for watching i really do appreciate you being here with me i'll see you next time
