With timestamps:

00:00 - in this video we are going to implement
00:01 - one of the worst sorting algorithms in
00:03 - the world
00:04 - in java and then we're going to see how
00:05 - long it takes to sort a list of just
00:07 - 14 integers here's a hint it's not fast
00:11 - if this is your first time watching this
00:12 - channel my name is john and i do a java
00:14 - video like this
00:15 - every single week lessons on concepts
00:17 - full tutorials on how to code something
00:18 - or just a fun video like this one so be
00:20 - sure to hit the subscribe button so you
00:22 - don't miss one
00:22 - and i want to sincerely thank those of
00:24 - you who do take the time to like and
00:25 - subscribe
00:26 - it's the only way this channel grows i
00:28 - really do appreciate it
00:29 - the name of the sorting algorithm we are
00:30 - going to use is uh most commonly called
00:32 - bogo sword but it's also called uh
00:34 - random sort shuffle sort
00:36 - monkey sort shotgun sort so the idea
00:39 - behind it is that you start out with
00:40 - some unsorted list of stuff
00:42 - and you just shuffle everything so you
00:44 - just mix up the elements of that list
00:46 - into some random order and then you
00:48 - check to see if all the elements of that
00:49 - list
00:49 - are now in order and if they aren't you
00:52 - randomly shuffle them again and you keep
00:54 - going until one of those random shuffles
00:56 - somehow puts the list in perfect order
00:58 - we're just taking our list and throwing
01:00 - it over to a pack of 100 monkeys
01:02 - and hoping that they throw it back in
01:04 - perfectly sorted order
01:06 - all this program is doing is uh we
01:07 - create a new empty arraylist
01:10 - of integers and we're filling it up with
01:12 - values so
01:13 - we just have a regular old for loop here
01:14 - that just goes from 0 to currently the
01:16 - number is 12 but we'll actually start
01:17 - out with a little
01:18 - lower of a number we'll start out with
01:20 - the list of only three numbers
01:22 - and in each iteration through this for
01:24 - loop we had a random number in that
01:25 - range
01:26 - to our number list so right now when it
01:28 - exits this for loop it's going to have
01:30 - three random numbers between 0
01:33 - and 9999 and then we're going to
01:36 - implement our magical sorting algorithm
01:38 - here that should
01:39 - put them all in perfect order and then
01:41 - we just loop through our list with this
01:42 - four
01:43 - each and print out each element and we
01:45 - should see them all being printed out
01:46 - in perfect order now we've also got this
01:48 - uh private method that i've pre-built
01:50 - for purposes of this video
01:52 - so it just takes in a list of integers
01:54 - and it returns true
01:55 - if the list is sorted in order from
01:58 - smallest to largest
01:59 - and it returns false if it is not right
02:00 - now before we add our sorting algorithm
02:02 - we can go ahead and run our code
02:04 - and we can see that the elements that we
02:06 - get each time we run it are in no
02:08 - particular order and it's going to be
02:09 - our job to implement the sorting
02:11 - algorithm
02:12 - to get these perfectly sorted each and
02:13 - every time so now let's get to the good
02:15 - part
02:16 - where we are actually implementing our
02:18 - super amazingly awful
02:20 - sorting algorithm and bogosort may be
02:22 - terrible and slow
02:24 - but one thing it is not is complicated
02:27 - it's pretty much just a two line sorting
02:30 - algorithm here's what we're going to do
02:31 - we're going to have a while loop
02:34 - and we're going to say while the list is
02:37 - not
02:37 - sorted and we'll pass in our number list
02:40 - so it's just checking to see if our list
02:41 - is currently in perfect
02:43 - order uh just using our little private
02:45 - method down here
02:46 - and if it's not in order we're going to
02:48 - call collections
02:50 - dot shuffle and pass in our list
02:53 - so that's it's basically just two lines
02:55 - we check to see if the list is sorted
02:58 - and if not we shuffle it and then we
03:00 - check to see if it's sorted and if not
03:02 - we shuffle it and we keep going
03:03 - until it magically is sorted and then
03:06 - we'll exit this while loop
03:08 - and print everything out so let's run it
03:10 - for our list of just
03:11 - three elements and see if it works
03:16 - right yes indeed that is in order let's
03:17 - run it a few more times
03:19 - just to make sure we didn't uh get lucky
03:21 - and make sure our algorithm is working
03:22 - perfectly
03:23 - yep yep it's been in the proper order
03:27 - each and every time it doesn't seem to
03:28 - be taken long at all right it basically
03:30 - finishes right away so it's got to be
03:32 - super speedy right well maybe
03:34 - let's go ahead and instead of just
03:35 - having three elements
03:37 - let's have 10 elements in our list and
03:40 - run that a few times and see what
03:41 - happens
03:41 - pretty quick our elements are still
03:43 - coming out in perfect order
03:45 - and it seems to be working pretty
03:46 - quickly well that one took a second but
03:48 - you know it's not bad a second or two
03:50 - it could be a lot worse for what we're
03:51 - calling the worst sorting algorithm in
03:53 - the world now let's bump it up a little
03:54 - bit let's just say
03:55 - um 12 elements hmm
04:02 - this one's taking a while
04:07 - yep
04:11 - i don't have a watch i was just
04:14 - this is the universal signal for this is
04:17 - taking a while
04:19 - yeah you guys seen any um
04:23 - good movies or tv shows or anything
04:25 - lately no movies not in a theater
04:28 - nobody's seen anything in the theater
04:30 - for a year
04:33 - barely been out of the house
04:40 - oh well we finished up we're in perfect
04:42 - numerical order
04:43 - let's see they ran from 9 12 54 to 9 14
04:46 - 12. so that means it took a minute and a
04:49 - half or so
04:50 - that's not great i could have probably
04:52 - sorted 12
04:54 - pieces of paper with numbers on them in
04:55 - the right order faster than that
04:57 - so it took a while but it wasn't the
04:58 - absolute worst experience of my life
05:01 - um let's try lucky 13.
05:05 - run it okay
05:12 - and this could take quite a while i have
05:14 - no idea how long it's actually going to
05:15 - take
05:16 - even from just going from 12 to 13
05:19 - elements in our list we could have
05:20 - increased the time it's going to take
05:21 - from a minute and a half
05:22 - with those 12 elements to now with 13 i
05:26 - don't know it could take
05:27 - 10 minutes hours days
05:31 - years i don't know but i'm going to let
05:33 - it run
05:34 - and we're going to see and we are not
05:37 - going to try 14.
05:38 - so i'll see you back here when it
05:39 - finishes all right that one ended up
05:40 - finishing a little bit faster than i
05:42 - thought only about
05:43 - seven and a half minutes or so not the
05:45 - end of the world still a little
05:47 - ridiculous
05:48 - for a list of just 13 units but i think
05:51 - i'm going to go ahead
05:53 - and increase it to 14 and see what
05:56 - happens i've got all my computer do your
05:57 - worst
05:58 - actually i don't have all night i think
05:59 - i'm gonna go do something else and let
06:02 - it run and
06:02 - i'm back here the next morning to find
06:04 - it has finally
06:06 - finished so we started last night at 9
06:08 - 25 and finally finished this morning at
06:11 - 2
06:11 - 17 a.m so that means it took about
06:16 - five hours to sort this list
06:20 - of 14 numbers with our
06:23 - ridiculous bogo sword now that is crazy
06:26 - and
06:26 - the thing is that doesn't mean this will
06:27 - reliably take about five
06:29 - hours to do it just happened to come
06:32 - along with the exact right permutation
06:34 - at that time
06:35 - the next time it runs it could take 10
06:37 - minutes to do the exact same thing or it
06:39 - could take
06:40 - six days to do the exact same thing now
06:42 - the reason it gets exponentially
06:43 - worse is because the number of possible
06:46 - permutations the number of possible
06:47 - different orderings
06:49 - increases exponentially also the number
06:51 - of permutations
06:52 - for a list of a given size is actually
06:55 - the the size of the list
06:57 - factorial so that means our list of 14
07:00 - elements had 14 factorial possible
07:03 - number of permutations
07:04 - that gives us about 87 billion
07:08 - possible ordering the thing is our
07:09 - program isn't just going through
07:11 - different orderings and then if one
07:12 - order doesn't work it says okay i won't
07:14 - try that again it doesn't do that that
07:16 - means it has a 1 in 87 billion
07:18 - chance of getting it right every time it
07:20 - tries it and so
07:21 - eventually it's going to get it right
07:23 - now what would happen if we just
07:25 - increased our list
07:26 - by one well it would be 15
07:29 - times harder so we've got 1.3
07:32 - trillion possibilities and only 1 in 1.3
07:36 - trillion
07:37 - chance of getting it right on any given
07:40 - shuffle
07:40 - and so we would expect to take it on
07:42 - average about 15
07:44 - times as long as it just took us to do
07:46 - 14 elements
07:48 - i would try it just for the fun of it
07:49 - but i don't really want to leave my
07:51 - computer sitting there useless
07:53 - for weeks at a time trying to sort a
07:54 - list of numbers in an
07:56 - awful way just for fun i've already done
07:58 - that for five hours and i think that's
07:59 - enough we've learned our lesson here
08:01 - although the bogo sort is
08:02 - very very simple and easy to implement
08:05 - it is also horrifically inefficient
08:06 - for anything more than just a few
08:08 - elements but i will say it was a lot of
08:10 - fun to try out and to see how
08:12 - quickly it actually gets super awful if
08:14 - you enjoyed this video or learned
08:15 - something please let me know with a like
08:17 - and be sure to hit the subscribe button
08:18 - to get more java videos tutorials and
08:20 - lessons like this
08:21 - every single week and again thank you
08:23 - sincerely to all of you who do take the
08:24 - time to like and subscribe
08:26 - it's the only way this channel can grow
08:28 - and reach more people and so i really do
08:29 - appreciate it
08:30 - poor computer just had to work all night
08:32 - just to sort 14 numbers
08:35 - poor guy i won't do that to you anymore
08:38 - well that's not true i might i might do
08:40 - something similar to that in the future

Cleaned transcript:

in this video we are going to implement one of the worst sorting algorithms in the world in java and then we're going to see how long it takes to sort a list of just 14 integers here's a hint it's not fast if this is your first time watching this channel my name is john and i do a java video like this every single week lessons on concepts full tutorials on how to code something or just a fun video like this one so be sure to hit the subscribe button so you don't miss one and i want to sincerely thank those of you who do take the time to like and subscribe it's the only way this channel grows i really do appreciate it the name of the sorting algorithm we are going to use is uh most commonly called bogo sword but it's also called uh random sort shuffle sort monkey sort shotgun sort so the idea behind it is that you start out with some unsorted list of stuff and you just shuffle everything so you just mix up the elements of that list into some random order and then you check to see if all the elements of that list are now in order and if they aren't you randomly shuffle them again and you keep going until one of those random shuffles somehow puts the list in perfect order we're just taking our list and throwing it over to a pack of 100 monkeys and hoping that they throw it back in perfectly sorted order all this program is doing is uh we create a new empty arraylist of integers and we're filling it up with values so we just have a regular old for loop here that just goes from 0 to currently the number is 12 but we'll actually start out with a little lower of a number we'll start out with the list of only three numbers and in each iteration through this for loop we had a random number in that range to our number list so right now when it exits this for loop it's going to have three random numbers between 0 and 9999 and then we're going to implement our magical sorting algorithm here that should put them all in perfect order and then we just loop through our list with this four each and print out each element and we should see them all being printed out in perfect order now we've also got this uh private method that i've prebuilt for purposes of this video so it just takes in a list of integers and it returns true if the list is sorted in order from smallest to largest and it returns false if it is not right now before we add our sorting algorithm we can go ahead and run our code and we can see that the elements that we get each time we run it are in no particular order and it's going to be our job to implement the sorting algorithm to get these perfectly sorted each and every time so now let's get to the good part where we are actually implementing our super amazingly awful sorting algorithm and bogosort may be terrible and slow but one thing it is not is complicated it's pretty much just a two line sorting algorithm here's what we're going to do we're going to have a while loop and we're going to say while the list is not sorted and we'll pass in our number list so it's just checking to see if our list is currently in perfect order uh just using our little private method down here and if it's not in order we're going to call collections dot shuffle and pass in our list so that's it's basically just two lines we check to see if the list is sorted and if not we shuffle it and then we check to see if it's sorted and if not we shuffle it and we keep going until it magically is sorted and then we'll exit this while loop and print everything out so let's run it for our list of just three elements and see if it works right yes indeed that is in order let's run it a few more times just to make sure we didn't uh get lucky and make sure our algorithm is working perfectly yep yep it's been in the proper order each and every time it doesn't seem to be taken long at all right it basically finishes right away so it's got to be super speedy right well maybe let's go ahead and instead of just having three elements let's have 10 elements in our list and run that a few times and see what happens pretty quick our elements are still coming out in perfect order and it seems to be working pretty quickly well that one took a second but you know it's not bad a second or two it could be a lot worse for what we're calling the worst sorting algorithm in the world now let's bump it up a little bit let's just say um 12 elements hmm this one's taking a while yep i don't have a watch i was just this is the universal signal for this is taking a while yeah you guys seen any um good movies or tv shows or anything lately no movies not in a theater nobody's seen anything in the theater for a year barely been out of the house oh well we finished up we're in perfect numerical order let's see they ran from 9 12 54 to 9 14 12. so that means it took a minute and a half or so that's not great i could have probably sorted 12 pieces of paper with numbers on them in the right order faster than that so it took a while but it wasn't the absolute worst experience of my life um let's try lucky 13. run it okay and this could take quite a while i have no idea how long it's actually going to take even from just going from 12 to 13 elements in our list we could have increased the time it's going to take from a minute and a half with those 12 elements to now with 13 i don't know it could take 10 minutes hours days years i don't know but i'm going to let it run and we're going to see and we are not going to try 14. so i'll see you back here when it finishes all right that one ended up finishing a little bit faster than i thought only about seven and a half minutes or so not the end of the world still a little ridiculous for a list of just 13 units but i think i'm going to go ahead and increase it to 14 and see what happens i've got all my computer do your worst actually i don't have all night i think i'm gonna go do something else and let it run and i'm back here the next morning to find it has finally finished so we started last night at 9 25 and finally finished this morning at 2 17 a.m so that means it took about five hours to sort this list of 14 numbers with our ridiculous bogo sword now that is crazy and the thing is that doesn't mean this will reliably take about five hours to do it just happened to come along with the exact right permutation at that time the next time it runs it could take 10 minutes to do the exact same thing or it could take six days to do the exact same thing now the reason it gets exponentially worse is because the number of possible permutations the number of possible different orderings increases exponentially also the number of permutations for a list of a given size is actually the the size of the list factorial so that means our list of 14 elements had 14 factorial possible number of permutations that gives us about 87 billion possible ordering the thing is our program isn't just going through different orderings and then if one order doesn't work it says okay i won't try that again it doesn't do that that means it has a 1 in 87 billion chance of getting it right every time it tries it and so eventually it's going to get it right now what would happen if we just increased our list by one well it would be 15 times harder so we've got 1.3 trillion possibilities and only 1 in 1.3 trillion chance of getting it right on any given shuffle and so we would expect to take it on average about 15 times as long as it just took us to do 14 elements i would try it just for the fun of it but i don't really want to leave my computer sitting there useless for weeks at a time trying to sort a list of numbers in an awful way just for fun i've already done that for five hours and i think that's enough we've learned our lesson here although the bogo sort is very very simple and easy to implement it is also horrifically inefficient for anything more than just a few elements but i will say it was a lot of fun to try out and to see how quickly it actually gets super awful if you enjoyed this video or learned something please let me know with a like and be sure to hit the subscribe button to get more java videos tutorials and lessons like this every single week and again thank you sincerely to all of you who do take the time to like and subscribe it's the only way this channel can grow and reach more people and so i really do appreciate it poor computer just had to work all night just to sort 14 numbers poor guy i won't do that to you anymore well that's not true i might i might do something similar to that in the future
