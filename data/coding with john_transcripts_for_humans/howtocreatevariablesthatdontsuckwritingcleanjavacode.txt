With timestamps:

00:00 - names are the building blocks of every
00:02 - single thing we program classes
00:04 - variables methods packages that means
00:06 - using bad names is a great starting
00:09 - point for writing impossible to read
00:10 - code that makes other programmers regret
00:13 - being on your team in this video we'll
00:14 - talk about how to create names that will
00:16 - make your code a pleasure for other
00:18 - programmers or your future self to read
00:20 - and maintain i also have a full java
00:22 - course available in a link down in the
00:24 - description so go check it out a lot of
00:26 - these ideas are heavily inspired by one
00:28 - of my favorite programming books a
00:30 - classic in the programming world called
00:32 - clean code by robert c martin you can
00:34 - find it at the link down in the
00:35 - description let's start with naming
00:37 - variables you probably know you're
00:39 - supposed to use meaningful names but
00:41 - what does that actually mean to me a
00:43 - good variable name will tell you exactly
00:46 - what it is being stored in the variable
00:48 - and will also convey the purpose behind
00:50 - that variable so what if you're looking
00:52 - at someone's code and you see something
00:53 - like float num equals 94.5
00:58 - but this doesn't tell you anything about
01:00 - what this variable actually represents
01:02 - so maybe you know that this is supposed
01:04 - to be a weight so a little bit better
01:06 - name would be
01:07 - weight but if something weighs 94.5
01:10 - that's not really enough information is
01:12 - that pounds kilograms milligrams let's
01:14 - say you find out this is supposed to be
01:16 - a weight in kilograms so probably a
01:18 - better name would be weight in kilograms
01:21 - the context of where a variable appears
01:23 - is also important to how you're going to
01:25 - name it right now since this is a
01:27 - variable just floating in our main
01:29 - method we don't know exactly what this
01:31 - is a weight of is it a rock or a planet
01:34 - or a cheeseburger so in this context it
01:36 - might make sense to add to the variable
01:38 - name to clarify what it's a weight of so
01:41 - if it's a weight of a cat we could say
01:43 - cat weight in kilograms however if we
01:46 - were going to create a weight variable
01:48 - as a property of a cat class here it's
01:51 - fine to just use weight in kilograms as
01:53 - the variable name because we're already
01:55 - within the cat context so it can be
01:57 - assumed here that the name age and
01:59 - weight are all attributes of the cat
02:02 - without having to spell it out in the
02:04 - variable names for the length of your
02:05 - variable names you want to keep them as
02:07 - short as you can while still keeping
02:09 - them meaningful so here cat weight in
02:11 - kilograms tells you everything you need
02:13 - to know without being overly long
02:15 - something like fluffy's weight in
02:17 - kilograms before accounting for the
02:20 - rotational velocity of the earth on the
02:22 - second thursday of the month after i ran
02:25 - out of diet coke that one time this
02:27 - doesn't help anyone make it long enough
02:29 - to be meaningful and no longer you
02:31 - should also make your names
02:33 - pronounceable if you're going to work on
02:34 - a team of developers and anyone who's
02:36 - going to do this professionally will be
02:39 - you're going to have a lot of occasions
02:40 - where you need to talk to somebody else
02:42 - about a piece of code maybe in a code
02:44 - review or if they have a question about
02:45 - it whatever when you do you'll want to
02:47 - be able to talk about those variables in
02:49 - plain english like update timestamp
02:52 - instead of something like update mdms
02:56 - you can maybe also pronounce this update
02:58 - month month day day year year year year
03:00 - hours hours minutes minutes second
03:02 - seconds but you'll also want to be able
03:04 - to say the variable names without
03:06 - passing out from lack of oxygen you
03:08 - should generally avoid using type
03:10 - information in your variable names for
03:12 - example for this cat weight in kilograms
03:14 - you probably don't need to say float cat
03:17 - weight in kilograms one exception to
03:19 - that could be if you're doing some kind
03:20 - of type conversion for example if you
03:22 - need to take in this weight as a string
03:24 - and convert it to a float you might have
03:27 - one variable that's called string cat
03:28 - weight in kilograms and another called
03:31 - float just to differentiate the two in
03:33 - that instance you should also generally
03:35 - avoid using single character variable
03:37 - names unless that single character name
03:39 - is a convention like in a for loop the
03:42 - convention in a standard for loop is to
03:44 - use i for your iterator so everybody
03:46 - will know what the purpose of this i is
03:48 - speaking of conventions if there's some
03:51 - convention for naming what you're naming
03:53 - use it here's a few quick java naming
03:55 - conventions for variables you should use
03:57 - what's called camelcase which means that
04:00 - the first letter of every word in the
04:02 - variable name is going to be capitalized
04:04 - except for the first letter which should
04:06 - be lowercase class names should also be
04:08 - camelcase but with the first letter of
04:10 - the class name capitalized package names
04:13 - should be all lowercase with different
04:15 - sections separated by dots if you're
04:17 - naming a variable that's intended to be
04:19 - a constant like this private static
04:21 - final int grid size the convention is to
04:24 - use all caps with the words separated by
04:27 - underscores for enums it's the same
04:29 - thing all caps with multiple words
04:32 - separated by underscores which makes
04:33 - sense because enums are just another
04:35 - kind of constant you should generally
04:37 - avoid using underscores in other types
04:39 - of variable names that aren't constants
04:42 - class names and variable names should be
04:44 - nouns like cat or update timestamp or
04:47 - max hit points method names however
04:49 - should usually be a verb or a verb
04:51 - phrase and the name should tell you
04:53 - exactly what the method does and if it
04:55 - makes sense what it does that too for
04:58 - example this save cat method saves a cat
05:01 - to a database you already know what this
05:03 - method is going to do
05:05 - just by looking at the name and there's
05:06 - no surprises or anything with what the
05:08 - method actually does in this case we've
05:10 - called this method save cat but we could
05:13 - probably even get rid of the cat from
05:15 - the name because it's implied that this
05:17 - method is going to save whatever it is
05:19 - that's being passed in which in this
05:21 - case is a cat a great method name tells
05:24 - you what it does without having to look
05:26 - inside the code you shouldn't have to
05:27 - look through the code to figure out what
05:29 - it's doing here's an example of a bad
05:31 - method name so it's taking in a list of
05:34 - doubles and it's just called calculate
05:36 - but what exactly is it calculating well
05:39 - you can't know in this case without
05:40 - reading through the method to find out
05:42 - what it's actually doing so then you
05:44 - have to take the time to read through it
05:45 - okay what is it doing oh it's
05:47 - calculating the average of this list of
05:49 - numbers well a better name would be
05:51 - calculate average now you know exactly
05:54 - what this method is doing just by
05:56 - looking at the name methods that you
05:58 - make should only be doing one thing so
06:00 - that should make naming them pretty
06:02 - straightforward if you're having trouble
06:04 - giving your method a simple name it
06:06 - might mean that your method is doing too
06:08 - much and needs to be broken up also if
06:10 - you read the name of a method and then
06:12 - you're surprised by something that
06:14 - happens in that method that probably
06:16 - means either the name is bad or the
06:18 - method is bad and doing something that
06:20 - it shouldn't as before you want to keep
06:22 - method names as short as you can while
06:24 - still keeping them meaningful sometimes
06:27 - to make a method name meaningful might
06:29 - mean a little bit longer of a name but
06:31 - i'd rather read a long method name that
06:33 - tells me exactly what it does then see a
06:35 - short method name that leaves out
06:37 - important details about the method's
06:39 - functionality a good way to know if a
06:41 - method name is good is if you read the
06:43 - method name and then look at a method
06:45 - and you just go yup does pretty much
06:46 - what i thought it would do take the time
06:49 - to choose great names when you're
06:50 - programming otherwise you'll find
06:52 - yourself two years down the line looking
06:54 - at somebody's code going what what is
06:56 - this code even doing who wrote this
06:57 - garbage oh it was me if you enjoyed this
07:00 - video or learned something please let me
07:02 - know by leaving a like and be sure to
07:03 - subscribe so you don't miss each new
07:05 - java tutorial as always thank you so
07:07 - much for watching i really do appreciate
07:09 - you being here with me and i'll see you
07:10 - next time

Cleaned transcript:

names are the building blocks of every single thing we program classes variables methods packages that means using bad names is a great starting point for writing impossible to read code that makes other programmers regret being on your team in this video we'll talk about how to create names that will make your code a pleasure for other programmers or your future self to read and maintain i also have a full java course available in a link down in the description so go check it out a lot of these ideas are heavily inspired by one of my favorite programming books a classic in the programming world called clean code by robert c martin you can find it at the link down in the description let's start with naming variables you probably know you're supposed to use meaningful names but what does that actually mean to me a good variable name will tell you exactly what it is being stored in the variable and will also convey the purpose behind that variable so what if you're looking at someone's code and you see something like float num equals 94.5 but this doesn't tell you anything about what this variable actually represents so maybe you know that this is supposed to be a weight so a little bit better name would be weight but if something weighs 94.5 that's not really enough information is that pounds kilograms milligrams let's say you find out this is supposed to be a weight in kilograms so probably a better name would be weight in kilograms the context of where a variable appears is also important to how you're going to name it right now since this is a variable just floating in our main method we don't know exactly what this is a weight of is it a rock or a planet or a cheeseburger so in this context it might make sense to add to the variable name to clarify what it's a weight of so if it's a weight of a cat we could say cat weight in kilograms however if we were going to create a weight variable as a property of a cat class here it's fine to just use weight in kilograms as the variable name because we're already within the cat context so it can be assumed here that the name age and weight are all attributes of the cat without having to spell it out in the variable names for the length of your variable names you want to keep them as short as you can while still keeping them meaningful so here cat weight in kilograms tells you everything you need to know without being overly long something like fluffy's weight in kilograms before accounting for the rotational velocity of the earth on the second thursday of the month after i ran out of diet coke that one time this doesn't help anyone make it long enough to be meaningful and no longer you should also make your names pronounceable if you're going to work on a team of developers and anyone who's going to do this professionally will be you're going to have a lot of occasions where you need to talk to somebody else about a piece of code maybe in a code review or if they have a question about it whatever when you do you'll want to be able to talk about those variables in plain english like update timestamp instead of something like update mdms you can maybe also pronounce this update month month day day year year year year hours hours minutes minutes second seconds but you'll also want to be able to say the variable names without passing out from lack of oxygen you should generally avoid using type information in your variable names for example for this cat weight in kilograms you probably don't need to say float cat weight in kilograms one exception to that could be if you're doing some kind of type conversion for example if you need to take in this weight as a string and convert it to a float you might have one variable that's called string cat weight in kilograms and another called float just to differentiate the two in that instance you should also generally avoid using single character variable names unless that single character name is a convention like in a for loop the convention in a standard for loop is to use i for your iterator so everybody will know what the purpose of this i is speaking of conventions if there's some convention for naming what you're naming use it here's a few quick java naming conventions for variables you should use what's called camelcase which means that the first letter of every word in the variable name is going to be capitalized except for the first letter which should be lowercase class names should also be camelcase but with the first letter of the class name capitalized package names should be all lowercase with different sections separated by dots if you're naming a variable that's intended to be a constant like this private static final int grid size the convention is to use all caps with the words separated by underscores for enums it's the same thing all caps with multiple words separated by underscores which makes sense because enums are just another kind of constant you should generally avoid using underscores in other types of variable names that aren't constants class names and variable names should be nouns like cat or update timestamp or max hit points method names however should usually be a verb or a verb phrase and the name should tell you exactly what the method does and if it makes sense what it does that too for example this save cat method saves a cat to a database you already know what this method is going to do just by looking at the name and there's no surprises or anything with what the method actually does in this case we've called this method save cat but we could probably even get rid of the cat from the name because it's implied that this method is going to save whatever it is that's being passed in which in this case is a cat a great method name tells you what it does without having to look inside the code you shouldn't have to look through the code to figure out what it's doing here's an example of a bad method name so it's taking in a list of doubles and it's just called calculate but what exactly is it calculating well you can't know in this case without reading through the method to find out what it's actually doing so then you have to take the time to read through it okay what is it doing oh it's calculating the average of this list of numbers well a better name would be calculate average now you know exactly what this method is doing just by looking at the name methods that you make should only be doing one thing so that should make naming them pretty straightforward if you're having trouble giving your method a simple name it might mean that your method is doing too much and needs to be broken up also if you read the name of a method and then you're surprised by something that happens in that method that probably means either the name is bad or the method is bad and doing something that it shouldn't as before you want to keep method names as short as you can while still keeping them meaningful sometimes to make a method name meaningful might mean a little bit longer of a name but i'd rather read a long method name that tells me exactly what it does then see a short method name that leaves out important details about the method's functionality a good way to know if a method name is good is if you read the method name and then look at a method and you just go yup does pretty much what i thought it would do take the time to choose great names when you're programming otherwise you'll find yourself two years down the line looking at somebody's code going what what is this code even doing who wrote this garbage oh it was me if you enjoyed this video or learned something please let me know by leaving a like and be sure to subscribe so you don't miss each new java tutorial as always thank you so much for watching i really do appreciate you being here with me and i'll see you next time
