With timestamps:

00:00 - in this video we're going to talk all
00:01 - about linked lists in java
00:03 - how you can create them and use them
00:04 - we'll also talk about how they compare
00:06 - to array lists
00:07 - and also when you might want to use an
00:09 - arraylist over a linked list and vice
00:10 - versa my name is john and i do a new
00:12 - java tutorial video every single week so
00:14 - if you like this video and would like to
00:15 - see more please consider subscribing so
00:17 - you don't miss the new video every week
00:18 - i also have a full java course available
00:20 - in the link down in the description if
00:22 - you're interested
00:22 - i think a great place to start would be
00:24 - to just go ahead and
00:26 - create a linked list and an arraylist
00:28 - right here let's just say we wanted to
00:29 - create a list of names so it'll be a
00:31 - list of strings
00:32 - if we wanted to do that with a linked
00:33 - list we would just say a linked list
00:36 - string because it's a linked list of
00:38 - strings and then we need to give it a
00:39 - name so we can just call it
00:41 - names linked list equals new
00:44 - linked list and if you're using java 7
00:46 - or higher which you should be you can
00:48 - just use
00:48 - the diamond operator here so just the
00:50 - less than and greater than symbols open
00:52 - and close parentheses and a semicolon in
00:54 - older versions of java you had to
00:55 - specify the type
00:57 - the list holds here as well so you would
00:58 - have had to put string here
01:00 - but now with the newer versions of java
01:01 - it can infer that type by the type that
01:04 - you put here so
01:05 - you can just use this diamond operator
01:06 - now of course we need to add the import
01:08 - for linked list which is just
01:10 - java.util.link list now let's look at
01:12 - how we would create an
01:14 - array list and compare them we just say
01:16 - arraylist string
01:17 - give it a name names arraylist equals
01:20 - new
01:21 - arraylist same diamond operator open and
01:23 - close parentheses
01:24 - and a semicolon and then we just need to
01:26 - import java.util.arraylist
01:29 - as you can see clearly the way you
01:31 - create the two is virtually identical
01:33 - and even the way we would add things to
01:34 - both of these lists
01:35 - is the same so if we want to add
01:36 - something to our linked list we just say
01:38 - nameslinklist
01:39 - dot add and then pass in the string we
01:41 - want so we can add uh the name
01:42 - john it's a good name we can copy paste
01:45 - and add some more
01:46 - paul george and ringo
01:49 - and if we want to add elements to our
01:51 - arraylist it's exactly the same so we
01:54 - can just copy paste that code and change
01:55 - this to the names arraylist
01:57 - and we can add things to our arraylist
01:59 - with the exact same method call just
02:00 - names arraylist.ad
02:02 - a big reason these classes are so
02:04 - similar is because they're both part of
02:05 - the java collections framework and they
02:07 - both implement
02:08 - the list interface so what does that
02:10 - mean now what we can do is we can
02:12 - actually nerd out
02:13 - and like control click into this linked
02:15 - list class
02:16 - and look at the code of the linked list
02:18 - and here's where it implements that list
02:20 - interface that i mentioned and we can
02:22 - hop into this list interface
02:23 - and if we press ctrl o in eclipse it
02:26 - shows
02:27 - all of the methods that a list has to
02:29 - support
02:30 - so you can see we have a lot of basic
02:31 - methods in here like getting its size
02:33 - checking if it's empty
02:35 - getting a certain element in it or
02:36 - setting a certain element in it adding
02:38 - an element to it
02:39 - so because both the arraylist and the
02:41 - linked list implement that list
02:43 - interface they both support those exact
02:46 - same
02:46 - list methods so if you already know the
02:48 - type of code that you have to use to
02:50 - work with
02:50 - arraylist those exact same methods that
02:52 - you use with arraylist will work just
02:54 - fine
02:55 - with your linked list so you might be
02:56 - thinking hey john it looks like these
02:58 - are basically exactly the same i use
03:00 - them the same way
03:01 - what's the difference who cares whether
03:02 - i use one over the other the difference
03:04 - between these two classes comes from how
03:06 - they are
03:06 - implemented behind the scenes and
03:08 - depending on what your specific program
03:10 - actually has to do
03:11 - with these lists that it creates using
03:13 - one versus the other could dramatically
03:15 - impact the performance of your program
03:17 - so let's talk about how these are
03:18 - implemented let's start with arraylist
03:21 - as you might know arraylist
03:22 - actually uses an array as its underlying
03:25 - data structure
03:26 - and just as like a quick refresher you
03:28 - could create like an array of strings
03:30 - in java like this like string array
03:32 - names
03:33 - equals new string array and you have to
03:35 - give it a size let's say we gave it size
03:38 - 4.
03:38 - as you may already know an array in java
03:40 - is a fixed
03:41 - length so once i've given this names
03:43 - array a size of 4 this array will always
03:46 - have exactly four elements in it what if
03:48 - you start your list with four things in
03:49 - it and later on you find you want to add
03:51 - more things to it well you can't you're
03:52 - gonna have to make
03:53 - a brand new array that's a bigger size
03:55 - and then you can add more things to it
03:57 - but if you had to program that yourself
03:58 - that would be a whole lot of work right
03:59 - so what arraylist
04:01 - does is it does all of that work behind
04:03 - the scenes so you never have to know
04:05 - how it's working or that it's even doing
04:07 - that but notice i didn't even have to
04:08 - give it a size here i think by default
04:10 - it gives it a size of 10 an initial
04:12 - capacity of 10. once it reaches that
04:14 - capacity it automatically creates a
04:16 - new array of a larger capacity and moves
04:19 - all of those elements into that new
04:21 - larger array
04:22 - but all of that dynamic resizing can
04:24 - take quite a bit of time
04:26 - and resources now let's compare that
04:28 - implementation with how the linked list
04:30 - works behind the scenes here's kind of a
04:32 - visual representation of how a linked
04:33 - list works a full credit to
04:35 - a geeksforgeeks.org for this image
04:38 - instead of having an array
04:39 - we just have a bunch of different
04:40 - elements each element is called a node
04:43 - and each element in your list has a
04:45 - pointer a reference
04:47 - to the next node so the linked list
04:49 - class starts with just a pointer to the
04:51 - first element in the list
04:52 - and after that each node each element in
04:54 - the list just has
04:56 - a reference a pointer sort of to the
04:58 - next node so the first one has a
04:59 - reference to the second the second one
05:00 - has a reference to the third etc so it's
05:02 - essentially like a big chain like a
05:04 - bunch of paper clips attached together
05:06 - so the linked list
05:06 - itself has just a reference to that
05:08 - first element and then you follow those
05:10 - pointers down the line to get to
05:11 - whatever element that you need
05:13 - you can also have what's called a doubly
05:14 - linked list and that is actually what
05:16 - the linked list class in java is it's a
05:18 - doubly linked list so all that means is
05:20 - that
05:21 - in addition to having a reference to the
05:23 - next node in the list
05:25 - each node also has a reference to the
05:27 - previous element in the list and it's
05:29 - not shown in this image but in the
05:30 - linked list implementation in java it
05:33 - also has a pointer to the very last
05:35 - element called the tail so java starts
05:36 - with a reference to the beginning of the
05:38 - list and the end of the list but to get
05:40 - to any element
05:41 - inside the list it has to follow those
05:42 - pointers to get to whatever element it
05:45 - needs to in any given time
05:46 - those differences in the underlying
05:47 - implementation of both of these classes
05:49 - have dramatic impacts on the performance
05:51 - of some very basic things
05:53 - that you can do with your lists let's
05:54 - say i just wanted to grab the third
05:56 - element in my list
05:58 - and print it out so in this case that
05:59 - would just be george well all i have to
06:01 - do is names
06:02 - linked list dot get and to get the third
06:05 - element in my
06:06 - list i would pass in the number two
06:07 - because it's zero based like everything
06:09 - else in programming so if i wanted to
06:10 - print that out it would just be
06:12 - system.out.printline
06:13 - and i can run my program and of course
06:15 - it prints out george
06:17 - and of course because the arraylist also
06:18 - supports this get method we can do the
06:20 - exact same thing
06:21 - with our arraylist and they both print
06:23 - out george but when you call this method
06:26 - on each of these two classes what they
06:27 - have to do behind the scenes
06:29 - is way different in the arraylist behind
06:31 - the scenes it uses an
06:32 - array to store all of the values and
06:34 - arrays have
06:35 - super fast what's called random access
06:38 - that means you can tell java to get
06:40 - any specific element in that list it
06:42 - doesn't matter which one and it runs in
06:44 - constant time that means
06:45 - it doesn't matter which element you ask
06:47 - java to get it takes the same amount of
06:49 - time to get it it takes the same amount
06:50 - of time to get the first element
06:51 - as it does to get the 5000 element or
06:54 - any element in between so down here when
06:55 - i say hey arraylist
06:57 - give me the object at index2 it does it
06:59 - immediately it can go right to that
07:01 - index and grab me that george value and
07:03 - print it out but how it works in the
07:04 - linked list
07:05 - is way different in a linked list java
07:07 - doesn't start with a reference to all
07:09 - the elements in between it just starts
07:10 - with a reference to the beginning
07:12 - element
07:12 - and the end element and if it wants to
07:14 - get any in between it has to follow
07:16 - these next or previous pointers to get
07:19 - the element that it wants
07:20 - for example if you had a list of like a
07:21 - thousand elements and you wanted to get
07:23 - the 400th element
07:24 - it can't go directly there it has to
07:26 - just start at the first element and keep
07:28 - getting the next value over and over and
07:29 - over again until it gets to that 400th
07:31 - element
07:32 - and then it can finally return it that
07:33 - operation is way slower for a linked
07:36 - list
07:36 - than it is for an arraylist however
07:39 - where a linked list typically kicks the
07:41 - heck out of an arraylist is when you
07:43 - need to add or remove
07:45 - elements let's say i want to do
07:46 - something really simple let's say i
07:48 - wanted to put the name
07:48 - jerry right between john and paul in my
07:51 - list well i can easily do that with
07:53 - names
07:53 - linked list dot add now to insert a
07:56 - value in a certain spot in your list you
07:58 - have to pass in
07:59 - the index that you want that value to go
08:00 - in so because i want it to be second in
08:02 - the list i'll give it an index
08:04 - of one and then i pass the value that i
08:05 - want added which would be
08:07 - jerry and of course the command in the
08:08 - arraylist is going to be
08:10 - exactly the same now let's compare how
08:12 - that insert has to work
08:13 - in both classes so in the linked list
08:16 - if i wanted to insert an element here in
08:18 - between a and b
08:20 - what java has to do is just start at the
08:21 - beginning of the list until it gets to
08:23 - the spot where it wants to insert the
08:25 - value and it just has
08:26 - to change this next reference that a has
08:28 - to be and instead point it to
08:30 - the new node that we're inserting and it
08:31 - also has to change the previous
08:33 - reference that b has to a
08:35 - and instead point it to the new node
08:37 - that we're creating and then it takes
08:38 - the next of that new node that it
08:40 - creates
08:40 - points it to b and it takes the previous
08:42 - of that nude node and points it to a
08:44 - and that's it it doesn't have to do
08:45 - anything with the whole rest of the list
08:47 - all the other links in the chain
08:49 - stay exactly the same there's nothing
08:50 - else i have to shift around or do
08:52 - it just impacts that small area of the
08:54 - list rewires a couple of little things
08:56 - and it's done for an arraylist that
08:58 - really shakes a lot of things up so what
09:00 - java actually has to do is it has to
09:02 - create
09:03 - a whole new array behind the scenes
09:04 - that's large enough to fit all the
09:06 - elements that it needs in it and it
09:08 - starts out empty so it might just look
09:10 - kind of something like this then it has
09:12 - to copy all of the existing entries
09:14 - into their right spots in this new array
09:16 - so it'll have john here
09:18 - paul here because we need to leave space
09:20 - to put jerry
09:21 - then george and ringo finally it takes
09:24 - this new element that it has to add
09:25 - and copies it over into its correct spot
09:28 - in the new array
09:29 - all that just to insert one value into
09:31 - one spot in the array now if we want to
09:33 - remove this jerry element from this spot
09:35 - in the list we would have to take each
09:36 - of the elements after it and shift them
09:38 - over one spot and of course if you have
09:40 - thousands or millions of things in your
09:41 - list that's a lot of work
09:42 - however for a linked list you could just
09:44 - get to that spot in the list
09:46 - rewire your next and previous references
09:47 - to just skip the thing you want to
09:49 - delete and you're done
09:50 - you don't need to shift everything else
09:52 - they just stay in their same spot in the
09:53 - chain
09:54 - so because of that adding and removing
09:56 - things from your list
09:57 - are going to be generally way faster in
10:00 - a linked list than they will be
10:02 - in an arraylist now with all that
10:03 - information where does that leave us
10:05 - when would i want to use a linked list
10:07 - and when would i want to use
10:09 - an arraylist now think about what
10:10 - actions are faster
10:12 - in each implementation so in an
10:14 - arraylist getting an element at a
10:16 - certain position
10:17 - is much faster it's instantaneous on the
10:19 - other hand inserting or removing a value
10:21 - is
10:21 - way faster in a linked list than it will
10:24 - be in an arraylist where it has to shift
10:25 - everything around
10:26 - so here's what the bottom line is first
10:28 - of all if you have a tiny list
10:30 - it probably doesn't matter which one you
10:31 - choose computers are just fast enough
10:33 - nowadays where for very small lists
10:35 - either of these are
10:36 - going to perform basically the same and
10:38 - you won't notice any difference but for
10:39 - very large lists it can really matter
10:41 - which one you choose
10:42 - an arraylist we have learned is very
10:43 - good at retrieving specific values
10:46 - but is worse at adding and removing them
10:48 - so if the program that you're working on
10:49 - is kind of
10:50 - creating a static list that doesn't
10:52 - change very much and has to spend a lot
10:54 - of its time just
10:54 - retrieving different values from it if
10:56 - that's the kind of work that your
10:57 - program has to do
10:58 - then arraylist is probably your best bet
11:01 - on the other hand if your program never
11:02 - really has a need to
11:03 - dive in and directly retrieve some
11:05 - random element from your list
11:07 - and your program is instead more focused
11:09 - on having to add things or remove things
11:11 - from especially the beginning or end of
11:13 - your list
11:14 - then a linked list is going to be able
11:15 - to perform those sorts of actions
11:17 - way faster than an arraylist but either
11:20 - way the methods that you call are going
11:22 - to look
11:22 - the same the list commands and the
11:24 - methods for both of these classes are
11:25 - going to be the same with the way they
11:26 - work behind the scenes
11:28 - is what is different about them so
11:29 - that's what's important to know again
11:31 - please consider subscribing if you got
11:32 - some value from this video so you don't
11:33 - miss the brand new video every week and
11:35 - be sure to check out all my existing
11:36 - java tutorials and walkthroughs too i'm
11:38 - sure you'll get a lot of value from them
11:39 - so thanks a lot for watching and i'll
11:41 - see you next time

Cleaned transcript:

in this video we're going to talk all about linked lists in java how you can create them and use them we'll also talk about how they compare to array lists and also when you might want to use an arraylist over a linked list and vice versa my name is john and i do a new java tutorial video every single week so if you like this video and would like to see more please consider subscribing so you don't miss the new video every week i also have a full java course available in the link down in the description if you're interested i think a great place to start would be to just go ahead and create a linked list and an arraylist right here let's just say we wanted to create a list of names so it'll be a list of strings if we wanted to do that with a linked list we would just say a linked list string because it's a linked list of strings and then we need to give it a name so we can just call it names linked list equals new linked list and if you're using java 7 or higher which you should be you can just use the diamond operator here so just the less than and greater than symbols open and close parentheses and a semicolon in older versions of java you had to specify the type the list holds here as well so you would have had to put string here but now with the newer versions of java it can infer that type by the type that you put here so you can just use this diamond operator now of course we need to add the import for linked list which is just java.util.link list now let's look at how we would create an array list and compare them we just say arraylist string give it a name names arraylist equals new arraylist same diamond operator open and close parentheses and a semicolon and then we just need to import java.util.arraylist as you can see clearly the way you create the two is virtually identical and even the way we would add things to both of these lists is the same so if we want to add something to our linked list we just say nameslinklist dot add and then pass in the string we want so we can add uh the name john it's a good name we can copy paste and add some more paul george and ringo and if we want to add elements to our arraylist it's exactly the same so we can just copy paste that code and change this to the names arraylist and we can add things to our arraylist with the exact same method call just names arraylist.ad a big reason these classes are so similar is because they're both part of the java collections framework and they both implement the list interface so what does that mean now what we can do is we can actually nerd out and like control click into this linked list class and look at the code of the linked list and here's where it implements that list interface that i mentioned and we can hop into this list interface and if we press ctrl o in eclipse it shows all of the methods that a list has to support so you can see we have a lot of basic methods in here like getting its size checking if it's empty getting a certain element in it or setting a certain element in it adding an element to it so because both the arraylist and the linked list implement that list interface they both support those exact same list methods so if you already know the type of code that you have to use to work with arraylist those exact same methods that you use with arraylist will work just fine with your linked list so you might be thinking hey john it looks like these are basically exactly the same i use them the same way what's the difference who cares whether i use one over the other the difference between these two classes comes from how they are implemented behind the scenes and depending on what your specific program actually has to do with these lists that it creates using one versus the other could dramatically impact the performance of your program so let's talk about how these are implemented let's start with arraylist as you might know arraylist actually uses an array as its underlying data structure and just as like a quick refresher you could create like an array of strings in java like this like string array names equals new string array and you have to give it a size let's say we gave it size 4. as you may already know an array in java is a fixed length so once i've given this names array a size of 4 this array will always have exactly four elements in it what if you start your list with four things in it and later on you find you want to add more things to it well you can't you're gonna have to make a brand new array that's a bigger size and then you can add more things to it but if you had to program that yourself that would be a whole lot of work right so what arraylist does is it does all of that work behind the scenes so you never have to know how it's working or that it's even doing that but notice i didn't even have to give it a size here i think by default it gives it a size of 10 an initial capacity of 10. once it reaches that capacity it automatically creates a new array of a larger capacity and moves all of those elements into that new larger array but all of that dynamic resizing can take quite a bit of time and resources now let's compare that implementation with how the linked list works behind the scenes here's kind of a visual representation of how a linked list works a full credit to a geeksforgeeks.org for this image instead of having an array we just have a bunch of different elements each element is called a node and each element in your list has a pointer a reference to the next node so the linked list class starts with just a pointer to the first element in the list and after that each node each element in the list just has a reference a pointer sort of to the next node so the first one has a reference to the second the second one has a reference to the third etc so it's essentially like a big chain like a bunch of paper clips attached together so the linked list itself has just a reference to that first element and then you follow those pointers down the line to get to whatever element that you need you can also have what's called a doubly linked list and that is actually what the linked list class in java is it's a doubly linked list so all that means is that in addition to having a reference to the next node in the list each node also has a reference to the previous element in the list and it's not shown in this image but in the linked list implementation in java it also has a pointer to the very last element called the tail so java starts with a reference to the beginning of the list and the end of the list but to get to any element inside the list it has to follow those pointers to get to whatever element it needs to in any given time those differences in the underlying implementation of both of these classes have dramatic impacts on the performance of some very basic things that you can do with your lists let's say i just wanted to grab the third element in my list and print it out so in this case that would just be george well all i have to do is names linked list dot get and to get the third element in my list i would pass in the number two because it's zero based like everything else in programming so if i wanted to print that out it would just be system.out.printline and i can run my program and of course it prints out george and of course because the arraylist also supports this get method we can do the exact same thing with our arraylist and they both print out george but when you call this method on each of these two classes what they have to do behind the scenes is way different in the arraylist behind the scenes it uses an array to store all of the values and arrays have super fast what's called random access that means you can tell java to get any specific element in that list it doesn't matter which one and it runs in constant time that means it doesn't matter which element you ask java to get it takes the same amount of time to get it it takes the same amount of time to get the first element as it does to get the 5000 element or any element in between so down here when i say hey arraylist give me the object at index2 it does it immediately it can go right to that index and grab me that george value and print it out but how it works in the linked list is way different in a linked list java doesn't start with a reference to all the elements in between it just starts with a reference to the beginning element and the end element and if it wants to get any in between it has to follow these next or previous pointers to get the element that it wants for example if you had a list of like a thousand elements and you wanted to get the 400th element it can't go directly there it has to just start at the first element and keep getting the next value over and over and over again until it gets to that 400th element and then it can finally return it that operation is way slower for a linked list than it is for an arraylist however where a linked list typically kicks the heck out of an arraylist is when you need to add or remove elements let's say i want to do something really simple let's say i wanted to put the name jerry right between john and paul in my list well i can easily do that with names linked list dot add now to insert a value in a certain spot in your list you have to pass in the index that you want that value to go in so because i want it to be second in the list i'll give it an index of one and then i pass the value that i want added which would be jerry and of course the command in the arraylist is going to be exactly the same now let's compare how that insert has to work in both classes so in the linked list if i wanted to insert an element here in between a and b what java has to do is just start at the beginning of the list until it gets to the spot where it wants to insert the value and it just has to change this next reference that a has to be and instead point it to the new node that we're inserting and it also has to change the previous reference that b has to a and instead point it to the new node that we're creating and then it takes the next of that new node that it creates points it to b and it takes the previous of that nude node and points it to a and that's it it doesn't have to do anything with the whole rest of the list all the other links in the chain stay exactly the same there's nothing else i have to shift around or do it just impacts that small area of the list rewires a couple of little things and it's done for an arraylist that really shakes a lot of things up so what java actually has to do is it has to create a whole new array behind the scenes that's large enough to fit all the elements that it needs in it and it starts out empty so it might just look kind of something like this then it has to copy all of the existing entries into their right spots in this new array so it'll have john here paul here because we need to leave space to put jerry then george and ringo finally it takes this new element that it has to add and copies it over into its correct spot in the new array all that just to insert one value into one spot in the array now if we want to remove this jerry element from this spot in the list we would have to take each of the elements after it and shift them over one spot and of course if you have thousands or millions of things in your list that's a lot of work however for a linked list you could just get to that spot in the list rewire your next and previous references to just skip the thing you want to delete and you're done you don't need to shift everything else they just stay in their same spot in the chain so because of that adding and removing things from your list are going to be generally way faster in a linked list than they will be in an arraylist now with all that information where does that leave us when would i want to use a linked list and when would i want to use an arraylist now think about what actions are faster in each implementation so in an arraylist getting an element at a certain position is much faster it's instantaneous on the other hand inserting or removing a value is way faster in a linked list than it will be in an arraylist where it has to shift everything around so here's what the bottom line is first of all if you have a tiny list it probably doesn't matter which one you choose computers are just fast enough nowadays where for very small lists either of these are going to perform basically the same and you won't notice any difference but for very large lists it can really matter which one you choose an arraylist we have learned is very good at retrieving specific values but is worse at adding and removing them so if the program that you're working on is kind of creating a static list that doesn't change very much and has to spend a lot of its time just retrieving different values from it if that's the kind of work that your program has to do then arraylist is probably your best bet on the other hand if your program never really has a need to dive in and directly retrieve some random element from your list and your program is instead more focused on having to add things or remove things from especially the beginning or end of your list then a linked list is going to be able to perform those sorts of actions way faster than an arraylist but either way the methods that you call are going to look the same the list commands and the methods for both of these classes are going to be the same with the way they work behind the scenes is what is different about them so that's what's important to know again please consider subscribing if you got some value from this video so you don't miss the brand new video every week and be sure to check out all my existing java tutorials and walkthroughs too i'm sure you'll get a lot of value from them so thanks a lot for watching and i'll see you next time
