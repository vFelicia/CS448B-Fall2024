With timestamps:

00:00 - in this video we'll talk all about
00:01 - optionals in java optionals are tough to
00:04 - understand and even when developers do
00:06 - understand them they're constantly using
00:07 - them the wrong way so we're going to
00:09 - clear up exactly what they are when they
00:11 - should be used and how to use them
00:13 - before that this video is sponsored by
00:15 - flexispot flexispot makes high quality
00:18 - reasonably priced ergonomic office
00:20 - furniture and is probably best known for
00:22 - their standing desks they have a
00:23 - ridiculous number of desks to choose
00:25 - from each with tons of customization
00:27 - options this one is the e7 pro plus
00:30 - standing desk i'm recording on it
00:32 - right now
00:34 - its carbon steel frame and dual motor
00:36 - design make it capable of holding up to
00:39 - 355 pounds so you can keep all of your
00:41 - work school and gaming devices and 100
00:44 - pounds set of adjustable dumbbells on
00:46 - top with no worry it has a crazy height
00:49 - range from 22.8 inches all the way to
00:52 - 48.4 inches i'm six foot five and it
00:54 - goes even higher than i need it to you
00:57 - can program in four height presets to
00:59 - quickly go from sitting to standing with
01:01 - a single touch there's even a usb port
01:03 - right here on the side of the keypad so
01:05 - you can conveniently charge your devices
01:07 - i use that all the time the e7's quality
01:10 - and smart design make it the best
01:12 - ergonomic desk choice for your home
01:14 - office be sure to check it out through
01:15 - my link down in the description because
01:17 - you'll get an extra thirty dollars off
01:18 - your purchase plexi spot is also having
01:20 - their own prime day sale on june 29th
01:23 - and 30th with up to a hundred dollars
01:25 - off their products so start customizing
01:27 - your own standing desk through my link
01:28 - down in the description to get that
01:30 - extra 30 off and i know you'll love it
01:32 - as much as i do now let's get to it
01:34 - first just what exactly is an optional
01:37 - all an optional is is a container that
01:40 - either has something in it or doesn't
01:42 - that probably sounds super weird right
01:44 - what's the point of that so let's start
01:46 - right away with an example let's say
01:48 - that we had a simple method in our
01:50 - program that took in the name of a cat
01:52 - as a parameter and then went to the
01:54 - database and retrieved a cat object with
01:58 - that name and returned it so that would
02:00 - be just private static cat because we
02:03 - want to return a cat and we'll call this
02:05 - method find cat by name and we'll take
02:08 - in as a parameter that string name for
02:11 - the cat that we're looking for now in a
02:13 - real application this would actually
02:15 - fetch a cat from the database but here
02:17 - we're just going to create a cat object
02:19 - with that name and return it so to do
02:21 - that we'll just say cat cat equals new
02:24 - cat now this constructor takes the cat's
02:26 - name as the first parameter so we'll
02:28 - just enter in the name that's passed
02:30 - into this method and it takes the cat's
02:33 - age as the second parameter so we'll
02:34 - just give it the age of three and then
02:36 - all we have to do is return that cat so
02:39 - now back here in our main method we can
02:41 - call this fine cat by name method and we
02:44 - can pass in the name of the cat that we
02:46 - want to find so let's just pass in bread
02:49 - so that method will of course return the
02:51 - cat it retrieved from the database and
02:53 - if we want we can store it in variable
02:55 - so let's do that cat my cat equals the
02:59 - result of this method call so now of
03:01 - course if we want we can print out the
03:03 - age of the cat that it retrieved so
03:05 - print out my cat dot get age and of
03:08 - course if we run it that all works fine
03:10 - and it prints out three but what if
03:12 - there is no cat named fred in the
03:15 - database in that case what should a
03:18 - method like this return well it probably
03:20 - makes sense to just return null right if
03:23 - that cat doesn't exist it doesn't make
03:25 - sense to return a cat it just makes
03:27 - sense to return null but now we have a
03:29 - problem this method is now returning
03:32 - null which means that we're now trying
03:34 - to call the get age method on a null
03:37 - variable and of course if we try that we
03:39 - will get a no pointer exception you see
03:42 - this kind of situation all the time and
03:44 - the only way we can really handle this
03:46 - situation is with a null check just
03:48 - something like if my cat does not equal
03:51 - null then go ahead and print out its age
03:55 - otherwise maybe we print out some
03:57 - default age
03:58 - like zero so this is the way you had to
04:01 - handle this type of situation for a long
04:03 - time in java this whole situation is
04:05 - where optionals come in optionals are a
04:08 - better way to handle a situation where a
04:11 - method like this might not have a value
04:13 - to return so here's the idea instead of
04:16 - returning an actual cat object or null
04:19 - it instead returns
04:21 - an optional an optional is like this box
04:24 - it either contains the cat or it doesn't
04:26 - so basically now what our method will do
04:28 - is if it finds a cat with that name in
04:30 - the database it will put that cat in the
04:33 - optional box
04:35 - and return it and if it doesn't find
04:37 - anything it will just return the empty
04:39 - box and then the code that is processing
04:41 - this return value can ask this optional
04:44 - box whether it contains a value or not
04:46 - and then do the appropriate thing if it
04:48 - does or doesn't so really the main
04:51 - purpose of an optional is to explicitly
04:53 - tell the user of a method that the value
04:56 - that they're looking for might not exist
04:59 - and they have to account for that
05:00 - possibility so maybe instead of just
05:02 - thinking of optionals as a box you can
05:05 - instead think of it as a box that says
05:07 - hey i might not have a value in here so
05:09 - you have to be prepared to handle that
05:11 - situation so now that we know that we
05:13 - want to return an optional of a cat here
05:16 - in our method instead of just a cat
05:17 - object how exactly do we go about doing
05:20 - that so all we have to do is instead of
05:22 - having cat as our return type we'll
05:24 - instead have optional of cat so we just
05:27 - have optional and then cat in angle
05:30 - brackets and here we have this cat
05:32 - object to return but we have to put that
05:34 - cat inside the optional box first the
05:37 - easiest way to do that is with this
05:39 - method here
05:40 - optional.of nullable and then you just
05:43 - pass into this method as a parameter the
05:46 - thing you want to create an optional of
05:48 - which here is cat now this value that
05:51 - you pass into the of nullable method can
05:54 - either be null or not if it's not null
05:56 - it'll just put that value into the
05:58 - optional as we said but if it is null
06:00 - like if this cat didn't exist in the
06:02 - database it will instead just create an
06:05 - empty optional as a side note if you
06:07 - know for sure that the thing that you
06:10 - want to put into this optional is not
06:12 - null then you can instead just use
06:15 - optional dot of but if you pass in
06:17 - something that is null to this method
06:19 - you're going to get an exception so if
06:21 - you're not sure whether or not the thing
06:23 - that you're passing in is null just go
06:25 - ahead and use of nullable also if you
06:28 - ever want to explicitly create an empty
06:31 - optional you can just use optional dot
06:34 - empty anyway now up here of course we're
06:37 - not just getting a cat object anymore
06:39 - we're getting an optional of cat
06:42 - returned from this method call so we
06:44 - have to change this to optional of cat
06:47 - and we'll change the name to optional
06:50 - cat so now instead of having just a cat
06:52 - we have an optional that may or may not
06:55 - contain a cat so how do we actually get
06:57 - the cat out of this optional first let
06:59 - me show you how basically everybody does
07:01 - it when they first use optionals so
07:04 - there is a method on each optional just
07:07 - called get and the get method will
07:09 - return the value that's inside the
07:11 - optional so you can just use this get
07:14 - method which will return our original
07:16 - cat object and then we can call get age
07:19 - on it and of course like before if we
07:21 - want we can go ahead and print that out
07:24 - and it works however if there is no
07:27 - value in this optional to get so that's
07:30 - like the case if this method didn't find
07:33 - that cat in the database it might create
07:36 - an optional of null so this will return
07:39 - an empty optional and if you try to call
07:42 - git on an empty optional
07:44 - you get
07:45 - a no such element exception which will
07:48 - ruin your day so that's a problem right
07:50 - it's just as bad as a null pointer
07:52 - exception so then most developers figure
07:54 - that out pretty quickly okay i have to
07:56 - do a check on this optional to see if
07:59 - there's a value in it before i call dot
08:01 - git but luckily there's a method that
08:03 - you can call on the optional to check
08:06 - whether there's a value present so we
08:07 - can just call optional cat dot is
08:10 - present is present will return true if
08:12 - there is a value in the optional and
08:14 - false if it's empty so we can set things
08:16 - up like this uh if optional cat dot is
08:19 - present then go ahead and print out the
08:22 - age otherwise like we did before we'll
08:25 - go ahead and print out some default like
08:27 - zero and we can go ahead and run it and
08:30 - it's all good it prints out the default
08:31 - of zero if this optional was empty well
08:34 - perfect that settles it
08:36 - right
08:37 - except hey
08:38 - this whole setup looks suspiciously
08:41 - exactly like the null check that we were
08:44 - trying to get away from in the first
08:45 - place so what's the deal right all of
08:48 - that work just to get something that
08:50 - looks almost exactly like we had before
08:52 - so there's a couple of things here first
08:55 - remember that the primary reason for
08:57 - returning an optional in a method like
08:59 - this is to blatantly convey to the user
09:02 - of this method that it might not return
09:05 - a value that they're looking for and
09:07 - make sure that they know that they have
09:09 - to deal with that situation so even if
09:11 - the end result did look similar it's
09:13 - still making that clear to the user
09:16 - just by returning an optional in the
09:18 - first place but also optional offers
09:21 - some other nice methods to use instead
09:23 - of using this is present get combination
09:26 - and actually the people who created java
09:28 - optionals kind of regret that they even
09:31 - offered this get method in the first
09:33 - place because it's just so easy for
09:35 - people to call something that looks so
09:37 - harmless as dot get without checking is
09:40 - present first so i think when you're
09:42 - first learning the concept of optionals
09:45 - and how to work with them it's fine to
09:47 - use this is present and get combination
09:50 - just to get the feel of things as long
09:52 - as you are always checking is present
09:54 - every time before you call git but once
09:57 - you get more familiar with them there
09:59 - are nicer methods you can use to work
10:00 - with them one of the methods that's
10:02 - commonly used is actually called or else
10:06 - kind of a weird name for a method right
10:08 - almost sounds like a threat optional cat
10:11 - or else but what this method does is
10:13 - kind of interesting so if this optional
10:16 - contains a value it will just return
10:18 - that value but if this optional is empty
10:22 - this method will instead return the
10:25 - value that you pass in here as a
10:27 - parameter you can kind of think of it as
10:29 - a default so we could have something
10:30 - like cat my cat equals optional cat or
10:35 - else so maybe as our default cat we
10:38 - could say new cat and just give it a
10:40 - name of unknown and an age of zero so
10:44 - what this will do is if this optional
10:46 - contains a cat it will just return it
10:48 - exactly the same way that the get method
10:51 - did however
10:53 - or else if the optional is empty instead
10:56 - of just blowing up this method will
10:58 - return this default unknown cat with an
11:02 - age of zero so that's a pretty elegant
11:04 - solution right it gives you the value if
11:06 - it's there but if it's not it doesn't
11:08 - ever throw an exception or anything it
11:10 - just provides you the default value
11:12 - another method that's available is
11:14 - called or else get if you're comfortable
11:17 - with lambdas and check out this lambdas
11:19 - video if you're not you can use this
11:20 - method and pass in a lambda supplier
11:23 - function so with this method if the
11:25 - optional contains a value as before it
11:27 - will just return it but if the optional
11:29 - is empty it will use your lambda method
11:32 - to supply the default value to return
11:35 - again if you aren't super comfortable
11:36 - with lambdas yet don't worry too much
11:38 - about this method but if you are it's
11:40 - good to know about ironically there's
11:42 - also this method called or else throw
11:45 - now what this method does is if the
11:47 - optional contains a value it just
11:49 - returns it but if the optional is empty
11:51 - it will throw a no such element
11:53 - exception now if that sounds familiar to
11:56 - you it's because that's exactly the same
11:58 - thing that the dot get method does those
12:01 - two methods do exactly the same thing
12:03 - there is no difference in fact in the
12:06 - javadocs for git so if you hover over
12:09 - get here in the ide it tells you api
12:12 - note the preferred alternative to this
12:14 - method is or else throw but here's an
12:17 - example of some of the real power of
12:19 - optionals notice that in our situation
12:22 - we were mainly interested in just
12:24 - getting the age of the cat that was
12:26 - pulled back from the database right well
12:28 - we can actually do that with optionals
12:31 - with just a couple of chained method
12:33 - calls so what we can do is take our
12:35 - optional cat and then call a method on
12:37 - it called map what this map method
12:40 - allows us to do is to take our cat
12:43 - optional and transform it into an
12:46 - optional of another type and it does
12:48 - that with a method that we pass in as a
12:50 - parameter that may sound a bit weird but
12:53 - let me show you what i mean so we can
12:54 - actually pass into this method cat colon
12:58 - colon get age
13:00 - again if you're not really used to
13:01 - lambdas yet this looks a little weird
13:03 - but what this method call will return is
13:06 - an optional containing the result of
13:09 - calling the getage method on the cat
13:12 - that was in our original cat optional if
13:15 - our original cat optional was empty then
13:18 - the result of this method call will just
13:19 - be an empty optional as well and it
13:21 - won't throw any exceptions or anything
13:23 - so now with this method call we have an
13:25 - optional that contains the age of that
13:28 - cat and to safely get the value of that
13:31 - optional we can just use a method like
13:34 - or else which if you remember we'll just
13:36 - return the value inside the optional if
13:39 - it exists and otherwise it will return
13:41 - some default that we give it here it
13:43 - probably makes sense to return a default
13:46 - age of zero so now if our original cat
13:50 - optional has a value and its age has a
13:52 - value then this will successfully return
13:55 - that age but if either this original cat
13:58 - optional was empty or its age was empty
14:01 - it will just return a default age of
14:03 - zero and it does all of that logic with
14:06 - just this tiny bit of code of course you
14:08 - can have even more layers of
14:10 - transformation in here as well and once
14:12 - you get used to using it it can be
14:13 - really powerful and there are other
14:15 - methods that are offered by optionals as
14:17 - well and i encourage you to take some
14:19 - time and go through them and play around
14:21 - with them so now with all of that said a
14:23 - question you might have is so where
14:26 - should i be using optionals should i use
14:28 - them anywhere something might be null
14:31 - what exactly should i do and here's the
14:33 - answer that not everybody wants to hear
14:35 - optionals are really intended to only be
14:38 - used
14:39 - how we're using them here and that's as
14:42 - a return type where without optionals
14:45 - your method has the possibility of
14:47 - returning null so it is certainly
14:49 - technically possible to have an optional
14:53 - as like a method parameter optionals are
14:55 - just like any other objects so
14:57 - technically you can create and use them
15:00 - wherever you want but the truth is that
15:02 - optionals were only intended to be used
15:04 - as a return type and that's to blatantly
15:07 - tell the user of that method that the
15:09 - value that they're looking for might not
15:12 - exist and they have to deal with that
15:13 - situation they're not intended to be
15:15 - used just anywhere you have a null
15:18 - variable it's meant for just this type
15:20 - of situation so try not to overuse them
15:23 - but in this type of situation they can
15:25 - add a lot of value and help you avoid
15:28 - null pointer exceptions as always if you
15:30 - enjoyed this video or learned something
15:32 - please let me know by hitting the like
15:34 - button and be sure to subscribe so you
15:36 - don't miss each new java tutorial and be
15:38 - sure to check out my full java course in
15:40 - the link down in the description as
15:41 - always thank you so much for watching i
15:43 - really do appreciate you being here with
15:45 - me
15:46 - and i'll see you next time

Cleaned transcript:

in this video we'll talk all about optionals in java optionals are tough to understand and even when developers do understand them they're constantly using them the wrong way so we're going to clear up exactly what they are when they should be used and how to use them before that this video is sponsored by flexispot flexispot makes high quality reasonably priced ergonomic office furniture and is probably best known for their standing desks they have a ridiculous number of desks to choose from each with tons of customization options this one is the e7 pro plus standing desk i'm recording on it right now its carbon steel frame and dual motor design make it capable of holding up to 355 pounds so you can keep all of your work school and gaming devices and 100 pounds set of adjustable dumbbells on top with no worry it has a crazy height range from 22.8 inches all the way to 48.4 inches i'm six foot five and it goes even higher than i need it to you can program in four height presets to quickly go from sitting to standing with a single touch there's even a usb port right here on the side of the keypad so you can conveniently charge your devices i use that all the time the e7's quality and smart design make it the best ergonomic desk choice for your home office be sure to check it out through my link down in the description because you'll get an extra thirty dollars off your purchase plexi spot is also having their own prime day sale on june 29th and 30th with up to a hundred dollars off their products so start customizing your own standing desk through my link down in the description to get that extra 30 off and i know you'll love it as much as i do now let's get to it first just what exactly is an optional all an optional is is a container that either has something in it or doesn't that probably sounds super weird right what's the point of that so let's start right away with an example let's say that we had a simple method in our program that took in the name of a cat as a parameter and then went to the database and retrieved a cat object with that name and returned it so that would be just private static cat because we want to return a cat and we'll call this method find cat by name and we'll take in as a parameter that string name for the cat that we're looking for now in a real application this would actually fetch a cat from the database but here we're just going to create a cat object with that name and return it so to do that we'll just say cat cat equals new cat now this constructor takes the cat's name as the first parameter so we'll just enter in the name that's passed into this method and it takes the cat's age as the second parameter so we'll just give it the age of three and then all we have to do is return that cat so now back here in our main method we can call this fine cat by name method and we can pass in the name of the cat that we want to find so let's just pass in bread so that method will of course return the cat it retrieved from the database and if we want we can store it in variable so let's do that cat my cat equals the result of this method call so now of course if we want we can print out the age of the cat that it retrieved so print out my cat dot get age and of course if we run it that all works fine and it prints out three but what if there is no cat named fred in the database in that case what should a method like this return well it probably makes sense to just return null right if that cat doesn't exist it doesn't make sense to return a cat it just makes sense to return null but now we have a problem this method is now returning null which means that we're now trying to call the get age method on a null variable and of course if we try that we will get a no pointer exception you see this kind of situation all the time and the only way we can really handle this situation is with a null check just something like if my cat does not equal null then go ahead and print out its age otherwise maybe we print out some default age like zero so this is the way you had to handle this type of situation for a long time in java this whole situation is where optionals come in optionals are a better way to handle a situation where a method like this might not have a value to return so here's the idea instead of returning an actual cat object or null it instead returns an optional an optional is like this box it either contains the cat or it doesn't so basically now what our method will do is if it finds a cat with that name in the database it will put that cat in the optional box and return it and if it doesn't find anything it will just return the empty box and then the code that is processing this return value can ask this optional box whether it contains a value or not and then do the appropriate thing if it does or doesn't so really the main purpose of an optional is to explicitly tell the user of a method that the value that they're looking for might not exist and they have to account for that possibility so maybe instead of just thinking of optionals as a box you can instead think of it as a box that says hey i might not have a value in here so you have to be prepared to handle that situation so now that we know that we want to return an optional of a cat here in our method instead of just a cat object how exactly do we go about doing that so all we have to do is instead of having cat as our return type we'll instead have optional of cat so we just have optional and then cat in angle brackets and here we have this cat object to return but we have to put that cat inside the optional box first the easiest way to do that is with this method here optional.of nullable and then you just pass into this method as a parameter the thing you want to create an optional of which here is cat now this value that you pass into the of nullable method can either be null or not if it's not null it'll just put that value into the optional as we said but if it is null like if this cat didn't exist in the database it will instead just create an empty optional as a side note if you know for sure that the thing that you want to put into this optional is not null then you can instead just use optional dot of but if you pass in something that is null to this method you're going to get an exception so if you're not sure whether or not the thing that you're passing in is null just go ahead and use of nullable also if you ever want to explicitly create an empty optional you can just use optional dot empty anyway now up here of course we're not just getting a cat object anymore we're getting an optional of cat returned from this method call so we have to change this to optional of cat and we'll change the name to optional cat so now instead of having just a cat we have an optional that may or may not contain a cat so how do we actually get the cat out of this optional first let me show you how basically everybody does it when they first use optionals so there is a method on each optional just called get and the get method will return the value that's inside the optional so you can just use this get method which will return our original cat object and then we can call get age on it and of course like before if we want we can go ahead and print that out and it works however if there is no value in this optional to get so that's like the case if this method didn't find that cat in the database it might create an optional of null so this will return an empty optional and if you try to call git on an empty optional you get a no such element exception which will ruin your day so that's a problem right it's just as bad as a null pointer exception so then most developers figure that out pretty quickly okay i have to do a check on this optional to see if there's a value in it before i call dot git but luckily there's a method that you can call on the optional to check whether there's a value present so we can just call optional cat dot is present is present will return true if there is a value in the optional and false if it's empty so we can set things up like this uh if optional cat dot is present then go ahead and print out the age otherwise like we did before we'll go ahead and print out some default like zero and we can go ahead and run it and it's all good it prints out the default of zero if this optional was empty well perfect that settles it right except hey this whole setup looks suspiciously exactly like the null check that we were trying to get away from in the first place so what's the deal right all of that work just to get something that looks almost exactly like we had before so there's a couple of things here first remember that the primary reason for returning an optional in a method like this is to blatantly convey to the user of this method that it might not return a value that they're looking for and make sure that they know that they have to deal with that situation so even if the end result did look similar it's still making that clear to the user just by returning an optional in the first place but also optional offers some other nice methods to use instead of using this is present get combination and actually the people who created java optionals kind of regret that they even offered this get method in the first place because it's just so easy for people to call something that looks so harmless as dot get without checking is present first so i think when you're first learning the concept of optionals and how to work with them it's fine to use this is present and get combination just to get the feel of things as long as you are always checking is present every time before you call git but once you get more familiar with them there are nicer methods you can use to work with them one of the methods that's commonly used is actually called or else kind of a weird name for a method right almost sounds like a threat optional cat or else but what this method does is kind of interesting so if this optional contains a value it will just return that value but if this optional is empty this method will instead return the value that you pass in here as a parameter you can kind of think of it as a default so we could have something like cat my cat equals optional cat or else so maybe as our default cat we could say new cat and just give it a name of unknown and an age of zero so what this will do is if this optional contains a cat it will just return it exactly the same way that the get method did however or else if the optional is empty instead of just blowing up this method will return this default unknown cat with an age of zero so that's a pretty elegant solution right it gives you the value if it's there but if it's not it doesn't ever throw an exception or anything it just provides you the default value another method that's available is called or else get if you're comfortable with lambdas and check out this lambdas video if you're not you can use this method and pass in a lambda supplier function so with this method if the optional contains a value as before it will just return it but if the optional is empty it will use your lambda method to supply the default value to return again if you aren't super comfortable with lambdas yet don't worry too much about this method but if you are it's good to know about ironically there's also this method called or else throw now what this method does is if the optional contains a value it just returns it but if the optional is empty it will throw a no such element exception now if that sounds familiar to you it's because that's exactly the same thing that the dot get method does those two methods do exactly the same thing there is no difference in fact in the javadocs for git so if you hover over get here in the ide it tells you api note the preferred alternative to this method is or else throw but here's an example of some of the real power of optionals notice that in our situation we were mainly interested in just getting the age of the cat that was pulled back from the database right well we can actually do that with optionals with just a couple of chained method calls so what we can do is take our optional cat and then call a method on it called map what this map method allows us to do is to take our cat optional and transform it into an optional of another type and it does that with a method that we pass in as a parameter that may sound a bit weird but let me show you what i mean so we can actually pass into this method cat colon colon get age again if you're not really used to lambdas yet this looks a little weird but what this method call will return is an optional containing the result of calling the getage method on the cat that was in our original cat optional if our original cat optional was empty then the result of this method call will just be an empty optional as well and it won't throw any exceptions or anything so now with this method call we have an optional that contains the age of that cat and to safely get the value of that optional we can just use a method like or else which if you remember we'll just return the value inside the optional if it exists and otherwise it will return some default that we give it here it probably makes sense to return a default age of zero so now if our original cat optional has a value and its age has a value then this will successfully return that age but if either this original cat optional was empty or its age was empty it will just return a default age of zero and it does all of that logic with just this tiny bit of code of course you can have even more layers of transformation in here as well and once you get used to using it it can be really powerful and there are other methods that are offered by optionals as well and i encourage you to take some time and go through them and play around with them so now with all of that said a question you might have is so where should i be using optionals should i use them anywhere something might be null what exactly should i do and here's the answer that not everybody wants to hear optionals are really intended to only be used how we're using them here and that's as a return type where without optionals your method has the possibility of returning null so it is certainly technically possible to have an optional as like a method parameter optionals are just like any other objects so technically you can create and use them wherever you want but the truth is that optionals were only intended to be used as a return type and that's to blatantly tell the user of that method that the value that they're looking for might not exist and they have to deal with that situation they're not intended to be used just anywhere you have a null variable it's meant for just this type of situation so try not to overuse them but in this type of situation they can add a lot of value and help you avoid null pointer exceptions as always if you enjoyed this video or learned something please let me know by hitting the like button and be sure to subscribe so you don't miss each new java tutorial and be sure to check out my full java course in the link down in the description as always thank you so much for watching i really do appreciate you being here with me and i'll see you next time
