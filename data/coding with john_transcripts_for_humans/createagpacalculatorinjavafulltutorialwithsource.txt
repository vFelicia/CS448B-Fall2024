With timestamps:

00:00 - hey guys john here from coding with john
00:02 - today we're going to be writing a simple
00:04 - gpa calculator in
00:05 - java we're going to be starting from
00:07 - scratch so let's get to it
00:09 - all right so we're going to start from
00:11 - scratch here um in
00:12 - eclipse which is the ide we're going to
00:15 - be using
00:16 - create a brand new java project called
00:18 - gpa
00:20 - calculator
00:23 - and we're just going to we're not going
00:24 - to make it too complicated we're just
00:26 - going to keep it
00:28 - one class um with one main method we
00:32 - won't
00:32 - um break it out too much it's a pretty
00:34 - simple little uh small project
00:37 - um named which is just a main class
00:42 - okay all right so the formula for
00:46 - calculating gpa is
00:50 - so so basically it's total points
00:53 - divided by
00:54 - total credits attempted and what that
00:57 - means is
00:58 - so you get the number of points for a
01:00 - class by taking
01:02 - so like so points or class
01:06 - equals the grade value
01:11 - times the credits
01:16 - so and the grade value comes from
01:19 - a is four
01:23 - b is three etcetera etcetera etcetera
01:26 - and that's why when you get all a's you
01:27 - get a
01:28 - 4.0 um so for example if you have
01:31 - a one class that's worth one credit
01:35 - um you would have
01:39 - uh so you have the the the total the
01:43 - points for that class would be the grade
01:45 - value which is four for if
01:48 - you got an a in that class your grade
01:51 - value would be four times the credits
01:52 - which is
01:53 - one or so credit switch was one divided
01:56 - by the total credits which was one
01:58 - and your gpa would be 4.0 and basically
02:01 - you get your
02:02 - your total gpa by taking all the total
02:05 - points you get from every class
02:06 - divided by all the total credits
02:08 - attempted for every class
02:11 - so um how we're going to do is we're
02:14 - going to work kind of
02:15 - iteratively and get a little bit to work
02:17 - test it
02:18 - and add a little bit more until we have
02:20 - a robust uh
02:22 - gpa calculator that we want so the first
02:24 - thing i think we need to do is we need
02:25 - to be able to get input from the user
02:27 - about um we need to get
02:30 - at least for one class the the total
02:33 - that we need to get their grade and the
02:34 - total number of credits
02:36 - so um we're going to just get input from
02:40 - the keyboard from the
02:41 - console i always forget how to do that
02:44 - so i'm going to take
02:45 - um the w3schools scanner
02:49 - class to get the input we're not going
02:50 - to call it my object let's call it
02:52 - scanner
02:57 - system.in and so let's see
03:00 - we're going to prompt them to
03:04 - enter their credits
03:10 - enter number of credits
03:13 - for the class and we're gonna get it
03:17 - here um
03:21 - our credits so the credits are gonna
03:24 - be the next line in the scanner and
03:27 - we yeah sure let's actually let's test
03:30 - it by
03:31 - outputting what they what they put in
03:33 - just going to print
03:34 - credits you don't need this these extra
03:38 - comments
03:40 - um and this is complaining that we need
03:42 - to uh close the scanner which we can
03:45 - just do that at the end
03:48 - okay so basically what this does is say
03:50 - we create a new scanner so we can get
03:52 - some some input from the user
03:55 - we're going to print out hey please
03:56 - enter the credits and then we're going
03:57 - to get them
03:58 - that from the input and just print it
04:01 - out
04:01 - so that's it um let's go ahead and
04:05 - run it enter number of credits
04:08 - one and it prints one and that's it cool
04:11 - working fine so now we can still use the
04:14 - same scanner
04:15 - and we're going to get the number
04:19 - of uh sorry the letter grade
04:24 - enter grade
04:28 - and the string grade is the next line
04:32 - let's go ahead and again
04:35 - i'll just print that out to make sure it
04:38 - works
04:40 - and our number of credits one grade
04:44 - uh b prints out one and b
04:49 - cool all right so now we need to
04:54 - so let's try and get the gpa for this
04:57 - one
04:57 - class before we start making a loop and
05:00 - getting
05:00 - the gpa for a whole bunch of classes um
05:03 - so
05:05 - let's do this calculation for the one
05:07 - class so we the number of credits is
05:09 - easy
05:10 - um we'll just take the number that they
05:12 - put in
05:13 - there's nothing we have to do with that
05:14 - that's the total credits we need to find
05:16 - these total points and as we said those
05:17 - total points for a class is the grade
05:19 - value which is
05:20 - four for a b for three etcetera times
05:22 - the number of credits
05:24 - so what we're going to do here
05:28 - let's see um we're going to take this
05:31 - grade that they enter and calculate the
05:33 - points
05:35 - so integer points we're going to assign
05:38 - it to this
05:39 - variable um just started at zero
05:44 - and then we're gonna look for all the
05:46 - inputs that the user could give so
05:48 - if grade
05:52 - equals a or sorry that's how you want to
05:56 - do it if grade dot
05:58 - equals ignore case a so if they type in
06:02 - an uppercase a or lowercase a this will
06:04 - work
06:05 - um let's see we want to do points
06:08 - is equal to this calculation which is
06:10 - the grade value times credits
06:13 - so we take the credits that we already
06:15 - have here
06:19 - and we're going to need to make it an
06:20 - integer we are going to have to do that
06:23 - because we can't do a multiplication but
06:24 - we'll figure it out in just a second so
06:25 - it'll be the number of credits
06:27 - times um
06:30 - 4 because 4 is the point value for
06:36 - uh for an a
06:39 - and actually we could even break this
06:41 - out so what i was going to say we could
06:42 - do
06:43 - uh actually first let's back up for a
06:46 - second we need to
06:46 - make the get this uh as an integer
06:51 - integer.parseint
06:54 - credit so now it's going to take the
06:55 - credits and parse an integer out of it
06:57 - so perfect now that works so what i was
06:59 - going to say is then we could
07:01 - take this and do else if you know it's a
07:04 - b
07:06 - dude times three but we have a little
07:07 - bit of duplicate code here we're doing
07:08 - this multiplication each time we really
07:10 - have to do that
07:12 - um so
07:16 - let's get an integer
07:20 - grade value
07:24 - uh i'll initialize that to zero also
07:27 - just so we initialize it to something
07:28 - and we're just going to
07:29 - get the grade value here grade value
07:31 - equals 4.
07:34 - and in here grade value equals 3. so now
07:37 - we're not doing that multiplication
07:38 - we're not duplicating that code but
07:40 - it makes it just a little bit cleaner so
07:43 - b
07:44 - c d f so for a c
07:49 - for a d or an f
07:53 - and so for a c it's going to be 2 for a
07:56 - d
07:56 - it's going to be one and for an f it's
07:59 - going to be zero
08:00 - and then um we'll deal with what happens
08:04 - if they don't send in one of those
08:05 - uh hey let's go ahead and do it else so
08:08 - they sent in something bad
08:10 - um please
08:13 - we're gonna we're just gonna for now
08:15 - print out oh you printed it you gave
08:17 - something
08:17 - bad um but we're going to also enforce
08:21 - that later on
08:24 - you didn't enter a valid grade we're
08:27 - just going to be sad about it
08:29 - or valid grad oh geez
08:32 - all right so we've got this grade
08:36 - value now we want to get the number of
08:40 - points based on that grade value
08:44 - so at this point we've got the grade
08:45 - value points equals
08:47 - grade value times credits
08:52 - so we didn't have to do that each time
08:56 - and we wanted integer parse
08:59 - int credits
09:04 - so okay now we're getting the number of
09:06 - points
09:07 - here by taking the grade value from the
09:11 - letter grade they entered
09:12 - multiplying by the number of credits
09:13 - that gives us the total number of points
09:17 - so let's print that out too
09:20 - okay and then
09:24 - okay that works i think let's
09:27 - um actually let's give it a try let's
09:30 - prove it make sure we have it right
09:31 - number of credits
09:32 - uh one credit enter grade let's say i
09:34 - got an a
09:36 - so open one credit uh grade a four
09:39 - points
09:41 - and that should be right yes
09:45 - so now let's let's calculate that gpa um
09:48 - just for this one class
09:51 - so let's make it a well for now it's
09:54 - just going to be an integer we'll
09:55 - have to fix that later too um integer
09:58 - gpa equals and what did we say the
10:01 - calculation was total points over
10:03 - total credits now we have all those
10:05 - values already
10:07 - points over
10:11 - the same parsing here credits
10:17 - so let's go ahead and print that out too
10:19 - oops
10:20 - there we go gpa and let's make this
10:23 - easier for ourselves when we view this
10:26 - credits
10:29 - there we go grade
10:33 - points gpa
10:39 - gpa run that i'm hitting ctrl
10:43 - f11 here to run that if you're looking
10:46 - for that shortcut
10:47 - in eclipse number of credits uh one
10:50 - credit
10:51 - i got an a and so yeah i got integrated
10:55 - a four points my gpa is four
10:59 - so that works for one class all the the
11:02 - math is really
11:03 - easy so
11:06 - let's but so one step at a time let's
11:09 - make sure we can
11:11 - verify that the user is entering
11:13 - something
11:14 - good so right now if we run it and i
11:18 - enter a number of credits and i say
11:19 - j it goes okay great now enter a grade
11:24 - d and it blows up because you get a
11:28 - number format exception
11:30 - here on this line because it's trying to
11:33 - parse an integer
11:35 - from the letter j which of course you
11:37 - again won't work
11:40 - so what we want to do here is after that
11:43 - when they enter that number of credits
11:45 - we want to verify that
11:48 - it's valid um so let's say we want to
11:51 - make an integer out of that
11:54 - um credits int actually let's make this
11:58 - one credits
11:59 - string we're going to alt shift
12:02 - r rename hit
12:06 - enter and it'll change that all around
12:09 - but we're going to have an integer for
12:10 - the actual credits
12:13 - equals credits or integer
12:17 - dot parseint from that credit string
12:20 - we're going to get the integer from that
12:21 - script now
12:23 - of course this will blow up too the way
12:25 - it is right now so what we want to do is
12:26 - do a try catch around it
12:29 - try to do this
12:32 - and then if we get this number format
12:34 - exception
12:36 - we're going to catch it and make them
12:37 - retry
12:39 - but we have a catch statement for a
12:41 - number format exception
12:42 - and fe just to give it a name
12:46 - and when that happens we're going to be
12:48 - sad
12:49 - and tell the user
12:52 - please enter a valid integer
13:01 - and okay so but now we need to
13:04 - [Music]
13:05 - be able to loop uh
13:08 - through here and if they don't enter
13:11 - valid injury we need to send them back
13:12 - here
13:14 - so um we can do it this way
13:18 - or a boolean valid credits
13:23 - um by default is true we're going to
13:25 - assume that they do it right
13:27 - and we'll start our loop here we'll use
13:29 - a while loop so while valid credits
13:35 - we're going to keep asking for it until
13:36 - we
13:38 - uh i'm sorry while let me think about
13:41 - this
13:46 - so yeah while valid credits
13:52 - or well let's see while
13:59 - let me think about this while valid
14:02 - credits
14:03 - so we're going to initialize it to false
14:04 - actually i think we're going to do a do
14:06 - while loop do
14:10 - this while
14:14 - valid credits
14:18 - is false
14:23 - okay so we're going to keep doing this
14:27 - until it's true right
14:31 - i think that'll work that'll work fine
14:33 - valid so if we we do this right and we
14:35 - don't
14:35 - get this number format exception uh
14:39 - that'll be fine valid credits equals
14:42 - true
14:43 - so once we get a good value um
14:46 - this will be set to true it'll check
14:48 - this while and be like oh nope
14:50 - it's it's true we can move on we've got
14:52 - a valid uh
14:54 - a valid number so let's go ahead and try
14:55 - that
14:57 - errors exist so no we don't want to oh
14:59 - we've got this credit string
15:00 - we're trying to parse in it now we don't
15:02 - have to anymore
15:04 - we can just use uh this credits
15:08 - which we actually need to declare up
15:09 - here otherwise it'll only apply
15:12 - inside of that
15:16 - inside of this scope we can't declare it
15:18 - in here
15:20 - otherwise outside of this block it won't
15:22 - be available
15:23 - and we need it to be available down here
15:24 - when we make this calculation
15:29 - but it's
15:32 - my credit stream yeah no that's not
15:34 - available anymore so we'll just use
15:36 - credits there too
15:37 - cool all right enter a number of credits
15:40 - let's put in some garbage
15:41 - r please enter a valid integer enter
15:44 - grid oh no it didn't it just
15:45 - it went to uh straight to the grade
15:49 - so
15:52 - let me think what's going wrong
15:56 - why is this complaining oh it's not used
15:58 - oh welp
16:00 - rookie mistake
16:03 - i'll tell you i've been programming for
16:06 - 15 years almost you will you will
16:10 - you keep finding yourself you make those
16:11 - mistakes less
16:13 - don't get me wrong but you still make
16:14 - them
16:16 - okay number of credits under a valid
16:18 - integer t
16:20 - and valencia garbage
16:24 - until i put in a valid integer good now
16:26 - it's happy and then
16:27 - asked me to enter grade perfect that's
16:29 - what we wanted
16:31 - all right so now it keeps doing this
16:33 - loop until you enter a valid integer
16:37 - and good now we're guaranteed to come
16:39 - out of this with a valid integer for
16:42 - credits now let's do the same thing
16:46 - for the grade here
16:49 - so we're going to prompt them to enter
16:50 - the grade
16:52 - and until they uh
16:55 - enter a valid grade
16:59 - um we're going to keep looping through
17:02 - it
17:02 - so we're going to do it a little
17:04 - different here so let's say
17:07 - um we had a boolean like invalid grade
17:12 - let's see let me think about this which
17:13 - kind of boolean we want let's say
17:15 - boolean
17:16 - valid grade equals
17:19 - true
17:22 - and then here boolean or sorry valid
17:26 - grade
17:26 - equals false we're going to set it to
17:28 - false
17:31 - so we want to do so we want a similar
17:35 - kind of loop here but let's see how
17:36 - which kind of direction we want to
17:38 - do it while valid
17:42 - uh i think we wanted the same kind of
17:44 - thing don't we
17:47 - we want to always do it at least once so
17:49 - we can do a do while loop
17:52 - while valid
17:56 - grade or while not valid grade
18:01 - and we could have done that up here too
18:03 - we could have um instead of valid
18:05 - credits equals false we could have just
18:06 - done uh
18:09 - not valid i realized this is kind of the
18:11 - opposite of the way we did it but we
18:12 - could do it
18:13 - either way let's be consistent valid
18:15 - credits equals true
18:17 - and we'll do while not valid credits
18:20 - and we'll put the condition
18:23 - down here we set to true
18:27 - and then we only set it to false
18:30 - and oh we actually have to put this in
18:32 - here
18:35 - let me think
18:40 - so when will this ever get set back to
18:42 - true again
18:44 - i think we have to so we have invalid
18:46 - credits equals true we're going to have
18:47 - to set it to true here at the top
18:49 - of this while loop because if we don't
18:52 - once it gets set to false here it will
18:54 - never get set to true
18:56 - um so at the beginning of each one we
18:58 - want to assume that it's going to be
18:59 - true
19:01 - uh and then make it prove itself wrong
19:05 - if it's not so
19:05 - if it'll get kicked over to false if
19:07 - they enter something bad
19:09 - and then again by default i assume it's
19:12 - going to be true if we don't didn't have
19:13 - this
19:15 - uh it would never once it got in and
19:17 - somebody put in something wrong
19:19 - it would just keep looping forever
19:20 - because it would never get set back to
19:22 - true
19:23 - um anyway so we want to do something
19:25 - similar here too
19:26 - uh we want to assume valid grade is true
19:29 - going in
19:33 - set to true and then if they put in
19:35 - something bad set it to false
19:37 - and then if it's false we'll try again
19:42 - now let's see grade value
19:47 - oh we need to since this is now set
19:52 - uh this is declared inside this scope
19:54 - it's only valid inside the scope notice
19:56 - it doesn't exist outside of that scope
19:58 - so we need to move
19:58 - this up here
20:03 - outside of that scope so it's accessible
20:04 - to these other things
20:07 - all right let's give that a try let's
20:08 - check both of our validations enter a
20:10 - number of credits put in some garbage
20:12 - it doesn't like the garbage once we
20:14 - enter a number
20:15 - it's happy now enter a grade let's enter
20:18 - some invalid grades
20:20 - whoa we've got some kind of an infinite
20:23 - loop
20:26 - here's the problem we didn't put
20:29 - the printing and scanner
20:33 - inside this loop we need to do that
20:36 - so what was happening was it was asking
20:38 - for it here and then just doing that do
20:39 - while loop forever
20:41 - this line is what actually stops
20:45 - the uh the program and waits for your
20:48 - input so you need to do that inside the
20:50 - loop
20:53 - let's see what did we miss grade
20:56 - what's up we need to declare this
20:58 - outside also
21:00 - string grade equals just an empty string
21:05 - just so it's never normal
21:09 - okay let's give that another try we know
21:12 - the credit stuff works
21:13 - oops we know the credit stuff works so
21:15 - let's just give whatever number of
21:17 - credits
21:18 - enter grade let's give some garbage
21:22 - you didn't enter a valid grade enter a
21:23 - grade you didn't enter valid grade
21:25 - you didn't evaluate you're not right now
21:28 - d that's valid
21:32 - so yeah you had two credits you got a d
21:35 - your gpa is one awesome
21:39 - so now we have a gpa calculator that
21:42 - works for
21:43 - one class now
21:47 - let's create a loop to do
21:50 - multiple classes all right so
21:55 - we're going to do something similar to
21:57 - what we've got here
21:59 - we want a another do while loop
22:05 - do all of this
22:10 - um
22:12 - let's see let me think
22:15 - you want to do all of this
22:19 - shift this over
22:23 - um what we want to do is get the total
22:26 - number of credits
22:28 - we need to do
22:32 - this inside of here
22:40 - so we're going to need a running total
22:42 - of the points and a total of the credits
22:47 - so let's see the points for one
22:51 - this is still correct for the number of
22:53 - points
22:55 - for this uh
22:58 - we're gonna have to put in a while or
23:00 - this is gonna be angry i'm just gonna
23:02 - shut it up
23:02 - well true for now um which is not what
23:06 - we want but don't worry
23:09 - this will give us the points for this
23:11 - for this particular class the grade
23:13 - value plus the credits equals the points
23:15 - and we're going to want total points and
23:18 - a total credits
23:19 - as we accumulate these so outside of
23:21 - these we're going to want to
23:22 - have an integer total points
23:26 - initialize that to zero integer total
23:29 - credits
23:31 - initialize that to zero and we're going
23:34 - to take
23:34 - these total points
23:38 - and here we know the points
23:41 - so for this class we're going to add it
23:43 - to the total points total points equals
23:45 - total points
23:47 - plus points
23:50 - and if we also want to be super fancy we
23:53 - can say
23:54 - total points plus equals points that
23:56 - does the same thing it takes total
23:58 - points and adds points to it
24:00 - and assigns it to that and we can do the
24:02 - same thing with credits
24:03 - credits or total credits
24:08 - plus equals credits
24:12 - so now we've got the
24:16 - total points racking up here
24:19 - the gpa is actually going to be the
24:21 - total points over the total credits
24:28 - so we don't have all the we won't have
24:30 - the grade as a total we don't know that
24:32 - there isn't such thing as a total grade
24:34 - we just have the total points
24:39 - total credits and the gpa
24:44 - unreachable go oh because i made this
24:46 - while true so now we want to do this
24:48 - um keep doing this loop while
24:53 - they we want to make the user add one
24:56 - thing
24:58 - uh at least one class and then if they
25:00 - say yes i want to add another
25:02 - uh then we when we put them through the
25:05 - loop again
25:07 - so boolean more classes
25:12 - equals uh i guess it doesn't matter
25:15 - boolean more classes we'll just declare
25:17 - it here
25:18 - so it's accessible uh
25:22 - let's just default it to uh
25:25 - false and
25:29 - at the end of entering one class
25:33 - what we want to do is prompt the user to
25:36 - tell us where they want to add
25:38 - another class so we're going to copy
25:40 - this we've added those credits now we
25:42 - want to
25:43 - ask would you like
25:47 - to enter another class
25:52 - we're going to say yes or no
25:55 - put in y or n
25:59 - and we're going to uh
26:02 - let's see more classes string
26:05 - equals the scanner.next line
26:09 - make that a string and then we if they
26:11 - made this a y we want to
26:14 - set this boolean to true
26:17 - um so that
26:21 - oh yes they want more classes we will
26:23 - start this loop over again
26:25 - okay so more classes
26:29 - equals we're going to set assign that to
26:32 - more classes string
26:36 - dot equals ignore case
26:40 - y so we're going to basically look for a
26:41 - y and if they send anything else in the
26:43 - world
26:44 - it won't go through it again we can do
26:47 - the same kind of validation we did here
26:48 - um i don't think we have to worry about
26:50 - that too much here you can fancy it up
26:52 - yourself we'll leave that as a project
26:53 - to you you can if they don't put in a
26:55 - wire and then you can complain to them
26:56 - and make them put in something good
26:58 - number of credits one enter grade a
27:01 - would you like to another class
27:02 - yes number of credits
27:06 - um let's see it's a two credit class
27:09 - and i got a b would you like to enter
27:11 - another class
27:12 - no it says okay
27:16 - so yeah we've had three total credits
27:18 - two and one
27:20 - total points was ten
27:23 - because it was one times four
27:26 - plus two times three
27:30 - so that's a total of ten and my gpa in
27:33 - this case it's
27:34 - technically rounding to three or well
27:36 - it's it's doing integer division to get
27:39 - three so this is something we're going
27:40 - to have to mess with next
27:42 - we're going to have to because right now
27:45 - what it's doing is it's taking 10
27:47 - dividing it by 3 the gpa should be like
27:50 - 3.33 or something
27:52 - but it's doing integer division which
27:53 - means it takes 10 divided by 3 and then
27:55 - just
27:56 - gets rid of the remainder so it's just
27:58 - giving me 3.
28:01 - so what we actually need to do here now
28:04 - so i think everything's working fine for
28:05 - my getting
28:07 - all the information for all the classes
28:10 - but what we need to do is be able to do
28:15 - to to make these into like a float or a
28:17 - double
28:18 - and get uh
28:23 - get decimal versions of this basically
28:25 - so let's go ahead and just do that
28:27 - probably in a pretty simple way here so
28:29 - let's make
28:31 - um so let's call the gpa a double
28:38 - double gpa equals and now you can you
28:40 - can see it's going to get an inch from
28:42 - this result but it wants a double
28:44 - so we're just going to like basically
28:46 - make these a double double
28:48 - dot value of total points
28:52 - over same thing for total credits just
28:57 - uh just use the doubles
29:01 - and we're going to print out that double
29:03 - so let's do the exact same thing we did
29:05 - we had 1a
29:06 - to b okay let's go ahead and try that
29:10 - number of credits whoops one
29:13 - got an a yes two got a b
29:18 - would you like to add another class no
29:20 - and yeah look
29:21 - three point three three
29:25 - so now we're going to have to find a way
29:28 - well
29:28 - we don't have to this is the grade point
29:30 - average it's rounding to like
29:32 - what is that like a dozen decimals bases
29:35 - or something
29:38 - we could definitely leave it at that um
29:42 - because this is accurate but what are
29:44 - you used to seeing you're used to seeing
29:48 - in uh like on your
29:52 - transfer on your transcripts you're just
29:53 - seeing basically two decimal places
29:57 - um so that's i think that's what we're
29:59 - going to try and round it to
30:02 - now when here's something again
30:06 - you'd never remember how to unless you
30:07 - do in day-to-day work and
30:10 - on a job in an enterprise application
30:12 - you'd never have to
30:14 - take a number and round it to two
30:15 - decimal place so
30:17 - here's my tip just know how to look it
30:20 - up
30:21 - so let's do it um java round
30:24 - double to two decimal places perfect
30:28 - well it looks like i've looked that up
30:30 - before um
30:33 - oh we got a decimal format nice we can
30:37 - use this decimal
30:38 - format uh class
30:43 - so let's see if that works
30:47 - default is rounding mode half even let's
30:49 - go ahead and try that
30:50 - we're going to use a decimal format just
30:53 - put it up here
30:54 - at the top oh we actually we only need
30:56 - it once so we're going to put it here
30:58 - let's put it right next to it
31:01 - decimal format df equals decimal format
31:05 - that format is 0.00
31:08 - what's and then that was to get
31:12 - the format here we do
31:15 - df dot format
31:19 - that gpa
31:23 - see these are things you never have to
31:24 - remember if you get asked something like
31:26 - this in an interview how do you
31:27 - uh take a a decimal
31:31 - and make it only two uh only to two
31:33 - decimal places
31:35 - if they make you come up with that from
31:36 - memory in an interview just don't bother
31:38 - with that company
31:39 - that you need to know how to create
31:41 - something like this
31:42 - you don't need to memorize decimal
31:45 - format and oh that's java.txt.desmos no
31:50 - just know how to look it up
31:53 - everybody that you work with that is
31:54 - competent will know will understand
31:57 - it won't matter uh let's try that again
32:00 - it's one a two b
32:04 - number of credits one
32:08 - got an a yes two got a b
32:13 - no 3.33
32:16 - awesome perfect
32:21 - um i think that's about it let's just
32:23 - test it one more time
32:24 - with just a whole barrage of stuff
32:27 - making sure we can do it
32:28 - let's just test every bit of it so
32:30 - number of credits let's put in
32:32 - some garbage yeah that's still working
32:36 - you know you can enter all kinds of junk
32:38 - and it doesn't work
32:39 - number of credits um let's say i had a
32:42 - three credit class
32:44 - got an a yeah let's send another and
32:47 - then i had a one credit class
32:49 - i got an f
32:52 - um yeah i want to add another class um i
32:54 - got a five credit class i got a b
32:58 - let's add one more i had a four credit
33:00 - class got a c
33:03 - would you like to add another class um
33:05 - no
33:08 - so great it's here's my total credits my
33:10 - total points and my gpa is 2.69
33:15 - so yeah i think that's about it we could
33:18 - do some other cleaning i'm sure there's
33:20 - some refactoring we could do
33:22 - um if we want to make this very pretty
33:25 - and maybe we'll do that kind of thing in
33:27 - a future video but i don't think we have
33:28 - to right now
33:29 - this is fine it works um i'm sure
33:32 - there's some optimization we could do we
33:33 - could have made this a case statement
33:34 - maybe
33:35 - they made this a little bit cleaner we
33:38 - could of course get rid of comments
33:41 - if you like different ways of doing
33:42 - formatting i'm sure we could do that
33:45 - clean up some of the print statements we
33:46 - don't need
33:48 - but i think this is fine so um
33:51 - yeah i hope you guys found some value in
33:53 - this um
33:54 - if you have please shoot me a like and
33:56 - subscribe for
33:57 - more future videos like this if not
33:59 - shoot me a dislike and tell me what you
34:01 - want to see
34:02 - um so yeah thanks everybody for watching
34:04 - really appreciate it
34:06 - and hope see you next time

Cleaned transcript:

hey guys john here from coding with john today we're going to be writing a simple gpa calculator in java we're going to be starting from scratch so let's get to it all right so we're going to start from scratch here um in eclipse which is the ide we're going to be using create a brand new java project called gpa calculator and we're just going to we're not going to make it too complicated we're just going to keep it one class um with one main method we won't um break it out too much it's a pretty simple little uh small project um named which is just a main class okay all right so the formula for calculating gpa is so so basically it's total points divided by total credits attempted and what that means is so you get the number of points for a class by taking so like so points or class equals the grade value times the credits so and the grade value comes from a is four b is three etcetera etcetera etcetera and that's why when you get all a's you get a 4.0 um so for example if you have a one class that's worth one credit um you would have uh so you have the the the total the points for that class would be the grade value which is four for if you got an a in that class your grade value would be four times the credits which is one or so credit switch was one divided by the total credits which was one and your gpa would be 4.0 and basically you get your your total gpa by taking all the total points you get from every class divided by all the total credits attempted for every class so um how we're going to do is we're going to work kind of iteratively and get a little bit to work test it and add a little bit more until we have a robust uh gpa calculator that we want so the first thing i think we need to do is we need to be able to get input from the user about um we need to get at least for one class the the total that we need to get their grade and the total number of credits so um we're going to just get input from the keyboard from the console i always forget how to do that so i'm going to take um the w3schools scanner class to get the input we're not going to call it my object let's call it scanner system.in and so let's see we're going to prompt them to enter their credits enter number of credits for the class and we're gonna get it here um our credits so the credits are gonna be the next line in the scanner and we yeah sure let's actually let's test it by outputting what they what they put in just going to print credits you don't need this these extra comments um and this is complaining that we need to uh close the scanner which we can just do that at the end okay so basically what this does is say we create a new scanner so we can get some some input from the user we're going to print out hey please enter the credits and then we're going to get them that from the input and just print it out so that's it um let's go ahead and run it enter number of credits one and it prints one and that's it cool working fine so now we can still use the same scanner and we're going to get the number of uh sorry the letter grade enter grade and the string grade is the next line let's go ahead and again i'll just print that out to make sure it works and our number of credits one grade uh b prints out one and b cool all right so now we need to so let's try and get the gpa for this one class before we start making a loop and getting the gpa for a whole bunch of classes um so let's do this calculation for the one class so we the number of credits is easy um we'll just take the number that they put in there's nothing we have to do with that that's the total credits we need to find these total points and as we said those total points for a class is the grade value which is four for a b for three etcetera times the number of credits so what we're going to do here let's see um we're going to take this grade that they enter and calculate the points so integer points we're going to assign it to this variable um just started at zero and then we're gonna look for all the inputs that the user could give so if grade equals a or sorry that's how you want to do it if grade dot equals ignore case a so if they type in an uppercase a or lowercase a this will work um let's see we want to do points is equal to this calculation which is the grade value times credits so we take the credits that we already have here and we're going to need to make it an integer we are going to have to do that because we can't do a multiplication but we'll figure it out in just a second so it'll be the number of credits times um 4 because 4 is the point value for uh for an a and actually we could even break this out so what i was going to say we could do uh actually first let's back up for a second we need to make the get this uh as an integer integer.parseint credit so now it's going to take the credits and parse an integer out of it so perfect now that works so what i was going to say is then we could take this and do else if you know it's a b dude times three but we have a little bit of duplicate code here we're doing this multiplication each time we really have to do that um so let's get an integer grade value uh i'll initialize that to zero also just so we initialize it to something and we're just going to get the grade value here grade value equals 4. and in here grade value equals 3. so now we're not doing that multiplication we're not duplicating that code but it makes it just a little bit cleaner so b c d f so for a c for a d or an f and so for a c it's going to be 2 for a d it's going to be one and for an f it's going to be zero and then um we'll deal with what happens if they don't send in one of those uh hey let's go ahead and do it else so they sent in something bad um please we're gonna we're just gonna for now print out oh you printed it you gave something bad um but we're going to also enforce that later on you didn't enter a valid grade we're just going to be sad about it or valid grad oh geez all right so we've got this grade value now we want to get the number of points based on that grade value so at this point we've got the grade value points equals grade value times credits so we didn't have to do that each time and we wanted integer parse int credits so okay now we're getting the number of points here by taking the grade value from the letter grade they entered multiplying by the number of credits that gives us the total number of points so let's print that out too okay and then okay that works i think let's um actually let's give it a try let's prove it make sure we have it right number of credits uh one credit enter grade let's say i got an a so open one credit uh grade a four points and that should be right yes so now let's let's calculate that gpa um just for this one class so let's make it a well for now it's just going to be an integer we'll have to fix that later too um integer gpa equals and what did we say the calculation was total points over total credits now we have all those values already points over the same parsing here credits so let's go ahead and print that out too oops there we go gpa and let's make this easier for ourselves when we view this credits there we go grade points gpa gpa run that i'm hitting ctrl f11 here to run that if you're looking for that shortcut in eclipse number of credits uh one credit i got an a and so yeah i got integrated a four points my gpa is four so that works for one class all the the math is really easy so let's but so one step at a time let's make sure we can verify that the user is entering something good so right now if we run it and i enter a number of credits and i say j it goes okay great now enter a grade d and it blows up because you get a number format exception here on this line because it's trying to parse an integer from the letter j which of course you again won't work so what we want to do here is after that when they enter that number of credits we want to verify that it's valid um so let's say we want to make an integer out of that um credits int actually let's make this one credits string we're going to alt shift r rename hit enter and it'll change that all around but we're going to have an integer for the actual credits equals credits or integer dot parseint from that credit string we're going to get the integer from that script now of course this will blow up too the way it is right now so what we want to do is do a try catch around it try to do this and then if we get this number format exception we're going to catch it and make them retry but we have a catch statement for a number format exception and fe just to give it a name and when that happens we're going to be sad and tell the user please enter a valid integer and okay so but now we need to be able to loop uh through here and if they don't enter valid injury we need to send them back here so um we can do it this way or a boolean valid credits um by default is true we're going to assume that they do it right and we'll start our loop here we'll use a while loop so while valid credits we're going to keep asking for it until we uh i'm sorry while let me think about this so yeah while valid credits or well let's see while let me think about this while valid credits so we're going to initialize it to false actually i think we're going to do a do while loop do this while valid credits is false okay so we're going to keep doing this until it's true right i think that'll work that'll work fine valid so if we we do this right and we don't get this number format exception uh that'll be fine valid credits equals true so once we get a good value um this will be set to true it'll check this while and be like oh nope it's it's true we can move on we've got a valid uh a valid number so let's go ahead and try that errors exist so no we don't want to oh we've got this credit string we're trying to parse in it now we don't have to anymore we can just use uh this credits which we actually need to declare up here otherwise it'll only apply inside of that inside of this scope we can't declare it in here otherwise outside of this block it won't be available and we need it to be available down here when we make this calculation but it's my credit stream yeah no that's not available anymore so we'll just use credits there too cool all right enter a number of credits let's put in some garbage r please enter a valid integer enter grid oh no it didn't it just it went to uh straight to the grade so let me think what's going wrong why is this complaining oh it's not used oh welp rookie mistake i'll tell you i've been programming for 15 years almost you will you will you keep finding yourself you make those mistakes less don't get me wrong but you still make them okay number of credits under a valid integer t and valencia garbage until i put in a valid integer good now it's happy and then asked me to enter grade perfect that's what we wanted all right so now it keeps doing this loop until you enter a valid integer and good now we're guaranteed to come out of this with a valid integer for credits now let's do the same thing for the grade here so we're going to prompt them to enter the grade and until they uh enter a valid grade um we're going to keep looping through it so we're going to do it a little different here so let's say um we had a boolean like invalid grade let's see let me think about this which kind of boolean we want let's say boolean valid grade equals true and then here boolean or sorry valid grade equals false we're going to set it to false so we want to do so we want a similar kind of loop here but let's see how which kind of direction we want to do it while valid uh i think we wanted the same kind of thing don't we we want to always do it at least once so we can do a do while loop while valid grade or while not valid grade and we could have done that up here too we could have um instead of valid credits equals false we could have just done uh not valid i realized this is kind of the opposite of the way we did it but we could do it either way let's be consistent valid credits equals true and we'll do while not valid credits and we'll put the condition down here we set to true and then we only set it to false and oh we actually have to put this in here let me think so when will this ever get set back to true again i think we have to so we have invalid credits equals true we're going to have to set it to true here at the top of this while loop because if we don't once it gets set to false here it will never get set to true um so at the beginning of each one we want to assume that it's going to be true uh and then make it prove itself wrong if it's not so if it'll get kicked over to false if they enter something bad and then again by default i assume it's going to be true if we don't didn't have this uh it would never once it got in and somebody put in something wrong it would just keep looping forever because it would never get set back to true um anyway so we want to do something similar here too uh we want to assume valid grade is true going in set to true and then if they put in something bad set it to false and then if it's false we'll try again now let's see grade value oh we need to since this is now set uh this is declared inside this scope it's only valid inside the scope notice it doesn't exist outside of that scope so we need to move this up here outside of that scope so it's accessible to these other things all right let's give that a try let's check both of our validations enter a number of credits put in some garbage it doesn't like the garbage once we enter a number it's happy now enter a grade let's enter some invalid grades whoa we've got some kind of an infinite loop here's the problem we didn't put the printing and scanner inside this loop we need to do that so what was happening was it was asking for it here and then just doing that do while loop forever this line is what actually stops the uh the program and waits for your input so you need to do that inside the loop let's see what did we miss grade what's up we need to declare this outside also string grade equals just an empty string just so it's never normal okay let's give that another try we know the credit stuff works oops we know the credit stuff works so let's just give whatever number of credits enter grade let's give some garbage you didn't enter a valid grade enter a grade you didn't enter valid grade you didn't evaluate you're not right now d that's valid so yeah you had two credits you got a d your gpa is one awesome so now we have a gpa calculator that works for one class now let's create a loop to do multiple classes all right so we're going to do something similar to what we've got here we want a another do while loop do all of this um let's see let me think you want to do all of this shift this over um what we want to do is get the total number of credits we need to do this inside of here so we're going to need a running total of the points and a total of the credits so let's see the points for one this is still correct for the number of points for this uh we're gonna have to put in a while or this is gonna be angry i'm just gonna shut it up well true for now um which is not what we want but don't worry this will give us the points for this for this particular class the grade value plus the credits equals the points and we're going to want total points and a total credits as we accumulate these so outside of these we're going to want to have an integer total points initialize that to zero integer total credits initialize that to zero and we're going to take these total points and here we know the points so for this class we're going to add it to the total points total points equals total points plus points and if we also want to be super fancy we can say total points plus equals points that does the same thing it takes total points and adds points to it and assigns it to that and we can do the same thing with credits credits or total credits plus equals credits so now we've got the total points racking up here the gpa is actually going to be the total points over the total credits so we don't have all the we won't have the grade as a total we don't know that there isn't such thing as a total grade we just have the total points total credits and the gpa unreachable go oh because i made this while true so now we want to do this um keep doing this loop while they we want to make the user add one thing uh at least one class and then if they say yes i want to add another uh then we when we put them through the loop again so boolean more classes equals uh i guess it doesn't matter boolean more classes we'll just declare it here so it's accessible uh let's just default it to uh false and at the end of entering one class what we want to do is prompt the user to tell us where they want to add another class so we're going to copy this we've added those credits now we want to ask would you like to enter another class we're going to say yes or no put in y or n and we're going to uh let's see more classes string equals the scanner.next line make that a string and then we if they made this a y we want to set this boolean to true um so that oh yes they want more classes we will start this loop over again okay so more classes equals we're going to set assign that to more classes string dot equals ignore case y so we're going to basically look for a y and if they send anything else in the world it won't go through it again we can do the same kind of validation we did here um i don't think we have to worry about that too much here you can fancy it up yourself we'll leave that as a project to you you can if they don't put in a wire and then you can complain to them and make them put in something good number of credits one enter grade a would you like to another class yes number of credits um let's see it's a two credit class and i got a b would you like to enter another class no it says okay so yeah we've had three total credits two and one total points was ten because it was one times four plus two times three so that's a total of ten and my gpa in this case it's technically rounding to three or well it's it's doing integer division to get three so this is something we're going to have to mess with next we're going to have to because right now what it's doing is it's taking 10 dividing it by 3 the gpa should be like 3.33 or something but it's doing integer division which means it takes 10 divided by 3 and then just gets rid of the remainder so it's just giving me 3. so what we actually need to do here now so i think everything's working fine for my getting all the information for all the classes but what we need to do is be able to do to to make these into like a float or a double and get uh get decimal versions of this basically so let's go ahead and just do that probably in a pretty simple way here so let's make um so let's call the gpa a double double gpa equals and now you can you can see it's going to get an inch from this result but it wants a double so we're just going to like basically make these a double double dot value of total points over same thing for total credits just uh just use the doubles and we're going to print out that double so let's do the exact same thing we did we had 1a to b okay let's go ahead and try that number of credits whoops one got an a yes two got a b would you like to add another class no and yeah look three point three three so now we're going to have to find a way well we don't have to this is the grade point average it's rounding to like what is that like a dozen decimals bases or something we could definitely leave it at that um because this is accurate but what are you used to seeing you're used to seeing in uh like on your transfer on your transcripts you're just seeing basically two decimal places um so that's i think that's what we're going to try and round it to now when here's something again you'd never remember how to unless you do in daytoday work and on a job in an enterprise application you'd never have to take a number and round it to two decimal place so here's my tip just know how to look it up so let's do it um java round double to two decimal places perfect well it looks like i've looked that up before um oh we got a decimal format nice we can use this decimal format uh class so let's see if that works default is rounding mode half even let's go ahead and try that we're going to use a decimal format just put it up here at the top oh we actually we only need it once so we're going to put it here let's put it right next to it decimal format df equals decimal format that format is 0.00 what's and then that was to get the format here we do df dot format that gpa see these are things you never have to remember if you get asked something like this in an interview how do you uh take a a decimal and make it only two uh only to two decimal places if they make you come up with that from memory in an interview just don't bother with that company that you need to know how to create something like this you don't need to memorize decimal format and oh that's java.txt.desmos no just know how to look it up everybody that you work with that is competent will know will understand it won't matter uh let's try that again it's one a two b number of credits one got an a yes two got a b no 3.33 awesome perfect um i think that's about it let's just test it one more time with just a whole barrage of stuff making sure we can do it let's just test every bit of it so number of credits let's put in some garbage yeah that's still working you know you can enter all kinds of junk and it doesn't work number of credits um let's say i had a three credit class got an a yeah let's send another and then i had a one credit class i got an f um yeah i want to add another class um i got a five credit class i got a b let's add one more i had a four credit class got a c would you like to add another class um no so great it's here's my total credits my total points and my gpa is 2.69 so yeah i think that's about it we could do some other cleaning i'm sure there's some refactoring we could do um if we want to make this very pretty and maybe we'll do that kind of thing in a future video but i don't think we have to right now this is fine it works um i'm sure there's some optimization we could do we could have made this a case statement maybe they made this a little bit cleaner we could of course get rid of comments if you like different ways of doing formatting i'm sure we could do that clean up some of the print statements we don't need but i think this is fine so um yeah i hope you guys found some value in this um if you have please shoot me a like and subscribe for more future videos like this if not shoot me a dislike and tell me what you want to see um so yeah thanks everybody for watching really appreciate it and hope see you next time
