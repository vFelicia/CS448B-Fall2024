With timestamps:

00:00 - hey guys how you doing it's john from
00:01 - coding with john do you need to learn
00:03 - how to get keyboard input from the user
00:05 - in java if that's you you're in the
00:08 - right place so to get you started
00:09 - quickly we're going to go over getting
00:10 - strings
00:11 - integers and floats from the user and
00:14 - after we get those basics out of the way
00:15 - i'm going to show you some of the
00:16 - strange intricacies
00:18 - of how some of these commands work so
00:20 - you don't get yourselves into trouble
00:22 - so to start all i've got here is an
00:23 - empty example class called
00:25 - scanner example scanner is what we're
00:26 - going to use to get the user input
00:29 - and all i've got is a public static void
00:31 - main
00:32 - method that you've probably seen many
00:34 - times before
00:35 - so just what i plan to do here is show
00:37 - an example of how you can get somebody's
00:39 - name
00:39 - their age and their shoe size and so to
00:42 - do that we're going to need to get a
00:43 - string for their name
00:45 - an integer an int for their age and
00:48 - a float for their shoe size so to do
00:51 - that we're going to use java's built in
00:52 - scanner class and to use the scanner
00:54 - class
00:55 - we first need to import it so import
00:59 - java.util.scanner
01:01 - and that's great right now it's
01:02 - complaining that we aren't using it yet
01:04 - so let's get to using it so to declare a
01:06 - scanner you want to declare a variable
01:08 - to put it in
01:08 - so we're going to declare a new variable
01:11 - scanner
01:12 - we'll call it scanner equals new scanner
01:16 - and it takes in the type of scanner we
01:18 - want there's many different kinds of
01:19 - things you can use on different kinds of
01:21 - inputs what you want for the keyboard
01:23 - input
01:23 - is system dot
01:27 - in that standard input
01:30 - user keyboard input in the console so
01:32 - this is what we're going to use every
01:33 - time we want to retrieve input from the
01:35 - user
01:36 - now first i'm just going to go ahead and
01:37 - declare the three variables i'm going to
01:38 - put the information
01:39 - in which are the name age and shoe size
01:43 - so let's say we're having a string name
01:47 - we're going to have an int
01:50 - age and we're going to have a float on a
01:53 - flat
01:54 - a float shoe size could have a flat shoe
01:56 - size too i guess
01:58 - now first we're going to print to prompt
02:00 - the user please enter your name so we're
02:01 - going to do that
02:02 - with just a basic system.out.printline
02:07 - please enter your name
02:11 - and now of course we want to allow the
02:12 - user enter their name to do that
02:14 - you're going to use that scanner class
02:16 - so the command to get a string using
02:17 - scanner is just
02:20 - next line scanner dot next line
02:24 - that retrieves the next line of input
02:26 - that the user enters
02:28 - so great but we don't just want to
02:29 - retrieve it we want to actually put it
02:31 - in our name variable and to do that
02:33 - we just say name equals scanner.nextline
02:36 - what that's going to do
02:37 - is take the next line input from the
02:40 - user
02:40 - and put it into that name variable so
02:42 - now our name variable will have whatever
02:43 - the user enters
02:45 - perfect now we need to get the age we're
02:47 - going to do a similar thing we're going
02:49 - to prompt we're just going to copy this
02:52 - and then we're going to prompt the user
02:53 - please enter your age
02:56 - and then to get an int from the scanner
02:59 - the command
03:00 - is scanner dot next
03:03 - int pretty simple right see a pattern so
03:06 - we're just going to take what's returned
03:08 - from
03:08 - nextint and assign it and assign our age
03:10 - variable to it now our age variable
03:12 - holds with the user entered
03:14 - for their age and then last but of
03:16 - course not least we'll do the shoe size
03:18 - thing for floats
03:19 - we'll just copy this again please enter
03:21 - your shoe size
03:23 - all right and let me allow you to take a
03:26 - wild guess
03:27 - what the command to get a float is
03:30 - you are scanner dot next
03:33 - float and then we just need to assign
03:35 - our shoe size variable
03:36 - to what is returned by the user there so
03:39 - shoe
03:40 - size equal scanner dot next float
03:43 - great now we've got all the input from
03:45 - the user let's just print it out to make
03:47 - sure that we retrieved it properly
03:49 - so to do that we're just going to do
03:52 - system.out.printline again
03:53 - and we're just going to print out
03:54 - everything that they entered your name
03:58 - is name
04:01 - using the name variable there
04:04 - and we'll copy that your age
04:08 - is age
04:11 - copy paste your shoe size is
04:16 - chew size so let's get this run see what
04:18 - happens
04:20 - please enter your name that's right john
04:24 - enter your age is my real age 32
04:27 - enter your shoe size and uh to make it a
04:29 - float my real shoe size is 14 but to
04:31 - make it
04:32 - floatier we'll do 13.5
04:36 - and there prints out everything that we
04:37 - input your name is john your age is 32.
04:39 - your shoe size is 13.5 so you can see
04:42 - all the information we retrieve from the
04:43 - user is stored in these variables and we
04:45 - can do whatever we want with them we can
04:47 - we can take the the name append it to
04:49 - something else
04:50 - we could take the age add it to some
04:53 - other number we could take the shoe size
04:54 - multiple we can do whatever we want with
04:56 - these
04:56 - but this is how you get the input from
04:58 - the user it's really just that easy
04:59 - there's not a lot to it
05:01 - so if you just want the basics that's it
05:03 - you're done there's not much more you
05:04 - need to know
05:05 - but for some of the more advanced usage
05:07 - and to keep you from running into some
05:08 - strangeness we're going to go over a
05:10 - little bit more stuff
05:11 - first of all if you're working in ide
05:13 - like i am i'm working in eclipse you may
05:15 - have noticed that when we
05:16 - declare this scanner it's upset about
05:18 - something it's got this yellow squiggly
05:19 - line
05:20 - it says hey your scanner is never closed
05:23 - and if you're working in a small little
05:25 - program like this you're probably not
05:26 - gonna run out any problems with that but
05:28 - in the real world if you're running this
05:29 - in a large
05:30 - application you want to be a good
05:32 - steward of stuff so if you want to be a
05:34 - good boy scout and get rid of this
05:35 - yellow wavy line
05:36 - just at the bottom when you're done
05:37 - using your scanner just call scanner dot
05:40 - close and that closes it and makes it
05:42 - happy now
05:44 - over some of the more specifics about
05:45 - what these commands are actually
05:47 - doing so for example in the next line
05:51 - command which i said gets a string
05:53 - what it actually does is gets all of the
05:55 - user input until it gets a new line
05:58 - basically until the user press enter
06:00 - it'll take in all that in
06:01 - that whole string so if i run this again
06:04 - and i
06:05 - uh enter my name as john jacob
06:09 - jingleheimer schmidt
06:12 - and i know that's your name too um and
06:15 - then i enter my age 32 or
06:17 - 23 because i mistyped shoe size 13.
06:20 - it takes in that whole line right great
06:22 - and that's what we want
06:24 - so that's how the next line works but
06:25 - all these other commands next in next
06:26 - float and everything else
06:28 - they work kind of in a different way so
06:30 - let's go clean this up
06:32 - just so we can work with just an int for
06:35 - right now
06:35 - so we'll get rid of all these other
06:36 - variables
06:39 - and all these other commands so now we
06:40 - just have the scanner and age
06:42 - please enter your age and that's what
06:44 - we're reporting back so
06:46 - if we just run this and i enter my name
06:48 - as
06:49 - 12 of course it says your age is 12. but
06:52 - if i run it again
06:53 - and i say my age is 12 space
06:56 - blah blah blah blah blah blah garbage it
06:58 - says your age is 12.
07:00 - well because what it actually does is
07:01 - this next int command
07:03 - takes the input that you put in and
07:06 - stops when it hits the first
07:07 - white space this space here and then it
07:10 - doesn't scan anymore
07:11 - but again what is interesting is the
07:13 - scanner
07:14 - the scanner object still waits right
07:17 - here
07:18 - for you to run your next scan command so
07:20 - what that means is i can say
07:23 - name equals scanner scanner.nextline
07:29 - and it will finish retrieving this line
07:33 - so let's call this string name equal
07:36 - scanner.nextline
07:38 - and your name is
07:41 - name now watch what happens when i put
07:44 - in the
07:44 - age i'm gonna run this please enter your
07:47 - age
07:48 - my name is 12 space blah blah blah blah
07:50 - blah blah blah hello
07:52 - hi how are you enter
07:56 - and notice it says your age is 12 your
07:59 - name is
08:00 - everything after that and that's because
08:01 - what happened is this next int
08:04 - just grabbed this 12 and stopped and
08:06 - then the next line retrieved this entire
08:08 - string
08:10 - ending when i pressed enter and so
08:12 - that's just something to keep an
08:13 - eye out for when you're coding this
08:15 - stuff just if you find your scanners are
08:17 - acting weird just know that that's how
08:19 - it's working
08:20 - now if you want to make it a little bit
08:22 - more user-friendly and take in the
08:24 - entire thing that the user
08:26 - enters before they hit the enter key
08:28 - what i recommend you do
08:29 - is just always use next line and get a
08:31 - string and just convert that string to
08:33 - whatever data type you actually need
08:36 - so for example let's say if we wanted to
08:38 - get the
08:39 - age as a string we're going to get rid
08:42 - of this int
08:43 - age and get a string age
08:46 - and we'll just get that with the next
08:47 - line right so let's just test that real
08:49 - fast should be simple please enter your
08:51 - age
08:53 - 763 it prints out your age of 763 but
08:57 - what if i need this as an
08:58 - int i don't want it as a string well
09:00 - i'll create a new
09:01 - int variable int uh
09:04 - int age we'll call it that um and we'll
09:08 - set it to
09:09 - integer dot parse int
09:12 - that string that the user entered page
09:15 - so what this will do
09:16 - is take the string that the user entered
09:19 - and parse it into an int
09:23 - and we can just print that test it out
09:25 - please enter your age
09:27 - 763 your age is 763 it works exactly how
09:30 - we expect
09:31 - and then similarly if we wanted to store
09:33 - what's passed in as a string
09:34 - as a float we could take for example a
09:38 - float
09:38 - age and to parse a float from
09:42 - a string we would use guess what float
09:45 - dot
09:46 - parse float and pass in
09:50 - page and we've got a float age and we
09:53 - can test that out too
09:54 - please enter your age whatever
09:58 - great your age is 43.34 it's exactly
10:00 - what we put in but it's parsed as a
10:01 - float so i can use it like that
10:03 - you may be thinking what if you pass in
10:05 - absolute garbage
10:06 - so it says what did you age and you say
10:09 - cheese sandwich
10:10 - what do you how do you deal with that so
10:13 - let's let's watch what happens first of
10:15 - all let's run it
10:15 - enter your age and we say cheese
10:19 - sandwich and it explodes with a number
10:22 - format exception
10:24 - on line 12 here and that's because it's
10:26 - trying to parse a float
10:28 - from cheese sandwich try as you might
10:31 - you can't make
10:32 - cheese sandwich into a float so what you
10:34 - can do here
10:36 - is have a try catch
10:39 - around this parsing so let's say so
10:42 - let's say we've got
10:43 - we declare our float float age
10:47 - and then we just have this assignment
10:49 - here float age equals flow.harshbot h
10:52 - great
10:53 - so what we can do is a try catch around
10:55 - that so we can catch the exception
10:57 - without blowing up the program and then
10:58 - have a loop
11:00 - for the user to enter a valid float
11:03 - so to do that let's just first get our
11:05 - try catch
11:06 - we'll try to do this parse float
11:11 - and we will catch if it happens
11:14 - a number format exception n f
11:17 - e and what we can do right now is just
11:21 - complain to the user
11:23 - if this exception happens
11:26 - hey you didn't enter a real
11:29 - float
11:32 - sad page
11:36 - let's just see if that works nope
11:40 - oh it's complaining because this float
11:42 - age might not have been initialized so
11:43 - we'll just set it to
11:44 - default to 0.0 for now that's fine
11:48 - 0.0 f for float
11:52 - run it enter your age now if i put in
11:54 - garbage like
11:55 - cheese sandwich hey you didn't enter a
11:58 - real float
11:59 - and so that properly caught the
12:00 - exception finished the program but it
12:02 - didn't do what we want what we want it
12:03 - to do
12:04 - is keep looping and trying to retrieve
12:06 - that value from the user
12:08 - until they enter a valid flow so what we
12:10 - can do is gather this user
12:12 - input in a loop what we're going to want
12:14 - to do is take all of this this prompting
12:16 - for your age
12:17 - gathering the age string that they enter
12:20 - we're going to want to do that inside of
12:22 - a loop so
12:24 - we can do it a couple ways but probably
12:25 - a good way is a do while loop and the
12:27 - reason a do
12:28 - while loop is good here not just a while
12:31 - loop a do while loop as you probably
12:33 - know
12:33 - always executes at least once and we do
12:35 - absolutely want to execute this at least
12:37 - once
12:38 - and think of what our exit condition is
12:39 - our exit condition is
12:41 - if this age is successfully parsed as a
12:44 - float
12:45 - so we can do is have a boolean that
12:47 - we're going to use
12:48 - that just stores whether the user
12:50 - entered a valid float
12:52 - so we'll call it boolean valid
12:55 - float age and we're going to start it
12:59 - as false we're going to assume that they
13:02 - put in garbage
13:03 - and if they didn't put in garbage we're
13:04 - going to set it to true and be happy
13:06 - right cool so now we write our do while
13:09 - loop we're going to
13:10 - do all of this
13:13 - getting printing out please uh enter
13:15 - your age
13:16 - getting the age from the user trying to
13:18 - parse it into a
13:20 - float and catch the exception if they
13:22 - enter garbage
13:23 - so we're going to do all of that
13:28 - while that valid flowed
13:32 - age is false
13:36 - so basically we're going to keep looping
13:37 - through this until the user enters a
13:39 - valid float
13:40 - but right now there's nothing that will
13:42 - change this valid float age
13:44 - to true to actually kick it out of this
13:45 - loop so we want to when the user enters
13:47 - a valid float
13:49 - is set this valid float age boolean to
13:52 - true and we want to do that right after
13:55 - we
13:55 - parse the float and the reason for that
13:59 - is that if there is a problem this is
14:01 - the line that will explode in and go to
14:03 - this catch so if it gets
14:04 - past that line we know we have a valid
14:06 - float
14:08 - so at that point we can say valid float
14:10 - age
14:11 - equals true cool so now to review what
14:14 - this is going to do is say we're going
14:15 - to assume
14:16 - we have a bad vowed float agent make the
14:17 - user prove that they can put in a good
14:19 - one
14:19 - we're going to start our loop print out
14:21 - please enter your age the user will
14:23 - enter that age
14:24 - we will try to parse it into a float if
14:26 - we do it successfully we're going to say
14:28 - great
14:29 - you did successfully and if there's an
14:31 - exception we're going to say hey
14:33 - you didn't enter a real float and if we
14:35 - reach the end of the loop and we don't
14:36 - have a valid flow rate we're going to do
14:37 - it all over again
14:39 - so let's give it a try please enter your
14:43 - age let's put in garbage
14:45 - cheese sandwiches are not garbage
14:46 - they're delicious but there's a garbage
14:48 - float
14:50 - hey you didn't enter a real float and
14:52 - you can and it prompts me again
14:53 - and i can keep putting in junk i can put
14:56 - in
14:57 - things that include numbers but it's
14:59 - still bad and then i can put in a real
15:01 - number
15:04 - your age is 34. and that works
15:07 - so that's a great way to do user input
15:10 - validation using the scanner class my
15:13 - recommendation would be to take it in as
15:14 - a string using scanner.nextline
15:17 - and then just parse it into whatever
15:19 - data type you need and just catch
15:21 - exceptions that may
15:22 - come from trying to parse those into
15:24 - those data types and just keep
15:26 - looping until the user enters something
15:27 - that's valid that's what you want
15:29 - and you can have all kinds of different
15:30 - validations about that so say you have
15:32 - an age and they enter
15:33 - 6000 or negative 10
15:37 - or something weird like that you could
15:39 - have your own
15:40 - custom validations for that so for
15:42 - example if somebody puts in
15:43 - negative 10.0 that's a valid float
15:46 - but it's not a valid age so you might
15:49 - have a check here for
15:50 - so maybe if you made float ages less
15:53 - than
15:53 - 0.0 and it would keep looping through
15:55 - there until the user enters
15:57 - uh something valid so you can do
15:58 - whatever you like there so i think
16:00 - that's it for today guys that should be
16:02 - everything you need to know to get
16:03 - started using the scanner class to get
16:05 - user input in java from the keyboard if
16:08 - you got some value out of this video
16:09 - shoot me a like
16:10 - if not go ahead and give me a dislike
16:12 - and tell me what you'd like to see in an
16:13 - upcoming video
16:14 - so thanks a lot for watching see you
16:15 - guys next time

Cleaned transcript:

hey guys how you doing it's john from coding with john do you need to learn how to get keyboard input from the user in java if that's you you're in the right place so to get you started quickly we're going to go over getting strings integers and floats from the user and after we get those basics out of the way i'm going to show you some of the strange intricacies of how some of these commands work so you don't get yourselves into trouble so to start all i've got here is an empty example class called scanner example scanner is what we're going to use to get the user input and all i've got is a public static void main method that you've probably seen many times before so just what i plan to do here is show an example of how you can get somebody's name their age and their shoe size and so to do that we're going to need to get a string for their name an integer an int for their age and a float for their shoe size so to do that we're going to use java's built in scanner class and to use the scanner class we first need to import it so import java.util.scanner and that's great right now it's complaining that we aren't using it yet so let's get to using it so to declare a scanner you want to declare a variable to put it in so we're going to declare a new variable scanner we'll call it scanner equals new scanner and it takes in the type of scanner we want there's many different kinds of things you can use on different kinds of inputs what you want for the keyboard input is system dot in that standard input user keyboard input in the console so this is what we're going to use every time we want to retrieve input from the user now first i'm just going to go ahead and declare the three variables i'm going to put the information in which are the name age and shoe size so let's say we're having a string name we're going to have an int age and we're going to have a float on a flat a float shoe size could have a flat shoe size too i guess now first we're going to print to prompt the user please enter your name so we're going to do that with just a basic system.out.printline please enter your name and now of course we want to allow the user enter their name to do that you're going to use that scanner class so the command to get a string using scanner is just next line scanner dot next line that retrieves the next line of input that the user enters so great but we don't just want to retrieve it we want to actually put it in our name variable and to do that we just say name equals scanner.nextline what that's going to do is take the next line input from the user and put it into that name variable so now our name variable will have whatever the user enters perfect now we need to get the age we're going to do a similar thing we're going to prompt we're just going to copy this and then we're going to prompt the user please enter your age and then to get an int from the scanner the command is scanner dot next int pretty simple right see a pattern so we're just going to take what's returned from nextint and assign it and assign our age variable to it now our age variable holds with the user entered for their age and then last but of course not least we'll do the shoe size thing for floats we'll just copy this again please enter your shoe size all right and let me allow you to take a wild guess what the command to get a float is you are scanner dot next float and then we just need to assign our shoe size variable to what is returned by the user there so shoe size equal scanner dot next float great now we've got all the input from the user let's just print it out to make sure that we retrieved it properly so to do that we're just going to do system.out.printline again and we're just going to print out everything that they entered your name is name using the name variable there and we'll copy that your age is age copy paste your shoe size is chew size so let's get this run see what happens please enter your name that's right john enter your age is my real age 32 enter your shoe size and uh to make it a float my real shoe size is 14 but to make it floatier we'll do 13.5 and there prints out everything that we input your name is john your age is 32. your shoe size is 13.5 so you can see all the information we retrieve from the user is stored in these variables and we can do whatever we want with them we can we can take the the name append it to something else we could take the age add it to some other number we could take the shoe size multiple we can do whatever we want with these but this is how you get the input from the user it's really just that easy there's not a lot to it so if you just want the basics that's it you're done there's not much more you need to know but for some of the more advanced usage and to keep you from running into some strangeness we're going to go over a little bit more stuff first of all if you're working in ide like i am i'm working in eclipse you may have noticed that when we declare this scanner it's upset about something it's got this yellow squiggly line it says hey your scanner is never closed and if you're working in a small little program like this you're probably not gonna run out any problems with that but in the real world if you're running this in a large application you want to be a good steward of stuff so if you want to be a good boy scout and get rid of this yellow wavy line just at the bottom when you're done using your scanner just call scanner dot close and that closes it and makes it happy now over some of the more specifics about what these commands are actually doing so for example in the next line command which i said gets a string what it actually does is gets all of the user input until it gets a new line basically until the user press enter it'll take in all that in that whole string so if i run this again and i uh enter my name as john jacob jingleheimer schmidt and i know that's your name too um and then i enter my age 32 or 23 because i mistyped shoe size 13. it takes in that whole line right great and that's what we want so that's how the next line works but all these other commands next in next float and everything else they work kind of in a different way so let's go clean this up just so we can work with just an int for right now so we'll get rid of all these other variables and all these other commands so now we just have the scanner and age please enter your age and that's what we're reporting back so if we just run this and i enter my name as 12 of course it says your age is 12. but if i run it again and i say my age is 12 space blah blah blah blah blah blah garbage it says your age is 12. well because what it actually does is this next int command takes the input that you put in and stops when it hits the first white space this space here and then it doesn't scan anymore but again what is interesting is the scanner the scanner object still waits right here for you to run your next scan command so what that means is i can say name equals scanner scanner.nextline and it will finish retrieving this line so let's call this string name equal scanner.nextline and your name is name now watch what happens when i put in the age i'm gonna run this please enter your age my name is 12 space blah blah blah blah blah blah blah hello hi how are you enter and notice it says your age is 12 your name is everything after that and that's because what happened is this next int just grabbed this 12 and stopped and then the next line retrieved this entire string ending when i pressed enter and so that's just something to keep an eye out for when you're coding this stuff just if you find your scanners are acting weird just know that that's how it's working now if you want to make it a little bit more userfriendly and take in the entire thing that the user enters before they hit the enter key what i recommend you do is just always use next line and get a string and just convert that string to whatever data type you actually need so for example let's say if we wanted to get the age as a string we're going to get rid of this int age and get a string age and we'll just get that with the next line right so let's just test that real fast should be simple please enter your age 763 it prints out your age of 763 but what if i need this as an int i don't want it as a string well i'll create a new int variable int uh int age we'll call it that um and we'll set it to integer dot parse int that string that the user entered page so what this will do is take the string that the user entered and parse it into an int and we can just print that test it out please enter your age 763 your age is 763 it works exactly how we expect and then similarly if we wanted to store what's passed in as a string as a float we could take for example a float age and to parse a float from a string we would use guess what float dot parse float and pass in page and we've got a float age and we can test that out too please enter your age whatever great your age is 43.34 it's exactly what we put in but it's parsed as a float so i can use it like that you may be thinking what if you pass in absolute garbage so it says what did you age and you say cheese sandwich what do you how do you deal with that so let's let's watch what happens first of all let's run it enter your age and we say cheese sandwich and it explodes with a number format exception on line 12 here and that's because it's trying to parse a float from cheese sandwich try as you might you can't make cheese sandwich into a float so what you can do here is have a try catch around this parsing so let's say so let's say we've got we declare our float float age and then we just have this assignment here float age equals flow.harshbot h great so what we can do is a try catch around that so we can catch the exception without blowing up the program and then have a loop for the user to enter a valid float so to do that let's just first get our try catch we'll try to do this parse float and we will catch if it happens a number format exception n f e and what we can do right now is just complain to the user if this exception happens hey you didn't enter a real float sad page let's just see if that works nope oh it's complaining because this float age might not have been initialized so we'll just set it to default to 0.0 for now that's fine 0.0 f for float run it enter your age now if i put in garbage like cheese sandwich hey you didn't enter a real float and so that properly caught the exception finished the program but it didn't do what we want what we want it to do is keep looping and trying to retrieve that value from the user until they enter a valid flow so what we can do is gather this user input in a loop what we're going to want to do is take all of this this prompting for your age gathering the age string that they enter we're going to want to do that inside of a loop so we can do it a couple ways but probably a good way is a do while loop and the reason a do while loop is good here not just a while loop a do while loop as you probably know always executes at least once and we do absolutely want to execute this at least once and think of what our exit condition is our exit condition is if this age is successfully parsed as a float so we can do is have a boolean that we're going to use that just stores whether the user entered a valid float so we'll call it boolean valid float age and we're going to start it as false we're going to assume that they put in garbage and if they didn't put in garbage we're going to set it to true and be happy right cool so now we write our do while loop we're going to do all of this getting printing out please uh enter your age getting the age from the user trying to parse it into a float and catch the exception if they enter garbage so we're going to do all of that while that valid flowed age is false so basically we're going to keep looping through this until the user enters a valid float but right now there's nothing that will change this valid float age to true to actually kick it out of this loop so we want to when the user enters a valid float is set this valid float age boolean to true and we want to do that right after we parse the float and the reason for that is that if there is a problem this is the line that will explode in and go to this catch so if it gets past that line we know we have a valid float so at that point we can say valid float age equals true cool so now to review what this is going to do is say we're going to assume we have a bad vowed float agent make the user prove that they can put in a good one we're going to start our loop print out please enter your age the user will enter that age we will try to parse it into a float if we do it successfully we're going to say great you did successfully and if there's an exception we're going to say hey you didn't enter a real float and if we reach the end of the loop and we don't have a valid flow rate we're going to do it all over again so let's give it a try please enter your age let's put in garbage cheese sandwiches are not garbage they're delicious but there's a garbage float hey you didn't enter a real float and you can and it prompts me again and i can keep putting in junk i can put in things that include numbers but it's still bad and then i can put in a real number your age is 34. and that works so that's a great way to do user input validation using the scanner class my recommendation would be to take it in as a string using scanner.nextline and then just parse it into whatever data type you need and just catch exceptions that may come from trying to parse those into those data types and just keep looping until the user enters something that's valid that's what you want and you can have all kinds of different validations about that so say you have an age and they enter 6000 or negative 10 or something weird like that you could have your own custom validations for that so for example if somebody puts in negative 10.0 that's a valid float but it's not a valid age so you might have a check here for so maybe if you made float ages less than 0.0 and it would keep looping through there until the user enters uh something valid so you can do whatever you like there so i think that's it for today guys that should be everything you need to know to get started using the scanner class to get user input in java from the keyboard if you got some value out of this video shoot me a like if not go ahead and give me a dislike and tell me what you'd like to see in an upcoming video so thanks a lot for watching see you guys next time
