With timestamps:

00:00 - we are going to implement one of the
00:01 - worst sorting algorithms in the world
00:03 - in java it's not fast it's pretty much
00:05 - just a
00:06 - two-line sorting algorithm while the
00:09 - list
00:09 - is not sorted we're going to call
00:12 - collections.shuffle
00:14 - and pass in our list we check to see if
00:16 - the list is sorted
00:17 - and if not we shuffle it and we keep
00:19 - going until it magically is
00:21 - sorted and then we'll print everything
00:23 - out for our list of just
00:25 - three elements it basically finishes
00:26 - right away so it's got to be super
00:28 - speedy right well maybe and instead of
00:30 - just having three elements
00:31 - i'm going to increase it to 14 and see
00:34 - what happens so i'm back here the next
00:35 - morning to find so we started last night
00:37 - at 9
00:38 - 25 and finally finished this morning at
00:41 - 2
00:41 - 17 that means it took about
00:44 - five hours to sort 14
00:48 - numbers

Cleaned transcript:

we are going to implement one of the worst sorting algorithms in the world in java it's not fast it's pretty much just a twoline sorting algorithm while the list is not sorted we're going to call collections.shuffle and pass in our list we check to see if the list is sorted and if not we shuffle it and we keep going until it magically is sorted and then we'll print everything out for our list of just three elements it basically finishes right away so it's got to be super speedy right well maybe and instead of just having three elements i'm going to increase it to 14 and see what happens so i'm back here the next morning to find so we started last night at 9 25 and finally finished this morning at 2 17 that means it took about five hours to sort 14 numbers
