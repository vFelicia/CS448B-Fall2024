With timestamps:

00:00 - in this video we'll walk through how to
00:01 - call a restful api in java we'll go
00:04 - through all the different parts of a
00:05 - rest web service call and how they work
00:07 - then we'll walk through step by step how
00:09 - to code your java programs to create
00:11 - those requests send them and process the
00:13 - results this video is being sponsored by
00:16 - assembly ai so we're going to be using
00:18 - their api as our example they have an
00:20 - api that translates speech to text
00:23 - that's the basics of what it does but it
00:25 - also has a ton of additional features so
00:27 - if you'd like to follow along and code
00:29 - this all yourself along with me just
00:31 - click the link down in the description
00:32 - to create your own account and get your
00:34 - api key it's totally free to get started
00:37 - and do everything that i show in this
00:38 - video you don't even need to provide a
00:40 - credit card or anything like that so go
00:42 - create your account in the link down in
00:43 - the description and follow along so
00:45 - first just what exactly is an api api
00:48 - stands for application program interface
00:51 - all an api really is is a way for two
00:54 - programs to talk to each other in recent
00:56 - years when developers talk about apis
00:58 - they're almost always talking about a
01:00 - web service that can handle http
01:03 - requests that are sent to it do some
01:05 - work and then return a response these
01:07 - web services are called rest services or
01:10 - restful services rest stands for
01:13 - representational state transfer first
01:16 - we'll go over all the different parts of
01:17 - a rest request and how they work and
01:19 - then we'll walk through step by step how
01:21 - to implement creating and sending those
01:23 - requests in java code what we're looking
01:25 - at here is just a simple chrome
01:26 - extension called boomerang that i like
01:29 - to use for testing out rest calls i like
01:32 - to use a tool like this to quickly test
01:34 - new apis before i go and implement them
01:36 - in code so this shows all the different
01:38 - parts of a web service request probably
01:40 - the main part of your request is going
01:43 - to be the url usually all the different
01:45 - services in any given api are all going
01:48 - to be under one common base url for
01:51 - assembly ai the base url to all of their
01:54 - web service calls is this
01:56 - api.assemblyai.com
01:59 - now the rest of the url can vary
02:01 - depending on what we're asking the api
02:03 - to do in that particular call any api
02:06 - that you use should have a ton of
02:08 - documentation about which url you should
02:10 - be using to perform whatever
02:12 - functionality you need just like
02:14 - assembly ai does here for example the
02:16 - first call that we're going to make is
02:18 - to send assembly ai some audio and have
02:21 - them transcribe it into text so we can
02:24 - see here that the url for that
02:25 - particular call ends in a v2 slash
02:29 - transcript so we're going to go ahead
02:31 - and add that to the end of our url here
02:34 - the other thing you'll notice here is
02:35 - this drop down right next to the url
02:37 - that has all these words like get post
02:39 - put delete these are called http methods
02:42 - or sometimes http verbs in general you
02:46 - can think of the http method here as the
02:49 - thing that you want to do and the url as
02:52 - the thing that you want to do that to
02:55 - the main http methods that you'll use
02:57 - almost all the time are these first four
03:00 - here get post put and delete those
03:02 - roughly correspond to your basic crud
03:05 - calls your create read update and delete
03:08 - calls typically you'll use post to
03:11 - create a thing get to retrieve a thing
03:14 - put to update a thing and delete of
03:16 - course to delete a thing and whatever
03:19 - url you use indicates the thing that you
03:22 - want to create read update or delete now
03:26 - if we look at this documentation for the
03:28 - assembly ai api they have this list of
03:30 - supported combinations of http methods
03:34 - and urls each one of these supported
03:37 - combinations is called an endpoint now
03:40 - if we scroll down here to the endpoint
03:42 - that creates a transcript we can see
03:44 - that the http method that we want to use
03:47 - is a post so let's go back over here and
03:50 - select post for our http method so this
03:53 - transcript is the thing that we want to
03:56 - operate on and since we're sending a
03:58 - post we're saying we want to create this
04:01 - thing we want to create a transcript the
04:04 - overall gist of this first call is we're
04:06 - going to send assembly ai an audio file
04:09 - and it will create a text transcript for
04:12 - us now the next element of a request to
04:14 - a rest api is the request body not every
04:18 - request will have a body but many will
04:20 - the body will contain basically any
04:22 - information that the api needs to
04:25 - perform the logic of the request 99.9 of
04:29 - the time you'll be writing your request
04:31 - bodies in json if you're not super
04:33 - familiar with json don't worry much
04:35 - about it what we're going to do with it
04:36 - here is pretty simple and
04:38 - straightforward the documentation for
04:40 - any api endpoint that you're using
04:42 - should tell you exactly what is required
04:45 - to send in a request body and then also
04:47 - what optional things you can send if you
04:49 - want for example in assembly ai's a post
04:52 - transcript endpoint it lists all the
04:55 - parameters that we could send in the
04:57 - request body here and there's quite a
04:59 - few of them however only one of them is
05:02 - listed as required and that is this
05:05 - audio url here and that kind of makes
05:07 - sense right the one thing you definitely
05:09 - need in order to create a transcript of
05:11 - some audio is the audio most api
05:13 - documentation will also have an example
05:16 - of a valid request body like this one
05:19 - here this shows what the most basic
05:22 - successful request to this endpoint will
05:24 - look like and it only includes the one
05:26 - required parameter the audio url of
05:29 - course if we want we can customize our
05:31 - request by messing around with all of
05:33 - these different optional parameters that
05:35 - the api offers and i encourage you to go
05:37 - through the documentation and play
05:39 - around with that but for now we're just
05:40 - going to keep it simple and copy this
05:43 - most basic version of a working request
05:45 - that they provide here but we are going
05:46 - to replace their audio file with our own
05:49 - so let's go ahead and copy this request
05:51 - and then back here we have to choose the
05:54 - body type that we want to use and for us
05:56 - we want to use json and then we just
05:58 - have to paste in our json request here
06:01 - in the text box but i'm going to replace
06:03 - the value of this audio url with the url
06:07 - of our own audio that we're going to be
06:08 - using so here's the audio file we're
06:10 - going to be sending to assembly ai to
06:12 - transcribe for us these pretzels are
06:15 - making me thirsty yes i am a nerd feel
06:18 - free to use this audio file yourself to
06:20 - test your own calls the link to the
06:21 - audio file will also be down in the
06:23 - description the last part of a rest
06:25 - request that we're going to look at is
06:27 - the headers headers are where you can
06:29 - include various kinds of metadata about
06:32 - the request so that could be like any
06:34 - credentials that you need to send to
06:35 - prove to the api that you are who you
06:38 - say you are or information on what kind
06:40 - of response we want to get back things
06:42 - like that i'll go ahead and click add
06:44 - header here so headers are just key
06:46 - value pairs just like a map in java so
06:49 - it's just the name of the header and
06:51 - then whatever value that we give it for
06:54 - this api there's just one required
06:56 - header and it tells you about it at the
06:58 - very first page of the walkthrough so it
07:00 - says authentication is handled via the
07:02 - authorization header and the header
07:04 - should be included in all your requests
07:06 - and the value of that header should be
07:07 - your api token and you'll see a similar
07:10 - kind of setup with basically any api
07:12 - that you use so when you create your
07:14 - assembly ai account in the link down in
07:17 - the description they'll give you your
07:19 - own api key and you can find it right on
07:22 - the landing page after you log in here
07:24 - your api key is something that you
07:26 - always want to keep private so don't
07:28 - give it to anyone don't share it and
07:30 - don't accidentally put it in a youtube
07:32 - video i'll be blurring it out or putting
07:34 - in a temporary fake one whenever i show
07:36 - it because i don't want anybody else to
07:38 - use it so to add a header over here just
07:40 - go ahead and put the name of the header
07:41 - that you want here which is going to be
07:43 - authorization and then the value here
07:46 - which is going to be your api key okay
07:49 - so now we've got all the elements of our
07:51 - request in place we've got the url the
07:54 - http method the body and the headers now
07:57 - to send the request we just hit send so
08:00 - here we go
08:02 - okay so here is our response over here
08:04 - on the right the first thing we want to
08:06 - note is the http status code of the
08:08 - response and that's what's shown here so
08:11 - here we received a 200 status code there
08:13 - are a whole bunch of different status
08:14 - codes that you'll come to memorize over
08:16 - the course of using various apis but
08:18 - there's only a few things you need to
08:20 - know about them to get started the one
08:22 - that we received a 200 basically means
08:24 - your call was successful your request
08:26 - was good and the api was able to do what
08:29 - you asked it to do you'll typically see
08:31 - only two other main categories of
08:33 - response codes and they both indicate
08:35 - failure and those are 400 and 500 level
08:38 - responses a 500 level response means
08:41 - something went wrong with the api on the
08:43 - server side it's not your fault and
08:45 - there's nothing wrong with your request
08:47 - that doesn't happen too much on good
08:48 - professional apis and i haven't gotten a
08:51 - 500 for any of these calls i've made
08:53 - with assembly ai but it's good to be
08:55 - aware of that on the other hand you have
08:57 - 400 level responses which basically
08:59 - means there's something wrong with the
09:01 - request that you're sending for example
09:03 - you're probably familiar with a 404
09:05 - which means that the end point that
09:07 - you're trying to hit doesn't exist there
09:09 - are other 400 level status codes that
09:11 - you might see in response to but
09:13 - basically they all mean something is
09:14 - wrong with the request that you're
09:16 - sending the response will also have
09:18 - headers just like the request does for
09:20 - example it's telling us the time stamp
09:22 - that it responded it's telling us that
09:24 - the body of the response is going to be
09:25 - in json stuff like that there are some
09:28 - situations where you might have to look
09:29 - at the information in a response header
09:31 - but honestly not too often but it's just
09:33 - good to know that they're there finally
09:35 - we have the body of the response now
09:38 - typically when you get a successful
09:39 - response to a post call which is
09:41 - supposed to create a new resource the
09:44 - body of the response that you get will
09:46 - be a representation of that resource at
09:49 - that time so we told it to create a
09:52 - transcript and it responded with the
09:54 - current state of the transcript we had
09:56 - it create you might expect that it would
09:58 - immediately respond with the full entire
10:00 - text of the audio file that we had it
10:02 - process but for this request it's going
10:05 - to be a little bit different because
10:06 - it's going to take a bit of time for
10:08 - assembly ai to fully process the audio
10:11 - file that we sent especially if it
10:12 - happens to be a very large file now if
10:15 - we look over here in the documentation
10:17 - it says that when we submit a file for a
10:19 - transcription the status will start with
10:22 - cued and then go to processing and then
10:25 - finally completed when it's done
10:27 - creating the transcript now this status
10:30 - that they're talking about refers to
10:32 - this status element that we see in the
10:35 - response body so right when we sent the
10:37 - request it cued our audio file to be
10:40 - processed and at some point after that
10:42 - it's going to complete and is probably
10:44 - already complete now so now in order to
10:46 - go and retrieve that completed
10:48 - transcript we're going to need to send
10:50 - one other request but luckily it's a
10:52 - very simple one so what we need to do
10:54 - now is get the current state of that
10:56 - resource again which should be the
10:59 - completed transcript now in order to get
11:02 - a specific transcript from assembly ai
11:05 - we have to identify it in some way
11:07 - notice that in the very first line of
11:09 - the response here is an id this id
11:13 - uniquely identifies this exact
11:15 - transcript so what we're going to do is
11:17 - create one other request starting as a
11:20 - duplicate of this first one but instead
11:22 - of sending a post to create a new
11:25 - transcript we're going to change this to
11:27 - a get so we can retrieve the current
11:30 - state of a transcript that has already
11:32 - been created now the way we get a
11:34 - specific transcript is by its id and all
11:37 - we have to do is put that id in the url
11:40 - right after transcript so it'll be
11:42 - transcript slash
11:44 - the id of the transcript that you want
11:46 - for this call there's no request body
11:48 - needed at all so we can just get rid of
11:50 - it and as for the headers it's the same
11:52 - as before we'll be sending our api key
11:55 - in the authorization header as is
11:57 - required for every call and that's it so
12:00 - let's go ahead and try it and see what
12:02 - we get
12:04 - all right so now we see that the status
12:06 - here instead of being queued it is now
12:08 - completed so this is the full transcript
12:11 - for that audio now there are a ton of
12:13 - really cool features in this response
12:15 - that you can play around with and i
12:17 - really encourage you to do so but the
12:18 - main part of it that you're probably
12:20 - interested in is this text element this
12:22 - text element is the string that contains
12:25 - your fully transcribed text for the
12:27 - audio you submitted pretty cool right so
12:30 - now that we know all the different parts
12:31 - of a rest api call and how it works and
12:34 - specifically how the assembly ai api
12:37 - works let's walk through exactly how you
12:39 - can create and send these requests in
12:41 - java okay so this is just a regular main
12:43 - method in a java project where we're
12:45 - going to code our rest call we're going
12:47 - to want to use some kind of a library to
12:49 - help us create json requests
12:52 - unfortunately there aren't any of those
12:53 - built into java so you're going to have
12:55 - to include it in your project the one i
12:58 - like the most is called json it's made
13:00 - by google and it's crazy easy to use if
13:03 - you're using maven the dependency for
13:05 - json looks like this okay so we need to
13:07 - make two calls right first is the post
13:09 - in order to have assembly ai create the
13:12 - transcript and then the get call to
13:14 - retrieve the completed transcript so
13:16 - let's work on the post request first so
13:18 - all the elements of our request
13:20 - the url the http method the request body
13:23 - and the headers are all going to get put
13:25 - into one object called the http request
13:29 - we'll go ahead and name it post request
13:31 - just to differentiate it from the get
13:32 - request we'll create later and we'll
13:34 - initialize this request with a call to
13:37 - httprequest
13:38 - dot new builder this uses the builder
13:41 - pattern so we can add all the different
13:43 - elements of our request in a chain of
13:46 - method calls first we'll call dot uri to
13:49 - set the url that we want to use for our
13:51 - request this method technically takes a
13:53 - uri object instead of a string but it's
13:56 - easy to create that object just by
13:57 - calling new uri and then passing in the
14:00 - string of the url that you want to use
14:02 - so let's just go back over here to our
14:04 - post request
14:05 - copy that url and paste it in here next
14:08 - we want to add the authorization header
14:11 - with our api key to add a header here
14:13 - you just need to call dot header now
14:16 - this takes two parameters the first
14:17 - parameter is just the name of the header
14:19 - that you want to pass in so for us that
14:21 - would just be authorization and the
14:23 - second parameter is the value that you
14:25 - want for that header so for us that be
14:27 - your api key now of course i don't want
14:29 - to give away my api key so i'm going to
14:31 - be creating it in a separate file and a
14:34 - string constant and just using that
14:36 - constant here there you go this is my
14:38 - api key if you want you can just go
14:41 - ahead and paste in your api key if
14:43 - you're working on the project yourself
14:44 - not a big deal next we have to tell it
14:47 - which http method that we want to use
14:49 - which will be post and also what we want
14:52 - our request body to be now to say that
14:54 - we want it to be a post we just call dot
14:57 - post now what this post method takes as
14:59 - a parameter is a body publisher now
15:02 - that's kind of a weird name but luckily
15:04 - it's pretty easy to use so if you want
15:06 - to send in a json string as your request
15:09 - body you just have to use body
15:11 - publishers
15:12 - string and then here you'll actually
15:14 - pass in the string of the json that you
15:17 - want to submit so if you want you can
15:19 - just go back here to your post request
15:21 - and copy the body that we used and paste
15:24 - it directly in here and that'll totally
15:26 - work but there's a better way to do it
15:27 - that'll make your life a whole lot
15:29 - easier in the long run and that is using
15:32 - json now back here just take a look at
15:34 - this request body remember that we're
15:36 - posting a transcript right we're saying
15:39 - hey assembly ai i want you to create a
15:42 - transcript and here's the current
15:44 - representation of that transcript object
15:47 - that i want you to create and the body
15:50 - of this request
15:51 - represents the current state of that
15:53 - transcript object which to start is just
15:56 - the audio url that we want it to use so
15:58 - this request kind of looks like an
16:01 - object of a transcript class that has an
16:04 - audio url string as its only field right
16:07 - now and actually that's exactly how we
16:10 - can create our json request in our java
16:13 - code let me show you what i mean so we
16:15 - can go back to our java project and
16:17 - create a new transcript class so public
16:20 - class transcript now this class will
16:23 - correspond to the request body the
16:25 - transcript that we're posting in our
16:28 - post request right now for this request
16:31 - the only thing we need in that
16:32 - transcript class is this audio url for
16:36 - this to all work correctly though using
16:37 - json we have to use this exact name as
16:40 - it is in the request so back here in our
16:43 - transcript class we're going to add a
16:45 - private string
16:47 - audio url and then we'll go ahead and
16:49 - generate
16:50 - our normal getters and setters then what
16:53 - we're going to do is create an object of
16:56 - this class and then we're going to have
16:58 - json do its magic to automatically
17:01 - translate that object into a json string
17:04 - exactly like this that we can use for
17:06 - our request so back over here in our
17:09 - main code we can create an object of
17:12 - that transcript class so transcript
17:15 - transcript equals new transcript and
17:19 - then we're going to set
17:20 - the audio url on that transcript object
17:23 - to be the audio url that we want to post
17:27 - so we'll just go back here and copy this
17:29 - same audio url
17:32 - and paste it here now here's how you use
17:35 - json to translate this object into json
17:39 - first you have to create a new json
17:41 - object so json json equals new gson and
17:45 - then all we have to do is call json.json
17:50 - and then pass in to this method the
17:53 - object that we want to translate into
17:55 - json so we'll just pass in our
17:58 - transcript object so let's go ahead and
18:00 - save this json string into a new
18:02 - variable we'll just call it a json
18:04 - request and set that equal to the result
18:07 - of that method call and we can go ahead
18:09 - and print out this json request just so
18:12 - we can prove to ourselves that it's
18:15 - working let's go ahead and comment this
18:17 - part out for now just so we can run this
18:19 - and make sure that it's properly
18:21 - creating our json request string
18:24 - okay so here's the json string that json
18:27 - is creating for us and it looks perfect
18:30 - and that's automatically created from
18:32 - this transcript object and we didn't
18:34 - have to do any fancy weird string
18:36 - parsing or anything like that all we had
18:38 - to do was call
18:39 - json.json
18:41 - pretty cool so now we can go back and
18:43 - uncomment these lines and then we can go
18:46 - back here and plug in our json request
18:50 - variable and then to finish off this
18:52 - post request object we just need to call
18:54 - dot build all right so now our request
18:57 - is ready to send how do we do that well
19:00 - we're going to use the http
19:02 - client library for that so first we'll
19:05 - create a new http client object we'll
19:07 - call it http client and we'll initialize
19:10 - it to
19:11 - httpclient
19:13 - dot new http client then in order to
19:16 - send this post request all we have to do
19:19 - is call http client
19:21 - dot send and then we need to pass in the
19:24 - post request that we want to send we
19:26 - also have to pass in something that
19:28 - tells it that we're expecting a string
19:30 - response as well and we'll do that by
19:33 - passing in body handlers dot of string
19:37 - again kind of weird but it's just how we
19:40 - tell it that we expect it to send a
19:41 - string in response now we can store the
19:44 - response that we get back from sending
19:46 - this call in an http response object so
19:50 - we'll create an http response of type
19:53 - string because we're going to get a
19:55 - string back in the response and we'll
19:57 - just call it post response now we can
20:00 - get the actual body of this response
20:02 - just by calling a post response dot body
20:05 - so for now let's go ahead and print out
20:07 - the body of the response that we get and
20:10 - give it a test
20:12 - and here we go
20:13 - there's our request and there's our
20:15 - response so awesome that worked here's
20:17 - the id of our transcript and a whole
20:20 - bunch of other information including the
20:22 - status which starts out as cued so
20:25 - everything's looking good next we just
20:26 - have to put together our get call and
20:29 - then keep sending that get call until
20:31 - assembly ai is done processing the audio
20:34 - first remember how in the get call we
20:36 - have to submit the id of the transcript
20:38 - that we want to get at the end of the
20:40 - url well right now that id
20:43 - is in the response to our post call but
20:45 - it's just in here you know inside the
20:47 - json string and we don't really have a
20:49 - good way to grab it so how should we go
20:51 - about doing that basically what we want
20:53 - to do is the reverse of what we did when
20:56 - we created the request so when we
20:58 - created the request we had a transcript
21:00 - object and we wanted to translate that
21:02 - object into a json string here we want
21:04 - to go the other way and we want to take
21:06 - this json string and translate it into
21:09 - an object often you'll need to create a
21:11 - whole separate class for the response
21:13 - that's different from the one that you
21:15 - needed for the request but in this case
21:17 - the response that we're receiving also
21:19 - represents the current state of the
21:22 - transcript object that we're creating so
21:24 - we can actually use this same transcript
21:27 - class and just add this id field onto it
21:31 - so let's go back to our transcript class
21:33 - and just add a private string
21:36 - id and we'll add getters and setters for
21:38 - that as well okay so now we just have to
21:42 - convert this response json that we
21:44 - received into
21:46 - a transcript object and we'll do that
21:48 - similarly to how we took an object and
21:51 - turned it into json so we actually
21:52 - called json dot from json now this
21:56 - method takes in two parameters the first
21:59 - of course is the actual json string that
22:01 - we want to convert into an object the
22:04 - second parameter is the class that we
22:06 - want to convert this json into so for us
22:09 - that would be transcript.class
22:12 - so next we can just assign our
22:15 - transcript variable which we already
22:16 - have to be the result of this conversion
22:20 - and now at this point we can get the id
22:22 - of that transcript off of this object
22:25 - just by calling transcript dot get id so
22:28 - now that we have the id let's construct
22:30 - our get request let's go ahead and start
22:32 - with a copy of this post request because
22:35 - a lot of it is going to be the same of
22:37 - course we'll change this to get request
22:40 - of course we'll change this post to a
22:42 - get now our get request doesn't need any
22:44 - request body so we can just get rid of
22:46 - that if we want and actually for this
22:48 - http request get is the default if we
22:51 - don't specify anything so if we want we
22:53 - can just go ahead and get rid of that
22:55 - completely the authorization header is
22:57 - exactly the same so we don't have to
22:58 - change that but we do have to change
23:00 - this url a bit remember that we have to
23:02 - append the id of the transcript that we
23:05 - want to get to the end of this url here
23:07 - so we'll just do plus
23:09 - transcript dot get id now we can
23:12 - actually send this get request and store
23:15 - the response in pretty much exactly the
23:17 - same way that we did with the post
23:19 - request so let's go ahead and copy
23:22 - this code that sends the post request
23:24 - but of course instead of a post response
23:27 - we'll have a get response and we'll be
23:29 - sending the get request we still want to
23:32 - use
23:33 - bodyhandlers.upstring here because we
23:35 - still expect a string in response to our
23:38 - call and the response that we receive
23:40 - from this get call is also a transcript
23:43 - so we can even store it in the same
23:46 - object here the same transcript object
23:48 - so down here we'll just be calling
23:49 - json.from json and passing in our get
23:54 - response so it'll take the body of the
23:56 - get response and translate that into a
23:59 - transcript also and store it here in
24:01 - this variable now remember though the
24:02 - first time that we send this get request
24:05 - it might not be done completely
24:08 - processing the audio and remember we can
24:10 - tell whether it's done or not by looking
24:13 - at this status in the response so what
24:16 - we're going to want to do is add this
24:19 - status
24:20 - into our transcript class so private
24:23 - string status while we're in this class
24:26 - though remember that when everything's
24:28 - completed the main text of the
24:31 - transcript is going to be in this text
24:33 - element of the response so while we're
24:35 - here let's go ahead and add that text
24:37 - field also so private string
24:40 - text and then again we'll go ahead and
24:42 - add our getters and setters
24:45 - okay so now that we've added these two
24:47 - fields json will automatically populate
24:51 - those fields on this transcript object
24:53 - correctly when it converts from the json
24:55 - string so anyway what we want to do is
24:58 - keep sending this get request over and
25:01 - over again until the response that we
25:04 - get back has a status of completed
25:07 - meaning that it's fully processed the
25:09 - file and the transcript is done or the
25:11 - api could also return error for this
25:14 - value if there's some kind of a problem
25:16 - processing the audio for example if
25:18 - maybe we sent in a bad url or something
25:20 - like that but anyway once it's completed
25:23 - then we can print out the text that it
25:25 - returns so let's go ahead and put the
25:27 - sending of this get call inside a while
25:30 - loop so we can keep sending it over and
25:32 - over again until it completes so we'll
25:34 - just do a good old-fashioned while true
25:37 - and put all of this code inside that
25:40 - loop now after we make the call each
25:42 - time let's go ahead and print out
25:45 - the value of the status that we get in
25:47 - the response so we can track it from
25:50 - going from queued on to processed and
25:53 - then finally being completed next we can
25:55 - check the value of the status to see if
25:58 - it is either completed or error and then
26:01 - break out of the loop if it is so that
26:03 - would be if
26:05 - first we'll check for completed so if
26:07 - completed dot equals transcript dot get
26:12 - status or
26:14 - error
26:15 - dot equals transcript dot get status so
26:18 - if the status is either one of those
26:20 - then we want to break out of our while
26:24 - loop so if it doesn't break out of the
26:25 - loop here that means it's still
26:27 - processing and we're going to make
26:28 - another get call
26:30 - over and over again until it's either
26:32 - completed or runs into an error but
26:34 - let's go ahead and have it wait for just
26:36 - one second before it tries again and
26:39 - there are fancier ways to have it wait
26:40 - for one second but for our purposes it's
26:42 - simple enough just to call thread.sleep
26:45 - for 1000 milliseconds so outside of this
26:49 - while loop we know that the processing
26:51 - has completed so let's go ahead and
26:54 - print out the text result so let's print
26:56 - out transcription completed
27:00 - and then print out
27:01 - transcript dot get
27:03 - text okay that should be it that should
27:06 - be everything we need so let's go ahead
27:08 - and run it and see if it's working okay
27:11 - so there's the post
27:13 - and the response we get from the post
27:14 - and now it's queued
27:16 - and processing processing
27:19 - still processing it's processing it's
27:20 - going through our loop and there we go
27:22 - it finally got completed as the status
27:25 - in the response and printed out the text
27:28 - these pretzels are making me thirsty and
27:30 - so it looks like it got cued and then
27:32 - processed for one two three four five
27:36 - six seconds or so and then completed
27:38 - that's pretty cool right it's pretty
27:40 - neat to be able to in your program
27:42 - submit an audio file and get a text
27:45 - transcript of it and with just a little
27:47 - bit of code and a good api you can do
27:50 - exactly that in your own java program so
27:52 - this is the basic way that you can
27:54 - interact with the assembly ai apis once
27:56 - you get the basics of this working
27:58 - though there are a ton of other features
28:00 - that you can explore as some quick
28:01 - examples it currently supports english
28:04 - spanish french german italian and more
28:08 - and the list of supported languages is
28:10 - growing all the time another cool thing
28:12 - is as a part of the response it actually
28:15 - breaks down each and every single word
28:18 - that is in the text transcript and
28:20 - exactly at what time stamp those words
28:23 - begin and end so that's really useful if
28:25 - you want to create something like
28:27 - subtitles it can do other things like
28:29 - filter out personally identifiable
28:31 - information or profanity if you want it
28:34 - to if you have multiple people talking
28:36 - in your audio file it can automatically
28:39 - identify and label who said which part
28:42 - and that's really just scratching the
28:43 - surface there's so much more that it can
28:45 - do so i encourage you to go ahead and
28:47 - give it a try click the link down in the
28:48 - description create a free account and
28:51 - play around with it and of course you
28:52 - can also take what you learned here
28:54 - about calling rest apis and apply it to
28:56 - any other api that you might find if you
28:58 - enjoyed this video or learned something
29:00 - please let me know by leaving a like and
29:02 - be sure to subscribe so you don't miss
29:03 - each new java tutorial and be sure to
29:05 - check out my full java course in the
29:07 - link down in the description as always
29:09 - thank you so much for watching i really
29:10 - appreciate you being here with me and
29:12 - i'll see you next time

Cleaned transcript:

in this video we'll walk through how to call a restful api in java we'll go through all the different parts of a rest web service call and how they work then we'll walk through step by step how to code your java programs to create those requests send them and process the results this video is being sponsored by assembly ai so we're going to be using their api as our example they have an api that translates speech to text that's the basics of what it does but it also has a ton of additional features so if you'd like to follow along and code this all yourself along with me just click the link down in the description to create your own account and get your api key it's totally free to get started and do everything that i show in this video you don't even need to provide a credit card or anything like that so go create your account in the link down in the description and follow along so first just what exactly is an api api stands for application program interface all an api really is is a way for two programs to talk to each other in recent years when developers talk about apis they're almost always talking about a web service that can handle http requests that are sent to it do some work and then return a response these web services are called rest services or restful services rest stands for representational state transfer first we'll go over all the different parts of a rest request and how they work and then we'll walk through step by step how to implement creating and sending those requests in java code what we're looking at here is just a simple chrome extension called boomerang that i like to use for testing out rest calls i like to use a tool like this to quickly test new apis before i go and implement them in code so this shows all the different parts of a web service request probably the main part of your request is going to be the url usually all the different services in any given api are all going to be under one common base url for assembly ai the base url to all of their web service calls is this api.assemblyai.com now the rest of the url can vary depending on what we're asking the api to do in that particular call any api that you use should have a ton of documentation about which url you should be using to perform whatever functionality you need just like assembly ai does here for example the first call that we're going to make is to send assembly ai some audio and have them transcribe it into text so we can see here that the url for that particular call ends in a v2 slash transcript so we're going to go ahead and add that to the end of our url here the other thing you'll notice here is this drop down right next to the url that has all these words like get post put delete these are called http methods or sometimes http verbs in general you can think of the http method here as the thing that you want to do and the url as the thing that you want to do that to the main http methods that you'll use almost all the time are these first four here get post put and delete those roughly correspond to your basic crud calls your create read update and delete calls typically you'll use post to create a thing get to retrieve a thing put to update a thing and delete of course to delete a thing and whatever url you use indicates the thing that you want to create read update or delete now if we look at this documentation for the assembly ai api they have this list of supported combinations of http methods and urls each one of these supported combinations is called an endpoint now if we scroll down here to the endpoint that creates a transcript we can see that the http method that we want to use is a post so let's go back over here and select post for our http method so this transcript is the thing that we want to operate on and since we're sending a post we're saying we want to create this thing we want to create a transcript the overall gist of this first call is we're going to send assembly ai an audio file and it will create a text transcript for us now the next element of a request to a rest api is the request body not every request will have a body but many will the body will contain basically any information that the api needs to perform the logic of the request 99.9 of the time you'll be writing your request bodies in json if you're not super familiar with json don't worry much about it what we're going to do with it here is pretty simple and straightforward the documentation for any api endpoint that you're using should tell you exactly what is required to send in a request body and then also what optional things you can send if you want for example in assembly ai's a post transcript endpoint it lists all the parameters that we could send in the request body here and there's quite a few of them however only one of them is listed as required and that is this audio url here and that kind of makes sense right the one thing you definitely need in order to create a transcript of some audio is the audio most api documentation will also have an example of a valid request body like this one here this shows what the most basic successful request to this endpoint will look like and it only includes the one required parameter the audio url of course if we want we can customize our request by messing around with all of these different optional parameters that the api offers and i encourage you to go through the documentation and play around with that but for now we're just going to keep it simple and copy this most basic version of a working request that they provide here but we are going to replace their audio file with our own so let's go ahead and copy this request and then back here we have to choose the body type that we want to use and for us we want to use json and then we just have to paste in our json request here in the text box but i'm going to replace the value of this audio url with the url of our own audio that we're going to be using so here's the audio file we're going to be sending to assembly ai to transcribe for us these pretzels are making me thirsty yes i am a nerd feel free to use this audio file yourself to test your own calls the link to the audio file will also be down in the description the last part of a rest request that we're going to look at is the headers headers are where you can include various kinds of metadata about the request so that could be like any credentials that you need to send to prove to the api that you are who you say you are or information on what kind of response we want to get back things like that i'll go ahead and click add header here so headers are just key value pairs just like a map in java so it's just the name of the header and then whatever value that we give it for this api there's just one required header and it tells you about it at the very first page of the walkthrough so it says authentication is handled via the authorization header and the header should be included in all your requests and the value of that header should be your api token and you'll see a similar kind of setup with basically any api that you use so when you create your assembly ai account in the link down in the description they'll give you your own api key and you can find it right on the landing page after you log in here your api key is something that you always want to keep private so don't give it to anyone don't share it and don't accidentally put it in a youtube video i'll be blurring it out or putting in a temporary fake one whenever i show it because i don't want anybody else to use it so to add a header over here just go ahead and put the name of the header that you want here which is going to be authorization and then the value here which is going to be your api key okay so now we've got all the elements of our request in place we've got the url the http method the body and the headers now to send the request we just hit send so here we go okay so here is our response over here on the right the first thing we want to note is the http status code of the response and that's what's shown here so here we received a 200 status code there are a whole bunch of different status codes that you'll come to memorize over the course of using various apis but there's only a few things you need to know about them to get started the one that we received a 200 basically means your call was successful your request was good and the api was able to do what you asked it to do you'll typically see only two other main categories of response codes and they both indicate failure and those are 400 and 500 level responses a 500 level response means something went wrong with the api on the server side it's not your fault and there's nothing wrong with your request that doesn't happen too much on good professional apis and i haven't gotten a 500 for any of these calls i've made with assembly ai but it's good to be aware of that on the other hand you have 400 level responses which basically means there's something wrong with the request that you're sending for example you're probably familiar with a 404 which means that the end point that you're trying to hit doesn't exist there are other 400 level status codes that you might see in response to but basically they all mean something is wrong with the request that you're sending the response will also have headers just like the request does for example it's telling us the time stamp that it responded it's telling us that the body of the response is going to be in json stuff like that there are some situations where you might have to look at the information in a response header but honestly not too often but it's just good to know that they're there finally we have the body of the response now typically when you get a successful response to a post call which is supposed to create a new resource the body of the response that you get will be a representation of that resource at that time so we told it to create a transcript and it responded with the current state of the transcript we had it create you might expect that it would immediately respond with the full entire text of the audio file that we had it process but for this request it's going to be a little bit different because it's going to take a bit of time for assembly ai to fully process the audio file that we sent especially if it happens to be a very large file now if we look over here in the documentation it says that when we submit a file for a transcription the status will start with cued and then go to processing and then finally completed when it's done creating the transcript now this status that they're talking about refers to this status element that we see in the response body so right when we sent the request it cued our audio file to be processed and at some point after that it's going to complete and is probably already complete now so now in order to go and retrieve that completed transcript we're going to need to send one other request but luckily it's a very simple one so what we need to do now is get the current state of that resource again which should be the completed transcript now in order to get a specific transcript from assembly ai we have to identify it in some way notice that in the very first line of the response here is an id this id uniquely identifies this exact transcript so what we're going to do is create one other request starting as a duplicate of this first one but instead of sending a post to create a new transcript we're going to change this to a get so we can retrieve the current state of a transcript that has already been created now the way we get a specific transcript is by its id and all we have to do is put that id in the url right after transcript so it'll be transcript slash the id of the transcript that you want for this call there's no request body needed at all so we can just get rid of it and as for the headers it's the same as before we'll be sending our api key in the authorization header as is required for every call and that's it so let's go ahead and try it and see what we get all right so now we see that the status here instead of being queued it is now completed so this is the full transcript for that audio now there are a ton of really cool features in this response that you can play around with and i really encourage you to do so but the main part of it that you're probably interested in is this text element this text element is the string that contains your fully transcribed text for the audio you submitted pretty cool right so now that we know all the different parts of a rest api call and how it works and specifically how the assembly ai api works let's walk through exactly how you can create and send these requests in java okay so this is just a regular main method in a java project where we're going to code our rest call we're going to want to use some kind of a library to help us create json requests unfortunately there aren't any of those built into java so you're going to have to include it in your project the one i like the most is called json it's made by google and it's crazy easy to use if you're using maven the dependency for json looks like this okay so we need to make two calls right first is the post in order to have assembly ai create the transcript and then the get call to retrieve the completed transcript so let's work on the post request first so all the elements of our request the url the http method the request body and the headers are all going to get put into one object called the http request we'll go ahead and name it post request just to differentiate it from the get request we'll create later and we'll initialize this request with a call to httprequest dot new builder this uses the builder pattern so we can add all the different elements of our request in a chain of method calls first we'll call dot uri to set the url that we want to use for our request this method technically takes a uri object instead of a string but it's easy to create that object just by calling new uri and then passing in the string of the url that you want to use so let's just go back over here to our post request copy that url and paste it in here next we want to add the authorization header with our api key to add a header here you just need to call dot header now this takes two parameters the first parameter is just the name of the header that you want to pass in so for us that would just be authorization and the second parameter is the value that you want for that header so for us that be your api key now of course i don't want to give away my api key so i'm going to be creating it in a separate file and a string constant and just using that constant here there you go this is my api key if you want you can just go ahead and paste in your api key if you're working on the project yourself not a big deal next we have to tell it which http method that we want to use which will be post and also what we want our request body to be now to say that we want it to be a post we just call dot post now what this post method takes as a parameter is a body publisher now that's kind of a weird name but luckily it's pretty easy to use so if you want to send in a json string as your request body you just have to use body publishers string and then here you'll actually pass in the string of the json that you want to submit so if you want you can just go back here to your post request and copy the body that we used and paste it directly in here and that'll totally work but there's a better way to do it that'll make your life a whole lot easier in the long run and that is using json now back here just take a look at this request body remember that we're posting a transcript right we're saying hey assembly ai i want you to create a transcript and here's the current representation of that transcript object that i want you to create and the body of this request represents the current state of that transcript object which to start is just the audio url that we want it to use so this request kind of looks like an object of a transcript class that has an audio url string as its only field right now and actually that's exactly how we can create our json request in our java code let me show you what i mean so we can go back to our java project and create a new transcript class so public class transcript now this class will correspond to the request body the transcript that we're posting in our post request right now for this request the only thing we need in that transcript class is this audio url for this to all work correctly though using json we have to use this exact name as it is in the request so back here in our transcript class we're going to add a private string audio url and then we'll go ahead and generate our normal getters and setters then what we're going to do is create an object of this class and then we're going to have json do its magic to automatically translate that object into a json string exactly like this that we can use for our request so back over here in our main code we can create an object of that transcript class so transcript transcript equals new transcript and then we're going to set the audio url on that transcript object to be the audio url that we want to post so we'll just go back here and copy this same audio url and paste it here now here's how you use json to translate this object into json first you have to create a new json object so json json equals new gson and then all we have to do is call json.json and then pass in to this method the object that we want to translate into json so we'll just pass in our transcript object so let's go ahead and save this json string into a new variable we'll just call it a json request and set that equal to the result of that method call and we can go ahead and print out this json request just so we can prove to ourselves that it's working let's go ahead and comment this part out for now just so we can run this and make sure that it's properly creating our json request string okay so here's the json string that json is creating for us and it looks perfect and that's automatically created from this transcript object and we didn't have to do any fancy weird string parsing or anything like that all we had to do was call json.json pretty cool so now we can go back and uncomment these lines and then we can go back here and plug in our json request variable and then to finish off this post request object we just need to call dot build all right so now our request is ready to send how do we do that well we're going to use the http client library for that so first we'll create a new http client object we'll call it http client and we'll initialize it to httpclient dot new http client then in order to send this post request all we have to do is call http client dot send and then we need to pass in the post request that we want to send we also have to pass in something that tells it that we're expecting a string response as well and we'll do that by passing in body handlers dot of string again kind of weird but it's just how we tell it that we expect it to send a string in response now we can store the response that we get back from sending this call in an http response object so we'll create an http response of type string because we're going to get a string back in the response and we'll just call it post response now we can get the actual body of this response just by calling a post response dot body so for now let's go ahead and print out the body of the response that we get and give it a test and here we go there's our request and there's our response so awesome that worked here's the id of our transcript and a whole bunch of other information including the status which starts out as cued so everything's looking good next we just have to put together our get call and then keep sending that get call until assembly ai is done processing the audio first remember how in the get call we have to submit the id of the transcript that we want to get at the end of the url well right now that id is in the response to our post call but it's just in here you know inside the json string and we don't really have a good way to grab it so how should we go about doing that basically what we want to do is the reverse of what we did when we created the request so when we created the request we had a transcript object and we wanted to translate that object into a json string here we want to go the other way and we want to take this json string and translate it into an object often you'll need to create a whole separate class for the response that's different from the one that you needed for the request but in this case the response that we're receiving also represents the current state of the transcript object that we're creating so we can actually use this same transcript class and just add this id field onto it so let's go back to our transcript class and just add a private string id and we'll add getters and setters for that as well okay so now we just have to convert this response json that we received into a transcript object and we'll do that similarly to how we took an object and turned it into json so we actually called json dot from json now this method takes in two parameters the first of course is the actual json string that we want to convert into an object the second parameter is the class that we want to convert this json into so for us that would be transcript.class so next we can just assign our transcript variable which we already have to be the result of this conversion and now at this point we can get the id of that transcript off of this object just by calling transcript dot get id so now that we have the id let's construct our get request let's go ahead and start with a copy of this post request because a lot of it is going to be the same of course we'll change this to get request of course we'll change this post to a get now our get request doesn't need any request body so we can just get rid of that if we want and actually for this http request get is the default if we don't specify anything so if we want we can just go ahead and get rid of that completely the authorization header is exactly the same so we don't have to change that but we do have to change this url a bit remember that we have to append the id of the transcript that we want to get to the end of this url here so we'll just do plus transcript dot get id now we can actually send this get request and store the response in pretty much exactly the same way that we did with the post request so let's go ahead and copy this code that sends the post request but of course instead of a post response we'll have a get response and we'll be sending the get request we still want to use bodyhandlers.upstring here because we still expect a string in response to our call and the response that we receive from this get call is also a transcript so we can even store it in the same object here the same transcript object so down here we'll just be calling json.from json and passing in our get response so it'll take the body of the get response and translate that into a transcript also and store it here in this variable now remember though the first time that we send this get request it might not be done completely processing the audio and remember we can tell whether it's done or not by looking at this status in the response so what we're going to want to do is add this status into our transcript class so private string status while we're in this class though remember that when everything's completed the main text of the transcript is going to be in this text element of the response so while we're here let's go ahead and add that text field also so private string text and then again we'll go ahead and add our getters and setters okay so now that we've added these two fields json will automatically populate those fields on this transcript object correctly when it converts from the json string so anyway what we want to do is keep sending this get request over and over again until the response that we get back has a status of completed meaning that it's fully processed the file and the transcript is done or the api could also return error for this value if there's some kind of a problem processing the audio for example if maybe we sent in a bad url or something like that but anyway once it's completed then we can print out the text that it returns so let's go ahead and put the sending of this get call inside a while loop so we can keep sending it over and over again until it completes so we'll just do a good oldfashioned while true and put all of this code inside that loop now after we make the call each time let's go ahead and print out the value of the status that we get in the response so we can track it from going from queued on to processed and then finally being completed next we can check the value of the status to see if it is either completed or error and then break out of the loop if it is so that would be if first we'll check for completed so if completed dot equals transcript dot get status or error dot equals transcript dot get status so if the status is either one of those then we want to break out of our while loop so if it doesn't break out of the loop here that means it's still processing and we're going to make another get call over and over again until it's either completed or runs into an error but let's go ahead and have it wait for just one second before it tries again and there are fancier ways to have it wait for one second but for our purposes it's simple enough just to call thread.sleep for 1000 milliseconds so outside of this while loop we know that the processing has completed so let's go ahead and print out the text result so let's print out transcription completed and then print out transcript dot get text okay that should be it that should be everything we need so let's go ahead and run it and see if it's working okay so there's the post and the response we get from the post and now it's queued and processing processing still processing it's processing it's going through our loop and there we go it finally got completed as the status in the response and printed out the text these pretzels are making me thirsty and so it looks like it got cued and then processed for one two three four five six seconds or so and then completed that's pretty cool right it's pretty neat to be able to in your program submit an audio file and get a text transcript of it and with just a little bit of code and a good api you can do exactly that in your own java program so this is the basic way that you can interact with the assembly ai apis once you get the basics of this working though there are a ton of other features that you can explore as some quick examples it currently supports english spanish french german italian and more and the list of supported languages is growing all the time another cool thing is as a part of the response it actually breaks down each and every single word that is in the text transcript and exactly at what time stamp those words begin and end so that's really useful if you want to create something like subtitles it can do other things like filter out personally identifiable information or profanity if you want it to if you have multiple people talking in your audio file it can automatically identify and label who said which part and that's really just scratching the surface there's so much more that it can do so i encourage you to go ahead and give it a try click the link down in the description create a free account and play around with it and of course you can also take what you learned here about calling rest apis and apply it to any other api that you might find if you enjoyed this video or learned something please let me know by leaving a like and be sure to subscribe so you don't miss each new java tutorial and be sure to check out my full java course in the link down in the description as always thank you so much for watching i really appreciate you being here with me and i'll see you next time
