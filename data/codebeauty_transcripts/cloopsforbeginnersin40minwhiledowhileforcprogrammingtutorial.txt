00:00 - hi guys and welcome to my channel in
00:02 - this video you are going to learn about
00:03 - loops in programming I will teach you
00:05 - what are Loops how to use them and when
00:08 - they are used in programming I will
00:10 - teach you about three different types of
00:12 - Loops while loop do while loop and for
00:15 - Loop and we are going to see what are
00:17 - the differences between them so that you
00:19 - can know when to use each one and before
00:22 - we start talking about loops I would
00:24 - like to invite you to join my practical
00:26 - programming course where you can learn
00:28 - all of the skills necessary to to start
00:30 - a successful career as a software
00:32 - developer so if you're tired because you
00:34 - cannot find a job or you already have a
00:37 - job but you are dreaming of a big career
00:39 - in software development then this
00:42 - practical programming course is going to
00:44 - teach you coding and it will help you to
00:46 - get your first job as a programmer if
00:49 - you like my YouTube videos then starting
00:51 - my practical programming course is going
00:53 - to be the best decision that you can
00:55 - make because I'm going to take you from
00:57 - beginner to expert and I will give you
01:00 - all of the guidance and support that you
01:02 - need so that you can start your career
01:04 - in the shortest amount of time you will
01:07 - get the opportunity to work on realistic
01:09 - projects I will also introduce you to a
01:11 - large community of successful developers
01:13 - that you can collaborate with and learn
01:15 - from and everything that you need is
01:18 - going to be on one place so I have
01:20 - created the entire plan for you and the
01:22 - only thing that you have to do is to
01:24 - follow that plan at the end those who
01:27 - finish the course successfully will get
01:29 - a certificate that is going to open and
01:31 - create a lot of career opportunities for
01:34 - you I will leave more details in the
01:36 - description and I will also leave a
01:38 - coupon code so that the fastest people
01:40 - who enroll in the course can get a
01:43 - special discount and if you're not sure
01:45 - if the course is for you or not we have
01:48 - 7-Day money back guarantee which means
01:50 - that for any reason if you don't like
01:53 - the course you can get all of your money
01:55 - back so you really have nothing to lose
01:57 - and learning programming can truly
01:59 - change change your entire life so with
02:02 - that being said let's continue talking
02:04 - about loops the first question is what
02:06 - are loops loops are used when you want
02:09 - to repeat a block of code multiple times
02:13 - and this concept also exists in real
02:15 - life but you don't think of it as a loop
02:18 - for example let's say that you are
02:20 - preparing some cookies there are certain
02:23 - steps that you would repeat for each
02:25 - cookie for example those steps would be
02:28 - take some cookie dough roll it in a ball
02:31 - and then you sprinkle it with chocolate
02:32 - and you put it on a plate and then you
02:34 - repeat those same steps for the next
02:36 - cookie so again you take some cookie
02:38 - dough roll it sprinkle with chocolate
02:41 - put it on a plate and you would repeat
02:44 - those steps until you run out of cookie
02:47 - dough so you would repeat them as long
02:49 - as you have enough cookie dough so that
02:52 - same thing can be done in programming
02:55 - with the help of Loops as I said there
02:58 - are three different types of loops that
03:00 - you are going to learn about in this
03:01 - video and those are while loop do while
03:05 - loop and for Loop so the first type of
03:08 - loop that I want to show you is do while
03:11 - loop so let's write the structure of a
03:14 - do while loop so you would say do and
03:18 - then inside these curly brackets you
03:20 - will put the steps that you want to
03:23 - repeat okay and then here you say while
03:27 - and inside these small parentheses you
03:30 - are going to put your condition so
03:32 - please do these steps while this
03:36 - condition here is true and then at the
03:39 - end you need to put this semicolon it's
03:42 - very important okay so this is the
03:45 - structure of a do while loop once more
03:49 - do these steps that I put here while
03:53 - this condition here is true so now let's
03:57 - describe our cookie example in code the
04:00 - first thing that I will do is I will
04:02 - declare variable of type int it will be
04:05 - called available cookie dough in grams
04:09 - and here I will say that I have let's
04:11 - say 300 gram of cookie dough okay so the
04:15 - steps that I want to repeat I will put
04:18 - them inside these curly brackets so what
04:21 - is the first step well the first step is
04:24 - to take let's say 100 G of cookie dough
04:27 - so take 100 G
04:30 - of
04:31 - D okay that is the first step after that
04:36 - I am going to decrease this available
04:40 - cookie dough by
04:42 - 100 okay so available cookie dough will
04:45 - be equal to available cookie dough minus
04:48 - 100 okay and then after that the next
04:52 - step is to roll it in a ball so let's
04:56 - say roll the cookie dough
05:01 - and then the next step is to sprinkle it
05:03 - with chocolate so let's say
05:07 - sprinkle with
05:10 - chocolate Okay and then the last step is
05:13 - to put it on a plate so let's write the
05:16 - last
05:18 - step okay so we are going to repeat all
05:23 - of these steps while the condition that
05:26 - we put here is true so what is going to
05:28 - be our condition well here I will say
05:32 - while available cookie dough in grams is
05:35 - greater than or equal to 100 because
05:39 - that is how much cookie dough we need
05:41 - for each cookie so as long as we have
05:45 - enough cookie dough we are going to
05:47 - repeat all of these steps so we are
05:50 - going to repeat all of these steps as
05:53 - long as this condition here is true and
05:56 - once this condition becomes false we are
05:58 - going to exit the loop so after I finish
06:03 - executing the loop I will simply say
06:05 - console right line and then let's say
06:08 - for example your cookies are ready like
06:11 - this okay so now let's run our program
06:14 - and let's see what is going to be the
06:17 - result okay so here is the output of our
06:20 - program so this is for the first cookie
06:24 - and then for the second cookie and for
06:27 - the third cookie and then your cookie
06:29 - cookies are ready so we have prepared
06:32 - three cookies in total because we have
06:35 - 300 G of cookie dough and for each
06:37 - cookie we need 100 G of cookie dope
06:41 - which means that our Loop repeated these
06:44 - steps three times even though we have
06:46 - written the code only once one very
06:49 - important thing to keep in mind whenever
06:50 - you are creating Loops is what are you
06:53 - going to put as the condition for your
06:56 - Loop which means when is your Loop going
06:59 - to stop because eventually it needs to
07:02 - stop because if you put here something
07:05 - that is always true like for example 1
07:08 - is equal to 1 this condition here will
07:12 - always be true and this Loop here will
07:15 - be an infinite Loop which means that it
07:18 - is never going to stop so if I start the
07:21 - program with this condition as you can
07:24 - see your Loop is going to run
07:27 - indefinitely which means forever
07:29 - basically until it takes up all of the
07:32 - resources of your computer it is not
07:35 - going to stop and only when you run out
07:37 - of memory then your program is going to
07:39 - crash and it is going to tell you that
07:41 - it is out of memory so the reason why we
07:45 - are experiencing this is because again
07:49 - this condition here will be always true
07:52 - so these steps will be repeated as long
07:55 - as the condition is true which means
07:57 - forever it is pretty obvious obvious
07:59 - that this condition here will always be
08:01 - true so you will probably not make a
08:03 - mistake like this you will not write
08:05 - your condition like this but what
08:08 - happens most often is the following
08:10 - let's return our previous code okay so
08:13 - here we have a valid condition but
08:16 - something that can happen is for example
08:19 - you forget to write this line here so
08:22 - you forget to decrease the amount of
08:26 - cookie dough so in that case also you
08:29 - are going to get an infinite Loop and
08:31 - just to demonstrate that I will run the
08:33 - program again and as you can see once
08:36 - more our Loop is running indefinitely
08:40 - and the reason for that once more is
08:42 - because here we are not decreasing
08:45 - cookie dough amount and here it will
08:48 - always be 300 is greater than 100 which
08:52 - will again always be true so your Loop
08:55 - is never going to stop so once more be
08:59 - be very careful when you are creating
09:01 - Loops because you need to write this
09:04 - condition here in such way so that it
09:07 - eventually becomes false because only
09:10 - when it becomes false your Loop is going
09:13 - to stop otherwise it is going to be an
09:16 - infinite Loop which means that it will
09:17 - run forever okay so let's do another
09:20 - example I'm going to explain what we
09:23 - want to achieve and then you can try and
09:24 - do this on your own and after that you
09:27 - can watch my solution so I want you to
09:29 - create a program that behaves like this
09:32 - it says enter a command type exit to
09:35 - quit so if I say for example hello it
09:39 - repeats enter a command type exit to
09:42 - quit if I say for example test again it
09:45 - will repeat the same if I say lol again
09:48 - I get the same so only when I type exit
09:53 - and I press enter our program is going
09:55 - to stop so I want you to use the
09:58 - knowledge about do while loop that I
10:01 - just explained in order to create
10:03 - program like this and if you want to do
10:06 - that on your own please pause the video
10:08 - here and now you can watch my solution
10:11 - so let's delete this code we will not
10:14 - need it and the first thing that I want
10:16 - to do is I want to create a string
10:19 - variable I will call it user
10:22 - input okay so this is where we are going
10:25 - to store users command users input and
10:28 - then I will use do while loop so I will
10:30 - say do these steps that I will put here
10:36 - while the following condition is true so
10:39 - here we are going to put the condition
10:41 - so what should be the condition well the
10:44 - condition should be as long as users's
10:47 - input is not equal to exit like this
10:52 - okay so this is the condition and then
10:55 - what are the steps that we want to
10:57 - repeat well we want to say
11:00 - console. write and then here I will put
11:04 - the text that I want to write to the
11:06 - user so enter a command type exit to
11:09 - quit Okay and after that I want to read
11:14 - the line that the user has entered and I
11:16 - want to store that inside this variable
11:20 - so we are going to repeat these steps
11:22 - which means write this text to the user
11:25 - and get his input and we are going to
11:28 - repeat those steps as long as the user's
11:32 - input is not equal to exit and when the
11:35 - user enters exit then we are going to
11:38 - stop the loop so let's test this program
11:42 - okay it says hello world and then enter
11:44 - a command so here I will say for example
11:48 - hello it repeats this text so if I say
11:52 - quit it will repeat it again if I say
11:56 - byy it will repeat it again so only if I
11:59 - type exit only then the loop will be
12:03 - stopped and something interesting for
12:06 - you to notice here is that the only text
12:08 - that will be repeated is this text
12:10 - inside the body of our Loop so enter a
12:14 - command type exit to quit and for
12:16 - example this text here this hello world
12:19 - that part is not going to be repeated
12:21 - because that part is not inside our Loop
12:25 - so only the things that you put inside
12:28 - these curly brackets inside your Loop
12:31 - only that will be repeated now another
12:34 - thing that we can improve here is the
12:36 - following so if I say for example exit
12:41 - with capital letters then the loop is
12:44 - not going to stop because what we are
12:47 - checking is if the user input
12:49 - corresponds to this text here and this
12:53 - text with lowercase is not the same as
12:56 - this text with uppercase so what we can
12:59 - do in order for this to work as well is
13:02 - we can put here two lower like this and
13:07 - what this method here is going to do is
13:10 - it will convert user's input to lower
13:13 - case so whether he enters it with
13:16 - capital letters or lowercase letters it
13:18 - will end up being lowercase and then it
13:21 - will compare it with this text here so
13:24 - now all of the variations of exit should
13:27 - work so let's start the
13:30 - program okay so now if I type exit like
13:35 - this it should work it works and then
13:38 - also if I type for example exit like
13:42 - this it should also work okay and if you
13:45 - want to send this program to your
13:47 - boyfriend or girlfriend you can adjust
13:49 - it like this so you can say for example
13:53 - do you love
13:55 - me okay and you want to repeat that
13:58 - question as long as the answer is not
14:01 - equal to yes okay and then once you get
14:05 - this yes as the answer you can say I
14:08 - love you too so here you can say I love
14:12 - you
14:13 - too okay so let's remove this hello
14:16 - world part and let's test the
14:18 - application okay so it asks do you love
14:21 - me and if I say no it will repeat the
14:24 - question again so again I can say for
14:26 - example maybe and it repeats the
14:29 - question again and then let's say I love
14:33 - your dad okay at that point you should
14:36 - not probably ask again but it is what it
14:39 - is and the application asks again do you
14:43 - love me so you can say yes and only then
14:47 - the application is going to stop and
14:50 - before that it is going to print I love
14:52 - you too okay now in case that she writes
14:55 - I love your dad what can we do in our
14:58 - program well we can adjust this while
15:01 - condition so we can say here for example
15:04 - that we want to check for multiple
15:05 - things so we want to check if the user
15:09 - input is not equal to this and at the
15:12 - same time we also want to check if the
15:14 - user input is not equal to I love your
15:19 - dad like this so in this case here and
15:22 - in this case here the loop will stop its
15:25 - execution and I will also adjust this
15:28 - part that happens after the loop so I
15:31 - will say for example if the user input
15:35 - is equal to yes so here I will change
15:39 - this so if the user input is equal to
15:42 - yes then I will print this text else if
15:47 - I will check for this other option so I
15:51 - will say else if user input is equal to
15:55 - this text here well in that case I want
15:59 - to print something else so in that case
16:02 - I will say I loved you here let's say
16:07 - but you broke my heart okay so I loved
16:11 - you but you broke my heart okay so let's
16:15 - test this coding Masterpiece it says do
16:19 - you love me I will say no do you love me
16:22 - so let's say I love your dad okay and I
16:27 - get reply I I loved you but you broke my
16:30 - heart oh this is so sad okay so what you
16:35 - learned here is that you can combine
16:37 - multiple conditions in order to stop the
16:40 - execution of your Loop and if you're
16:42 - confused about this end operator this is
16:46 - logical operator you can learn more
16:48 - about it in the video that will be
16:50 - linked here and I will also link it in
16:52 - the description now let's talk about
16:54 - another type of Loop and that is while
16:57 - loop so what is the difference between
16:59 - do while and while well the difference
17:03 - is following in case of a do while loop
17:07 - we first do something and then we check
17:11 - the condition on the other hand this is
17:14 - how while loop looks like okay so in
17:17 - case of a while loop we will first check
17:21 - the condition and then we will do
17:23 - something or if the condition is false
17:26 - initially then we will not do this part
17:30 - at all so the difference is that in case
17:32 - of a do while loop we will do this part
17:36 - here at least once before we check the
17:39 - condition and then we will continue
17:41 - repeating it as long as this condition
17:44 - here is true and in the case of a while
17:47 - loop if this condition here is false
17:50 - initially we will not do this part here
17:53 - at all so once more do while loop we'll
17:57 - do this part here at least once or maybe
18:01 - more depending if this condition here is
18:03 - true or false and in case of a while
18:07 - loop this part here does not need to be
18:10 - executed at all if this condition here
18:13 - is false initially so let's remove this
18:16 - code here and let's focus on our while
18:19 - loop this is how the structure looks
18:22 - like you say while and then here you are
18:25 - going to put the condition and then here
18:28 - you are going to put the steps that you
18:29 - want to repeat as long as this condition
18:32 - is true now one very important thing is
18:36 - that here you don't put this column sign
18:39 - if you do you will have an error so in
18:42 - case of a while loop you don't need this
18:45 - column sign and in case of a dowi loop
18:48 - you do need a column sign so what kind
18:50 - of program should we create let's say
18:53 - that we simply want to count down from
18:55 - five to One how can we do that with the
18:58 - help of while loop well let's say that
19:02 - initially I will create an integer
19:05 - variable and I will call it
19:07 - counter okay and I will assign the value
19:10 - of five to my variable so then what I
19:14 - will right here is I will say that this
19:17 - Loop will be executed while counter is
19:21 - greater than zero and then what I will
19:25 - do inside this while loop is I will
19:27 - simply print the value of counter so I
19:30 - will say
19:31 - console. right line and what I want to
19:35 - write is the value of this counter
19:38 - variable and after that I want to
19:41 - decrement its value so I will say
19:44 - counter minus minus like this so please
19:48 - decrement the value of this variable and
19:51 - if I start the program as you can see
19:54 - our Loop has counted from five to One
19:58 - backwards and then it stopped okay so
20:02 - once more it is very important that you
20:05 - write a proper condition for your Loop
20:08 - and also if you are counting up or down
20:11 - it is very important that you either
20:13 - decrement or increment your counter so
20:16 - that it eventually reaches this value
20:20 - and then this condition here will be
20:22 - false so the loop will stop its
20:25 - execution and another way that you can
20:27 - write this same condition is here you
20:29 - can see if counter is greater than or
20:33 - equal to one and the program is going to
20:36 - work absolutely the same so if I start
20:39 - it as you can see again it has counted
20:42 - from five to one and then it stopped
20:45 - okay so now I have a task for you and
20:48 - that would be to create a program that
20:50 - is going to count from one to five so
20:53 - you can adjust the code that we have
20:55 - here so that your Loop prints one to 2 3
20:59 - 4 5 instead of this output here so if
21:02 - you want to try and solve this problem
21:05 - on your own you can pause the video here
21:07 - and now we are going to do it together
21:10 - so if I want to count from 1 to five
21:13 - that means that I will start my counter
21:16 - on one and then I will execute this Loop
21:20 - while counter is less than or equal to
21:24 - five because I'm counting to five and
21:27 - then in each iteration
21:29 - I will write the value of counter and
21:31 - then I will increment it so I will
21:34 - increase it by one so this is how the
21:37 - solution for our problem should look
21:39 - like and if I start the program as you
21:42 - can see it counts from one to five and
21:45 - then the loop stops okay now let's do
21:49 - something more interesting remember
21:51 - those tasks that your math professor
21:53 - used to give you in middle school or
21:55 - high school and those tasks would be
21:58 - something like this please sum all of
22:00 - the numbers between 1 and 1 million
22:03 - what's the result and you're like uh I
22:06 - know that I shouldn't do it manually but
22:09 - I don't know how to do it in a better
22:10 - way so I guess I'm just going to fail
22:13 - maths well now there is an easy way to
22:17 - do this with the help of programming in
22:19 - a matter of a few seconds so now I'm
22:22 - going to show you how you can do that
22:24 - with the help of code so how can we
22:26 - write a program that is going to sum all
22:29 - of the numbers between 1 and 1 million
22:32 - so what we will do is we will count from
22:35 - 1 to 1 million so one and then 1 2 3 4 5
22:40 - six zeros so we are counting from one to
22:43 - 1 million and then I will create a
22:46 - variable it will be of type double and I
22:50 - will call it sum okay and here what I
22:53 - want to do is in each iteration I want
22:57 - to say that sum plus equals to counter
23:02 - like this so to my sum I am going to add
23:05 - the value of the current counter and
23:08 - then I will increment my counter and I
23:10 - will do that for all of the numbers
23:12 - between one and one million but we
23:16 - cannot start our program because we have
23:18 - one small problem which says use of
23:22 - unassigned local variable sum which
23:24 - means that you cannot use this variable
23:27 - before you assign a value so what I need
23:30 - to do is in this line here where I'm
23:33 - creating my sum I need to assign an
23:36 - initial value to this variable now my
23:39 - question to you is what should be this
23:42 - value this value should be a number that
23:46 - is neutral when it comes to summing
23:48 - operation so what is that number well
23:52 - that number is zero because when you add
23:55 - zero to any other number you will get
23:58 - that same number which means that zero
24:01 - is not going to change our sum at all
24:04 - but it will fix the problem that we had
24:06 - here so now after I iterate and sum all
24:10 - of the numbers between 1 and 1 million
24:13 - after my while loop I will simply write
24:16 - the result so let's say console. WR line
24:20 - and here I will say sum is equal to and
24:24 - then let's just print the value of some
24:27 - variable so if I start the program this
24:31 - is the result that we get your math
24:34 - teacher would be proud absolutely um and
24:37 - because this number is too big so we
24:39 - cannot check this in our heads let's
24:42 - just test this with some smaller numbers
24:44 - so let's say sum of numbers between one
24:47 - and three that should be six and if I
24:50 - start the program as you can see we get
24:53 - six so that means that our code works
24:56 - okay now I have a task for you and that
25:00 - would be to please adjust this program
25:03 - so that it sums only even numbers and
25:07 - those are numbers that when you divide
25:09 - them with two they give you the
25:11 - remainder of zero so you can try and
25:15 - solve this problem on your own please
25:16 - pause the video here and now you can
25:19 - watch my solution so if you want to sum
25:22 - only even numbers before you perform
25:25 - this summing operation you will check if
25:28 - your current counter is even so you say
25:32 - if counter modulo 2 is equal to zero so
25:38 - only if this number is divisible by two
25:42 - only in that case perform this summing
25:45 - operation and then in any case increment
25:49 - the counter so only this part is under
25:52 - our if condition so now if I run the
25:55 - program let's see what is the result the
25:57 - result is two because the only even
26:00 - number between one and three is two so
26:03 - that is our result and then if I change
26:06 - this to be four so I'm counting from one
26:10 - to four and I'm summing only even
26:12 - numbers so those would be two + 4 the
26:15 - result should be six okay and as you can
26:18 - see the result is six okay so let's
26:23 - repeat once more this is how you use
26:26 - while loop you say while and then inside
26:30 - these parentheses you put your condition
26:33 - and as long as this condition here is
26:36 - true this code here will be repeated and
26:40 - once this condition results as false
26:43 - then you are going to quit the execution
26:46 - of your Loop so you need to make sure
26:49 - that you put here a code that is going
26:53 - to eventually make this condition to
26:56 - become false okay so this is while loop
27:00 - and so far we have learned about do
27:03 - while while and we have one more Loop
27:06 - that we need to learn about and that is
27:08 - four Loop so now I'm going to explain
27:12 - what is four Loop so four Loop is very
27:15 - similar to while loop and it is used
27:18 - when you want to iterate through certain
27:20 - range of numbers and you know exactly
27:24 - where you start so at which number you
27:26 - will start and at which number you will
27:29 - end so now we are going to solve this
27:32 - same problem with the help of four Loop
27:34 - so that you can see two different
27:36 - approaches and then you can decide which
27:39 - approach you prefer and which approach
27:41 - you want to use so this is the syntax of
27:44 - four Loop you say four and then inside
27:48 - these parentheses we will put three
27:50 - things I will explain that in a moment
27:53 - and then inside these curly brackets we
27:56 - will put the code that we want to repeat
27:59 - so what should we put inside these
28:02 - parentheses I said that here we will put
28:04 - three things the first thing is starting
28:08 - value of our counter the second thing is
28:11 - end value of our counter and the third
28:15 - thing is the rule that will either
28:17 - increment or decrement that value so
28:19 - that we can go from start to end so
28:23 - let's write that starting value will be
28:26 - this value here so I will just copy this
28:30 - code so I am declaring counter variable
28:33 - of type int and its initial value will
28:36 - be one okay and then you need to put
28:39 - this semicolon sign please don't forget
28:42 - that it's very important so our start
28:45 - value and then here we need to put our
28:48 - end value so how many iterations will
28:50 - this Loop have and here is our end value
28:55 - so we will iterate as long as the count
28:58 - is less than or equal to four okay that
29:02 - is the second thing and again you need
29:05 - semicolon and then the third thing is
29:07 - the rule that will take us from here to
29:10 - here and that is this rule so I will
29:15 - copy that part as well so we start at
29:18 - one we go until counter is less than or
29:21 - equal to four and in each iteration we
29:24 - increment counter by one and this here
29:28 - is the syntax of four Loop and once more
29:31 - it's very important that you don't
29:33 - forget to put semicolon here and also
29:37 - here okay so what should we put inside
29:40 - the body of our for Loop we should put
29:43 - the code that we want to execute in each
29:45 - iteration and that is this code here so
29:50 - here I will say in each iteration please
29:52 - check if this counter is an even number
29:56 - and if it is add it to my sum so here
30:00 - you can compare how while loop looks
30:02 - like and how for Loop looks like these
30:06 - two are going to do absolutely the same
30:09 - thing but they have different syntax and
30:12 - you can use whichever one you prefer so
30:15 - in case of a while loop you will declare
30:18 - counter here outside of your Loop and
30:21 - then here you will put your condition
30:24 - and then inside the loop you will put
30:27 - the rule that is going to change the
30:28 - value of that counter so that you can
30:31 - eventually reach that condition and make
30:34 - it false that is while loop and all of
30:37 - these are elements of while loop and
30:40 - then this here is for Loop and in case
30:43 - of a for Loop you put all of those three
30:46 - things together here inside these
30:49 - parentheses so start value of the
30:51 - counter and value of the counter and the
30:54 - rule that is going to change the value
30:57 - of the counter so that it can go from
30:59 - the start to the end so now I will
31:02 - delete this code that is related to our
31:05 - while loop so that we have only the code
31:07 - that is related to for Loop and then I
31:10 - will move this line of code at the end
31:13 - so after I sum all of the numbers I will
31:16 - print the result so if I start the
31:19 - program let's see what is going to be
31:21 - the result and as you can see the result
31:24 - is six so we are summing only even
31:27 - numbers between 1 and four so those are
31:29 - 2 + 4 and the result is six okay one
31:36 - very important thing that I didn't tell
31:37 - you before is that writing your for Loop
31:40 - like this is a sacrilege in developer
31:43 - Community it's basically a sin which
31:46 - part well this part here the name of
31:50 - your counter variable every developer
31:53 - knows that this variable here should not
31:55 - be named counter it should be named I
32:00 - like a single letter I so I is equal to
32:04 - 1 and then I is less than or equal to
32:06 - four and then here
32:08 - i++ and then here also you should use i
32:12 - instead of counter okay so your code is
32:16 - going to work absolutely the same but
32:19 - this here is common naming that
32:21 - developers use inside for Loop and if
32:25 - you need to create multiple for Loops
32:27 - instead of of naming your variables
32:29 - counter 1 counter 2 counter three and so
32:32 - on you are going to name them I J K Zed
32:36 - and so on and once more your code is
32:38 - going to work absolutely the same
32:40 - regardless of the name that you use for
32:42 - your counter or iterator variable but
32:46 - naming it like this is a common practice
32:49 - among developers and when any developer
32:52 - in the world sees this name he will know
32:55 - what it is and when he sees some
32:56 - different name he will be like what is
32:58 - this who wrote this code so that is my
33:01 - suggestion for you you should also use
33:04 - this as the name for your iterator
33:07 - variable so now I have a task for you so
33:10 - that you can practice using for Loop and
33:12 - that task is following I want you to
33:15 - iterate through all of the numbers
33:17 - between let's say two and seven and I
33:20 - want you to multiply all of those
33:22 - numbers so 2 * 3 * 4 * 5 * 6 * 7 and to
33:28 - give me the result so you can try and
33:31 - solve that problem on your own and now
33:34 - we are going to do it together so as I
33:36 - said we will start iterating from number
33:39 - two until number seven okay and what we
33:44 - are going to do inside each iteration is
33:47 - we will simply multiply that number to
33:50 - the result that we currently have so
33:53 - let's rename this variable here let's
33:55 - call it result or result of
33:58 - multiplication but that is too long and
34:01 - here inside each iteration what I want
34:04 - to do is I want to say that result will
34:08 - be equal to whatever result was
34:11 - previously holding multiplied by I so
34:15 - you can write it like this or you can
34:18 - write it like this both lines are going
34:22 - to do absolutely the same thing but this
34:24 - approach here is just shorter way to
34:27 - write that same thing okay so now after
34:30 - I finish multiplying all of the numbers
34:33 - here I will say that result is equal to
34:38 - this value here so now if I run the
34:41 - program what do you expect to get let me
34:43 - know in the comment section please pause
34:45 - the video and think about what is going
34:48 - to be the result and write it in the
34:50 - comment section and now I will run the
34:53 - program okay and as you can see we get
34:57 - the result of zero but this is not the
35:00 - correct result it's definitely not zero
35:03 - so now the question is why are we
35:05 - getting zero here and the answer is
35:09 - because of this initial value of our
35:12 - result variable so we need to put here
35:15 - initial value because if we don't have
35:17 - it then we are going to have an error
35:20 - here so we need to initialize this
35:23 - variable but what should be initial
35:26 - value of this variable is a number that
35:29 - is neutral when it comes to
35:31 - multiplication and the number that is
35:33 - neutral in multiplication is one because
35:37 - any number that you multiply by one you
35:39 - get that same number so here I will say
35:42 - that my result initially is equal to one
35:45 - because that is not going to change our
35:48 - result so now if I start the program
35:52 - this here is the result that we get so
35:55 - here I have calculator app app so that
35:58 - we can check this result so 2 * 3 * 4 5
36:05 - 6 and seven and the result is the same
36:09 - result that we have in our application
36:12 - which means that our code works so in
36:15 - this video we have learned one very
36:17 - important Concept in programming and
36:19 - those are loops loops are used very
36:22 - often in programming whenever you want
36:23 - to repeat some steps in your code you
36:27 - use Loops we have learned about three
36:29 - different types of Loops do while loop
36:32 - while loop and for Loop and we have said
36:34 - that they are all used in order to solve
36:37 - same types of problems but sometimes it
36:40 - is better and more intuitive to use one
36:43 - Loop and sometimes it is more intuitive
36:45 - to use the other loop but it is not
36:47 - mistake if you use for example while
36:50 - loop instead of for Loop or vice versa
36:53 - now when it comes to their differences
36:55 - we said that the difference between do
36:57 - while and while loop is that in the case
36:59 - of do while loop we first do something
37:03 - and then we check the condition and in
37:05 - case of a while loop we first check the
37:08 - condition and then do something so that
37:11 - means that do while loop will be
37:12 - executed at least once because we first
37:15 - do and then we check the condition and
37:18 - while loop does not have to be executed
37:21 - at all if the condition is false
37:23 - initially and then while loop and for
37:26 - Loop are very similar and the difference
37:29 - is that while loop gives you more let's
37:31 - say flexibility because inside while
37:33 - loop you can put multiple conditions and
37:36 - more complex conditions that are going
37:39 - to terminate the execution of the loop
37:42 - so while loop is usually used when you
37:44 - need to write those more complex
37:47 - conditions for stopping the loop and for
37:49 - Loop is used when you know exactly from
37:52 - which number to which number you want to
37:55 - iterate on the internet you are to find
37:58 - a lot of different ways to write your
37:59 - Loops but the approaches that I'm
38:01 - showing here are the ones that are best
38:05 - practices which means that they will not
38:07 - create bugs they will not create
38:08 - spaghetti code they will be easy to
38:11 - understand and easy to maintain in the
38:13 - future now what I'm saying is that for
38:16 - example this same for Loop can be
38:19 - written also like this but please don't
38:22 - do it it's really really bad even though
38:25 - it is going to work the same it is much
38:28 - harder to understand it is much harder
38:30 - to test and eventually in the future it
38:33 - is going to cause you a lot of headaches
38:35 - and a lot of problems so the same way
38:38 - that you can for example put a left shoe
38:41 - on the right foot and put a right shoe
38:44 - on the left foot and you can probably
38:46 - walk like that for a while it doesn't
38:49 - mean that you should do it and the same
38:51 - applies in programming just because
38:53 - something works it doesn't mean that you
38:56 - should do it it so the approaches and
38:59 - the code that I've shown here is the
39:01 - right way and the best practice to use
39:04 - Loops so if you have any questions
39:06 - regarding this topic or if you want me
39:08 - to make a video about some other topic
39:11 - you can leave your suggestions and your
39:12 - questions in the comment section and in
39:15 - the upcoming videos we are going to talk
39:17 - about nesting Loops because that is
39:20 - another important concept and that is
39:22 - another important topic that I want to
39:24 - cover because it is used very often
39:27 - because what you can do is you can have
39:29 - these Loops inside each other and that
39:32 - is called Loop nesting so we will cover
39:35 - that topic in the upcoming videos so if
39:38 - you enjoyed this video then give it a
39:40 - big thumbs up and if you enjoy my
39:42 - YouTube videos in general if you find
39:44 - them helpful then definitely enroll in
39:47 - my practical programming course because
39:49 - there I can dedicate a lot more time to
39:52 - you specifically and I can help you to
39:54 - achieve your goals to get your job as a
39:57 - soft developer and to do that in the
39:59 - least amount of time possible learning
40:02 - to code can truly transform your life
40:04 - and I can help you to learn coding in an
40:07 - easy and fun way and if you decide to
40:10 - start my programming course right now in
40:12 - the description I will leave a coupon
40:14 - code that you can use in order to get a
40:17 - special discount and as I said because
40:20 - I'm 100% sure in the quality of this
40:22 - course I'm offering a 7day money back
40:25 - guarantee which means that if if you
40:27 - don't like it for any reason you can get
40:30 - all of your money back so you have
40:32 - nothing to lose and a lot to gain you
40:35 - can find more details in the description
40:37 - and if you decide to enroll I will see
40:40 - you in a minute thank you very much for
40:42 - watching bye