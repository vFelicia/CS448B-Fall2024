00:00 - hi guys and welcome to my channel in
00:02 - this video I'm going to teach you about
00:03 - arrays and objects this is going to be
00:06 - an introduction video and I will film a
00:09 - couple more videos where I explain more
00:11 - advanced topics so make sure to watch
00:13 - all of the videos that will be in this
00:15 - playlist so again we will cover
00:17 - everything from the beginning to more
00:19 - complex and advanced topics until you
00:22 - understand everything in depth and this
00:24 - topic is something that every single
00:26 - developer should know about and should
00:28 - understand
00:30 - so I will probably film all of the
00:32 - videos right now but I will publish a
00:34 - new part each week so that I don't have
00:36 - to edit one very long video because as
00:38 - many of you already know currently I am
00:41 - very busy with preparing my practical
00:42 - programming course and I'm putting all
00:45 - of my focus into that so all of my
00:48 - knowledge and over 10 years of
00:49 - experience is going into this course so
00:51 - that It prepares you to start working in
00:53 - the real world and finally stop watching
00:56 - videos and tutorials and just start
00:58 - working uh so that is the goal of the
01:01 - course and after finishing the course
01:03 - you will have a strong in-depth
01:05 - understanding of programming so that you
01:08 - can continue building your knowledge on
01:10 - your own as you advance in your
01:11 - programming career because as a
01:13 - developer you will never really stop
01:15 - learning but you will be able to do it
01:18 - on your own also this community means a
01:20 - lot to me because you have been
01:21 - following me for a long time and I feel
01:24 - like you should have a special discount
01:26 - when compared to other people so I will
01:29 - put a link in the description
01:30 - description of this video that you can
01:31 - use to sign up and I will send you a
01:34 - discount once the course launches it is
01:37 - completely free to sign up but make sure
01:39 - to do it right now because the number of
01:41 - people that can get this discount is
01:44 - limited so if you're interested there
01:45 - will be a link in the description for
01:47 - you
01:48 - um so with that being said let's
01:50 - continue with the topic of today's video
01:52 - first I want to say that if you are not
01:54 - familiar with array data structure at
01:56 - all make sure to watch this video
01:58 - because here I explained all the basics
02:01 - and everything that you need to know in
02:03 - order to be able to follow this video it
02:06 - will also be linked in the description
02:07 - so make sure to watch that video and
02:08 - then you can come back here but if you
02:10 - already understand arrays of primitive
02:12 - data types then you can continue
02:13 - watching this video so here I have the
02:17 - list of topics that we will cover in
02:19 - this video and then after this video
02:20 - there will be more parts where we cover
02:22 - more complex topics about arrays and
02:26 - objects so please don't mind me reading
02:29 - because I don't want to forget something
02:30 - important so we will learn what are
02:33 - arrays of objects we will learn how they
02:35 - are different from arrays of primitive
02:37 - data types so what is the difference
02:39 - between array of objects and array of
02:41 - primitive data types we will also learn
02:43 - why and when you should use arrays of
02:46 - objects I will teach you how you can
02:49 - access an individual object in the array
02:52 - also how you can access and modify
02:54 - object properties from the elements of
02:57 - the array we will see how you can use
02:59 - Loops in order to perform operations on
03:02 - arrays of objects and I will teach you
03:05 - about most common errors that happen
03:07 - very often especially to beginners when
03:10 - working with arrays and also at the end
03:13 - there will be a task for you so that you
03:15 - can practice on your own in order to get
03:17 - a better understanding of this topic
03:19 - because as you already know watching my
03:21 - video is going to help you to understand
03:22 - the topic but in order to make it
03:24 - permanent in your head you will have to
03:27 - practice on your own as well so these
03:30 - are the topics that we are going to
03:31 - cover in today's video so let's start
03:34 - so the first thing that I want to
03:36 - explain is what are arrays of objects
03:38 - and how are they different from arrays
03:40 - of primitive data types so in order to
03:42 - understand that let's create an array of
03:46 - primitive data types let's say that I
03:48 - want to create an array of integers I
03:51 - will call it lucky numbers
03:54 - and it is going to be an array of five
03:57 - integers let's initialize it let's say 1
04:00 - 3 5 13 and 21 okay so with this line
04:06 - here I have created an integer array
04:09 - that has five elements and it is called
04:11 - lucky numbers and here I have
04:14 - initialized those five lucky numbers so
04:17 - this is an array of primitive data types
04:19 - and as you already know we use arrays in
04:22 - order to group elements of the same type
04:24 - together and arrays store those elements
04:27 - in consecutive memory which means one
04:29 - after the other so this array here has
04:32 - allocated five memory containers to
04:36 - store these five numbers and those
04:38 - containers those those little boxes
04:40 - where you store these numbers are one
04:42 - after the other in memory and that is
04:44 - the characteristic of an array and it
04:46 - doesn't matter if you're storing
04:47 - primitive data types or if it is an
04:50 - array of objects so this is an array of
04:53 - primitive data types now if I wanted to
04:56 - store objects into an array that would
04:59 - be a little bit more complex so let's
05:01 - say for example that we are working with
05:04 - students we want to make an application
05:05 - that is working with students and we
05:07 - want to store an array of students so
05:09 - let's see how would that go first thing
05:11 - that I would need is a class called
05:14 - student so let's create that let's say
05:16 - class student
05:19 - like this and make sure to have this
05:22 - semicolon at the end okay so here I will
05:25 - define the properties for my student
05:26 - class let's say string
05:29 - name and then let's say int age Char
05:34 - gender
05:36 - and what else let's say the student will
05:39 - have float programming rate
05:43 - like this okay so these are four
05:47 - characteristics and four properties that
05:49 - we want to store about our student so
05:52 - now what I can do is I can create
05:53 - objects of class student and I can store
05:57 - them in my array but one very important
05:59 - thing before I continue is to make all
06:02 - of these public so that we are able to
06:05 - access these properties outside of this
06:08 - class okay it's very important to make
06:09 - them public
06:11 - okay now let's create an object of type
06:14 - student let's say
06:16 - student let's call it S1 okay and now I
06:22 - will initialize the properties of
06:23 - students I will say S1 dot name will be
06:26 - let's say salvina
06:29 - okay and then let's say S1 dot age is 28
06:34 - and then s1.gender will be let's put
06:39 - these single quotation marks and I will
06:41 - put here f for female okay and let's say
06:45 - S1 dot programming grade I will give
06:48 - myself grade of nine because there is
06:50 - always place for improvement okay and
06:53 - with this I have created one student now
06:56 - what I can do is I can create an array
06:59 - and add the student to my array so let's
07:02 - see how we can create an array of
07:05 - objects this is how we created an array
07:08 - of primitive data types so now the logic
07:12 - is going to be the same for an array of
07:14 - objects I will copy this here so here
07:16 - instead of creating an array of integers
07:18 - we will create an array of students
07:21 - like this I will call it students
07:25 - okay and it is going to be an array of
07:28 - let's say three students
07:31 - okay
07:32 - so with this I have created an array of
07:35 - students that can have Max three
07:37 - students so now let's see how we can add
07:41 - this student here Selena to my array so
07:44 - I will say students
07:46 - of 0 is equal to S1 now what does this
07:51 - mean first thing that you should need to
07:53 - know is that indexation of the array
07:56 - starts with zero what does that mean
07:57 - that means that the first element of the
08:00 - array has the index of zero and then
08:04 - second has the index of one third has
08:05 - the index of two and so on so that is
08:08 - one very important thing why are the
08:10 - indexes important they are important
08:12 - because you use them to access
08:14 - individual elements of the array so here
08:17 - is the example here we used index 0 of
08:20 - students array to access the first
08:22 - element of the array and there we stored
08:25 - our student the one that we created here
08:27 - so with these two lines we have created
08:31 - an array of students that has three
08:34 - elements and on the first position in
08:36 - the array we have stored this student
08:39 - here so this is one way that you can use
08:42 - to add elements to the array so now I
08:45 - can manually create two more students
08:46 - like I did here and then I can add them
08:49 - to my array okay so that is one way to
08:52 - initialize your array another way that I
08:55 - could use is I could create a
08:58 - Constructor here inside my students
09:01 - class and then I could initialize my
09:03 - array of students very similar to this
09:06 - approach here where we had these curly
09:08 - brackets and and inside these curly
09:10 - brackets I've initialized all of the
09:12 - elements so let's see how does that
09:14 - approach look like so the first thing
09:16 - that I will need is a Constructor for my
09:19 - student class
09:20 - again make sure that everything that you
09:23 - put inside your student class is under
09:25 - this public access modifier so that it
09:28 - is publicly accessible okay so let's
09:30 - create Constructor let's call it
09:32 - students I mean that is the name that
09:34 - you have to give to the Constructor
09:35 - because Constructor has the same name as
09:38 - the class that it belongs to and it
09:39 - doesn't have any return type not even
09:41 - void so this here is Constructor and the
09:46 - Constructor will receive four parameters
09:49 - so it will receive string name it will
09:52 - receive int age and then Char gender and
09:58 - let's say float programming grade
10:02 - okay and here I will initialize these
10:06 - properties based on the values that I've
10:07 - received here in the Constructor so I
10:10 - will say name is equal to name okay so
10:13 - the property of my student will be equal
10:15 - to the parameter that I received into my
10:17 - Constructor because I am constructing a
10:20 - completely new object based on the
10:22 - values that I received into my
10:23 - Constructor okay so name will be equal
10:26 - to this name and then age will be equal
10:29 - to the age
10:31 - gender
10:33 - like this and then programming grade
10:36 - will be equal to this programming rate
10:39 - here okay with this we have created
10:42 - Constructor so now what I can do is I
10:44 - can show you a second way to initialize
10:48 - student now one very important thing
10:50 - that you are going to see here is that
10:52 - now this student the way that we have
10:55 - created it here without initializing it
10:57 - says that now there is no default
10:59 - Constructor for student class and you
11:01 - cannot do this any longer because if
11:04 - you're not familiar with Constructors
11:05 - please make sure to watch this video
11:07 - here I'll also put it in the description
11:08 - and there you will get an in-depth
11:11 - understanding of different types of
11:12 - Constructors but basically what this
11:15 - error here means is that now there is no
11:17 - way for me to create a student without
11:19 - passing all of these properties here and
11:22 - one way to fix that problem is to delete
11:25 - this code another way is to create
11:27 - default Constructor so I will very fast
11:29 - create default Constructor
11:32 - okay and this here is default
11:34 - Constructor completely empty Constructor
11:36 - and now we don't have the error anymore
11:37 - again if you are confused about
11:39 - Constructors please make sure to watch
11:41 - the video about Constructors and
11:42 - different type types of Constructors
11:44 - that I will link in the description Okay
11:47 - so
11:48 - once again here we have created
11:50 - parameterized Constructor and based on
11:52 - this Constructor we can now construct
11:54 - our students now let's see how we can
11:57 - initialize our array of objects like we
12:02 - did here like we initialized our array
12:04 - of Lucky Numbers well
12:06 - what I can do let's delete this let's
12:09 - also delete this
12:11 - okay and here I will say that this array
12:15 - of three students will be equal to the
12:17 - following and now inside each curly
12:21 - bracket I will initialize one student
12:23 - and I will do that based on these
12:26 - parameters here so the first thing is
12:28 - string name so I will put these double
12:31 - quotation marks and I will say
12:33 - Selena that is the name for my first
12:35 - student and then age is 28 it is integer
12:39 - so we don't put double quotation marks
12:41 - and then gender is female and then
12:45 - programming grade as I said is nine okay
12:48 - that would be the first student now
12:51 - let's do the same for the second student
12:52 - let's say second student will be
12:55 - Elon age will be I don't know how old he
12:59 - is maybe 50 and then gender is male and
13:03 - programming grade let's give him a 10
13:05 - okay and then let's also add uh Bill
13:09 - Bill Gates
13:11 - okay he is probably around 60 male and
13:15 - programming grade let's give him a solid
13:17 - seven okay
13:19 - uh so with this we have initialized an
13:23 - array of objects and here I have an
13:25 - error and there is because I don't have
13:26 - semicolon at the end here okay
13:29 - so this is the second way that you can
13:32 - initialize an array of objects and with
13:36 - this we have created an array called
13:39 - students it is array of three students
13:42 - and here we have initialized those three
13:44 - students okay so that is the second way
13:46 - and then there is the third way that I'm
13:49 - going to show you and that would be to
13:50 - allow your user who is going to use your
13:53 - application to enter his own values so
13:55 - in order to do that we will learn how to
13:57 - use Loops in order to access and modify
14:00 - elements of the array so this approach
14:04 - here I'm going to comment it
14:05 - okay and I will again create array of
14:10 - students
14:12 - it will have three elements but I will
14:15 - not initialize it I will not initialize
14:17 - it like this I will give my user the
14:19 - opportunity to enter his own values so
14:21 - for that I will use for a loop I will
14:23 - say four int I is equal to zero I is
14:28 - less than three I plus plus
14:32 - okay so inside this for Loop we will
14:36 - iterate through three elements of my
14:38 - array and we will enter each element so
14:42 - we will enter each student now one very
14:45 - important thing to keep in mind is that
14:47 - as I already said indexation of the
14:49 - array starts with zero so the first
14:51 - element will have index zero and it's
14:53 - very important that you set 0 here for
14:56 - your I if you are entering elements from
14:58 - the beginning of the array and then this
15:01 - part here says please enter elements
15:03 - while I is less than 3 which means that
15:06 - you cannot enter any more than three
15:08 - elements into your array and later I
15:11 - will show you one very common error that
15:13 - happens especially to beginners
15:15 - regarding this so here I have created
15:17 - for Loop and now what I want to do is I
15:19 - want to say C out and then let's say
15:21 - student
15:24 - and let's print I here like this and
15:27 - let's put an end line so that our user
15:29 - knows that he is entering the first unit
15:31 - and then second and third okay and then
15:34 - here I will create an object of type
15:37 - student I will say student and I will
15:40 - call it s okay
15:42 - and then now I will ask my user to enter
15:46 - each individual property of my student
15:49 - so I will say C out name please enter
15:53 - name okay and then I will say C in s dot
15:57 - name so whatever our user enters that
16:01 - will be stored in s dot name and I am
16:03 - missing these redirection signs like
16:05 - this okay and we will do the same thing
16:08 - for the remaining three properties
16:11 - okay so name age gender and programming
16:16 - grade so name and then age s dot age and
16:21 - then
16:22 - gender s dot gender and then
16:27 - programming grade and here I will print
16:30 - so that my user knows that he is
16:32 - entering programming rate so after the
16:35 - user enters these four properties what I
16:37 - want to do is I want to take this
16:39 - student that now has all of the values
16:41 - that our user has entered and I want to
16:44 - add that student to my array so I will
16:46 - say students of I is equal to S and here
16:52 - I have an error as you can see my array
16:55 - is called student it should be called
16:56 - students because that makes more sense
16:58 - because we are talking about the
16:59 - collection more objects plural okay so
17:03 - with this I have added
17:06 - this current student to the position of
17:09 - I into my students array which means
17:12 - that in the first iteration we are
17:14 - adding to the first position in the
17:16 - second iteration we are adding to the
17:17 - second position and in the third we are
17:19 - adding to the third position and again
17:20 - keep in mind that those positions are
17:22 - not one two and three they are 0 1 and
17:25 - 2. okay now let's start this program to
17:28 - see if everything works as expected but
17:30 - first I will put a breakpoint here and
17:32 - later I will explain why I did that okay
17:35 - so I will start my program and as you
17:38 - can see it says please enter student
17:39 - zero so the name for student zero will
17:42 - be sound Dana and then age 28 gender
17:46 - will be F programming grade will be
17:48 - eight and then student one let's say
17:52 - Elon
17:54 - and then age is 50 maybe gender is male
17:57 - programming grade is nine okay and then
18:01 - student two which is our third student
18:03 - will be bill
18:06 - age will be 65 maybe gender will be male
18:09 - and programming grade will be 10. okay
18:12 - now our application has executed all of
18:16 - the code and as you can see here the
18:19 - application was paused at the last line
18:21 - before leaving our program before
18:24 - finishing our application so now what I
18:26 - want to do is I want to hover over this
18:28 - student's array and I want to see if we
18:31 - have all of the students that we have
18:33 - entered and as you can see here indeed
18:35 - we do have three elements and here are
18:39 - the indexes 0 1 and 2. and here are the
18:43 - values that we have entered for our
18:45 - students we can expand them like this to
18:46 - see all the details okay so as I said
18:50 - this here is the way that you can use in
18:54 - order to ask your user to enter the
18:56 - values for the properties of each
18:59 - individual element of your array and a
19:03 - few things that I want you to keep in
19:04 - mind here are following first thing I
19:07 - would like to add I plus 1 here because
19:09 - even though we as programmers should
19:12 - know that indexation of the array starts
19:14 - with zero it doesn't really make sense
19:16 - to for our end user to have this please
19:19 - enter student zero he expects to see
19:22 - something like please enter student one
19:23 - so that is why I am adding plus one here
19:26 - but in the background we are still using
19:28 - I without that additional one so that is
19:32 - the first thing and then the second
19:34 - thing that you learned here is that this
19:36 - is the approach that you can use in
19:37 - order to allow your user to enter the
19:40 - values for elements of of your array and
19:42 - then this is how you can add those
19:45 - elements to your array okay so another
19:48 - thing that I want to teach you here is
19:50 - how can we now access individual
19:52 - properties of each element of the array
19:55 - so let's do that now let me show you for
19:58 - example how you can check what is the
20:01 - programming grade of the first student
20:03 - so let's say C out and now let's say
20:06 - programming grade of first student is
20:11 - okay and here I am using my students
20:15 - array and then I am accessing the first
20:18 - student the index of the first student
20:21 - is zero okay and then I want to check
20:24 - his programming grade like this and as
20:28 - you can see you will get all of the
20:30 - values
20:31 - by your intellisense so you will get all
20:33 - of these values already offered to you
20:35 - so I want programming grade and let's
20:37 - just just move it to the next line
20:40 - okay and now if I start my program we
20:43 - should be able to see the programming
20:45 - rate of the first student so let's do
20:47 - that very quickly
20:49 - okay name is saldina I will fast forward
20:52 - this part
20:54 - [Laughter]
21:00 - so now if I press enter we should be
21:03 - able to see the information about
21:05 - programming rate of the first student
21:07 - and it says that it is eight so let's
21:10 - check that and as you can see here we
21:12 - indeed entered eight for programming
21:15 - rate for the first student okay so that
21:18 - is how you can access properties of each
21:22 - individual element for example if you
21:24 - wanted to know to change the name of the
21:26 - second student you would do that like
21:28 - this you would say students
21:30 - of one that is the second student it has
21:34 - index of one and now I will say name
21:37 - okay and let's say that
21:39 - Ilona okay
21:42 - so this is how you can do that now what
21:46 - is the benefit of having an array of
21:48 - objects well the main benefit is that
21:52 - now all of these objects are together
21:54 - they are inside one collection and now
21:57 - we can perform different calculations
21:58 - and different operations on this
22:01 - collection of objects so now I'm going
22:03 - to show you that so let's say for
22:05 - example that I want to calculate the
22:08 - average grade for all of the students
22:10 - now let's comment this part here because
22:13 - I don't want to enter all the students
22:15 - manually every time and I will uncomment
22:18 - this part here okay this also should be
22:21 - connected because now we have two arrays
22:23 - called students and that is not possible
22:25 - so here we have all the students we will
22:27 - not have to enter them manually and now
22:29 - I want to calculate the average grade
22:31 - for all of the students now how are we
22:33 - going to do that well I will first
22:35 - create a float variable called sum of
22:39 - grades
22:41 - where I will store the sum of all the
22:44 - grades it is going to be of type float
22:46 - because our grades are of type float
22:50 - even though I have entered here integer
22:52 - number so now let's say here 9.5 for
22:54 - example so what I want to do inside the
22:57 - sum of grades again is I want to sum all
23:00 - the grades of all of my students and
23:01 - then I will divide that by 3. so in
23:03 - order to do that I will use for loop I
23:06 - will iterate from 0 to 3 so I'll say int
23:10 - I is equal to 0 I is less than 3 and
23:13 - then I plus plus
23:16 - okay and here I will simply say sum of
23:20 - grades plus equals to students
23:24 - of I and please give me his programming
23:28 - grade like this so inside this for Loop
23:31 - we are going to sum all of the
23:33 - programming grades and then once this
23:35 - for Loop finishes here I can say C out
23:38 - average
23:40 - grade is
23:42 - and then here I will say some of grades
23:45 - divided by three because we have three
23:48 - students so now if we start a program
23:51 - let's see what's going to happen okay we
23:53 - have an error actually let's see what is
23:55 - the error and the error says
23:57 - unintentionalized local variable sum of
24:00 - grades used well that means that here we
24:02 - don't have initial value for sum of
24:05 - rates variable and the initial value is
24:07 - going to be zero because we don't want
24:09 - to change the sum of all of these
24:11 - elements and 0 is neutral when it comes
24:14 - to adding operation so now if I start
24:17 - the program let's see the result and the
24:19 - result is going to be
24:20 - 8.83 now you can use calculator in order
24:23 - to check this very quickly but it should
24:26 - be correct 9.5 plus 10 plus 7 divided by
24:31 - 3 is the same number that we got here
24:35 - okay so that is how you can access
24:39 - individual properties of each element of
24:42 - the array by using the name of the array
24:45 - and index of the element and then you
24:48 - can access all of the individual
24:49 - properties so let's do a quick recap of
24:52 - all the things that we have learned in
24:53 - this video and then I will give you a
24:55 - task that you can use in order to
24:56 - practice on your own so first I've shown
25:00 - you how you can create an array of
25:02 - primitive data types here we have
25:04 - created an array of integers and then I
25:07 - have shown how you can create an array
25:09 - of objects here we have created an array
25:11 - of objects and I explained three
25:14 - different ways that you can use to
25:15 - initialize that array first approach was
25:18 - to create an object and then add it
25:20 - manually to a certain position in your
25:22 - array that was first approached that
25:24 - code is deleted now second approach is
25:26 - you can initialize it like this so you
25:29 - can initialize all of the elements or
25:31 - one part of the element like this when
25:33 - you're creating your array that would be
25:35 - second approach and then third approach
25:38 - is this code that is commented right now
25:41 - and that is to ask your user to enter
25:45 - all the values for your array and then
25:47 - you create an object and you add that
25:50 - object to your array and to iterate
25:52 - through all of the elements of your
25:54 - array you use for Loop okay and then we
25:58 - have also explained how you can work on
26:01 - that collection of elements because the
26:04 - main benefit and the main purpose of
26:06 - having an array of objects is so that
26:08 - you have those objects together inside
26:10 - one collection and then you can perform
26:12 - different operations on those elements
26:15 - and here I have demonstrated how you can
26:17 - perform different calculations on those
26:20 - objects and here we have seen how to
26:23 - calculate average grade for all the
26:25 - students that we have inside our array
26:27 - so that is a short recap now I want to
26:30 - show you one very important and very
26:33 - common error that happens especially to
26:35 - beginners but even through more
26:37 - experienced developers when it comes to
26:39 - arrays and that error is index out of
26:42 - bounds or index out of range now I'm
26:44 - going to show what I mean by this let me
26:46 - very quickly comment this part again
26:48 - because I don't want to enter elements
26:51 - manually because we already have our
26:53 - array of three students initialized here
26:55 - okay so how can I reproduce that error
26:58 - for example here I can put four instead
27:00 - of three so now we are iterating through
27:03 - an array that goes from zero and is less
27:06 - than four so zero one two and three and
27:09 - we could achieve the same thing if we
27:11 - did something as simple as adding this
27:14 - is equal to 3. so again we are iterating
27:17 - from zero one two and then three as well
27:20 - okay because there is a difference
27:22 - between this and this and in this
27:25 - situation we are going to get an error
27:27 - index out of bounds or index out of
27:30 - range so if I start my program you will
27:33 - see average grade is minus 3.53 you will
27:37 - get some number that doesn't make any
27:40 - sense and the reason for that is that
27:42 - here we are accessing a memory that is
27:46 - not our own so inside our array we have
27:49 - three elements and their positions are
27:52 - one after the other in memory but there
27:54 - is also fourth and fifth and sixth
27:56 - position in memory but that memory that
27:58 - position is not ours and here our array
28:02 - is accessing students of three which is
28:04 - someone else's memory location and God
28:07 - knows what is stored inside that memory
28:09 - location and that is the reason why we
28:12 - are getting this error here and this
28:15 - case here is a lot more dangerous than
28:18 - getting an exception because here you
28:21 - are getting a completely wrong result
28:23 - and in many situations if you had a lot
28:26 - of students you wouldn't probably even
28:28 - be aware that you are getting a wrong
28:30 - calculation and this type of error here
28:33 - is called index out of bounds or index
28:36 - out of range which means that you are
28:38 - accessing elements that are out of range
28:41 - or out of bounds of your array and you
28:44 - should not do that you must not do that
28:46 - so that is one very very important thing
28:49 - to keep in mind and again it is less
28:52 - dangerous when you get uh the warning
28:54 - from your compiler that you are
28:56 - accessing locations that are not yours
28:58 - but this case here that I have
29:00 - demonstrated is a lot more dangerous
29:03 - because here you are getting the result
29:04 - but the result is completely false and
29:07 - it's wrong and it can cause many
29:09 - problems in an application that goes
29:10 - into production with this bug so that
29:13 - would be the most common error that
29:14 - happens to especially beginners when
29:17 - they start working with arrays it
29:18 - doesn't matter if you're working with
29:19 - arrays of objects or arrays of primitive
29:21 - types this is very very common error so
29:26 - as I promised in the beginning I have a
29:28 - task that you can use in order to
29:30 - practice on your own so what I want you
29:33 - to do for homework until my next video
29:36 - is you can create a class
29:39 - like I did here but it's going to be a
29:42 - class called Product and each product
29:44 - will have name it will have price and it
29:48 - will have type type of a product can be
29:51 - something like clothes or food or Tech
29:53 - types like that and then what I want you
29:56 - to do is I want you to create an array
29:59 - of products and I want you to allow to
30:02 - your user like I did here to enter 5 or
30:06 - 10 or even more products and then you
30:10 - are going to perform different different
30:12 - calculations on those products for
30:14 - example you are going to calculate what
30:17 - is total amount of clothes all of the
30:19 - products that are of type clothes and
30:21 - then what is total price of all the
30:23 - products that are of type Tech or food
30:25 - and so on so I want you to do that task
30:28 - as uh homework so that you can practice
30:30 - on your own until I publish my next
30:33 - video and when I do it will be linked
30:35 - here and also in the description so
30:38 - definitely use the next couple of days
30:40 - to practice until my next video and I
30:43 - will publish my next video next week and
30:45 - if this video was valuable to you if you
30:47 - enjoyed it and if you learned something
30:49 - new please give it a thumbs up so that
30:51 - YouTube doesn't make me film dancing
30:53 - reels because for some reason YouTube
30:55 - likes dancing reels and somehow I
30:58 - believe that this video gives you a lot
31:00 - more value and knowledge so if you want
31:03 - to tell to the YouTube algorithm hey
31:04 - this video is good and I want more
31:06 - videos like this one please give it a
31:08 - thumbs up so thank you very much for
31:10 - watching if you have any questions feel
31:12 - free to leave those in the comment
31:14 - section as I said I will film more
31:16 - videos about this topic and I can answer
31:18 - all your questions in those videos so
31:21 - again thank you very much for watching
31:23 - and I will see you in some other video
31:25 - bye