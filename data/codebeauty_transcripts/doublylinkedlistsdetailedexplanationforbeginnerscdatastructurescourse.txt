00:00 - hi everyone and welcome to my channel in
00:02 - this video i will teach you about doubly
00:04 - linked lists now a recommendation for
00:06 - you in case that you are not familiar
00:08 - with singly linked lists please make
00:10 - sure to watch these videos i'm going to
00:12 - link them in the description in the
00:14 - exact order they should be watched and
00:16 - then in this video we will go straight
00:18 - to doubly linked lists so if you
00:20 - remember when we talked about singly
00:22 - linked lists we said that this is how
00:24 - they look like so we have a node and
00:28 - each node consists of two parts
00:31 - value
00:32 - and a pointer to the next node and then
00:34 - the last node points to null that is how
00:36 - we know that it is the last because it
00:39 - doesn't have a successor it doesn't
00:40 - point to anything so that is singly
00:43 - linked list and then doubly linked list
00:45 - looks like this
00:47 - so a doubly linked list has two pointers
00:50 - it has a pointer to the next node and
00:52 - then a pointer to the previous node and
00:55 - also the value itself so now the
00:58 - question is why do we need doubly linked
01:01 - lists when we already had singly linked
01:03 - lists well there are both advantages and
01:06 - disadvantages for both of these so let's
01:08 - now talk about that the first advantage
01:11 - is that doubly linked lists can be
01:13 - traversed in two directions so forward
01:16 - and backward whereas singly linked lists
01:19 - can only go forward okay and then
01:23 - another advantage is that in doubly
01:25 - linked lists we can add new nodes and
01:27 - four places
01:29 - in the beginning
01:30 - at the end and then after a given node
01:34 - and also before a given node whereas in
01:37 - singly linked lists we only have three
01:39 - places so beginning
01:43 - and and then after a given node because
01:45 - here we don't have a pointer to the
01:47 - previous so this means that we can add
01:50 - new nodes and delete existing nodes in
01:53 - doubly linked lists
01:54 - faster than with singly linked lists but
01:57 - there are also some disadvantages and
01:59 - the main disadvantage of doubly linked
02:01 - lists is that they take more space
02:03 - because now every node requires extra
02:06 - space for this additional pointer to the
02:09 - previous node that we don't have in
02:11 - singly linked lists so that is one
02:14 - disadvantage and another disadvantage is
02:16 - that now we need to take care of both of
02:18 - these pointers so both next and previous
02:21 - every time that you are adding new node
02:22 - or deleting existing node you need to
02:25 - take care of both next and previous
02:27 - pointer whereas in singly linked lists
02:30 - we only had to take care of next pointer
02:33 - so now that you know this the conclusion
02:35 - is that you should prefer singly linked
02:37 - lists when you have memory limitations
02:40 - so you don't have much memory and you
02:42 - will also not perform a lot of inserting
02:44 - deleting and searching notes in your
02:46 - list whereas you should prefer doubly
02:49 - linked lists when you don't have memory
02:51 - limitations and when you will also
02:53 - perform a lot of inserting deleting or
02:56 - searching nodes in your list so the time
02:59 - has come for me to show you how this
03:01 - looks like in code and the first thing
03:03 - that we will do is we will create node
03:06 - and as you could see every node consists
03:08 - of three parts it has value it has
03:12 - pointer to the next node and then a
03:14 - pointer to the previous node so let's do
03:17 - that let's say
03:18 - class i'll call it node
03:21 - okay and i will say public
03:24 - like this so let's say that we are going
03:27 - to create a list of integers so i will
03:29 - say int
03:30 - value so the values are going to be
03:33 - integers and then let's also create a
03:35 - node pointer called
03:38 - next
03:39 - and then also a node pointer called
03:41 - previous
03:45 - okay a quick tip is that you can also
03:47 - use struct here and if you decided to
03:50 - use structures instead of classes that
03:52 - means that you don't need this public
03:54 - access modifier because elements of a
03:56 - structure are public by default whereas
03:59 - elements of a class are private by
04:01 - default so in this situation we need
04:03 - public in order to be able to access
04:05 - these outside of this class here so so
04:08 - that is a quick tip so let's now see how
04:11 - we can create the first node of doubly
04:13 - linked list
04:14 - there are four steps to do that and the
04:17 - first step is to create a new node so
04:19 - you need to allocate space for a new
04:21 - node
04:22 - okay and then the second step is we need
04:25 - to set the value of that node let's say
04:28 - that the value is going to be number
04:30 - four
04:31 - okay because we have the list of
04:33 - integers that's the second step
04:36 - third step is that we need to set values
04:39 - for
04:39 - next pointer and previous pointer now
04:43 - since this node here is the only node
04:45 - inside our list we will say that next is
04:48 - pointing to null
04:50 - okay
04:51 - and previous is also pointing to null so
04:54 - i'll put null here as well that is step
04:57 - number three and then step number four
05:01 - is that
05:02 - since this element here is the only
05:04 - element which means the first and the
05:06 - last
05:07 - we need to say that this element is both
05:10 - head and tail of our list which means
05:13 - first and last so i will put here with
05:16 - red color
05:17 - h
05:18 - and t so head and tail so this is visual
05:22 - representation let's now translate this
05:24 - into code
05:26 - okay
05:27 - so the first step was to create a new
05:29 - node allocate space for a new node so i
05:31 - will say node
05:33 - okay this code appearing by magic this
05:36 - is tab 9 actually doing for me and if
05:38 - you still have not installed it you will
05:40 - have to do this manually i'm sorry but
05:42 - there's still link in the description
05:44 - that you can use
05:45 - in order to download it
05:47 - okay so i allocated a space for a new
05:51 - node and
05:52 - very important question i know that i
05:54 - will get this question why is this here
05:56 - a node pointer and not just node like
06:00 - this
06:01 - well
06:02 - please keep in mind that linked lists
06:04 - doubly linked lists are implemented with
06:06 - pointers because we are dynamically
06:09 - changing the size of a list which means
06:11 - that we are allocating new space when we
06:14 - create new elements and add them to our
06:16 - list and then we are also deleting and
06:18 - deallocating that space when we want to
06:21 - remove an element from our list so in
06:23 - order to be able to do that in order to
06:25 - be able to dynamically change the size
06:27 - of our list we need to use pointers so
06:31 - that is the reason why this here is a
06:34 - pointer like this and not just node like
06:37 - this
06:38 - okay
06:39 - so this was the first step the second
06:42 - step is to set the value for this node
06:44 - so i will say
06:46 - node value is equal to four again i'm
06:49 - using table line to complete these
06:51 - okay and then step number three is to
06:54 - set next and previous pointers in this
06:56 - situation we are setting them to null so
06:58 - i will say
06:59 - node
07:01 - next
07:03 - is equal to
07:04 - null ptr so null pointer and then node
07:07 - previous is also equal to null ptr
07:10 - that's the step number three and then
07:12 - step number four is to say that this
07:16 - note here is head and tail of our list
07:19 - so we still have not created our list so
07:22 - we still don't have head and tail so i
07:25 - will do that first i will say here
07:27 - node pointer and i will call it head and
07:30 - then i also need node pointer called
07:33 - tail
07:35 - okay like this
07:37 - let's just
07:39 - okay and then i will say that head is
07:42 - equal to this node here and then also
07:44 - tail is equal to this node here so i
07:47 - will say here
07:48 - head is equal to node and then
07:52 - tail is equal to node as well so that is
07:54 - how we create the first node of a doubly
07:57 - linked list let me now show you how we
07:59 - can add second node to doubly linked
08:01 - list because adding second node is a
08:03 - little bit more complex than adding the
08:05 - first one and this has five steps so
08:09 - let's switch to paint so that we can
08:11 - first visualize this process so as i
08:14 - said there are five steps to do this
08:16 - step number one is to create a new node
08:20 - like this
08:21 - okay step number two is to set the value
08:24 - for this node so i will take the pen and
08:26 - i will say that the value is
08:29 - five
08:30 - okay
08:30 - and then step number three is to take
08:32 - care of
08:33 - next pointer and previous pointer so
08:37 - next pointer will point to null
08:40 - okay and then previous pointer will
08:42 - point to this node here which is
08:45 - currently the tail of our list so before
08:48 - we add this node here
08:50 - okay so that is step number three step
08:54 - number four is to say to this node here
08:57 - hey now you have a successor so you are
08:59 - no longer going to point to null now you
09:02 - need to point to this node here so
09:04 - let me delete
09:06 - this
09:07 - null part
09:08 - okay
09:10 - and
09:10 - now i will say that
09:12 - this node here points to
09:15 - this node here okay that is step number
09:18 - four and then step number five is to say
09:21 - to this note here again hey you
09:24 - previously were the one and the only
09:27 - element of this list so you were both
09:29 - head and tail but you are no longer tail
09:32 - because now new tail is this element
09:36 - here so now i also need to delete
09:39 - this
09:41 - okay
09:42 - and this here is the new tail of our
09:45 - list so those are five steps that we
09:48 - will now translate into code okay so the
09:51 - first step is to allocate space for a
09:53 - new node and for that i will use this
09:56 - same variable because we already added
09:59 - this node into our list and we don't
10:01 - need this variable to point to it any
10:03 - longer
10:04 - so i will say here node is equal to
10:08 - new node like this that is step number
10:11 - one step number two is to set the value
10:14 - for this node so i will say that the
10:16 - value is five okay and then step number
10:20 - three is to take care of next and
10:23 - previous pointers so i will say
10:25 - node next is equal to null pointer but
10:29 - node previous
10:32 - will now be equal to tail of our list
10:36 - like this okay that is step number three
10:40 - step number four is now we need to say
10:42 - to our current tale of the list
10:45 - hey now you have a successor which is
10:48 - this node here so now i will say
10:51 - tail
10:53 - next which previously was pointing to
10:55 - null now it needs to point to this node
10:59 - here like this so that is step number
11:02 - four and then the last step is to say
11:05 - that now this node here is the tail so
11:09 - now i will say
11:11 - tail is equal to node okay so that is
11:15 - how you add second element to w linked
11:18 - list by the way i'm going to pin this
11:19 - code in a comment so that you can use it
11:21 - if you want so let's describe these two
11:23 - so that you know later what each part is
11:25 - doing so here i will say add
11:28 - first node and then this part here is
11:32 - add second node okay
11:35 - so now the question is how can you add
11:37 - third and fourth and fifth and so on
11:40 - element to doubly linked list well
11:43 - an interesting fact is that you can copy
11:46 - this code here because the process the
11:49 - steps are the same to add third element
11:52 - as to add second and then fourth and
11:54 - fifth and sixth and so on so
11:57 - let's say here
11:59 - that i want to add
12:01 - third
12:03 - node so
12:04 - i allocate a new node i set its value
12:07 - let's say that the value is six and then
12:09 - i take care of next and previous
12:12 - pointers and then i say to current tail
12:14 - of the list hey now you have a successor
12:17 - and that is this note here and then i
12:20 - also say to my list hey now you have a
12:23 - new tail which is this newly added node
12:26 - so with this we added third node and
12:28 - then also if you want to add
12:31 - node number
12:32 - four
12:33 - here you say add fourth node
12:37 - like this and then the value is going to
12:39 - be seven and all other steps are going
12:42 - to be absolutely the same okay so there
12:44 - is one more thing that i want to show
12:46 - you and that will be it for this video
12:48 - because i don't want to make it too long
12:50 - and we will continue in the next video
12:52 - let me know in the comments if you would
12:54 - like to see part two for doubly linked
12:56 - lists and if you have any questions
12:58 - so
12:59 - the next thing that i want to show you
13:01 - is how you can traverse this list in
13:04 - both forward and backward direction and
13:07 - print these elements these nodes that we
13:10 - just added so
13:12 - let's create a function called print
13:15 - forward i'll do it here so i'll say void
13:18 - print forward
13:22 - okay
13:25 - and the name itself says that this
13:27 - function will print elements of doubly
13:30 - linked lists starting from the head and
13:32 - then go forward so we are going to
13:34 - receive that head node here as parameter
13:38 - i will say node
13:40 - head like this so how is this function
13:42 - going to work well the first thing that
13:44 - i want to do is i want to create a new
13:47 - node called traverser so i will say node
13:51 - traverser
13:53 - okay
13:54 - and
13:55 - i'm not sure if this is a legit word in
13:57 - english language but
14:00 - i couldn't come up with a better name to
14:01 - describe the purpose and the purpose of
14:04 - this traverser node is going to be to go
14:06 - from the first to the second and then
14:08 - the third fourth fifth and so on so go
14:11 - to the next node and then the next and
14:13 - the next until it comes to the end of
14:15 - the list and in each iteration we are
14:18 - going to print the value of that current
14:21 - node so we will start from the head so i
14:24 - will say that traverser is equal to head
14:28 - like this and then i will use while loop
14:30 - so i will say
14:32 - while
14:34 - so while traverser is not equal to
14:37 - null ptr
14:39 - what i want to do is i want to print the
14:42 - value of traverser so i will say
14:45 - c out
14:46 - traverser dot value and then let's also
14:49 - add endline and then what i want to do
14:52 - after that is i want to move to the next
14:55 - node so i will say traverser is equal to
14:58 - traverser next so please move to your
15:01 - successor okay so this is the logic of
15:05 - printforward function and i will copy
15:08 - this logic because now i want to show
15:10 - you how print backwards works and the
15:13 - logic of print backwards is
15:15 - the same there will only be two small
15:18 - but very important differences and let
15:21 - me know in the comments if you can guess
15:22 - one or both of those differences
15:26 - so
15:27 - i will paste the code here and i will
15:30 - rename this second function to say print
15:33 - backwards
15:36 - so print backward okay
15:38 - and as i said there will be two small
15:41 - but very important differences the first
15:43 - difference is that print backwards
15:46 - doesn't start from the head but it
15:48 - rather starts from the tail so here i
15:51 - will receive tail like this and this
15:55 - traverser is going to start from the
15:58 - tail so that is difference number one
16:00 - and the difference number two is that
16:02 - now traverser will not move to the next
16:05 - node it will move to the previous node
16:07 - so here i will say traverser
16:10 - previous
16:11 - like this
16:12 - okay so this is the code for print
16:15 - forward and then print backward and now
16:18 - we are going to test these two functions
16:20 - so at the end of our main function i
16:23 - will say print forward
16:26 - and to print forward we need to pass
16:29 - head node like this and if i run the
16:33 - program let's see what's going to happen
16:35 - and as you can see four five six seven
16:37 - this is the correct order of notes
16:41 - okay so that was print forward and then
16:44 - let's also test print backward
16:47 - okay and to print backward we need to
16:50 - pass tail node
16:52 - okay and again if i run the program now
16:55 - we should get descending order and as
16:57 - you can see this is the correct result
17:00 - for print backwards function so that is
17:03 - everything that i wanted to show you in
17:05 - this video i don't want to make it too
17:07 - long so we will continue in the next
17:08 - video and if you have any questions you
17:10 - can leave those in the comments section
17:13 - um also if you enjoyed this video please
17:15 - give it a big thumbs up that is really
17:17 - important for the youtube algorithm and
17:20 - also share it with someone who needs to
17:22 - see this and learn about data structures
17:24 - so thank you very much for watching and
17:26 - i will see you in the next video bye