00:00 - hi everyone and welcome to my channel in
00:02 - this video i want to talk about header
00:04 - files in c plus so i will explain what
00:07 - are header files what is their purpose i
00:09 - will show you how you can create your
00:11 - own header files include them and use
00:13 - them in c plus programs and i also want
00:16 - to see that this is very important topic
00:18 - in c plus plus this is very important
00:20 - lesson that you should not skip because
00:22 - if you want to become a developer you
00:24 - will work with header files very very
00:27 - often so make sure to watch the entire
00:29 - video so that you can get a really good
00:31 - understanding of heather files and then
00:34 - also if you have any questions you can
00:36 - leave those in the comments section
00:38 - because i read all the comments and if i
00:40 - see that there is a need to make a
00:42 - specific video that you have problems
00:44 - with understanding certain topics and
00:47 - that you need help i will definitely
00:48 - make that video
00:50 - and then also for those of you who are
00:52 - having problems with finding bugs and
00:55 - fixing those bugs and with improving
00:57 - your code in general i want to say that
00:59 - there are tools that you can use for
01:01 - that
01:02 - and those are code analyzers now the one
01:06 - that i would recommend is called pvs
01:08 - studio and i'm going to find it and then
01:10 - i will show you so it is this one here
01:12 - and i will put the link in the
01:14 - description but as i said pbs studio is
01:17 - a code analyzer which means that it will
01:20 - help you to find bugs and to fix those
01:22 - bugs and it will also help you to
01:24 - improve the quality of your code in
01:25 - general and i made a video related to
01:28 - pvs studio a few months ago in that
01:30 - video i explained how you can use it how
01:32 - you can install it which is very simple
01:34 - i will put the link to that video here i
01:36 - will put it in the description as well
01:38 - so make sure to check it out but
01:40 - basically when i made that video i
01:41 - didn't have many subscribers so i
01:43 - believe that most of my new viewers are
01:46 - actually not familiar with this tool at
01:48 - all so since i made that video i still
01:50 - have a coupon code that you can use in
01:52 - order to get one month free trial of pbs
01:55 - studio so that you can test it and see
01:57 - how it can help you to become a better
01:59 - programmer so i will leave that link
02:02 - that you need to follow in order to get
02:04 - one month free trial in the description
02:06 - and also i will put more details in the
02:08 - description of this video so if you're
02:10 - struggling with finding bugs with fixing
02:12 - those bugs and if you need help to
02:14 - improve your code
02:16 - make sure to check out pvs studio
02:18 - because there is no need to waste so
02:20 - much time doing that manually when you
02:22 - can do it
02:23 - in just a couple of seconds with the
02:25 - tools like pbs studio
02:27 - so um all the details will be in the
02:30 - description and now i will return to
02:32 - visual studio and i will explain heather
02:35 - files because that is the topic of this
02:37 - video so in order to understand heather
02:40 - files you will need to understand the
02:41 - following example
02:43 - everything that you want to use in c
02:45 - plus first has to be declared so if you
02:48 - want to use a variable you first need to
02:50 - declare that variable so you first need
02:52 - to say for example int
02:54 - age and then you can assign the value to
02:57 - this variable so then you can say either
02:59 - here that age is equal to 25 or you can
03:03 - assign it in the next line so you can
03:05 - say age is equal to 25 here like this
03:08 - but first you need to declare that
03:11 - variable so first you need to say to
03:12 - your compiler hey there will be this
03:15 - variable called age and it will be of
03:17 - type int
03:19 - now the same goes for functions as well
03:22 - if you want to use a function you first
03:23 - need to declare and define that function
03:25 - in order to be able to use it
03:28 - and if you are not familiar with
03:29 - functions at all make sure to watch my
03:32 - video related functions actually i have
03:34 - full playlist that i will link here and
03:36 - in the description as well because you
03:38 - first need to watch that in order to be
03:40 - able to understand this video uh so the
03:43 - rule is that if you want to use a
03:46 - function you need to make declaration
03:48 - and definition of that function and the
03:50 - declaration of that function goes before
03:53 - your main function and then definition
03:54 - goes after your main function so what i
03:57 - want to do now is i want to create a
03:59 - function that will be called for example
04:02 - recommend me a food and that function
04:04 - will receive one letter and the goal of
04:07 - that function is to return the name of
04:09 - the food that starts with that letter so
04:12 - to recommend you a food that starts with
04:14 - that letter so
04:16 - in order to do that i will put
04:19 - declaration of that function here so i
04:21 - will say the function name will be
04:24 - recommend
04:26 - me
04:27 - a food
04:29 - like this and then the function will
04:31 - receive one letter so it will be one
04:35 - character which i will call first
04:38 - letter
04:39 - and the goal is that this function
04:41 - returns the word the name of the food
04:44 - that starts with this letter so this
04:46 - function will return
04:48 - a const char
04:50 - pointer
04:51 - like this
04:52 - so
04:53 - this here is declaration of this
04:56 - function and it goes before main
04:58 - function and then definition goes after
05:00 - our main function so now i'm going to
05:03 - define this function so i'm going to
05:05 - implement it and describe what this
05:07 - function here is doing so i will say
05:10 - that inside these curly brackets here
05:14 - will be the implementation of this
05:16 - function here
05:17 - and what this function here will do is
05:20 - the following so i will say
05:22 - if first letter is equal to
05:27 - for example letter a
05:29 - or
05:31 - first letter is equal to capital letter
05:34 - a what i want to do is i want to return
05:38 - um
05:39 - food that is called
05:40 - apple
05:41 - okay
05:42 - and then if this here is not the case
05:45 - i'm going to check for something else so
05:47 - i'm going to say else if
05:49 - first letter is equal to b
05:54 - or
05:54 - first letter
05:56 - is equal to capital letter b
05:58 - i will return
06:00 - banana
06:02 - like this
06:04 - and then let me copy this one more time
06:08 - and here we will say else if first
06:11 - letter is equal to letter c
06:13 - or
06:14 - capital letter c in that case i want to
06:16 - recommend a food that is chocolate cake
06:19 - for example
06:22 - like this and then i will add one last
06:25 - else which will return
06:28 - pizza
06:29 - like this
06:31 - okay
06:32 - so this here is a default scenario in
06:34 - case that none of these other if else's
06:36 - result as true so now what i can do is i
06:40 - can invoke this function here so inside
06:42 - my main function i will delete
06:44 - this age variable i don't need it
06:46 - anymore and i will say
06:48 - std
06:49 - see out and then
06:52 - today
06:53 - i
06:54 - will
06:55 - eat
06:56 - and then let's use this recommend me a
07:00 - food function in order to see what we
07:02 - will eat today so recommend me a food
07:05 - that starts with letter c for example
07:09 - okay
07:09 - now if i run this program let's see what
07:12 - will happen
07:16 - okay as you can see it says that today i
07:18 - will eat chocolate cake so it works as
07:21 - it should but now i have one very
07:24 - important question for you and my
07:26 - question is following here we have only
07:29 - one cpp file which is called
07:32 - main.cpp
07:33 - but
07:34 - what would happen if we had more than
07:36 - one file if we had two or three or 100
07:39 - cpp files and then another part of that
07:42 - question is what would happen if more
07:45 - than one file wanted to use this
07:47 - function here this recommend me a food
07:50 - function so
07:51 - should we copy this declaration and then
07:54 - this definition on more than one place
07:56 - so should we copy this declaration and
07:59 - this definition in every cpp file that
08:01 - wants to use this function here the
08:05 - answer is no and in order to be able to
08:07 - understand this you will first need to
08:10 - understand a little bit about how
08:12 - compilation of program works so now i am
08:14 - going to explain that so when a program
08:17 - is compiled every single cpp file will
08:21 - be compiled into an independent
08:23 - compilation unit and this is how object
08:26 - files are made so for each cpp file your
08:30 - compiler will generate an obj file and
08:34 - one very important thing to keep in mind
08:36 - is that these compilation units are
08:38 - independent so these cpp files are
08:41 - independent which means that one cpp
08:44 - file has absolutely no idea what kind of
08:46 - code is declared in another cpp file
08:50 - they are independent now after your
08:53 - compiler has generated all of these obj
08:55 - files the job of your linker will be to
08:58 - link all of those obj files together so
09:02 - now your linker will combine all of the
09:04 - obj files into one which will be your
09:07 - application so that is usually the file
09:10 - that has extension dot exe which means
09:13 - executable which is your application or
09:15 - your program
09:17 - so this process is very simple again you
09:20 - write cpp files which are source code
09:23 - files after that your compiler is going
09:26 - to take those cpp files and generate obj
09:30 - files so object files and then after
09:33 - that your linker will take those obj
09:35 - files
09:36 - and combine them into one which will be
09:38 - your application very simple
09:41 - now one very important thing that i said
09:44 - is that those compilation units are
09:47 - independent which means that if you
09:49 - wanted to use this recommend me a food
09:52 - function in more than one cpp file you
09:55 - would have to copy this declaration in
09:57 - that file as well so if you wanted to
09:59 - use it in 10 different cpp files you
10:02 - would have to copy the declaration in 10
10:04 - different cpp files
10:06 - but
10:07 - if you try to copy this definition in
10:10 - more than one cpp file in your program
10:13 - you will get an error why the answer is
10:16 - following when your linker tries to link
10:19 - all of those obj files together it will
10:22 - say
10:22 - oh my god i have more than one
10:25 - implementation for the same function so
10:28 - i have implementation in this file and
10:30 - then in this file here as well so now
10:32 - when someone tries to invoke this
10:34 - recommend me a food function
10:36 - which one of these two will be invoked
10:38 - this one or this one so that is not
10:41 - allowed and i will demonstrate that on
10:44 - the example that we have in our visual
10:46 - studio so if you try to make multiple
10:48 - definitions that will cause an error you
10:51 - will get a duplicate error or you will
10:53 - get redefinition error of this function
10:56 - here so as i said if you want to use
10:59 - this recommend me a food function in
11:02 - another cpp file then you need to copy
11:05 - its declaration in that cpp file as well
11:08 - and then if you want to use it in 100
11:10 - cpp files you will have to copy this
11:13 - line in 100 cpp files now it's not a
11:16 - problem when it is one function but if
11:18 - you have 10 functions or 100 functions
11:21 - you would have to copy 100 declarations
11:24 - that is one thing and then another thing
11:27 - if you try to copy this definition and
11:31 - all of those files actually if you try
11:32 - to copy it more than once you will get a
11:35 - problem
11:37 - so let's demonstrate that i am going to
11:39 - copy this function and if i try to run
11:42 - my program as you can see we get an
11:44 - error and that error says
11:47 - let's see it says function recommend me
11:50 - a food already has a body which means
11:53 - that this is not allowed so you are
11:56 - trying to create another implementation
11:59 - of this function here that already has
12:01 - been implemented so i am going to remove
12:05 - this and now i'm going to explain you
12:07 - the way that is often used for this in c
12:10 - plus so what c plus plus programmers
12:13 - came up with is to create a separate
12:15 - file which is called header file and
12:18 - inside that header file you put all of
12:21 - the declarations so is it one
12:24 - declaration or 10 declarations or 100
12:26 - declarations you put them all in your
12:29 - header file and then you make another
12:32 - file which is called implementation and
12:34 - inside that implementation file you put
12:37 - definitions so you put implementations
12:40 - and now whenever you want to use
12:43 - the functions that are declared in that
12:45 - header file you just include that header
12:48 - file if you want to use those functions
12:50 - in one cpp file you include the header
12:52 - file in one cpp file if you want to use
12:55 - them in 100 cpp files you are going to
12:58 - just include that header file in 100 cpp
13:01 - files instead of copying
13:04 - 100 declarations in 100 cpp files which
13:07 - can be very tedious and also it can be
13:10 - very error prone it can cause many bugs
13:12 - and errors if you are not very very
13:15 - careful so i'm going to show you now how
13:18 - you can create your own header file and
13:20 - implementation file in visual studio
13:23 - so i will create this header file inside
13:27 - this folder here called header files so
13:29 - that it is well organized
13:32 - so right click on it and then add new
13:35 - item
13:36 - and then here you will select header
13:38 - file and if you are not able to see and
13:40 - select this header file make sure that
13:42 - visual c plus is selected on this left
13:45 - menu so visual c plus plus and then
13:48 - header file and here as you can see by
13:50 - default header files have dot h
13:53 - extension so the name of my header file
13:56 - will be
13:57 - food dot h for example and i will click
14:01 - add and as you can see it has been
14:04 - created successfully and here we have
14:06 - this pragma once and i'm going to
14:09 - explain this in a couple of minutes uh
14:11 - no need to worry about it now
14:13 - so now i want to create another file
14:15 - which will be implementation file and i
14:17 - will create it here so i'm going to say
14:20 - right click
14:21 - add new item and then here i will create
14:24 - a cpp file that has the same name so
14:29 - food but it has different extensions so
14:32 - food dot cpp
14:34 - and that will be our implementation file
14:38 - so as you can see it has been created
14:40 - successfully okay now what i want to do
14:43 - is i want to copy all of the
14:45 - declarations inside my food.h so inside
14:49 - my header file so i'm going to return to
14:51 - my main.cpp
14:53 - and i'm going to delete this declaration
14:57 - and then i'm going to paste it here
15:00 - so now this declaration has been moved
15:03 - to our header file and the next step is
15:06 - to move all of the definitions inside
15:08 - our implementation file so here inside
15:11 - this implementation file i will say
15:14 - hey you will be implementation file for
15:17 - this food dot age header file so please
15:21 - include all of the declarations that it
15:23 - contains so i will say
15:25 - include and then in these quotation
15:27 - marks i will say food dot h like this so
15:32 - after i have imported all of the
15:34 - declarations what i want to do now is i
15:37 - want to provide definitions for the
15:39 - declarations that are available in this
15:41 - header file here so i will go into my
15:44 - main.cpp
15:45 - and i will delete this definition from
15:48 - main.cpp and i will move it inside my
15:52 - food.cpp so inside my implementation
15:55 - file okay now if i go back to my
15:58 - main.cpp as you can see we have an error
16:01 - here which says hey what is this
16:03 - recommend me a food i don't have the
16:06 - declaration for this function anymore so
16:09 - now what we have to do
16:10 - is just include this food.h header file
16:14 - wherever we want to use this function
16:17 - here so now i'm going to do that
16:20 - so here i'm going to say
16:23 - include again and then i will use these
16:26 - double quotation marks and i will
16:28 - include this food.h header file that we
16:32 - just created and now if i try to run
16:35 - this program
16:38 - okay as you can see the error has
16:41 - disappeared and our program works as it
16:43 - should now one very important thing that
16:46 - i want you to notice is this include
16:48 - iostream so is this iostream also a
16:51 - header file the answer is yes but this
16:54 - is pre-existing header file which means
16:57 - that this header file is available with
16:59 - your compiler whereas this header file
17:02 - here is the one that we created so this
17:05 - is user defined header file now the
17:07 - difference is that this iostream header
17:09 - file can be included using these angled
17:13 - brackets and then you can also use these
17:15 - double quotation marks whereas for your
17:18 - own header files you always need to use
17:20 - these double quotation marks in order to
17:23 - include them
17:24 - okay now your question might be what is
17:27 - this io stream used for so let's delete
17:29 - it and see what will happen
17:31 - okay as you can see immediately we get
17:33 - an error with this c out command and if
17:35 - i try to build my program program if i
17:37 - try to run it
17:39 - we have error so that is because
17:42 - iostream provides us with standard input
17:45 - and output services and those are
17:47 - commands like c out and c in that we
17:50 - have been using very very often
17:53 - so in order to use this command i will
17:55 - need to return include iostream and as
17:58 - you can see immediately that error
18:00 - disappears
18:01 - okay so again the benefit of creating
18:04 - your own header file is that now if you
18:07 - want to use this recommend me a food
18:10 - function in more than one cpp file all
18:12 - you need to do is just include this
18:15 - header file in 10 files in 100 files in
18:18 - 1000 files doesn't really matter so just
18:21 - include header file
18:24 - okay
18:24 - and then one more thing is that this
18:27 - include is called preprocessor directive
18:29 - which means that uh it will tell to your
18:32 - compiler before you try to process that
18:34 - see this cpp file here please include
18:38 - this food header file so that is what
18:41 - this include does
18:43 - so now if i wanted to add another
18:45 - function inside my header file what i
18:48 - would do is i would add declaration here
18:51 - so let's say for example void
18:54 - um
18:55 - get pizza
18:57 - recipe
18:59 - um and i have no idea how recipe is
19:02 - spelled so let me check it out on google
19:04 - translate
19:05 - so it's get pizza recipe like this
19:08 - and inside our header file i will just
19:11 - put declaration so inside my food dot
19:14 - age we have declaration and then the
19:17 - implementation will go inside this food
19:20 - dot cpp file so here
19:23 - i will implement this function i will
19:26 - say that whenever someone is looking for
19:28 - pizza recipe i will just
19:31 - write out the recipe of pizza so i will
19:33 - say std.c out
19:35 - and then i will say
19:37 - to make pizza
19:40 - you need
19:42 - and then here you can write out the full
19:45 - recipe okay
19:47 - but
19:48 - here we have an error and that error is
19:50 - the same error that we had in our
19:52 - main.cpp
19:54 - when we removed this io stream so that
19:58 - means that if we want to use this c out
20:02 - command inside our food.cpp
20:05 - we need to include iostream header file
20:07 - here as well so i am going to copy it
20:11 - from here
20:12 - and then i will include it here and this
20:15 - error should disappear as you can see so
20:18 - now we have successfully added another
20:20 - function to our food dot h header file
20:24 - so here is declaration it's get pizza
20:27 - recipe and then inside our food.cpp
20:30 - implementation file we have the
20:32 - implementation of that function so it is
20:34 - get pizza recipe and then here is the
20:36 - implementation of that function now
20:39 - whenever we want to use this function
20:41 - all we need to do is we need to include
20:43 - this food.h heather file and we already
20:47 - have that header file inside our main
20:49 - dot cpp which means that now i can
20:53 - invoke
20:54 - get
20:55 - pizza recipe
20:57 - inside my main dot cpp okay so i will
21:01 - add
21:02 - a line here
21:05 - like this so that the text is nicely
21:07 - formatted and then if i try to run this
21:10 - program
21:12 - as you can see it says first today i
21:14 - will eat chocolate cake chocolate cake
21:16 - and then to make pizza you need and then
21:19 - the recipe should follow
21:21 - okay so that is exactly what we have
21:23 - achieved using this header file and an
21:26 - implementation file so now wherever you
21:29 - want to use this function or this
21:31 - function you just include your food.h
21:34 - header file
21:36 - one more thing that i promise to explain
21:38 - is what is this line of code here so
21:40 - what is this pragma was inside food.h
21:44 - heather file and the answer is that this
21:47 - serves as a guard to ensure that you
21:50 - will not include this header file more
21:52 - than once in a single cpp file so now
21:56 - your question might be selena why would
21:58 - i do that why would i even try to
22:00 - include the same header file more than
22:02 - once in a single cpp file and the answer
22:05 - is first of all you will probably not do
22:08 - it purposefully and then second thing is
22:10 - that you will not do it in a program
22:12 - that has 10 lines of code or 20 lines of
22:14 - code because it is very easy to manage
22:16 - that program but if you are working on a
22:19 - very complex program that has
22:21 - hundreds and thousands different files
22:24 - what happens very often is that this
22:27 - chain of includes is formed so what
22:30 - happens very often is the following
22:32 - situation so you have file two that
22:34 - includes file one and then you have file
22:36 - tree that includes file two and then you
22:39 - have file four that includes file tree
22:42 - and you decide also to include file two
22:45 - and there you have a problem where you
22:47 - are trying to include duplicate header
22:50 - files so that is exactly why this pragma
22:53 - once is used to ensure that you will not
22:55 - include this header file more than once
22:58 - in a specific cpp file
23:01 - so i hope that this video was helpful
23:03 - and that you understood what our header
23:05 - files and how to use header files in c
23:08 - plus and if you have any questions feel
23:10 - free to leave those in the comment
23:12 - section i read all of my comments and
23:15 - even if i don't manage to answer to all
23:16 - of them um if i see that there are
23:19 - certain topics that you are really
23:20 - struggling with and that you need help
23:22 - with i will make video related to that
23:24 - topic
23:25 - and then also if you have suggestions
23:27 - for my future videos feel free to put
23:29 - those in the comment section as well
23:32 - and if you like this video please give
23:34 - it a thumbs up because that helps me a
23:36 - lot to reach more people and help them
23:38 - to learn programming and then if you
23:40 - want to watch more videos like this one
23:42 - subscribe click the bell icon and you
23:44 - will get a notification from me every
23:46 - time that i publish a new video so thank
23:48 - you very much for watching and i will
23:50 - see you in some other video bye