00:00 - hi guys welcome to my channel as I
00:03 - promised in my previous video in this
00:05 - video I'm going to explain the concept
00:07 - of ASCII table and then I'm going to
00:09 - give you an idea an example of a program
00:12 - that is very beginner friendly very
00:14 - simple but also very fun and that you
00:17 - can build only with knowledge from my
00:18 - two previous courses and this one so if
00:21 - you haven't watched those make sure to
00:24 - watch them link is going to be somewhere
00:25 - here and also in description and also
00:29 - make sure to LIKE this video and to
00:31 - subscribe to my channel for more
00:32 - educational content and let's begin now
00:35 - so what is ASCII well ASCII stands for
00:39 - American Standard Code for information
00:40 - interchange and it was first created in
00:43 - order to standardize the way of
00:46 - representing characters in your computer
00:48 - so in ASCII table those characters are
00:51 - represented as numbers numeric codes and
00:54 - what this means is following let me give
00:56 - you an example when I first learned to
00:59 - read and write so when i was a little i
01:02 - decided to together with my friend
01:04 - create our special symbol language where
01:08 - we would exchange each character with a
01:10 - special symbol that only two of us could
01:13 - understand and then we would exchange
01:14 - letters usually using that symbol
01:17 - language and the one else could
01:19 - understand those letters and also guys
01:22 - write in the comments down below if you
01:24 - did that I know you did so don't make me
01:26 - feel like a weird one well that is
01:28 - exactly what your computer does it
01:30 - exchanges each character with a number
01:33 - so that it can understand it and it can
01:36 - communicate with other computers so this
01:39 - means that your computer or ASCII table
01:42 - assigns to each character a unique
01:45 - number and let's prove that now so how
01:48 - we can do that is in my visual studio
01:51 - I'm going to say C out and then in these
01:56 - parentheses I'm going to say int and
01:59 - then these single quotes and I would say
02:02 - letter A now let's add n line so this is
02:07 - one way of doing that and then there is
02:10 - another way of doing just the same thing
02:12 - that is let's say see out and then int
02:16 - and then inside these parentheses we are
02:18 - going to say our single quote and our
02:21 - letter a and also add and ly so this
02:27 - here is called casting operator and it
02:30 - is the operator that forces one data
02:32 - type to convert into another and since
02:35 - we said that each character has its
02:37 - numeric peer inside ASCII table well we
02:40 - can ask our computer to give us that
02:42 - pair so here I am saying please tell me
02:45 - what is my numeric pair of my letter a
02:48 - so what number is my letter a and if I
02:51 - run my program now you see that I got 97
02:58 - so our lowercase letter a is 97 in ASCII
03:01 - table let's check now a capital letter a
03:04 - so I'm going to say C out and off and
03:09 - let's put our capital letter A and one
03:11 - more in line so if I run my program now
03:17 - you see that I'm going to get a
03:19 - different number so 65 and this is so
03:23 - that your computer can distinguish
03:25 - between lowercase and uppercase letters
03:27 - so ascii uses 7 7 bits to represent each
03:33 - character and that means that it can
03:34 - represent 2 to the power of 7 that's how
03:37 - much characters it can represent so 128
03:41 - characters and that is enough for all
03:44 - English characters so all English
03:46 - lowercase and uppercase letters and
03:49 - numbers and also some special symbols
03:51 - but there is also a lot more languages
03:54 - and also languages that have a lot more
03:56 - characters so there is a lot more
03:59 - standards for representing those
04:01 - characters inside your computer's so
04:03 - this that we have just mentioned is
04:06 - called ASCII and there is also extended
04:10 - ASCII that is another standard that can
04:13 - represent more characters then there is
04:15 - also utf-8 utf-16 and a lot more
04:19 - different standards so what we should
04:22 - remember for now that is related to
04:24 - ASCII is that
04:25 - as he represents each character with a
04:28 - number so it holds its numeric match its
04:31 - numeric numeric pair in its table and
04:34 - then that we can also get that get that
04:37 - numeric match using our casting operator
04:40 - so this here is a casting operator so
04:44 - now you may ask if we can get a numeric
04:48 - value of our letter so if we can get our
04:51 - int number of our our letter can we do
04:54 - vice-versa so can we get a character
04:57 - from our numeric value and the answer is
04:59 - yes we can convert a number into a
05:02 - letter also and I'm going to demonstrate
05:04 - how we can do that in a moment so you
05:09 - can say C out char now let's say char of
05:13 - 65 and add n line and if I run my
05:18 - program you see that I'm going to get a
05:22 - letter A so capital letter A and know
05:26 - with this when you learn this you can
05:28 - get an idea on how you can build
05:30 - something more useful than just basic
05:32 - hello world application so you can for
05:35 - example build a program that ciphers
05:37 - words and sentences in ascii and then
05:41 - also a program that deciphers those
05:43 - messages back into english readable
05:46 - characters so now we are going together
05:49 - to build a program that ciphers words
05:51 - into ASCII codes and then I'm going to
05:54 - leave to you to build the program that
05:56 - deciphers those words back into English
05:59 - readable characters so let's say that we
06:02 - want to cipher a five letter word so
06:06 - what I'm going to do is what I need to
06:08 - do is to create five char variables so
06:12 - I'm going to create five char variables
06:14 - that I'm going to let my user and put
06:17 - his letters inside those five char
06:20 - variables and then I'm going to write
06:21 - out encoded words so I'm going to
06:24 - convert all of these letters in ascii
06:27 - codes and then i'm going to write that
06:29 - out to my user so i'm going to on a in a
06:32 - certain way cipher he's his word so i'm
06:35 - going to say here char c1
06:39 - char C 2 and then char C 3 and I want to
06:48 - stop here for a moment I want to explain
06:50 - one thing when we first were talking
06:52 - about creating variables we said that
06:54 - this is the way of creating variables so
06:56 - you say the type of your variable so
06:59 - char in this case and then you say what
07:01 - name you are going to give to your
07:02 - variable so in this case this is our C 1
07:05 - C 2 C 3 so this way of creating
07:09 - variables here it is correct but it is a
07:12 - bit tedious for this current situation
07:13 - there is another way of creating more
07:16 - than one variable and I'm going to
07:18 - demonstrate that now so what you can see
07:20 - say also what you can do is char C 1 C 2
07:25 - C 3 C 4 and C 5 and all separated with
07:31 - this comma sign so you can create more
07:35 - than one variable in one line like this
07:38 - but only if all of those variables are
07:41 - of the same type and in this situation
07:43 - they are so all of these variables are
07:46 - of type char so I've now created five
07:50 - variables of type char and another thing
07:52 - that I want to mention is that in
07:54 - upcoming videos we are going to learn
07:56 - how we can let our user decide how many
07:59 - characters how many how many values he
08:02 - wants to enter during the execution of
08:04 - our program so now we have hard-coded
08:08 - these five values but we are going to
08:09 - learn more in following courses and also
08:12 - another thing is that also in C++ there
08:15 - are a lot of solutions that you can use
08:17 - already made so that you can enter whole
08:21 - words or sentences so you don't have to
08:23 - enter your word letter by letter so you
08:26 - don't have to create variable for each
08:28 - letter that you want to enter but what
08:30 - I'm trying to explain here and what we
08:32 - want to understand here is how it really
08:33 - works in the background so how it works
08:36 - inside you have to understand that and I
08:39 - believe that that will give you a great
08:40 - advantage over those programmers that
08:42 - just know how to use something rather
08:45 - than how to make that something by
08:47 - themselves and then use it so I have
08:50 - here created five variable
08:52 - and each one hold a character that we
08:55 - will enter and let's enter them now so
08:59 - what I'm going to say is see out enter
09:03 - five letters and then I'm going to say C
09:09 - in and I'm going to put all my variables
09:12 - here so C 1 C 2 C 3 C 4 and C 5 so if
09:22 - you can see here I have entered all of
09:26 - my five variables in a single line so
09:28 - you can do this you can bind these
09:31 - operators like this like this so that
09:33 - you can enter more than one variable in
09:35 - a single line the same way that you can
09:37 - bind your C out operator so that you can
09:40 - write out more than just one string so
09:45 - now what we are left to do is we have to
09:50 - write out our ASCII message so what I'm
09:54 - going to say is C out ASCII message and
10:01 - then I'm going to put in C 1 let me
10:05 - write that out really quickly so I have
10:08 - written this message here and what I
10:10 - have said is console output ASCII
10:13 - message and then I have combined these C
10:17 - out operators so that I can write more
10:19 - than one variable in a single line so in
10:22 - a single command actually so I have said
10:25 - give me my int code of my C 1 so give me
10:28 - my ASCII code of my C 1 variable and
10:32 - then put a blank space and then give me
10:34 - my ASCII code of my C 2 and also C 3 4
10:38 - and 5 and I have also used these blank
10:42 - spaces because I don't want to write
10:44 - just a single number in a single line
10:47 - because I want to know where my first
10:50 - character ends and where my second
10:52 - character begins that's why I'm going to
10:53 - separate those codes with a empty space
10:57 - and also there is another thing that I
10:59 - want to mention and it is that when you
11:01 - want to convert your variable so the
11:04 - value that you are holding in you
11:06 - variable and when you use your casting
11:08 - operator on that you don't put your
11:10 - variable in a single quotation mark so
11:12 - you just put the name of your variable
11:13 - like this example here so if I run my
11:18 - program now you see that I get my
11:21 - message so enter five letters and I'm
11:23 - going to enter hello
11:26 - and you see now that I have this output
11:29 - ASCII message is 104 101 so 108 and 108
11:36 - so that is our letter L you see that it
11:39 - has the same code and now I have gotten
11:42 - this ASCII message which is which is our
11:44 - ciphered word and also there is one
11:49 - thing that you that I want you to keep
11:51 - in mind and that is that this program
11:54 - here will not take into consideration
11:56 - your entry or your space key as a letter
11:59 - so if you if you put your enter or your
12:01 - space key however much times you want it
12:04 - will not treat it as a character there
12:06 - are some other functions that you can
12:09 - use in your C++ if you want to capture
12:11 - enter for example or your space key such
12:14 - as C in cat if you really want you can
12:17 - google that out but at this point we are
12:19 - keeping this very beginner friendly so
12:22 - this will not capture your enter and
12:24 - your space so let's just prove that I'm
12:27 - good I'm running my program once more
12:29 - and I'm going to put interests and
12:31 - spaces and you see nothing is happening
12:34 - and then if I entered hello
12:36 - once more you see that I'm going to get
12:39 - the same numbers so the same message as
12:41 - before so we have built here a program
12:47 - that ciphers our words into ASCII and we
12:51 - have build this program after just
12:52 - studying a little bit of coding so
12:54 - imagine what you can do if you learned
12:56 - more so stay tuned make sure to
12:59 - subscribe to my channel and also like
13:01 - this video if you want to support me and
13:03 - filming these videos and also I'm going
13:06 - to leave to you to write a program that
13:09 - is going to decipher these messages from
13:11 - ASCII back into readable English words
13:14 - so you also can put your suggestions of
13:17 - a code in a comma
13:19 - down below and also what you can do you
13:21 - can upgrade this program here that we
13:23 - have written so that you can put in more
13:25 - words more sentences if you want and
13:27 - then you can put those coded encoded
13:31 - messages in the comments and everyone
13:33 - who wants to read those messages is
13:35 - going to have to build a program that is
13:37 - going to decipher those messages into
13:40 - readable English so subscribe to my
13:42 - channel like this video and I'll see you
13:45 - in the next one