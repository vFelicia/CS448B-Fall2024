00:00 - hi everyone and welcome to my channel in
00:02 - this video i want to explain what is
00:04 - system pause command and why it is
00:07 - considered a bad practice and why some
00:09 - people say that you should never use it
00:12 - and i'm going to demonstrate everything
00:14 - that i talk about
00:15 - using this simple c
00:17 - program that i have written in my visual
00:20 - studio so if you look at this program
00:22 - here you will notice that there is no
00:24 - system pause command here and then you
00:27 - will notice also that this is the most
00:29 - simple hello world program that just
00:31 - writes out this message to our console
00:34 - so let's see what is going to happen if
00:37 - i run this program
00:39 - okay did you notice what just happened
00:42 - our program started and then it closed
00:45 - very very quickly and we were not able
00:48 - to see the output in our console so we
00:50 - were not able to see if this message
00:53 - here indeed had been outputted to our
00:55 - console
00:56 - so
00:57 - now your question might be is that an
01:00 - error is the fact that when i run my
01:02 - program and it closes so quickly is that
01:05 - a bug a mistake
01:08 - the answer is no because when your
01:10 - program starts it is going to need cpu
01:13 - in order to be executed and then it is
01:15 - going to take memory as well so it is
01:18 - going to take certain computer resources
01:20 - so it's only logical that once your
01:22 - program finishes and executes all of the
01:25 - lines that it has that program should
01:27 - end and return those resources back to
01:29 - your computer so that they can be reused
01:32 - by other programs so that is exactly
01:36 - what happens when i run this program
01:39 - okay so your program starts here at this
01:42 - first line of our main function and then
01:45 - it writes out this message here and then
01:48 - it ends here okay so this open curly
01:52 - bracket is the first line of your
01:54 - program and then this closed curly
01:56 - bracket of your main function is the
01:58 - last line of your program and again that
02:00 - is exactly what happens when i start
02:03 - this program so it opens here and then
02:05 - it writes out this message and then it
02:07 - closes at this line of code here so
02:11 - now your question might be okay salina
02:13 - but that happens so quickly and i am not
02:16 - able to read the output in my console so
02:19 - how can i do that how can i pause my
02:22 - program so that i am able to review the
02:25 - output in my console
02:27 - and the answer is that that is exactly
02:30 - the reason why some people use system
02:32 - pause command
02:34 - so if i say system
02:37 - pause
02:39 - like this
02:40 - okay and if i run my program now
02:44 - as you can see the execution of my
02:46 - program has been paused and here i'm
02:48 - able to read the output in my console so
02:51 - here is hello world text and then it
02:54 - also has this message here which says
02:57 - press any key to continue now what this
03:00 - message here means it means that now
03:03 - your program is waiting for you to press
03:04 - a key and only after you press a key
03:07 - your program is going to continue and
03:10 - this line of code here this eighth line
03:12 - which says system pause is the line
03:14 - where the execution of your program has
03:17 - been paused and from here it will
03:19 - continue after you press a key so the
03:22 - only thing left to do after this line of
03:25 - code here is this closed curly bracket
03:28 - of your main function which represents
03:30 - the end of your program so that means
03:32 - that after i press a key here my program
03:36 - is going to end which will result in
03:38 - closing the console so let's demonstrate
03:41 - that
03:41 - okay as you can see our program now has
03:44 - closed
03:45 - now another thing that i want to show
03:47 - you is
03:48 - this text here
03:50 - this text which says press any key to
03:52 - continue if you are bothered by this
03:54 - text and if you don't want to see it
03:56 - what you can do is
03:58 - you can say here pause greater than now
04:02 - or pause greater than zero okay and if i
04:06 - run my program again
04:08 - as you can see it says hello world and
04:11 - that press any any key to continue text
04:14 - is not shown anymore but the program
04:16 - still behaves the same which means that
04:18 - it is still waiting for you to press a
04:21 - key in order to continue the execution
04:23 - of the program
04:25 - okay so let's close this now
04:29 - so here i have introduced you with
04:31 - system pause command and you have seen
04:33 - how the program behaves with and without
04:35 - it now i want to give you some more
04:38 - details and i want to explain some
04:40 - potential issues and problems that can
04:42 - happen if you use system pause command
04:45 - so what is system pause
04:48 - system is a function that is going to
04:51 - invoke your operating system and it is
04:53 - going to say hey operating system can
04:56 - you please run this pause program now
05:00 - what a pause program does is that it
05:03 - pauses the execution of its parent
05:06 - program which is this program here and
05:09 - it waits for you to press a key and only
05:13 - after you press a key this pause program
05:16 - will end and only then the execution
05:18 - will return to your parent program and
05:21 - your parent program will continue its
05:23 - execution
05:25 - now the problem with this system pause
05:28 - is that it is not portable which means
05:31 - that it is a platform specific hack that
05:34 - is going to work only for windows
05:36 - operating system so if you tried to run
05:40 - this command here or on linux or on mac
05:43 - operating systems it is not going to
05:45 - work and then i also believe that it is
05:47 - not going to work for most online
05:50 - compilers
05:51 - so
05:52 - um it is again as i said it is a
05:55 - platform specific hack for windows
05:57 - operating system
05:59 - um now your question might be
06:01 - okay selena but how can i pause the
06:03 - execution of my program so that i am
06:06 - able to read the output in my console so
06:09 - that my program does not close very fast
06:12 - and here i want to give you three
06:14 - different ways to do that and then if
06:16 - you are familiar with some other ways
06:18 - feel free to share them in the comments
06:20 - section
06:22 - so the first way instead of using this
06:24 - system pause command which is as we
06:27 - already said a platform dependent hack
06:29 - that works only on windows
06:32 - is to use a functionality that is
06:34 - defined in c plus language itself and
06:37 - that is
06:38 - c in dot get
06:41 - function
06:42 - okay now what this c in dot get function
06:45 - does is that it waits for you to press
06:47 - enter and then it continues the
06:50 - execution of your program so if i run my
06:53 - program
06:54 - as you can see the execution has been
06:57 - paused and it waits for me to press
06:59 - enter so if i do that
07:01 - the execution is going to continue and
07:03 - my console will close so that is what
07:06 - this c in dot get achieved
07:09 - now this as i already said is not
07:11 - platform dependent but it is a
07:13 - functionality that is defined in c plus
07:15 - plus language itself which means that it
07:18 - is not going to work only on windows but
07:20 - it will work on other operating systems
07:22 - as well now a problem with this is that
07:24 - this is not the main purpose of c in dot
07:27 - get but it's just a way for you to
07:29 - achieve that behavior that i just
07:31 - demonstrated so to pause the execution
07:33 - of your program and then if you want me
07:36 - to make a video a separate video where i
07:38 - explain this c in dot get functionality
07:41 - and it's used you can let me know in the
07:43 - comments down below and i will make a
07:45 - separate video about c in dot get in c
07:49 - plus
07:50 - so that is the first way for you to
07:52 - pause the execution of your program
07:55 - the second approach that i have seen
07:57 - people use is a break point so let's
08:00 - demonstrate what that means
08:02 - if i delete this c in dot get we expect
08:05 - our program to behave the same way that
08:07 - it did at the beginning which means to
08:10 - start and then to close very quickly so
08:14 - how am i going to pause the execution of
08:16 - my program the answer is by using a
08:19 - breakpoint so on this vertical line here
08:23 - in my visual studio i will press the
08:26 - line where i want to add a breakpoint to
08:29 - and that is going to be this line here
08:31 - so just before my program closes i want
08:34 - to pause it
08:36 - so if i run my program now
08:38 - as you can see the execution of my
08:41 - program has been paused so we are able
08:43 - to read the console and then here is
08:47 - where it has been paused and this button
08:49 - here if you noticed it says continue so
08:52 - only after i press this button here the
08:55 - execution of my program will continue
08:58 - and my program will continue from this
09:00 - line of code here which means that it
09:02 - will end and it will close the console
09:05 - so let's do that if i press continue as
09:08 - you could see the console has been
09:10 - closed now breakpoints are used in order
09:14 - to debug your program which means to
09:16 - follow the execution of your program to
09:19 - investigate what is happening during
09:21 - that execution and to fix and discover
09:24 - some potential bugs
09:26 - and also you can add more than one
09:29 - breakpoint to your program if you want
09:31 - and if you need so
09:32 - i can add another breakpoint here for
09:35 - example
09:36 - and and then also another very important
09:39 - thing is that these break points that
09:41 - you see here the execution of your
09:43 - program will stop at this break point
09:45 - and then at this break point here only
09:48 - if you run it by using this option so
09:51 - only if you say start debugging or if
09:54 - you press f5 key if you decide to run
09:58 - your program by using this start without
10:01 - debugging or if you press ctrl
10:03 - f5 then your program is not going to
10:06 - stop at any break point
10:08 - so that was the second way for you to
10:11 - pause the execution of your program and
10:13 - that was by using break points so let's
10:17 - remove these two and now i want to show
10:19 - you the third way for you to pause the
10:22 - execution of your program without using
10:24 - system pause command
10:26 - the third option is already built in
10:29 - inside visual studio and it is this
10:31 - option here so debug and then start
10:34 - without debugging or you can also press
10:37 - control plus f5 keys and if you decide
10:41 - to run your program by using this start
10:44 - without debugging option as i already
10:47 - said your program is not going to pause
10:49 - at any break points but your program as
10:52 - well will pause at the end just before
10:55 - closing the console so you will be able
10:58 - to read the output in your console so if
11:01 - i press start without debugging
11:04 - as you can see our program paused and we
11:06 - can read the output in our console and
11:09 - then it also says press any key to
11:11 - continue so if i press a key my program
11:14 - will continue and the console will close
11:18 - so those were some suggestions that you
11:20 - can use in order to pause the execution
11:22 - of your program and read the output in
11:24 - your console and then also if you have
11:26 - some other suggestions you can put them
11:29 - in the comments section
11:31 - so i hope that you enjoyed this video if
11:33 - you did give it a thumbs up and then
11:35 - also if you have any questions or if you
11:37 - have any ideas and suggestions for my
11:39 - future videos you can leave those in the
11:42 - comment section and if you want to learn
11:44 - more about programming and if you want
11:46 - to see more videos like this one feel
11:48 - free to subscribe and click the bell
11:50 - icon as well so that you get a
11:52 - notification from me every time that i
11:53 - publish a new video and i publish new
11:56 - videos every single week and then also
11:59 - if you use some other social media like
12:01 - instagram or twitter or facebook
12:04 - you can tag me on your stories if you
12:06 - decide to use my videos to learn
12:08 - programming because i love watching your
12:10 - stories
12:11 - and i will leave my other social media
12:13 - accounts in the description of this
12:16 - video so thank you very much for
12:18 - watching and i will see you in my next
12:20 - video bye