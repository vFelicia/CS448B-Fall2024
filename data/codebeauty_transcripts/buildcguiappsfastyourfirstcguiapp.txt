00:00 - [Music]
00:10 - hi
00:10 - everyone and welcome to my channel it is
00:12 - currently half past
00:14 - 3 am and i am filming a youtube video so
00:18 - it better be worth it and you better
00:20 - give this video a thumbs up
00:22 - so in this video i want to show you how
00:24 - you can build
00:25 - a c plus application with user interface
00:28 - in just a couple of minutes
00:30 - and it is going to be very easy you will
00:32 - see so here i am going to insert
00:35 - the final result and the application
00:36 - that we are going to build in this video
00:39 - this is the application that we are
00:40 - going to build it is a to-do list
00:43 - app and it has a couple of components so
00:45 - it has
00:46 - a label which says add task and then an
00:49 - input field where we are going to type
00:51 - the text of our task
00:52 - and then a button which says add and it
00:55 - is used in order to add
00:56 - the task that we type here into this
00:59 - list box here
01:00 - and here we will see the list of all of
01:03 - our tasks
01:04 - so let's demonstrate how the app is
01:06 - going to work let's type
01:08 - task 1 and let's add that task and as
01:11 - you can see
01:12 - it has been added into this list here
01:14 - let's add
01:15 - another task let's say task 2
01:19 - and then task 3
01:23 - task 4 and so on so that is
01:26 - the first functionality and then the
01:28 - second functionality that i have
01:30 - implemented
01:31 - is removing existing tasks from this
01:34 - list here so in order to remove a task
01:37 - you just
01:37 - click on it as you can see so again and
01:41 - again
01:41 - and again and this means that we have
01:43 - successfully completed all of our tasks
01:45 - in order to build this app i'm going to
01:47 - use c plus builder and rad studio
01:50 - and first i'm going to show you how to
01:52 - install it so
01:53 - i will leave a link in the description
01:55 - that you can use in order to download it
01:57 - and try it out for free
01:59 - so as i said the first step is to show
02:01 - you how to install it
02:04 - so when you click the link in the
02:05 - description you will be navigated to
02:07 - this site here
02:08 - and you will have to fill this form so
02:11 - let me do that very quickly and then i
02:14 - will be back
02:15 - okay so here is the filled form i am not
02:18 - a robot okay what are bridges here
02:24 - verify and let's click start your trial
02:29 - okay and soon after this the download
02:32 - should start so you should
02:34 - get the installer here and i will be
02:36 - back once
02:37 - this is downloaded once the download is
02:39 - finished you are going to click on the
02:41 - installer
02:43 - and here you are going to accept terms
02:45 - and conditions and click
02:47 - next and then enter new license
02:51 - and then next again and here you
02:54 - are going to select i have signed up for
02:57 - a free trial at
02:59 - embarcadero.com and then click install
03:02 - and the installation process should
03:04 - start so i will be back
03:06 - once it's finished so once the
03:09 - installation of red studio is finished
03:11 - you are going to get
03:12 - a window like this one and here you have
03:15 - to select the platforms that you want to
03:17 - install
03:18 - the one that i will select is c plus
03:20 - builder windows enterprise
03:22 - trial and i'm going to unselect these
03:25 - other ones
03:26 - okay and i am going to click continue
03:30 - okay and here you can select additional
03:32 - languages help
03:33 - samples and so on i will just click
03:36 - install so that it finishes faster
03:38 - and the installation process should
03:40 - start once more and this one is going to
03:42 - take a little bit longer so again
03:45 - i will be back once this is finished and
03:48 - when the installation finishes you will
03:50 - click start
03:51 - working okay and
03:54 - now the rad studio should start
03:58 - okay here you will select the theme i
04:01 - will select
04:02 - dark mode and click next and
04:05 - click get started
04:08 - okay so here i have opened rad studio
04:12 - and first i want to make an introduction
04:14 - so that you understand the main parts
04:16 - and components that we are going to use
04:18 - and then we are going to build the
04:20 - application that you saw at the
04:22 - beginning of this
04:22 - video so let's create a new project
04:26 - you can click here on create a new
04:28 - multi-device application with c
04:31 - builder or you can click on file
04:34 - new and then other
04:37 - okay and here you are going to see
04:40 - multi-device application and it says
04:42 - that
04:42 - multi-device application is an ui
04:45 - application
04:46 - that works on any operating system or
04:48 - device
04:49 - so that is what we are going to select
04:51 - and i will click
04:52 - ok and then here i am going to select
04:55 - blank application and i will click
04:57 - ok again after you create a new project
05:00 - you will get
05:01 - a window that looks like this and there
05:04 - are
05:04 - four parts of this window that i want to
05:06 - explain because we will use them a lot
05:09 - and that is projects part in the upper
05:11 - right corner
05:13 - and then structure in the upper left and
05:15 - then we have object inspector in the
05:17 - bottom
05:18 - left and in the bottom right corner we
05:20 - have this
05:21 - palette and if you don't see any one
05:24 - of these four what you can do is you can
05:27 - click on view
05:29 - and then tool windows and here you have
05:32 - all of these and you can enable
05:34 - whichever one you want so
05:35 - project structure object inspector
05:38 - palette
05:39 - and so on okay so now i'm going to
05:42 - explain
05:42 - what each one of these four is used for
05:46 - inside this projects part we have all of
05:48 - the files that our application contains
05:51 - and there are three that i want to
05:53 - explain and focus on
05:54 - and those are under this unit 1.cpp
05:57 - and as you can see you can collapse it
06:00 - and expand it
06:01 - and those three are unit1.cpp unit1.fmx
06:06 - and then unit1.h so this unit1.cpp
06:10 - and unit1.h are used to write c
06:13 - plus code and then this unit1.fmx is
06:16 - used to store the information about
06:18 - the design of your application so if you
06:21 - click
06:22 - or actually double click on the unit
06:24 - 1.cpp
06:25 - you are going to get c plus code and
06:27 - then unit 1.h
06:29 - as well contains c plus plus code and
06:32 - then if you double click on unit 1.fmx
06:35 - here you have the design of your
06:37 - application which is
06:38 - just an empty blank form because we
06:40 - created an empty application
06:42 - so that is the first way to navigate
06:44 - between these
06:45 - three and then another way is at the
06:48 - bottom
06:48 - you have a tab control which has unit
06:51 - 1.cpp
06:52 - unit1.h and then the design mode of your
06:55 - application and you can use that
06:57 - as well so let's move to this upper left
07:00 - corner where it says structure
07:02 - and here we will have all of the
07:04 - components slash
07:05 - controls that our application contains
07:08 - and currently our application contains
07:10 - only one form which is completely empty
07:13 - because we created
07:14 - a blank application but if you decide to
07:17 - add
07:17 - new controls to your application like
07:20 - text labels
07:20 - input fields buttons list boxes and so
07:23 - on
07:24 - those are going to be shown here as well
07:26 - so now your question might be
07:28 - okay selena but how can i add new
07:31 - controls or components to my application
07:34 - and the answer is very easy so let's
07:36 - move to this bottom
07:38 - right corner where it says palette and
07:41 - inside this palette we have a lot of the
07:44 - components which are already available
07:46 - for you
07:47 - to use so you can basically drag and
07:49 - drop them and you don't have to write
07:50 - the code
07:51 - yourself which is going to save you a
07:53 - lot of time so
07:54 - let's see what kind of components we
07:56 - have under this standard
07:58 - category so standard components are
08:01 - components like buttons checkboxes radio
08:04 - buttons
08:05 - what else labels image controls progress
08:08 - bars
08:08 - scroll bars and so on and you can check
08:12 - this out on your own after you finish
08:14 - this video
08:15 - so that is what we use this palette
08:17 - window for
08:18 - and let's drag and drop a couple of
08:20 - components so
08:21 - let's use this label component i'm going
08:24 - to put it here
08:26 - and then let's add an input field it's
08:28 - called t
08:29 - edit so you can search it here you can
08:31 - type t
08:32 - edit and here it is i'm going to drag
08:35 - and drop that as well
08:37 - i'll put it here and i'll just make it a
08:39 - little bit
08:40 - bigger like this and align it with my
08:43 - label
08:44 - okay and then let's add a button
08:47 - it is here i'm going to place it
08:50 - here and i will also make it the same
08:53 - size as
08:54 - my input field okay maybe i'll make this
08:57 - input field a little bit
08:58 - bigger like this and then another
09:01 - component that i'm going to need
09:02 - is a list box so a place where i'm going
09:05 - to show my tasks so
09:07 - let's search for list box
09:11 - here it is and i will put it here
09:14 - and make it the same size as my input
09:18 - field
09:18 - like this okay and let's adjust the size
09:21 - of this
09:22 - form okay perfect so
09:25 - here we have added all of the components
09:27 - that our application is going to contain
09:30 - and you can even run your application
09:32 - now so let's
09:33 - do that let's see what's going to happen
09:38 - okay no errors and here is our
09:40 - application
09:41 - as you can see it contains all of the
09:43 - components that we need but our
09:44 - application is currently dumb
09:46 - which means that it does not have any
09:48 - logic so this button here for example
09:51 - does not know how to behave
09:53 - when it is clicked so that is the next
09:56 - thing that i want to change i am going
09:57 - to stop my application
09:59 - and let's see the first thing that i
10:02 - want to change
10:02 - is the text of this label so i'm going
10:05 - to click on this label
10:07 - and if you look at this bottom left part
10:10 - where it says
10:11 - object inspector you will notice that
10:13 - here we have properties
10:15 - and events and this properties
10:18 - tab contains all the properties of the
10:21 - control that has been selected
10:23 - so in this situation we selected our
10:25 - label control
10:26 - and here you can change all of the
10:28 - properties of your label
10:30 - and the property that i want to change
10:32 - is called text
10:33 - so let's find that okay
10:37 - here it says label one and that is the
10:40 - text that is shown here
10:41 - so that is what i want to change i
10:44 - wanted to say for example
10:46 - add task like this and i will press
10:49 - enter and as you can see the text has
10:52 - been
10:53 - changed okay so that is the first thing
10:55 - that i want to do and then
10:57 - let's change also the text of this
10:59 - button here
11:00 - so if i click on this button again
11:03 - on this object inspector window you will
11:06 - have all the properties and events of
11:08 - this
11:09 - button and later i'm going to explain
11:10 - what are events and how to work with
11:12 - events for now i'm focusing only on
11:15 - properties part
11:16 - so click on button and then select
11:19 - properties and here you can change the
11:21 - properties of your button
11:22 - the one that i want to change again is
11:24 - called text
11:26 - so let's do that instead of having
11:28 - button one text
11:29 - on this button let's say add
11:33 - like this and i'm going to press enter
11:35 - okay so
11:36 - if i run my application again as you can
11:38 - see
11:39 - here we have add task and then add
11:42 - button so now we have a better idea of
11:44 - what
11:44 - this application here is doing in order
11:47 - to make it easier to work with these
11:48 - controls
11:50 - let's change their names so that they
11:52 - make more sense
11:53 - and let me show you what i mean by this
11:55 - so if i click on this add button
11:58 - properties and i look for a name
12:01 - property
12:02 - you will notice that the name of this
12:05 - button here is
12:07 - button one and then if i click on this
12:09 - input field
12:10 - you will notice that its name is edit
12:13 - one and then if i click on the list box
12:15 - the name of the list box is list box one
12:18 - so
12:19 - the same way that you should give
12:20 - meaningful names to your variables
12:22 - you should also give meaningful names to
12:25 - your controls because
12:27 - if you have for example 10 buttons in
12:28 - your application and you leave them with
12:30 - their default names of button 1 button 2
12:33 - button 3 and so on
12:35 - it is just a matter of time when you are
12:37 - going to forget
12:38 - what button 3 means or what button 7
12:40 - means and so on
12:42 - so that is the reason why you should use
12:45 - meaningful names for your controls so
12:47 - let's do that i'm going to click on this
12:50 - button and instead of having the name of
12:53 - button1
12:54 - i'm going to change it so that its name
12:56 - is add
12:58 - button or add task button you can use
13:01 - whichever name you want
13:02 - as long as it is meaningful so let's
13:04 - press enter here
13:06 - and then i'm going to click on this
13:08 - input field
13:09 - its name is edit i am going to call it
13:12 - for example
13:13 - task edit or you can call it task input
13:16 - field whichever name you find
13:18 - easier to remember so i'm going to save
13:21 - the change
13:22 - here as well and then i will click on my
13:24 - list box
13:25 - and the name of this list box will be
13:28 - tasks
13:28 - list box okay like this
13:32 - so what we have achieved with this is
13:34 - that when we want to refer
13:36 - a specific component from our c plus
13:39 - code
13:39 - we are going to use the name of that
13:42 - component
13:42 - and it is going to be much easier for us
13:44 - if that component has
13:46 - a meaningful name now one thing that
13:49 - just happened
13:50 - and you noticed that if you paid
13:51 - attention since the beginning of this
13:53 - video
13:53 - is the following inside this structure
13:56 - window
13:57 - now we have additional four components
14:00 - and those four components are part of
14:02 - this
14:02 - form one so in the beginning we had form
14:05 - one and now we have
14:07 - add button which is this button here and
14:09 - then label one
14:10 - as you can see we have not changed the
14:12 - name of this label here that is why
14:15 - it has the default name of label one and
14:18 - then
14:18 - task edit which is this input field here
14:21 - and then
14:22 - task list box which is this list box
14:24 - here
14:25 - and here are the names of all of our
14:27 - components
14:28 - that our application contains so if i
14:31 - run this application now
14:34 - nothing has changed in terms of the
14:36 - appearance of the application
14:38 - but what has changed is that the names
14:41 - of
14:42 - all of these components are different so
14:44 - when we decide to use those components
14:46 - from our c
14:47 - code we are going to use those names
14:50 - that we assigned
14:51 - to each one of these three components
14:54 - the next thing that i want to do is i
14:56 - want to implement the logic for this
14:58 - application here so when i type the text
15:02 - inside this input field when i say for
15:04 - example this
15:06 - is task 1 and i click on this
15:10 - add button it should add this text to my
15:13 - list of
15:14 - tasks so that is the next thing that i
15:16 - want to do and in order to know how to
15:19 - do that
15:19 - you will first need to understand a
15:21 - little bit about events and how to work
15:24 - with events
15:25 - so that is the next thing that i'm going
15:27 - to explain so what is
15:28 - an event in programming an event is just
15:32 - an action that can be caused by the user
15:34 - or by the software itself
15:37 - the examples of some events are for
15:39 - example
15:40 - a mouse click and that event is called
15:42 - on click
15:43 - or when you press a key and that event
15:46 - is called on key
15:47 - down or for example when you hover
15:50 - over a button and that event is called
15:53 - on hover
15:54 - or on mouse enter depending on the
15:56 - language in which you work
15:57 - the naming is a little bit different but
15:59 - the logic is absolutely
16:01 - the same so one event is when you hover
16:04 - over a button and then another event is
16:06 - when you leave
16:07 - that button so let me show you how this
16:09 - hover event
16:10 - works because it is implemented by
16:13 - default so i'm going to run my
16:15 - application
16:16 - and if i hover over this add
16:19 - button as you can see it becomes blue so
16:23 - someone has written the code which says
16:26 - on hover
16:27 - please become blue and that please
16:29 - become blue part
16:30 - is called event handler which means that
16:33 - that is the behavior that is going to
16:35 - happen
16:36 - when a certain event is raised so
16:39 - what i want to do now is i want to
16:41 - handle another event which is
16:43 - mouse click that event is called on
16:46 - click
16:46 - and the behavior that i want on click of
16:49 - this button
16:50 - here is i want to take text from this
16:53 - input field this task edit and i want to
16:57 - add that
16:58 - task to my task list box so
17:01 - that is the event that we are going to
17:03 - handle now let's close
17:04 - this application and as i said the event
17:08 - that i want to handle will be the event
17:10 - of this
17:11 - button here and i'm going to switch to
17:14 - this events
17:15 - tab and i will find event called on
17:18 - click
17:19 - and here if i want to create an event i
17:22 - just need to double click
17:24 - on this input field and as you can see
17:27 - two things happened the first one is
17:29 - that we created a function called
17:31 - add button click and here we are going
17:34 - to implement that function so here we
17:36 - are going to write
17:37 - the code of what is going to happen when
17:39 - add button
17:40 - is clicked and then this function also
17:43 - has been connected with this
17:45 - on click event which means that when
17:48 - that button
17:48 - is clicked so on click please invoke
17:51 - this
17:52 - function here and as i said here we are
17:54 - going to describe the behavior of that
17:57 - function and one tip if you're not
17:59 - familiar with functions i will link in
18:01 - the upper right corner
18:03 - a playlist where i explain everything
18:05 - that you need to know about functions
18:07 - and i will also link that playlist in
18:09 - the description of this video so make
18:11 - sure to watch that
18:12 - if you don't understand what are
18:13 - functions so now if you watched all of
18:16 - my previous videos you can see how
18:18 - all the things that i explained come
18:20 - together and make perfect
18:21 - sense so before i implement
18:25 - this function let me show you very
18:27 - quickly what has
18:28 - changed in these other files so if i
18:31 - open my design
18:32 - tab you will notice that nothing has
18:34 - changed in terms of design
18:36 - and then in this unit 1.h we have added
18:41 - a declaration of function called add
18:43 - button click
18:45 - okay and then inside this unit 1.cpp
18:49 - we are going to implement that function
18:52 - so once more what i want to happen when
18:55 - add button is clicked is the following
18:57 - let's move to design mode and when this
19:01 - button is clicked i want to take the
19:03 - text
19:04 - from this input field which is called
19:06 - task
19:07 - edit and i want to add that text to
19:10 - my tasks list box so that is the code
19:14 - that i will write in my
19:15 - unit 1.cpp so here i'm going to create a
19:19 - variable of type
19:21 - string and i will call it task
19:24 - text like this so i want to access a
19:27 - control called
19:28 - task edit so i will say task
19:31 - edit and i want to access its property
19:34 - called
19:35 - text like this and make sure to use
19:39 - this pointer because if you use a dot it
19:42 - is not
19:43 - going to work so again make sure to use
19:47 - this symbol here okay so with this
19:50 - we have taken the text from our task
19:52 - edit and we have stored that text
19:55 - inside this string variable that is the
19:58 - first step
19:59 - and the second step is to add this task
20:02 - text into our list box so i will refer
20:05 - to my list box
20:06 - and its name is tasks list box
20:10 - like this and i want to access the items
20:14 - of my tasks list box so i will say
20:17 - items and then what i want to do is i
20:20 - want to add
20:21 - a new item so i will use
20:24 - add method and that item will be this
20:27 - text here so i will pass a parameter
20:31 - which
20:31 - is the text from our task edit and
20:34 - with this we have successfully
20:36 - implemented the handler for
20:38 - add button click so if i run my program
20:41 - now let's see what is going to happen
20:44 - okay perfect so let's type for example
20:47 - task
20:48 - 1 and let's click add and as you can see
20:51 - this task has been added to our tasks
20:54 - list let's add another task
20:57 - okay and then third task
21:02 - forth and so on now one thing that i
21:05 - would like to happen
21:06 - is when i add this task i would like
21:09 - this text to be deleted so let's add
21:12 - that code as well
21:14 - i'm going to close the program and here
21:16 - after i have added
21:18 - the task to my tasks list box and what i
21:21 - want to do is i want to say
21:23 - that the text of my task
21:26 - edit is now going to be equal to an
21:29 - empty
21:30 - string like this so if i run my program
21:33 - again
21:34 - okay and if i add task
21:38 - 1 and click add as you can see the text
21:42 - has been cleared let's add another task
21:45 - add and again the text has been cleared
21:48 - so that is the first functionality
21:52 - and the second functionality that i want
21:53 - to implement is
21:55 - when i click a specific item of this
21:58 - list
21:58 - i want that task to be removed which
22:01 - means that that task has been completed
22:03 - so i remove it from my
22:05 - list okay so that is another
22:07 - functionality that we are going to
22:09 - implement
22:10 - and in order to implement that
22:12 - functionality we need to handle
22:14 - another event so let's switch to our
22:16 - design mode
22:17 - and the event that we want to implement
22:20 - is the event of this
22:21 - list box here and that event is called
22:25 - on
22:26 - item click so let's find that
22:29 - event it is here so when an item of this
22:33 - list box is clicked what do we want to
22:36 - happen
22:37 - so again in order to implement the event
22:40 - we need to
22:41 - double click on this field here and as
22:44 - you can see
22:45 - it has added task list box item click
22:48 - so it has added a method which we are
22:51 - going to implement
22:52 - here again the declaration of that
22:55 - method has been
22:56 - added inside our unit 1.h
23:00 - nothing has changed in terms of our
23:01 - design and then we are going to
23:03 - implement
23:04 - that method here so if i scroll up you
23:08 - are going to see that here is the
23:09 - implementation of our add button click
23:12 - event and then
23:12 - below it we are going to implement tasks
23:15 - list box
23:16 - item click so what do we want to happen
23:19 - when an item of our list
23:21 - is clicked the answer is we want to
23:23 - remove that
23:25 - item so how we are going to do that well
23:28 - we are going to use one of these two
23:30 - parameters that we received
23:32 - inside this function so if you pay
23:35 - attention
23:36 - this function has two parameters the
23:39 - first one is
23:40 - the sender and then the second one which
23:42 - we are going to use
23:43 - is called item and this item represents
23:47 - the exact item of our list that has been
23:50 - clicked so if you have a list that has
23:53 - three tasks for example and you click
23:55 - on the second one here you are going to
23:58 - get
23:59 - that second task so we need to remove
24:02 - this item from our list now the way to
24:06 - remove
24:07 - items from a list box is by using their
24:10 - index so the same way that an array has
24:12 - indexes
24:13 - a list also has indexes so
24:16 - what we need to do is we need to ask
24:19 - this item
24:20 - hey what is your index and then we are
24:22 - going to tell to our list box
24:24 - please remove the item that has that
24:27 - specific
24:28 - index so let's do that so the first
24:31 - thing that i want to do
24:32 - is create an int variable called index
24:37 - and what i want to store inside this
24:38 - index variable is
24:40 - index of this item here so
24:44 - i am going to say item
24:47 - index again make sure to use this
24:50 - pointer because if you use dot it's not
24:52 - going to work
24:54 - okay so here we have the index of the
24:58 - item that has been clicked
24:59 - and now what we need to do is we need to
25:01 - remove the item with that index from our
25:04 - list box so in order to do that i will
25:07 - say
25:08 - tasks list box like this
25:13 - items delete
25:17 - okay and this delete method receives the
25:20 - index of the item that we want to delete
25:24 - so i'm going to say please delete the
25:26 - item that has
25:28 - this index here so with this we have
25:30 - successfully
25:31 - implemented item click event on our list
25:35 - box
25:35 - so if i run my program now let's see
25:38 - what is going to happen
25:39 - so let's move it here and
25:43 - let's add a task let's say task one
25:46 - add and then task two add
25:50 - task three okay that's enough so if
25:54 - i click a specific task as you can see
25:56 - that task is going to be
25:58 - removed and then this one and this one
26:01 - as well
26:02 - so those are two functionalities that i
26:03 - wanted to show you but
26:05 - this application also has some bugs
26:08 - and the first part that i notice is that
26:10 - this add button
26:11 - will add a new task even if this field
26:14 - is empty so
26:15 - it will add an empty task basically so
26:17 - if i click add at add
26:19 - and if i add for example task
26:22 - 5 as you can see that task is going to
26:26 - be
26:26 - added on this position here because here
26:28 - we have tasks with
26:30 - empty text and you can remove those
26:33 - tasks
26:33 - as you can see so that is one bug that
26:35 - i'm going to leave to you
26:37 - so that you can fix it on your own and
26:39 - then if you find any other way to
26:41 - upgrade this application and add
26:43 - some additional features feel free to
26:45 - leave your ideas in the comments section
26:48 - so thank you very much for watching
26:49 - please give this video a thumbs up for
26:51 - the youtube algorithm
26:52 - because that helps me a lot to reach
26:54 - more people and then also share it with
26:56 - someone who would like to learn
26:57 - programming because that way
26:59 - our community is going to grow faster so
27:02 - that is all for this video it's
27:04 - currently 5 am
27:06 - and i have to go to sleep bye