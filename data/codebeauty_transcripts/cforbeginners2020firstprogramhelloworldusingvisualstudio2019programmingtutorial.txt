00:00 - hi guys very warm welcome to everyone
00:03 - watching this video and this video is
00:04 - going to be introduction to C++
00:06 - programming language and the first video
00:08 - of this course I was planning on
00:10 - dividing this video into two separate
00:12 - parts so that in the first part I'm
00:15 - going to explain some basic concepts
00:17 - some general concepts that are related
00:18 - to C++ and that you need to understand
00:21 - in my opinion first before starting to
00:24 - write code and then in the second part
00:26 - we are going to build our first C++
00:28 - program so I'm going to include in the
00:31 - description of this video time stamp so
00:33 - that you can navigate yourself to the
00:35 - coding part if you want but if you're an
00:37 - absolute beginner I would recommend you
00:39 - to watch the entire video let's explain
00:42 - a couple of concepts before we actually
00:44 - start to write code so that you are
00:46 - familiar with them you may wonder what
00:49 - kind of applications you can build with
00:51 - C++
00:52 - well C++ is general-purpose language
00:55 - that means that it can be used to build
00:57 - all types of applications so it is very
01:00 - close to the hardware and that means
01:02 - that it can manipulate resources easily
01:05 - so you can build operating systems if
01:08 - you want with it you can build compilers
01:10 - browsers demanding games so all
01:13 - general-purpose software can be built
01:15 - with C++ it is not specific for only one
01:19 - domain but it can be used to solve and
01:21 - build different types of applications
01:24 - after that I would like to mention that
01:26 - C++ is compiled language that means that
01:30 - the code that you write first has to be
01:33 - compiled or converted translated into
01:36 - another language that is understandable
01:39 - to your machine to your computer so that
01:42 - phase is called compiling code or
01:44 - building code there are certain errors
01:47 - that can occur in this phase of course
01:49 - and those are compile time errors this
01:52 - type of errors is usually the most
01:55 - common among beginners among people who
01:57 - are just starting to learn C++ and we
02:00 - are going to demonstrate some of those
02:01 - compile time errors when we start coding
02:04 - after that C++ is case sensitive
02:08 - language that means that C++
02:11 - distinguishes between lower
02:13 - case and upper case letters so if you
02:15 - have for example a variable I quote
02:17 - upper case and then a variable or lower
02:20 - case so the same meaning the same word
02:23 - those who are going to be treated under
02:25 - and understood differently as different
02:28 - variables by C++ so it is case sensitive
02:32 - language why suppose was was created
02:35 - another question because before it there
02:38 - were other programming languages well
02:41 - yes they were and it was created in
02:44 - 1980s and it was created with two
02:47 - programming languages in mind one of
02:49 - those two was Simula and the other one
02:52 - was C so similar at the time was great
02:55 - language for human way of understanding
02:58 - and representing things so it was very
03:01 - understandable and easy to use to humans
03:03 - but at the same time it was very very
03:06 - slow so they decided to combine it with
03:09 - another programming language a fast one
03:12 - and at that time the best choice for
03:15 - that was C programming language so they
03:17 - combined the two and they got C++ C++ is
03:22 - very very understandable language very
03:25 - easy to use by humans so you can build
03:28 - and maintain a huge project with C++ but
03:32 - at the same time because of this C part
03:34 - it is very close to the hardware so
03:38 - demanding tasks can be executed fast and
03:42 - also well since since it was created
03:45 - from C programming language you can say
03:48 - that any valid C program is actually
03:50 - valid C++ program so if you've ever
03:53 - built a C program you have actually
03:54 - built a C++ program already as I have
03:59 - already said the code that you write is
04:02 - not directly understandable to your
04:04 - machine so first it has to be converted
04:07 - into another language that is
04:08 - understandable to a computer but the one
04:10 - the language that is understandable to
04:12 - you is called source code I am going to
04:15 - put here an example of source code and I
04:17 - am also wondering at this moment what do
04:20 - you think that this code does so before
04:22 - we started any programming any coding at
04:24 - all what do you think that
04:26 - result of this program is going to be so
04:29 - just to check how understandable C++
04:32 - really is even for someone who has not
04:35 - have a lot of experience in coding to
04:38 - write in the comments of the video what
04:41 - do you think that this code is going to
04:43 - do and I'm going to check those so at
04:46 - the same time you're going to be doing
04:47 - something called writing pseudocode
04:50 - which means describing what a program
04:52 - does but just in plain english so no c++
04:56 - so this is the source code after Det
05:01 - that source code is transferred or
05:04 - translated into another form another
05:07 - language which is understandable to your
05:09 - computer and that is object code that
05:11 - object code is usually in a form of
05:14 - binary numbers so it once and zeros and
05:18 - that is the only language that your
05:20 - computer actually understand and this is
05:23 - an example of your machine the language
05:26 - I'm also not going to ask anyone to
05:29 - describe what this here does because
05:31 - this is highly unreadable and cannot be
05:34 - understood by humans but as I said it is
05:37 - the only language that your machine
05:39 - understands so algorithm what is
05:43 - algorithm algorithm is nothing more than
05:46 - a recipe so steps instructions that you
05:49 - write to your computer list of
05:52 - ingredients and and studies that your
05:55 - computer needs to do in order to perform
05:57 - a certain task
05:58 - that's algorithm now that we have
06:01 - understood these concepts let's switch
06:03 - to more practical part so the tool that
06:06 - we are going to use is called Visual
06:08 - Studio 2019 and there is a lot of
06:11 - tutorials on YouTube on how you can
06:13 - download and install the Visual Studio
06:15 - and you can also use community version
06:18 - for free
06:18 - so when we open visual studio you can
06:25 - see that here in this left part we have
06:28 - our recent project so the project that I
06:31 - have recently created and this may be
06:34 - empty if you haven't used your Visual
06:36 - Studio so on the other side they
06:39 - menu in multiple options you have the
06:43 - option to check out your code from
06:44 - github here you can open an existing
06:46 - project from your computer and continue
06:50 - working on that but the action that we
06:53 - are going to use is called create new
06:56 - project so we are going to click that so
07:00 - this new window now here appears and we
07:04 - are going to define what kind of project
07:06 - we want as beginners we are going to
07:08 - build a very simple app so we are going
07:11 - to build a C++ console application so
07:14 - you can type in C++ and make sure to
07:20 - select C++ console application so not
07:23 - c-sharp not Visual Basic but C++ then
07:28 - when you clicked it you can now click
07:31 - when you selected it you can now click
07:33 - Next so this new window now we get a new
07:41 - window where we have to define our
07:44 - project name location where our project
07:46 - is going to be saved and our solution
07:49 - name and the default our solution is
07:51 - named the same as our project what
07:54 - solution is is just actually a group of
07:56 - projects so if you had a huge
07:57 - application and you wanted to divide it
07:59 - in smaller parts so that it is easier to
08:02 - maintain you can divide it in multiple
08:04 - projects but all of those projects would
08:06 - be part of the same solution so as we
08:10 - are since we are building a simple app
08:12 - we have only one project and we will
08:15 - name it my first app so I my first app
08:21 - and location for our project we can
08:24 - either enter manually or we can do it by
08:27 - clicking this button here and I want my
08:32 - files to be saved on desktop so I'm
08:36 - going to select desktop and now we are
08:40 - done with with creating our project so
08:43 - with configuring our project so we can
08:45 - click create so
08:50 - the tool that we are going to use Visual
08:53 - Studio is an IDE or integrated
08:55 - development environment that means that
08:58 - it has a lot more options than just
09:00 - those that we as beginners are going to
09:03 - need and use so for now I'm going to
09:06 - explain only the most basic ones the
09:08 - ones that we are going to need as
09:10 - beginners but as we progress along the
09:13 - way I'm going to explain the new
09:15 - features that we'll use so the first
09:19 - thing that you can see here is our
09:22 - solution Explorer so if you cannot see
09:26 - your solution Explorer you can click
09:27 - here to this view and select solution
09:33 - Explorer and that should bring your
09:35 - solution Explorer back to view so as we
09:39 - said our solution Explorer is named my
09:42 - first app and it has one project inside
09:45 - it so this this project is this one here
09:48 - and as you can see when we created our
09:52 - project it was created with some default
09:55 - folders and files for now we are going
09:58 - to use only one file so you can delete
10:00 - these folders header files and resource
10:03 - files if you want just click right-click
10:06 - and click delete so now this source
10:12 - files folder is where we are going to
10:15 - put our source code files if you
10:17 - remember from before I have said that
10:20 - source code is the code that we write
10:23 - and that is understandable to us so this
10:26 - is our source code file so this with dot
10:30 - CPP extension so when we created our
10:33 - project this file was created by default
10:37 - and if you double-click it it opens here
10:41 - so this part here is nothing more than a
10:45 - than a text editor really as any text
10:48 - editor it just has these different
10:50 - colors depending on the purpose or the
10:54 - role of the code so that you can manage
10:57 - the code easier if it were all the same
10:59 - color it would be harder to to read so
11:02 - for example this green part
11:04 - here is a comment comment is just a note
11:07 - for yourself
11:09 - so compiler will not try to translate
11:14 - commented lines so if if you type for
11:18 - example here there's slash slash or that
11:26 - means actually begin comment and then
11:29 - you can explain for example what this
11:31 - proceeding code does so you can write
11:33 - this will output to the console hello
11:41 - world
11:43 - so this Wolper to the console hello
11:46 - world so that when you for example come
11:48 - tomorrow to this code and you have
11:50 - forgotten what this code here does this
11:53 - will remind you this comment here and
11:56 - these are some default comments which I
11:59 - will delete now we are not going to need
12:02 - this so just select everything and click
12:05 - delete as you would in any regular text
12:07 - editor
12:08 - this part here also now let's explain
12:13 - what we got here so this include
12:17 - iostream is actually a header file so it
12:21 - is also called a library and this
12:25 - iostream is input output stream so it
12:28 - allows us to input and output data to
12:32 - and from our program for example thanks
12:35 - to this we can use commands such as this
12:37 - here so see out for console output so
12:42 - without having this we would actually
12:45 - have to program ourselves how we will
12:48 - input and output data in our in our
12:52 - console so we will not delete this line
12:55 - here now check this code here it says
12:58 - main well that means that this is our
13:01 - main function so a main procedure that
13:04 - our program is going to execute so
13:07 - whenever whatever you put actually in
13:11 - the
13:12 - raises here your program will execute
13:15 - and the execution of your program begins
13:17 - here and it ends here so since this here
13:22 - is the the scope of your main function
13:25 - so you can collapse it by clicking here
13:27 - and you see that everything is collapsed
13:30 - now so for now it's enough for you to
13:33 - know that this is our main method on our
13:35 - main procedure and later in this course
13:37 - we are going to learn and understand
13:40 - what methods are used for what is their
13:43 - purpose and we are also going to create
13:45 - a lot of our own methods so now we have
13:51 - this C out or console output which is
13:55 - the command to output to the console and
13:58 - then we have also combined with this STD
14:04 - and these redirection signs so STD is
14:08 - the namespace for this C out so that's
14:12 - how your computer knows what the C out
14:14 - really is I will show you later how you
14:16 - can get rid of this if you really want
14:19 - and we also have this hello world in
14:23 - quotation marks okay let's see what we
14:27 - have learned so far
14:28 - we said that this is our solution inside
14:31 - it has one project and within that
14:34 - project we have this filed with with
14:37 - extension dot CPP which is our source
14:41 - code so if we double-click this file it
14:44 - brings us here so to this text editor
14:48 - and this is our program this is the code
14:51 - of our program now how we can run this
14:54 - code well see this green play button
14:58 - here well that's our start button it's
15:00 - really it's really intuitive so if I
15:05 - click it we will get our hello world
15:09 - text here which I have output it to the
15:12 - console and you can also see that we we
15:15 - have besides our hello world we have
15:17 - gotten some junk text here so what I'm
15:21 - going to do is show you how you can get
15:23 - rid of this
15:25 - in a moment so let's close our program
15:28 - for a moment and what you need to do in
15:32 - order to get rid of this junk text is
15:35 - type this command here so system pause
15:44 - greater than 0 in quotation marks and
15:47 - the end of command you notice that at
15:51 - each of at the end of each command you
15:55 - have to put this semicolon and if you
15:59 - didn't it would result in an compiler
16:01 - error and I will demonstrate that let's
16:04 - run our program now and you will see
16:07 - that our junk text has disappeared so as
16:11 - I said after each command you have to
16:13 - put this semi column and if you if you
16:17 - didn't do that it would create a
16:19 - syntactic error and that then your your
16:22 - compiler would not be able to understand
16:24 - and your program would not run actually
16:27 - your program would not start so if I
16:30 - delete this semi column here you see
16:34 - that something has changed in this rule
16:36 - in this window here so you see this R
16:39 - error error error red sign well if I
16:42 - hover over it you see is it here also
16:46 - here it says expected a semi column
16:51 - which is very clearly says that you are
16:55 - missing a semicolon and if you see this
16:58 - red underline here it says also expected
17:02 - a semi column so before this you are
17:05 - missing a semi column here so if I add
17:09 - it here if I added here our error will
17:14 - disappear so if you try to run your
17:16 - program before fixing this error it
17:19 - would prompt you with with a window like
17:23 - this so it says you have one failed
17:30 - project and zero succeeded project so
17:32 - this is the code building that I have
17:35 - mentioned before so this one project was
17:39 - which is actually the only project that
17:40 - we have has failed building so your
17:43 - compiler does not actually understand
17:45 - what you have written says you're
17:46 - missing a semi colon so another thing
17:49 - how you could know that you have syntax
17:52 - error except from this this prompt
17:55 - window that we got is this syntax error
17:59 - so missing semicolon before this close
18:01 - brace and if you click it here it will
18:05 - take you right where you need to go to
18:06 - fix your error so it's very useful and
18:12 - if I press my play button again it now
18:16 - says hello world so I will stop program
18:23 - now you can do it either by clicking
18:25 - this red sign here which says stop
18:27 - debugging or you can click this X on the
18:31 - console window so if some other error
18:34 - has happened to you which didn't happen
18:36 - to me here you can write that in the
18:38 - comments down below and I will gladly
18:40 - help you also someone else can help you
18:43 - from from the other people learning from
18:46 - this video and I would highly encourage
18:48 - that sense in my opinion the best way to
18:51 - learn something is to try to reproduce
18:54 - what you've learned and to explain it to
18:56 - someone else so write in the comments if
19:00 - you got some other error now let's see
19:03 - how we can upgrade our program so let's
19:05 - write something else let's add for
19:10 - example STD to column size console out
19:17 - so under quotation marks I will put
19:21 - something that I want to write out so
19:24 - let's say for example my name is Sal
19:28 - Dina you can put your name of course and
19:31 - at the end of each command you put
19:34 - semicolon and let's add one more so
19:40 - let's say today is Friday and also at
19:46 - end of command here so it should right
19:51 - when we run our program it should write
19:53 - these sentences in this order here so
19:55 - you can run your program and if you can
20:00 - notice it has this new line in the first
20:03 - sentence so this is because of this this
20:07 - backslash n so that puts whatever text
20:10 - is coming after in a new line so you can
20:14 - put that text in a new line by either
20:17 - entering a backslash n or with adding
20:20 - this STD end line so STD and line and I
20:30 - have previously stopped my program if I
20:33 - run it again you see that that we have
20:37 - gotten a new line here you see also that
20:40 - this STD here is becoming a bit tedious
20:45 - to write again and again and I've told
20:47 - you that I'm going to show you how you
20:48 - can get rid of this so what you can do
20:51 - is you can put this STD on a global
20:55 - level so you can say using using
20:59 - namespace STD using namespace STD and
21:03 - what will that do is reference this STD
21:07 - namespace on a global level so you don't
21:10 - have to reference it every time that you
21:13 - are using it and now we can delete all
21:16 - of these so whenever you have written an
21:19 - STD that's going to be referenced here
21:22 - now and you don't need it need to write
21:24 - it separately and if we run our program
21:27 - here we are going to get our result so
21:34 - we have also this new line I added by
21:37 - either /n or
21:40 - this end line here okay so in this video
21:46 - we have learned how we can output data
21:49 - in a console and in the next video we
21:52 - are going to see how we can input data
21:54 - into our console so we can ask user to
21:57 - input data and we are also going to talk
22:00 - about variables and data types another
22:04 - thing that I want to show you before I
22:05 - finish this video is you may be
22:09 - wondering okay do I have to start Visual
22:12 - Studio every time that I want to run my
22:13 - program is there any other way for me to
22:17 - execute my program and the answer is no
22:22 - you don't have to start Visual Studio
22:24 - every time there is another way to start
22:27 - your program for for went from windows
22:29 - so let's save all changes that we have
22:33 - made here so far so you can press ctrl +
22:36 - S or if you have made any changes you
22:40 - see this start here so it is indicating
22:44 - indicating that you have unsaved changes
22:46 - so you can right click on that and click
22:49 - save and you see that that star
22:53 - disappears now so let's find a folder
22:57 - where we have created our project for me
22:59 - that was desktop if you follow this
23:02 - tutorial from the beginning you created
23:04 - it also and if you follow me you created
23:06 - it also on desktop so you can open your
23:10 - folder you can go to debug and inside
23:16 - that you see this file here it says
23:19 - application so this is your program so
23:23 - if you right click on that and you check
23:29 - its properties you will see that it says
23:30 - dot exe that means that it is executable
23:35 - file so that is your program that is
23:37 - your application and if you double click
23:40 - on that well you see that it runs same
23:44 - as in Visual Studio so you can start
23:47 - your program from Windows actually if
23:49 - you want to show it to your friends or
23:51 - someone else you don't have to
23:53 - you don't have to open a visual studio
23:55 - each time that you want to run your
23:57 - program but one more thing to keep in
24:00 - mind is that if I go to visual studio
24:03 - now and I add one more line let's say
24:08 - let's say we write out have a nice day
24:14 - so and if I save it so ctrl s and if I
24:21 - try to open my program from Windows now
24:24 - what you'll see now is that this new
24:28 - line that I have just added is missing
24:30 - but why is that so you know well if you
24:35 - remember when we were talking about
24:36 - building code we said that that's the
24:40 - face of converting source code that you
24:42 - have written into a code that your
24:45 - machine understands and when you start
24:47 - your code from visual studio it does
24:49 - that process automatically for you so it
24:52 - builds your code and then it executes
24:54 - your or your program but when you are
24:57 - starting your program from Windows it is
25:00 - missing that phase of building code so
25:03 - your recent changes your last changes
25:07 - were not translated so your computer has
25:11 - only the only translated version that it
25:14 - has is the previous one so without your
25:17 - recently edit changes what you need to
25:19 - do is you either have to run your code
25:23 - from Visual Studio first or it's enough
25:25 - for you just to build that code inside
25:27 - Visual Studio and what happens when you
25:31 - do that so just click here and you can
25:38 - click build and what happens is your
25:43 - visual studio translates this code that
25:45 - you have written and it saves it here
25:50 - and now when you run it and when your
25:52 - windows runs it has the latest version
25:56 - it has the latest changes so this is the
26:00 - small trick that I wanted to show you
26:05 - so this will be all for this video and
26:09 - if you create came across to some errors
26:12 - that didn't happen here to me or you
26:14 - have any questions you can write those
26:16 - in the comments and I will I will answer
26:20 - those and if you watched so far you can
26:23 - like this video you can subscribe and
26:25 - share it with someone else who would
26:26 - also like to learn programming and I
26:29 - will see you in the next video