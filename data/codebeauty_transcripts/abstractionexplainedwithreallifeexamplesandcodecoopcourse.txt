00:00 - hi everyone and welcome to my channel in
00:02 - this video i want to talk about very
00:04 - important object-oriented programming
00:06 - concept which is abstraction so in this
00:09 - video i am going to explain what is
00:11 - abstraction and then i am also going to
00:13 - show you how you can implement and use
00:16 - abstraction in c plus plus programming
00:18 - language but before i continue with this
00:20 - video i would like to take a brief
00:22 - moment to introduce c plus builder
00:26 - it is full featured c plus plus ide that
00:29 - helps you create apps fast for all major
00:31 - platforms while writing less code it
00:34 - connects natively to almost 20 databases
00:36 - like mariadb oracle sql server postgres
00:40 - and many more the key value is c
00:43 - builders framework
00:44 - which are powerful libraries that do
00:46 - more than other c plus tools this
00:49 - includes the award-winning vcl framework
00:51 - for high-performance native windows apps
00:54 - and fire monkey framework for
00:56 - cross-platform uis smart developers
00:58 - write better code faster and you can
01:00 - start for free using the link in the
01:03 - description
01:05 - so in programming obstruction means
01:08 - showing and displaying the important
01:10 - information while hiding the unimportant
01:13 - and complex details
01:15 - now the best way for you to understand
01:17 - how abstraction works is using a real
01:19 - life example
01:21 - so imagine for example how a coffee
01:24 - machine works the only thing that you
01:26 - need to know in order to be able to use
01:28 - a coffee machine is that you put inside
01:31 - coffee and water and you press a button
01:34 - and that is how you make a coffee now
01:37 - that process internally is very complex
01:40 - so the way that internal components of
01:42 - that coffee machine work together in
01:44 - order to prepare that coffee that is
01:46 - very complex but you don't need to
01:49 - understand that that process is
01:51 - abstracted for you and it is hidden
01:54 - behind simple procedure which is put in
01:57 - coffee put in water and press a button
02:00 - and that abstraction makes it very easy
02:02 - for you to use a coffee machine and that
02:05 - same thing happens with the code so when
02:07 - developers write the code they should
02:10 - try to write it in a way which makes it
02:12 - very easy for other developers to use
02:16 - and in order to achieve this in
02:18 - programming we use abstraction so we
02:21 - hide complex details behind simple
02:24 - procedures
02:26 - another idea is that the things that are
02:28 - abstracted don't change very often or at
02:32 - least they don't seem to change for the
02:34 - end user what this means is that you can
02:37 - change the entire implementation which
02:39 - means you can change that complex logic
02:42 - that is in the background as long as you
02:44 - don't change the interface towards the
02:46 - user so as long as you don't change that
02:49 - abstracted level nothing has changed for
02:52 - your end user so imagine the following
02:55 - situation
02:56 - let's say that a new company figures out
02:59 - a better way to make coffee machines so
03:02 - that those coffee machines
03:04 - spend less energy they make coffee
03:06 - faster and they are less noisy so what
03:09 - they need to do is they need to
03:11 - implement very complex logic they need
03:14 - to change the way that these inner
03:16 - components of a coffee machine work
03:18 - together in order to make coffee faster
03:20 - in order to
03:21 - make that machine less noisy and in
03:23 - order to spend less energy they need to
03:26 - change that internal logic but as long
03:29 - as the interface towards the user stays
03:31 - the same so as long as our user needs to
03:33 - put in coffee and water and press the
03:36 - button nothing has changed for the user
03:39 - so he does not need to learn the new way
03:42 - to use that new machine he uses it the
03:44 - same way that he used the previous one
03:47 - even though this new machine is better
03:49 - so it is less noisy it is cheaper and it
03:52 - makes coffee faster now once a certain
03:55 - behavior is abstracted to the point
03:57 - where it is very easy to use for the end
04:00 - user
04:01 - then the obstruction becomes a standard
04:04 - which means that then users expect to
04:06 - press a button and make a coffee or to
04:09 - press a button and take a selfie or to
04:12 - push gas pedal and make their car go
04:15 - faster even though all of these
04:17 - processes all of these procedures are
04:19 - much more complex our end user does not
04:22 - need to know anything about that
04:24 - complexity
04:26 - so once we have this standard then if a
04:29 - new company appears and that company
04:32 - wants to make smartphones for example
04:34 - that company knows that hey there is
04:37 - this standard there is this contract
04:39 - that says that if a user presses this
04:41 - button that means that he wants to take
04:44 - a selfie so now it will be up to that
04:46 - company to make and implement that
04:49 - complex logic of taking a selfie and
04:52 - then to hide it from the end user so
04:54 - that the only thing that the end user
04:56 - knows is press a button take a selfie
04:59 - because if they make it so that the user
05:02 - needs to press three buttons in order to
05:04 - make one selfie then no one will want to
05:06 - use their smartphone so the same way
05:08 - that you can in real life create this
05:11 - abstraction layer which hides all of the
05:14 - complex details in the background and
05:16 - then displays only the important
05:18 - information you can do the same in
05:21 - programming so i as a programmer if i
05:25 - create a class that implements a lot of
05:27 - different functionalities which are very
05:29 - complex and then other developers wants
05:31 - to use those functionalities what i can
05:34 - do is i can say hey i am going to
05:36 - provide you with this abstraction layer
05:38 - and that abstraction layer will hide all
05:41 - of this complexity in the background and
05:43 - then i am going to show you only the
05:45 - important information so only the
05:47 - functionalities that you can use inside
05:50 - that class and you don't really need to
05:52 - know how those functionalities are
05:54 - implemented in the background so you
05:56 - don't need to know anything about that
05:58 - complex logic but here is only a simple
06:01 - interface that you can use in order to
06:03 - access those functionalities so in order
06:06 - to implement this abstraction layer in c
06:10 - plus we use abstract classes and an
06:13 - abstract class in c plus is a class that
06:16 - has at least one pure virtual function
06:20 - now if you're not familiar with abstract
06:22 - classes and pure virtual functions i am
06:25 - going to link a video here and then i
06:26 - will put it also in the description so
06:28 - make sure to watch that video first
06:31 - because it will help you to understand
06:32 - what i am talking about better so what i
06:35 - want to do now is i want to create an
06:38 - abstract class which will be called
06:40 - smartphone and that abstract class will
06:43 - represent this contract which means that
06:46 - inside that abstract class
06:48 - i will declare important functionalities
06:51 - that all smartphones need to have so
06:54 - let's jump inside our visual studio and
06:56 - let's do that so let's create a class
06:58 - called smartphone i will say class
07:02 - and then smartphone
07:06 - like this and what i want to do inside
07:09 - this class is i want to declare one
07:11 - public functionality which will be
07:13 - called take a selfie so public
07:18 - and then
07:19 - void
07:20 - take
07:21 - a
07:22 - selfie
07:24 - like this
07:25 - now in order to make this class here an
07:28 - abstract class what we need to do is we
07:30 - need to have at least one pure virtual
07:33 - function inside that class so we will
07:36 - make this function here a pure virtual
07:39 - function again if you are not familiar
07:41 - with virtual functions pure virtual
07:43 - functions and abstract classes i will
07:46 - link a video in the description so make
07:47 - sure to watch that video and then come
07:49 - back to this video
07:51 - so
07:51 - in order to make this function a pure
07:54 - virtual function first of all you add
07:57 - virtual
07:58 - keyword here and then you say that it is
08:02 - equal to zero
08:04 - like this so by doing this
08:07 - this class here has become an abstract
08:10 - class and that means the following first
08:13 - of all we cannot create instances of
08:16 - abstract classes but we can create
08:19 - pointers of abstract classes and then
08:22 - this function here
08:24 - this take a selfie function
08:26 - will not be implemented inside this
08:28 - smartphone class so smartphone class
08:31 - will not provide the implementation for
08:33 - this function here
08:35 - but whoever decides to inherit from this
08:39 - smartphone class will need to provide
08:41 - their own implementation of this
08:43 - function here so now our smartphone has
08:46 - become this abstracted layer now our
08:49 - smartphone class is this interface which
08:52 - says here are all of the important
08:55 - functionalities that smartphones need to
08:57 - have so whoever wants to use a
09:00 - smartphone here are all of the
09:01 - functionalities that you can use without
09:04 - knowing the logic of how those
09:06 - functionalities are implemented
09:08 - and then whoever wants to make a
09:10 - smartphone you need to implement this
09:13 - complex logic for all of these
09:16 - functionalities here
09:18 - so
09:19 - now what i want to do is i want to
09:21 - create a specific type of smartphone so
09:24 - i want to create android smartphone for
09:26 - example so that means that i will create
09:28 - a class called android so let's do that
09:32 - let's say
09:34 - class
09:35 - android
09:38 - like this
09:39 - and what i want to do for this class
09:41 - here is i want to say that it signs this
09:45 - contract called smartphone so how do we
09:47 - do that well it's very simple you just
09:50 - inherit from this class here so let's do
09:53 - that
09:54 - let's say inherits
09:56 - publicly from a class called smartphone
10:00 - let me copy this
10:02 - okay so by doing this by signing this
10:06 - smartphone contract what we have said is
10:08 - that we will implement
10:10 - all of the functionalities that this
10:12 - contract here implies and that is only
10:15 - one functionality called take a selfie
10:18 - because if we don't do that we will not
10:21 - be able to use objects of type android
10:24 - so let's demonstrate that first let's
10:26 - create a smartphone pointer
10:30 - and let's call it s1 so smartphone one
10:34 - and i will say that it is equal to
10:37 - new
10:38 - android
10:40 - okay
10:41 - and we are able to do this so we are
10:44 - able to make a base class pointer point
10:47 - to derived class because this android is
10:51 - a smartphone because it inherits from a
10:54 - smartphone class so android is a
10:56 - smartphone and because of that we can
10:58 - use a base class pointer in order to
11:02 - point to an object of derived class but
11:06 - we have a problem here which says that
11:09 - object of abstract class type called
11:11 - android is not allowed and the reason
11:14 - for that is
11:15 - because pure virtual function called
11:18 - take a selfie has no overrider which
11:22 - means that we are not obeying the rules
11:25 - of this contract here which says that
11:27 - whoever signs this contract will have to
11:30 - provide the implementation for this
11:33 - function here and our android class is
11:36 - not doing that so now we are not able to
11:39 - do this unless we implement this
11:42 - functionality here so let's do that
11:45 - let's say
11:46 - public
11:48 - okay
11:49 - and what i want to do is i want to
11:52 - implement a function called take a
11:54 - selfie
11:56 - like this so this take a selfie function
11:59 - will have very complex logic and very
12:02 - complex implementation in real life but
12:04 - for demonstration purposes i will just
12:06 - write out that android took a selfie so
12:09 - i will say c out and then let's say
12:13 - android
12:15 - like this and then let's say
12:17 - selfie
12:19 - okay
12:21 - so let's say that this is the
12:23 - implementation of take a selfie function
12:27 - so now as you can see the error has
12:29 - disappeared and what i can do now is i
12:32 - can say smartphone1 so s1 and then take
12:36 - a selfie
12:38 - like this and keep in mind that we use
12:41 - this symbol here instead of dot when we
12:44 - want to access members of a class when
12:48 - this object here is a pointer and in
12:51 - this situation this here is a pointer so
12:53 - in order to access the objects of its
12:56 - class we use this symbol here instead of
13:00 - a dot
13:01 - okay so if i run this program let's see
13:04 - what will happen
13:07 - okay um i believe that this is too small
13:10 - for you to read so let me fix that this
13:13 - is readable now and it says android
13:16 - selfie
13:17 - so let's close the console and let's do
13:19 - another thing let's say for example that
13:21 - another company wants to make their own
13:24 - smartphone so let's create an iphone for
13:26 - example
13:27 - in order to do that i will create a
13:29 - class called iphone
13:36 - like this and this iphone class will
13:39 - also have to sign this contract here so
13:43 - it will have to inherit
13:46 - publicly
13:47 - okay
13:49 - public
13:50 - from this smartphone class
13:54 - like this which means that it will have
13:56 - to provide its own implementation for
13:59 - this pure virtual function so let's copy
14:03 - this code here and then we are going to
14:05 - change the implementation i will say
14:08 - that inside iphone class take a selfie
14:11 - means that
14:12 - iphone is taking a selfie of course this
14:15 - is going to be a very complex logic in
14:17 - real life this is just for demonstration
14:20 - purposes
14:21 - but
14:21 - one thing that i have achieved with this
14:24 - is that for my end user so for someone
14:27 - who wants to use a smartphone he does
14:29 - not need to know anything about how
14:32 - android takes a selfie or how iphone
14:35 - takes a selfie the only thing that is
14:38 - going to change if he wants to use an
14:41 - iphone instead of an android is this
14:45 - part of the code here so now we are just
14:47 - going to say
14:49 - that our smartphone called s1 will be
14:52 - equal to new
14:54 - iphone like this so now if i run this
14:58 - code
14:59 - as you can see everything works as it
15:01 - should but this second implementation is
15:05 - invoked okay so it says iphone selfie
15:09 - so let's close this now another thing
15:11 - that we have achieved with this is the
15:13 - following and this is the true
15:15 - importance of abstraction so
15:18 - now the developer that works on this
15:20 - android class does not need to know
15:23 - anything about this iphone class the
15:26 - only thing that this developer here so
15:29 - android developer needs to know is that
15:32 - he needs to provide the implementation
15:34 - of this function here
15:36 - for android okay and then our iphone
15:40 - developer does not need to know anything
15:43 - about how this android class works but
15:46 - the only thing that he needs to know is
15:48 - how
15:49 - iphone takes a selfie so the only thing
15:52 - that he needs to implement is this logic
15:55 - here and then for our third developer
15:57 - that works on this code here he does not
16:01 - need to know how android takes a selfie
16:04 - so this part is hidden this complexity
16:07 - is hidden and then also he does not need
16:09 - to know how iphone takes a selfie this
16:12 - complexity is also hidden the only thing
16:15 - that he needs to know is this
16:17 - abstraction here so he only knows that
16:20 - if he wants to use a smartphone he can
16:23 - take a selfie and someone else is going
16:26 - to provide that complex logic of how
16:29 - selfie is taken so he can use this
16:33 - functionality here without worrying
16:36 - about the complex details of how that
16:39 - functionality is implemented so let's
16:42 - say for example that we receive a new
16:44 - request that says that every smartphone
16:47 - will need to have the functionality to
16:49 - make a call so what that means for this
16:53 - contract here is that we will need to
16:55 - add another rule to this contract so we
16:58 - will need to add another pure virtual
17:01 - function to this contract here so i am
17:04 - going to copy this pure virtual function
17:07 - and i will just rename it so that it is
17:10 - called
17:11 - make a
17:13 - call
17:14 - for example
17:15 - okay
17:16 - and then what this here means for our
17:19 - android developer is that android
17:21 - developer will need to provide the
17:23 - implementation of making call
17:26 - for android devices so let's do that i
17:30 - am going to copy this function here and
17:33 - then i will change the name so that it
17:36 - is called make a call and the
17:39 - implementation of that function will be
17:41 - for example android
17:43 - calling
17:45 - like this
17:46 - so this here is going to be the job of
17:48 - our android developer so of developer
17:51 - who works on this class here and he will
17:54 - not need to worry about anything else
17:57 - except the implementation of this
17:59 - function here so let's close that and
18:03 - then the job of our iphone developer
18:06 - will be to provide the implementation of
18:09 - this function for iphone devices so
18:12 - let's do that now i am going to copy
18:15 - this function again
18:17 - and i will call it
18:20 - make a call and then the implementation
18:23 - for make a call inside iphone class will
18:26 - be iphone
18:28 - calling
18:30 - like this for example and then again our
18:33 - iphone developer so developer who works
18:36 - on this class here will only have to
18:38 - worry about the implementation of this
18:41 - function so he does not need to know how
18:44 - android is going to implement the same
18:46 - functionality nor how the users are
18:48 - going to use this functionality here so
18:52 - again i am going to hide this complexity
18:55 - and then our third developer who works
18:58 - on this code here knows that the
19:01 - contract has changed so now every
19:04 - smartphone has this functionality here
19:07 - as well
19:08 - and the developer who works on this part
19:11 - of the code here does not need to know
19:13 - how this functionality is implemented
19:15 - inside this class nor this class he only
19:19 - knows that now every smartphone can make
19:23 - a call so what he can do is he can say
19:26 - smartphone1 dot make a call
19:30 - like this and everything should work as
19:32 - expected so if i run my program now
19:37 - okay as you can see it says that iphone
19:39 - is calling
19:41 - okay
19:42 - so what we have achieved by using
19:44 - abstraction is that now we have this
19:47 - contract here called smartphone and this
19:50 - contract represents an abstract layer
19:53 - which says the following hey all the
19:56 - developers who want to use a smartphone
19:59 - here is a list of all the
20:01 - functionalities that smartphones have
20:03 - and you can use those functionalities
20:05 - without knowing the specific details on
20:08 - how those functionalities are
20:10 - implemented and then for all the
20:13 - developers who want to make their own
20:14 - smartphone you will have to provide the
20:17 - implementation for all these
20:19 - functionalities here and that
20:21 - implementation will be hidden in the
20:23 - background so that whoever wants to use
20:26 - a smartphone does not need to know
20:28 - anything about those complex details
20:31 - which are hidden
20:33 - so now android developer only works with
20:36 - his part of the code and then iphone
20:38 - developer only works with his part of
20:40 - the code and then whoever wants to use
20:43 - this smartphone does not need to know
20:46 - anything about android implementation
20:48 - nor iphone implementation he only needs
20:51 - to know about this contract here
20:54 - so i hope that this video helped you to
20:56 - understand the idea of abstraction which
20:59 - is the idea of hiding complex details
21:03 - behind simple procedures so you make a
21:06 - class and then you provide an interface
21:09 - so that whoever wants to use your class
21:12 - does not need to know anything about
21:14 - complex details of how certain
21:17 - functionalities inside that class are
21:19 - implemented but he has a very simple
21:22 - interface which says hey here are all
21:25 - the functionalities that you can use and
21:27 - here is a simple way for you to use
21:30 - those functionalities
21:32 - okay
21:33 - so again if this video was helpful
21:35 - please give it a thumbs up because that
21:37 - helps me a lot to reach more people and
21:40 - if you would like to see more videos
21:41 - like this one in the future subscribe to
21:43 - my channel and click the bell icon and
21:46 - you will get a notification from me
21:48 - every time that i publish a new video
21:50 - and then also if you have any questions
21:52 - or any topics that you would like to see
21:54 - in the future feel free to leave those
21:56 - in the comment section and i will make
21:58 - those videos in the future
22:00 - so thank you very much for watching and
22:02 - i am going to see you in some other
22:04 - video bye