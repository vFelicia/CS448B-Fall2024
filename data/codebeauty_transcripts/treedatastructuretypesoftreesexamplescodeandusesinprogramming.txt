00:00 - hi guys and welcome to my channel in
00:02 - this video you will learn about tree
00:04 - data structure so you are probably using
00:07 - and seeing tree data structure every day
00:08 - without even recognizing it so in this
00:11 - video you will learn what it is when it
00:13 - is used in programming i will show you
00:15 - real life examples and purposes of true
00:18 - data structures in programming and teach
00:20 - you all the important concepts that is
00:22 - in the first part of the video and then
00:24 - in the second part of the video i will
00:26 - show you the code so let's return to
00:28 - tree data structures and as you already
00:31 - know all programming concepts were drawn
00:34 - from real life so let me show you where
00:36 - tree data structure is used in real life
00:39 - so here i have a picture from children's
00:42 - book and it is a picture of family tree
00:44 - we have grandparents parents and then
00:47 - kids and when these kids grow up and get
00:50 - married and have their own kids this
00:52 - tree will grow even more so this is a
00:54 - perfect example of hierarchy of
00:57 - parent-child relationship and that is
01:00 - exactly what tree data structure is used
01:03 - for it is used to represent that
01:06 - hierarchy so what is an example of this
01:09 - in programming well a perfect example is
01:12 - the way that you structure and organize
01:14 - folders in your computer
01:16 - so
01:18 - for example here i have a folder called
01:20 - menu that is root folder and then inside
01:23 - it i have drinks and food so if i open
01:26 - this food folder we get more subfolders
01:29 - which are children of food folder so
01:32 - desserts pasta pizza snacks and then
01:35 - let's open desserts for example and as
01:38 - you can see we get more folders
01:40 - cheesecake chocolate cake fruit cake and
01:42 - so on so why are we doing this well
01:45 - there are multiple reasons but the main
01:47 - one is that you can organize your data
01:50 - better this way and it is easier to
01:52 - search later so it is easier to find a
01:55 - specific recipe or a picture of a food
01:57 - or whatever you want to store inside
02:00 - these folders so this is very common use
02:03 - of trees in programming and in computers
02:06 - so your operating system uses tree data
02:08 - structure in order to organize files and
02:11 - folders in your file system in your
02:13 - computer
02:14 - um and that they are also used in
02:16 - databases and the most common use that i
02:19 - have seen of tree data structure in
02:21 - programming is for different searching
02:24 - and sorting algorithms and we will learn
02:26 - about these later after you learn all of
02:29 - the basics so let's see what are some
02:32 - other basic things that you should know
02:34 - about trees so a singular entity of a
02:37 - tree is called node it is basically a
02:40 - building block of a tree so let's say
02:43 - that this is a node and then multiple
02:46 - nodes build a tree data structure so
02:51 - if i do this
02:53 - this here becomes a tree data structure
02:56 - so this is parent node these are child
02:59 - nodes and then these lines that connect
03:02 - the parent with the child are called
03:04 - edges and this here is a tree data
03:07 - structure now something that is not
03:10 - allowed in tree data structure is for
03:13 - the children to be interconnected like
03:16 - this so this is not allowed because this
03:18 - would be incest
03:21 - actually that is not the reason the
03:24 - reason is that this here is not tree
03:27 - data structure anymore this is something
03:29 - else completely and if you know how this
03:32 - structure is called let me know in the
03:35 - comments and then if you don't know how
03:37 - this structure is called
03:38 - check the comments
03:40 - and um i might answer to your comment if
03:43 - you ask me and if you really cannot find
03:45 - the information on the internet
03:47 - so again this here is not allowed
03:50 - for three data structures the children
03:52 - cannot be interconnected and then these
03:55 - children can have their own children so
03:58 - what you can do is you can add
04:01 - a note here and then let's say
04:03 - two
04:04 - child nodes here
04:07 - like this and again this is tree data
04:11 - structure and inside these nodes you can
04:13 - store any data that you need you can
04:15 - store numbers or strings or books food
04:18 - recipes anything that you want so what
04:20 - are some other concepts that you should
04:22 - be familiar with well
04:25 - this here this first node is called
04:29 - root node so a root node is a node that
04:32 - does not have a parent and it is this
04:35 - node here and then another concept that
04:38 - you should be familiar with is a leaf
04:40 - node so can you guess what is a leaf
04:42 - node
04:43 - so this is a leaf node and then this is
04:46 - a leaf node and this is a leaf node as
04:48 - well so a leaf node is a node that does
04:51 - not have any children and in any tree
04:55 - data structure you can have multiple
04:57 - leaf nodes but only one root node so now
05:00 - that you understand the basic
05:01 - terminology let's talk about different
05:03 - types of trees so the first one is a
05:06 - regular tree and it can look
05:09 - like this for example so it has a
05:12 - parent-child relationship and it has a
05:14 - fluctuating amount of children in this
05:17 - situation it has three but it can have
05:19 - more or less than that so this is a
05:23 - regular tree another type of tree is
05:25 - binary tree and here is an example of
05:29 - binary tree so what does that mean
05:32 - well
05:33 - like a regular tree it also defines a
05:35 - parent-child relationship but there is
05:38 - one more rule and that is that each
05:40 - parent cannot have more than two child
05:43 - nodes so it can have zero or one or two
05:47 - child nodes and not more than that so
05:50 - here we have a root node it has two
05:52 - child nodes and then this left child
05:55 - node has
05:56 - one child node and the right node has
05:58 - two child nodes and then these are leaf
06:01 - nodes and they don't have any child
06:03 - nodes so now that you know what a binary
06:05 - tree is let's explain what is a binary
06:09 - search tree also known as bst and
06:13 - because i'm very lazy person i'll just
06:15 - call it
06:16 - best okay
06:18 - so a bust is exactly the same as binary
06:21 - tree except that its data is organized
06:24 - in a very specific way so the values of
06:28 - nodes are organized in a specific way so
06:31 - here is an example of a best
06:36 - please don't call it best
06:38 - why am i doing this to myself
06:40 - so let's say that the root note has the
06:42 - value of 30. so the rule is that its
06:45 - left child should have the value that is
06:48 - lower than that and then its right child
06:50 - should have the value that is higher
06:53 - than that and then the same rule applies
06:56 - here so the left child should have a
06:58 - lower value than its parent and then the
07:01 - right child should have the value that
07:03 - is higher than its parent and then here
07:05 - again but since we have only the left
07:07 - child that left child should have the
07:09 - value that is lower than its parent okay
07:13 - so this is an example of binary search
07:15 - tree and an important thing that i want
07:17 - to mention is that these
07:19 - boosts are used to facilitate the search
07:22 - of elements as the name itself implies
07:25 - so binary search tree
07:28 - so now that you understand all of this
07:30 - let's jump to coding part and the first
07:33 - thing that i want to do is i want to
07:35 - represent a single node in code so i
07:38 - want to represent a building block of
07:40 - tree data structure and as you could
07:42 - already see each node consists of three
07:45 - parts so each node has
07:48 - data that is number one and then number
07:50 - two is left child pointer and then third
07:54 - part is right child pointer so how can
07:57 - we represent this node in code well it's
08:00 - actually pretty easy
08:02 - so i will say
08:04 - struct
08:05 - node
08:08 - like this
08:09 - and i will create these three parts of
08:11 - each node so i will say int
08:14 - data
08:15 - like this so we are creating a binary
08:18 - tree whose nodes are storing integer
08:20 - data type
08:22 - okay and then the second part is
08:24 - node pointer called
08:27 - left this is left child and then node
08:30 - pointer called right and this is right
08:33 - child now let's see how we can create a
08:35 - new node so i will add a function here
08:39 - that returns a node pointer i will call
08:42 - it
08:43 - create
08:44 - node
08:45 - like this
08:46 - and this function will receive an
08:48 - integer parameter called
08:51 - data
08:52 - like this
08:53 - so the job of this function will be to
08:56 - create a new node and to return the
08:58 - reference to that node so that if we
09:00 - want to add left or right child to that
09:03 - node we have that reference
09:06 - so there will be four steps inside this
09:09 - function
09:10 - step number one will be to create a new
09:12 - node
09:13 - step number two is to set the data for
09:16 - that node and then step number three is
09:20 - to take care of left and right child
09:23 - nodes which will initially be null
09:26 - because we don't have child nodes when
09:28 - we create the parent node and then step
09:30 - number four and i cannot draw it but
09:33 - please keep in mind that
09:35 - from this function here we need to
09:36 - return a reference to the node that we
09:40 - added in case that we want to add its
09:42 - children later we need to have a
09:44 - reference to that node
09:46 - so let's now translate this in code so
09:49 - step number one we create a new node
09:53 - like this and then we set
09:56 - the value for that node like this
10:00 - and then we say
10:01 - new node its left child will be equal to
10:04 - new node
10:06 - right child and that will be equal to
10:09 - now ptr because because initially when
10:12 - we create a new node it doesn't have
10:15 - left or right child and then fourth and
10:18 - final step is to say
10:20 - return new node so that we have a
10:23 - reference to the node that we just added
10:25 - outside of this function so whoever
10:27 - invokes this function will receive a
10:30 - reference to newly added node so now
10:33 - that you know how a node looks like in c
10:36 - plus code and also how you can create a
10:38 - new node let's see how we can represent
10:41 - a tree data structure in c plus code so
10:45 - let's represent
10:47 - a tree that looks like this
10:50 - so the first thing that i will do in
10:51 - order to represent this tree in c plus
10:54 - code is i will create a root node so i
10:57 - will say node pointer called
11:00 - root and i will invoke this function
11:04 - here that we just created so i will say
11:06 - create node
11:09 - and here i will pass
11:11 - the value of the root node and this
11:13 - picture here says that it is the value
11:16 - of one so with this we created a root
11:19 - node now the question is how can we add
11:22 - left and right child to this root node
11:25 - let me know in the comments if you have
11:27 - any idea before i answer this question
11:30 - okay so
11:31 - in order to add this left child number
11:34 - two we need to say
11:37 - root
11:39 - left
11:41 - and then again we invoke this same
11:44 - function called create node but this
11:47 - time we will pass the value of
11:49 - two okay it's pretty easy and then in
11:52 - order to add this right child we say
11:55 - root right and then create node and we
11:59 - pass the value for that node and then in
12:01 - order to add this node here we need to
12:04 - say
12:05 - root
12:06 - left
12:07 - left
12:09 - okay so i will say
12:10 - root
12:12 - left
12:13 - and then left again will be equal to
12:17 - create
12:18 - node and then the value for that node
12:22 - and with this code we have represented
12:24 - this tree data structure
12:27 - and let's do another tree but this time
12:30 - a bigger one so let me paint it and i
12:32 - will put it on the screen together with
12:34 - the code so here is the tree it has nine
12:37 - elements and i divided it in four levels
12:40 - so that you can understand better
12:42 - and then here is the code for that tree
12:46 - so for example if you want to add this
12:49 - element here you would go
12:51 - root
12:52 - left right
12:54 - left and there is number nine so let's
12:57 - check
12:57 - root left right left and then number
13:02 - nine
13:02 - okay
13:04 - and then if you want for example to add
13:06 - this element here you would go
13:08 - root
13:09 - right right left and there is 15. so
13:14 - root right
13:16 - right left and there is node 15. and now
13:20 - you can pause the video and analyze this
13:23 - tree and compare it with the code so
13:25 - that you can get a better understanding
13:27 - so that would be all for this video it
13:29 - is already becoming too long and i know
13:32 - that it is hard for you to focus for a
13:34 - long period of time the same way that it
13:36 - is harder for me to film a very long
13:38 - video in one sitting so we will continue
13:41 - in the next video and talk about
13:43 - um different algorithms traversing the
13:46 - tree and searching the tree
13:48 - so make sure to watch that video it will
13:50 - be linked on the screen and if you want
13:53 - homework and to practice after this
13:55 - video the best would be for you to find
13:57 - a study partner so you would draw a tree
14:00 - for him or her and vice versa and then
14:02 - both of you would translate that tree
14:04 - into c plus code so share this video
14:07 - with someone who needs to learn about
14:09 - data structures and with someone who can
14:11 - benefit from it
14:13 - so thank you very much for watching and
14:15 - i will see you in the next video and um
14:18 - by the way i will pin the code from this
14:20 - video in the comments in case that you
14:21 - need to use it
14:23 - bye