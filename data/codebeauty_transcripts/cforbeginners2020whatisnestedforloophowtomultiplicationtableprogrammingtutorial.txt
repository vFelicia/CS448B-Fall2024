00:00 - hi everyone welcome to my channel
00:02 - welcome to another video of C++ for
00:04 - beginners in this video I want to talk
00:07 - about nesting for loops so I want to
00:10 - show you how you can solve more complex
00:12 - problems using nested for loop but
00:15 - before we start please subscribe to my
00:17 - channel and click the bell icon as well
00:20 - and also like this video so this example
00:24 - that we are going to do today is going
00:26 - to be really multiplications table so
00:29 - I'm going to show you the example that I
00:32 - want to program so that would be this
00:35 - here and if you look at this
00:38 - multiplication table that we want to
00:40 - make you can really start to notice a
00:42 - pattern and what pattern I mean you see
00:46 - here this this first operand in this
00:49 - first part of my multiplication table so
00:52 - in this first table as you can see this
00:54 - first operand is 1 and it stays 1 in
00:58 - this table here after that you can look
01:01 - at this second table you see that this
01:03 - operand is now 2 and then in my third
01:06 - table it has increased at 3 4 5 and it
01:12 - really increases so it increments by 1
01:14 - and it goes up to 10 ok so that is the
01:19 - first operand so this first part of my
01:21 - multiplication after that we can look at
01:24 - this second operand and you can really
01:26 - notice that it increases in each
01:29 - iteration by 1 so it goes 1 2 3 4 5 up
01:34 - to 10 and then it does the same thing in
01:37 - this second table so it goes from 1 to
01:41 - 10 again and then the same in my third
01:44 - table fourth fifth and it really behaves
01:47 - the same in this tenth table as well so
01:50 - that is the pattern that I want you to
01:53 - notice so this first operand can be
01:56 - really represented using one for loop so
02:00 - let's say that that is going to be outer
02:02 - for loop and it is going to increase
02:05 - each time that my second operand counts
02:10 - from 1 to 10 and that second operand we
02:13 - can really
02:13 - present using another for loop which is
02:16 - going to be really inner for a loop so
02:18 - the program the algorithm for solving
02:21 - this problem is going to go like this
02:23 - you have outer for loop which is going
02:25 - to count from 1 2 3 4 up to 10 so it is
02:30 - going to count from 1 to 10 and then you
02:32 - are going to have inner for loop which
02:35 - is also going to count from 1 to 10 but
02:38 - for each value of my counter of my outer
02:41 - loop okay so that means that my outer
02:45 - loop counter changes only after my inner
02:48 - loop has counted from 1 to 10 so let's
02:52 - copy the text of our task here I'm going
02:55 - to say multiplication table and let's
02:57 - comment the text out so as we said in
03:01 - order to solve this problem we are going
03:03 - to use nested for loops so I'm going to
03:07 - add empty space here and then the first
03:10 - thing that I need is going to be my
03:11 - outer loop so I'm going to really set up
03:14 - my outer loop I'm going to say for and
03:17 - then we need to declare a counter which
03:20 - I'm going to call I so I'm going to say
03:23 - int I is equal to and then since our
03:26 - outer let me show you this image one
03:29 - more time since it goes from 1 to 10 I'm
03:32 - really going to set its initial value to
03:35 - 1 so I'm going to say I is equal to 1
03:38 - and that I'm going to write the
03:40 - condition so how long this for loop is
03:43 - going to run and that is going to be a
03:46 - while this I is less than or equal to 10
03:51 - like this and then each iteration it is
03:54 - going to increase by 1 so that is going
03:57 - to be I plus plus okay and then I'm
04:00 - going to put this block of code here
04:02 - that is going to be executed in each
04:04 - iteration of this for loop so what we
04:08 - need to do in each iteration of our for
04:11 - loop let's look at our image one more
04:13 - time and as you can see it really says
04:16 - that in each iteration of this outer for
04:19 - loop you need to count from 1 to 10 so
04:23 - in this situation here some other
04:25 - counter really counts from 1
04:27 - to ten and then new iteration so our
04:30 - eyes now two and then counter counts
04:32 - again from one to ten and then three but
04:36 - also we have this inner counter that
04:38 - counts from one to ten okay so let's
04:42 - really write that code so that inner
04:45 - counter that counts from one to ten for
04:47 - each value of our I we are going to
04:49 - represent with another for loop and that
04:52 - is going to be really that nested or
04:54 - that inner for loop so I'm going to
04:56 - write four and that inner counter I'm
05:00 - going to call J so I'm going to write
05:03 - int J and since our J also counts from 1
05:08 - to 10 I'm going to set its initial value
05:10 - to 1 and I'm also going to say please
05:16 - iterate through this for a loop
05:18 - while our J is less than or equal to 10
05:22 - as well and then in each iteration
05:24 - please increase the value of j by 1 so
05:28 - do this increment operation and then in
05:30 - each iteration of our J loop we are
05:34 - going to execute this block of code here
05:37 - so what we are going to do in this block
05:39 - of code here well let me look at that
05:42 - image once more and as you can see in
05:45 - each iteration of our J so this is one
05:48 - iteration of our J this is second third
05:51 - fourth fifth and then 10th iteration of
05:55 - our J after that we change our I counter
05:59 - value so we increment that and that our
06:01 - J starts again starts one more to count
06:04 - from 1 to 10 so in each of these
06:08 - iterations as you can see really we have
06:10 - to multiply our I value counter with our
06:14 - J value counter and write the result of
06:17 - that so I am going to write that here I
06:21 - am going to write C out like this and
06:24 - then let's write out the value of our I
06:27 - counter like this and then let's write
06:30 - out this multiplication operation and
06:34 - then let's write out J like this this is
06:38 - just formatting our time
06:40 - so I'm going to put this equal sign and
06:44 - then I really want to multiply those two
06:48 - counters like this and let's also add
06:51 - one end line here so that our text is
06:56 - formatted nicely because we are going to
06:57 - have multiple multiple lines so with
07:00 - this we have really covered this
07:03 - multiplication part and there is only
07:05 - one more thing left to do and that is to
07:08 - add one more end line because I really
07:09 - want to make separation between these so
07:13 - I want to make separation between these
07:15 - tables this is going to be one logical
07:18 - part after that this is going to be
07:19 - another than third for it and I want to
07:22 - put empty space space between those two
07:25 - so that I can group dance grouped up so
07:28 - I'm going to add here C out and wine
07:31 - like this and that should be it pretty
07:35 - much so if I run my program now as you
07:40 - can see it has generated this
07:43 - multiplication table from 1 to 10 okay
07:49 - and it has done that in a matter of less
07:53 - than a second so as you can see here we
07:57 - have this outer counter oh I cannot mark
08:00 - that only so we have this outer counter
08:03 - which is going to be our I that counts
08:08 - from 1 to 10 but for each value of our
08:13 - outer counter for it so for each value
08:15 - of our I we have to really count from 1
08:17 - to 10 with our inner counter which is
08:20 - going to be our J as you can see here ok
08:26 - so these are the results of our
08:29 - multiplication operation and I hope that
08:33 - you have seen now how you can really use
08:35 - programming to your advantage how you
08:37 - can use it to solve not really complex
08:39 - but tedious tasks you would really need
08:43 - 20 or 30 minutes in order to write this
08:45 - yourself and you can now generate it
08:48 - with just a couple of lines of code and
08:50 - less than a second of your computer's
08:51 - power to to really execute
08:54 - this code here that you have written and
08:56 - the most amazing part is that you don't
08:59 - really have to put down here so we have
09:02 - put down here because I want to make
09:04 - this example manageable for this video
09:07 - but you don't have to hard code these
09:09 - values here you can really use whatever
09:11 - values you want you can see for example
09:14 - let's say 2000 okay so I want to
09:18 - generate multiplication stable up to
09:21 - 2000 how long would that take in real
09:23 - life so without programming okay now you
09:26 - see a few moments later okay so it is
09:36 - still running and it is going to
09:38 - generate around 4 million records which
09:40 - is a lot and it is going to do that in a
09:43 - matter of minutes so how long would it
09:45 - take for you to even just count from 1
09:47 - to 4 million it would take you probably
09:49 - days if not months and also there were a
09:54 - lot of errors that you would probably
09:56 - make in that process so I hope that now
09:59 - you can really recognize the power of
10:01 - programming now if you needed to do this
10:03 - task you will really program your
10:05 - computer to do it and now you can just
10:07 - go take a break and your computer is
10:09 - going to finish that task for you so I
10:12 - hope that you can recognize now how you
10:15 - can use programming in order to solve
10:17 - different types of tasks that you can
10:20 - come across in your school in your job
10:22 - or life in general and if you like this
10:26 - video make sure to subscribe to my
10:27 - channel also click the bell icon and
10:30 - share it with anyone who would like to
10:31 - learn programming and I'm going to see
10:34 - you in my next video bye