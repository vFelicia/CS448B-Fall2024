00:00 - hi guys and welcome to my channel in
00:02 - this video we are going to talk about
00:03 - different types of Constructors and I'm
00:05 - going to explain what our Constructors
00:07 - when do we use them and why do we need
00:09 - Constructors in programming and you will
00:12 - also learn everything that happens in
00:14 - the background and I will show you
00:15 - examples of when to use different types
00:18 - of Constructors but before we start with
00:21 - this video I want to recommend you a
00:23 - tool that I have been using for years
00:25 - now
00:26 - previous studio and if you're wondering
00:28 - why you need it let me ask you a
00:30 - question are you tired of tracking down
00:33 - bugs and issues in your code because if
00:36 - you are then you are going to absolutely
00:39 - love PBS Studio it is very powerful
00:41 - static code analyzer that will analyze
00:44 - your code and help you fix bugs that you
00:47 - have in your code I personally use it
00:49 - when I'm preparing videos for you guys
00:51 - because it suggests best practices and
00:54 - it helps me keep my code clean without
00:55 - bugs and I also love to use it on big
00:58 - projects to analyze them and to prevent
01:00 - any bugs from going into production it
01:03 - is easy to integrate with visual studio
01:05 - and other Ides and you can use it for C
01:08 - C plus plus C sharp and Java I will put
01:12 - a link down below that you can use to
01:13 - download it and start a free trial but
01:15 - make sure to read on their page because
01:17 - there are ways to get it completely free
01:19 - if you are a student for example so
01:21 - definitely try it out and you will see
01:23 - for yourself how you will start writing
01:25 - other code without bugs and now let's
01:28 - get back to the video so let's create a
01:31 - class called user I'll say plus user
01:37 - and inside this class I will create a
01:39 - couple of public members so I will say
01:42 - public
01:45 - and then let's say string first name
01:50 - and then let's copy this let's say also
01:53 - last name
01:55 - and then let's add int age and let's say
01:59 - string email
02:01 - so every time that I want to create an
02:03 - object of type user I need to do
02:06 - following so and it's a user and then
02:09 - let's say
02:10 - user one
02:12 - so now I have to manually assign the
02:15 - values for these four properties of my
02:19 - user so I need to do something like this
02:21 - user1 Dot
02:23 - first name is equal to Selena
02:29 - and then let's assign values to the
02:32 - other properties let's say last name is
02:35 - equal to nurak and then age
02:38 - it is an integer so 27 and then email
02:43 - let's say Selena norak
02:46 - at mail.com okay and here I noticed a
02:52 - typo so I'm going to fix it very quickly
02:54 - okay so with this I created only one
02:57 - user and if I wanted to create another
02:58 - user I need to copy this
03:01 - and then paste it here and I will change
03:04 - this so that it says user two and then
03:07 - also change it here so I'm going to use
03:09 - a shortcut for changing multiple rows
03:13 - and the shortcut is alt and shift so you
03:16 - press alt and shift and then right into
03:19 - multiple rows like this so let's change
03:22 - the values let's say Anna let's say
03:25 - Lopez and then age is 28 and here it
03:30 - will be Anna Lopez at mail.com okay so
03:35 - with this we have created two users and
03:38 - it is pretty time consuming for Just Two
03:40 - users and imagine the situation if we
03:43 - had like 100 users or 1000 or even 1
03:46 - million users which is very realistic so
03:49 - this is not the way that things are done
03:52 - in programming and now I'm going to show
03:53 - you a better way and the way that we use
03:56 - Constructors in order to construct
03:58 - objects because that is the use of
04:01 - Constructor so now I'm going to show you
04:03 - what happens in the background and how
04:05 - Constructors really work so the way that
04:07 - I want to explain this is I want to show
04:09 - you some examples and I want to lead you
04:11 - to those examples so that you can draw
04:13 - conclusions about Constructors on your
04:15 - own and then we are going to discuss
04:18 - those conclusions so let's delete this
04:21 - second user because I want to have all
04:23 - the code visible on the screen so we are
04:26 - left with just one user and what I want
04:28 - to do now is I want to print the
04:30 - information about this user so I'll just
04:32 - use C out and I will say user1 dot first
04:37 - name and let's add end line and then
04:40 - let's copy this couple more times let's
04:41 - say last name and then age and
04:47 - email like this so if I start the
04:50 - program it's pretty much common sense to
04:53 - know that we are going to get the
04:55 - information from this part here okay now
04:58 - a question for you is following what is
05:01 - going to happen if I delete this part
05:05 - here so write me in the comment section
05:07 - what do you expect to happen if I run
05:10 - the program now do you expect an error
05:12 - and what kind of error or do you expect
05:14 - this program to run perfectly fine
05:16 - without any errors or do you expect some
05:19 - specific output or whatever write me in
05:22 - the comment section
05:23 - so I am going to run the program and
05:27 - here is the output that we have now
05:30 - something that I want to do before
05:31 - explaining this part here is just to
05:33 - make it a little bit more clear with the
05:36 - description so here I will say first
05:39 - name okay and then let's add
05:43 - descriptions for these remaining three
05:46 - again alt and shift together and then
05:49 - you can write into multiple rows so
05:52 - let's say last name
05:55 - and then okay I can copy this actually
05:58 - age and email like this and let's also
06:03 - do this
06:05 - and then last name and first name so if
06:10 - I run the program now let's see what's
06:11 - going to happen Okay so we have the same
06:14 - output as before but we have these
06:16 - additional descriptions so first name
06:19 - and then nothing and then last name and
06:22 - nothing and then age and then we have
06:23 - some number that is really big or really
06:27 - small depending on how you look at it
06:29 - and then email and nothing so can
06:32 - someone please explain why do we have
06:34 - this output and why don't we have any
06:37 - sort of error in console why are we even
06:39 - able to run the program and an even more
06:42 - important question is this part here so
06:45 - I have a variable called age which is of
06:49 - type int it is inside my class okay I
06:53 - never assigned any value to this age
06:56 - variable but when I try to print that
06:59 - variable
07:00 - here it says that its value is minus and
07:03 - then this number here so that must mean
07:07 - that what I can do is I can create
07:11 - another variable of type int and call it
07:14 - test for example and if I try to print
07:18 - this test variable I should get or at
07:22 - least I should expect the same result
07:24 - right
07:26 - so do you expect to see the same result
07:29 - as here when I try to print this
07:32 - variable here please explain that also
07:34 - in the comments
07:36 - so if I run the program
07:39 - very clearly you can see that we are not
07:42 - even able to build this program because
07:45 - we have an error and that error is here
07:47 - it says something like uninitialized
07:50 - local variable test used which means
07:53 - that here it says hey I cannot print
07:57 - this variable because it has not been
07:59 - initialized but here we also have not
08:02 - initialized the age variable which is
08:05 - also of type int and we didn't have any
08:08 - problems so how does that make sense
08:10 - what does that even mean
08:12 - that means that something else is
08:15 - initializing this variable here so this
08:19 - age variable which is inside our class
08:22 - that has been initialized by a default
08:25 - Constructor so a default Constructor is
08:28 - a type of Constructor that we get by
08:30 - default from C plus plus so we don't
08:32 - have to create it ourselves C plus plus
08:35 - is going to provide it for us now a
08:38 - default Constructor initializes the
08:40 - properties of an object with default
08:43 - values and it only happens to be that
08:47 - the huge number that we saw minus 8
08:50 - billion something for
08:52 - this age property that is default value
08:56 - for an integer okay so that is the
08:59 - reason why we saw this
09:02 - oh okay we still have this error here
09:04 - I'm going to comment this part of the
09:06 - code and then run the program again okay
09:09 - so this here is default value for
09:12 - integers and then even these strings
09:15 - here they are initialized it's only that
09:18 - they have been initialized with an empty
09:20 - string that's why we don't see anything
09:22 - here okay and then in this situation
09:26 - here we are just creating a simple data
09:30 - type so we are creating an integer
09:32 - variable and we don't have default
09:35 - Constructor for simple types we get a
09:38 - default Constructor only for classes so
09:42 - when you create an instance of a Class A
09:44 - Default constructor's job is to assign
09:47 - default values to the properties of that
09:51 - instance so how does a default
09:54 - Constructor look like well it looks
09:57 - something like this
10:00 - actually my bad it looks exactly like
10:03 - this so this here is a default
10:07 - Constructor for class called user so
10:10 - here we can notice a couple of important
10:12 - characteristics of Constructors there
10:15 - are six that I want to mention so the
10:18 - first one is that Constructors look very
10:21 - similar to functions with one very
10:24 - important difference and that is that
10:26 - first of all Constructors need to have
10:29 - the same name as the class that they
10:31 - belong to so the name of the class is
10:33 - user and that means that its Constructor
10:36 - needs to be called user as well that's
10:39 - the first thing and then the second
10:41 - thing is that they don't have a return
10:44 - type so if you watch my videos about
10:46 - functions you already know that every
10:48 - function needs to have a return type
10:51 - even if that return type is void which
10:53 - means no type we still have to write
10:56 - that specifically we need to say that
10:58 - function is not returning anything or
11:00 - the function is returning void but
11:03 - Constructors don't even have a void
11:06 - return type so no return type at all
11:08 - that is second important characteristic
11:11 - of Constructors and then third
11:13 - characteristic is that Constructors need
11:15 - to be placed in the public area of the
11:19 - class now there are some examples where
11:23 - you would put a Constructor inside a
11:25 - private area but if you know about
11:27 - access modifiers meaning private public
11:30 - and protected you know that public means
11:33 - that whatever is public it's accessible
11:35 - outside of the class and whatever is
11:38 - private that is accessible only within
11:41 - that class so what we want to do is we
11:44 - want to make that Constructor to be
11:46 - accessible outside of the class because
11:47 - we want to create instances we want to
11:50 - construct instances of that class now
11:53 - there is an exception to that rule where
11:55 - we would on purpose make the Constructor
11:57 - to be private like in the situation of a
12:00 - Singleton pattern but if you just
12:02 - started learning about Constructors then
12:04 - there is no need to think about those
12:07 - exceptions so
12:09 - again third rule is that Constructor
12:12 - needs to be placed inside the public
12:14 - area of a class because if you put it
12:17 - inside private or protected area you
12:21 - will not be able to access that
12:23 - Constructor from your main function or
12:25 - outside of your function okay so here I
12:29 - will explicitly put it inside this
12:32 - public area rule number four is that
12:35 - default Constructor does not have any
12:37 - parameters so as you can see here no
12:40 - arguments for default Constructor again
12:43 - it looks very similar to a function with
12:46 - the exception that it doesn't have a
12:48 - return type it needs to have the same
12:50 - name as the class that it belongs to and
12:53 - default Constructor cannot have
12:54 - parameters rule number five is that if
12:57 - you don't create a default Constructor
12:59 - on your own C plus plus is going to
13:01 - automatically generate one for you and
13:04 - that is something that we could saw on
13:06 - this example here and then rule number
13:09 - six is that default Constructor is
13:11 - invoked when you create an object of
13:13 - that class and I can demonstrate that so
13:16 - I can put a breakpoint here and then
13:19 - also here on my Constructor line and
13:21 - here where I'm creating user object so
13:24 - if I run this program
13:27 - okay we still have this error which I'm
13:30 - going to remove so test variable so if I
13:33 - run the program
13:34 - okay as you can see the execution of the
13:37 - program was stopped in this line here
13:39 - and what I can do is I can go on debug
13:42 - and then play and then press step into
13:45 - or f11 on my keyboard okay and we go to
13:50 - this line here which means that it
13:52 - invokes our default Constructor now that
13:56 - means that what we can do is we can
13:58 - write our own code inside this default
14:00 - Constructor okay so let's do that now
14:02 - I'm going to comment out this here
14:06 - and I will create another one that has
14:09 - some code inside it so here what I want
14:12 - to do is I want to assign my own default
14:15 - values for these properties here so I
14:18 - will say that first name by default will
14:20 - be equal to NN so no name
14:24 - and then let's say last name let's also
14:28 - say nln so no last name and then let's
14:33 - say that age is going to be equal to 20
14:36 - no age is going to be equal to zero
14:38 - that's default and then email will be
14:41 - equal to let's say not set
14:44 - okay so now if I remove these
14:47 - breakpoints and if I run the program
14:50 - let's see what are going to be the
14:52 - default values so here we have the
14:54 - values that we have assigned as default
14:57 - values for our users so whenever you
15:00 - create a user this default Constructor
15:03 - will be invoked because now we have
15:05 - created our own default Constructor okay
15:07 - it is this one here so these are the
15:10 - values that will be assigned by default
15:12 - to the properties of our user okay so
15:16 - when I print them here we get this
15:19 - output okay so that was the first type
15:22 - of Constructor default Constructor and
15:24 - we said that there are six important
15:26 - characteristics first it has the same
15:28 - name as the class itself second it does
15:31 - not have a return type third default
15:34 - Constructor does not receive parameters
15:36 - fourth it needs to be placed in a public
15:39 - part in a public section of your class
15:42 - and then what was fifth so if you don't
15:45 - create default Constructor on your own C
15:47 - plus is going to automatically generate
15:50 - one for you and then rule number six was
15:53 - that a Constructor default Constructor
15:56 - is invoked automatically every time that
16:00 - you create an object of a class so a
16:03 - default Constructor of that class is
16:05 - invoked in that situation the second
16:07 - type of Constructor that I want to show
16:08 - you is called parametrized Constructor
16:11 - and the only difference between
16:13 - pyramidroid Constructor and default
16:15 - Constructor is that parameterized
16:17 - Constructor receives certain values it
16:20 - receives those values as arguments or
16:22 - parameters and then it uses those values
16:25 - in order to instantiate the properties
16:28 - of that object right so let me show you
16:32 - an example I will say here that this is
16:36 - default Constructor
16:39 - okay and then let's say here that this
16:42 - is
16:44 - empty default Constructor like this and
16:47 - then let's create another one I'm just
16:50 - going to copy this code here and let's
16:52 - call it
16:55 - perhaps Constructor so parameterized
16:58 - Constructor and as I said it will
17:00 - receive certain parameters so let's say
17:03 - for example that it receives string
17:06 - F name that's first name and then string
17:10 - L name and then let's say int h
17:14 - okay so what it should do is it should
17:19 - set this F name as the value for first
17:21 - name and then it will set the L name as
17:25 - the value for last name and then here
17:27 - it's going to set this age parameter
17:31 - okay and then for email let's say that
17:33 - we are going to generate the email
17:35 - ourselves so let's say fname plus dot
17:40 - Plus
17:41 - L name plus and then let's say at
17:44 - mail.com like this okay so this is an
17:49 - example of parametrized Constructor so
17:52 - how do we invoke or use this Constructor
17:54 - because one important thing to keep in
17:57 - mind is that for every object that you
17:59 - create for every instance of a class
18:01 - only one Constructor is going to be
18:04 - invoked because that object that
18:07 - instance is going to be constructed only
18:09 - once the first time that it is created
18:11 - so you can either use this Constructor
18:14 - default Constructor to create it or you
18:17 - can use parameterize Constructor so
18:19 - let's see how we can use this one
18:21 - because here we saw example of how this
18:24 - default Constructor without any
18:26 - parameters is used so you just say user
18:28 - and then you give the name to your
18:30 - variable but this one is a little bit
18:33 - different and it is different because it
18:35 - expects to receive these values okay so
18:39 - here I'm going to say
18:42 - parentheses and then inside these
18:45 - parentheses I will pass these values and
18:47 - intellisense should even offer us all
18:50 - the constructors that we have and as you
18:52 - can see here we have four Constructors
18:55 - that we can choose from this is our
18:57 - default Constructor and it says default
18:59 - Constructor and then this one we didn't
19:02 - talk about neither did we about this one
19:04 - and here is our params Constructor
19:07 - meaning parametrized Constructor which
19:09 - we just created so this is the one that
19:11 - I want to invoke and it expects to
19:14 - receive first name last name and age so
19:17 - here I will say that first name is
19:18 - sandina and then last name is norak and
19:23 - then age is 27 right so this is how you
19:28 - use or how you invoke parametrized
19:31 - Constructor and when you do this this
19:33 - part of the code here is going to be
19:35 - executed so if I run the program
19:38 - okay as you can see first name last name
19:41 - age those are these three values that we
19:44 - have passed to our Constructor and then
19:46 - this email address has been created here
19:49 - so we have generated the email address
19:52 - based on these parameters that we have
19:54 - received as parameters to our
19:57 - parametrized Constructor and now what we
20:00 - can do is we can create or construct
20:02 - another user very easily so I will just
20:05 - copy this line I will say user 2 and
20:08 - here let's say Anna and then Lopez and
20:13 - 28. okay so if I want to print the data
20:16 - about this user I will have to change it
20:19 - here so I'll say user 2 and then user 2
20:22 - user 2.age and user2. email like this
20:26 - and with this we should get the output
20:28 - about our second user okay this part of
20:32 - the code here bothers me a little bit
20:34 - because this is not the way that we do
20:36 - things in programming because here you
20:38 - need to manually change the name of your
20:41 - user every time that you want to print
20:43 - the data about that user so what you can
20:45 - do is you can make a function that you
20:48 - can reuse or invoke every time that you
20:50 - want to get the information or print the
20:52 - data about the user so I'm going to do
20:54 - that right now and I'm going to create a
20:56 - non-member function called get user info
21:01 - okay and that function is going to
21:04 - receive a parameter of type user I will
21:08 - call it U okay and I will just cut this
21:12 - code from here and then paste it inside
21:14 - this function and here I will say
21:16 - instead of user 2. first name I will use
21:19 - this parameter here that I have received
21:22 - I'm going to paste it here and then here
21:24 - and also here and U dot email okay and
21:28 - this is just a non-member function that
21:30 - we can now reuse like this so get user
21:34 - info for user one okay and then get user
21:39 - info for user two okay so now our code
21:42 - looks much cleaner and this here has
21:45 - nothing to do with Constructors it is
21:47 - just a better way to reuse code okay so
21:52 - now if I run the program again
21:55 - what is happening
21:56 - oh we need a return type here for our
21:58 - function okay so return type for this
22:01 - function is going to be void okay so if
22:04 - I run the program again
22:06 - okay and here we can see the info about
22:10 - the first user and that info about our
22:12 - second user okay and also a quick tip
22:16 - there are two more ways to do this same
22:18 - thing the second approach would be to
22:20 - create a class member function which
22:23 - means that it's going to be very similar
22:25 - function but it is going to be part of
22:27 - this user class okay so it's going to be
22:30 - inside this class that's going to be its
22:33 - second approach and then the third
22:35 - approach is by using operator
22:37 - overloading so you would overload this
22:40 - operator and you would use that to print
22:44 - your user like this so you would say
22:46 - something like see out user one and then
22:50 - see out user two and that is another
22:54 - topic completely and if you want to
22:56 - learn about that if you want to learn
22:57 - about operator overloading make sure to
22:59 - watch the video that will be linked here
23:01 - and also in the description that is just
23:03 - a quick tip now let's remove this part
23:06 - of the code here because it has nothing
23:08 - to do with Constructors
23:10 - um and I want to share a couple of more
23:12 - useful informations and I think that
23:14 - will be it for this video and I will
23:16 - continue then in the next video talking
23:18 - about copy Constructors and about these
23:21 - structures and things like that an
23:23 - important thing to keep in mind is that
23:25 - once you create your own Constructor any
23:28 - type of Constructor you lose the default
23:31 - Constructor that is automatically
23:33 - generated by C plus for you so remember
23:36 - the one that we talked about first the
23:38 - one that c plus generates for you well
23:40 - at the moment when you create any type
23:43 - of your own Constructor you lose that
23:45 - one and we can prove that
23:48 - in a following way so let's comment out
23:52 - this default Constructor okay and here I
23:57 - have a parameterized Constructor only
23:59 - that so if I run this program this is
24:02 - going to work as expected we are not
24:04 - going to get any sort of error or
24:06 - anything like that even though I
24:07 - commented out this default Constructor
24:10 - and you might think that everything is
24:12 - okay but the problem that you will get
24:15 - will manifest itself it will appear only
24:19 - in a situation where you try to do
24:21 - something like this so where you try to
24:23 - say user and then let's say user three
24:26 - this is not going to work any longer
24:30 - okay because as I said this here expects
24:34 - a default Constructor because it doesn't
24:36 - have any parameters like these other two
24:39 - objects have so user one has parameters
24:42 - that is passing to its parameterized
24:44 - Constructor user 2 as well but user3
24:47 - does not have any parameters and it
24:50 - expects a default Constructor to
24:52 - construct that object but as you can see
24:55 - here it says no default Constructor
24:58 - exists for class user and the reason for
25:01 - that is
25:02 - at the moment that we created this
25:04 - parametrized Constructor we lost the
25:07 - automatically generated default
25:09 - Constructor so the one that C plus plus
25:11 - gave us so there are two ways to fix
25:13 - this the first way is to completely
25:15 - remove any sort of Constructor like this
25:18 - okay so we are not going to have a
25:21 - problem here anymore but we will have
25:24 - two problems here because these two
25:26 - expect parametrized Constructors so that
25:28 - is not a solution so let's return this
25:31 - pyramid pyramid rice Constructor okay
25:34 - and then the solution that is a solution
25:37 - is to create our own default Constructor
25:40 - which is this one here
25:43 - okay or you could also use this one here
25:46 - but you cannot have both because then
25:48 - again you will have a problem because at
25:51 - the situation where you want to invoke
25:53 - default Constructor if you have two
25:55 - default Constructors they don't receive
25:58 - any parameters any arguments your
26:00 - compiler will not know which one to
26:02 - invoke because again you can have only
26:05 - one default Constructor and I'm going to
26:08 - comment out this one and now we expect
26:10 - this part here to work and just to prove
26:13 - that I will say get user info and here
26:16 - I'll put user three
26:18 - so if I run the program
26:21 - here we have user one and then user two
26:23 - and then here is our user tree that was
26:26 - constructed by default Constructor so no
26:29 - name no last name h0 and email is not
26:32 - set okay and again just repeat it one
26:35 - more time because it's very important to
26:37 - remember that when you create any sort
26:40 - of your own Constructor for a specific
26:42 - class you are going to lose the
26:45 - automatically generated Constructor that
26:47 - C plus plus gives you you will not be
26:49 - able to use or access that Constructor
26:52 - anymore as long as you have other
26:54 - Constructors so I think it's going to be
26:57 - enough for this video I'm going to film
26:58 - a separate video where I want to talk
27:01 - about copy Constructor because it's a
27:03 - little bit more complex topic than what
27:05 - we have seen here and I want to show you
27:07 - that with enough examples and with more
27:10 - details so that you can really
27:11 - understand what copy Constructor is and
27:14 - as soon as I filmed that video it is
27:15 - going to be linked here on the screen so
27:17 - you can watch it and you can watch also
27:19 - videos about these structure is that
27:22 - will also be linked in the description
27:23 - as I promised at the beginning I have a
27:25 - surprise for you I'm so excited are you
27:29 - ready to take your programming skills to
27:31 - the next level and finally learn
27:33 - programming because my programming
27:35 - course is going to be available very
27:37 - soon and it's unlike anything you've
27:40 - ever seen before we will dive deep into
27:42 - programming and I will teach you all of
27:45 - the programming Concepts but not on
27:47 - small individual examples I will teach
27:50 - you how to use them and apply them to
27:52 - create big complex projects so that you
27:55 - can start working for a real company or
27:57 - if you have your own idea so that you
27:59 - can create that idea and make it into an
28:02 - app and so that you can finally start
28:05 - working on meaningful applications that
28:07 - inspire you in this course I will take
28:10 - you from beginner to advanced level of
28:12 - programming knowledge and I will teach
28:14 - you things that you cannot find anywhere
28:16 - else on the internet also for people who
28:19 - watch my videos on YouTube I want to
28:21 - give you a special discount and there
28:24 - will be a link in the description of
28:25 - this video that you can use to sign up
28:28 - but make sure to do it right now because
28:30 - the number of people that can get this
28:32 - discount is limited so thank you very
28:35 - much for watching and I will see you in
28:37 - some other video bye