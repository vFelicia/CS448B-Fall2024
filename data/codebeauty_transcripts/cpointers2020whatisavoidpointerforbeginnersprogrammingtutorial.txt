00:00 - hi everyone welcome to my channel in
00:03 - this video i want to talk about void
00:05 - pointers now in the previous video of
00:07 - this playlist i introduced you to
00:09 - pointers in general so i explained what
00:11 - our pointers and how you can create your
00:13 - own pointers and i said that a pointer
00:16 - is a special variable that can hold an
00:19 - address and i said as well that a
00:22 - pointer can hold only the address of a
00:24 - variable that is of the same type as
00:26 - that pointer which means an integer
00:29 - pointer can hold the address of an
00:31 - integer variable and then a character
00:33 - pointer holds the address of a character
00:35 - variable flow pointer of a float
00:37 - variable and so on but there is an
00:40 - exception to that rule and that is a
00:43 - void pointer and a void pointer is a
00:45 - special type of pointer that can hold
00:48 - the address of a variable of any other
00:51 - data type so a void pointer can hold the
00:53 - address of a float variable or an int
00:56 - variable or a char bool struct whichever
00:59 - one you pass to that void pointer but
01:02 - avoid pointer has a limitation as well
01:05 - and that limitation is that you cannot
01:08 - directly dereference a void pointer so
01:11 - in order to demonstrate this i'm going
01:13 - to create an example with the knowledge
01:15 - that we already have so using only
01:18 - integer and character and float pointers
01:20 - that we are already familiar with and
01:22 - then i want to introduce a void pointer
01:25 - in order to solve that problem so that
01:26 - you can see how void pointers are used
01:30 - so let's jump into our visual studio
01:33 - here i want to create a variable um and
01:36 - let's make it of int data type so i'm
01:39 - going to say int and let's call it
01:42 - number like this
01:44 - and i'm going to assign it a value of 5
01:47 - for example
01:48 - now
01:49 - what i want to do with this number
01:51 - variable is i just want to write it out
01:53 - and because we are working with pointers
01:56 - let's play with pointers some more so i
01:58 - want to write out this variable using a
02:01 - function that receives a pointer let's
02:04 - do that so
02:06 - that function is going to be of return
02:08 - type void and let's call it print number
02:12 - like this
02:14 - and then here this function is going to
02:16 - receive an integer pointer and we are
02:19 - going to call it
02:20 - uh number
02:22 - ptr so number pointer
02:25 - okay
02:27 - now what this function here should do is
02:29 - it should just print out the value that
02:32 - this number pointer is storing so
02:34 - actually the value that is stored on the
02:36 - address that this number pointer is
02:38 - holding so in order to do that we have
02:41 - to dereference this pointer so i'm going
02:43 - to say star symbol and then put the name
02:47 - of this number pointer and let's add an
02:50 - end line as well
02:52 - now this function is finished and it is
02:55 - writing out the value that is stored on
02:58 - the address that we passed to it and we
03:00 - have to pass it the address of an
03:02 - integer variable
03:04 - so if i invoke this print number
03:07 - function
03:08 - let's say print number as i said since
03:11 - it is receiving a pointer we have to
03:13 - pass it an address and that is going to
03:15 - be the address of this number variable
03:18 - so let's say
03:19 - ampersand number so this here is going
03:22 - to give us the address of this number
03:24 - variable
03:26 - okay
03:27 - and now if i run this program
03:30 - as you can see this function here has
03:32 - printed out value of 5 which is the
03:35 - value of our number
03:37 - okay
03:38 - now what happens if i want to create a
03:40 - character variable and then print out a
03:42 - character variable as well so let's do
03:45 - that i'm going to say char let's call it
03:48 - letter
03:50 - and let's assign it a value of
03:53 - letter a
03:54 - okay
03:55 - and now in order to print out this
03:57 - character using this same approach i
04:00 - will have to create another function
04:01 - because this one here receives an
04:03 - integer pointer and in order to print
04:06 - out a character we would have to create
04:08 - a function that receives a character
04:10 - pointer so let's copy this function here
04:14 - and i'm going to call it print letter
04:18 - like this
04:19 - and then this function is going to
04:21 - receive a character pointer
04:23 - okay and that pointer is going to be
04:26 - called char ptr
04:29 - and then here i just want to write out
04:32 - the reference value of that char ptr so
04:36 - let's invoke this print letter function
04:40 - let's pass it the address of this
04:43 - letter variable that we have created
04:44 - here
04:47 - and now if i run this program
04:50 - as you can see we have
04:51 - 5 for this first function and then a for
04:55 - this second function which means that
04:58 - these two functions are doing its job
05:00 - but what happens if i want to print out
05:03 - a floating point number and then a
05:05 - double and then a boolean value and a
05:07 - struct value in order to do each one of
05:09 - those i would have to create a function
05:12 - that receives that specific data type
05:15 - pointer but we can solve that same
05:17 - problem using a void pointer because as
05:20 - we already said a void pointer can point
05:23 - to a variable of any data type so let's
05:26 - do that let's create a function that is
05:29 - going to print out any data type so that
05:32 - function is going to be of return type
05:34 - void and let's give it a name print
05:38 - because it is generic it is going to
05:39 - work with all data types i'm going to
05:42 - give it name of print and as we said
05:45 - that function is going to receive void
05:47 - pointer and let's call that pointer ptr
05:51 - okay now
05:52 - because this void pointer can point to a
05:56 - variable of any data type we will have
05:58 - to keep track of which data type we have
06:01 - passed inside this void pointer and in
06:04 - order to do that i'm going to use
06:06 - another parameter here and that
06:08 - parameter is going to be of type char
06:10 - and i'm going to call it type
06:14 - so how this type parameter is going to
06:16 - be used well in a situation where we
06:19 - pass an integer pointer to this print
06:22 - function
06:23 - here this type parameter is going to
06:25 - have a value of i in a situation when we
06:28 - pass a character pointer to this void
06:31 - pointer here in this type parameter we
06:34 - are going to pass a value of c and then
06:36 - if we pass a float pointer here here we
06:39 - are going to store an f and then if we
06:41 - pass a double pointer here this type
06:44 - variable should store a letter d so that
06:47 - we can know how we are going to
06:49 - dereference this ptr pointer so the
06:53 - first thing that we have to do is we
06:54 - have to check
06:56 - what this type variable is holding so in
06:59 - order to do that i'm going to use switch
07:01 - case
07:03 - like this you can use if else as well if
07:06 - you want so here i'm going to switch on
07:09 - this type
07:10 - variable
07:12 - like this and what i want to do here is
07:14 - i want to say
07:16 - in the case that this type variable is
07:19 - holding the value of i
07:22 - that means that this here is an integer
07:25 - pointer so here i'm just going to leave
07:27 - a comment for now so i'm going to say
07:29 - handle int
07:31 - pointer like this
07:34 - and then the other situation is going to
07:36 - be
07:37 - indicates that this type variable is
07:40 - holding the value of c
07:43 - that means that here we have passed a
07:45 - character pointer so i'm going to leave
07:48 - another comment as well so here i want
07:51 - i'm going to say handle
07:53 - char
07:54 - pointer okay now let's explain how we
07:57 - are going to handle this integer pointer
08:00 - and then this character pointer as well
08:02 - well as we already said since avoid
08:05 - pointer cannot be dereferenced directly
08:08 - but we first have to cast it into a
08:10 - specific data type so into an integer
08:12 - pointer or into a character pointer in
08:15 - this particular situation i'm going to
08:17 - do that so here i'm going to say in the
08:20 - case that our user has passed an integer
08:23 - pointer here i will have to cast this
08:26 - void pointer into an integer pointer
08:29 - first so how do you do that well you say
08:32 - please this pointer here so this ptr
08:36 - casts that
08:38 - into an integer pointer
08:41 - so this expression here is going to cast
08:44 - this void pointer into an integer
08:47 - pointer so in these parentheses here
08:50 - we are going to have an integer pointer
08:53 - and in order to access to the address
08:56 - that an integer pointer is storing and
08:58 - write out the value that is stored on
09:00 - that address we dereference that pointer
09:03 - and for that we use this star symbol so
09:06 - now here we have the value that is
09:09 - stored on this integer pointer and i'm
09:13 - going to write out that value like this
09:16 - and let's add and line as well
09:20 - so this here writes out the value of an
09:23 - integer pointer so let's copy that and
09:26 - then paste it here and here what i want
09:28 - to do in this c situation is i want to
09:31 - cast this void pointer into a character
09:34 - pointer so char
09:36 - pointer and then after i have character
09:39 - pointer here id reference
09:41 - that and then this line is going to
09:44 - write out the value of our character
09:47 - okay so now if i invoke this print
09:50 - function
09:51 - i should get the value of this number
09:53 - and then of this letter as well using
09:56 - only this print function so let's
09:58 - comment these two for now
10:01 - and let's invoke our print function so
10:04 - i'm going to say print
10:06 - and then the first thing that it
10:08 - receives is going to be the address and
10:10 - in this particular situation considering
10:13 - that this is a void pointer we can pass
10:16 - it the address of any data type so we
10:19 - can pass it the address of a integer
10:21 - variable or of a character variable or
10:24 - of a floating point variable and in this
10:26 - situation we have integer variable and
10:29 - then character variable so let's use
10:31 - these two
10:32 - so let's pass here the address of our
10:35 - number
10:37 - that oh that is going to be the first
10:39 - parameter and then the second parameter
10:41 - is going to be the type and considering
10:43 - that we have passed the address of an
10:45 - integer
10:46 - let's
10:47 - pass the value of i as our second
10:50 - parameter here
10:52 - okay
10:53 - and then i'm going to copy this function
10:55 - one more time and this time i want to
10:58 - pass it the address of our letter
11:01 - variable and considering that that is a
11:04 - character here as a second parameter i'm
11:07 - going to pass c
11:09 - now i've just noticed that something is
11:11 - missing from our switch case and before
11:13 - i say what it is please write your idea
11:16 - write your answer in the comments down
11:18 - below
11:19 - so what we are missing in these two
11:21 - cases is break at the end so here i'm
11:24 - missing a break
11:27 - like this and then here as well
11:31 - okay so now we have completed our switch
11:34 - case and if i run my program now
11:39 - as you can see for this first
11:42 - line we get the value of 5 which is our
11:44 - integer so this print function has
11:46 - printed the value of our integer and
11:49 - then in this second line we have printed
11:51 - out the value of a character and we have
11:54 - done that
11:55 - using this print function which receives
11:59 - a void pointer and then it receives a
12:02 - char
12:03 - variable which is called type and we use
12:06 - that char variable in order to
12:08 - differentiate which data type we are
12:10 - storing inside this void pointer because
12:14 - as i already said a void pointer can
12:16 - point to a variable of any data type but
12:19 - it cannot be dereferenced directly so
12:22 - for that we are using this type
12:25 - parameter to check which data type is
12:28 - stored inside this pointer here
12:31 - so now you have an idea on how to use
12:34 - void pointers but i would actually
12:36 - advise you to be very careful when using
12:39 - void pointers why because your compiler
12:42 - in this particular situation does not
12:45 - have a way to tell you hey you are
12:47 - trying to cast a void pointer which is
12:50 - actually an end pointer into a character
12:52 - or vice versa if you're doing that your
12:55 - compiler in this situation here does not
12:58 - have a way to know if you are making an
13:01 - error or not because
13:03 - inside avoid pointer you can store the
13:05 - address of any variable so of a variable
13:08 - of any data type and then you can try to
13:10 - cast that void pointer into a pointer of
13:14 - any other data type which means for
13:16 - example in this particular situation
13:19 - here we are passing an integer so this
13:22 - number here is an integer which means
13:24 - that here for this line of code we are
13:27 - receiving an integer pointer okay and
13:30 - then in this case here we are trying to
13:33 - cast that into an integer pointer and
13:35 - that is okay but if we accidentally make
13:38 - a mistake here and we try to cast that
13:41 - into a character pointer for example
13:44 - like this
13:45 - our compiler now does not have a way
13:48 - to know that we are making a mistake
13:50 - here and if we run our program
13:55 - look at this we get this undefined
13:58 - symbol here which is what is this you
14:00 - know this is not the expected behavior
14:03 - of our program and we did not get a
14:05 - compile-time error which means that this
14:09 - here is completely valid so your
14:12 - compiler is not going to tell you that
14:14 - this here is an error but it actually is
14:16 - a logical error and those type of errors
14:20 - so logical errors are much harder to
14:22 - find inside programs and this here is a
14:26 - small program and it is kind of easy to
14:28 - find an error in a program that has 20
14:31 - lines of code but if you had a logical
14:33 - error in a program that has 20 000 lies
14:36 - of lines of code for example you would
14:39 - have a very very big problem so again i
14:42 - strongly advise you to be very careful
14:45 - when you are using void pointers because
14:47 - as you see compiler is not
14:50 - reporting an error for this situation
14:52 - here but but this actually is an error
14:55 - so i'm going to return this to an
14:57 - integer
14:58 - pointer
14:59 - okay so i hope that you enjoyed this
15:02 - video and uh that you learned something
15:04 - new and if you did give it a thumbs up
15:07 - subscribe to my channel and thank you
15:09 - for watching i'm going to see you in my
15:10 - next video bye