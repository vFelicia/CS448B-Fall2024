00:00 - hi everyone welcome to my channel walk
00:02 - up to another video of C++ functions and
00:05 - this video I wanted to talk about return
00:07 - statements and return types of a
00:09 - function and also if you're a beginner
00:12 - and C++ make sure to check out my C++
00:14 - for beginners course there you can find
00:16 - very useful examples in order to start
00:19 - learning C++ and also subscribe to my
00:22 - channel and click that I can so that
00:24 - you're notified when I publish new video
00:26 - and if you want to become a developer
00:28 - and you really want to get a perspective
00:30 - into what is the job of a developer and
00:33 - how developer life looks like make sure
00:35 - it follow me on my other social media
00:37 - platforms so Instagram and Twitter
00:40 - accounts at true code beauty and I'm
00:42 - going to put those in the description of
00:45 - this video so without further ado let's
00:47 - start with today's video so as I said in
00:51 - this video I want to talk about return
00:53 - types of a function so what is a return
00:55 - type of a function well a return type of
00:57 - a function can be any data type that can
01:00 - be used in order to declare variable so
01:02 - it can be inflow to boo char double it
01:06 - could be any user created data type and
01:09 - it can be void as well which means that
01:11 - that function is not going to return
01:13 - anything and as we explained in one of
01:16 - my previous videos function is a block
01:18 - of code it is a code that is grouped
01:20 - together and that code is going to
01:22 - perform a specific task and here I want
01:26 - to make a difference between functions
01:28 - that return value and functions that
01:29 - don't return value and functions that
01:33 - don't return value can be for example an
01:36 - example of a function that does not
01:37 - return a value it can be a function that
01:39 - writes out a menu to your user so you
01:42 - call that function that function writes
01:44 - out a menu to your user and the job of
01:47 - that function is done there so you are
01:49 - not expecting any value to be returned
01:51 - from that function but an example of a
01:54 - function that returns a value can be a
01:56 - function that performs a specific
01:58 - calculation let's say on arguments that
02:01 - you pass to that function and after that
02:05 - calculation is performed you are
02:07 - expecting a certain value so result of
02:10 - that color
02:10 - halation to be returned from that
02:12 - function and an important thing is that
02:15 - function can return only one value so
02:19 - only one return statement inside your
02:21 - function function is going to be
02:23 - executed and I'm going to show that on
02:25 - the example that we are going to do in
02:27 - this video and now I'm going to show you
02:31 - really how functions make your code
02:33 - easier to read easier to understand and
02:36 - how they make your code reusable so we
02:39 - are going to show that on an example
02:41 - which we are going to first make without
02:43 - using functions so we are going to make
02:46 - a program that is going to determine
02:47 - whether a number is prime number or not
02:50 - and we are going to do that first
02:51 - without using functions and then I'm
02:54 - going to refactor that program so that
02:55 - uses functions and then I'm going to
02:58 - show you how that program becomes
03:00 - instantly more readable more
03:02 - understandable and also how that makes
03:05 - your code reusable so as I said we are
03:08 - going to create a program that is going
03:10 - to determine whether our number is prime
03:12 - number or not and the definition of a
03:16 - prime number is a number that is
03:17 - divisible only by itself and by one so
03:21 - if that number is divisible by any other
03:23 - number so not one and not itself but any
03:27 - other number that means that that number
03:29 - is not prime number so the first thing
03:32 - that I'm going to do here is I'm going
03:33 - to declare a variable of type int call
03:36 - it number and then I'm going to let my
03:39 - user enter that number so I'm going to
03:42 - write out the message to my user and
03:43 - then use the C in command in order to
03:47 - get that number and store it in my
03:49 - number variable and then let's explain
03:52 - the algorithm that we are going to use
03:54 - in order to determine whether that
03:55 - number is prime number or not the
03:58 - definition of a prime number is a number
04:00 - that is divisible only by one and by
04:03 - itself which means that if you can find
04:06 - any other number besides one and that
04:09 - number itself that you can use to divide
04:12 - it by this number that our user has
04:15 - entered and get the remainder of zero
04:17 - that means that this number is not prime
04:20 - number so how we are going to solve this
04:23 - well we are going to iterate through all
04:26 - the numbers between 2 and this number
04:30 - minus 1 and then we are going to check
04:33 - whether this number is divisible by that
04:36 - counter value so I'm going to write out
04:39 - for int I is equal to 2 and then ice
04:45 - west death number and in each iteration
04:48 - I want to increase the value of my I
04:52 - counter so why haven't I used 1 here and
04:56 - why haven't I said here that this I is
04:59 - less than or equal to the number because
05:01 - every number can be divided by 1 so we
05:04 - do not need really to check that and
05:07 - also every number can be divided by
05:10 - itself and we do not need to check that
05:12 - as well so here we are going to enter
05:15 - iterate through this control so between
05:17 - 2 and while I is less than that number
05:21 - that our user has entered and here we
05:24 - are going to check whether this number
05:27 - that our user has entered can be divided
05:29 - by any value of our eyes so in any
05:32 - iteration which we are going to go
05:34 - through and in the situation where it
05:37 - can be divided we are going to use a
05:39 - flag which I'm going to declare here and
05:42 - that flag is going to be of type bool
05:45 - and let's call it is Prime flag like
05:51 - this okay and this flag is initially
05:55 - going to be assigned a value of true so
05:59 - we are going to initially say that all
06:01 - the numbers are prime numbers and then
06:03 - we want to prove that wrong for the
06:05 - numbers that are not so we are going to
06:07 - use this flag in a following way here
06:10 - I'm going to check in each iteration if
06:12 - our number that our user has entered can
06:17 - be divided by that current counter so by
06:21 - the current value of I so I'm going to
06:25 - use this modulo operation and I'm going
06:27 - to say if this number modulated by I is
06:30 - going to give us the result of 0 so when
06:33 - you divide this number
06:35 - by I do you get the remainder of zero
06:38 - and if this operation here results as
06:41 - true we are going to say that our s
06:45 - Prime flag is going to be false so we
06:47 - are going to assign the false value to
06:49 - our s Prime flag because we have clearly
06:51 - found one number which is not one and
06:54 - that number itself that can be used in
06:56 - order to make this condition true so
06:59 - here I'm going to write out is prime
07:03 - flag and then I'm going to assign it a
07:04 - value of false and then another thing is
07:08 - going to be really if we find one number
07:10 - so even one number is enough to find
07:13 - that that really fulfills this condition
07:15 - here in order to say that our number is
07:17 - not prime number and in that situation
07:20 - we do not really need to check any more
07:22 - numbers because we have determined that
07:23 - our number is not prime number so here I
07:26 - can use break statement so I can't see
07:29 - if you find only one number
07:31 - please do not iterate through this for
07:33 - loop anymore because we do not need to
07:35 - find any more numbers so in this
07:38 - situation here we have iterated through
07:41 - all the numbers between two and that
07:43 - number that our user has entered we have
07:46 - checked whether that number can be
07:47 - divided by any value of our I counter
07:51 - and if it can be divided meaning that it
07:54 - gives the remainder of zero after that
07:57 - division we are going to set our prime
08:00 - flag to false and we are going to break
08:02 - from our for loop and after we have
08:07 - successfully fulfilled this so after we
08:10 - have successfully iterated through this
08:12 - for loop or we have fulfilled this
08:15 - condition in one iteration we are going
08:19 - to leave our for loop and we are going
08:21 - to come to this line of code here and
08:23 - here I want to check what has happened
08:26 - with my is prime flag meaning I want to
08:28 - check whether this is prime flag has
08:30 - stayed true which means that our for
08:34 - loop has executed all of its iterations
08:36 - and it has not find any number that can
08:40 - be really used to fulfill this condition
08:42 - here and in that particular situation
08:45 - that flag is going to stay
08:47 - and that is going to mean that our
08:51 - number is prime number so here I'm going
08:54 - to write out if yes Prime flag meaning
08:58 - if this value here if this variable here
09:01 - holds the value of true we are going to
09:04 - write out C out like this and we are
09:08 - going to write out prime number like
09:12 - this okay and let's also add a line here
09:17 - but in a situation where this here does
09:19 - not hold a value of true that means that
09:22 - in one iteration so it can be the first
09:25 - one it can be the last one it can be any
09:27 - in between we have really found at least
09:31 - one number that can be used to fulfill
09:34 - this condition and that has set our is
09:36 - prime flag to false and in that
09:38 - situation we are going to use our else
09:40 - statement and we are going to copy this
09:43 - and we are going to really modify it to
09:45 - say not prime number like this okay
09:50 - so now if I run this program you can see
09:55 - that it asks us to enter a number I'm
09:57 - going to enter a number let's say five
10:00 - for example and it says that five is
10:03 - prime number which is correct five is a
10:05 - prime number and let's run it one more
10:08 - time and let's say that we want to check
10:11 - six this time and as you can see our
10:14 - program has written out that 6 is not a
10:16 - prime number and six really is not prime
10:19 - number because it is divisible by two
10:21 - and by three besides from 1 and itself
10:25 - ok so now you have seen how we can
10:29 - really solve this problem and let's try
10:33 - to refactor this program here in order
10:37 - to use functions so how we are going to
10:39 - do that well the first thing that we
10:42 - need to do is we need to create function
10:45 - and I'm going to do that here and says
10:48 - this part of code here this is the part
10:50 - of code that we are going to move to our
10:52 - function and since this part of part of
10:55 - code here determines really whether our
10:57 - number is from
10:58 - or not and then sets this flag to true
11:01 - or false let's say that we are going to
11:04 - create a function which is going to
11:05 - check as well whether the number is
11:08 - prime number or not and then it is going
11:10 - to return a value true or false meaning
11:15 - the number is prime number or the number
11:17 - is not prime number and that we are
11:20 - going to write here so here I'm going to
11:22 - put the return type of my function and
11:24 - that is need to be bold so that is the
11:27 - return type of my function and then the
11:29 - name for my function is going to be is
11:32 - prime number like this
11:36 - and then let's say that we want to pass
11:38 - an argument to that function and that
11:41 - argument is going to be of type int and
11:44 - that argument is going to be really the
11:46 - number that we want to the number that
11:49 - we want to check so we are going to pass
11:51 - the number to our function that function
11:54 - is going to in this body here check
11:58 - whether that number is prime number or
12:00 - not and then it is going to return bul
12:02 - value meaning true or false so if the
12:06 - number is prime number it is going to
12:08 - return true and if the number is not
12:09 - prime number it is going to return the
12:11 - value of false and how we are going to
12:15 - do that very simple so you see this code
12:18 - here I'm going to comment this code here
12:22 - and I'm going to really know I should
12:25 - have copied it before so I'm going to
12:27 - copy this code here and I'm going to
12:29 - move it to my function okay and we have
12:34 - previously explained this code here so
12:36 - we do not need to explain it again but
12:39 - what I'm going to see here is after this
12:42 - algorithm is done so after we have
12:45 - really stored the value of true or false
12:48 - so we have stored the value of false
12:51 - in our S prime flag or we have really
12:53 - kept this true value inside our S Prime
12:56 - like what we need to do is we really
12:59 - just need to say return is prime oh it's
13:03 - prime flag
13:07 - like this so after we have checked
13:10 - whether our number is prime or not that
13:12 - we can really just return that value
13:14 - from our function okay so we can now
13:18 - after we have moved this code to our
13:20 - function we can delete it from here like
13:24 - this okay and then as you can see we
13:27 - have been left with this is prime flag
13:29 - which is not declared now so identifier
13:32 - is prime flag is undefined meaning that
13:35 - now we have to really declare it and we
13:37 - have to assign it a value so I'm going
13:40 - to say here bull is prime flag like this
13:47 - and then the value that I'm going to
13:49 - assign to my is prime flag variable is
13:52 - going to be whatever value our function
13:54 - returns so here I'm going to say please
13:57 - call my function is prime number oh this
14:02 - prime number like this okay and then
14:07 - passed that function this argument here
14:10 - so our function expects a value and that
14:13 - is going to be this number that we want
14:15 - to check whether it's prime or not and
14:18 - then after this function here is done it
14:20 - is going to return a value of either
14:22 - true or false and that value is going to
14:25 - be stored inside our s prime flag
14:27 - variable okay so now if I run my program
14:31 - you can see that it asks us again to
14:35 - enter a number so I'm going to say let's
14:37 - check number nine for example and it
14:40 - says that number nine is not prime
14:41 - number which is not because it is
14:44 - divisible by three and let's check
14:48 - number 13 for example and 13 is prime
14:52 - number okay so after we have really used
14:57 - this function in order to perform this
15:00 - particular task I want to show you one
15:03 - more thing and there is going to be how
15:05 - we can refactor this function here in
15:07 - order to make it even more simple and if
15:11 - you look at this function here you can
15:14 - see you can see that this is prime flag
15:17 - is set to true here
15:19 - and then in this situation where we find
15:22 - number that can be used to fulfill this
15:25 - condition here we set that is prime
15:27 - factor Falls and then we use this break
15:30 - statement in order to break our for loop
15:32 - so we are not going to iterate anymore
15:34 - true our for loop when we come to this
15:36 - break statement and then we really go
15:39 - here and then we return that is prime
15:41 - flag but we can do that in a more simple
15:44 - manner and that is going to be really
15:46 - here so here in a situation where we
15:49 - find number that is really fulfilling
15:52 - this condition here we can see at this
15:55 - very line of code we can see return
15:58 - false like this because this and this
16:02 - code of this code here we can delete and
16:05 - why I can use this return statement
16:07 - because this return statement is going
16:09 - to really break our for loop and it is
16:12 - going to return the value from our is
16:15 - prime number function meaning it is
16:17 - going to do two things so we do not
16:20 - really need to set the flag and then
16:22 - return the value of that flag at the end
16:25 - but we can really see if you find any
16:28 - number that can fulfill this condition
16:29 - return false immediately so break for a
16:33 - loop and also return the value from our
16:35 - function meaning and the execution of
16:37 - that function because we have found our
16:39 - result and then here as well we do not
16:43 - really need to declare this is prime
16:45 - flag to true and then return it because
16:47 - it is clearly true so we can say here
16:50 - return true and then remove this flag
16:54 - from here like this and then as well I
16:58 - can remove these curly brackets and make
17:01 - my code even more readable so now I want
17:05 - to explain what we have done so here we
17:08 - are passing a number to our s prime
17:10 - number function then we are iterating
17:12 - through all the numbers between 2 and
17:14 - that number we have skipped one and that
17:17 - number itself because all the numbers
17:19 - are divisible by one and by that by that
17:22 - number itself and then we are checking
17:24 - whether any of these I values between 2
17:28 - and number fulfill this condition here
17:30 - that would mean that that number is the
17:32 - by that current value of I and that
17:36 - would mean that our number is not prime
17:38 - number so at that very moment we can say
17:40 - please return false because this number
17:42 - is clearly not prime number but in a
17:45 - situation where this for a loop has
17:47 - really iterated through all of its
17:48 - iterations and it has not found any
17:51 - number that fulfills this condition here
17:53 - that means that this return false
17:54 - statement has not been executed and then
17:57 - it does in that particular situation
17:59 - this return statement here is going to
18:02 - be executed and this return statement
18:03 - here says return true ok so this part of
18:09 - code here has not changed nor it is
18:12 - going to change and if I run it again
18:15 - you can see it asks me to enter a number
18:18 - I'm going to enter number seven then it
18:21 - is going to check whether that number is
18:23 - prime number so it is going to call our
18:25 - function and assign the result of that
18:28 - to our is Prime's like variable and I
18:31 - press ENTER here you can see that we get
18:33 - result prime number because seven is
18:36 - prime number okay and that is really
18:40 - making your code much more readable and
18:43 - reusable as well so this main function
18:46 - here is much more clean than it was
18:49 - before and now I want to show you the
18:52 - most beautiful thing and that is going
18:54 - to be how we can make this is prime
18:56 - number of function reusable so let's say
19:00 - that I am going to delete all of this
19:04 - code here so I'm going to delete it and
19:06 - now I have I know that I have written
19:09 - out this is prime number function and I
19:12 - know that I can really invoke this
19:15 - function and use it whenever I need to
19:17 - determine whether some number is prime
19:20 - number or not so let's say that now we
19:23 - want to check all the prime numbers
19:25 - between one and a thousand for example
19:28 - so how we are going to do that well we
19:31 - are going to iterate through all the
19:33 - numbers between one so I is equal to one
19:37 - and then I is less than or equal to a
19:40 - thousand
19:41 - and increase RI in each duration by one
19:45 - like this and then in each iteration I
19:48 - really am going to just send this I to
19:51 - my function and I'm going to really get
19:53 - the results from this function so this
19:55 - function is going to tell me whether
19:57 - that I is prime number or not so here
20:00 - I'm going to declare a variable of type
20:02 - bool and I'm going to call it is prime
20:05 - and I'm going to assign to that variable
20:08 - a value of its prime number when I pass
20:14 - it the value of I so whatever this
20:17 - function here returns whatever it is
20:19 - function here results in I'm going to
20:21 - assign that result to my is Prime
20:24 - variable okay and now what I want to
20:27 - write out is all the numbers that I put
20:30 - are prime numbers between 1 and this
20:33 - thousand value so I'm going to say if is
20:38 - Prime like this I'm going to write out C
20:42 - out and then I want to write out the
20:44 - current value of my I counter because
20:46 - that is a number that we are talking
20:48 - about so I is prime number number like
20:55 - this okay I'm going to add a new line at
20:59 - the end so this code here is really
21:03 - going to check all the prime numbers
21:05 - between 1 and a thousand and it is going
21:08 - to write out all the prime numbers in
21:10 - that interval and for solving this
21:13 - particular problem so whether the number
21:15 - is prime number or not we could used
21:17 - this is prime number function which we
21:20 - have written once and we have really
21:22 - tested it once we know that it works as
21:25 - it should and now we can really close it
21:27 - we do not need to really think about how
21:30 - we are going to perform this task
21:32 - never again so we have written it we
21:36 - have oh we have tested it and now we
21:39 - have this algorithm stored in our s
21:41 - prime number function and we know that
21:45 - this function works in a following way
21:46 - so we pass it a value and then this
21:48 - function return returns us true or false
21:52 - variable meaning that the number is
21:53 - prime number or not
21:55 - so once more if I run my program you can
21:59 - see that we have gotten the expected
22:01 - results so we have gotten all the prime
22:03 - numbers between one and a thousand okay
22:08 - and there are a lot of numbers okay so
22:12 - you can check these numbers on your
22:14 - calculator if you want and let's say now
22:18 - that we really want to check all the
22:20 - numbers between not just one and a
22:22 - thousand but let's say one and ten
22:24 - thousand or hundred thousand okay we can
22:29 - call just this is prime number function
22:31 - test the value of our I and then check
22:34 - the value that this function has
22:35 - returned and this function has really
22:38 - told us whether the number is prime
22:40 - number or not and if the number is prime
22:42 - number we just want to write that number
22:44 - out to our user so if I run this
22:47 - function again you can see that it is
22:50 - writing out all the prime numbers
22:52 - between one and hundred thousand and
22:55 - there there is a lot of numbers again so
22:59 - you can even count how many prime
23:02 - numbers there are in this interval so
23:04 - between 1 and hundred thousand and let's
23:07 - say that I'm going to leave that part to
23:08 - use so if you want to really upgrade
23:11 - this program so that it counts how many
23:13 - prime numbers there are in this interval
23:17 - you can write that code in comments down
23:19 - below and I'm going to check it and as
23:21 - well you can leave it for other people
23:23 - to see and use if they need it so I hope
23:27 - that you have understood this return
23:29 - type of a function and in this
23:31 - particular situation it was bull-type
23:33 - but you can have as a return type from
23:35 - your function you can have any other
23:37 - data type so you can have flowchart and
23:41 - string
23:42 - whichever data type you can really use
23:44 - in order to create a variable you can
23:46 - use that data type in order to be a
23:48 - return type of your function so in this
23:52 - particular situation I wanted to show
23:54 - you an example of a bit of a more
23:57 - complex function let's say that is going
23:59 - to determine whether your number is
24:01 - prime number or not and it is going to
24:04 - really receive that number that
24:07 - want to check as an argument as
24:09 - parameter and then it is going to return
24:11 - only true or false meaning that number
24:14 - is prime number or that number is not
24:17 - prime number and once you have written
24:20 - this code and once you have tested it
24:22 - you do not really need to bother with
24:25 - this function anymore you do not need to
24:27 - remember this code nor read it nor even
24:30 - understand it in order to use this
24:32 - function only in a situation where you
24:35 - have a bug and that bug is in this
24:38 - particular function only in that
24:40 - situation you are going to need to
24:42 - really reread this function and fix that
24:45 - bug in any other situation you can
24:47 - really just use this is prime number
24:50 - function and as well we could have made
24:53 - other functions with other return types
24:55 - we could have created for example a
24:57 - function that is going to to sum two
25:00 - numbers so you are going to pass to a
25:02 - function two numbers let's say number a
25:06 - and number B which your user enters and
25:08 - then that function is going to sum of
25:10 - those two numbers and it is going to
25:12 - return the result to your main function
25:14 - from where you are going to invoke that
25:16 - function and as well I can leave that to
25:19 - you so you can really practice writing
25:22 - functions on that example for example
25:24 - and you can put the code for that
25:27 - exercise in the comments down below as
25:29 - well and I'm going to check it and in
25:32 - this particular example as I said I
25:34 - wanted to show you a bit more complex
25:36 - example so that you can really
25:38 - understand why we need functions and why
25:41 - they make our code understandable and
25:43 - reusable and if someone else comes to
25:47 - your code now and he sees that he has
25:50 - his prime number function he does not
25:52 - really need to open this function and
25:55 - read how this function works it is
25:57 - pretty clear from this this declaration
26:02 - itself that this function receives a
26:04 - number and determines whether that
26:06 - number is prime number or not and
26:08 - returns that true or false
26:11 - back to the invoker back to the function
26:14 - that called that invoke this is primed
26:16 - is prime number okay so I hope
26:20 - that you like this video I hope that you
26:22 - enjoyed watching this video if you did
26:24 - make sure to like it and also subscribe
26:27 - to my channel and follow me on my other
26:29 - social media so Instagram Twitter
26:31 - account at Tru code Beauty the link is
26:34 - going to be in the description and I'm
26:36 - going to see you in my next video bye