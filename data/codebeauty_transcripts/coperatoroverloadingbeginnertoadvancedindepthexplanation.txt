00:00 - hi everyone and welcome to my channel i
00:02 - was in the middle of my work
00:04 - and i didn't plan to film this video
00:06 - right now but since i'm going to do
00:07 - something very interesting
00:09 - i figured why not show you so i am
00:12 - currently working on a very big project
00:14 - thousands of files millions lines of
00:16 - code and
00:17 - i was about to analyze my code so
00:21 - i know that when i run the analysis it
00:23 - is going to take
00:24 - 10 to 15 minutes in order to finish so i
00:26 - thought
00:27 - why not show you both how i analyze my
00:29 - code and then
00:30 - in the meantime while we wait for the
00:32 - analysis to finish
00:33 - i am going to teach you about operator
00:35 - overloading the analyzer that i use
00:38 - is called pds studio and if you are
00:40 - using it to learn
00:41 - or if you are working on open source
00:43 - projects or on closed projects
00:45 - you can get it for free using the link
00:47 - in my description so
00:49 - i'm going to show you now how i use pdf
00:51 - studio in order to find bugs and
00:53 - optimize my code so click the link in
00:55 - the description download pds studio and
00:58 - then you will need some code
00:59 - in order to analyze it so here i have
01:02 - the solution from my work
01:04 - and it has a lot of code a lot of
01:06 - different projects
01:07 - unfortunately i cannot show you the code
01:09 - itself because of my non-disclosure
01:10 - agreement
01:11 - but at the end of the video i am going
01:13 - to show you the result of the analysis
01:16 - so once you download pbs studio in order
01:18 - to analyze your code
01:20 - you will need to click on extensions and
01:22 - then pbs studio
01:24 - and here i'm going to check oh i'm going
01:27 - to check
01:28 - the entire solution so i want to check
01:30 - everything that my solution has so i
01:32 - will click
01:33 - that and the analysis should begin
01:36 - shortly after
01:37 - so because this is going to take 10 to
01:40 - 15 minutes because i have a lot of code
01:42 - to analyze
01:43 - we are going to leave this in the
01:44 - background and now i'm going to switch
01:47 - to our empty project
01:48 - and in the meantime while we wait i am
01:50 - going to teach you about
01:51 - operator overloading so what is operator
01:55 - overloading in c
01:56 - plus and what are operator functions in
01:59 - c
01:59 - plus plus we can create a special type
02:02 - of functions which are called
02:04 - operator functions and we use those
02:06 - operator functions in order to define
02:09 - how a certain operator will behave with
02:12 - a specific
02:13 - data type so in order to explain this
02:16 - let me give you
02:17 - the example if i say for example four
02:20 - plus five here we have this
02:23 - plus operator but in this situation our
02:26 - compiler
02:27 - already knows how the plus operator
02:29 - behaves when
02:30 - this is number and this is number as
02:33 - well so in this situation the plus
02:35 - operator will sum
02:36 - these two numbers but what is going to
02:40 - happen
02:40 - if we have a user-defined data type
02:43 - let's say for example a structure called
02:46 - car
02:46 - and if i try to do something like this
02:49 - if i say
02:50 - car one plus car two
02:53 - so what is going to happen in this
02:56 - situation
02:56 - and how will this plus operator behave
03:01 - so in this situation we can create
03:04 - our own overloaded function which is
03:07 - called
03:08 - operator plus and inside that function
03:10 - we can define
03:12 - how it will behave when we try to
03:15 - sum two cars and that is called operator
03:19 - overloading now a quick tip if you are
03:22 - not familiar with user-defined data
03:24 - types with classes and structures
03:26 - i am going to link a video here and i
03:28 - will also put it in the description so
03:31 - make sure to watch that video if you
03:33 - need additional help and then you can
03:35 - come back to this
03:36 - video so in this video i'm going to show
03:38 - you how you can overload operators that
03:40 - are used most often
03:42 - and then in the description i will leave
03:44 - the list of all of the operators that
03:46 - can be overloaded
03:47 - in c plus plus because there is a lot of
03:50 - operators
03:51 - but once you see the example that i will
03:53 - show you today it is going to be very
03:55 - easy to apply it on other operators as
03:57 - well
03:57 - so let's demonstrate how this works i am
04:00 - going to delete this code i don't need
04:02 - it
04:02 - anymore and let's create a user-defined
04:06 - data type i want to create a structure
04:08 - called youtube channel
04:09 - again if you're not familiar with
04:11 - structures the link will be in the
04:13 - description make sure to watch that
04:14 - video first
04:16 - so let's create a structure let's say
04:18 - struct
04:20 - youtube channel
04:24 - like this and let's add two attributes
04:28 - i will say string name
04:31 - also make sure to include
04:34 - string like this
04:38 - and then let's add another attribute
04:40 - let's say for example int
04:41 - subscribers count
04:47 - like this okay you can add additional
04:50 - attributes if you want of course but
04:51 - these two are going to be enough for me
04:53 - to demonstrate how operator overloading
04:55 - works
04:56 - now another thing is that you can also
04:59 - create a class
05:00 - but if you decide to create a class keep
05:02 - in mind
05:03 - that members of a class are private
05:06 - by default and then members of a
05:08 - structure are public
05:10 - by default and since i created a
05:12 - structure these two are
05:14 - public by default which means that they
05:16 - will be available
05:17 - outside of this structure so
05:20 - after i have created these two
05:22 - attributes let's also
05:24 - create a constructor again if you're not
05:26 - familiar with constructors
05:28 - the link will be in the description so
05:31 - let's say
05:32 - youtube channel and i will pass
05:36 - two parameters i will say string
05:39 - name and then int subscribers
05:42 - count let's copy this name i'll just use
05:45 - lowercase s so this is my constructor
05:50 - and inside this constructor i will
05:52 - initialize these two
05:53 - attributes so i will say that name is
05:56 - equal to
05:57 - my name parameter and then subscribers
06:00 - count
06:00 - is equal to subscribers
06:03 - count parameter
06:07 - so after i have created a constructor
06:09 - for this structure
06:11 - let's create an object of youtube
06:13 - channel type so let's create a youtube
06:15 - channel
06:16 - i will do it in my main function i will
06:18 - say youtube channel
06:20 - and let's call it youtube one like this
06:23 - and now i'm going to use this
06:26 - constructor in order to
06:28 - create this object so i will say
06:31 - youtube channel and it receives
06:34 - two parameters as you can see the first
06:36 - one is name and then the second one is
06:38 - subscribers count
06:40 - so i will pass the name here i will say
06:44 - code beauty like this
06:47 - and then subscribers count is i believe
06:50 - 75 000. i believe this is my current
06:54 - subscribers count
06:55 - and if you are not already subscribed
06:57 - please subscribe to my channel
06:59 - let's grow this community and let's
07:01 - learn programming together
07:03 - so after i have created this
07:06 - object of youtube channel type let me
07:09 - ask you
07:10 - a question and that question is
07:11 - following if
07:13 - i say for example c out
07:16 - and then i say number five what is going
07:19 - to happen in this situation
07:21 - the answer is pretty easy and that is
07:24 - that
07:24 - this number five will be printed to our
07:27 - console
07:28 - but what is going to happen if i do
07:31 - something like this
07:33 - if i say see out youtube channel
07:36 - 1 like this so what is going to happen
07:40 - in this situation write me in the
07:42 - comment section before you see the
07:44 - answer
07:45 - so if i try to run my program we are
07:48 - going to get
07:48 - an error and that error is following
07:51 - here it says
07:53 - no operator and then this operator here
07:56 - matches these two operands which means
07:59 - that
07:59 - now our compiler does not know how
08:02 - this operator here it is called
08:05 - insertion operator
08:06 - so how the insertion operator should
08:08 - behave
08:09 - with these two operands and these are
08:13 - two operands see out is one operand and
08:15 - then youtube channel one is
08:17 - second operand so now our compiler does
08:20 - not
08:21 - know how to print youtube channel it
08:24 - does not know how to print a user
08:26 - defined
08:27 - data type so what we need to do in order
08:29 - to fix this problem
08:31 - is we need to overload this insertion
08:34 - operator in order to be able to work
08:36 - with our youtube channel
08:38 - data type so now i'm going to show you
08:40 - how to do that
08:41 - so let's overload this insertion
08:44 - operator
08:45 - we already said that operator functions
08:48 - are just
08:48 - like regular functions but there is
08:52 - one rule when it comes to naming
08:54 - operator functions
08:55 - and that is that they need to be called
08:58 - operator
08:59 - and then you specify the operator that
09:01 - you want to
09:02 - overload so in this situation our
09:04 - function will be called
09:06 - operator and then this insertion sign
09:09 - here
09:09 - so let's create that function let's say
09:13 - void and then operator
09:17 - like this and then you specify the sign
09:20 - of the operator okay now
09:23 - one very important thing is that this
09:25 - insertion operator
09:27 - works with two operands the first
09:29 - operand is this
09:30 - c out object on the left side and then
09:33 - the second operand is
09:35 - youtube channel on the right side so
09:38 - these two operands this one here and
09:41 - then this one here
09:42 - will be passed as parameters to our
09:45 - operator
09:46 - function so if i hover over my c out
09:50 - object you will see that it is of type o
09:53 - stream so we will need to pass an object
09:56 - of type o stream as the first
09:58 - parameter so let's do that
10:02 - okay and let's call it c out and here
10:05 - i'm using
10:06 - capital letters so capital c out just to
10:09 - make
10:09 - the distinction between this object here
10:12 - and then this
10:12 - object here even though in the
10:14 - background they are the same
10:16 - object so that is the first argument
10:20 - and then second argument is this youtube
10:23 - channel one here so it is of type
10:26 - youtube channel so let's pass
10:28 - that as well like this and let's
10:32 - call it youtube channel
10:35 - okay one thing that i want you to notice
10:39 - is that here i am passing these two
10:42 - parameters
10:43 - by a reference and that means that we
10:47 - are going to pass the original so
10:49 - these two are not going to be copied but
10:52 - we are rather passing the original
10:54 - objects themselves now we use
10:58 - pass by reference when we have
11:00 - parameters that are not
11:01 - exactly cheap to copy now an example of
11:05 - parameters that are cheap to copy
11:07 - are numbers for example but a parameter
11:10 - like a string
11:11 - or a user-defined data type or a list a
11:14 - vector
11:15 - are not very cheap to copy so in that
11:18 - situation you can pass
11:19 - those by a reference and that is exactly
11:22 - what i'm doing here
11:24 - now what i want this function here to do
11:27 - is i want
11:28 - it to print the information about my
11:31 - youtube
11:32 - channel and i will use this see out
11:35 - object here
11:36 - and then this youtube channel object
11:38 - that i've passed to my function as well
11:40 - so let's say c out
11:44 - keep in mind that i am using this object
11:47 - here
11:48 - instead of this lowercase one okay so i
11:51 - will say c
11:52 - out and then let's say name
11:55 - and let's write out the name of our
11:58 - youtube
11:59 - channel so youtube channel dot name
12:02 - like this let's add end line so that is
12:05 - the first thing and then
12:06 - the second information that our youtube
12:08 - channel contains is the number
12:10 - of subscribers so i will say c out
12:13 - again i am using this capital c
12:16 - out so i will say c out and then
12:19 - subscribers
12:22 - like this and let's say youtube channel
12:25 - and then
12:26 - subscribers count like this
12:30 - so with this we have successfully
12:32 - overloaded
12:34 - this insertion operator and if i scroll
12:37 - down
12:38 - you will see that the error that we had
12:41 - here so
12:42 - the error with our insertion operator
12:44 - not being overloaded
12:46 - disappeared so if i try to run my
12:48 - program now
12:49 - write me in the comments what do you
12:51 - expect to happen
12:53 - as you can see we are successfully
12:55 - printing the information about
12:57 - our youtube channel so it says name code
12:59 - beauty and then
13:00 - s subscriber 75 so we need to remove one
13:04 - s okay so let's remove this
13:07 - s and what we have achieved by
13:10 - overloading this insertion operator for
13:12 - our youtube channel
13:14 - type is that now we can use see
13:17 - out command with a youtube channel type
13:20 - the same way that we are already used to
13:23 - using it with
13:24 - a number for example so that is what i
13:27 - wanted to show you
13:28 - now i want to show you something else
13:31 - and let's create
13:32 - another youtube channel so i will
13:35 - duplicate
13:36 - this line of code and i will create a
13:38 - youtube channel
13:39 - too and let's call this channel for
13:42 - example
13:43 - my second channel
13:48 - okay and let's say that on my second
13:50 - channel i have
13:52 - 80 000 subscribers and what i want to do
13:55 - is i want to say
13:57 - here so please print the information
13:59 - about my youtube channel one and then in
14:02 - the same line
14:03 - print the information about my youtube
14:05 - channel
14:06 - too and as you can see here we are
14:09 - getting the error
14:11 - again and in order to fix this error and
14:14 - in order to be
14:15 - able to use this c out command like this
14:18 - so in order to be able
14:19 - to print multiple objects in the same
14:22 - line
14:22 - what you need to do is two things first
14:26 - here you need to see that instead of
14:28 - returning void
14:29 - your operator function needs to return o
14:32 - stream
14:33 - object so o stream
14:36 - reference like this and then since you
14:39 - are saying that your function will
14:40 - return o stream
14:41 - object you need to return that object
14:44 - from your function so you need say here
14:47 - return c out
14:50 - oh like this and please notice that here
14:53 - i'm using this
14:54 - capital letter c out instead of this
14:57 - lowercase
14:58 - one so if i run my program again
15:02 - as you can see the error has disappeared
15:04 - and here we have the information about
15:06 - our first channel
15:07 - and then the second channel as well now
15:10 - let me show you something else
15:12 - since we said that operator functions
15:14 - are just like regular functions
15:17 - now your question might be can we invoke
15:19 - this
15:20 - operator function just like a regular
15:23 - function
15:23 - and the answer to that question is yes
15:25 - so let me demonstrate how that works
15:28 - so let's delete this second youtube
15:31 - channel from here
15:32 - now another way to do this same thing
15:35 - here
15:36 - is to say operator
15:39 - and then this insertion operator and
15:42 - then i will invoke
15:44 - this function here just like i would
15:47 - invoke any other global function
15:49 - so i will specify its name and here i
15:52 - will pass
15:52 - parameters so the first parameter is our
15:55 - c out
15:56 - object and then the second parameter is
15:58 - our youtube channel
15:59 - one okay so let's comment this
16:03 - line of code here and if i run my
16:05 - program
16:06 - as you can see we get the information
16:08 - about our first youtube
16:10 - channel so let's close this and as i
16:12 - said
16:13 - this is another way that you can use
16:15 - this operator function
16:17 - but the main reason why we overload
16:20 - operators
16:20 - is to be able to use them like this so
16:24 - this here
16:24 - is more common way to use operator
16:27 - functions than this
16:28 - approach here so that is the reason why
16:30 - i'm going to remove
16:32 - this second line but if your question is
16:34 - can we do that the answer is
16:36 - yes absolutely we can so this is how we
16:40 - overload the insertion operator and as
16:43 - you can see
16:43 - in this situation we created the
16:45 - operator function
16:46 - globally but what is going to happen if
16:49 - we
16:50 - want to overload an operator like plus
16:52 - or minus
16:53 - or operator greater than or less than or
16:56 - is equal to or not equal to and so on
17:00 - those operators are overloaded
17:02 - differently
17:03 - so now i'm going to show you how we can
17:05 - do that
17:06 - so let's collapse this code you can find
17:09 - it in the pen comment
17:10 - if you need it okay
17:13 - so what i want to do now is i want to
17:16 - create
17:17 - another structure another user defined
17:19 - data type
17:20 - so let's say struct and let's call it
17:24 - my collection
17:28 - like this and inside this my collection
17:31 - data type i want to have
17:33 - a list of youtube channels so let's say
17:37 - list and youtube channel
17:40 - so let's call it my channels
17:46 - like this also make sure to include
17:48 - lists here so i will say
17:51 - include list like this
17:54 - so after i created my collection
17:56 - structure let's
17:57 - do the following i'm going to remove
17:59 - this line of code and i will create an
18:02 - object of
18:03 - my collection type let's call it my
18:05 - collection
18:08 - like this let's just use capital letter
18:11 - c okay so what i want to be able to do
18:15 - in this situation is i want to say
18:18 - my collection plus equals to
18:22 - youtube channel one so i want to be able
18:26 - to add
18:27 - youtube channels to my collection by
18:30 - using
18:31 - this operator here and that is exactly
18:34 - what i want to show you now so
18:35 - how can we overload this operator here
18:39 - in order to work with
18:41 - this type here and this type here so the
18:44 - left
18:44 - operand is of type my collection which
18:47 - is data type that
18:48 - we created so in this situation we can
18:52 - create operator function plus equals
18:55 - as a member function of this structure
18:59 - here so in that situation we would need
19:02 - to pass only
19:03 - one parameter and that is the one on the
19:05 - right side
19:06 - and then this one is going to be
19:08 - available automatically so
19:10 - let me show you how that works and how
19:12 - can we
19:13 - overload this operator here so
19:17 - inside this my collection structure
19:20 - i will create operator function i will
19:23 - say
19:24 - void and let's call the function
19:28 - operator and then plus
19:31 - equals this here is the rule so this
19:34 - is how you name your operator functions
19:37 - you first say
19:38 - operator and then you specify the
19:40 - operator that you want to overload
19:42 - okay and then here we are going to pass
19:45 - parameters
19:46 - in this situation we need to pass only
19:48 - one parameter and that is the one on the
19:51 - right
19:52 - side and as i said this one is going to
19:54 - be available
19:55 - automatically so here i will say
19:58 - youtube channel and let's call it
20:03 - channel like this
20:06 - okay so what i want to do in this
20:09 - situation
20:10 - is i want to say the following this
20:13 - dot my channels okay and please keep in
20:17 - mind that you need to use
20:18 - this symbol here instead of a dot even
20:20 - though i say
20:22 - dot so this keyword
20:25 - implies this operand here so my
20:29 - collection and you can say this or you
20:32 - can just say
20:33 - my channels it will work the same way i
20:36 - will use
20:37 - this so that you know what is meant by
20:40 - this it is meant
20:42 - this first operand so my collection
20:45 - so please give me my channels from
20:48 - my collection and what i want to do is i
20:51 - want to say
20:52 - push back so please add to the list of
20:56 - my channels
20:57 - this channel here
21:00 - like this so that is how we overload
21:03 - this
21:04 - plus equals operator so that when we say
21:07 - my collection plus equals youtube one
21:10 - that means that youtube one will be
21:13 - added
21:14 - to this list of my channels and
21:17 - the behavior of this operator plus
21:19 - equals is very
21:21 - intuitive and that is the way that your
21:23 - operator functions should be
21:25 - they should be very intuitive because if
21:27 - someone needs to open the definition of
21:29 - your
21:30 - operator function in order to figure out
21:31 - what it is doing
21:33 - you are probably doing it wrong so let's
21:36 - explain something that you probably
21:37 - noticed by now
21:38 - and that is the difference between this
21:40 - operator function here
21:42 - and then this operator function here so
21:45 - as you can see first thing is that this
21:48 - operator function is created as
21:51 - member function of this structure here
21:54 - whereas
21:55 - this operator function is created as a
21:57 - global function
21:59 - and then second thing is that this
22:01 - function here receives only
22:03 - one parameter whereas this one here
22:06 - receives two parameters so why is that
22:09 - the case
22:10 - well in this situation here where we
22:13 - overloaded operator plus
22:15 - equals we have created it as a member
22:18 - class and we passed only
22:20 - one parameter because the first
22:23 - parameter so this first operand will be
22:27 - available automatically like this
22:30 - because it is a member function
22:33 - whereas in this function here we needed
22:36 - to pass
22:37 - both parameters so both operands because
22:41 - the first operand this c out object is
22:44 - of type o stream
22:46 - and there is a library that is already
22:49 - available for us to use
22:51 - and it would be very hard and almost
22:54 - impossible to define
22:56 - and overload this operator here for
22:59 - every single data type that we want to
23:01 - use
23:02 - this operator with so in this situation
23:06 - we
23:07 - are creating a global function and we
23:09 - are
23:10 - passing both parameters so both operands
23:13 - to that
23:14 - global function so since we are talking
23:17 - about
23:17 - operator overloading let's practice
23:20 - operator overloading some more
23:22 - so let's add to this collection here
23:25 - our second youtube channel as well let's
23:27 - say my collection
23:29 - plus equals to second youtube channel
23:33 - okay so what i want to be able to do now
23:37 - is the following i want to be able to
23:39 - say
23:40 - see out my collection
23:44 - like this but we will get a problem
23:47 - which says
23:48 - that this insertion operator is not
23:51 - overloaded for my collection object so
23:54 - it is not overloaded for
23:56 - my collection data type so let's
23:59 - overload
24:00 - this operator here for this type
24:03 - here as well so i am going to overload
24:06 - it as
24:06 - a global function like we did in this
24:09 - situation here okay so here i am going
24:13 - to say
24:14 - oh stream and then my reference
24:18 - and then i will call it operator
24:21 - insertion
24:25 - like this and since this is a global
24:28 - function it will need to receive
24:30 - both operands so both this one and
24:34 - this one so i will say that the first
24:36 - one is o stream
24:37 - object which is called c out again i'm
24:41 - using
24:42 - capital letters here okay and then the
24:45 - second
24:46 - will be my collection object
24:49 - and it will be called my collection
24:54 - like this so what i want to do inside
24:58 - this operator function is i want to
25:00 - print all of the elements of my
25:03 - collection and in order to do that i
25:05 - will use for each loop so
25:07 - i will say for so for each
25:11 - youtube channel let's call it youtube
25:15 - channel like this so for each
25:19 - youtube channel inside my
25:22 - collection dot my
25:25 - channels what i want to do is i want to
25:29 - print the information
25:30 - about that youtube channel so i will say
25:34 - see out youtube channel and then
25:37 - add endline and please pay attention
25:40 - that here i am using
25:42 - this parameter so capital c out
25:45 - instead of lowercase c out okay so after
25:49 - i have printed the information about my
25:51 - youtube channel
25:52 - the last thing that we need to do is
25:54 - since we said that this
25:56 - operator function will return o stream
25:58 - object we need to return that object
26:00 - from our function
26:01 - so i will say return c out
26:05 - because that is our o stream object that
26:07 - we need to
26:08 - return okay so what i will be able to do
26:12 - now is
26:13 - this line of code here so see out my
26:16 - collection
26:17 - and if i run this program let's see what
26:19 - is going to happen
26:21 - okay as you can see here we have the
26:24 - information about our first channel and
26:26 - then the information about our second
26:28 - channel perfect so let's collapse this
26:31 - function here because it is taking too
26:33 - much space and if you need the code it
26:35 - will be pinned
26:36 - in the comments as i already said so
26:39 - let me show you something else an
26:41 - interesting situation
26:42 - actually an error that can happen if you
26:45 - work on this
26:46 - on your own and the error is extremely
26:49 - hard for most beginners to figure it out
26:52 - on their own
26:53 - so let's demonstrate that error and
26:55 - let's fix it together
26:57 - so here i have created my collection
27:00 - and then i have added two youtube
27:02 - channels to that collection
27:04 - and i am printing the information about
27:06 - my collection
27:07 - so what i want to be able to do is
27:11 - the following so i want to be able to
27:13 - say
27:14 - my collection minus equals to
27:17 - youtube channel too so i want to be able
27:20 - to remove
27:22 - elements from my collection by using
27:24 - this
27:25 - minus equals operator so how will we do
27:29 - that
27:30 - you guessed it correctly we need to
27:32 - overload this
27:33 - operator here the same way almost
27:35 - identically as we did
27:37 - here but the behavior is going to be
27:39 - different of course so what i will do is
27:41 - inside
27:42 - this my collection i will copy this
27:45 - operator plus equals and then paste it
27:48 - below and i will change the name so that
27:51 - it
27:51 - is minus equals operator
27:55 - it will as well receive the channel that
27:57 - we want to remove
27:58 - and the behavior will be the following
28:00 - so inside this
28:02 - minus equals operator we want to remove
28:05 - this channel from
28:06 - this list here so i will say this
28:10 - my channels remove and then
28:13 - i will pass the channel that i want to
28:16 - be
28:17 - removed like this okay
28:20 - so as you can see the error has
28:23 - disappeared from here so what do you
28:26 - expect
28:27 - to happen in this situation if i run my
28:30 - program
28:30 - write me that in the comment section
28:32 - before you see my answer
28:34 - so let's run our program and we get
28:37 - the window which means that we have
28:39 - errors
28:40 - so let's see if we can get any help from
28:43 - this errors window here
28:45 - as you can see these errors are not
28:48 - very beginner friendly so it says
28:52 - binary is equal to does not define this
28:55 - operator or a conversion to a type
28:58 - acceptable to the predefined
29:00 - operator it's actually not clear at all
29:03 - what is happening in this situation and
29:06 - why we are having this error
29:08 - so let me show you what is happening
29:11 - let's move this window so that it does
29:14 - not take space
29:15 - and notice this remove function
29:19 - right click on it and click go to
29:21 - definition
29:23 - okay so here we have the definition of
29:26 - our remove function and as you can see
29:30 - that remove function internally is using
29:33 - this
29:34 - is equal to operator in order to compare
29:37 - the elements so that it can remove
29:40 - the right element from the list so
29:43 - it is very easy if that list contains
29:45 - for example numbers
29:47 - it is very easy to compare if one number
29:49 - is equal to
29:50 - another number but since we are using
29:53 - the list to store
29:54 - youtube channels the question is how
29:57 - will this function know that
29:59 - one youtube channel is equal to another
30:02 - youtube channel so
30:03 - how will this is equal to operator
30:06 - behave
30:07 - in that situation so the reason
30:10 - why we are having the error that we are
30:12 - having is
30:14 - because we have not overloaded
30:17 - this is equal to operator for
30:20 - our youtube channel data type so
30:23 - in order to fix the error that we have
30:25 - we need to do that
30:27 - so let's close this file here and
30:30 - i will go to my youtube channel
30:32 - structure
30:33 - and here i will meet to overload is
30:36 - equal to
30:37 - operator so i will say
30:40 - bool and then let's call it
30:44 - operator is equal to
30:48 - okay and here we are going to pass only
30:52 - one parameter of type youtube channel
30:57 - okay let's call it channel
31:00 - and here i will say return
31:04 - this dot name is equal to
31:09 - channel dot name like this
31:13 - now a better way to implement this is to
31:15 - create an additional attribute inside
31:17 - this
31:18 - youtube channel struct called id or
31:21 - identifier and then to compare the ids
31:25 - of two youtube channels
31:26 - instead of comparing the names but this
31:29 - is going to be enough for demonstration
31:31 - purposes i'm going to leave that part to
31:33 - you if you want to
31:34 - practice on your own so
31:38 - that is the first thing and then the
31:39 - second thing that i want to explain
31:41 - is why is the return type of this
31:44 - operator is equal to
31:46 - bull the answer is because that is the
31:48 - logical behavior
31:50 - of is equal to operator because it
31:53 - should return the information
31:55 - if two youtube channels are equal so
31:57 - true
31:58 - or false yes or no so that is the reason
32:01 - why the return type of this operator
32:04 - function is
32:05 - bull so after we have implemented
32:08 - this operator is equal to let's run our
32:11 - program and let's see what is going to
32:13 - happen now
32:14 - so if i run the program as you can see
32:18 - we have the error again so what is the
32:21 - error
32:22 - this time so let's see if this window
32:24 - here is of
32:25 - any help and from what i can read
32:29 - these errors these explanations are not
32:31 - helpful
32:32 - at all at least for beginners so let's
32:35 - collapse this
32:36 - again okay so what is happening in this
32:40 - situation
32:42 - in this operator is equal to function
32:45 - what we need to do is we need to say
32:48 - that this function here will not change
32:52 - its parameters so we need to basically
32:55 - swear to our compiler that we will not
32:58 - change the parameters that we have
33:00 - received
33:01 - so in order to do that you need to make
33:04 - that parameter
33:05 - a constant so you need to say
33:08 - const youtube channel and then the name
33:11 - of that parameter and here i will say
33:14 - that this operator is equal to
33:17 - is a const function which means that it
33:20 - will not
33:20 - change its parameters by accident
33:23 - because this
33:24 - function intuitively should not change
33:26 - the values and the parameters
33:29 - it should just compare them and tell you
33:31 - if they are equal
33:32 - or not so if i try to run my program
33:36 - again
33:37 - let's see what is going to happen and we
33:39 - don't have errors anymore and
33:41 - our program works as it should so now we
33:44 - have the information about
33:45 - only one youtube channel and the reason
33:48 - for that is
33:49 - because we added two youtube channels
33:52 - and then we removed
33:53 - one so here our collection contains only
33:57 - this first youtube channel so i will pin
34:00 - this code in the comments in case that
34:01 - you want to use it
34:03 - and i hope that this video was helpful
34:05 - for you to understand what is operator
34:07 - overloading
34:08 - if it was please give it a thumbs up
34:11 - because that means a lot to me and it is
34:13 - also very important for the youtube
34:15 - algorithm
34:16 - one thing that i promised at the
34:17 - beginning of this video is that i
34:19 - am going to show you the results of the
34:21 - analysis of my code for work so
34:24 - let's check that out here i have
34:27 - all of the potential issues and bugs
34:29 - that pbs studio has found
34:31 - and as you can see i have a lot of
34:34 - things that i need to
34:35 - optimize and fix and here are three
34:38 - different levels of priority
34:40 - low medium and high and currently i have
34:44 - 384 potential
34:47 - issues of high priority that i need to
34:50 - fix or optimize so i have a lot of work
34:54 - waiting for me
34:54 - to do and if you also want to analyze
34:57 - your code i am going to leave the link
34:59 - in the description that you can use to
35:01 - download
35:02 - pbs studio for free so i hope that
35:05 - this video was helpful if it was please
35:08 - give it a thumbs up
35:09 - and also share it with someone who would
35:10 - like to learn programming
35:12 - so thank you very much for watching and
35:14 - i am going to see you in some other
35:16 - video
35:17 - bye