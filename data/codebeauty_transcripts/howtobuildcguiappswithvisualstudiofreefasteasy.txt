00:00 - hi guys and welcome to my channel in
00:02 - this video I'm going to teach you how
00:03 - you can build user interface
00:05 - applications in an easy way and also
00:08 - completely free and the reason why I'm
00:11 - saying this is because there are some
00:12 - tools that you can use in order to help
00:14 - you to build UI applications but
00:17 - unfortunately they are very expensive so
00:19 - in this video I will teach you how you
00:20 - can use Visual Studio Community version
00:23 - which is completely free in order to do
00:25 - that same thing so immediately let's
00:28 - start and let me show you the
00:30 - application that we are going to build
00:31 - so here we have our to-do app as you can
00:35 - see this is how our application is going
00:37 - to look like and here I can type a task
00:40 - that I need to do let's say for example
00:42 - pay bills okay and I can add that task
00:46 - to my to-do list let's add another one
00:48 - let's say go to the gym add that as well
00:53 - and let's say also learn coding okay and
00:58 - then when I finish each one of of these
01:00 - tasks I can easily remove them from my
01:03 - list by simply clicking on them okay and
01:08 - all of the tasks have been removed so
01:10 - this is the application that we are
01:11 - going to build in this very short video
01:14 - and before we start writing the code I
01:16 - want to invite you to please watch this
01:18 - video and build this application
01:19 - together with me and uh you will see how
01:22 - much knowledge you can get in a very
01:24 - short video that took me maybe 2 hours
01:27 - to prepare film and edit and and then I
01:30 - want you to imagine how much knowledge
01:31 - you can get in an entire practical
01:34 - programming course that I have been
01:36 - working on for the past year and a half
01:39 - so my practical programming course is
01:41 - going to teach you everything on one
01:42 - place step by step and it is going to
01:45 - take you from beginner to experienced
01:47 - developer level so that you don't need
01:50 - any more courses after that one and so
01:52 - that you can get a job and finally start
01:55 - bringing money home initial 100 lessons
01:57 - are already available and you can click
01:59 - the the link in the description and
02:01 - start learning right now also every week
02:05 - I'm adding new video lessons and new
02:07 - exercises for you to practice until we
02:10 - cover everything that you need to know
02:12 - in order to become an experienced
02:13 - developer and get a job that you like
02:17 - also you will get access to an exclusive
02:19 - developer Community where you can ask
02:21 - questions share experiences and
02:23 - collaborate with other programmers one
02:26 - very important thing about this course
02:28 - is that all of the skills skill that you
02:30 - learn in the course will be applicable
02:32 - and transferable to any oop programming
02:35 - language so languages like C++ CP Java
02:38 - python JavaScript doesn't really matter
02:41 - because in this course you will not just
02:43 - learn to code you will learn to create
02:46 - to innovate and to solve problems
02:49 - regardless of the programming language
02:51 - that you want to work in in the future
02:53 - and type of application that you want to
02:55 - build in this course we will be writing
02:57 - C but it is just going to be a tool for
03:00 - me to shape your programmer's mind and
03:03 - all of the skills that you gain will be
03:05 - transferable and applicable to any other
03:08 - objectoriented programming language I
03:10 - will put a link in the description that
03:12 - you can use in order to get the course
03:14 - and currently there is a special
03:16 - discount but the number of people that
03:18 - can get it is limited so if you want to
03:20 - join definitely don't miss this
03:23 - opportunity so with that being said
03:26 - let's start building our application I
03:28 - already showed you how it looks like and
03:31 - how it should behave so now we are going
03:33 - to focus on building this application so
03:36 - the first thing that you will need is
03:37 - Visual Studio 2022 and you can download
03:40 - Community version for free if you have
03:43 - some older version like Visual Studio
03:45 - 2019 or something like that then I
03:48 - absolutely recommend you to download
03:50 - 2022 because you might experience some
03:53 - problems that I will not have here
03:55 - because I have new version of visual
03:58 - studio so make sure to download
04:00 - 2022 okay so once you have that click on
04:03 - create new project here and the type of
04:07 - application that we are going to build
04:09 - is going to be Windows forms application
04:12 - okay you can find it here so Windows
04:14 - forms app C so click on that and click
04:18 - on next okay and here we are going to
04:22 - give the name to our application to our
04:25 - project so I will call it my to-do app
04:30 - like this and click on next okay and
04:33 - here you should select the framework and
04:36 - here I have the list of different
04:38 - Frameworks and the one that we are going
04:40 - to choose is net
04:43 - 6.0 and also please keep in mind you
04:45 - might have some newer versions like 7.0
04:48 - or something like that depending on when
04:50 - you are watching this video but it's
04:52 - very important that you select 6.0 it
04:55 - has long-term support and if you don't
04:58 - do this step the same that I do then you
05:01 - might experience some problems that I
05:03 - will not have here so make sure to
05:05 - select 6.0 and then click on Create and
05:09 - now our project is being
05:12 - created okay so here immediately we get
05:16 - an empty form and I can also start this
05:21 - application so when I started as you can
05:24 - see we have this empty form our
05:26 - application will not do anything because
05:29 - we we have not written any code we have
05:31 - not implemented any functionalities but
05:34 - this is a functional application that
05:36 - doesn't do anything I can simply
05:39 - minimize it I can open it again but it
05:42 - does not do anything so to this empty
05:44 - application we are now going to add the
05:47 - functionalities so let's close this app
05:50 - and on the screen I'm going to put the
05:52 - screenshot of the application that we
05:54 - want to build so as you can see we need
05:57 - one text box we need one button and we
05:59 - need one list control so now the
06:02 - question is where you can find all of
06:05 - those controls well please make sure
06:08 - that you are on this form one and then
06:12 - click on view toolbox okay and you will
06:16 - get a window that looks like this and
06:20 - here inside this toolbox you can find
06:23 - all of the controls that we need and you
06:25 - can simply drag and drop them to your
06:27 - form and use them now one very important
06:31 - thing is that when you are trying to
06:33 - open this toolbox it's very important
06:35 - for you to be on this form One Design
06:38 - part because if you are on any other
06:40 - part of your application for example
06:42 - here you will not be able to see your
06:45 - toolbox so again go to form one and then
06:49 - click on view and you should be able to
06:51 - see toolbox and that's where we have all
06:54 - of the controls that we will be using to
06:56 - build this application so what controls
06:59 - do we need to build our to-do app we
07:02 - need one text box we need one button and
07:05 - we need one list box controls so let's
07:07 - find them here I will search for text
07:11 - box it is this control here and I will
07:14 - simply drag and drop it onto my form
07:17 - okay I can make it a little bit bigger
07:19 - and let's also make this entire form a
07:21 - little bit smaller okay so now if I run
07:24 - my
07:26 - application as you can see our
07:28 - application has this t text box and I
07:30 - can type text into this text box okay
07:34 - but something that I want to change here
07:36 - is the fact that this font here is very
07:39 - small and you maybe cannot even see it
07:41 - so that's the first thing that I'm going
07:43 - to change so how will you do that well
07:46 - close the application and then click on
07:48 - this text box right click on it and go
07:51 - to properties and here you will be able
07:54 - to see all of the properties of this
07:56 - text box and something that we are
07:58 - looking for for is a property called
08:01 - font here it is so simply click on these
08:05 - three little dots and here you will be
08:08 - able to choose the font that you like
08:10 - font style and also the size of the font
08:13 - so I will just change the size of the
08:15 - font to 16 and click on okay and as you
08:19 - can see our text box has become bigger
08:22 - so now if I start my application and I
08:25 - start typing as you can see the font is
08:28 - bigger and now you can probably see it
08:30 - better okay so that is one thing another
08:34 - interesting thing is that now if I add a
08:37 - button or a list box which are also the
08:39 - controls that we need in order to build
08:41 - our application they will also have that
08:44 - default small font so I will have to
08:47 - change the font for each individual
08:50 - control that I add to my application but
08:53 - there is an easier way way to do that
08:56 - same thing and that is to change the
08:58 - font on this entire form so you can
09:01 - click on your form right click on it and
09:03 - go to properties okay and find font
09:07 - property of your form click on these
09:09 - three little dots and here you are going
09:11 - to set 16 as the size of font for your
09:15 - entire form okay and that means that all
09:19 - of the controls that I add on this form
09:22 - will automatically inherit that font
09:26 - unless I set a specific font for that
09:29 - control which I will not because now we
09:31 - will have this 16 as a default font for
09:35 - all of the controls that we add to this
09:37 - form okay so let's find
09:40 - button in my toolbox I will type button
09:44 - and here I have button control okay I
09:48 - will increase it a little bit and as you
09:51 - can see already the font is bigger and
09:54 - you can clearly see it okay and another
09:57 - control that I need is is our list that
10:00 - control is called list
10:02 - box okay and simply drag and drop it
10:07 - here like
10:09 - this okay and let's just make this a
10:12 - little bit bigger okay so now if I start
10:16 - this application as you can see we have
10:19 - this text box and then when we click on
10:22 - this button this text here should be
10:24 - added to our list box but so far we have
10:27 - not implemented any functionality so
10:32 - what we are going to do next is we will
10:34 - implement the functionality for this
10:36 - application so that when I type the text
10:38 - and click on this button that text
10:41 - should be added to my to-do list so
10:43 - let's close the application and let's do
10:45 - that part next so how are we going to do
10:48 - that well in order to be able to
10:50 - implement this functionality we will
10:51 - need to access these controls here from
10:55 - our code and we will need to write in
10:57 - code the behavior that we want and that
11:00 - is when I click on this button take the
11:03 - text from this text box and put it into
11:06 - this list here and that means that we
11:08 - will need to name these controls so that
11:11 - we can reference them from our code so
11:14 - if I click on this text box text box
11:16 - control and go to right click on it and
11:19 - go to properties here you should be able
11:22 - to see name property okay and as you can
11:26 - see this text box already has default
11:28 - name it's text box one also this button
11:32 - has default name it's button one and
11:34 - then this list box has default name and
11:36 - it is list box one now you can leave
11:38 - these names like this but what I
11:41 - recommend to do is to give meaningful
11:44 - names to these controls because if your
11:46 - application grows and you add new text
11:49 - boxes new list boxes new buttons then it
11:51 - is going to be extremely hard for you to
11:53 - remember which one is which if they
11:56 - don't have meaningful names so that is
11:58 - the first thing that we are going to
11:59 - change I will go to this text box again
12:03 - right click on it go to properties and
12:05 - find name
12:07 - property okay and I will call this text
12:10 - box task
12:14 - tbx okay so task text box and then I
12:19 - will also rename this button I will call
12:22 - it add task
12:25 - BTN okay so this is the name of the
12:29 - button but another thing that we can
12:31 - change for this button is the text of
12:34 - this button because currently the text
12:36 - that is shown on the button is button
12:38 - one so please keep in mind that you
12:40 - don't confuse those two so the name
12:43 - property is the name that you will use
12:45 - in order to reference that control to
12:48 - reference that button from your C code
12:51 - and the text property is the text that
12:54 - will be shown on the button itself so we
12:56 - can also change that let me find text
12:59 - property here it is okay so here I will
13:02 - say add task okay and this is just the
13:07 - text that our user will see okay so we
13:10 - have changed the name of our text box of
13:12 - our button and let's also change the
13:15 - name of our list box control so let's
13:18 - find name property where is it okay here
13:21 - it is so I will call this list box tasks
13:25 - LBX so tasks list box okay so now that
13:30 - we have named all of our controls what
13:33 - we can do is we can access them from our
13:35 - C code and implement the functionalities
13:38 - that we would like so what is the
13:40 - functionality that we would like to
13:41 - implement first that functionality is
13:43 - the following when my user clicks on
13:46 - this add task button I would like to
13:49 - take the text from this text box called
13:52 - task tbx I want to take that text and
13:56 - put it inside this list here so how are
13:59 - we going to do that well in order to
14:02 - implement that functionality you need to
14:04 - understand what are events and you can
14:07 - understand an event as an interaction
14:09 - between your user and your application
14:12 - for example an interaction between your
14:14 - user in your application is button click
14:17 - that is an event or when a user types A
14:21 - Letter into this text box or deletes a
14:23 - letter that is also an event so in this
14:26 - application we need to implement an
14:29 - event called button click event so how
14:33 - can we do that well click on your button
14:36 - actually right click on it and go to
14:38 - properties and here under this little
14:41 - thunder sign you will see events and
14:44 - here you can see the list of all of the
14:47 - events that you can Implement for this
14:50 - button and the event that we want to
14:52 - implement is called click so I will
14:55 - simply double click here and as you can
14:58 - can see it is going to implement this
15:01 - empty method which is called event
15:03 - handler meaning when the user clicks on
15:06 - the button this method here is going to
15:09 - handle that event which means it is
15:11 - going to describe the behavior of our
15:13 - application what should happen when the
15:16 - user clicks on that button an
15:18 - interesting thing is that there is
15:20 - faster way for you to do the same thing
15:23 - and that is the following go to your
15:25 - form and simply double click on your
15:28 - button and as you can see it will create
15:31 - the same event handler or if you already
15:35 - have it it will simply take you to the
15:37 - implementation that you already have we
15:39 - currently have this empty implementation
15:42 - but if we didn't have it it would create
15:45 - that default event handler now something
15:48 - very important that I just said is that
15:51 - it will create default event handler so
15:55 - what is default event and what is
15:57 - default event handler well default event
16:00 - for any control is the event that is
16:03 - most commonly used for that control for
16:06 - example for our button if you go to
16:09 - these events here you can see a list of
16:12 - a lot of different events but the
16:15 - default one the one that is most
16:16 - commonly used is Click so visual studio
16:20 - gives you this simple double clicking as
16:23 - a faster way for you to create that
16:26 - default event and each control has its
16:29 - own default event for example for a
16:31 - button that is clicking on a button for
16:35 - a text box that is you typing the text
16:38 - for a list box that is when you select
16:41 - an item of the list box and so on so if
16:45 - you want to do the same thing in a
16:46 - faster easier way you want to implement
16:48 - a default event for a certain control
16:51 - you can simply double click on that
16:53 - control without having to go to this
16:57 - list of all all of the events that is
16:59 - just one small tip and shortcut if you
17:02 - want to use it now there is one very
17:05 - important thing that I want you to keep
17:06 - in mind before you start clicking
17:09 - everywhere on your form or actually
17:11 - anywhere on your form because you might
17:13 - cause some very confusing bugs
17:16 - especially for beginners so let me show
17:18 - you what I'm talking about right now if
17:21 - I start my application we have this
17:25 - application that is running we don't
17:27 - have any problems we don't have any bugs
17:29 - it does not work the way that we want it
17:31 - to work but we can start it and it does
17:34 - not have problems so let me show you how
17:37 - you can create a problem very easily so
17:40 - let's say that you wanted to create or
17:43 - to access this button click event by
17:46 - double clicking on the button and here
17:48 - we have it but accidentally instead of
17:51 - double clicking on the button you double
17:54 - click here maybe so on the form so you
17:57 - do something like
17:59 - this okay as you can see Visual Studio
18:03 - has created another event handler called
18:06 - form one load which means when this form
18:11 - loads that is the event that we can
18:13 - handle here so now you realize oh no no
18:15 - no I don't need this I made a mistake so
18:18 - what you will do is you will simply
18:20 - delete this okay and you think that you
18:23 - have solved the problem because what was
18:26 - created you simply delet it and you
18:29 - shouldn't have any problems right wrong
18:31 - very very wrong because now if I start
18:34 - my application immediately we get this
18:37 - problem and we cannot even start our
18:40 - application or even if you go to your
18:43 - form you will not be able to see your
18:46 - form because we have a problem that is
18:49 - very very confusing for beginners so now
18:51 - I'm going to explain why do we get this
18:54 - problem in order to understand what is
18:56 - happening here let's take a look at one
18:59 - of these other files that we have not
19:01 - mentioned so far and that is this one
19:04 - form one.
19:06 - designer.cs this is file that is
19:08 - automatically generated and we have not
19:10 - written any code in it so far so if I
19:13 - open it let's see what we have inside it
19:16 - and please I don't want you to be scared
19:18 - right now because you don't understand
19:20 - what is inside here it's not important
19:23 - at this point as a beginner you don't
19:25 - need to understand the code here but
19:27 - something interesting that I want to
19:29 - show you is this part here you will also
19:32 - have this if you follow the same steps
19:33 - that I did and that is this part here
19:36 - when we created our task tbx so our task
19:40 - text box we have changed some properties
19:43 - of that textbox and our Visual Studio
19:46 - automatically in the background has
19:48 - written code for us in order to describe
19:51 - those changes so for example here is the
19:54 - font that we have set for our text box
19:58 - also here is the location meaning the
20:00 - position where we have positioned our
20:02 - text box here is its name its size and
20:06 - other properties and we have these
20:08 - things for all of the controls that we
20:10 - have added onto our form here we have
20:13 - our add task button and another
20:17 - interesting thing thing that our add
20:18 - task button has is this line here and
20:21 - this line here says hey this add task
20:25 - button has click event which was h
20:28 - handled inside this method here so that
20:31 - means when our user clicks on add task
20:35 - button invoke this Handler here so here
20:40 - we can see what is the problem that we
20:43 - are currently experiencing because for
20:46 - our form as well this line was added
20:50 - which says load event of the form is
20:54 - handled and when the form loads please
20:57 - invoke this Handler here and currently
21:01 - it is underlined because we have deleted
21:04 - it but our Visual Studio did not realize
21:07 - that we have deleted it so it did not
21:10 - remove this line here so now in order to
21:14 - solve the bug and the problem that we
21:16 - currently have we need to remove this
21:19 - line manually and that is the only thing
21:23 - that you should do inside this 41.
21:26 - designer.cs and and that is in case that
21:29 - you experience the problem that I just
21:31 - showed then you can come to this
21:34 - designer file and remove manually that
21:38 - event handler which you have deleted
21:41 - everything else that is happening inside
21:43 - this file is going to happen
21:45 - automatically and if you decide to
21:47 - change anything you can just break your
21:50 - application because Visual Studio is
21:53 - tracking everything that you do on your
21:55 - form now I'm going to close this and
21:58 - open it again and now because we have
22:01 - solved the bug we can see our form again
22:04 - so all of the changes that you make on
22:06 - this designer here of your form Visual
22:10 - Studio is going to track those changes
22:12 - and write them automatically inside this
22:16 - file here so you should not change this
22:18 - file manually except for the one thing
22:21 - that I just show you which is in order
22:23 - to fix the bug that was caused by
22:26 - deleting an event Handler okay so now if
22:30 - I run my application as you can see we
22:33 - don't have that bug anymore so again I'm
22:37 - going to close this for one designer we
22:39 - will not change anything inside it but I
22:42 - wanted to show you in case that you are
22:44 - not careful and you are clicking all
22:47 - over your form you can experience the
22:49 - bug that I demonstrated and I also
22:52 - wanted to show you the proper way to fix
22:54 - that bug so now we are going to focus on
22:58 - implementing this add task event hindler
23:02 - which is currently empty so what should
23:05 - happen when the user clicks on the
23:06 - button the following should happen we
23:09 - should take the text from this text box
23:13 - and put it into this list box here and
23:16 - in order to access these two controls
23:19 - from our code from our C code we need to
23:22 - know their names and that is the exact
23:24 - reason why we named them meaningfully so
23:27 - that we can easily remember their names
23:30 - so this text box here is called task tbx
23:34 - and this list box is called tasks LBX so
23:38 - now let's Implement our functionality
23:40 - the first thing that I will do here is I
23:43 - will create a list of strings where I
23:46 - can store all of my tasks and I will do
23:49 - that here so here I will say list of
23:54 - string and I will call it my tasks
23:59 - okay and initially it is going to be an
24:02 - empty list of strings now here I want
24:05 - you to notice that I created this my
24:08 - tasks variable my tasks list as a global
24:12 - variable and there are two reasons for
24:15 - that the first reason has to do with the
24:18 - scope meaning this here is global
24:21 - variable which means that it can be
24:23 - accessed anywhere inside this class
24:26 - which means from different functions why
24:29 - do we need that well because I want to
24:32 - be able to access it here when I'm
24:33 - adding new task but also later when I'm
24:37 - removing task that is going to be
24:39 - another function so I also want to be
24:41 - able to access the same list of tasks so
24:45 - that I can remove the task that I want
24:47 - so that is the first reason why this
24:50 - variable here is global variable and not
24:52 - just created inside this function for
24:55 - example that is the first reason and the
24:57 - second second reason has to do with the
24:59 - lifetime of the variable meaning this
25:02 - variable here was created as a global
25:05 - variable of this class which means that
25:08 - its lifetime is as long as this class
25:11 - here exists so as long as our form
25:14 - exists this variable here will also
25:18 - exist and that is exactly what we need
25:20 - because we need to show the tasks that
25:23 - our user has as long as he is looking at
25:27 - the form so if we simply created this
25:30 - variable inside this method here then it
25:32 - would just exist during the lifetime of
25:36 - this method and because we don't want
25:39 - for all of our tasks to disappear when
25:42 - this function here ends I created this
25:45 - as a global variable of my class form
25:50 - because now it will exist as long as our
25:53 - form exists so those are two reasons
25:56 - lifetime and scope so now what I'm going
26:00 - to do with this list is here when my
26:03 - user clicks the button I will simply say
26:06 - my
26:07 - tasks. ADD like this and here I want to
26:12 - add the task that my user has typed into
26:15 - the text box so I will say task
26:19 - tbx okay so I am accessing my text box
26:23 - so what will I take from this text box
26:26 - because it has many properties it has
26:28 - background color it has size it has
26:30 - position but all of those things are not
26:33 - interesting for us and what is
26:35 - interesting is the text inside that text
26:38 - box so here I will say task tbx do text
26:44 - so into this list please add the text
26:48 - from our text box okay and now I will
26:51 - simply set this my tasks as a data
26:56 - source for this list box here so I will
27:01 - say tasks
27:04 - LBX do data source is equal to my tasks
27:10 - and one thing that you should do before
27:12 - setting a new data source is you should
27:16 - simply know the data source that was
27:19 - previously assigned to your tasks list
27:23 - box because this is simply going to
27:25 - delete the previous data source in case
27:27 - that there is any and then it will
27:30 - assign a new one to your list box so
27:34 - with this we have implemented add
27:36 - functionality and now I can start my
27:38 - application and test
27:40 - it okay so let's say go to the gym and
27:45 - if I click on add task that task will
27:47 - appear inside my list box also let's say
27:51 - pay
27:52 - bills add task and then let's say learn
27:56 - coding
27:58 - Okay add task and as you can see very
28:01 - simple very easy in just a few lines of
28:04 - code you can implement this
28:06 - functionality and another functionality
28:08 - that I want to implement is now when I
28:11 - click on one of these tasks that I have
28:14 - inside my list box I want that task to
28:18 - disappear I want to remove it so let me
28:21 - show you how you can solve that problem
28:24 - let's close our application and I will
28:27 - go to my form and what I need to do is I
28:31 - need to find an event of this listbox
28:35 - control so right click on it properties
28:39 - and then go to this little Thunder
28:42 - symbol where you have all of the events
28:45 - here you have the list of all of the
28:48 - events and the event that I want to
28:51 - implement is Click event so double click
28:55 - here and it will imp implement the click
28:58 - event handler for our tasks list box and
29:02 - here we will write the code to remove
29:04 - the task that we have clicked on so how
29:08 - can we do that it's actually very easy
29:11 - so I will take this list where we store
29:14 - all of our tasks and instead of adding
29:17 - new tasks to our list I will say
29:21 - remove at and this method here removes
29:25 - an element at a specific if position so
29:28 - inside these parentheses I will pass the
29:32 - index of the element that I want to
29:34 - remove so how can I get that index how
29:36 - can I know which task which item to
29:40 - remove well our list box control this
29:45 - control here has a property called
29:47 - selected index and selected index is the
29:50 - item that you have clicked on the one
29:52 - that is selected so here we will simply
29:56 - say t tasks LBX do
30:00 - selected index like this and this is
30:05 - going to remove the selected task from
30:10 - the list of all of our tasks and then
30:13 - simply what we can do after that is we
30:17 - will reset the data source of our list
30:21 - box control and then we will set it to
30:24 - this list again because now we have
30:27 - removed that task from our list so now
30:30 - if I start my application let's add a
30:33 - task let's say go to the gym click on
30:37 - ADD and let's say also learn coding
30:42 - click on ADD and now we have two tasks
30:46 - so for example when you finish learning
30:48 - the code when you finish watching this
30:49 - video you want to remove this task so
30:51 - you simply click on it and it is going
30:54 - to disappear and I can also remove this
30:58 - one and that is your proof that this
31:01 - method here works so here we have
31:03 - created a fully functional application
31:05 - and if I didn't explain all of these
31:07 - other things that you need to understand
31:09 - then it would be possible to create this
31:12 - entire application in literally 2
31:15 - minutes because it has one four seven
31:19 - lines of code that we have written so
31:21 - with just seven lines of code we have
31:23 - been able to create this application but
31:26 - the thing is is that you really do need
31:29 - to understand all of these other things
31:31 - that I have explained in order to be
31:32 - able to create practical applications
31:36 - and this that I have showed you in this
31:39 - very short video is barely scratching
31:41 - the surface because there are a lot more
31:44 - things that you need to understand and
31:45 - that you need to learn if you want to
31:47 - build useful applications that have a
31:50 - lot of users and that can earn a lot of
31:53 - money and all of those things we are
31:55 - covering in my practical programming
31:57 - course because there we have a lot more
31:59 - time I have personally invested a lot of
32:02 - time to create perfect examples for you
32:05 - in order to learn practical programming
32:07 - so that you are able to solve real world
32:10 - problems with your applications so if
32:13 - you want to learn all of that and if you
32:15 - want to transform your career and go
32:18 - from beginner developer to experience
32:21 - developer then I will leave a link in
32:23 - the description that you can use in
32:25 - order to start learning proess iCal
32:27 - programming and before I end this video
32:30 - there is one very important thing that I
32:32 - want to show you because I don't want to
32:33 - make this video too long because then no
32:35 - one is going to watch it but I also have
32:39 - to show you something very important and
32:41 - that is how to fix bugs because
32:43 - currently unfortunately we have a bug in
32:47 - our program let me show you so I am
32:50 - going to start my application and at the
32:53 - moment we don't have any tasks inside
32:55 - our list box so what is going to happen
32:58 - if I click on my list box let's see okay
33:02 - and as you can see immediately our
33:04 - application crashes and we get this
33:07 - error which says index was out of range
33:10 - blah blah blah very hard to understand
33:13 - for beginners so the reason why we are
33:16 - experiencing this bug is because this
33:20 - method here this task list box click is
33:23 - expecting to remove a task from our list
33:27 - box at a selected index but we don't
33:30 - have any tasks so now what I can do is I
33:34 - can hover over this selected index okay
33:37 - and as you can see it says that selected
33:39 - index is minus one what does that mean
33:43 - well for all those of you who have
33:45 - studied a little bit about data
33:47 - structures you know that the indexation
33:49 - of an array or a list starts with zero
33:53 - that means that the first element has
33:55 - the index of zero the second has the
33:56 - index IND of one and then 2 3 4 5 and so
33:59 - on so what does the index of minus one
34:03 - mean that means nothing no element was
34:07 - selected which means our list is empty
34:10 - we currently don't have any elements so
34:13 - now what we need to do is we need to
34:16 - prevent this code here from executing if
34:20 - we don't have any elements inside our
34:23 - list and there are a few ways to do that
34:26 - so I'm going to to show you two ways the
34:28 - first way is to use the information that
34:31 - we already have here and that is to say
34:34 - if task LBX selected index is minus one
34:39 - then please return from this function
34:42 - and don't execute any of the code so
34:45 - let's use that approach first I'm going
34:48 - to copy this code and before I start
34:50 - writing any new code I will stop my
34:52 - application okay so here I will say if
34:57 - selected index is equal to minus minus
35:01 - one like this what I want to happen is I
35:04 - will simply say return which means hey
35:08 - please stop the execution of this
35:10 - function and return here so don't
35:12 - execute any of this code here so now if
35:15 - I start my application we shouldn't have
35:18 - that bug anymore so if I click on my
35:21 - empty list box nothing is going to
35:24 - happen if I add new task as you can see
35:27 - it was added I can remove it but again
35:30 - if I click on empty list box we don't
35:32 - have that exception anymore so that is
35:35 - one way to fix the bug another way is
35:39 - instead of saying this what you can say
35:42 - is you can say
35:44 - if my tasks which is the list where you
35:49 - keep all of your tasks so if its count
35:54 - is less than or equal to zero then
35:58 - return which means if I don't have any
36:01 - tasks inside this tasks list then there
36:04 - is nothing to remove so please return
36:07 - from this function and this is another
36:10 - way to prevent the exception from
36:11 - happening so again if I start my
36:14 - application and I click on this empty
36:17 - list box we don't have the exception if
36:19 - I add a task let's say task one and I
36:24 - add it I can remove it but if I click on
36:29 - the empty list box we don't have that
36:31 - exception anymore so those are two ways
36:34 - to prevent that bug that we previously
36:37 - had from happening so I believe it is
36:40 - going to be enough for this video I
36:42 - don't want to make it too long because
36:44 - then no one is going to click on it no
36:46 - one is going to click on a video that is
36:48 - two hours long and watch the entire
36:50 - video so I definitely don't want that
36:52 - because I hope that all of the things
36:54 - that I have shared in this video are
36:56 - useful to you that You' learned
36:57 - something new but as I said
37:00 - unfortunately all the things that you
37:02 - have learned in this video are barely
37:04 - scratching the surface because there are
37:07 - a lot more things that you need to know
37:09 - a lot more things that you need to
37:10 - understand in order to be able to build
37:13 - real world applications like the ones
37:15 - that you and me use every day so if you
37:18 - want to learn that if you want to learn
37:20 - practical programming then definitely
37:22 - join my course and there I'm going to
37:25 - teach you step by step from beginner to
37:28 - expert everything in one place all of
37:31 - the things that you need to know in
37:33 - order to start building real practical
37:36 - applications all of the things that you
37:37 - need to know in order to get a job and
37:40 - not just any job but the job that you
37:42 - truly like and enjoy so the course has
37:46 - been launched just a few days ago and we
37:49 - already have a lot of people who have
37:51 - drastically improved their programming
37:53 - skills so if your goal is to finish
37:55 - University this course is definitely
37:58 - going to take you light years ahead of
38:01 - all of your peers if your goal is to get
38:03 - a job then as I said you will be able to
38:06 - get the job that you truly enjoy because
38:09 - you will understand programming in depth
38:12 - and we also have some people who have
38:14 - some great ideas about the applications
38:17 - that they want to build but they lack
38:19 - practical experience and practical
38:21 - knowledge and this course will give them
38:24 - all of the skills and all of the
38:25 - knowledge that they need in order to be
38:27 - able to transform those ideas into
38:30 - reality so in the future I truly believe
38:32 - that some of those people who finish
38:35 - this course will be creators of the
38:37 - applications that you and me are going
38:39 - to use in the future some of the great
38:42 - applications that will come and I am
38:44 - very happy to be part of that journey
38:47 - and I am very happy to be mentor of such
38:50 - great people so if you also want to join
38:53 - us if you want to meet friends and other
38:56 - driving developers then definitely click
38:59 - the link in the description it is also
39:00 - going to be my pleasure to be your
39:02 - Mentor so if you are decided that you
39:05 - want to learn programming and if you
39:07 - want to start today click the link in
39:09 - the description and I will see you in a
39:12 - minute so thank you very much for
39:13 - watching and I will see you in another
39:15 - video bye