00:00 - hi guys and welcome to my channel in
00:02 - this video I'm going to teach you about
00:03 - arrays of objects and most common
00:06 - operations and algorithms that are
00:08 - performed on arrays of objects this
00:11 - topic is very important for everyone who
00:12 - is trying to learn about algorithms and
00:14 - data structures and also every single
00:17 - developer should know about the things
00:19 - that I will teach you in today's video
00:21 - and at the end I have a practical task
00:23 - for you that you can use to practice and
00:26 - to upgrade your skills on your own and
00:28 - before we start with the topic of
00:30 - today's video as many of you already
00:32 - know for the past year I have been
00:34 - working on a practical programming
00:36 - course and the goal of this course is to
00:39 - help you to think as a programmer and to
00:42 - build that strong in-depth understanding
00:44 - of programming so this practical
00:47 - programming course will 100 lead you to
00:50 - getting your first job as a software
00:51 - developer or to getting a better job if
00:54 - you already have one and I am going to
00:56 - be your Mentor I will systematically
00:58 - step-by-step guide you through the
01:00 - entire process this is going to be a
01:02 - complete Journey from beginner to expert
01:04 - in programming and we will solve a lot
01:07 - of real world problems with code and I
01:10 - will also teach you and pass on you all
01:12 - of the experience that I have acquired
01:14 - in the past 10 years of coding because
01:16 - this community means a lot to me and you
01:18 - have been supporting me for years I feel
01:21 - like you deserve a special discount when
01:23 - compared to other people so I will put a
01:25 - link in the description that you can use
01:27 - to sign up and once the course launches
01:30 - which will be soon I will send you a
01:32 - discount but make sure to do it right
01:35 - now it's completely free but the number
01:37 - of people that can get this discount is
01:40 - limited so again if you are interested
01:42 - make sure to sign up right now so with
01:44 - that being said let's proceed with
01:47 - today's topic so here I have the code
01:49 - that I have written beforehand and here
01:51 - we have a class called student each
01:54 - student has these four properties name
01:57 - age gender and programming grade and and
02:00 - it also has this parametrized
02:02 - Constructor which receives these four
02:05 - parameters and then based on the values
02:07 - that we receive inside our Constructor
02:09 - we are going to assign them to the
02:11 - properties of our student and we are
02:13 - going to construct student object in
02:16 - that way and all of this code is inside
02:19 - public area of our class so that it is
02:23 - accessible outside of the class as well
02:25 - okay so that is the code that we have so
02:28 - far and if you are not familiar with
02:30 - some of the things that I mentioned make
02:32 - sure to watch my video about classes and
02:34 - objects I will link it here and also in
02:36 - the description and if you don't
02:38 - understand the idea of Constructors then
02:41 - you can watch my video about different
02:43 - types of Constructors in order to
02:45 - understand this code in detail so what I
02:48 - want to do now is I want to create an
02:51 - array of students and initialize it so
02:53 - that we have some data to work with and
02:55 - in one of my previous videos it will be
02:57 - linked here and also in the description
02:59 - I explained different ways on how you
03:02 - can initialize an array of objects so
03:05 - right now I'm going to use the fastest
03:08 - and the most appropriate approach for
03:10 - this case so here I already have the
03:14 - code for initializing an array of
03:16 - students and I am going to explain it
03:18 - very quickly so with this we have
03:20 - created an array called students it is
03:23 - an array of five elements and it is of
03:26 - type student which means that inside it
03:28 - we can only store students and then you
03:31 - put these curly brackets and at the end
03:33 - please don't forget the semicolon at the
03:35 - end because otherwise you are going to
03:36 - have an error and then inside these
03:38 - outer curly brackets you have inner
03:41 - curly brackets for each student that you
03:43 - want to add to your array so the first
03:45 - student is John he has 20 years he's
03:49 - male and his grade is nine so we use
03:53 - this Constructor here in order to create
03:56 - each student for our arrays so this is
04:01 - one approach that you can use in order
04:02 - to initialize an array of objects okay
04:05 - so here is our data that we will use in
04:07 - order to work with for this video so the
04:10 - first thing that I want to teach you is
04:11 - how you can search through an array of
04:13 - objects and I will show you how you can
04:15 - write an algorithm to do that yourself
04:17 - so how you can do that manually okay so
04:20 - here we have an array of five students
04:23 - but we could also have an array of 500
04:25 - or 5 000 students and you would use the
04:28 - same approach so what I want to do let's
04:31 - say for example that I want to find a
04:33 - student whose name is Alice and I want
04:36 - to change the programming rate of Alice
04:38 - to 10 let's say so what I will do is I
04:42 - will write a for Loop that is going to
04:44 - iterate through the entire array I will
04:47 - compare the names of students inside the
04:49 - array with the name that I want to find
04:51 - which is Alice and once I find match
04:55 - then I will change programming grade of
04:57 - that student so let's write that code I
04:59 - will say four
05:01 - and I is equal to zero I is less than or
05:05 - equal to 4 I plus plus okay one very
05:09 - important thing to keep in mind is that
05:11 - indexation of the array starts with zero
05:13 - not with one with zero that means that
05:15 - the first element of your array has the
05:18 - index of zero second element has the
05:21 - index of one and then third has the
05:22 - index of two and so on so the indexes of
05:26 - this array here go from zero to four and
05:30 - it is very important that you keep that
05:31 - in mind because otherwise you can get a
05:34 - very very dangerous bug error exception
05:37 - that is called index out of range or
05:39 - index out of bounds that is very common
05:41 - error and you should already be familiar
05:43 - with this if you watched my previous
05:45 - video about arrays of objects I will
05:48 - link it here I'll also put it in the
05:50 - description so make sure to watch it if
05:52 - you skipped that video okay so here I
05:55 - have a for Loop that will iterate from 0
05:57 - to 4 and inside it I want to find
06:01 - students
06:03 - of I
06:05 - dot name so what I want to do is I want
06:08 - to check if students of I dot name is
06:12 - equal to Alice because that is the
06:14 - student that I am searching for what I
06:17 - want to do in that situation is when
06:20 - this condition here is met what I want
06:22 - to do is I want to say for example let's
06:25 - print I always found
06:27 - at index
06:32 - and then let's print the index of Alice
06:36 - okay
06:37 - like this and what I want to do also is
06:41 - I want to take this student I want to
06:43 - take Alice and I want to change her
06:46 - programming grade to 10. so this is how
06:49 - you can iterate through your array of
06:51 - objects and find any object based on
06:54 - certain criteria in our case that is the
06:57 - name of student now one very important
07:00 - thing is that once you find this student
07:03 - and as you can see here Alice is on
07:05 - position on index number two that is
07:07 - third position but that is index number
07:09 - two once you find Alice there is no need
07:12 - to search any longer there is no need to
07:15 - check if Sardina or any more students
07:18 - that you have so in that case once I
07:20 - have found my student and once I have
07:22 - changed her programming grade what I
07:24 - will do is I will simply say break which
07:27 - means now please leave this for Loop
07:30 - there is no need for you to execute it
07:32 - any longer and to take resources of my
07:34 - computer because I have found what I was
07:37 - looking for and this approach here is
07:39 - how you can search through an array of
07:42 - objects so let's run this program to
07:44 - check if the code works as we expected
07:47 - and as you can see it it says I was
07:49 - found at index two so 0 1 2 and the code
07:54 - works correctly another algorithm that
07:56 - is used very often with arrays of
07:58 - objects is sorting algorithm so now I
08:01 - will show you how you can sort this
08:04 - array of objects and for that I am going
08:07 - to show you a library that contains a
08:10 - lot of different methods a lot of
08:11 - different algorithms that we can use in
08:14 - order to work with our data collection
08:16 - so that library is called algorithm and
08:19 - you need to include it so you need to
08:21 - say include algorithm
08:24 - like this and inside it we have a lot of
08:27 - methods that we can use in order to work
08:30 - with our arrays of objects so one of
08:33 - those methods is sort so let's sort our
08:37 - array of students now this sort method
08:41 - receives three parameters the first
08:43 - parameter is pointer to the beginning of
08:46 - our array and as you already know or
08:50 - should know uh the name of our array is
08:53 - the pointer to its first element which
08:55 - means that the first parameter here will
08:58 - be the name of the array so that is the
09:01 - first parameter the second parameter is
09:03 - the pointer to the last element of our
09:06 - array so since we have five elements
09:09 - here the last element is students plus
09:13 - five so the pointer to the first and
09:17 - then we move five more spaces in memory
09:20 - and that will be the pointer to the last
09:22 - to the fifth and then third parameter is
09:26 - a custom method that we have to write
09:27 - now what is this custom method well
09:31 - imagine if someone told you in real life
09:33 - hey you have this array of students can
09:36 - you please sort them you would have some
09:38 - additional questions right you would
09:40 - have questions like do you want me to
09:42 - sort them by age or by grade or
09:45 - alphabetically by name or something like
09:47 - that so you would need some additional
09:49 - information and the same way our sort
09:52 - function needs additional information on
09:55 - how to sort this array of students
09:58 - because sorting an array of integer
09:59 - numbers is much more simple than sorting
10:02 - an array of students so here we will
10:04 - have to pass it a custom method that
10:07 - will tell to this sort algorithm how to
10:10 - sort students so let's say that we want
10:13 - to compare these students by grade so
10:15 - let's write compare
10:18 - by grade okay and this compare by grade
10:23 - will be the method that we will
10:25 - Implement so let's do that so let's see
10:27 - how we can implement this method I will
10:30 - put its implementation here and there
10:32 - are two important things regarding the
10:33 - implementation first thing is that it
10:36 - needs to return Bull type so true or
10:39 - false and the second thing is that it
10:42 - needs to receive two objects of type
10:44 - student in our case so I would say
10:47 - compare by grade and here two parameters
10:51 - so student S1 and then student oh my God
10:56 - student
10:58 - S2 like this okay so inside this method
11:02 - here I will provide it a way to compare
11:05 - two students and here I will say please
11:08 - return if student1 dot programming grade
11:11 - is less than student2 dot programming
11:15 - grade like this now what this here means
11:17 - is the following if student1 dot
11:20 - programming grade is less than students
11:22 - 2 programming grid that means that in
11:25 - general student one is less than student
11:27 - two and not in some negative judgmental
11:30 - way it just means that student one will
11:34 - be before student two in our array okay
11:38 - so that will be the result of this
11:40 - function Here and Now what I can do is I
11:44 - can test this program so let's very
11:47 - quickly write a for Loop that will
11:49 - simply print the names of our students
11:51 - after they are sorted so that we can
11:54 - check if this works correctly so here I
11:57 - will say 4 int I is equal to 0 I is less
12:01 - than or equal to 4 I plus plus
12:04 - okay and then we are simply going to say
12:08 - C out and then let's say students
12:11 - of I dot name
12:15 - and let's put an end line like this so
12:18 - now if I start the program let's see the
12:21 - result okay so here are sorted students
12:25 - by grade and then here is our initial
12:28 - array of students so Selena is first she
12:32 - should have the lowest grade it's 7.2
12:34 - and then it's Bob Bob has eight and then
12:37 - Eve 8.5 John has nine and Alice who has
12:43 - 9.2 actually we change the grade we
12:46 - changed Alice's grade to 10 here so
12:48 - Alice has 10. okay so as you can see our
12:52 - sort function works correctly and if you
12:55 - wanted to sort these students from the
12:57 - highest grade to the lowest you would
12:59 - simply change this
13:02 - to greater than and if I run the program
13:06 - now we should have students in the order
13:08 - from the highest grade which is Alice
13:11 - and then the lowest grade should be at
13:13 - the end
13:14 - now let me enforce some good programming
13:16 - practices on you and instead of passing
13:20 - student S1 and student S2 by value like
13:23 - we did so far let's pass them by
13:26 - reference like this
13:28 - so what is the difference and why this
13:31 - approach here is better well if you
13:34 - don't pass parameters to a function by a
13:36 - reference that means that you are
13:37 - passing them by value and in that case
13:39 - compiler is making a copy of each object
13:43 - and then it is working on that copy so
13:46 - it is taking additional time to make
13:48 - copy and it is also using additional
13:51 - resources so if you don't want to do
13:54 - that if you don't want to make a copy
13:56 - when you are invoking a function and
13:58 - passing an object what you can do is you
14:01 - can pass that object by a reference and
14:04 - you do that like this with this
14:06 - Ampersand this end symbol okay and in
14:09 - that case you are passing the original
14:11 - object to your method and your method is
14:14 - going to work on the original object now
14:17 - here we have one potential dangerous
14:20 - situation that now this function can
14:23 - change this student S1 and S2 and all of
14:28 - those changes that this function here
14:30 - could potentially do will be reflected
14:33 - on the original object and we don't want
14:35 - to do that so we should not allow that
14:38 - and in order to make sure that this
14:41 - function will not change the objects
14:43 - that we have passed to it what we can do
14:46 - is we can now make these objects to be
14:49 - const like this
14:51 - so by doing this we are saying hey I'm
14:55 - passing you the original object but I
14:58 - want to make sure that you cannot change
14:59 - it inside this function here so I'm
15:02 - making it constant so everything will
15:05 - work the same as it already did but
15:07 - these are just some best practices that
15:10 - you should follow in your day-to-day
15:11 - coding and that you should know about
15:14 - now there is something else that I want
15:16 - to show you so far we have sorted our
15:19 - students by grade but what happens if we
15:22 - want to sort them by name for example
15:24 - how are we going to do that well for
15:27 - that we are going to implement a
15:28 - different compare method I will copy
15:30 - this one
15:32 - and I will adjust it I will call it
15:34 - compare by name it will also return Bull
15:38 - and it will receive two students but
15:41 - here instead of comparing those two
15:43 - students by grade I will simply say S1
15:45 - dot name is less than S2 dot name okay
15:50 - so now you may wonder how does this make
15:53 - sense well it does because in computers
15:56 - deep down everything is numbers which
15:59 - means that letters are also numbers and
16:03 - in order to understand that you should
16:04 - be familiar with something called ASCII
16:06 - code and ASCII code stands for American
16:09 - Standard code for information
16:10 - interchange and it assigns a number to
16:14 - every letter for example lowercase
16:17 - letter a is in the background number 97
16:20 - lowercase letter B in the background is
16:23 - number 98 and then C is 99 and so on and
16:27 - also lowercase and uppercase letters are
16:30 - represented with different numbers so
16:32 - that basically means that you can
16:34 - compare two letters and you can say
16:36 - which one of those two letters is bigger
16:38 - and which one is smaller so in this case
16:42 - this function is going to sort our
16:45 - students in the ascending order meaning
16:48 - from the A to Z so if I use this compare
16:52 - by name inside our sort and then I start
16:56 - my program
16:58 - I expect my students to be sorted in the
17:02 - A to Z alphabetical alphabetical order
17:04 - so Alice Bob Eve John and Selena even
17:08 - though in the initial collection here
17:11 - they are not in the alphabetical order
17:13 - and then if you want to sort them in the
17:16 - reverse order you will just change the
17:19 - sign here so if I start my application
17:21 - again as you can see now they are sorted
17:24 - in the reverse order now there is also
17:27 - another way to reverse an array and that
17:30 - is with the help of function called
17:32 - reverse so I will write that function
17:35 - here
17:36 - so you simply say reverse okay and this
17:40 - function receives two parameters and
17:43 - those are these two so it receives a
17:46 - pointer to the beginning of the array
17:48 - and then a pointer to the end of the
17:51 - array like this so now if we start the
17:54 - program as you can see students are in a
17:57 - to z order once again there are two more
18:00 - very common operations that you would
18:02 - use on an array of objects that I want
18:04 - to show you and those are finding Max
18:07 - element and finding Min element inside
18:09 - your array so there is a function that
18:13 - is used for that actually two functions
18:16 - one is Max element and another is min
18:19 - element so let's say Max element and
18:23 - this function receives three parameters
18:26 - it receives the beginning of the array
18:29 - and then it receives the pointer to the
18:32 - end of the array okay and then here it
18:36 - receives gives a method custom method
18:39 - that it will use in order to compare
18:41 - objects so here I will pass it compare
18:44 - by grade
18:46 - and you need to make sure that this
18:48 - compare by grade is ordering elements
18:51 - from the smallest to the biggest so we
18:54 - need to change this sign
18:56 - to be this so student one is smaller or
19:01 - less than student two okay and then this
19:06 - method will correctly return Max element
19:08 - actually it will return the pointer to
19:11 - the max element of our array so what we
19:14 - should do is we should store that
19:15 - element inside a variable so I will say
19:18 - student
19:20 - pointer because it returns pointer and I
19:23 - will call it Max grade student
19:27 - like this okay so this is going to be my
19:31 - method let me put it in a new line okay
19:34 - and now once I have my Max grade student
19:37 - what I can do is I can simply say C out
19:40 - and then let's say Max grade student is
19:45 - and then let's say Max grade student and
19:49 - I am using this Arrow because we are
19:52 - working with pointers in order to access
19:53 - the properties of this object and here I
19:57 - simply want to print the name of my Max
19:59 - grade student okay and let's put an end
20:03 - line because at the same time I want to
20:05 - show you how Min element method works so
20:08 - I will simply copy this
20:12 - and I will hear say Min great student
20:16 - and instead of invoking Max element I
20:19 - will invoke Min element method it
20:22 - receives the same parameter so pointer
20:25 - to the beginning of the array pointer to
20:27 - the end of the array and custom method
20:29 - that will be used in order to compare
20:32 - objects and here I will say that mean
20:36 - grade student is and then mean grade
20:39 - student and I want to print his name
20:42 - okay so I don't need this code anymore I
20:47 - will comment it and now if I run my
20:50 - program let's see what is going to be
20:51 - the result of these two methods okay so
20:54 - max grade student is Alice and then mean
20:57 - grade student is Selena let's see if
20:59 - that is correct and Alice has 9.2 and
21:02 - Selena has 7.2 so the result is correct
21:06 - so that would be all for this video and
21:08 - as I promised at the beginning I also
21:10 - have a task for you that you can use in
21:12 - order to practice and the task will be
21:15 - the following I want you to create a
21:17 - class called Product like I did here for
21:20 - my student and each product will have
21:23 - name type and price
21:25 - type can be for example Tech or food or
21:29 - clothes or something like that and then
21:31 - what I want you to do is I want you to
21:34 - write a program that will be able to
21:35 - sort all of the products from the
21:38 - cheapest to the most expensive and I
21:41 - also want you to allow to your user that
21:43 - he can enter the name of the product and
21:46 - then you are going to print the price of
21:48 - that product you are going to search
21:49 - through your array of products and when
21:51 - you find that product you will print the
21:53 - price of that product and if you don't
21:55 - have the product that he's searching for
21:57 - in your array then you will print the
21:59 - information that product is not
22:01 - available and one very important tip
22:03 - that you should keep in mind is that
22:05 - when you are comparing the names of
22:07 - products then you should keep in mind
22:09 - that if he enters this and this those
22:13 - are not the same things so lowercase and
22:17 - uppercase are not the same thing in
22:20 - programming so please keep that in mind
22:21 - so that would be all for this video If
22:24 - you enjoyed it please give it a big
22:25 - thumbs up and if you want more videos
22:27 - like this let me know in the comments
22:29 - and also if you have any questions
22:31 - regarding today's video or if you have
22:33 - any questions regarding programming in
22:35 - general leave those questions in the
22:37 - comments and I'm going to reply them in
22:39 - some of my future videos so thank you
22:41 - very much for watching and I will see
22:43 - you in some other video bye