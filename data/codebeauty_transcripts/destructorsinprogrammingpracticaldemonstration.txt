00:00 - hi guys and welcome to my channel in
00:02 - this video I'm going to teach you about
00:03 - these structures in programming you will
00:06 - learn what are the structures how to use
00:08 - them and when also make sure to watch
00:10 - this video Until the End because I have
00:12 - a special surprise for you so in my
00:14 - previous video we talked about
00:16 - Constructors and it is necessary to
00:18 - understand what are Constructors before
00:21 - you try to watch this video and
00:23 - understand what are these structures so
00:25 - make sure to watch that video it will be
00:27 - linked here and I will also put it in
00:29 - the description so the reason why we
00:32 - need these structures is to perform
00:34 - necessary cleanup tasks before an object
00:37 - is destroyed so all the resources that
00:39 - object was holding like memory or files
00:42 - and things like that all of those things
00:45 - need to be released and deallocated
00:47 - before the object is destroyed because
00:50 - otherwise they can degrade performance
00:52 - and stability of your application and
00:55 - cause memory leaks
00:57 - and before we start talking about these
00:59 - structures I want to introduce you with
01:01 - a tool that I love to use which helps me
01:04 - to write better code without bugs it is
01:06 - called PBS studio and it is static code
01:10 - analyzer that means that it will analyze
01:12 - your code for potential issues and bugs
01:15 - which is super useful as you will see in
01:18 - this video so it can help you prevent
01:20 - many errors and catch bugs before they
01:23 - go in production which will save you a
01:25 - lot of hours that you would otherwise
01:27 - spend debugging your code fixing errors
01:29 - and that means that it will save you a
01:31 - lot of money so it will definitely help
01:33 - you to improve the quality of your code
01:35 - and to avoid different errors and
01:38 - optimize your code it is very easy to
01:40 - integrate with visual studio and other
01:42 - Ides and also you can use it for C C
01:45 - plus plus C sharp and Java you have my
01:49 - link in the description that you can use
01:51 - to download it and start a free trial
01:53 - but definitely make sure to read on
01:55 - their page because if you are a student
01:56 - you have different options to get it
01:58 - completely free so make sure to try it
02:01 - out and see for yourself how it is going
02:03 - to help you to write better code faster
02:05 - and to avoid bugs so what is this
02:09 - structure this structure is a special
02:11 - type of function that is invoked
02:12 - whenever an object is being destroyed
02:15 - and we will see an example of
02:16 - destructors in a minute when we start
02:19 - writing the code so first I want to
02:21 - explain that the job of this structure
02:23 - is opposite of the job of a Constructor
02:26 - which means that whenever you allocate
02:28 - memory for your object you invoke a
02:30 - Constructor and then when you need to
02:32 - de-allocate that memory or free that
02:34 - memory you invoke the instructor okay so
02:38 - let's see how this works in code and I
02:40 - will show you an example of these
02:42 - structures
02:43 - so let's create a class I will call that
02:45 - class book
02:49 - okay so inside it I won't have two
02:52 - properties let's say string title
02:55 - and let's say string author or writer
03:01 - like this so as we already said
03:04 - Constructors are invoked at the
03:06 - beginning of a life of an object and
03:08 - these structures are invoked at the end
03:10 - of its life so let's create a
03:12 - Constructor and also Destructor to show
03:15 - this on an example so let's first create
03:17 - Constructor again if you're not familiar
03:19 - with Constructors make sure to watch
03:21 - that video it will be linked in the
03:23 - description so I will create Constructor
03:25 - I will say book
03:28 - okay and inside here I will receive two
03:31 - parameters string title
03:34 - and string author
03:37 - like this so inside here I just want to
03:41 - assign this title
03:43 - to this title that I've received as a
03:47 - parameter like this and then also I want
03:49 - to do the same for author
03:52 - okay so author is the same as this that
03:56 - we have received as a parameter one very
03:58 - important thing is that both Destructor
04:00 - and Constructor should be in the public
04:02 - section of your class so here I will say
04:06 - that everything inside this class is
04:09 - public okay so this is an example of a
04:12 - Constructor now let's see how we can
04:14 - create a Destructor first you put tilde
04:17 - sign and then you give it a name and
04:20 - then you do this okay so this is the
04:23 - example of a Destructor and there are
04:25 - seven important things that I want to
04:27 - mention here the first one is that the
04:29 - instructor always starts with this tilde
04:32 - sign this is called tilde sign and in
04:35 - case that you cannot find it on your
04:36 - keyboard I'm going to paste this code in
04:39 - the comments so you can copy it and use
04:41 - it for yourself or you can Google this
04:43 - symbol again it's called tilde and then
04:47 - second rule is that the name of the
04:48 - instructor is the same as the name of
04:50 - your class third rule is that Destructor
04:54 - does not have return type not even void
04:57 - so both Constructor and Destructor do
05:00 - not have return types that is third rule
05:03 - fourth rule is that the instructor does
05:06 - not receive any parameters and then
05:08 - fifth rule is that it needs to be a
05:12 - member of your class so it is a member
05:14 - function of your class sixth rule is
05:17 - that it needs to be placed in public
05:19 - area of your class and then rule number
05:22 - seven is that it can be only one
05:25 - Destructor per class so you can have
05:27 - multiple Constructors but only one
05:29 - Destructor okay now let's demonstrate
05:33 - when these two are invoked so let's type
05:37 - here something like C out and then let's
05:40 - say
05:41 - the instructor invoked
05:47 - okay
05:48 - and let's also add the title of the book
05:51 - so that we know for which book this
05:54 - Destructor was invoked like this and
05:57 - then let's do the same for Constructor
05:59 - here I will say that Constructor
06:05 - okay Constructor invoked for this title
06:08 - and then here the instructor invoked for
06:10 - this title now what I want to do is I
06:12 - want to create a few books to show you
06:14 - when both Constructor and Destructor are
06:18 - being invoked so let me very quickly do
06:21 - that here and then I will be back so
06:23 - here I have created two books the first
06:26 - one millionaire Fastlane is by MJ
06:28 - DeMarco and it's a great book for those
06:30 - of you who want to learn about
06:31 - businesses and managing finances I
06:34 - recommend highly and then the second one
06:37 - is actually a great book for learning C
06:39 - plus which is I believe more for you
06:42 - um and I found this book on the internet
06:44 - it costs between 10 to 15 dollars but I
06:48 - have a link where you can also download
06:50 - it for free and I will put it in the
06:52 - description or I will pin it in a
06:54 - comment so make sure to check that out
06:55 - okay
06:57 - so here we have two books and for
07:01 - creating these two books we are invoking
07:03 - this Constructor but these books should
07:06 - also be destroyed at the end of their
07:09 - scope which is the end of application so
07:13 - let's put a break point here and let's
07:15 - see what is happening inside our program
07:18 - let's debug this program so if I started
07:21 - let's see what is going to happen so as
07:24 - you can see our application was passed
07:25 - here and if I press f11 as you can see
07:28 - we are going into the Constructor and we
07:31 - are performing all of these lines and
07:34 - then we have created this first book as
07:37 - you can see titled millionaires Fastlane
07:40 - MJ DeMarco and then the second book is
07:42 - still not created as you can see error
07:44 - reading characters of string so the
07:46 - first book was created the second book
07:48 - was not still so if I press 11 f11 again
07:52 - we are again going into the Constructor
07:55 - but this time for this C plus plus book
07:58 - and then we are creating the C plus book
08:02 - okay and now the second book should be
08:04 - created as well now we came to the end
08:08 - of our function so if I press f11 here
08:11 - let's see what is going to happen
08:14 - okay and as you can see the execution of
08:18 - our program was moved to this Destructor
08:21 - so here it is invoking the structure for
08:24 - C plus plus Lambda story
08:27 - okay and then once more it's here and if
08:30 - I press f11 again again we are going
08:33 - into this function and we are destroying
08:36 - millionaires fast lane book okay and if
08:39 - I press f11 again as you can see our
08:42 - application will close now so one
08:45 - interesting thing that you maybe noticed
08:48 - or maybe you didn't is that the
08:51 - structure was invoked in the reverse
08:54 - order so when you are invoking
08:56 - Constructor it will be invoked in this
08:58 - order so this book will be created first
09:01 - and then this book will be created
09:03 - second but when you are destroying these
09:06 - objects at the end of their scope this
09:08 - structure is going to be invoked in the
09:10 - reverse order which means that this book
09:12 - will be destroyed first and then this
09:15 - book will be destroyed second
09:18 - one important thing that I want to tell
09:20 - you is that if your program looks like
09:22 - this which means if your class looks
09:25 - like this then you don't need to create
09:27 - your own Destructor why because compiler
09:31 - is smart enough to know how to destroy
09:34 - an object that looks like this what do I
09:36 - mean by this well I mean that this
09:38 - program doesn't have any pointers but as
09:41 - soon as you start adding pointers and
09:44 - working with pointers then you
09:46 - definitely need to create Destructor you
09:49 - also need to create copy Constructor and
09:51 - assignment operator and those are
09:53 - separate topics that I have already
09:55 - filmed for different videos and as soon
09:58 - as I edit them and publish them I will
10:00 - link them in the description so make
10:01 - sure to watch those definitely so again
10:04 - as soon as you start adding pointers
10:06 - then you must create your own Destructor
10:10 - because otherwise you are going to have
10:12 - memory leaks so let's create that
10:14 - situation let's add pointer let's say
10:15 - for example int pointer rates
10:20 - okay and let's also say int rates
10:23 - counter
10:25 - like this so what I have done by this is
10:29 - I said hey I want to create an array of
10:32 - rates that will hold integers and this
10:35 - rate is going to be a pointer which
10:37 - means that it is going to point to the
10:39 - first position of my array and I also
10:43 - have to specify in that case how many
10:45 - elements that array is going to have and
10:47 - I've done that by saying rates counter
10:50 - so here I will store the number of
10:52 - elements that this array here is going
10:55 - to have so now what I want to do is here
10:59 - inside my Constructor I want to allocate
11:02 - this array so let's manually hard code
11:05 - this tool let's say two reads so I'll
11:08 - say rates counter is equal to 2 and
11:12 - let's say that rates array is equal to
11:15 - new integer array that has this many
11:20 - elements okay now one very important
11:24 - thing is that if you are going to do
11:25 - this you first need to write this slide
11:28 - and then this line Okay so
11:31 - here I want to manually hard code to
11:33 - read so let's say rates
11:36 - of 0 will be equal to 4 and then let's
11:41 - copy this one more time and let's say
11:43 - rates of one will be equal to 5. okay so
11:46 - these are two rates that we have so as
11:49 - soon as you start working with pointers
11:51 - and allocating new space in your
11:53 - Constructor you need to deallocate that
11:56 - space in your Destructor otherwise you
11:59 - are going to have memory leaks so what
12:01 - you want to do is this space here that
12:04 - you have taken that you have allocated
12:05 - you want to free it which means
12:07 - deallocated in your Destructor so what I
12:11 - need to do here is I need to say
12:13 - something like please delete
12:18 - braids like this
12:21 - now one interesting thing that is
12:22 - happening here is that we are still
12:24 - leaking memory so if you are using
12:27 - previous Studio like I am it is going to
12:30 - remind you here so if I say please check
12:32 - my current file for any errors and let
12:34 - me know if there are any errors now it's
12:37 - doing that
12:38 - and there is this small window here
12:41 - which you can see and as you can see it
12:43 - says the memory was allocated using new
12:46 - array but was released using delete so
12:49 - consider inspecting this code it will
12:52 - probably be better to use delete and
12:54 - then array okay so it is clearly telling
12:58 - you hey here you need to use these
13:03 - angled brackets in order to in order to
13:06 - deallocate this okay so that is one
13:09 - thing that previous studio is going to
13:10 - remind you of if you are not using it
13:13 - then make sure to keep this in mind
13:15 - whenever you are deallocating space but
13:19 - let me very quickly delete this part
13:21 - here
13:22 - and I want to show you something else so
13:26 - let's very quickly switch to excel
13:28 - because I want to tell you why this code
13:32 - here is leaking memory so this part here
13:35 - is visual representation of how your
13:37 - array looks like in memory so this rates
13:41 - array is a pointer which means that it
13:44 - holds an address as you can see here so
13:46 - what kind of address well it holds the
13:49 - address of the first element of your
13:51 - array if you are not familiar with
13:54 - pointers please make sure to watch my
13:57 - playlist about pointers it will be
13:59 - linked here and also in the description
14:00 - so again this rates pointer holds the
14:04 - address of the first element of your
14:06 - array because that's the address of the
14:08 - array itself and this array has two
14:11 - elements four and five and they are on
14:14 - these two locations so now if you try to
14:18 - do this part only what is going to
14:20 - happen and what your compiler is going
14:22 - to do is it is just going to delete this
14:25 - so all of this memory here is now
14:28 - leaking so you've just deleted the
14:31 - address of this array you haven't freed
14:33 - the space that array is taking so
14:38 - instead of doing this if you do this
14:42 - what is going to happen then is it is
14:45 - going to delete all of this so in that
14:49 - case you will not be leaking any memory
14:52 - also another good practice that you
14:54 - should always do is you should say rates
14:57 - is equal to no oh no PTR like this and
15:02 - in this situation it's not going to
15:04 - cause any problems but there are
15:05 - situations when not knowing your
15:08 - pointers can cause different issues so
15:11 - keep this as a good practice to always
15:13 - null pointers whenever you are deleting
15:16 - them so once more this is how you create
15:19 - a Destructor and you need to create it
15:21 - whenever you are allocating space in
15:24 - your memory or working with pointers and
15:26 - of course these lines here can be
15:29 - removed
15:30 - okay now one very interesting thing and
15:34 - one bug that can happen in this program
15:36 - and that is caused by this Destructor is
15:40 - if you try to do something like this
15:42 - let's say that you want to create a new
15:44 - book let's call it book three and what
15:47 - you want to do is you just want to say
15:48 - hey this book 3 will be the same as this
15:52 - programming book here so
15:55 - if I run this program let's see what's
15:57 - going to happen
16:00 - okay the execution of the program was
16:02 - passed here so let's continue and as you
16:05 - can see I have an error here and we have
16:08 - received Warning by PBS Studio at the
16:10 - same time so if anyone knows what is
16:13 - happening here let me know in the
16:15 - comments and in my next video I'm going
16:18 - to reveal to you what is actually going
16:21 - on here and how to fix this bug because
16:24 - this is very common among beginners and
16:27 - this is because many beginners don't
16:29 - understand how copy Constructors work
16:31 - and how assignment operators work so in
16:34 - my next video we are going to talk about
16:36 - copy Constructors so as soon as I edit
16:40 - that video because I've already filmed
16:41 - it I'm going to publish it so the link
16:43 - is going to be here and also in the
16:46 - description so as I promised for those
16:48 - of you who have stayed until the end I
16:50 - have a special gift for the past year
16:53 - I've been working on a programming
16:54 - course that is going to take you from
16:56 - beginner to advanced level and get you
17:00 - ready to work on real projects that
17:03 - inspire you to work for companies where
17:04 - you can earn extra money or if you have
17:07 - your own idea I will teach you how you
17:09 - can bring that idea to life and make it
17:12 - into an application so I've been putting
17:14 - a lot of time into this course and all
17:17 - of my experience so over a decade of
17:19 - experience packed into a single course I
17:22 - know that learning programming can be
17:23 - overwhelming and I know how important it
17:26 - is to have everything on one place step
17:29 - by step many of you have asked me if
17:31 - this course is going to be about object
17:33 - oriented programming data structures
17:35 - algorithms and
17:37 - to be honest I consider those topics to
17:40 - be pretty much beginner topics in
17:42 - programming and once you see this
17:44 - programming course you will also
17:45 - understand why so topics like that and
17:48 - all of the other topics that are already
17:49 - available on my YouTube channel for free
17:51 - are maybe two or three percent of this
17:54 - programming course and the remaining 97
17:57 - of this course are things that you
18:00 - cannot find anywhere else on the
18:02 - internet things that you are struggling
18:03 - with but you cannot find explanations
18:06 - for them I want to give you that in an
18:09 - understandable and comprehensive way let
18:11 - me give you an example now you have
18:13 - watched my video about these structures
18:14 - and maybe you watched a couple more
18:16 - videos from other creators and you think
18:19 - that you understand the concept because
18:20 - you can apply it on a couple of
18:22 - different examples but what happens when
18:25 - you are faced with the real problem what
18:28 - happens when you're faced with the
18:29 - problem that you have never seen before
18:31 - for example you're working for a company
18:33 - and one day your boss comes and says hey
18:36 - this is not going to work anymore our
18:39 - application is five times the size that
18:42 - it should be it's linking memory
18:44 - everywhere it's slow it's crashing and
18:46 - people don't want to use it anymore we
18:48 - are losing money
18:50 - what are you going to do then what are
18:53 - you going to do in a situation where
18:55 - you're faced with a problem in an
18:57 - application that has half a million
18:59 - lines of code
19:01 - so those are the things that I want to
19:04 - teach you in this programming course so
19:06 - as I said this is going to be beginner
19:08 - to Advanced programming course and I
19:10 - will teach you all the programming
19:11 - Concepts but not on small individual
19:14 - examples I want to teach you how all of
19:16 - these programming Concepts work together
19:19 - and how they coexist to make big complex
19:22 - applications because only on big
19:25 - projects only on big projects you can
19:27 - really understand programming and you
19:29 - can develop your programming logic and
19:31 - understand all of the concepts from
19:33 - object oriented programming data
19:35 - structures algorithms design patterns
19:37 - solid principles and all of the other
19:39 - things that you are going to learn in
19:41 - this programming course so for those of
19:43 - you who watch my YouTube videos until
19:44 - the end and who really want to learn
19:46 - programming I want to give you a special
19:48 - discount and I will put a link in the
19:51 - description for you that you can use to
19:53 - sign up for this discount and make sure
19:57 - to do it now because the number of
19:59 - people that can get it in is limited so
20:02 - thank you very much for watching all of
20:04 - the code will be pinned in the comments
20:06 - and I will see you in some other video
20:08 - bye