00:00 - in this video I'm explaining one of the
00:01 - data structures that every developer
00:03 - should know about a linked list the
00:05 - elements of a linked list are called
00:07 - nodes and each node has two parts data
00:10 - and a pointer to the next node and they
00:12 - are randomly positioned in your memory
00:14 - so these nodes are connected like a
00:16 - treasure hunt in real life where every
00:18 - step has a pointer to the location of
00:20 - The Next Step so going from the head to
00:22 - the tail of a linked list requires
00:24 - visiting all of the elements in between
00:26 - and because they are randomly positioned
00:28 - in your memory this can take a lot of
00:30 - time so this is the main characteristic
00:31 - of a linked list traversing it and
00:33 - searching elements inside the linked
00:35 - list is very slow but adding new
00:37 - elements is very fast because in order
00:39 - to add a new node you would just have to
00:41 - find enough place to store one node and
00:43 - then link it with adjacent nodes so how
00:45 - to decide which data structure to use if
00:48 - your program requires adding and
00:49 - removing elements very often then a
00:52 - linked list is a great choice but if you
00:53 - will be searching and traversing into
00:55 - your collection a linked list is very
00:57 - slow for that and it is better to use an
00:59 - array