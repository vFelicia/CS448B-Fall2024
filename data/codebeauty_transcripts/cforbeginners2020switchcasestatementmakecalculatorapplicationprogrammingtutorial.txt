00:00 - hi guys welcome to my channel welcome to
00:03 - another C++ for beginners tutorial and
00:06 - I'm really excited for making this video
00:07 - because this video is going to be a
00:10 - milestone and in this video I'm going to
00:12 - show you how you can build your own
00:13 - calculator application so if you have
00:16 - watched my previous videos and you are
00:18 - also watching this one and you build
00:19 - this application together with me you
00:21 - should really feel proud of yourself
00:23 - because you have made a great progress
00:25 - so let's build that application now here
00:29 - I have opened my visual studio and let's
00:31 - very quickly explain what we want to do
00:33 - before we start write code so I want my
00:36 - user to enter two numbers and also
00:39 - operation sign and then depending on
00:42 - those two numbers and that operation we
00:44 - want to calculate the result and then
00:46 - write that result to our user so the
00:48 - first thing that we need to do is we
00:50 - need to declare variables that are going
00:52 - to hold those numbers and that operation
00:54 - sign and since we want our user to be
00:57 - able to enter decimal point numbers so
01:00 - not only integers but decimal point
01:02 - numbers as well we are going to declare
01:04 - variables that can hold decimal point
01:07 - numbers and those can be float and
01:09 - double so let's declare float for
01:13 - example now let's call it num1 which is
01:17 - we call our first number and also
01:19 - another one which is going to be called
01:21 - number two and hold our second number
01:24 - and after we have declared these two
01:27 - let's also declare a variable that is
01:29 - going to hold our operation sign and
01:32 - since that is a character we need to use
01:34 - a character type for that variable so
01:37 - let's say char and let's call that
01:39 - variable operation like this okay and
01:45 - now after we have created these three
01:48 - variables we can really allow our user
01:51 - to enter his numbers and his operation
01:54 - and we want to do that in the following
01:56 - order so we want to say cm and then
02:00 - first our user has to enter the first
02:03 - number and then after that we want our
02:06 - user to enter the operation sign so
02:09 - let's say operate operation like this
02:13 - and after that our user has to enter the
02:18 - second number and this window here guys
02:21 - this is called intellisense and it
02:24 - really makes your code writing easier so
02:26 - you can navigate this list here using
02:29 - your arrows and then you can also use
02:32 - tab key so that it finishes your
02:36 - variable name for you if you want that
02:39 - okay so now we have entered our first
02:43 - number our operation and then our second
02:46 - number as well like this and another
02:49 - thing that I want to write out to my
02:51 - user because this is going to be the
02:52 - best calculator ever that's right that
02:55 - title for user so let's write here
02:58 - before he enters anything a quick title
03:01 - so let's say C out and then let's say
03:05 - that it's going to be called code beauty
03:07 - calculator you can call yours whatever
03:09 - you want so like this and let's add
03:19 - these here so that it looks prettier
03:23 - okay and now if I run my program well
03:28 - you see that it really looks like this
03:31 - and now we are able to enter one number
03:36 - after that we want our user to enter
03:38 - operation like this and then we want to
03:42 - enter the second number like this and
03:44 - then after we press enter our program
03:46 - should really calculate the result of
03:48 - this operation in this current situation
03:51 - it is not really doing anything else
03:53 - because we haven't written code for a
03:55 - dot okay so now let's solve this problem
04:00 - that we have here so at this point you
04:02 - should really have an idea yourself on
04:04 - how to solve this problem using if-else
04:07 - statements and also nested if-else
04:09 - statements so if you are not familiar
04:11 - with those I'm going to link one of my
04:13 - previous videos here so make sure to
04:15 - watch that video as well but in this
04:18 - video I won't show you the more
04:19 - appropriate way for solving this
04:21 - particular problem and that is going to
04:23 - be using switch case statement so
04:25 - a switch case statement well switch case
04:29 - statement is as well as if-else
04:31 - statement used when you want to execute
04:33 - a block of code depending on a certain
04:36 - condition so depending on a value of a
04:39 - certain variable but switch case
04:41 - statement is particularly used in a
04:43 - situation where that variable can
04:45 - potentially hold a lot of different
04:48 - values and if you look at our operation
04:51 - variable here you should really notice
04:54 - that this variable can hold six
04:57 - different values and what are those six
05:00 - well our user can decide to enter
05:03 - operation for adding subtracting
05:06 - multiplying dividing modulating and then
05:10 - what if our user does not really want to
05:13 - use our application but he wants to hack
05:15 - it so if he decides that he doesn't want
05:19 - to enter one of these five but he really
05:21 - enters some non valid automatic
05:24 - operation we should also cover that case
05:27 - so we should really as programmers
05:29 - protect all these six situations and
05:32 - cover all these six cases I'm going to
05:37 - add one end line here so if my text is
05:40 - I'm at it nicely and then let's really
05:43 - show how this switch case statement is
05:46 - used so the first thing that I want to
05:48 - write is switch like this and then if
05:53 - you press tab you see that you are
05:55 - getting some default syntax for this
05:58 - switch case for now I'm going to delete
06:00 - that and I want to show you how you can
06:02 - really write that yourself and inside
06:06 - these parentheses here
06:08 - I want to write out the name of my
06:10 - variable that I want to switch through
06:12 - or switch on and that is going to be my
06:15 - operation variable because depending on
06:17 - the value of this operation variable we
06:19 - are going to perform a different
06:20 - calculation on these two number
06:23 - variables so I'm going to say here
06:26 - operation and then in these curly
06:29 - brackets here we really want to cover
06:32 - all our cases so the first case let's
06:36 - say
06:37 - that our our first case is going to be
06:40 - situation where our user enters -
06:43 - operator so I'm going to use these
06:45 - single quotes and then inside these
06:48 - single quotes I am putting the value
06:50 - that our variable can potentially hold
06:52 - and that is this - operator here and
06:55 - after that I'm going to add this column
06:58 - sign here like this and that after this
07:02 - column sign I really want to put out
07:04 - whatever code I need to execute in the
07:06 - case that our operation corresponds to
07:09 - this sign here and what I want to
07:13 - execute in this case is I want to say C
07:16 - out and let's row write out our first
07:20 - number and then let's write out our
07:24 - operation and then let's write out our
07:27 - second number so that our user really
07:29 - gets a night nicely for a method text
07:32 - and after that I'm going to add this is
07:35 - equal to sign and here we are going to
07:39 - put really our result and that result is
07:42 - going to be our first number - because
07:46 - our user has entered this - so our first
07:49 - number - our second number so let's
07:52 - break out number one - number number two
07:59 - like this and after we have covered this
08:04 - first case we need to add one more
08:06 - keyword and that is going to be break
08:08 - and this break keyword is really used so
08:12 - that our switch case statement knows
08:15 - where our first case ends so I'm saying
08:19 - here whenever my operation is equal to
08:22 - this sign here you are going to execute
08:24 - this code and you should really stop
08:28 - executing this case that case when you
08:31 - come to this break statement okay so
08:34 - this is going to be our first case our
08:37 - second case is going to be situation
08:39 - where our user let's say enters this
08:42 - plus sign and in that situation we
08:46 - really want to write out to our user
08:49 - this text here so the same text we want
08:53 - to really write out our first number
08:56 - plus in this case our second number and
09:00 - that is equal to and then we are going
09:02 - to add really this calculation here so
09:05 - number one plus number two like this and
09:11 - in this situation as well we want to add
09:13 - this break statement at the end like
09:17 - this okay so these are two potential
09:22 - cases and now I'm going to really write
09:25 - out the rest of them so I have written
09:28 - out these remaining cases and in each of
09:32 - these cases we really want to write out
09:34 - our user his first number after that his
09:37 - operation second number and then this
09:40 - equal sign and then in each of these
09:42 - cases we are performing adequate
09:44 - calculation so we are performing that
09:46 - operation that our user has entered and
09:49 - writing that result out to our user and
09:51 - after each of these cases we really need
09:54 - to put this break statement and you
09:56 - really have to put this break statement
09:58 - because if you don't you are going to
10:00 - get your program to behave as you don't
10:02 - want it to and as you can see in this
10:05 - situation here so in this situation
10:08 - where we are trying to modulate two
10:09 - numbers we are getting an error and if
10:13 - we hover over this number here you can
10:16 - see that our error says expression must
10:19 - have integral or unscoped enum type what
10:22 - does that mean well if you haven't
10:25 - watched my video on operators I suggest
10:28 - you to do so I'm going to link it here
10:31 - and here I'm quickly going to explain
10:33 - what is happening so this operation here
10:36 - this modulo operation is operation that
10:38 - is really going to give you a remainder
10:40 - after dividing two whole numbers and
10:42 - since this number here and this number
10:45 - here are of type float we really cannot
10:49 - perform this calculation on these two
10:51 - variables so what we have to do is we
10:55 - first have to check whether this number
10:57 - is really integer number
10:59 - it's a whole number and this number as
11:02 - well and since our float can hold
11:05 - decimal point numbers and integers as
11:08 - well we really in certain situations
11:10 - only can perform this modulating
11:13 - operation and let me explain what I mean
11:15 - by this that our float could hold can
11:17 - hold
11:18 - decimal point numbers and integers as
11:20 - well well this variable here this number
11:22 - variable can really have a value of 5.5
11:26 - for example but it can hold as well
11:28 - value of 5.0 which is really integer
11:32 - value so it's five only so now what we
11:36 - have to do is following I'm going to
11:39 - delete this line here and we first have
11:42 - to check whether both of these numbers
11:44 - are integers and in that situation only
11:47 - we can perform this calculation but in a
11:50 - situation where one of these two or both
11:52 - of them are not integers we are going to
11:54 - write out or a user that that operation
11:56 - is not valid so I'm deleting this code
12:00 - here and then what's great to variables
12:05 - so let's create a variable of type bool
12:07 - and let's call it is num1 integer so
12:13 - this variable is going to hold a value
12:16 - that is going to tell us is our number
12:18 - one integer value and let's also create
12:21 - another variable that is going to be
12:23 - cold is num2 int and as well this
12:30 - variable is going to tell us whether our
12:32 - number two is integer and let's develop
12:36 - now an algorithm so that we can know
12:38 - whether our number one or number two is
12:42 - integer number and I'm going to ask you
12:45 - to write your solutions in the comments
12:47 - down below so pause the video think
12:48 - about it and then write your solution
12:50 - and without using any already-made
12:52 - functions as programmers as engineers
12:55 - you should really be able to figure out
12:57 - the solution on your own so applying the
13:00 - knowledge that you have gotten from my
13:02 - previous videos or this one but I'm
13:04 - going to say from my previous videos so
13:07 - pause video and write your solution so
13:11 - this question is not really a question
13:13 - of programming is more of a question of
13:15 - thinking in a logical way and if you
13:18 - remember when we were talking about
13:19 - casting operators we said that a casting
13:22 - operator is used to convert one data
13:25 - type into the other and I'm going to
13:27 - link that video here if you haven't
13:29 - watched that make sure to do so and here
13:32 - we are going to try to convert our
13:34 - floating point number so our number one
13:37 - and our number two into integer datatype
13:41 - so into integer number and how we are
13:44 - going to do that well we are really
13:46 - going to say and so this here is going
13:50 - to cast whatever we put after it into
13:53 - int type and we are going to say please
13:56 - try to convert my number one into
14:00 - integer and how does this work well for
14:05 - example if you have a number one that
14:07 - holds value of five point seven when you
14:10 - try to convert that value into integer
14:12 - what it does really it says that five
14:15 - point seven so that point seven part
14:18 - really bye-bye I'm going to take only
14:20 - this five part so only this whole part
14:23 - of a number so in that situation we are
14:28 - really going to get only five from this
14:30 - five point seven floating point number
14:33 - so what I'm going to say now is I'm
14:36 - going to say whatever this expression
14:38 - here this casting operation results with
14:41 - I'm going to really try to compare that
14:43 - with the initial value of my number one
14:47 - variable so I'm going to say num1 is my
14:50 - converted number one so converted to
14:53 - integer equal to number one like this
14:56 - and how does this calculation here work
14:59 - well as I said for example if you have a
15:03 - number one that holds a value of five
15:05 - point zero so 5 point 0 this part here
15:10 - is really going to take this point zero
15:12 - part of a number and delete it it's
15:15 - going to keep only this five so only
15:18 - this whole part of a number and after
15:20 - that we have this is equal to operator
15:23 - and then we are trying to really
15:27 - trying to really check whether debt is
15:28 - equal to 5.0 and the result of this is
15:34 - going to be true so we with this here we
15:38 - have checked really whether our number
15:41 - is going to be equal to our floating
15:43 - point number so this result here we are
15:48 - going to assign this value to our is
15:51 - number one integer variable so here I'm
15:54 - going to say please assign the result of
15:58 - this operation to our is number one
16:02 - integer variable like this and let's put
16:06 - this expression here so this whole
16:08 - expression inside these parentheses so
16:10 - that we really can see that this is an
16:13 - expression and the result of this
16:14 - expression should be assigned to this is
16:16 - number one int variable and now we are
16:20 - going to do the same for our is number
16:22 - number two so I'm going to say is number
16:26 - two integer and we are going to say that
16:28 - that is equal to I'm trying to convert
16:31 - my number two to end and then compare
16:35 - that to my float number two and after
16:41 - this we really can now do our algorithm
16:46 - to perform this modulo where it is this
16:49 - modulo operation on our two numbers in
16:52 - the case where both of them are integers
16:55 - so here I'm going to say if it is my
17:00 - number one int and that also is my
17:04 - number two int like this in this
17:09 - situation here I'm going to perform this
17:12 - modulo operation and as you can see here
17:15 - I have used only these two boolean
17:17 - values here in this expression so I
17:20 - didn't say please check is my number one
17:24 - int equal to true like this nor I have
17:28 - said please check is my number two equal
17:31 - to true like this because this here this
17:36 - part here and this part here are really
17:39 - redundant
17:40 - and what this expression here translates
17:43 - in it translates in is true equal to
17:46 - true and that is really redundant so I'm
17:49 - going to remove this part here and this
17:52 - part here and it should work fine like
17:55 - this for boolean value so boolean
17:57 - variables and in this situation here
18:01 - where both of these are integers we
18:04 - really can perform this modulo operation
18:06 - so in this situation here I'm going to
18:09 - take this code and I'm going to copy it
18:14 - like this and I'm going to say please
18:17 - write out my number 1 then my operation
18:19 - then my number 2 is equal to sign and
18:22 - then here I'm going to put adequate
18:25 - calculation so I'm going to say take my
18:28 - number 1 convert it to to int and then
18:33 - modulate that with my number 2 that is
18:37 - as well converted to end like this ok so
18:43 - in this situation we're bored both of
18:45 - these are integers we are going to
18:48 - really write out the result of
18:50 - modulating operation to our user let's
18:53 - add empty space here and here as well
18:56 - but in the situation where one of these
18:59 - two is not integer or both of them are
19:03 - not integers I'm going to say else and
19:06 - in that situation I really going to
19:08 - write out my user that this operation is
19:10 - not valid so let's say just not valid
19:14 - like this so in any of these two
19:19 - situations whether we write out this
19:21 - line of code here or this line of code
19:23 - here after that we are going to come
19:25 - here and here we have to put our break
19:29 - statement like this so after each case
19:32 - comes break and now we can really test
19:37 - this part of code here that we have
19:39 - written it so if I run my program the
19:42 - first thing that I want to test is let's
19:45 - say five point five plus two point two
19:48 - and we get the expected result so seven
19:51 - point seven
19:52 - let's run our program again and this
19:56 - time I want to check whether my modulo
19:58 - operation is working as it should
20:00 - because this code here is really
20:02 - specific so let's say five modulo two
20:06 - like this and as well we have gotten
20:10 - correct result and let's run our program
20:12 - one more time and here I really want to
20:16 - trick my program and try to make it to
20:18 - modulate two numbers that are not whole
20:21 - numbers so 5.2 modulated by 2 and as
20:26 - well our program works as it should so
20:29 - it says not valid operation ok so if you
20:34 - have noticed in this current situation I
20:37 - really have to run my program each time
20:40 - that I want to perform a calculation and
20:42 - that is because we haven't learned
20:43 - anything about iteration or loops so far
20:47 - and those videos are coming so make sure
20:49 - to subscribe to my channel and also
20:51 - click the power icon so that you are
20:53 - notified when I publish those videos and
20:55 - in that situation where we learn
20:57 - iteration and loops we are really going
21:00 - to be able to run our programs
21:01 - indefinitely which means to run our
21:04 - calculator application until we really
21:06 - decide to stop it ok so after we have
21:12 - covered these 5 cases here there is only
21:16 - one situation left to cover and then a
21:18 - situation where our user and there's any
21:21 - other side that is not one of these five
21:24 - here and that situation we are really
21:27 - going to write like this so we are going
21:30 - to take default so in the case where our
21:34 - user enters operation that is not going
21:37 - to correspond to any of these five signs
21:40 - we are going to execute our default
21:42 - situation and here we really want to
21:45 - write out a message to the user that is
21:48 - trying to hack our program so you can
21:50 - write whatever method you want to the
21:53 - user that is trying to hack the program
21:54 - that you have worked so hard to build
21:56 - and I'm going to put here
22:01 - [Laughter]
22:04 - okay you really can write out whatever
22:07 - you want to that type of fusers like
22:10 - this so in the case where our user has
22:16 - not entered this nor destroy death nor
22:19 - death nor death which means our user has
22:22 - entered some other side we really want
22:25 - to write out not valid operation and
22:27 - let's test now our default case so I'm
22:30 - going to run the program and I'm going
22:33 - to take the role of a malicious user
22:35 - that is going to try to hack your
22:36 - application and I'm going to say let me
22:40 - try to perform this calculation here so
22:42 - 5 z 9 not really you have been smart
22:48 - enough to predict his malicious behavior
22:51 - and you have said if you haven't put
22:54 - here a valid and Phatak operation then
22:56 - no I cannot help you this is not a valid
22:59 - operation and there is really one thing
23:02 - that you have been wondering about for
23:04 - the most part of this video and that is
23:06 - this break statement here so why I have
23:09 - said it after each case you have to put
23:11 - break and now you want me to explain
23:14 - that do you do you really wouldn't that
23:16 - be a spoiler for a situation where you
23:18 - decide on your own to believe this break
23:21 - statement here and then run your program
23:24 - even though I have said not to and you
23:27 - enter some calculation and you remember
23:30 - that I have said that you are going to
23:31 - get unexpected behavior but what she
23:33 - lying
23:34 - was she not and then you decide to
23:37 - execute this calculation and boom here
23:41 - is your unexpected behavior so what has
23:44 - happened here well your program is
23:46 - really recognized that this operation
23:48 - here that you have entered is this -
23:51 - operation and after that is it has
23:53 - written out this number one so seven and
23:56 - that operation - and then this number to
24:00 - five is equal to and then it has
24:03 - calculated number one - number two which
24:05 - is 7 minus five and that is equal to two
24:08 - and after that it has really continued
24:11 - executing other cases which means it has
24:14 - come to this line here and then it has
24:17 - written one more time
24:18 - you're number one - number two so seven
24:21 - minus five is equal to and then it has
24:24 - performed this number one plus number
24:26 - two calculation and seven plus five is
24:29 - going to be equal to 12 and then it has
24:32 - come to this first break command and it
24:35 - has has stopped the execution of your
24:37 - switch case so why has this happened it
24:41 - has happened because you haven't put
24:43 - this break command here and in that case
24:46 - your program is really going to be
24:48 - executing your cases until it comes to
24:51 - the first break command and if you have
24:55 - noticed here and that's the default
24:57 - situation I haven't really put any
24:58 - breaks you can as well put your break
25:02 - statement here you can say break here
25:05 - but even if you don't if you even if you
25:08 - didn't put your break here and your
25:11 - program really tries to execute
25:12 - something after it is fine here there is
25:15 - really nothing to execute so you are not
25:16 - going to get a problem in this situation
25:19 - here I hope that you like this video and
25:21 - that you have build your own calculator
25:23 - application and if you did make sure to
25:26 - subscribe to my channel and click the
25:27 - bell icon as well share this video with
25:30 - anyone who would like to learn
25:31 - programming and I'm going to in my next
25:33 - video bye