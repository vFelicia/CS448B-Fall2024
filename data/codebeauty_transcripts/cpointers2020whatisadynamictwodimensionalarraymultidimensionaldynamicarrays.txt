00:00 - hi everyone welcome to my channel my
00:02 - name is saldina and i make i.t and
00:04 - programming related videos so if you're
00:07 - interested in those please subscribe to
00:09 - my channel and give this video a thumbs
00:11 - up
00:11 - and in this video i want to talk about a
00:14 - topic that confuses many students and
00:17 - that is the topic of multi-dimensional
00:19 - dynamic arrays
00:21 - and the topics like this one are the
00:24 - reason why many people step away from
00:26 - learning c plus and they believe that
00:29 - learning c plus plus is hard but what i
00:32 - think is that many of those people never
00:34 - actually had the opportunity to have
00:36 - this explained in a very simple way so
00:39 - that is what i will try to do in this
00:42 - video so with the help of excel i will
00:44 - try to draw what are multi-dimensional
00:47 - dynamic arrays and how they work and i
00:50 - hope that at the end of this video you
00:52 - will have it pretty clear and you will
00:53 - be able to create and work with your own
00:56 - multi-dimensional dynamic arrays so what
00:59 - a multi-dimensional array is in simple
01:02 - words it is array of arrays and in this
01:05 - video you will learn how to create
01:07 - two-dimensional dynamic arrays and in
01:10 - order to be able to understand this
01:12 - topic you should be familiar with the
01:14 - topic of dynamic arrays which is a video
01:17 - that i already did on my channel and i
01:20 - will link it here so make sure to watch
01:22 - that video before watching this one so i
01:25 - will very quickly remind us all of how
01:27 - dynamic arrays work and then we will see
01:30 - how we can use that knowledge to
01:32 - understand multi-dimensional dynamic
01:35 - arrays
01:36 - so let's create a visual representation
01:38 - of a dynamic array in our excel sheet so
01:42 - let's say that it will be array of four
01:44 - elements
01:45 - like this this is our array and the
01:48 - indexes of these elements start with
01:50 - zero and then one two three
01:53 - so these are the indexes and then the
01:55 - address of this first element will be
01:58 - for example 0 0 0 0
02:01 - a a like this
02:04 - and this address here it is the address
02:06 - of the first element but it is the
02:08 - address of the array itself as well and
02:11 - you should be familiar with that so this
02:14 - here is our dynamic memory and then on
02:17 - our stack which will be here let's
02:20 - create our stack so this here will be
02:22 - our static memory here we will have to
02:25 - create a pointer variable which will
02:27 - hold the address to this element here or
02:31 - actually the address to the array itself
02:34 - so i will create a variable let's call
02:36 - it ptr1 so this is going going to be our
02:39 - pointer one and as we already said that
02:42 - pointer will hold the address of the
02:45 - first element of this array let's copy
02:48 - that address
02:50 - like this and then
02:51 - we will store that address in our ptr
02:54 - one now if we wanted to create more
02:57 - arrays by the knowledge that we have so
02:59 - far we would have to copy this
03:02 - and then let's paste it here and let's
03:03 - create one more array like this so now
03:07 - we have three dynamic arrays and the
03:10 - first element of the first array has the
03:12 - address of 0 0 0 0 a a and then this one
03:16 - here let's say that it has the address
03:18 - of
03:19 - bb for example and then this one here
03:21 - has the address of zero zero zero zero
03:24 - cc and to be able to access these arrays
03:28 - we would have to create on our stack two
03:31 - more pointers so let's do that
03:34 - okay so our pointer two will hold the
03:38 - address of the second array which is
03:41 - zero zero zero zero bb and then our
03:44 - pointer three would hold the address of
03:46 - our third array which is zero zero zero
03:49 - zero
03:50 - cc like this
03:52 - now with this we have created three
03:55 - dynamic arrays and in order to create
03:58 - those three dynamic arrays we had to
04:00 - create three pointers so those are these
04:04 - three here and this is something that
04:07 - you should already be familiar with so
04:09 - you should already know from my previous
04:11 - video how to create a dynamic array now
04:14 - one thing that i see here and that is a
04:17 - problem is that if we wanted to create
04:19 - four or five or a hundred of these
04:22 - dynamic arrays we would have to create
04:24 - that number of pointers on our stack
04:27 - which means that this part here is not
04:30 - dynamic only this part here is dynamic
04:33 - because here our user determines how
04:35 - many elements this dynamic array will
04:38 - have but for each of these dynamic
04:41 - arrays we have to manually create a
04:44 - pointer on our stack which will hold the
04:46 - address of that
04:47 - array
04:48 - okay now what happens if i want to move
04:52 - this part here to our dynamic memory as
04:54 - well so let's do that let me cut it from
04:57 - here and then i will paste it here for
05:00 - example so now i have moved this part to
05:05 - dynamic memory as well and as you can
05:07 - see here this kind of looks like an
05:10 - array as well so that means that this
05:13 - first element if we look at this as an
05:16 - array the first element will have index
05:18 - of
05:18 - zero and then second will have index of
05:21 - one and then third will have oh this
05:25 - won't move third will have index of two
05:28 - okay
05:29 - so this is an array that has three
05:33 - elements and the first element for
05:36 - example has the address of 0 0
05:40 - e e e e
05:42 - like this so now this part here is
05:45 - dynamic and then this part here is
05:47 - dynamic and in order to be able to
05:50 - access this array here what we have to
05:52 - do is on our stack which is this
05:56 - part here we will have to create a
05:58 - pointer which will hold the address of
06:01 - this first element so let's do that
06:04 - let me just
06:06 - okay
06:07 - now as i already said on our stack we
06:10 - will have to create a pointer which will
06:12 - hold the address of this first element
06:15 - so let's call that pointer
06:17 - table for example and this table will
06:21 - hold the address of this element here
06:24 - which is
06:25 - 0 0
06:26 - ee
06:29 - and this table because it holds the
06:32 - address it should be a pointer but one
06:35 - thing to keep in mind is that this
06:37 - variable here is not a simple variable
06:40 - but this here is a pointer as well which
06:43 - means that this table will not be a
06:45 - simple pointer but it will be a pointer
06:47 - to a pointer and you indicate that using
06:51 - two asterisk symbols because one is just
06:54 - a pointer and then two mean a pointer to
06:57 - a pointer why because this table holds
07:00 - the address of the element which is this
07:03 - one
07:04 - here and that element is pointer as well
07:08 - okay now
07:09 - if we look at this here as you can see
07:12 - we have one array that represents the
07:16 - number of rows that our table will have
07:20 - okay so one two three and then for each
07:23 - one of the elements of this array here
07:26 - we create a separate dynamic array like
07:29 - this so this here will be our table that
07:32 - has the number of rows that our user
07:35 - defines and then however many columns
07:38 - our user defines as well and in this
07:40 - particular situation it is a table that
07:42 - has three rows so these are three rows
07:46 - and then four
07:48 - columns so let's now translate this to
07:50 - our c plus code and because we said that
07:53 - now our user defines how many rows this
07:57 - table will have and then how many
07:58 - columns as well that is the first thing
08:01 - that i will do so i will create two
08:03 - variables let's call them inch rows and
08:07 - columns and then i will ask my user
08:11 - to enter how many rows
08:13 - and how many columns he wants this table
08:17 - to have so let's do that see in
08:20 - rows
08:22 - o
08:23 - and then columns
08:25 - like this
08:26 - okay now after our user has entered how
08:29 - many rows and columns he wants what i
08:32 - want to do now is this part here so this
08:35 - part here this is our first step and
08:38 - then this here is going to be our second
08:40 - step and this part here will be the
08:42 - third step so this part here will be the
08:46 - following when translated to c plus plus
08:48 - code so here as i already said i create
08:51 - a pointer to a pointer which i will call
08:54 - table so i will say please create an
08:57 - integer pointer to a pointer because
09:01 - here we will store integer values you
09:03 - can create a character or double or
09:05 - float whichever one you want i want to
09:07 - create integer pointer to a pointer and
09:10 - call that table
09:13 - like this
09:14 - okay so we are done with this first part
09:17 - here and then what this table pointer to
09:20 - a pointer will point to is going to be
09:22 - this array here so i will say please
09:25 - create a new
09:26 - integer array that has
09:29 - this many elements so the number that
09:32 - our user has entered for this rows
09:35 - variable because this rows variable
09:38 - holds how many elements this array here
09:41 - will have but as you can see here we
09:43 - have an error and that error is
09:45 - happening because this here which is
09:48 - this array here is not just a simple
09:51 - integer array but it is
09:53 - array of pointers so here you will have
09:56 - to indicate that so you will have to say
09:58 - please create an integer array of
10:02 - pointers and as you can see now our
10:04 - error has disappeared and with this line
10:07 - of code here we have created this array
10:10 - here now
10:11 - our third step is going to be that for
10:14 - each element of this array here we would
10:18 - have to create a separate dynamic array
10:21 - so this first element will hold the
10:24 - address of this dynamic array and then
10:26 - the second element holds the address of
10:29 - this array and then disturbed the
10:31 - address of this array here so what i
10:34 - will have to do is i will have to
10:35 - iterate through all the elements of this
10:38 - array and for each one i will have to
10:40 - create a separate dynamic array so let's
10:44 - do that so i will say four
10:46 - and i is equal to zero and then i is
10:50 - less than the number of rows that our
10:52 - user entered and in each iteration
10:54 - increment
10:56 - i
10:57 - so in this particular situation our
10:59 - number of rows is equal to three but you
11:01 - can have as many as you want
11:04 - so what i want to do in each of these
11:06 - iterations is i want to create for each
11:09 - one of these elements a separate dynamic
11:12 - array so i will say table
11:15 - of i
11:16 - is equal to
11:18 - new
11:19 - integer array that has this many
11:23 - elements and that is the number that we
11:25 - stored in our columns variable like this
11:28 - and with this code here we have
11:30 - successfully created these dynamic
11:34 - arrays
11:35 - now how do you access elements on a
11:37 - specific position of this table here for
11:40 - example this one or this one or this one
11:44 - so in order to do that let's say for
11:46 - example
11:47 - table of
11:49 - row 1 and then column 2
11:52 - will have the value of 88. now
11:55 - what this code here what this line here
11:58 - will do is the following so this part
12:00 - here it says please give me the table
12:03 - variable which is this one here and it
12:06 - is a pointer to a pointer which holds
12:09 - this address here so 0 0 ee and that
12:13 - address is the address of this element
12:16 - here so the address of this array and
12:19 - here we say please give me the element
12:21 - of that array that has index one which
12:24 - is this element here so it is
12:27 - the element that stores the address of
12:29 - zero zero zero zero bb which is the
12:32 - address of this array here and this
12:36 - second part says please give me the
12:39 - element of that array that has the index
12:41 - of 2 which is this element here so here
12:46 - we will store the value of 88 so that is
12:50 - what this line of code here will do it
12:53 - will store number 88 to this position
12:57 - here so this line of code here will
12:59 - store this number at the element that
13:02 - has row index 1 and column index 2 of
13:06 - this table so this here is a row with
13:09 - index 0 this here is 0 with index 1 and
13:12 - then 2 so we are storing at this row and
13:15 - then column index 2 is this one here so
13:18 - here we store a number 88. one thing
13:21 - that we said as well in my previous
13:23 - video is that each time that you
13:24 - allocate dynamic memory you have the
13:27 - responsibility to deallocate that memory
13:29 - when you don't need it which means each
13:32 - time that you use new keyword you will
13:35 - have to use delete keyword when you
13:37 - don't need that memory anymore so now is
13:39 - the question how do we deallocate all of
13:42 - this memory that we have taken so
13:45 - in order to do that what i want to do is
13:48 - i want to show you something if for some
13:50 - reason we lose this address here so the
13:54 - value that is stored in this table
13:56 - pointer to a pointer we will never be
13:59 - able to access all of these elements
14:01 - that we have created in our dynamic
14:03 - memory so that means that we will not be
14:06 - deallocating this first
14:08 - and then if we for some reason lost this
14:11 - the value of our zero zero zero zero a a
14:15 - for example that means that we would
14:17 - never be able to access this array here
14:20 - so we would never be able to de-allocate
14:22 - this memory so that means that this is
14:25 - not going to be deallocated first as
14:27 - well now a location of this memory here
14:30 - went as follows
14:32 - this was the first step so this was the
14:34 - first thing that we allocated and it is
14:37 - this code here
14:39 - and then we allocated this so that
14:42 - corresponds to this part here and then
14:46 - the last thing to allocate was these
14:48 - arrays here and that corresponds to this
14:52 - part of the code and the allocation of
14:55 - this memory will go the other way around
14:57 - which means that first we will
14:59 - deallocate this and then we will
15:02 - de-allocate this and then this will be
15:05 - the last thing that we will have to
15:07 - worry about now in order to de-allocate
15:10 - this the process will be almost the same
15:13 - as the one when we allocated it so i
15:15 - will copy this for loop
15:18 - and then paste it here but what i want
15:20 - to do in this particular situation so
15:22 - when d allocating
15:24 - is instead of creating a new dynamic
15:27 - array for each table of i
15:30 - is i want to delete that array so for
15:33 - each element
15:34 - of this array here i want to delete the
15:37 - corresponding dynamic array so
15:40 - i want to delete these three arrays and
15:43 - in order to do that i will say please
15:46 - delete
15:47 - the array that my table of i is pointing
15:51 - to
15:53 - now what this code here will do is for
15:56 - this element here it will deallocate
16:00 - this array here so let's delete that and
16:04 - then for this element here it will
16:06 - deallocate this array
16:09 - and then for this one it will
16:10 - de-allocate this array here
16:14 - so now we have successfully freed
16:17 - this memory that we have taken here now
16:20 - after we have done this after we have
16:22 - successfully deallocated our first step
16:25 - which was here
16:26 - this part here will be our second thing
16:29 - to deallocate so here i will say please
16:32 - delete the array that my table variable
16:36 - is pointing to
16:38 - so this line of code here will
16:40 - deallocate this part here so i will say
16:44 - please
16:45 - delete that we do not need it anymore
16:47 - okay
16:48 - and then our third step which is the
16:50 - last one will be to null this value here
16:54 - why because we have just freed the
16:56 - memory that was here so we have
16:58 - deallocated that now someone else might
17:00 - be using this memory here and we really
17:03 - shouldn't keep the address of someone
17:06 - else's memory so we should make this
17:10 - a null
17:11 - value like this and in order to do this
17:14 - in our code i will just say now my table
17:17 - will hold the value of
17:19 - no
17:20 - like this and this will prevent some
17:23 - potential crashes and problems in your
17:25 - application
17:26 - so i hope that this video helped you
17:28 - understand multi-dimensional dynamic
17:30 - arrays a bit better
17:32 - and if it did please give it a thumbs up
17:34 - and subscribe to my channel because that
17:37 - helps me to reach more people and
17:39 - hopefully make programming a little bit
17:41 - easier for them as well
17:43 - thank you very much for watching and i'm
17:45 - going to see you in my next video bye