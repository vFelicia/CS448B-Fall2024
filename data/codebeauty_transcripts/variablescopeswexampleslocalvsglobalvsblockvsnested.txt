00:00 - hi guys and welcome to my channel in
00:02 - this video i'm going to teach you about
00:04 - variable scopes
00:05 - so if you pay good attention by the end
00:08 - of this video you will learn everything
00:09 - that you need to know about scopes in
00:11 - programming and this is also a knowledge
00:15 - that is applicable to any programming
00:17 - language and also at the end i'm going
00:19 - to show you some very tricky examples so
00:22 - make sure to watch the entire video so
00:24 - that you can learn and understand
00:26 - everything that you need to know about
00:28 - the topic of scopes in programming so
00:30 - the first thing that you need to
00:32 - understand is what is scope in
00:34 - programming in programming a scope is an
00:37 - area of code where you can access a
00:40 - certain variable so that you can read it
00:42 - change its value and work with that
00:44 - variable
00:45 - in programming there are three types of
00:48 - scopes and then there is also a fourth
00:50 - type which is kind of special
00:52 - so the first type is known as local
00:55 - scope which is also called function
00:58 - scope the second type is global scope
01:00 - and then the third is block scope now
01:03 - the fourth type of scope is not an
01:06 - official scope but you will see it very
01:09 - often when you read the code and it can
01:11 - be kind of tricky for most beginners so
01:13 - i will explain that at the end as well
01:15 - so the fourth type is called nested
01:18 - scope
01:19 - so again
01:21 - local scope
01:22 - global scope block scope and then nested
01:25 - scope so let me show you the example of
01:28 - these scopes in code and for writing the
01:30 - code we will be using visual studio and
01:34 - i'm also currently using an extension
01:36 - called visual assist
01:37 - i personally use it to help me write
01:39 - better code and avoid errors because
01:41 - that is very important while filming the
01:44 - video
01:45 - and you can use it also to help you with
01:47 - writing and reading the code it has
01:49 - great features that can help you with
01:51 - refactoring navigation and it also can
01:54 - generate c plus code and also c and c
01:57 - sharp
01:58 - many senior developers like to use it
02:00 - and also if your plan is to make games
02:03 - with c plus plus it has great support
02:05 - for unreal engine so you should
02:07 - definitely try it out i'm going to leave
02:09 - the link to download it in the
02:11 - description and then if you're
02:12 - interested to learn more to know how to
02:14 - install it and what are some very cool
02:16 - features that you have to know about you
02:19 - can watch the video that will be linked
02:21 - here and i will also put it in the
02:23 - description so make sure to watch that
02:25 - if you want to learn more so the first
02:27 - type of scope that i mentioned is local
02:29 - scope which is also known as function
02:32 - scope and that means that a variable
02:34 - that is declared in a function scope
02:37 - will be accessible only inside that
02:40 - function so let me show you that on an
02:42 - example
02:43 - let's create a function of return type
02:46 - void let's call it function1
02:51 - like this
02:52 - and inside this function i want to
02:54 - declare a variable so i will say int
02:58 - number one and let's assign it a value
03:01 - of
03:02 - ten now since i have declared a variable
03:06 - called number one inside this function
03:09 - here
03:10 - that means that we can access this
03:12 - variable only inside this scope here so
03:16 - only inside this block of code so here i
03:20 - can access variable called number one
03:22 - and i can for example print its value
03:27 - okay and this code will work without any
03:30 - problems but
03:32 - if i try to access this variable from
03:34 - another function then we will get a
03:37 - problem so let's create another function
03:40 - let's say void
03:43 - function
03:44 - 2
03:45 - okay so this is the scope of function
03:49 - two and if i try to
03:52 - access the variable number one inside
03:55 - this scope as you can see we are getting
03:58 - an error which says identifier number
04:01 - one is undefined which means that this
04:04 - variable doesn't exist inside the scope
04:07 - that we are trying to access it from so
04:11 - in order to fix this error what i need
04:13 - to do
04:14 - is i need to declare this variable
04:16 - inside this scope here as well so
04:20 - let's copy
04:22 - this code and then paste it here
04:25 - and let's change the value for example
04:26 - so that it has the value of 20 inside
04:29 - this scope and one thing that you should
04:31 - notice is that our error has disappeared
04:34 - now something interesting for you to
04:37 - know is that now these two variables so
04:40 - number one inside function2 and number
04:43 - one inside function one are completely
04:46 - different variables for your computer so
04:49 - it doesn't matter that they have the
04:51 - same name and that you logically might
04:53 - think that they are the same thing they
04:56 - are not so even if i if i double click
05:00 - on this variable you will see that your
05:01 - computer has marked this variable only
05:04 - on two places and then if i double click
05:06 - on this one your computer says hey this
05:09 - variable appears only on two places here
05:13 - and here
05:14 - so that is because even though these
05:17 - variables have the same name they belong
05:20 - to different scope and that is the
05:22 - answer to a common question that i get
05:24 - which is
05:25 - can two variables have the same name so
05:28 - the answer is yes they can as long as
05:31 - they belong to different scopes or to
05:34 - different namespaces and namespaces are
05:38 - a topic for another video which i
05:40 - already filmed and you can watch it here
05:43 - but in this video we are talking about
05:45 - scopes so again variables can have the
05:48 - same name but if they belong to
05:50 - different scopes
05:52 - so that means that inside my scope of
05:56 - main function i can also declare a
05:59 - variable of type in called
06:01 - number 1
06:03 - and let's assign it a value of 30 for
06:05 - example
06:06 - and now this is going to be a third
06:09 - completely different variable from these
06:12 - two
06:13 - so this is an example of local scope
06:16 - also known as function scope and again
06:18 - very quickly please don't get confused
06:21 - because these have the same name because
06:24 - they are completely different things for
06:27 - your computer and that is because they
06:30 - belong to different scopes so it is
06:32 - absolutely the same as if they had
06:35 - completely different names so as if this
06:38 - for example was number one and then this
06:40 - was number two and this was number three
06:44 - so with this being said now we can talk
06:46 - about advantages and disadvantages of
06:49 - local slash function scope
06:51 - so its main characteristic which is that
06:55 - the variable declared inside one
06:57 - function is accessible only inside that
06:59 - function
07:00 - is its biggest advantage and
07:02 - disadvantage it is an advantage because
07:05 - when you declare a variable inside one
07:07 - function and you can access it only
07:09 - inside that function
07:11 - that means that your code will be
07:13 - cleaner it will be localized and that
07:15 - will make it a lot easier for you in the
07:18 - future to read that code to maintain it
07:20 - and fix different bugs that appear in
07:22 - your code
07:24 - so that is an advantage but at the same
07:27 - time it is a disadvantage because
07:30 - there are certain problems in
07:31 - programming that are easier to solve
07:34 - when you can share the data between
07:36 - different functions and if you are using
07:39 - local variables that means that you
07:41 - cannot access those variables from
07:43 - different functions
07:44 - they are accessible only inside one
07:46 - function so now i'm going to show you an
07:49 - example of a problem in programming that
07:52 - is much easier to solve when you have
07:55 - access to a certain variable from
07:57 - different functions which means when you
08:00 - have a global variable so now i'm going
08:03 - to show you an example of global scope
08:07 - so let's delete all of this code
08:11 - and i am going to declare a global
08:13 - variable which means that it is a
08:15 - variable that is outside of any function
08:18 - so it is in this global area here so
08:22 - let's create a variable of type
08:25 - float
08:26 - and let's call it
08:28 - current
08:30 - credit
08:31 - and i will assign it the value of
08:33 - 0 so the fact that this variable has
08:36 - been declared as a global variable means
08:39 - that you can access it inside every
08:42 - function
08:42 - so what i want to do now is i want to
08:45 - create two functions one for depositing
08:48 - money and another for withdrawing money
08:50 - so
08:51 - let's say
08:52 - void deposit money
08:57 - like this
08:58 - and this function will have a parameter
09:01 - of type float called
09:03 - amount
09:04 - and what i want to do inside this
09:06 - function i would say that
09:08 - current credit
09:10 - plus equals to
09:13 - amount like this so this function will
09:15 - be used to increase current credit by
09:19 - the amount that has been deposited to
09:21 - your account so we can access this
09:25 - variable inside this function because it
09:28 - is a variable that has been declared in
09:30 - a global scope and another thing that i
09:33 - want to do is i want to create another
09:34 - function
09:37 - i will call it withdraw money
09:41 - okay it will also have a parameter
09:44 - called amount but in this situation i am
09:46 - going to subtract that amount from my
09:49 - current credit and again you can see
09:52 - that we can access this variable inside
09:54 - this function as well without any
09:56 - problems and even if i double click on
09:59 - this variable you can see that it
10:00 - appears on three places so here and here
10:04 - and here it's the same variable because
10:07 - it has global scope so what i want to do
10:10 - now is i want to invoke deposit money
10:14 - and i will pass it the value of five so
10:18 - i want to deposit five dollars to my
10:20 - account
10:21 - and then i want to withdraw two dollars
10:24 - from my account
10:26 - okay and at the end i want to say
10:30 - your
10:32 - credit
10:33 - is
10:34 - and then even here
10:36 - inside main function you can access this
10:40 - variable called current credit without
10:42 - any problems so let's run the program to
10:45 - see what we are going to get
10:47 - and it says your credit is three because
10:50 - we have deposited five dollars and then
10:52 - we drawn two so
10:54 - our current credit is equal to three so
10:57 - this is an example of global scope and
11:01 - this is why i said that certain problems
11:03 - are much easier to solve
11:05 - when you can access the same variable
11:08 - from different functions so when that
11:10 - variable has global scope and something
11:13 - that you can do as part of homework is
11:15 - you can try to solve this same problem
11:18 - without using global scope and you will
11:21 - see that it is much more logical and
11:24 - much easier to solve it like this which
11:27 - means by using global scope variables so
11:31 - now that you have seen an example of
11:33 - global scope which is
11:35 - a variable that is declared in global
11:37 - scope is accessible everywhere
11:40 - now i expect to get a question that says
11:43 - something like salina which one is
11:45 - better what should i use local scope or
11:48 - global scope and the answer to that
11:50 - question is it depends it really depends
11:52 - on what kind of problem you are trying
11:54 - to solve that is because local scope
11:57 - variables are accessible only inside one
12:00 - function and each function is like a
12:03 - different story a different task that
12:06 - has variables which are like characters
12:09 - in that story so once you start
12:12 - accessing different variables from
12:14 - different functions
12:16 - it's like all of these stories combining
12:19 - and mixing together which makes it a lot
12:21 - harder to know what is going on and what
12:24 - is happening in your program so a
12:26 - general recommendation for most
12:28 - beginners is to try to stick to local
12:32 - scopes as much as possible and use local
12:34 - variables as much as possible unless you
12:38 - have planned out the solution and
12:40 - absolutely know what you are doing and
12:42 - know that using a global scope is a
12:45 - better solution for your problem so that
12:48 - would be my recommendation stick to
12:50 - local scope variables as much as
12:51 - possible and then if you have a very
12:54 - specific problem that you know is better
12:57 - to be solved by using global scope
12:59 - variables then you can use that the
13:01 - third type of scope in programming is
13:04 - block scope so
13:06 - a variable that is declared inside one
13:08 - block is accessible only inside that
13:12 - block now a legit question is saldina
13:15 - what is a block
13:17 - well an example of a block in
13:19 - programming is for loop or while loop or
13:23 - do while loop or if statement else
13:26 - statement switch case and so on so let
13:29 - me show you how that works on an example
13:32 - let's create a for loop let's say 4
13:35 - and
13:37 - i is equal to 1
13:40 - i is less than 10 and then i plus plus
13:43 - and i'm going to put curly brackets here
13:47 - okay so this is an example of a block
13:51 - and this variable here called i has been
13:54 - declared inside for loop which means
13:58 - that
13:58 - this variable will be accessible only
14:01 - inside this for loop block which means
14:04 - from this curly bracket here until this
14:06 - curly bracket here so if i try to say c
14:10 - out
14:11 - i as you can see we can do that without
14:14 - any errors without any problems but
14:17 - if i try to do that same thing outside
14:19 - of this for loop so outside of this
14:22 - block for example here
14:24 - we are going to get an error it is
14:26 - underlined here and it says identifier i
14:29 - is undefined and that is because
14:32 - this variable here belongs to this block
14:34 - and it is not accessible outside of that
14:38 - block okay so let's delete this part
14:41 - here
14:42 - and something interesting that i want to
14:44 - show you is that sometimes you are going
14:46 - to see that these curly brackets
14:48 - are omitted so there are no curly
14:51 - brackets and this code still works that
14:54 - is because in programming you can still
14:56 - write it like this and this code will
14:58 - work only in a situation where this for
15:02 - loop has only one command so here we
15:05 - have only one command and it belongs to
15:08 - this for loop here but if you try to
15:11 - write another command then you would get
15:13 - an error which again says identifier i
15:16 - is undefined because this here in order
15:19 - to do this it requires you to write
15:22 - these curly brackets
15:24 - again
15:25 - like this and now the error would
15:28 - disappear so the rule is that you can
15:30 - omit these curly brackets only if you
15:34 - have one command that belongs to that
15:37 - block and in this situation it is for
15:40 - loop block and it is the same case for
15:43 - if-else command so only in a situation
15:45 - where you have one command that belongs
15:48 - to that block you can omit the curly
15:51 - brackets if you have two or more then
15:54 - curly brackets are necessary for you to
15:57 - define where the block begins and where
15:59 - it ends fourth type of scope in
16:01 - programming is nested scope and this
16:04 - means when one scope is nested inside
16:08 - another scope now i know that this might
16:10 - sound a little bit tricky but don't try
16:12 - to learn it by heart just try to
16:14 - understand it because it's very logical
16:17 - when you think about it and after i give
16:19 - you the example of a nested scope i will
16:21 - put a picture on the screen so that you
16:23 - can pause the video and analyze that
16:25 - picture and really understand how nested
16:28 - scopes work because sometimes we can
16:30 - have scopes that are nested inside other
16:33 - nested scopes so again please don't be
16:36 - scared by this because once i show you
16:38 - the example you will understand
16:40 - everything and it will be very very easy
16:42 - i promise
16:43 - so let's delete this part of code here
16:47 - and what i want to do is i want to
16:50 - iterate through the numbers between 1
16:53 - and 10 and i want to print which numbers
16:56 - are even and which numbers are odd so
16:59 - let's put curly brackets
17:02 - here and in order to do this i need to
17:04 - say if
17:06 - i is divisible by 2 so
17:09 - if i modulated by 2 gives you the result
17:12 - of 0
17:14 - that means that i is even number so i
17:18 - will print c out
17:20 - i
17:22 - is
17:24 - even
17:25 - oh
17:27 - like this
17:29 - else
17:31 - so
17:32 - if this here results as false
17:36 - that means that i is odd number so our
17:39 - print i is
17:41 - odd
17:42 - like this
17:43 - okay so let's run this program just to
17:45 - make sure that it works as it should
17:48 - okay so 1 is odd 2 is even 4 is even
17:52 - okay the program works as it should but
17:53 - we don't have 10 here because we are
17:55 - going to i less than 10 not i less than
17:59 - or equal to 10. okay this is okay it
18:02 - doesn't matter
18:03 - so
18:04 - something that you need to notice here
18:07 - is that
18:08 - i is a variable that has been declared
18:10 - inside for loop scope
18:13 - but we can still access that variable
18:16 - inside this scope here and this scope
18:19 - here so that is the rule the variable
18:23 - that has been declared in a higher scope
18:26 - can be accessed inside deeper scopes but
18:30 - for example if you try to declare
18:32 - another variable here so let's say
18:35 - int let's say
18:37 - if
18:38 - block
18:39 - variable
18:41 - and let's assign it the value of 10 so i
18:44 - declared a variable inside if block and
18:48 - if i try to access this variable here
18:52 - for example let's say that if block
18:54 - variable is equal to 20 we are going to
18:56 - get an error which says if block
18:58 - variable is undefined so this variable
19:02 - that has been declared in deeper scope
19:04 - cannot be accessed inside higher scope
19:08 - and it cannot also be accessed inside
19:10 - this scope here so again the rule is
19:14 - that variables that have been declared
19:16 - on higher levels which means higher
19:18 - scopes
19:19 - can be accessed inside deeper scopes so
19:22 - deeper levels but not vice versa so a
19:26 - variable that has been declared in
19:27 - deeper scope cannot be accessed inside
19:31 - higher scope as you could see with this
19:34 - example here so that would be all for
19:36 - this video if you enjoyed it give it a
19:38 - thumbs up so that i know to make more
19:40 - videos like this one in the future and
19:42 - then if you have any questions or topics
19:45 - that you would like to see in the future
19:46 - videos feel free to let me know in the
19:48 - comment section and if this video was
19:51 - helpful for you make sure to share it
19:54 - with other people and your friends who
19:56 - would also like to learn programming
19:58 - also i will put on the screen videos
20:01 - that i hand-picked for you so that you
20:03 - can continue upgrading your programming
20:05 - knowledge thank you very much for
20:07 - watching and i will see you in some
20:09 - other video bye