00:00 - hi everyone and welcome to my channel in
00:02 - this video i want to talk about
00:04 - exceptions and exception handling in c
00:06 - plus so i am going to show you how you
00:09 - can work with exceptions on a real life
00:12 - problem
00:13 - so we use exceptions in order to handle
00:16 - different types of errors that can
00:19 - happen during the execution of our
00:21 - program
00:22 - there are three most important keywords
00:25 - that you must know and understand if you
00:27 - want to work with exceptions and those
00:30 - are try catch and throw
00:33 - and in this video i am going to explain
00:35 - all three
00:37 - and in this video we are going to
00:38 - simulate the work of a printer and we
00:42 - are going to see what are some potential
00:44 - issues and errors that can happen during
00:46 - the execution of that program and then
00:49 - we are going to see how we can handle
00:51 - those errors by using exceptions
00:54 - but before i start explaining exceptions
00:56 - i want to introduce you with a tool that
00:58 - i personally use in order to develop c
01:00 - plus applications faster i am going to
01:03 - put it in the background it's called c
01:05 - plus plus builder and you can use it in
01:08 - order to develop modern multi-platform
01:10 - applications with less code because it
01:13 - has a lot of the components already
01:15 - available so you can just use them and
01:17 - you don't have to write all of the code
01:18 - yourself so if you have a great idea for
01:21 - an application that could make a lot of
01:23 - money or that could help to a lot of
01:25 - people but you don't have time you can
01:28 - use c plus builder in order to help you
01:30 - to design a modern user interface and
01:32 - build that application much faster so if
01:35 - you want to try it out i am going to
01:36 - share my link in the description which
01:38 - you can use in order to get 30 days free
01:41 - trial of c plus builder and i will even
01:45 - link a few videos with some of my ideas
01:47 - of the applications that you can build
01:49 - so with that being said now i'm going to
01:51 - return to explaining exceptions because
01:54 - errors can happen in any type of
01:56 - application and you should know how to
01:58 - handle them and that is exactly what i'm
02:01 - going to teach you in this video so as i
02:03 - already said we use exceptions in order
02:06 - to handle different types of errors that
02:08 - can happen during the execution of our
02:10 - program so
02:12 - let's create a program that is going to
02:14 - simulate the work of a printer and then
02:17 - we are going to see what kind of errors
02:19 - and exceptions can happen during the
02:21 - execution of that program and how we
02:24 - should handle those exceptions so the
02:26 - first thing that i want to do is i want
02:28 - to create a class called printer but if
02:31 - you are not familiar with classes and
02:33 - object-oriented programming i am going
02:35 - to link a playlist here and also in the
02:38 - description so make sure to watch that
02:41 - first and then you can come back to this
02:43 - video because you should definitely
02:45 - understand and learn about oop if you
02:48 - want to learn c plus so make sure to
02:50 - watch that and then you can come back to
02:52 - this video so let's create a class
02:55 - called printer i will say
02:58 - class
02:59 - printer
03:01 - like this and this class will have two
03:04 - private members the first is going to be
03:07 - the name of the printer and then second
03:09 - is going to be available paper so how
03:12 - much paper there is inside this printer
03:15 - so let's create those let's say
03:18 - string
03:20 - name
03:22 - and then let's say
03:24 - int
03:25 - available paper
03:31 - like this
03:32 - okay so these two members are private
03:35 - because members of a class are private
03:37 - by default and then i also want to
03:40 - create public members for this class so
03:44 - the first thing that i want to be public
03:46 - is constructor of this class so let's
03:49 - create a public constructor let's say
03:52 - public
03:53 - and then
03:54 - printer
03:57 - okay so this is going to be the
03:59 - constructor of
04:00 - our printer class and this printer
04:03 - constructor will receive two parameters
04:06 - so name and available paper so that we
04:09 - can construct a printer object
04:12 - let's do that let's say string
04:15 - name and then int
04:18 - paper so what i'm going to do inside our
04:22 - constructor is i will say that the name
04:24 - of my printer will be equal to the name
04:27 - that we received in our constructor and
04:30 - then
04:31 - available
04:32 - paper will be equal to
04:36 - paper
04:37 - like this
04:38 - so with this i have created a
04:40 - constructor for my printer class and
04:43 - this is of course a very simple example
04:46 - of how a printer class should look like
04:48 - you can of course add more properties
04:50 - and methods to this class here if you
04:53 - want it to be a representation of a real
04:55 - life printer
04:57 - so
04:58 - one more thing that i want to add to
04:59 - this class here will be a method called
05:02 - print
05:03 - so let's do that let's create a method
05:05 - of return type
05:07 - void and let's call it
05:09 - print
05:11 - okay and what this method here should
05:13 - receive is a text document that it
05:16 - should print so i will say
05:19 - string
05:20 - and let's say
05:22 - txt doc so text document
05:26 - okay and what i want to do inside this
05:29 - print method is i want to print this
05:32 - text document so i am going to say
05:34 - c out and then let's say
05:37 - printing
05:39 - and let's
05:41 - write the text of this document here and
05:44 - i'm also going to add
05:46 - an end line like this
05:48 - okay so in order to test this method
05:51 - let's create an object of printer class
05:54 - and then we are going to construct that
05:56 - object and then we will be able to
05:58 - invoke this method for the object of
06:01 - printer class so
06:03 - i am going to say printer and let's call
06:06 - it my
06:08 - printer
06:09 - and here i am going to construct that
06:12 - object
06:13 - let's call it hp
06:16 - desk jet
06:18 - one two three four for example
06:21 - and then let's say that it has
06:23 - ten papers inside it okay so after i
06:28 - have created my printer object what i
06:30 - can do is i can invoke this method so
06:34 - i'm going to say my printer dot print
06:39 - and what i want
06:41 - this printer to print is the following
06:44 - text so i will say
06:46 - hello
06:47 - my name is
06:49 - saldina
06:51 - let's say i
06:52 - am a software engineer
06:58 - okay and this should be
07:01 - tactile letter s and then here
07:03 - capital letter e like this
07:06 - so if i run this program
07:09 - let's see what is going to happen
07:12 - okay as you can see it says printing and
07:15 - then this is the text that it has
07:16 - printed so my name is saldina and then i
07:19 - am a software engineer okay perfect one
07:22 - thing that i would like to do in order
07:24 - to improve this method here is i would
07:27 - like to check how much paper is required
07:30 - in order for this text document to be
07:33 - printed and then i also want to check if
07:36 - there is enough paper available so let's
07:39 - do that let's make that calculation
07:42 - i am going to create a variable of type
07:45 - int and i will call it required paper
07:51 - like this
07:52 - and i will say for example that on one
07:56 - sheet of paper you can print 10 letters
07:59 - for example
08:00 - so i'm going to say
08:02 - txt
08:03 - document dot
08:05 - length
08:07 - like this and then i will divide that by
08:10 - 10
08:11 - okay so
08:12 - what this calculation here will do is
08:15 - the following so if this text document
08:18 - has 40 characters for example and if we
08:22 - divide that by 10 we are going to get
08:26 - four which means that it is required to
08:30 - use
08:30 - four sheets of paper in order to print
08:33 - this text document
08:35 - okay so what i want to do now is before
08:39 - i try to print this document i want to
08:42 - check if there is enough paper available
08:45 - and i am going to do that here i will
08:47 - say if
08:49 - required paper
08:51 - is greater than
08:53 - available paper
08:54 - what i'm going to do in this situation
08:57 - is i will throw an exception so
09:01 - if we need more paper than we have we
09:04 - are going to throw an exception and in
09:06 - order to do that we use throw keyword
09:10 - and here i will throw a text exception
09:13 - which says
09:15 - no
09:15 - paper
09:17 - like this so
09:19 - if this here results as true if there is
09:22 - not enough paper available we are going
09:25 - to throw an exception but if this here
09:28 - results as false we are just going to
09:31 - print this document and then what we
09:34 - should also do is we should subtract so
09:37 - we should say
09:38 - that now
09:40 - available paper
09:41 - minus equals to
09:44 - required paper
09:45 - so i am going to subtract required paper
09:48 - that we just used in order to print this
09:51 - document from the paper that is
09:53 - available inside our printer so that
09:56 - when we come to this function next time
09:58 - we have less paper okay now
10:01 - one thing that many beginners do is they
10:05 - do the following so they say
10:09 - if required paper is greater than
10:11 - available paper so if we don't have
10:14 - enough paper please throw an exception
10:17 - and then return
10:19 - like this
10:20 - and
10:21 - this is actually redundant because if
10:24 - this exception here is thrown it is not
10:27 - going to continue the execution of the
10:29 - function so this return is redundant
10:32 - because this throw is going to break the
10:35 - execution of the function so i'm going
10:38 - to remove it
10:40 - okay
10:41 - and this here is enough in order to
10:44 - throw the exception and break the
10:46 - execution of the function so if i try to
10:50 - test this method now let's see what is
10:52 - going to happen
10:54 - but instead of testing it once
10:57 - let's invoke it three times for example
11:00 - so if i run this program
11:04 - as you can see
11:05 - inside our console we have printed the
11:08 - document two times instead of three and
11:11 - then we have this exception which says
11:15 - unhandled exception at this location in
11:18 - exception cpp.exe
11:20 - and so on so by doing this we have
11:24 - crashed our application and now i'm
11:26 - going to show you how you can handle
11:28 - this exception that we have thrown from
11:31 - our print function so let's stop our
11:34 - application and in order to handle this
11:37 - exception here what we need to do is we
11:40 - need to put the code that we expect to
11:42 - throw an exception inside a try catch
11:46 - block so
11:48 - i am going to put this inside a try
11:52 - block so i will say
11:53 - try
11:55 - like this
11:56 - and i will move
11:58 - all of the code inside this try block so
12:01 - i will say please try to execute this
12:04 - code here but if you get an exception
12:08 - you are going to catch
12:10 - that exception and you are going to
12:13 - handle it inside this block of code here
12:17 - so
12:18 - inside this sketch we are going to catch
12:20 - a specific type of exception and since
12:23 - we are throwing a text exception here we
12:25 - need to handle that same type of
12:27 - exception
12:28 - here and that type is const char pointer
12:33 - so i'm going to say const
12:35 - char
12:36 - pointer and i will call it txt exception
12:44 - like this
12:45 - so what i want to do inside this catch
12:48 - block is i will write out that an
12:52 - exception has happened so i will say
12:55 - exception
12:58 - like this and then i want to write out
13:01 - the text of that
13:03 - exception
13:04 - like this so we have thrown this
13:07 - exception in the situation when we need
13:09 - more paper than we have available and
13:12 - then we are going to handle that
13:14 - exception in this block here
13:17 - okay so if i run this program as you can
13:20 - see our document has been printed two
13:23 - times because we have enough paper for
13:25 - that but if we try to print it third
13:28 - time we are going to get an exception
13:30 - which says no paper
13:33 - okay now this exception here can be of
13:36 - any data type that you want and here i'm
13:39 - throwing a text exception and then also
13:42 - handling that same type but you can also
13:45 - throw an integer exception for example
13:48 - so let's do that let's say that
13:50 - if
13:51 - this error here happens i am going to
13:53 - throw an integer number of 101. so
13:58 - 101 and then in order to handle this
14:01 - exception we will need to write a
14:03 - different catch block so if i leave it
14:07 - like this and if i try to handle this
14:10 - integer exception using this type of
14:14 - catch block we will get the same error
14:17 - that we had previously so if i run this
14:20 - program as you can see we get unhandled
14:23 - exception because
14:24 - here we are throwing an integer
14:27 - exception and here we are trying to
14:29 - handle only a const char pointer
14:32 - exception so again in order to handle
14:35 - this type of exception we will need to
14:37 - write a different catch block so let's
14:40 - stop our application and let's write
14:43 - another catch block and yes you can
14:46 - write multiple catch blocks for one try
14:49 - block so now i have one try block and
14:52 - then one catch block and then i'm going
14:54 - to add another catch block so i will say
14:58 - catch and this time what i want to do is
15:02 - i want to handle a different type of
15:04 - exception which will be integer
15:06 - exception and let's call it
15:09 - e
15:10 - x code
15:12 - so exception code and what i want to do
15:15 - inside this catch block is i want to
15:18 - write out that code so i will say
15:21 - exception and then
15:23 - ex
15:24 - code like this so in this situation you
15:27 - are going to just give the code of the
15:29 - exception to your user and then you can
15:31 - write out the message that he should for
15:33 - example call support center or that he
15:36 - should check out the documentation in
15:38 - order to understand what this exception
15:41 - code means so
15:44 - if i run my program now
15:46 - as you can see here we have exception
15:49 - 101
15:51 - so since we have thrown an integer
15:53 - exception we have handled that exception
15:56 - in this integer catch block
15:59 - there is also one very specific type of
16:02 - catch handler which is called default
16:05 - handler and that means that it is going
16:08 - to handle any type of exception so
16:11 - the same way that this catch handler is
16:13 - going to handle only integer exceptions
16:16 - and then this one is going to handle
16:18 - only const char pointer exceptions we
16:21 - can use default handler in order to
16:24 - handle any type of exception so how
16:27 - would you use a default handler well you
16:31 - would say
16:32 - catch
16:34 - and then here inside these parentheses
16:37 - instead of putting a type
16:40 - like here and then here
16:42 - i am going to put three dots like this
16:46 - okay and this here means that this catch
16:50 - handler will handle any type of
16:53 - exception so
16:55 - i am going to write a message here which
16:58 - will say
16:59 - c out and then let's say
17:01 - exception
17:02 - happened
17:07 - like this
17:09 - okay
17:10 - so this catch block is going to handle
17:13 - every single type of exception in the
17:15 - same way which means that it doesn't
17:18 - really matter which type of exception we
17:20 - throw we are going to come here and then
17:23 - we are going to handle it in the same
17:25 - way
17:26 - but since we have two catch blocks
17:29 - before this default handler that means
17:32 - that we are first going to try to
17:34 - execute this handler and then if this
17:38 - type of exception is not thrown we are
17:40 - going to continue and then try to
17:42 - execute this handler and then if this
17:45 - type of exception is not thrown then we
17:48 - are going to proceed and execute a
17:50 - default handler so in this situation we
17:53 - are throwing an integer exception which
17:56 - means that this catch block will handle
17:59 - that exception first
18:00 - so we are not going to be able to
18:02 - execute our default handler so in order
18:05 - to test this default handler what i have
18:08 - to do is i have to comment this
18:11 - integer handler first so
18:14 - after i have commented this handler if i
18:17 - run my program let's see what is going
18:19 - to happen
18:20 - okay as you can see it says that
18:22 - exception happened so we have handled an
18:26 - integer exception using this default
18:30 - catch handler
18:31 - okay so let's close this application and
18:35 - if i try to throw a text exception here
18:39 - which says for example no paper
18:43 - like this
18:44 - when this exception is thrown we are
18:47 - going to come to this first catch block
18:50 - and then we are going to try to compare
18:52 - the data type that was shown
18:54 - with this data type that is handled here
18:57 - and if they match we are going to use
19:00 - that handler in order to handle that
19:02 - exception so since we are throwing a
19:05 - const jar exception we are going to
19:07 - handle it here and if we want to test
19:10 - this default handler we will have to
19:13 - comment this as well so if i run my
19:17 - program now
19:18 - as you can see we are again handling
19:21 - that exception using this default
19:24 - handler and this time we are handling a
19:27 - different type of exception which means
19:29 - that indeed we can use a default handler
19:32 - to handle any type of exception now
19:36 - there is one very important thing that i
19:38 - want to mention related to this default
19:41 - handler and that is following so
19:45 - if i uncomment this handler and then
19:48 - this handler here
19:49 - and if i try to move this default
19:53 - handler to be at the beginning
19:56 - we are going to get an error which says
19:58 - that handler is masked by default
20:01 - handler which means that
20:03 - if you put a default handler at the
20:05 - beginning
20:07 - that default handler is going to handle
20:10 - every single error every single
20:12 - exception that happens and then neither
20:15 - one of these two catch blocks is ever
20:17 - going to be executed so you cannot do
20:21 - that if you want to have a specific
20:24 - handlers for specific data types those
20:27 - would come first and then a default
20:30 - handler would be
20:32 - last like this so
20:35 - one more time you put specific handlers
20:39 - first like we did here and then a
20:41 - default handler comes last
20:44 - so if we try to run this program now
20:49 - as you can see we are handling
20:52 - this text exception using this cons char
20:56 - pointer handler
20:58 - okay and then if we try to throw an
21:01 - exception that is not handled here nor
21:04 - here then this default handler is going
21:07 - to jump in and handle that exception so
21:10 - let's go through this example one more
21:12 - time
21:13 - here i have created a class called
21:15 - printer that has a name and available
21:18 - paper and then i have created a
21:20 - constructor for that class and then here
21:23 - i have a method which is called print
21:25 - that receives a text document that it
21:28 - should print and then here i have a
21:31 - calculation that tells me how much paper
21:34 - i need in order to print this text
21:37 - document and i have hard coded that on
21:41 - each sheet of paper we can put only 10
21:44 - characters and you can of course
21:46 - increase this to 100 or 1000 or 10 000
21:50 - but then you will have to pass more text
21:54 - to this print method in order to get the
21:57 - exception
21:58 - okay
22:00 - so after i have calculated how much
22:02 - paper we need in order to print this
22:05 - text document then i will check if we
22:08 - have enough paper available so
22:11 - if we don't have enough paper available
22:14 - i'm going to throw an exception so here
22:17 - the execution of print function is going
22:19 - to end and we are going to come to the
22:23 - handler that can handle that specific
22:26 - type of exception and as you can see in
22:28 - this situation that is a const char
22:31 - pointer so this type of exception is
22:34 - going to be handled here so when it
22:37 - happens we are going to write out this
22:40 - message to our user
22:42 - okay and then if this here results as
22:46 - false then the exception is not going to
22:49 - be thrown so if we have enough paper we
22:52 - are not going to throw the exception
22:54 - but in that situation we are going to
22:56 - print the document and then we are going
22:59 - to decrease the amount of paper that we
23:02 - have available inside our printer
23:05 - okay now inside our main function i am
23:08 - creating a printer which is
23:10 - hp
23:11 - deskjet1234 and it has initially 10
23:15 - sheets of paper
23:16 - and then since i know that this print
23:19 - method can throw an exception i will put
23:23 - invocations of that method inside try
23:27 - block which means that i will try to
23:30 - execute that code but if it throws an
23:33 - exception i will catch that exception
23:37 - and handle it in one of these three
23:40 - handlers and here i have written a catch
23:43 - handler for a const char pointer
23:46 - exception and then here i have handler
23:49 - for integer exceptions and then here at
23:51 - the end i have written a default handler
23:54 - which will handle any type of exception
23:58 - so i hope that now you understand what
24:00 - are exceptions and how to work with
24:02 - exceptions in c plus so if you enjoyed
24:04 - this video please give it a thumbs up
24:06 - because that helps me a lot to reach
24:08 - more people and teach them programming
24:10 - and also if you have friends that would
24:12 - like to learn programming share this
24:14 - video with them because this is very
24:16 - important topic and not many beginners
24:18 - and not many people understand this
24:20 - about programming
24:21 - so you can be the one who is going to
24:23 - make the difference and teach someone
24:25 - programming
24:26 - uh and then also if you have any
24:28 - questions or if you have any topics that
24:30 - you would like to see in the future or
24:32 - if you make any upgrades to this program
24:35 - that i have written you can put those in
24:38 - the comments section
24:39 - so
24:40 - thank you very much for watching and i
24:42 - am going to see you in some other video
24:44 - bye