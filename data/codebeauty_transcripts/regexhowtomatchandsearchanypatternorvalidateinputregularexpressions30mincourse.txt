00:00 - hi guys and welcome to my channel in
00:02 - this video i'm going to teach you about
00:04 - regular expressions and ways to validate
00:06 - user input with the help of regular
00:09 - expressions so i received many comments
00:11 - and questions where you tell me that you
00:13 - were asking the user to enter a number
00:16 - for example but he enters a letter or a
00:18 - string and then you get an error or you
00:21 - are asking the user to enter email
00:23 - address but he enters phone number so
00:25 - your program crashes so in this video i
00:27 - decided to teach you how to solve those
00:29 - type of problems with the help of
00:31 - regular expressions also known as regex
00:34 - so in this video i will use c plus
00:36 - builder because i want to build this
00:38 - little form that has email and password
00:41 - input fields and as you already know
00:44 - simple plus builder is the best choice
00:46 - to build user interface applications
00:47 - with c plus
00:49 - so
00:50 - in this video i will teach you how to
00:51 - validate email and password because
00:53 - those two are a little bit more complex
00:55 - and then i will leave to you to validate
00:58 - first name last name age and things like
01:00 - that if you want to add additional
01:01 - fields to this form here
01:04 - so let's see how this form behaves so if
01:06 - i enter here for example saldina
01:09 - at
01:10 - gmail.com
01:13 - like this and i click validate as you
01:15 - can see email is not valid because the
01:18 - format should be
01:19 - firstname.lastname at something.com so
01:22 - if i say saldena dot nurak and then i
01:26 - click validate now email is valid and
01:29 - then for password let's say that
01:31 - password is selena123
01:34 - and if i click validate again it says
01:36 - that password is not valid and the rule
01:39 - is that it should contain at least one
01:40 - lowercase letter one capital letter one
01:42 - number and one special sign
01:45 - so here we are missing capital letter so
01:48 - let's change that and then also
01:51 - a special sign so let's add that as well
01:53 - okay so if i click on validate now as
01:56 - you can see now our password is valid so
01:59 - this is the program that we will build
02:01 - in this video and i will show you how to
02:03 - validate these inputs from our user with
02:06 - the help of regular expressions and
02:08 - before we start building this
02:10 - application for all my viewers who were
02:12 - asking about databases or sql course
02:16 - i have a great database to recommend it
02:18 - is called interbase and it is a
02:21 - lightweight sql database that doesn't
02:24 - take much space in memory or your disk
02:27 - um and then it is also fast and easy to
02:29 - install and it is multi-platform so it
02:31 - can run on windows and linux and mac and
02:34 - also on ios and android and then
02:37 - probably my favorite characteristic is
02:38 - that it is admin free so the company
02:41 - that i'm currently working for we are
02:44 - processing a lot of transactions
02:46 - probably more than 10 000 transactions
02:48 - in a second so with interbase it can run
02:51 - literally for years without you needing
02:53 - to do backup and restore and i also read
02:56 - that the rover that is currently
02:58 - exploring mars is actually running a
03:00 - copy of interbase on mars
03:03 - so that is because it was too far to
03:04 - send db admin
03:06 - and also because it is very safe and
03:09 - resilient and effective uh so i will put
03:13 - a link in the description so that you
03:14 - can download it and try it out and then
03:16 - also please let me know if i should make
03:18 - an sql course i don't know maybe i
03:21 - should do that let me know in the
03:22 - comments so let's return to regular
03:24 - expressions i showed you the application
03:26 - that we are going to build and here i
03:28 - created a new multi-advice application
03:30 - with c plus builder it is completely
03:33 - empty so the first step that i want to
03:35 - do is i want to build user interface for
03:37 - our app and if you're not familiar with
03:39 - building user interface with c plus
03:42 - builder please make sure to watch this
03:44 - video first and then you can come back
03:46 - so
03:47 - let's do email first so i will need one
03:50 - edit one label and then a button
03:53 - so here i will find
03:56 - edit
03:58 - and then drag and drop it
04:00 - okay
04:01 - and then let's do
04:03 - label
04:05 - t label so this is going to be our
04:08 - is valid label and then
04:10 - button
04:12 - so this is going to be
04:14 - validate button
04:17 - okay and
04:18 - let's change the name of these controls
04:21 - so this edit will be called
04:24 - uh let's call it user input so here i
04:26 - will say user
04:28 - input
04:31 - like this and then this label
04:34 - it will be called is valid label
04:37 - so i'll say is valid
04:40 - label and then this button will be
04:43 - called validate button
04:49 - okay
04:50 - so
04:50 - that is all that we will need for now
04:52 - and now i will teach you about regular
04:55 - expressions so the goal of this video is
04:57 - not to teach you everything about
04:58 - regular expressions nor any video on
05:00 - youtube can do that because it is very
05:03 - broad topic but the good news is that
05:06 - you don't need to know everything in
05:07 - order to be able to use them
05:09 - successfully
05:11 - and i personally don't know everything
05:12 - and i've been using regular expressions
05:14 - for years without any problems
05:17 - so the goal of this video is to teach
05:20 - you that first of all they exist because
05:22 - as a developer you should be familiar
05:23 - with regular expressions and then
05:26 - second reason is i want to prepare you
05:28 - for a real life code i want to prepare
05:29 - you for a situation where you are
05:31 - reading real code and then you come
05:33 - across this regular expression code so
05:36 - you should have at least an idea of what
05:38 - it is doing
05:40 - and then when you find yourself in a
05:42 - situation where you need to solve your
05:43 - problem with regular expressions in most
05:46 - cases you are going to google and find
05:49 - something that is similar and then
05:50 - modify it a little bit in order to fit
05:52 - your problem and in order to be able to
05:54 - do that you should watch this entire
05:56 - video so what is regex what is regular
06:00 - expression the most understandable way
06:02 - to explain it is that a regex is a rule
06:04 - that you can use in order to check if a
06:07 - certain text matches that rule
06:10 - so you already saw at the beginning of
06:12 - the video when i showed you how we
06:14 - validated email and password and the
06:17 - process of that goes like this you first
06:19 - write a regular expression rule and then
06:22 - you use that rule in order to check if
06:25 - the email that your user has entered
06:27 - matches that rule which means if it is
06:29 - valid or not so that is one purpose of
06:33 - regular expressions and then second
06:35 - purpose is you can use regular
06:37 - expressions in order to search for
06:39 - specific characters or words or part of
06:42 - a word or even a sentence in a text and
06:46 - in this video we are going to see both
06:48 - of these uses of regular expressions and
06:51 - they are called regex match and regex
06:53 - search so here we have a site called
06:56 - regex storm which will help us to learn
06:58 - about regular expressions
07:00 - i will put a link in the description so
07:02 - basically here you can enter a regular
07:05 - expression rule and then you can test
07:08 - different inputs to see if they match
07:10 - the rule so let's say for example that
07:12 - we want lowercase letters so i would
07:15 - write a rule like this i would say a to
07:18 - z lowercase and then let's test this
07:22 - input string so if i say salvina all
07:24 - lowercase we get seven matches okay and
07:28 - then if i change this to uppercase
07:30 - letter
07:31 - now we have six matches okay so if i
07:34 - wanted to change this rule to accept
07:36 - also lowercase and uppercase letters i
07:38 - would say a to z lowercase and then also
07:42 - a to z uppercase and as you can see now
07:45 - we again have seven matches okay so how
07:48 - can we say for example that we want
07:51 - numbers
07:52 - well you can probably guess correctly we
07:54 - would say
07:55 - that we want zero to 9 like this but we
07:58 - get 0 matches because inside this input
08:01 - string we don't have any numbers so if i
08:04 - say for example salvina123
08:07 - now we are going to get three matches
08:10 - okay so what else can i show you let's
08:12 - say for example that we want exactly
08:14 - three numbers so i would write a rule
08:17 - like this i would say zero to nine
08:19 - exactly three times and inside this
08:22 - input string we have one match and that
08:24 - is this part here so one two three okay
08:28 - and then if i delete one number now we
08:30 - have zero matches because here i'm
08:31 - saying that i want exactly three numbers
08:35 - and then what else you can do is you can
08:37 - say that you want a minimum of one
08:39 - number and then a maximum of three
08:41 - numbers and then as you can see here
08:44 - this is matched so now we have one mesh
08:47 - because here we have two numbers so
08:50 - these are the basics let's see what else
08:52 - we can do let's say that i want to find
08:54 - a part of this input where we have a
08:57 - number that appears minimum one time
09:00 - maximum three times and then i also want
09:02 - it to end with a specific letter let's
09:05 - say for example letter m okay and now we
09:08 - get zero matches because there is no
09:11 - such thing inside this input part here
09:14 - but if i add letter m here as you can
09:17 - see now we get a match for this part of
09:20 - our input so now we have a number that
09:23 - appears minimum one time maximum three
09:26 - times here we have two so that's a match
09:28 - and then it also ends with letter m as
09:31 - we said here okay and then let's also
09:34 - say that we want this to start with
09:37 - letter a like this with capital letter a
09:40 - and then again here we don't have a
09:42 - match for that but if i say here for
09:45 - example a
09:47 - as you can see now we do have a match
09:49 - and that is
09:50 - okay and that is this part here another
09:54 - important thing that you should know
09:56 - are special characters in regular
09:58 - expressions now there are many special
10:00 - characters and here we are going to see
10:03 - three and then we are going to see a few
10:04 - more by the end of the video
10:06 - so
10:07 - the three that i want to teach you about
10:09 - are question mark plus sign and then
10:12 - asterisk symbol that little star symbol
10:15 - so
10:16 - if you ever worked with wild cards these
10:18 - special symbols in regex are very
10:20 - similar to wild cards and if you haven't
10:23 - doesn't matter because i'm going to
10:24 - explain them anyway so
10:26 - um
10:27 - so let's see how they work the first one
10:29 - that i will explain is question mark so
10:32 - let's delete this interval here so now
10:35 - it says that we are looking for part of
10:38 - the input that starts with letter a and
10:40 - then it has a number and then it has
10:42 - letter m we don't have that interval
10:44 - anymore but if i add a question mark
10:48 - here
10:49 - this rule here means that now we are
10:52 - looking for part of this input which
10:54 - starts with letter a
10:56 - ends with letter m and then it has
10:58 - a number here which can appear one time
11:01 - or zero times so this question mark
11:05 - means that this part here can appear
11:08 - once or not at all okay
11:11 - so here we have no matches because here
11:14 - we have letter a and then we have two
11:17 - numbers and then letter m so if i delete
11:20 - this number two now we should get one
11:23 - match okay
11:25 - and then if i delete this one
11:28 - as well we have a match because as i
11:31 - said this question mark means once or
11:34 - zero times so that is the meaning of
11:37 - question mark let's see the second
11:39 - special symbol the second special symbol
11:41 - is plus sign okay and plus sign means
11:45 - that
11:46 - this part here that comes before it
11:48 - needs to appear at least once but it can
11:50 - also appear multiple times and as you
11:53 - can see here we don't have any matches
11:55 - inside our input okay but if i add here
11:59 - one for example now we do have a match
12:01 - and then if i say one two three again we
12:04 - have a match because plus sign once more
12:08 - means that this part that comes before
12:12 - it needs to appear at least once but it
12:14 - can also appear multiple times and then
12:17 - the third special character that i want
12:19 - to show you is asterix symbol
12:22 - like this and asterisk symbol means that
12:25 - this part that comes before it can
12:28 - appear multiple times it can appear once
12:31 - but it doesn't have to appear at all so
12:33 - this here is valid and then
12:36 - this is valid
12:38 - and then this is valid as well so
12:41 - multiple times once or zero times so
12:45 - those are three special characters that
12:47 - i wanted to show you again we have a
12:49 - question mark which means once or not at
12:52 - all and then plus sign which means at
12:55 - least once but it can also appear
12:56 - multiple times and then we have this
12:59 - asterisk symbol which means that it can
13:01 - appear multiple times once or not at all
13:05 - so i believe those are all basics that
13:07 - you need to know in order to be able to
13:09 - write a regex rule for email address and
13:11 - many more things because email address
13:14 - is pretty hard when compared to some
13:16 - other uh things
13:18 - so
13:19 - here i have an email address in the
13:21 - format of
13:25 - firstname.lastname.gmail.com and this
13:26 - should be valid format of a email
13:28 - address so
13:31 - firstname.lastname.something.com so how
13:33 - can we write a rule that will say that
13:36 - this format is valid this email address
13:38 - is valid and then other formats are
13:40 - invalid well
13:43 - let's take care first of the first name
13:45 - part so here we have multiple lower
13:48 - characters so how would we write a rule
13:50 - for that well you would say that you
13:53 - want lower character that appears let's
13:56 - say at least once but it can also appear
13:59 - multiple times okay so with this we took
14:01 - care of the first name part so now let's
14:05 - see how we are going to cover this dot
14:07 - part
14:08 - now
14:09 - if i say just dot like this
14:12 - it is not going to work as expected
14:14 - because dot is also a special character
14:17 - in regular expressions and dot means
14:19 - literally any character so if you want
14:22 - to say dot literal like specifically dot
14:25 - character you need to put backslash in
14:29 - front of it like this
14:31 - okay so now we have covered this part
14:34 - and then for family name i will also say
14:37 - that i want
14:38 - lowercase letters that can appear at
14:40 - least once or multiple times okay
14:44 - and then let's take care of this at
14:47 - gmail.com so i will say at
14:50 - gmail.com
14:53 - and again here in front of this dot i
14:56 - want to put backslash okay so as you can
15:00 - see now we have one match found okay now
15:04 - one problem that i see with this is that
15:06 - now only gmail addresses will work so if
15:09 - i say here for example
15:12 - hotmail.com we get zero matches so what
15:16 - i should do here instead of at gmail.com
15:18 - is i would say instead of this gmail i
15:21 - also want
15:22 - a lowercase
15:24 - letter to appear at least once or
15:27 - multiple times okay so now hotmail is
15:30 - valid and then windows live is valid
15:34 - and then
15:35 - gmail as well is valid
15:37 - now let's see what is going to happen if
15:39 - i say for example that here we will have
15:42 - a capital letter a
15:44 - we will get zero matches okay because
15:47 - here we have allowed only lowercase
15:50 - letters so let's allow capital letters
15:52 - as well both here and here and also here
15:55 - so i will say a to z lowercase and then
15:58 - a to z uppercase as well and then let's
16:00 - copy this
16:02 - here
16:03 - and then here as well and as you can see
16:06 - now we get one match found and then also
16:09 - if i say
16:10 - k capital again we have a match and then
16:13 - another thing that i want to do is i
16:15 - also want to say that let's say salina
16:17 - dot nurak95
16:20 - gmail.com should also be valid or if i
16:22 - decide to enter here
16:25 - saldena95.norak gmail.com that should
16:27 - also be valid so i want to add numbers
16:30 - here and here and here as well so i will
16:32 - say a to z and then a to z capital and
16:35 - then zero to nine and then let's copy
16:39 - this part here paste it here and then
16:41 - here as well so why am i doing this why
16:44 - am i allowing numbers in first name and
16:47 - second name well because of the name
16:49 - that elon musk decided to give to his
16:51 - son which i'm not even going to try to
16:53 - pronounce but i believe that in the
16:54 - future we will see
16:56 - more people deciding to give to their
16:58 - babies names that have numbers or even
17:01 - special characters elon musk started
17:03 - that trend and
17:05 - a fun fact is that his boy's name is
17:08 - going to break every single validation
17:11 - form for first name because as far as i
17:13 - know first names traditionally contained
17:16 - only lowercase and uppercase letters so
17:19 - now they have 18 years until he's of age
17:23 - in order to fix their uh regex rules
17:26 - before he's able to register anywhere
17:28 - and try to enter his first name
17:30 - so yeah that's a fun fact and that's the
17:32 - reason why i'm allowing also
17:35 - numbers as part of first name and second
17:37 - name and then also as part of this
17:39 - domain why not
17:40 - and since we already did this let me
17:43 - also show you a shorter way to write
17:45 - this part
17:46 - so there is a shortcut for this and that
17:48 - is backslash w
17:51 - and that means all uppercase lowercase
17:54 - and numbers and also underscore i
17:56 - believe so we can use this
17:58 - backslash w instead of this part here
18:02 - and then also let's paste it here like
18:04 - this so this is regex that we will use
18:07 - in order to validate email and when you
18:09 - see a code like this it looks pretty
18:11 - bizarre but if you go step by step then
18:13 - it really makes sense so if you need to
18:15 - rewatch the previous part of the video
18:17 - please do that now because now i'm going
18:19 - to move to c plus code and see how we
18:22 - can use this regex in order to validate
18:25 - user's email address so let's copy this
18:28 - pattern and move to
18:30 - our rad studio so the whole process of
18:33 - validation is going to happen when the
18:34 - user clicks on this validate button so
18:36 - let's create that event handler i will
18:38 - double click on it and here we have a
18:41 - function where we will write our
18:43 - validation code so
18:46 - let's create std
18:49 - string a variable called
18:51 - regex pattern so i'll call it
18:54 - regex pattern
18:57 - like this and here i will paste
19:00 - the pattern that we wrote
19:02 - okay now one important thing that you
19:04 - may or may not know about c plus is that
19:07 - this backslash is a special character in
19:10 - c plus so if you don't want to use it as
19:12 - a special character but you want to use
19:14 - it as character literal so backslash
19:17 - itself which we do want in this
19:19 - situation then you need to add another
19:21 - backslash in front of it so i will add
19:23 - another backslash here
19:26 - and then
19:28 - here
19:29 - and here
19:32 - and then
19:33 - this last place like this okay
19:36 - so
19:37 - the second step is to create regex rule
19:41 - so i will say std
19:44 - regex and i will call this variable
19:47 - regex
19:48 - rule
19:50 - like this and here i will pass
19:54 - this regex pattern
19:56 - and with this we created a regex rule
20:01 - and also in order to be able to use this
20:03 - regex and string you need to say here
20:07 - include
20:09 - string
20:10 - and also
20:12 - include
20:13 - regex
20:15 - like this okay so the next step is to
20:18 - take
20:19 - the text from this input field called
20:22 - user input i believe that's the name
20:24 - that we gave it where is it
20:26 - okay you can check it here it says user
20:29 - input that is the name of this control
20:32 - so i'll go back to my cpp file and here
20:35 - i will say
20:37 - nc
20:38 - string
20:40 - and let's call it
20:41 - email text
20:44 - so i will say user input
20:47 - i want to take text from a control that
20:49 - is called user input and that text is of
20:53 - ansi string type now in order to be able
20:55 - to validate it we need to convert it
20:56 - into c string so i will say
21:00 - std
21:01 - string and i will call it email string
21:06 - okay and i will use this email text and
21:09 - convert it to c
21:11 - string format like this and then one
21:14 - more thing that remains is to check if
21:16 - this email string
21:18 - matches with this regex rule so i will
21:21 - say
21:22 - regex
21:23 - match
21:25 - so please check if this
21:28 - email string matches with this regex
21:33 - rule like this
21:34 - and i want to assign the result of this
21:38 - here into a variable that is going to be
21:41 - of type
21:42 - bool and i will call it is valid
21:46 - okay so i will use this variable in
21:49 - order to set the value for
21:51 - this is valid label so let's go back to
21:55 - cpp file
21:57 - okay and here i will say
21:59 - if
22:00 - is
22:01 - valid what i want to do is i want to say
22:04 - is valid label
22:07 - its text
22:09 - property will be equal to
22:12 - it is
22:13 - valid or
22:15 - email is valid
22:17 - like this
22:18 - okay and then
22:20 - else
22:22 - so if it is not valid then i want to set
22:26 - a different message so i will say that
22:29 - email is
22:30 - not valid like this so let's test this
22:35 - program now
22:36 - let's run it
22:38 - so if i try
22:40 - salvinac
22:42 - gmail.com
22:44 - and i click on validate we will get this
22:47 - message which says that email is not
22:49 - valid because we are missing
22:51 - a dot separator between first name and
22:55 - last name okay so if i click on validate
22:57 - now now it says that email is valid and
23:00 - this should also be valid
23:01 - salvina95.murak.gmail.com
23:05 - should also be valid okay
23:07 - and then we can put
23:09 - also capital letters that should also be
23:11 - valid but if we are missing this dot
23:14 - symbol or if we are missing for example
23:16 - at here then email is not going to be
23:20 - valid so that is how you validate email
23:23 - now let me show you how you can validate
23:25 - password so let's comment this email
23:28 - validation part
23:30 - because i want to reuse the same
23:32 - controls that i used for email because
23:33 - this video is getting too long so i
23:36 - don't want to make it any longer than it
23:38 - needs to be and these controls already
23:40 - have generic names so
23:42 - this edit is called
23:44 - it is called user input not email user
23:47 - input and then this is also is valid
23:49 - label but if you want to add new
23:51 - controls then you should give them a
23:53 - specific name so password user input and
23:56 - then password valid label and so on
23:59 - but i will use these existing ones so
24:01 - let's go back to cpp file okay and here
24:05 - i will write regex for password now the
24:08 - rule for password is that it needs to
24:10 - contain at least one lowercase letter
24:12 - one uppercase letter and then one
24:14 - special character and one number so that
24:17 - is the regex rule that we will write so
24:19 - i will divide this into four rules so
24:21 - that it is easier to understand and
24:23 - let's start with lowercase letters so
24:26 - let's say std
24:28 - string
24:30 - and let's say lowercase
24:34 - okay
24:34 - so here will be the rule for at least
24:37 - one lowercase letter now let's put here
24:40 - question mark and then equal to now this
24:44 - combination here means that whatever i
24:46 - put after it needs to be fulfilled
24:49 - somewhere in the password so i don't
24:51 - care about the exact order i just need
24:54 - for this which is lowercase letter to
24:58 - appear somewhere in the password okay
25:01 - and then another thing that i want to
25:03 - add is i want to say that before this
25:05 - lowercase letter we can have
25:08 - another character and that can be any
25:10 - character and if you remember when we
25:12 - talked about dot symbol we said that it
25:16 - is a special character in regular
25:18 - expressions and the purpose of dot is to
25:21 - say any character so in front of a
25:25 - lowercase letter can appear any
25:27 - character and that character can appear
25:30 - one time it can appeal appear multiple
25:32 - times or it doesn't have to appear at
25:34 - all and that is when our password starts
25:36 - with lowercase letter so which one of
25:39 - those three
25:40 - special wildcard symbols represents zero
25:44 - one or multiple times
25:46 - well that is the star symbol right so
25:50 - here is the lowercase part of our
25:51 - password which says the following
25:54 - i need whatever comes after this to
25:56 - appear somewhere in my password i don't
25:59 - care about the exact position i just
26:01 - need for this part here to be fulfilled
26:04 - somewhere in the password and this part
26:06 - here says that
26:08 - we need to have at least one lowercase
26:11 - letter and then in front of that
26:12 - lowercase letter we can have any
26:15 - character and that character can appear
26:18 - one time it can appear multiple times or
26:20 - it doesn't have to appear at all and
26:22 - that is the situation where our password
26:24 - starts with lowercase letter so that is
26:27 - what this rule here says so let's do the
26:30 - same for uppercase letters numbers and
26:33 - special characters so i will just
26:35 - copy this
26:37 - rule and then paste it and here i will
26:39 - say
26:40 - uppercase
26:42 - okay and then i will change it to say
26:45 - uppercase letters
26:46 - like this and then let's do
26:49 - numbers
26:52 - and here i will adjust it to say 0 to 9
26:57 - like this and then also let's cover
27:00 - special
27:01 - characters
27:04 - like this and here i will manually put
27:08 - special characters that can appear so i
27:10 - will say for example um dollar symbol
27:13 - underscore and at symbol you can add
27:16 - more if you want so
27:18 - that is a rule for lowercase letters
27:20 - uppercase numbers and special characters
27:23 - and let's add one extra rule which will
27:26 - say that we need to have at least
27:29 - six characters inside our password we
27:32 - can have minimum of six and then we are
27:34 - not going to define maximum so i will
27:36 - say std
27:38 - string and let's call this rule min
27:41 - characters
27:43 - like this and i will say
27:46 - that this rule needs to be fulfilled
27:49 - somewhere in our password and that is
27:51 - that
27:52 - any symbol
27:54 - needs to appear at least six times that
27:57 - is the minimum and then we are not going
27:59 - to define maximum okay so this is how
28:03 - you how you use the interval that i
28:05 - showed you at the beginning of the video
28:07 - so these are all individual rules that
28:10 - we need to fulfill for a password to be
28:13 - valid so now let's combine all of these
28:16 - rules into one so i will say
28:18 - std string
28:21 - and let's call it
28:23 - full pattern
28:26 - like this and i will say
28:28 - lowercase
28:30 - plus
28:32 - uppercase
28:34 - and then i will also say plus
28:37 - numbers
28:39 - plus special characters and also
28:43 - plus minimum number of characters
28:47 - okay let's format this a little bit
28:51 - like this
28:52 - okay so this is going to be full rule
28:55 - and since we are combining multiple
28:58 - rules what i need to do is i need to put
29:00 - them into parentheses so all of these
29:02 - individual rules need to be
29:04 - in parentheses like this so i will put
29:08 - parentheses here
29:10 - and then also here let me do this very
29:12 - quickly and then i will be back okay so
29:14 - i put these individual rules all five of
29:17 - them into parentheses because here we
29:20 - are combining them and then the next
29:23 - step is
29:24 - this step that we did here so to create
29:27 - a regex
29:29 - rule like this and to this rugex rule i
29:31 - will pass this full
29:34 - pattern
29:35 - like this okay and then the next step is
29:38 - we will take the password that our user
29:41 - has entered so i will copy
29:44 - this part
29:45 - here
29:46 - so
29:47 - i will take
29:49 - the
29:50 - password text
29:54 - let's just change the name of the
29:55 - variable and then the name of our input
29:58 - stayed the same
29:59 - so
30:00 - i will take from user's input i will
30:02 - take text of that input and i will store
30:05 - it into password text variable and then
30:07 - here i will need to convert it into c
30:09 - string format in order to be able to
30:11 - validate it so i will create a variable
30:13 - of type string i will call it password
30:16 - string
30:18 - like this and i will convert this
30:21 - password text into c string format
30:24 - okay and then i will again copy this
30:28 - part that we used for email
30:31 - paste it here and then one important
30:34 - difference is that for validating
30:36 - password we are not going to use regex
30:39 - match but we are going to use regex
30:41 - search because there is no exact pattern
30:44 - that a password should match but rather
30:47 - there are five individual rules that
30:50 - every password should fulfill and those
30:52 - are that it contains at least one
30:54 - lowercase one uppercase and then one
30:57 - number special character and then that
30:59 - minimum number of characters is six so
31:02 - here as i said i will not use regex
31:04 - match but i will use regex search
31:10 - okay and i will say that i want to
31:12 - search
31:13 - for
31:14 - this password string inside our regex
31:17 - rule object that contains our full
31:20 - pattern okay so let's change also this
31:24 - validation message to say that
31:26 - password is valid
31:29 - and then
31:30 - here in case that it is not valid i will
31:32 - say password is not valid so let's start
31:36 - our program and test the code that we
31:38 - have written
31:39 - okay
31:42 - so here i will let me just move it here
31:45 - so that you can see code as well so here
31:48 - i will try password
31:50 - salvina123
31:52 - and if i click validate it says that
31:54 - password is not valid so we are missing
31:58 - capital letter we are also missing a
32:01 - special symbol and if i click on
32:03 - validate now now it says that password
32:05 - is valid and also if you try to enter
32:08 - less than six characters password should
32:10 - not be valid so let's try
32:12 - s and then special symbol and then
32:15 - lowercase letter and let's enter a
32:17 - number so here we have four characters
32:20 - so we have fulfilled four of the five
32:23 - rules so if i click on validate now it
32:25 - says again that password is not valid
32:27 - because this last part says that
32:30 - password should contain at least six
32:32 - characters so if i add two three now the
32:36 - password should be valid
32:38 - okay so that will be all for this video
32:41 - if you enjoyed it please give it a big
32:43 - thumbs up because that is really
32:45 - important for the youtube algorithm and
32:47 - then also share it with someone who
32:48 - needs to see this video and learn about
32:50 - regular expressions and ways to validate
32:53 - user input with regular expressions so
32:56 - thank you very much for watching and i
32:58 - will see you in some other video bye