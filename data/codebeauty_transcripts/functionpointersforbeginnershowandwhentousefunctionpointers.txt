00:00 - hi everyone and welcome to my channel in
00:02 - this video i want to teach you about
00:04 - function pointers in c plus plus many
00:07 - beginners think that
00:08 - function pointers are extremely hard to
00:10 - understand
00:11 - and to be honest um the syntax is
00:14 - one of the ugliest things that you are
00:16 - going to see in c plus plus language
00:18 - but in this video i decided to simplify
00:20 - it and to make it understandable for
00:22 - every single beginner so in this video
00:24 - you are going to learn
00:26 - how to use function pointers and why
00:28 - they exist
00:29 - what is their purpose but before i start
00:31 - i want to answer a question that i get
00:33 - very often and that is related to
00:35 - building user interface applications in
00:38 - c
00:38 - plus plus so in my last video which i
00:41 - will link here
00:42 - i decided to show you how you can use c
00:45 - plus plus builder in order to build user
00:47 - interface application in less than 10
00:49 - minutes
00:50 - so c plus plus builder is a tool used to
00:53 - build
00:54 - modern multi-platform applications fast
00:56 - because
00:57 - it has a palette of components that you
00:59 - can just drag and drop without having to
01:01 - write
01:02 - a lot of the code yourself so if you are
01:04 - interested in building user interface
01:06 - applications
01:07 - i'm going to leave that video that you
01:09 - can use as a tutorial and then i will
01:11 - also leave a link to c
01:13 - plus builder so that you can download it
01:15 - and try it out for free
01:16 - so again if you want to build user
01:18 - interface applications
01:20 - make sure to check out the description
01:21 - of the video the first thing that i want
01:23 - to explain
01:24 - related to function pointers is what are
01:27 - function pointers
01:28 - and then later in the video i'm going to
01:30 - explain what is their purpose
01:32 - why do they exist and i'm also going to
01:35 - leave timestamps in the description that
01:37 - you can use
01:37 - in order to navigate yourself to the
01:39 - desired part of the video but
01:41 - i highly recommend you to watch the
01:43 - entire video if you really want to
01:44 - understand
01:45 - what are function pointers so
01:48 - um in order to understand what are
01:50 - function pointers you first need to
01:52 - understand
01:53 - what is a pointer and in the beginning
01:55 - of this
01:56 - playlist in the first video we already
01:58 - said that
01:59 - a pointer is a special type of variable
02:02 - that is used in order to store
02:04 - the address of another variable
02:07 - now a function pointer is very similar
02:11 - but
02:11 - instead of storing the address of a
02:13 - variable a function pointer stores the
02:16 - address
02:16 - of a function so let's demonstrate how
02:20 - that works
02:20 - in visual studio so let's create a
02:23 - function
02:24 - of return type int let's call it
02:27 - get number and from this function
02:31 - i just want to return number five
02:35 - like this and it is very easy to predict
02:38 - what is going to happen if i say get
02:41 - number and then i run my program
02:45 - okay we get the value of five written in
02:48 - our console
02:49 - okay now one question that i have for
02:52 - you is
02:52 - what is going to happen if i remove
02:56 - these parentheses so what kind of output
02:59 - do you
02:59 - expect to get in the console write me in
03:02 - the comments so if i run my program now
03:06 - as you can see we get an address
03:10 - so what kind of address this is this
03:13 - is the address of our function
03:17 - and now that we learned that the name of
03:20 - the function
03:20 - will give you its address what we can do
03:23 - is we can create
03:25 - a function pointer and then we can
03:27 - assign
03:28 - the address of that function to a
03:30 - function
03:31 - pointer so let's stop our program and
03:34 - let's do
03:34 - that i am going to remove this line of
03:38 - code i don't need it anymore
03:39 - and now i'm going to show you how you
03:41 - can create a function
03:43 - pointer the syntax is pretty hard so pay
03:46 - attention
03:47 - the first thing that you need to do in
03:48 - order to create a function pointer is
03:51 - use these parentheses and then inside
03:54 - parentheses you will put
03:56 - asterix symbol and you will give the
03:59 - name to your function pointer so
04:01 - let's call it func ptr
04:05 - so function pointer that is the first
04:08 - part
04:09 - the second part is to put the return
04:11 - type of your function in front of
04:14 - the name so here since i want to point
04:17 - to this function here
04:18 - the return type is int so i'm going to
04:21 - put
04:21 - int here and then the third part
04:24 - is to put the parameters that your
04:27 - function receives
04:28 - after the name of your function pointer
04:31 - and that
04:32 - is here so you are going to put
04:34 - parentheses
04:35 - and inside these parentheses you would
04:38 - put
04:39 - the list of parameters that your
04:41 - function receives
04:42 - but since this function here does not
04:45 - receive any parameter
04:47 - these parentheses are going to be empty
04:50 - okay and with this we have successfully
04:54 - created
04:55 - a function pointer that can point to any
04:58 - function
04:59 - that returns int and it does not
05:02 - receive any parameter and that is for
05:05 - example
05:06 - this function here so what i can do now
05:10 - is i can say that my function pointer
05:13 - will point to get number
05:17 - function and as we already saw
05:20 - this getnumber function will give us the
05:23 - address of this
05:24 - function here so what i can do now
05:27 - is i can use this function pointer
05:30 - in order to invoke this function so
05:33 - i can say c out func
05:37 - ptr like this so the approach is
05:40 - absolutely the same as invoking that
05:43 - function directly
05:44 - but instead of using the name of the
05:46 - function you just use
05:48 - the name of the function pointer so if i
05:51 - run
05:52 - the program as you can see we are going
05:54 - to get
05:55 - the value of five but we have invoked
05:58 - this getnumber function by using a
06:00 - function
06:01 - pointer okay so let me show you
06:05 - one more time how you can create a
06:07 - function pointer
06:08 - but this time i want to show you how you
06:11 - can do that
06:12 - for a function that actually receives
06:14 - parameters
06:15 - so let's delete all of this code like
06:20 - this
06:20 - and let's create another function so
06:23 - let's create a function that returns
06:25 - int let's call it add and this function
06:28 - will receive int a and then int
06:32 - b and the task of this function
06:35 - will be to sum these two numbers and
06:37 - then to return
06:38 - the results so i'm going to say return
06:41 - a plus b like this so
06:45 - how can we invoke this function by using
06:47 - a function
06:48 - pointer well let's again repeat how we
06:51 - can create
06:52 - a function pointer so one more time you
06:56 - use parentheses and then inside
06:58 - parentheses you are going to put
07:00 - asterisk symbol to indicate that you
07:02 - want to create a pointer
07:03 - and then you will give a name to your
07:05 - pointer you will call it
07:07 - func ptr for example and then
07:10 - two more things the first one is to put
07:12 - the return type of your function
07:14 - in front so end because we want to point
07:17 - to this function here
07:19 - and then the second part is to put
07:21 - parameters
07:23 - after the name of your function pointer
07:25 - so here
07:27 - and here inside these parentheses i will
07:29 - put
07:30 - int and then int because this
07:33 - add function receives two parameters and
07:36 - those are
07:36 - integer and integer so now we have
07:39 - created a function pointer that can
07:41 - point to any function that
07:43 - returns integer and receives two
07:47 - integers and that is this function here
07:50 - so
07:50 - i can now say that my function pointer
07:53 - will hold the address
07:55 - of add function and if
07:58 - i want to invoke this function there are
08:01 - two ways to do that so i can either say
08:04 - c out add and then let's pass
08:08 - two numbers let's say for example two
08:10 - and three
08:12 - let's add end line and then second way
08:15 - to invoke this same function is by using
08:18 - this
08:18 - function pointer so i can say c out
08:21 - and then func ptr and
08:24 - here i'm going to use the same approach
08:27 - of passing parameters like i did
08:29 - here so i'm going to say for example
08:31 - three and four
08:33 - and let's add end line here as well so
08:37 - if i run my program let's see what is
08:39 - going to happen
08:40 - okay for this first line we get the
08:42 - result of
08:43 - five so two plus three is five and then
08:45 - for this
08:46 - second line we get the result of seven
08:49 - so three plus four
08:50 - is seven so this is how you can create a
08:54 - function pointer and then this is how
08:55 - you can invoke that function
08:57 - by using its function pointer
09:00 - okay now that you have seen and
09:02 - understood what i just explained
09:04 - your question might be saldina why would
09:08 - anyone want to create a function pointer
09:11 - just to be able to invoke that function
09:14 - because
09:14 - it is so much easier to do that
09:17 - directly and the answer to your question
09:20 - is you
09:21 - are absolutely right but this is not
09:24 - the purpose of function pointers this is
09:26 - not the reason
09:28 - why function pointers exist so let's
09:31 - talk about
09:32 - the real purpose of function pointers
09:34 - why they exist and
09:36 - when we can use function pointers
09:39 - one of the most common uses of function
09:42 - pointers
09:42 - is we use a function pointer in order to
09:46 - be
09:46 - able to pass a function as an
09:50 - argument or as a parameter to another
09:53 - function
09:54 - and we do this in order to optimize our
09:57 - code so
09:57 - in order to make our code reusable
10:01 - so what i want to do now is i will
10:04 - delete
10:05 - all of this code and then i'm going to
10:07 - type a code that i want to show you in
10:09 - order to demonstrate
10:10 - something amazing that we can do with
10:12 - function pointers so after i type that
10:15 - code i will be
10:16 - back so here i have created a couple of
10:19 - functions
10:20 - and let's now explain what every single
10:23 - one of these
10:24 - is doing so the first one is ascending
10:27 - compare and it is very simple function
10:30 - that just compares two numbers
10:32 - so that the first one is smaller than
10:36 - the second one and then it returns if
10:38 - that is true
10:39 - or not and then descending compare again
10:42 - very simple function and again it
10:44 - compares two numbers but
10:46 - in this situation the first number needs
10:48 - to be
10:49 - greater than the second number okay
10:52 - these two are very simple let's see what
10:54 - is happening inside this
10:56 - sort ascending function so if i open
11:00 - that function you will notice that this
11:02 - here is
11:03 - a sorting algorithm now the goal
11:06 - of this video is not for you to
11:08 - understand how this sorting algorithm
11:10 - works
11:11 - we are going to explain that in a whole
11:13 - another video of c
11:14 - plus plus sorting algorithms which i'm
11:16 - going to make in the future
11:18 - but for now the goal is that you
11:20 - understand that
11:21 - the job of this function here is to sort
11:24 - a vector of numbers in an ascending
11:27 - order
11:28 - and one very important thing is that
11:30 - since we are using a vector
11:33 - you will need to include that vector
11:36 - because
11:36 - otherwise you are going to get an error
11:39 - so
11:40 - that is the job of sort ascending
11:43 - now if we take a look at sort
11:47 - descending let me move this
11:50 - code okay you will notice that sort
11:53 - descending function is almost identical
11:57 - to sort ascending function and the only
12:00 - thing that is different
12:02 - is this part here and this
12:05 - part here so our sort ascending which is
12:09 - sorting numbers in an ascending order
12:12 - is invoking ascending compare function
12:15 - and then our sort descending is invoking
12:18 - descending compare function and those
12:21 - are the functions that i explained
12:23 - in the beginning okay so
12:26 - the next thing that i want to do is i
12:28 - just want to demonstrate how these two
12:30 - functions
12:31 - work i want to test these two functions
12:34 - and then i
12:35 - am going to show you how we can optimize
12:37 - this
12:38 - code here so what i want to do
12:41 - is i want to create a vector
12:45 - of integers and let's call it
12:48 - my numbers like this
12:52 - and i want to assign numbers of two
12:55 - and then five one three six
12:59 - and four okay
13:02 - and what i want to do now is i want to
13:05 - invoke
13:06 - sort ascending and then i will print
13:09 - those numbers
13:10 - in order to be able to see if those
13:11 - numbers have been
13:13 - sorted in an ascending order and for
13:16 - printing numbers we will use
13:17 - this function here which is very simple
13:20 - function that will just
13:22 - iterate through this numbers vector and
13:25 - write
13:25 - out every single number of that vector
13:28 - so let's do what i just explained let's
13:32 - invoke
13:32 - sort ascending like this
13:36 - and let's pass my numbers vector
13:40 - to that function and after
13:43 - i have sorted those numbers in an
13:45 - ascending order
13:47 - let's say print numbers and i will pass
13:51 - my numbers vector like this
13:54 - so if i run my program let's see what is
13:57 - going to happen
13:58 - as you can see this vector here has
14:02 - been sorted in an ascending order so one
14:05 - two three four five
14:06 - six okay so that means that our sword
14:09 - ascending function works
14:11 - as it should and let's now test this
14:14 - sort
14:15 - descending so here i'm going to invoke
14:17 - sort
14:18 - descending function everything else
14:20 - stays the same
14:21 - so let's run our program again
14:24 - okay so six five four three two one
14:27 - which means that our sword descending
14:29 - works
14:30 - as it should as well okay perfect
14:33 - again all of this code will be in the
14:35 - description for those of you who want to
14:36 - analyze how this
14:38 - sort descending and then sort ascending
14:41 - functions
14:41 - work but for now it's enough for you to
14:43 - understand that this one is sorting
14:45 - numbers in an ascending order and then
14:47 - this one in descending order and that
14:50 - the only difference between these two
14:53 - functions
14:54 - is in this part here so
14:58 - this one is invoking ascending compare
15:00 - and then
15:01 - this one is invoking the sending compare
15:04 - so the next thing that i want to show
15:06 - you is how we can optimize this code
15:08 - here
15:09 - so that we can create one function that
15:11 - will be called
15:12 - custom sort and we can use that function
15:16 - in order to sort numbers in both
15:19 - ascending and descending order and
15:22 - the general idea is for that function to
15:24 - receive
15:25 - numbers vector and then we are going to
15:29 - pass
15:30 - another function to our custom sort and
15:33 - that function can be either
15:34 - this one or this one because that is the
15:38 - only difference between
15:40 - these two functions so
15:43 - let me show you how we can do that the
15:46 - first thing that i want to do
15:47 - is i want to change the name of this
15:49 - function here so
15:50 - instead of calling it sort ascending
15:53 - let's call it
15:54 - custom sort like this
15:57 - and that custom sort function as i
16:00 - already said
16:00 - will receive numbers vector and then it
16:04 - will receive a function
16:05 - pointer so it will receive a function
16:08 - pointer to one of these
16:10 - two functions so let's add that
16:13 - function pointer here as a parameter one
16:16 - more time how can we create a function
16:18 - pointer
16:20 - well inside these
16:23 - parentheses you are going to put asterix
16:26 - symbol and then you will give the name
16:29 - to your function pointer
16:30 - let's call it um compare
16:34 - func ptr so compare
16:38 - function pointer let's just call it func
16:40 - instead of fun
16:42 - okay so that is the first part the
16:45 - second part
16:46 - is to put the return type of your
16:48 - function in front so here
16:50 - i will say bool because that is the
16:52 - return type of both
16:54 - this function and this function here and
16:56 - then the last step
16:58 - is to put parameters that the function
17:01 - receives
17:02 - inside parentheses after the name of
17:05 - your function
17:06 - pointer so here and the parameters that
17:09 - these two functions receive
17:11 - are int and in so two integers so here
17:14 - i'm going to put
17:15 - int and then int okay so
17:19 - with this we have created a function
17:21 - pointer
17:22 - called compare func ptr
17:25 - which can point to either this function
17:28 - here
17:29 - or this function here so it can point to
17:32 - any function that returns bool
17:35 - and receives two integers so what we can
17:39 - do with our compare function pointer is
17:41 - we can use it to pass
17:43 - either this function or this function to
17:47 - our custom sort so since
17:50 - this part here was the only difference
17:53 - between
17:54 - sort ascending and sword descending
17:57 - if i change this with my compare
18:00 - function
18:00 - pointer that means that whichever
18:04 - one of these two is passed as
18:07 - argument to our custom sort that one
18:11 - is going to be invoked here so that
18:14 - means that now we can use custom sort
18:17 - in order to do both ascending and
18:20 - descending sort
18:21 - of this vector here so
18:25 - that means as well that now we can
18:27 - delete
18:28 - sort descending so let's test
18:31 - this function here so i
18:34 - am going to delete this part here and
18:37 - what i want to do first is i want to
18:40 - create
18:41 - this function pointer in my main
18:43 - function so i will
18:45 - do it here again inside parentheses you
18:48 - put
18:49 - asterisk symbol and then you give the
18:51 - name to your function pointer let's call
18:53 - it
18:53 - func ptr and then you put
18:57 - the return type of that function here
19:00 - since we want to point to one of these
19:02 - two functions
19:03 - the return type is bull and then they
19:05 - receive
19:06 - two integers so the return type goes
19:09 - here
19:10 - bull and then the parameters go here
19:13 - inside parentheses and those are
19:16 - two integers like this so
19:19 - we have created a function pointer that
19:21 - can point to
19:22 - any function that returns bull and
19:25 - receives
19:25 - two integers so the first one that i
19:29 - want to assign here
19:30 - will be ascending compare
19:34 - like this so now i'm going to invoke
19:38 - my custom sort function
19:41 - here and i am going to pass two
19:44 - parameters to that function
19:46 - the first parameter is numbers vector so
19:49 - my numbers okay and then
19:52 - the second parameter is a function
19:55 - pointer to a function that
19:57 - returns bull and receives two integers
20:00 - and that will be
20:02 - this function pointer here okay
20:05 - perfect so now if i run my program what
20:08 - do you expect to happen write me in the
20:11 - comment section
20:12 - so let's run the program
20:15 - okay and as you can see the numbers
20:18 - of my vector have been sorted in the
20:21 - ascending
20:22 - order so 1 2 3 4 5 6. and for that we
20:26 - have used
20:27 - custom sort function and we have passed
20:30 - our vector and a function pointer so we
20:33 - have passed
20:34 - ascending compared to our custom sort
20:38 - so we have basically used a function
20:40 - pointer in order to pass
20:43 - one function as an argument to
20:46 - another function and let's now test
20:49 - this with descending compare so i'm
20:52 - going to say
20:53 - descending compare here and that is the
20:56 - only thing that you need to change
20:58 - and now this descending compare will be
21:01 - passed
21:02 - as an argument to our custom sort
21:05 - so if i run my program now let's see
21:08 - what is going to happen
21:09 - perfect now our numbers have been sorted
21:12 - in the descending order so six five four
21:16 - three two one and we have achieved
21:19 - that by using a by using a function
21:23 - pointer okay so i hope that
21:26 - this video was helpful i hope that you
21:28 - understood
21:30 - what is the purpose of function pointers
21:32 - and how you can create and use function
21:34 - pointers
21:35 - all of this code will be in the
21:37 - description
21:38 - again you don't really have to bother
21:40 - with understanding
21:42 - what these functions are doing except
21:44 - for the part
21:45 - of how you can use a function pointer in
21:48 - order to pass
21:49 - one function as an argument to
21:53 - another function so i hope that you
21:56 - enjoyed this video if you did please
21:58 - give it a thumbs up for the youtube
22:00 - algorithm that helps me a lot to reach
22:02 - more people
22:03 - and then share it with someone else who
22:04 - would also like to learn programming
22:06 - because
22:06 - the topic of function pointers is not
22:08 - very beginner friendly so
22:10 - if you found this video helpful you
22:13 - might make a very big difference in
22:15 - someone else's
22:16 - life and you might help that person to
22:18 - learn programming much
22:19 - faster so thank you very much for
22:22 - watching and
22:22 - i am going to see you in some other
22:24 - video bye