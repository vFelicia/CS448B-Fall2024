00:00 - hi guys and welcome to my channel in
00:02 - this video you are going to learn about
00:04 - operators in programming so what are
00:07 - operators operators are characters
00:10 - meaning symbols that we use in order to
00:12 - perform different operations for example
00:15 - if you want to add two numbers you use
00:18 - plus operator if you want to subtract
00:20 - them you use minus operator and so on so
00:24 - there are many different operators and
00:26 - different types of operators in
00:28 - programming and in this video we are
00:30 - going to cover arithmetic operators
00:32 - assignment operators increment decrement
00:36 - and we are also going to learn about
00:38 - some of uh very sneaky and very
00:40 - important bugs and errors that happen to
00:43 - beginners but also to some more
00:46 - experienced developers so I'm going to
00:48 - explain everything that you need to know
00:51 - about this topic and before we continue
00:53 - with this video there is something very
00:55 - important that I want to tell you so if
00:58 - you want to learn practical programming
01:00 - and you want to start creating real
01:02 - applications as fast as possible and you
01:04 - want to get a job as a software
01:07 - developer then you should definitely
01:09 - join my practical programming course I
01:11 - have created entire plan for you
01:13 - everything is step by step all of the
01:16 - lessons that you need to watch all of
01:18 - the exercises that you need to do
01:20 - everything is on one place and the only
01:22 - thing that you need to do is to follow
01:24 - that plan that I have created if you're
01:26 - a beginner there are a lot of things
01:28 - that you need to learn a lot of
01:29 - exercises that you need to do but if you
01:32 - start today and follow the plan that I
01:34 - have created in 6 months you will be
01:37 - prepared to start a successful career as
01:40 - a software developer as a programmer you
01:42 - will have the option to work anytime you
01:44 - want any place you want so you will be
01:47 - able to work on a beach by the pool on a
01:49 - mountain also you will get the
01:51 - opportunity to meet some great people
01:54 - and you will be able to work on great
01:56 - projects that are shaping our future and
01:59 - all of that while earning a lot of money
02:02 - so if this sounds like something that is
02:04 - interesting to you then click the link
02:06 - in the description because I have made
02:08 - entire plan that you need to follow
02:10 - until you achieve this and there is even
02:13 - a special discount that you can get so
02:15 - more details are going to be in the
02:17 - description and now let's continue with
02:19 - the topic of today's video so let's
02:21 - first talk about arithmetic operators
02:24 - there are five arithmetic operators
02:27 - those are plus used to add numbers and
02:30 - then minus which we use to subtract
02:33 - numbers and then we have division
02:35 - operator multiplication operator and
02:38 - then we have this operator here which is
02:40 - called modulo and we are going to see
02:42 - how this one is used later okay so let
02:47 - me put this
02:51 - here like this so arithmetic operators
02:55 - and then we have these five so now let's
02:58 - see how each one of these 5 is used
03:01 - let's start with plus operator so how do
03:04 - you use it as we already explained it is
03:06 - used to add two numbers for example I
03:09 - can say int result is equal to let's say
03:15 - 13 + 12 so this here is plus operator
03:20 - and it is used to add these two numbers
03:24 - so if I print this result variable here
03:28 - we should get 20 5 so let's check
03:32 - that okay as you can see 13 + 12 is
03:36 - equal to 25 so that is how you use plus
03:40 - operator now this plus operator has
03:44 - another interesting use and that is
03:47 - concatenation for example what I can do
03:50 - is I can say result is equal to and then
03:55 - I can say here plus and then this
03:59 - variable so in this case because I'm
04:02 - using this plus operator with a number
04:04 - and a string what this plus operator
04:07 - will do is it will just concatenate
04:10 - those two together because it does not
04:12 - make sense to add a number and a text so
04:15 - what it will do is this so now we have
04:19 - result is equal to and then it simply
04:21 - adds this result so that is another
04:24 - usage of this plus operator now let's
04:28 - see what are some common errors that can
04:30 - happen for example what is going to
04:32 - happen if I say
04:35 - 13.5 +
04:37 - 123 as you can see immediately we get
04:40 - this red squiggly and it says cannot
04:44 - implicitly convert type double to int
04:47 - the reason is because here we are trying
04:49 - to add decimal numbers but we are trying
04:53 - to store that result into an integer
04:57 - variable and that cannot be done so even
05:00 - if I do something like this 13.5 +
05:04 - 12.5 the result is going to be an
05:07 - integer number but we still cannot do
05:10 - this so if you want to perform
05:12 - operations on decimal numbers you need
05:15 - to use correct data type in this case
05:18 - that can be double so as you can see now
05:21 - we don't have error anymore if we are
05:24 - working with decimal numbers then we
05:26 - should use decimal data type which means
05:30 - float double or decimal in order to
05:33 - store the result of that operation and
05:36 - if you don't know about data types then
05:38 - please watch this video there I
05:40 - explained all of the important data
05:42 - types that you need to know about and it
05:44 - will also be linked in the description
05:46 - so now if I run this program we get 26
05:50 - which is the correct result of this
05:53 - operation so that is how you use plus
05:55 - operator minus operator is very similar
05:59 - so if I say 13.5 minus
06:03 - 12.5 and I run this program as you can
06:06 - see we get one which is the correct
06:09 - result but what do you expect to happen
06:12 - if I do something like this if I say for
06:16 - example 13.5 minus
06:19 - 12.3 so what do you expect to get as a
06:22 - result of this operation let's find out
06:25 - let's run this program and as you can
06:28 - see we get this result here so we get
06:32 - 1.1
06:34 - 1999999 and so on but as you already
06:37 - know from the regular mathematics the
06:40 - result should be 1.2 so now the question
06:43 - is why do we get this number here it's
06:46 - very weird well the answer to that
06:49 - question is because you have learned
06:51 - mathematics wrong and this here is the
06:54 - correct result I'm just kidding that's
06:57 - not the reason here is the explanation
06:59 - of why are we getting this result as you
07:03 - already know everything that your
07:05 - computer does it does that in binary
07:07 - numbers so only ones and zeros now some
07:12 - decimal numbers are extremely hard to
07:15 - represent in binary format examples of
07:19 - those numbers are 13.5 12.3 and 1.2 and
07:23 - many other numbers as well so just to
07:27 - demonstrate that let me find a b binary
07:29 - calculator on the internet and then I'm
07:31 - going to show you what I'm talking about
07:34 - so here is a binary calculator and what
07:37 - I want to do is I want to try and
07:39 - convert 1.2 into binary number because
07:43 - that is what your computer works with so
07:46 - if I say convert this is the number that
07:49 - we are going to get this is 1.2 in
07:52 - binary format it has 21 digits whereas
07:56 - in decimal format we need only two
07:58 - digits to represent this number so let's
08:01 - copy this number okay and then I'm going
08:03 - to delete this and let's try to convert
08:06 - it back so from binary to decimal so
08:10 - this is the result that your computer
08:12 - got and now it is trying to show it to
08:14 - you because you understand decimal so
08:17 - this is what you will see so this is not
08:20 - 1.2 this is as close as your computer
08:24 - can get to 1.2 and for that it is
08:27 - already using 20 one digits so if you
08:31 - want even higher Precision if you want
08:33 - to get even closer to 1.2 what you can
08:37 - do is here you can add more digits so if
08:40 - I say convert we get even closer and
08:43 - then I can add even more digits and this
08:47 - will take us even closer to 1.2 so if
08:51 - you really want to represent 1.2 then
08:54 - you would have infinite number of digits
08:58 - in binary format that you need in order
09:01 - to represent that number and it is
09:03 - really not possible to store infinite
09:06 - number of digits in any variable so the
09:09 - only thing that your computer can do is
09:11 - it can get as close as possible which is
09:14 - this number here or this number here or
09:20 - this number here and so on but the more
09:23 - digits that you take the more memory you
09:26 - are taking so I would say that this
09:28 - number here is close enough so now that
09:31 - you understand why this is happening
09:34 - let's see how we can show this number in
09:37 - a format that is normal and
09:39 - understandable for us humans because we
09:42 - don't really want to see 16 or 20 digits
09:45 - we simply want to see two digits that's
09:47 - what we are working with most of the
09:49 - time so what you can do is here for this
09:54 - result that you get is you can use
09:57 - math. round
09:59 - this is a function that will round the
10:03 - number that you give to that function to
10:06 - as many decimals as you want and here I
10:09 - will say please round it to two decimals
10:11 - or even one decimal so if I run this
10:16 - code as you can see now we get the
10:19 - normal result the one that we expect and
10:21 - the one that is understandable and
10:23 - natural for us so that is how you use
10:26 - minus operator now let's talk about
10:29 - about division operator division
10:31 - operator is very interesting and it's
10:33 - also very tricky so let's delete this
10:36 - and let's simply say result and here I
10:40 - will say for example 15 ided by 5 so if
10:45 - I run this the result that we are
10:47 - getting is three which is the correct
10:50 - result nothing wrong here but let's stop
10:53 - the program and let me show you
10:55 - something else if we say for example 15
10:58 - / by six what do you expect to get let's
11:03 - see and we get the result of two but we
11:06 - know that the result is not two it is
11:09 - 2.5 so why are we getting two here as
11:13 - the result well something interesting is
11:16 - happening here I believe that most
11:18 - beginners would first check if this
11:21 - variable here has the correct type
11:23 - because if this variable here was an
11:26 - integer variable it would be
11:28 - understandable why we are getting this
11:29 - error but this variable here is of type
11:32 - double so we still have a question why
11:36 - is this here two and not
11:38 - 2.5 well the answer is very interesting
11:42 - if you are dividing two integers or
11:45 - performing any operations on two
11:48 - integers the result of that operation is
11:50 - going to be an integer but if one of
11:55 - these two is a decimal number like this
11:59 - for for example then the result will be
12:01 - of more precise type which means this
12:05 - here is integer this here is double so
12:08 - the result will be double the same would
12:11 - be if you did something like this or if
12:16 - both of these were decimal numbers so
12:19 - the result will be of more precise type
12:23 - and if both are int then result will
12:25 - also be int so in this case or in this
12:30 - case or even in this case we are going
12:33 - to get the correct result but in this
12:36 - case we will not get correct result so
12:39 - let me prove that if I start the program
12:43 - as you can see now we get
12:45 - 2.5 which is the correct result okay so
12:48 - what is the general rule that you should
12:51 - remember here whenever you are dividing
12:54 - two numbers even if they are integers
12:56 - like five and two for example the the
12:59 - result still can be decimal number so
13:02 - you should keep two things in mind the
13:04 - first thing is that resulting variable
13:07 - should be of decimal float or double
13:10 - type so some data type that can store
13:13 - decimal numbers that is the first thing
13:15 - and the second thing is that one of
13:18 - those two numbers one of those two
13:20 - operant should be with decimal point as
13:23 - well like we have here so instead of 15
13:25 - and six we have 15 and
13:28 - 6.0 okay so those are two very important
13:31 - things to keep in mind to avoid any
13:33 - errors that can happen now there are
13:36 - some more interesting things when it
13:38 - comes to this division operator and that
13:41 - is for example this so what do you
13:44 - expect to happen if I say this 15
13:47 - divided by 0 what is going to be the
13:49 - result of this operation as you can see
13:52 - immediately our compiler gives us this
13:54 - little red squiggly and it says division
13:57 - by zero that is for bden and this does
14:00 - not have anything to do with computers
14:03 - and programming this is just mathematics
14:05 - so in mathematics dividing by zero is
14:08 - forbidden so in computers in Computing
14:11 - and programming it is forbidden as well
14:13 - but there are ways to trick your
14:17 - computer and to still make it divide by
14:20 - zero so let me show you that so instead
14:22 - of doing it directly like this what I
14:25 - can do is I can say for example double
14:29 - number one is equal to 15 okay and then
14:34 - double number two is equal to zero so
14:38 - then what I can do is I can say number
14:41 - one divided by number two so now your
14:45 - computer does not really know which
14:48 - numbers you are dividing so it cannot
14:50 - give you that red squiggly but you will
14:52 - get an error in runtime so when I run my
14:55 - application as you can see result is and
14:58 - then question mark I have no idea what
15:01 - the result is again because it is
15:04 - forbidden to divide by zero and in your
15:08 - computer you maybe get that little um
15:10 - infinity symbol and that is absolutely
15:13 - the same it's just a way for your
15:14 - computer to tell you hey I have
15:17 - absolutely no idea how to divide these
15:19 - two numbers because it is forbidden to
15:21 - divide by zero so always remember that
15:24 - when you are using this division
15:26 - operator so let's talk about the next
15:29 - operator and that is multiplication
15:31 - operator I am going to delete all of
15:34 - this code we don't need it
15:35 - multiplication operator is very simple
15:38 - so 12 multiplied by 13 and we get a
15:42 - simple result nothing really special
15:44 - here so 1 5 6 and if you want to
15:48 - multiply decimal numbers 12.4 multiplied
15:51 - by 13 again the result needs to be of
15:54 - type float or double or decimal so you
15:56 - cannot store the result of this in an
15:59 - integer variable that is just one
16:01 - important thing to keep in mind but if I
16:03 - run this we get the result that we want
16:07 - and again because it is very hard to
16:10 - represent decimal numbers in binary
16:12 - format we still have this little
16:15 - Precision error but if you want to
16:18 - represent this in a format that is
16:20 - understandable to us humans without this
16:22 - many decimals what you can do is again
16:25 - you can say math Dot round and then this
16:31 - result that you want to round you put
16:33 - that inside parentheses and then you say
16:36 - how many decimals you want to have if
16:38 - you say for example two or one decimal
16:41 - that is going to be the format that is
16:43 - understandable to us humans and then you
16:45 - are going to get the correct result okay
16:48 - now let's talk about this operator here
16:51 - it looks like percentage symbol but it
16:54 - is called modulo operator and in real
16:56 - life it's not used that much but in
16:59 - programming it is used very very often
17:02 - so this modulo operator is used to give
17:06 - you the remainer after you divide two
17:09 - integer numbers so when you divide two
17:11 - integers what remains after that
17:14 - division so let's delete this let's
17:18 - return just result like we had
17:21 - previously and here I'm going to say int
17:24 - result because we are dividing two
17:26 - integer numbers so the result is also
17:28 - going to be integer and to demonstrate
17:31 - this let's say for example 10 modulated
17:34 - by 3 so what this here means is let's
17:39 - say that you have 10 apples and you want
17:41 - to divide them equally among your three
17:44 - friends so how many apples will remain
17:48 - that is the result of this modulo
17:50 - operation so if I run this as you can
17:53 - see result is going to be one so if you
17:56 - have 10 apples you divide them equally
17:59 - among your three friends what remains is
18:01 - one apple and that will be the result of
18:03 - this operation okay let's stop my
18:07 - program now when is this modulo operator
18:10 - used because I said that in programming
18:12 - it is used very often but in real life
18:14 - not so much so the situation when you
18:17 - use this modulo operator most often is
18:20 - to check if a number is even or odd how
18:24 - do you do that well if you divide any
18:28 - even number
18:29 - with two the remainder is going to be
18:31 - zero but if you divide any odd or uneven
18:36 - number with two the remainder is going
18:38 - to be one so by using this modulo
18:42 - operator you can easily check if the
18:44 - number that you are working with is even
18:47 - or odd and this is used in many
18:50 - different calculations formulas and so
18:52 - on so just to prove this if I run my
18:55 - program here we get the result of one
18:58 - which means that five is an oddd number
19:02 - but if I put an even number here for
19:04 - example six and I run my program we are
19:07 - going to get the result of zero which
19:09 - means that six is an even number okay so
19:12 - with this we have covered all of the
19:14 - arithmetic operators and now let's talk
19:17 - about something very important and that
19:19 - is operator priority so what is going to
19:23 - be the result of this 3 + 9 divided by
19:30 - three what is going to be the result of
19:31 - this operation let me know down in the
19:33 - comments so if I run the program the
19:37 - result is going to be six so let's
19:40 - explain why is the result six well this
19:44 - operator here division operator is older
19:47 - meaning it has priority it is executed
19:50 - first and then we execute this plus
19:53 - operators so the calculation goes like
19:55 - this 9 / 3 the result of that is three
19:59 - and then we add three to that so that is
20:03 - the correct order that is the correct
20:05 - priority and not 3 + 9 is equal to 12
20:09 - and then divided by 3 so that is how
20:11 - some people will get the result of four
20:14 - but four is not correct result so we
20:17 - first perform this operation and then
20:20 - this operation here the same as in
20:22 - mathematics so that is when it comes to
20:25 - operator priority these three operators
20:28 - have priority over these two operators
20:31 - here so now I have a question for you
20:33 - and that is following what will be the
20:35 - result of this operation 5 + 7 modulated
20:40 - by 3 let me know down in the comments
20:44 - okay so if I run the program as you can
20:46 - see the result is six and the reason for
20:49 - that is because we first performed this
20:52 - operation so 7 modulated by 3 is 1 and
20:56 - then we add five more so that is six now
21:00 - if you want to change priority of these
21:03 - two you would do it the same way as in
21:05 - mathematics so you can simply put these
21:08 - two inside parentheses which means hey
21:11 - do this part first this here results in
21:14 - one number and then modulate that by
21:17 - three so now let me know what is going
21:19 - to be the result in the comments if I
21:22 - run it as you can see we get a different
21:25 - result because 5 + 7 is 12 12 and when
21:29 - we modulate that by three we get zero
21:32 - because 12 ided by 3 is four and we have
21:35 - zero remainder okay so with that we have
21:39 - covered everything about arithmetic
21:41 - operators so now let's talk about
21:43 - another interesting type of operator and
21:45 - that is this operator here you have seen
21:47 - it this entire time but maybe you did
21:50 - not think about this as an operator as
21:53 - well but it is and it is called
21:56 - assignment operator so let's put it here
21:58 - here let's say
22:04 - assignment so assignment operator and
22:07 - that is this operator here so assignment
22:10 - operator is used to assign values to
22:13 - variables like here for example so here
22:16 - we are saying hey perform this entire
22:19 - calculation and then you are going to
22:22 - assign the result of that to this
22:25 - variable here so whatever this here
22:28 - results in that will be assigned to our
22:31 - variable okay so with this being said
22:35 - You can conclude that this assignment
22:38 - operator has the smallest the least
22:41 - priority which means that all of these
22:43 - operations on the right side will be
22:45 - performed first and then once you get
22:48 - one result just one value then this
22:52 - assignment operator will assign that to
22:54 - our variable so it has the least
22:57 - priority now there are some more
23:00 - interesting things that I want to show
23:02 - you some things that really make sense
23:04 - in programming and programmers use them
23:06 - very often but they absolutely don't
23:08 - make sense in real life and in
23:10 - mathematics one of those things is the
23:13 - following in programming you can say in
23:16 - result is equal to five okay and then
23:20 - you can say result is equal to result +
23:25 - 1 for example now this formula here does
23:30 - not make any sense not at all in
23:33 - mathematics and this would be forbidden
23:35 - in mathematics but in programming it
23:37 - really makes sense so what this here
23:40 - does is it simply says Hey perform this
23:43 - calculation here this operation and once
23:46 - that is performed assign that again to
23:50 - the same variable so now if I run this
23:53 - code what do you expect to get so we get
23:56 - six as a result we start started with
23:59 - five and then we simply said hey add one
24:02 - to that and assign it to the same
24:04 - variable and then print the result so we
24:06 - get the result of six and this makes
24:09 - perfect sense in programming in
24:11 - mathematics not at all but in
24:13 - programming it's used very very often so
24:16 - the same way you can do this for plus
24:19 - operation you can also do it for minus
24:21 - operation and then division
24:25 - multiplication or modulo just make make
24:28 - sure that when you are dividing two
24:31 - numbers or multiplying two numbers or if
24:33 - you're working with decimal numbers the
24:37 - type also needs to be float or decimal
24:40 - or double so some type that can store
24:43 - decimal point number okay now let's
24:46 - return to this example here I had this
24:49 - situation result is equal to result +
24:53 - one now because programmers are
24:56 - extremely extremely lazy
24:58 - they found even shorter way to write
25:01 - this same thing and that is like this so
25:04 - they would simply say result plus equals
25:08 - to one and it does absolutely the same
25:11 - thing if I start the program as you can
25:14 - see again we get the result of
25:17 - six so now your question might be Salina
25:21 - why would anyone use this weird looking
25:25 - formula here why don't you simply write
25:27 - results equals to result + one well
25:31 - again programmers are extremely lazy and
25:34 - I was wondering the same question what I
25:36 - started learning programming but then 7
25:39 - Days 10 days a month in I was using this
25:43 - same approach here and probably it's
25:45 - going to be the same thing with you so
25:47 - if you continue programming please come
25:49 - back to this video one month from now
25:51 - and then tell me if this here is better
25:54 - or if it is better to write result
25:57 - equals to result
25:58 - plus one and so on so I prefer this
26:04 - option here okay and this operator here
26:07 - is another assignment operator that
26:10 - performs both adding operation and
26:13 - assigning operation so whatever is on
26:15 - this right side it will add that and
26:18 - assign it to this result here so I'm
26:20 - going to add here plus equals now the
26:24 - same way that we have plus equals we
26:26 - also have minus equals and then we have
26:29 - divide equals and multiply equals as
26:32 - well and as you might guess it result
26:35 - minus equals one will simply subtract
26:38 - one from this result here so if I run
26:41 - the program as you can see we get four
26:44 - okay and then if I say for example
26:46 - result multiplied equals by two and I
26:51 - run the program as you can see we get
26:53 - the result of 10 and then if I say
26:57 - result divides equals two what do you
27:01 - expect to get Let's see we get the
27:04 - result of two so can you remember those
27:07 - two important rules that we were talking
27:09 - about when we were talking about
27:11 - dividing numbers well we said that the
27:15 - variable needs to be of type double so
27:18 - something that can store a decimal point
27:19 - number so now if I run this code we get
27:22 - the result of
27:24 - 2.5 another important rule was that at
27:27 - least one of the two operant needs to be
27:30 - of type double as well and in this case
27:33 - it is because one operant is resoled it
27:36 - is of type double and then another
27:38 - operant is two and that is integer so at
27:40 - least one is of type double so that is
27:43 - the reason why we are getting correct
27:45 - result here okay and then also not to
27:49 - forget here we have modulo equals as
27:53 - well so these are assignment operators
27:57 - and they are just just a shorter way to
28:00 - write these arithmetic operators plus
28:03 - assignment operation as well now let's
28:05 - see more things that programmers do
28:08 - because we are lazy I'm going to show
28:10 - you increment and decrement operators so
28:13 - let's put those here we have
28:16 - increment and
28:19 - decrement so increment is Plus+ and then
28:22 - decrement is minus minus so how these
28:25 - two work well here we have have a
28:28 - variable called result so what I can do
28:31 - is I can simply say result
28:34 - Plus+ and then if I print result let's
28:38 - see what are we going to get so we are
28:40 - going to get six because what this
28:42 - increment operator does it it simply
28:45 - increases this variable by one and then
28:49 - if I say result minus minus that
28:53 - decreases this value here by one so now
28:57 - I will get the value of four so those
29:00 - are increment and decrement operators
29:03 - plus plus and minus minus plus plus to
29:06 - increase the value by one and minus
29:08 - minus to decrease the value by one so
29:10 - now your question might be Salina why
29:13 - why are programmers so lazy why do you
29:16 - have to have an entire Operator just to
29:19 - increment value by one or decrement it
29:21 - by one why do you need all of that I'm
29:24 - sorry I did not invent this but it is
29:27 - pretty useful I have to say why well
29:31 - because now what you can do is instead
29:34 - of writing this an entire line of code
29:37 - you can simply say this so in the same
29:42 - line of code you perform some operation
29:45 - okay so now if I run the program what do
29:48 - you expect to get let's
29:50 - check hm something weird is going on
29:53 - here we still get the result of five but
29:56 - we have decreed incremented this
29:59 - variable shouldn't it be four well there
30:02 - is something tricky going on here and
30:04 - that is the difference between this
30:07 - which is called post decrement and this
30:12 - here which is called pre decrement so
30:15 - what is the difference well it has to do
30:18 - with priority of execution this here
30:21 - will be executed first and then it will
30:25 - print this entire value
30:28 - but in this
30:30 - situation we will first print this value
30:34 - and then we are going to post decrement
30:38 - which means that in this
30:40 - situation if I run the program I get the
30:43 - value of five but if I copy this line of
30:47 - code one more time and I remove this
30:50 - decrement operator and I run my program
30:53 - again as you can see in the first line
30:56 - we get five and then we at four the
30:58 - reason for that is because we first
31:01 - print this and then we decrement so when
31:05 - we print for the second time we get this
31:08 - value of four so that is the difference
31:12 - between post decrement and pre-decrement
31:17 - okay and then the same applies for pre
31:22 - increment and then post increment Okay
31:27 - so so that is how increment and
31:30 - decrement operators work they simply
31:33 - increase the value by one or decrease
31:36 - the value by one and then depending on
31:38 - where you put them if you put them after
31:41 - the variable they have smaller priority
31:44 - and if you put them before the variable
31:46 - they have bigger priority which means
31:48 - that they will be either be executed
31:49 - before or after you do whatever you want
31:53 - to do with that variable now a tip that
31:56 - I would give you and something that is
31:57 - practic in programming is that these
32:00 - increment and decrement operators are
32:03 - most commonly used with integer
32:06 - variables as you could see it can still
32:09 - work with decimal numbers but most often
32:12 - it is used with integer variables and
32:14 - just to make sure that you avoid any
32:16 - Precision errors that I already
32:18 - demonstrated ones where we have a lot of
32:21 - decimals make sure that you are using
32:23 - these operators with integer numbers so
32:25 - both pre-increment and pre-decrement
32:28 - as well as post increment and post
32:30 - decrement So to avoid any Precision
32:32 - errors or computation mistakes like I
32:35 - demonstrated previously make sure to use
32:38 - them with integer numbers also these
32:41 - increment and decrement operators can be
32:45 - performed only on variables you cannot
32:48 - say five ++ or five minus minus these
32:52 - don't work with constants as you can see
32:55 - we get this red squiggly okay okay so
32:59 - increment and decrement operations can
33:01 - be used only with variables not with
33:04 - number constants like I have
33:06 - demonstrated here so now I want to talk
33:09 - about another very important topic and
33:11 - very sneaky bug that happens to a lot of
33:14 - beginners and also to some experienced
33:17 - developers and that is Overflow and
33:21 - underflow so what are overflow and
33:23 - underflow let me explain let's create a
33:26 - variable here and let's call it int Max
33:30 - and inside this variable what I want to
33:32 - store is going to be maximum value of an
33:36 - integer number so this here will give us
33:39 - the maximum integer number that can be
33:42 - stored inside this variable here the
33:45 - same way we have int Min so here I can
33:48 - say please give me the minimum value the
33:52 - smallest value that an integer can have
33:55 - and that I can store inside this
33:57 - variable here so now let's print these
33:59 - two let's
34:00 - say int Max is equal to and let's print
34:05 - this
34:06 - variable okay and then let's also say
34:10 - int Min is equal to and let's print the
34:13 - other variable so int Min so now if I
34:17 - run this program as you can see int Max
34:21 - is this value and then in Min is this
34:24 - value I'm not going to try to read
34:26 - either one but it's too billion and
34:28 - something okay so what is going to
34:31 - happen if I do something like this if I
34:34 - say hey please
34:37 - pre-increment this in Max so increment
34:40 - it and then write it or if I say
34:42 - something like this hey please
34:44 - pre-decrement this minimum value what do
34:47 - you expect to get I don't know let's run
34:50 - the
34:50 - program okay and something very weird is
34:54 - going on here so for inmac we get this
34:58 - really small number and then for INT Min
35:02 - we get this really big number this does
35:04 - not make sense so why are we getting
35:08 - these two values the answer is underflow
35:12 - and overflow so here we previously had
35:16 - the biggest value that an integer can
35:18 - hold and then we added one more to that
35:21 - so the behavior is like a clock you go
35:24 - from 1 2 3 4 5 and so on until you come
35:28 - to 12 that is the biggest value and then
35:31 - if you add one more to that it will
35:33 - simply overflow and go to one again so
35:37 - that is exactly what happened in this
35:39 - situation and then in this situation
35:41 - here we had the biggest value and then
35:43 - we added one more to that so it simply
35:46 - went to the smallest value and then here
35:50 - we had the smallest value and we tried
35:52 - to decrease that by one so it went to
35:55 - the biggest value just like clock and
35:58 - clock in reversed order so that is what
36:02 - overflow and underflow are and this here
36:05 - is not the only way to get these
36:07 - overflow and underflow errors these are
36:10 - very sneaky bugs that you can get in
36:12 - many different situations for example if
36:14 - you are trying to um add two numbers
36:17 - that are very big the result is going to
36:19 - be even bigger so that can overflow or
36:22 - if you are trying to multiply two
36:24 - numbers it's even easier to get an
36:26 - overflow or if you are trying to
36:28 - subtract two numbers that are very small
36:30 - so uh very big negative numbers uh the
36:34 - result of that is going to be even
36:36 - smaller so that can underflow and so on
36:39 - so you should be very very careful in
36:43 - these situations because these types of
36:45 - bugs your compiler is not going to tell
36:48 - you about these bugs but you will get
36:50 - logical errors and logical errors are
36:53 - more uh serious they are much more
36:56 - dangerous if you have them in your
36:57 - program than compile time errors because
36:59 - compile time errors can be fixed you
37:01 - cannot even run your program before you
37:03 - fix them but logical errors usually in
37:06 - programs result in money loss or client
37:09 - loss and very very serious problems just
37:13 - to give you an idea of this in real life
37:14 - imagine the following situation let's
37:17 - say that you are writing a program for a
37:18 - bank and you decided to represent the
37:21 - account balance of some person with an
37:24 - integer number for whatever reason so
37:27 - that person is very rich so he ends up
37:30 - adding more and more and more money so
37:33 - at one point that value is going to
37:35 - overflow and all of a sudden he's going
37:37 - to be in negative he's going to have
37:39 - negative amount of money which is a big
37:41 - problem but I believe that even bigger
37:44 - problem is if some person has very big
37:47 - debt so his money is in minus and then
37:49 - he takes more debt and then all of a
37:52 - sudden his money underflows so all of a
37:55 - sudden he has a lot of money even though
37:57 - previously he was in debt so I believe
38:00 - that is even bigger problem for a bank
38:03 - uh so you should be very very careful
38:06 - when you are deciding which data type to
38:09 - use my suggestion is if you suspect that
38:13 - the number is going to be either too big
38:15 - or too small then please use more
38:18 - precise bigger data types like double or
38:21 - decimal and then there are even bigger
38:23 - data types that you can use but for all
38:25 - of the calculations that you are using
38:27 - as a beginner these data types should be
38:30 - enough so decimal should be enough to
38:32 - store any number that you want any
38:34 - number that you need for any application
38:37 - that you are making so I believe that is
38:39 - going to be enough for this video in the
38:41 - next video we are going to continue
38:43 - talking about different types of
38:45 - operators because there are many more
38:47 - operators uh also if you want to learn
38:49 - about different data types that I
38:51 - mentioned then I'm going to link that
38:54 - video in the description make sure to
38:55 - watch it and then if if you want to
38:58 - learn practical programming if you want
39:00 - to learn how to build real applications
39:02 - and if you want to get career ready
39:04 - skills so that you can start a
39:05 - successful developer career and if you
39:08 - want me to be your Mentor in that
39:10 - process and to prepare you and to help
39:13 - you to achieve your goals then enroll in
39:15 - my practical programming course the link
39:18 - is going to be in the description and
39:19 - currently there is even a special
39:22 - discount if you decide to enroll now so
39:25 - with that being said thank you very much
39:27 - for watching and I am going to see you
39:29 - in some other video bye