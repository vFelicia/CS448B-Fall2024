00:00 - hi guys and welcome back to my series
00:02 - about C++ standard template library in
00:05 - this video you are going to learn about
00:07 - the most important Concept in STL which
00:10 - is templates so you are going to learn
00:13 - what are templates I will teach you
00:15 - about template functions and template
00:17 - classes what are they what is their
00:20 - purpose and how to work with them and we
00:22 - are also going to write some code in
00:24 - order to practice working with STL
00:26 - templates and before we start there is
00:29 - something very important that I want to
00:31 - tell you so if you're watching a lot of
00:33 - tutorials about programming a lot of
00:35 - lessons and you understand programming a
00:37 - little bit here and there but you
00:39 - struggle to apply that knowledge in
00:41 - practice and you don't know how to build
00:43 - real applications that can be used in
00:46 - everyday life for example maybe you are
00:48 - going to the gym and you like working
00:50 - out and you would want to create an
00:52 - application that will help you to track
00:54 - your progress to track your workouts
00:56 - your calories and so on or maybe you
00:59 - like Gam games or fashion or Sports and
01:01 - you want to create applications about
01:03 - that well in that case I have a perfect
01:06 - practical programming course where I'm
01:09 - going to teach you how to create those
01:10 - real world applications and most
01:13 - importantly this course is going to
01:15 - teach you transferable skills that you
01:16 - can apply to any programming language so
01:19 - you will get the experience of working
01:21 - on a real project so implementing real
01:24 - functionalities fixing bugs optimizing
01:26 - your code a lot of tasks for you to
01:29 - practice and also it will be fun I will
01:32 - be your Mentor through the entire course
01:34 - and I'm a fun person so you will not
01:36 - want to sleep during my classes we have
01:39 - a great Discord Community where we all
01:41 - hang out and it is very supportive so
01:44 - you will not feel alone lost or confused
01:47 - when you are learning programming
01:49 - because you can always ask a question
01:51 - and someone will jump in and help you
01:53 - very fast so if you want to learn
01:55 - practical programming and get career
01:57 - ready skills then this is is the only
02:00 - course that you will ever need because
02:02 - everything is on one place beginner to
02:05 - expert and currently there is even a
02:07 - special discount that you can use in
02:09 - order to save some cash so click the
02:12 - link in the description and I will see
02:14 - you in a minute so with that being said
02:17 - let's continue with the topic of today's
02:19 - video so what are templates let me give
02:21 - you a real world example let's say that
02:24 - you are making cookies and you want to
02:26 - make cookies in different shapes you
02:28 - want cookies in a shape of heart Star
02:30 - Circle Square and so on so for that you
02:34 - would need to have many different cookie
02:36 - cutters so all of those shapes of cookie
02:39 - cutters now that is not really optimal
02:42 - what would be so much better is if you
02:45 - could have one magical cookie cutter so
02:47 - you say for example oh magical cookie
02:50 - cutter cut me a cookie in a shape of
02:52 - heart and it does that or you say cut me
02:55 - a cookie in a shape of circle and it
02:57 - does that also and so on now this is not
03:01 - a cooking class and as far as I know in
03:04 - cooking that is not possible but in
03:07 - programming it is possible and this
03:10 - magical cookie cutter is exactly what
03:13 - templates are so with templates you
03:17 - write the code once and then that code
03:20 - is able to work with different data
03:22 - types so now I'm going to show you on
03:25 - practical example what this means and
03:27 - first I'm going to show you the problem
03:29 - first I'm to show you how you can do it
03:30 - in a wrong way and then I will teach you
03:33 - how you can solve that problem and do it
03:35 - right with the help of templates now
03:38 - let's create a simple function whose job
03:40 - is going to be to add two integer
03:43 - numbers so here I will say that return
03:46 - type of the function will be int and I
03:48 - will call it add int and it will receive
03:51 - two parameters of type int so int a and
03:55 - int B like this and as I said it will
03:58 - simply return a + b okay so nothing new
04:04 - here now if you want to invoke this
04:06 - function you simply say see out add in
04:09 - and here you pass two integers let's say
04:11 - for example five and
04:13 - seven and let's put an end line like
04:16 - this so if I run this code we will get
04:20 - 12 because that is what 5 + 7 results in
04:25 - okay now if I want to pass floating
04:29 - Point number numbers here for example
04:31 - 5.3 and let's say
04:34 - 7.7 what do you expect to get if I run
04:37 - this program let's see okay we get 12
04:42 - again but this here actually should be
04:46 - 13 so why are we getting the result of
04:48 - 12 well the answer is very simple
04:51 - because here we are receiving integers
04:54 - so this part behind the decimal point
04:57 - doesn't really matter this function here
05:00 - will still take only this integer part
05:03 - of the number so if you want to work
05:06 - with decimal numbers you need to create
05:08 - another function so let's do that I am
05:11 - simply going to copy this function here
05:14 - and I will change this to be
05:17 - float and then here as
05:20 - well and here as well and then the name
05:23 - will be add float like this so now if I
05:28 - want to invoke my my function I will say
05:31 - add float and here I can pass floating
05:35 - Point numbers and then when I'm invoking
05:37 - add int I should pass only integer
05:40 - numbers like this so now if I run my
05:44 - program as you can see we get 12 for
05:47 - this function here and then for add
05:49 - float we get 13 which is the correct
05:52 - result so as you could see this code
05:55 - works but this code is not really
05:57 - optimal because for each new type we
06:00 - need to add a new function and that is
06:02 - not optimal wouldn't it be much better
06:05 - if we could write just one function and
06:08 - then use that function for every data
06:10 - type that we want to add so with
06:14 - templates that is possible what we can
06:17 - do is we can write one template function
06:20 - that is going to work with any data type
06:23 - that you want so how do you do that so
06:26 - let's copy this function and what I
06:29 - would like to do is the following
06:31 - instead of having float hardcoded like
06:34 - we have it here I would like to have a
06:37 - generic data type let's call it
06:40 - t Okay so I would like to have type T
06:44 - and the name of this function I will
06:46 - also change it it will be called add so
06:49 - the goal of this function will be to add
06:52 - any two numbers of any type and then
06:56 - also the return type of the function
06:57 - will be of that same type which these
07:01 - two numbers have so this makes sense but
07:04 - it is not clear for your compiler what
07:07 - this t means so now what you need to do
07:10 - is you need to tell to your compiler
07:13 - that here you are declaring something
07:15 - called template and this template will
07:19 - have a new type
07:22 - name like this and that type name will
07:25 - be called T so now all of a sudden then
07:29 - this T becomes a generic type which
07:32 - means that when you run your program and
07:35 - you pass parameters to this function it
07:38 - will be determined which type these
07:41 - parameters are they can be float or int
07:45 - or double or short and so on so any type
07:49 - that you pass here this T becomes that
07:53 - type so let's test this let's invoke
07:56 - this function I will say C out
08:00 - add and here I can pass any two types
08:02 - that I want let's say for example five
08:05 - and seven and here I will put end line
08:09 - okay and then let's also invoke it for
08:11 - floating Point numbers so
08:14 - 5.4 and then
08:17 - 7.6 okay so now if I run this program
08:21 - okay this here is the result of these
08:24 - two functions and then this here is the
08:27 - result of our template function function
08:29 - and this template function which is just
08:32 - one function is now working with two
08:34 - different data types so now we have
08:38 - replaced these two functions with just
08:41 - one function so now what I can do is I
08:44 - can completely delete these two and I
08:48 - will not be able to invoke them anymore
08:50 - because now we have the option to add
08:53 - any two numbers with the help of just
08:57 - one template function and then that is
08:59 - the power of templates so once more this
09:03 - here is called template function and
09:06 - this T is a type that we have declared
09:10 - and this T is just like a placeholder
09:13 - and it can be substituted with any data
09:16 - type it can be substituted with int with
09:18 - float with double with short integer
09:21 - unsigned integer and so on and you can
09:24 - use this same function to work with all
09:27 - of those types now let's practice
09:29 - template functions some more and let's
09:31 - write another function that will
09:34 - subtract two numbers so I will copy all
09:37 - of this code paste it here so again we
09:41 - are declaring template function it will
09:43 - have new type called T so here the
09:46 - return type will be T I will call the
09:48 - function
09:50 - subtract okay it will also receive two
09:54 - parameters of type T and it will return
09:57 - a minus B like this okay so now let's
10:01 - test this function let's say C out and I
10:04 - will invoke subtract so let let's pass
10:07 - for example five and seven again and
10:10 - let's add end
10:13 - line okay and then let's also invoke it
10:16 - for float numbers so let's say
10:19 - subtract and then here I will say
10:23 - 6.6 and then let's say for example
10:26 - 3.4 and I will add end line okay so now
10:31 - if I run this program as you can see our
10:34 - subtract template function works with
10:37 - both integer and floating Point number
10:41 - or decimal point number okay now let's
10:45 - talk about another important concept
10:48 - what are template classes a template
10:51 - class is a generic class that can hold
10:53 - any data type now what is the benefit of
10:57 - this well the real benefit benefit and
10:59 - the real power of template classes you
11:02 - are going to learn later in this course
11:04 - when we learn more about STL containers
11:06 - and different algorithms but what you
11:09 - can do with template classes is you can
11:11 - have a template class that holds any
11:14 - data type that you want and then you can
11:16 - write an algorithm that works with that
11:19 - class so instead of writing an algorithm
11:23 - for each specific data type that you
11:25 - want to work with what you can do is you
11:28 - can write just one algorithm that works
11:31 - with the generic class and that generic
11:33 - class holds any type that you want and
11:36 - as I said we are going to learn how to
11:39 - do this and we are going to learn how to
11:41 - use the full power of template classes
11:44 - later in this course in the upcoming
11:46 - videos but for now I'm going to show you
11:49 - a simple example because we are just at
11:52 - the beginning so let's see a simple
11:54 - example of template class so how do you
11:57 - create a template class
11:59 - it's actually very similar to template
12:01 - function so I will copy this part here
12:04 - because again we need to say that we are
12:06 - creating a template and we need to
12:08 - specify the name of the generic type
12:11 - that we want to use okay and then after
12:15 - this instead of creating a function what
12:17 - we want to create is we want to create a
12:19 - class and here I will give the name to
12:22 - my class so let's call it
12:25 - box like this and inside this box we can
12:29 - put any data type that we want so now
12:32 - your question might be okay Selina I
12:35 - understand that this here is a template
12:37 - class and it can hold any data type but
12:40 - how do I apply this in practice because
12:43 - this box is very abstract for me so can
12:45 - you give me a practical example yes so
12:50 - how about changing the name of this
12:52 - class so instead of calling it box let's
12:55 - call it
12:57 - calculator okay okay so what will be the
13:00 - job of a calculator class it will be to
13:04 - perform different calculations adding
13:07 - subtracting multiplying dividing and so
13:09 - on so now what I can do is I can move
13:13 - all of these generic functions inside
13:17 - this class okay and then subtract as
13:22 - well and paste it here and I will remove
13:27 - these okay and now we have a generic
13:31 - class called calculator which can
13:34 - perform all of the calculator operations
13:37 - on any data type that you want actually
13:40 - currently it can perform only two adding
13:43 - and subtracting but you can write more
13:46 - functions in order to be able to perform
13:48 - all of the calculator operations and one
13:52 - very important thing here is all of the
13:54 - members of a class are private by
13:57 - default and if you want to be able to
13:59 - access them publicly you need to make
14:01 - them public like this okay so now we
14:05 - will be able to use these calculator
14:08 - methods outside of the class and we will
14:10 - be able to invoke them inside our main
14:13 - function so now let's test this so let's
14:16 - delete this code here and now as I said
14:20 - a template class can hold any data type
14:23 - that you want so for example if you want
14:26 - to create a calculator that will work
14:28 - with inte
14:29 - you do it like this you say calculator
14:33 - and then inside these angled brackets
14:36 - you put the type so it will be
14:38 - calculator of int and I will call it int
14:44 - calculator like this so now I can simply
14:48 - invoke all of these methods and pass
14:51 - them integers and they will work so I
14:53 - can say see out int
14:57 - calculator. add and let's pass two
14:59 - integer numbers let's say five and
15:03 - eight okay and let's also invoke
15:06 - subtract so int calculator do subtract
15:12 - and let's also pass five and eight and
15:16 - add an end line okay so this here is
15:20 - going to work with integers and now if
15:23 - you want to work for example with floats
15:25 - you can create a calculator that will
15:27 - work with float type so you simply say
15:31 - calculator again you put the
15:34 - type like this and let's call it float
15:41 - calculator like this okay and then see
15:46 - out so float calculator do add and here
15:51 - I'm passing decimal numbers so
15:54 - 5.2 and then
15:57 - 7.84 okay end line and then let's also
16:02 - test subtract
16:04 - functionality like this so now if I run
16:08 - this code as you can see we are able to
16:11 - work with different data types with the
16:15 - help of just one template function and
16:18 - we are able to create calculators that
16:21 - will work with different data types so
16:24 - let's practice some more writing generic
16:26 - code and let's add multiply and divide
16:30 - functionalities to our calculator as
16:32 - well so I will copy this function paste
16:36 - it here I will change its name to be
16:40 - multiply okay it will receive two
16:43 - parameters of type T and it will simply
16:46 - multiply them and return that result
16:49 - okay and then if I want to create divide
16:53 - function let's say
16:56 - divide and again we we have two
16:59 - parameters and we simply divide A and B
17:04 - now one very important lesson from
17:06 - mathematics is that it is forbidden to
17:08 - divide by zero so here if B is zero then
17:13 - we will get an error so in order to
17:15 - prevent it we are going to check if B is
17:19 - equal to zero and if it is I will print
17:23 - error message so I will say error
17:25 - division by zero and let's see simply
17:29 - return zero like this so we will not
17:32 - even try to divide by zero okay so now
17:36 - let's test these two newly added
17:39 - functionalities so here I will say float
17:43 - calculator.
17:45 - multiply okay and then float calculator
17:49 - dot divide so if I start my application
17:54 - as you can see here is the result of
17:57 - multiplication and here is the result of
18:00 - division okay so I believe that is going
18:02 - to be enough for this video and to make
18:04 - a short summary in this video you
18:07 - learned what are STL templates and how
18:09 - to work with template functions and
18:12 - template classes which are a way for us
18:15 - to write generic code that can work with
18:18 - any data type and in my upcoming videos
18:21 - we are going to learn a lot more about
18:24 - STL so stay tuned and if you would like
18:27 - to learn practical programming get
18:29 - career ready skills and learn how to
18:32 - build real world applications and also
18:35 - if you enjoy my teaching style and would
18:37 - like me to be your Mentor from beginning
18:39 - to experience developer level then
18:42 - definitely check out my practical
18:43 - programming course the link is in the
18:45 - description and currently there is even
18:47 - a special discount that you can use in
18:49 - order to save some cash so I would love
18:52 - to see you join my practical programming
18:54 - course and if you decide to join uh just
18:57 - click the link in the description and
18:59 - you will see me in a minute so thank you
19:02 - very much for watching and I'll see you
19:03 - in another video bye