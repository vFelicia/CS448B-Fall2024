00:00 - hi everyone welcome to another video of
00:02 - C++ for beginners in this video I wanted
00:05 - to talk about operators in C++ and we
00:08 - are going to cover the ones that are
00:09 - used most at the time but I'm also going
00:12 - to make a separate video for certain
00:13 - operators that have specific use at C++
00:16 - so in this video we will talk about the
00:18 - ones that are used most of the time and
00:19 - that you really need to know and
00:21 - understand and also make sure to watch
00:23 - the entire video because I do have some
00:25 - important tips to give you when it comes
00:27 - to this that you really need to
00:29 - understand that you will find handy for
00:31 - your future progress and learning of
00:33 - programming the first thing that I
00:36 - wanted to explain is what are operators
00:38 - you can understand operators a special
00:41 - type of functions that are used to
00:44 - perform certain calculations on
00:46 - arguments or operands and then based on
00:48 - those arguments and on that calculation
00:50 - they give you a new value so the first
00:54 - type of operators that I want to talk
00:56 - about are arithmetic operators and you
01:00 - are probably familiar with most of these
01:02 - so there is operator of adding and
01:06 - subtracting multiplying dividing and
01:09 - also one more operator that you may not
01:12 - be familiar with which is the modulo
01:14 - operator so all of these are automatic
01:18 - operators and let me give you an example
01:21 - of how these are used so I'm going to
01:23 - say C out and then let's write out the
01:27 - result of 5 plus 2 now let's add one end
01:31 - line ok so this here is the operator of
01:36 - adding and then these two are operands
01:40 - or arguments and this here is going to
01:42 - perform certain calculation and then
01:44 - write that out to my console so if I run
01:48 - my program we get the expected result
01:50 - which is 7 so these really behave as you
01:53 - would expect them to behave in maths
01:56 - but there are certain rules that are
01:58 - specific to programming and that I want
02:00 - to mention so this operator here
02:04 - operator of dividing let me give you a
02:07 - simple example if I say see out and then
02:11 - 5 divided by 2 and I add n line what do
02:17 - you expect to see in this line here
02:19 - write it in a comment down below now I'm
02:22 - going to run my program and you see that
02:25 - the result that I've gotten from this
02:28 - line here is 2 but why has that happened
02:31 - we know that 5 divided by 2 is 2 point 5
02:33 - well there is a certain rule in
02:37 - programming that says that the result of
02:40 - dividing 2 whole numbers like this so 5
02:43 - is whole number and then 2 is also whole
02:45 - number is also going to be represented
02:47 - as whole number so even though the
02:50 - result of dividing ds2 is 2 point 5 that
02:53 - point 5 cannot really be put inside
02:56 - integer variable so it cannot be put
02:59 - inside integer container so just two can
03:03 - can be put here and that point 2 is
03:05 - really lost if you want to show the real
03:07 - result of dividing these two what you
03:10 - have to do is you have to make one of
03:13 - these two or both of them off a
03:15 - different type and that type is going to
03:17 - be decimal point number so float or
03:20 - double so if you put here 2.0 or you put
03:25 - here 5.0 then in this case you are going
03:30 - to get the result represented as decimal
03:33 - point number so you can use it like this
03:35 - or you can make just one of these of a
03:38 - floating point type so you can say also
03:41 - like this and then if I run my program
03:43 - now you see that now I have got the
03:47 - expected result so two point five that
03:50 - is one rule that you really need to know
03:52 - when it comes to this division operator
03:54 - and another tip that I want surely is
03:58 - this operator of modulo so how do we use
04:02 - this modulo operator this example here
04:06 - that I've just shown you shown you let
04:08 - me return this to death situation where
04:10 - when dividing two whole numbers and
04:13 - we've just seen that five divided by two
04:16 - is going to result as 2 and that one
04:21 - that remains we can get that one really
04:23 - with this operator here so if you say
04:26 - see out and then 5 modulo to add my this
04:34 - operator here is going to give you the
04:37 - remainder of dividing 2 whole numbers
04:39 - which are these two so the result of
04:42 - this operation is going to be that one
04:46 - so let me run my program and you see
04:50 - that we have gotten that expected result
04:52 - so 5 divided by 2 when it comes to full
04:55 - numbers if you're dividing whole numbers
04:57 - the result is also going to be whole
04:59 - number and in this situation it's going
05:00 - to be 2 and then that remainder after
05:03 - dividing 2 whole numbers you can get
05:05 - with this modulo operator and the
05:07 - remainder of the after dividing 5 with 2
05:11 - is 1 and you get it with this operator
05:15 - here so these 5 are really our metic
05:20 - operators and these are these are also
05:22 - called binary arithmetic operators why
05:25 - binary well because they are all used
05:27 - with two operands they perform their
05:30 - calculation on two operands there is
05:34 - also another type of arithmetic
05:35 - operators in C++ there are used or the
05:39 - perform calculations on only one operand
05:42 - and those are unary operators the
05:46 - examples of unary operators in C++ are
05:49 - this operator here which is operator of
05:52 - increment and then this operator here
05:55 - which is the operator of decrement so
05:58 - how these are used let me give you an
06:00 - example so let's create a variable of
06:03 - type int and let's call it counter and
06:08 - I'm going to assign to that variable a
06:10 - value of 7 for example so how this
06:13 - operator of increment works is it really
06:16 - increases the value of your variable by
06:19 - 1 so if I say counter
06:24 - counter plus plus what this operator is
06:27 - going to do it's really going to add +1
06:30 - to my counter variable so 7 plus 1 it
06:34 - should in this line here increase value
06:36 - of my counter variable to 8 and let's
06:39 - prove that see out counter and then
06:46 - let's add 1 and 1 ok if I run my program
06:51 - you see that we've got expected result
06:54 - so 8 we've declared a variable of type
06:57 - int called
06:58 - counter we've given it a value of 7 and
07:00 - then in the next one we applied this
07:03 - increment operator to it which had
07:05 - increased its value plus 1 so 8 and then
07:08 - as we write out that value of that
07:11 - variable we get our result so that is
07:14 - how this increment operator is used this
07:17 - decrement operator so counter - - this
07:22 - decrement operator here works reverse
07:26 - so it really subtracts 1 from this
07:28 - variable here and if I copy this line
07:32 - here and that based it after this line
07:36 - here our counter should be decreased by
07:38 - 1 so the value of our counter should
07:41 - really again be 7 and if I run my
07:44 - program like this you see that we've
07:48 - gotten our 7 so we've gotten the
07:50 - expected result however there are
07:53 - specific rules when it comes to these
07:55 - increment and decrement operators and
07:57 - let me explain what I mean on another
07:59 - example so I'm going to create another
08:02 - variable of type ill int call it counter
08:06 - - and let's assign it also a value of 7
08:09 - and what I want to do with this variable
08:12 - here is I want to write out its value
08:14 - but I want to write out and increment
08:18 - its value in a single line so I want to
08:20 - do this so see out counter 2 plus plus
08:24 - and I'm missing this redirection sign
08:29 - here okay so what are you expecting to
08:32 - see in this line here we've seen that
08:35 - this line here has resulted with 8
08:37 - and this line here should also result in
08:40 - eight let's see
08:42 - okay run my program and it didn't in
08:47 - this line here we have written out seven
08:50 - but why does that happened
08:51 - well this operator here is increment
08:55 - operator but it is really post increment
08:59 - operator and what that means is that
09:01 - whatever operation needs to be performed
09:03 - on this variable is going to happen
09:06 - first and then this increment operation
09:09 - is going to happen so that is called
09:13 - post increment another type of increment
09:16 - is pre increment and it is used like
09:19 - this okay and this pre increment means
09:26 - that whatever operation needs to happen
09:29 - on this variable here first I'm going to
09:31 - increment it and then I'm going to
09:34 - perform that operation so if I run my
09:37 - program now you see that we now get our
09:40 - eight same as here and that is because
09:44 - we have used this pre increment which
09:46 - first has increased our variable and
09:48 - then our variable is written out okay
09:52 - and the same is applied for decrement
09:55 - operator so for example if I say see out
09:59 - counter - - - and then oh my god again
10:07 - okay and then if I run my program do you
10:12 - see that we have gotten the same value
10:14 - for this line in this line so hey and
10:17 - why that has happened is because we have
10:19 - used this post decrement here so first
10:22 - our variable has been written out and
10:25 - after that the value of that variable
10:27 - has been decreased so just to prove that
10:31 - I'm going to say one more time see out
10:34 - and then counter - without any increment
10:39 - or decrement just to prove that the
10:41 - value of this variable has been
10:43 - decremented after it has been written
10:45 - out so if I run my program again you see
10:49 - that this line here has resulted in
10:52 - eight and then this line here has
10:53 - resulted in seven
10:56 - okay so you see that our console now is
11:01 - full of some random numbers and it's
11:04 - really making it hard to read so what I
11:06 - want to do is I want to clear out my
11:08 - console but without deleting this code
11:12 - here so how I'm going to do that I'm
11:16 - going to use a command that is called
11:19 - system and then inside these parentheses
11:23 - I'm going to say CLS which really is
11:26 - going to clear my screen so if I run my
11:30 - program you see that all of our code is
11:32 - still here but console has been cleared
11:35 - so that's because of this command here
11:39 - that's a quick tip if you need to clear
11:41 - your console another type of operators
11:43 - that I want to talk about our relational
11:46 - operators and these are really used to
11:48 - compare the value of two operands so two
11:51 - arguments and relational operators in
11:55 - C++ are following so we have less than
11:57 - and then we have greater them and then
12:01 - less than or equal to and then greater
12:06 - than or equal to then we have just is
12:09 - equal to operator and then we have not
12:12 - equal to so these six are relational
12:17 - operators in C++ and how these are used
12:20 - to let me show you in an example so
12:22 - let's say that I'm going to create a
12:24 - variable of type int call it a yeah
12:28 - let's assign it the value of five and
12:30 - also create another variable that is
12:33 - called B and assign it a value of five
12:36 - so now if I say C out and then inside
12:41 - these parentheses I'm going to say
12:44 - please write out if my my variable a is
12:47 - greater than my variable B so if if my
12:51 - five is greater than this another five
12:55 - okay and I'm using these parentheses
12:59 - because I want my C out command to know
13:01 - that this here is one expression the
13:04 - first should be calculated and then
13:06 - whatever this expression here results in
13:09 - I'm going to write
13:10 - that out in my see out command so if I
13:13 - run my program now you see that we have
13:16 - gotten zero and if you know about how
13:19 - computers work you know that they work
13:22 - on zeros and ones meaning that zero
13:25 - represents false and then one represents
13:27 - true so in this situation we have gotten
13:30 - a result of false so when I ask my
13:33 - computer is my hey greater than might be
13:35 - so is 5 greater than five it says false
13:39 - no it is not okay and the same is going
13:43 - to happen if I put here this other
13:45 - operator of less than like this but if I
13:50 - for example put less than or equal to so
13:54 - this operator here and I run my program
13:57 - again you see that now we have gotten a
14:00 - result of one so that is true that is
14:03 - what our computers computer considers as
14:05 - true so our 5 is less than or equal to 5
14:10 - which is correct and even better would
14:14 - be if we say just is equal to and in
14:17 - this situation also we are going to get
14:19 - true as a result like this because 5 is
14:24 - equal to 5 and then how we use this
14:27 - operator here is like this so you can
14:31 - say is my a not equal to my B and your
14:35 - computer really hears is my 5 not equal
14:40 - to my 5 and the response to that is
14:43 - going to be no it is false because these
14:46 - two are equal it's the same number even
14:49 - though it's held by two different
14:50 - variables ok I hope you understood these
14:54 - relational operators and there is also
14:57 - one tip that I want to give you here and
14:59 - that is you see this comma sign here
15:01 - this is also operator in C++ and it is
15:04 - not relational operator but it is binary
15:07 - operator and how this operator is really
15:10 - used because we have seen it before
15:11 - without knowing that it was an operator
15:14 - it is used as follows so in this line
15:17 - here we have said please create a
15:19 - variable of type int call it a and
15:22 - assign it value of 5
15:24 - and then also so that is the purpose of
15:27 - my comma so also create another variable
15:30 - of type int call it B and assign it
15:34 - value of five so my comma in this
15:37 - situation is operator and separator as
15:40 - well so it is pretty intuitive so before
15:44 - we continue let's add one more of these
15:46 - clear screen commands here and the next
15:50 - type of operators that I want to talk
15:52 - about are logical operators and there
15:54 - are three of those so we have logical
15:57 - and and then logical or and then also
16:00 - not operator so these three are logical
16:05 - operators and they are usually used to
16:07 - combine two or more conditions into one
16:10 - single condition and I'm going to show
16:13 - you that on an example and let's use for
16:15 - that example these variables here let's
16:18 - just change the value of our B to 8 for
16:21 - example so what I want to do is I want
16:24 - to write out following so is my age is
16:28 - my a equal to 5 and then also is my B
16:33 - equal to Phi I want to write out the
16:37 - result of this expression here and you
16:39 - see that we have used our end operator
16:41 - to combine these two expressions so if I
16:45 - run my program you see that the result
16:47 - of this is false so that is the nature
16:50 - of our end operator
16:52 - it really works like this it says please
16:54 - check is my a equal to 5 yes it is and
16:58 - then also check is my B equal to 5 no it
17:03 - is not it is 8 so then this operator
17:06 - says ok whatever then this whole
17:07 - expression is going to be false because
17:09 - this operator here needs both of its
17:13 - operands so this here and then this here
17:16 - also both of these need to be true in
17:19 - order for this whole expression to
17:21 - result as true expression that's the
17:23 - nature of this and operator however
17:26 - there is one more forgiving operator in
17:29 - C++ and that is this operator here so
17:32 - this or operator and if I face that here
17:36 - instead of our end operator
17:37 - and I run my program again you see that
17:41 - this time we get different result
17:43 - now we have true and that is nature of
17:46 - our or operator so it says please check
17:50 - if this is true or this here is true
17:54 - whichever of these results is true that
17:57 - I'm going to be true expression only in
18:00 - the situation where this here is false
18:02 - and also this here is false I'm going to
18:05 - result as false in any other situation
18:07 - this here is going to be true so that is
18:11 - the nature of or operator and then we
18:14 - have also this not operator which really
18:17 - negates whatever comes after it so if I
18:20 - put it here for example you see that
18:23 - you've seen that previously this
18:25 - expression here has resulted as true
18:27 - expression now that I indicate it we are
18:31 - going to get false so that is our not
18:36 - operator here okay and there is all also
18:42 - one more thing that I want to explain
18:43 - when it comes to the Proceedings of
18:46 - these operators which means priority of
18:49 - these operators so which operator types
18:53 - have the biggest priority the biggest
18:55 - priority have arith metic operators
18:58 - after that come these relational
19:01 - operators and then the smallest priority
19:05 - have these logical operators so let me
19:08 - show you that on an example let's just
19:10 - comment this very quickly and let's add
19:13 - another line but the previous one that
19:17 - we had so this here like this that is
19:21 - the operation that has resulted as false
19:24 - so is my a equal to 5 and then it might
19:27 - be also equal to 5 and this has resulted
19:29 - as false but if we for example say it
19:33 - like this what do you think that this
19:36 - expression here is going to write out
19:40 - so if I run it you see that we have
19:42 - gotten one why is that so well as I've
19:45 - said the biggest priority have
19:47 - arithmetic operators so this expression
19:49 - here is going to be executed first so
19:52 - five plus three after that
19:55 - I already have these relational
19:57 - operators so this operator here and this
19:59 - operator here so after that comes
20:02 - logical operation so this expression
20:06 - here is going to be really is my a equal
20:08 - to five yes it is and then also is my B
20:12 - equal to eight and the answer to that is
20:16 - also yes so now both of these operands
20:19 - are true and our end operator is
20:23 - satisfied now and it's going to result
20:25 - as true operation this whole expression
20:28 - so you need to remember that the biggest
20:31 - priority have arithmetic operators so
20:33 - these here so these here binary and
20:39 - unary arithmetic operators after that we
20:43 - have our relational operators and then
20:46 - the least priority have these logical
20:48 - operators here let's add one more of
20:52 - these
20:52 - clear screen commands before we talk
20:54 - about the last type of operators that I
20:57 - want to cover in this video and those
20:58 - are operators of assignment and there
21:01 - are six of those and there are as
21:04 - follows so operator the just assigns
21:07 - value and then operator it adds and
21:09 - assigns and then upgraded it subtracts
21:13 - and assigns multiplies and assigns
21:15 - divides in a size and modulates and a
21:20 - size so these six are operators of
21:23 - assignment and let me show you how they
21:26 - work so first I'm going to create a
21:28 - variable of type and now let's call it
21:31 - Excel let's assign it a value of for
21:35 - example five okay so this here is
21:39 - example of this assignment operator here
21:43 - and that is how it works it assigns
21:45 - whatever is on the right to your
21:48 - variable on the left so that is the
21:50 - direction of Association it really says
21:53 - whatever
21:53 - on my right side please assign that to
21:55 - my left side and let me show you now how
21:59 - D is here work because they're a bit
22:01 - more complex so if I say for example X
22:05 - plus equals seven like this what this
22:10 - expression here is going to do well let
22:14 - me write out one more expression and
22:16 - that is X equal to X plus seven so this
22:21 - expression here and this expression here
22:24 - are just the same this is just shorter
22:27 - way to write this here and what this
22:30 - here does well this is expression that
22:33 - is not valid in mathematics but in
22:35 - programming it is and it does following
22:38 - so it says please whatever is on my
22:42 - right side assigned that to my left side
22:44 - and why it does that well because this
22:47 - arithmetic operator here has priority
22:50 - over this assignment operator so if you
22:53 - remember when we were talking about
22:54 - priority these assignment operators have
22:56 - the lowest priority of all so whatever
23:00 - is on my right side that is X plus 7 is
23:03 - going to be assigned to my X variable so
23:06 - 5 plus 7 is going to be equal to 12 and
23:10 - then that is going to be assigned to
23:12 - your X variable in this line here and
23:14 - this expression here is really a short
23:17 - way to write this here okay so I'm going
23:21 - to comment this out and if I write the
23:24 - value of my X now we are expecting to
23:30 - see 12 and it is the result that we have
23:34 - gotten so this X plus equals 7 is just
23:37 - going to do this so this expression here
23:41 - so it's going to add to my X this number
23:44 - here and the same applies to these
23:47 - operators here so this one that
23:49 - subtracts and then assigns or multiplies
23:53 - MSI's divides and modulate so if you say
23:56 - for example X minus equal to 7 then that
24:01 - is really going to result as X is equal
24:05 - to X
24:06 - - seven and then that right side is
24:09 - going to be assigned to your left
24:11 - variable because our automatic operators
24:14 - have priority over these operators of
24:17 - assignment and if I run my program again
24:20 - it really sees five minus seven and that
24:24 - is minus two so I hope that you have
24:27 - understood these examples that I've just
24:29 - given you and I'm also going to include
24:31 - some more examples at the end of this
24:33 - video but the tricky was so that you can
24:35 - be sure that you have really understood
24:38 - these operators in C++ because they are
24:40 - used very often and you have to
24:42 - understand them in order to continue
24:44 - with your progress on a programming pad
24:46 - so make sure to do those examples on
24:49 - your own and if you come across any
24:50 - problems or you have any questions that
24:53 - are related to this video radios in the
24:55 - comments down below and I'm going to
24:56 - answer them I'm going to help you and if
24:59 - you liked this video make sure to
25:01 - subscribe to my channel and also click
25:03 - the bell I consider to our first be
25:05 - notified when I publish my next video
25:06 - and I'm going to see you in my next
25:09 - video bye