00:00 - hi and welcome in this video i'm going
00:02 - to show you how you can build login and
00:05 - registration form using c plus plus
00:08 - and the goal of this video is that we
00:10 - practice together building user
00:12 - interfaces with c plus and for that we
00:15 - are going to use c plus builder which is
00:17 - in my opinion one of the best tools that
00:19 - you can use in order to build c plus
00:22 - plus user interfaces very fast so i'm
00:24 - going to leave the link in the
00:26 - description so that you can download it
00:28 - and also if you need help if you are um
00:31 - if you're a beginner and if you need a
00:33 - little bit of introduction i already
00:35 - made one video which is more beginner
00:37 - friendly than this one so make sure to
00:40 - watch that video first i will link it
00:42 - here i will also link it in the
00:43 - description and then you can come back
00:46 - and watch this video so before i show
00:48 - you the application that we are going to
00:50 - build i just want to say thank you to
00:52 - all the people who support me and i also
00:54 - want to say thank you to the sponsor of
00:56 - this video which is you guys because i
01:00 - recently created an account on a site
01:02 - called buy me a coffee and i am so
01:04 - grateful to the people who support me
01:06 - that way because you guys helped me to
01:09 - create a lot more educational videos
01:11 - like this one so thank you very much and
01:14 - i also want to give you something more i
01:17 - also want to create some additional
01:18 - materials where i will share
01:20 - extra knowledge and where i will share
01:22 - all of my programming experience
01:24 - so you can let me know what are some
01:26 - topics that you would like to see and
01:28 - what are most common problems that you
01:31 - have with programming so that i can help
01:33 - you the best way that i can
01:35 - and uh those materials are going to be
01:37 - available on the link that i will put in
01:39 - the description or i will pin it in a
01:41 - comment and depending on when you are
01:43 - watching this video they might already
01:45 - be available
01:46 - so with that being said let me show you
01:49 - the application that we are going to
01:50 - build so here is the application that we
01:52 - are going to build and as you can see it
01:54 - has the option to log in and to register
01:58 - a new user so let's first register a
02:00 - user and then we are going to try to log
02:02 - in with that user so i will click on
02:05 - registration and here you need to input
02:08 - four things name age username and
02:12 - password so i will say that the name is
02:15 - saldena
02:17 - and then age is 26
02:19 - username is code beauty
02:24 - and then let's say that password is
02:26 - codebeauty123
02:30 - like this
02:32 - so i will click confirm
02:34 - and the data has been saved and the form
02:37 - has been closed which means that now we
02:39 - can try to log in
02:41 - with that user
02:43 - so the username was code beauty
02:47 - and then password was codebeauty122
02:50 - [Applause]
02:52 - one two three
02:54 - but let's first try to enter a wrong
02:56 - password let's say for example one two
02:58 - three five and if i click on confirm as
03:02 - you can see here we get
03:04 - a message which says error you can write
03:06 - out wrong password or wrong username or
03:09 - something like that
03:11 - and then if i try to enter a correct
03:13 - password and i click confirm as you can
03:16 - see here we get a different message
03:18 - which says success so this is the
03:20 - application that i'm going to show you
03:22 - how to build and then i will also give
03:24 - you a few tips on how you can upgrade
03:27 - this application and how you can use it
03:29 - in order to practice on your own so the
03:32 - first step to build this application is
03:34 - to create a new project so i will say
03:36 - create a new multi-device application
03:39 - with c
03:39 - builder it is going to be blank
03:41 - application i'll click ok
03:44 - and
03:44 - here i have my first form so that is the
03:49 - first step and then the second step is
03:52 - we need to create all the forms that we
03:54 - saw and those are three forms main form
03:58 - login and then registration form so
04:01 - this form here that already came when we
04:04 - created a project i will just rename it
04:07 - so that it is called main form so i will
04:11 - right click on this unit 1.cpp
04:14 - and i will say
04:15 - rename and i will say that its name is
04:18 - going to be
04:20 - main
04:21 - form
04:22 - like this
04:24 - okay and inside we have mainform.cpp
04:27 - which is our cpp file and then
04:30 - mainform.fmx which is this
04:33 - design file and then we have mainform.h
04:36 - which is header file so we created
04:39 - mainform and then let's create two more
04:41 - forms registration and login so right
04:44 - click on your project and say add new
04:47 - multi-device form
04:49 - and it is going to be hd form click ok
04:53 - and it should create this unit 2.cpp
04:56 - this is going to be our login form so i
04:58 - will
04:59 - rename it so that it is called
05:03 - login form dot cpp
05:06 - and let's create a third form so add new
05:10 - multi-advice form
05:12 - and then hd form and this one we are
05:14 - going to rename so that it is called
05:17 - registration form
05:22 - like this so that was second step the
05:25 - third step is to change some properties
05:28 - of the forms that we just created and if
05:31 - you're not familiar with what are
05:32 - properties of different controls i
05:35 - recommend you to watch the introduction
05:37 - video to building user interfaces with c
05:39 - plus which i will link in the
05:41 - description
05:43 - so the first one that i will work on is
05:46 - my login form so i will click on login
05:49 - form dot fmx
05:51 - and there are two things that i want to
05:53 - change i want to change the name
05:55 - property in this object inspector so
05:58 - name of this form is currently form2
06:01 - and
06:02 - i will change that so that it is called
06:04 - for example
06:05 - my login form so my
06:08 - login form
06:10 - okay and then i also want to change the
06:13 - caption of that form
06:15 - so caption is here and it is currently
06:18 - also form two i will change it so that
06:21 - it says
06:22 - login
06:24 - okay
06:25 - and then i will do the same for my
06:27 - registration form so i will click on
06:29 - registration form and then
06:30 - registrationform.fmx
06:33 - and i will change its caption so that it
06:35 - says
06:37 - registration
06:40 - and then
06:41 - i will also change the name property and
06:44 - i will call it my
06:46 - registration form
06:51 - okay and then let's do the same for the
06:53 - main form so
06:55 - mainform.fmx caption is going to be
06:59 - main
07:00 - and then
07:01 - name is going to be my main form so here
07:05 - i will say my main
07:07 - form
07:09 - okay so let's see what we have achieved
07:11 - so far so i'm going to run the program
07:15 - okay
07:16 - and the form that is shown is the main
07:19 - form and as you can see here is the
07:22 - caption of that form and when we open
07:24 - login form it should say login and then
07:26 - when we open registration form it should
07:28 - say here registration
07:30 - so that is what we have achieved so far
07:32 - so the next step is that we add
07:36 - different controls to these forms so as
07:40 - you already could see our registration
07:42 - form should have four fields
07:44 - name um
07:46 - age username and password so four edits
07:49 - four input fields and then labels as
07:52 - well and then we also need a button that
07:54 - we will use to save that data so i will
07:58 - click on
07:59 - registration.fmx and i will very quickly
08:02 - use this palette in order to add four
08:05 - edits and four labels so let's do that i
08:08 - will say
08:10 - edit
08:12 - okay this is input field
08:15 - i'll make it a little bit bigger
08:18 - and then i will also add a label
08:22 - i'll put it here
08:25 - okay
08:26 - and let's change the text of this label
08:29 - and also the name of this edit because
08:31 - we are going to use this input field
08:34 - this edit in our c plus code so that we
08:37 - can get the text that our user inputs
08:40 - into this field so i don't want this
08:43 - field to be called
08:44 - uh what is its current name its current
08:47 - name is edit one so that is very generic
08:50 - name what i want it to be called instead
08:52 - is for example
08:54 - uh name
08:55 - edit
08:57 - like this and then for this label one i
09:00 - want to change its text property so that
09:02 - it says
09:03 - name
09:04 - like this
09:05 - okay so i will copy these two i'll copy
09:09 - them
09:10 - four times
09:14 - okay
09:15 - and then
09:17 - here as well
09:18 - and i will change this label
09:21 - i will change its text to
09:24 - age
09:25 - and then i will change the name of this
09:28 - edit so that it is called
09:31 - age edit so here i will say age
09:34 - edit
09:35 - and then this third label should have
09:38 - the text which says username
09:42 - and then
09:43 - this edit will be called username edit
09:46 - so its name is here and it will be
09:49 - called
09:50 - username
09:51 - edit
09:53 - okay
09:54 - and then fourth label should have the
09:56 - text which says
09:58 - password
10:00 - and this edit should have
10:02 - the name of
10:04 - password edit
10:06 - like this so those are four things that
10:09 - we need and then we also need a button
10:14 - i'll put it here
10:16 - i'll make it a little bit bigger
10:19 - and
10:19 - this button here should have
10:22 - the text which says
10:25 - save
10:26 - and then the name of this button that we
10:28 - will use in order to refer to this
10:30 - button from our c plus code
10:33 - that name is going to be
10:35 - save
10:37 - button
10:38 - okay so this here is our registration
10:41 - form and we have finished building the
10:44 - interface for our registration form now
10:46 - let's build the interface of our login
10:49 - form so our login form is going to be
10:51 - smaller and it should have only two
10:54 - edits one for username one for password
10:57 - and then we are also going to add a
10:58 - button which says
11:00 - login
11:01 - so i will add
11:03 - an edit
11:06 - i will put it here
11:10 - and i will also add
11:12 - a label
11:14 - i will put that label here
11:17 - i'll just make this edit a little bit
11:19 - smaller so the text of this label is
11:23 - going to be
11:26 - username
11:28 - like this and then the name of this edit
11:32 - is going to be username edit
11:34 - so let's find name property it is here
11:37 - so username
11:39 - edit
11:40 - okay and then let's copy this
11:43 - one more time
11:45 - so you use ctrl c and then control v you
11:48 - just select
11:49 - all the controls that you want to copy
11:51 - like this so let's change this labels
11:54 - text so that it says
11:56 - password
11:59 - and then the name of this edit is going
12:01 - to be password edit
12:06 - like this
12:07 - and then one more thing that we need is
12:10 - a button
12:12 - and i will put that button here make it
12:15 - a little bit bigger and i will change
12:17 - its
12:18 - text to
12:20 - login
12:22 - and then the name is going to be
12:25 - login
12:26 - button
12:27 - like this and with this we have
12:29 - successfully built the interface for our
12:31 - login form so the only form that remains
12:34 - is our main form and if you remember
12:37 - from the beginning of this video the
12:39 - main form should contain only two
12:41 - buttons so that you can navigate
12:42 - yourself to either registration or to
12:45 - login so i will open
12:48 - mainform.fmx and here i will just add
12:50 - two buttons
12:53 - so one button will be here
12:56 - and
12:57 - i will copy it once more and paste it
13:00 - here
13:02 - so
13:02 - the text of this first button will say
13:06 - login
13:09 - like this and then its name is going to
13:11 - be login navigation button
13:14 - so let's find its name property and
13:17 - let's say login navigation
13:22 - button
13:23 - and then this second button its name is
13:26 - going to be registration navigation
13:28 - button
13:29 - so let's write it here
13:35 - like this and then it should have
13:38 - the text which says registration
13:43 - okay so with this we have successfully
13:45 - created the interfaces for our main form
13:48 - and then login form and registration
13:50 - form so the next step is to create this
13:54 - navigation here because the only form
13:57 - that we can access right now if we run
14:00 - the program
14:01 - is going to be our main form so what i'm
14:04 - going to do in the next step is i will
14:06 - create two event handlers one for login
14:09 - button and then second one for this
14:11 - registration button so when our user
14:13 - clicks on login he should be navigated
14:16 - to login form and then when he clicks on
14:19 - registration he should be navigated to
14:21 - registration form so let's do that so
14:24 - make sure to stop this program before
14:26 - you start changing the code
14:28 - and i am going to navigate myself to
14:31 - main form but inside this cpp folder so
14:35 - mainform.cpp
14:36 - that is where we are going to write the
14:39 - code for our event handlers now one
14:41 - question for you is how are we going to
14:43 - create an event handler and the event
14:46 - handler that i want to create
14:48 - is
14:49 - the one that happens when i click on
14:51 - login button or on registration button
14:54 - there are two ways to do that the first
14:56 - way is to click on your login button and
14:59 - then to look for that event here and as
15:02 - you can see here we have different
15:04 - events so
15:05 - on can focus on click on double click on
15:07 - drag drop and so on and then the second
15:10 - and easier way to create on click event
15:13 - is to double click on that control so
15:17 - when i double clicked on my login
15:18 - navigation button as you can see it had
15:21 - created a handler called login
15:24 - navigation button on click and inside
15:27 - this function here we are going to
15:29 - describe what happens when we click on
15:32 - login button
15:34 - and what should happen is that we should
15:37 - show our login form so i'm going to say
15:40 - my login
15:42 - form
15:43 - and then i will say
15:45 - show
15:46 - like this and please keep in mind that
15:49 - this here is the name of your login form
15:53 - so how can you find the name well you go
15:56 - to login form dot fmx and then you click
15:59 - on the form so not any of these controls
16:01 - inside the form but on the form itself
16:04 - so you click on the form and then you go
16:06 - to properties and here you will find a
16:09 - property called name
16:11 - and as you can see the name of this form
16:13 - is my login form and that is the name
16:16 - that you will use from your c plus plus
16:17 - code in order to refer to this form here
16:21 - so let's return to
16:23 - mainform.cpp
16:26 - and here i have said when my user clicks
16:28 - on login navigation button i will do
16:31 - this part here so i will say my login
16:33 - form show and then what i want to do for
16:36 - my registration form let's go to
16:38 - mainform.fmx
16:40 - and double click on this registration
16:42 - button and here it had created another
16:45 - handler and this is the handler for our
16:48 - registration navigation button so here
16:50 - i'm going to say
16:52 - my registration form show so i will say
16:55 - my
16:56 - registration
16:57 - form
16:59 - and then
17:00 - show
17:01 - okay now one more thing that you need to
17:04 - do in order to be able to invoke these
17:06 - two functions because this still does
17:09 - not work and i'm going to prove that by
17:11 - running the program and as you can see
17:13 - here we have two errors which say
17:17 - here use of undeclared identifier my
17:20 - login form and then use of undeclared
17:22 - identifier my registration form there
17:24 - are two more things that you need to do
17:26 - and those are the following here after
17:29 - you say include myform.h you also need
17:32 - to say include
17:34 - loginform.h and also include
17:37 - registrationform.h because that is the
17:39 - file where
17:40 - these two forms have been declared so i
17:45 - will say here
17:46 - include
17:48 - and then i will use quotations and
17:50 - inside i will say login form dot h so i
17:55 - will include
17:57 - this file here and then i also need to
18:00 - do the same for registration form so i'm
18:03 - going to copy this paste it here and i
18:05 - will say include registration form
18:09 - like this
18:10 - okay so that should fix these two errors
18:13 - that we have here and if i run my
18:16 - program as you can see the program runs
18:18 - successfully so if i click on login it
18:22 - opens login form i'm going to close it
18:25 - and then if i click on registration it
18:27 - opens registration form so with this we
18:30 - have successfully created user
18:32 - interfaces and then we have also built
18:34 - the logic of navigating to our login
18:37 - form and our registration form so the
18:39 - next step is to build the logic so how
18:42 - can we register a user and then how can
18:44 - we log in a user and the first one that
18:48 - i want to work on will be registration
18:50 - form so what is going to happen when our
18:53 - user clicks this save button
18:56 - well the logical behavior is that we get
19:00 - the data that our user has entered into
19:02 - these four edits and then we save that
19:04 - data and we are going to save that data
19:07 - into a file and if you are not familiar
19:09 - with reading and writing into a file i'm
19:12 - going to link a video here and i will
19:14 - also link it in the description and in
19:16 - that video i explained step by step
19:19 - everything that you need to know about
19:21 - writing and reading from a file so make
19:24 - sure to watch that video first because i
19:25 - will just use that code i'm not going to
19:28 - explain it in this video um because i
19:30 - want to make it a little bit shorter so
19:33 - let's create a handler for this save
19:35 - button i'm going to double click on the
19:37 - button and as you can see here it says
19:40 - save button click so here we are going
19:43 - to describe what is going to happen when
19:45 - our user enters the data and then click
19:47 - save on the registration form so in
19:50 - order to be able to write and read from
19:52 - files the first thing that you need is
19:55 - you need to include
19:57 - f stream
20:01 - like this
20:02 - and then what i'm going to do is i'm
20:04 - going to create an object of type f
20:07 - stream
20:08 - and i will call it my file
20:12 - okay and then i want to open this file
20:15 - that i just created so i will say
20:17 - my file
20:19 - dot open
20:21 - and here i'm going to specify two things
20:23 - the first thing is going to be the name
20:25 - of the file and if that file does not
20:27 - exist it is going to create that file so
20:30 - let's say that the name of the file will
20:32 - be registered users
20:37 - dot txt
20:39 - okay and then the mode in which i want
20:42 - this file to be opened is going to be
20:44 - ios
20:46 - app which means i want to append into
20:50 - this file
20:51 - so after i have created and opened this
20:54 - file i need to make sure that it has
20:56 - been opened successfully before i start
20:58 - writing into that file so i will say if
21:02 - my file is
21:04 - open
21:06 - so if this file here indeed is opened
21:10 - successfully here i'm going to put the
21:12 - code to write into that file so what
21:15 - kind of information are we going to save
21:18 - into this file
21:19 - well
21:20 - navigate yourself to this design part of
21:22 - our registration and we are going to use
21:26 - the text from these four edits and we
21:28 - will save that text
21:30 - into
21:31 - this
21:32 - file here so i will create a variable of
21:36 - type
21:36 - nc
21:38 - string
21:39 - okay and i will call it name
21:43 - and inside this variable here i'm going
21:45 - to store the text
21:48 - from this edit here
21:50 - so the name of that edit is
21:54 - name edit and how do i know that well if
21:57 - you go to this form and then click on
22:00 - this edit here and navigate yourself to
22:04 - the
22:04 - name property you will see that its name
22:07 - is name edit and that is the name that
22:09 - we gave to these edits so that is why i
22:12 - changed all of the names because default
22:15 - names are edit one edit two three four
22:17 - and so on and that is not very user
22:20 - friendly so
22:22 - i will navigate myself back to
22:24 - registration registrationform.cpp and
22:26 - here i will say that this first variable
22:29 - called name will store the value of name
22:32 - edit and its text property i just need
22:35 - to use capital t here and i'm just going
22:39 - to copy this four times because we have
22:42 - four edits
22:43 - two three four so the name of this
22:47 - second variable is going to be age and
22:50 - then here i will say
22:52 - age edit and then username
22:55 - and here it will be
22:58 - username edit and here i will say
23:01 - password
23:02 - and then
23:03 - password
23:05 - edit
23:06 - text like this so once i have stored the
23:10 - text from these edits into these
23:12 - variables what i'm going to do now is i
23:14 - will just
23:15 - write the values from these four
23:17 - variables into this file here so i will
23:21 - say
23:22 - my file and then i will use this
23:24 - redirection symbol and the first value
23:27 - that i'm going to store will be name and
23:30 - then i will put this redirection symbol
23:32 - and i will use a delimiter which means
23:35 - that i will separate these four values
23:38 - with a special symbol and that special
23:40 - symbol is called delimiter and i will
23:43 - use
23:44 - comma because that is the one that is
23:47 - used most often so name comma and then
23:52 - age and then comma again
23:56 - and then
23:57 - username
23:59 - i just noticed that here it says use ear
24:02 - name so
24:03 - username with one e and then copy that
24:06 - same name here so that we are sure that
24:08 - we didn't spell it wrong and then comma
24:11 - again
24:12 - and then the last one will be password
24:17 - and at the end i will put a new line
24:21 - like this and then one more thing that
24:24 - we have to do after we finish writing
24:27 - into a file is we need to close that
24:29 - file so how do we do that well we just
24:32 - say my file dot close
24:39 - okay and then another thing that i also
24:42 - did is when we close this file and we
24:45 - save this data into our file what i want
24:48 - to do is i also want to close this
24:50 - registration form because there is no
24:52 - reason for it to be opened anymore so i
24:55 - will say
24:56 - this
24:58 - close
24:59 - as well and
25:00 - this command here is going to close the
25:03 - file and then this command here is going
25:05 - to close the registration form so
25:08 - let's test this code that we have
25:10 - written and let's see if
25:12 - all of this data is going to be stored
25:15 - into a file called registered users so i
25:18 - will run the program
25:21 - okay i will navigate myself the
25:23 - registration form
25:26 - and then here i will enter the name
25:28 - let's say
25:29 - saldena and then age is 26. username is
25:33 - code
25:35 - beauty and then password is
25:38 - code
25:39 - beauty123
25:41 - so if i click
25:42 - save as you can see the form has been
25:44 - closed so the way for us to check if
25:48 - all of this
25:49 - information has been stored into a file
25:52 - called registered users is to manually
25:54 - find this file and check what kind of
25:57 - data is inside that file so let's do
26:00 - that please open your file explorer and
26:03 - then click on documents and here you are
26:05 - going to find folder called embarcadero
26:08 - and then studio projects
26:12 - windows 32 and then debug and here you
26:15 - are going to look for a file called
26:18 - registeredusers.txt
26:21 - and that file is here it says registered
26:24 - users and if i double click on that file
26:27 - it opens on my second monitor but as you
26:29 - can see here is all of the information
26:32 - that we stored into this file which
26:34 - means that we have successfully stored
26:36 - the information from our registration
26:39 - form and one thing please don't change
26:42 - the content of this file manually do
26:45 - that only through your c plus code so
26:49 - let's close this file and then i will
26:52 - also minimize this and the conclusion is
26:55 - that this handler here save button on
26:58 - click handler works as it should so that
27:02 - means that we are left with one more
27:04 - task and that is to create a logic for
27:08 - our login form so what is going to
27:10 - happen when our user enters username and
27:13 - password and clicks login that is the
27:16 - next step so let's click on login form
27:19 - dot fmx and i will create a handler for
27:23 - this login button double click on it and
27:26 - here is our handler here we are going to
27:29 - write the logic which is going to be
27:31 - executed when the user clicks on a login
27:34 - button so the first thing that i want to
27:36 - do is i want to create an object of type
27:39 - f stream so i also want to create a file
27:42 - because here we are going to read from a
27:45 - file and in order to be able to create
27:48 - an object of type f stream you first
27:50 - need to say
27:52 - include
27:54 - f stream
27:57 - like this and then you can say
28:00 - f stream
28:01 - my
28:02 - file and then let's open this file here
28:05 - let's say my file dot open
28:08 - and the file that i want to open is the
28:11 - same file that i created
28:14 - and that i used to write the information
28:16 - into on my
28:19 - registration.cpp so i'm going to copy
28:22 - the name of the file
28:24 - and i will return to loginform.cpp
28:27 - and here i will say registeredusers.txt
28:31 - and then the mode in which i want to
28:33 - open this file is going to be ios
28:36 - in
28:37 - which means that i will read from this
28:40 - file so i will input from
28:42 - this file into
28:44 - this program here so the next step is to
28:48 - again make sure that this file has been
28:50 - opened successfully so you say if
28:54 - my file is
28:56 - open and then
28:59 - here inside this if block we are going
29:02 - to write the logic to read from a file
29:05 - again if you are not familiar with this
29:08 - make sure to watch the video in the
29:09 - description and then come back and watch
29:11 - this video so the first thing that i
29:13 - will do inside this if block is i will
29:16 - create a variable of type string so
29:19 - std
29:20 - string and i will call that variable
29:24 - line
29:25 - and this line variable will represent
29:28 - one record from our file so it will
29:30 - represent one user data about one user
29:34 - and in order to be able to use this
29:36 - string type you need to say here include
29:40 - string
29:43 - like this
29:44 - okay
29:45 - so the next thing that i will do is i
29:48 - will use while loop
29:51 - in order to iterate through this file
29:55 - through this file here and read line by
29:58 - line so for that i will say
30:00 - get
30:01 - line
30:03 - so please get line from
30:06 - this file here
30:08 - and then store it
30:10 - into this variable here
30:13 - and do that
30:15 - while you have more lines to read one
30:19 - thing that we need to do when we read a
30:21 - line from our file is we need to parse
30:24 - that line and that means that we need to
30:27 - convert it into a format that is going
30:29 - to be easier to work with so if you
30:32 - remember our file called registered
30:35 - users it looked something like this
30:37 - first we had name which is saldena and
30:41 - then we had this comma symbol which is
30:44 - called delimiter and then we had age so
30:48 - 26 and then username which was code
30:52 - beauty and then again this delimiter
30:55 - comma symbol and then we had password
30:58 - which was code
31:00 - beauty123 so what it means to parse this
31:04 - line here is to separate this name and
31:07 - then this age and username and password
31:11 - and for that we are going to use this
31:14 - delimiter because as you can see it
31:16 - clearly separates
31:18 - one information from the other
31:21 - okay so let me type the function that is
31:24 - going to parse this line and then i will
31:26 - be back and explain what is happening in
31:29 - that function so here i created a
31:31 - function called parse comma delimited
31:34 - string and that function returns vector
31:38 - of strings and then it receives only one
31:41 - string parameter called line and that
31:43 - line is one record from our file so the
31:46 - information about one user now one very
31:50 - important thing is that in order to be
31:51 - able to use vector and in order to be
31:54 - able to use this string stream that we
31:57 - use inside this function make sure to
31:59 - include vector here and then also s
32:03 - stream and if you haven't included
32:05 - string make sure to do so as well so
32:09 - the behavior of this function is the
32:12 - following first we create
32:14 - a vector of strings called result and
32:17 - that is the variable that we will return
32:20 - from our function as you can see and
32:22 - then you create a string stream object
32:26 - called s stream and then you pass to
32:29 - that object the line that you received
32:32 - as the parameter of this function now
32:35 - after you have created your stream what
32:38 - you do is you
32:40 - will iterate through that stream while
32:43 - while it does not have any error so
32:46 - while this s stream is good you are
32:49 - going to iterate through it and inside
32:52 - this while loop you will do the
32:53 - following so create a variable called
32:56 - substring so sub str that is substring
33:01 - and then you will use this getline
33:04 - function to do the following so
33:06 - you will read from this stream here so
33:09 - from the line that you received as the
33:12 - parameter and you will read a substring
33:15 - of that line
33:16 - until you come to this delimiter and
33:20 - then when you come to this delimiter you
33:22 - will take that substring and you will
33:25 - push it into this results vector and you
33:29 - will do that again and again and again
33:31 - and then once you don't have anything
33:33 - else to read you will leave this while
33:36 - loop and then you will return the result
33:38 - so let me show you how this works
33:40 - visually on an example that we have
33:43 - inside our notepad file so that you can
33:45 - understand better
33:47 - so this is the line that we received as
33:50 - a parameter of our function so what this
33:53 - function does is the following first it
33:56 - creates a vector of strings called
33:59 - result
34:00 - so let's do that
34:02 - and for now it is going to be an empty
34:05 - vector and then it creates a stream and
34:08 - it passes this line to this stream and
34:11 - then it goes into a while loop and we
34:14 - are going to read from this line in the
34:16 - following way so first we create a
34:19 - variable called substring so sub str
34:24 - and for now it is empty and then we read
34:27 - from this stream here so we read from
34:31 - this line here and we read a substring
34:36 - as you can see here until we come to a
34:39 - comma delimiter so we read read read
34:42 - read read and then we come to this comma
34:45 - delimiter and then what this line here
34:48 - does is it is going to store this
34:52 - salvina substring into this variable
34:55 - here and it will remove this delimiter
34:59 - okay and then we go to this line here
35:01 - which says
35:03 - results.pushback substring so what that
35:06 - does is it
35:08 - takes this saldena substring and it
35:11 - pushes it into our results vector and
35:15 - then we go back to our while loop we
35:17 - check if there is more text to be read
35:19 - and yes there is so we create a new
35:23 - substring which is going to be
35:25 - empty and then we read from this line
35:29 - here again so we read a new substring
35:32 - until we come to this comma delimiter
35:35 - and then we take
35:36 - that substring store it in this variable
35:39 - here we remove this comma delimiter and
35:42 - then this results.pushback
35:45 - substring will push this value into our
35:49 - results vector like this and then we do
35:52 - the same again and again and again until
35:55 - we don't have any more text to read in
35:58 - this line so until this
36:02 - here happens
36:04 - okay and at that point we already have
36:08 - all of the values from our line stored
36:11 - into our results vector so we just
36:14 - return that results vector to
36:18 - this function here and what we can do
36:20 - now is we can access
36:23 - all of these values using indexes so
36:26 - this first value this saldena which is
36:28 - our name has the index of zero and then
36:31 - this has the index of one
36:33 - two
36:34 - and then three so that is what we have
36:37 - achieved by using this parse comma
36:40 - delimited string function so to return
36:43 - to our login button on click function
36:46 - what i said is that this line here that
36:49 - we are reading from our file is not
36:51 - actually in a good format so it has to
36:53 - be parsed into a format that is easier
36:56 - to work with and that is exactly what we
36:59 - have achieved in this function here so
37:02 - now what we need to do is we need to
37:04 - invoke that function and store the
37:06 - result into a vector so i will create
37:10 - std
37:11 - vector
37:13 - and it will be a vector of
37:16 - string
37:18 - like this
37:19 - and i will call it result vector or
37:22 - parsed line whichever one you want
37:24 - so i will say for example
37:26 - parsed
37:28 - line
37:30 - like this
37:31 - and here i will invoke
37:34 - a function called pars comma delimited
37:37 - string and i will pass
37:39 - a line to that function this line here
37:42 - now one very important thing please make
37:45 - sure to create this function before this
37:48 - function here that is invoking it
37:50 - because if you position this this
37:52 - function after this login button on
37:55 - click it is not going to work so as i
37:58 - said now this parsed line vector can be
38:01 - used in order to access all of those
38:03 - individual properties by using their
38:06 - index so the property that i need first
38:09 - is going to be username because what i
38:12 - want to do first is i want to check
38:14 - if our user has entered the username
38:17 - that we have stored into our registered
38:20 - users file so
38:24 - let's find the username property inside
38:26 - this parsed line so i will create
38:29 - a const
38:30 - char
38:31 - pointer i will call it
38:33 - username
38:35 - okay
38:36 - and i will access that username by using
38:40 - this parseline vector and then i will
38:42 - say please give me what you have at the
38:46 - position of 2 because username has the
38:50 - index of 2. how do i know that well
38:53 - if i return here you will see that first
38:55 - we stored name which has the index of 0
38:58 - and then age with which has the index of
39:00 - one and then username which has the
39:03 - index of two and password has the index
39:05 - of three remember that because we are
39:07 - going to need it later so
39:10 - i will return to login form dot cpp and
39:14 - with this line here
39:16 - i have
39:17 - stored the username from this parsed
39:21 - line vector into this variable here now
39:24 - if i try to run this program let's see
39:26 - what is going to happen and we have an
39:29 - error which says here
39:31 - okay
39:32 - so it says no viable conversion to const
39:36 - char pointer and it is at this line here
39:39 - and the error that we are having is very
39:42 - hard for most beginners to fix and the
39:44 - error is actually that this here is not
39:48 - a const char pointer which means that
39:52 - after we have accessed the property at
39:54 - position 2 now we need to convert that
39:58 - into a c string so i will say
40:00 - c s t r
40:03 - like this and this method here is going
40:05 - to convert this
40:08 - into a variable that can be stored
40:10 - inside our cons char pointer username so
40:14 - if i run my program now
40:17 - as you can see our program runs
40:19 - successfully and the error has
40:21 - disappeared now after we have stored the
40:23 - username from our file into this
40:25 - variable here what we need to do is we
40:28 - need to compare this username so the
40:30 - username from our file with the username
40:33 - from our edit so the username that our
40:36 - user entered the user that is trying to
40:38 - log in so
40:40 - in order to do that i'm going to use a
40:42 - function called string compare and i
40:45 - will show you how that function works
40:47 - but the first thing that i need to do is
40:49 - i need to take the value that our user
40:52 - has entered into this field here so how
40:55 - can we do that
40:57 - well
40:58 - i'm going to create a variable of type a
41:01 - n s i
41:02 - string
41:03 - like this and i will call it
41:06 - edit username
41:08 - so this is the username from our edit
41:12 - control and here i will store the value
41:15 - from our username edit
41:20 - text
41:21 - and capital letter t and this here is
41:25 - the name of our input field so this is
41:27 - the name of this control here
41:31 - okay and then this is the variable that
41:34 - we just created now one important thing
41:37 - is that in order to be able to compare
41:40 - this variable here and this variable
41:43 - here to check if they contain the same
41:45 - text we need to convert
41:48 - this into a const char pointer as well
41:51 - so how am i going to do that i will say
41:54 - const char
41:55 - pointer and let's say
41:58 - username string
42:00 - like this and i will say that it is
42:04 - equal to
42:06 - edit username to c str format so this
42:12 - here is going to convert this value into
42:15 - a c string okay so now we can compare
42:18 - this value and this value here so as i
42:22 - said in order to do that we are going to
42:24 - use a function called string compare so
42:27 - i will say if
42:30 - std
42:32 - str
42:34 - cmp so
42:36 - string compare
42:38 - and this function here receives two
42:40 - parameters it receives two strings that
42:43 - it needs to compare so the first one is
42:46 - this one and then the second one is this
42:50 - username string
42:52 - and this string compare function will
42:55 - return the value of 0
42:58 - if
42:58 - these two strings are the same so here i
43:02 - will say please string compare username
43:05 - and username string and if you return 0
43:10 - that means that the username from our
43:13 - file is the same to the username that
43:16 - our user has entered into our login form
43:20 - so what are we going to do when we
43:22 - conclude that these two strings are the
43:25 - same well the answer is that we need to
43:27 - do the same for passwords so now i need
43:30 - to read the password from this
43:33 - parsed line and then i need to take the
43:36 - password from our password edit the same
43:38 - way that we did here
43:40 - and then we are going to compare the
43:42 - passwords and if passwords match that
43:45 - means that our user can log in
43:47 - successfully so
43:49 - let's do that
43:51 - let's create
43:52 - a const
43:54 - char
43:55 - pointer called
43:57 - password
43:58 - and
43:59 - here i will store the password from this
44:02 - parsed line so the password from our
44:04 - file i'm going to copy
44:07 - this and paste it here and the position
44:10 - of our password was index
44:13 - 3 so this is our password and then after
44:16 - we have stored the password from our
44:18 - file what i need to do now is i need to
44:21 - take the password from our password edit
44:24 - so i'm going to copy this part here
44:29 - and then paste it below
44:31 - and i'm just going to change the names
44:34 - so
44:35 - here instead of saying edit username i
44:38 - will say edit password
44:42 - like this and then here instead of
44:44 - taking the text from username edit i
44:47 - will take the text from password edit
44:52 - like this and then after we have stored
44:54 - that text into this variable here it is
44:58 - of type and c string so now we need to
45:00 - convert it into a cons chart pointer so
45:03 - i will say
45:04 - password string
45:07 - will be equal to
45:09 - this variable here to c string so please
45:13 - convert this nc string into a c string
45:17 - and store that into this variable called
45:19 - password string okay so now that we have
45:23 - this password from our edit and then
45:26 - this password from our file
45:28 - what i'm going to do again
45:30 - is i will use this string compare
45:33 - function once more in order to find out
45:36 - if these two are the same so i will say
45:40 - if
45:42 - std strc mp so if string compare
45:48 - of
45:48 - this variable here
45:51 - and then
45:52 - this variable here
45:55 - returns
45:57 - zero
45:58 - that means that they are the same and in
46:01 - that situation here i am going to write
46:04 - out the message which says you have
46:06 - successfully logged in and then
46:09 - if they are not
46:11 - the same i will write out a message
46:14 - which says
46:15 - an error happened or wrong password now
46:18 - one thing that we have forgot
46:20 - uh and if you already know what we have
46:22 - forgot please write that in the comment
46:25 - section before i answer it
46:28 - so
46:29 - one thing that we have forgot is we
46:30 - forgot to create a label that we will
46:34 - use in order to write that message so
46:36 - here on our login form dot fmx what i
46:39 - need to do is i need to add
46:41 - a label
46:43 - okay
46:44 - label
46:45 - and i will put it here
46:48 - and i will change the name of that
46:51 - label it's going to be called
46:54 - message label
46:56 - and we are going to use this message
47:00 - label
47:01 - in order to write out the message of
47:03 - either success or error
47:06 - so let's return to our login form.cpp
47:09 - and here in this if block so
47:12 - if
47:13 - these two are the same if password and
47:15 - password string are the same i will say
47:18 - that message label
47:21 - its text
47:23 - will be equal to
47:26 - success
47:28 - okay
47:29 - and then if this here results as false
47:32 - so if this function returns some other
47:34 - value which is not zero that means that
47:36 - the password that our user entered and
47:38 - the one inside our file
47:40 - they are not the same so
47:42 - instead of writing out success i am
47:45 - going to write out
47:47 - error or let's say wrong
47:50 - password
47:52 - like this
47:53 - okay and let's add exclamation mark here
47:56 - as well so what are we going to do now
47:59 - is we will test the code that we have
48:01 - written so that we make sure that we
48:03 - don't have any bugs
48:05 - so let's run our program
48:08 - and we have an error
48:10 - it says unexpected and then we have this
48:13 - column sign
48:14 - where is it it is here so instead of std
48:18 - column sign column sign string compare
48:20 - we just wrote one column sign so i'm
48:22 - going to add another one and if we run
48:25 - our program now we can try to log in our
48:27 - user so i will click on login and one
48:30 - thing that we also didn't do is we did
48:32 - not remove default text from this label
48:35 - so this should this should be empty by
48:37 - default um we are going to do that later
48:39 - let's now test the functionality of
48:42 - logging in the user so i will say
48:45 - username code beauty
48:48 - like this and then password was code
48:51 - beauty123 if i'm not wrong
48:54 - one two three
48:56 - okay so if i click on login as you can
48:58 - see it says success and then if i type
49:01 - in wrong password so one two three four
49:04 - and click on login it is going to say
49:06 - wrong password
49:08 - okay so that means that
49:11 - this function here works as it should
49:14 - now let's very quickly fix the error
49:16 - that we had so this message label we are
49:19 - just going to remove this default text
49:22 - so now if i run the program and then i
49:25 - click on login as you can see there is
49:27 - no default text inside our label so i
49:30 - returned back to loginform.cpp because i
49:33 - want to give you a few tips
49:36 - there are quite a few things that you
49:37 - can do in order to improve this program
49:39 - and there are also a few bugs and i will
49:42 - give you hints on how you can fix those
49:45 - bugs later but now i want to give you
49:47 - one very important advice and i want to
49:50 - explain one very important concept in
49:52 - programming so for all the people who
49:55 - have been watching this video the entire
49:57 - time this is a bonus and this is one of
50:00 - the most important principles in
50:02 - programming and that is the principle of
50:05 - dry which means don't repeat yourself so
50:09 - there is one thing that we can do here
50:13 - in this function so that we don't repeat
50:17 - the code that we have already written so
50:20 - can you recognize what that thing is if
50:23 - you can pause the video write it in the
50:24 - comments and then listen to my
50:26 - explanation
50:28 - so
50:29 - if you look at these two lines here and
50:32 - then at these two lines here you will
50:35 - notice that they do the same thing they
50:37 - perform the same logic but they just
50:40 - perform it on a different data so what
50:43 - we can do now is we can create a
50:45 - function that is going to perform that
50:48 - logic and then we are going to pass a
50:50 - parameter to that function in one
50:52 - situation it is going to be this
50:54 - parameter and then in another situation
50:56 - it is going to be this parameter here
50:59 - and then we can use that function
51:01 - whenever we need to perform that logic
51:04 - in this situation that is only two times
51:07 - but it can as well be 5 or 10 or 100
51:11 - times so that is what i'm going to
51:14 - explain now and that is the principle of
51:16 - don't repeat yourself so create a
51:19 - function put that logic into a function
51:22 - and then invoke that function whenever
51:24 - you need a specific logic to be executed
51:28 - so let's create a function here and i
51:30 - will call that function convert to char
51:33 - pointer and to be more specific that
51:36 - function is going to convert
51:38 - ansi string to a char pointer and we are
51:42 - going to use that to convert this
51:44 - username edit and then this password
51:47 - edit as well
51:48 - so let's create a function that returns
51:52 - const char pointer and it is called
51:56 - convert to
51:58 - char
51:59 - ptr
52:00 - so convert to char pointer
52:03 - that function is going to receive
52:06 - nc string and i will call that parameter
52:09 - a n s
52:10 - i
52:11 - s t r so nc string and the job of that
52:15 - function
52:16 - will be to return
52:19 - a n
52:21 - s i s t r to c
52:24 - s t r
52:26 - like this so it will take
52:29 - this parameter here and then it will
52:31 - perform this logic and return it here so
52:35 - now what i can do is instead of invoking
52:39 - this code here i will
52:41 - comment it
52:43 - okay
52:44 - and then instead of using this username
52:46 - string variable which we created here it
52:48 - does not exist anymore because it has
52:50 - been commented what i can do is i can
52:54 - invoke this function called convert to
52:57 - char ptr i will invoke it here and to
53:00 - that function i will pass
53:03 - this
53:04 - parameter here so i will pass username
53:07 - edit text
53:09 - like this
53:10 - and everything should work as expected
53:14 - okay
53:15 - and now in order to obey this principle
53:17 - of don't repeat yourself i will do the
53:19 - same
53:20 - here so i will do the same for our
53:23 - password edit so instead of passing
53:25 - password string which is this parameter
53:28 - here that has been commented i will
53:30 - again invoke a function convert to char
53:34 - ptr that we just created
53:36 - and to that function i will pass
53:40 - this
53:40 - parameter here so password edit text so
53:45 - if i run my program i expect to get the
53:48 - same behavior that we had previously
53:49 - because
53:50 - there were no changes in the logic we
53:52 - just optimized our code a bit so
53:56 - let's run the program
53:58 - okay and if i click on login and then
54:01 - type
54:02 - code beauty
54:04 - and then type
54:05 - code beauty oh
54:07 - code v e a
54:10 - t y
54:12 - one two three and i click login as you
54:14 - can see it successfully logged in this
54:16 - user and then if i click one two three
54:18 - four
54:19 - as you can see that is wrong password so
54:22 - let's close the program and
54:25 - you can delete this but i will just
54:28 - leave it so that you can compare
54:30 - this code here and then this function
54:33 - here and so that you can see how dry
54:36 - principle work so how
54:38 - don't repeat yourself principle works so
54:41 - as i said there are a couple more
54:43 - problems that i noticed in this program
54:45 - and i will explain them i will give you
54:48 - a couple of hints and i will leave them
54:50 - to you so that you can fix them because
54:53 - when you are learning you want to solve
54:55 - as many problems as possible because
54:56 - that is the best way to learn so the
54:59 - first thing that i notice is if i run
55:01 - this program
55:03 - okay
55:04 - and i click on login and if i try to log
55:07 - in if i say code
55:09 - beauty and then let's type a password
55:12 - doesn't matter which password and i
55:13 - click on login so it's wrong password
55:16 - let's close this form
55:17 - and let's see what is going to happen if
55:19 - i open it again okay so after i open
55:22 - this form again as you can see these
55:25 - fields these edits have not been cleared
55:28 - and then this message here still remains
55:30 - so that is the first thing that you
55:33 - should do so you should clear these
55:35 - edits and then remove this message when
55:38 - this form is opened so that is the first
55:41 - thing the second thing is that this
55:43 - login button should be disabled when we
55:46 - don't have any values inside these two
55:48 - fields and as you can see it is not
55:51 - disabled which means that if i click on
55:54 - this login button it is trying to
55:56 - execute the logic in the background and
55:59 - that should not happen because there is
56:01 - no sense to execute this logic because
56:04 - we have not entered any values into
56:06 - these fields so that is something that
56:08 - you can do on your own as well but in
56:10 - order to prove what i just said
56:13 - i'm going to close this program
56:15 - okay and i will run it in a debug mode
56:18 - so i will put a breakpoint here
56:21 - and i will click on run and here i will
56:24 - click run so instead of run without
56:26 - debugging i will just click run which
56:28 - means that it will run the code into
56:31 - debugging mode so if i click on login
56:34 - and then i click this login button
56:36 - without entering any values into these
56:39 - fields
56:40 - as you can see the execution of our
56:43 - program stopped on this breakpoint which
56:45 - means that even though we have not
56:47 - entered any values for our password and
56:50 - username this login button on click is
56:53 - still being executed when we click it
56:56 - and that is a problem because it is
56:58 - slowing our program down and it is also
57:00 - a potential issue security issue for our
57:03 - application
57:05 - so if i click f8 f8 f8 as you can see it
57:08 - is executing line by line so that is
57:12 - second thing that you can fix and the
57:14 - third thing is something that you can
57:16 - also discover by debugging this program
57:19 - and if you're not familiar with
57:21 - debugging please let me know if you
57:22 - would like me to make a video where i
57:24 - would explain how to debug programs and
57:26 - how to
57:28 - fix those bugs so we can even continue
57:31 - working on this program and we can
57:32 - together fix these bugs if you want let
57:35 - me know in the comments
57:36 - so
57:37 - as i said the third bug that is present
57:41 - here is the following let's close this
57:44 - and let's add a new user let's register
57:47 - a new user so let's say
57:50 - anna age is going to be 30 and then
57:52 - username is going to be
57:55 - anna 1 and password is going to be anna
57:58 - 123
58:00 - okay so i'm going to save this user okay
58:04 - now what is going to happen if i go to
58:07 - my login and i try to log in code beauty
58:10 - user so i type here code
58:13 - beauty
58:15 - and then password was code beauty123
58:19 - one two three okay
58:21 - before i click on this
58:24 - login button i will put a breakpoint on
58:27 - this line here so this line that puts
58:30 - success message on our screen and i will
58:33 - remove this breakpoint because we don't
58:35 - need it anymore this one is going to be
58:37 - enough
58:38 - so
58:40 - to return to our login form if i click
58:42 - on this login button let's see what is
58:45 - going to happen so the execution of our
58:47 - program stopped on this line here so
58:50 - message label text is equal to success
58:53 - which means that it is going to show
58:55 - this success message on our form and
58:59 - then if i press f8 let's see what is
59:02 - going to happen so if i press it one
59:04 - more time
59:06 - and then again we are going back to our
59:08 - while loop even though we have already
59:10 - logged in our user successfully and
59:12 - found that user it is still checking
59:16 - remaining users why is that the case
59:18 - that is the case because we have not
59:20 - finished the execution of our while loop
59:24 - here so if i click on f8 as you can see
59:27 - it is trying to parse the second user
59:30 - okay and that second user is anna one
59:34 - and then if we had 10 users or 100 users
59:37 - or 100 000 users it would go through 100
59:41 - 000 users even though the first one was
59:44 - success so there are two ways to fix
59:47 - this bug the first one is to say break
59:49 - here after you have successfully found
59:51 - your user and logged him in
59:54 - so you can use break statement but that
59:57 - is something that i don't advise you to
59:59 - do because it is not very readable it is
60:02 - not good practice to use break
60:04 - statements with loops a preferred and a
60:07 - better option would be to create an
60:09 - additional variable that you will
60:11 - initially set to false
60:13 - and then once you find your user you
60:16 - will set that variable to true and then
60:19 - here in your while loop condition you
60:22 - will also check that variable so in each
60:24 - iteration you will check if your user
60:28 - has been successfully logged in in the
60:30 - previous iteration so that is a better
60:34 - option to fix the bug that we have here
60:37 - and then fourth thing is that now you
60:39 - can use this application in order to
60:40 - build any other application that you
60:42 - want so you just upgrade this
60:45 - application uh so what you would do is
60:47 - after you log in your user successfully
60:50 - you close login form and you navigate
60:52 - your user to some other form what kind
60:55 - of form well that depends on what kind
60:57 - of application you are building and then
60:59 - another thing that i would do is i would
61:02 - give my user only three attempts to log
61:05 - in so what you would do is you would
61:07 - count every wrong password that he
61:09 - enters and then after he exceeds those
61:12 - three attempts you can block him and
61:15 - what that means is that you can for
61:17 - example store an additional information
61:19 - to your registered users file which says
61:22 - that a specific user has been blocked or
61:25 - you can find any other way that you see
61:28 - fit to solve this problem so that was
61:30 - all for this video all the links and
61:33 - everything will be in the description or
61:35 - i will pin it in a comment make sure to
61:37 - check out both
61:38 - and if you enjoyed this video please
61:40 - give it a thumbs up and then also share
61:42 - it with your friends who would like to
61:43 - learn programming because if you enjoyed
61:45 - this video then you can make a big
61:47 - difference in someone's life and help
61:49 - him learn programming so thank you very
61:52 - much for watching and i will see you in
61:54 - some other video bye