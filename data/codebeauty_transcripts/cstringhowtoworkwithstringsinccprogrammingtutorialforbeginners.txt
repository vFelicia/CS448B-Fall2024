00:00 - hi guys and welcome to my channel in
00:02 - this video you are going to learn how to
00:03 - work with strings I'm going to teach you
00:06 - everything that you need to know from
00:07 - the beginning and I will also show you
00:09 - some of the most common errors that
00:12 - beginners make when working with strings
00:15 - so let's go straight to the point and
00:16 - the first thing that I want to explain
00:18 - is what is string string in C and in
00:22 - many other programming languages is a
00:24 - data type that is used in order to store
00:26 - a sequence of characters so basically
00:29 - it's is used to store text now the best
00:32 - way for you to understand this is to see
00:34 - it on an example so let me show you an
00:36 - example let's create a string variable
00:39 - so you say string and then you give the
00:42 - name to your variable so let's say for
00:44 - example letter like this and then inside
00:48 - these quotation marks you are going to
00:50 - put the value for this string here so
00:53 - for example here I will assign just one
00:55 - character so let's say letter A so this
00:58 - string variable could take contains just
01:01 - one character now you can also assign
01:04 - more than one character so let's create
01:05 - another string variable let's say for
01:07 - example word and here I will assign more
01:11 - than one character so let's say for
01:13 - example this word here programming okay
01:16 - so this string variable contains more
01:20 - than one character and then you can also
01:23 - assign an entire sentence so let's
01:25 - create another string variable I will
01:27 - call it sentence
01:30 - like this and then let's copy for
01:32 - example this sentence here so learn
01:35 - practical programming and start your
01:37 - career and then this here is my website
01:39 - in case that you want to learn practical
01:41 - programming so all of these three are
01:45 - examples of string variables and as I
01:48 - already said string is used in order to
01:51 - store a sequence of characters that can
01:54 - be one character or it can be an entire
01:56 - sentence or even a longer text so now
02:00 - your question is probably how many
02:01 - characters can I put inside a single
02:04 - string variable well what do you think
02:08 - let me know in the comment section so
02:11 - the answer is you can put a lot of
02:13 - characters technically that depends on
02:16 - how much memory your computer has uh so
02:19 - in most modern computers there is
02:21 - probably billions of characters and just
02:24 - to get an idea of how much that really
02:26 - is the entire Harry Potter series so all
02:30 - of the books contain between six and 7
02:33 - million characters depending on the
02:35 - translation and the language so you can
02:38 - put really a lot of characters inside a
02:41 - single string variable but you should
02:43 - avoid to work with really big strings
02:46 - because that can slow down your computer
02:48 - and it can cause some performance issues
02:51 - so a better question is why would you
02:53 - want to store so many characters inside
02:56 - a single string variable so now that we
02:59 - have created these string variables
03:01 - let's for example print them to the
03:03 - console so I will say
03:06 - console. right line and then here I will
03:10 - put the variable that I want to print to
03:12 - the console so if I say for example
03:15 - letter and I start the program we should
03:19 - get in the console only this letter A
03:22 - okay and then if I print for example
03:24 - this word variable we should get the
03:28 - word programming okay and then if I
03:31 - print this entire sentence and I start
03:34 - the program we get this entire sentence
03:37 - printed in the console now as I said
03:40 - string variables are used in order to
03:42 - store a sequence of characters but
03:46 - characters are not just letters inside a
03:49 - string variable we can also store some
03:51 - special characters for example this
03:54 - character here or this character here
03:56 - those are not letters those are special
03:58 - characters so so I can also create for
04:02 - example a string called special
04:07 - characters like this and inside this
04:10 - string we can store something like
04:12 - hashtag dollar sign percentage and and
04:16 - so on so inside a string variable we can
04:21 - also put special characters but not all
04:24 - special characters later in this video
04:26 - I'm going to show you some special
04:28 - characters that you cannot store for
04:29 - inside strings or at least not as easily
04:33 - as these that I have here so those are
04:36 - some exceptional situations and some
04:38 - errors and mistakes that a lot of
04:40 - developers make and I will explain that
04:42 - later in the video so make sure to watch
04:44 - the entire video in order to learn
04:46 - everything that you need to know about
04:48 - strings so now if I print this string to
04:51 - the console we should get these special
04:55 - characters like you can see here now
04:58 - also inside a string you can store
05:01 - numbers so here I can create a variable
05:04 - let's call it age and inside it I will
05:08 - put for example 29 because that is my
05:11 - age and if I print this variable here we
05:16 - should get 29 in the console so inside a
05:21 - string variable you can store a single
05:24 - letter you can store a word you can
05:26 - store an entire sentence so you can
05:28 - store letters
05:30 - or you can store special characters like
05:32 - I have here or you can even store
05:35 - numbers there are some important things
05:37 - that you should know if you are doing
05:39 - this so if you are storing numbers
05:42 - inside a string but I'm going to explain
05:45 - that in a few minutes and first I want
05:47 - to show you another interesting thing
05:49 - that you can do and that is you put your
05:52 - string and then you say dot length and
05:56 - that is going to give you the length of
05:58 - the string so how many characters that
06:01 - string contains so if I say age. length
06:03 - and I start the program as you can see
06:06 - we get two because this string here
06:09 - contains only two characters number two
06:11 - and number nine and then if I say for
06:13 - example this word so word. length and I
06:17 - start the program we get 11 because that
06:20 - is how many characters this word here
06:22 - has so let's check that 1 2 3 4 5 6 7 8
06:26 - 9 10 11 indeed and then if I say for
06:30 - example sentence. length Okay we get 76
06:36 - and I'm not going to check this one
06:38 - manually so basically what this link
06:41 - does is it gives you the number of
06:43 - characters that this string here
06:46 - contains and something else that we can
06:48 - have is an empty string so I can say
06:51 - string let's name it empty
06:55 - string like this and then I simply put
06:58 - these quot a marks but inside I'm not
07:01 - going to put anything so this here is an
07:04 - empty string and if I say empty string.
07:08 - link and I start the program we should
07:10 - get zero and as you can see this string
07:13 - contains zero characters now let's talk
07:17 - about string concatenation so what is
07:20 - string concatenation it is just a fancy
07:23 - word that programmers use that means to
07:25 - combine two strings together so let's
07:28 - delete this this code that I have here
07:31 - and I'm going to show you how that works
07:32 - on an example so let's create a string
07:35 - variable let's call it name and here I
07:39 - will put for example John like this and
07:42 - then I will say console do right line
07:47 - and here I will say hello and then I
07:51 - will add plus symbol and I will add this
07:55 - name variable so now if I run the
07:58 - program what do you expect to get let me
08:01 - know in the comment section let's start
08:03 - the program let's see and we get hello
08:07 - John so these two strings have been
08:09 - concatenated which means they have been
08:11 - combined together so we see this output
08:15 - in our console okay so this part here is
08:19 - called string literal which means that
08:22 - it is a string that is not stored inside
08:24 - any variable it is hardcoded here and
08:28 - whatever we put here inside these
08:30 - quotation marks that is what we are
08:32 - going to get in the console and then
08:34 - this here is a string variable which
08:37 - means that whatever name we put inside
08:39 - these quotation marks for example Salina
08:42 - we will get that name printed in our
08:45 - console so now if I run the program as
08:48 - you can see now we get hello Salina okay
08:52 - so that also means that we can let our
08:55 - user to enter his name so I will delete
08:58 - the value for my string variable and I
09:01 - will say something like this
09:04 - console do
09:07 - readline so please read whatever the
09:11 - user writes in the console and store
09:14 - that inside this name variable so now if
09:18 - I run the program let's see what we are
09:19 - going to get so we have this prompt
09:21 - where we can enter text for example I
09:24 - will say code
09:25 - Beauty okay and if I press enter it is
09:29 - going to to respond with hello code
09:31 - Beauty okay so once more this is a
09:34 - string literal which means that this
09:37 - hardcoded text will be printed and then
09:40 - here we are adding more text that we
09:42 - want to print to the console and that is
09:45 - going to be whatever value is stored
09:48 - inside this variable here so whatever
09:51 - our user enters that will be
09:53 - concatenated to this hello word and that
09:57 - will be printed in the console okay now
10:00 - something interesting and important that
10:02 - I promise to explain is what happens if
10:05 - you have numbers inside string so let me
10:08 - show you an example I will delete this
10:10 - we don't need it and this part as well
10:13 - and here I will say inside a string two
10:17 - and then plus and here let's also add
10:20 - two like this okay so this is one
10:23 - example and then another example is 2 +
10:27 - 2 but without these double quotation
10:31 - marks so now my question for you is
10:33 - please pause the video and write me in
10:36 - the comment section what do you expect
10:38 - to be result of this line here and then
10:41 - what do you expect to be the result of
10:43 - this line here and also explain if these
10:47 - two are going to be different why do you
10:49 - think that they are going to be
10:50 - different or if they are going to be the
10:52 - same why do you think that they are
10:54 - going to be the same please pause the
10:56 - video and write that in the comment
10:57 - section so let's start the program let's
11:00 - see okay and as you can see this first
11:04 - line gives us the result of 22 and then
11:07 - this second line gives us the result of
11:10 - four so now the question is why do we
11:12 - get 22 here and then four here well the
11:16 - difference is how this plus operator
11:19 - behaves when it stands between two
11:22 - strings and when it stands between two
11:25 - integers or two floats doubles or any
11:27 - other numerical type
11:29 - so in this case here we have an integer
11:33 - and another integer and in that case
11:35 - plus is going to sum those two so we get
11:38 - four and then in this case here we have
11:41 - two strings so what plus operator is
11:44 - doing is it is simply concatenating
11:46 - those two strings so that is the reason
11:49 - why we see 22 here so if I say for
11:52 - example 3 + 2 4 and then here I also say
11:56 - 2 3 + 2 4 and I start the program as you
12:00 - can see here we get the sum and then
12:04 - here we just get concatenation so here
12:07 - these two strings are just combined
12:10 - together so that is the difference how
12:13 - this plus operator behaves when it is
12:15 - working with two strings versus when it
12:18 - is working with two integers so with two
12:21 - numerical types and this is one very
12:24 - important difference and one thing that
12:26 - is confusing for a lot of beginners and
12:28 - it is very important that you understand
12:30 - this Behavior so that you don't make a
12:32 - mistake as well now let me show you
12:34 - another way to concatenate strings so
12:37 - one way is with the help of this plus
12:40 - operator and another way is with the
12:43 - help of concat function so let's delete
12:47 - this code here and let's create two
12:49 - string variables let's say string first
12:53 - name and here I will say Sala that is my
12:56 - name okay and then let's also create
12:59 - create another string variable let's
13:00 - call it last
13:02 - name like this and here I will say Noak
13:06 - that is my last name so another way to
13:10 - concatenate these two strings as I said
13:12 - is with the help of concat function so
13:16 - let's say console. WR line and here I
13:20 - want to print these two strings together
13:23 - so once more the first way was with the
13:25 - help of plus operator so first name Plus
13:29 - last name like this and then another way
13:33 - is with the help of
13:36 - string do concat okay and then here you
13:41 - put all of the strings that you want to
13:43 - concatenate so all of the strings that
13:45 - you want to combine together so in our
13:48 - case those are first name and then I
13:52 - will add comma and then last name so if
13:56 - I print this line as you you can see we
13:59 - get Salina norak and if you want to add
14:02 - space between these two you can add here
14:06 - another string which is just going to be
14:09 - an empty space and if I start the
14:11 - program now as you can see these three
14:15 - strings have been concatenated so they
14:18 - have been combined together and the
14:20 - result of that is this output here so
14:23 - far I have demonstrated two ways to
14:26 - combine strings together the first way
14:28 - was with with the help of plus operator
14:31 - and then the second way was with the
14:33 - help of this concat function and both of
14:36 - these are okay they are perfectly fine
14:38 - to use but what most developers do is
14:41 - they use a third way which is called
14:44 - string interpolation and now I'm going
14:47 - to show you what is string interpolation
14:50 - so let's delete this we don't need it
14:52 - anymore and now let me show you what is
14:55 - string interpolation string
14:57 - interpolation is achieve D with the help
15:00 - of this dollar symbol so you say dollar
15:03 - symbol and then you open these quotation
15:06 - marks and here you are going to put your
15:09 - text your characters so let's say my
15:12 - name is and then something interesting
15:15 - is that you can use these curly brackets
15:18 - and inside them you can put your
15:21 - variables so my name is and then I'm
15:24 - using variable and this string
15:27 - interpolation is very e easy and common
15:30 - way to combine string literals which I
15:33 - have here and also variables but just
15:36 - remember it is very important that you
15:38 - put this dollar symbol and also that you
15:42 - put your variables inside these curly
15:45 - brackets so if I run this program as you
15:48 - can see we get my name is Salina but
15:51 - once more as I said it is very important
15:54 - that you put your variables inside curly
15:57 - brackets otherwise if I omit these curly
16:01 - brackets this entire string is just
16:03 - going to be string literal so we are
16:05 - going to get literally this text that we
16:08 - have here so my first name is first name
16:11 - okay so that is the first part don't
16:14 - forget these curly brackets and then
16:16 - also please don't forget this dollar
16:19 - symbol so if I forget dollar symbol
16:22 - again we get this string literal so we
16:25 - get literally whatever we have written
16:29 - inside this string so once more don't
16:31 - forget this string interpolation symbol
16:34 - which is dollar sign and also very
16:37 - important is that this dollar sign must
16:40 - stand in front of your string so before
16:42 - you open quotation marks for your string
16:45 - you put this dollar sign and everything
16:47 - is going to work without problems so now
16:50 - we can combine here text however we want
16:53 - so my name is and then first name and
16:56 - then I will add space and I will use
16:59 - this last name variable like this and I
17:03 - can also say and I am uh let's say 29
17:08 - years old and if I start the program as
17:12 - you can see we get my name is and then
17:14 - the value of first name the value of
17:16 - last name and then and I am 29 years old
17:20 - now something else that is interesting
17:22 - is that inside these curly brackets you
17:26 - can write even Expressions so here you
17:28 - can say for example I am let's say 10 +
17:32 - 19 and if I start the program again we
17:36 - get 209 because your compiler your
17:39 - computer is going to calculate this
17:41 - expression here and then when it gets to
17:44 - result it is going to print that result
17:47 - so here is an interesting example for
17:49 - you to exercise your brain so if you say
17:52 - for example string interpolation and
17:55 - then inside this string you say 2 + 2 is
17:58 - is equal to and then here you say 2 + 2
18:02 - but inside these curly brackets what do
18:05 - you expect to get please pause the video
18:08 - write me the answer in the comment
18:09 - section and then you can start the
18:11 - program and see the result okay so if I
18:14 - start the program we get 2 + 2 is equal
18:18 - 2 and then we get four and the reason
18:21 - for that is once more this part here is
18:24 - a string literal which means that it
18:27 - will be written literally
18:29 - like we have it here and then this part
18:32 - inside these curly brackets is an
18:34 - expression which means that it will be
18:37 - calculated first and the result of the
18:40 - expression will be written in the
18:42 - console so that is the reason why we get
18:45 - 2 + 2 is equal 2 and then the result of
18:48 - the calculation so if that was your
18:50 - answer then you understand this well
18:54 - congratulations now let me show you
18:56 - something else let's say that we want to
18:57 - have some long text so let's delete this
19:01 - and let's create a string variable
19:03 - called my text and inside it I will put
19:07 - some longer text let's say for example
19:09 - hello my name is Salina I teach
19:11 - programming at code Beauty Academy okay
19:15 - so if I print this text here this is the
19:20 - value that we are going to get so now my
19:23 - idea is I want to have this sentence in
19:26 - one line and then I want to have this
19:28 - sentence in the next line and then this
19:31 - sentence in third line so how can we
19:34 - achieve that well let's see so if I do
19:37 - something like this let's see what we
19:39 - are going to get so we have hello and
19:42 - then I will put this inside another
19:44 - string literal and I will put plus
19:47 - between these two and I will put this
19:49 - second string literal inside another
19:51 - line and then let's close this quotation
19:55 - mark here and let's create another
19:57 - string literal and again I will put plus
19:59 - sign here and I will put this third
20:02 - sentence inside third line so now if I
20:05 - start the program let me know what do
20:07 - you expect do you expect these three
20:10 - sentences to be in three different lines
20:13 - or not and why so let me know in the
20:15 - comment section and then you can watch
20:17 - my solution and explanation so let's
20:20 - start the program and the result is
20:23 - quite disappointing we did not achieve
20:26 - what we wanted because this text is
20:28 - still
20:29 - together and the reason for that is
20:31 - because that is how this plus operator
20:34 - works that is how concatenation works
20:37 - and it does not care if you have one new
20:40 - line between these two or if you have
20:42 - two or three or however many you want to
20:45 - put there still if I start the program
20:49 - this text is going to be together so in
20:52 - order to solve this problem we need to
20:55 - find a new approach a better approach
20:58 - and and that is with the help of Escape
21:01 - characters so now your question is what
21:04 - are Escape characters and those are like
21:07 - special commands that we can use in
21:09 - different situations for example one
21:12 - command that we have is this command
21:15 - here so back slash n and that means
21:19 - please add new line here so if I start
21:22 - the program as you can see we have hello
21:25 - and then new line and then we have this
21:27 - remaining text so if I add this new line
21:31 - here as well so back sln and I start the
21:34 - program again as you can see now these
21:38 - three sentences have been separated into
21:41 - different lines so hello and then new
21:43 - line and then my name is Salina and then
21:46 - new line and then I teach programming at
21:49 - code Beauty
21:51 - academy.com okay so once more Escape
21:54 - characters are like special commands and
21:57 - an example is this Escape character here
22:00 - so back sln and that is going to add a
22:04 - new line after this text here and that
22:08 - also means that now I can even omit
22:11 - these plus symbols because they don't
22:13 - really do anything so even if I write
22:16 - something like this so I say hello and
22:20 - then back slash n and then I have this
22:22 - text here and then again back sln and I
22:26 - delete this plus symbol
22:29 - and I also write all of this together
22:31 - like this and if I start the program we
22:34 - are still going to get the same result
22:37 - so hello and then new line my name is
22:40 - Salina again new line I teach
22:42 - programming at
22:44 - www.code Beauty
22:46 - academy.com and if you're wondering what
22:49 - kind of programming you can learn in my
22:50 - Academy you can learn practical
22:52 - programming you can work on real
22:54 - projects and Gain real experience and
22:57 - throughout that entire process you are
22:58 - going to get my help and my mentorship
23:00 - so that you can start your career as
23:03 - soon as possible and start earning money
23:05 - as soon as possible I'm going to leave
23:07 - more details in the description I will
23:10 - also leave a link that you can use in
23:12 - order to get a special discount that we
23:14 - currently have in case that you decide
23:16 - to join code Beauty Academy now while we
23:19 - are at the topic of Escape characters
23:21 - let me show you another Escape character
23:23 - so we already said that this one back
23:26 - sln is used in order to add a new line
23:29 - but let's use another one let's say la
23:32 - la and then I will say back SLT and
23:35 - again la la so if I start the program as
23:39 - you can see this Escape character is
23:41 - just going to add one tab difference
23:44 - between these two strings so that is
23:47 - what this Escape character here means so
23:50 - back SLT is just going to add one tab
23:53 - space between this word here and this
23:56 - word here and you probably probably
23:58 - already figured out that this back slash
24:01 - symbol has some sort of a special power
24:05 - so what happens if I do something like
24:07 - this if I say this is text with and then
24:13 - I add back slash so if I start the
24:16 - program what do you expect to get let me
24:19 - know in the comment section so let's
24:21 - start the program and as you can see
24:23 - immediately we get an error and the
24:26 - reason for that is because indeed this
24:30 - backlash symbol has a special power and
24:33 - it is not possible to use it like this
24:35 - so if you want to write backslash to
24:38 - your console you will need to add
24:40 - another backslash so now if I run the
24:43 - program as you can see it says this is
24:46 - text with backslash and here we get just
24:49 - one backslash because remember this
24:52 - backslash is a special character that is
24:55 - used in order to use Escape commands
24:58 - like adding new line or adding tab space
25:02 - between text so if you want to print
25:05 - backs slash itself you will need to put
25:07 - it twice so back slash and then backs
25:10 - slash again so now you know how to write
25:13 - text in multiple lines and how to add
25:16 - new lines between your sentences so we
25:19 - use Escape characters for that back sln
25:22 - in order to add a new line so that is
25:25 - one way and it is perfectly okay to use
25:28 - Escape characters but now I'm going to
25:31 - show you something that um experience
25:33 - developers prefer to use and a better
25:36 - way to write multi-line text and that is
25:39 - called verbatim sign so what is verbatim
25:44 - sign so verbatim is represented with
25:47 - this at character so you put at in front
25:51 - of your string and now what you can do
25:54 - is you can write multi-line text so you
25:57 - can say for example ex my name is
26:01 - Salina and then I will add a new line
26:04 - and here let's say I've been coding
26:08 - since
26:10 - 2013 and let's add another line let's
26:13 - say I love teaching other people to code
26:16 - and let's say also I have two cats very
26:22 - relevant so now if I start this program
26:25 - because we have used this verbatim sign
26:28 - our text should be in this exact format
26:32 - here so if I start the program as you
26:35 - can see we have the first sentence here
26:38 - and then the second sentence is in the
26:40 - new line third also in the new line and
26:42 - then fourth sentence also in the new
26:45 - line and that is what this verbatim sign
26:49 - allows us to do so you don't have to use
26:51 - any Escape characters and if you want to
26:54 - write multi-line text you simply put an
26:57 - enter and and another enter and let's
26:59 - say another enter here and when you
27:01 - start the program your text is going to
27:04 - be formatted without any Escape
27:07 - characters okay and what is even cooler
27:11 - is that you can combine this verbatim
27:13 - sign with string interpolation remember
27:17 - what string interpolation was it was
27:19 - that dollar character which we can use
27:22 - in order to write expressions or use
27:25 - variables inside our strings so here I
27:29 - can say now I have two cats and if I get
27:33 - one more I will have and here inside
27:38 - these curly brackets I can say 2 + 1 so
27:42 - if I start the program as you can see
27:45 - here it says I will have three so now I
27:48 - have a question for you and that is why
27:51 - do we get three here no actually I'm
27:54 - kidding that's not the question I
27:56 - already explained that when we were
27:57 - talking about string interpolation the
28:00 - question for you is should I get another
28:04 - cat nobody's going to know they're going
28:05 - to
28:07 - know how would they know so I believe
28:10 - that is enough for this video you
28:11 - learned a lot about working with strings
28:14 - but there is a lot more that you should
28:16 - also know I will leave that for the next
28:18 - video where you are going to learn about
28:21 - uh comparing strings different methods
28:22 - that are important when it comes to
28:24 - working with strings such as searching
28:26 - replacing splitting
28:28 - and so on so we are going to cover all
28:31 - of those topics in the next video which
28:33 - will be linked here and also in the
28:36 - description and also if you like my
28:38 - teaching style and if you learn useful
28:40 - things from my YouTube videos then
28:42 - definitely you should join my practical
28:44 - programming course uh where I can take
28:47 - you from beginner to expert in
28:48 - programming it is better than anything
28:51 - that I have here on YouTube you will get
28:53 - the opportunity to work on real projects
28:55 - and Gain real experience collaborate
28:57 - with other developers and throughout the
29:00 - entire process you will have my help so
29:02 - that you can start your career and learn
29:05 - programming as soon as possible
29:07 - currently we have a special discount
29:09 - which you can get using the link in the
29:11 - description and if for any reason you
29:14 - don't like the course we have a 7-Day
29:16 - refund policy so uh you can get all of
29:19 - your money back no questions asked so
29:22 - now instead of coming up with excuses
29:24 - use the discount code from the
29:26 - description and start learning learning
29:28 - programming because it can truly change
29:31 - your entire life so thank you very much
29:33 - for watching and I will see you in the
29:35 - next video bye