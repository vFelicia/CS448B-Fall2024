00:00 - hi guys and welcome to my channel this
00:02 - video is part of the series where we
00:04 - learn about arrays of objects and in
00:07 - this particular part we are going to
00:09 - talk about Dynamic arrays of objects so
00:11 - in this video you will learn about
00:14 - dynamic memory and arrays of objects so
00:17 - these are the topics that we are going
00:19 - to cover in today's video so we will
00:21 - talk about difference between static and
00:24 - dynamic arrays we are going to talk
00:26 - about how you can allocate memory for
00:28 - dynamic arrays and de-allocate memory
00:30 - that you've been using for your Dynamic
00:32 - arrays also I will show you a real world
00:35 - example of how you can work with Dynamic
00:38 - arrays of objects and what are the
00:42 - benefits of using them and then we will
00:44 - see some of the most common errors that
00:47 - happen especially to beginners but even
00:50 - to experience developers and then at the
00:52 - end I have a task for you that you can
00:54 - use in order to practice so that you can
00:57 - expand your knowledge on your own and
00:59 - before we start with the video as many
01:01 - of you already know for the past year
01:03 - over a year I've been working on a
01:06 - practical programming course that is
01:08 - going to teach you how to think as a
01:10 - software engineer and help you build
01:12 - strong in-depth understanding of
01:14 - programming regardless of the language
01:16 - technology or type of application that
01:19 - you want to use in the future this is
01:21 - going to be a complete Journey from
01:23 - beginner to expert and I'm going to be
01:26 - your Mentor I will guide you step by
01:28 - step and systematically through the
01:29 - entire process until you become an
01:31 - expert in programming and if you learn
01:33 - everything that I will teach you in this
01:35 - course it is guaranteed that you will
01:37 - get a better job as a software developer
01:39 - or your first job as a software
01:40 - developer if you don't already have one
01:42 - because in this course we are going to
01:44 - solve so many real world problems with
01:47 - code and I will pass on you all of the
01:49 - experience that I have acquired in the
01:51 - past 10 years since I started coding so
01:54 - from my first day of University up to
01:56 - this point after you finish this course
01:58 - you will continue learning learning
02:00 - because if you truly want to be the best
02:02 - and stay the best then you will never
02:05 - stop learning in this career but you
02:07 - will be able to do it on your own so you
02:09 - will be able to continue expanding your
02:11 - knowledge on your own in any direction
02:13 - that you want also since this community
02:16 - means a lot to me and because you have
02:18 - been supporting me for a long time I
02:20 - feel like you deserve a special discount
02:22 - when compared to other people so I will
02:25 - have a link in the description that you
02:26 - can use to sign up and I will send you a
02:29 - special discount once the course
02:30 - launches but make sure to do it right
02:32 - now because the number of people that
02:34 - can get this discount is limited so if
02:36 - you are interested use the link in the
02:38 - description and sign up right now so
02:41 - with that being said let's continue with
02:43 - our today's video
02:45 - so here I have a class called student
02:47 - and here are the properties of students
02:50 - so we will have name age gender and
02:52 - programming grade and all of these
02:55 - properties are public so that they are
02:57 - accessible outside of this class and
03:01 - also make sure to put semicolon at the
03:03 - end because otherwise you are going to
03:05 - have an error so this is the object that
03:08 - we are going to use for this video we
03:09 - are going to create Dynamic arrays of
03:11 - students so with that being said let's
03:14 - first create a static array of students
03:17 - and then we are going to see the
03:18 - difference between static and dynamic
03:20 - and you will see when the need for
03:23 - dynamic arrays of object arises and why
03:27 - do we even have them so to create a
03:30 - static array of objects you simply put
03:32 - the type so I say student and then give
03:35 - the name to my array let's say students
03:39 - and here I will Define the size of my
03:42 - array let's say three so with this I
03:46 - have created an array that will have
03:48 - three elements and it is array of
03:51 - students so it will have three students
03:53 - and it is called students okay so with
03:57 - this we can enter only three students in
04:00 - this array but what happens if we are
04:03 - building an application for let's say
04:05 - for teachers and not every teacher has
04:07 - the same number of students some have
04:09 - five some have 500 so what is going to
04:12 - happen if every teacher wants to enter
04:14 - the number of students that he has we
04:18 - cannot always hard code the number of
04:20 - elements that our array is going to have
04:23 - so for that situation we need to
04:26 - understand what our Dynamic arrays so
04:29 - now let's see how we could let our user
04:33 - Define this number of elements for our
04:36 - array so we will do something like this
04:38 - probably we would say int size
04:41 - and then we would say C out for example
04:45 - enter size
04:47 - okay and then see in
04:50 - size actually it's better here to say
04:54 - um
04:54 - number of students that is more user
04:58 - friendly okay so now that we have
05:01 - allowed our user to enter the size for
05:03 - our ra we would do something like this
05:05 - so instead of creating array of three
05:08 - students we would create an array but
05:10 - this is going to be its size but
05:13 - as you can see here we have a problem
05:16 - immediately we have an error here and
05:18 - that error says expression must have a
05:22 - constant value so size must be constant
05:25 - that means that if we want to do it like
05:28 - this if we want to set the size through
05:31 - a variable that variable needs to be a
05:34 - constant so a constant variable or a
05:36 - constant number like we previously had
05:38 - so that means this
05:41 - but in this situation we are not able to
05:45 - enter the size for a variable that is
05:47 - constant and we have here a lot of
05:50 - Errors so now let's see how would we be
05:53 - able to do something like this with
05:55 - Dynamic arrays so let me delete this
05:58 - const and here I will simply create a
06:00 - variable of type in to call it size and
06:03 - I will allow my user to enter the size
06:05 - but here instead of creating an array
06:07 - like this which is static array instead
06:09 - of doing that I want to create a dynamic
06:11 - array so here I will say that I want to
06:14 - have a pointer to student and then that
06:18 - pointer is going to point to new
06:21 - array of students that will have this
06:25 - many elements like this so this is how
06:28 - you can create a dynamic array you set
06:32 - the type for your Dynamic array and then
06:34 - you see that it is going to be a pointer
06:36 - and then you give the name to your array
06:38 - and then you say this pointer is going
06:41 - to point to the new array that has this
06:44 - many elements and it is going to be an
06:46 - array that stores students so what this
06:49 - code here does is it allocates new
06:51 - memory for your array but it does that
06:54 - in dynamic memory and that brings us to
06:57 - the main difference between static
06:58 - arrays and dynamic arrays so static
07:02 - arrays allocate their memory in compile
07:05 - time that means before you even start
07:07 - your application they allocate memory
07:09 - for them because of that the application
07:12 - may run a little bit faster because it
07:14 - is not allocating memory while it's
07:16 - running but at the same time the
07:19 - downside is that the efficiency of how
07:22 - you use that memory is not the greatest
07:24 - because in that situation you might have
07:26 - an array that is too big or too small
07:28 - meaning you might have an array that is
07:30 - half empty or you might have an array
07:33 - that is already full and you want to add
07:35 - new elements but you can't because you
07:37 - cannot change the size of static array
07:39 - during runtime of your application so
07:41 - you would literally have to turn off
07:44 - your application and then change the
07:45 - size and then start it again which is
07:47 - not possible in production
07:49 - so that is about static arrays on the
07:52 - other hand Dynamic arrays allocate
07:55 - memory in runtime that means while your
07:58 - application is running you can allocate
08:00 - new memory for your array which means
08:01 - that you can make your array either
08:03 - bigger or smaller while the user is
08:07 - using your application that means that
08:09 - your application is going to be a little
08:11 - bit slower because it's allocating
08:13 - memory during runtime but at the same
08:16 - time the efficiency of how you use that
08:18 - memory is going to be bigger because you
08:20 - will allow to your user to Define how
08:22 - big of an array he wants so if he needs
08:25 - to store more elements you will allocate
08:26 - bigger array and if he needs to store
08:28 - just a small number of elements you will
08:31 - allocate a smaller array so you will not
08:34 - have a situation where half of your
08:35 - array is empty or you cannot make it
08:37 - bigger but you need to add new elements
08:39 - so that is the main difference between
08:41 - static and dynamic arrays
08:44 - and before we continue any further one
08:47 - very very extremely important thing is
08:51 - whenever you are allocating new dynamic
08:54 - memory you have to de-allocate that
08:57 - memory as well you yourself are
08:59 - responsible for freeing that memory so
09:02 - what does that mean well dynamic memory
09:05 - is memory that is used by all of your
09:07 - applications if you currently have five
09:08 - applications that are running all of
09:10 - them are using that memory and as you
09:12 - already know you have a limited amount
09:15 - of memory so if you keep allocating or
09:19 - taking new memory by your application
09:21 - and you forget or you don't know how to
09:23 - de-allocate it which means free it or
09:27 - give it to your operating system so that
09:29 - it it can assign it to some other
09:30 - application to use then you will run out
09:33 - of your dynamic memory so it is
09:36 - extremely important that whenever you
09:39 - have new which means allocate new memory
09:42 - you need to have delete that will do
09:44 - allocate that memory so let's see how to
09:47 - do that
09:48 - here we have allocated a new array that
09:52 - has this size it's called students so
09:55 - that means that we need to delete
09:58 - students at the end of our program so
10:01 - before this last line of our program we
10:05 - will need to deallocate that memory we
10:07 - will basically tell to our operating
10:08 - system hey I use this student's array
10:12 - but now I'm stopping the application is
10:14 - stopping so I don't need this memory
10:15 - anymore so please free it and give it to
10:17 - some other application that needs it so
10:19 - that is the way to deallocate but here I
10:23 - have made a big mistake purposefully
10:26 - because this is very common mistake that
10:28 - most beginners make and that is the
10:30 - following
10:31 - here I have allocated a new array that
10:35 - has this size but here I am just
10:38 - deleting a pointer to students so what
10:42 - does this mean let me show you on Excel
10:46 - so when I created this array of students
10:49 - I basically said hey
10:51 - there is this variable called students
10:54 - and this variable called students is
10:56 - going to allocate an array in dynamic
10:58 - memory let's say array that has
11:01 - four elements okay and these are going
11:06 - to be addresses so zero zero one one a a
11:09 - and then let's say zero zero one one b b
11:13 - and let's copy this so here I will set
11:17 - have CC and then here I will have DD
11:21 - okay so this is my array that I
11:23 - allocated in dynamic memory and here I
11:25 - will store let's say student one and
11:29 - then student two three and four and this
11:34 - pointer called students which points to
11:36 - my array it just holds the address of my
11:39 - array and as we already learned in
11:42 - previous videos the address of the array
11:44 - is the address of its first element okay
11:47 - so this is basically what we have done
11:50 - in this line of code here where we have
11:52 - allocated new array but here when we are
11:55 - deleting students we are just deleting
11:58 - this part so we are not actually
12:00 - deleting this entire array that is
12:02 - taking in our dynamic memory so when
12:05 - your application stops it is just going
12:08 - to delete this and this will still stay
12:10 - in your dynamic memory this memory will
12:13 - still be used and your operating system
12:15 - will not be able to reuse it so what you
12:18 - should do instead is you should delete
12:21 - this entire array so you should say here
12:24 - please delete array of students like
12:28 - this there are many tools that you can
12:30 - use in order to analyze your code and to
12:32 - tell you if you have any memory leaks
12:34 - like we just demonstrated so that you
12:37 - don't have to think about it all the
12:38 - time yourself one of them that I really
12:41 - love to use is called PBS Studio I used
12:44 - to work with them and I used to have a
12:45 - link where you could download it for
12:47 - free as a student I'm going to check if
12:49 - that link still works and if it does I
12:51 - am going to put it in the description so
12:52 - that you can try it out it's a code
12:54 - analyzer that will run through your code
12:57 - analyze it and it will tell you if you
12:58 - have any errors or memory leaks and
13:01 - things like that so if that link still
13:03 - works I am going to put it in the
13:05 - description
13:06 - so now that we have created an array
13:08 - here we have allocated memory for it and
13:10 - then here we have D allocated or deleted
13:12 - memory that our array was using here in
13:16 - between we are going to write some code
13:18 - to work with this array so what I want
13:20 - to do is I want to allow my user to
13:23 - enter all the data for my array so I
13:25 - want him I want to allow him to enter
13:27 - students that we will store into this
13:29 - array and in the previous video which I
13:33 - will link in the description we talked
13:34 - about using Loops in order to access
13:37 - elements of the array and to enter
13:40 - elements so make sure to watch that
13:41 - video If you're not familiar with that
13:43 - because that is exactly what we are
13:45 - going to do right now so here
13:47 - I will write for Loop and inside this
13:51 - for Loop I'll say int I is equal to zero
13:54 - so we start at the first element and
13:57 - then we say I is less than the size that
14:01 - our user has entered here and then I
14:05 - plus plus so here we are going to
14:07 - iterate through every single element of
14:10 - our array however many our users decided
14:13 - that he wants and then here inside this
14:16 - for loop I will enter every single
14:18 - element so here I will say C out and
14:21 - let's say
14:22 - student
14:23 - of I
14:25 - like this
14:27 - and then here I will create
14:30 - a student I will call it s and here I
14:34 - will say C out and then let's say please
14:36 - enter name like this and then user will
14:40 - enter
14:42 - student dot name like this and then
14:45 - let's do this same for age gender and
14:49 - programming grade
14:51 - okay so name and then
14:54 - age
14:56 - and put it here and then here gender and
15:00 - also put it here and here I need
15:03 - programming grade and I will write
15:05 - message to my user like this so we have
15:09 - created a student and then we have
15:11 - entered all of the values for its
15:13 - properties and now we are going to put
15:16 - that student in our array I will say
15:19 - students array of I is equal to the
15:23 - student that our user just has entered
15:27 - so with this we will be able to enter as
15:31 - many students as our user defines here
15:33 - so if I start the program
15:36 - here it asks for the number of students
15:39 - let's say three students the name of
15:42 - student zero this should be student one
15:43 - so here you can change it to it it says
15:45 - student I plus one we are going to do
15:48 - that after I stop the application so
15:50 - student zero it's his name or her name
15:52 - will be Saldana
15:54 - okay and then age will be let's say 28
15:59 - gender female programming grade let's
16:02 - say nine
16:04 - and then student one let's say Mark Mark
16:07 - Zuckerberg age will be maybe 35 I don't
16:10 - know uh gender is male and programming
16:12 - grade is 10 and then student two or
16:15 - actually student three will be let's say
16:18 - Bill
16:20 - and then age is 60 gender is male and
16:23 - programming grade is
16:25 - 8.5 okay
16:28 - and as you can see here we have entered
16:31 - one
16:32 - two and three students which is the
16:35 - number that we have defined up front and
16:38 - we have allocated the memory for these
16:40 - students during the runtime of our
16:42 - application so now I want to show you
16:44 - the relationship between Dynamic arrays
16:46 - and functions to be more specific I want
16:48 - to show you how you can pass a dynamic
16:50 - array into a function for example we are
16:53 - going to build a function to print all
16:57 - of our students to print our Dynamic
16:58 - array of students so let's do that next
17:01 - so let's create a function called print
17:03 - students here I will say void print
17:08 - students
17:11 - okay so this is going to be our function
17:13 - it is going to be of return type void
17:15 - and here we need to pass two arguments
17:18 - to our function two parameters the first
17:20 - one is going to be the address of the
17:22 - first element of the array so that we
17:24 - know where does our array start so that
17:27 - will be pointer of type student
17:32 - okay and I will call that pointer
17:34 - students because it will be pointer to
17:36 - our array
17:39 - like this and then the second parameter
17:42 - will be size of the array why well
17:45 - because here we are passing the address
17:47 - of the array and the address of the
17:50 - array is the address of its first
17:52 - element so in order to know how many
17:54 - elements after that first our array
17:58 - contains we need to know the size of the
18:00 - array okay so these are two parameters
18:03 - that the function will receive and then
18:05 - here inside the function we are going to
18:07 - print information about every student so
18:09 - here I will say for INT I is equal to
18:14 - zero so so start at the first element
18:16 - the one that has index 0 because
18:18 - indexation of the array starts with zero
18:21 - and then go until I is less than size of
18:25 - the array and in each iteration increase
18:28 - I by One and here I will print the
18:31 - details of each student so I will say C
18:34 - out and then let's say
18:36 - student let's say student of I plus one
18:39 - because even though indexation of arrays
18:42 - starts with zero for us Developers for
18:44 - any normal user he wants to see counting
18:47 - start with one so for him it will be
18:49 - student one and two and three and for us
18:51 - it will be student of zero and student
18:53 - of 1 and student of two and so on so
18:56 - because of that I am trying to make this
18:58 - more user friendly by adding one here
19:01 - after that let's add couple of spaces or
19:04 - one tab like this and then let's print
19:07 - all of the details about our students
19:09 - let's say see out students
19:12 - f i
19:14 - dot name and then let's add
19:18 - tab as well here and then I will do the
19:21 - same thing for age and then
19:26 - gender and here will be programming
19:28 - grade and then at the end after I print
19:30 - an entire student I will put a new line
19:33 - instead of tab okay so now let's invoke
19:37 - this function here I will say print
19:40 - students
19:42 - it receives pointer to your students
19:45 - array that will be this okay so the name
19:49 - of the array is the address of the first
19:51 - element and the address of the first
19:53 - element is at the same time the address
19:55 - of the entire array that is the first
19:58 - parameter that we are passing here and
20:00 - then the second parameter will be the
20:02 - size that our user has defined here so
20:06 - the size of our array okay so let's
20:09 - start the program and let's see if we
20:11 - did everything correctly okay so please
20:13 - define number of students let's say
20:14 - three students I will fast forward this
20:17 - part
20:19 - foreign
20:25 - okay and as you can see here we have the
20:28 - info about all of our students so we
20:31 - decided to create Dynamic array of three
20:34 - students we entered information for
20:35 - three students and here we tested how
20:38 - this print students function works and
20:42 - here you could see example of how to use
20:44 - functions with Dynamic arrays of objects
20:47 - and one thing that is not very user
20:50 - friendly is this part here it says
20:52 - student zero and then student one and
20:54 - student two so we should do the same
20:56 - that we did here so we should start at
20:58 - student one for our user at least so I
21:01 - am going to modify this part of the code
21:04 - when our user is entering students here
21:06 - I will say I plus one so let's close our
21:09 - application and now I want to show you
21:11 - something else so as we already learned
21:14 - the main advantage of dynamic arrays
21:16 - over static arrays is that you can
21:19 - Define their size at runtime and that
21:21 - also means that you can change their
21:23 - size at runtime which means you can make
21:25 - them bigger or smaller but that is not
21:29 - maybe as simple as you imagine it if you
21:31 - never worked with Dynamic arrays before
21:33 - so now I'm going to show you how we can
21:35 - make a bigger array of students than our
21:37 - user initially defined so here I will
21:41 - say for example let's ask our user first
21:44 - if he wants a bigger array so I will say
21:46 - char
21:48 - choice
21:50 - okay and I will say C out do you want a
21:56 - bigger array okay and then see in
22:01 - choice so if
22:04 - choice is equal to n
22:07 - or choice is equal to capital letter N
22:12 - that means that our user does not want a
22:14 - bigger array so here I will simply say
22:16 - return 0 which means that here I will
22:20 - end my program but before doing that
22:23 - I need to delete
22:26 - this existing array of students so
22:29 - deleting our existing array of students
22:31 - and then our application will stop here
22:33 - so here I have deleted or deallocated
22:35 - all of the memory that our application
22:37 - has been using so far and here I will
22:39 - simply stop my application so that is if
22:42 - user's choice is n or capital letter N
22:45 - but if user enters anything else then I
22:48 - will proceed and create a bigger array
22:51 - with the new size that user defines okay
22:54 - so let's say int new size and here I
22:58 - will ask him see out
23:01 - enter new size
23:03 - okay
23:05 - see in
23:06 - new size like this so now the question
23:09 - is how we can make this array of
23:13 - students bigger and this is actually
23:15 - very tricky question so let's first open
23:18 - Excel and here I will explain to you
23:21 - everything that needs to happen all of
23:23 - the steps and then we will translate all
23:25 - of those steps into our code so so far
23:28 - we had an array of students and let's
23:30 - say that we had array of two students so
23:32 - student one and student two this is
23:35 - going to be all of their data and those
23:37 - two elements were stored one after the
23:39 - other in memory and each of them has its
23:42 - own memory location so the first one
23:45 - zero zero one one a a and then zero zero
23:47 - one one BB and our students pointer is
23:50 - pointing to the first element of our
23:53 - array which is zero zero one one a a so
23:57 - that is everything that your students
23:58 - pointer is holding just the address of
24:01 - the first element now
24:03 - how can we add more elements to this
24:06 - array well actually we will have to
24:09 - create a new array so let's create new
24:13 - students and that array should be big
24:16 - enough so that we can store all of the
24:19 - existing elements and then all of the
24:21 - new elements that we want to add so
24:23 - let's say that we want to store four
24:25 - elements in total here I will allocate
24:28 - space for four elements like this and
24:31 - here will be the addresses of these four
24:33 - elements so this is another consecutive
24:36 - block of memory so another four elements
24:38 - that are stored one after the other in
24:40 - memory and these are their addresses and
24:44 - then what we need to do now is we need
24:46 - to copy all of the elements from our old
24:49 - array paste them into our new array and
24:52 - then we have this remaining space to add
24:55 - more elements so here I can add student
24:57 - three and then student four so that is
25:01 - how you expand your students array you
25:03 - basically create a new array and then
25:05 - you copy old array and then you have
25:08 - remaining space left to add new elements
25:10 - now this is not all
25:12 - another thing that we need to do is now
25:15 - that I have copied this old array into
25:17 - my new array what I need to do is I need
25:20 - to de-allocate this memory so I need to
25:23 - delete this array here and then another
25:27 - thing that we need to do and that we
25:29 - want to do is since this student is now
25:31 - pointing to zero zero one one a a which
25:34 - was our previous array that is now
25:36 - deallocated it does not belong to us any
25:39 - longer now we need to say hey students
25:43 - array now you are going to point to the
25:45 - new array and that is going to be this
25:47 - address here so that is how you expand
25:51 - your array basically you create a new
25:53 - array that is bigger and then you copy
25:55 - all of the elements from your old array
25:57 - into the new array and you have that
25:59 - remaining empty space so that you can
26:01 - add new elements and then after you have
26:04 - done that you need to de-allocate or
26:07 - free the memory that your old array was
26:10 - using because you don't want to keep it
26:11 - any longer than it's Siri so that
26:14 - operating system can take it and give it
26:15 - to some other application to reuse so
26:17 - after you have deallocated that memory
26:20 - that memory does not belong to your
26:22 - application anymore so you should not
26:24 - keep addresses of the memory that does
26:27 - not belong to you so at that point you
26:29 - change the address that your students
26:32 - variable student's pointer is holding so
26:34 - that it points to your new array okay so
26:38 - now let's translate these steps into
26:40 - code
26:41 - so now immediately after our user
26:44 - defines the size of the new array what
26:47 - we are going to do is we are going to
26:48 - create that new array we are going to
26:50 - allocate memory for it but before we do
26:52 - that I just want to give you a small
26:54 - reminder and that is here user can enter
26:57 - a negative number or a letter or
26:59 - anything that he wants we don't have any
27:01 - sort of validation or exception handling
27:03 - because if the user enters a negative
27:05 - number here or a letter you are going to
27:07 - get an exception a bug in your program
27:09 - so if you don't know how to handle that
27:12 - make sure to watch the video that I will
27:14 - link here and also I will put it in the
27:16 - description it's about exception
27:18 - handling and we are not going to do that
27:20 - in this video because I don't want it to
27:22 - be uh too long but make sure that when
27:26 - you are testing that you enter valid
27:28 - numbers here that make sense and then if
27:30 - you are going to give this to someone
27:31 - else then make sure to prevent any
27:33 - possible exceptions that can happen in
27:35 - this entire program okay so here I will
27:39 - suppose that user will enter a value
27:41 - number new size that is bigger than the
27:44 - size of our old array so after he enters
27:47 - the new size for our array here I will
27:50 - create a new array that has that size so
27:52 - I will say
27:53 - student pointer I will call it new
27:57 - students
27:58 - okay so I am creating a pointer to my
28:01 - new array and here I will say that I
28:04 - want to allocate a new array of students
28:07 - that has this many elements like this
28:12 - okay so with this we have allocated
28:14 - memory for the new array now the next
28:17 - step is to copy elements from our old
28:19 - array into this new array and there are
28:22 - two ways to do that and I am going to
28:25 - show you both so the first way to copy
28:27 - elements from our old array into our new
28:29 - array is with the help of function that
28:31 - is called mem copy so let's invoke it
28:34 - let's say mem c p y like this okay and
28:40 - this function receives three parameters
28:43 - the first one is the destination array
28:45 - so the bigger array in our case the
28:47 - array where we want to copy elements to
28:49 - the second parameter is going to be the
28:52 - old array the array that we want to use
28:54 - to copy elements from and then the third
28:57 - is the size so so the first is
29:00 - destination
29:02 - where we want to store elements and then
29:05 - the second is our old array
29:08 - like this and then the size is the
29:12 - amount of memory that we want to copy
29:14 - because this function here it basically
29:16 - copies memory so what is going to be the
29:19 - size of memory that we want to copy well
29:21 - we can get the size by multiplying the
29:24 - size of the array with the size of one
29:26 - element so we can get size of one
29:29 - element by using size of operator and
29:33 - considering the fact that the element of
29:35 - our array is student then we can say
29:38 - size of student and then multiply that
29:41 - by the size of our old array okay so
29:45 - this is how you use mem copy function
29:47 - again it receives three parameters the
29:50 - first one is destination array so that
29:52 - is our new array the second one is old
29:55 - array so the one where we want to copy
29:58 - elements from and then third is size of
30:02 - memory that you want to copy and you get
30:04 - the size by multiplying the size of one
30:06 - element by the number of elements that
30:08 - the array has so size of one student
30:11 - multiplied the number of students that
30:13 - the old array contains and this is one
30:17 - way to copy elements from the old array
30:19 - into the new array now later I will show
30:22 - you why this may cause problems and now
30:26 - I will show you the second approach so
30:28 - let's comment this code and let's see
30:30 - what is the second approach so the
30:33 - second approach is to copy all of the
30:35 - elements manually that means that you
30:37 - would use a loop in order to iterate
30:39 - through all of the elements and you
30:41 - would take each element from the old
30:43 - array and then copy it to your new array
30:45 - and do that for every single element so
30:47 - let's do that approach now so I will say
30:49 - four inch I is equal to zero and then I
30:53 - is less than size this is the size of
30:56 - our old array because that is the one
30:57 - that we are copying and then I plus plus
31:01 - okay so here I will say that my new
31:04 - students array
31:05 - of I will be equal to students array
31:10 - this is our old array of I so basically
31:13 - what this function will do is it will
31:16 - iterate through all of the elements of
31:18 - our old array and it will take each
31:21 - element and copy it to the appropriate
31:23 - position into our new array
31:26 - so now the remaining steps are to delete
31:30 - our old array of students and then to
31:34 - make our students pointer which we have
31:38 - declared it as pointer as you can see
31:39 - here now we should make it point to the
31:42 - same address that our new student's
31:45 - pointer is pointing to okay so these are
31:48 - two very important steps at the end so
31:51 - now that we have expanded our array that
31:53 - means that we can enter more elements so
31:55 - let's do that let's copy this code here
32:00 - this was code that we used to enter
32:03 - elements into our students array and
32:05 - then we are going to adjust it a little
32:07 - bit so here we started entering elements
32:10 - from zero up to the size of the array so
32:14 - this was the counter of the old array
32:16 - the counter of elements but in this
32:18 - situation what we should do is we should
32:20 - start at the size of our old array
32:24 - because we already have those elements
32:25 - inside our new array we we have copied
32:28 - them and then we should go to the new
32:32 - size so we should enter elements only in
32:34 - those remaining free spaces of our new
32:38 - array okay and here I'm creating a new
32:41 - student I'm allowing my user to enter
32:44 - all of the data for that student and I
32:46 - am storing that new student on the
32:49 - appropriate position inside my new array
32:52 - so after our user enters the remaining
32:55 - elements for our new array we should
32:58 - print students so here I'm passing
33:01 - students but here instead of passing
33:02 - size I want to pass new size because we
33:06 - don't want to print only the old
33:07 - elements we want to print the entire new
33:09 - array so here you should Pass New size
33:12 - so now if I start the program let's see
33:14 - what's going to happen so it asks me to
33:17 - enter the number of students that I want
33:18 - and this is for our first array this is
33:20 - for our old array so let's say two okay
33:23 - student one will be
33:26 - Selena age 28 gender female and then
33:29 - programming grade is going to be 10 okay
33:32 - and then second student will be Mark age
33:36 - will be 40. gender will be male and
33:39 - programming grade will be eight okay and
33:42 - now it asks me if I want a bigger array
33:45 - now if I press lowercase letter N or up
33:48 - or capital letter N that will end my
33:52 - program and nothing more will happen but
33:54 - if I press anything else for example
33:56 - letter Y that will give me the
33:59 - opportunity to enter the size for the
34:01 - new array now this new array should be
34:04 - bigger than our previous array here we
34:06 - had two elements so let's say that the
34:08 - new array will have three elements so
34:10 - these two that we already have and we
34:13 - should be able to add one more so when I
34:15 - press enter I will get the opportunity
34:18 - to enter one more student student three
34:21 - so his name will be Bill age will be 60
34:25 - gender will be email and programming
34:27 - grade will be 10 as well okay so now
34:30 - when I press enter
34:32 - all of these three students are printed
34:35 - with this print students function which
34:37 - means that indeed our array has been
34:40 - dynamically created and then later
34:42 - expanded
34:44 - so there are a few things that I want to
34:46 - explain now the first one is this part
34:50 - of the code here as you can see this
34:53 - part of the code is used in order to
34:55 - enter elements for the new array so it
34:58 - starts entering at the size of the
35:00 - previous array and then it stops at the
35:02 - size of the new array but basically we
35:05 - have copied this almost the same code
35:08 - from this part here so here we are
35:12 - entering elements for the old array and
35:15 - the only difference between these two
35:17 - functions is that this one starts
35:19 - entering elements at zero and goes to
35:21 - size and then this one that enters
35:24 - elements for the new array starts at
35:27 - size and it goes until the new size okay
35:31 - so what I want you to do is I want you
35:34 - to extract this code into one function
35:36 - that you can invoke both here and
35:41 - here and you can use that function in
35:44 - order to enter elements for your array
35:46 - for both of these arrays both old and
35:49 - new array now there are a couple of
35:52 - things that I want you to keep in mind
35:53 - here we have already demonstrated how
35:56 - you can work with arrays of objects and
35:59 - functions here so I have shown you how
36:01 - you can use a function in order to print
36:05 - elements of a dynamic array and the same
36:08 - way you are going to create a function
36:10 - to enter elements for a dynamic array
36:12 - now this function here received the
36:15 - pointer to the first element and the
36:17 - size of the array and that was enough
36:20 - for you to print all of the elements of
36:22 - the array but when we are talking about
36:24 - entering the elements for the array you
36:27 - need to receive the pointer to the first
36:30 - element and then position at which you
36:32 - want to start entering elements and then
36:35 - the size so how many elements after that
36:38 - position you want to enter so for this
36:42 - situation here when we are entering our
36:44 - old array we would receive zero at the
36:47 - start position and then we would receive
36:49 - size as the end position but in this
36:52 - situation here
36:55 - we would have size at as start position
36:58 - and then new size as input position so
37:01 - we would receive three parameters and
37:04 - then also
37:05 - this function here does not return
37:08 - anything because it's just printing
37:10 - students and its job is done but the
37:13 - function whose job is to enter new
37:16 - students should return an array of
37:19 - students it should return a pointer to
37:21 - your array where the user has entered
37:23 - elements so I want you to do that as
37:27 - your homework as a task to practice and
37:29 - if you have any questions if you have
37:31 - anything that you need a tip a hint or
37:35 - an explanation let me know in the
37:37 - comment section and then also if you
37:39 - write that function you can leave it in
37:41 - the comment section so that other people
37:43 - can see it and use it or review it and
37:46 - so on so that was a task for you and
37:49 - that was the first thing that I wanted
37:50 - to explain the second thing that I
37:52 - wanted to show you is this part of the
37:54 - code here that we have commented this
37:58 - mem
37:59 - cpy memory copy function we said that
38:04 - this function can also be used in order
38:06 - to copy elements and then we have
38:08 - commented it and we have done this
38:10 - manual approach where we have copied
38:13 - each element one by one from our old
38:16 - array into our new array so now what I
38:18 - want to do is I want to demonstrate what
38:21 - this function here will do so I'm going
38:23 - to comment this part okay and I will
38:27 - uncomment this mem copy function so now
38:31 - I will start my program but before
38:33 - starting my program I want to put
38:35 - breakpoint here and later you will
38:37 - understand why so let's start the
38:39 - program
38:40 - and we are entering number of students
38:42 - for our old array let's say two
38:45 - so southina 28 and then gender female
38:49 - programming grade will be 10 second
38:51 - student will be mark
38:53 - 40 male programming grade will be 10
38:57 - also and then do you want bigger array
39:00 - yes I want bigger array the size for a
39:03 - new array will be three okay and the
39:06 - third student will be let's say Elon age
39:10 - will be 50 gender will be male and grade
39:13 - will be seven okay so now if I press
39:16 - enter we should get all three students
39:19 - that are new array contains those are
39:22 - these three but if I press continue now
39:26 - let's see what's going to happen first
39:28 - please notice that the application
39:30 - execution was paused at this line 85. so
39:34 - before we are deleting or deallocating
39:36 - our array of students before the
39:38 - application stops so now if I press
39:40 - continue
39:42 - as you can see here we get an exception
39:45 - and the exception says read access
39:47 - violation so what is exactly happening
39:51 - here so this problem that you can see
39:53 - here is the most common error that
39:56 - happens not only to beginners but also
39:59 - to more experienced developers and this
40:02 - read access violation means that now you
40:05 - are trying to access your program is
40:07 - trying to access memory locations that
40:10 - do not belong to it anymore what does
40:13 - that mean well let's take a look at the
40:15 - code that we have changed because that
40:17 - was the thing that caused this exception
40:19 - so we change this part here we have
40:23 - commented the part where we manually
40:25 - copy elements from the old array into
40:27 - the new array and we have uncommented
40:30 - this mem copy function that is used for
40:33 - copying memory now what is the
40:35 - difference why this worked and we didn't
40:38 - have exception and now this doesn't work
40:40 - but it is inbuilt function that C plus
40:43 - plus offers so it should work right well
40:46 - the difference is that this part here
40:50 - the one where we were manually copying
40:52 - each element was doing something called
40:54 - Deep copy and this part here this mem
40:58 - copy function is doing something called
41:00 - shallow copy so what is the difference
41:02 - between deep copy and shallow copy and
41:05 - what does it even mean here I will give
41:08 - you a shorter explanation because I
41:10 - already have a video where I explained
41:12 - this topic in depth so you can watch
41:14 - that video it will be linked here and
41:16 - also in the description it is video
41:18 - about copy Constructors and assignment
41:20 - operators and if you don't understand
41:23 - this topic in depth then definitely make
41:26 - sure to watch these videos because you
41:28 - will get great value and in-depth
41:31 - understanding of what is going on here
41:33 - so basically the difference between D
41:35 - copy and travel copy is the following
41:37 - this approach here that we wrote
41:40 - manually where we manually copied each
41:42 - comment from the old array into our new
41:44 - array was performing something called
41:46 - Deep copy on the other hand this
41:50 - function here this mem copy function is
41:53 - performing something called shallow copy
41:55 - now shallow copying can be used when you
41:58 - are copying
42:00 - um primitive data types primitive data
42:02 - types are integer chart double float
42:04 - pool and so on also shallow copying can
42:08 - be used when you're copying arrays of
42:10 - primitive data types also shallow
42:13 - copying can be used when you are copying
42:15 - structures that contain only primitive
42:18 - data types but as soon as you start
42:21 - working with pointers then you need to
42:25 - create your own way to deep copy any
42:28 - object or arrays of objects or anything
42:30 - like that so here we are working with
42:33 - class called student and that student
42:35 - has string name now this string name
42:38 - internally works as a pointer to array
42:42 - of characters and because of that we
42:45 - cannot perform shallow copy of this
42:49 - student class of any object that is of
42:51 - type student that is defined like this
42:54 - so because of that we need to have our
42:57 - own way of deep copying that object so
43:01 - if you want to understand this topic in
43:03 - depth I recommend you to watch the video
43:04 - about copy Constructor and assignment
43:07 - operator that I already have on my
43:09 - channel they will be linked in the
43:11 - description so far I already gave you
43:14 - one task that you can do as homework and
43:16 - that you can use to practice on your own
43:18 - and that was the following so this code
43:21 - here where we enter a new array and then
43:25 - this code here when we enter old array
43:28 - you should extract those two into a
43:31 - function so that you can reuse that
43:33 - function instead of repeating the code
43:36 - like we did here so that was your first
43:40 - task and now I want to give you another
43:42 - task but before I do that I want to tell
43:45 - you the following it is perfectly normal
43:47 - if you want to re-watch this video so
43:49 - that you can remind yourself of
43:51 - something that you have skipped or
43:52 - something that you have missed also if
43:55 - you just want to remember better all the
43:57 - things that we have learned in this
43:58 - video it is perfectly normal to watch
44:00 - this video again or even re-watch it a
44:03 - couple of times before you start solving
44:05 - tasks on your own I would say that it is
44:08 - even recommended to do that so that is
44:11 - one very very important thing uh that is
44:14 - normal part of learning so the second
44:16 - task
44:18 - um that you can do once you have
44:19 - understood everything that I've
44:20 - explained in this video is the following
44:23 - you are going to take your students
44:26 - array that contains both boys and girls
44:29 - males and females and you are going to
44:32 - divide that array into two smaller
44:34 - arrays array of males and array of
44:37 - females and you are going to take all of
44:40 - the males from your big array and put
44:42 - them into your smaller array array of
44:45 - males and then you are going to take all
44:46 - the females and put them into the array
44:49 - of females so you should have two
44:51 - smaller arrays after that you should
44:54 - de-allocate the big array where both
44:57 - genders were kept together and avoiding
45:00 - potential errors and exceptions that can
45:02 - happen in that case is going to be very
45:04 - tricky and it is going to require the
45:07 - complete understanding of everything
45:08 - that we have learned so far so let me
45:12 - know if you have any questions about
45:13 - that in the comment section and then of
45:16 - course in order to test if everything
45:18 - works correctly you should print both
45:21 - the array of males and array of female
45:24 - and of course at the end don't remember
45:27 - to deallocate array of males and array
45:30 - of females so all the memory that was
45:32 - allocated you will have to deallocate it
45:35 - or free it delete it okay so that will
45:38 - be the task for you to practice on your
45:41 - own so thank you very much for watching
45:43 - and if you enjoyed this video please
45:44 - give it a big thumbs up because
45:46 - preparing and filming and editing videos
45:49 - like this one requires a lot of time and
45:51 - for whatever reason YouTube kind of
45:53 - prefers and promotes short videos of
45:57 - someone dancing and lip syncing to a
45:59 - trending song So videos of 10 seconds
46:01 - that are very easy to make so if you
46:04 - personally prefer videos like this one
46:06 - and if you get value from videos like
46:08 - this one then definitely give it a
46:10 - thumbs up and tell to the YouTube
46:11 - algorithm hey I want to see more videos
46:13 - like this one also if you have any
46:16 - questions feel free to leave them in the
46:17 - comment section and I will reply them
46:19 - either in text format or in a new video
46:23 - so again thank thank you very much for
46:25 - watching and I will see you in another
46:27 - video bye