00:00 - hi guys and welcome to my channel in
00:02 - this video you are going to learn about
00:03 - arrays of objects and their relationship
00:06 - with inheritance and polymorphism so as
00:09 - you already know from my previous videos
00:11 - array is a type of collection that
00:14 - stores elements of the same type but in
00:17 - this video you are going to learn how
00:18 - you can store elements of different type
00:21 - in the same array and we are also going
00:24 - to see how you can Implement inheritance
00:26 - and polymorphism so this video is very
00:29 - important for every single developer
00:31 - especially for those of you who want to
00:33 - become game developers so make sure to
00:35 - watch it until the end and also at the
00:38 - end there is an example for users you
00:40 - can practice programming on your own and
00:43 - before we start with the video as most
00:45 - of you already know for the past year I
00:47 - have been working on a practical
00:49 - programming course that will teach you
00:51 - how to think as a programmer and that
00:54 - will give you that strong in-depth
00:56 - understanding of programming this is
00:58 - going to be practical program course and
01:01 - it will 100 lead you to getting your
01:03 - first job as a software developer or
01:05 - getting a better job if you already have
01:07 - one because in this course we are going
01:09 - to solve a lot of real world problems
01:12 - with code and you will get that strong
01:15 - understanding of how big complex
01:17 - applications are built and this is going
01:20 - to be a complete Journey from beginner
01:22 - to expert programmer and it will allow
01:25 - me to pass on you all of the knowledge
01:27 - and experience that I have acquired in
01:29 - the past 10 years of coding and since
01:32 - this community means a lot to me I want
01:34 - to give you guys a special discount when
01:37 - compared to other people because you
01:38 - have been supporting me and watching my
01:40 - videos on YouTube for a long time so if
01:43 - you are interested in this course I will
01:45 - leave a link for you in the description
01:46 - that you can use in order to sign up and
01:49 - I will send you a discount once the
01:50 - course launches it is completely free to
01:53 - sign up but make sure to do it right now
01:55 - because the number of people that can
01:56 - get this discount is limited so if
01:59 - you're interested make sure to sign up
02:01 - while there is still place so with that
02:04 - being said let's continue with the topic
02:05 - of today's video so here I have a class
02:08 - called student and student class has
02:10 - three properties those are name age and
02:14 - gender and these three properties are
02:17 - public so that they are accessible
02:19 - outside of the class and this code here
02:22 - is what we are going to use for the
02:24 - video uh first thing that I want to say
02:26 - if you're not familiar with classes and
02:28 - objects then make sure to watch this
02:30 - video I will also link it in the
02:32 - description and since we are talking
02:34 - about arrays of objects if you're not
02:36 - familiar with arrays of objects also
02:38 - make sure to watch this video it will be
02:41 - put in the description so that you can
02:43 - continue following this video without
02:45 - any problems but if you are familiar
02:48 - with those topics then you can continue
02:50 - watching this video so the first thing
02:52 - that I want to do is I want to inherit
02:54 - this student class and I want to create
02:57 - a few derived classes from this student
02:59 - class
03:01 - um here you need to understand
03:02 - inheritance and you need to know what is
03:04 - inheritance and how it is implemented in
03:07 - this video I'm going to explain it in a
03:09 - short few sentences because I already
03:10 - have a video that goes in depth and
03:13 - explains everything that you need to
03:14 - know about inheritance I will link that
03:16 - video here it will also be in the
03:18 - description if you are not familiar with
03:20 - this then definitely make sure to watch
03:22 - that video so again what I want to do
03:25 - here is I want to create a few derived
03:28 - classes from this student class and what
03:31 - inheritance is it is a way to create
03:34 - more specific classes from a more
03:36 - General class in our case student is
03:40 - more General class and what I want to do
03:42 - is I want to create more specific types
03:44 - of student for example I want to create
03:46 - programming Student Art student and
03:49 - music student so let's do that
03:53 - if you watched my video about
03:54 - inheritance you already know that
03:56 - inheritance is implemented with this
03:59 - column sign so it is implemented like
04:01 - this let's create a class called
04:03 - programming student
04:08 - okay and I have put this coincide which
04:12 - means that now I want to inherit from
04:15 - this
04:16 - class here called student and I want to
04:19 - make public inheritance again if you're
04:22 - not familiar with this and this entire
04:25 - command here then definitely make sure
04:27 - to watch my video about inheritance okay
04:29 - and I will put these curly brackets and
04:33 - also make sure at the end to put this
04:36 - semicolon symbol okay so here I have
04:39 - created a class called programming
04:41 - student and programming student is
04:44 - inheriting from my student class okay so
04:48 - let's create two more derived classes
04:51 - I'm going to copy this code paste it
04:52 - here and once more and I want to create
04:55 - another type of student let's say art
04:57 - student
05:00 - okay and let's say music student
05:05 - okay so here we have three derived
05:09 - classes programming Student Art student
05:12 - and music student and all of them are
05:14 - inheriting from our student class which
05:16 - means that all of these three classes
05:19 - will have the properties that our
05:21 - student has so all the properties and
05:23 - methods That Base Class has they will be
05:27 - inherited in the derived class they they
05:29 - will be available in the derived class
05:31 - but each derived class can have its own
05:35 - specific Properties or methods so for
05:38 - example our programming student can have
05:41 - something that is specific for him for
05:42 - example programming grade and then art
05:45 - student can have something that is
05:47 - specific for art students let's say uh
05:49 - painting grade or grade from history of
05:52 - Arts or something like that and a music
05:54 - student can have grade from singing or
05:57 - playing certain instrument so that means
06:00 - that each one of these derived classes
06:02 - can have its own properties and behavior
06:05 - first methods that are specific for
06:08 - these derived classes but whatever is
06:11 - inside this Base Class that will be
06:14 - inherited by every single derived class
06:18 - now let's do something interesting here
06:20 - let's create a method inside this
06:22 - student class so inside my base class so
06:26 - let's say that it will be a method of
06:28 - return type void and I will call it
06:30 - study
06:32 - like this okay so with this we have
06:35 - created a method of return type void it
06:37 - is called study and so far this method
06:40 - will be inherited by every single one of
06:43 - these derived classes but what I want to
06:46 - do here is I want to make this method to
06:48 - be a pure virtual method so how do I do
06:51 - that well I put virtual keyword here
06:56 - okay and I also say that this method
07:00 - will be equal to zero which means that
07:03 - it will not have implementation as you
07:06 - can see I've deleted those curly
07:08 - brackets and now this method here has
07:11 - become a Pure virtual method and by
07:14 - making this method a pure virtual method
07:16 - I have also made this student class to
07:20 - be an abstract class now if you want to
07:23 - learn about this in depth I recommend
07:25 - you to watch this video and in this
07:27 - video you can learn about the
07:30 - relationship and the meaning and the
07:31 - importance of virtual methods pure
07:34 - virtual methods and Abstract classes and
07:36 - that video will be linked in the
07:38 - description so make sure to watch it and
07:40 - here I will explain what that means in a
07:43 - short few sentences so basically by
07:46 - making this method to be a pure virtual
07:48 - method this class became abstract class
07:50 - and that means that we can no longer
07:53 - create an instance of this class class
07:56 - so that is the first thing and the
07:59 - second thing is that now each one of the
08:02 - derived classes that inherits from this
08:05 - Base Class called student will have to
08:07 - provide its own implementation for this
08:10 - method so that means that programming
08:12 - students will need to provide his own
08:14 - implementation for study method and then
08:16 - art student will have to provide his own
08:18 - implementation and music student as well
08:21 - so let's do that let's create
08:23 - implementation for this study method
08:25 - inside every single one of these derived
08:28 - classes so for my programming student I
08:31 - will create public area of the class and
08:33 - here I will Implement my study method
08:36 - and I will simply say C out and let's
08:39 - say learning programming
08:43 - okay let's put the end line and now
08:46 - let's create the implementation for art
08:49 - student but art student will have
08:51 - different implementation he will for
08:53 - example say learning to paint okay and
08:58 - then music student will say learning to
09:02 - play piano for example and to sing okay
09:07 - so here are three implementations of
09:09 - this study method inside every single
09:12 - derived class that inherited from my
09:14 - student because as we said by making
09:17 - this method to be a pure virtual method
09:19 - inside Base Class that will obligate
09:22 - every single derived class to create its
09:24 - own implementation for this method and
09:27 - also as I said now you can no longer
09:29 - create instances of the student class
09:31 - you can only create instances of
09:33 - programming Student Art student and
09:35 - music student classes now let's see what
09:38 - does this have to do with polymorphism
09:40 - and what is polymorphism polymorphism is
09:43 - another Concept in object oriented
09:46 - programming and it allows us the
09:47 - following it allows the object of
09:51 - derived classes or subclasses to be
09:54 - treated the same as objects of a base
09:57 - class or to put it in another words the
10:01 - logic that works for Base Class should
10:03 - work for all of the derived classes now
10:08 - let's see what that means on an example
10:10 - but before that I'm going to link a
10:12 - video about polymorphism here and in
10:15 - this video I talk about polymorphism in
10:18 - the detail and I also put the link to
10:20 - that video in the description so if you
10:22 - are not familiar with polymorphism at
10:23 - all make sure to watch that video right
10:26 - now or after you finish watching this
10:28 - video definitely make sure to watch it
10:30 - because it is an extremely important
10:32 - topic okay so now let's see how we can
10:36 - implement this polymorphism now let's
10:39 - create an array of pointers to student
10:42 - class so here
10:45 - I will say student pointer and let's
10:49 - name the array let's call it students
10:52 - and it will be an array of three
10:54 - elements like this so with this line we
10:57 - have created an array of three elements
11:00 - it is called students and inside each
11:03 - element there will be a pointer to
11:06 - student object now one very important
11:09 - thing that we said earlier is that this
11:12 - class here became an abstract class
11:14 - because it has at least one pure virtual
11:18 - method and abstract class means that we
11:21 - cannot create instances of this class
11:23 - but what we can do is we can create
11:26 - instances of its derived classes so
11:30 - these three classes here so what I will
11:33 - do is now I will put object of type
11:37 - music Student Art student and
11:40 - programming student inside the elements
11:42 - of this array here and because this is
11:45 - an array of pointers that means that we
11:48 - can point to anything that is of type
11:51 - student or any other class that inherits
11:55 - from students so basically I can do
11:57 - something like this I can say that
11:59 - students
12:01 - of zero because indexation of array
12:04 - starts with zero so the first element
12:06 - has the index of zero so the first
12:09 - element is equal to new
12:13 - programming student
12:15 - like this
12:17 - and then the second element the one that
12:20 - has index one will be new
12:23 - Arts student and then the third element
12:27 - the one that has index two is going to
12:30 - be new music student like this and this
12:34 - code is perfectly okay because this is
12:37 - an array of pointers so again this is
12:40 - not an array of students this is an
12:42 - array of pointers to students and
12:45 - because of that we can store inside this
12:49 - array here any pointer to student or any
12:52 - other derived class that inherits from
12:54 - student class and that is exactly what
12:57 - we have done here so now I want to
12:59 - answer an interesting question and that
13:01 - is what is the purpose of this code why
13:04 - did I even write this code what is the
13:07 - benefit and the meaning of this code
13:08 - well if you remember a few minutes ago
13:11 - when I talked about polymorphism I said
13:14 - that polymorphism allows us the
13:16 - following it allows for us to make the
13:20 - logic that works on the base class let's
13:23 - say logic should work on any derived
13:26 - class so now let's see how we can
13:28 - actually demonstrate that well what I
13:31 - want to do is I want to iterate through
13:33 - this array here so I will simply write a
13:36 - for Loop so four inch I is equal to zero
13:40 - I is less than or equal to 2 I plus plus
13:44 - okay and now what I want to do and this
13:48 - is the magical part I simply want to say
13:52 - students of I and then put this symbol
13:56 - because we are working with pointers and
13:59 - here I want to say study
14:01 - okay now a question for you what do you
14:05 - expect to be the result of this code now
14:08 - if I run my application so if I start
14:11 - the program
14:12 - here is the result and as you can see
14:16 - even though we have invoked just one
14:19 - method here I have three different
14:23 - outputs which means that in the
14:25 - background every single student type has
14:27 - invoked its own implementation of study
14:30 - method and that is something that
14:32 - polymorphism allows us to do so again
14:35 - here I have created an array of student
14:39 - pointers which is an array of Base Class
14:42 - pointers and then as elements of that
14:44 - array I have assigned derived classes so
14:47 - in the in my dynamic memory I have
14:49 - allocated space for derived classes not
14:51 - base classes and then here I am invoking
14:55 - this study method on my Base Class array
14:59 - but in the background because the
15:01 - elements of this array are derived
15:04 - classes each one of these three derived
15:07 - classes will invoke its own
15:10 - implementation of this study method and
15:13 - we will get this polymorphic Behavior as
15:17 - you can see here so that is something
15:20 - that polymorphism allows us to do
15:23 - and before I finish this video I want to
15:25 - talk about another very important topic
15:27 - and that is memory deallocation so let
15:30 - me explain what that means here I have
15:33 - allocated new dynamic memory for my
15:35 - programming student and then also for
15:37 - new art student and for new music
15:40 - student so what this means is that for
15:43 - these three objects I have asked my
15:46 - operating system hey please give me
15:48 - dynamic memory that I can use in order
15:50 - to store these objects and what that
15:53 - also means is that once I'm done using
15:57 - that memory and for example once my
15:58 - application finishes what I have to do
16:01 - is I have to free that memory I have to
16:04 - deallocate it and that will basically
16:06 - say to my operating system hey here is
16:09 - this memory I'm giving it back to you so
16:11 - that you can recycle it and give it to
16:13 - some other applications so that memory
16:16 - can be reused otherwise you are going to
16:19 - have a memory leak in your application
16:22 - and eventually you can run out of your
16:24 - dynamic memory so how should you
16:27 - deallocate this memory well it is very
16:30 - important that you deallocated the same
16:32 - way that you have allocated it which
16:34 - means that you deallocate the same
16:36 - memory that you have allocated let me
16:38 - explain what this means let's say for
16:40 - example that you write something like
16:42 - delete
16:44 - students okay and you think that you
16:48 - have the allocated memory by writing
16:50 - this line of code but you haven't or you
16:52 - write something like delete array of
16:56 - students again this is wrong and this is
16:59 - not de-allocating the same memory that
17:01 - you have allocated the correct way to
17:04 - deallocate the memory that we have
17:06 - allocated here is the following I am
17:09 - going to write a for Loop and I will
17:11 - iterate
17:13 - through three elements of my array like
17:16 - this and here I will say please delete
17:21 - my students of I because that is what we
17:26 - have allocated we have allocated memory
17:29 - for the first student for the second and
17:31 - for the third so here we are using for
17:34 - Loop and we are de-allocating memory
17:36 - from the element that has index 0 up to
17:40 - the element that has index two so we
17:42 - have deallocated memory the same way
17:45 - that we have allocated it here
17:48 - and a short tip that I would give you is
17:50 - to use a static code analyzer and static
17:53 - code analyzer is a tool that you can use
17:55 - in order to analyze your code and it
17:58 - will tell you if you have any errors or
18:00 - memory leaks and if you use any of the
18:03 - two previous ways that I demonstrated uh
18:05 - for deallocating memory in those two
18:08 - cases you would have a memory leak so
18:10 - this here is a correct way to
18:12 - de-allocate the memory and for checking
18:15 - any errors of that type you can use
18:16 - static code analyzers the one that I
18:19 - love using is called PBS studio and I
18:22 - have a link where you could download it
18:23 - for free I'm going to check if that link
18:25 - still works and if it does I am going to
18:28 - put it in the description so that you
18:30 - can download previous Studio as well so
18:32 - that is the tip that I wanted to give
18:34 - you one thing that I promised at the
18:36 - beginning is that I will give you a task
18:38 - that you can use to practice on your own
18:40 - so here it is what I want you to do is I
18:45 - want you to create a class called
18:47 - Monster so that is going to be Base
18:49 - Class like we did here monster and then
18:53 - what I want you to do is I want you to
18:55 - create three derived classes that will
18:57 - inherit from your monster so I want you
18:59 - to create for example zombie vampire and
19:02 - dragon now what is specific about each
19:06 - one of these derived classes is that
19:08 - they all have a specific way to attack
19:11 - so a monster can perform an attack but
19:14 - each one of these three types of
19:17 - monsters have their specific attack for
19:21 - example a zombie will swallow you and
19:23 - then vampire can bite you and dragon
19:26 - will burn you with fire so you should
19:28 - Implement those three methods and then
19:31 - you are going to create an array of
19:35 - monsters and you are going to implement
19:37 - polymorphism like we did here so that
19:39 - when you say monster attack each one of
19:43 - the monsters should perform his own
19:45 - attack so that is a task that you can
19:47 - news in order to practice programming on
19:50 - your own so this is definitely an
19:52 - example that you will come across if you
19:54 - ever decide to write code for games and
19:57 - if you want another example well let's
20:00 - say for example that you can create a
20:03 - class called instrument and each
20:05 - instrument will have name year of
20:08 - manufacturing and let's say manufacturer
20:10 - so that would be your base class and
20:13 - then I want you to create three derived
20:15 - classes three instruments let's say uh
20:17 - guitar piano and drums and each one of
20:21 - those three performs a different sound
20:24 - so what you can then do is you can
20:27 - create an array of instruments and when
20:31 - you say instrument play Then each
20:34 - instrument should perform its own sound
20:36 - so you will basically have your own
20:38 - orchestra playing so multiple
20:41 - instruments playing their own sounds so
20:44 - those are tasks that you can use to
20:46 - practice on your own while you wait for
20:48 - my next video and if you have any
20:51 - questions regarding this video or any
20:52 - topics that you would like to see in the
20:54 - future feel free to leave those in the
20:56 - comment section and also if you enjoyed
20:58 - this video and if you want more videos
21:00 - that are similar to this one uh
21:02 - definitely give this video a thumbs up
21:04 - so that YouTube algorithm knows to
21:07 - recommend you more videos like this one
21:09 - where you can learn about programming
21:10 - and different programming Concepts so
21:13 - thank you very much for watching and I
21:15 - am going to see you in some other video
21:17 - bye
21:19 - but now you can I'm giving it
21:24 - I'm giving