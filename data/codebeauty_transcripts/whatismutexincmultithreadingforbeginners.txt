00:00 - hi guys and welcome to my channel in
00:02 - this video I'm going to talk about one
00:04 - very interesting topic that confuses
00:06 - many beginners but it is very important
00:09 - to understand it and as you will see
00:10 - from this video it's not actually that
00:12 - hard uh so that is the topic of mutex
00:15 - and the first thing that I want to
00:16 - explain is what is mutex mutex is a term
00:20 - that is related to multi-threading in C
00:22 - plus plus and it stands for Mutual
00:25 - exclusion that means that mutex is a way
00:28 - to ensure that inside a multi-threaded
00:31 - application two threads cannot access
00:34 - the same code at the same time because
00:37 - that could cause many problems in your
00:39 - application in this video I will give
00:41 - you a short real life example of mutex
00:44 - so that you can understand the concept
00:45 - and if you want to learn more and if you
00:48 - want to understand more about
00:49 - multi-threading and how it's used in big
00:51 - projects and to build applications that
00:53 - we use every day then I would recommend
00:56 - you to watch my practical programming
00:58 - course the link will be in the
01:00 - description version and in that course
01:01 - multi-threading is just one of the many
01:03 - topics that you will learn because you
01:05 - will get all of the necessary skills so
01:08 - that you can start building applications
01:10 - yourself and get a job once you finish
01:12 - that course the course is going to be
01:13 - launched very soon and since you are my
01:15 - YouTube viewer I want to make sure that
01:17 - you get a special treatment when
01:19 - compared to other people so I'll put a
01:21 - link in the description that you can use
01:23 - to sign up and once the course is
01:25 - launched I am going to send you a
01:27 - special discount but as you will
01:29 - understand the number of people who can
01:31 - get this discount is limited so if you
01:33 - are interested it's completely free to
01:35 - sign up but do it right now so that you
01:37 - can secure your place so with that being
01:39 - said let's get back to the topic of new
01:41 - text as I said mutex is a way to prevent
01:45 - multiple threads from accessing the same
01:47 - part of the code at the same time and if
01:50 - you're not familiar with the concept of
01:52 - threads I already made another video
01:54 - where I explain multi-threading and the
01:56 - topic of threads and I will link that
01:58 - video here and also in the description
02:00 - so so make sure to watch it before you
02:01 - continue watching this video so what
02:03 - would be example of mutex in real life
02:06 - imagine the following situation let's
02:08 - say that you want to buy a Supercar and
02:11 - your friend also wants to buy a Supercar
02:13 - but you don't have enough money for
02:15 - example you have 1 million and he has 1
02:17 - million but the car costs 2 million
02:20 - dollars so you decide to buy that car
02:23 - together and to share it but one thing
02:26 - that you need to keep in mind is that if
02:28 - you are sharing that car you cannot use
02:29 - it at the same time which means that if
02:32 - your friend is driving you will have to
02:34 - wait and if you are driving your friend
02:36 - will have to wait so those are the
02:38 - limitations now let's see how we can
02:41 - simulate that scenario in code so what I
02:44 - want to do is I want to create a
02:46 - function of return type void I will call
02:48 - it drive car
02:52 - okay and here I will receive one string
02:55 - parameter it will be string driver name
03:00 - okay and here I will simulate the
03:03 - driving of a car so I will say C out and
03:06 - then let's print driver's name and I
03:09 - will say here is
03:11 - driving okay
03:15 - and then I will say C out
03:18 - driver name and then let's say is done
03:23 - driving and let's put another end line
03:26 - and then here in between I will simulate
03:29 - the duration so the period while you are
03:31 - driving the car and I will do that by
03:34 - sleeping this thread so in order to do
03:36 - that you need to say
03:38 - include and then thread oh what is this
03:42 - include
03:43 - thread like this and now here I can say
03:48 - this thread
03:49 - okay and then let's say sleep four and
03:52 - here I will use Chrono
03:57 - okay and let's say seconds and I will
04:00 - say for example that you are driving for
04:03 - two seconds okay so this is our drive
04:06 - car function and now what I want to do
04:08 - is I want to simulate the situation
04:10 - where you and your friend are sharing
04:13 - the same car so how am I going to
04:14 - represent you and your friend well I am
04:17 - going to represent that with two threads
04:20 - so let's create thread
04:22 - if I say T1 and here I will pass two
04:26 - parameters the first one is going to be
04:28 - the method that this thread is executing
04:32 - and that is this drive car so what is
04:34 - going to be the task and the job of this
04:37 - thread and then the second thing is
04:39 - since this method receives one parameter
04:42 - I am going to pass it here and that is
04:45 - going to be the name of the driver so I
04:46 - will say saldina okay so this is the
04:50 - first friend the first thread and then
04:52 - let's create another one let's call it
04:55 - T2 its job is going to be the same
04:57 - function and the name of the driver will
05:00 - be let's say Elon okay so now these two
05:04 - threads are two friends that share the
05:07 - same card and now if I run this program
05:09 - we are going to see what will be the
05:12 - result of this application that we have
05:14 - written but one thing that we need to do
05:16 - first is the following I need to say T1
05:19 - dot join
05:21 - and then also T2 dot join and this
05:26 - basically means before this program ends
05:28 - make sure that both of these threads
05:31 - have finished what they were doing so
05:33 - please don't end the program until both
05:36 - of these threads finish their job okay
05:38 - so you need to put this part here
05:40 - otherwise you are going to get an error
05:42 - so now let's see what's going to happen
05:44 - when we start the program
05:47 - okay
05:49 - Salina is driving Elon is driving and
05:51 - then Selena is done driving Elon is done
05:53 - driving I I a problem here and that is
05:55 - the following how can Elon drive the car
05:59 - before I finish driving the car so
06:03 - clearly we have a problem here where two
06:05 - threads or two friends are accessing the
06:08 - same resource at the same time which
06:11 - should not be possible what should
06:13 - happen instead is that I should drive
06:15 - the car and then once I finish driving
06:18 - the car then Elon can start driving and
06:21 - then when he finishes driving our
06:23 - application will end so now let's see
06:25 - how we can fix this problem so in order
06:28 - to solve this problem we use mutex and
06:30 - you can understand mutex as a lock that
06:34 - is used in order to lock certain part of
06:35 - the code while one thread is executing
06:38 - it and then once that thread finishes it
06:41 - will unlock that code so that other
06:42 - threads can access it and that part of
06:45 - the code that you want to lock is called
06:47 - critical section so in our case our
06:50 - critical section is this part of the
06:52 - code here so before one driver starts
06:56 - driving the car he will have to lock it
07:00 - here and then once he's done driving so
07:04 - that will be here he can unlock the car
07:06 - so that other drivers other threads can
07:09 - access that code so now let's see how we
07:12 - can write that code so the first thing
07:14 - that you need to do is you need to
07:16 - include mutex here
07:20 - okay and then you need to create a mutex
07:24 - that you will use in order to lock this
07:26 - critical section I will say new text and
07:29 - let's call it car
07:31 - mutex like this and then here I will
07:35 - lock my code so I will say unique lock
07:39 - of mutex I will call it car lock and do
07:46 - this variable I will give this mutex
07:49 - that we created okay so this is how we
07:53 - lock the critical section and then here
07:56 - once you are done driving what you need
07:58 - to do is you need to say car lock
08:01 - unlock
08:02 - okay so by simply doing and adding these
08:06 - two lines of code we have locked this
08:08 - critical section and now we shouldn't
08:10 - have the problem that we previously had
08:12 - so let's start the program and let's see
08:14 - the result
08:17 - okay saldina is driving and then saldina
08:20 - is not driving and only then Elon can
08:23 - start driving okay
08:25 - another thing that you should know is
08:27 - that there is a shorter way in order to
08:30 - lock this critical section so instead of
08:33 - using unique lock you can use lock guard
08:36 - how well it's actually very simple so
08:39 - you simply say lock guard like this the
08:43 - rest of the code stays the same and then
08:46 - here you can even delete this part where
08:49 - you are unlocking your critical section
08:51 - and we will come to that part and
08:52 - explain why in a moment but first I want
08:55 - to test the application let's see so
08:57 - saldina is driving and then seldina is
09:00 - not driving and only then Elon can start
09:02 - driving and then once he is done the
09:05 - application finishes okay
09:07 - so let's see what is the difference
09:09 - between lock guard and unique lock lock
09:13 - guard is easier and the more simple way
09:16 - to use mutex and its characteristics are
09:19 - following lock guard is going to lock
09:22 - your critical section at the same line
09:25 - where you create it also it is going to
09:28 - unlock the code automatically once this
09:32 - object goes out of scope and that is
09:34 - usually at the end of the block or at
09:35 - the end of the or at the end of the
09:37 - function so in our case that is here a
09:40 - disclosed curly bracket and because it
09:43 - is unlocking your code automatically
09:45 - that means that you cannot unlock it
09:48 - manually so lock guard cannot be
09:51 - unlocked manually that is the first
09:52 - thing and then the second thing which is
09:54 - benefit is that because it is unlocking
09:57 - the code and releasing mutex
09:58 - automatically it will make sure that
10:01 - your code is always unlocked and that
10:05 - the mutex is released properly even if
10:07 - your application has an exception or
10:10 - whatever happens your code is going to
10:12 - be properly unlocked and the mutex will
10:14 - be released so that is benefit so when
10:17 - you would use this lock guard you would
10:19 - use lock guard when you want to lock a
10:21 - short well-defined block of code like we
10:25 - have here on the other hand unique lock
10:28 - is harder to use but it has more options
10:30 - let's return this to Unique lock
10:33 - like this and here you will notice that
10:37 - I have unlocked my code manually and
10:39 - that is one thing that you have to do
10:40 - with unique lock so you need to unlock
10:43 - manually and if you forget to do that or
10:46 - if you don't know how to do it when to
10:48 - do it then you can cause huge problems
10:50 - in your application that is downside but
10:53 - it also has a benefit and that is that
10:55 - uni clock can be used in order to defer
10:58 - locking which means that you can delay
11:00 - locking because of different conditions
11:02 - and situations that happen in your
11:04 - application and also you can use the
11:06 - same object of unique lock in order to
11:10 - lock and unlock your code multiple times
11:13 - during the lifetime of this object which
11:16 - is something that you couldn't do with
11:17 - lock guard
11:18 - so as I promised at the beginning this
11:21 - video is going to be very easy to
11:22 - understand so I hope that now you do
11:24 - understand the idea and the concept of
11:27 - mutex in programming and if you want to
11:30 - learn more if you want to understand how
11:31 - this works in Big applications that you
11:33 - use every day and how you can build
11:36 - those applications as well then I invite
11:39 - you to sign up for my practical
11:40 - programming course the link will be in
11:42 - the description and it is completely
11:44 - free to sign up and in that course I'm
11:46 - going to teach you everything that you
11:48 - need to know in order to become a
11:49 - developer and start building the
11:51 - applications that you want to build and
11:54 - also since you are my YouTube viewer I
11:56 - will make sure to send you a special
11:57 - discount as soon as the course launches
12:00 - so that would be all for this video all
12:02 - of the code is going to be pinned in the
12:04 - comment and if you have any questions or
12:07 - any suggestions for my future videos
12:08 - leave those in the comment section as
12:10 - well and if you enjoyed this video and
12:12 - you have learned something new then
12:14 - definitely give it a thumbs up and say
12:16 - to the YouTube algorithm that you wanted
12:18 - to recommend you more videos like this
12:20 - where you can learn something new and
12:22 - where you can learn to code so thank you
12:24 - very much for watching and I will see
12:26 - you in some other video bye