00:00 - hi everyone welcome to my channel my
00:02 - name is salvina i am a software engineer
00:05 - and i make programming videos so if
00:08 - those are of interest to you consider
00:09 - subscribing to my channel and click the
00:11 - bell icon so that you don't miss any of
00:14 - my future videos
00:15 - and in this video i want to talk about
00:17 - arrays now the best way for me to
00:20 - explain what are arrays and how they are
00:22 - used will be using an example so imagine
00:26 - a following situation
00:28 - imagine if you were saving money each
00:30 - month and you want to store that data
00:32 - you want to store that information about
00:34 - how much money you are saving each month
00:36 - in your computer and then in six months
00:39 - you want to calculate how much money you
00:41 - have saved in total you want to
00:42 - calculate how much money you are saving
00:44 - on average each month and then you want
00:46 - to predict how much money you will have
00:49 - in two years for example now
00:52 - how we can do that if we don't know
00:54 - anything about arrays well
00:57 - here i have my visual studio and the
01:00 - approach that we would use if we didn't
01:02 - know anything about arrays would be the
01:04 - following so we would create a variable
01:07 - let's say that variable is going to be
01:08 - of type float and let's call it month
01:12 - one
01:14 - okay
01:15 - and then let's say that in the first
01:17 - month we have saved 100 dollars for
01:21 - example now considering that we want to
01:23 - store data about how much money we save
01:25 - each month in six months we would we
01:28 - would have to create six of these
01:30 - variables so let's do that
01:32 - i'm going to copy this six times and
01:35 - this one is going to be month two and
01:37 - then month three
01:39 - and four
01:40 - and five
01:41 - okay and
01:42 - six
01:43 - now
01:44 - let's say that in this first month i
01:46 - have saved 100 and then 220
01:49 - and
01:50 - and then 300 for example and then in the
01:52 - fourth month we had a birthday or we
01:55 - bought something very expensive so we
01:56 - didn't save any money in the fourth
01:58 - month and then let's say 200 and
02:01 - 250.
02:03 - okay so here we have stored the data
02:06 - about how much money we have saved each
02:08 - month for six months now the things that
02:11 - i want to calculate from this data here
02:13 - are going to be how much money we have
02:15 - saved in total so let's write it here
02:19 - so total and then how much money we save
02:22 - on average like this oh
02:25 - it's it's not average it's it's average
02:28 - okay
02:29 - so and then
02:31 - and then i also want to check how much
02:33 - money i will have in two
02:36 - years
02:37 - okay now how do we calculate these three
02:40 - things from this data here well it's
02:43 - going to be pretty simple we create
02:44 - another variable
02:46 - which we will call total
02:49 - and our total will be sum of these six
02:52 - variables so
02:54 - month
02:55 - one plus
02:56 - month two plus month
03:00 - three okay so i have skipped this part
03:02 - of the video because it is pretty simple
03:04 - so you just sum all of these values in
03:06 - these six variables and that is going to
03:08 - be total amount of money that we have
03:10 - saved in six months now
03:13 - average is going to be as well of type
03:16 - float and let's call that variable
03:18 - average
03:19 - and it is going to be total
03:22 - divided by six like this so how much
03:25 - money we have saved in six months and we
03:29 - are going to divide that by six months
03:32 - and that is going to give us the average
03:34 - now how do we predict how much money we
03:36 - will have in two years well let's create
03:39 - another variable of type float again and
03:42 - let's call it
03:44 - in two years and here it will be
03:49 - average multiplied by 24.
03:52 - why because two years have 24 months
03:56 - okay great now i will write this data
03:59 - out to our user so let's say c out
04:03 - total
04:04 - is equal to and then
04:06 - total like this and let's copy this
04:10 - three times and here i want to write out
04:13 - average
04:14 - like this and then i want to write out
04:16 - how much money in two years okay great
04:20 - now let's run our program
04:24 - okay
04:25 - so it says in total we have saved one
04:28 - thousand and seventy dollars on average
04:30 - that's
04:31 - 178 and then in two years we will have a
04:34 - little over four thousand dollars okay
04:37 - great
04:38 - now this approach here works as it
04:41 - should but it has one problem now what
04:44 - is that problem well uh it is pretty
04:46 - easy to do this when you are calculating
04:48 - something for six months or seven or ten
04:51 - but imagine if you had to do this for
04:54 - 100 months or 1000 months you would have
04:57 - to create a variable for 100 months so
05:00 - 100 variables or 1000 variables and that
05:04 - is a problem so because of that we have
05:08 - a special type of collection which is
05:10 - called array and we can use that
05:12 - collection which can group all of these
05:15 - variables on a single place now how do
05:18 - we create arrays the way to create an
05:21 - array is following first you specify the
05:24 - type of that array like this okay the
05:27 - type of our array will be float why
05:30 - float because in that array we want to
05:32 - store these variables here and as you
05:34 - can see all of these variables have the
05:37 - type float so this is going to be the
05:39 - type of our array and then the second
05:42 - thing is you specify the name for your
05:44 - array now considering that our array
05:47 - will save the values that previously
05:48 - were in these variables here let's call
05:51 - that array
05:52 - months
05:54 - array like this
05:56 - okay
05:56 - and then one more thing that you have to
05:58 - specify is the size of that array and
06:02 - how do you specify the size you specify
06:04 - the size in these square brackets and
06:06 - considering that this array here will
06:09 - store these six values it is going to be
06:12 - array of six
06:14 - elements like this
06:16 - and with this here we have successfully
06:19 - created an array which is called months
06:22 - array it can store six elements and
06:24 - those elements will be of type float now
06:28 - how do we assign values to these six
06:30 - elements well
06:31 - you use
06:33 - you use these curly brackets and inside
06:36 - these curly brackets you assign the
06:37 - values for these six elements so i will
06:40 - just use these values here so the first
06:42 - element will have value of 100 and then
06:45 - 220 and 300 and 0 and 200 and 250 i hope
06:51 - that i didn't make a mistake
06:53 - okay so here in south inside our months
06:56 - array we have stored these values which
07:00 - are the values that previously were in
07:02 - these six variables
07:04 - now that means that we do not need these
07:07 - six variables anymore we can delete this
07:10 - part of the code here great and then as
07:12 - you can see we get an error here it says
07:15 - now that month one is undefined
07:18 - identifier month one is undefined and
07:20 - then it gives us the same message for
07:22 - month two and then month three four five
07:25 - and six all of these are now undefined
07:28 - why because we have just deleted the
07:30 - variables that we had here so now what i
07:33 - have to do is i have to change this
07:35 - variable with the first element of our
07:37 - array and then this variable with the
07:39 - second element and then this with a
07:41 - third and so on so that means that we
07:44 - can access these elements of the array
07:47 - individually and how do we do that how
07:50 - can i access the element for example
07:52 - this element of the array well
07:55 - in order to access elements of the array
07:57 - you use name of that array and then you
08:00 - use index of the specific element that
08:02 - you want to access
08:04 - so now your question might be how does
08:06 - the indexing of the array work well the
08:09 - indexing of the array starts with zero
08:12 - that means that the first element of the
08:15 - array has the index of zero and then the
08:18 - second element has the index of one and
08:20 - then third has the index of two and
08:23 - three and four and so on so let's write
08:26 - that so that we don't forget it so the
08:28 - first element has the index of 0 as i
08:31 - said and then second has the index of 1
08:34 - and then 2
08:36 - and 3
08:38 - and 4 and five
08:40 - okay now this here means that the array
08:43 - that has six elements the indexes of
08:45 - those arrays of that array will go from
08:48 - zero to five and then if you have array
08:51 - with which has for example 10 elements
08:53 - the indexes of that array would go from
08:55 - 0 to 9 if you had a rate it has 100
08:58 - elements indexes of that array would go
09:00 - from 0 to 99 and so on
09:03 - okay again so indexing of the array
09:06 - starts with 0. great so as i said in
09:09 - order to access a specific element of
09:11 - the array you use name of that array and
09:14 - then
09:15 - index of that element so that means that
09:18 - here instead of this month one variable
09:21 - which we previously had we will be using
09:24 - the name of our array
09:27 - months array and then in these square
09:30 - brackets i will use the index of my
09:33 - first element which is zero so this here
09:36 - will give us this value here
09:39 - okay and then here
09:41 - i will
09:42 - just copy the name of my array
09:45 - and then i will use index one in order
09:47 - to access second element of the array
09:50 - and i will do this for these remaining
09:53 - elements and i will be back
09:55 - so here i have total sum of all of these
09:58 - elements of the array from the one with
10:01 - index 0 until the one with index five so
10:04 - six elements in total and if i run my
10:07 - program nothing should change
10:09 - okay as you can see total is again 1070
10:13 - dollars and then average is 178 and then
10:16 - in two years we will have forty to
10:18 - eighty dollars okay
10:21 - now there is one question that i want to
10:23 - answer that many of you have asked
10:25 - especially those that are coming from
10:26 - javascript world and learning c plus for
10:29 - the first time and that question is
10:31 - following
10:32 - someone had asked can you inside this
10:35 - array have elements of different types
10:38 - so for example can this here be a string
10:42 - and the answer to your question is a
10:46 - value of type const char
10:49 - pointer cannot be used to initialize an
10:52 - entity of type float
10:53 - what this message here means is that no
10:56 - you cannot do this if you created an
10:59 - array
11:00 - of type float all of the elements of
11:04 - that array have to be of type float at
11:06 - least in c plus in some other languages
11:08 - that is not the case but in c plus all
11:11 - of these elements have to be of type
11:14 - float or something that can be converted
11:16 - to float so i will return this 200 and
11:20 - as you can see here this is integer but
11:22 - that integer can easily be converted to
11:24 - float because 100 is the same as 100.0
11:29 - and this here is a floating point number
11:32 - this here is float type
11:34 - but it is just easier to write it this
11:36 - way so the answer to your question is no
11:39 - all of these elements here have to be of
11:41 - the type that your array has so all of
11:44 - these elements have to be of type float
11:46 - or something that can be converted to
11:48 - float
11:49 - okay so now that i have cleared that
11:52 - let's return to this part here here we
11:54 - have learned how to access a specific
11:57 - element of the array so you do that by
11:59 - using the name of the array and then the
12:01 - index of that specific element and
12:03 - indexing of the array starts with zero
12:06 - now one more question that you might
12:07 - have then is the following is this part
12:11 - here necessary meaning
12:13 - do you have to initialize all of the
12:16 - elements of your array when you create
12:18 - that array and the answer to your
12:20 - question is
12:21 - no you don't so what i can do here as
12:24 - well is i can say
12:26 - that this part of the code does not
12:28 - exist anymore you can comment it out you
12:31 - can uh delete it if you want
12:34 - i will comment it out for now but what
12:36 - you can do basically is you can just
12:38 - create an array of type float that has
12:41 - six elements but you don't have to
12:43 - initialize those elements when you
12:45 - create the array you can initialize
12:47 - those elements later in your program so
12:50 - what you can do here is you can do the
12:51 - following you can say
12:53 - months array
12:55 - of index zero so it is our first month
12:59 - we'll have the value of 100 so it is
13:03 - this value here
13:04 - and then
13:05 - let's do
13:07 - okay let's do for the first month it has
13:10 - the value of 220 and then our third
13:13 - month the one with index two has the
13:15 - value of 300 and then fourth has the
13:19 - value of zero
13:21 - okay and let's do two more
13:23 - four and five and these have values of
13:26 - 200 and
13:28 - 250
13:30 - like this
13:31 - so this here is another way to
13:33 - initialize the elements of your array
13:36 - and this is one way that we previously
13:38 - showed and then this here is another way
13:40 - to do that same thing so if i run my
13:43 - program nothing should change basically
13:46 - okay so again here we have the same
13:48 - values that we previously had
13:50 - okay now
13:52 - one thing that you may wonder as well is
13:54 - now these values are hard coded so
13:57 - throughout this program we had all these
13:59 - values hard coded but what if we want
14:02 - our user to enter all of these values
14:05 - well you can do that as well what i can
14:07 - do is i can say the following so instead
14:10 - of assigning this value of 100 to my
14:12 - first element of the array what i can do
14:15 - is i can say see in
14:17 - and then
14:19 - assign that value that our user enters
14:22 - to the first element of that array so
14:24 - our user will input the value in our
14:26 - console and that value will be stored in
14:29 - the first element of our array and
14:33 - let's write out a message to our user as
14:35 - well so let's say
14:37 - enter
14:38 - amount
14:39 - like this
14:41 - okay and let's do that same thing for
14:44 - these remaining five elements so
14:47 - let's delete these hard-coded values
14:51 - okay
14:53 - like this and here i want to enter
14:57 - that i won't let my user to enter these
15:00 - values okay and if you're wondering
15:02 - about the shortcut that i just used to
15:04 - write in multiple lines at the same time
15:07 - um i believe it's alt plus shift however
15:09 - my brain does not know shortcuts my
15:12 - fingers do okay so here we have asked
15:15 - our user to enter amount and then here
15:18 - we have entered amounts for six months
15:21 - in the elements of this month's array
15:25 - okay so
15:26 - um if i run my program now
15:29 - it says enter amount and then it will
15:32 - store six values in these six elements
15:35 - of our month's array so let's enter six
15:37 - values let's say
15:38 - that in the first month we have saved
15:40 - one dollar and then one dollar and one
15:42 - dollar and then two dollars and then one
15:44 - and one again okay so it says that in
15:48 - six months we have saved seven dollars
15:50 - and that is one point one dollar a month
15:52 - and then in two years we will have 28
15:55 - dollars okay
15:58 - great
15:59 - so as you could see this code here works
16:02 - but i still have a problem with this
16:04 - code and the problem is that it is not
16:07 - optimal there are more optimal ways to
16:09 - write this code here so um it is pretty
16:12 - easy to do this for six elements but if
16:15 - you had 12 or 100 or 1000 elements you
16:20 - would have to basically do this 100
16:22 - times or 1000 times or even more and
16:24 - that is not optimal so what i want to do
16:27 - instead of this code here is i want to
16:30 - use a for loop and if you are not
16:33 - familiar with for loop i will link a
16:35 - video here where i explain for loop in
16:37 - detail so make sure to watch that
16:39 - okay
16:40 - so let's just delete this part of the
16:43 - code here
16:45 - so i will say 4
16:47 - and then i will create a counter of type
16:49 - int and give it minimal value of 0 and
16:53 - you should notice that the first element
16:56 - of our array has the index of 0 that's
16:59 - why we are starting this counter with
17:02 - the value of 0 and then
17:04 - we will say that that counter will have
17:07 - the maximum amount
17:09 - of
17:10 - five so while i is less than six you
17:13 - could do as well why is that less than
17:15 - or equal to
17:17 - five you can do it this way as well and
17:20 - this number here is the maximal index of
17:24 - the array that has six elements okay and
17:28 - then in each iteration i will increment
17:30 - that counter by one great so what i want
17:34 - to do in this for loop is i want to say
17:37 - see out
17:39 - enter amount
17:42 - for element
17:44 - and then i will write my counter i like
17:47 - this
17:48 - okay so i will say to my user please
17:51 - enter the amount for the element that
17:53 - has this index here and then what i want
17:56 - to do is i will say c in
17:58 - okay we use these other redirection
18:00 - signs c in
18:02 - months
18:03 - array and then i want to enter the value
18:05 - for that specific element like this
18:09 - okay
18:10 - great now if i run this program
18:13 - it says enter amount for element zero
18:16 - and that amount will be for example one
18:19 - and then it says enter amount for
18:20 - element one let's say two and then one
18:23 - again
18:25 - okay so
18:27 - it says that in total it is seven and
18:29 - then on average it's 1.1 and then in two
18:31 - years it's 28
18:33 - great now one thing that i don't like
18:35 - here is the way that this here this this
18:37 - message sounds to our user it says enter
18:39 - amount for element zero this really does
18:42 - not make sense to to someone who is not
18:44 - uh coming from programming world this
18:46 - element zero does not make sense to your
18:49 - user so it would be much better for this
18:51 - to start counting at one for your user
18:54 - so it would be much better if it said
18:56 - enter amount for element one or month
18:59 - one for example
19:01 - so i will just adjust that output and we
19:04 - will do that here so instead of element
19:06 - i will write
19:07 - month like this and then here instead of
19:10 - i what i want to write is i want to
19:12 - write i plus 1 because we do not want
19:16 - for our first output in the console to
19:18 - say enter amount for month 0 because
19:20 - month 0 does not make sense to anyone
19:23 - who is not coming from programming world
19:25 - and then here instead of this end line
19:26 - it would be better to add this column
19:29 - sign so if i run my program again it
19:31 - should be more natural to our user to
19:33 - enter values so it says enter amount for
19:35 - month one i enter one and then two three
19:39 - four five and six for example so here we
19:43 - have our total our average and then our
19:46 - estimate in two years how much money we
19:48 - will have in two years okay great so now
19:51 - this code here looks much better but
19:54 - another problem that i have here is this
19:57 - part of the code here so what we have
19:59 - achieved with this for loop is the
20:01 - following we can say now please can you
20:05 - create an array that has 12 elements for
20:08 - example or 100 or 1000 elements and the
20:12 - only thing that we would have to do in
20:13 - this situation is adjust this index here
20:17 - so indexing of the array that has 12
20:20 - elements starts with 0 and then the last
20:23 - element has the index of
20:25 - 11.
20:26 - okay now this code here should allow us
20:29 - to enter values for 12 months so from
20:32 - the one that has index zero until the
20:34 - one that has index 11. but if we just
20:37 - change this part of the code here and
20:38 - then this part here and we run our
20:41 - program we will have a problem and can
20:44 - you predict what kind of problem will we
20:46 - get so
20:48 - write that in the comments down below
20:50 - before you continue watching this video
20:52 - and the problem without running this
20:54 - code because i already know that there
20:56 - will be a problem with this line of the
20:57 - code here if you want you can run it and
21:00 - then see that
21:01 - all these calculations now will not be
21:04 - correct anymore because
21:06 - here we have hard-coded six months so
21:09 - here we are summing the total on six
21:12 - months and here we are creating an array
21:14 - of 12 months and entering 12 values so
21:17 - these calculations here are not going to
21:19 - be correct anymore so what i want to do
21:22 - is i want to remove somehow this part of
21:25 - the code here so i do not want to hard
21:27 - code this anymore because this is a
21:30 - problem as well so
21:32 - how will i do that well what i can do is
21:35 - i can move
21:36 - this part of the code that sums values
21:39 - of each month in our for loop as well so
21:43 - how do we do that let's comment this
21:45 - part of the code here for a moment and
21:47 - what i want to do is i want to create
21:51 - a variable of type float which i will
21:53 - call total because we definitely need a
21:55 - total and to that variable i will assign
21:58 - a value of zero but instead of hard
22:01 - coding
22:02 - this
22:03 - part of the code here instead of summing
22:06 - the values in our six months like this
22:08 - what i want to do is i want to sum those
22:10 - values in this for loop here so after
22:13 - our user enters value for that specific
22:16 - month i want to add that value to my
22:19 - variable which is called total so here i
22:22 - will say total
22:23 - plus equals
22:25 - and then
22:26 - months
22:28 - array
22:29 - of i
22:30 - so in the first iteration when we ask
22:33 - our user to enter the value he enters
22:35 - that value that value is stored in this
22:37 - variable here we add that value to our
22:40 - total and then we go for the second
22:41 - iteration and then our user enters
22:44 - second number we store that number in
22:45 - this variable here and then again we add
22:48 - that number to our total and then in the
22:51 - third we add third number fourth fifth
22:53 - and so on so that is why it is important
22:56 - for this variable here to have initial
22:58 - value of zero because zero is neutral
23:01 - when it comes to operation of adding
23:03 - whatever you add to zero it is still
23:05 - going to be that same value it's not
23:07 - going to change that's why we have
23:09 - initialized this variable here to zero
23:12 - so now after this for loop finishes we
23:15 - will have the correct value in our total
23:18 - variable but we still have problem here
23:21 - so here it says average is equal total
23:24 - divided by 6 and as we changed this
23:28 - value here from 6 to 12 that means that
23:30 - we will not be dividing this total by 6
23:32 - anymore but here we will have to adjust
23:35 - it to 12
23:36 - as well
23:37 - okay so now if i run my program
23:40 - and then if i enter let's enter one one
23:44 - one so that we can check easily
23:47 - okay and then let's enter two as the
23:50 - last value
23:52 - okay so it says in total you have 13
23:55 - which is correct and then on average you
23:57 - are saving a little more than a dollar
24:00 - and then in two years you will have 26
24:03 - dollars great so that means that this
24:06 - code here is working and that means as
24:08 - well that i can delete this part of the
24:10 - code here which was hard coded
24:14 - okay
24:15 - so i hope that you understand what we
24:17 - have accomplished with the changes that
24:18 - we have made and again if you don't
24:21 - understand for loop i will have a link
24:23 - in the description of this video where
24:24 - you can click and watch a video which is
24:26 - related only to for loop and then
24:29 - understand what this part of the code is
24:31 - doing in more detail okay
24:34 - so again what we have accomplished with
24:36 - the changes that we have made is the
24:38 - following now we can very easily adjust
24:41 - this value here for example let's make
24:43 - this 6 again and then the only things
24:46 - that i have to change is
24:49 - this index here so the array that has 6
24:52 - elements has indexes from 0
24:54 - to 5. so here i will have to write 5 and
24:58 - then here i will have to write six again
25:02 - okay and if i run this code
25:05 - let's check it one more time one one one
25:08 - one
25:09 - two
25:10 - and then six for example okay it says
25:14 - that total is 12 average is two and then
25:16 - in two years we will have uh 48.
25:19 - there is one more thing that i want to
25:21 - show you and that is
25:22 - why did i say that we have to obey these
25:25 - indexes here why the array that has six
25:28 - elements why it needs to have indexes
25:31 - from zero to five what will happen if we
25:34 - put here six for example well let's try
25:37 - let's run our program because we will
25:38 - never know if we don't try so
25:41 - again it says enter amount for month one
25:44 - and let's do that
25:45 - okay
25:47 - and now it is asking to enter amount for
25:50 - month seven
25:52 - so let's enter one there and everything
25:55 - works as it should apparently or does it
25:58 - what happens if i press one more time
26:00 - enter for example
26:02 - oh so we get an exception and that
26:05 - exception says run time check failure
26:08 - and then it says stack around the
26:10 - variable month's array was corrupted
26:13 - well what this here means is basically
26:17 - we are using a memory which does not
26:20 - belong to our array so i will close this
26:23 - now and i want to explain this part of
26:26 - the code here the indexes in this for
26:28 - loop go from 0 to 6 but the valid
26:32 - indexes of this array are from 0 to 5
26:35 - which means that if we try to access the
26:38 - element that has index 6 that element
26:41 - does not belong to this array here that
26:44 - element is someone else's memory and if
26:48 - we try to do that we can get serious
26:50 - problems as you already saw so we got an
26:53 - exception which said that stack around
26:55 - this array here was corrupted so
26:59 - that means as i said here we have to
27:02 - really obey
27:04 - these rules so the indexing of the array
27:06 - starts with zero and then it goes one
27:09 - two three four five and so on so the
27:11 - array that has six elements has indexes
27:14 - from zero
27:15 - to five
27:16 - now some of you may wonder the following
27:19 - wouldn't it be super extra cool if we
27:21 - could do something like this
27:23 - so we create a variable we call it size
27:27 - and then
27:28 - we ask our user to enter the value for
27:31 - that variable and what do we do with
27:33 - this variable well we put it here so we
27:36 - say
27:37 - that we want to create an array that has
27:41 - this many elements so the value that our
27:43 - user has entered so can we do this in c
27:47 - plus what do you think
27:49 - can we
27:50 - uh
27:51 - the answer to that question is no
27:54 - unfortunately you cannot do this in c
27:56 - plus but stay with me until the end of
27:59 - the video because i might have a
28:00 - solution for this
28:02 - so
28:03 - the error that we get here says
28:06 - it says expression must have a constant
28:09 - value which means that this value here
28:12 - has to be a constant basically it has to
28:14 - be known before you compile your program
28:16 - or before you run your program so this
28:19 - value here basically has to be hard
28:21 - coded
28:22 - now i want to explain some
28:23 - characteristics that are related to
28:25 - array that i haven't mentioned before
28:27 - and you need to be familiar with those
28:29 - characteristics in order to really
28:31 - understand arrays so an array is type of
28:34 - collection which stores data in
28:37 - continuous chunk of memory so that means
28:40 - that once you create that array array
28:43 - takes a continuous chunk of memory in
28:45 - your memory and it stores all of the
28:48 - elements one after the other in that
28:51 - chunk of memory now that means that you
28:54 - cannot add more elements to that array
28:57 - so you cannot add
28:59 - an element at the end in the middle in
29:01 - the beginning you cannot do that and if
29:03 - you need to add more elements to your
29:05 - array the only way to do that is to
29:08 - create a bigger array
29:11 - and then to copy that smaller array and
29:13 - you will still have a remaining space
29:16 - for the new values that you want to
29:17 - store in your array so that is the only
29:21 - way to have
29:22 - more elements added to your array so
29:25 - that is one obvious disadvantage of
29:27 - arrays but the fact that arrays store
29:30 - elements in continuous memory has
29:32 - certain advantages as well and the main
29:35 - one is that accessing and finding
29:38 - elements of arrays is very very fast
29:43 - why well because if you want to for
29:45 - example find the element of the array
29:47 - that has index 2
29:49 - you know that you will have to look only
29:52 - in this fixed chunk of memory and the
29:55 - element that has index two is probably
29:57 - going to be somewhere in the beginning
29:59 - of that array whereas if you use some
30:02 - other data collection which stores data
30:04 - in non-continuous memory which means
30:07 - randomly all around your memory
30:10 - accessing and finding elements in that
30:12 - collection is going to be much much
30:14 - slower and one example of collections
30:17 - that store data in non-continuous memory
30:19 - is linked list but we will be talking
30:22 - about linked lists in my future videos
30:25 - so i will make a separate video which is
30:26 - going to be dedicated only to linked
30:28 - lists but again i want to say that
30:31 - arrays and linked lists as well have
30:34 - certain advantages and disadvantages
30:37 - so in arrays more specifically it is
30:39 - that accessing elements of the array is
30:42 - going to be very very fast that's an
30:45 - advantage but disadvantage is that once
30:47 - you create that array you cannot add
30:50 - more elements you cannot change the size
30:52 - of that array but the only way for you
30:54 - to add more elements is again to create
30:57 - a bigger array and then to copy your
30:58 - previous array and still you will have
31:00 - that small
31:02 - space for elements that you want to
31:04 - store for more elements that you want to
31:06 - store there one more thing that i want
31:08 - to mention is remember i said that this
31:11 - code here is not possible in c plus plus
31:14 - but there is a way to solve this problem
31:17 - and that is going to be using dynamic
31:20 - arrays and if you know about dynamic
31:22 - arrays that will give you the ability to
31:25 - create arrays at runtime basically to
31:27 - create arrays with the size that your
31:29 - user enters and defines so
31:32 - i already have a different video which
31:34 - is related to dynamic arrays and if you
31:37 - want to learn that i will link that
31:39 - video here for you and then in order to
31:41 - understand dynamic arrays you will need
31:43 - to learn about pointers in c plus and if
31:46 - you want to learn more about pointers i
31:48 - will put a full playlist in the
31:50 - description of this video so you can
31:51 - watch that after this video so i hope
31:54 - that this video was helpful and if it
31:56 - was definitely give it a thumbs up for
31:59 - the youtube algorithm and then also
32:01 - considering that algorithms and data
32:03 - structures are closely related uh write
32:05 - me in the comments down below if you
32:07 - would like me to make videos related to
32:09 - algorithms as well and then if you don't
32:11 - want to miss my videos in the future
32:13 - make sure to subscribe to my channel and
32:15 - click the bell icon as well so that you
32:17 - can get a notification from me each time
32:19 - that i publish a new video so
32:21 - thank you very much for watching and i
32:23 - am going to see you in my next video bye