00:00 - hi and welcome to my channel in this
00:02 - video i'm going to show you how to build
00:04 - c plus plus user interface application
00:07 - step
00:08 - by step so that it is very easy to
00:10 - understand
00:11 - and we are also going to fix a few bugs
00:14 - together
00:15 - but before i start i just wanted to let
00:17 - you know that
00:18 - recently i created an option for you to
00:20 - buy me a coffee
00:22 - or actually not a coffee but a soy milk
00:25 - latte with cinnamon
00:26 - and a cookie that sounds great
00:29 - so you can do that as a sign of
00:32 - appreciation for all the hard work that
00:34 - i put into this channel
00:36 - so if you like my content if it helps
00:38 - you in any way
00:39 - consider that small gesture of gratitude
00:42 - because that would mean a lot to me
00:44 - and i am going to leave that link in the
00:46 - description
00:47 - but if you don't it's okay i am still
00:50 - going to continue providing
00:51 - free educational content on this channel
00:54 - for you
00:54 - nonetheless so that is all that i wanted
00:58 - to say and now let's jump
00:59 - into the video and let me show you the
01:01 - application that we are going to build
01:03 - so here i have a quiz game that we are
01:05 - going to build together
01:07 - and i want you to notice its main parts
01:10 - here we have a question and then three
01:13 - different
01:13 - answers only one of these three is
01:16 - correct
01:17 - so when you pick your answer you click
01:20 - on
01:20 - confirm answer button and if that answer
01:24 - is correct
01:24 - you will get a point so let's check if
01:27 - this answer is
01:28 - correct it is because i got a point
01:32 - and then if you select an answer which
01:34 - is not
01:35 - correct you will not get a point and
01:38 - then one more thing that i want to show
01:40 - you
01:40 - is the following so let's answer this
01:42 - question here what
01:43 - is the longest river in the world let's
01:46 - say neil
01:47 - and if i click confirm i will get the
01:50 - point because that
01:51 - is correct answer but if i keep
01:54 - clicking on this confirm answer as you
01:57 - can see
01:58 - i will continue getting points so that
02:00 - is also one bug
02:02 - that i want to fix together with you by
02:05 - the way
02:05 - while we are talking about the nail
02:07 - river i want to tell you that in a few
02:09 - days i am going on a vacation
02:11 - to egypt and during that time i will not
02:14 - be posting videos on my youtube channel
02:17 - but i will be posting regularly on my
02:20 - instagram
02:21 - so if you want to be part of that
02:22 - adventure and if you want to see
02:25 - together with me the pyramids and the
02:27 - neil river
02:28 - and all the beautiful beaches that i
02:30 - will visit in egypt and
02:32 - the food the people the culture and so
02:34 - many more things
02:36 - you can add me on instagram my nickname
02:38 - is
02:39 - true code beauty and the link will be in
02:42 - the description
02:43 - so that is the application that we are
02:45 - going to build and for that
02:47 - i'm going to use rad studio and c plus
02:50 - builder
02:50 - i will leave a link in the description
02:52 - that you can use in order to
02:54 - download it and try it out for free and
02:57 - it's very easy to build
02:59 - user interface applications using c plus
03:01 - builder as you will see
03:03 - but if you are not familiar with it at
03:05 - all
03:06 - i recommend you to watch this video i
03:09 - will link it here and
03:10 - also in the description because that
03:13 - video is the introduction into building
03:16 - user interface applications in c plus
03:18 - plus so after you watch
03:20 - that video you can come back and watch
03:22 - this one
03:23 - so as i said i will divide this into
03:25 - simple steps
03:26 - and explain every single one so let's
03:29 - create
03:30 - a multi-device application and let's see
03:32 - what those steps are
03:34 - so inside my c plus builder i will click
03:37 - on
03:37 - file and then new
03:41 - multi-device application with c plus
03:43 - builder
03:44 - and then here i am going to select blank
03:47 - application and click
03:48 - ok and it should create
03:51 - our project okay so here we have our
03:54 - project
03:55 - and now let's see what are the steps to
03:57 - building this quiz
03:59 - application so since i want to build a
04:01 - quiz application that consists of
04:03 - questions and answers the first step
04:06 - would be to create questions class
04:09 - so let's do that i am going to switch to
04:12 - my unit myunit1.cpp
04:15 - okay and i am going to create that class
04:18 - here
04:19 - now a quick tip in order to understand
04:21 - the code that we are going to write
04:23 - now you need to understand object
04:25 - oriented programming you need to know
04:27 - about classes
04:28 - and constructors default constructors
04:31 - and so on and i already have a course
04:33 - about that which i'm going to link here
04:36 - and also in the description so if you
04:38 - need help
04:39 - with the code that we are going to type
04:42 - make sure to watch
04:42 - that course first so let's create
04:47 - a class called question
04:52 - like this okay
04:56 - now what every question in our program
04:59 - will have
04:59 - is the text of the question and then it
05:02 - will have
05:03 - three potential answers and then what we
05:06 - also want to store is the information
05:08 - about
05:09 - which answer is the correct one so let's
05:11 - create
05:12 - those members inside this questions
05:14 - class but
05:15 - since we will be accessing those members
05:17 - outside of the class
05:19 - we need to make them public so i will
05:21 - first say
05:23 - public like this and then let's
05:26 - create char pointer
05:29 - called text so this is going to be the
05:33 - text
05:33 - of our question now let's create
05:36 - char pointer which will be called
05:40 - answer or actually answer one because we
05:44 - have three
05:44 - answers and i am going to copy this line
05:48 - and paste it two more times so that we
05:50 - have
05:51 - answer two and then answer three as well
05:54 - and then the last thing will be the
05:57 - information about
05:58 - which one of these three answers is the
06:01 - correct answer to this
06:03 - question here so let's create an integer
06:06 - property called
06:08 - correct answer
06:13 - like this and here we are going to store
06:15 - either number one or two
06:17 - or three okay so after i have created
06:21 - these properties let's also create a
06:24 - constructor
06:27 - so i want to create two constructors the
06:29 - first one will be
06:30 - default constructor so i will say
06:33 - question
06:36 - like this okay so
06:39 - this is going to be our default
06:41 - constructor
06:42 - and the second constructor that i want
06:44 - to create will be
06:46 - custom constructor that will receive all
06:48 - of the values
06:49 - and assign them to these properties so
06:52 - i am going to copy this line paste it
06:56 - here
06:58 - and this second constructor as i already
07:01 - said
07:01 - will receive parameters so it will
07:04 - receive
07:05 - char pointer text it will receive
07:09 - char pointer answer
07:12 - 1 and then char pointer answer 2
07:17 - and char pointer answer 3
07:20 - and also integer correct
07:24 - answer so let's assign these
07:28 - values that we received inside our
07:30 - constructor to these
07:31 - properties here so i am going to
07:34 - say that the text property
07:38 - is equal to the text that we received
07:40 - inside our constructor
07:43 - and then let's assign this one so let's
07:46 - say that
07:48 - answer one is equal to a n
07:51 - s one i'm going to copy this line
07:54 - two more times here and here so
07:58 - answer two will be equal to this answer
08:01 - two parameter and then answer three
08:04 - will be equal to answer three
08:07 - and then correct answer will be equal to
08:11 - correct answer like this
08:15 - so with this we have successfully
08:17 - created
08:18 - question class together with all of its
08:21 - properties
08:22 - default constructor and then also custom
08:24 - constructor that we will use
08:26 - in order to create questions for our
08:29 - quiz
08:29 - application one quick tip is to run your
08:32 - application after
08:33 - every single step so that you can see if
08:36 - you have any errors because
08:38 - it is going to be much easier to fix
08:40 - them now
08:41 - than to fix them later when you have
08:43 - multiple errors from many different
08:45 - steps so now i'm going to run my program
08:49 - okay as you can see i don't have any
08:51 - errors and
08:52 - if you also don't have any errors that
08:55 - means that we have successfully
08:57 - finished the first step and now it is
09:00 - time to move
09:01 - to the second step and the second step
09:04 - is
09:05 - generating the questions so now we are
09:08 - going to generate the actual
09:09 - data the questions that we are going to
09:11 - ask our user
09:13 - so let's create a function
09:17 - called load questions and
09:20 - that function will return a queue of
09:22 - questions
09:23 - now if you are not familiar with queues
09:26 - data structure make sure to watch
09:28 - this video i will also link it in the
09:30 - description
09:31 - that video is going to explain what a
09:33 - queue data structure
09:35 - is but basically a queue is a data
09:37 - structure that allows you to push
09:39 - elements
09:40 - at the end and then you can remove them
09:42 - from the front
09:43 - okay so in order to use queue data
09:46 - structure
09:47 - you need to say here include
09:51 - q like this
09:55 - so now we can create the function that i
09:57 - mentioned and
09:58 - the return type of that function will be
10:01 - stdq
10:02 - so i will say stdq
10:07 - like this and it is going to be a queue
10:10 - of question okay and
10:13 - i will call that function load
10:17 - questions like this
10:20 - okay so let me very quickly find a few
10:23 - questions on the internet that we are
10:25 - going to use for this quiz application
10:28 - and then i will be back to explain the
10:30 - code so i have created
10:32 - three questions and for that i used the
10:35 - constructor that we built in the
10:37 - previous step
10:38 - that constructor receives five
10:40 - parameters it receives
10:42 - the text of the question and then first
10:45 - answer
10:46 - second answer and third answer and then
10:49 - the fifth parameter is the information
10:51 - about which one of these three
10:54 - answers is the correct one so that is
10:57 - exactly what i have passed
10:59 - on the creation of these three
11:02 - questions so as you can see here the
11:05 - first question
11:06 - says which color does not appear on the
11:08 - olympic rings that is the first
11:10 - parameter
11:11 - and then i have passed black orange
11:14 - let's scroll a little bit okay and then
11:17 - the third answer is
11:18 - green and then i have passed also the
11:21 - information about
11:22 - which one of these three answers is the
11:25 - correct
11:26 - one and here it says that the correct
11:28 - answer is
11:30 - the second one which means that orange
11:32 - does not appear on the olympic
11:34 - rings and then i have done the same for
11:37 - this
11:37 - second question and then for third
11:39 - question as well
11:41 - and then i have created a queue of
11:44 - question called
11:45 - questions and i have pushed those
11:48 - three questions into my queue and then i
11:52 - will
11:52 - return that queue of questions
11:56 - from this function called load questions
11:59 - so that is the second step and
12:03 - if you need to generate more questions
12:05 - you can use
12:06 - the same approach that i demonstrated
12:08 - here you would just add
12:09 - uh question number four and then you
12:11 - would construct that question and push
12:13 - it into the queue and then question
12:15 - number five and six and seven
12:17 - and so on however many questions you
12:19 - need so
12:20 - one last thing that i want to do is i
12:22 - want to run this application in order to
12:24 - make sure that i don't have any errors
12:28 - and i don't so that means that we have
12:31 - successfully finished
12:32 - step number two the third step is
12:35 - building the user interface
12:37 - so let's switch to this design mode here
12:40 - and now i'm going to add all of the
12:42 - controls that we need for this
12:44 - application so the first one will be
12:48 - label where we are going to show the
12:50 - text of our question
12:52 - so i will add label
12:55 - let's place it here for example
12:59 - and then i need three radio buttons for
13:02 - three
13:02 - answers let's add that as well
13:06 - so radio button one i will add it
13:10 - here and then let's add two more
13:15 - okay here is the second one and then
13:19 - the third one okay
13:23 - and then i need also a button that i
13:25 - will use
13:26 - in order to confirm my answer so i will
13:29 - say
13:30 - button here and i will put that
13:34 - button like this
13:37 - okay and then i need two more things i
13:40 - need
13:40 - two labels and the first one
13:44 - i will place it here it will say just
13:48 - points and then we are going to use the
13:50 - second label in order to show
13:52 - actual points to our user so let's add
13:55 - another one okay
13:58 - and i will put it here like this
14:02 - okay so let's make this form a little
14:06 - bit smaller
14:07 - like this okay now one thing that i also
14:10 - want to do is i want to change
14:12 - the names of these controls because now
14:15 - they have default names so
14:17 - label one radio button one button one
14:19 - label two
14:20 - and so on and what i want to be here
14:23 - instead
14:24 - is i want this label here to be called
14:26 - for example
14:27 - question label and then this radio
14:30 - button one i will call it
14:31 - answer one radio button and then answer
14:34 - two radio button
14:35 - and so on so let's do that i am going to
14:38 - select
14:39 - this label one and in this object
14:41 - inspector
14:42 - i will find name property
14:46 - so here is name label1 i will change
14:49 - that
14:49 - to question label
14:53 - like this and then let's do the same for
14:56 - our
14:56 - radio button one instead of naming it
14:59 - radio button one i will call it
15:02 - answer one radio button
15:05 - like this okay and then let's change the
15:09 - name of our
15:10 - second radio button i will call it
15:12 - answer two radio button
15:14 - and then the third one you guessed it
15:17 - it's going to be called
15:18 - answer three radio button okay
15:21 - and then this confirm button here that
15:24 - is the name that i want to give it so
15:26 - i will say confirm button
15:29 - like this and then this label to
15:33 - for this label too i will change another
15:36 - property
15:37 - and that is text property so let's find
15:40 - that okay and instead of calling it
15:43 - label 2 i will say
15:46 - points and then column sign
15:49 - ok and then this label 3 i will call
15:53 - this label points label because this one
15:56 - is going to
15:56 - show always this points text and then
15:59 - here we want to change
16:00 - the value so that it represents the
16:03 - number of points that our user
16:05 - has so here i will say
16:08 - that the name of my label is
16:12 - points label
16:15 - like this okay perfect
16:19 - so let's run our program and as you can
16:22 - see here is the interface of our
16:24 - application
16:25 - and one thing that i'm noticing here is
16:27 - that this answer 1 radio button text is
16:30 - not
16:31 - visible entirely so what i'm going to do
16:34 - i am going to increase the size
16:38 - of this and then this one as well
16:41 - and this third answer and then i'm going
16:44 - to also increase the size of this
16:46 - questions label because we want to be
16:48 - able to see the entire
16:49 - question so if i run my program again
16:52 - as you can see the entire answer text
16:56 - is visible so we have successfully fixed
16:59 - the user interface error that we had
17:01 - and one more thing that i want to
17:03 - explain is the default
17:05 - behavior of a radio button control
17:08 - so when you select a specific answer
17:12 - these remaining two answers are going to
17:15 - be
17:15 - unselected by default and that is
17:17 - something that we didn't have to code
17:19 - because
17:20 - that is the default behavior of a radio
17:23 - button control so we already have that
17:25 - behavior without having to do
17:27 - anything without having to write any
17:29 - code so when i select
17:31 - an answer the remaining two are
17:33 - unselected
17:34 - by default so let's close this
17:37 - program and if you have successfully
17:40 - built your application and if it looks
17:42 - like mine
17:42 - that means that you have successfully
17:44 - finished step
17:46 - three which is building user interface
17:49 - and now we can move to step
17:51 - four step number four is to connect this
17:54 - user interface with the actual data
17:57 - so now i want to connect this form
18:00 - with the questions and answers that we
18:03 - generated
18:04 - so let's move to this unit 1 dot cpp
18:08 - and here i want to create two global
18:11 - variables
18:12 - now why i want those variables to be
18:14 - global
18:15 - well as you already know if you create
18:18 - a variable inside a function which means
18:21 - locally
18:22 - like we did here for example or here
18:25 - that variable is going to be available
18:27 - only inside
18:29 - the scope of that function which is from
18:32 - this curly bracket here until this curly
18:35 - bracket
18:35 - here but what i want to do is i want to
18:39 - have
18:40 - those variables that i will create i
18:42 - want to have them available inside
18:44 - many different functions so i want to
18:46 - access those variables from
18:48 - different functions so let's create
18:51 - them globally i will create them here
18:55 - so i will create std
18:58 - q of
19:01 - question and i will call
19:05 - that variable questions let's copy this
19:08 - name
19:09 - okay so that is the first
19:12 - variable that i want to create and the
19:15 - second variable
19:16 - will be just one question
19:19 - and i will call it current question
19:24 - like this and now i will use these two
19:28 - variables
19:28 - in order to connect these questions that
19:31 - we generated here
19:33 - with our user interface and i will use
19:36 - these two variables inside this function
19:38 - here
19:39 - and if you read the name of this
19:41 - function you will notice that
19:43 - this function here is actually the
19:46 - constructor of
19:47 - our form one so this function
19:51 - will be invoked on the construction
19:54 - of this form here which is basically
19:57 - when we run our program
19:59 - so inside this function what i want to
20:02 - do is i want to load
20:05 - all of these questions that we generated
20:07 - inside
20:08 - this questions queue and then i want to
20:11 - take the first question
20:13 - and load it inside this current question
20:16 - variable
20:17 - and i will show that first question on
20:20 - my user
20:21 - interface so let's do that
20:24 - as i already said the first step is to
20:27 - load
20:28 - these questions into this variable here
20:32 - so i will say questions is equal to
20:37 - load questions like this
20:40 - so that is the first step and then the
20:44 - second step
20:45 - is to take the first question from
20:48 - this queue here and put it into this
20:51 - variable here so i will say that current
20:54 - question
20:55 - is equal to questions dot
20:59 - front like this so this line of code
21:02 - here
21:03 - means please take the question that is
21:06 - at the front
21:07 - of this queue here and put it into
21:10 - current question
21:11 - variable now after we have stored our
21:14 - current question into this variable
21:17 - i will use that variable in order to
21:20 - show
21:20 - the first question to our user now
21:24 - one thing that we did in the previous
21:26 - step is
21:27 - we named all of these controls
21:30 - according to their purpose so now i'm
21:33 - going to use
21:34 - those names in order to access those
21:36 - controls from my code
21:38 - so this label is called question label
21:42 - this is called answer 1 radio button
21:44 - answer 2 radio button
21:46 - answer 3 radio button confirm button and
21:48 - then
21:49 - points label so let's switch again to
21:52 - unit 1.cpp and let's use those names
21:55 - in order to access those controls and
21:58 - put the actual data into them
22:00 - so i will say that questions
22:04 - label its text
22:07 - property will be equal to
22:10 - current question dot text
22:14 - like this and make sure to use this
22:16 - symbol here because
22:18 - this is a pointer okay so with this we
22:22 - have successfully loaded
22:23 - the text into our questions label and
22:26 - now let's do the same with the answers
22:28 - to our questions
22:30 - so i will return to my design view
22:34 - and i will copy the name of my
22:37 - answers one radio button so that i don't
22:39 - make a typo
22:40 - and then i will go back to my unit1.cpp
22:44 - and here i will say that answer1
22:47 - radio button its text
22:50 - property is equal to current
22:54 - question dot answer one
22:58 - like this and let's do the same
23:01 - for the second answer
23:04 - and the third answer as well i will just
23:07 - adjust
23:08 - the name so i will say answer two radio
23:10 - button and then
23:11 - answer three radio button and here i
23:14 - will say
23:14 - answer to and answer three okay
23:18 - so let's run our program to see what we
23:20 - have achieved so far
23:22 - okay and as you can see we have multiple
23:25 - errors so let's fix those first
23:27 - and as you can see here the first error
23:30 - says
23:31 - use of undeclared identifier load
23:34 - question
23:35 - that is this error here and then the
23:37 - second error is
23:39 - use of undeclared identifier questions
23:41 - label
23:42 - and that error is here so to return to
23:45 - our first
23:46 - error this function here load question
23:49 - it is not
23:50 - actually called load question but load
23:53 - questions with s so i'm going to correct
23:56 - that error
23:57 - and then the second error was here and
24:00 - it is
24:00 - not questions label it is question label
24:04 - and in order to check that
24:06 - you can go back to your design and then
24:08 - click on question label
24:10 - and here you are going to use this name
24:12 - property in order to access
24:14 - that control from the code so once more
24:18 - i will return here and i will paste
24:20 - the exact name here so if i run my
24:23 - program now
24:24 - let's see what's going to happen as you
24:26 - can see we have three more errors and
24:28 - those
24:29 - are as you can see here it says no
24:32 - member named
24:33 - text and t radio button that is because
24:36 - we named this property with lowercase t
24:40 - and we should use capital t and we have
24:43 - also copied our code so we have made
24:46 - the same mistake on these two questions
24:48 - as well so
24:49 - that means that you should not copy the
24:51 - code
24:52 - so if i run the program we
24:55 - finally get the result that we expect
24:58 - and that is a question
25:00 - here and then three answers inside our
25:02 - radio
25:03 - buttons so let's close this program and
25:06 - let me do
25:06 - one last thing for this step so here
25:10 - after i have
25:11 - assigned the text of our question and of
25:14 - our answers what i want to do is i want
25:17 - to remove
25:18 - the first question from my queue because
25:20 - we already have
25:21 - shown that question to our user and in
25:24 - order to do that we use
25:26 - pop function so i will say
25:29 - questions this is my cue
25:32 - and i will say pop like this
25:36 - okay and let's add one empty line here
25:39 - like this and with this nothing should
25:41 - change on our interface
25:43 - but we are just removing the question
25:45 - that we already showed to our user
25:48 - we are removing it from our queue which
25:50 - means that our user will not see it
25:52 - again after he answers that question
25:55 - step number five
25:56 - is to define what is going to happen
25:59 - when we change our selection so when we
26:02 - click
26:03 - on our answers and for that we are going
26:06 - to use
26:07 - special functions which are called event
26:09 - handlers
26:10 - and those are just like regular
26:12 - functions except that they
26:14 - are going to be invoked when we click on
26:17 - a specific
26:18 - answer so how do we do that how do we
26:21 - create those functions
26:23 - well it's actually very easy i will
26:25 - switch to
26:26 - design tab and in order to create
26:29 - event handler for the click of this
26:32 - first answer i will just
26:34 - double click on it and as you can see
26:37 - it has created this answer one
26:40 - radio button change function and it is
26:43 - currently empty but here we are going to
26:45 - define
26:45 - the behavior that we want when we change
26:48 - our selection to answer
26:50 - one but let's first create these event
26:53 - handlers for our answer two and answer
26:55 - three
26:56 - i will go back to my design tab and i
26:59 - will double click on my answer two and
27:01 - as you can see now we have
27:02 - two event handlers and then let's do the
27:05 - same
27:06 - for this third answer okay so here we
27:09 - have created
27:10 - three event handlers for our three
27:13 - answers
27:14 - and what i want to do now is i want to
27:16 - create
27:17 - one more global variable i will
27:20 - do it here so here i will create a
27:23 - variable called selected answer
27:26 - it will be of type int so let's say
27:30 - selected answer
27:33 - okay and inside this variable
27:37 - i just want to store the information
27:39 - about which answer our user has
27:42 - selected so when this
27:45 - function here when this event handler is
27:48 - executed
27:48 - this event handler called answer 1 radio
27:52 - button change
27:53 - that means that our user has selected
27:55 - answer 1 so i will store
27:57 - inside this selected answer variable
28:00 - number
28:01 - one and then in this second situation
28:04 - i will store number two and then for
28:07 - this
28:08 - third handler i will store number three
28:11 - and i will explain how we will use this
28:14 - information how we will use
28:16 - this selected answer variable in the
28:19 - next step
28:19 - so keep watching but there is one more
28:22 - thing that i want to do for this step
28:24 - and that
28:25 - is to run our program in order to make
28:27 - sure that we didn't make
28:28 - any errors and the code that we have
28:31 - written
28:32 - did not made any visible difference
28:35 - to our program but it was just a
28:38 - preparation for the next
28:40 - step which is step number six and that
28:43 - is
28:44 - handling this confirm button behavior
28:47 - so let's do that so in order to complete
28:50 - step number six let's switch to our
28:53 - design tab
28:54 - and here i want to create a handler for
28:57 - my confirm
28:58 - button and in order to create a handler
29:01 - i will just double click on that button
29:04 - and as you can see
29:05 - here we have a function called confirm
29:07 - button click
29:08 - so here we are going to describe what
29:11 - will happen
29:12 - when our confirm button is clicked
29:15 - so what should happen logically what
29:18 - should happen when you click
29:19 - on confirm well there are a few things
29:23 - that should happen
29:24 - the first one is i want to check if my
29:27 - user
29:28 - has selected the correct answer and if
29:31 - he has
29:31 - i want to give him a point so let's do
29:34 - that first
29:35 - i will say if
29:39 - this selected answer that we prepared in
29:41 - the previous
29:42 - step so if that selected answer
29:46 - is equal to the value that is stored
29:50 - inside
29:51 - current question and
29:54 - inside its property called
29:57 - correct answer so i will paste
30:01 - that here as well so if
30:04 - our selected answer is equal to
30:07 - current question correct answer what i
30:11 - want to do
30:12 - is the following i want to increase
30:15 - the number of points that my user has
30:18 - but
30:18 - one thing that we have not created is a
30:21 - variable where
30:22 - we are going to store the points for our
30:24 - user
30:25 - so let's do that i am going to create
30:28 - that
30:28 - as a global variable as well i will
30:31 - create it here
30:33 - and it will be of type in so i will say
30:36 - int
30:37 - points okay and i will initially say
30:40 - that
30:41 - points are equal to zero because when
30:43 - the user starts the program he has
30:45 - zero points so
30:48 - let's say that if our user has selected
30:52 - the correct answer
30:54 - we are going to increase his points
30:58 - and then i also want to show that
31:01 - information
31:01 - on my user interface so i will go to my
31:05 - design tab
31:06 - and i will take the name of this control
31:08 - here
31:09 - it is called points label okay
31:12 - and i will say here that points
31:15 - label its text property
31:19 - is equal to points like this
31:23 - and this here should be capital letter
31:26 - t so let's run our program and let's see
31:29 - what has
31:30 - changed okay so if
31:33 - i select orange because that is the
31:36 - color that does not appear on the
31:37 - olympic rings and i
31:39 - click on this confirm button as you can
31:42 - see
31:43 - we have received one point so that is
31:46 - the behavior that we have achieved so
31:48 - far
31:49 - with this code here the next thing that
31:52 - should happen
31:52 - after this is we should check if
31:56 - our queue of questions is empty and
31:59 - if it is not empty we are going to take
32:02 - the next question that is at the front
32:04 - of the queue
32:05 - and we are going to show that next
32:07 - question to our user
32:08 - and then we will remove it from the
32:10 - queue so let's
32:12 - do that let's say if
32:17 - this questions q
32:20 - is not empty like this
32:24 - here i want to do what i just explained
32:27 - and that is
32:28 - i want to take the question at the front
32:30 - of the queue and show it to my user
32:32 - so i will say that
32:35 - current question
32:40 - is equal to questions
32:43 - dot front like this
32:46 - so with this we have taken the first
32:49 - question at the front of the queue
32:51 - and we have assigned it to our current
32:53 - question
32:54 - and now i want to show that on my user
32:57 - interface
32:58 - so i will use the same code that we had
33:03 - here okay and i will say here
33:07 - that now my questions label its text
33:11 - will be equal to the text inside this
33:14 - current question and then i will show
33:16 - answer one of my current question
33:19 - as a text of my first radio button
33:22 - and then answer to as a text of the
33:25 - second radio button and then answer
33:27 - three
33:27 - inside this third radio button
33:30 - so let's see what has changed after we
33:33 - added
33:34 - this code here so if i run my program
33:38 - and i select black for example
33:41 - and click confirm button as you can see
33:44 - we have not received any points
33:46 - but we have switched to the next
33:49 - question
33:50 - now one thing that i don't like is that
33:53 - this here this first answer is selected
33:56 - by default
33:57 - and that is because in the previous
33:59 - question we selected
34:00 - that button and it remained selected so
34:04 - that is why this radio button here is
34:06 - checked so that
34:07 - is one bug that i want to fix so let's
34:11 - close this program
34:12 - and let's say after we have loaded
34:15 - the next question there are two things
34:18 - that we have to do
34:20 - the first one is that i want to pop that
34:23 - question so
34:24 - i want to remove that question from this
34:27 - questions queue so i will say
34:31 - questions dot pop
34:34 - and the second thing is the bug that we
34:37 - noticed
34:37 - and that is that these buttons are
34:40 - remaining checked if they were checked
34:43 - in the previous question
34:45 - they remain checked in the next question
34:47 - so
34:48 - i want to fix that as well so i will say
34:52 - answer one radio button its property
34:55 - called
34:56 - is checked is equal to false
35:01 - and i will do the same for the remaining
35:04 - two
35:05 - buttons so i will say also that answer
35:08 - two
35:08 - is not checked and then answer three is
35:10 - not checked as well so
35:12 - i basically want to reset these three
35:15 - buttons okay and let's format these
35:19 - buttons so that our code is a little bit
35:22 - prettier
35:23 - okay so let's run our program again
35:26 - and i'm going to select orange confirm
35:29 - and as you can see i received
35:31 - one point but one more thing that
35:33 - happened is that
35:34 - the selection here has been cleared so
35:38 - now i can select
35:39 - again we don't have that previous choice
35:42 - remaining in our next question so we
35:45 - have successfully fixed
35:47 - one bug so let's run our program again
35:50 - in order to demonstrate two more bugs
35:52 - that i want to fix
35:53 - together with you and the first bug is
35:57 - on this screen
35:58 - here if you can notice it write me in
36:00 - the comment section
36:02 - so the first bug is this
36:05 - part here it says points label instead
36:08 - of showing
36:09 - 0 as the default number of points that
36:12 - our user has when he starts the program
36:15 - so that is the first bug that i want to
36:17 - fix i am going to close
36:19 - the program and i will return
36:22 - to my t form constructor
36:25 - and at the end i will say that my
36:29 - points label its text
36:33 - property will be equal to 0 when our
36:37 - program
36:37 - first starts or you can also
36:40 - use this variable here because it is
36:44 - initialized to zero when we start our
36:47 - program
36:48 - so that is the fix for the first bug and
36:51 - if i run my program
36:54 - as you can see we have successfully
36:55 - fixed the bug and now we get
36:57 - the value of zero when we start our
37:00 - program
37:01 - so let's get one point let's say for
37:03 - example orange
37:04 - and then confirm and let's say for
37:06 - example that i don't know the answer
37:08 - here so i'll
37:09 - select na2cl and i don't get a point and
37:13 - then let's say also that i don't
37:15 - know the answer here so i will click on
37:18 - amazon
37:18 - and click confirm so i have finished
37:22 - answering to all three questions and i
37:25 - have gained
37:26 - only one point but what happens
37:29 - if your user is malicious user and he
37:31 - tries to
37:33 - hack your program so what happens if he
37:35 - tries doing something like this
37:37 - so now i'm going to change my answer and
37:39 - i will try mississippi
37:41 - okay that is not the correct answer as
37:43 - well so let's try neil then
37:45 - and then click confirm whoa something
37:48 - has happened we have gained
37:50 - one point even though we have previously
37:53 - answered this question
37:54 - so if i keep clicking on confirm
37:58 - as you can see i will gain a lot of
38:01 - points which is another bug that i want
38:04 - to fix together with you
38:06 - so the way that i want to fix this bug
38:08 - is
38:09 - i want to disable this button once my
38:12 - user has answered to all of the
38:14 - questions and
38:16 - if i don't have any more questions in my
38:18 - queue
38:19 - i will just disable the button and i
38:21 - will say
38:22 - game over or the end so let's do that
38:26 - let's close the program
38:29 - and here inside
38:32 - this confirm button click handler
38:35 - i will add else situation
38:40 - so when our cue is not empty
38:44 - we are doing this but
38:47 - if our queue is empty so if we don't
38:50 - have any more questions for our user we
38:53 - will define
38:54 - what is going to happen inside this else
38:56 - block so
38:57 - here i'm going to say confirm
39:01 - button its property called
39:05 - enabled will be equal to false
39:08 - so i want to disable my confirm button
39:11 - if we don't have more questions inside
39:15 - our queue and one more thing that i want
39:17 - to do is i want to say for example
39:20 - confirm button its
39:23 - text property should be changed to
39:26 - the end or game over
39:30 - so if i run my program again
39:33 - let's see if we fixed the problem
39:36 - so i'll say orange and then nacl2
39:40 - and here i will click for example
39:42 - mississippi and then
39:43 - neil but i don't have the chance
39:47 - to click on this button anymore and by
39:50 - doing that
39:50 - by disabling this button we fixed the
39:53 - bug that we had so now we cannot
39:56 - gain any more points after we answer
39:59 - this last question only once
40:02 - so that is the application that i wanted
40:04 - to build together with you
40:06 - all the links and details will be in the
40:08 - description
40:09 - and i also want to give you a few tips a
40:12 - few suggestions
40:13 - on how you can improve this program and
40:16 - practice programming on your own
40:18 - i want to give you two suggestions the
40:20 - first one is that
40:21 - you don't have to give one point for
40:24 - every single question
40:25 - maybe some questions are going to be
40:27 - harder so you want to give for example
40:29 - two points or three points
40:31 - so that is going to be the first
40:33 - suggestion you are going to assign
40:36 - the amount of points that every question
40:38 - has
40:39 - and once the user answers that question
40:42 - correctly you are going to give him
40:44 - that many points now the second
40:47 - suggestion
40:48 - is you can make this quiz application as
40:51 - a school
40:52 - test so you don't show the result to
40:55 - your user immediately
40:57 - you show him the result only after he
40:59 - finishes
41:00 - the entire quiz so i'm leaving that to
41:04 - you
41:04 - to play with different options and
41:06 - practice programming on your own
41:08 - and if you have any questions feel free
41:10 - to write me in the comment section
41:12 - and please give this video a thumbs up
41:14 - for the youtube algorithm and share it
41:16 - with your friends
41:17 - and if you want to help me to make this
41:20 - something that i can do
41:22 - full time hopefully in the future and
41:24 - create
41:25 - a lot more videos like this one consider
41:27 - using the link
41:28 - in the description to get me a coffee or
41:31 - a cookie
41:31 - or something like that i would
41:33 - appreciate it very much so
41:35 - thank you if you do that and also thank
41:37 - you for watching this video
41:39 - i will see you in the next one bye