With timestamps:

00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to write
00:03 - Python program to sort numbers using
00:06 - selection sort algorithm so guys the
00:09 - selection sort algorithm sorts an array
00:11 - by repeatedly finding the minimum
00:13 - element considering the ascending order
00:15 - from the unsorted part and putting it at
00:19 - the beginning so guys we are going to
00:21 - check this with the help of examples as
00:22 - well basically the selection sort
00:24 - algorithm finds the minimum element and
00:27 - places it at the correct position in the
00:29 - unsorted part now the algorithm
00:31 - maintains two sub arrays in a given
00:33 - array so basically the first sub array
00:36 - which is already sorted the remaining
00:38 - sub array that is unsorted now in every
00:40 - iteration of the selection sort the
00:43 - minimum element considering the
00:44 - ascending order from the unsorted sub
00:46 - array is picked and moved to the sorted
00:49 - sub array so guys for example as you can
00:51 - see this is the array that we are
00:53 - considering these are the elements that
00:55 - are present in the unsorted array and
00:57 - then in the first pass what will happen
00:58 - is out of all these elements the minimum
01:01 - element that is 11 will be considered
01:03 - and it will be placed in the correct
01:05 - position that is the first position over
01:07 - here so after the first pass as you can
01:09 - see the 64 has been replaced by 11 and
01:12 - this 64 that was present at the first
01:13 - position was being placed at the last
01:16 - position now for the second pass we take
01:18 - the second element that is 12 which is
01:20 - the second smallest element and it will
01:22 - be placed at the second position and so
01:24 - on all the elements inside the array
01:27 - will be sorted using the selection sort
01:29 - algorithm by using the minimum element
01:32 - in every pass so guys let us check the
01:34 - Python program in order to implement the
01:36 - selection sort using vs code so guys
01:39 - over here we will have the variable name
01:40 - as list one and we will Define the
01:42 - elements as these elements that we have
01:45 - just seen so I'll just copy this and
01:47 - paste this over here inside the open and
01:49 - close Square records so guys this is the
01:51 - way that we have defined the list over
01:52 - here in the python now guys what we will
01:55 - do is we will Define the selection sort
01:57 - function in order to implement the
01:59 - selection so algorithm which will return
02:01 - as the sorted array over here so first
02:04 - of all we will print the unsorted array
02:06 - that is the original array over here so
02:09 - we say original list and then colon and
02:12 - then we will simply print the list one
02:14 - over here which is the unsorted list in
02:17 - this case now what we will do is we will
02:19 - print the sorted list as well after
02:21 - calling the selection sort function so
02:25 - over here we will have sorted list and
02:28 - then colon and then again what we will
02:31 - do is over here we will call the
02:33 - function that is selection sort that we
02:35 - are going to Define it is going to pass
02:37 - one parameter that will be list one over
02:40 - here that is the entire list that we
02:42 - have defined now guys what we will do is
02:44 - we will Define this function that is
02:46 - selection sort before the Declaration of
02:48 - this list once over here we will have
02:50 - def keyword followed by the selection
02:53 - sort function name and then it will take
02:55 - one parameter that is going to be list
02:57 - one we are going to have the same name
02:59 - that is is list one over here so guys
03:01 - over here how the selection sort
03:03 - algorithm works is we have to find the
03:05 - minimum element so what we will do is we
03:07 - will have the for Loop for I in range
03:11 - and then it will be the length of this
03:13 - list so guys in order to find the length
03:15 - of the list it will go from 0 up to the
03:18 - Len method we can use in order to find
03:21 - the length of this list one over here
03:24 - and then guys for each iteration what we
03:26 - will do is we will find the main index
03:28 - so basically the initial main index it
03:30 - is equal to I so what we are doing over
03:33 - here is the first element that is 64
03:35 - over here we are assigning the index of
03:37 - this first element to the main index
03:39 - considering that this is the minimum
03:40 - element now guys what we will do is we
03:43 - will have the nested for Loop over here
03:45 - so for J in range and then it will go
03:48 - from I plus 1 this time so from this
03:51 - next element which is the unsorted array
03:54 - we have to iterate through all the
03:56 - elements and we need to compare those
03:58 - elements with this first element that is
04:00 - 64 which we are assuming that it is the
04:02 - smallest element over here so we will
04:04 - say I plus 1 in this case and then again
04:08 - it will go up to the length of list one
04:10 - so we say Len and then list one over
04:13 - here and then guys inside this we need
04:15 - to compare these numbers that is being
04:18 - represented by this Jade index with the
04:20 - ith index over here and then we need to
04:23 - see which of the numbers is smallest
04:25 - from this so what we will do is we will
04:27 - have the if condition and then inside
04:29 - this we will have list 1 of J if it is
04:34 - less than less than 1 of Min Index this
04:38 - time so we say Min Index this time so if
04:42 - any of these numbers that is of the
04:44 - unsorted part if it is less than this
04:47 - number that is the first element over
04:49 - here then we are going to assign the J
04:52 - the index to the main index over here so
04:54 - after this colon we will have Min index
04:57 - it is equal to J so guys basically what
05:00 - we are doing is first of all we have
05:01 - assumed that this is the minimum number
05:03 - and if in case we find any of these
05:06 - numbers which is smaller than the first
05:08 - number over here we will assign that
05:10 - particular numbers index to the main
05:12 - index over here so 25 will be Min index
05:15 - initially and then 12 will be again Min
05:17 - index since 12 will be less than 25 and
05:20 - then since 22 is not less than 12 so
05:22 - mean index will be still represented by
05:24 - 12 and then finally we get 11 which is
05:26 - again less than 12 over here so finally
05:29 - we will get the Min index as the last
05:31 - element over here now guys after the end
05:33 - of this inner for Loop we will have the
05:36 - Min index which is representing the
05:38 - smallest number out of all these four
05:40 - numbers over here so the smallest number
05:43 - needs to be placed at the first position
05:45 - so what we will do is after this inside
05:48 - inner for Loop we will simply swap both
05:51 - these numbers that is 11 and 64. so how
05:53 - that can be done we can simply use list
05:56 - one and then we will use the I the index
05:59 - over here yes it is representing the
06:01 - first element over here so less of I and
06:04 - then comma we will again have less 1 of
06:07 - Min Index this time so we have Min index
06:10 - it is equal to so basically this I is
06:13 - being represented as 0 index over here
06:15 - and Min index is the last index over
06:18 - here so these should be swapped with
06:20 - each other so over here we will have
06:22 - list one and then this will be Min Index
06:26 - this time and then this will be list one
06:30 - and then I so guys basically this number
06:32 - that is list one of Min index which is
06:34 - 11 it will be assigned to list I which
06:37 - is 64 right now so 11th will be placed
06:40 - at this position that is the first
06:41 - position and 64 which is being
06:43 - represented as list 1 of I will be
06:46 - placed at the last position over here
06:48 - and then guys the control flow will go
06:50 - to the next iteration as well in order
06:52 - to get the correct number at the second
06:54 - position and so on all the numbers will
06:56 - be sorted using the selections hot
06:58 - algorithm so guys let me just save this
07:00 - file now and try running this code so as
07:02 - you can see we are getting the original
07:04 - list over here but sorted list is none
07:06 - that's because we are not returning this
07:08 - list one over here after the execution
07:11 - of the function so what we have to do is
07:13 - we have just missed the return statement
07:15 - over here so we need to return the list
07:17 - 1 which is already being sorted over
07:19 - here so let me just save this file now
07:21 - once again and try running this code so
07:23 - as you can see we have got the sorted
07:25 - list now it is saying 11 12 22 25 and
07:28 - then 64. so guys all the elements are
07:31 - sorted Now using the selection sort
07:32 - algorithm that we have just implemented
07:35 - using these many lines of code now guys
07:37 - let us see another example over here
07:39 - I'll just change the content of the list
07:41 - one so let's say we have negative 3
07:43 - comma negative 5 and then negative 1 and
07:46 - then let's say 15 and then 14 and then
07:49 - 10 and then 100 and then let's say 54
07:53 - and then 67 let me just save this file
07:56 - now and try running this code once again
07:58 - so as you can see we have the sorted
08:00 - list as negative 5 negative 3 minus 1 10
08:04 - 14 15 54 67 and then 100 so guys all the
08:08 - numbers that were present in the
08:09 - original list which are not sorted are
08:11 - now sorted after we have called The
08:13 - Selection sort function over here which
08:15 - Returns the sorted list in this case so
08:18 - guys this is the way that we can easily
08:19 - implement the selection sort algorithm
08:21 - using the Python program please make
08:23 - sure that you practice on your own so
08:25 - that on different inputs you get
08:26 - different outputs make sure that you
08:28 - like this video so that it reaches to
08:30 - more people and subscribe to the channel
08:32 - so that you get the notifications on
08:34 - upcoming videos as well the next video
08:36 - that we are going to talk about is
08:37 - Python program to print diamond shape
08:40 - star pattern so stay tuned

Cleaned transcript:

hey what's up guys welcome to another video in which we are going to write Python program to sort numbers using selection sort algorithm so guys the selection sort algorithm sorts an array by repeatedly finding the minimum element considering the ascending order from the unsorted part and putting it at the beginning so guys we are going to check this with the help of examples as well basically the selection sort algorithm finds the minimum element and places it at the correct position in the unsorted part now the algorithm maintains two sub arrays in a given array so basically the first sub array which is already sorted the remaining sub array that is unsorted now in every iteration of the selection sort the minimum element considering the ascending order from the unsorted sub array is picked and moved to the sorted sub array so guys for example as you can see this is the array that we are considering these are the elements that are present in the unsorted array and then in the first pass what will happen is out of all these elements the minimum element that is 11 will be considered and it will be placed in the correct position that is the first position over here so after the first pass as you can see the 64 has been replaced by 11 and this 64 that was present at the first position was being placed at the last position now for the second pass we take the second element that is 12 which is the second smallest element and it will be placed at the second position and so on all the elements inside the array will be sorted using the selection sort algorithm by using the minimum element in every pass so guys let us check the Python program in order to implement the selection sort using vs code so guys over here we will have the variable name as list one and we will Define the elements as these elements that we have just seen so I'll just copy this and paste this over here inside the open and close Square records so guys this is the way that we have defined the list over here in the python now guys what we will do is we will Define the selection sort function in order to implement the selection so algorithm which will return as the sorted array over here so first of all we will print the unsorted array that is the original array over here so we say original list and then colon and then we will simply print the list one over here which is the unsorted list in this case now what we will do is we will print the sorted list as well after calling the selection sort function so over here we will have sorted list and then colon and then again what we will do is over here we will call the function that is selection sort that we are going to Define it is going to pass one parameter that will be list one over here that is the entire list that we have defined now guys what we will do is we will Define this function that is selection sort before the Declaration of this list once over here we will have def keyword followed by the selection sort function name and then it will take one parameter that is going to be list one we are going to have the same name that is is list one over here so guys over here how the selection sort algorithm works is we have to find the minimum element so what we will do is we will have the for Loop for I in range and then it will be the length of this list so guys in order to find the length of the list it will go from 0 up to the Len method we can use in order to find the length of this list one over here and then guys for each iteration what we will do is we will find the main index so basically the initial main index it is equal to I so what we are doing over here is the first element that is 64 over here we are assigning the index of this first element to the main index considering that this is the minimum element now guys what we will do is we will have the nested for Loop over here so for J in range and then it will go from I plus 1 this time so from this next element which is the unsorted array we have to iterate through all the elements and we need to compare those elements with this first element that is 64 which we are assuming that it is the smallest element over here so we will say I plus 1 in this case and then again it will go up to the length of list one so we say Len and then list one over here and then guys inside this we need to compare these numbers that is being represented by this Jade index with the ith index over here and then we need to see which of the numbers is smallest from this so what we will do is we will have the if condition and then inside this we will have list 1 of J if it is less than less than 1 of Min Index this time so we say Min Index this time so if any of these numbers that is of the unsorted part if it is less than this number that is the first element over here then we are going to assign the J the index to the main index over here so after this colon we will have Min index it is equal to J so guys basically what we are doing is first of all we have assumed that this is the minimum number and if in case we find any of these numbers which is smaller than the first number over here we will assign that particular numbers index to the main index over here so 25 will be Min index initially and then 12 will be again Min index since 12 will be less than 25 and then since 22 is not less than 12 so mean index will be still represented by 12 and then finally we get 11 which is again less than 12 over here so finally we will get the Min index as the last element over here now guys after the end of this inner for Loop we will have the Min index which is representing the smallest number out of all these four numbers over here so the smallest number needs to be placed at the first position so what we will do is after this inside inner for Loop we will simply swap both these numbers that is 11 and 64. so how that can be done we can simply use list one and then we will use the I the index over here yes it is representing the first element over here so less of I and then comma we will again have less 1 of Min Index this time so we have Min index it is equal to so basically this I is being represented as 0 index over here and Min index is the last index over here so these should be swapped with each other so over here we will have list one and then this will be Min Index this time and then this will be list one and then I so guys basically this number that is list one of Min index which is 11 it will be assigned to list I which is 64 right now so 11th will be placed at this position that is the first position and 64 which is being represented as list 1 of I will be placed at the last position over here and then guys the control flow will go to the next iteration as well in order to get the correct number at the second position and so on all the numbers will be sorted using the selections hot algorithm so guys let me just save this file now and try running this code so as you can see we are getting the original list over here but sorted list is none that's because we are not returning this list one over here after the execution of the function so what we have to do is we have just missed the return statement over here so we need to return the list 1 which is already being sorted over here so let me just save this file now once again and try running this code so as you can see we have got the sorted list now it is saying 11 12 22 25 and then 64. so guys all the elements are sorted Now using the selection sort algorithm that we have just implemented using these many lines of code now guys let us see another example over here I'll just change the content of the list one so let's say we have negative 3 comma negative 5 and then negative 1 and then let's say 15 and then 14 and then 10 and then 100 and then let's say 54 and then 67 let me just save this file now and try running this code once again so as you can see we have the sorted list as negative 5 negative 3 minus 1 10 14 15 54 67 and then 100 so guys all the numbers that were present in the original list which are not sorted are now sorted after we have called The Selection sort function over here which Returns the sorted list in this case so guys this is the way that we can easily implement the selection sort algorithm using the Python program please make sure that you practice on your own so that on different inputs you get different outputs make sure that you like this video so that it reaches to more people and subscribe to the channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is Python program to print diamond shape star pattern so stay tuned
