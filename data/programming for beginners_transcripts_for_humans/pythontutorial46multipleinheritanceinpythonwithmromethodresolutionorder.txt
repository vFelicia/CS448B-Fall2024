With timestamps:

00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to learn
00:03 - about multiple inheritance in Python
00:06 - Programming so guys previously we have
00:08 - seen the single linear returns but in
00:10 - this video we are going to check the
00:11 - multiple inheritance in Python so a
00:14 - class can be derived from more than one
00:16 - superclass in Python basically this is
00:19 - called multiple inheritance so basically
00:21 - the derived class will be having the
00:23 - multiple super classes in this case so
00:25 - for example a class pad is derived from
00:28 - Super classes that is mammal and a
00:31 - winged animal so basically this mammal
00:33 - and winged animal will be treated as the
00:35 - parent classes and this bad class will
00:38 - be the subclass of the child class which
00:40 - can be derived from both of these super
00:42 - classes over here so it makes sense
00:44 - because bat is a mammal as well as it is
00:47 - a winged animal so let us check this
00:49 - with the help of the example code now in
00:51 - the vs code so over here first of all we
00:53 - will create a class that is called as
00:55 - mammal over here and inside the mammal
00:57 - what we will do is we will Define the
00:59 - function and we will simply say mammal
01:02 - underscore info so this particular
01:04 - function it is going to take one
01:06 - parameter at itself which is the object
01:09 - itself and basically we are going to
01:11 - Simply print the statement that we are
01:13 - inside
01:15 - mammal
01:17 - function
01:18 - so as you can see we are simply printing
01:20 - we are inside meml function in order to
01:22 - identify that the control flow has come
01:24 - over here inside the mammal info
01:27 - function and then again we will have
01:29 - another parent class over here that is
01:31 - wind animal so we say wind animal over
01:34 - here and this time what we will do is
01:36 - again we will have the function but over
01:39 - here we will say Wing underscore info so
01:43 - this particular method belongs to the
01:45 - winged animal over here and then again
01:47 - it is going to take the parameter as the
01:49 - cells and then again I am simply going
01:51 - to copy this print statement over here
01:54 - and paste this inside the wind info and
01:56 - we will say we are inside winged animal
01:59 - function
02:00 - so we say we are inside wind animal
02:02 - function now guys we have created two
02:05 - classes over here which will be treated
02:06 - as the parent classes now we will be
02:08 - defining a third class that will be the
02:10 - child class of both these classes so
02:13 - basically we will have the class that is
02:15 - called as bat over here and how do we
02:17 - mention the multiple super classes
02:19 - whenever we are defining the subclasses
02:21 - over here so basically inside the
02:23 - parenthesis we will have both these
02:25 - classes separated by a comma so first of
02:28 - all we will have the mammal class over
02:29 - here followed by comma and then again we
02:32 - will have the winged animal class over
02:34 - here in the same way you can have any
02:36 - number of classes separated by commas
02:39 - over here in order to achieve multiple
02:40 - inheritance and then after this we will
02:43 - have the colon and then again we will
02:45 - have another method which will belong to
02:47 - this bad class over here so over here we
02:50 - will have the pad underscore info method
02:53 - and then which will take the self SD
02:55 - parameter and then we have the colon
02:57 - over here again we will have the print
02:59 - statement we will say are inside bad
03:02 - function so it says we are inside pad
03:04 - function now guys inside this bad class
03:06 - we have this bad info function and apart
03:09 - from this we also have this mammal info
03:11 - and wind info functions since both these
03:14 - functions are derived from these classes
03:16 - that is mammal and winged animal over
03:18 - here so we can access all these
03:20 - functions from the object that we create
03:22 - for the bad class so let us come out of
03:24 - these classes and what we will do is
03:26 - let's say I provide the object that is
03:28 - bad one it is equal to bad over here so
03:32 - we have created the object of this bad
03:34 - class in this case and then when we
03:36 - provide the bad one object followed by
03:38 - dot as you can see we are getting all
03:41 - the three functions as the suggestions
03:42 - by the vs code over here that's because
03:44 - all the three functions are accessible
03:46 - by this bad one object over here so
03:49 - first of all we will say bad info and
03:51 - Then followed by open and close
03:52 - parenthesis and then again we will say
03:54 - bad one dot let's call mammal info in
03:57 - this case so we have manual info as well
03:59 - as the third function that is bad 1
04:02 - followed by Dot and then we have the
04:04 - wind info over here and then open and
04:06 - close parenthesis so all these three
04:09 - statements will be printed one at a time
04:10 - based on the functions that is being
04:12 - called by the control flow so let me
04:14 - just save this file now and try running
04:16 - this code in order to confirm the same
04:18 - so as you can see first of all we have
04:20 - called the bad info so we are inside pad
04:22 - function is being displayed and then
04:24 - again we are inside mammal function is
04:26 - being displayed that's because mammal
04:28 - info is being called the second time and
04:30 - third function is being called that is
04:31 - winged info and we are getting we are
04:33 - inside winged animal function so guys in
04:36 - this way we have also achieved multiple
04:38 - inheritance over here in case the
04:40 - functions that you want to use are
04:42 - present in the multiple classes as you
04:44 - can see over here you can have multiple
04:46 - classes being inherited by the derived
04:49 - class which we also call it as a
04:50 - subclass over here and this paired class
04:53 - is acting as a subclass and both these
04:55 - classes that are mammal and winged
04:57 - animal are acting as the parent classes
04:59 - now guys let us move another task over
05:01 - here what do you mean by Method
05:03 - resolution order in Python that is mro
05:06 - so if two super classes have the same
05:08 - method name and the derived class calls
05:11 - that method then python uses the mro to
05:14 - search for the right method to call so
05:16 - guys over here we have seen how multiple
05:18 - inheritance can be achieved but what if
05:21 - the method names in both the super
05:23 - classes that is in the mammal class and
05:25 - the winged animal class are same so what
05:28 - we will do is instead of this mammal
05:30 - info we will keep it as display over
05:32 - here and instead of wind info again we
05:35 - will call it as display so basically
05:37 - this time what is happening over here is
05:39 - both these classes that is mammal class
05:41 - and wind animal classes are having the
05:44 - same method name that is display and
05:46 - what we are doing we are creating the
05:48 - subclass that is bad and inheriting both
05:50 - these classes that is mammal and winged
05:52 - animal over here and this time both
05:55 - these display methods are getting
05:57 - inherited by this bad function now which
05:59 - method will be called when we use the
06:02 - object of this bad method let us check
06:04 - that so basically I'll have to remove
06:05 - these lines of code since these
06:07 - functions are no longer present but
06:09 - instead of that what we will do is we
06:11 - will say pair to 1 followed by Dot and
06:13 - then we have another function that is
06:15 - display so we have only one function
06:17 - that's because the name of these
06:19 - functions are same in both the parent
06:21 - classes and Then followed by open and
06:23 - close parenthesis so guys over here
06:25 - inside the pad function we have the bad
06:28 - info which will be called by using the
06:30 - pad1 object and then the next time what
06:32 - we are doing is we are using the bad one
06:34 - object in order to call the display
06:36 - method now which display method will be
06:38 - executed out of these two let us check
06:40 - that with the help of execution so I'll
06:42 - just save this file now and try running
06:44 - this code now so as you can see we are
06:47 - getting we are inside bad function which
06:49 - is this statement that is getting
06:51 - printed that is obvious that's because
06:52 - we have called the bad info function
06:55 - over here and next time when we call the
06:57 - display method it is saying we are
06:59 - inside a mammal function so guys
07:01 - basically this print statement was
07:03 - executed which proves that the display
07:05 - method of the mammal class is being
07:07 - called over here why so that's because
07:09 - when we are creating the child class the
07:12 - first parent class is being given the
07:14 - highest priority over here so first the
07:16 - control flow will check whether this
07:18 - display method is it present in the
07:20 - first parent class if not then it will
07:22 - go to the second parent class over here
07:24 - inside the mammal class it is finding
07:27 - that the display function is present and
07:29 - that is what is getting printed over
07:30 - here so it is the leftmost class that
07:33 - will be used in order to call the method
07:36 - which is present in multiple parent
07:38 - classes over here so what if we provide
07:40 - when the animal as the first class so
07:42 - what we will do is I'll just remove this
07:44 - mammal class from here on the left hand
07:46 - side we will provide wind animal and
07:48 - Then followed by comma and then on the
07:50 - right hand side we provide mammal so
07:52 - over here again we have just changed the
07:54 - order in which the inheritance is being
07:56 - done over here both these classes are
07:58 - still the parent classes of this child
08:00 - class that is bad class now let us check
08:02 - which statement will be printed when we
08:04 - call the display method over here so let
08:06 - me just save this file now and try
08:08 - running this code as you can see we are
08:10 - getting we are inside winged animal
08:12 - function so guys basically this winged
08:15 - animal function that is display function
08:17 - was called and we are getting this
08:19 - statement that is we are inside wind
08:21 - animal function that's because this time
08:23 - we have provided winged animal as the
08:26 - leftmost class and the control flow
08:28 - found this particular display method
08:30 - inside the winged animal class over here
08:32 - which is the parent class of the bat
08:34 - class so guys this is very important as
08:36 - far as method resolution order is
08:38 - concerned the leftmost class is being
08:40 - given the highest priority as far as the
08:43 - same names of the methods are concerned
08:45 - so guys practice on your own so that on
08:47 - different inputs you get different
08:48 - outputs please make sure that you like
08:50 - this video so that it reaches to more
08:52 - people and subscribe to this channel so
08:54 - that you get the notifications on
08:55 - upcoming videos as well the next video
08:57 - that we are going to talk about is
08:59 - multi-level inheritance in Python
09:01 - Programming so stay tuned

Cleaned transcript:

hey what's up guys welcome to another video in which we are going to learn about multiple inheritance in Python Programming so guys previously we have seen the single linear returns but in this video we are going to check the multiple inheritance in Python so a class can be derived from more than one superclass in Python basically this is called multiple inheritance so basically the derived class will be having the multiple super classes in this case so for example a class pad is derived from Super classes that is mammal and a winged animal so basically this mammal and winged animal will be treated as the parent classes and this bad class will be the subclass of the child class which can be derived from both of these super classes over here so it makes sense because bat is a mammal as well as it is a winged animal so let us check this with the help of the example code now in the vs code so over here first of all we will create a class that is called as mammal over here and inside the mammal what we will do is we will Define the function and we will simply say mammal underscore info so this particular function it is going to take one parameter at itself which is the object itself and basically we are going to Simply print the statement that we are inside mammal function so as you can see we are simply printing we are inside meml function in order to identify that the control flow has come over here inside the mammal info function and then again we will have another parent class over here that is wind animal so we say wind animal over here and this time what we will do is again we will have the function but over here we will say Wing underscore info so this particular method belongs to the winged animal over here and then again it is going to take the parameter as the cells and then again I am simply going to copy this print statement over here and paste this inside the wind info and we will say we are inside winged animal function so we say we are inside wind animal function now guys we have created two classes over here which will be treated as the parent classes now we will be defining a third class that will be the child class of both these classes so basically we will have the class that is called as bat over here and how do we mention the multiple super classes whenever we are defining the subclasses over here so basically inside the parenthesis we will have both these classes separated by a comma so first of all we will have the mammal class over here followed by comma and then again we will have the winged animal class over here in the same way you can have any number of classes separated by commas over here in order to achieve multiple inheritance and then after this we will have the colon and then again we will have another method which will belong to this bad class over here so over here we will have the pad underscore info method and then which will take the self SD parameter and then we have the colon over here again we will have the print statement we will say are inside bad function so it says we are inside pad function now guys inside this bad class we have this bad info function and apart from this we also have this mammal info and wind info functions since both these functions are derived from these classes that is mammal and winged animal over here so we can access all these functions from the object that we create for the bad class so let us come out of these classes and what we will do is let's say I provide the object that is bad one it is equal to bad over here so we have created the object of this bad class in this case and then when we provide the bad one object followed by dot as you can see we are getting all the three functions as the suggestions by the vs code over here that's because all the three functions are accessible by this bad one object over here so first of all we will say bad info and Then followed by open and close parenthesis and then again we will say bad one dot let's call mammal info in this case so we have manual info as well as the third function that is bad 1 followed by Dot and then we have the wind info over here and then open and close parenthesis so all these three statements will be printed one at a time based on the functions that is being called by the control flow so let me just save this file now and try running this code in order to confirm the same so as you can see first of all we have called the bad info so we are inside pad function is being displayed and then again we are inside mammal function is being displayed that's because mammal info is being called the second time and third function is being called that is winged info and we are getting we are inside winged animal function so guys in this way we have also achieved multiple inheritance over here in case the functions that you want to use are present in the multiple classes as you can see over here you can have multiple classes being inherited by the derived class which we also call it as a subclass over here and this paired class is acting as a subclass and both these classes that are mammal and winged animal are acting as the parent classes now guys let us move another task over here what do you mean by Method resolution order in Python that is mro so if two super classes have the same method name and the derived class calls that method then python uses the mro to search for the right method to call so guys over here we have seen how multiple inheritance can be achieved but what if the method names in both the super classes that is in the mammal class and the winged animal class are same so what we will do is instead of this mammal info we will keep it as display over here and instead of wind info again we will call it as display so basically this time what is happening over here is both these classes that is mammal class and wind animal classes are having the same method name that is display and what we are doing we are creating the subclass that is bad and inheriting both these classes that is mammal and winged animal over here and this time both these display methods are getting inherited by this bad function now which method will be called when we use the object of this bad method let us check that so basically I'll have to remove these lines of code since these functions are no longer present but instead of that what we will do is we will say pair to 1 followed by Dot and then we have another function that is display so we have only one function that's because the name of these functions are same in both the parent classes and Then followed by open and close parenthesis so guys over here inside the pad function we have the bad info which will be called by using the pad1 object and then the next time what we are doing is we are using the bad one object in order to call the display method now which display method will be executed out of these two let us check that with the help of execution so I'll just save this file now and try running this code now so as you can see we are getting we are inside bad function which is this statement that is getting printed that is obvious that's because we have called the bad info function over here and next time when we call the display method it is saying we are inside a mammal function so guys basically this print statement was executed which proves that the display method of the mammal class is being called over here why so that's because when we are creating the child class the first parent class is being given the highest priority over here so first the control flow will check whether this display method is it present in the first parent class if not then it will go to the second parent class over here inside the mammal class it is finding that the display function is present and that is what is getting printed over here so it is the leftmost class that will be used in order to call the method which is present in multiple parent classes over here so what if we provide when the animal as the first class so what we will do is I'll just remove this mammal class from here on the left hand side we will provide wind animal and Then followed by comma and then on the right hand side we provide mammal so over here again we have just changed the order in which the inheritance is being done over here both these classes are still the parent classes of this child class that is bad class now let us check which statement will be printed when we call the display method over here so let me just save this file now and try running this code as you can see we are getting we are inside winged animal function so guys basically this winged animal function that is display function was called and we are getting this statement that is we are inside wind animal function that's because this time we have provided winged animal as the leftmost class and the control flow found this particular display method inside the winged animal class over here which is the parent class of the bat class so guys this is very important as far as method resolution order is concerned the leftmost class is being given the highest priority as far as the same names of the methods are concerned so guys practice on your own so that on different inputs you get different outputs please make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is multilevel inheritance in Python Programming so stay tuned
