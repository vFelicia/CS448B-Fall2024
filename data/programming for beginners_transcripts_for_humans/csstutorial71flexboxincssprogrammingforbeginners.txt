With timestamps:

00:00 - so now we will see flexbox in CSS so
00:03 - guys basically before the flexbox layout
00:05 - module there were four layout modes in
00:07 - the CSS so first of all we have the blog
00:10 - model which is used for displaying the
00:13 - sections in a web page apart from this
00:15 - we also have the inline model which is
00:17 - used for the displaying of the text and
00:20 - then we also have the table model which
00:22 - is used for the two-dimensional table
00:24 - data and then we also have the position
00:27 - property in CSS which is used for
00:29 - explicit position of an element now guys
00:31 - we can use any of these models in order
00:34 - to display the content based on our
00:36 - website design now guys apart from this
00:38 - we can also use the flex boox layout
00:41 - module which we are going to check with
00:42 - the help of examples as well so the
00:44 - flexible box layout module makes it
00:47 - easier to design flexible responsive
00:49 - layout structure without using the float
00:52 - or the position property in this ESS so
00:54 - guys let us see a very simple example of
00:57 - the flexible box layout module so let us
01:00 - move to the vs code over here now before
01:02 - writing any code in this case what we
01:04 - are going to do is first of all we will
01:06 - understand how this Flex boox module
01:08 - will work so guys basically we can
01:10 - arrange the HTML elements in the row
01:12 - direction or the column Direction so
01:14 - when we move from left to right over
01:16 - here it is the row Direction and then
01:18 - when the HTML elements move from the top
01:21 - to bottom then it is called the column
01:23 - Direction in this case so guys simply we
01:25 - can provide the text over here that this
01:28 - is row Direction in this case and then
01:30 - apart from this we also have the column
01:33 - Direction over here so simply we are
01:34 - going to say column direction that is
01:37 - going from top to bottom so Guys these
01:39 - are the two directions in which the flex
01:41 - boox module will work now guys apart
01:43 - from this when we talk about the row
01:45 - direction we have two axis that is the
01:47 - main axis and the cross AIS so the axis
01:50 - that is moving from left to right is the
01:52 - main axis over here and the axis that is
01:55 - moving in the vertical direction that is
01:57 - top to bottom will be the cross AIS over
02:00 - here so simply we are going to provide
02:02 - the vertical axis in this case which is
02:04 - the cross AIS over here so guys
02:06 - basically this is the main axis that is
02:08 - going from left to right in this case
02:11 - and then apart from this the axis that
02:12 - is going in the vertical direction is
02:14 - the cross axis for the row Direction so
02:17 - guys this is a very simple understanding
02:18 - of the flexbox model so by default there
02:21 - is a row direction in which case the
02:23 - HTML elements will be placed in such a
02:26 - way that they will be placed from left
02:28 - to right direction and then we can also
02:31 - provide certain CSS properties in order
02:33 - to move the other HTML elements that is
02:36 - going beyond the screen on the right
02:38 - hand side to move at the bottom position
02:40 - as well which we are going to check with
02:41 - the help of examples and then guys in
02:43 - the row Direction itself we have the
02:45 - cross AIS which moves in the vertical
02:47 - Direction over here now guys similarly
02:49 - when we say column Direction in the
02:51 - flexbox model so basically the main AIS
02:54 - and the cross AIS will be opposite to
02:56 - each other so in this case when the
02:58 - flexbox model is in the the column
03:00 - Direction the vertical axis will be the
03:02 - main axis over here so let me just draw
03:04 - that as well so simply we are going to
03:07 - draw the vertical axis in this case and
03:09 - then we also have the horizontal axis so
03:12 - this is the horizontal axis over here
03:14 - and in column Direction the vertical
03:16 - axis is the main AIS so let me just copy
03:19 - this main AIS text over here and paste
03:21 - it at the vertical Direction and The
03:23 - Cross axis will move from left to right
03:26 - over here which is this particular axis
03:28 - in this case so guys basically is the
03:30 - reverse as far as the column direction
03:32 - is concerned so Guys these are the two
03:34 - things that you should know in the row
03:35 - Direction the main AIS belongs to the
03:38 - left to right direction and the cross
03:40 - AIS belongs to the vertical Direction
03:42 - over here whereas in column Direction
03:44 - the vertical AIS is the main AIS and the
03:47 - horizontal AIS is the cross AIS so guys
03:50 - let us move to the vs code over here in
03:52 - order to check the examples so simply we
03:54 - are going to provide the container class
03:56 - over here so we are going to have the
03:58 - dep tag with the class container and
04:01 - then let us say we have four diff tags
04:03 - over here so we have the first diff tag
04:05 - as one in this case and then we have 2 3
04:08 - and then four now guys apart from this
04:10 - what we will do is we will make this
04:12 - container as the flexbox container so it
04:14 - is very important that when you are
04:16 - going to use the flex boox model you
04:18 - need to have the flex container as well
04:21 - so we are going to treat this particular
04:23 - parent di tag over here as the flex
04:25 - container so simply inside the style.
04:27 - CSS file we need to provide the
04:30 - container class in this case and then
04:32 - simply we can say display it is equal to
04:34 - flex so guys this is the way that we can
04:37 - use the flexbox model and then apart
04:39 - from this let us also have certain
04:41 - background color so let's say we have
04:43 - the background color as the black color
04:45 - over here and then for the diff tag as
04:47 - well we are going to have certain CSS
04:49 - properties so guys over here we are
04:51 - going to have container and then inside
04:53 - the container we need to provide the CSS
04:56 - properties to all the diff tags over
04:58 - here so guys simply we are going to say
05:00 - background color of yellow color in this
05:02 - case and then we are also going to
05:04 - provide the padding property of 20
05:06 - pixels over here let me just save this
05:08 - file now and try reloading this page on
05:10 - the browser so let us see how it looks
05:12 - like so as you can see the black color
05:14 - background is for the diff container
05:17 - which is a flex boox container over here
05:19 - and then apart from this we also have
05:21 - the flex items in this case that is 1 2
05:24 - 3 and 4 we have provided the required
05:27 - padding in this case but we can also
05:29 - provide the margin as well so that there
05:31 - is certain space in between the border
05:33 - of the container and the border of the
05:35 - individual Flex items over here so guys
05:38 - basically we can have the margin of 10
05:40 - pixels for all the flex items so guys
05:43 - basically the container is called the
05:44 - flex container in this case and whatever
05:47 - items are present inside the flex
05:49 - container are called the flex items let
05:51 - me just save this file now and try
05:53 - reloading this page once again on the
05:55 - browser so as you can see we have
05:57 - provided the margin of 10 pixels over
05:59 - here and this is a very simple example
06:02 - of a flex container in this case we can
06:04 - also have more items over here so inside
06:06 - the HTML file simply let me just provide
06:09 - two more div tags over here and the
06:11 - content we will provide it as five and
06:13 - six numbers let me just save this file
06:15 - now and try reloading this page once
06:17 - again on the browser so as you can see
06:19 - more items are getting added over here
06:21 - based on the HTML content that we have
06:24 - provided so guys this is the way that we
06:26 - can provide the flex container with the
06:28 - help of the display equ Al to flex value
06:30 - and then apart from this we can provide
06:32 - the different CSS properties for the
06:34 - flex items inside the flex container as
06:37 - well now guys apart from this we also
06:39 - have multiple other CSS properties over
06:41 - here so as you can see the flex
06:43 - container properties are first of all we
06:46 - have something called as Flex Direction
06:48 - so guys this is nothing but the
06:50 - direction that we have just understood
06:51 - with the help of these graphs over here
06:53 - so by default the flex direction is the
06:56 - row Direction over here we can change it
06:58 - to column direction as well so let us
07:00 - check that how it looks like so guys
07:02 - basically what we have to do is this
07:04 - Flex direction is the CSS property for
07:06 - the flex container so guys simply inside
07:09 - the container class we need to provide
07:11 - the flex Direction CSS property and by
07:14 - default the value is Row in this case so
07:17 - let me just save this file now and try
07:19 - reloading this page once again on the
07:21 - browser so there is no change because
07:23 - this is the default value now guys
07:24 - instead of row we can also have row
07:27 - reverse over here in which case the
07:29 - items will be displayed from right to
07:31 - left in this case so basically by
07:33 - default the items are getting displayed
07:35 - from left to right in this particular
07:37 - direction but if we want the direction
07:39 - to be reversed that is from right to
07:41 - left we can change the flex direction to
07:44 - row revers so let me just save this file
07:46 - now and try reloading this page once
07:48 - again on the browser so as you can see
07:50 - the items are now getting displayed from
07:52 - right to left first we have the div tag
07:54 - with the content that is one and then we
07:56 - have 2 3 4 and so on the content is
07:59 - displayed from right to left now guys
08:01 - apart from this we also have something
08:03 - called as column Direction over here so
08:05 - instead of having row reverse simply we
08:07 - can have the column value for this Flex
08:10 - Direction so guys what will happen is
08:11 - over here just we have understood with
08:13 - the help of the craft in the column
08:15 - Direction This is the main axis in which
08:17 - case the HTML elements will be displayed
08:20 - from top to left over here so guys let
08:22 - us check that as well when we change the
08:24 - flex direction to column the first
08:27 - element should be displayed at the top
08:28 - and then the second element should be
08:30 - displayed below the first element and so
08:32 - on all the elements will be placed in
08:34 - the vertical Direction over here so guys
08:36 - let me just reload this page once again
08:38 - so as you can see we have one and then
08:40 - followed by two and so on all the
08:43 - elements are getting displayed over here
08:45 - apart from this you can also set the
08:47 - width of individual element in this case
08:49 - in order to avoid the div element taking
08:52 - the entire width of the screen so guys
08:54 - in this way you can also use the column
08:56 - Direction over here and then you can
08:58 - also use the column reverse as well in
09:01 - which case the first element will be
09:02 - displayed at the bottom and Then
09:04 - followed by two and so on the last
09:06 - element will be displayed at the top so
09:08 - when we reload this page as you can see
09:10 - first we have the Sixth Element and then
09:13 - we have Fifth and so on the elements are
09:15 - displayed in the column reverse
09:17 - Direction so guys this is the way that
09:18 - you can set the flex Direction over here
09:21 - apart from this we also have something
09:23 - called as Flex wrap so guys basically in
09:25 - order to understand this Flex wrap
09:27 - property what we have to do is we need
09:29 - to add more elements over here inside
09:31 - the container and also we need to make
09:34 - the flex direction as Row in this case
09:36 - which is the default value so guys let
09:38 - me just save this file now and try
09:40 - reloading this page so as you can see
09:42 - these are the elements that are getting
09:43 - displayed now what we will do is we will
09:45 - add more diff tags over here so let me
09:48 - just copy paste these lines of code and
09:50 - then let me just change the content over
09:53 - here so guys basically we are updating
09:54 - the content and let us set 14 number of
09:57 - div tags over here so guys we have 1 to
10:00 - 14 div tags in this case let me just
10:02 - save this file now and try reloading
10:05 - this page once again on the browser so
10:06 - if you notice we are going from left to
10:09 - right in this case 1 2 3 4 and so on you
10:12 - can see at the bottom we are getting the
10:14 - horizontal scroll bar over here and the
10:17 - content is going beyond the width of the
10:19 - screen in this case the last element is
10:21 - 14 over here now guys let us say
10:23 - whatever elements are going outside of
10:25 - the width of the screen in this case we
10:28 - want those items to to be displayed
10:30 - below these items that is 1 2 3 and so
10:32 - on so basically we don't want this
10:34 - horizontal scroll bar to be displayed so
10:36 - guys what we can do is simply we can use
10:39 - this Flex WRA CSS property so guys by
10:42 - default the value of this Flex WRA CSS
10:44 - property is no WRA over here in which
10:47 - case all the elements will go beyond the
10:49 - width of the screen as you can see but
10:51 - when we set the value as wrap in this
10:53 - case so basically whatever elements that
10:56 - do not have any space left beyond the
10:58 - width of the screen will be displayed at
11:00 - the bottom over here within the same
11:02 - container so guys let me just save this
11:04 - file now after providing the W value to
11:06 - the flag rep and reload this page once
11:09 - again on the browser so as you can see
11:11 - 11 12 13 and 14 are now getting
11:13 - displayed at the bottom over here in the
11:16 - same container so guys in this way you
11:17 - can also use the flag W CSS property
11:20 - when you have more number of HTML
11:22 - elements within the same container which
11:24 - is going beyond the width of the screen
11:26 - now guys apart from this we also have
11:28 - something called Flex flow over here
11:30 - which is nothing but the shorthand CSS
11:33 - property for the flex Direction and flex
11:35 - rep CSS property so guys let me just
11:37 - remove both these properties over here
11:39 - and let us see how it looks like on the
11:41 - browser so as you can see it is in the
11:43 - row Direction and there is no W over
11:45 - here so simply we can provide the flex
11:47 - flow CSS property and let's say we want
11:50 - the row Direction over here so simply we
11:52 - provide row followed by the space
11:54 - character and then we provide the rra
11:56 - value over here so guys basically we are
11:58 - providing the the values for Flex
12:00 - Direction and flex W in this shorthand
12:02 - CSS property that is flex flow let me
12:05 - just save this file now and try
12:07 - reloading this page once again on the
12:08 - browser as you can see now the items are
12:11 - getting wrapped over here apart from
12:12 - this instead of having row value we can
12:15 - also have row reverse as well so that
12:17 - the items are displayed from right to
12:19 - left Direction so when we reload this
12:21 - page as you can see the first element is
12:23 - at the right and then we have 2 3 4 last
12:25 - element is 10 and then the other
12:27 - elements are displayed on the next next
12:29 - line that is 11 12 13 and 14 so guys in
12:32 - this way you can use the flex flow CSS
12:35 - property which is the shorthand method
12:37 - for Flex Direction and flex rep CSS
12:39 - property now guys apart from this we
12:41 - also have something called as justify
12:43 - content which is used to align the HTML
12:46 - elements inside the flex container over
12:49 - here so guys let us check that as well
12:51 - how we can use it so simply let us move
12:53 - to the row W so simply let us change
12:56 - this value to row so that the flex items
12:58 - are getting display in the default
13:00 - Direction let me just reload this page
13:02 - so as you can see these are the HTML
13:03 - elements that are getting displayed
13:05 - inside the flex container now guys when
13:07 - we say justify content it is having
13:09 - multiple values so as you can see if we
13:12 - want to provide the HTML elements at the
13:14 - center of the container so simply we can
13:17 - provide the center value let me just
13:19 - save this file now and try reloading
13:21 - this page once again on the browser so
13:22 - as you can see all the HTML elements now
13:25 - are being displayed at the center of
13:27 - this particular flag container over here
13:30 - so let us check this with the less
13:31 - number of HTML elements over here so
13:33 - what we will do is simply we are going
13:35 - to keep the diff text from 1 to 5 over
13:38 - here and let me comment out the other
13:40 - lines of code let me just save this file
13:42 - now and try reloading this page so as
13:44 - you can see this is the center value of
13:46 - the justify content and if we want to
13:48 - align them at the left side of the
13:50 - container simply we can say the start
13:52 - value for this justify content over here
13:55 - let me just save this file now and try
13:57 - reloading this page so as you can see
13:59 - the elements are now getting displayed
14:01 - at the start of the container that is on
14:03 - the left hand side and then when we say
14:05 - end that means we can align the HTML
14:08 - elements at the right hand side of the
14:10 - container so guys as you can see the
14:12 - elements are getting aligned at the
14:14 - right hand side of this main AIS based
14:16 - on the row Direction over here now
14:18 - similarly for the column direction as
14:20 - well we will have the justify content
14:23 - based on the main axis so guys in the
14:25 - column Direction our top to bottom axis
14:28 - becomes the main main AIS over here and
14:30 - justify content will be used in order to
14:33 - align it based on the main AIS so I
14:35 - leave this up to you as a homework for
14:37 - you so that you can practice on your own
14:39 - apart from this we also have something
14:41 - called as align items over here so guys
14:43 - let us check that as well so what we
14:45 - will do is let us say we want to
14:47 - increase the height of the container
14:49 - that is the flex container over here so
14:52 - simply we are going to set the height of
14:54 - flex container to 200 pixels and let us
14:57 - say we have the justify content as the
14:59 - the center value so that all the HTML
15:01 - elements are displayed at the center so
15:03 - guys let me just save this file now and
15:05 - try reloading this page so as you can
15:07 - see the height of the flex container is
15:09 - now 200 pixels over here and all the
15:12 - HTML elements are now taking the entire
15:15 - height of this particular Flex container
15:17 - over here now guys what is the meaning
15:19 - of the Align items so basically just
15:22 - like how we have used the justify
15:24 - content in order to align the items
15:26 - horizontally that is at the main is of
15:29 - this row Direction over here the Align
15:31 - items will be used in order to align
15:34 - these HTML elements against the cross
15:37 - AIS in this case the cross AIS is the
15:39 - top to bottom or the horizontal AIS over
15:42 - here so guys let us check that as well
15:44 - so simply we need to provide the Align
15:47 - items CSS property for this container
15:50 - class and then let us say we want to
15:51 - provide the value as Center over here
15:54 - let me just save this file now and try
15:56 - reloading this page once again on the
15:57 - browser as you can see see vertically
16:00 - now all the HTML elements are at the
16:02 - center of this container similarly if we
16:05 - want all these elements to be present at
16:07 - the top of the container so we can say
16:09 - start value for this align items so guys
16:12 - if you notice when we say start the
16:14 - Align items work with the cross AIS over
16:17 - here which is the vertical axis in this
16:19 - case when we talk about the row
16:21 - direction of the flexbox model so let me
16:23 - just save this file now and try
16:25 - reloading this page once again on the
16:26 - browser so as you can see the HTML
16:29 - elements are now getting displayed at
16:31 - the top of this particular container and
16:33 - similarly if we want these elements to
16:35 - be present at the bottom of the
16:37 - container as far as the cross AIS is
16:39 - concerned we can simply provide the end
16:41 - value so when we reload this page as you
16:43 - can see at the bottom of the flex
16:45 - container we are getting all the HTML
16:47 - elements so guys this is the difference
16:49 - between the justify content and the
16:51 - Align items so basically the justifier
16:54 - content work towards the main exis of
16:57 - the flexbox model and the Align items
17:00 - work towards the cross AIS of the
17:02 - flexbox model now Guys these directions
17:05 - will change when we change the flex
17:07 - direction to column Direction over here
17:10 - so in this case the justify content will
17:12 - allow us to provide the HTML elements
17:15 - alignment towards the main axis that is
17:17 - the vertical axis over here and the
17:19 - Align items will help the alignment
17:21 - across the cross AIS over here which is
17:24 - the horizontal axis as far as the column
17:26 - direction is concerned now guys apart
17:28 - from this we also have something called
17:30 - as align content over here so guys in
17:32 - order to understand this we need to
17:34 - uncomment these lines of code over here
17:37 - so that we have more number of HTML
17:39 - elements let me just save this file now
17:41 - and also for the Align items over here
17:43 - we will keep the alignment as the center
17:46 - value in this case let me just reload
17:48 - this page once again over here as you
17:50 - can see we have all the HTML elements we
17:52 - have the Align items as the center and
17:55 - also the justify content as the center
17:57 - now guys the Align content CSS property
18:00 - will help us in order to provide the
18:02 - spacing between these HTML elements as
18:05 - far as the cross XS is concerned so guys
18:08 - let us check that as well so what we
18:10 - will do is simply we can say align
18:12 - content over here and there are multiple
18:15 - values in this case so let's say we
18:17 - provide space around value so guys let
18:19 - us check how it looks like so when we
18:21 - save this file now and try reloading
18:23 - this page once again on the browser
18:25 - notice that we have the same space on
18:28 - the top and at the bottom of all the
18:30 - HTML elements over here and that is how
18:33 - the space around value will work and
18:35 - then apart from this we also have
18:36 - something called a space between over
18:38 - here let me check that as well so when
18:41 - we reload this page once again on the
18:42 - browser as you can see at the top of the
18:45 - first line and at the bottom of the
18:47 - second line over here we have the equal
18:49 - space and the equal amount of space is
18:51 - present in between all these HTML
18:54 - elements as far as the cross AIS is
18:56 - concerned apart from this we also have
18:58 - another another value that is space
19:00 - evenly over here so let us check that as
19:02 - well so when we reload this page as you
19:04 - can see on the top at the middle and at
19:07 - the bottom as well all the spaces are
19:09 - equal in this case so guys based on your
19:11 - project requirements you can simply
19:13 - provide different values for the Align
19:16 - content CSS property which is part of
19:18 - the flex container over here so Guys
19:20 - these are some of the CSS properties
19:22 - that you can use based on your
19:24 - requirements as far as the flex
19:26 - container CSS properties are concerned
19:28 - now guys apart from this the flexbox
19:30 - model also allows you to center a div
19:33 - element very easily using display equal
19:36 - to flex value so guys I leave this
19:38 - exercise as a homework for you simply
19:40 - you can provide a justify content equal
19:42 - to Center and also the Align items as
19:45 - the center value over here so guys just
19:47 - by setting these two CSS properties you
19:50 - can provide the diff tag at the center
19:52 - of the container just like how we have
19:54 - done with all these multiple HTML
19:57 - elements now guys apart from this we
19:59 - also have some of the flex item
20:01 - properties over here so previously
20:03 - whatever properties we have seen belongs
20:05 - to the flex container over here which we
20:07 - have mentioned inside the dot container
20:10 - class but we can also provide the CSS
20:12 - properties to the flex items which are
20:14 - represented by these diff tags over here
20:17 - so guys let us check that as well so
20:19 - what we will do is first of all we have
20:21 - something called as order over here so
20:23 - guys let us check that as well so
20:25 - basically we are going to reduce the
20:26 - number of flag items that are getting
20:29 - displayed to four diff tags over here so
20:31 - we have one to four diff tags let me
20:33 - just save this file now and try
20:35 - reloading this page once again on the
20:36 - browser notice that we have the justify
20:39 - content as Center and also the Align
20:41 - items as Center over here so as you can
20:43 - see these are the CSS properties that
20:45 - are making us display the diff tags at
20:48 - the center of the container now guys let
20:50 - us say we want to change the order of
20:51 - these diff tags over here so it is not
20:54 - necessary that all the diff tags that
20:56 - you have provided inside the HTML file
20:58 - file needs to be displayed in the same
21:00 - order so let's say we have the ID for
21:03 - this fourth diff tag S4 over here so
21:06 - what we have to do is we need to provide
21:08 - the order CSS property inside this
21:11 - particular HTML element so guys let me
21:14 - just save this file now and we will copy
21:16 - this ID over here of the diff tag that
21:18 - is four in this case and then we will
21:20 - provide the hash character followed by
21:23 - the four that is the ID of the fourth
21:25 - diff tag and simply we can say order
21:28 - equal to minus1 so guys basically by
21:30 - default the order of the HTML elements
21:33 - is zero over here so simply we can
21:35 - provide minus1 in this case so that this
21:37 - is given the highest priority so let me
21:40 - just save this file now and try
21:41 - reloading this page once again on the
21:43 - browser notice that the fourth element
21:45 - is now getting displayed first followed
21:47 - by 1 2 3 which are having the other
21:50 - order values now guys apart from this
21:52 - let us also provide the ID for the
21:54 - second div element that is two over here
21:56 - so simply we will provide the ID as two
21:58 - let me just save this file now and over
22:00 - here we will provide this ID in this
22:02 - case and what we will say is the order
22:05 - it is equal to one so let me just save
22:07 - this file now and try reloading this
22:09 - page once again on the browser notice
22:11 - that the second element is now getting
22:13 - displayed at the end in this case so
22:15 - guys by default we have the order as
22:17 - zero for first and the third element for
22:20 - which we have not provided the order
22:22 - property and for the fourth element we
22:24 - have order equal to minus1 which is then
22:26 - given the highest priority and then the
22:28 - least priority is given to the two which
22:31 - is having order equal to 1 so guys
22:33 - lesser the number will be having more
22:35 - priority as far as displaying that HTML
22:38 - element inside the container is
22:40 - concerned so guys this is one of the CSS
22:42 - property for the flex item over here
22:45 - apart from this we have something called
22:46 - as Flex grow in this case so guys if you
22:49 - notice there is a lot of space that is
22:51 - available at the left hand side and the
22:53 - right hand side of all these Flex items
22:55 - over here so what we can do is we can
22:57 - occupy that Space by using the flex grow
23:00 - CSS property so let's say by default the
23:03 - width of all these three items that is 1
23:05 - 3 and two is same over here and the
23:08 - remaining space that is present on the
23:10 - left and on the right we want it to be
23:13 - occupied by this first element that is
23:15 - the diff tag having the content four so
23:17 - guys what we can do is simply we can
23:19 - provide Flex grow CSS property to this
23:22 - div tag that is having the ID equal to 4
23:25 - over here and then simply we can provide
23:27 - the value as one by by default the flex
23:29 - grow CSS property is having the value as
23:32 - zero but simply we can provide the value
23:34 - as one in which case only this
23:36 - particular diff tag that is having the
23:38 - id4 which means only this first box over
23:40 - here will expand itself horizontally in
23:43 - such a way that the entire available
23:46 - space will be occupied by this fourth
23:48 - element over here so guys let me just
23:50 - save this file now and try reloading
23:52 - this page once again on the browser so
23:54 - as you can see the entire available
23:56 - space is now being taken by the fourth
23:58 - element over here and the remaining
23:59 - space is being taken by the other
24:01 - elements over here so guys in this way
24:03 - you can also provide the flex grow CSS
24:06 - property now guys apart from this let us
24:08 - say we want the second element that is
24:09 - having the id2 over here which is at the
24:12 - last place in this case we want that
24:14 - element as well to expand but it should
24:17 - be double compared to the fourth element
24:19 - which is displayed at the first position
24:21 - so guys what we can do is simply we can
24:23 - provide Flex grow it is equal to two
24:25 - over here so guys what will happen is
24:27 - the flex grow CSS property for 1 and
24:30 - three will be zero which means they will
24:32 - take only this particular space or width
24:35 - inside the container and then for the
24:36 - fourth element we have the flex grow
24:38 - equal to 1 but we have the double of
24:41 - this one which is equal to two Flex grow
24:43 - for this particular second element so
24:45 - guys basically the width of this
24:47 - particular second element will be double
24:49 - compared to the width of this particular
24:51 - fourth element over here and accordingly
24:53 - the space will be provided to both these
24:55 - elements so guys let me just save this
24:57 - file now enter I reloading this page
24:59 - once again on the browser so if you
25:00 - notice the width of the second element
25:02 - is double compared to the fourth element
25:05 - over here and one and three are taking
25:07 - the required spaces that which they were
25:09 - taking at the original state so guys in
25:11 - this way you can provide the flex grow
25:13 - CSS property as well now guys apart from
25:15 - this we also have something called as
25:17 - Flex shrink which works opposite to the
25:19 - flex grow so it will reduce the size of
25:22 - the HTML element as far as its
25:24 - functionality is concerned so guys I
25:26 - leave this up to you as a homework for
25:28 - you you so that you can practice on your
25:29 - own apart from this we also have
25:31 - something called as Flex bases so guys
25:33 - basically this will help us in order to
25:35 - set the initial width of a HTML element
25:39 - so guys let us check that as well so
25:41 - what we will do is let us say for this
25:43 - first element we provide the IDS one
25:45 - over here and simply we will provide the
25:47 - CSS property for this ID 1 so guys let
25:50 - me just provide the CSS property of flex
25:53 - bases over here so what we can do is
25:55 - simply we can provide the width of 100
25:57 - pixels as the original width for this
25:59 - particular first element so guys simply
26:01 - you can provide the initial width with
26:04 - the help of the flex bases CSS property
26:06 - let me just save this file now and try
26:08 - reloading this page once again on the
26:10 - browser notice that the first element is
26:12 - now having the 100 pixels over here
26:14 - followed by the third element which is
26:16 - having the required width as necessary
26:18 - and then apart from this we have Flex
26:20 - grow equal to 1 for this fourth element
26:22 - and flex grow equal to 2 for the second
26:24 - element over here so in this way you can
26:26 - use the flex bases here property and
26:29 - then we also have something called as
26:31 - flag CSS property which is nothing but a
26:33 - shorthand method in order to provide all
26:36 - these CSS properties that is flex grow
26:38 - Flex shrink and flex bases over here so
26:41 - guys this as well you can practice on
26:43 - your own as a homework for you and then
26:45 - apart from this we also have something
26:46 - called as align self so guys basically
26:49 - it is similar to the Align content that
26:51 - we have seen for the flex container CSS
26:54 - property but when we say align self
26:56 - basically the value that we provide for
26:58 - the align self will override the value
27:00 - that we had provided in the Align
27:02 - content over here so guys let us check
27:04 - that as well in the flex container that
27:06 - is the container class we had provided
27:09 - the Align content as space evenly over
27:11 - here and they are at the center of the
27:13 - container so guys apart from this we
27:15 - have something called as align self over
27:17 - here which is similar to the Align items
27:20 - that we had provided in this case inside
27:22 - the flex container CSS property so guys
27:25 - whatever value we provide to the Align
27:27 - cell will override the value of the
27:29 - Align items that we had provided so guys
27:32 - let us check that as well so what we
27:34 - will do is first of all in the container
27:36 - that is the flex container over here we
27:38 - will comment out this line of code that
27:40 - is align content and then guys for this
27:43 - align items we have Center value so let
27:45 - me just check that as well so when we
27:47 - reload this page as you can see all the
27:49 - items are at the center as far as the
27:51 - vertical AIS that is the cross AIS is
27:54 - concerned now guys let us say we only
27:56 - want this fourth element to be at the
27:58 - start of this container that is at the
28:00 - top of the container over here so simply
28:02 - we can use the Align self CSS property
28:05 - specifically for this particular
28:07 - selector that is having the ID equal to
28:09 - 4 so guys simply we can provide aligned
28:12 - self CSS property over here and we can
28:15 - provide the value as start in this case
28:17 - so guys when we say Flex start over here
28:19 - let me just save this file now and try
28:21 - reloading this page once again on the
28:23 - browser so as you can see now the fourth
28:25 - element is getting displayed at the top
28:27 - of the container because of this Flex
28:29 - start value that we have provided to
28:31 - align self so guys simply the Align self
28:34 - CSS property is used in order to align
28:37 - the specific HTML element that is the
28:39 - flex item inside the flex container we
28:42 - can also have the Align self CSS
28:44 - property for the second element as well
28:46 - so over here we can provide the Align
28:48 - cells and let's say we provide the flex
28:50 - and value so basically the second
28:53 - element should be displayed at the
28:54 - bottom of the container so let me just
28:56 - save this file now and try reloading
28:58 - this page once again on the browser so
29:00 - as you can see the second element is now
29:02 - getting displayed at the bottom of this
29:04 - container so guys in this way you can
29:06 - use all these Flex items CSS property
29:09 - based on your project requirements so
29:11 - guys comment in the comment section
29:12 - below whether you have learned something
29:14 - out of this video please make sure that
29:15 - you like this video so that it reaches
29:17 - to more people and subscribe to this
29:19 - channel so that you get the
29:20 - notifications on upcoming videos as well
29:22 - the next video that we are going to talk
29:24 - about is Media queries in CSS so stay
29:27 - tuned

Cleaned transcript:

so now we will see flexbox in CSS so guys basically before the flexbox layout module there were four layout modes in the CSS so first of all we have the blog model which is used for displaying the sections in a web page apart from this we also have the inline model which is used for the displaying of the text and then we also have the table model which is used for the twodimensional table data and then we also have the position property in CSS which is used for explicit position of an element now guys we can use any of these models in order to display the content based on our website design now guys apart from this we can also use the flex boox layout module which we are going to check with the help of examples as well so the flexible box layout module makes it easier to design flexible responsive layout structure without using the float or the position property in this ESS so guys let us see a very simple example of the flexible box layout module so let us move to the vs code over here now before writing any code in this case what we are going to do is first of all we will understand how this Flex boox module will work so guys basically we can arrange the HTML elements in the row direction or the column Direction so when we move from left to right over here it is the row Direction and then when the HTML elements move from the top to bottom then it is called the column Direction in this case so guys simply we can provide the text over here that this is row Direction in this case and then apart from this we also have the column Direction over here so simply we are going to say column direction that is going from top to bottom so Guys these are the two directions in which the flex boox module will work now guys apart from this when we talk about the row direction we have two axis that is the main axis and the cross AIS so the axis that is moving from left to right is the main axis over here and the axis that is moving in the vertical direction that is top to bottom will be the cross AIS over here so simply we are going to provide the vertical axis in this case which is the cross AIS over here so guys basically this is the main axis that is going from left to right in this case and then apart from this the axis that is going in the vertical direction is the cross axis for the row Direction so guys this is a very simple understanding of the flexbox model so by default there is a row direction in which case the HTML elements will be placed in such a way that they will be placed from left to right direction and then we can also provide certain CSS properties in order to move the other HTML elements that is going beyond the screen on the right hand side to move at the bottom position as well which we are going to check with the help of examples and then guys in the row Direction itself we have the cross AIS which moves in the vertical Direction over here now guys similarly when we say column Direction in the flexbox model so basically the main AIS and the cross AIS will be opposite to each other so in this case when the flexbox model is in the the column Direction the vertical axis will be the main axis over here so let me just draw that as well so simply we are going to draw the vertical axis in this case and then we also have the horizontal axis so this is the horizontal axis over here and in column Direction the vertical axis is the main AIS so let me just copy this main AIS text over here and paste it at the vertical Direction and The Cross axis will move from left to right over here which is this particular axis in this case so guys basically is the reverse as far as the column direction is concerned so Guys these are the two things that you should know in the row Direction the main AIS belongs to the left to right direction and the cross AIS belongs to the vertical Direction over here whereas in column Direction the vertical AIS is the main AIS and the horizontal AIS is the cross AIS so guys let us move to the vs code over here in order to check the examples so simply we are going to provide the container class over here so we are going to have the dep tag with the class container and then let us say we have four diff tags over here so we have the first diff tag as one in this case and then we have 2 3 and then four now guys apart from this what we will do is we will make this container as the flexbox container so it is very important that when you are going to use the flex boox model you need to have the flex container as well so we are going to treat this particular parent di tag over here as the flex container so simply inside the style. CSS file we need to provide the container class in this case and then simply we can say display it is equal to flex so guys this is the way that we can use the flexbox model and then apart from this let us also have certain background color so let's say we have the background color as the black color over here and then for the diff tag as well we are going to have certain CSS properties so guys over here we are going to have container and then inside the container we need to provide the CSS properties to all the diff tags over here so guys simply we are going to say background color of yellow color in this case and then we are also going to provide the padding property of 20 pixels over here let me just save this file now and try reloading this page on the browser so let us see how it looks like so as you can see the black color background is for the diff container which is a flex boox container over here and then apart from this we also have the flex items in this case that is 1 2 3 and 4 we have provided the required padding in this case but we can also provide the margin as well so that there is certain space in between the border of the container and the border of the individual Flex items over here so guys basically we can have the margin of 10 pixels for all the flex items so guys basically the container is called the flex container in this case and whatever items are present inside the flex container are called the flex items let me just save this file now and try reloading this page once again on the browser so as you can see we have provided the margin of 10 pixels over here and this is a very simple example of a flex container in this case we can also have more items over here so inside the HTML file simply let me just provide two more div tags over here and the content we will provide it as five and six numbers let me just save this file now and try reloading this page once again on the browser so as you can see more items are getting added over here based on the HTML content that we have provided so guys this is the way that we can provide the flex container with the help of the display equ Al to flex value and then apart from this we can provide the different CSS properties for the flex items inside the flex container as well now guys apart from this we also have multiple other CSS properties over here so as you can see the flex container properties are first of all we have something called as Flex Direction so guys this is nothing but the direction that we have just understood with the help of these graphs over here so by default the flex direction is the row Direction over here we can change it to column direction as well so let us check that how it looks like so guys basically what we have to do is this Flex direction is the CSS property for the flex container so guys simply inside the container class we need to provide the flex Direction CSS property and by default the value is Row in this case so let me just save this file now and try reloading this page once again on the browser so there is no change because this is the default value now guys instead of row we can also have row reverse over here in which case the items will be displayed from right to left in this case so basically by default the items are getting displayed from left to right in this particular direction but if we want the direction to be reversed that is from right to left we can change the flex direction to row revers so let me just save this file now and try reloading this page once again on the browser so as you can see the items are now getting displayed from right to left first we have the div tag with the content that is one and then we have 2 3 4 and so on the content is displayed from right to left now guys apart from this we also have something called as column Direction over here so instead of having row reverse simply we can have the column value for this Flex Direction so guys what will happen is over here just we have understood with the help of the craft in the column Direction This is the main axis in which case the HTML elements will be displayed from top to left over here so guys let us check that as well when we change the flex direction to column the first element should be displayed at the top and then the second element should be displayed below the first element and so on all the elements will be placed in the vertical Direction over here so guys let me just reload this page once again so as you can see we have one and then followed by two and so on all the elements are getting displayed over here apart from this you can also set the width of individual element in this case in order to avoid the div element taking the entire width of the screen so guys in this way you can also use the column Direction over here and then you can also use the column reverse as well in which case the first element will be displayed at the bottom and Then followed by two and so on the last element will be displayed at the top so when we reload this page as you can see first we have the Sixth Element and then we have Fifth and so on the elements are displayed in the column reverse Direction so guys this is the way that you can set the flex Direction over here apart from this we also have something called as Flex wrap so guys basically in order to understand this Flex wrap property what we have to do is we need to add more elements over here inside the container and also we need to make the flex direction as Row in this case which is the default value so guys let me just save this file now and try reloading this page so as you can see these are the elements that are getting displayed now what we will do is we will add more diff tags over here so let me just copy paste these lines of code and then let me just change the content over here so guys basically we are updating the content and let us set 14 number of div tags over here so guys we have 1 to 14 div tags in this case let me just save this file now and try reloading this page once again on the browser so if you notice we are going from left to right in this case 1 2 3 4 and so on you can see at the bottom we are getting the horizontal scroll bar over here and the content is going beyond the width of the screen in this case the last element is 14 over here now guys let us say whatever elements are going outside of the width of the screen in this case we want those items to to be displayed below these items that is 1 2 3 and so on so basically we don't want this horizontal scroll bar to be displayed so guys what we can do is simply we can use this Flex WRA CSS property so guys by default the value of this Flex WRA CSS property is no WRA over here in which case all the elements will go beyond the width of the screen as you can see but when we set the value as wrap in this case so basically whatever elements that do not have any space left beyond the width of the screen will be displayed at the bottom over here within the same container so guys let me just save this file now after providing the W value to the flag rep and reload this page once again on the browser so as you can see 11 12 13 and 14 are now getting displayed at the bottom over here in the same container so guys in this way you can also use the flag W CSS property when you have more number of HTML elements within the same container which is going beyond the width of the screen now guys apart from this we also have something called Flex flow over here which is nothing but the shorthand CSS property for the flex Direction and flex rep CSS property so guys let me just remove both these properties over here and let us see how it looks like on the browser so as you can see it is in the row Direction and there is no W over here so simply we can provide the flex flow CSS property and let's say we want the row Direction over here so simply we provide row followed by the space character and then we provide the rra value over here so guys basically we are providing the the values for Flex Direction and flex W in this shorthand CSS property that is flex flow let me just save this file now and try reloading this page once again on the browser as you can see now the items are getting wrapped over here apart from this instead of having row value we can also have row reverse as well so that the items are displayed from right to left Direction so when we reload this page as you can see the first element is at the right and then we have 2 3 4 last element is 10 and then the other elements are displayed on the next next line that is 11 12 13 and 14 so guys in this way you can use the flex flow CSS property which is the shorthand method for Flex Direction and flex rep CSS property now guys apart from this we also have something called as justify content which is used to align the HTML elements inside the flex container over here so guys let us check that as well how we can use it so simply let us move to the row W so simply let us change this value to row so that the flex items are getting display in the default Direction let me just reload this page so as you can see these are the HTML elements that are getting displayed inside the flex container now guys when we say justify content it is having multiple values so as you can see if we want to provide the HTML elements at the center of the container so simply we can provide the center value let me just save this file now and try reloading this page once again on the browser so as you can see all the HTML elements now are being displayed at the center of this particular flag container over here so let us check this with the less number of HTML elements over here so what we will do is simply we are going to keep the diff text from 1 to 5 over here and let me comment out the other lines of code let me just save this file now and try reloading this page so as you can see this is the center value of the justify content and if we want to align them at the left side of the container simply we can say the start value for this justify content over here let me just save this file now and try reloading this page so as you can see the elements are now getting displayed at the start of the container that is on the left hand side and then when we say end that means we can align the HTML elements at the right hand side of the container so guys as you can see the elements are getting aligned at the right hand side of this main AIS based on the row Direction over here now similarly for the column direction as well we will have the justify content based on the main axis so guys in the column Direction our top to bottom axis becomes the main main AIS over here and justify content will be used in order to align it based on the main AIS so I leave this up to you as a homework for you so that you can practice on your own apart from this we also have something called as align items over here so guys let us check that as well so what we will do is let us say we want to increase the height of the container that is the flex container over here so simply we are going to set the height of flex container to 200 pixels and let us say we have the justify content as the the center value so that all the HTML elements are displayed at the center so guys let me just save this file now and try reloading this page so as you can see the height of the flex container is now 200 pixels over here and all the HTML elements are now taking the entire height of this particular Flex container over here now guys what is the meaning of the Align items so basically just like how we have used the justify content in order to align the items horizontally that is at the main is of this row Direction over here the Align items will be used in order to align these HTML elements against the cross AIS in this case the cross AIS is the top to bottom or the horizontal AIS over here so guys let us check that as well so simply we need to provide the Align items CSS property for this container class and then let us say we want to provide the value as Center over here let me just save this file now and try reloading this page once again on the browser as you can see see vertically now all the HTML elements are at the center of this container similarly if we want all these elements to be present at the top of the container so we can say start value for this align items so guys if you notice when we say start the Align items work with the cross AIS over here which is the vertical axis in this case when we talk about the row direction of the flexbox model so let me just save this file now and try reloading this page once again on the browser so as you can see the HTML elements are now getting displayed at the top of this particular container and similarly if we want these elements to be present at the bottom of the container as far as the cross AIS is concerned we can simply provide the end value so when we reload this page as you can see at the bottom of the flex container we are getting all the HTML elements so guys this is the difference between the justify content and the Align items so basically the justifier content work towards the main exis of the flexbox model and the Align items work towards the cross AIS of the flexbox model now Guys these directions will change when we change the flex direction to column Direction over here so in this case the justify content will allow us to provide the HTML elements alignment towards the main axis that is the vertical axis over here and the Align items will help the alignment across the cross AIS over here which is the horizontal axis as far as the column direction is concerned now guys apart from this we also have something called as align content over here so guys in order to understand this we need to uncomment these lines of code over here so that we have more number of HTML elements let me just save this file now and also for the Align items over here we will keep the alignment as the center value in this case let me just reload this page once again over here as you can see we have all the HTML elements we have the Align items as the center and also the justify content as the center now guys the Align content CSS property will help us in order to provide the spacing between these HTML elements as far as the cross XS is concerned so guys let us check that as well so what we will do is simply we can say align content over here and there are multiple values in this case so let's say we provide space around value so guys let us check how it looks like so when we save this file now and try reloading this page once again on the browser notice that we have the same space on the top and at the bottom of all the HTML elements over here and that is how the space around value will work and then apart from this we also have something called a space between over here let me check that as well so when we reload this page once again on the browser as you can see at the top of the first line and at the bottom of the second line over here we have the equal space and the equal amount of space is present in between all these HTML elements as far as the cross AIS is concerned apart from this we also have another another value that is space evenly over here so let us check that as well so when we reload this page as you can see on the top at the middle and at the bottom as well all the spaces are equal in this case so guys based on your project requirements you can simply provide different values for the Align content CSS property which is part of the flex container over here so Guys these are some of the CSS properties that you can use based on your requirements as far as the flex container CSS properties are concerned now guys apart from this the flexbox model also allows you to center a div element very easily using display equal to flex value so guys I leave this exercise as a homework for you simply you can provide a justify content equal to Center and also the Align items as the center value over here so guys just by setting these two CSS properties you can provide the diff tag at the center of the container just like how we have done with all these multiple HTML elements now guys apart from this we also have some of the flex item properties over here so previously whatever properties we have seen belongs to the flex container over here which we have mentioned inside the dot container class but we can also provide the CSS properties to the flex items which are represented by these diff tags over here so guys let us check that as well so what we will do is first of all we have something called as order over here so guys let us check that as well so basically we are going to reduce the number of flag items that are getting displayed to four diff tags over here so we have one to four diff tags let me just save this file now and try reloading this page once again on the browser notice that we have the justify content as Center and also the Align items as Center over here so as you can see these are the CSS properties that are making us display the diff tags at the center of the container now guys let us say we want to change the order of these diff tags over here so it is not necessary that all the diff tags that you have provided inside the HTML file file needs to be displayed in the same order so let's say we have the ID for this fourth diff tag S4 over here so what we have to do is we need to provide the order CSS property inside this particular HTML element so guys let me just save this file now and we will copy this ID over here of the diff tag that is four in this case and then we will provide the hash character followed by the four that is the ID of the fourth diff tag and simply we can say order equal to minus1 so guys basically by default the order of the HTML elements is zero over here so simply we can provide minus1 in this case so that this is given the highest priority so let me just save this file now and try reloading this page once again on the browser notice that the fourth element is now getting displayed first followed by 1 2 3 which are having the other order values now guys apart from this let us also provide the ID for the second div element that is two over here so simply we will provide the ID as two let me just save this file now and over here we will provide this ID in this case and what we will say is the order it is equal to one so let me just save this file now and try reloading this page once again on the browser notice that the second element is now getting displayed at the end in this case so guys by default we have the order as zero for first and the third element for which we have not provided the order property and for the fourth element we have order equal to minus1 which is then given the highest priority and then the least priority is given to the two which is having order equal to 1 so guys lesser the number will be having more priority as far as displaying that HTML element inside the container is concerned so guys this is one of the CSS property for the flex item over here apart from this we have something called as Flex grow in this case so guys if you notice there is a lot of space that is available at the left hand side and the right hand side of all these Flex items over here so what we can do is we can occupy that Space by using the flex grow CSS property so let's say by default the width of all these three items that is 1 3 and two is same over here and the remaining space that is present on the left and on the right we want it to be occupied by this first element that is the diff tag having the content four so guys what we can do is simply we can provide Flex grow CSS property to this div tag that is having the ID equal to 4 over here and then simply we can provide the value as one by by default the flex grow CSS property is having the value as zero but simply we can provide the value as one in which case only this particular diff tag that is having the id4 which means only this first box over here will expand itself horizontally in such a way that the entire available space will be occupied by this fourth element over here so guys let me just save this file now and try reloading this page once again on the browser so as you can see the entire available space is now being taken by the fourth element over here and the remaining space is being taken by the other elements over here so guys in this way you can also provide the flex grow CSS property now guys apart from this let us say we want the second element that is having the id2 over here which is at the last place in this case we want that element as well to expand but it should be double compared to the fourth element which is displayed at the first position so guys what we can do is simply we can provide Flex grow it is equal to two over here so guys what will happen is the flex grow CSS property for 1 and three will be zero which means they will take only this particular space or width inside the container and then for the fourth element we have the flex grow equal to 1 but we have the double of this one which is equal to two Flex grow for this particular second element so guys basically the width of this particular second element will be double compared to the width of this particular fourth element over here and accordingly the space will be provided to both these elements so guys let me just save this file now enter I reloading this page once again on the browser so if you notice the width of the second element is double compared to the fourth element over here and one and three are taking the required spaces that which they were taking at the original state so guys in this way you can provide the flex grow CSS property as well now guys apart from this we also have something called as Flex shrink which works opposite to the flex grow so it will reduce the size of the HTML element as far as its functionality is concerned so guys I leave this up to you as a homework for you you so that you can practice on your own apart from this we also have something called as Flex bases so guys basically this will help us in order to set the initial width of a HTML element so guys let us check that as well so what we will do is let us say for this first element we provide the IDS one over here and simply we will provide the CSS property for this ID 1 so guys let me just provide the CSS property of flex bases over here so what we can do is simply we can provide the width of 100 pixels as the original width for this particular first element so guys simply you can provide the initial width with the help of the flex bases CSS property let me just save this file now and try reloading this page once again on the browser notice that the first element is now having the 100 pixels over here followed by the third element which is having the required width as necessary and then apart from this we have Flex grow equal to 1 for this fourth element and flex grow equal to 2 for the second element over here so in this way you can use the flex bases here property and then we also have something called as flag CSS property which is nothing but a shorthand method in order to provide all these CSS properties that is flex grow Flex shrink and flex bases over here so guys this as well you can practice on your own as a homework for you and then apart from this we also have something called as align self so guys basically it is similar to the Align content that we have seen for the flex container CSS property but when we say align self basically the value that we provide for the align self will override the value that we had provided in the Align content over here so guys let us check that as well in the flex container that is the container class we had provided the Align content as space evenly over here and they are at the center of the container so guys apart from this we have something called as align self over here which is similar to the Align items that we had provided in this case inside the flex container CSS property so guys whatever value we provide to the Align cell will override the value of the Align items that we had provided so guys let us check that as well so what we will do is first of all in the container that is the flex container over here we will comment out this line of code that is align content and then guys for this align items we have Center value so let me just check that as well so when we reload this page as you can see all the items are at the center as far as the vertical AIS that is the cross AIS is concerned now guys let us say we only want this fourth element to be at the start of this container that is at the top of the container over here so simply we can use the Align self CSS property specifically for this particular selector that is having the ID equal to 4 so guys simply we can provide aligned self CSS property over here and we can provide the value as start in this case so guys when we say Flex start over here let me just save this file now and try reloading this page once again on the browser so as you can see now the fourth element is getting displayed at the top of the container because of this Flex start value that we have provided to align self so guys simply the Align self CSS property is used in order to align the specific HTML element that is the flex item inside the flex container we can also have the Align self CSS property for the second element as well so over here we can provide the Align cells and let's say we provide the flex and value so basically the second element should be displayed at the bottom of the container so let me just save this file now and try reloading this page once again on the browser so as you can see the second element is now getting displayed at the bottom of this container so guys in this way you can use all these Flex items CSS property based on your project requirements so guys comment in the comment section below whether you have learned something out of this video please make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is Media queries in CSS so stay tuned
