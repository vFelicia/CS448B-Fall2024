With timestamps:

00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to learn
00:03 - about generators in Python Programming
00:06 - so guys in Python a generator is a
00:09 - function that returns an iterator that
00:11 - produces a sequence of values when
00:13 - iterated over so basically a generator
00:16 - is nothing but it is a function that
00:18 - will help us in order to generate the
00:20 - sequence of values and we can iterate
00:22 - through those values now generators are
00:24 - very useful when we want to produce a
00:26 - large sequence of values but we don't
00:28 - want to store all of them in memory at
00:31 - once so guys we are going to check this
00:33 - with the help of examples as well how
00:35 - generators are very memory efficient as
00:37 - far as Python Programming is concerned
00:39 - now similar to defining a normal
00:41 - function we can define a generator
00:43 - function using the def keyword but
00:46 - instead of the return statement we use
00:48 - the yield statement so as you can see
00:51 - this is the syntax of the generator
00:52 - function we have the def keyword
00:55 - followed by the name of the function it
00:57 - can take any argument over here and as
00:59 - you can see one of the statements must
01:01 - be including the yield keyword over here
01:03 - so this statement will yield something
01:05 - instead of returning the value so
01:07 - basically the yield keyword is used to
01:10 - produce a value from the generator and
01:12 - pause the generator function's execution
01:14 - until the next value is requested so
01:17 - guys let us check this with the help of
01:19 - example code now we are going to check
01:20 - how the python generators work with the
01:22 - help of the debugging so guys let's say
01:24 - We'll Define the function over here
01:26 - using the TEF keyword and Then followed
01:28 - by the name of the function that is the
01:30 - num generator so we are going to
01:32 - generate some numbers over here so we
01:34 - have this num generator function and
01:36 - then it is going to take the argument as
01:38 - the maximum value up to which we want to
01:41 - generate the numbers and then after this
01:43 - colon what we will do is we will
01:45 - initialize the value of n it is equal to
01:47 - 0 and then what we will do is we will
01:50 - have the while loop and it is going to
01:52 - check whether this n is it less than or
01:55 - equal to Max so over here we are going
01:57 - to give the condition that this n value
01:59 - must speed less than or equal to this
02:02 - max value over here so the number it
02:04 - starts from 0 and then it will go up to
02:06 - the number that is Max which will be
02:07 - given as the parameter while calling
02:10 - this generator so guys what we have to
02:12 - do is we have to use the yield keyword
02:13 - so over here what we will be doing is
02:16 - whatever the N value is we will be
02:18 - providing that value so we will be
02:19 - returning that value so we provide this
02:22 - statement that is yield n and then after
02:24 - this what we will do is we will
02:26 - increment the value of n so n plus it is
02:28 - equal to 1 so we will increment the
02:31 - value of n by 1 over here so guys this
02:33 - is the way we have created the generator
02:35 - function now how do we call it so guys
02:37 - outside this function we will be having
02:39 - the for Loop and then we will get all
02:41 - the values that is being generated by
02:43 - this num generator over here in the item
02:46 - so we have item and then n and Then
02:48 - followed by the function name that is
02:50 - the generator name over here so guys
02:52 - while calling this generator it is
02:54 - expecting one argument so we are going
02:56 - to give this number as 5 over here so
02:58 - the numbers will be from from 0 up to 5
03:01 - in this case and then we will provide a
03:03 - colon and simply we are going to print
03:05 - the item in this case so we have item
03:08 - and then let's say in order to get all
03:10 - the numbers on the same line we will
03:12 - have the end parameter and we will
03:14 - separate all the numbers using the space
03:16 - character inside this and parameter over
03:18 - here so guys let me just save this file
03:20 - now and try running this code so as you
03:22 - can see it is generating all the numbers
03:24 - that is 0 1 2 3 4 5 so guys this is the
03:27 - way that the generator works now guys
03:29 - you will ask me like what is the
03:31 - difference like we can also have the
03:33 - range over here in order to get all the
03:35 - numbers from 0 to 5. so what is the
03:37 - importance of writing this generator as
03:40 - a function over here so guys the
03:41 - important advantage of using this
03:43 - generator is it is very memory efficient
03:46 - so when we are saying that yield n that
03:48 - means only one number at a time is
03:50 - getting generated over here 0 is getting
03:53 - generated only once and then we have one
03:55 - over here then we have 2 over here so
03:57 - all these numbers are not being stored
03:59 - in in the memory but during the run time
04:02 - individual numbers are getting generated
04:04 - one at a time by using this num
04:06 - generator so guys let us check this how
04:09 - it works using the debugging so what I
04:11 - will do is I'll provide a breakpoint
04:13 - over here on the for Loop and then we
04:15 - will say run and then we will say start
04:17 - debugging over here so one at a time we
04:20 - will come to know what are the different
04:21 - steps that the control flow is going
04:23 - through so over here as you can see the
04:25 - control flow has stopped over here now
04:27 - let us go inside this so I'll click on
04:30 - this step into action over here so when
04:32 - we click on this as you can see the
04:33 - control flow has come over here that's
04:35 - because the num generator with 5 has
04:38 - been called right now and then again we
04:40 - will click on this to go to the next
04:42 - step so we are on the while loop now and
04:44 - then what it is doing is it is yielding
04:46 - this value that is n so when we press
04:49 - once again so as you can see it has come
04:52 - back over here print the item so
04:53 - basically what has happened is it has
04:55 - returned the value of n that is 0 and it
04:58 - is assigned to this very variable that
05:00 - is item so again when we press on the
05:03 - step into as you can see the 0 is
05:05 - getting printed now so basically the
05:07 - item got printed after the statement
05:09 - that is yield n was executed and then
05:12 - next time once again the control flow
05:14 - has gone to the for loop again it says
05:17 - that num generator we need to call so
05:19 - the control flow will see that the
05:21 - previous time it was returned from here
05:23 - so the control flow will go to the next
05:25 - line that is n is equal to n plus 1 so
05:28 - the value of n will be incremented now
05:30 - and then again we go to step into we go
05:33 - to the while loop once again and then
05:35 - again yield n this time the value of n
05:37 - will be 1 so n is being returned and is
05:40 - assigned to this item and then again we
05:42 - will print the value of item so as you
05:44 - can see one is getting printed once
05:46 - again and then when we press the step
05:48 - into actions once again as you can see 2
05:51 - is getting printed now and then again
05:53 - the next time 3 should get printed as
05:55 - you can see 3 is getting printed so guys
05:57 - basically the main advantage of this
05:59 - gender greater function is to generate
06:02 - one number at a time and not store all
06:05 - the numbers in the memory so this is the
06:07 - memory efficient operation that is being
06:09 - carried out by this generator in the
06:11 - Python Programming so guys when we press
06:13 - on this continue then the other number
06:15 - should get printed over here now guys
06:17 - let us move to another task we have
06:19 - something called as python generator
06:21 - expression so basically in Python a
06:24 - generator expression is a concise way to
06:26 - create a generator object so basically
06:29 - this is the syntax that is expression
06:31 - followed by 4 and then we have item in
06:33 - iterable so guys let us check this as
06:35 - well with the help of example now what
06:37 - we will do is we will have the square
06:39 - generator so basically this generator
06:41 - will be used in order to get the square
06:44 - of the numbers it is equal to what we
06:46 - will do is as we have seen over here
06:48 - this is the syntax first of all we are
06:50 - going to have the expression inside the
06:52 - parenthesis and then we are going to
06:54 - have the for keyword followed by item
06:56 - and then in the iterable so we can
06:58 - simply find the square of the num number
07:00 - by multiplying that number by itself so
07:02 - what we are going to do is we will say I
07:04 - multiplied by I now from where this I
07:07 - will come we will have the for keyword
07:09 - and then this I will come from here that
07:12 - is I in and then we can say range and
07:15 - then we can simply provide the number
07:17 - that is 5 so basically this range will
07:19 - help us to generate the numbers from 0
07:21 - to 4 and 1 at a time all the numbers
07:24 - that is 0 to 4 will be assigned to this
07:26 - variable that is I and then I multiplied
07:29 - by I will be generated and it will be
07:31 - assigned to this generator and we can
07:33 - simply iterate through this generator in
07:35 - order to print all the numbers that is
07:37 - the square of these numbers over here so
07:39 - guys how we will do that we will simply
07:41 - use the for Loop now and then over here
07:44 - we will say element in and then we can
07:47 - simply have the square generator over
07:49 - here and then we can simply provide the
07:51 - print statement and we can print the
07:53 - element so guys basically this is going
07:56 - to print the square of the numbers going
07:58 - from 0 up to 4 over here in this case so
08:01 - let me just save this file now and try
08:03 - running this code
08:04 - so as you can see square of 0 it is 0
08:06 - square of 1 is 1 the next number is 2 so
08:09 - 2 2's are 4 and then the next number is
08:12 - 3 so square of 3 is 9 and then the next
08:14 - number that is 4 the square of 4 is 16
08:17 - over here so guys this is the way that
08:19 - we can use the python generator
08:21 - expression as we have seen over here in
08:23 - order to generate the numbers and one at
08:25 - a time iterate through them by using the
08:27 - for Loop over here now guys why do we
08:29 - use this python generator so basically
08:31 - it is very easy to implement as compared
08:34 - to the iterables that we have seen
08:36 - previously you can easily generate the
08:38 - generators in order to iterate Through
08:40 - Time Another important Advantage is it
08:42 - is memory efficient as we have seen that
08:45 - only one item at a time is getting
08:47 - returned whenever we are using the
08:49 - generator function so we use the yield
08:52 - keyword instead of the return keyword in
08:54 - order to return the individual elements
08:57 - inside the generator it also represents
08:59 - the infinite stream of data so basically
09:01 - whenever we are going to implement the
09:03 - infinite stream of data it becomes very
09:06 - important that we can use the generator
09:08 - so as you can see for example we have
09:10 - this all even function over here n value
09:12 - is initialized as 0 and then we can say
09:15 - while true yield and value so over here
09:17 - one value of n will be returned at a
09:20 - time so basically this is very memory
09:22 - efficient over here we are not storing
09:24 - all the values in a particular list but
09:27 - we are generating one number at a time
09:29 - next time the value of n will be
09:30 - incremented by 2 in this case so guys
09:33 - generators are very important whenever
09:34 - you are going to deal with programs
09:36 - which requires memory efficiency so guys
09:39 - please practice on your own so that on
09:40 - different inputs you get different
09:42 - output make sure that you like this
09:43 - video so that it reaches to more people
09:45 - and subscribe to this channel so that
09:47 - you get the notifications on upcoming
09:49 - videos as well the next video that we
09:51 - are going to talk about is closures in
09:53 - Python Programming so stay tuned

Cleaned transcript:

hey what's up guys welcome to another video in which we are going to learn about generators in Python Programming so guys in Python a generator is a function that returns an iterator that produces a sequence of values when iterated over so basically a generator is nothing but it is a function that will help us in order to generate the sequence of values and we can iterate through those values now generators are very useful when we want to produce a large sequence of values but we don't want to store all of them in memory at once so guys we are going to check this with the help of examples as well how generators are very memory efficient as far as Python Programming is concerned now similar to defining a normal function we can define a generator function using the def keyword but instead of the return statement we use the yield statement so as you can see this is the syntax of the generator function we have the def keyword followed by the name of the function it can take any argument over here and as you can see one of the statements must be including the yield keyword over here so this statement will yield something instead of returning the value so basically the yield keyword is used to produce a value from the generator and pause the generator function's execution until the next value is requested so guys let us check this with the help of example code now we are going to check how the python generators work with the help of the debugging so guys let's say We'll Define the function over here using the TEF keyword and Then followed by the name of the function that is the num generator so we are going to generate some numbers over here so we have this num generator function and then it is going to take the argument as the maximum value up to which we want to generate the numbers and then after this colon what we will do is we will initialize the value of n it is equal to 0 and then what we will do is we will have the while loop and it is going to check whether this n is it less than or equal to Max so over here we are going to give the condition that this n value must speed less than or equal to this max value over here so the number it starts from 0 and then it will go up to the number that is Max which will be given as the parameter while calling this generator so guys what we have to do is we have to use the yield keyword so over here what we will be doing is whatever the N value is we will be providing that value so we will be returning that value so we provide this statement that is yield n and then after this what we will do is we will increment the value of n so n plus it is equal to 1 so we will increment the value of n by 1 over here so guys this is the way we have created the generator function now how do we call it so guys outside this function we will be having the for Loop and then we will get all the values that is being generated by this num generator over here in the item so we have item and then n and Then followed by the function name that is the generator name over here so guys while calling this generator it is expecting one argument so we are going to give this number as 5 over here so the numbers will be from from 0 up to 5 in this case and then we will provide a colon and simply we are going to print the item in this case so we have item and then let's say in order to get all the numbers on the same line we will have the end parameter and we will separate all the numbers using the space character inside this and parameter over here so guys let me just save this file now and try running this code so as you can see it is generating all the numbers that is 0 1 2 3 4 5 so guys this is the way that the generator works now guys you will ask me like what is the difference like we can also have the range over here in order to get all the numbers from 0 to 5. so what is the importance of writing this generator as a function over here so guys the important advantage of using this generator is it is very memory efficient so when we are saying that yield n that means only one number at a time is getting generated over here 0 is getting generated only once and then we have one over here then we have 2 over here so all these numbers are not being stored in in the memory but during the run time individual numbers are getting generated one at a time by using this num generator so guys let us check this how it works using the debugging so what I will do is I'll provide a breakpoint over here on the for Loop and then we will say run and then we will say start debugging over here so one at a time we will come to know what are the different steps that the control flow is going through so over here as you can see the control flow has stopped over here now let us go inside this so I'll click on this step into action over here so when we click on this as you can see the control flow has come over here that's because the num generator with 5 has been called right now and then again we will click on this to go to the next step so we are on the while loop now and then what it is doing is it is yielding this value that is n so when we press once again so as you can see it has come back over here print the item so basically what has happened is it has returned the value of n that is 0 and it is assigned to this very variable that is item so again when we press on the step into as you can see the 0 is getting printed now so basically the item got printed after the statement that is yield n was executed and then next time once again the control flow has gone to the for loop again it says that num generator we need to call so the control flow will see that the previous time it was returned from here so the control flow will go to the next line that is n is equal to n plus 1 so the value of n will be incremented now and then again we go to step into we go to the while loop once again and then again yield n this time the value of n will be 1 so n is being returned and is assigned to this item and then again we will print the value of item so as you can see one is getting printed once again and then when we press the step into actions once again as you can see 2 is getting printed now and then again the next time 3 should get printed as you can see 3 is getting printed so guys basically the main advantage of this gender greater function is to generate one number at a time and not store all the numbers in the memory so this is the memory efficient operation that is being carried out by this generator in the Python Programming so guys when we press on this continue then the other number should get printed over here now guys let us move to another task we have something called as python generator expression so basically in Python a generator expression is a concise way to create a generator object so basically this is the syntax that is expression followed by 4 and then we have item in iterable so guys let us check this as well with the help of example now what we will do is we will have the square generator so basically this generator will be used in order to get the square of the numbers it is equal to what we will do is as we have seen over here this is the syntax first of all we are going to have the expression inside the parenthesis and then we are going to have the for keyword followed by item and then in the iterable so we can simply find the square of the num number by multiplying that number by itself so what we are going to do is we will say I multiplied by I now from where this I will come we will have the for keyword and then this I will come from here that is I in and then we can say range and then we can simply provide the number that is 5 so basically this range will help us to generate the numbers from 0 to 4 and 1 at a time all the numbers that is 0 to 4 will be assigned to this variable that is I and then I multiplied by I will be generated and it will be assigned to this generator and we can simply iterate through this generator in order to print all the numbers that is the square of these numbers over here so guys how we will do that we will simply use the for Loop now and then over here we will say element in and then we can simply have the square generator over here and then we can simply provide the print statement and we can print the element so guys basically this is going to print the square of the numbers going from 0 up to 4 over here in this case so let me just save this file now and try running this code so as you can see square of 0 it is 0 square of 1 is 1 the next number is 2 so 2 2's are 4 and then the next number is 3 so square of 3 is 9 and then the next number that is 4 the square of 4 is 16 over here so guys this is the way that we can use the python generator expression as we have seen over here in order to generate the numbers and one at a time iterate through them by using the for Loop over here now guys why do we use this python generator so basically it is very easy to implement as compared to the iterables that we have seen previously you can easily generate the generators in order to iterate Through Time Another important Advantage is it is memory efficient as we have seen that only one item at a time is getting returned whenever we are using the generator function so we use the yield keyword instead of the return keyword in order to return the individual elements inside the generator it also represents the infinite stream of data so basically whenever we are going to implement the infinite stream of data it becomes very important that we can use the generator so as you can see for example we have this all even function over here n value is initialized as 0 and then we can say while true yield and value so over here one value of n will be returned at a time so basically this is very memory efficient over here we are not storing all the values in a particular list but we are generating one number at a time next time the value of n will be incremented by 2 in this case so guys generators are very important whenever you are going to deal with programs which requires memory efficiency so guys please practice on your own so that on different inputs you get different output make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is closures in Python Programming so stay tuned
