With timestamps:

00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to learn
00:03 - about variable scope in Python
00:05 - Programming so guys in Python we can
00:08 - declare variables in three different
00:09 - Scopes so these are local scope Global
00:13 - scope and a non-local scope so we will
00:15 - check all these Scopes one by one with
00:17 - the help of examples so first of all
00:19 - what are local variables so when we
00:21 - declare the variables inside a function
00:23 - these variables will have a local scope
00:26 - that is within the function only we
00:28 - cannot access them outside the function
00:30 - so let us check this with the help of
00:32 - examples now over here so let's say we
00:34 - have a function over here by using the
00:36 - def keyword we Define the function that
00:38 - is ADD and then after the open and close
00:40 - parenthesis we have a colon over here
00:43 - and let's say we have two variables that
00:45 - is a it is equal to 10 and then we have
00:48 - B it is equal to 20 and then we just
00:50 - want to print the sum of these two
00:52 - numbers so we will simply do print of a
00:55 - plus b over here and then we can simply
00:57 - call this function by using the function
00:59 - name that this add followed by open and
01:01 - close parenthesis so let me just save
01:03 - this file and try running this code now
01:05 - so as you can see 30 that is the sum of
01:07 - 10 and 20 is getting displayed now guys
01:09 - let us say I want to access these
01:12 - variables that is a and b which is
01:14 - defined in this function that is ADD so
01:17 - can we do that from outside this
01:19 - function that we have defined so let us
01:21 - check that so let us say I want to print
01:23 - the value of a over here so when we
01:26 - provide a print followed by the variable
01:28 - name that is a so let me just save this
01:30 - file and try running this code to see
01:32 - what happens so as you can see we are
01:34 - getting some error name error name a is
01:37 - not defined so guys because we have
01:39 - defined the variable that is a and b
01:41 - inside the function that is ADD we can
01:44 - only access them within this function
01:46 - and not outside of this function and
01:49 - that is what we call it as a local scope
01:51 - now if the same thing that is print a if
01:53 - we just remove from here and we print
01:56 - over here that is within the function
01:58 - and then we need to call that function
01:59 - so so that a control flow goes inside
02:02 - that function and print both the
02:03 - statements now this time we are
02:06 - accessing the value of a from within
02:08 - that function so we should be able to
02:11 - access that variable so let me just save
02:13 - this file and try running this code now
02:14 - so as you can see we are not getting any
02:16 - error first of all we are printing the
02:18 - value of a that is 10 as you can see 10
02:20 - is getting displayed and then print a
02:22 - plus b so 30 is getting displayed which
02:25 - is the sum of those two variables
02:27 - because this is the local scope which
02:29 - means the variable that is defined
02:30 - within the function can only be accessed
02:33 - from that function itself now guys let
02:35 - us move to another scope as you can see
02:37 - we have Global variables as well so a
02:39 - variable declared outside of the
02:42 - function or in a global scope is known
02:45 - as a global variable so this means that
02:47 - a global variable can be accessed inside
02:50 - or outside of a function so what this
02:53 - means so basically let's say when we
02:55 - have this a is equal to 10 outside of
02:57 - this function so I'll just remove this
02:59 - line of code over here and before this
03:01 - function is defined we assign the
03:04 - variable that is a so when we use a
03:06 - particular variable outside of this
03:08 - function this variable is called as a
03:10 - global variable so this variable can be
03:12 - used from within the function also and
03:15 - outside of the function also so we have
03:17 - the same function that is ADD over here
03:19 - and then B value it is equal to 20 so we
03:22 - have the print and then what I will do
03:24 - is I will say inside function so that we
03:28 - can identify that this statement is from
03:31 - within the function itself so inside
03:33 - function and then we will print the
03:35 - value of a and then print a plus b that
03:38 - is the sum of these two numbers will be
03:39 - displayed over here and then what I will
03:41 - do is I will again copy this line of
03:44 - code and paste this over here and then
03:46 - I'll say outside function
03:48 - so we have outside function over here so
03:51 - first of all this line of code that is
03:52 - outside function and then the value of a
03:54 - will get printed and then add will be
03:57 - called and then what will happen is
03:58 - inside function and value of a will be
04:01 - printed and then a plus b will get
04:03 - printed over here so let me just save
04:05 - this file and try running this code now
04:06 - as you can see outside function the
04:09 - value is 10 since we have provided the
04:11 - global variable over here and from
04:13 - within that function itself we can
04:15 - access the value of a again and that is
04:18 - what we are getting inside function it
04:20 - is equal to 10 and then 30 is the sum of
04:22 - these two numbers that is a plus b so
04:25 - guys this is the way that we can use the
04:26 - global variables so in case you want to
04:29 - use the same variable in the multiple
04:31 - functions in the same program you can
04:33 - Define that variable as a global
04:35 - variable which is also called as a
04:37 - global scope now guys moving to another
04:39 - scope over here that is the non-local
04:41 - variables so non-local variables are
04:44 - used in nested functions whose local
04:46 - scope is not defined which means that
04:48 - the the variable can be neither in the
04:50 - local nor the global scope so guys let
04:52 - us check this with the help of examples
04:54 - now over here so in this case in order
04:56 - to use the non-local scope we will have
04:58 - to use the nested function so I'll just
05:01 - remove all these lines of code over here
05:03 - and what we will do is let's say inside
05:05 - this function that is ADD which is the
05:07 - outer function I'll just name it as the
05:09 - outer over here so that it becomes
05:11 - little easy in order to identify the
05:13 - functions so let's say we have the
05:14 - variable a for which the value is 10
05:16 - over here now let's say we have a nested
05:18 - function which means a function that is
05:20 - present inside another function is
05:22 - called an escape function and we'll name
05:24 - this function as the inner so that we
05:26 - can identify that this is the inner
05:28 - function now what we can do is we can
05:30 - have the variable once again that is a
05:33 - over here but this time we will be using
05:35 - the non-local keyword so as you can see
05:38 - there is a keyword called non-local
05:39 - which we can use in order to assign a
05:42 - value to the variable and this also
05:44 - identifies that this variable is a
05:46 - non-local variable now let's say we
05:48 - assign other value over here to a so
05:51 - let's say 8 is equal to 20 in this case
05:53 - and what we will do is let's say we want
05:55 - to print this value of a now how we will
05:57 - print this is we will say inner and Then
06:00 - followed by colon and then we will say a
06:02 - so this means that we are printing the
06:04 - value of a from the inner function by
06:07 - using this label and then we will come
06:09 - out of this function and what we will do
06:12 - is we will be in the outer function
06:14 - right now so currently we are in the
06:15 - outer function and we will simply call
06:18 - this inner function so we can simply
06:20 - call the inner function over here and
06:22 - then after that let's say we want to
06:24 - print this value of a once again so I'll
06:26 - just copy this line and then paste this
06:28 - over here over here I'll just put the
06:30 - label as outer so guys this is the
06:33 - program that we have written we just
06:34 - have the outer function over here we
06:37 - have the variable that is 10 and then we
06:39 - have the inner function inside this we
06:41 - have defined the non-local variable that
06:43 - is a and then a is being assigned the
06:45 - value of 20 again we are printing the
06:47 - value of a over here by using the inner
06:50 - label and then we are calling this inner
06:52 - function from the outer function itself
06:54 - and then we are printing the value of a
06:56 - by using the outer label over here now
06:59 - the last thing that we have to do is we
07:01 - have to call this outer function because
07:03 - we have not called this yet so over here
07:06 - we will say outer and then we have this
07:09 - open and close parenthesis so let me
07:11 - just save this file enter running this
07:13 - code now so as you can see inner is
07:15 - being assigned the value as 20 and that
07:18 - is what we had done over here so when
07:20 - inner was called over here the non-local
07:22 - variable that is a it makes the value as
07:25 - 20 and then this inner it is equal to 20
07:28 - is getting displayed now guys what is
07:30 - happening is when we are using this
07:32 - non-local keyword this means that we are
07:34 - telling python that this variable needs
07:36 - to be seen as a non-local variable which
07:39 - means it is equal to this variable as
07:41 - well so when we are doing a is equal to
07:43 - 20 so this value of a will become 20 and
07:47 - this value of a will also become some 20
07:49 - over here and that is why for this inner
07:51 - we are getting 20 and for outer also if
07:54 - you see on the second line the value is
07:56 - 20 right now so this assignment of a is
07:58 - equal to 20 is being treated as a
08:00 - non-local assignment and the values of
08:03 - the variable a wherever it is being
08:05 - assigned will be changed to the value
08:06 - that is 20 in this case so guys this is
08:08 - very important concept whenever we are
08:10 - using the non-local variable what if we
08:13 - simply have the local variable and we
08:15 - don't Define this in this way so let's
08:16 - say I'll just comment out this line of
08:18 - code over here that is non-local a now
08:20 - this time a is value that is 20 right
08:23 - now is being created as a local variable
08:25 - inside the inner function and outside
08:28 - the inner function that is in the outer
08:31 - function the A's value is currently 10
08:33 - over here so let us check what will be
08:35 - the output I'll just save this file and
08:37 - try running this code now so as you can
08:39 - see inner it is equal to 20 and right
08:41 - now outer it becomes 10 that's because
08:43 - we have not used the non-local keyword
08:46 - over here within the nested form
08:48 - function that is the inner function that
08:50 - we had defined so guys this is very
08:52 - important concept if you want to change
08:54 - the values of all the variables that is
08:56 - in the outer function as well as in the
08:58 - inner function we can use the non-local
09:00 - keyword while assigning the value to the
09:03 - variable and then all the values for
09:05 - that variable will be updated so guys
09:07 - this is the functionality of the
09:08 - non-local variable and I hope you have
09:10 - understood the functionalities of the
09:13 - different variable Scopes in Python that
09:15 - is local variables Global variables and
09:17 - non-local variables and based on your
09:19 - requirements you can use them
09:20 - accordingly so guys that's it in this
09:22 - video please make sure that you like
09:24 - this video so that it reaches to more
09:25 - people and subscribe to this channel so
09:27 - that you get the notifications on
09:29 - upcoming videos as well the next video
09:31 - that we are going to talk about is
09:32 - global keyword in Python Programming so
09:35 - stay tuned

Cleaned transcript:

hey what's up guys welcome to another video in which we are going to learn about variable scope in Python Programming so guys in Python we can declare variables in three different Scopes so these are local scope Global scope and a nonlocal scope so we will check all these Scopes one by one with the help of examples so first of all what are local variables so when we declare the variables inside a function these variables will have a local scope that is within the function only we cannot access them outside the function so let us check this with the help of examples now over here so let's say we have a function over here by using the def keyword we Define the function that is ADD and then after the open and close parenthesis we have a colon over here and let's say we have two variables that is a it is equal to 10 and then we have B it is equal to 20 and then we just want to print the sum of these two numbers so we will simply do print of a plus b over here and then we can simply call this function by using the function name that this add followed by open and close parenthesis so let me just save this file and try running this code now so as you can see 30 that is the sum of 10 and 20 is getting displayed now guys let us say I want to access these variables that is a and b which is defined in this function that is ADD so can we do that from outside this function that we have defined so let us check that so let us say I want to print the value of a over here so when we provide a print followed by the variable name that is a so let me just save this file and try running this code to see what happens so as you can see we are getting some error name error name a is not defined so guys because we have defined the variable that is a and b inside the function that is ADD we can only access them within this function and not outside of this function and that is what we call it as a local scope now if the same thing that is print a if we just remove from here and we print over here that is within the function and then we need to call that function so so that a control flow goes inside that function and print both the statements now this time we are accessing the value of a from within that function so we should be able to access that variable so let me just save this file and try running this code now so as you can see we are not getting any error first of all we are printing the value of a that is 10 as you can see 10 is getting displayed and then print a plus b so 30 is getting displayed which is the sum of those two variables because this is the local scope which means the variable that is defined within the function can only be accessed from that function itself now guys let us move to another scope as you can see we have Global variables as well so a variable declared outside of the function or in a global scope is known as a global variable so this means that a global variable can be accessed inside or outside of a function so what this means so basically let's say when we have this a is equal to 10 outside of this function so I'll just remove this line of code over here and before this function is defined we assign the variable that is a so when we use a particular variable outside of this function this variable is called as a global variable so this variable can be used from within the function also and outside of the function also so we have the same function that is ADD over here and then B value it is equal to 20 so we have the print and then what I will do is I will say inside function so that we can identify that this statement is from within the function itself so inside function and then we will print the value of a and then print a plus b that is the sum of these two numbers will be displayed over here and then what I will do is I will again copy this line of code and paste this over here and then I'll say outside function so we have outside function over here so first of all this line of code that is outside function and then the value of a will get printed and then add will be called and then what will happen is inside function and value of a will be printed and then a plus b will get printed over here so let me just save this file and try running this code now as you can see outside function the value is 10 since we have provided the global variable over here and from within that function itself we can access the value of a again and that is what we are getting inside function it is equal to 10 and then 30 is the sum of these two numbers that is a plus b so guys this is the way that we can use the global variables so in case you want to use the same variable in the multiple functions in the same program you can Define that variable as a global variable which is also called as a global scope now guys moving to another scope over here that is the nonlocal variables so nonlocal variables are used in nested functions whose local scope is not defined which means that the the variable can be neither in the local nor the global scope so guys let us check this with the help of examples now over here so in this case in order to use the nonlocal scope we will have to use the nested function so I'll just remove all these lines of code over here and what we will do is let's say inside this function that is ADD which is the outer function I'll just name it as the outer over here so that it becomes little easy in order to identify the functions so let's say we have the variable a for which the value is 10 over here now let's say we have a nested function which means a function that is present inside another function is called an escape function and we'll name this function as the inner so that we can identify that this is the inner function now what we can do is we can have the variable once again that is a over here but this time we will be using the nonlocal keyword so as you can see there is a keyword called nonlocal which we can use in order to assign a value to the variable and this also identifies that this variable is a nonlocal variable now let's say we assign other value over here to a so let's say 8 is equal to 20 in this case and what we will do is let's say we want to print this value of a now how we will print this is we will say inner and Then followed by colon and then we will say a so this means that we are printing the value of a from the inner function by using this label and then we will come out of this function and what we will do is we will be in the outer function right now so currently we are in the outer function and we will simply call this inner function so we can simply call the inner function over here and then after that let's say we want to print this value of a once again so I'll just copy this line and then paste this over here over here I'll just put the label as outer so guys this is the program that we have written we just have the outer function over here we have the variable that is 10 and then we have the inner function inside this we have defined the nonlocal variable that is a and then a is being assigned the value of 20 again we are printing the value of a over here by using the inner label and then we are calling this inner function from the outer function itself and then we are printing the value of a by using the outer label over here now the last thing that we have to do is we have to call this outer function because we have not called this yet so over here we will say outer and then we have this open and close parenthesis so let me just save this file enter running this code now so as you can see inner is being assigned the value as 20 and that is what we had done over here so when inner was called over here the nonlocal variable that is a it makes the value as 20 and then this inner it is equal to 20 is getting displayed now guys what is happening is when we are using this nonlocal keyword this means that we are telling python that this variable needs to be seen as a nonlocal variable which means it is equal to this variable as well so when we are doing a is equal to 20 so this value of a will become 20 and this value of a will also become some 20 over here and that is why for this inner we are getting 20 and for outer also if you see on the second line the value is 20 right now so this assignment of a is equal to 20 is being treated as a nonlocal assignment and the values of the variable a wherever it is being assigned will be changed to the value that is 20 in this case so guys this is very important concept whenever we are using the nonlocal variable what if we simply have the local variable and we don't Define this in this way so let's say I'll just comment out this line of code over here that is nonlocal a now this time a is value that is 20 right now is being created as a local variable inside the inner function and outside the inner function that is in the outer function the A's value is currently 10 over here so let us check what will be the output I'll just save this file and try running this code now so as you can see inner it is equal to 20 and right now outer it becomes 10 that's because we have not used the nonlocal keyword over here within the nested form function that is the inner function that we had defined so guys this is very important concept if you want to change the values of all the variables that is in the outer function as well as in the inner function we can use the nonlocal keyword while assigning the value to the variable and then all the values for that variable will be updated so guys this is the functionality of the nonlocal variable and I hope you have understood the functionalities of the different variable Scopes in Python that is local variables Global variables and nonlocal variables and based on your requirements you can use them accordingly so guys that's it in this video please make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is global keyword in Python Programming so stay tuned
