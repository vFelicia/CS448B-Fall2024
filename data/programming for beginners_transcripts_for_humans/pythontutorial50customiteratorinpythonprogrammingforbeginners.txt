With timestamps:

00:00 - hey what's up guys welcome to another
00:02 - video at which we are going to learn
00:03 - about iterator in Python Programming so
00:06 - guys iterators are methods that iterate
00:09 - collections like list tuples Etc using
00:12 - an iterator method we can Loop through
00:15 - an object and return its elements so we
00:17 - have already seen how we can iterate
00:19 - through the list and tuples as well
00:21 - using the for Loop but we can also have
00:23 - our custom iterators in order to iterate
00:26 - through the different elements inside
00:28 - the list so that we are going to check
00:30 - with the help of examples as well now we
00:32 - can use the iter method which represents
00:35 - the iterator to initialize the iterator
00:37 - and the next method to go through the
00:40 - iterator so guys let us check this with
00:42 - the help of example now over here in the
00:44 - vs code so what we will do is let's say
00:46 - we have the list that is named as list
00:48 - one and then let's say we have the list
00:50 - of numbers in this case so we have one
00:53 - two three four and then five so guys how
00:56 - do we get the iterator to this
00:57 - particular list over here so what we can
00:59 - do is simply we can have the name of the
01:03 - variable that is iterator it is equal to
01:05 - and then we can use the function name
01:07 - that is iter this is one of the
01:10 - functions that will return us the
01:11 - iterator over here and inside this
01:13 - function it will take one parameter
01:15 - which will be the list one in this case
01:17 - so basically the list or Tuple it goes
01:20 - as the parameter to this function that
01:22 - is iter and it Returns the iterator over
01:25 - here and then we can use this iterator
01:27 - in order to get the elements of this
01:30 - list so what we will do is let's say we
01:32 - have the print function and then we can
01:35 - use the next function in this case
01:37 - inside the print so as you can see vs
01:39 - code is suggesting us this next function
01:41 - over here which will take the iterator
01:44 - as the parameter so we provide the
01:46 - iterator as the parameter so what will
01:48 - happen is this thing will point to the
01:51 - first element to the list over here so
01:53 - let me just save this file now and try
01:54 - running this code so as you can see we
01:57 - are getting 1 in this case now what we
01:59 - can do is again we can have another
02:01 - print statement in order to print the
02:03 - second element so over here I have just
02:06 - copied and pasted this line of code and
02:08 - then let me just save this file now on
02:10 - the next line we should get the second
02:11 - element that is 2 so as you can see we
02:13 - are getting 1 and then we are also
02:15 - getting 2 over here so similarly we can
02:17 - get all the elements in this case by
02:19 - using the iter method we have got the
02:22 - iterator over here and by using this
02:25 - iterator as the parameter to the next
02:27 - function we have got the element itself
02:30 - so guys this is the very basic way in
02:31 - which we can use the iterator along with
02:34 - the next function now guys let us check
02:35 - this with the help of the for Loop
02:37 - working or for loop with the iterators
02:39 - so what we can do is instead of printing
02:41 - these statements multiple times we can
02:43 - simply use this iterator inside the for
02:46 - Loop so over here we can have 4 and then
02:49 - element n and then we can provide this
02:52 - iterator so this iterator is having all
02:55 - the elements right now and we are going
02:57 - to iterate through this iterator and one
02:59 - net the time all the elements will be
03:01 - assigned to this element variable and
03:04 - inside this for Loop we can simply
03:06 - provide the element over here so we can
03:08 - provide element and in order to have all
03:11 - the elements on the same line when we
03:13 - are providing the print statement we can
03:15 - have the end parameter over here which
03:17 - is slash n by default which means a
03:19 - control flow goes to the new line so in
03:21 - this case we want it to be on the same
03:23 - line so we will separate all the
03:25 - elements by using one space character
03:27 - over here so let me just save this file
03:29 - now and try running this code so as you
03:31 - can see we are getting one two three
03:33 - four five on the same line we can also
03:35 - separate them by using a comma and a
03:37 - space character so I've just provided
03:39 - comma in the end parameter I'll just
03:41 - save this file now and try running this
03:43 - code so as you can see we are getting
03:45 - one two three four five separated by
03:47 - commas so guys this is the way that we
03:49 - can use the for Loop along with the
03:51 - iterator in order to go through all the
03:54 - elements inside the list we can also do
03:56 - this directly by using the list one as
03:58 - well so when we provide less just one
04:00 - which is containing all the elements
04:02 - over here so instead of having the
04:03 - iterator as well we can use the list one
04:06 - so let me just save this file now and
04:07 - try running this code so the same output
04:09 - will be displayed that is all the
04:11 - elements of the list now guys where this
04:13 - iterator becomes important is whenever
04:15 - we are creating the custom classes and
04:17 - we want to iterate through the custom
04:19 - iterator that we want to create so guys
04:22 - let us check it with the help of example
04:24 - now so guys what are the important
04:25 - points while building the custom
04:27 - iterators so building an iterator from
04:29 - scratch is easy in Python we just have
04:32 - to implement the double underscore iter
04:35 - followed by double underscore method so
04:38 - this is one of the custom methods that
04:40 - we have to implement inside the class
04:42 - along with this we also have to
04:44 - implement the double underscore next
04:46 - Double underscore method over here
04:48 - inside the same class so these are the
04:51 - two methods that are important which
04:52 - needs to be implemented inside the class
04:55 - while building the custom iterators so
04:57 - this iter method it Returns the iterator
05:00 - object itself if required some
05:03 - initialization can be performed in this
05:06 - method and the second method that is the
05:08 - next method over here it must return the
05:10 - next item in the sequence on reaching
05:13 - the end and in subsequent calls it must
05:16 - raise stop iteration so guys let us
05:18 - check this with the help of examples as
05:20 - well so over here what we will do is we
05:22 - will implement the power of two class
05:24 - over here which means we are going to
05:26 - find the results of the power of the
05:28 - number that is 2 so we are going to have
05:30 - the class which is going to be named as
05:33 - power 2 in this case and what we will do
05:36 - is we will have the Constructor over
05:38 - here so we have the init method in this
05:40 - case and init method it will take the
05:43 - maximum number up to which we need to
05:45 - find the Power of 2 over here so
05:47 - basically apart from self we will have
05:49 - the max value as well so over here we
05:52 - will say self dot Max it is equal to Max
05:54 - so while creating the object of this
05:57 - class we will be providing the max
05:59 - number up to which we need to find the
06:01 - Power of 2 and then guys as we have seen
06:03 - in order to build the custom iterator we
06:06 - need to have the two functions so first
06:08 - of all we will have the iter function
06:10 - over here so we have iter function and
06:13 - Then followed by open and close
06:15 - parenthesis this will again take the
06:17 - parameter as self and what we will do is
06:20 - the initial value that is self Dot N so
06:22 - we have the variable that is n which is
06:25 - equal to 0 right now so we will find the
06:27 - powers of 2 starting from 0 up to the
06:30 - number that is Max that we have provided
06:32 - while creating the object of the power 2
06:35 - class over here so what we are going to
06:37 - do is self Dot and it is equal to 0 and
06:40 - this thing is going to return a iterator
06:42 - which is going to be the self itself so
06:45 - over here we are returning the iterator
06:47 - that is the self itself and then guys we
06:49 - are going to also Define the next method
06:52 - over here so we have def followed by
06:54 - double underscore and then we have the
06:56 - next method followed by double
06:58 - underscore and then again we are going
07:00 - to have the self as the parameter so
07:03 - over here what we will do is first of
07:05 - all we need to check whether the value
07:07 - of n is it less than or equal to the
07:09 - value of Max that we have provided so
07:11 - over here we will provide the if
07:13 - condition and inside the parenthesis we
07:16 - will say whether self dot m is this less
07:19 - than or equal to Max that is self dot
07:22 - Max in this case so we have self dot Max
07:25 - and if yes then we are going to have the
07:27 - result what is the result it is equal to
07:30 - 2 raised to the power of n so it will be
07:33 - 2 multiplied by multiplied by double
07:35 - times and then self Dot N in this case
07:38 - so over here we are getting the current
07:40 - value of n we are checking whether it is
07:42 - less than or equal to Max and if yes
07:44 - then we are finding 2 raised to that
07:46 - number that is n over here and the
07:49 - result will be stored in this result
07:50 - variable next what we are going to do is
07:52 - we are going to increment the value of n
07:55 - by 1 so it is going to be self Dot N
07:58 - plus equal to one so we are incrementing
08:01 - the value of n by 1 so that the next
08:03 - time the control flow comes over here it
08:06 - will find that the value of n is
08:07 - incremented by 1 and then after this we
08:10 - simply have to return result in this
08:12 - case for which we have already found the
08:14 - result over here so guys this is the
08:16 - case when n is less than or equal to Max
08:18 - but what if the N is incremented in such
08:21 - a way that it becomes greater than the
08:23 - maximum number which we have already
08:25 - provided for which we don't want to find
08:27 - the Power of 2 so over here inside the
08:30 - else part what we will do is we will
08:32 - raise the stop iteration so over here we
08:34 - can simply provide arrays stop iteration
08:37 - so we have this exception that is raised
08:40 - top iteration over here which is one of
08:41 - the built-in exceptions now guys what we
08:44 - can do is simply we can create the
08:45 - object of this power to class over here
08:48 - that we have created so what we can do
08:50 - is let's say we provide the object name
08:52 - that is I it is equal to power 2 over
08:55 - here and the maximum number for which we
08:58 - want to find the power of 2 is 3 right
09:00 - now so what this will do is when we
09:02 - create this object I the control flow it
09:04 - sees that for this particular power to
09:06 - class we have a Constructor that is in
09:09 - it and it will take the number that is
09:11 - Max so over here we have provided the
09:13 - max S3 so self dot Max that is this
09:16 - particular variable will have the value
09:18 - S3 over here and then guys in order to
09:21 - find the iterator we will name it as the
09:23 - iterator variable it is equal to iter
09:26 - this method and then inside this method
09:29 - we need to pass this object that is I so
09:32 - what exactly will happen is the control
09:33 - flow will see that for this particular
09:35 - class we have the user defined iter
09:38 - method so it will come over here and
09:40 - initially the value of n will be set as
09:43 - 0 in this case so we have 0 to start
09:46 - with and at the end we have Max that is
09:48 - the value of 3 and then guys what we
09:50 - have to do is we have to iterate through
09:52 - this iterator over here so we already
09:54 - have the iterator next time when we call
09:57 - this next method the control flow comes
09:59 - over here it will see that the value of
10:01 - n it is 0 right now and it is less than
10:04 - or equal to Max so 2 raised to 0 the
10:06 - first result it will be equal to 1 and
10:08 - that same result will be passed over
10:10 - here as the return statement and before
10:12 - that n will be incremented and the
10:14 - updated value of n will be 1 in this
10:16 - case so over here we can simply provide
10:18 - the print statement and we can say next
10:21 - over here and inside the parenthesis we
10:23 - will have the iterator as the parameter
10:25 - so guys let me just save this file now
10:27 - and try running this code so as you can
10:29 - see we are getting the result as 1 and
10:31 - next time what we will do is again we
10:32 - will copy paste these lines of code
10:34 - three times over here so let me just
10:36 - save this file now and try running this
10:38 - code as you can see we are getting 1 2 4
10:41 - and 8 which is equal to 2 raised to 0 is
10:44 - 1 2 raised to 1 is 2 2 raised to 2 is 4
10:47 - 2 raised to 3 is 8 and next time when we
10:49 - print the value once again over here so
10:51 - what will happen is 2 raised to 4 will
10:53 - be found and in this case since n value
10:56 - is not less than or equal to Max so
10:58 - raise stop iteration will be called over
11:01 - here and we will get some other
11:03 - statement being printed on the terminal
11:05 - so let me just save this file now and
11:06 - try running this code so as you can see
11:09 - we have got one two four and eight and
11:11 - after this as you can see raised top
11:13 - iteration was called while calling the
11:15 - next function over here so guys this is
11:17 - the way that we can build our custom
11:19 - iterators whenever we are dealing with
11:21 - our custom classes we just need to
11:23 - Define two methods over here that is
11:25 - iter which stands for iterator which
11:28 - will return an iterator over here and
11:30 - then we also have to define the next
11:32 - method which will return us the next
11:34 - element to be used as far as our
11:37 - requirements are concerned in the Python
11:39 - program so guys you can have any logic
11:41 - over here this is just an example that
11:43 - we have taken that is in order to find
11:45 - the Power of 2 you can have any logic
11:47 - based on your requirements and raise the
11:49 - exception in any manner that you want
11:51 - based on your requirements so guys
11:53 - practice on your own so that on
11:54 - different inputs you get different
11:56 - outputs please make sure that you like
11:58 - this video so that it to more people and
12:00 - subscribe to the channel so that you get
12:02 - the notifications on upcoming videos as
12:04 - well the next video that we are going to
12:06 - talk about is generator in Python
12:08 - Programming so stay tuned

Cleaned transcript:

hey what's up guys welcome to another video at which we are going to learn about iterator in Python Programming so guys iterators are methods that iterate collections like list tuples Etc using an iterator method we can Loop through an object and return its elements so we have already seen how we can iterate through the list and tuples as well using the for Loop but we can also have our custom iterators in order to iterate through the different elements inside the list so that we are going to check with the help of examples as well now we can use the iter method which represents the iterator to initialize the iterator and the next method to go through the iterator so guys let us check this with the help of example now over here in the vs code so what we will do is let's say we have the list that is named as list one and then let's say we have the list of numbers in this case so we have one two three four and then five so guys how do we get the iterator to this particular list over here so what we can do is simply we can have the name of the variable that is iterator it is equal to and then we can use the function name that is iter this is one of the functions that will return us the iterator over here and inside this function it will take one parameter which will be the list one in this case so basically the list or Tuple it goes as the parameter to this function that is iter and it Returns the iterator over here and then we can use this iterator in order to get the elements of this list so what we will do is let's say we have the print function and then we can use the next function in this case inside the print so as you can see vs code is suggesting us this next function over here which will take the iterator as the parameter so we provide the iterator as the parameter so what will happen is this thing will point to the first element to the list over here so let me just save this file now and try running this code so as you can see we are getting 1 in this case now what we can do is again we can have another print statement in order to print the second element so over here I have just copied and pasted this line of code and then let me just save this file now on the next line we should get the second element that is 2 so as you can see we are getting 1 and then we are also getting 2 over here so similarly we can get all the elements in this case by using the iter method we have got the iterator over here and by using this iterator as the parameter to the next function we have got the element itself so guys this is the very basic way in which we can use the iterator along with the next function now guys let us check this with the help of the for Loop working or for loop with the iterators so what we can do is instead of printing these statements multiple times we can simply use this iterator inside the for Loop so over here we can have 4 and then element n and then we can provide this iterator so this iterator is having all the elements right now and we are going to iterate through this iterator and one net the time all the elements will be assigned to this element variable and inside this for Loop we can simply provide the element over here so we can provide element and in order to have all the elements on the same line when we are providing the print statement we can have the end parameter over here which is slash n by default which means a control flow goes to the new line so in this case we want it to be on the same line so we will separate all the elements by using one space character over here so let me just save this file now and try running this code so as you can see we are getting one two three four five on the same line we can also separate them by using a comma and a space character so I've just provided comma in the end parameter I'll just save this file now and try running this code so as you can see we are getting one two three four five separated by commas so guys this is the way that we can use the for Loop along with the iterator in order to go through all the elements inside the list we can also do this directly by using the list one as well so when we provide less just one which is containing all the elements over here so instead of having the iterator as well we can use the list one so let me just save this file now and try running this code so the same output will be displayed that is all the elements of the list now guys where this iterator becomes important is whenever we are creating the custom classes and we want to iterate through the custom iterator that we want to create so guys let us check it with the help of example now so guys what are the important points while building the custom iterators so building an iterator from scratch is easy in Python we just have to implement the double underscore iter followed by double underscore method so this is one of the custom methods that we have to implement inside the class along with this we also have to implement the double underscore next Double underscore method over here inside the same class so these are the two methods that are important which needs to be implemented inside the class while building the custom iterators so this iter method it Returns the iterator object itself if required some initialization can be performed in this method and the second method that is the next method over here it must return the next item in the sequence on reaching the end and in subsequent calls it must raise stop iteration so guys let us check this with the help of examples as well so over here what we will do is we will implement the power of two class over here which means we are going to find the results of the power of the number that is 2 so we are going to have the class which is going to be named as power 2 in this case and what we will do is we will have the Constructor over here so we have the init method in this case and init method it will take the maximum number up to which we need to find the Power of 2 over here so basically apart from self we will have the max value as well so over here we will say self dot Max it is equal to Max so while creating the object of this class we will be providing the max number up to which we need to find the Power of 2 and then guys as we have seen in order to build the custom iterator we need to have the two functions so first of all we will have the iter function over here so we have iter function and Then followed by open and close parenthesis this will again take the parameter as self and what we will do is the initial value that is self Dot N so we have the variable that is n which is equal to 0 right now so we will find the powers of 2 starting from 0 up to the number that is Max that we have provided while creating the object of the power 2 class over here so what we are going to do is self Dot and it is equal to 0 and this thing is going to return a iterator which is going to be the self itself so over here we are returning the iterator that is the self itself and then guys we are going to also Define the next method over here so we have def followed by double underscore and then we have the next method followed by double underscore and then again we are going to have the self as the parameter so over here what we will do is first of all we need to check whether the value of n is it less than or equal to the value of Max that we have provided so over here we will provide the if condition and inside the parenthesis we will say whether self dot m is this less than or equal to Max that is self dot Max in this case so we have self dot Max and if yes then we are going to have the result what is the result it is equal to 2 raised to the power of n so it will be 2 multiplied by multiplied by double times and then self Dot N in this case so over here we are getting the current value of n we are checking whether it is less than or equal to Max and if yes then we are finding 2 raised to that number that is n over here and the result will be stored in this result variable next what we are going to do is we are going to increment the value of n by 1 so it is going to be self Dot N plus equal to one so we are incrementing the value of n by 1 so that the next time the control flow comes over here it will find that the value of n is incremented by 1 and then after this we simply have to return result in this case for which we have already found the result over here so guys this is the case when n is less than or equal to Max but what if the N is incremented in such a way that it becomes greater than the maximum number which we have already provided for which we don't want to find the Power of 2 so over here inside the else part what we will do is we will raise the stop iteration so over here we can simply provide arrays stop iteration so we have this exception that is raised top iteration over here which is one of the builtin exceptions now guys what we can do is simply we can create the object of this power to class over here that we have created so what we can do is let's say we provide the object name that is I it is equal to power 2 over here and the maximum number for which we want to find the power of 2 is 3 right now so what this will do is when we create this object I the control flow it sees that for this particular power to class we have a Constructor that is in it and it will take the number that is Max so over here we have provided the max S3 so self dot Max that is this particular variable will have the value S3 over here and then guys in order to find the iterator we will name it as the iterator variable it is equal to iter this method and then inside this method we need to pass this object that is I so what exactly will happen is the control flow will see that for this particular class we have the user defined iter method so it will come over here and initially the value of n will be set as 0 in this case so we have 0 to start with and at the end we have Max that is the value of 3 and then guys what we have to do is we have to iterate through this iterator over here so we already have the iterator next time when we call this next method the control flow comes over here it will see that the value of n it is 0 right now and it is less than or equal to Max so 2 raised to 0 the first result it will be equal to 1 and that same result will be passed over here as the return statement and before that n will be incremented and the updated value of n will be 1 in this case so over here we can simply provide the print statement and we can say next over here and inside the parenthesis we will have the iterator as the parameter so guys let me just save this file now and try running this code so as you can see we are getting the result as 1 and next time what we will do is again we will copy paste these lines of code three times over here so let me just save this file now and try running this code as you can see we are getting 1 2 4 and 8 which is equal to 2 raised to 0 is 1 2 raised to 1 is 2 2 raised to 2 is 4 2 raised to 3 is 8 and next time when we print the value once again over here so what will happen is 2 raised to 4 will be found and in this case since n value is not less than or equal to Max so raise stop iteration will be called over here and we will get some other statement being printed on the terminal so let me just save this file now and try running this code so as you can see we have got one two four and eight and after this as you can see raised top iteration was called while calling the next function over here so guys this is the way that we can build our custom iterators whenever we are dealing with our custom classes we just need to Define two methods over here that is iter which stands for iterator which will return an iterator over here and then we also have to define the next method which will return us the next element to be used as far as our requirements are concerned in the Python program so guys you can have any logic over here this is just an example that we have taken that is in order to find the Power of 2 you can have any logic based on your requirements and raise the exception in any manner that you want based on your requirements so guys practice on your own so that on different inputs you get different outputs please make sure that you like this video so that it to more people and subscribe to the channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is generator in Python Programming so stay tuned
