With timestamps:

00:00 - in the next few hours we are going to
00:01 - learn a lot about the Python programming
00:03 - language with the help of the examples
00:06 - and python programs as well while you're
00:08 - watching this video please make sure
00:10 - that you pause this video and practice
00:12 - on your own so that on different inputs
00:14 - you get different output and that is how
00:16 - you are going to learn about the Python
00:18 - programming language you can also watch
00:20 - my other Python tutorial and Python
00:22 - program videos which are available for
00:24 - free on YouTube the link to those
00:26 - playlist I have given in the description
00:28 - section below and we are going to cover
00:30 - all the basics about the Python
00:32 - programming language so let's get
00:34 - started Python tutorial for beginners so
00:36 - if you're completely new to programming
00:38 - languages and want to start with the
00:40 - Python programming language then this
00:42 - video series is for you and it doesn't
00:44 - matter even if you have learned the
00:46 - other programming languages such as Java
00:48 - C C++ and if you're going to learn the
00:51 - Python language for the first time you
00:53 - can watch these video so that we can get
00:55 - started from the completely beginner
00:57 - level and we reach up to the
00:58 - intermediate and expert level as we go
01:01 - through the different concepts of the
01:02 - Python programming language so guys
01:04 - first of all we are going to check the
01:06 - environment setup using the Python
01:08 - language and we are going to use the VSS
01:10 - code as the editor now over here vs
01:12 - stands for visual studio and we are
01:14 - going to use the visual studio code
01:16 - editor in order to write our python
01:18 - programs apart from this vs code setup
01:21 - we are also going to see how do we write
01:23 - the first python code and execute it so
01:26 - guys basically I have written down the
01:27 - steps to install the vs code editor and
01:30 - python interpreter over here so first of
01:32 - all we are going to install VSS code
01:34 - using this link that I have already
01:36 - provided in the description section so
01:38 - when you hit this URL in the browser
01:40 - this is the page that is going to open
01:42 - from where you can easily download the
01:44 - visual studio code it depends on your
01:46 - operating system which installer you
01:48 - want to download you can also download
01:50 - for Windows Mac OS and Linux systems
01:53 - over here so it depends on your
01:54 - operating system once you have
01:56 - downloaded this and installed the vs
01:58 - code on your machine machine the next
02:00 - step is to install python extension in
02:03 - VSS code so guys once you have installed
02:05 - the visual studio code this is the get
02:07 - started page that you will see in the
02:09 - visual studio code ID so over here first
02:12 - of all you are supposed to install the
02:14 - python extension so on the left hand
02:16 - side as you can see there is an
02:18 - extensions button over here on which you
02:20 - can click and then this particular
02:22 - section will open so over here in the
02:24 - search bar you are supposed to type
02:25 - python so once you type python there
02:28 - will be list of extensions that will be
02:30 - available for you so guys this is the
02:32 - extension that you have to install over
02:34 - here so as you can see python
02:36 - intellisense file lens and this is a
02:38 - description that you can see on the
02:40 - right hand side so since I have already
02:42 - installed this python extension on this
02:44 - Visual Studio code I am getting this
02:46 - uninstall button but you will be getting
02:48 - the install button over here if you have
02:50 - not already installed this particular
02:52 - extension guys this python extension
02:54 - helps us in order to write the python
02:56 - programs very efficiently it allows us
02:59 - to have the code completion feature
03:01 - along with this we can also run the
03:03 - python code and have the output from
03:06 - within the visual studio code itself so
03:08 - guys it is very important extension if
03:10 - you are going to Learn Python and want
03:12 - to write the python programs now guys
03:13 - coming to the next step we have to
03:15 - install the python interpretor using
03:18 - this link that I have already provided
03:19 - in the description so once you open this
03:22 - URL in the browser over here this is the
03:24 - page that will open for you and this is
03:26 - the official website of the Python
03:28 - programming language from where you can
03:30 - download the latest version for Windows
03:33 - over here since my machine is Windows I
03:35 - will be downloading this Python and the
03:37 - latest version is
03:39 - 3.11.1 it might so happen that you are
03:41 - watching this video in the future for
03:43 - which the latest version might be
03:45 - something else so you can download the
03:46 - latest version of the Python interpretor
03:48 - from here apart from this you can also
03:50 - get the links to the installer if you're
03:52 - using some other operating system over
03:54 - here so guys once you have installed
03:56 - python on your machine you can quickly
03:58 - open command prompt so over here in the
04:00 - command prompt you can simply type py
04:03 - followed by double hyphen characters and
04:06 - then you provide version and then when
04:08 - you press enter as you can see python
04:12 - 3.11.1 this is the version of python
04:14 - that is already installed on my machine
04:16 - you might have some separate version but
04:18 - the command will be same in order to
04:19 - check whether the python is successfully
04:22 - installed on your machine now guys after
04:24 - successful installation what you have to
04:26 - do is the last step is to connect this
04:28 - python interpreter in vs code so we
04:30 - select the python interpreter in VSS
04:32 - code so over here you have to come on
04:35 - the settings on the bottom left and then
04:38 - over here you can see the command pallet
04:40 - you can also have the shortcut key as
04:42 - Control Plus shift plus P if you're
04:44 - using the keyboard keys and then when
04:46 - you click on this on the search bar you
04:48 - have to type Python and then colon and
04:50 - then we have select interpreter so as
04:52 - you can see this is the option and when
04:54 - you click on this as you can see this
04:56 - python 3.1.1 is getting displayed over
04:59 - over here which you are supposed to
05:00 - select in order to select the python
05:03 - interpretor now guys what we are doing
05:05 - over here is we are connecting this
05:07 - python interpretor with this Visual
05:09 - Studio code so that whenever we write
05:11 - the python code our program gets
05:13 - executed successfully on the vs code
05:16 - itself now guys it might so happen that
05:18 - you don't get this option that's because
05:20 - you have installed python after
05:22 - installing vs code so you can simply
05:24 - restart this vs code in order to get
05:27 - this option over here and once you
05:28 - select thist option you are ready in
05:31 - order to write the python programs in
05:33 - the vs code IDE so guys just by using
05:36 - these four steps of installation you can
05:38 - quickly get started in order to write
05:40 - the python programs in the vs code and
05:42 - all the steps have been documented in
05:44 - this official documentation of the
05:46 - visual Studio website so you can check
05:48 - the content of this documentation as
05:50 - well the link I have given in the
05:51 - description already now guys we are
05:53 - going to write the first code in Python
05:55 - so what we are going to do is we are
05:57 - just going to close these tabs over over
05:59 - here and we are going to open this
06:01 - Explorer over here it is saying no
06:03 - folder opened initially so what you can
06:05 - do is you can create the folder
06:07 - initially in order to organize all your
06:10 - python programs so basically I'm going
06:12 - to just create a new folder over here
06:14 - and I'm going to say python so this is
06:17 - the name of the folder and then I'll
06:19 - select this folder over here so as you
06:21 - can see a new folder that is python has
06:23 - been created now you can write python
06:25 - programs inside this python folder you
06:27 - can have any other folder in any of the
06:30 - directories it depends on you where you
06:32 - want to store the python codes that you
06:34 - will be writing from now on so what we
06:36 - will be doing is as you can see this is
06:38 - the icon it says new file so we will be
06:40 - clicking on this new file and let's say
06:42 - I provide the name of the Python program
06:45 - as python followed by underscore and
06:47 - then we have code followed by dot we
06:50 - have py so guys this is very important
06:52 - that after typing the name of the file
06:55 - we have to append it with py this is the
06:58 - extension of the pyth Python program and
07:00 - this extension will help the vs code in
07:02 - order to interpret that this is the
07:04 - python code and it should execute this
07:07 - code using the python interpretor so
07:09 - guys I'm going to press enter over here
07:11 - and once we press enter this python
07:13 - code. py it is going to open
07:15 - automatically over here now simply we
07:17 - can print some content in our Python
07:19 - program as the first code in Python so
07:21 - over here we have something called as
07:23 - print statement as you can see once we
07:25 - type print it is auto suggesting us what
07:27 - are the different keywords that we can
07:28 - use so so when we press enter over here
07:31 - this print gets selected automatically
07:33 - now inside the open and close
07:35 - parenthesis what we are supposed to do
07:37 - is we can type one particular statement
07:39 - that is the name of the YouTube channel
07:41 - that is programming for beginners which
07:44 - you should definitely subscribe so this
07:46 - is a string that is a statement that we
07:48 - have given over here and this is the
07:50 - very simple Python program that we can
07:52 - write and what this will do is it will
07:54 - simply print this content that is
07:56 - programming for beginners on the console
07:58 - so guys over here you have to come on
08:00 - file and then you can click on save or
08:02 - else you can use the control+ S on the
08:05 - keyboard in order to save the file which
08:07 - I'm going to do in the upcoming videos
08:09 - as well so first of all you save this
08:11 - file and simply you have to come on this
08:13 - top right corner over here you can see
08:15 - this run python file button over here so
08:17 - when you click on this run python file
08:20 - the terminal will open and it will
08:22 - execute this file that is python code.
08:24 - py that we have simply created over here
08:27 - and as you can see programming for
08:28 - beginners string is getting printed so
08:30 - guys in this way we have return the very
08:32 - first code in the python and using the
08:34 - print statement we have printed the
08:36 - programming for beginners we can print
08:39 - any other statement over here as well so
08:41 - let's say I'll provide this as a
08:44 - statement and then when we save this
08:46 - file and try running this code once
08:48 - again as you can see this is a statement
08:50 - is getting printed over here on the
08:52 - terminal so guys this is the way we can
08:53 - easily set up our python interpreter
08:56 - along with the editor that is Visual
08:58 - Studio code you you can use any other
09:00 - editor that you want such as you can
09:02 - simply use the notepad file as well but
09:04 - you will not get such strong features
09:06 - which are provided by the visual studio
09:08 - code in the notepad file apart from that
09:10 - you can also use notepad++ or we have a
09:13 - very popular ID that is py charm and
09:16 - apart from that we have many other
09:17 - editors that you can use but vs code is
09:20 - one of the lightweight editors that you
09:22 - can use when you are writing the python
09:24 - programs python keywords and identifiers
09:27 - so guys keywords are nothing but these
09:29 - are the reserved words in Python so
09:31 - basically these are the words that we
09:33 - cannot use as the identifiers now what
09:36 - are identifiers these are nothing but
09:38 - these are the names that are given to
09:40 - variables functions classes and many
09:42 - other objects that we are going to see
09:44 - in the upcoming videos as well so guys
09:46 - for examples as you can see over here
09:48 - the examples for keywords are true and
09:50 - then we have false if condition else
09:53 - condition LF so Guys these are certain
09:56 - keywords that you must be aware if you
09:57 - have already learned some other
09:59 - programming language and if not then you
10:02 - don't have to worry but we are going to
10:04 - learn about these keywords in the
10:06 - upcoming videos as well you just need to
10:08 - know that these are certain keywords
10:10 - which cannot be used anywhere else apart
10:12 - from their own functionalities so guys
10:15 - over here in order to make it more easy
10:17 - for you I have the list of all the
10:19 - python keywords over here as you can see
10:21 - false none true and many other keywords
10:24 - are present that have specific
10:26 - functionality as far as Python
10:28 - programming languages is concerned and
10:29 - you cannot use them apart from their own
10:32 - functionality where they are supposed to
10:34 - be used now apart from this what are the
10:36 - examples of the identifiers as you can
10:38 - see message this is a particular name
10:41 - that we have given to a string another
10:43 - example is language which can Define
10:45 - another language such as a Korean
10:47 - language or the Hindi language English
10:49 - language or Spanish or French language
10:52 - or any other language which can be
10:53 - defined using this variable we also have
10:56 - other identifier such as number count so
10:59 - so this is nothing but these are certain
11:00 - names that are given to a particular
11:03 - variable so we should not mix up between
11:05 - the keywords and identifiers whenever we
11:07 - are writing the python programs so guys
11:09 - let us check this with the help of some
11:10 - examples over here so as you can see in
11:12 - this ID we have the output of the
11:15 - previous example that we have executed
11:17 - so simply we can type CLS that is the
11:19 - command in order to clear the content of
11:22 - the terminal over here when we press
11:24 - enter the entire terminal is cleared and
11:26 - then what we will do is as you can see
11:28 - previously we had written a print
11:30 - statement and inside this we had given
11:32 - the content that this is a statement
11:34 - what we can do is this value can be
11:36 - assigned to another variable which is
11:38 - called as the identifier so I will just
11:41 - remove this line over here and before
11:43 - this what I will do is let's say I
11:45 - provide Str Str as the identifier name
11:48 - followed by equal to and then in between
11:51 - the double codes I'm supposed to provide
11:53 - the string that is this is a statement
11:55 - that we had printed over here using the
11:57 - print statement and then what we we can
11:59 - do is in this print inside the open and
12:02 - close parenthesis over here we can
12:04 - simply provide this s Str which is the
12:06 - identifier so guys what exactly is
12:08 - happening over here is we have provided
12:10 - the content that we want to print and we
12:13 - have stored that content in a particular
12:15 - identifier so this is called a
12:17 - identifier over here that is St Str
12:19 - which is nothing but a name over here
12:21 - which is given to this particular value
12:23 - and we can simply provide this name that
12:25 - is Str Str over here and when we save
12:27 - this file and try running this code now
12:29 - so as you can see this is a statement is
12:31 - getting printed so it doesn't matter
12:33 - what content is provided over here we
12:35 - can provide some other statement as well
12:38 - like programming for beginners which is
12:40 - the name of the YouTube channel which
12:41 - you should definitely subscribe if you
12:43 - have not subscribed it already so when
12:45 - we save this file and try running this
12:47 - code as you can see programming for
12:49 - beginners is getting printed now so it
12:51 - depends on what value is being stored in
12:53 - this particular variable which is also
12:55 - called as identifier we can give any
12:57 - name to this ident Iden ify let's say
12:59 - instead of St Str we can simply give
13:02 - statement as the name of this variable
13:04 - but we have to change it in the print
13:06 - statement as well so I'll just copy the
13:08 - statement variable and paste this over
13:10 - here so guys this is nothing but
13:12 - identifier it is also called as a
13:14 - variable since we are storing some
13:16 - particular value inside this variable I
13:18 - click on Save and when I run this code
13:20 - once again again it is printing the same
13:22 - content that is programming for
13:24 - beginners so guys this is one example of
13:26 - identifier and in similar way we can
13:28 - have any other name to the identifier
13:30 - and along with that we are supposed to
13:32 - provide the value now apart from that
13:35 - can we use the keywords as the variable
13:37 - names so let us check this so let's say
13:39 - if I provide if keyword over here so
13:42 - instead of this statement over here I
13:44 - provide if and then let's say if I print
13:47 - this if so what will happen let me just
13:50 - save this file and try running this code
13:52 - so as you can see it is providing the
13:54 - syntax error that is invalid syntax and
13:57 - we can see if equal to so over here it
13:59 - is pointing out so as I've already told
14:01 - you we cannot use keywords as the
14:04 - identifier since they have their own
14:06 - meaning as far as python programs are
14:08 - concerned so we need to avoid the
14:10 - keywords being used as the identifiers
14:12 - and we should give some other names
14:14 - apart from all these keywords that are
14:16 - being displayed over here which we are
14:18 - going to learn in the upcoming videos as
14:19 - well guys it will only come with
14:21 - practice that you will come to know that
14:23 - which are the python keywords and which
14:25 - you are not supposed to use as the
14:27 - identifiers so don't need to worry you
14:29 - just stick with me till the end of this
14:31 - video series and we are going to learn a
14:32 - lot about the python programs now there
14:34 - are certain rules while naming the
14:37 - identifiers so as you can see
14:38 - identifiers cannot be a keyword which we
14:40 - have just proved by providing the if
14:43 - keyword over here and then apart from
14:45 - that identifiers are case sensitive so
14:48 - Guys these are two different identifiers
14:50 - let's say I provide Str Str over here
14:52 - which is one identifier we can simply
14:54 - print this using the print statement
14:56 - over here and then let's say we have
14:58 - another it identifier as St Str so over
15:00 - here we can have a different statement
15:02 - so let's say I simply provide the string
15:05 - over here so what will happen is if I
15:07 - save this file entery running this code
15:09 - now it is saying programming for
15:11 - beginners but Str Str and Str Str both
15:13 - the identifiers are same the only
15:15 - difference is these characters are
15:17 - uppercase characters whereas this s Str
15:19 - has lowercase characters but when we
15:22 - provide this Str Str over here in the
15:23 - print statement let me just save this
15:25 - file enter I running this code as you
15:27 - can see this time string is getting
15:29 - printed that's because we have saved the
15:31 - string in this particular identify that
15:33 - is capital Str Str so guys this proves
15:36 - that identifiers are case sensitive and
15:38 - you have to take caution while you are
15:40 - naming your identifiers over here apart
15:42 - from that it can have a sequence of
15:44 - letters and digits as well however it
15:47 - must begin with a letter or a underscore
15:49 - the first letter of an identifier cannot
15:51 - be a digit so basically we are supposed
15:53 - to start with the letter or it can also
15:56 - be a underscore over here and then white
15:58 - spaces are not allowed and apart from
16:01 - that we cannot use special symbols like
16:03 - exclamation mark at the rate hashtag and
16:06 - dollar sign and so on so there are
16:08 - certain special characters which cannot
16:10 - be used while you're naming your
16:11 - identifiers so python variables
16:14 - constants and literals so guys what are
16:16 - python variables so in programming a
16:18 - variable is a container that is a
16:20 - storage area to hold data so as we have
16:23 - seen previously a number is a variable
16:26 - and we can provide the value that is 10
16:29 - so previously we had seen a string
16:30 - variable in which we had stored some
16:32 - statement whereas we can also have the
16:35 - integer values being stored in the
16:37 - variables so over here if we move to our
16:39 - Visual Studio code so we can simply type
16:42 - number that is the variable name which
16:44 - can be assigned a value so equal to 10
16:47 - so this is nothing but an integer value
16:49 - being assigned to a variable which is
16:51 - named as a number we can also have the
16:53 - string so let's say programming for
16:55 - beginners so we have programming for
16:58 - beginers s see string over here which
17:00 - can be assigned to a variable and the
17:02 - variable name can be given as Str Str or
17:05 - it can be also given as message or any
17:07 - other name that you want to give while
17:09 - writing your Python program so Guys
17:11 - these are nothing but variables which
17:12 - can be used later on in the program
17:14 - basically their functionality is to
17:16 - store some values so in this case number
17:18 - is storing the value that is 10 and this
17:20 - Str Str variable is storing the value
17:23 - that is programming for beginner string
17:25 - now guys it is very important to note
17:26 - that python is a type in referred
17:28 - language so you don't have to explicitly
17:31 - Define the variable type it
17:33 - automatically knows that 10 is an
17:35 - integer and declares the number variable
17:37 - as the integer so guys basically it
17:40 - depends on the value that we are
17:42 - providing so just because you are typing
17:44 - number as the name of the variable it
17:46 - doesn't mean that it has to be
17:48 - necessarily having the integer value you
17:51 - can also have the string value as well
17:53 - so when I copy this and paste this over
17:55 - here the number will have programming
17:57 - for beginners but guys this doesn't make
17:59 - any sense over here but programmatically
18:01 - this is also possible that's because we
18:03 - don't have to provide any data type over
18:06 - here in the python programs so whatever
18:08 - the value is data type will be given to
18:10 - that particular variable based on the
18:12 - value that is being provided to the
18:14 - variable this is very important Point as
18:16 - far as python programs are concerned in
18:18 - other programming languages such as Java
18:20 - or C++ we have a very strict data type
18:23 - that needs to be provided before we
18:25 - provide our variable names over here and
18:28 - guys this is also one of the advantages
18:30 - of using the Python program it allows us
18:32 - to write the code quickly compared to
18:34 - other programming languages now guys
18:36 - moving forward what is the python
18:38 - constant so basically a constant is a
18:40 - special type of variable whose value
18:42 - cannot be changed so for example as you
18:45 - can see the pi value is 3.14 so over
18:48 - here guys before defining the constant
18:50 - variable what we can do is if we simply
18:52 - print this variable over here that is
18:55 - print followed by number that is being
18:57 - given inside the parenthesis I'll save
18:59 - this file and try running this code now
19:01 - so as you can see programming for
19:03 - beginners is getting printed that's
19:04 - because the value is given as
19:06 - programming for beginners let's say I
19:07 - provide the integer that is 20 over here
19:10 - and then when I save this file enter I
19:12 - running this code now the number should
19:14 - have the value that is 20 and that is
19:16 - what should be printed so as you can see
19:18 - when we run this code 20 is getting
19:20 - printed over here so whatever value is
19:22 - being stored and whichever variable we
19:24 - want to print the content of that
19:25 - variable will be printed now coming to
19:27 - the constants that we have just defined
19:30 - so in Python let's say if you provide pi
19:32 - equal to 3.14 over here so instead of
19:35 - this number we provide Pi it is equal to
19:38 - 3.14 I'll just remove this line of code
19:41 - and then simply I'll provide pi over
19:42 - here so what will happen is it will
19:44 - display this value that is 3.14 I'll
19:47 - save this file and try running this code
19:49 - now as you can see 3.14 is getting
19:51 - printed but guys what is the use of this
19:53 - constant basically we are saying that Pi
19:56 - is constant over here that's because us
19:58 - using this nomenclature that is the
20:00 - constant variable must have all the
20:02 - characters as the upper case so this can
20:04 - Define that it is a constant over here
20:07 - but is it actually a constant no in this
20:10 - case since again we can use pi over here
20:12 - and we can provide some other values as
20:14 - well such as 5.15 over here so when I
20:17 - save this file Ander try running this
20:19 - code now it is saying now that Pi is
20:21 - having 5.15 which is the latest value so
20:24 - guys there is no concept of python
20:26 - constants over here right now but what
20:28 - we can do is we can save this value in
20:30 - some other file so let's say I create
20:32 - another file over here and name it as
20:34 - constant followed by the extension that
20:36 - is py over here when we press enter we
20:39 - can simply provide this statement that
20:41 - is pi equal to 3.14 I just copy this and
20:44 - paste this over here so we have provided
20:46 - pi equal to 3.14 now what we can do is
20:50 - coming to this python code what we can
20:52 - do is we can use the import keyword now
20:55 - guys this import keyword is used in
20:58 - order to import some other python files
21:00 - into this file so that we can use the
21:03 - content of that other python files over
21:05 - here so we are going to import this
21:07 - constant. py in our python code program
21:10 - so import we can say constant over here
21:13 - so when we type constant as you can see
21:15 - constant is getting Auto suggested over
21:17 - here that's the very important feature
21:19 - of the intellisense which is included in
21:21 - the python extension that we had
21:23 - installed so we provide constant over
21:25 - here and what we have to do is while
21:27 - printing we can simply provide this
21:29 - constant over here that is constant
21:32 - followed by Dot and then as you can see
21:34 - Pi is getting Auto suggested that's
21:36 - because we had defined pi over here so
21:38 - we simply have to provide Pi so what
21:41 - will happen is it will print the value
21:44 - of the pi so when we save this file and
21:46 - try running this code now once again it
21:48 - says module constant has no attribute Pi
21:51 - so guys that may be because we have not
21:53 - saved this file that is constant let me
21:55 - come over here and save this file over
21:56 - here once again and I'll go to this
21:58 - python code and then run this file once
22:01 - again so as you can see now 3.14 is
22:03 - getting displayed so guys if you want to
22:05 - use some constant values you can have a
22:07 - separate file that is constant. py in
22:10 - which you can store all the constant
22:12 - variables let's say we have another
22:14 - variable over here that is St Str and
22:16 - then we provide string s the value so
22:19 - this Str Str can also be treated as a
22:21 - constant for which the values never
22:23 - change while we are executing the code
22:25 - I'll save this file over here and let's
22:27 - say if I want to print the string as
22:29 - well so I'll copy this line of code
22:31 - paste this over here and instead of Pi
22:33 - we will provide Str Str now so we
22:36 - provide constant. pi and constant. St
22:38 - strr also so when we save this file and
22:40 - try running this code now we get both
22:42 - the things that is 3.14 we get the
22:44 - string value as well so if you want to
22:46 - use the constants in Python you can have
22:48 - a separate file all of the constants can
22:51 - be defined over there and then you can
22:53 - import that constant file and use the
22:55 - various variables that you have defined
22:57 - as constant in order to write your
22:59 - python programs so guys moving forward
23:01 - over here what are python literals
23:03 - literals are representations of fixed
23:05 - values in a program they can be numbers
23:08 - characters or strings etc for example
23:11 - hello world is one of the literal then
23:13 - 12 is another literal 23.0 and then C
23:17 - character true false Etc so guys
23:19 - literals are nothing but these values so
23:22 - basically this value it is a literal
23:24 - this particular name that we have given
23:26 - is the identifier or also called as
23:29 - variable but in this case it is a
23:30 - constant now this variable becomes
23:32 - constant when the value cannot be
23:34 - changed but we can change this anytime
23:36 - in this code but not over here an
23:39 - identifier can be a constant when we
23:41 - don't want to change its value anytime
23:43 - in our Python program and again the
23:45 - string value inside the double codes it
23:47 - is a literal python data types in which
23:50 - numeric string list tle set are included
23:54 - so Guys these are the different data
23:56 - types that we can see in this this video
23:58 - and the upcoming videos as well so
24:00 - basically in computer programming data
24:02 - types specify the type of data that can
24:04 - be stored inside a variable so for
24:06 - example number it is equal to 24 so 24
24:10 - value belongs to the numeric data type
24:13 - and this is the integer value inside the
24:15 - numeric data type we have many other
24:17 - data types such as integer value then we
24:19 - have float value as well in which there
24:21 - is a decimal point we have a complex
24:23 - value as well in which as you can see
24:25 - this expression that is 1 + 2J this is a
24:28 - complex expression so all these are
24:30 - having numeric data types over here so
24:32 - number over here is a numeric data type
24:35 - or the integer as you can see 24 is the
24:37 - value if it was 24.5 then we would say
24:41 - that number variable is of float data
24:43 - type so guys let us check this with the
24:44 - help of example what we can do is we can
24:46 - simply copy these lines of code over
24:49 - here I'll copy this and we'll paste this
24:51 - over here now what we will do is this
24:53 - constant. py that we had created
24:55 - previously I'll just remove from our
24:57 - python folder over here since it is no
24:59 - longer needed and we will simply keep
25:02 - python code. py where we are going to
25:04 - write all the programs over here so guys
25:07 - over here I'll simply replace the
25:09 - content of this file by this content
25:12 - I'll save this file and over here in the
25:14 - terminal I'll simply clear the screen so
25:16 - as you can see num one it is defined as
25:18 - five which is the integer that is being
25:20 - assigned to num one so the data type
25:22 - over here will be the integer data type
25:24 - and using this print statement what we
25:26 - are doing is we are using using this num
25:28 - one and then followed by comma is of
25:31 - type which means num one will be printed
25:34 - that is five will be printed and then we
25:36 - will have is of type string being
25:38 - printed and then type this is another
25:40 - method that is being used in order to
25:42 - get the type of a variable so as you can
25:44 - see this is the syntax that first we
25:47 - provide type and Then followed by open
25:49 - and close parenthesis and over here
25:51 - inside this we have num one that is the
25:53 - variable name guys similarly we have
25:55 - provided num 2 as 2.0 and the same thing
25:58 - we are doing that is we are finding the
26:00 - type over here and then in the num three
26:02 - as well we are getting the type of this
26:04 - num three variable let me just save this
26:06 - file enter running this code now so as
26:09 - you can see five is of type class in so
26:12 - this is of the integer data type 2.0
26:15 - since it is having the decimal over here
26:17 - it is saying it is of type float over
26:19 - here and 1 + 2 J it is of type complex
26:23 - over here so these are all numeric data
26:25 - types and inside the numeric data type y
26:28 - these are described as integer float and
26:30 - complex values now apart from this guys
26:32 - we have other data types as well such as
26:34 - string that we had seen previously we
26:36 - have list as well tle and set so guys
26:39 - let us check this one at a time so over
26:41 - here what we will do is simply I'll
26:43 - provide Str Str and then I provide the
26:45 - Str Str value as programming for
26:49 - beginners so what we will do over here
26:51 - is we want to find the type of this Str
26:54 - Str variable so what we can do is we can
26:57 - simp simply have the print statement
26:59 - followed by open and close parenthesis
27:01 - and we can simply have the type function
27:04 - so guys as you can see type is being
27:05 - Auto suggested over here we will select
27:07 - this and inside the open and close
27:09 - parenthesis we will use this variable so
27:11 - I'll just copy this and paste this over
27:13 - here that is Str and then when we save
27:15 - this file and try running this code now
27:18 - as you can see class that is St Str is
27:20 - getting printed over here we can also
27:22 - have some string value over here that is
27:24 - first of all we are going to type Str
27:26 - Str that is the value of this s Str and
27:29 - Then followed by comma and then we can
27:31 - simply have is of type inside the single
27:36 - Cotes over here guys it is very
27:38 - important that whenever you want to type
27:39 - certain characters we should either have
27:42 - it inside the single quotes or double
27:44 - codes as we have seen over here and then
27:46 - when we save this file and running this
27:48 - code it will show us the data type of
27:50 - this string with the most sensible
27:51 - statement so as you can see programming
27:53 - for beginners this is the string value
27:55 - that we have given and then is of type
27:58 - now this is of type we have provided
28:00 - over here and then this type function
28:02 - that is Str Str it is returning the type
28:04 - of this Str Str variable which is class
28:08 - Str Str over here so this is of string
28:10 - data type now guys this Str Str over
28:12 - here it stands for string and not the
28:14 - name of this variable if I provide here
28:16 - something else then it will be more
28:18 - sensible so let's say if I provide
28:20 - statement over here as the name I'll
28:22 - copy this and paste this over here and
28:24 - when we run this code once again so as
28:26 - you can see it says class St Str is of
28:29 - type class St Str so since we have not
28:31 - replaced this St Str with the statement
28:33 - that is why we are not getting it
28:34 - properly I'll run this code once again
28:36 - now so as you can see programming for
28:38 - beginners which is the value of this
28:40 - statement variable over here and then is
28:42 - of type and then we have class Str Str
28:45 - over here now apart from this we have
28:47 - other data types as well such as list
28:49 - which can be defined as the square
28:50 - brackets so what we have to do is let's
28:53 - say I provide list one as the name of
28:55 - the variable and then equal to now guys
28:58 - list is nothing but it is a data type
29:00 - that have collection of elements so over
29:02 - here let's say we have collection of
29:04 - strings so let's say we have collection
29:06 - of fruits over here so the first fruit
29:08 - is Apple followed by comma and then
29:11 - again we have double quotes and then we
29:13 - have mango so all the elements are being
29:15 - separated using the comma over here as
29:17 - you can see and then let's say we have
29:20 - banana over here as the third fruit so
29:23 - what we can do is we can simply have
29:25 - print statement over here and then we
29:27 - can have type of this list one so I'll
29:31 - say list one over here when we save this
29:33 - file and TR running this code now as you
29:35 - can see class list is getting printed so
29:38 - this is of data type that is list over
29:40 - here similarly we have tle and set as
29:43 - well which we are going to see in the
29:44 - upcoming videos what are the different
29:46 - contents of these data types and how do
29:48 - we use them and when do we use them so
29:50 - guys for now you just need to remember
29:52 - that whatever value that we provide to a
29:54 - particular variable automatically that
29:56 - data type will will be assigned to that
29:58 - particular variable basic input and
30:00 - output in Python Programming so guys in
30:02 - this tutorial we will learn simple ways
30:05 - to display output to the users and take
30:08 - input from users in Python with the help
30:10 - of examples now guys as we have seen
30:12 - previously in Python we can simply use
30:14 - the print function to print the output
30:17 - so let us check this with the help of
30:19 - example over here so I simply want to
30:21 - print a statement so let's say I want to
30:23 - print programming for beginners that is
30:26 - the name of this YouTube channel which
30:28 - you should definitely subscribe if you
30:30 - have not subscribed it yet so once we
30:32 - provide the string inside the double
30:34 - codes we can simply save this file and
30:36 - try running this code now so on the
30:38 - terminal we will be able to see this
30:40 - string getting printed that is
30:41 - programming for beginners I have missed
30:43 - out an O character over here so this is
30:45 - the correct string so programming for
30:47 - beginners is the string that we want to
30:49 - print and that is what we have got over
30:51 - here in the terminal now guys even with
30:53 - this print function over here this is a
30:55 - function and it takes certain parameters
30:58 - so parameters are nothing but certain
30:59 - values that you can provide to the
31:01 - function so as you can see the actual
31:03 - syntax of the print function accepts
31:05 - five parameters so basically we have
31:08 - only provided one parameter over here
31:10 - this can be treated as a parameter that
31:12 - is the value that we want to print now
31:14 - apart from this we also have other
31:16 - parameters as well so object is the
31:18 - parameter which is nothing but the value
31:20 - to be printed apart from that we have
31:22 - separator then we have end parameter
31:25 - file and then flush parameter so these
31:27 - are the five parameters and these are
31:29 - the descriptions of each and every
31:31 - parameter so over here the separator
31:33 - which is an optional parameter since we
31:35 - have not provided any separator over
31:37 - here it allows us to separate multiple
31:40 - objects inside print so let's say after
31:42 - this string I want to provide another
31:44 - number over here so let's say 1 2 3 4 is
31:47 - the number that I want to provide now I
31:49 - want these objects that is one is
31:51 - programming for beginners which is a
31:52 - string and another object that is a
31:54 - number to be separated using commas so
31:57 - so what we will do is after providing
31:59 - comma we will use the SCP that is
32:01 - another parameter as you can see VSS
32:03 - code is providing us the auto completion
32:05 - feature over here so we just need to
32:07 - select that and then we need to provide
32:10 - single codes and inside this we provide
32:13 - comma followed by the space character so
32:15 - guys what will happen is all the objects
32:17 - will be separated by using this comma
32:19 - and the space character over here it
32:21 - depends on your requirement how many
32:23 - objects you want to provide inside this
32:25 - print statement so let me just save this
32:27 - file enter I running this code now so as
32:29 - you can see programming for beginners
32:31 - and then we have this comma followed by
32:33 - the space character and then we have
32:35 - this 1 2 3 4 object being printed over
32:37 - here we can have another object so let's
32:40 - say I provide another string that is
32:42 - another statement over here so let me
32:44 - just save this file and try running this
32:46 - code now so we are getting an error
32:48 - invalid syntax perhaps you forgot a
32:50 - comma so basically after providing each
32:52 - and every object we have to separate it
32:54 - using the comma over here and then let
32:57 - let me just save this file andent I
32:58 - running this code now so as you can see
33:00 - programming for beginners followed by
33:01 - comma and then we have space characters
33:03 - and then we have 1 2 3 4 again we have
33:06 - comma and then space character and then
33:07 - we have another statement so guys in
33:09 - this way we can use the separator
33:11 - parameter as well in order to separate
33:13 - the different objects inside the print
33:15 - function now going to next parameter
33:17 - which is end over here which is again
33:19 - optional by default it is the Slash and
33:22 - character in which case the control flow
33:24 - goes to the next line Whenever there is
33:26 - another object that is getting printed
33:27 - over here so as you can see it allows us
33:29 - to add specific values like new line or
33:32 - tab character so guys let's say we have
33:35 - this print function over here I'll just
33:36 - remove this part of the line over here
33:39 - and let's say I have another print
33:40 - function in which case I am providing
33:43 - another statement so let's say we have
33:45 - another statement over here so guys what
33:48 - will happen is by default this end
33:50 - parameter is having the Slash and
33:52 - character which means the control flow
33:54 - should go to the new line Whenever there
33:55 - is a next print statement that is
33:57 - encountered so let me just save this
33:59 - file and try running this code now so as
34:01 - you can see programming for beginner
34:03 - string is getting printed in first line
34:05 - and on the second line another statement
34:07 - is getting printed now what if we want
34:09 - both these statements to be printed on
34:11 - the same line but they are present in
34:13 - the different print function so what we
34:15 - will have to do is in the first print
34:17 - function I will provide a comma over
34:20 - here and then we have the end parameter
34:22 - so as you can see this end parameter we
34:24 - have to select and then inside the
34:26 - double Cotes I'll simply provide the
34:28 - full stop followed by the space
34:30 - character so guys what is happening over
34:32 - here is after the string is getting
34:34 - printed at the end of the line we are
34:36 - providing this full stop and then
34:38 - followed by the space character and then
34:40 - whenever there is a next string that is
34:42 - encountered by the control flow it will
34:44 - get printed on the same line so let me
34:46 - just save this file and try running this
34:48 - code now so as you can see programming
34:51 - for beginners and then we have a full
34:52 - stop and then we have the space
34:54 - character as well and then we have
34:55 - another statement that is is getting
34:57 - printed so guys we can also use this end
34:59 - parameter if we want multiple print
35:02 - functions to be used but all the objects
35:05 - need to be printed on the same line the
35:07 - other two parameters are file which is
35:09 - again optional where the values are
35:11 - printed so basically by default the
35:13 - values are printed on the screen and
35:15 - that is why its default value is system.
35:17 - STD out which means it should print on
35:20 - the screen you can also provide some
35:22 - file path over here so that the content
35:24 - can be return in the file apart from
35:26 - that we also have the flush which is
35:28 - again an optional parameter it is a
35:30 - Boolean specifying if the output is
35:32 - flushed or buffered so by default it is
35:34 - having the false value so Guys these two
35:36 - parameters you can practice on your own
35:38 - as a homework for you apart from that
35:40 - guys it is very important that how do
35:42 - you take input from the user in Python
35:45 - Programming so basically while
35:47 - programming we might want to take the
35:49 - input from the user in Python we can use
35:52 - the input function so as you can see we
35:54 - have a variable over here or we can say
35:56 - identifier it is equal to we have used
35:59 - the input function so guys this input
36:02 - function it will take a parameter which
36:04 - will be kind of a label which will be
36:06 - printed on the screen for the user as a
36:08 - instruction so we are asking the user to
36:10 - enter a number and the number that will
36:13 - be entered by the user will be stored in
36:15 - this num variable over here so guys let
36:17 - us check this with the help of example
36:19 - now I'll just remove these lines of code
36:21 - so what we have to do is let's say we
36:23 - provide the number variable it is equal
36:25 - to we have to use the input function as
36:28 - you can see this is the function that is
36:30 - being suggested by the vs code over here
36:32 - and then using the open and close
36:34 - parentheses inside this we have to
36:36 - provide a string inside the double codes
36:38 - so we can simply provide enter a number
36:41 - now this is a instruction to the user to
36:43 - enter the number now guys what we can do
36:46 - is we can print this number now we can
36:48 - easily print this by using a string so
36:50 - let's say we provide the string over
36:52 - here that is
36:53 - entered number is and then followed by
36:57 - colon and then after this object we have
36:59 - to provide a comma and then we can
37:01 - provide the number variable to be
37:03 - printed so we have provided the number
37:05 - variable over here let me just save this
37:07 - file andent try running this code now so
37:09 - as you can see it is asking the user
37:10 - over here to enter a number so what I
37:13 - will provide is simply I will provide 10
37:15 - as the number and then when I press
37:17 - enter as you can see entered number is
37:20 - 10 so this string is getting printed
37:23 - along with the number that is being
37:24 - entered by the user now guys it is very
37:26 - important to note that whenever we are
37:28 - using this input function the input that
37:31 - is taken by the user will be of the type
37:33 - string over here so if we print the type
37:36 - of this number variable over here let me
37:38 - just do that so we simply provide data
37:41 - type of number colon and then what we
37:45 - have to do is after comma we have to use
37:47 - the type function and inside this
37:49 - function we have to provide the number
37:51 - variable let me just save this file and
37:53 - try running this code now enter a number
37:56 - so let's say I provide 10 as the number
37:58 - as you can see enter number is 10 and
38:00 - after this data type of number it is
38:03 - class string so this is of string data
38:05 - type so whatever input is being taken
38:08 - from the user it will be stored as a
38:10 - string so what we have to do is we have
38:12 - to convert it into a number now since
38:14 - this is a string we cannot add another
38:16 - number to this particular number so
38:18 - let's say if we try to add some another
38:20 - number over here so we simply do number
38:22 - + 5 over here let me just save this file
38:25 - enter I running this code now so when we
38:27 - provide 10 as the number when I press
38:30 - enter as you can see it says can only
38:32 - concatenate string not in that's because
38:35 - we are trying to concatenate a string
38:38 - with a number over here that is the
38:39 - integer so what we have to do is we have
38:42 - to convert this input into an integer so
38:45 - we can simply provide int over here and
38:48 - then the entire input function needs to
38:50 - be enclosed within the open and close
38:52 - parenthesis so guys this we had seen
38:54 - previously as well this is the explicit
38:56 - type conversion over here which is the
38:58 - manual type conversion in which we are
39:00 - converting the string data type to the
39:02 - integer data type and now we will have
39:04 - the integer over here which can simply
39:06 - be added with another integer so let me
39:08 - just save this file and try running this
39:10 - code now so as you can see enter a
39:13 - number this time let's say I provide 15
39:15 - as the number and then when I press
39:17 - enter as you can see entered number is
39:19 - so what is happening is this number that
39:21 - is 15 was taken and then five was added
39:24 - to this number and that is why 15 + 5 is
39:27 - 20 and this number is getting printed
39:29 - over here and you can see this data type
39:31 - of number now it is of the type integer
39:34 - that's because we have used the type
39:35 - conversion over here so guys this is the
39:37 - way you can take input from the user
39:40 - make sure that whenever you're using the
39:41 - input function the data that is being
39:44 - entered by the user is of the type
39:46 - string and you need to convert it into
39:48 - the appropriate data type before you can
39:50 - use the other operators arithmetic
39:52 - operators in Python Programming so guys
39:55 - arithmetic operators are used to perform
39:57 - mathematical operations like addition
40:00 - subtraction multiplication and many
40:02 - other operations which can be done using
40:04 - the integers or the numbers in Python so
40:07 - guys for example let's say we provide
40:09 - the print function over here and inside
40:11 - this function we provide 5 + 6 as the
40:14 - parameter so what will happen is the
40:16 - plus operator is being used over here in
40:18 - order to add these two numbers that is
40:20 - five and six and the result that is 11
40:23 - will be printed so let us quickly check
40:25 - this with the help of example over here
40:27 - so what we will do is we will use the
40:28 - print function and inside this
40:30 - parenthesis we will simply provide 5 + 6
40:34 - over here and when we just save this
40:35 - file and try running this code now so as
40:38 - you can see 11 is getting printed so
40:40 - guys what we have done over here is we
40:41 - have simply used the plus operator in
40:44 - order to add two numbers we can also do
40:46 - this by using the variables as well so
40:49 - let's say we provide num one it is equal
40:51 - to 10 and let's say we provide num two
40:54 - it is equal to 20 and then let's let's
40:56 - say I provide sum it is equal to num 1+
41:00 - num 2 over here so guys basically once
41:03 - again we have used this plus operator in
41:05 - order to add two numbers that is num one
41:08 - and num two for which the values are 10
41:10 - and 20 respectively and the result will
41:12 - be stored in this sum and when we
41:15 - provide this sum inside the print
41:17 - statement we will get that result so let
41:19 - me just save this file and try running
41:20 - this code now so as you can see 30 is
41:22 - getting printed that is a sum of 10 + 20
41:25 - over here so guys this is one of the
41:27 - arithmetic operator that is plus is
41:29 - being used in order to add the two
41:31 - numbers apart from this addition we have
41:34 - other operators as well as you can see
41:36 - subtraction we have in which the two
41:38 - numbers can be subtracted so over here 4
41:40 - Min - 2 it is equal to 2 so over here
41:43 - minus operator is being used we have
41:45 - multiplication as well in which multiply
41:48 - operator is used in order to multiply
41:50 - two numbers we have division as well in
41:53 - order to divide the two numbers so as
41:55 - you can see four divided by 2 it is
41:57 - equal to 2 so we are getting the
41:59 - quotient over here and we have the
42:00 - modular operator as well which can be
42:02 - used by using this person operator so
42:05 - guys what happens is 5% 2 what this will
42:08 - do is it will divide the number on the
42:10 - left hand side that is five by the
42:12 - number on right hand side that is 2 so 5
42:14 - ID 2 it will give us the quotient as two
42:17 - but the remainder will be one and we
42:19 - will be getting the remainder of this
42:21 - operation that is one over here and
42:23 - similarly we have power operator as well
42:25 - so as we can see 4 and then 2 *
42:27 - multiplication symbol over here which is
42:29 - the power symbol and then two which
42:31 - means 4 ultied 4 will be done which is
42:34 - equal to 16 so basically this is nothing
42:36 - but the square of the number in this
42:38 - case it is the square of this number
42:40 - that is four so guys let us check all
42:42 - these operators with the help of
42:44 - examples over here so what we will do is
42:46 - first of all we will print and add two
42:49 - numbers so let's say we provide 10 as
42:51 - first number and 20 as the second number
42:53 - so this is the addition of two numbers
42:55 - let's say we want to subtract two
42:57 - numbers over here and the two numbers
42:59 - are let's say 20 and then minus what we
43:01 - do is we will minus 15 over here let's
43:04 - say the third expression is
43:06 - multiplication so I will simply provide
43:08 - five as the number multiplied by 7 as
43:10 - another number the next operator is the
43:12 - Divide operator so let's say I provide
43:14 - the print statement over here and we
43:17 - provide 50 as one number divided by 10
43:20 - as another number and then we have
43:22 - another print statement let's say we
43:24 - want to find the remainder after
43:26 - dividing two numbers so let's say 40 is
43:29 - one number and then we provide
43:31 - percentage sign and then we provide 15
43:34 - as the second number and then the last
43:36 - operator that is the power operator I
43:38 - simply provide five as the number and
43:40 - then two times multiplication over here
43:42 - which means power and then I provide two
43:45 - as the second number so guys let me just
43:46 - save this file and try running this code
43:48 - we will check the results of all these
43:50 - operations over here so as you can see
43:52 - the first print statement that is 10 +
43:54 - 20 it is providing us 30 as the result
43:57 - and this is the correct result over here
43:59 - 20 - 15 should be 5 and that is what we
44:01 - are getting over here as 5 and then 5 *
44:05 - 7 it is equal to 35 and we are getting
44:07 - 35 over here then 50 divided 10 should
44:10 - give us the quotient that is 5 and we
44:12 - are getting 5.0 over here and then 40%
44:16 - 15 which means 40 is divided by 15 and
44:19 - then what is the remainder is getting
44:21 - returned to this print function and 10
44:23 - is getting returned why 40 divid by 15
44:26 - the quotient will be 2 that is 15 * 2 is
44:29 - 30 but the remaining number will be 10
44:32 - which will be the remainder and that is
44:34 - what we are getting over here is the 10
44:35 - as the remainder and then 5 power 2
44:38 - which means 5 * 5 is done over here and
44:41 - 5 multili by 5 is 25 and that is what we
44:44 - are getting over here so Guys these are
44:46 - certain arithmetic operators that you
44:48 - can use which include addition
44:50 - subtraction multiplication division and
44:53 - then finding the remainder of the two
44:55 - numbers by dividing wring them and then
44:56 - we can also find the power of the number
44:59 - so guys you can use them based on your
45:00 - requirements assignment operators in
45:03 - Python Programming so guys the
45:05 - assignment operators are used to assign
45:07 - values to variables so as you can see in
45:09 - this example the number variable is
45:11 - assign the value that is five so this is
45:13 - the assignment operator that is equal to
45:16 - over here apart from that we have other
45:18 - operators as well so as you can see this
45:20 - is the assignment operator that is used
45:22 - in order to assign some value to a
45:24 - particular variable we also have
45:26 - addition assignment in which we use the
45:29 - plus operator first followed by the
45:31 - equal to symbol so guys what exactly
45:33 - happens over here is let's say if we
45:35 - provide this expression over here that
45:37 - is a and Then followed by plus symbol
45:39 - and then equal to operator and Then
45:41 - followed by this value that is 1 so this
45:44 - is nothing but it is the expression that
45:46 - is a equal to a + 1 so basically 1 is
45:49 - getting added to this variable that is a
45:52 - and then it is getting stored in the
45:53 - same variable that is a so guys let us
45:56 - check this with the help of example over
45:57 - here so first of all I will provide the
45:59 - number variable and we will provide a
46:02 - value that is five over here so this is
46:04 - a simple assignment operator we can
46:06 - simply use the print function in order
46:09 - to print this number so when we provide
46:11 - number as the parameter to this print
46:13 - function and when we just save this file
46:15 - and try running this code now so as you
46:17 - can see on the terminal five is getting
46:19 - printed that is the value of this number
46:21 - now let's say we want to add 10 to this
46:24 - number so we can do this in two ways is
46:26 - so first of all we can simply use the
46:28 - plus operator that we had seen
46:29 - previously so number equal to number
46:32 - followed by plus operator and then 10 so
46:35 - guys this is one of the arithmetic
46:36 - operators that we had seen previously
46:38 - that is used in order to add two numbers
46:41 - so number + 10 in this case it will be 5
46:44 - + 10 that is 15 and 15 will get assigned
46:46 - to this number and it will be printed by
46:49 - using this line of code over here let me
46:51 - just save this file and try running this
46:52 - code now so as you can see 15 is getting
46:55 - printed now guys there is another way in
46:57 - order to add this 10 to this number so
47:00 - we will simply remove this part of the
47:02 - code over here and then what we have to
47:04 - do is we have to provide number followed
47:06 - by plus operator and then equal to
47:08 - operator and then the number that we
47:10 - want to add to this number that is 10 so
47:12 - guys what is happening over here is this
47:14 - is the shorthand method for the same
47:16 - expression that we had written
47:18 - previously so it is equal to number
47:21 - equal to number + 10 so guys this is the
47:24 - expression that is working over here
47:26 - behind the scenes and 10 is getting
47:28 - added to this number and the result is
47:31 - getting stored in this number variable
47:33 - itself let me just save this file and
47:34 - try running this code now so as you can
47:37 - see 15 is getting printed over here guys
47:39 - this is nothing but a comment that we
47:41 - have provided I can just remove this
47:43 - part over here and let's say I want to
47:45 - add 15 now so we provide 15 as the
47:48 - number so 5 + 15 should be 20 let me
47:50 - just save this file and try running this
47:52 - code now so as you can see 20 is getting
47:54 - printed and this this is how we can use
47:56 - one of the assignment operators in order
47:58 - to add two numbers let us move to
48:00 - another assignment operator we have the
48:02 - subtraction assignment as well in which
48:05 - case we have to use minus operator
48:07 - followed by equal to symbol in which
48:09 - case this expression will get computed
48:11 - that is a it is equal to a minus 3 in
48:14 - this case when we provide a minus
48:16 - operator followed by equal to operator
48:18 - and then 3 similarly we have
48:20 - multiplication assignment in which
48:22 - multiply and equal to are used in
48:24 - combination we have division assignment
48:26 - as well in which case divide and equal
48:28 - to is used remainder assignment in which
48:31 - case this percent sign is used along
48:33 - with the equal to symbol and exponent
48:35 - assignment as well in which case the two
48:37 - times multiplication symbol is used and
48:40 - then equal to operator is used in order
48:42 - to compute the power of the numbers so
48:44 - guys let us check the remaining
48:46 - assignment operators with the help of
48:47 - examples over here so what we have to do
48:50 - is the number variable is already five
48:52 - and to this number we can simply change
48:54 - the assignment operators so let's say I
48:56 - want to subtract some number over here
48:58 - so what we will do is number then minus
49:01 - equal to operator let's say I want to
49:03 - remove two from this number so it is
49:05 - nothing but 5 - 2 in which case the
49:08 - answer should be three so let me just
49:09 - save this file and try running this code
49:11 - now so as you can see three is getting
49:13 - printed if I want to multiply this
49:15 - number so I'll simply replace this minus
49:18 - by multiplication symbol and let's say I
49:20 - provide four over here as the number so
49:23 - this should be 5 * 4 let us check what
49:25 - will be the result so 5 * 4 is 20 in
49:28 - this case let's say I want to use the
49:30 - Divide operator so we can simply use the
49:33 - divide and then equal to symbol and
49:35 - let's say I provide the number over here
49:37 - as three so let me just save this file
49:39 - enter I running this code now so 5 divid
49:42 - 3 will give us 1.66 as the result and
49:45 - that is what we are getting over here
49:47 - now guys similarly let's say I want to
49:48 - find the remainder while we divide five
49:51 - by three over here so we simply have to
49:53 - replace this divide Operator by the
49:55 - percent operator over here and let me
49:57 - just save this file enter are running
49:58 - this code now so 5 / 3 the quotient will
50:02 - be 1 in this case and the remainder will
50:04 - be two in case we don't want the decimal
50:06 - output over here so two is the remainder
50:09 - and that is what we are getting over
50:10 - here and the last operator that is the
50:12 - exponent operator over here so we simply
50:15 - provide the multiplication symbol two
50:17 - times and then equal to operator and
50:19 - then let's say we provide two over here
50:21 - so this is nothing but 5 * 5 that is the
50:24 - square of the number that is five let me
50:27 - just save this file and try running this
50:28 - code now so it is 25 over here if you
50:31 - provide this as three so what will
50:33 - happen is five will be multiplied by the
50:35 - same number that is five three times
50:37 - over here so let me just save this file
50:38 - and try running this code now so as you
50:40 - can see five multiplied by 5 is 25 and
50:43 - then 25 multiplied by 5 again will give
50:45 - us 125 as the result and guys this is
50:48 - how we can use the assignment operators
50:50 - based on our requirements as the
50:52 - shorthand methods in order to carry out
50:55 - the the mathematical operations on the
50:57 - numbers comparison operators in Python
51:00 - Programming so guys the comparison
51:02 - operators compare two values or the
51:04 - variables and return a Boolean result
51:07 - that can be a true or a false value so
51:09 - let's say for example as you can see we
51:12 - have two variables over here that is a
51:14 - is equal to 3 and b is equal to 5 so
51:17 - when we print this statement and inside
51:19 - this we have a comparison operator that
51:21 - is greater than operator over here that
51:24 - is a greater than B so what is happening
51:26 - behind the scenes is there is a check
51:28 - whether this variable that is a is it
51:31 - greater than b so if we see 3 is not
51:34 - greater than 5 over here in which case
51:36 - the return value will be false over here
51:38 - but in case when the value of a is
51:40 - greater than b then this particular
51:42 - expression that a is greater than b will
51:45 - return us True Value so guys let us
51:47 - check this with the help of example over
51:49 - here so let's say we have the variable a
51:51 - it is equal to 3 and the variable B it
51:53 - is equal to 5 and then when we have this
51:56 - comparison operator over here we use the
51:58 - print statement we say a greater than b
52:02 - so guys this particular operator is the
52:04 - greater than symbol over here which can
52:06 - be treated as the comparison operator in
52:09 - order to compare the two variables or
52:11 - the two numbers as well so let me just
52:13 - save this file and try running this code
52:15 - now so as you can see we are getting
52:16 - false as the result that's because the
52:18 - value of a is three and the value of B
52:21 - is five in which case a is not greater
52:24 - than b and that is why we are getting
52:26 - false over here guys similarly we have
52:28 - other comparison operators as well as
52:30 - you can see we have is equal to so
52:33 - basically 3 equal to equal to 5 no in
52:36 - this case because both these numbers are
52:38 - not equal so that is why this expression
52:40 - will give us the result as false over
52:42 - here similarly we have not equal to in
52:45 - which case it will give us true that's
52:46 - because the two numbers are not equal so
52:49 - we use the exclamation mark followed by
52:51 - the equal operator in order to check the
52:54 - not equal to expression and then we have
52:56 - the greater than sign as we have seen
52:58 - just now greater than symbol similarly
53:00 - we have less than symbol over here so
53:02 - this less than symbol will give us true
53:04 - over here that's because 3 is less than
53:05 - 5 and we also have greater than or equal
53:08 - to so guys basically what happens is
53:10 - let's say if the value of a and b both
53:13 - are three so basically is three greater
53:15 - than three no in this case so false will
53:18 - be return but when we provide greater
53:20 - than or equal to which means we are
53:22 - checking that the two variables should
53:24 - be at least equal or greater than so in
53:27 - that case when both the values are three
53:30 - so 3 greater than or equal to three will
53:32 - give us true in this case similarly we
53:34 - will have less than or equal to symbol
53:37 - as the less than symbol and equal to
53:39 - symbol combination so guys let us check
53:41 - all these with the help of examples over
53:43 - here so we have checked the greater than
53:45 - symbol over here let us check the less
53:47 - than symbol so we will simply provide
53:49 - print a less than b over here which
53:52 - should return us true in this case
53:54 - that's because the value of a is
53:56 - actually less than the value of B over
53:58 - here let me just save this file and try
54:00 - running this code now so as you can see
54:02 - first expression is false that's because
54:03 - a greater than b no in this case but is
54:06 - a less than b yes in this case and that
54:09 - is why we are getting true over here let
54:10 - us check some more comparison operators
54:13 - over here we provide the print statement
54:15 - is a equal to B over here and then let
54:18 - us provide another operator that is a
54:21 - not equal to B in this case and then we
54:24 - have another oper operator that is a
54:26 - less than or equal to B and then we have
54:29 - another operator that is a greater than
54:32 - or equal to B in this case so guys we
54:34 - have provided all the comparison
54:36 - operators over here let me just save
54:37 - this file and try running this code now
54:39 - so as you can see these are the results
54:41 - over here so the first result is false
54:43 - that's because a is not greater than b a
54:46 - is less than b yes in this case so that
54:48 - is why we are getting true over here is
54:50 - a equal to B no in this case because 3
54:52 - is not equal to 5 so we are getting four
54:55 - false as the result then is a not equal
54:57 - to B yes both numbers are not equal and
55:00 - that is why we are getting true over
55:02 - here is a less than or equal to B so is
55:05 - 3 less than or equal to B yes in this
55:07 - case so that is why we are getting true
55:09 - and is a greater than or equal to B no
55:12 - in this case and that is why we are
55:14 - getting false over here now guys let us
55:16 - see what happens when B is also equal to
55:19 - a so we have provided both the values as
55:21 - three over here let me just save this
55:23 - file and try running this code now so as
55:25 - you can see we are getting the results
55:26 - over here so the first result is false
55:29 - that's because is a greater than b no in
55:32 - this case they are equal and then the
55:34 - second result is also false is a less
55:36 - than b no in this case both are false
55:38 - over here so Guys these are false that's
55:40 - because we are not checking whether they
55:42 - are equal or not but in the last two
55:45 - operators as you can see over here the
55:47 - last two results are true that's because
55:49 - we have included the equal to symbol so
55:51 - a less than or equal to B yes in this
55:54 - case that's because a is equal to B and
55:56 - is a greater than or equal to B yes in
55:59 - this case since a is actually equal to B
56:02 - so both these operators will return us
56:03 - true whereas both these operators will
56:06 - return us false whenever both the
56:07 - numbers that we are comparing have the
56:09 - same value now guys apart from this the
56:11 - third operator that is a is equal to B
56:14 - yes in this case and that is why we are
56:15 - getting true over here and is a not
56:17 - equal to B no in this case since A and B
56:20 - both are equal so this will return as
56:22 - false and that is what we are getting
56:24 - over here so guys these are certain
56:25 - comparison operators that you will be
56:27 - using in the upcoming videos as well
56:30 - when we are going to check the if else
56:31 - statement and we will also be using the
56:34 - V loop as well in which case we have to
56:36 - use these comparison operators to go
56:38 - inside the loop or else to come out of
56:40 - the loop logical operators in Python
56:43 - Programming so guys The Logical
56:45 - operators are used to check whether an
56:47 - expression is true or false so they are
56:50 - used in decision making so as you can
56:52 - see for example let's say the value of
56:54 - variable that is a is equal to 5 and the
56:57 - value of B variable is 6 over here and
57:00 - we have the print statement over here
57:02 - and there are two conditions that we are
57:03 - checking first of all whether a is
57:06 - greater than two so in this case the
57:08 - return will be true over here that's
57:10 - because the value of a that is five is
57:12 - actually greater than two over here and
57:14 - then as you can see this end keyword
57:17 - this is nothing but this is one of the
57:18 - logical operators it is being used in
57:21 - order to check the multiple conditions
57:23 - and the second condition that is being
57:24 - checked over here is whether B is
57:26 - greater than or equal to 6 so in this
57:29 - case since B is equal to 6 so yes in
57:31 - this case it is also true so basically
57:34 - since both the Expressions over here
57:35 - that is the second expression and the
57:37 - first expression is true and because
57:39 - this end logical wants all the
57:42 - Expressions to be true the return for
57:44 - the entire expression will be true over
57:46 - here so as you can see these are certain
57:48 - logical operators over here first of all
57:50 - we have the end operator which means A
57:52 - and B it is true only if both both the
57:55 - operant that is a and b are true over
57:57 - here similarly we have r as well so as
57:59 - you can see A or B in this case only one
58:02 - operant needs to be true that is only
58:04 - one condition needs to be true over here
58:06 - so this will be true if at least one of
58:09 - the operant is true and then we also
58:11 - have the not operator in which case we
58:13 - can use it as not a so it will be true
58:16 - if the operant is false and it will be
58:18 - false when operant is true over here so
58:20 - guys let us check all this with the help
58:22 - of examples over here so let's say we
58:24 - have the variable that is a is equal to
58:26 - 5 and B it is equal to 6 over here so we
58:30 - simply have the print statement and
58:32 - let's say we provide the condition that
58:34 - is a is it greater than two over here
58:37 - and we also have another condition so
58:39 - using the end logical operator over here
58:42 - we can combine multiple conditions so
58:44 - next time we will be checking whether B
58:46 - is greater than or equal to 6 so guys in
58:49 - this case both these conditions that is
58:51 - a greater than two will return as true
58:53 - and then B is greater than than or equal
58:55 - to 6 will also return as true so this
58:57 - entire expression will be true over here
59:00 - so let me just save this file and try
59:01 - running this code now so as you can see
59:03 - true is getting returned over here now
59:05 - what if one of the conditions is false
59:07 - over here so what we have to do is let's
59:09 - say I provide a less than two in which
59:12 - case this particular expression will
59:13 - become false so let me just save this
59:15 - file and try running this code now so as
59:17 - you can see false is getting returned
59:19 - that's because one of the Expressions
59:21 - while using the end logical operator is
59:24 - false over here here and according to
59:25 - rules all the Expressions while using
59:28 - the end logical operator must be true in
59:30 - order to return the true as the result
59:32 - now guys if we check the same conditions
59:34 - that is both these conditions by using
59:36 - the or logical operator so we simply
59:39 - have to provide or over here and let me
59:41 - just save this file and try running this
59:43 - code now so as you can see true is
59:44 - getting returned that's because the
59:46 - second expression over here is true and
59:48 - the first expression over here is false
59:50 - so anyway the or logical operator wants
59:53 - one of the conditions to be true and
59:55 - that is why we are getting the true as
59:57 - the result over here what if we make the
59:59 - second condition false over here so let
60:01 - me just change this expression to B less
60:04 - than 6 over here let me just save this
60:06 - file and try running this code now so as
60:08 - you can see false is getting returned
60:10 - that's because is a less than 2 no in
60:12 - this case so false is getting returned
60:14 - over here and is B less than 6 over here
60:17 - no in this case it is equal to six so
60:19 - this expression is also false so the
60:21 - entire expression is false and that is
60:23 - the only combination where the or
60:25 - logical operator will return us the
60:27 - false result now guys when do we use
60:29 - this not operator over here so let's say
60:31 - I have just a simple expression so over
60:34 - here I will provide is a less than 4
60:37 - over here so in this case is a less than
60:40 - 4 no so it should return false so let us
60:42 - save this file and try running this code
60:44 - now so it is returning false over here
60:46 - but what if we want the opposite of this
60:49 - result so if the result of any of the
60:51 - expression is false we want to print
60:53 - true but if the result of any expression
60:55 - is true we want to return it as false so
60:58 - what we have to do is we simply have to
61:00 - provide not logical operator and the
61:03 - expression needs to be provided within
61:05 - the parenthesis over here as we can see
61:07 - so let me just save this file now so
61:09 - since it was returning false by using
61:12 - the not logical operator it should now
61:14 - return true so let me just run this code
61:16 - once again so it is returning true over
61:18 - here similarly if let's say this
61:20 - particular expression turns out to be
61:22 - true so we will get false as the result
61:24 - so let's say I provide a greater than 4
61:27 - so is a for which the value is five over
61:30 - here is it greater than four yes in this
61:32 - case so this will return as true but
61:34 - since we are using the not logical
61:36 - operator it will return this True Result
61:38 - to false and it will be printed so let
61:41 - me just save this file and try running
61:42 - this code now so as you can see false is
61:44 - getting returned over here and it is
61:46 - being printed so Guys these are certain
61:48 - logical operators that we will be using
61:50 - in the upcoming videos as well when we
61:52 - are going to use the if else state M
61:54 - apart from that we will be also using
61:56 - the while loops and other control
61:58 - statements as well where we are going to
62:00 - use these logical operators so guys
62:02 - practice on your own so that on
62:04 - different inputs you get different
62:06 - outputs if else statement in Python
62:08 - Programming so guys in computer
62:10 - programming we use the if statement to
62:13 - run a block of code only when a certain
62:16 - condition is met so for example as you
62:18 - can see assigning grades that is a b c
62:21 - based on the marks obtained by a student
62:23 - so basically over here in this case we
62:25 - will be using the if condition now what
62:28 - can be the conditions we can say that if
62:30 - the percentage of the student is above
62:32 - 90% so assign grade A in the same way if
62:36 - the percentage is above 75% then assign
62:39 - Grade B and if the percentage is above
62:42 - 65% but less than 75% then assign grade
62:46 - C so during such conditions we have to
62:49 - use the if else statement over here now
62:51 - similarly in Python there are three
62:53 - forms of if if else statement so we are
62:55 - going to check all these forms of
62:57 - statements one at a time with the help
62:59 - of examples the first part is the if
63:01 - statement in which case we are going to
63:03 - Simply have the if statement over here
63:05 - along with the condition and the block
63:07 - of code the next form will be if else
63:09 - statement in which case we will also
63:11 - have the else block over here and the
63:13 - third form of the IFL statement will be
63:15 - first we will be having the if statement
63:18 - and Then followed by the AL if statement
63:20 - in which case we have another condition
63:22 - over here and then finally we have the
63:24 - else statement over here so let us check
63:26 - all this with the help of examples in
63:28 - the vs code so over here let's say we
63:30 - have the value of x it is equal to 10
63:33 - now what we have to do is we have to
63:35 - provide the if condition over here so as
63:37 - you can see when we type if keyword over
63:40 - here vs code is suggesting us that we
63:42 - can use this if keyword so we are going
63:44 - to use this and then we are supposed to
63:46 - have some condition so we can say x
63:49 - greater than 5 over here so guys this is
63:51 - one of the comparison operators that we
63:53 - have already seen SE previously it will
63:55 - check whether this left hand side
63:57 - variable is it greater than the value
63:59 - that is present on the right hand side
64:00 - so guys this is one of the conditions
64:02 - that we are going to check and then
64:04 - followed by a colon over here so guys
64:07 - this is the format in which we provide
64:08 - the if condition and if this condition
64:11 - that is whether X is greater than 5 if
64:13 - it is true then we want to come inside
64:16 - this and there will be the block of code
64:18 - we need to have certain statements over
64:20 - here so we will say print and we can
64:22 - simply put the string that is X is
64:25 - greater than 5 over here since that is
64:28 - the condition that we have checked so
64:30 - this is the very simple code that we can
64:32 - have with the if condition over here let
64:34 - me just save this file and try running
64:36 - this code now so as you can see it is
64:38 - displaying X is greater than five now
64:41 - guys this is just one statement that we
64:42 - have provided inside the if condition we
64:45 - can also have multiple lines of code
64:47 - inside this block over here after the if
64:49 - condition so we simply have to press
64:51 - enter and provide the another print
64:54 - statement and let's say we will simply
64:56 - put we have checked X so we have a very
65:00 - general statement over here that is we
65:01 - have checked X over here let me just
65:03 - save this file and TR running this code
65:05 - now so as you can see X is greater than
65:07 - 5 this thing is getting printed and this
65:10 - statement that is we have checked X is
65:12 - also getting printed so all the lines of
65:14 - code that is present inside the block
65:17 - after this condition that we have
65:18 - provided in the if statement will be
65:21 - executed only when this condition that
65:23 - is X greater than 5 is true now what if
65:26 - this condition is not true so let's say
65:28 - I provide X less than 5 over here in
65:31 - which case this condition will become
65:32 - false so what will happen is the control
65:34 - flow will not go inside this block and
65:37 - it will not print these statements over
65:39 - here let us verify this I will just save
65:41 - this file and try running this code now
65:44 - so as you can see nothing is getting
65:45 - printed over here that's because these
65:47 - lines of code are not getting executed
65:50 - because this condition was false now how
65:52 - do we verify that we have to to come out
65:54 - of this block so basically we have
65:56 - indented this code that is there are
65:58 - some space characters over here in this
66:00 - line that is why these lines of code
66:02 - over here are treated to be present
66:04 - inside the block after this condition we
66:07 - have to come out of that block over here
66:10 - so we simply press enter and then we
66:12 - press backspace so that the cursor is
66:14 - aligned to this if condition over here
66:16 - now we can simply provide another print
66:18 - statement and I will simply say outside
66:21 - if statement so over here we say outside
66:25 - if statement now guys this line of code
66:27 - it will confirm that the control flow
66:29 - has come out of the if block over here
66:32 - so let me just save this file now and
66:33 - try running this code so as you can see
66:35 - we are getting outside if statement
66:37 - that's because X less than 5 condition
66:40 - was false and that is why these two
66:42 - lines of code were not printed and then
66:44 - the control Flow came out of the if
66:46 - condition and then this line that is
66:48 - outside if statement was printed so guys
66:50 - it is very important that you follow
66:52 - this indentation as far as as your
66:54 - python programs are concerned you might
66:56 - get incorrect output if you don't follow
66:58 - such indentations properly now let us
67:00 - move to another form of if statement so
67:02 - over here the second form is we provide
67:04 - the else part as well so the first part
67:06 - we have already seen that is using the
67:08 - if statement let us now use the else
67:10 - statement as well so over here what we
67:12 - will do is first of all we will check
67:14 - whether X is greater than 5 and then we
67:17 - will print that is X is greater than 5
67:19 - over here now what if X is not greater
67:22 - than 5 that means it is less than or
67:24 - equal to 5 so we have to define the else
67:26 - part over here so first of all we have
67:28 - to remove this indentation part so I'll
67:30 - just press on back space and then we
67:33 - provide the else keyword as you can see
67:35 - vs code is suggesting us this else
67:36 - keyword over here we will use this and
67:39 - then followed by colon and then we can
67:41 - go inside this block of code and
67:43 - similarly we will have another print
67:45 - statement in this case we will say X is
67:48 - not greater than 5 so we are checking
67:50 - whether X is greater than 5 and we will
67:53 - say x is is greater than 5 if this
67:55 - condition is true and if this is not
67:57 - true then it will go in the else part
67:59 - and it will say X is not greater than 5
68:02 - and after this part of code gets
68:03 - executed the control flow will come over
68:06 - here and it will print this statement
68:07 - that is outside if statement over here
68:09 - so let me just save this file andent
68:11 - running this code now so as you can see
68:13 - it says X is greater than 5 so over here
68:16 - since the value of x it is 10 it is
68:18 - printing X is greater than 5 after this
68:21 - x greater than 5 condition is true and
68:23 - then after that we are getting outside
68:25 - if statement so the control flow did not
68:27 - go inside this else part that's because
68:30 - it went inside this if part and this
68:32 - line of code was executed so guys the
68:34 - control flow can only go inside one
68:37 - block of code if this condition is true
68:39 - then it will come out it will not go
68:41 - inside the else part and if this
68:43 - condition becomes false then it will go
68:45 - over here in the else part and execute
68:47 - that line of code so let us check that
68:49 - second scenario now what if X is not
68:52 - greater than 5 so we will change the
68:53 - value of x and let us say the X values
68:56 - is 2 now so in this case is X greater
68:59 - than 5 no in this case so this line of
69:01 - code that is X is not greater than 5
69:03 - should get printed let me just save this
69:05 - file enter I running this code now so as
69:08 - you can see X is not greater than five
69:10 - this line of code is getting printed
69:12 - that's because the condition was false
69:14 - and the control Flow came in the lse
69:16 - part and it executed this line of code
69:19 - after this outside if statement got
69:21 - printed over here as you can see on the
69:23 - console so this is one of the examples
69:25 - of the if else statement that we can use
69:27 - guys there will be many instances where
69:29 - you will be using this if else statement
69:31 - in your actual programs so make sure
69:33 - that you practice on your own now after
69:36 - this let us see another part that is we
69:38 - have the AL if as well so guys let us
69:40 - take this example over here that is of
69:42 - grading system so if the percentage is
69:44 - greater than 90 we have to assign the
69:46 - grade that is a If the percentage is
69:48 - greater than 75 but less than 90 then we
69:51 - will say the grade is B and if the
69:53 - percentage is greater than 65 but less
69:56 - than 75 then we have to put the gr as C
69:59 - so guys let us move to the code over
70:01 - here let us clear all these lines of
70:02 - code and over here we will simply have
70:05 - the percentage variable and let's say we
70:07 - have 95 as the percentage initially and
70:10 - then we have another variable that is
70:11 - great let's say it is equal to D
70:13 - initially so we have this character that
70:15 - is D over here now what we have to do is
70:18 - we have to provide the if condition and
70:20 - the first condition is whether the
70:21 - percentage is above 90 so over here we
70:24 - will say inside the if condition first
70:26 - of all whether this percentage is it
70:29 - above 90 over here so we will simply
70:31 - have percentage greater than 90 and if
70:34 - this is true then we have to provide
70:36 - colon and then we have to make the value
70:38 - of this grade as a so grade it is equal
70:41 - to a over here inside the single codes
70:43 - now we have another condition that is if
70:45 - the percentage is greater than 75 but if
70:48 - it is less than or equal to 90 then it
70:51 - should be B so what we have to do is we
70:53 - can use the L If part over here so we
70:55 - have L if keyword so as you can see vs
70:58 - code is suggesting us this L if keyword
71:00 - over here followed by we have to check
71:03 - whether this percentage again is it
71:05 - greater than 75 so over here if it is
71:08 - greater than 75 then we have to come in
71:10 - this block of code and then after this
71:13 - again we have to assign the value to
71:14 - this grade variable and this time the
71:16 - value will be B over here so we will
71:19 - assign the value to grade as B and then
71:21 - after this we will again have the L If
71:24 - part over here and we need to check
71:25 - whether the percentage is greater than
71:27 - 65 or not and then in that case we have
71:30 - to provide C so over here we will say l
71:33 - if percentage it is greater than 65 in
71:37 - this case and then if this is true then
71:40 - we have to provide the grade value as C
71:43 - over here and then guys we can also have
71:45 - the else part over here and we can
71:47 - simply provide that the grade in the lse
71:50 - part it can be D over here in case the
71:52 - percentage is less than than 65 so we
71:54 - can have gr as D and then finally we
71:57 - will have the print statement over here
71:59 - so we have the print function and we
72:01 - will simply provide the grade value so
72:03 - the grade is and then we have comma and
72:06 - then the grade variable over here so
72:08 - guys over here as you can see initially
72:10 - the percentage is 95 so it should go
72:12 - inside the first if statement so let me
72:14 - just save this file now and try running
72:16 - this code so as you can see we are
72:18 - getting some error over here at the else
72:20 - part so over here we have forgot to
72:22 - provide the colon after the else part so
72:24 - it is very important that we provide the
72:26 - colon after any of these keywords that
72:28 - we have used and the conditions that we
72:30 - have used so let me just save this file
72:32 - and try running this code now so as you
72:34 - can see the grade is a that's because
72:36 - the percentage value is 95 and in this
72:39 - case percentage is greater than 90 and
72:41 - that is why the grade is being assigned
72:43 - as the value as a now what if the
72:44 - percentage value is not greater than 90
72:47 - so let's say we provide the percentage
72:49 - value as 85 so in this case the control
72:51 - flow will come over here it will check
72:53 - whether the percentage greater than 90
72:55 - no in this case then it will go inside
72:57 - the L If part so is percentage greater
72:59 - than 75 yes in this case so this line of
73:02 - code that is grade equal to B will get
73:04 - executed and then the control flow will
73:06 - come directly out of the if else
73:08 - statement and it will print the grade
73:10 - over here let me just save this file
73:12 - andent try running this code now so as
73:14 - you can see the grade is being assigned
73:15 - the value as B so grade is B is getting
73:17 - printed over here similarly let's say we
73:20 - provide the percentage value as 70 so
73:22 - this time this condition that is
73:24 - percentage greater than 65 will get
73:26 - executed because the previous conditions
73:28 - are already false in this case so let me
73:31 - just save this file Andy running this
73:32 - code now so grade must be C so as you
73:35 - can see the grade is C over here and
73:37 - what if the percentage is less than 65
73:39 - so let's say we provide the percentage
73:41 - is 60 so finally the lse part that is
73:43 - grade equal to T will get executed so
73:46 - let me just save this file and try
73:47 - running this code now so now in this
73:49 - case the grid is D so in this way we can
73:51 - easily use the IFL statement we can also
73:54 - use the AL if key word in order to check
73:57 - the intermediate conditions over here
73:59 - for Loop in Python Programming so guys
74:01 - in computer programming Loops are used
74:04 - to repeat a block of code so let's say
74:06 - for example if we want to show a message
74:09 - 10 times we don't have to print that 10
74:11 - number of times over here we can simply
74:14 - use the loop in order to repeat the same
74:16 - message again and again 10 times so in
74:19 - Python the fall Loop is used to run a
74:21 - block of code for a c certain number of
74:24 - times so in this example we have
74:25 - considered 10 we can have any number of
74:28 - iterations so basically it is used to
74:30 - iterate over any sequences such as list
74:33 - tle string Etc so guys this is the
74:36 - syntax of the Fall Loop in Python
74:37 - Programming so first of all we have the
74:39 - for keyword followed by a particular
74:42 - value or a variable and then we have
74:44 - this in keyword which is a kind of a
74:46 - membership operator that we have seen
74:48 - previously and then we have the sequence
74:50 - now this sequence can be anything it can
74:52 - be a list stle or any other sequence
74:54 - over here so let us check this with the
74:56 - help of examples now so over here what
74:58 - we will do is let's say we have the
75:00 - variable name as X and we have the list
75:02 - of numbers over here so in order to
75:05 - define the list we have the open and
75:06 - close square brackets and we have the
75:08 - list of numbers let's say we have one
75:10 - followed by two and then we have three
75:14 - four and then five so we have the top
75:16 - five numbers over here inside this list
75:18 - that is defined in the variable X now
75:21 - what we want to do is we want to print
75:22 - all all these numbers one at a time on
75:25 - the separate lines so we can simply use
75:27 - the for Loop over here so for and what
75:30 - we will do is let's say we provide value
75:32 - as the variable name and then we provide
75:35 - the in keyword which is the membership
75:37 - operator and after this on the right
75:39 - hand side of the in keyword we are
75:41 - supposed to have the sequence so the
75:43 - sequence in this case is the variable
75:45 - that is X over here so this is the
75:47 - format of the Fall Loop whenever we are
75:49 - going to iterate through a list or a
75:51 - sequence now inside this we can have the
75:53 - block of code over here so we simply
75:55 - want to print all the values so we have
75:57 - the print function and we can simply
75:59 - provide this value that is variable so
76:02 - guys what is happening behind the scenes
76:03 - is this x that is the list of all the
76:06 - numbers one at a time the number is
76:08 - being assigned to this variable that is
76:10 - value so first of all one will get
76:12 - assigned to value and this value that is
76:14 - one will get printed and then the
76:16 - control flow will go back again in the
76:18 - sequence that is X it will check whether
76:20 - there is a next element or not so two
76:22 - will get printed and then again three
76:24 - and then four and then five and then
76:26 - after this when the control flow comes
76:28 - over here it sees that there is no other
76:30 - element after this Fifth Element so the
76:33 - control flow will come out of this fall
76:35 - Loop and then the other lines of code
76:37 - after this fall Loop will get printed so
76:39 - guys let me just save this file enter I
76:40 - running this code now so as you can see
76:43 - all the numbers are getting printed over
76:45 - here on the terminal that is 1 2 3 4 5
76:49 - now guys let's say we want all these
76:50 - numbers to be printed on the same line
76:52 - so so previously we had seen that we
76:54 - have certain parameters in the print
76:56 - function that will help us in order to
76:59 - print the values in a specific way so
77:01 - over here we have one of the parameters
77:03 - that is end over here so we provide end
77:06 - and this parameter helps us in order to
77:08 - separate the different elements that we
77:10 - want to print so what we are going to do
77:12 - is I'm going to separate all the numbers
77:14 - using the comma character so I have
77:16 - provided the comma character over here
77:18 - so all the numbers that were printed on
77:20 - the different lines will get printed on
77:22 - the same line now so let me just save
77:24 - this file and try running this code now
77:26 - so as you can see 1 2 3 4 5 is getting
77:29 - printed we are getting this additional
77:31 - comma over here at the end that's
77:32 - because after the last value is getting
77:34 - printed the comma is appended after that
77:37 - last value so guys this is one of the
77:38 - ways in which we can use the fall Loop
77:40 - in order to carry out our operations now
77:43 - guys there is another important thing
77:44 - that you must know in Python the fall
77:46 - loop with python range can also be used
77:49 - so in Python a range is a series of
77:51 - values between two numeric intervals we
77:54 - use the Python's built-in function that
77:56 - is range to define a range of values so
77:58 - let's say we want to define the top 10
78:01 - numbers over here we can simply use the
78:03 - range function instead of defining them
78:05 - one at a time like how we have defined
78:07 - in this list so basically in order to
78:10 - have the top 10 numbers we have to
78:12 - manually Define it as 1 to 10 over here
78:14 - but we can also get rid of this part we
78:16 - can have the range method over here so
78:19 - as you can see when we type range vs
78:21 - code is suggesting us this function that
78:23 - is range over here and we simply have to
78:25 - provide a number over here so let's say
78:27 - we provide 10 as the number so what is
78:29 - happening is the list of 10 numbers over
78:31 - here is getting assigned to the variable
78:34 - that is X over here starting from the
78:36 - number zero up to the number that is 9
78:38 - so over here we will be seeing all the
78:40 - numbers starting from zero up to 9 over
78:43 - here the last number that is 10 is
78:45 - excluded from the list so if we Simply
78:47 - Save this file enter running this code
78:48 - now we will get these numbers that is 0
78:51 - 1 2 3 4 5 6 7 8 9 so 10 numbers are
78:56 - getting displayed over here that's
78:57 - because we have provided 10 inside the
78:59 - range built-in method what if we provide
79:01 - 20 over here so 0 to 19 numbers will be
79:04 - displayed so let me just save this file
79:06 - and try running this code now so as you
79:08 - can see 0 to 19 is getting displayed so
79:11 - guys let's say if someone had told you
79:13 - write a Python program in order to print
79:16 - top 20 numbers starting from the number
79:18 - zero up to 19 so instead of having the
79:21 - print statements 20 number of times and
79:24 - writing each and every number inside the
79:26 - print statement we can simply have the
79:28 - range method over here and we can use
79:31 - the fall Loop in order to iterate
79:33 - through the list that we have already
79:35 - defined over here and that is how we
79:37 - simplify the problem that is given to us
79:39 - and write the Python program now guys
79:41 - there is another variation over here
79:43 - python fall loop with the else part so
79:45 - after this fall Loop we can also have
79:48 - the lse part that will mandatorily get
79:50 - executed after we reach the end end of
79:53 - this sequence that we have provided in
79:54 - the fall Loop so what we will do is we
79:56 - will simply come out of this block of
79:58 - code and we will have the else part over
80:01 - here and we will simply print outside
80:03 - for Loop over here so we have outside
80:07 - for Loop so guys what will happen is
80:10 - after the control flow comes out of this
80:12 - fall Loop the control flow will go
80:14 - inside this L's part and it will execute
80:16 - this line of code and print outside fall
80:19 - loop on the console now guys this print
80:21 - statement will be printed on the same
80:23 - line that's because we have provided the
80:25 - end part over here and there is a comma
80:27 - over here so you can expect the string
80:29 - to be present on this same line over
80:31 - here so let me just save this file and
80:33 - try running this code now so as you can
80:35 - see 0 to 19 that is all the numbers are
80:38 - getting printed and then the last line
80:40 - that is outside fall Loop is getting
80:41 - printed over here so in case you want to
80:44 - print something or carry out certain
80:46 - operations after the execution of the
80:48 - Fall Loop you can have the lse part as
80:51 - well and it will carry out the oper
80:52 - operations over here after the end of
80:54 - this sequence is reached so guys this is
80:56 - the main functionality of the Fall Loop
80:58 - that is in order to iterate through the
81:00 - sequence we can also have the sequence
81:02 - of list of strings as well we can also
81:04 - have tle or dictionary as well so guys
81:07 - it depends on your requirements as to
81:09 - what exactly you want to find out
81:11 - through the python programs while loop
81:13 - in Python Programming so guys previously
81:15 - we have seen how the fall Loop works in
81:17 - the Python Programming now the python y
81:20 - Loop is used to run a specific code
81:22 - until a certain condition is met so
81:24 - basically in the fall Loop there was no
81:26 - such condition that we had provided but
81:29 - it was iterating through a list that we
81:31 - had provided in the form of a variable
81:33 - but over here this is the syntax of the
81:35 - while loop first of all we have the
81:37 - while keyword over here and then we have
81:39 - a certain condition and if this
81:41 - condition is true then only the control
81:44 - flow will go inside the body of the
81:46 - while loop and then again the control
81:47 - flow will come over here it will check
81:49 - the condition again and if the condition
81:51 - is true once again it will again go
81:54 - inside the body of this while loop so
81:56 - guys again and again the control flow
81:58 - will come inside the while loop until
82:00 - and unless the condition becomes false
82:02 - so when this condition becomes false the
82:04 - control flow will come out of this while
82:06 - loop and that is how the while loop is
82:08 - going to work in the Python Programming
82:10 - so guys let us check this with the help
82:11 - of examples now so let's say we want to
82:13 - print the first five numbers that is 1
82:15 - to 5 so over here initially we can have
82:18 - the variable that is I it is equal to 1
82:21 - and the second variable that is J it is
82:23 - equal to 5 so this is the starting point
82:25 - that is I equal to 1 and the ending
82:28 - point is J is equal to 5 so basically we
82:30 - can have a while loop over here we will
82:32 - simply have the while keyword and the
82:35 - condition that we have to give is
82:36 - whether I is less than or equal to J and
82:40 - up to that condition we want to print
82:42 - the value of I so basically it is I less
82:46 - than or equal to J over here so if this
82:49 - condition is true we want to print the
82:51 - value of I which will be be one
82:53 - initially so basically I want to print
82:56 - this number that is I over here now guys
82:58 - what exactly is happening over here is
83:00 - I's value is 1 initially J value is five
83:03 - initially so is I less than or equal to
83:05 - J in the first instance yes in this case
83:07 - so I will be printed which is equal to 1
83:10 - so again it will go inside the Y Loop
83:12 - and it will check whether 1 is less than
83:14 - or equal to 5 yes in this case so guys
83:17 - we are not changing any of the values
83:19 - that is I or J over here so this will be
83:21 - infinite Loop because again and again
83:24 - the condition will be true and the
83:26 - number that is I which is equal to 1
83:28 - will get printed indefinitely so what we
83:31 - have to do is we have to increment the
83:32 - value of I because after one we want to
83:35 - print the value that is two over here so
83:37 - what we will do is we will simply add 1
83:39 - to I so I it is equal to I + 1 we can
83:43 - also use the Shand method that is I +
83:46 - equal to 1 over here so what will happen
83:49 - now is I's value is updated to I + 1
83:51 - which will be 2 2 now so is 2 less than
83:54 - or equal to 5 yes in this case and then
83:56 - again two will get printed and then I
83:58 - will again get incremented over here so
84:00 - the I's value will be three next time
84:02 - I's value will be four and then again
84:05 - I's value will be five and then
84:06 - ultimately when I's value is six this
84:09 - condition will become false that's
84:11 - because 6 is not less than or equal to 5
84:13 - and the control flow will come out of
84:15 - the while loop so guys let me just save
84:17 - this file and try running this code now
84:19 - so as you can see all the numbers that
84:21 - is 1 2 3 4 5 is getting printed after
84:24 - the I's value is five over here five is
84:26 - getting printed now I's value becomes
84:29 - six over here that's because 5 + 1 will
84:31 - be 6 and is 6 less than or equal to 5
84:34 - because the J's value is five over here
84:35 - in this case so no the condition becomes
84:38 - false and the control flow comes out of
84:40 - the while loop now what if we want to
84:42 - print all these numbers on the same line
84:44 - so simply inside the print statement we
84:46 - can have the comma and then we can have
84:48 - the end operator and then let's say we
84:50 - want to separate all the numbers with
84:52 - the space characters so inside the
84:54 - double codes we have provided the space
84:56 - character over here so let me just save
84:57 - this file and try running this code now
84:59 - so as you can see 1 2 3 4 5 is getting
85:02 - printed over here we can have any
85:04 - numbers over here let's say I is
85:06 - starting from 11 and let's say we want J
85:08 - is equal to 20 so in this case 11 to 20
85:11 - should get printed let me just save this
85:13 - file and TR running this code now so as
85:15 - you can see 11 12 13 14 and up to 20
85:19 - numbers are getting printed over here so
85:21 - guys this is the main functionality of
85:23 - the while loop it is going to have a
85:25 - certain condition and if this condition
85:27 - is true the block of code inside the
85:30 - while loop will get executed and once
85:32 - the condition becomes false control flow
85:34 - comes out of the while loop now guys we
85:36 - can also use the lse part with the while
85:38 - loop so over here as you can see python
85:41 - while loop with the else part so a while
85:43 - loop can have an optional else block as
85:45 - well the else part is executed after the
85:48 - condition in the while loop evaluates to
85:50 - false so basically after this while loop
85:53 - we can also have the else part which is
85:55 - optional so we can have the else part
85:57 - over here what we will do is we will
85:59 - simply have the print statement that is
86:01 - outside the while loop so we have the
86:04 - print function and we will say outside
86:07 - while loop over here so let me just save
86:10 - this file and running this code now so
86:12 - as you can see 11 12 13 up to 20 numbers
86:15 - are getting printed and then on the same
86:17 - line the outside while loop the
86:20 - statement that we have provided in the
86:21 - else part is getting printed so this is
86:23 - the functionality of the lse part after
86:25 - the Y Loop it is optional if you want to
86:28 - have we can have it or else we don't
86:29 - need to have it but guys the important
86:31 - thing is inside the V Loop we can
86:33 - provide a particular condition and the
86:35 - control flow will go again and again
86:37 - inside the V Loop until the condition is
86:39 - true once a condition becomes false the
86:42 - control flow will come out of the V Loop
86:44 - now guys what you should use whether you
86:46 - should use the python for Loop or python
86:48 - while loop over here so guys basically
86:50 - they are used based on the specific
86:52 - requirements so as you can see fall Loop
86:54 - is usually used when the number of
86:56 - iterations is known so as we had seen
86:59 - previously in the fall Loop we provide a
87:01 - particular sequence and iterate through
87:03 - that sequence by giving one value at a
87:05 - time to a variable and we use that
87:07 - variable inside the block of the Fall
87:10 - Loop but in the while loop there is a
87:12 - condition so while loop is usually used
87:14 - when the number of iterations are
87:15 - unknown so we don't know the number of
87:17 - iterations we don't have the sequence of
87:19 - elements or the list of numbers through
87:21 - which we want to iterate so basically we
87:23 - provide the condition in the while loop
87:25 - So based on these requirements you can
87:27 - choose whether you want to use the while
87:29 - loop or you want to use the fall Loop
87:31 - but guys it is very important that you
87:33 - practice both these Loops the
87:35 - implementation of these Loops are very
87:37 - important as far as Python Programming
87:39 - is concerned so break and continue
87:41 - keywords in Python Programming so Guys
87:43 - these are two important keywords in
87:45 - Python Loops that is break keyword and
87:47 - the continue keywords basically these
87:49 - are used in the loops in order to carry
87:51 - out certain operations so the break
87:54 - statement is used in order to terminate
87:56 - the loop immediately when it is
87:58 - encountered so whenever we are executing
88:01 - certain code inside the for or the while
88:03 - loop if there is certain condition we
88:05 - can use the break statement in order to
88:07 - come out of the loop and then on the
88:09 - contrary we have the continue statement
88:12 - as well so the continue statement is
88:14 - used to skip the current iteration of
88:16 - the loop and control flow of the program
88:19 - goes to the next iteration so guys let
88:21 - us check both both of these keywords
88:23 - with the help of examples over here so
88:25 - let's say first of all we will be using
88:27 - the fall Loop in order to print the top
88:29 - 10 numbers that is 0 to 9 so let's say
88:32 - we have 4 x and then we have the in
88:35 - membership operator and then we have the
88:37 - range built-in method in order to print
88:40 - the numbers so let's say we have the
88:42 - range of 10 numbers over here after the
88:44 - colon let's say we want to print all
88:46 - these numbers so what we will do is we
88:48 - will simply put print X and in order to
88:51 - get all the numbers on the same line I'm
88:53 - going to put end parameter over here and
88:55 - just have the space character over here
88:57 - so let me just save this file and try
88:59 - running this code now so as you can see
89:02 - we are getting the top 10 numbers that
89:03 - is 0 1 2 3 up to 9 over here but guys
89:07 - let's say now there is a requirement
89:08 - that before printing this six number we
89:11 - want to come out of the loop and we only
89:13 - want to print from 0 to 5 and if we are
89:16 - required to keep this foral statement as
89:18 - it is what we have to do is once we
89:21 - encounter the number six inside the fall
89:23 - Loop we have to come out of the Fall
89:25 - Loop so how that can be done basically
89:27 - we will have the if statement over here
89:30 - so inside this fall Loop we are having
89:31 - the if statement over here and we are
89:34 - going to check whether this x value is
89:36 - it equal to 6 over here so this is the
89:39 - relational operator that is equal to
89:41 - equal to we are trying to check whether
89:42 - this x variable is it equal to 6 and if
89:45 - it is equal to 6 then we can simply come
89:48 - out of the loop by using the break
89:49 - statement so after the colon over here
89:51 - here we will simply put the break
89:54 - keyword so once we put this code over
89:57 - here that is if xal to 6 we are putting
89:59 - the break statement the control flow
90:01 - will come out of the loop when the x
90:04 - value is equal to 6 so let me just save
90:06 - this file and try running this code now
90:08 - to see what happens so as you can see 0
90:10 - 1 2 3 and then up to five numbers are
90:13 - getting printed and once a control flow
90:15 - comes over here next time the value of x
90:17 - will become 6 and it will check whether
90:19 - X is equal to 6 yes in this case and
90:22 - since this condition is true the control
90:24 - flow goes inside the if statement and
90:26 - this break statement is encountered
90:28 - which makes the control flow come out of
90:31 - this fall Loop over here now similar
90:33 - operation is being carried out when we
90:34 - use the while loop as well so let's say
90:37 - I is equal to one over here and let's
90:39 - say we want to print the first 10
90:41 - numbers once again so what we will do is
90:43 - we will say while we can simply put I
90:46 - less than or equal to 10 over here and
90:48 - then after the colon we can simply have
90:50 - the print function over here and we will
90:52 - print the value of I and then let's say
90:54 - I provide the end parameter as the space
90:57 - character over here so that all the
90:58 - numbers that is the value of I is
91:00 - printed on the same line so let me just
91:02 - save this file enter I running this code
91:04 - now so we have entered the infinite Loop
91:06 - over here I have just interrupted the
91:08 - printing of the numbers the mistake that
91:10 - we have done is we have not incremented
91:12 - the value of I over here so what we will
91:14 - do is simply we will increment the value
91:16 - of I by I + 1 over here let me just save
91:19 - this file and try running this code now
91:21 - once again so as you can see 1 to 10
91:23 - numbers are getting printed now again
91:25 - let's say we want to print only the
91:27 - numbers from 1 to 7 so when the number 8
91:30 - is encountered we want to come out of
91:32 - the while loop instead of printing the 8
91:35 - 9 10 numbers so we can simply put the if
91:37 - condition over here if I is equal to 8
91:41 - then what we have to do is we have to
91:43 - use the break statement over here so let
91:45 - me just save this file and try running
91:47 - this code now in this case the top seven
91:49 - number should get printed and after
91:51 - eight is encounter the control flow
91:53 - should come out of this while loop over
91:55 - here so I'm running this code now so as
91:57 - you can see 1 to 7 is getting printed
91:59 - over here so guys this is the main
92:00 - functionality of the break keyword let
92:02 - us now understand how continue works as
92:04 - you can see the continue statement is
92:06 - used in order to skip the iteration of
92:09 - the loop and the control flow of the
92:10 - program goes to the next iteration let
92:13 - us understand this with the help of
92:14 - example over here we will take the same
92:16 - example that is for I in and then the
92:19 - range that is 0 to 9 over here so over
92:22 - here we will provide the number 10
92:24 - inside the range built-in function so
92:26 - what we will do is we will simply print
92:28 - the value of I over here and then we
92:31 - will end it with the space character let
92:33 - me just run this code once so I'll just
92:35 - run this code over here as you can see 0
92:37 - to 9 is getting printed now guys let's
92:39 - say I don't want this number five over
92:42 - here that is being printed in the range
92:43 - 0 to 9 so what we can do is simply I
92:46 - will put a condition over here if this
92:49 - I's value equal to 5 then what we have
92:52 - to do is we don't want to print that
92:54 - number right so after this colon we can
92:57 - simply put the continue keyword so guys
92:59 - what will happen is once the I's value
93:02 - is five the control flow comes inside
93:04 - the if condition and the control flow
93:06 - will encounter this continue keyword so
93:08 - what exactly will happen is instead of
93:10 - going to the next statement over here
93:12 - the control flow directly goes back
93:14 - again to the fall Loop and goes to the
93:16 - next number so next time the I's value
93:18 - will be six and this time since this
93:20 - condition will be f it will print this
93:22 - number that is six over here so in short
93:25 - what is happening is when the value of I
93:27 - is five it will not get printed over
93:29 - here with the help of this print
93:31 - statement so let us check this so I'll
93:33 - save this file and try running this code
93:34 - now so as you can see we are getting 0 1
93:37 - 2 3 4 and then there is no number five
93:40 - but after four we have six directly and
93:42 - then we have 7 8 9 so guys in this way
93:45 - continue keyword works so let's say if I
93:47 - only want to print the even numbers so
93:50 - what will happen is let's say I don't
93:52 - want the odd numbers so how do we check
93:54 - that in the if condition we can simply
93:56 - put I per 2 is it equal to 1 over here
94:01 - because every odd number if it is
94:03 - divided by two it will give us the
94:05 - remainder as one and that is what we are
94:07 - checking so all the odd numbers will not
94:09 - be printed but only even numbers will be
94:12 - printed so let me just save this file
94:13 - and try running this code now so as you
94:16 - can see only even numbers between 0 to 9
94:18 - is getting printed that is 0 2 4 6 six
94:21 - and then 8 and guys this is the
94:23 - functionality of the continue keyword
94:25 - that is in order to make the control
94:27 - flow go back to the fall Loop for the
94:30 - next iteration and guys that is the main
94:32 - functionality of the continue keyword in
94:34 - order to skip the current iteration and
94:36 - go back to the next iteration inside the
94:38 - loop now guys similarly you can use the
94:40 - continue keyword with the while loop as
94:42 - well so that code I'll leave up to you
94:44 - so that you can practice on your own in
94:45 - order to learn more about it functions
94:48 - in Python Programming so guys we will
94:50 - learn about the python function fun and
94:51 - the function expressions with the help
94:53 - of examples so basically a function is a
94:56 - block of code that performs a specific
94:59 - task so it can be any task that you want
95:02 - to implement based on your requirements
95:04 - but it is the block of code that you can
95:06 - put inside the function and that block
95:08 - of code will have your implementation of
95:11 - the logic now suppose you need to create
95:13 - a program to create a circle and color
95:16 - it so there are two task over here that
95:18 - is first of all in order to create a
95:20 - circle and the second thing is to color
95:22 - it so you can create two functions to
95:24 - solve this problem that is the first
95:26 - function will be to create a circle and
95:28 - that will be one function and another
95:30 - function will be to create a color over
95:33 - here so basically what we have done is
95:34 - we have divided a complex problem into
95:37 - smaller chunks which makes it easier to
95:40 - understand the program and reuse the
95:42 - functions as well so there are two types
95:44 - of functions so first of all we have
95:46 - already seen some standard Library
95:47 - functions as well one of the example is
95:50 - the print statement that is the the
95:51 - print function so these are buil-in
95:53 - functions in Python that are available
95:55 - to use so let us check some examples of
95:57 - standard Library functions over here so
96:00 - previously we have seen the print
96:01 - statement so this is nothing but one of
96:03 - the built-in functions which take
96:05 - multiple parameters so one of the
96:07 - parameters is the value so when we are
96:10 - providing programming for beginners the
96:13 - string which is the name of the YouTube
96:15 - channel as well which you should
96:16 - definitely subscribe so this is the
96:18 - string that we have provided to the
96:20 - print function and this string is being
96:22 - passed to the print buil-in method and
96:25 - behind the scenes this print function is
96:27 - having some sort of code that will help
96:30 - us in order to print the statement on
96:32 - the terminal so when we save this file
96:34 - and try running this code now basically
96:36 - this programming for beginners is
96:38 - getting printed what we have done we
96:40 - have just called that function and the
96:42 - implementation is behind the scenes so
96:44 - this is one example of a buil-in
96:46 - function similarly we have another
96:48 - built-in function that is range which
96:50 - helps us in order to have the list of
96:53 - numbers from zero up to the number that
96:55 - we have provided so let's say we provide
96:57 - the number 10 so it will provide us all
96:59 - the numbers before 10 starting from zero
97:02 - so this is another built-in function so
97:04 - similarly we have other standard Library
97:06 - functions as well now you can also have
97:08 - the user defined functions so in case
97:11 - your requirement is not fulfilled by
97:13 - using one of the standard functions that
97:15 - is being provided by python you can have
97:18 - your own user defined functions also so
97:20 - we can create our own functions based on
97:23 - our requirements and this is the syntax
97:25 - that is first of all we have this
97:27 - keyword that is DF which means Define
97:30 - and then we have the function name so
97:32 - this function name will be the name of
97:33 - the function like this range is the name
97:35 - of the function then the print function
97:37 - the print name is the function name over
97:40 - there so similarly we can have our own
97:42 - function name and after that we have the
97:44 - list of arguments we can have any number
97:46 - of arguments over here inside that we
97:48 - will have the function body where our
97:50 - implementation code will be present and
97:53 - then we can also have the optional
97:55 - return statement which means it will
97:57 - return some value so over here as you
97:58 - can see this is the example we have the
98:00 - defined keyword and Then followed by the
98:03 - greed function over here so it is not
98:05 - taking any arguments for now it is
98:07 - simply printing some statement that is
98:09 - inside greed function now how do we call
98:11 - this function simply we use the function
98:14 - name that is greed followed by open and
98:16 - close parenthesis and then we call the
98:18 - print function and we say outside
98:20 - function so guys let us check this with
98:21 - the help of example over here so simply
98:24 - we will have the defined keyword so D EF
98:26 - and let's say we have sum and then
98:29 - underscore numbers so basically what we
98:31 - are doing over here is we will be adding
98:34 - two numbers so over here we have the
98:36 - open and close parenthesis and then
98:38 - after that we have a colon and let's say
98:40 - we have the number a it is equal to 10
98:43 - and then we have number B it is equal to
98:46 - 20 we want to print the sum of these
98:48 - numbers so we simply provide print fun
98:51 - function inside this and we say A + B
98:54 - and then we can also have the string
98:56 - over here let's say we have sum of A and
99:01 - B and then we have colon and then after
99:04 - this we have comma and then we have a
99:06 - plus b over here so guys this is the
99:08 - function that we have already defined we
99:10 - have two numbers that is a is equal to
99:12 - 10 and B is equal to 20 now if we Simply
99:14 - Save this file and running this code we
99:17 - will not get anything so as you can see
99:19 - there is no print statement which is
99:21 - helping us in order to print something
99:22 - on the terminal why so because this code
99:25 - is present inside a function which is
99:27 - not called yet so we need to call this
99:30 - function that is some numbers so how do
99:31 - we call it by simply calling the name so
99:34 - we simply have to provide some numbers
99:36 - over here and then open and close
99:38 - parenthesis and that's it we have simply
99:41 - called this function which will make the
99:43 - control flow go to this particular
99:44 - function over here and inside it will go
99:47 - it will check that a value is 10 B value
99:49 - is 20 and it will print sum of A and B
99:53 - it will carry out this operation that is
99:55 - a plus b so let me just save this file
99:57 - and try running this code now so as you
99:59 - can see sum of A and B it is equal to 30
100:02 - and that is how we can simply provide
100:03 - the function now guys why do we write
100:05 - this function just to add two numbers so
100:08 - let's say you have a scenario you have a
100:10 - it is equal to 10 and then we have B it
100:12 - is equal to 20 and you want to print the
100:15 - sum so you can simply provide print a +
100:18 - b so you will get the answer as 30 now
100:21 - with the same requirement you have
100:22 - another requirement as well in the same
100:25 - code that is with this particular
100:26 - addition you want to add more two number
100:29 - so what you will do is you will simply
100:31 - copy and paste these lines of code once
100:33 - again that is the three lines of code
100:34 - over here but this time the age value is
100:37 - something else so let's say we have
100:38 - something like 50 and then 60 over here
100:41 - so what will happen is with this print
100:42 - statement it will print the sum of these
100:44 - two numbers now let's say there is
100:46 - another requirement in which case all
100:48 - the sum needs to be printed at once and
100:50 - you have two more numbers so you will
100:52 - again copy these lines of code and then
100:54 - again paste this over here and then
100:56 - let's say the numbers are 100 and then
100:59 - 200 over here that is B is 200 so let me
101:01 - just save this file andent running this
101:03 - code now so what is happening is all the
101:05 - sum is getting printed once that is 30
101:08 - 110 and 300 but let's say similarly if
101:11 - you have 10 sets of A and B values in
101:13 - this way and you want to print all the
101:16 - sum of those numbers so what you will do
101:18 - so your code will become little bit
101:20 - complicated and it will be little bit
101:22 - lengthy as well so in order to avoid
101:24 - this what you can do is you can simply
101:26 - have the function and inside the
101:28 - function you can have those variables
101:30 - and have the sum of those variables so
101:32 - in order to achieve your task that is
101:34 - have the sum of multiple numbers over
101:36 - here in one screen and using the
101:39 - function what you can simply do is you
101:41 - can pass these values that is 10 20 50
101:44 - 60 and 120 while calling the function
101:47 - that is some number so I'll just remove
101:49 - these lines of code now over here and
101:51 - what we will do is I will simply provide
101:53 - the parameters that is the arguments
101:55 - over here that is a and Then followed by
101:57 - comma and then we have B now these A and
102:00 - B are not required because the values
102:03 - will come whenever this function is
102:04 - being called so I'll just remove these
102:07 - lines of code over here you will simply
102:08 - have one print statement inside the
102:10 - function and the sum of A and B it is A
102:13 - + B so this sum will get printed over
102:16 - here while calling the function you're
102:17 - supposed to provide the A and B value so
102:20 - what we will see simply do is I will
102:21 - simply call this some numbers over here
102:24 - and I will provide the values of A and B
102:27 - so what we had provided we had provided
102:29 - 10 and 20 and then again we had the
102:31 - requirement that is to add the other two
102:33 - numbers which were 50 and 60 so again I
102:36 - will just copy paste this sum numbers
102:38 - function and provide the different
102:41 - values this time and then again I will
102:43 - copy and paste this once again with some
102:45 - different values so 100 and 200 so as
102:49 - you can see our code has become little
102:51 - bit cleaner instead of having three
102:52 - lines of code in order to add two
102:55 - numbers every time for which our code
102:57 - has also become lengthy we have a very
102:59 - short code and it is very clean as well
103:01 - it is very readable as well so let me
103:03 - just save this file now and try running
103:05 - this code so as you can see we are
103:07 - getting sum of A and B it is 30 sum of A
103:10 - and B it is 110 and sum of A and B it is
103:12 - equal to 300 you can also customize your
103:16 - function in order to have the values of
103:18 - A and B over here so we can simply say
103:21 - over here we have the double codes and
103:24 - then we have comma and then we have a
103:26 - over here and then we have double codes
103:29 - and then we have and keyword double
103:31 - codes and then B value and then comma
103:34 - and then double codes over here before
103:36 - the colon so as you can see A and B
103:38 - values can also be printed so let me
103:40 - just save this file and try running this
103:41 - code now so as you can see 10 and 20
103:44 - were pass first time so it is saying sum
103:46 - of 10 20 it is 30 then sum of 50 and 60
103:49 - it is 110 and then sum of 100 and 200 is
103:51 - 300 you can call this function any
103:54 - number of times with different values in
103:56 - order to get the different sum over here
103:58 - I'll say 200 + 300 again and then let's
104:02 - say I provide 400 and 500 over here let
104:05 - me just save this file ENT I running
104:07 - this code all the sums are getting
104:08 - printed and our code is also very clean
104:11 - over here so guys this is the main
104:12 - functionality of using python functions
104:14 - you can simply have the defined keyword
104:16 - followed by the function name and then
104:18 - this arguments list is option over here
104:21 - you can pass it or if you don't want to
104:23 - pass it there is no need to pass so as
104:25 - you can see over here python function
104:27 - arguments this we have already covered
104:28 - that is in order to pass the argument
104:30 - now one last thing is return statement
104:32 - so guys we have not checked any return
104:35 - statement over here so return is nothing
104:37 - but it will return some value so let's
104:39 - say instead of having the print
104:40 - statement over here we want the print
104:43 - statement outside the function so what
104:45 - we can simply do is we can simply return
104:48 - the expression that is A+ B so so we can
104:51 - have the return keyword over here so it
104:53 - will say return a plus b so simply
104:56 - whatever value were being passed over
104:58 - here that is 10 and 20 it will return
105:00 - the sum that is 10 + 20 it is equal to
105:03 - 30 to this code and over here we should
105:05 - have something in order to catch that
105:07 - value so I'll just remove these lines of
105:09 - code for now and then let's say in order
105:12 - to catch the value I provide the sum
105:14 - variable so this sum variable is
105:16 - assigned the value that is being
105:18 - returned from the sum numbers over here
105:20 - which is equal to the sum of these two
105:22 - numbers and then simply we can have the
105:24 - print statement in order to print the
105:27 - sum value so some variable can be
105:29 - printed so let me just save this file
105:31 - and try running this code now so as you
105:32 - can see 30 is getting printed that's
105:34 - because we have passed 10 and 20 over
105:37 - here also to make it more short what we
105:39 - can do is instead of storing the value
105:41 - inside this variable we can simply have
105:43 - the print statement and inside the print
105:46 - statement we can simply call the sum
105:48 - numbers function so as you can see we
105:50 - have the print statement inside this we
105:51 - are calling the sum numbers 10 and 20 so
105:54 - it will return 10 + 20 it is equal to 30
105:57 - so let me save this file enter I running
105:58 - this code now so 30 is being printed
106:01 - let's say I change the numbers to 20 and
106:03 - 50 over here so 20 + 50 should be 70 let
106:07 - me just run this code so 70 is getting
106:09 - printed and based on the requirement you
106:11 - can format the print function that is
106:13 - you can have any statements being
106:14 - printed over here along with the sum of
106:16 - the numbers so guys this is one of the
106:18 - examples of how you can find the
106:20 - functions and use them you can have any
106:23 - other logic inside the functions that
106:24 - you want to implement based on your
106:26 - requirements so guys practice on your
106:28 - own so that on different inputs you get
106:30 - different output recursion function in
106:32 - Python Programming so guys in Python we
106:35 - know that a function can call other
106:37 - functions as well it is even possible
106:39 - for the function to call itself and when
106:41 - the function call itself it's called
106:44 - recursive function so basically these
106:46 - type of construct are termed as
106:47 - recursive functions whenever a function
106:50 - calls itself from inside its body so for
106:52 - example the factorial of a number is the
106:55 - product of all the integers from one up
106:58 - to that number so if you see the example
107:01 - the factorial of 6 which is denoted as 6
107:04 - and then exclamation mark it is equal to
107:06 - 1 * 2 * 3 * 4 * 5 * 6 which is equal to
107:13 - 720 and this is the factorial of the
107:16 - number that is six so guys we can find
107:18 - the factorial of any number by using the
107:20 - recursive function so let us understand
107:22 - how recursive functions work with the
107:24 - help of example over here so let's say
107:26 - we have the factorial function in this
107:29 - case so factorial is the name and then
107:32 - let's say if we provide the variable
107:34 - name as X over here so what we will do
107:36 - is we will simply have to provide the
107:38 - condition over here that is if x is
107:41 - equal to 1 we have to return one in this
107:43 - case so guys always remember that
107:45 - whenever we are having the recursive
107:47 - function we need to have the end point
107:50 - we need need to have a limit on which we
107:52 - need to return some basic number over
107:54 - here so this is the limit in this case
107:56 - that is when the value of x is equal to
107:59 - 1 that is at the lowest level the
108:01 - function needs to return the value which
108:03 - is one and then if it is not one then we
108:05 - can call that function once again now
108:07 - how do we call that function we simply
108:09 - use the x value that is the current x
108:12 - value and then we multiply that number
108:15 - with the factorial of x - 1 so this time
108:18 - we provide x - one in this casee and one
108:21 - more thing that we can do in order to
108:23 - return this result is we can have the
108:25 - return keyword so guys we will
108:27 - understand this function in detail now
108:30 - before which we will just call this
108:32 - function over here that is factorial and
108:34 - let's say I provide the number that is 6
108:36 - that we have already seen for which the
108:38 - factorial of 6 must be 720 and what we
108:41 - will do is since this factorial function
108:43 - is returning this value that is return X
108:46 - multiplied by this recursive function we
108:48 - will catch the value in the result so
108:51 - result it is equal to factorial of 6 and
108:53 - we will simply have the print statement
108:55 - saying that
108:57 - factorial is and then colon and then we
109:00 - can simply provide result variable over
109:03 - here so let me just save this file and
109:04 - try running this code guys no need to
109:06 - worry over here I will make you
109:08 - understand each and every line of code
109:10 - over here and how it works so just stick
109:12 - with me till the end of this video so as
109:14 - you can see factorial is 720 so this is
109:17 - the result so we have got the correct
109:19 - result over here now let us understand
109:21 - the working of this recursive function
109:23 - so what exactly is happening over here
109:25 - is we have defined the function that is
109:27 - factorial in this case now result is the
109:30 - variable name for which we will get the
109:32 - value from this factorial function that
109:34 - we have called so basically the control
109:36 - statement comes over here factorial of 6
109:38 - so the control statement will go to the
109:40 - definition of this function so x value
109:42 - is 6 right now so what we will do is we
109:45 - will understand over here one step at a
109:47 - time so right now X it is equal to 6 in
109:50 - this case so is x value equal to 1 no in
109:53 - this case so the control flow will come
109:55 - over here and it will check this
109:57 - expression that is x * factorial of x -
110:00 - 1 so this expression we will put over
110:02 - here that is 6 which is the value of x *
110:06 - by factorial of x -1 so x value is 6 so
110:10 - X - 1 will be equal to 5 in this case
110:13 - now what will happen is now factorial of
110:15 - five is being called over here so what
110:17 - is the factorial of five the control
110:19 - flow will go back again to this function
110:21 - and that is why we call it as recursive
110:23 - because from the body of this function
110:25 - we are calling the function itself now
110:28 - this time x value is 5 so is x equal to
110:31 - 1 no in this case so this time again
110:33 - this expression will be called so x
110:35 - value will be five in this case and
110:37 - multiplied by factorial of x - 1 which
110:39 - will be 4 so again next time what will
110:42 - happen is 5 multiplied by factorial of
110:46 - four will be called now what is the
110:47 - factorial of four so again the control
110:49 - flow will come over here it will check
110:51 - whether X is equal to 1 no in this case
110:54 - so again this expression will be
110:56 - computed so this time it will be x = 4 *
111:01 - the factorial of 4 - 1 which is 3 right
111:03 - now and then again now x value is three
111:06 - so again it will be 3 * factorial of 2
111:11 - in this case and then the last statement
111:13 - that is 2 * factorial of 1 in this case
111:17 - now when the factorial of 1 is being
111:19 - called what what will happen is
111:20 - factorial of X which will be factorial
111:23 - of 1 in this case so X is equal to 1 yes
111:26 - in this case so it will return true and
111:28 - the control flow will not go over here
111:30 - to carry out the computation of this
111:32 - expression so return one will return to
111:35 - the factorial of one function so in this
111:37 - case factorial of 1 will become one over
111:40 - here now 2 * 1 is equal to 2 and this
111:43 - result will be returned to this function
111:46 - that was called so 2 * 1 is 2 so two
111:49 - will be return returned over here 3 * 2
111:52 - is 6 so factorial of 3 will become 6 and
111:55 - 6 will be returned over here 6 * by 4 is
111:58 - 24 so factorial of 4 will have 24 as the
112:02 - result and then 24 * 5 which is equal to
112:05 - 120 and that value will be returned to
112:08 - this function called that is 120 and
112:11 - then 120 * 6 will be 720 which is the
112:15 - last expression that was computed and
112:17 - that is what we will get over here that
112:18 - is the result will be 720 in this case
112:21 - and that is what we got 720 over here
112:24 - now guys similarly we have seen that the
112:26 - factorial of 4 is equal to 24 so this
112:29 - result we can get simply by calling the
112:31 - factorial function with the value four
112:34 - as the argument so let me just save this
112:35 - file enter I running this code so as you
112:38 - can see factorial is 24 similarly we can
112:41 - get the factorial of three which is
112:43 - equal to 6 so we can simply put three
112:46 - over here and then let me just save this
112:48 - file and try running this code so
112:49 - factorial is six in this case and guys
112:52 - that is how the recursive function works
112:54 - this is just one example that is in
112:55 - order to find the factorial we can have
112:57 - any kind of implementation code based on
113:00 - your requirements provided the
113:01 - requirement can be fulfilled by using
113:03 - the recursive functions if we see one
113:05 - more example let's say we want to find
113:07 - the factorial of the number that is 10
113:09 - let me just run this code once again so
113:11 - it says
113:13 - 36280 and that is what we get as the
113:16 - factorial of 10 comment in the comment
113:18 - section below whether this result is
113:19 - correct or not so guys please practice
113:21 - on your own so that on different inputs
113:23 - you get different output and that is how
113:25 - you are going to learn more about Python
113:27 - Programming so guys there are certain
113:28 - advantages and disadvantages of
113:30 - recursive function as you can see
113:32 - recursive functions make the code look
113:34 - clean and elegant so we have made the
113:36 - code very clean and elegant over here a
113:38 - complex task can be broken down into
113:41 - simpler sub problems using recursion so
113:43 - we can have any number that is 100 or
113:45 - 200 and get the factorial of that number
113:48 - just by using these lines of code over
113:50 - here and then sequence generation is
113:53 - easier with recursion than using some
113:55 - nested iteration now what are the
113:57 - disadvantages sometimes the logic behind
113:59 - recursion is hard to follow through so
114:01 - basically as you have seen as I have
114:03 - told you that there must be some end
114:04 - point that you need to provide so
114:06 - basically this is the end point in this
114:08 - factorial function based on your
114:10 - requirements there must be some end
114:12 - point up to which you need to restrict
114:15 - the call of the function from its body
114:17 - itself so that condition you need to
114:19 - ident identify based on the requirement
114:21 - and recursive calls are expensive they
114:23 - are inefficient as they take up a lot of
114:25 - memory and time and the recursive
114:27 - functions are hard to debug so guys
114:29 - basically these are certain
114:30 - disadvantages so it depends on your
114:32 - requirements what exactly you want to
114:34 - implement and accordingly you can use
114:36 - the recursive functions Anonymous or
114:38 - Lambda function in Python Programming so
114:41 - guys in Python an anonymous or Lambda
114:43 - function is a special type of function
114:45 - without the function name so we use the
114:48 - Lambda keyword in instead of DF that is
114:51 - defined to create a Lambda function so
114:54 - as you can see this is the syntax
114:55 - previously we had used the DF keyword in
114:58 - order to create the normal functions but
115:00 - this time we are going to use the
115:02 - keyword that is Lambda along with the
115:04 - arguments which are optional over here
115:06 - and then followed by a colon and then we
115:08 - have the expression so this is one of
115:10 - the examples of the Lambda function over
115:12 - here we have the Lambda keyword followed
115:15 - by the colon over here and then we have
115:17 - the expression that is we are printing
115:19 - the hello world string and this entire
115:22 - function that is the anonymous function
115:24 - which is not having any name over here
115:26 - is being assigned to a variable that is
115:28 - greed and then this greed needs to be
115:31 - called as you can see call the Lambda
115:33 - over here along with the open and close
115:35 - parentheses so when we have this line of
115:37 - code over here this Lambda function will
115:39 - be called and hello world will be
115:41 - printed on the screen so guys let us
115:43 - check this with the help of example over
115:44 - here so what we will do is simply we
115:46 - will have the Lambda keyword first of
115:49 - all and Then followed by a colon and
115:51 - then let's say we want to print the name
115:53 - of this YouTube channel that is
115:55 - programming for beginners which you
115:56 - should definitely subscribe if you have
115:58 - not done so so we have programming for
116:01 - beginners over here so this is a Lambda
116:04 - function or the anonymous function
116:06 - without having any name and then let's
116:08 - say we assign it to a variable and we
116:10 - can simply provide the variable name as
116:12 - Str Str and then we have the equal to
116:15 - operator over here now what we have to
116:17 - do is simply we need to call this St Str
116:19 - variable so over here on the new line we
116:22 - will have S Str followed by open and
116:24 - close parenthesis and this is the way
116:26 - that we call the anonymous function so
116:28 - let me just save this file and try
116:29 - running this code
116:31 - now so as you can see programming for
116:34 - beginners is getting printed over here
116:36 - and this is one of the simple examples
116:38 - as far as Anonymous function or Lambda
116:40 - function is concerned in Python
116:42 - Programming now guys very important
116:44 - thing what if you have certain arguments
116:46 - which you want to print so this is kind
116:48 - of a static function which which is
116:49 - having a fixed string that you want to
116:51 - print but let's say you want to provide
116:53 - some string over here while calling the
116:55 - function so in case let's say we have
116:58 - this argument as this is a string that
117:02 - we want to print so this Str Str that is
117:05 - the Lambda function is being called but
117:07 - this value needs to be caught by this
117:09 - Lambda function over here so what we can
117:11 - simply do is we can take this argument
117:14 - after this Lambda keyword as we have
117:16 - seen in this syntax after the Lambda
117:18 - keyword we have the list of arguments
117:20 - that we can take and use them in the
117:22 - form of Expressions over here so what we
117:24 - will do is let's say I provide Lambda
117:26 - and Then followed by X so this x
117:28 - variable will have this value whatever
117:30 - we pass while we are calling this Str
117:32 - Str function that is the anonymous
117:34 - function so this x we can use in our
117:37 - expression inside this Lambda function
117:38 - so let's say I provide a label over here
117:41 - string pass and Then followed by colon
117:45 - and then I have comma and Then followed
117:47 - by this x variable which is being passed
117:49 - so so this is a string it is one of the
117:51 - arguments that we are passing to the
117:53 - Lambda expression and the X variable
117:55 - will be assigned to this value and it
117:57 - will be printed by using this print
117:59 - statement so let me just save this file
118:01 - and try running this code now so as you
118:03 - can see string passed this label is
118:05 - getting printed and then the value of x
118:07 - which was passed from this calling of
118:10 - the Lambda function over here that is
118:12 - this is a string and the same thing is
118:14 - getting printed over here so guys this
118:16 - is the way that we can pass arguments or
118:18 - parameters to Lambda or Anonymous
118:21 - functions over here now guys there is
118:22 - another variation can we have the
118:24 - multiple arguments let's say we have two
118:26 - or more numbers for which we need to
118:28 - find the sum of those numbers can we
118:30 - find the sum of those numbers by using
118:32 - the Lambda function so let us quickly
118:34 - check this with the help of examples
118:36 - over here so what we will do is again we
118:38 - will Define the Lambda function over
118:40 - here so we have Lambda keyword and this
118:42 - time we will take two numbers so let's
118:44 - say the two numbers are stored in these
118:46 - variables that is X and Y and Then
118:48 - followed by a colon and then what we can
118:50 - do is simply we can print the sum of
118:52 - these two numbers so we put x + y over
118:55 - here so this is the expression print x +
118:58 - y and over here in the Lambda we have
119:00 - defined the two variables over here now
119:02 - what we can do is we can assign it to
119:04 - another variable so let's say we have
119:06 - addore numbers as the variable name so
119:09 - we have addore numbers and then Lambda
119:12 - keyword followed by these two variables
119:14 - that is X and Y and then print x + y
119:17 - over here so what we can simply do is we
119:19 - can call this add numbers and provide
119:22 - the two numbers that we want to add so
119:24 - we just use this add numbers over here
119:27 - and then let's say the two numbers that
119:28 - we provide is 10 and 20 so we are
119:30 - expecting the sum that is 10 + 20 to be
119:33 - displayed by using this expression over
119:35 - here so let me just save this file and
119:37 - try running this code now so as you can
119:40 - see we are getting some syntax error
119:42 - Lambda expression parameters cannot be
119:44 - parenthesized so what we can do is we
119:46 - can simply remove these parenthesis that
119:48 - we have provided so when we are
119:50 - providing multiple arguments in the
119:51 - Lambda function we need not have to
119:53 - provide the parenthesis we can separate
119:55 - them using the commas over here so let
119:57 - me just save this file and try running
119:59 - this code so as you can see 30 is
120:01 - getting displayed we can format this
120:02 - string and have some label as well so
120:04 - what we can do is we have the double
120:06 - codes over here and we say sum of
120:10 - numbers and then colon and then comma X+
120:13 - y so let me just save this file and try
120:15 - running this code now as you can see sum
120:17 - of numbers that is 30 is getting this
120:19 - played another way that we can print the
120:21 - sum of these numbers is just by
120:22 - returning the sum of these numbers and
120:24 - printing them over here outside the
120:26 - Lambda function so while returning any
120:28 - of the Expressions we need not have to
120:30 - have the return keyword we can simply
120:32 - have the expression over here so as you
120:34 - can see the two numbers were passed that
120:36 - is 10 and 20 it will be taken by this
120:38 - Lambda function in the form of X and Y X
120:41 - + Y will be computed and then it will be
120:44 - returned to this function which was
120:45 - called by using the add numbers now we
120:48 - can simply print this so we can have the
120:50 - print function over here and inside the
120:52 - print function we call the add numbers
120:54 - with these two numbers let's say this
120:56 - time we provide some other numbers that
120:58 - is 100 and let's say 150 so the sum
121:01 - should be 100 + 150 which should be 250
121:03 - over here let me just save this file and
121:05 - try running this code now so as you can
121:07 - see 250 is getting printed and again we
121:09 - can have some labels over here in order
121:11 - to Define exactly what this function is
121:14 - doing so guys practice on your own so
121:15 - that on different inputs you get
121:17 - different output this Lambda function
121:19 - comes very important which is also
121:20 - called Anonymous function when you don't
121:22 - want to define the function explicitly
121:24 - and you have very less number of
121:26 - operations to be carried out by using
121:28 - this Anonymous function so modules in
121:30 - Python Programming so guys as our
121:32 - program grows bigger it may contain many
121:35 - lines of code so instead of putting
121:37 - everything in a single file as we have
121:39 - done so far we can use modules to
121:41 - separate codes in separate files as per
121:44 - their functionality so basically we can
121:46 - separate the codes and we can create
121:48 - separate files based on the
121:50 - functionality of the file that we are
121:51 - going to create so this will make our
121:53 - code organized and easier to maintain
121:56 - now a module is a file that contains
121:59 - code to perform a specific task so like
122:01 - let's say if we want to add two numbers
122:04 - we can have a function inside another
122:06 - file and we can call it as a module so a
122:09 - module may contain variables functions
122:11 - classes and many other things so as you
122:14 - can see over here for example there's a
122:16 - python module that is addition what we
122:18 - have done is we have defined a function
122:20 - over here so we have the add that is the
122:22 - function name which takes two parameters
122:24 - A and B so A + B which is the sum of
122:27 - these two variables will be stored in
122:29 - the result variable and this result
122:31 - variable is returned with the help of
122:33 - this return statement so guys this is
122:35 - one of the functions which can be
122:36 - present inside one module which is
122:38 - created as a separate file so guys let
122:40 - us check this with the help of example
122:42 - how we can create the module so
122:43 - basically when we go over here in the
122:45 - Explorer as we have seen previously we
122:48 - were using python thore code file in
122:50 - order to create all our programs but
122:52 - what if we want to create another file
122:55 - and have a function inside that file so
122:57 - we can come over here we can create a
122:59 - new file and let's say we want to name
123:01 - it as addition and Then followed by py
123:05 - which is the extension of the Python
123:06 - programming language so as you can see
123:08 - we have created this addition. py which
123:11 - is another python file over here so what
123:13 - we will do is let's say we have a
123:14 - function over here so Define add which
123:17 - takes two parameters that is a and b and
123:20 - then after colon what we will do is we
123:22 - will have the result variable which will
123:24 - have the addition of these two numbers
123:26 - that is a and b which will be passed
123:28 - over here and then we are going to
123:30 - return this result so return result so
123:33 - basically this function is going to take
123:35 - two values that is in the form of a and
123:37 - b and return the sum of these two values
123:40 - now this code is being return in another
123:42 - file that is addition. py so how do we
123:44 - call it from the main file that is
123:46 - python code over here so what I I will
123:49 - do is first of all we are going to save
123:50 - this file over here and switch back to
123:52 - our main file over here that is Python
123:55 - code. py and what I will do is over here
123:58 - we are going to import this module so
124:00 - this python file that we have created
124:03 - right now this is kind of a module so
124:05 - how do we import that module we are
124:07 - going to use the import keyword followed
124:10 - by the name of that module so the name
124:12 - of the module is the file name itself so
124:14 - we are going to provide addition so as
124:16 - you can see vs code is providing us this
124:18 - addition value over here which is part
124:20 - of the autocomplete feature of this
124:22 - editor so we are going to select this
124:24 - now what we can do is we can call this
124:26 - add function since we have already
124:28 - imported this module over here so simply
124:30 - what we will have to do is we are going
124:32 - to use this module name that is addition
124:35 - followed by Dot and then as you can see
124:37 - we have this add method and there will
124:39 - be many other methods that will be
124:40 - present which will come by default
124:42 - whenever we are going to create new
124:44 - python files in this way so basically we
124:46 - are interested in using this ad method
124:49 - so when we select this and then we have
124:50 - to provide the two values so what we
124:52 - will do is we will say 10 comma 20 now
124:55 - guys what is happening is this add
124:57 - function it is going to take two values
124:59 - that we have already passed and it is
125:01 - going to return the result so we are
125:03 - supposed to take that result in another
125:04 - variable over here so let's say we
125:06 - provide sum as the variable name which
125:08 - is going to take the return from this
125:10 - add function over here which will be the
125:12 - sum of these two numbers and then we can
125:14 - simply print the value of the sum
125:16 - variable so over here we will says sum
125:19 - of numbers followed by colon and then
125:22 - comma we have the sum variable name so
125:25 - guys let me just save this file now and
125:26 - try running this code so as you can see
125:29 - sum of numbers it is 30 right now so
125:32 - basically what we have done is we have
125:33 - created a module which is the user
125:35 - defined module over here and then we
125:37 - have created a new function inside that
125:39 - module which is going to take two values
125:42 - in the form of a and b and it is going
125:44 - to return the sum of these two values
125:46 - and then what we have done is we have
125:48 - imported that module that is addition
125:51 - and called the function that is the add
125:53 - function which is going to take two
125:55 - values as we had defined in the addition
125:57 - module and the sum will be stored in
125:59 - this sum variable over here and we have
126:00 - printed that sum variable so this is the
126:02 - classic example of a user defined module
126:05 - over here similarly there are multiple
126:07 - modules which are built in inside the
126:10 - Python programming language so as you
126:12 - can see there are certain important
126:13 - notes over here python has tons of
126:15 - standard modules so for now we have just
126:17 - seen the user module right now we are
126:20 - also going to take the example of a
126:21 - standard module now the standard modules
126:24 - can be imported the same way as we
126:26 - import our user defined modules so let
126:28 - us take the example of a standard module
126:31 - in this case we will take the example
126:32 - with the math Library module so what we
126:35 - will do is we will remove these lines of
126:36 - code over here and then we can simply
126:39 - import the math Library so as you can
126:41 - see over here once we put the M
126:43 - character as you can see these all are
126:45 - modules that are built in inside the
126:47 - Python programming language we are
126:48 - interested in this math Library over
126:50 - here so when we import math and then we
126:53 - can use the math Library over here and
126:56 - then follow by dot we can see many other
126:58 - functions and variables that are already
127:00 - present the thing that we are interested
127:02 - in is the pi value so as you can see we
127:04 - can get the pi value which is
127:06 - approximately equal to 3.14 and the same
127:09 - thing we can get from the math library
127:11 - and by using the pi variable over here
127:13 - so what we can do is let's say we
127:15 - provide the variable name as value and
127:17 - math do Y is the value that we want to
127:20 - store in this value variable and we can
127:22 - simply provide the print statement and
127:25 - then we can say by value is followed by
127:29 - colon and then we can simply put the
127:31 - value that is the variable name so guys
127:33 - what is exactly happening over here is
127:35 - we are importing the math Library which
127:38 - is the built-in Library over here which
127:39 - is a built-in module inside the Python
127:41 - programming language and then inside
127:43 - that we have certain variables and
127:45 - functions as well one of the variables
127:47 - is pi which is having a value and that
127:50 - value we are getting by using this math.
127:53 - Pi statement and then we are assigning
127:55 - it to this user defined variable that is
127:57 - value and the same thing we are printing
127:59 - over here with this particular string
128:01 - that is pi value is followed by colon
128:03 - and then the value variable over here
128:06 - let me just save this file and try
128:07 - running this code now so as you can see
128:09 - pi value is we can see this
128:12 - 3.141592 and so on it is a huge number
128:15 - after the decimal point so guys this is
128:17 - another way in order order to use the
128:19 - standard modules that are already
128:21 - present in the Python programming
128:23 - language next we are going to see how do
128:25 - we use the python import with renaming
128:28 - so far we have imported the libraries
128:30 - and used the names of those libraries or
128:32 - modules along with the function name or
128:34 - the variable name but what we can do is
128:36 - we can rename these libraries while
128:38 - importing them so after this import math
128:41 - we have to use the S keyword followed by
128:44 - m so guys this is nothing but it is a
128:46 - shorthand method that we can use in
128:48 - order to name this library right now so
128:51 - instead of typing this math Library over
128:53 - here we can simply use the M character
128:55 - over here because that is what we have
128:57 - defined that is import math as M so we
128:59 - can use M everywhere wherever we are
129:01 - going to use the math so let me just
129:03 - save this file now and try running this
129:05 - code we will see the same output that is
129:07 - pi value is
129:09 - 3.1415 and so on so guys the idea over
129:11 - here is you need not have to type the
129:14 - entire name of the module in this case
129:16 - whenever you are going to refer to a
129:17 - particular method or a function or a
129:20 - variable inside the module but you can
129:22 - use that simple one character or the two
129:25 - characters that you have used while
129:27 - importing the module now guys there is
129:29 - another way python from and then import
129:32 - statement so over here what we can do is
129:34 - let's say if we only want to use the pi
129:36 - variable in this case so exactly what we
129:39 - are doing is we are importing all the
129:41 - methods that is the functions as well as
129:43 - the variables but let's say if we only
129:45 - want the pi variable so what we can
129:47 - simply do is is we can use the from and
129:50 - then we can use the module name that is
129:52 - math and then we can simply import the
129:54 - variable so import and pi over here so
129:57 - as you can see we can use this statement
130:00 - as well that is from followed by the
130:01 - module name and then import and then
130:04 - what exactly we want to import we can
130:06 - just mention that and then after this we
130:08 - can simply use the pi variable name in
130:11 - order to assign it to another variable
130:13 - name or over here we can simply put pi
130:15 - as well so we can simply put Pi in the
130:18 - print statement also so let me just save
130:20 - this file and try running this code as
130:22 - you can see we are getting the same
130:23 - output that is pi value is so and so so
130:25 - basically in order to get the specific
130:28 - variable or the method we can use this
130:30 - statement that is by using the from
130:32 - followed by the module name and then we
130:34 - have the import keyword and then the
130:36 - name of that specific variable or the
130:38 - method now guys one last thing as far as
130:40 - python modules are concerned there is a
130:42 - buil-in function that is D which is
130:45 - directory it is a built-in function in
130:47 - Python in order to get all the variables
130:49 - and the function names inside the module
130:52 - so let's say I provide import math over
130:55 - here so we have import math and then
130:58 - what we can do is we can simply get the
131:00 - directory in this case we simply have to
131:02 - provide the DI function and Then
131:04 - followed by open and close parenthesis
131:06 - and let's say we provide the math
131:08 - Library over here inside the DI function
131:10 - so let me just save this file ENT I
131:12 - running this code now so guys nothing is
131:14 - happening over here that's because we
131:16 - have not provided the print statement so
131:18 - probably we'll provide the print
131:19 - statement and enclose the statement
131:21 - inside the print function let me just
131:23 - save this file and try running this code
131:24 - now as you can see we are getting the
131:26 - list of all the methods and the
131:28 - variables that are present inside the
131:30 - math Library so guys this is a very huge
131:32 - list over here as you can see we have A1
131:35 - then a12 a 10 H and then so on we are
131:38 - getting all the method names we are also
131:40 - getting the variables as you can see we
131:42 - are having pi over here and so on guys
131:44 - similarly what we can do is let's say I
131:46 - import this addition module which is is
131:48 - a user defined module that we have
131:49 - already seen so I import this addition
131:52 - module and inside of this math I provide
131:55 - this addition module name so let me save
131:58 - this file so one of the methods that is
132:00 - present is ADD over here so this should
132:02 - be listed now so I'll just run this code
132:04 - now over here so as you can see add
132:07 - method is getting displayed apart from
132:09 - that there are many other built-in
132:11 - variable names at are present which gets
132:13 - generated whenever we create new modules
132:15 - over here so guys this di function can
132:17 - be useful in order to check which are
132:20 - the different variables and functions
132:22 - are present inside that module that we
132:24 - have already defined or if it is a
132:26 - buil-in module that is provided by the
132:28 - Python programming language random
132:30 - module in Python Programming so guys
132:32 - python offers the random module to
132:34 - Generate random numbers or to pick a
132:37 - random item from an iterator so we are
132:39 - going to check this with the help of
132:41 - examples now over here so first of all
132:43 - we are supposed to import the random
132:45 - module in this way and then as you can
132:47 - see we are print a random range over
132:49 - here we are using the random module
132:51 - followed by the dot operator and then we
132:53 - are using the Rand range function in
132:56 - order to find the random range over here
132:58 - so let us move to the vs code over here
133:00 - in order to check the examples so first
133:03 - of all we will be importing the random
133:05 - module so we have import followed by
133:07 - random over here next let's say I want
133:10 - to print the random range so what we
133:12 - will do is we will have the print
133:13 - function and inside that we will be
133:15 - using the random module that we have
133:18 - just imported followed by Dot and as you
133:20 - can see vs code is suggesting us many
133:22 - other variables and the method names as
133:25 - well that we can use so we are going to
133:27 - say random range over here and the range
133:30 - it should be between 10 and 20 so we
133:33 - provide 10 comma 20 s the range so let
133:36 - me just save this file now and try
133:37 - running this code so as you can see we
133:39 - are getting 12 over here which is the
133:41 - part of this random range that is 10 and
133:43 - 20 let's say we want the number to be
133:45 - between 100 and 200 over here here so
133:48 - let me save this file and try running
133:49 - this code now after making changes as
133:52 - you can see we are getting the 178
133:54 - similarly let's say if you want to throw
133:56 - the dice and only numbers that are
133:57 - present on the dice is between 1 to six
134:00 - so you can use this random range
134:02 - function inside the random module and
134:04 - provide 1 comma 6s the number in order
134:07 - to get the number so as you can see we
134:09 - are getting four over here next time
134:10 - when we run this and then we are getting
134:12 - two over here so you can use this
134:14 - function in order to develop your next
134:17 - game as far as throwing a dice is
134:19 - concerned now similarly we can also have
134:21 - the list as you can see we have the list
134:23 - one and then we have five characters
134:25 - over here let's say out of these
134:26 - characters we want to select one of the
134:28 - characters so you can use the choice
134:31 - function inside the random module so let
134:33 - us check this with the help of example
134:34 - now over here so let's say we have the
134:36 - list of the programming languages so we
134:39 - name it as the list one as the variable
134:42 - name and then what are the programming
134:43 - languages so one is Python and then
134:46 - let's say we have Java as another
134:48 - programming language then let's say we
134:51 - have C++ and then let's say we have
134:53 - Swift as another programming language so
134:56 - these are certain programming languages
134:58 - now let's say out of all these four
134:59 - values we want to select one of the
135:02 - values randomly so what we can do is we
135:04 - can have the print function and then we
135:06 - can use this random module name followed
135:09 - by Dot and then we have the choice
135:11 - function name and inside this function
135:14 - we have to provide the list variable so
135:16 - we provide list one over here so
135:18 - basically we are passing this list one
135:20 - to this Choice function and asking the
135:23 - choice function to select one of the
135:25 - values from this list of values so let
135:27 - me just save this file and try running
135:29 - this code now so as you can see we are
135:30 - getting the Swift value as the random
135:32 - value if we run this code once again we
135:34 - will get some different value so as you
135:37 - can see we are getting Java this time
135:38 - then we run again we are getting python
135:40 - this time and then if we run again we
135:42 - are again getting Java so every time we
135:44 - will get a different value whenever we
135:46 - are using this particular function now
135:48 - let's say we want to print this list so
135:50 - what we will do is I'll just remove this
135:52 - part of the print statement and I'll
135:54 - simply provide a list one that is the
135:56 - variable name for that list let me just
135:58 - save this file enter I running this code
136:00 - now so as you can see we are getting
136:01 - this list of values now before this what
136:04 - we can do is we are saying original list
136:07 - over here as the label so we say
136:09 - original list now exactly what we want
136:11 - to do is we want to shuffle this list
136:14 - let's say this sequence of data that we
136:16 - have inside the list we want want to
136:18 - shuffle it so what we can do is simply
136:20 - we can use the random module name over
136:23 - here followed by Dot and it also has
136:25 - something called as Shuffle function so
136:27 - this will help us in order to shuffle
136:29 - all the values of this list that we
136:31 - provide so Shuffle followed by inside
136:34 - the open and close parenthesis we
136:36 - provide the list one variable name and
136:38 - then after that what we can do is we can
136:41 - simply print this list content once
136:43 - again and then we can simply put
136:45 - shuffled list over here instead of of
136:47 - original list so before shuffling we are
136:49 - printing the original list over here
136:51 - which will print the values in this
136:53 - sequence and then after shuffling it
136:55 - will print the shuffled list over here
136:57 - where the values will be shuffled in
136:59 - this case so let me just save this file
137:01 - and try running this code now as you can
137:02 - see original list we are getting python
137:05 - Java C++ and Swift and then shuffled
137:07 - list it is Java Swift C++ and then
137:10 - python so we have just shuffled the list
137:12 - the values were completely shuffled
137:14 - inside the list and were printed on the
137:16 - screen now guys let's say very randomly
137:18 - you want to generate some kind of
137:21 - element so what you can do is simply
137:22 - have the print statement over here and
137:24 - simply use the random module in this
137:27 - case so I'll just remove this part of
137:29 - this line and then we can have the
137:32 - random followed by dot we have something
137:34 - called as random function over here this
137:37 - line of code will generate any element
137:39 - over here so let me just save this file
137:40 - and try running this code so as you can
137:42 - see we are getting a float number
137:45 - 0.104 and so on and then let me just run
137:48 - this code once again as you can see we
137:49 - are getting another number over here and
137:52 - then let me just run this code 0.99 so
137:55 - this line of code is helping us in order
137:57 - to generate the random numbers over here
137:59 - in this case so guys this is the way
138:01 - that you can use random module over here
138:03 - in this case in order to randomly
138:05 - generate some numbers or randomly
138:07 - Shuffle the values inside the list that
138:09 - is present list in Python Programming so
138:12 - guys a list is a collection of similar
138:14 - or different types of data so for
138:17 - example suppose we need to record the
138:19 - age of five students so instead of
138:21 - creating five separate variables we can
138:24 - simply create a list so as you can see
138:26 - this is the way that we create the list
138:28 - first of all on the left hand side we
138:30 - have the variable name and then on the
138:32 - right hand side inside the open and
138:34 - close square brackets we have the list
138:36 - of elements which are separated using
138:38 - the commas so I'll just copy this line
138:41 - of code over here and then let us move
138:43 - to the vs code and paste this so as you
138:45 - can see on the left hand side it is the
138:47 - variable table name of the list and on
138:48 - the right hand side we have the age of
138:51 - all the students over here and simply we
138:53 - can print the list by using the print
138:56 - function after this we can provide the
138:58 - variable name that is list so let me
139:00 - just save this file andent I running
139:01 - this code now as you can see we are
139:03 - getting the list of all the elements in
139:05 - the sequence that we had provided over
139:07 - here it is very important that all these
139:10 - elements are separated using the commas
139:12 - over here now guys the list can have the
139:14 - same kind of elements that is this one
139:16 - is having the list of integers data type
139:19 - only but we can also have the string as
139:22 - well in between so let's say we have a
139:24 - string called John over here in between
139:27 - this list of elements so this is also
139:30 - possible it will not throw any errors
139:32 - while we are running this code so let me
139:34 - just save this file and try running this
139:35 - code now as you can see we are getting
139:37 - the list of all the values 17 18 and
139:40 - then we are getting John and then 19 and
139:42 - then 14 so this is a kind of a
139:44 - heterogeneous list whereas when we have
139:47 - the same kind of data type in the list
139:49 - then it is called the homogeneous list
139:51 - now how do we access the python list
139:53 - element so basically this is one way in
139:55 - order to access the list but what if we
139:58 - want to access only a single element by
140:00 - using this print statement we have
140:02 - accessed all the elements over here but
140:04 - in case we want to access a particular
140:07 - element from this list then what we can
140:09 - do is in Python each item in a list is
140:12 - associated with a number so the number
140:14 - is known as a list index so basically
140:16 - all the these numbers that is the
140:18 - elements of the list that are present
140:20 - inside the list so these are associated
140:23 - with the indices which starts from zero
140:25 - so the 17 number is at the zeroth index
140:28 - 18 number is at the first index and so
140:31 - on this is at the second index third
140:33 - index and then so on so basically these
140:35 - elements can be accessed using these
140:38 - indices so as you can see we can access
140:40 - elements of an array using the index
140:42 - number now how do we access them so what
140:44 - we can do is we simply come over here
140:46 - I'll simply simply change this to the
140:48 - number 15 that was there previously and
140:51 - what we have to do is let's say I want
140:52 - to access this element that is the
140:54 - fourth element so what will be the index
140:56 - so this is zeroth index then we have one
140:59 - and then two and then three so this is
141:00 - the third index so we can access by
141:03 - using the variable name followed by open
141:05 - and close square brackets and inside
141:08 - those brackets we have to provide the
141:09 - index number that is three in this case
141:12 - which represents this number that is 19
141:14 - so let me save this file and try running
141:16 - this code now as you can see we are just
141:18 - getting 19 over here previously we were
141:20 - getting the entire list when we don't
141:22 - provide this index number I'll save this
141:24 - file so as you can see all the values
141:26 - are getting printed but when we provide
141:28 - the index number let's say I want to
141:30 - print 18 this time which is at the index
141:32 - one after this index which is zero so I
141:35 - provide list of one over here save this
141:37 - file and run this code so as you can see
141:39 - 18 is getting displayed and this is how
141:42 - it is one way in order to access a
141:44 - particular single element inside this
141:46 - list by using the index number now it is
141:49 - also possible that we provide the
141:51 - negative index in Python so python
141:53 - allows negative indexing for its
141:55 - sequences the index of minus1 refers to
141:58 - the last item minus 2 to the second last
142:01 - item and so on so for now we know that
142:03 - the zero index is the first element over
142:06 - here and then the first index is the
142:07 - second element but what about the last
142:10 - element let's say we don't know the
142:12 - length of the list like how many
142:13 - elements are present inside the list and
142:15 - we want to get the last element over
142:17 - here so since the first element is at
142:20 - the zero index the previous index that
142:22 - is before 0 which is minus1 it will
142:25 - point to the last index of this list
142:28 - that is 14 over here so what if we
142:30 - simply do list of minus one in this case
142:33 - so I'll just provide minus one in this
142:36 - case let me save this file and try
142:38 - running this code as you can see we are
142:39 - getting 14 so basically the minus1 index
142:42 - will point to the last element of the
142:45 - list in this case let's say we want want
142:47 - to get the second last element so in
142:49 - this case we will simply provide min-2
142:52 - so after minus1 we are having min-2
142:54 - which will be the previous element of
142:55 - the last element so let me just save
142:57 - this file and try running this code now
142:59 - so as you can see 19 is getting
143:01 - displayed now and this is the way that
143:03 - we can also use the negative indexing as
143:05 - far as accessing the last elements of
143:07 - the list are concerned now there is
143:09 - another concept of slicing in Python
143:11 - list so in Python it is possible to
143:14 - access a section of items from the list
143:16 - using using the slicing operator which
143:19 - is nothing but a colon not just a single
143:22 - item so let's say we want to access the
143:24 - second and third elements inside the
143:26 - list so we have to use the slicing
143:28 - operator in this case now what is the
143:30 - slicing operator while providing the
143:32 - indices inside the open and close
143:34 - brackets we have to provide the indexes
143:36 - and separate them using the colon so
143:39 - what is the index of the second element
143:40 - it is one over here since the first
143:42 - element is having the zeroth index we
143:44 - don't want that we want to start from
143:46 - the first index and then we also want
143:48 - the second index so this time we have to
143:51 - provide the next number that is at the
143:53 - third index now so after this one that
143:55 - is the first index we have to provide
143:58 - colon and then we provide three over
144:00 - here so three is not included in this
144:02 - case please remember that whenever you
144:04 - are providing the ending index that
144:06 - element will not be included whenever
144:08 - you are using the slicing operator over
144:10 - here so the elements that will be
144:12 - considered in this case will be at the
144:14 - index one and at the index 2 which means
144:16 - 18 and 15 so let me save this file and
144:18 - try running this code now as you can see
144:20 - we are getting 18 and 15 only let's say
144:23 - you want to get all the elements
144:25 - starting from this 18 so this index is
144:28 - 18 right now and there is no end index
144:30 - that you want to specify over here so we
144:33 - simply have to remove this three and
144:35 - then we can simply specify one followed
144:37 - by the colon so this will make python
144:39 - interpretor to consider all the elements
144:42 - after the first element including the
144:44 - first element itself so let me just save
144:46 - this file now and try running this code
144:48 - so as you can see we are getting all the
144:49 - elements that is 18 15 19 and 14
144:52 - starting from the first index over here
144:55 - so guys this is the way that we can use
144:56 - slicing in the python list also in order
144:59 - to consider all the list elements over
145:01 - here we need not have to specify any of
145:03 - the indexes if we simply provide the
145:05 - colon over here all the elements will be
145:07 - considered let me just save this file
145:09 - and try running this code now so as you
145:11 - can see all the elements are getting
145:12 - considered but this thing is kind of a
145:14 - redundant over here that's because if
145:16 - it's simp we provide the variable name
145:18 - that is list still all the elements will
145:20 - be considered so if we run this code
145:22 - once again so all the elements are being
145:24 - considered over here only when you want
145:26 - to consider the subset of this list you
145:28 - have to use the slicing inside the
145:30 - python list now let us move to the next
145:32 - concept how do we add the elements to a
145:35 - python list so there are two ways to add
145:37 - the elements in the python list the
145:39 - first way is to use the upend function
145:41 - which will help us in order to add a
145:43 - single item in the list and the second
145:45 - way is to use the extend end function in
145:47 - order to add another list to the already
145:50 - existing list so let us check this with
145:52 - the help of examples now over here let's
145:54 - say we already have this list of values
145:56 - inside the list variable and now we want
145:58 - to add more elements so what we will do
146:00 - is we will say list followed by Dot and
146:03 - then we have something called as append
146:04 - so this is a function which will take a
146:06 - single element and it will add to the
146:08 - end of this list so let's say I want to
146:11 - provide 25 as the age of another student
146:14 - so let me just save this file now and
146:16 - try running this code so as you can see
146:18 - this element that is 25 it is already
146:20 - added at the end of the list now and in
146:23 - this way we can use the upend function
146:25 - to add more elements inside the list now
146:28 - let's say we have another list over here
146:30 - let's say I provide a list one and the
146:32 - numbers I provide is 1 comma 2 comma 3
146:34 - over here so three elements are there
146:36 - and we want to add all these elements to
146:38 - the original list that is list variable
146:41 - so what we can do is we can use the
146:43 - extend function in this case so we have
146:44 - to use this list variable which is the
146:46 - original list variable followed by Dot
146:49 - and then we have the extend function and
146:51 - inside the parenthesis we have to
146:53 - provide this argument that is list one
146:56 - which is another variable having the
146:57 - list of elements and now if we print
147:00 - this list it will have the updated list
147:02 - of values so let me just save this file
147:04 - and try running this code now so as you
147:06 - can see after this 14 1 2 3 elements are
147:09 - also getting added over here since we
147:11 - have used the extend function in this
147:13 - case let us move to another section can
147:15 - we change the list items so basically
147:18 - the python list are mutable meaning list
147:20 - are changeable and we can change items
147:23 - of a list by assigning new values using
147:25 - equal to operator so what I will do over
147:28 - here is I'll just remove these lines of
147:29 - code so I'll simply provide the original
147:32 - list over here so we will say
147:35 - original list followed by colon and then
147:38 - we will print the list so let me just
147:39 - save this file Andy running this code
147:41 - now we have the original list over here
147:43 - I'll just spell this correctly so we
147:46 - have the or Or List 17 18 15 19 and then
147:49 - 14 now let's say at the third position
147:51 - that is 15 we want to change this
147:53 - element to 10 now this is being referred
147:56 - to the second index over here so this is
147:58 - zero index then one and then second
148:00 - index so what we have to do is simply we
148:02 - have to provide list followed by inside
148:05 - the square brackets we will provide the
148:07 - index number that is two and then equal
148:09 - to the new value that is 10 that we want
148:11 - to replace it with and then again what
148:13 - we will do is I'll simply copy this line
148:15 - of code and paste this over here and
148:17 - then we will say updated list and let me
148:21 - just save this file now and try running
148:22 - this code so basically as you can see
148:24 - original list it is having 15 at the
148:27 - third position over here that is at the
148:28 - second index and the updated list is
148:31 - having the number 10 at the same second
148:33 - index over here and this is the way that
148:35 - we can update the list elements so since
148:37 - python list are mutable we can change
148:39 - the elements of the list as well now
148:41 - removing an element from the list so
148:43 - there are two ways either we can use the
148:45 - D function or else we can use the remove
148:48 - function as well so let's say over here
148:49 - we have the original list now so I'll
148:51 - just remove these lines of code and then
148:53 - we can use the deel function and Then
148:56 - followed by list and let's say I want to
148:59 - remove this fourth element that is at
149:01 - the index 3 which is 19 so I'll just
149:03 - provide list of three in this case and
149:05 - then what I will do is I will print the
149:07 - updated list once again so I'll just
149:09 - change this to updated list so basically
149:12 - we are using the de method over here and
149:15 - deleting the third index inside this
149:18 - list so let me just save this file and
149:19 - try running this code now so as you can
149:21 - see we are getting the updated list as
149:23 - 17 18 15 and 14 this element that is 19
149:27 - it was removed already now instead of
149:29 - this we can also use the remove method
149:31 - so in that case we have to use the
149:33 - variable name first in the deel method
149:36 - that is the delete method we simply used
149:38 - the function name and provided the
149:40 - element from the list in order to remove
149:42 - from that list but over here we have to
149:44 - provide the variable name followed by
149:46 - Dot and then we can simply use the
149:48 - remove function and Then followed by the
149:51 - position so which position we want to
149:52 - remove so let's say I want to remove
149:54 - this element that is 18 over here so in
149:56 - this case we have to provide the value
149:59 - of the element that is present inside
150:00 - the list so in this case we provide 18
150:03 - in the previous example that we have
150:06 - taken using the deel method we used the
150:09 - index number of the element that is
150:11 - present inside the list but in this case
150:13 - we have to use the value in order to
150:15 - remove it so I'll just say this file and
150:17 - try running this code now as you can see
150:19 - 18 was present in the original list but
150:21 - in the updated list we don't have 18 it
150:23 - is 17 15 19 and 14 and in this way we
150:26 - can remove the elements from the list as
150:28 - well now very important operation how do
150:30 - we iterate through a list so basically
150:32 - we can use the for Loop to iterate over
150:35 - the elements of a list so till now what
150:37 - we have seen is we have just used the
150:39 - list that is the variable name in order
150:41 - to print the elements of those list now
150:43 - if you notice we are getting the square
150:45 - brackets over here open and close square
150:47 - brackets within which all the elements
150:49 - are getting printed but let's say we
150:51 - don't want those square brackets and one
150:53 - by one we want to print all the elements
150:55 - at a time so what we can simply do is
150:57 - use the for Loop and we have seen in the
151:00 - previous videos as well the syntax of
151:02 - the for Loop we have to use the for
151:04 - keyword followed by let's say a
151:06 - temporary variable name that is item
151:08 - followed by the in keyword and then we
151:10 - have to provide the sequence at his list
151:13 - and then after that we have the colon
151:15 - and then we can have the print statement
151:17 - over here now in the print statement if
151:19 - we only provide one item that is item in
151:22 - this case so every time all the elements
151:25 - will be printed on the separate lines
151:27 - over here so let us just try this code
151:29 - so we'll just save this file and try
151:30 - running this code now as you can see 17
151:33 - 18 15 19 14 all the elements are getting
151:36 - printed on the separate lines what if we
151:38 - want all the elements to be present on
151:40 - the same line so what we can do is after
151:43 - providing comma over here we have the
151:45 - end parameter inside the print function
151:48 - and this end parameter we can have the
151:50 - comma as the character by which we can
151:53 - separate all the elements so by default
151:55 - this is slashing character which means
151:57 - the next element will be printed on the
151:59 - next line but if we specify this in this
152:01 - way all the elements will be printed on
152:03 - the same line so let me just save this
152:05 - file now and try running this code so as
152:07 - you can see all the elements are getting
152:09 - printed on the same line in the same
152:11 - sequence that is present inside this
152:12 - list so in this way we can iterate
152:14 - through all the elements inside the list
152:16 - that are present by using the fall Loop
152:18 - over here now another important thing
152:20 - how do we find the list so we have
152:22 - something called as python list length
152:24 - so in Python we use the Ln function to
152:27 - find the number of elements present in a
152:30 - list so we can have any number of
152:31 - elements inside the list over here so
152:33 - there is no limit on the number of
152:35 - elements that we are supposed to have
152:37 - inside the python list so in case if we
152:39 - want to find the number of elements
152:41 - inside the list we can simply use the
152:43 - length function so we can simply print
152:46 - print this and then we can have Ln which
152:49 - is a function and then we can provide
152:51 - the variable name of the list inside
152:53 - this Ln function over here so it will
152:56 - return us the count of the elements
152:57 - inside the list so let me just save this
152:59 - file and try running this code now as
153:01 - you can see five that is the count of
153:03 - the number of elements inside the list
153:05 - is present over here if we provide some
153:07 - more elements over here let's say I have
153:09 - provided five more elements inside the
153:11 - list let me just save this file now and
153:12 - try running this code so we are getting
153:14 - the updated count at is 10 so 10 is the
153:17 - number of elements set are present
153:19 - inside the list and that is how we can
153:20 - easily find the length of the list in
153:23 - this case by using the Ln function over
153:25 - here so Guys these were certain
153:26 - operations as far as list variable is
153:29 - concerned please make sure that you
153:30 - practice on your own and as a homework
153:32 - for you there is something called as a
153:34 - sort function which can help you in
153:36 - order to sort all the elements inside
153:38 - the list so you can practice on your own
153:40 - as a homework for you in order to sort
153:43 - the elements inside the python list and
153:45 - print on your own Tuple in Python
153:47 - Programming so guys a tuple in Python is
153:49 - similar to a list basically the
153:51 - difference between the two is that we
153:53 - cannot change the elements of a tle once
153:56 - it is assigned whereas we can change the
153:58 - elements of a list so previously in the
154:00 - examples of the list that we have seen
154:02 - we were able to change the elements
154:05 - inside the list but the same thing
154:06 - cannot be done with the elements at are
154:08 - present inside the tle so how do we
154:11 - create a tupple a tupple is created by
154:13 - placing all the items that is elements
154:15 - inside the parenthesis so we have this
154:18 - open and close parenthesis whereas in
154:20 - the list we were using open and close
154:22 - square brackets now these are supposed
154:24 - to be separated by commas over here the
154:26 - parenthesis are optional however it is a
154:28 - good practice to use them so a tle can
154:31 - have any number of items and they may be
154:33 - of different types that is integer float
154:36 - list string Etc so guys let us check
154:38 - this with the help of example now over
154:40 - here as you can see we have my tle which
154:42 - is the name of the variable that we have
154:44 - given and 1 2 3 these are the elements
154:47 - that is present inside the Tuple if you
154:49 - notice we have this open and close
154:51 - parenthesis inside of the square
154:53 - brackets and that is the difference
154:54 - between the list and the tupple over
154:56 - here so let us move to the vs code and
154:58 - simply we will provide tupple one as the
155:01 - variable name over here equal to
155:03 - followed by open and close parenthesis
155:05 - and let's say we Define five elements
155:07 - one to five over here so this is nothing
155:09 - but we have defined the tle and we can
155:12 - simply print this Tuple by using the
155:14 - variable name tle one over here so let
155:16 - me just save this file and try running
155:18 - this code now as you can see we are
155:20 - getting all the elements that is 1 2 3 4
155:22 - 5 and in this way we have easily created
155:25 - and printed the tupple elements over
155:27 - here now an important thing over here
155:29 - let's say you want to create a python
155:31 - Tuple with only one element so in this
155:33 - case what happens is let's say if you
155:35 - provide where one that is variable one
155:37 - over here and you provide double codes
155:39 - that is hello with this open and close
155:41 - parenthesis in this case this will be
155:44 - considered as a string where whereas in
155:46 - the variable two what you do is after
155:48 - this hello you provide a comma so in
155:51 - this case it will be considered as a tle
155:53 - so this is very important thing if you
155:55 - want to create a tupple with just a one
155:57 - element you have to use the comma after
156:00 - providing that element over here let us
156:02 - check this with the help of examples now
156:04 - over here let's say I provide where one
156:07 - in this case and then open and close
156:10 - parenthesis and then let's say we have
156:12 - hello over here and then I'll just copy
156:14 - this line of code and paste this and
156:16 - I'll simply provide comma after this
156:18 - element so what we will do is I'll just
156:21 - name this variable name as where to so
156:23 - let us now confirm the data types of
156:25 - both the variables so we will say print
156:27 - and then inside this we will use the
156:29 - type function in order to find the data
156:32 - type of where one so we provide where
156:34 - one over here and I'll simply copy and
156:37 - paste this line of code and we provide
156:39 - where two over here so let me just save
156:41 - this file now and try running this code
156:43 - so as you can see first one it is
156:44 - showing us that it is is a string and
156:46 - the second thing is showing us that it
156:48 - is a tupple now in case if we simply
156:50 - remove this comma from this tupple so
156:52 - what happens so let me just save this
156:54 - file and try running this code once
156:56 - again as you can see it has become
156:57 - string now both are strings right now if
157:00 - we provide comma over here and comma
157:02 - over here as well so both the variables
157:05 - will be turned to the tupple data type
157:07 - so guys this is very important if you
157:09 - want to have only one element inside the
157:11 - tupple make sure that that element is
157:14 - followed by a comma over here here in
157:16 - order to make that data type as a tupple
157:18 - now guys moving to next section how do
157:20 - we access the python tupple elements so
157:22 - there are multiple ways in order to
157:24 - access the elements over here first of
157:26 - all is indexing so this we have already
157:28 - seen previously by using the index
157:30 - number we can access the elements of the
157:33 - Tuple so let's say we have Tuple one
157:35 - over here and we have five elements 1 2
157:38 - 3 4 5 so how do we access these elements
157:42 - by using the indices so we simply have
157:44 - to provide the D one that is the
157:46 - variable name and Then followed by open
157:49 - and close square brackets this time and
157:51 - let's say we want to print the element
157:54 - that is three over here every time
157:55 - remember guys that the index it starts
157:58 - from zero so this first element that is
158:00 - number one it is at the index zero and
158:02 - then the second element that is number
158:04 - two it is at the index one and then the
158:06 - third element that is number three it is
158:09 - at the index two over here so we provide
158:11 - the number that is two which is the
158:13 - index number in this case so this will
158:15 - tell the python interpretor to access
158:18 - the element that is at the index number
158:20 - two for this variable that is tle one so
158:23 - over here what will happen is the index
158:25 - number zero is this and then index
158:27 - number one is this and then we have
158:29 - index number two which is three over
158:31 - here and this element should be printed
158:33 - so let me just save this file and try
158:34 - running this code now so as you can see
158:36 - three is getting printed similarly let's
158:38 - say if you want to print this number two
158:41 - which is at the index one in this case
158:43 - so we have to provide one inside this
158:45 - open and cl close square brackets so let
158:47 - me save this file and try running this
158:49 - code now so two is getting printed this
158:51 - time so guys this is one way in order to
158:54 - access the elements by using the
158:55 - indexing we also have something called
158:57 - as negative indexing so let's say if you
159:00 - don't know the number of elements that
159:02 - are present inside the Tuple whereas
159:04 - there is a way in order to find the
159:06 - length of the Tuple but in case you want
159:08 - to access the last element of this tle
159:10 - over here so you already know that the
159:13 - first element is at the index zero so
159:15 - let me just print that so over here we
159:17 - provide tle one followed by the index
159:20 - number that is zero in this case I'll
159:22 - save this file and try running this code
159:23 - so one is getting printed now let's say
159:25 - you want to print the last element but
159:28 - you don't know at which index it is so
159:30 - we have something called as negative
159:31 - indexing in which case before the zero
159:34 - index the index that is minus one it
159:37 - will point to the last element of this
159:39 - tle that is five over here so when we
159:42 - provide minus one in this case this
159:44 - element that is five should get get
159:45 - printed so let me just save this file
159:47 - and try running this code now so five is
159:49 - getting printed similarly if you want to
159:52 - get the second last element of this tle
159:55 - you can simply provide minus two over
159:57 - here so when we provide minus two and
159:59 - run this code so four is getting
160:01 - displayed which is the second last
160:03 - element so this is like a cycle over
160:05 - here when you use the negative indexing
160:07 - the last elements of this tle will start
160:10 - getting printed over here and then guys
160:12 - you can also use the slicing
160:14 - functionality as we have already seen
160:16 - with the list so basically let's say if
160:17 - you want to print the subset of this tle
160:20 - between 2 to 4 so what you can do is
160:23 - what is the index of this element that
160:24 - is two it is zero and then one so at the
160:27 - first Index this two is present so we
160:29 - will provide one over here followed by a
160:32 - colon and then what is the index of the
160:35 - element that we want that is four so the
160:37 - index is it is 0 1 2 and then this index
160:41 - is three but we don't want to specify
160:43 - three because this is excluded so so the
160:45 - next index which is four we have to
160:47 - specify that index which will be not
160:49 - included in our slicing operator so when
160:51 - we provide four over here always
160:53 - remember that this index on the left
160:55 - hand side will be considered but this
160:57 - index will not be considered the fourth
160:59 - index will not be considered but before
161:01 - this that is the third index will be
161:03 - considered while printing the statement
161:05 - so let me save this file and try running
161:07 - this code now so as you can see 2 3 and
161:10 - four is getting printed the last index
161:12 - that is four which is having the element
161:14 - five this will not be considered because
161:16 - it is not included in the slicing
161:18 - operator so these are some of the ways
161:20 - that you can use in order to access the
161:22 - python tupple elements over here now
161:24 - python tle methods there are two methods
161:27 - only that is count and index over here
161:30 - what is count so basically in order to
161:32 - get the number of occurrences of a
161:34 - particular element you can use the count
161:36 - method so over here while using the
161:38 - count function we have to use the
161:40 - variable name followed by Dot and then
161:42 - as you can see count and index these are
161:45 - the only two methods the other methods
161:47 - such as appending or removing or
161:48 - deleting the elements are not present
161:50 - that's because as I've already told you
161:52 - the tle inside python are not mutable
161:55 - which means we cannot change the
161:57 - elements once they are assigned over
161:59 - here so when we provide count we have to
162:02 - provide one of the elements inside that
162:04 - tle so let's say we want to find the
162:06 - occurrence of the element that is two
162:07 - over here in this case that means how
162:09 - many times this number two is occurring
162:11 - so let me save this file now and try
162:13 - running this code so as you can see the
162:15 - count is one over here that's because
162:17 - only one occurrence of number two is
162:19 - present let's say I provide some more
162:20 - occurrences over here so I provide the
162:22 - number two two times over here so the
162:25 - total count becomes three in this case
162:27 - over here we have two and then two more
162:29 - twos are present so basically the total
162:31 - count is three let me just run this code
162:33 - once again so number of twos that are
162:35 - present over here inside the topple is
162:37 - three and that is what we are getting
162:39 - over here and this is the main
162:40 - functionality of the count function now
162:43 - the another function that is index so if
162:45 - you want to get the index of a
162:47 - particular element you can use the index
162:49 - function so after this dot we have
162:51 - something called as index and then
162:54 - inside the open and close parenthesis we
162:56 - have to provide the element for which we
162:58 - want to find the index so let's say I
163:00 - want to find the index of this element
163:02 - that is number five over here so it is
163:04 - four basically let me just save this
163:06 - file and try running this code and
163:08 - confirm so as you can see four that is
163:10 - the index of this element is getting
163:12 - printed over here so Guys these
163:13 - functions you can use based on your requ
163:15 - requirements as far as tupple is
163:16 - concerned now one very important thing
163:19 - iterating through a tupple in Python so
163:21 - we can use the fall Loop to iterate over
163:23 - the elements of a tupple so basically we
163:25 - have seen this in the previous video as
163:26 - well so far we have printed the elements
163:28 - of the tupple by using the variable name
163:31 - in this way so let me save this file now
163:33 - and try running this code as you can see
163:35 - all the elements are getting printed but
163:36 - there is a problem over here we are
163:38 - getting this open and close parenthesis
163:40 - also while printing these elements what
163:43 - if we only want to print single element
163:45 - at a time so we can simply use the for
163:47 - Loop and iterate through all the
163:49 - elements over here inside the tle so we
163:52 - use the for keyword followed by let's
163:54 - say the temporary variable as the item
163:56 - and then we have the in keyword and then
163:58 - the name of the variable that is the
164:00 - sequence which is tle one in this case
164:03 - and then we simply have to print this
164:05 - item that is item variable now what will
164:08 - happen is all the items will be printed
164:10 - on separate lines over here because by
164:13 - default the end parameter of this print
164:15 - function is having the Slash and
164:17 - character so let me just save this file
164:19 - and I running this code now as you can
164:21 - see all the elements are getting printed
164:23 - on the new line what if we want all the
164:25 - elements to be present on the same line
164:27 - separated by comma over here so we
164:29 - simply have to provide comma and then
164:31 - there is something called as end
164:33 - parameter for this print function so we
164:35 - use that and inside the double Cotes we
164:38 - provide the comma over here which will
164:39 - be kind of a separate for all those
164:42 - Elements which will be printed on the
164:43 - terminal so let me just save this file
164:45 - now and try running this code so as you
164:48 - can see all the elements now are getting
164:49 - printed on the same line and they are
164:52 - separated with a comma if you want a
164:54 - space character after comma that can
164:55 - also be done you provide comma followed
164:58 - by the space character let me just save
165:00 - this file now and try running this code
165:02 - so all the elements are separated with a
165:04 - comma character and then a space
165:06 - character additionally for a better
165:07 - readability so guys this is another way
165:10 - you can use the for Loop in order to
165:12 - iterate through all the elements of the
165:14 - tle now let us understand what are the
165:16 - different advantages of a tuple over
165:18 - list in Python so we generally use tles
165:21 - for heterogeneous that is different data
165:23 - types and list for homogeneous which
165:25 - means similar data types so in a tle you
165:28 - can have the different data types as
165:30 - well so basically the tupple is being
165:32 - used for that purpose only and we cannot
165:34 - change the elements inside the tupple so
165:37 - since tles are immutable which means you
165:39 - cannot change a data inside the tupple
165:41 - once they are assigned iterating through
165:43 - a tupple is faster than with a list so
165:45 - behind the scenes what is happening is
165:47 - the program already knows that the
165:49 - tupple elements will not be changed and
165:51 - for this reason the tupple is little bit
165:53 - faster compared to the list so there is
165:55 - a slight performance boost over here now
165:57 - tles that contain immutable elements can
166:00 - be used as a key for a dictionary as
166:03 - well with a list this is not possible so
166:05 - inside a dictionary as you must be
166:07 - knowing there are key value Pairs and
166:09 - the elements of the tle can be
166:10 - considered as keys for the dictionary if
166:13 - you have data that doesn't change
166:15 - implementing it as a tle will guarantee
166:17 - that it remains right protected so
166:19 - nobody can change the elements of a tle
166:22 - if you want some data to be fixed
166:24 - whenever you are implementing the list
166:26 - of elements that should be present in a
166:28 - sequence and that must not be changed so
166:31 - Guys these are certain advantages of a
166:32 - tle over a list in Python Programming
166:35 - string in Python Programming so guys in
166:37 - computer programming a string is a
166:39 - sequence of characters so for example as
166:42 - you can see this hello word it is the
166:44 - string which is the sequence of
166:46 - characters that is h e l o so this is a
166:50 - string containing the sequence of these
166:51 - characters and we call it as a string
166:54 - now we use the single quotes or double
166:56 - quotes to represent a string in Python
166:59 - so basically whenever we are defining a
167:01 - string we use the sequence of characters
167:03 - which are supposed to be enclosed Within
167:05 - These double Cotes or else we can use
167:07 - the single Cotes as well so as you can
167:09 - see for example Str Str that is the
167:11 - variable name that we have taken over
167:13 - here followed by the equal to operator
167:16 - we have the string that is programming
167:17 - for beginners which is the name of the
167:19 - YouTube channel which you should
167:21 - definitely subscribe and this is
167:22 - enclosed within the two double codes
167:24 - over here so let us check this with the
167:26 - help of example now we have Str Str it
167:28 - is equal to inside the double codes we
167:31 - can provide our string that is
167:33 - programming for beginners over here and
167:36 - then simply we can print the string by
167:38 - using the print function so we have
167:39 - print followed by open and close
167:41 - parenthesis and then we provide this Str
167:43 - Str variable name name let me just save
167:45 - this file now and try running this code
167:47 - as you can see programming for beginners
167:49 - is getting printed now now what are the
167:51 - different operations how do we access
167:53 - string characters in Python so let's say
167:56 - if I only want to print this character
167:59 - that is p over here how can we do that
168:01 - so one way in order to do that is by
168:03 - using the indexing which means we can
168:06 - use the index number basically the
168:08 - indexes that we have seen in the list
168:10 - and tle in the previous videos are also
168:13 - applicable over here for strings as well
168:15 - so this letter that is p can be accessed
168:18 - by using the index number which starts
168:20 - from zero so this is the zeroth index
168:22 - number which defines this P character
168:24 - the next character that is R it is at
168:26 - the first index number and then the next
168:28 - character is at the second index number
168:31 - and so on so we can simply use the
168:33 - variable name and then inside the open
168:35 - and close square brackets we can provide
168:37 - the index number so over here after the
168:40 - variable name inside the open and close
168:43 - square brackets as you can see we we
168:44 - provide the index number that is zero
168:47 - which will point to this character that
168:49 - is p over here so let me just save this
168:51 - file and try running this code now as
168:53 - you can see p is getting printed over
168:55 - here now let's say we want this o to be
168:57 - printed so what is the index number for
168:59 - this so the first one is zeroth index
169:02 - and then we have first index over here
169:04 - and then this o is at the second index
169:06 - number so we provide number two that is
169:09 - inside the open and close square
169:11 - brackets let me just save this file now
169:12 - and try running this code so as you you
169:14 - can see o is getting printed and in this
169:17 - way if you want to access a single
169:19 - character from the string you can use
169:21 - the index number in order to access them
169:23 - now there is another variation we can
169:25 - also use the negative indexing which
169:27 - means the negative index numbers can
169:30 - also be used in order to access the last
169:33 - elements of the string so let's say if
169:35 - you want to access the last element
169:37 - first element is having the index number
169:39 - zero and the previous index number that
169:41 - is before the number zero we have minus1
169:44 - in the number system system so minus1
169:46 - will refer to the last element inside
169:49 - this sequence of characters which is s
169:51 - over here so when we provide minus one
169:53 - in this case inside the open and close
169:55 - brackets so let me just save this file
169:57 - and try running this code as you can see
169:59 - s is getting printed so minus1 is
170:02 - pointing to this character that is s
170:04 - what will be the second last character
170:06 - it will be Min -2 in this case so when
170:08 - we provide minus 2 save this file enter
170:11 - I running this code so as you can see
170:13 - this R is getting printed over here and
170:15 - in this way we have the negative
170:17 - indexing Concept in Python Programming
170:19 - now there is another way we can use the
170:21 - slicing operator in order to print the
170:24 - subset of the sequence of characters so
170:27 - let's say if we only want this
170:29 - programming word to be printed instead
170:32 - of programming for beginners that is the
170:34 - entire string so what we can do is so we
170:36 - have to mention the indices in order to
170:38 - print these characters only so it starts
170:41 - from zero and then we have 1 2 3 3 4 5 6
170:47 - 7 8 9 10 and then we have to take extra
170:51 - index number that is 11th as well
170:53 - because that last index number is not
170:56 - included whenever we are using the
170:57 - slicing operator so the indexes will be
171:00 - between 0 to 11 in this case so how do
171:02 - we provide that range we provide zero
171:04 - first that is the left hand side index
171:06 - followed by the colon and then we
171:08 - provide 11 that is the second index up
171:10 - to which all the characters must be
171:12 - taken and printed over here so so as you
171:14 - can see this is the slicing of the
171:16 - sequence of characters let me just save
171:18 - this file enter I running this code now
171:20 - as you can see programming is getting
171:22 - printed over here let's say we want to
171:24 - include the characters up to F so we
171:26 - have to provide the index up to O over
171:29 - here so basically this was the 11th
171:31 - index and then we have 12th and then 13
171:33 - so over here what we can do is we can
171:35 - simply provide 13 in this case so let me
171:38 - just save this file now and try running
171:40 - this code so as you can see programming
171:42 - word is getting considered and then
171:43 - after that we have have the space and
171:45 - then f is also considered which is at
171:47 - the 12th index there is another way we
171:49 - can do this instead of providing this
171:51 - zero index we can just remove this so by
171:54 - default it will take from the start of
171:56 - the string that is all the characters
171:58 - starting from the zero index over here
172:00 - so let me just save this file and try
172:01 - running this code now so as you can see
172:03 - again we are getting the same output
172:05 - that is programming up to the F
172:07 - character over here what if we want from
172:09 - this o character which is at the 13th
172:11 - position up to the last position so what
172:14 - we can do is we can simply provide the
172:16 - 13th index number which will start the
172:18 - string from this particular character
172:20 - and Then followed by colon and there is
172:22 - no need to provide the last index
172:24 - because we want all the characters to be
172:26 - included so this is the slicing operator
172:28 - for us we have the 13 index number and
172:30 - then colon over here let me just save
172:32 - this file now and try running this code
172:34 - so as you can see after F we are getting
172:36 - o r over here and then we have the space
172:38 - character and then we have the beginners
172:40 - as well so this is the way that we can
172:42 - use the slicing in Python in order to
172:44 - get the subring from the entire string
172:47 - that we have already defined now guys
172:48 - very important python strings are
172:50 - immutable so in Python strings are
172:52 - immutable that means the characters of a
172:55 - string cannot be changed so let's say
172:57 - this first character that is p if we
172:59 - want to change that character so what we
173:01 - will do is we will provide Str Str and
173:03 - Then followed by zero and then instead
173:05 - of this P character let's say I want to
173:07 - provide the character Q over here and
173:10 - then let me just print the string once
173:12 - again so we will simply print the string
173:15 - let me just save this file and try
173:16 - running this code now as you can see we
173:18 - are getting the type error string object
173:20 - does not support item assignment so we
173:23 - cannot change any of the characters over
173:25 - here but there is another way to do this
173:27 - what we can do is simply we can copy
173:29 - this entire string value and paste this
173:32 - over here and then again instead of P we
173:34 - can provide Q over here but this time we
173:37 - have to remove this index number so this
173:39 - is possible because we are providing the
173:42 - reassignment of the string variable so
173:44 - let us check this we'll save this file
173:45 - and try running this code now as you can
173:47 - see we are getting Q over here and all
173:50 - the other characters are same so
173:51 - basically by immutable we mean that we
173:54 - cannot change a particular Single
173:56 - Character inside the string by using the
173:58 - index number for that particular
174:00 - character but in case if you want to
174:02 - reassign the entire string that can be
174:05 - done by using such reassignments
174:07 - operator now guys that is another
174:08 - important functionality in Python
174:10 - multi-line strings are allowed so
174:13 - basically we can also create a
174:14 - multi-line string in Python so for this
174:17 - we use the triple double codes or triple
174:19 - single codes over here so what we will
174:21 - do is let's say I'll just remove these
174:22 - lines of code and then I'll say Str Str
174:25 - it is equal to three * double codes over
174:28 - here we will use and then I will say
174:31 - this is first line and then on the next
174:35 - line we will say this is another line so
174:39 - this is basically the multi-line string
174:40 - that we have defined so how do we print
174:43 - this simply by using using the normal
174:45 - way that is print function followed by
174:47 - the name of the string that is Str Str
174:49 - variable let me just save this file and
174:51 - try running this code as you can see the
174:53 - format in which we have return return
174:55 - the string that is the three double
174:57 - codes were there over here followed by
174:58 - on the next line we were having this is
175:00 - first line and then this is another line
175:03 - and then we were having another double
175:04 - codes over here so these double codes
175:06 - followed by space characters and then
175:08 - between those space characters this is
175:10 - another line if we don't want these
175:12 - space characters soon after the double
175:14 - codes are being mentioned we have to
175:16 - provide the strings over here so the
175:19 - start of the double codes at the same
175:20 - line we are having this is first line
175:23 - and this is another line and then we
175:24 - have the three double codes on that same
175:26 - line so let me just save this file now
175:28 - and try running this code so basically
175:30 - this is the format so whatever format we
175:33 - follow in this three double codes or
175:35 - three single codes the same format will
175:37 - be followed while printing those lines
175:39 - on the terminal now what are the python
175:41 - string operations basically you can
175:43 - compare two strings with the the equal
175:44 - to operator over here as you can see so
175:46 - let's say we have two strings over here
175:48 - string one it is equal to let's say we
175:51 - have John and then string two it is
175:54 - equal to let's say we have the name
175:56 - Peter over here so we have Peter so what
175:59 - we will do is simply we will print Str
176:01 - str1 it is equal to Str str2 so this is
176:05 - nothing but we are comparing two strings
176:07 - by using the equal to equal to operator
176:09 - which we have done previously as well
176:11 - while we were using the relational
176:12 - operators in order to comp compare two
176:14 - numbers we can compare two strings in
176:16 - the same way as well it will either
176:18 - return true or false based on whether
176:20 - they are equal or not so let me just
176:22 - save this file and try running this code
176:23 - now as you can see we are getting false
176:26 - that's because the names are different
176:27 - so what if we make the names same so
176:29 - I'll just copy this value and paste this
176:31 - over here now both the strings are same
176:33 - St str1 and Str str2 both are having the
176:36 - value that is John so let me just run
176:37 - this code now as we can see we are
176:39 - getting true over here that's because
176:41 - both the strings are same in this case
176:43 - now there is another operation how do we
176:45 - join the two or more strings so we can
176:47 - do so by using the plus operator so
176:49 - let's say we go back over here once
176:51 - again we provide the string to as Peter
176:54 - and we want to join both the strings so
176:56 - in this case instead of equal to equal
176:58 - to what we will do is we will specify
177:00 - the string one that is Str str1 and then
177:03 - plus operator and Then followed by Str
177:05 - str2 in this case so let me just save
177:08 - this file now and try running this code
177:10 - as you can see we are getting John Peter
177:12 - over here continuously there is no space
177:14 - character so either we can provide a
177:15 - space character over here or else we can
177:18 - have the space character inside the
177:20 - print function as well so we can have
177:22 - the double codes inside which we can
177:24 - have the space character and then again
177:26 - we have to use the plus operator in
177:28 - order to join these strings so let me
177:30 - just save this file now and try running
177:32 - this code so as you can see we are
177:33 - getting John Peter and then there is a
177:35 - space character in between so we can
177:38 - join multiple strings as well by using
177:40 - the plus operator over here the same
177:42 - plus operator will be used in order to
177:44 - add two numbers if these variables are
177:46 - numbers but in our case these variables
177:48 - are strings and that is why it is being
177:50 - used in order to join the two strings in
177:52 - this case now how do we iterate through
177:54 - a python string so basically we can
177:56 - iterate through a string by using the
177:58 - fall Loop so let us check this with the
178:00 - help of example now let's say we have
178:02 - string one over here we provide four
178:04 - followed by S which is the temporary
178:06 - variable and then we have the in keyword
178:09 - followed by Str str1 I'll just make this
178:11 - as item so that it is more use of
178:14 - friendly in order to understand so
178:16 - basically Str str1 which is having the
178:18 - sequence of characters one character at
178:20 - a time will be assigned to this item
178:22 - variable and the control flow will go
178:24 - inside this fall Loop now inside this we
178:26 - can simply have the item being printed
178:29 - so when we provide item over here inside
178:32 - the print function and when we save this
178:34 - file and try running this code as you
178:35 - can see all the characters that is J hn
178:38 - these are getting printed on separate
178:40 - lines how do we get them on the same
178:42 - line so what we can do is we can provide
178:44 - the end operator equal to we can simply
178:48 - provide the double codes and we don't
178:49 - have to provide anything over here if we
178:51 - want to separate all the characters with
178:53 - a comma we can provide comma over here
178:55 - as well so let me save this file and try
178:57 - running this code as you can see John is
178:59 - getting printed but all the characters
179:01 - are getting separated using the comma we
179:03 - can simply remove this comma over here
179:06 - I'll save this file and try running this
179:07 - code now as you can see we are getting
179:09 - John over here so since we have provided
179:11 - this end parameter with nothing but
179:14 - simply double codes we are getting all
179:16 - the characters or else when we don't
179:17 - provide this parameter by default the
179:20 - end parameter is having the Slash and
179:22 - character due to which all the items
179:24 - will be printed on the new lines there
179:26 - is another important thing how do we
179:27 - find the python string length so
179:29 - basically we can use the Len method to
179:32 - find the length of the string so let's
179:34 - say we have programming for beginner
179:36 - string over here so I'll just type
179:38 - programming for beginners and we want to
179:42 - find the length of the string that means
179:43 - means how many characters are present
179:45 - inside the string so we can simply use
179:47 - the Len function that is the length
179:49 - function in order to print the count of
179:52 - the characters inside the string so we
179:55 - can have the Ln function followed by
179:57 - inside the open and close parenthesis we
179:59 - have the variable name that is s Str
180:02 - over here so let me just save this file
180:03 - and try running this code so it is
180:05 - saying object of type type has no l so
180:08 - basically we have provided Str Str over
180:10 - here instead we have to provide Str str1
180:13 - which is the variable name so that was
180:14 - the mistake so let me just save this
180:16 - file now and try running this code as
180:18 - you can see 25 we are getting that is
180:21 - the number of characters that are
180:22 - present inside the string let's say I
180:24 - add some more characters over here I
180:26 - provide one two which means I have added
180:28 - two more characters inside the string so
180:31 - that should be 27 in this case so when
180:33 - we just save this file now and try
180:35 - running this code we get 27 as the count
180:37 - which is the updated count of number of
180:39 - characters inside the string and that is
180:41 - how this length function will work work
180:44 - in order to return you one particular
180:46 - integer which is the count of the number
180:48 - of characters inside the string now guys
180:50 - there is another important thing string
180:52 - membership test so basically this we
180:54 - have already seen we can test if a
180:56 - substring exist within a string or not
180:58 - using the keyword in so we have already
181:01 - used the fall loop as well and in the
181:02 - membership operator we have used the in
181:05 - keyword in order to find a particular
181:07 - letter is present or not inside the
181:09 - string so that you can take as a
181:10 - homework for you so that you can
181:12 - practice on your own you can find find
181:13 - out whether the character X is present
181:16 - inside the string or not and if it is
181:18 - present then you should display true and
181:20 - if it is not present then you should
181:21 - display false comment in the comment
181:23 - section below what is the output of your
181:25 - program while using this membership
181:27 - operator that is in now guys very
181:29 - important thing there is something
181:30 - called as Escape sequences in Python now
181:33 - the escape sequence is used to escape
181:35 - some of the characters present inside a
181:37 - string so what we have done over here is
181:39 - while providing the string we are
181:42 - enclosing it using the double quotes but
181:44 - what if the double quotes is a part of
181:46 - this string let's say I want to provide
181:48 - a double quotes over here before
181:50 - beginners so as you can see after
181:52 - providing the double codes we are
181:53 - getting a red underline over here which
181:55 - means there is some issue so what we can
181:57 - do is in order to avoid this issue and
182:00 - to make this as a part of this string we
182:02 - have to use the Escape character which
182:04 - means we have to use a back slash
182:06 - character over here just before the
182:08 - special character so this is the way
182:10 - that we use the Escape character we use
182:12 - the back slash character over here once
182:14 - and then followed by our special
182:16 - character which is causing the issue and
182:18 - in this case this double quote will be
182:20 - the part of the string now so let me
182:22 - just save this file and try running this
182:24 - code currently we are getting the length
182:25 - of the string what we will do is I'll
182:27 - just remove this length function so that
182:29 - we can print the value of the string so
182:31 - I'll just save this file and try running
182:33 - this code as you can see programming for
182:35 - and then we are getting the double codes
182:37 - over here which is the part of the
182:39 - string and then we have the beginners
182:40 - over here so this is the way in case you
182:42 - want to escape certain characters or
182:44 - special characters we can use the back
182:47 - slash which is known as the Escape
182:49 - character in Python Programming now guys
182:51 - there is another way in order to print
182:52 - the string by using the python string
182:54 - formatting so as you can see for example
182:56 - let's say we have the name that is John
182:58 - and we have age it is equal to 25 so one
183:01 - way that we can print both that is name
183:03 - and age is by using the multiple objects
183:05 - inside the print statement so let us
183:08 - check this so we have name over here
183:10 - which is John right now and then let's
183:13 - say we have age it is equal to 25 and we
183:17 - want to print both that is name and age
183:19 - within one print function so what we
183:21 - will do is we will say name is followed
183:25 - by comma and then we provide name and
183:27 - then again comma and then we have double
183:29 - codes and then we provide end age is
183:34 - followed by comma and then we have age
183:37 - over here so what we have done is this
183:39 - string will be printed that is name is
183:41 - followed by this name value will be
183:44 - taken from this variable that's because
183:46 - we have provided it outside the double
183:48 - quotes over here and after providing
183:50 - this comma and then again there is a
183:52 - comma and then we have a normal string
183:54 - label that is end ages and then we are
183:56 - specifying the age so this is one way in
183:59 - order to print both that is name and age
184:01 - in the same print statement so let me
184:03 - just save this file now and try running
184:05 - this code so as you can see name is John
184:08 - and age is 25 over here but guys this
184:11 - can be confusing since we have to use
184:13 - multi mle commas over here as well as
184:15 - multiple double quotes as well so there
184:16 - is another way in order to print the
184:19 - same string so what we can do is again
184:21 - we can have the print function but this
184:23 - time what we will do is in the open and
184:26 - close parenthesis we provide the F
184:28 - character followed by single codes over
184:30 - here so inside the single codes we can
184:33 - provide the variable name that is name
184:36 - and age as well so in this case if we
184:38 - want to get the value of this name
184:40 - variable we have to enclose it within
184:42 - the Curve curly braces so these are the
184:45 - curly braces as you can see we have the
184:47 - open and close curly braces and inside
184:49 - this we provide name over here so if we
184:52 - do it in this way we provide the F
184:54 - character and then inside the single
184:56 - codes inside the curly braces we have
184:58 - the name over here it will print the
185:01 - value that is John so let me just save
185:02 - this file and try running this code as
185:04 - you can see John is getting printed
185:06 - which is the value of this name variable
185:08 - now we want to print the entire string
185:10 - that is we also want the labels so for
185:13 - this name that we have provided we can
185:15 - simply provide the string that is name
185:18 - is and Then followed by open and close
185:20 - braces and inside the braces it will be
185:22 - name variable name and then we can
185:25 - simply provide end age is followed by
185:29 - open and close braces and then we can
185:32 - provide the age variable name so guys
185:34 - this is the format we have the F
185:36 - character and inside the single codes as
185:38 - you can see we have provided the string
185:40 - label that is name is and Then followed
185:42 - by open and close curly braces inside
185:45 - which we provide our variable name and
185:47 - Then followed by end ages or any other
185:50 - string label that you want to Define and
185:52 - then we can have the variable name that
185:54 - is age over here inside the open and
185:56 - close curly braces so let me just save
185:58 - this file now and try running this code
186:00 - as you can see we have the perfect
186:01 - string that we wanted that his name is
186:03 - John and age is 25 so this is another
186:06 - way we can use the python string
186:08 - formatting by using this F character
186:10 - inside the print function in order to
186:12 - print the string in the way that we want
186:14 - to print so Guys these are certain
186:16 - things as far as strings are concerned
186:18 - in Python programming language sets in
186:20 - Python Programming so guys a set is a
186:23 - collection of a unique data which means
186:26 - that the elements in a set cannot be
186:28 - duplicate elements so over here you can
186:30 - easily create a set in the python
186:32 - basically in Python we create the sets
186:35 - by placing all the elements inside the
186:37 - curly braces separated by comma so guys
186:40 - previously we have seen that for the
186:41 - list we are using the open and close
186:44 - square brackets for the tle we use the
186:46 - open and close parenthesis and over here
186:48 - for sets we are using the open and close
186:51 - curly braces so we will check this with
186:53 - the help of examples as well a set can
186:55 - have any number of items and they may be
186:58 - of different types so as you can see it
187:00 - can be of the integer float tle or
187:02 - string data type or any other data type
187:05 - but a set cannot have mutable elements
187:07 - like list sets or dictionaries as its
187:10 - elements so guys this is very important
187:12 - you can not have another list set or a
187:15 - dictionary which we are going to see in
187:17 - the upcoming videos over here we cannot
187:19 - have these kinds of data types inside a
187:21 - particular set now let us check the
187:23 - creation of set with the help of example
187:25 - now over here so let's say I provide set
187:27 - one as the variable name and then we
187:30 - provide the equal to symbol followed by
187:32 - the open and close curly braces so
187:34 - inside these braces we have to provide
187:36 - the elements of the set so let's say we
187:38 - have the set of integers we have 1 2 3 4
187:42 - and then five so guys we have five
187:44 - elements over here 1 to five which are
187:46 - the elements of this set and simply we
187:48 - can print all these elements inside the
187:51 - set by using the print function over
187:53 - here and then we can say set
187:57 - elements are and then colon and then we
188:00 - can have set one that is the variable
188:03 - name so guys let me just save this file
188:05 - and try running this code now so as you
188:07 - can see we are getting set elements are
188:09 - we are getting all the elements that is
188:10 - 1 2 3 4 5 and guys this is is the way
188:13 - that we can create a set in the Python
188:15 - Programming now guys it is very
188:17 - important that we cannot have the
188:18 - duplicate items in this set so let's say
188:21 - I provide some more numbers over here
188:23 - which are already present in this set so
188:25 - let's say two and three are already
188:27 - present I provide this two and three
188:29 - once again so when we do this so right
188:31 - now we have seven number of elements but
188:33 - let me just save this file now and try
188:35 - running this code to see how many
188:36 - elements get printed so as you can see
188:38 - only five elements are getting printed
188:40 - so those two elements that is two and
188:42 - three will will not be considered once
188:44 - again while printing them because we
188:46 - cannot have duplicate elements we can
188:48 - only have the unique elements inside the
188:51 - set and guys this is the main
188:52 - functionality of having the set data
188:55 - structure in Python Programming So based
188:57 - on your requirements if you don't want
188:59 - the duplicate elements to be present you
189:01 - can use the set data structure in the
189:03 - Python programming language now guys how
189:05 - do we create an empty set in the python
189:07 - so basically creating an empty set is a
189:10 - bit tricky so empty curly braces if we
189:12 - use then it will make a empty dictionary
189:15 - in Python so basically when we create a
189:17 - dictionary we again use the curly braces
189:19 - so let us check this with the help of
189:21 - example now over here what happens if we
189:23 - create the empty set so let's say we
189:26 - provide set one it is equal to open and
189:28 - close curly braces as you can see we
189:30 - have not provided any element and this
189:32 - is the empty set but let me just print
189:35 - the type of this variable over here so
189:37 - we will simply use the type function and
189:40 - then provide the set one as the variable
189:43 - name so guys what will be the type of
189:44 - this set one variable so let me just
189:46 - save this file now and try running this
189:48 - code as you can see it is saying that
189:50 - class it is a dictionary data type so
189:53 - this set one variable is of the data
189:55 - type dictionary by default when we
189:57 - provide the open and close curly braces
189:59 - how do we make it as a empty set data
190:02 - type so what we have to do is instead of
190:05 - using the open and close curly braces we
190:07 - have to use the set function so there is
190:10 - something called a set function over
190:11 - here as you can VSS code is suggesting
190:14 - us so this set function followed by the
190:16 - open and close parenthesis will help us
190:18 - to create a new empty set over here so
190:21 - let me just save this file now and try
190:23 - running this code over here what we are
190:24 - trying to do is again we are trying to
190:26 - print the type of this set one but this
190:29 - time it should be of the set data type
190:31 - so let me just run this code now so as
190:34 - you can see we are getting the set data
190:36 - type over here previously we were
190:37 - getting the dictionary so in order to
190:40 - have the empty set in Python Programming
190:42 - we can can use the set function over
190:44 - here now very important question how do
190:46 - we add the set items in Python so
190:48 - basically sets are mutable which means
190:50 - we can add and remove items from the set
190:53 - however since they are unordered
190:55 - indexing has no meaning so guys
190:58 - basically if you must have noticed there
191:00 - is no one order in which the set items
191:03 - were printed previously so let us check
191:05 - this once again over here we provide set
191:07 - one it is equal to and let's say we
191:09 - provide some elements that is 3 2 4 1 5
191:14 - and then let me just print this set one
191:17 - over here so we provide set one inside
191:20 - the print function let me just run this
191:22 - code as you can see we are getting 1 2 3
191:24 - 4 5 this is not of the same order in
191:27 - which we have provided these elements
191:29 - inside the set so we cannot use index
191:32 - numbers over here as well in order to
191:34 - access these elements one at a time
191:36 - since the way in which the elements
191:38 - inside the set are printed are not in a
191:41 - particular order now guys how how do we
191:43 - add new elements to this set so
191:45 - basically we cannot access or change an
191:47 - element of a set using the indexing or
191:49 - slicing but we can use the add method to
191:53 - add an item to a set so let us say I
191:56 - want to add another element over here so
191:58 - basically what we will do is we will say
192:01 - initial set and then colon and then we
192:04 - provide set one and then let's say we
192:06 - provide set one dot we have something
192:09 - called as ADD over here as you can see
192:11 - this is a function that we can use in
192:14 - order to add elements inside the set so
192:16 - let's say we provide 10 as the number to
192:19 - be added to this particular set that is
192:21 - set one and then again we want to print
192:23 - that set one so I'll just copy this and
192:25 - paste this over here and then we have
192:28 - updated set over here so we have updated
192:31 - set and then set one being printed so
192:33 - let me just save this file and try
192:34 - running this code now so as you can see
192:36 - initial set it is 1 2 3 4 5 and then
192:39 - after adding this element we are getting
192:41 - the updated set as 1 2 3 4 5 and then
192:45 - the last element that is 10 over here
192:47 - which is being added by using the add
192:49 - method and this is the way that we can
192:51 - add the elements inside the set remember
192:53 - that the order in which they are added
192:56 - will not be followed while printing them
192:58 - so you cannot rely on the order in which
193:00 - the set elements will be printed on
193:02 - Console now guys another important thing
193:04 - how do we remove an element from the set
193:07 - so we can use the discard method to
193:09 - remove the specified element from a set
193:11 - so let us say after after adding this we
193:13 - want to remove the element that is three
193:16 - from this set so what we can do is we
193:18 - can provide set one and then followed by
193:21 - Dot and then we can have discard method
193:23 - in order to remove the element we need
193:26 - to provide the element which needs to be
193:28 - removed so over here we provide the
193:30 - number three which will be removed from
193:32 - the set one and then again let me just
193:34 - copy this line of code and paste this
193:36 - over here so that we can print the
193:38 - updated set after removing so over here
193:41 - we say updated set after removing three
193:46 - and then let me just save this file and
193:48 - try running this code now so as you can
193:50 - see we are getting 1 2 4 5 and then 10
193:53 - so the element three is being removed
193:55 - after using the discard method over here
193:58 - and guys this is the way that we can
194:00 - remove the elements from the set now
194:01 - guys there is another way in order to
194:03 - access the elements inside the set we
194:05 - can iterate over a set in Python by
194:08 - using the fall Loop so this can be
194:10 - easily done by using the fall Loop over
194:12 - here so what I will do is I'll just
194:14 - clear these lines of code and then we
194:16 - will say for and then item in set one so
194:20 - this is the syntax that we use while
194:22 - using the fall Loop and then we can have
194:25 - the print statement over here guys
194:27 - notice that till now we were printing
194:28 - the elements of the set by using the set
194:31 - one variable and that is why we were
194:33 - getting the starting and the ending open
194:35 - and close curly braces over here but
194:38 - this time let's say we don't want those
194:40 - but we want only those numbers that is
194:42 - the the elements inside the set to be
194:44 - printed so we can easily use the for
194:47 - Loop and iterate through each and every
194:49 - item inside the set and this is the way
194:51 - that we can do so we provide the print
194:54 - statement over here and inside the item
194:57 - variable one at a time all the elements
194:59 - will be printed over here so let me just
195:01 - save this file now and try running this
195:03 - code so as you can see we are getting 1
195:05 - 2 3 4 5 now all these numbers are on a
195:08 - different line what we can do is we can
195:10 - use the end parameter of the print
195:13 - function so over here we provide the end
195:15 - parameter and then we simply provide the
195:17 - space character so that all the items
195:19 - are separated by the space characters
195:22 - over here so let me just save this file
195:23 - now and try running this code so as you
195:25 - can see we are getting 1 2 3 4 5 which
195:28 - are the elements of this set if you want
195:30 - all these numbers to be separated by
195:32 - commas what we can do is instead of the
195:34 - space character we can provide the comma
195:36 - and let me just save this file and try
195:38 - running this code once again as you can
195:40 - see we are getting 1 2 3 4 5 and and all
195:42 - the elements are being separated using
195:44 - the comma character now guys how do we
195:46 - find the number of set elements so we
195:49 - can use the Len method that is the
195:51 - length method to find the number of
195:53 - elements that is present inside the set
195:55 - so what we can do is simply we can
195:57 - provide the print statement over here
195:59 - and we can simply say that length of set
196:04 - is and then colon and then we can simply
196:07 - use the alen method and then inside this
196:10 - method we can provide the set one that
196:12 - is the variable name so let me just save
196:14 - this file now and try running this code
196:16 - so as we can see length of set is five
196:19 - so basically since five elements are
196:21 - present over here we are getting the
196:22 - length as five what if we provide some
196:25 - more elements let's say I provide six 7
196:27 - and let's say I provide some more
196:28 - duplicate elements over here that is 1 2
196:31 - and then three so over here there are
196:33 - total 10 elements out of which three
196:35 - elements are duplicate so what is the
196:37 - exact length of the set so let me just
196:39 - save this file now and try running this
196:41 - code so as you can see length of set is
196:43 - seven so even though we are having 10
196:46 - items inside the set but out of those 10
196:48 - items three items are duplicate items so
196:51 - those duplicate items will not be
196:53 - considered it will be considered only
196:55 - once and that is why we are getting the
196:57 - length of this set S7 now guys very
197:00 - important thing about the set operations
197:02 - we can carry out different set
197:03 - operations in Python Programming one is
197:06 - Union of two sets which can be done by
197:08 - using the union method or this or symbol
197:11 - over here we can also have the set
197:13 - intersection which can be implemented by
197:16 - using the intersection method and then
197:18 - we also have the difference between the
197:20 - two sets which means we can use the
197:22 - difference method or the minus symbol
197:24 - over here so guys let us check all these
197:26 - operations one at a time so over here
197:28 - what we will do is we will have two sets
197:31 - over here we will say set one it is
197:33 - equal to 1 2 and then three and then
197:35 - let's say we have set to it is equal to
197:38 - 3 4 and then 5 now guys let's say we
197:41 - want to find the Union first so what we
197:44 - will do is we will say Union and then we
197:47 - will simply say set one followed by Dot
197:51 - and then we have the union method
197:53 - followed by the parameter needs to be
197:55 - set two over here because that is the
197:57 - another set that we want to find the
198:00 - union of similarly we will do the
198:01 - intersection and difference as well so
198:04 - I'll just copy and paste these lines of
198:05 - code over here we will say intersection
198:08 - in this case and then we will simply
198:11 - change the union method to intersection
198:14 - over here and then over here we will say
198:18 - difference so difference and then inste
198:21 - of this Union we will say difference so
198:23 - guys basically what we are doing over
198:25 - here is these are all the set operations
198:28 - the union will find all the elements
198:30 - that are present in set one and set two
198:33 - and all the elements will be unique in
198:35 - the intersection part we will get all
198:37 - the elements that are common in both the
198:39 - sets which means three in this case and
198:42 - then in the difference we will find all
198:44 - the elements that are present in set one
198:46 - but not present in set two so guys let
198:48 - me just save this file now and try
198:50 - running this code to see what will be
198:52 - the results of all these operations so
198:54 - as you can see the union is giving us 1
198:57 - 2 3 4 5 which means all the elements
198:59 - that are present in set one and set two
199:02 - so we are having 1 2 3 in set one and
199:05 - then in set two the three is already
199:06 - printed and then it is printing four and
199:09 - five as well in intersection we are
199:11 - getting only three that's because the
199:13 - element three is the only element which
199:15 - is common in both the sets for the
199:17 - difference operation we are getting only
199:19 - one and two that's because these are the
199:21 - only two elements which are present in
199:23 - set one but not present in set two so
199:26 - Guys these are certain set operations
199:27 - that can be implemented with Python
199:29 - Programming apart from this there are
199:31 - multiple buil-in methods that you can
199:33 - use as far as sets are concerned so when
199:35 - we provide the variable name that is set
199:37 - one followed by dot as you can see these
199:39 - are all the methods that can be used
199:42 - based on your requirements dictionary in
199:44 - Python Programming so guys the python
199:46 - dictionary is an ordered collection of
199:49 - items it stores elements in the form of
199:52 - key value pairs so basically on the left
199:54 - hand side we have a key and on the right
199:57 - hand side we have the value and such key
199:59 - value pairs are known as dictionary in
200:01 - Python Programming now guys the keys are
200:04 - unique identifiers that are associated
200:07 - with each value so basically we cannot
200:09 - have duplicate keys in a dictionary
200:11 - where we can have the duplicate values
200:13 - in the dictionary so as you can see for
200:15 - example over here on left hand side we
200:17 - are having the keys on right hand side
200:19 - we are having the values so Nepal Italy
200:22 - and England these are certain Keys over
200:25 - here and they are capital that is
200:26 - Katmandu Rome and then London these are
200:29 - the values on the right hand side so how
200:31 - do we create a dictionary in Python we
200:34 - can have any variable name in this case
200:36 - and after the equal to symbol inside the
200:38 - open and close curly braces we are
200:40 - having the key value pad so since this
200:42 - is a string we are enclosing it within
200:45 - the double codes over here and then
200:47 - after the key that is Nepal we are
200:49 - providing a colon in this case followed
200:51 - by the value which is again inside the
200:53 - double codes and then separated by
200:56 - commas we have more key value pairs over
200:58 - here so guys this is the way that we can
201:00 - create the dictionary so guys let us
201:02 - check this with the help of examples now
201:04 - over here so let us say we have dict1
201:07 - that is the variable name followed by
201:09 - equal to and then let's say we provide
201:11 - the same data over here so I'll just
201:13 - copy and paste this line so we have
201:15 - copied the same key value pairs over
201:18 - here now simply we can print this key
201:19 - value PIR by using the print function
201:22 - and Then followed by dict1 which is the
201:25 - variable name so let me just save this
201:27 - file and try running this code now as
201:29 - you can see we are getting all the key
201:30 - value pads over here being printed on
201:32 - the console so guys this is the way that
201:34 - we can create the dictionary along with
201:36 - the key value P that we want to store
201:39 - inside the dictionary now how do we add
201:41 - elements to to a python dictionary so we
201:43 - can add the elements to a dictionary
201:45 - using the name of the dictionary with
201:47 - open and close square brackets so guys
201:50 - over here what we will do is we will say
201:53 - initial
201:55 - dictionary so this label we have added
201:58 - so that we can identify that this is the
202:00 - initial dictionary now what we will do
202:02 - is we will add one more key value pair
202:04 - inside the same dictionary so what we
202:07 - have to do is we have to use this
202:08 - variable name that is dict1 followed by
202:11 - open open and close square brackets and
202:13 - inside this we have to provide the key
202:16 - so let's say the key over here we
202:18 - provide India as the key and then the
202:20 - capital of India it is Delhi so over
202:23 - here the value that we have to provide
202:24 - is Delhi in this case so what we have
202:27 - done is we have provided the variable
202:29 - name and Then followed by the open and
202:31 - close square brackets and inside those
202:33 - brackets we have to provide the key in
202:35 - this case it is a string and then we
202:37 - have equal to followed by the value for
202:39 - this key which is again another string
202:42 - and then guys what we will do is let's
202:43 - say we want to print this entire
202:45 - dictionary once again so we will print
202:47 - this and over here we will say updated
202:50 - dictionary and then again dict1 so let
202:53 - me just save this file and try running
202:55 - this code now so as you can see we have
202:57 - the updated dictionary as we have Nepal
203:00 - Italy England and then the last element
203:02 - that we have added just now is the key
203:05 - that is India and Delhi that is the
203:07 - capital of India as the value so guys
203:09 - this is the way that we can add element
203:11 - ments inside the dictionary in the form
203:13 - of key value pairs now guys how do we
203:15 - change the value of a dictionary so we
203:17 - can again use the open and close square
203:20 - brackets in order to change the value
203:22 - associated with a particular key so guys
203:24 - let us check this with the help of
203:26 - example now so over here what we will do
203:28 - is let's say we have added this key
203:30 - value pair that is for India we have the
203:33 - capital that is Delhi but now let us say
203:35 - instead of having the capital as the
203:37 - value we can provide any city as the
203:40 - value for this country so so what we can
203:42 - do is again we can provide the variable
203:45 - name that is dict1 and then for this key
203:48 - that is India we want to update the
203:50 - value so let's say this time the value
203:52 - that we provide is Mumbai which is a
203:55 - very popular city in India so we provide
203:58 - Mumbai over here and then again we are
204:00 - printing this dictionary once again so
204:02 - let me just save this file now and try
204:03 - running this code so as you can see the
204:06 - updated dictionary first time it is
204:08 - showing India that is Delhi and then the
204:10 - second time that is updated dictionary
204:12 - it is showing India and this time the
204:14 - value it is Mumbai in this case so guys
204:17 - this is the way the same way is used in
204:19 - order to add the key value pair and in
204:21 - order to update the key value pair as
204:24 - well we have to make sure that whatever
204:26 - key we want to update it is K sensitive
204:29 - if let's say I provide the small I over
204:31 - here so in this case it will add a key
204:34 - value pair since this India is not
204:36 - matching with this India that's because
204:38 - over here we are having the capital I
204:40 - and over here we are having having the
204:41 - small I so let me save this file now and
204:44 - try running this code this time we are
204:45 - getting the five key value pairs in this
204:47 - case so India Delhi and then we have the
204:50 - small I and then Mumbai so guys make
204:52 - sure that whenever you are updating the
204:54 - key value pairs the key of the
204:56 - dictionary must exactly match with the
204:58 - existing keys that are present in the
205:00 - dictionary now guys how do we access the
205:02 - elements from the dictionary so in
205:04 - Python we use the keys to access their
205:06 - corresponding values so let us check
205:08 - this with the help of examples now over
205:10 - here so let's say we have these three
205:12 - key value pairs as the original
205:14 - dictionary now we only want to print the
205:16 - value of this particular key that is
205:18 - Nepal over here so what we will do is we
205:20 - will simply have the print statement and
205:22 - then we will say dict1 that is the
205:25 - variable name followed by open and close
205:27 - square brackets and we simply provide
205:30 - this key that is Nepal over here so
205:32 - inside the double codes we provide Nepal
205:34 - over here so let me just save this file
205:36 - and try running this code now so as you
205:38 - can see we are getting the value of this
205:40 - key that is Nepal similarly if we
205:42 - provide Italy as the key so I'll just
205:45 - replace Nepal by Italy over here so as
205:48 - you can see we are getting the value as
205:50 - Rome because the value for this key that
205:53 - is Italy is Rome over here so in this
205:55 - way we can easily access the values of
205:57 - the keys that we want to print now guys
205:59 - how do we remove the elements from the
206:01 - dictionary so we use the D statement to
206:04 - remove an element from the dictionary so
206:07 - what we will do is let's say I want to
206:09 - print the original dictionary over here
206:11 - here so we will say
206:14 - original
206:15 - dictionary and then colon and then we
206:18 - say dict1 now guys what we will do is
206:21 - let's say I want to delete this key
206:24 - value pair that is Nepal and Katmandu so
206:26 - we will use delete and Then followed by
206:29 - dict1 and then open and close square
206:32 - brackets and inside this we have the
206:34 - double codes and we simply provide the
206:36 - key over here that is Nepal so this
206:38 - statement will help us in order to
206:40 - delete this this particular key that is
206:42 - Nepal and Katmandu over here so let me
206:45 - just print this dictionary once again so
206:48 - over here we have updated dictionary and
206:52 - then let me just save this file now and
206:53 - try running this code so as you can see
206:55 - original dictionary we are getting all
206:57 - the three key value pairs that is Nepal
207:00 - Italy and England over here along with
207:02 - their values but the updated dictionary
207:04 - it is giving us only two key value pairs
207:07 - that is Italy that is Rome and for
207:09 - England we are getting London so over
207:12 - here this key value pair that is for
207:14 - Nepal we are having the Katmandu value
207:16 - this was removed because of this
207:18 - particular statement that we have used
207:20 - in order to remove the Nepal key and its
207:23 - value as well now guys as far as
207:25 - dictionary membership test is concerned
207:27 - we can test if a key is in a dictionary
207:30 - or not using the keyword in so in
207:32 - keyword is used in order to check the
207:34 - membership test so note that the
207:36 - membership test is only for the keys and
207:38 - not for the values so guys let's say
207:40 - over here I'll just remove these lines
207:42 - of code so for this original dictionary
207:45 - we want to find whether the key Italy is
207:47 - present inside the dictionary or not so
207:50 - we will say print and then we can simply
207:53 - say Italy and then we use the in keyword
207:57 - followed by dict1 so guys what exactly
208:00 - we are doing is we are checking whether
208:02 - this string it is present in dict1 or
208:04 - not so let me just save this file and
208:06 - try running this code so as you can see
208:08 - it is showing us true over here that's
208:10 - because the key itally is present inside
208:12 - the dictionary but the same thing is not
208:14 - applicable when we provide one of the
208:16 - values inside the dictionary so let's
208:18 - say we provide Rome as the value over
208:21 - here so Rome in dict1 so let me just
208:24 - save this file and try running this code
208:26 - so as you can see it is showing us false
208:28 - that's because Rome is the value and it
208:30 - is not one of the keys that are present
208:32 - inside the dictionary so guys we can
208:34 - also use the in keyword in order to
208:36 - check whether a particular key is
208:38 - present inside the dictionary and it is
208:40 - only applicable for the list of keys
208:42 - over here now guys we can also iterate
208:45 - through the dictionary by using the fall
208:47 - Loop over here so what we can do is
208:49 - simply we can use the for Loop in order
208:51 - to print all the key value pairs so over
208:54 - here we have the for keyword followed by
208:57 - let's say we provide the key variable
209:00 - name and then we provide the in keyword
209:02 - and Then followed by the variable name
209:04 - that is di1 and then colon so what we
209:07 - will do is we will simply have the print
209:09 - statement and then let's say we want to
209:11 - print the key value pirs in the
209:13 - particular format so we will say key in
209:16 - this case and Then followed by comma and
209:19 - then let's say we provide Arrow over
209:21 - here and then after this we provide the
209:24 - value so how do we access the value we
209:27 - provide the dict1 that is the variable
209:30 - name and then inside the open and close
209:32 - square brackets we provide the key in
209:34 - this case so guys basically what is
209:36 - happening over here is all the keys that
209:38 - are present inside this variable one at
209:41 - a time it will be assigned to this key
209:43 - and this key we are printing on the left
209:45 - hand side and then we are having the
209:47 - hyphen and the arrow symbol and then
209:49 - using this key variable we are getting
209:52 - the value from this dictionary in this
209:54 - case so guys let me just save this file
209:55 - now and try running this code so as you
209:58 - can see we are getting Nepal so Katmandu
210:00 - is the value then for the key Italy we
210:02 - are getting Rome as the value and for
210:04 - England we are getting the London as the
210:07 - value so guys this is the way that we
210:08 - can use the fall Loop in order to
210:10 - iterate through all the key value pirs
210:13 - inside the dictionary file reading in
210:15 - Python Programming so guys a file is a
210:17 - container in computer storage devices
210:20 - used for storing data so when we want to
210:23 - read from a file we need to open it
210:26 - first when we are done it needs to be
210:28 - closed so that the resources that are
210:30 - tied with the file are freed so guys we
210:32 - are going to check this with the help of
210:34 - example how we can open the file in
210:36 - order to read the content of the file
210:39 - and then after that we can close the
210:41 - file as well so basically in Python a
210:43 - file operation takes place in the
210:45 - following order first of all we have to
210:47 - open the file then the next thing is we
210:49 - read the file content and then after
210:51 - reading the file content we close the
210:54 - file so basically the first operation
210:55 - that is opening the file we can use the
210:58 - open method to open a file so as you can
211:00 - see for example over here we are
211:02 - providing the variable name on the
211:04 - leftand side and then on the right hand
211:06 - side we have the open function and then
211:09 - we have the path of theun file where the
211:11 - file is stored and then by default it is
211:14 - opened in the read mode we can also use
211:16 - the second parameter and provide the
211:19 - character that is R for reading the file
211:21 - and in order to write into the file we
211:23 - use W as the character over here in this
211:26 - case and then guys after this we can
211:28 - read the file in Python by using the
211:30 - read method so basically this variable
211:32 - that we had used on the left hand side
211:34 - we can use the same variable over here
211:36 - in order to call the function that is
211:39 - read and this will help help us in order
211:41 - to read the content into the variable
211:43 - that is read content and then in order
211:46 - to close the file we can simply use the
211:48 - close method so guys let us check all
211:50 - this with the help of example now over
211:52 - here so let's say we have the variable
211:54 - name that is file one and then followed
211:56 - by equal to and then we use the function
211:58 - name that is open in order to open the
212:01 - file and then inside the open and close
212:03 - parenthesis we are going to have the
212:06 - path of the file that we want to open so
212:08 - guys over here I have the test file for
212:11 - which I have written some content over
212:12 - here so we have these four lines inside
212:15 - the test file so what we can do is so
212:17 - guys we have to copy the entire path of
212:19 - this directory this is very important in
212:22 - whichever directory your file is you
212:24 - have to copy the entire path of that
212:26 - directory and paste this into your code
212:28 - so that your code can access that
212:30 - directory and the file that you want to
212:32 - read so basically over here inside the
212:35 - double codes we have to provide the
212:37 - directory path and Then followed by the
212:39 - name of the file that we want to read so
212:41 - over here I'll just copy the name of the
212:43 - file that is the test file and paste
212:46 - this over here followed by txt now guys
212:48 - it is very important that while you're
212:50 - copying the directory path you will be
212:52 - getting this back slashes over here so
212:54 - you have to provide another back slash
212:57 - since this one back slash is acting as
212:59 - the Escape character so you have to
213:01 - provide two back slashes over here every
213:03 - time that you are providing the
213:05 - directory path so I'll just provide
213:07 - extra back slashes over here at every
213:09 - instance in this directory path so guys
213:11 - this is our entire path over here
213:14 - followed by the test file that is the
213:15 - file name and then the extension that is
213:18 - txt now guys the second step is to read
213:21 - this file so the first step is completed
213:23 - that we have opened the file now the
213:25 - next step is to read the content so we
213:27 - will say read uncore content as the
213:31 - variable name followed by equal to we
213:34 - use this file one variable that we have
213:36 - used in order to open the file followed
213:39 - by Dot and then we have the read method
213:41 - so this method will help us in order to
213:43 - read the content into this read content
213:47 - variable and then guys simply we can
213:49 - print the read content variable so over
213:52 - here we can say read content so let me
213:54 - just save this file now and try running
213:56 - this code so as you can see we are
213:58 - getting all the four lines that are
214:00 - present inside the test file so if I
214:02 - open the test file over here once again
214:04 - it says this is a test line in a test
214:06 - file so the same line is printed over
214:09 - here on the console this is a test line
214:11 - in a test file similarly we have the
214:14 - other three lines it is this is another
214:16 - test line then we have this is third
214:18 - line and then this is fourth line in
214:20 - test file so all those lines that are
214:22 - present inside the test file are being
214:25 - printed over here on the console so guys
214:27 - this is one of the easiest way that you
214:29 - can open the file in a particular
214:31 - directory read the content by using the
214:34 - read function and then you can print the
214:37 - content of the file by using the print
214:38 - function now guys after these operations
214:41 - are completed what you have to do is you
214:43 - have to close the file which is very
214:44 - important so as you can see when we are
214:46 - done with performing operations on the
214:48 - file we need to properly close the file
214:51 - now closing a file will free up the
214:53 - resources that were tied with the file
214:56 - it is done using the close method in
214:58 - Python so basically after printing the
215:01 - content what we can do is simply we can
215:03 - provide file one followed by Dot and
215:05 - then we can have the close method being
215:08 - called so let me just save this file now
215:10 - and before running this code we will
215:12 - have another print function over here
215:14 - and we will print the statement that is
215:16 - file is closed in order to confirm that
215:19 - the control flow has reached the final
215:21 - statement over here in our code so let
215:24 - me just save this file now and try
215:25 - running this code so as you can see all
215:27 - the four lines are being printed over
215:29 - here from the file once again and then
215:31 - we are also getting file is closed being
215:33 - printed over here and in this way we
215:35 - have already closed the file by using
215:37 - the close function as well so guys this
215:39 - is the way you can read the content of
215:41 - the file just by using these four lines
215:44 - of code we can easily read the entire
215:47 - content of any of the file that we want
215:49 - to read based on our requirements file
215:51 - writing in Python Programming so guys in
215:54 - Python a file operation takes place in
215:57 - the following order so basically first
215:59 - of all we have to open the file then
216:01 - secondly we can write into the file that
216:04 - we have open and the last step is to
216:06 - close the file so these are the
216:08 - operations in this order in which we
216:10 - have to follow while writing the content
216:12 - into the file now there are two things
216:14 - we need to remember while writing to a
216:16 - file so first of all if we try to open a
216:19 - file that doesn't exist so a new file
216:21 - will be created in this case so guys we
216:23 - are going to check this with the help of
216:25 - example as well and in the second case
216:28 - if a file already exist then its content
216:31 - is erased and new content is added to
216:33 - the file again so Guys these are the two
216:36 - important things that you should know
216:37 - while writing into the file if the file
216:39 - is not already present then a new file
216:42 - will be created and if the file is
216:44 - already present then the existing
216:46 - content will be removed and the new
216:48 - content will be added into the file so
216:50 - guys the first operation is opening the
216:52 - file over here in which case we can use
216:54 - the open method to open the file and
216:57 - this is the example we have the variable
216:59 - on the left hand side and then we have
217:01 - the open method followed by the name of
217:04 - the file over here along with the entire
217:06 - path if it is present in some other
217:08 - directory and Then followed by the
217:10 - second parameter that is W which stands
217:12 - for the right mode so guys let us check
217:14 - this with the help of example now over
217:16 - here so what we will do is we will say
217:18 - file one which is the variable name
217:21 - followed by equal to and then we have
217:23 - the open method in this case so we have
217:25 - to provide the name of the file along
217:27 - with the directory path inside the
217:29 - parenthesis and the double codes over
217:31 - here so what we will do is we are going
217:33 - to use this directory over here in order
217:36 - to create a new file and write the
217:38 - content into the file so guys over here
217:40 - there are only two files that is Python
217:42 - tutorial and test file we are going to
217:45 - create a third file that is output.txt
217:48 - in which we are going to write the
217:50 - content by using the code over here so
217:52 - basically I'm going to paste the entire
217:54 - directory path and in order to avoid any
217:57 - errors I'll just use the double back
217:59 - slashes over here since these are the
218:01 - Escape characters so we provide the
218:03 - double back slashes and then at the end
218:06 - we have to provide the name of the file
218:08 - so I'll simply provide output txt in
218:11 - this case and then guys the second
218:13 - parameter needs to be the writing mode
218:15 - so over here inside the double quotes we
218:17 - can say w which means we are opening the
218:20 - file in the right mode in this case now
218:22 - guys we have completed the first step
218:24 - now what is the next step writing into
218:26 - the file so basically writing in a file
218:28 - in a python so after we open a file we
218:31 - use the write method to write the
218:33 - content in the file and this is the way
218:35 - as you can see in this example we have
218:37 - the variable name that is file one
218:39 - followed by Dot and then we have the
218:41 - write method and then the content that
218:44 - we want to write into the file so guys
218:46 - basically what we will do is on the
218:48 - second line over here we will say file
218:50 - one followed by Dot and then we have the
218:53 - write method this write method can be
218:55 - used in order to write the content into
218:57 - the file and it takes certain parameters
218:59 - the parameters will be the string or the
219:01 - integer numbers that you want to print
219:04 - or store inside the file so guys let's
219:06 - say I want to provide this is first line
219:11 - in
219:13 - output file so guys this is the content
219:16 - that we want to write into the file and
219:19 - this is the way that we can use the
219:21 - write function in order to write the
219:23 - content into the file and it takes the
219:25 - parameter as the string which we want to
219:27 - store inside the file now after writing
219:29 - what we have to do is we have to close
219:31 - the file so when we are done with
219:33 - performing operations on the file we
219:35 - need to properly close the file closing
219:38 - a file will free up the resources that
219:40 - tied with the file it is done using the
219:42 - close method in Python so as you can see
219:45 - in this example we have file 1. close so
219:48 - over here we can simply provide file 1.
219:52 - close in this case and then open and
219:54 - close parenthesis it doesn't take any
219:57 - parameters over here so guys let me just
219:59 - save this file now before running this
220:00 - code I'll show you the directory once
220:02 - again we have only two files over here
220:04 - that is Python tutorial and test file we
220:07 - are going to have a third file over here
220:09 - that is the output .txt that will be
220:11 - created after execution of this code so
220:14 - before running this code what I will do
220:16 - is I'll have the print statement so that
220:18 - we get the confirmation that the code is
220:20 - executed so we will say file
220:24 - created
220:27 - successfully so this is the statement
220:29 - that will be printed after all the lines
220:32 - of code are executed so guys let me just
220:34 - save this file now and try running this
220:35 - code so as you can see we are getting
220:37 - file created successfully and if we go
220:40 - inside the directory now as you can see
220:42 - we are getting the third file over here
220:43 - that is the output in this case so if we
220:46 - open this file as you can see this is
220:48 - first line in output file and this is
220:51 - what we have printed by using our
220:52 - program this is first line in output
220:55 - file the same statement is being printed
220:57 - over here it is being stored in our
220:59 - output file and guys this is the way
221:01 - that we have created a new file by using
221:04 - the python code in a particular
221:06 - directory that we wanted and also return
221:09 - the content into the file by using the
221:12 - two methods that is first of all we have
221:14 - used the open function in order to open
221:17 - the file in the right mode and then we
221:19 - have used the right function in order to
221:21 - write the content into the file now guys
221:24 - let us say we have another scenario in
221:26 - the same file we want to update the
221:28 - first line to this is first line and
221:31 - I'll just remove this in output file
221:33 - content over here so we have the short
221:35 - message that is this is first line and
221:37 - then what I will do is we have another
221:40 - statement so again we will have the file
221:42 - 1. write and then we can say this is
221:45 - second line in this case so guys we are
221:48 - having the two lines over here now and
221:50 - this will act as a kind of update now
221:52 - that's because we already have this
221:54 - output.txt file in this directory and
221:57 - now what we are doing is simply we are
221:59 - opening it once again and these lines
222:02 - will be stored in the file and guys
222:04 - remember that while you are opening the
222:06 - existing file what we already saw is the
222:09 - content is erased and the new content is
222:11 - added to the file so basically these two
222:13 - lines will be printed inside the
222:15 - output.txt file and now what we will do
222:18 - is for this print function we will say
222:20 - file updated successfully so guys let me
222:23 - just save this file now before running
222:25 - this code I'll show you that file once
222:27 - again over here we have the output file
222:29 - I'll just open this file we are having
222:31 - this is first line in a output file so
222:34 - let me just close this now and what we
222:36 - will do is we will run this code so as
222:39 - you can see file updated successfully we
222:41 - are getting this message we'll go to the
222:43 - directory to check what is the content
222:45 - so as you can see both the statements
222:47 - are getting printed over here this is
222:49 - first line and Then followed by this is
222:51 - second line now guys what happened is
222:53 - both the lines have continued on the
222:55 - same line but we can have them on the
222:57 - separate lines as well so what we can do
222:59 - is in our code we can simply provide the
223:01 - slashing character at the end of the
223:04 - first line over here so that the control
223:06 - flow goes to the next line while
223:08 - printing this statement that is this is
223:10 - second line so guys let me just save
223:11 - this file and try running this code now
223:13 - once again so it says file updated
223:15 - successfully we come back over here in
223:18 - the directory we open the output file
223:20 - now as you can see this is first line
223:23 - and then we have on the other line This
223:25 - is second line over here so guys in this
223:27 - way we can easily write the content in
223:29 - the file we can also have the multiple
223:31 - lines of content being stored in the
223:34 - file that we opened by using the Python
223:36 - programming language guys this concept
223:38 - of reading and writing the files are
223:40 - very important as far as your project
223:41 - requirements are concerned so please
223:43 - make sure that you practice on your own
223:45 - so that on different inputs you get
223:46 - different output apart from this can we
223:49 - use the with open syntax in order to
223:52 - write a file so you can try this as a
223:54 - homework for you you can watch my
223:56 - previous video as well in which I have
223:57 - explained you how we can use the with
223:59 - open syntax in order to read the file
224:02 - and in which case we don't have to close
224:04 - the file that's because it is
224:06 - automatically handled by this with open
224:08 - Syntax for us so please read this as a
224:10 - homework for you and comment in the
224:12 - comment section below whether you were
224:14 - able to use the with open syntax in
224:16 - order to write into the file exceptions
224:19 - in Python Programming so guys an
224:21 - exception is an unexpected event that
224:24 - occurs during the program execution so
224:26 - let's say for example if we have this
224:28 - divide by zero variable and then we do
224:31 - the assignment in such a way that we
224:33 - divide this number that is five by 0
224:36 - then we get divide by 0 exception that's
224:38 - because this is a runtime exception and
224:40 - we cannot divide any number by zero so
224:43 - the above code causes an exception as it
224:46 - is not possible to divide a number by
224:48 - zero errors that occur at runtime after
224:51 - passing the syntax test are called
224:54 - exceptions or logical errors so guys
224:56 - basically there will be many exceptions
224:58 - that you will come across when you are
225:00 - going to write python programs and these
225:02 - exceptions are going to be the runtime
225:04 - exceptions after passing the syntax test
225:06 - that we have already seen in our vs code
225:09 - editor so basically these exceptions
225:11 - occur when we try to open a file for
225:14 - reading that does not exist that is file
225:16 - not found error so basically this is one
225:19 - of the exceptions in the Python
225:20 - programming language in which case if
225:22 - let's say you are trying to open a file
225:24 - which is not present in the directory
225:27 - then we will have file not found error
225:29 - over here then if we try to divide a
225:31 - number by zero then we will get zero
225:33 - division error and then again if we try
225:36 - to import a module that does not exist
225:38 - then we are going to get the import
225:40 - error and so on so basically there are
225:42 - many built-in exceptions that we can see
225:45 - by using this print statement inside the
225:47 - directory we have this locals and then
225:49 - we specify this builtins in order to get
225:52 - the list of exceptions that is already
225:54 - built in in the Python programming
225:55 - language so this we are going to check
225:57 - with the help of example as well what we
225:59 - are going to do is we are going to see
226:01 - how the exception occurs in the Python
226:03 - program so over here let's say we have
226:05 - the variable that is number over here
226:07 - and we have the number that is five
226:09 - divided by 0 so in this case we are
226:12 - dividing a number by zero syntactically
226:15 - this is correct over here vs code will
226:17 - not throw any error but during the run
226:19 - time we will get the error which we call
226:21 - it as the exception so over here when we
226:24 - print this number so we say value of
226:28 - number is followed by colon and then
226:31 - let's say we provide this number
226:33 - variable so let me just save this file
226:35 - now and try running this code so as you
226:38 - can see we are getting this Z Z division
226:40 - error division by zero which is not
226:42 - possible we cannot divide any number by
226:45 - zero now let me show you another
226:47 - exception let's say we are going to open
226:49 - a file in this particular directory and
226:51 - the file name is test one which doesn't
226:53 - occur inside this directory so let me
226:56 - just copy this directory path and we
226:58 - will open that file which is test one
227:00 - which is not present so over here we
227:02 - provide the variable name is file one it
227:04 - is equal to we say open and then with
227:08 - this we have the parameter that is the
227:10 - directory path we have just copied over
227:12 - here we will just Escape these back
227:14 - slash characters so that we don't get
227:16 - any error over here for the back slashes
227:19 - and then at the end what we are going to
227:21 - do is after this we are going to provide
227:23 - test 1.txt now this file name as I have
227:27 - showed you over here it is not present
227:29 - test one is not present over here so we
227:32 - are trying to open that by using this
227:34 - test 1.txt file name so now what we will
227:37 - do is simply we will save this file
227:39 - enter our running this code now so as
227:41 - you can see file not found error is
227:43 - being displayed no such file or
227:45 - directory and then this file name is
227:47 - being mentioned over here what if we
227:49 - provide the correct file name let's say
227:50 - I provide this test file as the name of
227:52 - the file so I'll just copy this file
227:54 - name and paste this over here at the end
227:57 - instead of test one so I'll just paste
227:59 - this over here and then let me just save
228:01 - this file now and I running this code so
228:03 - now as you can see nothing happens we
228:04 - are not printing anything but there is
228:07 - no exception that is being printed over
228:09 - here on on the terminal that's because
228:11 - this particular file name is actually
228:13 - present and hence there is no file not
228:15 - found error that is being displayed over
228:17 - here like how we have seen previously
228:19 - with the test 1.txt file so Guys these
228:22 - are certain exceptions that might occur
228:24 - when you are going to work with the
228:25 - python projects and such exceptions are
228:28 - inevitable we cannot avoid them but we
228:30 - can handle them so we are going to see
228:33 - exception handling in the upcoming
228:34 - videos as well how we are going to
228:36 - handle them but it is very important for
228:38 - you to know that these exceptions might
228:40 - occur when you're going to work with the
228:42 - Python programming language now guys let
228:44 - us see the list of all the built-in
228:46 - exceptions that are present inside the
228:48 - Python programming language so I'll just
228:50 - copy this line of code and then we'll
228:52 - paste this over here so as you can see
228:54 - this is a print statement and inside
228:55 - this we have the DI function and inside
228:58 - that we also have the locals function
229:01 - and then we provide the builtins
229:03 - attribute over here so let me just save
229:05 - this file now and try running this code
229:07 - as you can see we have got the list of
229:09 - all the exceptions that are present
229:11 - inside the Python programming language
229:13 - so there are multiple errors that might
229:14 - occur which includes arithmetic error
229:17 - then we have assertion error attribute
229:19 - error base exception so there are many
229:21 - errors that you can see over here file
229:23 - not found error this is one of the
229:25 - exceptions that we have just checked and
229:27 - then we also have this zero division
229:29 - error which we just saw when we divide
229:31 - any number by zero so guys there are
229:33 - multiple exceptions that might occur
229:35 - which are already built in inside the
229:37 - Python programming language and you can
229:39 - prce prce on your own to see which
229:40 - exception occurs on which particular
229:43 - input exception handling with try accept
229:46 - block so guys basically it is important
229:48 - to handle exceptions that we have
229:50 - already seen in Python we use the try
229:53 - accept Block in order to handle the
229:55 - exception and this is the syntax in
229:57 - order to handle the exceptions in Python
229:59 - so basically first of all we have the
230:01 - try keyword followed by the colon and
230:04 - then we have the code that may cause the
230:06 - exception for example we can have a
230:09 - number being divided by zero in which
230:11 - case Zero division error might occur
230:13 - which is the exception and not only the
230:15 - zero division exception but if any
230:18 - exception that occurs inside this Tri
230:20 - block we can have the except block just
230:23 - following this Tri Block in order to
230:25 - catch that exception so basically inside
230:27 - this accept block we have the code in
230:30 - order to run when the exception occurs
230:32 - so guys this we are going to check with
230:34 - the help of examples now so over here in
230:36 - the vs code what we will do is let's say
230:38 - we want want to divide a number by zero
230:41 - so we want to provide that code inside
230:43 - the tri block so we have this try
230:45 - keyword followed by the colon and then
230:48 - over here what we will do is we will say
230:50 - number variable it is equal to 10 / 0 so
230:55 - guys if we try to run this code over
230:57 - here 10 divided 0 for which the zero
230:59 - division error will occur which is one
231:02 - of the exceptions in the Python
231:03 - Programming so what we have to do is we
231:05 - have to catch that exception inside the
231:07 - except block so here what we have to do
231:10 - is we have to provide the accept keyword
231:13 - followed by the colon and then we can
231:15 - have the code in order to handle that
231:17 - exceptions over here we can simply
231:19 - provide the print statement and then we
231:21 - can say number cannot be divided by zero
231:27 - over here so guys this is the code that
231:29 - we are going to execute if the number is
231:32 - getting divided by0 and the zero
231:34 - division error is occurring so let me
231:36 - just save this file now and try running
231:37 - this code so as you you can see number
231:39 - cannot be divided by zero this line of
231:42 - statement is getting executed over here
231:44 - and this is the line that is getting
231:46 - printed now guys what would have
231:48 - happened if we don't have this try and
231:49 - accept block so let us just comment out
231:52 - these blocks over here so instead of
231:54 - this we are just having number it is
231:56 - equal to 10 / 0 and then let me just
231:59 - comment out this line as well so number
232:01 - is equal to 10 / by zero only this line
232:04 - of code is there let me just save this
232:06 - file and try running this code as you
232:08 - can see we are getting zero division
232:10 - error division by zero and this is the
232:12 - exception that we are getting on the
232:14 - terminal so over here since we have not
232:16 - properly handled this exception this is
232:18 - the way that we are getting the output
232:20 - but we can have the proper output in
232:22 - this way like we can have a particular
232:25 - statement being printed by using this
232:27 - try and accept block so over here we
232:29 - have just provided the try block and
232:31 - after this we have provided the accept
232:33 - block as well we have provided a
232:35 - beautiful statement that is a user fry
232:38 - statement with which says number cannot
232:40 - be divided by 0er and when we just save
232:42 - this file and try running this code now
232:44 - it says number cannot be divided by 0 if
232:47 - the exception is occurring over here
232:49 - inside the tri block now guys let's say
232:50 - if there is no exception occurring
232:52 - inside the tri block so still the print
232:55 - statement will be executed let us check
232:57 - that so over here instead of 10 / 0 we
233:00 - will say 10 / 2 in which case the answer
233:03 - will be five and that will be stored in
233:05 - this number variable and there is no
233:07 - exception that is occurring over here on
233:09 - this line of code so let me just save
233:11 - this file now what we will do is as a
233:13 - confirmation we will come out of this
233:15 - try and accept blocks and over here we
233:17 - will say end of code so we can just
233:21 - confirm that this is the line that is
233:23 - getting executed at the end of the code
233:26 - so over here let me just save this file
233:28 - enter I running this code now as you can
233:30 - see end of code is getting displayed now
233:32 - that is because there is no zero
233:34 - division error that is occurring inside
233:36 - the tri block that is because we have
233:37 - changed the expression from 10 / 0 to 10
233:41 - / 2 now guys there is another thing that
233:43 - you can do catching the specific
233:45 - exceptions in Python so as you can see
233:47 - this is the example over here we have
233:49 - the tri block and then let's say we have
233:51 - the variable name as even numbers and
233:54 - this is the python list as you can see
233:55 - we have 2 4 6 8 which is the list of
233:58 - numbers all are even numbers and what we
234:01 - are trying to do is we are going to
234:02 - print the even numbers with the index
234:05 - five over here but guys as you can see
234:07 - this is the index zero then we have
234:09 - index one then we have index two and
234:11 - then three so three is the final index
234:13 - the total length of the list is four and
234:16 - three is the final index that we can
234:18 - access but we are trying to access the
234:20 - index that is five so basically we
234:22 - should get the index out of bound error
234:24 - over here but we can also specify the
234:27 - different exceptions that we have seen
234:29 - so far so basically while providing the
234:32 - accept keyword we can provide the zero
234:34 - division error over here which will say
234:36 - denominator cannot be zero and then we
234:38 - we also have the accept keyword followed
234:40 - by the index error so in this case since
234:43 - we are having the multiple accept logs
234:46 - it depends on the control flow the
234:47 - control flow will check that which type
234:50 - of exception is occurring and based on
234:52 - that exception it will try to match that
234:54 - exception is this exception related to
234:56 - zero division error no in this case so
234:59 - is it matching with the index error yes
235:02 - since it is related to the index that we
235:04 - are trying to access which is not
235:06 - possible so it will print this statement
235:08 - that is index out of bound so let us
235:10 - check this block of code over here I'll
235:12 - just copy this and paste this in the VSS
235:14 - code since I'm little bit lazy in order
235:16 - to type all this code once again so over
235:18 - here let me just save this file and try
235:20 - running this code now as you can see it
235:22 - says index out of bound that's because
235:24 - the exception that is matching inside
235:27 - this Tri block is the index error and
235:30 - this is the print statement that we are
235:32 - supposed to print if there is an index
235:34 - error that is occurring now guys let's
235:36 - say you want to print this denominator
235:37 - cannot be zero statement so what we have
235:40 - to do is we have to make sure that
235:43 - inside the tri block there is a divide
235:45 - by0 expression so what we will do is
235:47 - over here I'll just remove these lines
235:49 - of code and we will simply say number it
235:51 - is equal to 10 / 0 so in this case
235:55 - divide by zero expression is occuring
235:57 - and that is why we will get the zero
235:59 - division error and in this case we
236:00 - should get this statement that is
236:02 - denominator cannot be zero so let me
236:04 - just save this file now and try running
236:06 - this code as you can see denominator
236:08 - cannot be zero statement is getting
236:10 - printed so guys it depends on you you
236:12 - can have the specific exceptions being
236:14 - specified over here and each exception
236:17 - will be handled differently this is just
236:19 - a print statement that we have included
236:21 - over here you can have any code inside
236:23 - these except blocks that you want to use
236:26 - based on your requirements of the
236:27 - project but guys remember that whatever
236:29 - matching exceptions that is occurring
236:31 - inside the tri block the control flow
236:33 - will try to match with those exceptions
236:36 - one at a time and once it matches with a
236:38 - particular accept block it will try to
236:41 - execute those lines of code inside that
236:43 - block now guys let us move to another
236:45 - task over here python try with lse
236:47 - Clause so basically in some situations
236:49 - we might want to run a certain block of
236:52 - code if the code block inside try runs
236:55 - without any errors so for these cases
236:57 - you can use the optional else keyword
236:59 - with the try statement so guys what
237:01 - happens is sometimes there will be no
237:03 - errors that are occurring over here I'll
237:04 - just remove these lines of code so I'll
237:07 - just keep one accept block over here and
237:09 - I'll just remove this exception as well
237:11 - that is zero division error so what we
237:14 - are doing over here is denominator
237:15 - cannot be zero I'll just save this file
237:17 - and try running this code so this
237:19 - denominator cannot be zero is getting
237:21 - printed over here but guys what if this
237:24 - denominator is not zero let's say if I
237:26 - provide the denominator as two so in
237:28 - this case this statement will not get
237:30 - printed that's because there is no
237:32 - exception that is occurring and if there
237:34 - is no exception occurring no code in the
237:36 - accept block over here will get get
237:39 - executed but what if we want to execute
237:41 - some line of code so over here we can
237:44 - simply provide the else part so
237:46 - basically what happens is let's say
237:48 - inside the tri block if we don't have
237:50 - any exception that is occurring so no
237:52 - block of code that is inside the accept
237:55 - block will get executed but let's say in
237:57 - the end if we have this else block so
238:00 - whatever code we provide over here it
238:01 - will get executed only when there is no
238:04 - exception that is occurring over here
238:06 - inside the tri block so over here what
238:08 - we will do is we will say print we will
238:10 - simply say inside else block so guys
238:14 - this is the code let me just save this
238:16 - file now and try running this code as
238:18 - you can see there is no denominator
238:19 - cannot be zero that is getting printed
238:22 - but over here we are getting inside lse
238:24 - block that's because since there is no
238:26 - exception that is occurring the control
238:28 - flow is not going inside the except
238:30 - block but it sees that we have the else
238:32 - block over here so it executes those
238:34 - lines of code inside the lse block now
238:37 - guys what if there is an except ction
238:38 - that is occurring so let's say if we
238:40 - provide this s 10 / 0 as the expression
238:44 - so let me just save this file now this
238:46 - line should get printed over here but
238:48 - whether this lse part will get executed
238:50 - let us check that so let me just run
238:52 - this code once again as you can see
238:54 - denominator cannot be zero is getting
238:56 - printed but the code in the lse part is
238:58 - not getting printed so that's because
239:00 - since the exception has occurred we are
239:02 - getting into the accept block but not
239:04 - into the else block so guys this is very
239:07 - important in case the except block is
239:09 - not getting executed we can have the
239:11 - else Block in order to execute some
239:13 - lines of code that you want to execute
239:16 - now let us move to another task over
239:17 - here we have something called as python
239:19 - try finally so guys this is another
239:21 - important concept as far as exception
239:23 - handling in Python is concerned so
239:26 - basically in Python the finally block is
239:28 - always executed no matter whether there
239:31 - is an exception or not so the finally
239:33 - block is optional and for each Tri block
239:36 - there can be only one final block so
239:39 - guys what we will do is basically the
239:41 - understanding behind the finally block
239:43 - is irrespective of whether there is an
239:45 - exception that is occuring or not the
239:47 - code in the finally block will be
239:49 - executed so over here we will simply
239:51 - have the finally keyword followed by the
239:53 - colon and then we will say inside
239:56 - finally blog so over here we will simply
239:59 - have double codes and inside this we
240:01 - will say inside finally block so guys
240:06 - first of all we will check when there is
240:07 - an except that is occurring this line of
240:10 - code will get printed and we will not go
240:12 - inside the lse part but the control flow
240:14 - will go inside this finally block over
240:16 - here so let me just save this file now
240:18 - and try running this code so as you can
240:20 - see denominator cannot be zero which is
240:22 - this line of statement which is getting
240:23 - printed and then it is not going in the
240:25 - lse part but it is going in the finally
240:27 - part so it says inside finally blog so
240:30 - over here exception has occurred and the
240:33 - control flow is going in the finally
240:34 - block now let us say there is no
240:36 - exception that is occurring we say 10 /
240:39 - 5 over here so let me just save this
240:41 - file now and try running this code it
240:43 - says inside L's block so basically there
240:46 - is no exception that is occurring so the
240:48 - control flow is not going inside this
240:50 - except block but it is going inside the
240:53 - else block so over here as I have told
240:55 - you if the control flow doesn't go
240:57 - inside the accept block and if there is
240:59 - a else block basically this line of code
241:01 - will get executed and then at the end we
241:04 - have the finally block which is getting
241:06 - executed as you can see inside finally
241:08 - block so irrespective whether there is
241:10 - an exception that is occurring or not
241:12 - inside the tri block the finally block
241:15 - will be executed every time now guys
241:17 - where this thing is important basically
241:20 - let's say if you have the database
241:21 - connection or if you have file opened so
241:24 - you can close that file or close that
241:26 - database connection inside the finally
241:28 - block over here after carrying out your
241:30 - operations in the tri block which might
241:32 - have certain exceptions that might occur
241:35 - during the run time so guys during such
241:37 - instances the fin finally block becomes
241:39 - very important in order to execute those
241:41 - lines of code irrespective whether that
241:44 - was an exception that has occurred
241:46 - inside the tri block or not object
241:48 - oriented programming in Python so guys
241:50 - we are going to check the classes and
241:52 - objects with the help of examples python
241:55 - is a versatile programming language that
241:57 - supports various programming Styles
241:59 - including objectoriented programming
242:01 - through the use of objects and classes
242:04 - which we are going to see with the help
242:05 - of examples as well now in object is any
242:08 - entity that has attributes and behaviors
242:11 - so for example a parrot is an object and
242:15 - it has multiple attributes as you can
242:17 - see there are multiple attributes that
242:19 - can be present which is name then we
242:21 - have age color and so on apart from that
242:24 - it also has certain Behavior such as
242:26 - whether it can dance or not so dancing
242:28 - is one of the behavior whether it can
242:30 - sing or not so singing is another
242:32 - Behavior now I'm not sure whether a
242:34 - parrot can really dance or not but these
242:36 - are certain behaviors that we can
242:37 - consider in order to understand classes
242:40 - and objects now guys similarly a class
242:42 - is a blueprint for that object so
242:44 - basically these objects are having the
242:47 - attributes and behaviors and the values
242:49 - will be stored in these objects but the
242:51 - blueprint will be present inside the
242:53 - class so basically this class can be
242:55 - treated as a template which has certain
242:58 - attributes and behaviors being defined
243:00 - over here and we can create multiple
243:02 - objects related to that class so we are
243:04 - going to check with the help of example
243:06 - how do we create a class parot with the
243:08 - attributes as name and age so let us
243:10 - move to the VSS code over here the very
243:12 - first thing that we have to create is
243:14 - the class so basically we have to
243:16 - provide the class keyword followed by
243:18 - the name of the class so let's say the
243:21 - parot is the name of the class over here
243:23 - and then we have a colon and then we can
243:25 - have different attributes so one of the
243:27 - attributes is name over here we will
243:29 - assign it with a empty string and then
243:31 - we have age as well we will assign it as
243:34 - zero over here as the initial value now
243:36 - Guys these are the two attributes that
243:38 - we have defined for this class that is
243:40 - parro now we can create different
243:42 - objects out of this class now this class
243:45 - is acting as a blueprint or we can say
243:47 - as a template in order to create
243:49 - multiple objects so we will come out of
243:51 - this class and what we will do is we
243:53 - will create the objects for this class
243:56 - so let's say we have parot one followed
243:58 - by equal to operator and then we can
244:00 - simply provide the name of the class
244:02 - that is parot followed by the open and
244:04 - close parenthesis so this is the way
244:06 - that we can initially an object for this
244:09 - class that is parent and then we can use
244:12 - this object in order to initialize these
244:14 - attributes that is name and age so over
244:17 - here what we will do is we will use this
244:19 - parot one object followed by Dot and as
244:22 - you can see we are getting this name and
244:24 - age being Auto suggested by the VSS code
244:27 - that's because we have already defined
244:29 - these attributes inside this blueprint
244:31 - that is class parot so over here we are
244:33 - going to provide the name as the name of
244:36 - the parrot one object so let's say we
244:38 - provide the name as blue over here and
244:41 - then let's say we also want to provide
244:42 - the age of this parrot object so again
244:44 - we will provide parot one followed by
244:47 - Dot and then we have the age attribute
244:49 - let's say it is 2 years old so we have
244:51 - two as the parrot's age now guys let's
244:53 - say we want to create another object
244:56 - with another name and age so again we
244:58 - will copy these lines of code and paste
245:00 - this over here what I will do is instead
245:03 - of parot 1 we will say parot 2 because
245:06 - this is another object so this this is
245:08 - the second object that we are creating
245:10 - by using this parrot class and over here
245:12 - again we will say parot 2. name and
245:15 - parot 2. AG so let's say the name of the
245:18 - parot 2 is Vu and its age is five over
245:21 - here so 5 years so guys over here we
245:23 - have created two objects for this class
245:25 - that is parro similarly we can create
245:28 - any number of objects that we want it's
245:30 - very important to note that while
245:32 - creating the objects we provide this
245:34 - variable name on the left hand side and
245:36 - on the right hand side we provide the
245:38 - name of the class followed by the open
245:39 - and close parenthesis and then we can
245:42 - call the different attributes of that
245:44 - class in order to initialize them now
245:46 - guys after these objects are being
245:47 - initialized with their names and age we
245:50 - can simply print them on the console so
245:52 - what we can do is we can have the print
245:54 - statement with the formatting being
245:56 - enabled so over here inside the print
245:58 - statement we can have the F followed by
246:00 - the double codes and then what we can do
246:02 - is open and close curly braces inside
246:05 - this we can have the parent one do name
246:07 - over here is and Then followed by curly
246:10 - braces parot 1. Ag and then we can have
246:15 - ear B so guys basically what is
246:17 - happening over here is inside the open
246:19 - and close curly braces we can provide
246:22 - the variable names in order to get their
246:24 - values being printed inside the print
246:27 - statement so this parot 1. name will
246:29 - give us the value of this variable that
246:31 - is blue over here and then followed by
246:33 - is and then again we will get parot 1.
246:37 - AG which which is two in this case so
246:39 - blue is 2 years old so this is a
246:42 - statement that should get printed and
246:44 - then similarly we can copy this line of
246:46 - code and paste this over here and
246:47 - instead of parot one we can simply say
246:50 - parot 2 so we have parot 2. name and
246:53 - then parro 2. AG so guys let me just
246:55 - save this file now and try running this
246:57 - code as you can see blue is 2 years old
247:00 - this is what is getting printed by using
247:02 - the first print statement and over here
247:05 - again we are getting Vu is 5 years old
247:08 - so this is the second print statement
247:09 - that is helping us in order to print
247:11 - this particular statement so guys this
247:13 - is the way that we can easily create a
247:15 - class in this case we have created the
247:17 - parot class and we have two attributes
247:19 - that is name and age you can have any
247:21 - number of attributes for the class based
247:23 - on your requirements and apart from that
247:25 - while creating the objects you can have
247:27 - the values for those attributes based on
247:29 - those particular individual objects and
247:32 - then you can call those attributes by
247:34 - using the objects that you have just
247:35 - initialized by using this St statement
247:38 - that is the object on the left hand side
247:40 - followed by equal to operator and then
247:42 - we have the class name followed by the
247:43 - open and close parenthesis this is
247:46 - called instantiating of the object or we
247:48 - can also call it as initializing an
247:50 - object in Python Programming inheritance
247:52 - in Python Programming so guys
247:54 - inheritance is a way of creating a new
247:57 - class for using details of an existing
247:59 - class so this we are going to check with
248:01 - the help of examples as well the newly
248:03 - formed class is a derived class which is
248:06 - also called as a child class and
248:08 - similarly the existing class is a base
248:10 - class or the parent class so guys what
248:13 - we are doing over here is we are already
248:15 - creating a parent class that is also
248:17 - called as a base class over here and
248:19 - then we also create a child class for
248:22 - which the attributes are derived from
248:24 - the parent classroom here and this is
248:26 - what is called as The Inheritance now
248:28 - what will be inherited all the
248:30 - attributes provided that they are public
248:32 - along with the methods will be inherited
248:34 - by the child class so guys let us check
248:37 - python inheritance with the help of
248:38 - example now over here so let us switch
248:40 - to the vs code first of all we will
248:42 - create the parent class so let us say we
248:44 - have the class that is called as animal
248:46 - over here and inside this animal class
248:49 - we will Define two functions that is eat
248:51 - and sleep so we will have DF keyword
248:54 - followed by eat that is function one and
248:57 - then inside the parenthesis we are going
248:59 - to have the parameter that is self
249:01 - always remember guys whenever we are
249:03 - calling the function inside the class it
249:05 - is going to take a single parameter
249:07 - which is going to be the object by
249:09 - default so we need to catch that object
249:11 - with any name as a parameter over here
249:13 - so we have given the name of this
249:15 - parameter as over here so that we can
249:17 - identify that this is the object and
249:19 - then we can use this object as well in
249:21 - order to access its attributes and
249:24 - inside this eat function we are going to
249:26 - have a simple print statement and we
249:28 - will say I can eat so guys this is a
249:31 - statement that is going to be printed
249:33 - when we call the eat function using the
249:35 - animal object and then similarly we will
249:37 - have the Sleep Method as well so we have
249:40 - DF keyword followed by Sleep Method and
249:43 - then again we will have the parameter as
249:45 - the self which will be passed by default
249:47 - and then inside this again we are going
249:49 - to have the print statement and we can
249:51 - say I can sleep so Guys these are two
249:54 - methods or functions that we have
249:56 - defined inside the parent class that is
249:58 - the animal class now guys how do we
250:00 - inherit these methods to another class
250:03 - so let's say we have another class over
250:05 - here which will be a child class of the
250:06 - animal class CL so we are going to have
250:09 - another class and let's say the name of
250:11 - the class is dog over here and then in
250:13 - order to have its attributes and
250:15 - functions of the super class that is the
250:17 - animal after this name of the class that
250:20 - is dog we have to provide open and close
250:23 - parenthesis and inside this parenthesis
250:25 - we have to provide the name of the super
250:27 - class that is animal in this case so
250:30 - this particular class that is animal we
250:31 - want to inherit its attributes and
250:34 - functions inside the child class that is
250:36 - dog so this is the way that we inherit
250:39 - the super class and now we can have a
250:41 - colon over here and then we can have the
250:43 - attributes and the functions of this
250:45 - class that is dog class separately so
250:47 - over here we are going to have the DF
250:49 - keyword followed by let's say I'm simply
250:52 - going to have the display method over
250:54 - here and it is going to take one
250:56 - parameter that is self and then we are
250:58 - simply going to print that we are inside
251:02 - doc class so this particular statement
251:05 - will be printed whenever we are going to
251:07 - call this display method over here so
251:09 - guys this is the way that python
251:10 - inheritance Works what I will do is I'll
251:13 - just zoom out little bit so that you can
251:14 - see the entire code at once so over here
251:17 - we have created the super class that is
251:19 - the animal class and then we are
251:21 - creating another class that is called as
251:23 - the child class and after the name of
251:25 - the child class we are providing the
251:27 - name of the super class over here that
251:29 - is the parent class inside the open and
251:31 - close parenthesis and what this will do
251:34 - is the eat and sleep methods will be now
251:36 - available inside the dog class as well
251:39 - so guys why this is important so let us
251:41 - come out of this class now and what we
251:43 - will do is let us create the object of
251:46 - this class that is the dog class so what
251:48 - I will do over here is we will create
251:50 - dog one that is the object of the dog
251:52 - class followed by equal to and then the
251:55 - name of the class that is dog over here
251:57 - so we have created one object of the dog
252:00 - class now guys ideally we have seen that
252:02 - we can call the display method which
252:04 - belongs to the dog class so we can do
252:06 - that over here so I'm going to call the
252:09 - dog one object followed by Dot and then
252:12 - we have the display method so after this
252:15 - we are going to have the open and close
252:16 - parenthesis let me just save this file
252:18 - first and try running this code now so
252:20 - as you can see we are getting we are
252:22 - inside dog class which means this
252:24 - statement is getting printed now guys do
252:27 - we have any other method apart from this
252:29 - display method yes we do have and those
252:31 - are eat and sleep methods why so because
252:34 - we have inherited the methods from the
252:36 - animal class by using the python
252:38 - inheritance so basically we can use this
252:41 - object name that is dog one in order to
252:43 - call eat and sleep methods over here so
252:46 - if we call both the methods so I'll say
252:48 - dog one followed by Dot and then as you
252:51 - can see vs code is suggesting us this
252:53 - eat method as well so we have eat
252:55 - followed by open and close parenthesis
252:57 - and then again we will call the dog one
253:00 - object followed by Dot and then Sleep
253:02 - Method is also being suggested by the vs
253:04 - code so we are going to call both the
253:06 - methods over here so let me just save
253:08 - this file now and try running this code
253:10 - so as you can see we are getting all the
253:12 - three statements that is we are inside
253:14 - dog class I can eat and I can sleep
253:17 - which are the statements that are being
253:19 - printed by using these methods
253:21 - respectively so guys this is the power
253:23 - of python inheritance we can use the
253:25 - different attributes and the methods
253:27 - that were defined in a super class
253:30 - inside the subass by using the object of
253:33 - the child class over here which is also
253:35 - called as the subass over here guys it
253:36 - is very important to note that whenever
253:38 - we are defining the methods inside the
253:41 - class we need to provide one parameter
253:43 - over here which is going to be the
253:45 - object that will be passed so behind the
253:47 - scenes what is happening over here is
253:49 - when we call dog 1. display over here
253:52 - the dog one object is being passed with
253:54 - this display method even though we are
253:56 - not providing any parameter over here
253:59 - but behind the scenes the object is
254:01 - being passed over here and it needs to
254:03 - be caught by this particular method what
254:05 - happens if we don't provide this
254:06 - parameter let us check this so I'll just
254:08 - remove this self keyword over here and
254:10 - I'll just save this file now over here
254:13 - we are not receiving any parameter as we
254:15 - can see so let me just run this code now
254:17 - so as you can see type error dog.
254:20 - display takes zero positional arguments
254:22 - but one was given so basically behind
254:24 - the scenes this dog one object is being
254:27 - passed and we need to have a parameter
254:29 - over here while defining the function
254:31 - and that is the reason why we had given
254:33 - this self parameter name in order to
254:36 - identify that this is the object of this
254:38 - particular class that is dog so let me
254:40 - just save this file now and try running
254:41 - this code once again so as you can see
254:43 - there are no more errors that are
254:45 - getting displayed and all the three
254:46 - statements are getting displayed over
254:48 - here now guys what are the uses of
254:50 - inheritance so as you can see since a
254:52 - child class can inherit all the
254:54 - functionalities of the parents class
254:56 - this allows code reusability so as you
254:58 - can see over here we need not have to
255:00 - provide the eat and sleep methods once
255:03 - again inside the dog class and we were
255:05 - able to access both these methods by
255:07 - using the object of the dog class
255:09 - without actually providing the
255:11 - definition of those methods over here
255:13 - once a functionality is developed you
255:15 - can simply inherit it no need to
255:17 - reinvent the wheel this allows for
255:19 - cleaner code and easier to maintain now
255:21 - since you can also add your own
255:23 - functionalities in the child class you
255:25 - can inherit only the useful
255:26 - functionalities and Define other
255:28 - required features so guys based on your
255:31 - requirement it depends on you which
255:33 - class you want to inherit and create the
255:35 - child classes and the parent class
255:37 - classes over here based on your project
255:38 - requirements Constructor in Python
255:41 - Programming now guys a python
255:42 - Constructor is a function inside a class
255:45 - that helps us to initialize certain
255:47 - attributes of a class so far we have
255:49 - seen creating the class attributes and
255:51 - the functions and while initializing the
255:54 - attributes of the classes object we use
255:56 - the object name followed by the dot and
255:59 - then the attribute name but is there a
256:01 - better way in order to initialize those
256:03 - attributes inside the class yes it is so
256:05 - we have something called as double *
256:08 - underscore followed by in it and then
256:10 - again double * underscore followed by
256:12 - open and close parenthesis which is a
256:14 - Constructor function that is called
256:17 - whenever a new object of that class is
256:19 - instantiated so guys let us check this
256:21 - with the help of example now so let us
256:23 - move to the vs code what we will do is
256:26 - we will create a class that is called as
256:28 - the parot class over here and we will
256:30 - Define two attributes so over here we
256:32 - have the name which is of the string
256:34 - data type so let's say we have the empty
256:36 - string initial
256:37 - and then let's say we have the age
256:39 - attribute which is defined as zero over
256:41 - here which is the integer so guys what
256:43 - we will do is let us say we want to
256:45 - create the object of this class so what
256:48 - we have to do is let's say we provide
256:50 - the object name as parot 1 followed by
256:52 - equal to operator and then we have the
256:55 - name of the class that is parent
256:56 - followed by open and close parenthesis
256:59 - now guys so far what we had done is in
257:01 - order to initialize both these
257:03 - attributes we were calling this object
257:05 - name followed by Dot and then the name
257:07 - of the attribute so let us do that first
257:10 - so we are going to use the parot one
257:12 - object over here followed by Dot and
257:14 - then let's say the name of the parrot it
257:17 - is blue over here so we provide the name
257:19 - of the parrot and then we also provide
257:22 - the age of the parrot so let's say
257:24 - parrot 1. AG it is equal to 2 years old
257:27 - and then we can simply print the name
257:29 - and age of this parrot so let us say we
257:31 - provide the print method over here and
257:33 - we provide the parrot one object so
257:36 - parrot one followed by Dot and then we
257:38 - have name is and then again we want to
257:41 - get the age so parot 1 do age and then
257:45 - we have years old so over here blue is 2
257:48 - years old will be displayed so let us
257:51 - save this file now and try running this
257:52 - code so as you can see blue is 2 years
257:55 - old so guys this is the conventional way
257:58 - that we had seen so far in order to
258:00 - instantiate an object of the class and
258:02 - also assign the values to the attributes
258:05 - of that class so is there a better way
258:07 - in order to assign these values to these
258:09 - attributes yes we can do so by using the
258:11 - Constructor so what we can do is we can
258:13 - simply remove these two lines of code
258:15 - over here so I'll just remove them and
258:17 - then guys inside this class we are going
258:19 - to have the innit method which is the
258:21 - Constructor so over here we are going to
258:24 - have the DF keyword followed by double *
258:27 - underscore and then we have the init so
258:30 - as you can see vs code is suggesting us
258:31 - this method which we are going to use so
258:34 - in it and it is going to take one
258:36 - parameter by by default as I have
258:37 - already told you previously whenever we
258:39 - are going to call any method inside the
258:42 - class the object that is used in order
258:44 - to call that method is also passed by
258:47 - default behind the scenes so this self
258:49 - parameter represents the object of this
258:51 - parot class over here I'll just remove
258:53 - this part and what we are going to do is
258:56 - we are going to take both these
258:57 - attributes that is name and age as the
258:59 - parameters so over here after the self
259:02 - we are going to have comma and then we
259:04 - are going to have name one so guys I'm
259:06 - naming this as name one so that you
259:08 - don't get confused between this name and
259:11 - this name one so this name one will be
259:13 - passed as the parameter when this
259:14 - Constructor is being called over here
259:16 - and then followed by comma we also have
259:19 - age one and then what we can do is for
259:21 - this self that is the object followed by
259:24 - dot we can have name it is equal to name
259:27 - one over here and then again we can have
259:30 - the self followed by Dot and then age it
259:33 - is equal to H 1 so what we are simply
259:36 - doing over here here is the name and age
259:38 - attributes of this object the object is
259:40 - being represented by self and then self.
259:43 - name it will be assigned with the value
259:45 - of this name one that is being passed
259:48 - same thing for the age as well the self.
259:50 - age the value will be passed by using
259:53 - this age one parameter over here and
259:55 - both these values will be assigned to
259:57 - name and age attributes now guys when
259:59 - exactly this Constructor is being called
260:01 - so basically whenever you are going to
260:04 - create an object and call this class
260:06 - over here that is the parrot class the
260:08 - Constructor will be called so while
260:10 - instantiating this object we also need
260:12 - to pass the name and age for this
260:15 - particular instance of the class so what
260:17 - we will do is let's say we take the same
260:19 - name that is blue over here so we
260:21 - provide the first parameter is the name
260:23 - of the parot followed by comma and then
260:25 - we provide the age that is 2 years old
260:28 - which is the second parameter so guys
260:30 - when the control flow comes over here it
260:32 - sees that the class is being called with
260:34 - these two parameters and we also have
260:36 - the Constructor so basically this parro
260:39 - one will be assigned to this parameter
260:41 - that is self and then this name and age
260:43 - will be assigned to this name one and
260:45 - age one and this name and age will be
260:47 - assigned those values respectively and
260:50 - then we can simply have this print
260:51 - statement in order to print the same
260:54 - statement that we had seen previously as
260:56 - well so let me just save this file now
260:57 - and try running this code so as you can
260:59 - see we are getting the same statement
261:01 - that is blue is 2 years old that's
261:03 - because we have provided the same name
261:05 - and the same age let's say we provide a
261:07 - different name over here so let's say we
261:09 - provide Wu and it is 5 years old so let
261:12 - me just save this file now and try
261:13 - running this code as you can see who is
261:15 - 5 years old is getting displayed over
261:17 - here so guys in this way what we have
261:19 - done is while instantiating the object
261:22 - we are passing the values or the
261:24 - attributes that are present inside that
261:26 - class for which the values are getting
261:28 - assigned now guys another important
261:30 - functionality of this Constructor is we
261:32 - can also remove these attributes that
261:34 - are being declared so there is no need
261:37 - of declaring these attributes over here
261:39 - so I'll just remove these lines of code
261:41 - over here and what exactly is happening
261:43 - is while this Constructor is being
261:44 - called the interpretor comes to know
261:47 - that this name and age are the
261:49 - attributes of this class that is the
261:50 - parot class over here and it assigns the
261:53 - values that are being passed to name one
261:55 - and age one so to make it more simple
261:57 - let us say we name this parrot as first
262:00 - parrot over here for which the age is 2
262:02 - years old and let's say I provide
262:04 - another parrot so I'll just copy this
262:07 - line of code and paste this over here
262:08 - and then I provide this as parot 2 and
262:11 - then we can say second parrot over here
262:13 - which is 5 years old so we'll say 5
262:15 - years old and then we will print both
262:17 - the parrots over here inside the print
262:19 - statement I'll just copy these lines of
262:21 - code and paste this over here and then
262:23 - we can say parot 2. name and then again
262:26 - over here parot 2. AG so let me just
262:28 - save this file now and try running this
262:30 - code so as you can see first parot is 2
262:32 - years old and second parot is 5 years
262:35 - old both the state St ments are getting
262:37 - displayed over here so guys this is the
262:38 - way that you can Define The Constructor
262:40 - inside the class by using the underscore
262:43 - uncore init method and Then followed by
262:46 - the self that is being passed
262:48 - automatically as one of the parameters
262:50 - and then you can have any number of
262:51 - parameters being passed over here inside
262:53 - the Constructor which can be used as the
262:56 - values for the attributes of the class
262:58 - that you have defined and those values
263:00 - need to be passed whenever you are
263:02 - creating a new object for that class
263:04 - encapsulation in Python program in so
263:07 - guys encapsulation is one of the key
263:09 - features in objectoriented programming
263:12 - because encapsulation refers to the
263:14 - bundling of attributes and methods
263:16 - inside a single class so we have seen so
263:19 - far the various attributes and methods
263:21 - that we have been creating inside the
263:23 - class that functionality of the Python
263:25 - Programming is called encapsulation now
263:27 - it prevents outer classes from accessing
263:30 - and changing attributes and methods of a
263:33 - class so far we have seen that all the
263:35 - attributes and methods were public in
263:36 - nature but in this case we are going to
263:39 - create some private attributes which
263:41 - cannot be directly accessed outside the
263:44 - class so this also helps us to achieve
263:46 - data hiding over here now in Python we
263:49 - denote private attributes using the
263:51 - underscore as the prefix either we can
263:54 - have the single underscore or the double
263:56 - underscore so let us check this with the
263:57 - help of example now over here as you can
263:59 - see in this example we have the class
264:01 - computer and then we also have the
264:04 - Constructor that is in it followed by
264:06 - the self which is the parameter for that
264:08 - object that is being passed and then
264:10 - self. Max price so as you can see over
264:12 - here we have the prefix that is double
264:15 - underscore followed by Max price so this
264:17 - is one of the attributes of this
264:19 - computer class over here and we are
264:21 - providing the value of 900 to this Max
264:24 - price over here inside the Constructor
264:26 - now apart from this Constructor we have
264:28 - more couple of functions inside this
264:30 - class as you can see we have the sell
264:31 - function over here which simply prints
264:33 - the selling pric is the self for
264:36 - followed by Dot and then the max price
264:38 - so basically this statement will help us
264:40 - in order to print this value that is the
264:42 - max price value of the computer and then
264:44 - we have another method that is set max
264:47 - price which takes the object that is
264:49 - using the self and then it also takes
264:51 - the price over here so in case you want
264:53 - to set another Max price for this
264:55 - computer you can use this set max price
264:58 - function what it will do is it will
265:00 - simply update the value of the max price
265:03 - of the computer as you can see with this
265:05 - particular statement so guys let us
265:06 - check this with the help of example now
265:08 - what I will do is I'll simply copy these
265:10 - lines of code since I'm little bit lazy
265:12 - in order to type them again so we are
265:14 - going to paste it inside the vs code so
265:16 - over here what we are going to do is we
265:19 - are going to print the max price of the
265:21 - computer so first of all we are going to
265:23 - create the object that is comp one over
265:26 - here followed by equal to and then we
265:28 - have the computer class name so
265:30 - basically since a Constructor is not
265:32 - taking any other parameter apart from
265:34 - this self which is the object itself so
265:36 - we need not have to provide any
265:38 - parameter over here while instantiating
265:40 - this object that is comp one now what we
265:42 - will do is simply we will call the cell
265:45 - function over here that is this
265:46 - particular function so we can use the
265:48 - comp one object followed by Dot and then
265:51 - we have the cell function so after this
265:54 - open and close parenthesis so let me
265:56 - just save this file now and try running
265:57 - this code so basically this print
266:00 - statement should get executed and it
266:01 - should be displayed on the terminal so
266:03 - I'll just run this code now as you can
266:05 - see selling price is 900 so what exactly
266:08 - happened is when the control Flow came
266:10 - over here that is comp one it is equal
266:12 - to computer The Constructor of this
266:14 - class that is the init method was called
266:17 - and inside this what we have done is
266:19 - this private attribute so guys basically
266:22 - this double uncore denotes that this is
266:24 - the private attribute of the computer
266:26 - class so basically this private
266:28 - attribute was initialized inside the
266:30 - Constructor and a value of 900 was being
266:33 - assigned to this particular attribute
266:35 - and then what we did is when the control
266:37 - Flow came over here that is while
266:39 - calling the cell function basically this
266:41 - print statement was executed so selling
266:44 - price it is equal to this self. Max
266:47 - price got printed over here which is 900
266:49 - right now now guys let us do another
266:51 - thing what we will do is we will try to
266:54 - access this private attribute from
266:56 - outside of this class so over here we
266:58 - will call comp one once again followed
267:01 - by Dot and then we can call this private
267:03 - attribute that is the max price so as
267:05 - you you can see this Max price is
267:07 - getting suggested by the vs code so we
267:09 - will call this Max price and what we
267:11 - will do is we will try to assign another
267:13 - value that is 1,000 over here to this
267:16 - Max price and then again let us say we
267:18 - want to call this print statement so
267:21 - again we will call this sell method over
267:23 - here so I'll just copy this line of code
267:25 - and paste this over here let me just
267:26 - save this file now and try running this
267:28 - code so as you can see selling price 900
267:31 - this is a statement that was printed by
267:33 - calling the first sell method and then
267:35 - the the second time the sell method was
267:37 - called again the selling price was equal
267:39 - to 900 so guys why so that's because
267:42 - this Max price is the private attribute
267:44 - and we directly cannot access this
267:47 - attribute by using this object we need
267:50 - to have another method inside the
267:52 - computer class in order to assign
267:55 - another value to the private attribute
267:57 - and that is why we have this method that
267:59 - is the set max price along with the
268:01 - parameter price which it is going to
268:03 - take in order to replace the existing
268:06 - Max price over here so what we can do is
268:09 - we are going to call the comp one object
268:11 - once again followed by Dot and this time
268:14 - instead of directly accessing this Max
268:16 - price we are going to call this set max
268:19 - price over here so set max price and it
268:21 - is expecting two parameters the first
268:24 - parameter is the self which is going to
268:25 - be passed by default which is going to
268:27 - be the comp one object and then the
268:29 - second parameter is the price which we
268:31 - are going to pass to this method so
268:34 - again what we will do is simply we are
268:36 - going to provide this th000 price that
268:38 - we try to assign to the max price
268:40 - directly over here so set max price and
268:43 - then again let's say we want to print
268:44 - the selling price over here so again we
268:47 - are going to call the sell method once
268:49 - again so comp 1. sell so over here the
268:51 - only difference is we are calling the
268:53 - method that is the set max price and we
268:55 - are passing the value of the new Max
268:58 - price over here which is going to be
269:00 - passed to this price and then the max
269:02 - price value will be the updated price
269:04 - that we have just said so guys let me
269:06 - just save this file now and try running
269:07 - this code so as you can see selling
269:10 - price 900 and then selling price 900
269:12 - once again and the third time that we
269:14 - tried by using the set max price over
269:16 - here it was 1,000 so this time it is
269:19 - selling price it is equal to 1,000 so
269:21 - guys by using this method in order to
269:24 - set the value of a private attribute we
269:27 - were successfully able to update the
269:29 - value of this private attribute and this
269:31 - is the main functionality which we call
269:33 - it as encapsulation as far as op object
269:35 - oriented programming in Python is
269:37 - concerned so guys let us run this code
269:39 - once again by a different value let's
269:41 - say the max price over here we set it to
269:43 - 2,000 so let me just save this file now
269:45 - and try running this code so this time
269:47 - the selling price is coming over here
269:49 - once again as 2,000 and guys this is the
269:51 - way in order to hide certain attributes
269:54 - of a class you can have them as the
269:56 - private attribute by prefixing and use
269:59 - the different methods in order to set
270:01 - their values by using the objects of
270:04 - that class method over overriding in
270:06 - Python Programming so guys method
270:08 - overriding in Python is a way of letting
270:11 - method of a subass override the method
270:14 - of a super class so let's say for
270:16 - instance inside the super class we have
270:18 - a method that is eat and then inside the
270:21 - subass we also have the same method with
270:24 - the same name that is eight so basically
270:27 - the method inside the subass will be
270:29 - executed instead of the method that is
270:31 - present inside the super class so let us
270:34 - check this with the help of example
270:35 - number over here so as you can see this
270:37 - is the class that is animal which is
270:39 - being treated as the parent class or the
270:41 - super class and over here we have the
270:43 - attribute that is the name of the animal
270:45 - and it has a function that is the eat
270:48 - and it takes one parameter that is self
270:49 - over here it simply prints a statement
270:51 - that is I can eat now guys again we have
270:54 - another class over here that is the dog
270:56 - which inherits this parent class that is
270:58 - animal and again what is happening over
271:01 - here is this eat is being inherited by
271:04 - this dog class but the dog class is also
271:06 - having its own eat method over here so
271:09 - as you can see this eat method is once
271:11 - again present inside the dog class and
271:13 - it is printing its own statement that is
271:15 - I like to eat bones so guys what we will
271:17 - do over here is I'll just simply copy
271:20 - these lines of code and paste it in the
271:22 - vs code and let us check the
271:23 - functionality of the method overriding
271:26 - and how it can be used in your project
271:28 - based on your requirement so I'll just
271:30 - remove certain comments over here so as
271:32 - you can see we have this parent class
271:34 - that is animal and then we have have the
271:36 - child class that is dog over here both
271:38 - are having the eat method so what we
271:40 - will do is first of all I'll just
271:42 - comment out these lines that is this
271:44 - particular function is not present let's
271:46 - say inside the dog class I'll simply
271:48 - provide the P statement over here so
271:50 - what exactly is happening first of all
271:52 - we have the animal class which is having
271:54 - the eat function and this dog class it
271:56 - is inheriting the animal class so the
271:59 - dog class will have access to this
272:01 - function that is eat over here so I can
272:03 - eat will be displayed so what we will do
272:05 - is first of all we will create the
272:08 - object of this dog class so let's say we
272:10 - have dog one it is equal to and then the
272:12 - name of the class that is dog over here
272:14 - and simply what we can do is since the
272:17 - dog class is inheriting the animal class
272:20 - we can use the eat method of the animal
272:22 - so we can simply use the dog one object
272:25 - followed by Dot and then we have the eat
272:28 - method being called followed by open and
272:30 - close parenthesis so guys over here
272:32 - simply if we save this file and try
272:34 - running this code now as you can see I
272:36 - can eat is being displayed over here
272:38 - which is the print statement inside the
272:40 - eat function of the animal class now
272:43 - guys let us say we have the same method
272:45 - that is eight with a different print
272:46 - function inside the dog class so I'll
272:48 - just remove this pass statement and
272:50 - we'll also remove these commands over
272:53 - here so basically now what will happen
272:55 - whether the E function of the animal
272:57 - class will be called or the eat function
272:59 - of the dog class will be called so let
273:00 - us check this so I'll just save this
273:02 - file now and try running this code once
273:04 - again as you can see I like to eat bones
273:06 - this particular statement is getting
273:08 - printed which is the statement from the
273:10 - eat function of the dog class so
273:12 - basically whenever we have the method
273:14 - with the same name inside the parent and
273:17 - the child class the method of the child
273:20 - class will be called over here and that
273:22 - is what we call it as method overriding
273:24 - now guys why method overriding is
273:26 - important so let's say you have the
273:28 - animal class over here this is a very
273:30 - generic statement that I can eat
273:32 - basically it doesn't specify what the
273:34 - animal can eat but let's say you want to
273:36 - have the child classes over here which
273:38 - inherits the parent class and you want
273:40 - to be more specific so what the dog
273:43 - likes to eat basically the dog likes to
273:45 - eat bones over here so you can have the
273:48 - same method name inside the child class
273:50 - and print a different message in this
273:52 - case and that is what we have done in
273:54 - this example so method overriding is
273:56 - very important as far as objectoriented
273:58 - programming in Python is concerned and
274:00 - you can use them in your own Project
274:02 - based on your requirements multiple
274:04 - inheritance in Python Programming so
274:06 - guys previously we have seen the single
274:08 - inheritance but in this video we are
274:10 - going to check the multiple inheritance
274:12 - in Python so a class can be derived from
274:15 - more than one super class in Python
274:17 - basically this is called multiple
274:19 - inheritance so basically the derived
274:21 - class will be having the multiple super
274:23 - classes in this case so for example a
274:26 - class bad is derived from Super classes
274:29 - that is mammal and a winged animal so
274:31 - basically this mammal and winged animal
274:34 - will be treated as the parent classes
274:36 - and this bad class will be the subass or
274:38 - the child class which can be derived
274:40 - from both of these super classes over
274:42 - here so it makes sense because bat is a
274:45 - mamal as well as it is a winged animal
274:47 - so let us check this with the help of
274:49 - the example code now in the vs code so
274:52 - over here first of all we will create a
274:54 - class that is called as maml over here
274:56 - and inside the maml what we will do is
274:58 - we will Define the function and we will
275:00 - simply say
275:01 - mammore info so this particular function
275:05 - it is going to take one parameter at
275:07 - itself which is the object itself and
275:09 - basically we are going to Simply print
275:11 - the statement that we are inside mammal
275:17 - function so as you can see we are simply
275:19 - printing we are inside mammal function
275:21 - in order to identify that the control
275:23 - flow has come over here inside the
275:25 - mammal info function and then again we
275:28 - will have another parent class over here
275:30 - that is winged animal so we say winged
275:33 - animal over here and this this time what
275:35 - we will do is again we will have the
275:38 - function but over here we will say Wing
275:41 - uncore info so this particular method
275:44 - belongs to the winged animal over here
275:46 - and then again it is going to take the
275:48 - parameter is the self and then again I'm
275:50 - simply going to copy this print
275:52 - statement over here and paste this
275:54 - inside the winged info and we will say
275:56 - we are inside winged animal function so
276:00 - we say we are inside winged animal
276:02 - function now guys we have created two
276:04 - classes over over here which will be
276:05 - treated as the parent classes now we
276:08 - will be defining a third class that will
276:10 - be the child class of both these classes
276:12 - so basically we will have the class that
276:14 - is called as B over here and how do we
276:17 - mention the multiple super classes
276:19 - whenever we are defining the sub classes
276:21 - over here so basically inside the
276:23 - parenthesis we will have both these
276:24 - classes separated by a comma so first of
276:27 - all we will have the memal class over
276:29 - here followed by comma and then again we
276:32 - will have the winged animal class over
276:34 - here in this same way you can have any
276:36 - number of classes separated by commas
276:38 - over here in order to achieve multiple
276:40 - inheritance and then after this we will
276:42 - have the colon and then again we will
276:45 - have another method which will belong to
276:47 - this B Class over here so over here we
276:49 - will have the bcore info method and then
276:53 - which will take the self as the
276:55 - parameter and then we have the colon
276:57 - over here again we will have the print
276:59 - statement we will say we are inside bad
277:01 - function so it says we are inside bad
277:03 - function now guys inside this bad class
277:06 - we have this bad info function and apart
277:09 - from this we also have this mamal info
277:11 - and winged info functions since both
277:13 - these functions are derived from these
277:15 - classes that is mammal and winged animal
277:17 - over here so we can access all these
277:19 - functions from the object that we create
277:21 - for the bad class so let us come out of
277:24 - these classes and what we will do is
277:26 - let's say I provide the object that is
277:28 - bad one it is equal to bat over here so
277:31 - we have created the object of this bad
277:34 - class in this case and then when we
277:36 - provide the B one object followed by dot
277:38 - as you can see we are getting all the
277:40 - three functions as the suggestions by
277:42 - the vs code over here that's because all
277:44 - the three functions are accessible by
277:46 - this bad one object over here so first
277:48 - of all we will say bad info and Then
277:50 - followed by open and close parenthesis
277:53 - and then again we will say b 1 dot let's
277:55 - call mammal info in this case so we have
277:58 - mammal info as well as the third
278:00 - function that is B one followed by Dot
278:03 - and then we have the winged info over
278:05 - here and then open and close parenthesis
278:07 - so all these three statements will be
278:09 - printed one at a time based on the
278:11 - functions that is being called by the
278:12 - control flow so let me just save this
278:14 - file now and try running this code in
278:16 - order to confirm the same so as you can
278:18 - see first of all we have called the bad
278:20 - info so we are inside bad function is
278:22 - being displayed and then again V are
278:24 - inside mammal function is being
278:26 - displayed that's because mammal info is
278:28 - being called the second time and third
278:30 - function is being called that is winged
278:31 - info and we are getting we are inside
278:33 - winged animal function function so guys
278:35 - in this way we have also achieved
278:37 - multiple inheritance over here in case
278:39 - the functions that you want to use are
278:41 - present in the multiple classes as you
278:43 - can see over here you can have multiple
278:46 - classes being inherited by the derived
278:48 - class which we also call it as a subass
278:51 - over here and this bad class is acting
278:53 - as a subass and both these classes that
278:55 - are mammal and winged animal are acting
278:57 - as the parent classes now guys let us
278:59 - move to another task over here what do
279:01 - you mean by Method resolution order in
279:04 - Python that is mro so if two super
279:07 - classes have the same method name and
279:09 - the derived class calls that method then
279:12 - python uses the mro to search for the
279:14 - right method to call so guys over here
279:17 - we have seen how multiple inheritance
279:19 - can be achieved but what if the method
279:22 - names in both the super classes that is
279:24 - in the memal class and the winged animal
279:26 - class are same so what we will do is
279:28 - instead of this memal info we will keep
279:30 - it as display over here and instead of
279:33 - winged info again we will will call it
279:35 - as display so basically this time what
279:37 - is happening over here is both these
279:39 - classes that is mamal class and winged
279:41 - animal classes are having the same
279:43 - method name that is display and what we
279:46 - are doing we are creating the subass
279:48 - that is B and inheriting both these
279:50 - classes that is mammal and winged animal
279:52 - over here and this time both these
279:55 - display methods are getting inherited by
279:57 - this bad function now which method will
279:59 - be called when we use the object of this
280:02 - bad method let us check that so
280:04 - basically I have to remove these lines
280:06 - of code since these functions are no
280:07 - longer present but instead of that what
280:09 - we will do is we will say B one followed
280:12 - by Dot and then we have another function
280:14 - that is display so we have only one
280:16 - function that's because the name of
280:18 - these functions are same in both the
280:20 - parent classes and Then followed by open
280:23 - and close parenthesis so guys over here
280:25 - inside the bat function we have the bat
280:27 - info which will be called by using the
280:29 - bad one object and then the next time
280:31 - what we are doing is we are using the
280:33 - bad one object in in order to call the
280:35 - display method now which display method
280:37 - will be executed out of these two let us
280:40 - check that with the help of execution so
280:42 - I'll just save this file now and try
280:43 - running this code now so as you can see
280:46 - we are getting we are inside B function
280:48 - which is this statement that is getting
280:50 - printed that is obvious that's because
280:52 - we have called the bad info function
280:54 - over here and next time when we call the
280:56 - display method it is saying we are
280:59 - inside mammal function so guys basically
281:01 - this print statement was executed which
281:03 - proves that the playay method of the
281:05 - mamal class is being called over here
281:08 - why so that's because when we are
281:09 - creating the child class the first
281:12 - parent class is being given the highest
281:14 - priority over here so first the control
281:16 - flow will check whether this display
281:18 - method is it present in the first parent
281:20 - class if not then it will go to the
281:22 - second parent class over here inside the
281:25 - manual class it is finding that the
281:27 - display function is present and that is
281:29 - what is getting printed over here so it
281:31 - is the leftmost class that will be used
281:33 - in order to call the method which is
281:36 - present in multiple parent classes over
281:38 - here so what if we provide winged animal
281:41 - as the first class so what we will do is
281:43 - I'll just remove this mammal class from
281:45 - here on the left hand side we will
281:46 - provide winged animal and Then followed
281:48 - by comma and then on the right hand side
281:50 - we provide mamal so over here again we
281:53 - have just changed the order in which the
281:55 - inheritance is being done over here both
281:57 - these classes are still the parent
281:58 - classes of this child class that is bed
282:00 - class now let us check which statement
282:03 - will be printed when we call the display
282:05 - method over here so let me just save
282:07 - this file now and try running this code
282:09 - as you can see we are getting we are
282:11 - inside winged animal function so guys
282:13 - basically this winged animal function
282:15 - that is display function was called and
282:17 - we are getting this statement that is we
282:19 - are inside winged animal function that's
282:22 - because this time we have provided
282:24 - winged animal as the leftmost class and
282:26 - the control flow found this particular
282:29 - display method inside the winged animal
282:31 - class over here which is the parent
282:33 - class of the bad class so guys this is
282:35 - very important as far as method
282:37 - resolution order is concerned the
282:39 - leftmost class is being given the
282:40 - highest priority as far as the same
282:43 - names of the methods are concerned so
282:45 - guys practice on your own so that on
282:47 - different inputs you get different
282:48 - outputs operator overloading in Python
282:51 - Programming so guys in Python we can
282:53 - change the way operators work for user
282:56 - defined types so for example the plus
282:59 - operator will perform arithmetic
283:01 - addition on two numbers in the same way
283:04 - it will merge the two list as well or
283:06 - else if we are dealing with the two
283:08 - strings then it can concatenate two
283:10 - strings so the same plus operator can
283:12 - perform multiple operations depending on
283:15 - the operant whether they are numbers or
283:17 - whether they are strings or list so this
283:19 - feature in Python that allows the same
283:22 - operator to have different meaning
283:24 - according to the context is called
283:27 - operator overloading so this we are
283:29 - going to check with the help of examples
283:30 - as well apart from this there are
283:32 - certain special functions in Python so
283:34 - basically the class functions that begin
283:37 - with the double underscore are called
283:39 - special functions in Python they are
283:41 - called double underscore functions
283:43 - because they have a double underscore
283:45 - prefix and suffix such as as you can see
283:48 - this in it which can be treated as the
283:50 - Constructor of a class it is one
283:52 - function which starts and ends with the
283:54 - double underscore in the same way the
283:57 - plus operator can be overridden by using
284:00 - this double underscore followed by add
284:02 - and then double underscore again and
284:04 - then open and close parenthesis so guys
284:06 - let us check operator overloading
284:08 - implementation in action using the vs
284:11 - code over here so we'll see the very
284:12 - basic examples first of all so let's say
284:14 - we have num one it is equal to 10 and
284:17 - then number two that is num two it is
284:20 - equal to 20 so if we simply print num 1
284:24 - + num 2 over here so num 1+ num 2 so
284:28 - basically it is 10 + 20 which is 30 in
284:31 - this case so when we just save this file
284:33 - now and try running this code
284:35 - so as you can see we are getting the
284:36 - result as 30 but what if these variables
284:39 - are strings so instead of numbers let's
284:41 - say if we enclose them within the double
284:43 - quotes this means that we have a string
284:46 - over here that is 1 Z that is 10 and
284:48 - then over here as well we have another
284:50 - string that is 20 so when we do num 1
284:53 - plus num 2 instead of 30 we will get the
284:56 - concatenation of this string which means
284:58 - 10 will be followed by 20 in this case
285:00 - when we try to print the statement so
285:02 - let me just save this file now and try
285:04 - run this code so as you can see we are
285:06 - getting 1020 so guys we have not changed
285:09 - anything over here the operator is same
285:11 - and the operants are also same the only
285:13 - thing is we have changed the values to
285:15 - the string and that is what operator
285:17 - overloading means that is by using the
285:19 - same operator we can have the different
285:21 - results based on the operant values now
285:24 - guys let us check how operator
285:25 - overloading can be implemented when we
285:27 - are dealing with classes over here so
285:29 - let's say we have a class that is named
285:31 - as point over here and this class let's
285:34 - let's say we have a Constructor inside
285:36 - it so we have init method inside this so
285:39 - init method it will take one parameter
285:41 - that is self and what we will do is
285:43 - let's say it has two attributes over
285:45 - here so self dox so the point class it
285:49 - will have two attributes that is X and Y
285:51 - coordinates so over here let's say we
285:54 - provide the x value by using the
285:56 - parameter that we are getting so let's
285:58 - say we have X1 over here and let's say
286:00 - we have y1 over here so self. X it will
286:03 - be equal to X1 and then again we will
286:06 - have self do y it is equal to y1 in this
286:09 - case so whenever we are creating the
286:11 - object by using the point class over
286:13 - here the Constructor that is in it
286:15 - method will be called along with the two
286:17 - points that we will be passing and those
286:19 - two points will be assigned the values
286:21 - to these variables that is X and Y over
286:24 - here now guys in order to override the
286:26 - two string method we also have another
286:28 - method that is double underscore and
286:30 - then Str Str so as you can see apart
286:32 - from this we have many other functions
286:34 - funs that can be used when we provide
286:36 - the double underscore so vs code is
286:38 - suggesting us the entire list of
286:40 - functions which we can use in our python
286:42 - code so over here we are going to use
286:44 - this s Str and then we are going to have
286:46 - our custom code inside this s Str so
286:49 - what we are going to do is we are simply
286:51 - going to print the values of this X and
286:53 - Y so how do we do that we are going to
286:55 - use the formatting part and then inside
286:58 - this we are going to call the cell
286:59 - followed by Dot and then we have X and
287:02 - then again we have called over here and
287:05 - then again we call the self do y so over
287:08 - here we are simply printing the X and Y
287:10 - values which are separated by the comma
287:12 - over here and then guys let's say we
287:14 - want to override the plus operator over
287:16 - here so before having the function
287:18 - inside the class what I will do is first
287:20 - of all we will create the object so
287:22 - let's say P1 is the object name it is
287:25 - equal to point which is the class over
287:28 - here and what we do is we do 1A 2 that
287:31 - is X and Y values over here and then
287:33 - let's say we have another point that is
287:35 - P2 it is equal to point and then this
287:38 - time we are going to provide the X and Y
287:40 - coordinates as 2 and three over here and
287:43 - what we want to do is we want to print
287:45 - the sum of both these points that is P1
287:48 - plus P2 so guys in this case we are
287:50 - using this plus operator and then these
287:52 - are the operators that is P1 and P2 so
287:54 - how do we have the custom implementation
287:57 - of this plus operator over here which we
287:59 - will call it as the operator overloading
288:01 - as well so as we have seen over here we
288:04 - have something called as double
288:05 - underscore and then add and then double
288:07 - underscore so this represents the plus
288:10 - operator as well so we can use this
288:12 - method inside the class in order to have
288:14 - our custom implementation of addition of
288:17 - both these points so over here we have
288:19 - DF followed by double underscore and
288:22 - then we have the add method over here
288:24 - followed by double underscore and then
288:26 - we have the open and close parenthesis
288:28 - and then inside the parenthesis we will
288:30 - provide the self as the parameter now
288:32 - guys apart from the self parameter
288:34 - basically when we do P1 + P2 it is
288:37 - simply P1 dot this particular function
288:40 - that is we are going to Define followed
288:43 - by this P2 which will be a parameter so
288:45 - we need to catch this as the second
288:47 - parameter over here so what we will do
288:49 - is after the cell we will have another
288:51 - parameter and we will name it as other
288:53 - over here so what we can do is over here
288:55 - we can create another variable that is X
288:57 - it is equal to self.x over here plus we
289:01 - need to use another parameter that is
289:03 - other which represents the other point
289:05 - that is P2 in this case so over here we
289:08 - will say other do X in this case and
289:11 - then the same way we are going to have
289:13 - another variable that is y it is equal
289:15 - to self doy plus other do y in this case
289:20 - and then guys what we have to do is
289:21 - simply we need to return the point of
289:24 - both these values that we have found
289:26 - that is X and Y so basically return
289:29 - point of X comma Y in this case so we
289:32 - have X comma y so guys this is the
289:34 - implementation of our addition operator
289:36 - we are doing the operator overloading in
289:39 - this case so basically P1 + P2 it is
289:42 - same as P1 followed by Dot and then the
289:45 - add function being called along with the
289:47 - parameter that is P2 so in this case
289:49 - this function will be called and it will
289:51 - return point of X comma Y and basically
289:54 - while returning this we are providing
289:56 - the print statement so behind the scenes
289:58 - this function will be called in order to
290:00 - print the statement so guys basically
290:02 - over here inside of the print statement
290:04 - we need to have the return statement
290:06 - over here so I'll just remove this part
290:08 - over here and we will say return
290:11 - followed by double codes and then inside
290:13 - this double clotes we will be using the
290:15 - formatting so let's say we have zero and
290:17 - then comma and then let's say we have
290:18 - one followed by Dot and then we have
290:21 - format over here and inside this format
290:23 - we need to provide the x and y Valu so
290:25 - self. X and then comma and then we have
290:28 - self.y in this case so basically this is
290:31 - the way in which we are going to print
290:33 - the the values that is of X and Y so
290:36 - guys let me just save this file now and
290:37 - try running this code so as you can see
290:40 - we are getting the coordinates as 3 and
290:42 - 5 this x and x values are getting added
290:45 - so 1 + 2 it is equal to 3 and then 2 + 3
290:48 - it is equal to 5 so we are getting five
290:51 - over here so guys basically what we have
290:53 - done is if you see the main code over
290:55 - here we have just defined P1 and P2
290:58 - which are simply the points and if we
291:00 - were not having this implementation
291:02 - inside the class that is the string and
291:04 - the addition part then we won't be able
291:07 - to add both these points directly
291:09 - because by default this plus operator
291:11 - can only handle numbers or strings Or
291:13 - List over here but in order to handle
291:16 - the custom classes we need to define the
291:18 - custom functions as well inside those
291:20 - classes and according to our requirement
291:22 - we can have the code inside those custom
291:24 - functions guys we can also change the
291:26 - formatting over here in order to change
291:28 - the formatting we can say that X it is
291:30 - equal to this particular thing and then
291:33 - after comma we can have y it is equal to
291:36 - self.y part over here so let me just
291:38 - save this file now and try running this
291:40 - code so as you can see we have change
291:41 - the formatting xit is equal to 3 and Y
291:44 - is equal to 5 so whatever format that
291:46 - you want to print in or whatever code
291:48 - you want to have inside this Str Str
291:50 - method you can have it accordingly based
291:52 - on your requirements so guys this is
291:54 - operator overloading for you with the
291:56 - same operator you can have multiple
291:59 - implementations and it can have
292:00 - different meanings as far as operant are
292:03 - concerned similarly we have other
292:04 - special functions and the other operator
292:07 - overloading functions as well as you can
292:09 - see we have this init which initializes
292:11 - the attributes of the object which we
292:13 - have already seen as far as class
292:15 - Constructors are concerned then we have
292:17 - Str Str which returns a string
292:18 - representation of the object that is
292:20 - what we have implemented over here it
292:23 - returns a string implementation of the
292:25 - object that is point x comma Y and then
292:28 - we also have Len which Returns the
292:30 - length of the object then add which adds
292:32 - the two objects so so over here we have
292:34 - implemented the add method which adds
292:37 - two objects over here which is P1 and P2
292:39 - that is what we have achieved in this
292:41 - particular program apart from that we
292:43 - also have this call function which calls
292:45 - the objects of the class like a normal
292:48 - function guys apart from this we can
292:50 - also have other operator overloading
292:52 - functions as well for addition we have
292:54 - seen P1 + P2 which means P1 Dot and then
292:58 - underscore uncore add will be called in
293:00 - which case the parameter will be P2
293:02 - similarly we can have the subtraction
293:05 - multiplication the power of two objects
293:07 - and then we can have division as well
293:09 - and then we can have flow Division and
293:11 - many other mathematical operations can
293:14 - be achieved by using the operator
293:16 - overloading just how we have done in
293:18 - this program overloading comparison
293:20 - operators in Python Programming so guys
293:22 - previously we have seen how we can
293:25 - overload the plus operator in the python
293:27 - so python also allows us to overload
293:30 - comparison operators as well such as
293:32 - less than or greater than or less than
293:35 - or equal to or else greater than or
293:36 - equal to and so on many other comparison
293:39 - operators are present in Python
293:41 - Programming which can be overloaded so
293:43 - for example as you can see we have the
293:45 - class that is person and then we have
293:47 - the Constructor which takes the
293:48 - parameter is the self and then name and
293:51 - age is taken so basically this name and
293:54 - age are being assigned to the name and
293:56 - age attributes of the class and then we
293:58 - have the overloading of the less than
294:00 - operator over here in this case so as
294:03 - you can see we have the function DF and
294:05 - Then followed by underscore uncore LT
294:08 - which refers to the less than sign over
294:10 - here and then double uncore once again
294:13 - and then it takes one object that is the
294:15 - self object over here it takes the other
294:17 - object that is the second object so what
294:19 - we can do is we can create the two
294:21 - objects over here that is P1 it is equal
294:24 - to person the name is allies and the age
294:26 - is 20 years old and then we have P2 that
294:29 - is another person the name is Bob and
294:32 - the person is 30 years old old so guys
294:34 - basically what we are doing is we are
294:35 - printing over here P1 less than P2 so we
294:38 - are checking whether P1 is less than P2
294:40 - or not so what exactly will happen is
294:43 - instead of this less than the control
294:45 - flow will go over here to this
294:47 - particular function because we have
294:49 - provided the comparison operator
294:51 - overloading over here so the first
294:54 - object will be P1 in this case which
294:56 - will be assigned to self and the second
294:58 - object will be P2 over here which will
294:59 - be assigned to the other and self. H
295:02 - will be compared whether it is less than
295:04 - the other do age over here if it is yes
295:07 - then it will return true or else it will
295:10 - return false so guys let us implement
295:12 - this in our vs code over here so let's
295:14 - say we have the class person in this
295:16 - case and then what do we do is we Define
295:19 - The Constructor over here so DF keyword
295:22 - followed by the init function in this
295:24 - case so I'm going to implement the
295:26 - Constructor over here so what we will do
295:28 - is let's say we have self do name it is
295:31 - equal to the name will be taken as the
295:33 - parameter over here so let's say I
295:35 - provide name one and then age one over
295:37 - here so that we can identify them so
295:39 - name it is equal to name 1 and then we
295:43 - have self. AG it is equal to H 1 so the
295:46 - name and age will be coming as the
295:48 - parameters when we are going to
295:49 - initialize the object when we are
295:51 - creating the object of the person class
295:54 - and those name and age will be assigned
295:56 - to these variable names that is name and
295:58 - age and then guys what we will do is we
296:00 - will be doing the comparison operator
296:02 - overload loading so over here we are
296:04 - going to Define double underscore and
296:07 - then LT over here so which refers to the
296:10 - less than operat in this case and it is
296:12 - going to take two parameters one is the
296:14 - self parameter and then the other object
296:18 - so over here the second parameter is the
296:19 - other object and this thing is simply
296:21 - going to return the comparison of the
296:23 - two ages over here so this will be
296:26 - return self do AG is it less than the
296:30 - other do age so over here we are simply
296:32 - going to to compare whether self. AG is
296:35 - less than other do age or not if yes
296:38 - then return true or else return false so
296:40 - guys what we will do is we will create
296:42 - two person objects over here so let's
296:44 - say P1 it is equal to the person and
296:48 - let's say the first person name is Tom
296:50 - and Tom is 10 years old in this case and
296:53 - then let's say we have P2 it is equal to
296:56 - person and let's say the name of this
296:58 - person is Harry and Harry is 20 years
297:01 - old so guys what we will do is simply we
297:03 - need to print two statements comparing
297:05 - the ages of both the person so we will
297:08 - say P1 is it less than P2 then it will
297:11 - return true or false so is P1 less than
297:14 - P2 yes in this case because p1's age is
297:16 - 10 and p2's age is 20 and that is what
297:20 - this particular function will be
297:21 - implementing and returning the result
297:23 - and over here again we will say print P2
297:26 - is less than P1 this time so P2 less
297:29 - than P1 this time so is P2 less than P1
297:32 - so so what will happen is is 20 less
297:35 - than 10 no in this case so this should
297:37 - return false so let me just save this
297:38 - file now and try running this code so as
297:41 - you can see for first statement we are
297:42 - getting it as true and for second
297:44 - statement we are getting the result as
297:45 - false to make it more understandable
297:48 - what we can do is we can provide the
297:49 - statements over here is Tom
297:53 - younger than AR question mark and then
297:59 - we can have a comma over here and
298:01 - similarly we can have such statement in
298:03 - the second PR statement as well so over
298:05 - here we will say is Harry younger than
298:09 - Tom in this case so we have is Harry
298:12 - younger than Tom so let me just save
298:14 - this file now and try running this code
298:16 - so as you can see is Tom younger than
298:18 - Harry so Tom age is 10 and Harry's age
298:21 - is 20 right now so it is returning true
298:24 - that Tom is younger than Harry and
298:26 - second time is Harry younger than Tom
298:28 - Harry is 20 years old Tom is 10 years
298:31 - old so it is saying is Harry younger
298:32 - than than Tom no in this case so that is
298:34 - why we are getting the result as false
298:36 - what if we have another person with the
298:38 - same name that is Tom who is 30 years
298:40 - old so over here we will update the age
298:43 - of Tom that is another person who is 30
298:45 - years old and we are comparing it with
298:47 - the same person that is Harry which is
298:50 - 20 years old so let me just save this
298:51 - file now and try running this code this
298:54 - time is Tom younger than Harry no in
298:56 - this case because Tom is Elder than
298:58 - Harry right now so we are getting false
299:00 - and in the second statement is Harry
299:01 - younger than Tom yes because 20 is less
299:04 - than 30 this time so we are getting true
299:06 - in this case so guys this is the way
299:08 - that we can implement the comparison
299:10 - operator overloading as far as Python
299:12 - Programming is concerned iterator in
299:14 - Python Programming so guys iterators are
299:17 - methods that iterate collections like
299:19 - list tles Etc using an iterator method
299:23 - we can Loop through an object and return
299:26 - its elements so we have already seen how
299:28 - we can iterate through the list and tles
299:30 - as well using the fall Loop but we can
299:32 - also Al have our custom iterators in
299:35 - order to iterate through the different
299:37 - elements inside the list so that we are
299:39 - going to check with the help of examples
299:41 - as well now we can use the iter method
299:44 - which represents the iterator to
299:46 - initialize the iterator and the next
299:48 - method to go through the iterator so
299:51 - guys let us check this with the help of
299:52 - example now over here in the VSS code so
299:55 - what we will do is let's say we have the
299:57 - list that is named as list one and then
299:59 - let's say we have the list of numbers in
300:01 - this case so we have 1 2 3 4 and then 5
300:05 - so guys how do we get the iterator to
300:07 - this particular list over here so what
300:09 - we can do is simply we can have the name
300:12 - of the variable that is iterator it is
300:14 - equal to and then we can use the
300:16 - function name that is i r this is one of
300:19 - the functions that will return us the
300:21 - iterator over here and inside this
300:23 - function it will take one parameter
300:25 - which will be the list one in this case
300:27 - so basically the list or tle it goes as
300:30 - the parameter to this function that is I
300:32 - t r and it Returns the iterator over
300:35 - here and then we can use this iterator
300:37 - in order to get the elements of this
300:40 - list so what we will do is let's say we
300:42 - have the print function and then we can
300:44 - use the next function in this case
300:47 - inside the print so as you can see vs
300:49 - code is suggesting us this next function
300:51 - over here which will take the iterator
300:54 - as the parameter so we provide the
300:56 - iterator as the parameter so what will
300:58 - happen is this thing will point to the
301:00 - first element to the list over here so
301:02 - let me just save this file now and try
301:04 - running this code so as you can see we
301:06 - are getting one in this case now what we
301:08 - can do is again we can have another
301:10 - print statement in order to print the
301:13 - second element so over here I have just
301:15 - copied and pasted this line of code and
301:17 - then let me just save this file now on
301:19 - the next line we should get the second
301:21 - element that is two so as you can see we
301:23 - are getting one and then we are also
301:25 - getting two over here so similarly we
301:27 - can get all the elements in this case by
301:29 - using the it method we have got the
301:32 - iterator over here and by using this
301:35 - iterator as the parameter to the next
301:37 - function we have got the element itself
301:39 - so guys this is the very basic way in
301:41 - which we can use the iterator along with
301:43 - the next function now guys let us check
301:45 - this with the help of the Fall Loop
301:47 - working of fall loop with the iterators
301:49 - so what we can do is instead of printing
301:51 - these statements multiple times we can
301:53 - simply use this iterator inside the fall
301:56 - Loop so over here we can have for and
301:58 - then element in and then we can provide
302:02 - this iterator so this iterator is having
302:04 - all the elements right now and we are
302:06 - going to iterate through this iterator
302:08 - and one at a time all the elements will
302:11 - be assigned to this element variable and
302:13 - inside this fall Loop we can simply
302:16 - provide the element over here so we can
302:18 - provide element and in order to have all
302:21 - the elements on the same line when we
302:23 - are providing the print statement we can
302:25 - have the end parameter over here which
302:27 - is Slash and by default which means a
302:29 - control flow goes to the new line so in
302:31 - this case we want it to be on on the
302:33 - same line so we will separate all the
302:35 - elements by using one space character
302:37 - over here so let me just save this file
302:39 - now and try running this code so as you
302:41 - can see we are getting 1 2 3 4 5 on the
302:43 - same line we can also separate them by
302:46 - using a comma and a space character so
302:48 - I've just provided comma in the end
302:50 - parameter I'll just save this file now
302:52 - and try running this code so as you can
302:54 - see we are getting 1 2 3 4 5 separated
302:57 - by commas so guys this is the way that
302:58 - we can use the fall Loop along with the
303:00 - iterator in order to go through all the
303:03 - elements inside the list we can also do
303:06 - this directly by using the list one as
303:08 - well so when we provide list one which
303:10 - is containing all the elements over here
303:12 - so instead of having the iterator as
303:14 - well we can use the list one so let me
303:16 - just save this file now and try running
303:18 - this code so the same output will be
303:20 - displayed that is all the elements of
303:21 - the list now guys where this iterator
303:23 - becomes important is whenever we are
303:25 - creating the custom classes and we want
303:27 - to iterate through the custom iterator
303:30 - that we want to create so guys let us
303:32 - check it with with the help of example
303:33 - now so guys what are the important
303:35 - points while building the custom
303:36 - iterators so building an iterator from
303:39 - scratch is easy in Python we just have
303:42 - to implement the double uncore iter
303:45 - followed by double uncore method so this
303:48 - is one of the custom methods that we
303:50 - have to implement inside the class along
303:52 - with this we also have to implement the
303:54 - double underscore next Double uncore
303:57 - method over here inside the same class
304:00 - so these are the two methods that are
304:01 - important which needs to be implemented
304:04 - inside the class while building the
304:05 - custom iterators so this it method it
304:09 - Returns the iterator object itself if
304:12 - required some initialization can be
304:14 - performed in this method and the second
304:17 - method that is the next method over here
304:19 - it must return the next item in the
304:21 - sequence on reaching the end and in
304:24 - subsequent calls it must raise stop
304:27 - iteration so guys let us check this with
304:28 - the help of examples as well so over
304:31 - here what we will do is we will
304:32 - implement the power of two class over
304:34 - here which means we are going to find
304:36 - the results of the power of the number
304:38 - that is two so we are going to have the
304:40 - class which is going to be named as
304:43 - power two in this case and what we will
304:45 - do is we will have the Constructor over
304:47 - here so we have the init method in this
304:50 - case and init method it will take the
304:52 - maximum number up to which we need to
304:54 - find the Power of Two over here so
304:56 - basically apart from self we will have
304:59 - the max value as well so over here we
305:01 - will say self do Max it is equal to Max
305:04 - so while creating the object of this
305:07 - class we will be providing the max
305:08 - number up to which we need to find the
305:11 - Power of Two And then guys as we have
305:13 - seen in order to build the custom
305:15 - iterator we need to have the two
305:16 - functions so first of all we will have
305:18 - the iter function over here so we have
305:21 - iter function and Then followed by open
305:24 - and close parenthesis this will again
305:27 - take the parameter as self and what we
305:29 - will do is the initial value that is
305:31 - self do n so we have the variable that
305:33 - is n which is equal to Zer right now so
305:36 - we will find the powers of two starting
305:38 - from zero up to the number that is Max
305:41 - that we have provided while creating the
305:43 - object of the power two class over here
305:46 - so what we are going to do is self. and
305:48 - it is equal to zero and this thing is
305:50 - going to return a iterator which is
305:53 - going to be the self itself so over here
305:55 - we are returning the iterator that is
305:57 - the self itself and then guys we are
305:59 - going to also Define the next method
306:02 - over here so we have DF followed by
306:04 - double underscore and then we have the
306:06 - next method followed by double
306:08 - underscore and then again we are going
306:10 - to have the self as the parameter so
306:13 - over here what we will do is first of
306:15 - all we need to check whether the value
306:16 - of n is it less than or equal to the
306:19 - value of Max that we have provided so
306:21 - over here we will provide the if
306:23 - condition and inside the parenthesis we
306:25 - will say whether self do n is this less
306:29 - than or equal to Max that is self do Max
306:32 - Max in this case so we have self. Max
306:35 - and if yes then we are going to have the
306:37 - result what is the result it is equal to
306:40 - 2 ra to the power of n so it will be 2 *
306:44 - by multili by double times and then self
306:47 - do n in this case so over here we are
306:49 - getting the current value of n we are
306:51 - checking whether it is less than or
306:52 - equal to Max and if yes then we are
306:55 - finding 2 ra to that number that is n
306:57 - over here and the result will be stored
306:59 - in this result variable next what we are
307:01 - going to do is we are going to increment
307:04 - the value of n by 1 so it is going to be
307:06 - self do n + = 1 so we are incrementing
307:11 - the value of n by 1 so that the next
307:13 - time the control flow comes over here it
307:15 - will find that the value of n is
307:17 - incremented by one and then after this
307:19 - we simply have to return result in this
307:22 - case for which we have already found the
307:24 - result over here so guys this is the
307:26 - case when n is less than or equal to Max
307:28 - but what if the N is incremented in such
307:31 - a way that it becomes becomes greater
307:32 - than the maximum number which we have
307:34 - already provided for which we don't want
307:36 - to find the Power of Two so over here
307:39 - inside the lse part what we will do is
307:41 - we will raise the stop iteration so over
307:43 - here we can simply provide raise stop
307:46 - iteration so we have this exception that
307:49 - is raise stop iteration over here which
307:50 - is one of the buil-in exceptions now
307:53 - guys what we can do is simply we can
307:54 - create the object of this power two
307:56 - class over here that we have created so
307:59 - what we can do is let's say we provide
308:01 - the object that is I it is equal to
308:04 - power two over here and the maximum
308:06 - number for which we want to find the
308:08 - Power of Two is three right now so what
308:11 - this will do is when we create this
308:12 - object I the control flow it sees that
308:14 - for this particular power two class we
308:17 - have a Constructor that is in it and it
308:19 - will take the number that is Max so over
308:21 - here we have provided the max as three
308:24 - so self. max that is this particular
308:26 - variable will have the value S3 over
308:29 - here and then guys in order to find the
308:31 - iterator we will name it as the iterator
308:33 - variable it is equal to i r this method
308:37 - and then inside this method we need to
308:39 - pass this object that is I so what
308:41 - exactly will happen is the control flow
308:44 - will see that for this particular class
308:46 - we have the user defined it method so it
308:49 - will come over here and initially the
308:51 - value of n will be set as zero in this
308:54 - case so we have zero to start with and
308:56 - at the end we have Max that is the value
308:58 - of three and then guys what we have to
309:00 - do is we have to iterate through this
309:02 - iterator over here so we already have
309:04 - the iterator next time when we call this
309:07 - next method the control flow comes over
309:09 - here it will see that the value of n it
309:11 - is zero right now and it is less than or
309:14 - equal to Max so 2 to 0 the first result
309:17 - it will be equal to 1 and that same
309:19 - result will be passed over here as the
309:21 - return statement and before that n will
309:23 - be incremented and the updated value of
309:25 - n will be one in this case so over here
309:27 - we can simply provide the print
309:29 - statement and we can say next over here
309:31 - and inside the parenthesis we will have
309:33 - the iterator as the parameter so guys
309:35 - let me just save this file now and try
309:37 - running this code so as you can see we
309:39 - are getting the result as one and next
309:41 - time what we will do is again we will
309:42 - copy paste these lines of code three
309:44 - times over here so let me just save this
309:46 - file now and try running this code as
309:48 - you can see we are getting 1 2 4 and 8
309:51 - which is equal to 2 to 0 is 1 2 to 1 is
309:55 - 2 2 2 is 4 2 to 3 is 8 and next time
309:58 - when we print the value once again over
310:00 - here so what will happen is 2 to 4 will
310:03 - be found and in this case since n value
310:06 - is not less than or equal to Max so
310:08 - raise stop iteration will be called over
310:11 - here and we will get some other
310:13 - statement being printed on the terminal
310:15 - so let me just save this file now and
310:16 - try running this code so as you can see
310:18 - we have got 1 2 4 and 8 and after this
310:21 - as you can see Ray stop iteration was
310:24 - called while calling the next function
310:26 - over here so guys this is the way that
310:27 - we can build our custom iterators
310:29 - whenever we are dealing with our custom
310:31 - class we just need to Define two methods
310:34 - over here that is it which stands for
310:37 - iterator which will return an iterator
310:39 - over here and then we also have to
310:41 - define the next method which will return
310:43 - us the next element to be used as far as
310:46 - our requirements are concerned in the
310:48 - Python program so guys you can have any
310:50 - logic over here this is just an example
310:52 - that we have taken that is in order to
310:54 - find the Power of Two you can have any
310:57 - logic based on your requirements and
310:58 - raise the exception in any manner that
311:00 - you want based on your requirements so
311:02 - we have come to the conclusion of the
311:04 - Python programming language hopefully
311:06 - you have got enough knowledge about the
311:07 - Python language and you should practice
311:09 - on your own so that on different inputs
311:11 - you get different outputs and that is
311:13 - how you are going to learn more about
311:15 - the Python language so that's it in this
311:17 - video I'll see you in the next video
311:19 - till then stay tuned

Cleaned transcript:

in the next few hours we are going to learn a lot about the Python programming language with the help of the examples and python programs as well while you're watching this video please make sure that you pause this video and practice on your own so that on different inputs you get different output and that is how you are going to learn about the Python programming language you can also watch my other Python tutorial and Python program videos which are available for free on YouTube the link to those playlist I have given in the description section below and we are going to cover all the basics about the Python programming language so let's get started Python tutorial for beginners so if you're completely new to programming languages and want to start with the Python programming language then this video series is for you and it doesn't matter even if you have learned the other programming languages such as Java C C++ and if you're going to learn the Python language for the first time you can watch these video so that we can get started from the completely beginner level and we reach up to the intermediate and expert level as we go through the different concepts of the Python programming language so guys first of all we are going to check the environment setup using the Python language and we are going to use the VSS code as the editor now over here vs stands for visual studio and we are going to use the visual studio code editor in order to write our python programs apart from this vs code setup we are also going to see how do we write the first python code and execute it so guys basically I have written down the steps to install the vs code editor and python interpreter over here so first of all we are going to install VSS code using this link that I have already provided in the description section so when you hit this URL in the browser this is the page that is going to open from where you can easily download the visual studio code it depends on your operating system which installer you want to download you can also download for Windows Mac OS and Linux systems over here so it depends on your operating system once you have downloaded this and installed the vs code on your machine machine the next step is to install python extension in VSS code so guys once you have installed the visual studio code this is the get started page that you will see in the visual studio code ID so over here first of all you are supposed to install the python extension so on the left hand side as you can see there is an extensions button over here on which you can click and then this particular section will open so over here in the search bar you are supposed to type python so once you type python there will be list of extensions that will be available for you so guys this is the extension that you have to install over here so as you can see python intellisense file lens and this is a description that you can see on the right hand side so since I have already installed this python extension on this Visual Studio code I am getting this uninstall button but you will be getting the install button over here if you have not already installed this particular extension guys this python extension helps us in order to write the python programs very efficiently it allows us to have the code completion feature along with this we can also run the python code and have the output from within the visual studio code itself so guys it is very important extension if you are going to Learn Python and want to write the python programs now guys coming to the next step we have to install the python interpretor using this link that I have already provided in the description so once you open this URL in the browser over here this is the page that will open for you and this is the official website of the Python programming language from where you can download the latest version for Windows over here since my machine is Windows I will be downloading this Python and the latest version is 3.11.1 it might so happen that you are watching this video in the future for which the latest version might be something else so you can download the latest version of the Python interpretor from here apart from this you can also get the links to the installer if you're using some other operating system over here so guys once you have installed python on your machine you can quickly open command prompt so over here in the command prompt you can simply type py followed by double hyphen characters and then you provide version and then when you press enter as you can see python 3.11.1 this is the version of python that is already installed on my machine you might have some separate version but the command will be same in order to check whether the python is successfully installed on your machine now guys after successful installation what you have to do is the last step is to connect this python interpreter in vs code so we select the python interpreter in VSS code so over here you have to come on the settings on the bottom left and then over here you can see the command pallet you can also have the shortcut key as Control Plus shift plus P if you're using the keyboard keys and then when you click on this on the search bar you have to type Python and then colon and then we have select interpreter so as you can see this is the option and when you click on this as you can see this python 3.1.1 is getting displayed over over here which you are supposed to select in order to select the python interpretor now guys what we are doing over here is we are connecting this python interpretor with this Visual Studio code so that whenever we write the python code our program gets executed successfully on the vs code itself now guys it might so happen that you don't get this option that's because you have installed python after installing vs code so you can simply restart this vs code in order to get this option over here and once you select thist option you are ready in order to write the python programs in the vs code IDE so guys just by using these four steps of installation you can quickly get started in order to write the python programs in the vs code and all the steps have been documented in this official documentation of the visual Studio website so you can check the content of this documentation as well the link I have given in the description already now guys we are going to write the first code in Python so what we are going to do is we are just going to close these tabs over over here and we are going to open this Explorer over here it is saying no folder opened initially so what you can do is you can create the folder initially in order to organize all your python programs so basically I'm going to just create a new folder over here and I'm going to say python so this is the name of the folder and then I'll select this folder over here so as you can see a new folder that is python has been created now you can write python programs inside this python folder you can have any other folder in any of the directories it depends on you where you want to store the python codes that you will be writing from now on so what we will be doing is as you can see this is the icon it says new file so we will be clicking on this new file and let's say I provide the name of the Python program as python followed by underscore and then we have code followed by dot we have py so guys this is very important that after typing the name of the file we have to append it with py this is the extension of the pyth Python program and this extension will help the vs code in order to interpret that this is the python code and it should execute this code using the python interpretor so guys I'm going to press enter over here and once we press enter this python code. py it is going to open automatically over here now simply we can print some content in our Python program as the first code in Python so over here we have something called as print statement as you can see once we type print it is auto suggesting us what are the different keywords that we can use so so when we press enter over here this print gets selected automatically now inside the open and close parenthesis what we are supposed to do is we can type one particular statement that is the name of the YouTube channel that is programming for beginners which you should definitely subscribe so this is a string that is a statement that we have given over here and this is the very simple Python program that we can write and what this will do is it will simply print this content that is programming for beginners on the console so guys over here you have to come on file and then you can click on save or else you can use the control+ S on the keyboard in order to save the file which I'm going to do in the upcoming videos as well so first of all you save this file and simply you have to come on this top right corner over here you can see this run python file button over here so when you click on this run python file the terminal will open and it will execute this file that is python code. py that we have simply created over here and as you can see programming for beginners string is getting printed so guys in this way we have return the very first code in the python and using the print statement we have printed the programming for beginners we can print any other statement over here as well so let's say I'll provide this as a statement and then when we save this file and try running this code once again as you can see this is a statement is getting printed over here on the terminal so guys this is the way we can easily set up our python interpreter along with the editor that is Visual Studio code you you can use any other editor that you want such as you can simply use the notepad file as well but you will not get such strong features which are provided by the visual studio code in the notepad file apart from that you can also use notepad++ or we have a very popular ID that is py charm and apart from that we have many other editors that you can use but vs code is one of the lightweight editors that you can use when you are writing the python programs python keywords and identifiers so guys keywords are nothing but these are the reserved words in Python so basically these are the words that we cannot use as the identifiers now what are identifiers these are nothing but these are the names that are given to variables functions classes and many other objects that we are going to see in the upcoming videos as well so guys for examples as you can see over here the examples for keywords are true and then we have false if condition else condition LF so Guys these are certain keywords that you must be aware if you have already learned some other programming language and if not then you don't have to worry but we are going to learn about these keywords in the upcoming videos as well you just need to know that these are certain keywords which cannot be used anywhere else apart from their own functionalities so guys over here in order to make it more easy for you I have the list of all the python keywords over here as you can see false none true and many other keywords are present that have specific functionality as far as Python programming languages is concerned and you cannot use them apart from their own functionality where they are supposed to be used now apart from this what are the examples of the identifiers as you can see message this is a particular name that we have given to a string another example is language which can Define another language such as a Korean language or the Hindi language English language or Spanish or French language or any other language which can be defined using this variable we also have other identifier such as number count so so this is nothing but these are certain names that are given to a particular variable so we should not mix up between the keywords and identifiers whenever we are writing the python programs so guys let us check this with the help of some examples over here so as you can see in this ID we have the output of the previous example that we have executed so simply we can type CLS that is the command in order to clear the content of the terminal over here when we press enter the entire terminal is cleared and then what we will do is as you can see previously we had written a print statement and inside this we had given the content that this is a statement what we can do is this value can be assigned to another variable which is called as the identifier so I will just remove this line over here and before this what I will do is let's say I provide Str Str as the identifier name followed by equal to and then in between the double codes I'm supposed to provide the string that is this is a statement that we had printed over here using the print statement and then what we we can do is in this print inside the open and close parenthesis over here we can simply provide this s Str which is the identifier so guys what exactly is happening over here is we have provided the content that we want to print and we have stored that content in a particular identifier so this is called a identifier over here that is St Str which is nothing but a name over here which is given to this particular value and we can simply provide this name that is Str Str over here and when we save this file and try running this code now so as you can see this is a statement is getting printed so it doesn't matter what content is provided over here we can provide some other statement as well like programming for beginners which is the name of the YouTube channel which you should definitely subscribe if you have not subscribed it already so when we save this file and try running this code as you can see programming for beginners is getting printed now so it depends on what value is being stored in this particular variable which is also called as identifier we can give any name to this ident Iden ify let's say instead of St Str we can simply give statement as the name of this variable but we have to change it in the print statement as well so I'll just copy the statement variable and paste this over here so guys this is nothing but identifier it is also called as a variable since we are storing some particular value inside this variable I click on Save and when I run this code once again again it is printing the same content that is programming for beginners so guys this is one example of identifier and in similar way we can have any other name to the identifier and along with that we are supposed to provide the value now apart from that can we use the keywords as the variable names so let us check this so let's say if I provide if keyword over here so instead of this statement over here I provide if and then let's say if I print this if so what will happen let me just save this file and try running this code so as you can see it is providing the syntax error that is invalid syntax and we can see if equal to so over here it is pointing out so as I've already told you we cannot use keywords as the identifier since they have their own meaning as far as python programs are concerned so we need to avoid the keywords being used as the identifiers and we should give some other names apart from all these keywords that are being displayed over here which we are going to learn in the upcoming videos as well guys it will only come with practice that you will come to know that which are the python keywords and which you are not supposed to use as the identifiers so don't need to worry you just stick with me till the end of this video series and we are going to learn a lot about the python programs now there are certain rules while naming the identifiers so as you can see identifiers cannot be a keyword which we have just proved by providing the if keyword over here and then apart from that identifiers are case sensitive so Guys these are two different identifiers let's say I provide Str Str over here which is one identifier we can simply print this using the print statement over here and then let's say we have another it identifier as St Str so over here we can have a different statement so let's say I simply provide the string over here so what will happen is if I save this file entery running this code now it is saying programming for beginners but Str Str and Str Str both the identifiers are same the only difference is these characters are uppercase characters whereas this s Str has lowercase characters but when we provide this Str Str over here in the print statement let me just save this file enter I running this code as you can see this time string is getting printed that's because we have saved the string in this particular identify that is capital Str Str so guys this proves that identifiers are case sensitive and you have to take caution while you are naming your identifiers over here apart from that it can have a sequence of letters and digits as well however it must begin with a letter or a underscore the first letter of an identifier cannot be a digit so basically we are supposed to start with the letter or it can also be a underscore over here and then white spaces are not allowed and apart from that we cannot use special symbols like exclamation mark at the rate hashtag and dollar sign and so on so there are certain special characters which cannot be used while you're naming your identifiers so python variables constants and literals so guys what are python variables so in programming a variable is a container that is a storage area to hold data so as we have seen previously a number is a variable and we can provide the value that is 10 so previously we had seen a string variable in which we had stored some statement whereas we can also have the integer values being stored in the variables so over here if we move to our Visual Studio code so we can simply type number that is the variable name which can be assigned a value so equal to 10 so this is nothing but an integer value being assigned to a variable which is named as a number we can also have the string so let's say programming for beginners so we have programming for beginers s see string over here which can be assigned to a variable and the variable name can be given as Str Str or it can be also given as message or any other name that you want to give while writing your Python program so Guys these are nothing but variables which can be used later on in the program basically their functionality is to store some values so in this case number is storing the value that is 10 and this Str Str variable is storing the value that is programming for beginner string now guys it is very important to note that python is a type in referred language so you don't have to explicitly Define the variable type it automatically knows that 10 is an integer and declares the number variable as the integer so guys basically it depends on the value that we are providing so just because you are typing number as the name of the variable it doesn't mean that it has to be necessarily having the integer value you can also have the string value as well so when I copy this and paste this over here the number will have programming for beginners but guys this doesn't make any sense over here but programmatically this is also possible that's because we don't have to provide any data type over here in the python programs so whatever the value is data type will be given to that particular variable based on the value that is being provided to the variable this is very important Point as far as python programs are concerned in other programming languages such as Java or C++ we have a very strict data type that needs to be provided before we provide our variable names over here and guys this is also one of the advantages of using the Python program it allows us to write the code quickly compared to other programming languages now guys moving forward what is the python constant so basically a constant is a special type of variable whose value cannot be changed so for example as you can see the pi value is 3.14 so over here guys before defining the constant variable what we can do is if we simply print this variable over here that is print followed by number that is being given inside the parenthesis I'll save this file and try running this code now so as you can see programming for beginners is getting printed that's because the value is given as programming for beginners let's say I provide the integer that is 20 over here and then when I save this file enter I running this code now the number should have the value that is 20 and that is what should be printed so as you can see when we run this code 20 is getting printed over here so whatever value is being stored and whichever variable we want to print the content of that variable will be printed now coming to the constants that we have just defined so in Python let's say if you provide pi equal to 3.14 over here so instead of this number we provide Pi it is equal to 3.14 I'll just remove this line of code and then simply I'll provide pi over here so what will happen is it will display this value that is 3.14 I'll save this file and try running this code now as you can see 3.14 is getting printed but guys what is the use of this constant basically we are saying that Pi is constant over here that's because us using this nomenclature that is the constant variable must have all the characters as the upper case so this can Define that it is a constant over here but is it actually a constant no in this case since again we can use pi over here and we can provide some other values as well such as 5.15 over here so when I save this file Ander try running this code now it is saying now that Pi is having 5.15 which is the latest value so guys there is no concept of python constants over here right now but what we can do is we can save this value in some other file so let's say I create another file over here and name it as constant followed by the extension that is py over here when we press enter we can simply provide this statement that is pi equal to 3.14 I just copy this and paste this over here so we have provided pi equal to 3.14 now what we can do is coming to this python code what we can do is we can use the import keyword now guys this import keyword is used in order to import some other python files into this file so that we can use the content of that other python files over here so we are going to import this constant. py in our python code program so import we can say constant over here so when we type constant as you can see constant is getting Auto suggested over here that's the very important feature of the intellisense which is included in the python extension that we had installed so we provide constant over here and what we have to do is while printing we can simply provide this constant over here that is constant followed by Dot and then as you can see Pi is getting Auto suggested that's because we had defined pi over here so we simply have to provide Pi so what will happen is it will print the value of the pi so when we save this file and try running this code now once again it says module constant has no attribute Pi so guys that may be because we have not saved this file that is constant let me come over here and save this file over here once again and I'll go to this python code and then run this file once again so as you can see now 3.14 is getting displayed so guys if you want to use some constant values you can have a separate file that is constant. py in which you can store all the constant variables let's say we have another variable over here that is St Str and then we provide string s the value so this Str Str can also be treated as a constant for which the values never change while we are executing the code I'll save this file over here and let's say if I want to print the string as well so I'll copy this line of code paste this over here and instead of Pi we will provide Str Str now so we provide constant. pi and constant. St strr also so when we save this file and try running this code now we get both the things that is 3.14 we get the string value as well so if you want to use the constants in Python you can have a separate file all of the constants can be defined over there and then you can import that constant file and use the various variables that you have defined as constant in order to write your python programs so guys moving forward over here what are python literals literals are representations of fixed values in a program they can be numbers characters or strings etc for example hello world is one of the literal then 12 is another literal 23.0 and then C character true false Etc so guys literals are nothing but these values so basically this value it is a literal this particular name that we have given is the identifier or also called as variable but in this case it is a constant now this variable becomes constant when the value cannot be changed but we can change this anytime in this code but not over here an identifier can be a constant when we don't want to change its value anytime in our Python program and again the string value inside the double codes it is a literal python data types in which numeric string list tle set are included so Guys these are the different data types that we can see in this this video and the upcoming videos as well so basically in computer programming data types specify the type of data that can be stored inside a variable so for example number it is equal to 24 so 24 value belongs to the numeric data type and this is the integer value inside the numeric data type we have many other data types such as integer value then we have float value as well in which there is a decimal point we have a complex value as well in which as you can see this expression that is 1 + 2J this is a complex expression so all these are having numeric data types over here so number over here is a numeric data type or the integer as you can see 24 is the value if it was 24.5 then we would say that number variable is of float data type so guys let us check this with the help of example what we can do is we can simply copy these lines of code over here I'll copy this and we'll paste this over here now what we will do is this constant. py that we had created previously I'll just remove from our python folder over here since it is no longer needed and we will simply keep python code. py where we are going to write all the programs over here so guys over here I'll simply replace the content of this file by this content I'll save this file and over here in the terminal I'll simply clear the screen so as you can see num one it is defined as five which is the integer that is being assigned to num one so the data type over here will be the integer data type and using this print statement what we are doing is we are using using this num one and then followed by comma is of type which means num one will be printed that is five will be printed and then we will have is of type string being printed and then type this is another method that is being used in order to get the type of a variable so as you can see this is the syntax that first we provide type and Then followed by open and close parenthesis and over here inside this we have num one that is the variable name guys similarly we have provided num 2 as 2.0 and the same thing we are doing that is we are finding the type over here and then in the num three as well we are getting the type of this num three variable let me just save this file enter running this code now so as you can see five is of type class in so this is of the integer data type 2.0 since it is having the decimal over here it is saying it is of type float over here and 1 + 2 J it is of type complex over here so these are all numeric data types and inside the numeric data type y these are described as integer float and complex values now apart from this guys we have other data types as well such as string that we had seen previously we have list as well tle and set so guys let us check this one at a time so over here what we will do is simply I'll provide Str Str and then I provide the Str Str value as programming for beginners so what we will do over here is we want to find the type of this Str Str variable so what we can do is we can simp simply have the print statement followed by open and close parenthesis and we can simply have the type function so guys as you can see type is being Auto suggested over here we will select this and inside the open and close parenthesis we will use this variable so I'll just copy this and paste this over here that is Str and then when we save this file and try running this code now as you can see class that is St Str is getting printed over here we can also have some string value over here that is first of all we are going to type Str Str that is the value of this s Str and Then followed by comma and then we can simply have is of type inside the single Cotes over here guys it is very important that whenever you want to type certain characters we should either have it inside the single quotes or double codes as we have seen over here and then when we save this file and running this code it will show us the data type of this string with the most sensible statement so as you can see programming for beginners this is the string value that we have given and then is of type now this is of type we have provided over here and then this type function that is Str Str it is returning the type of this Str Str variable which is class Str Str over here so this is of string data type now guys this Str Str over here it stands for string and not the name of this variable if I provide here something else then it will be more sensible so let's say if I provide statement over here as the name I'll copy this and paste this over here and when we run this code once again so as you can see it says class St Str is of type class St Str so since we have not replaced this St Str with the statement that is why we are not getting it properly I'll run this code once again now so as you can see programming for beginners which is the value of this statement variable over here and then is of type and then we have class Str Str over here now apart from this we have other data types as well such as list which can be defined as the square brackets so what we have to do is let's say I provide list one as the name of the variable and then equal to now guys list is nothing but it is a data type that have collection of elements so over here let's say we have collection of strings so let's say we have collection of fruits over here so the first fruit is Apple followed by comma and then again we have double quotes and then we have mango so all the elements are being separated using the comma over here as you can see and then let's say we have banana over here as the third fruit so what we can do is we can simply have print statement over here and then we can have type of this list one so I'll say list one over here when we save this file and TR running this code now as you can see class list is getting printed so this is of data type that is list over here similarly we have tle and set as well which we are going to see in the upcoming videos what are the different contents of these data types and how do we use them and when do we use them so guys for now you just need to remember that whatever value that we provide to a particular variable automatically that data type will will be assigned to that particular variable basic input and output in Python Programming so guys in this tutorial we will learn simple ways to display output to the users and take input from users in Python with the help of examples now guys as we have seen previously in Python we can simply use the print function to print the output so let us check this with the help of example over here so I simply want to print a statement so let's say I want to print programming for beginners that is the name of this YouTube channel which you should definitely subscribe if you have not subscribed it yet so once we provide the string inside the double codes we can simply save this file and try running this code now so on the terminal we will be able to see this string getting printed that is programming for beginners I have missed out an O character over here so this is the correct string so programming for beginners is the string that we want to print and that is what we have got over here in the terminal now guys even with this print function over here this is a function and it takes certain parameters so parameters are nothing but certain values that you can provide to the function so as you can see the actual syntax of the print function accepts five parameters so basically we have only provided one parameter over here this can be treated as a parameter that is the value that we want to print now apart from this we also have other parameters as well so object is the parameter which is nothing but the value to be printed apart from that we have separator then we have end parameter file and then flush parameter so these are the five parameters and these are the descriptions of each and every parameter so over here the separator which is an optional parameter since we have not provided any separator over here it allows us to separate multiple objects inside print so let's say after this string I want to provide another number over here so let's say 1 2 3 4 is the number that I want to provide now I want these objects that is one is programming for beginners which is a string and another object that is a number to be separated using commas so so what we will do is after providing comma we will use the SCP that is another parameter as you can see VSS code is providing us the auto completion feature over here so we just need to select that and then we need to provide single codes and inside this we provide comma followed by the space character so guys what will happen is all the objects will be separated by using this comma and the space character over here it depends on your requirement how many objects you want to provide inside this print statement so let me just save this file enter I running this code now so as you can see programming for beginners and then we have this comma followed by the space character and then we have this 1 2 3 4 object being printed over here we can have another object so let's say I provide another string that is another statement over here so let me just save this file and try running this code now so we are getting an error invalid syntax perhaps you forgot a comma so basically after providing each and every object we have to separate it using the comma over here and then let let me just save this file andent I running this code now so as you can see programming for beginners followed by comma and then we have space characters and then we have 1 2 3 4 again we have comma and then space character and then we have another statement so guys in this way we can use the separator parameter as well in order to separate the different objects inside the print function now going to next parameter which is end over here which is again optional by default it is the Slash and character in which case the control flow goes to the next line Whenever there is another object that is getting printed over here so as you can see it allows us to add specific values like new line or tab character so guys let's say we have this print function over here I'll just remove this part of the line over here and let's say I have another print function in which case I am providing another statement so let's say we have another statement over here so guys what will happen is by default this end parameter is having the Slash and character which means the control flow should go to the new line Whenever there is a next print statement that is encountered so let me just save this file and try running this code now so as you can see programming for beginner string is getting printed in first line and on the second line another statement is getting printed now what if we want both these statements to be printed on the same line but they are present in the different print function so what we will have to do is in the first print function I will provide a comma over here and then we have the end parameter so as you can see this end parameter we have to select and then inside the double Cotes I'll simply provide the full stop followed by the space character so guys what is happening over here is after the string is getting printed at the end of the line we are providing this full stop and then followed by the space character and then whenever there is a next string that is encountered by the control flow it will get printed on the same line so let me just save this file and try running this code now so as you can see programming for beginners and then we have a full stop and then we have the space character as well and then we have another statement that is is getting printed so guys we can also use this end parameter if we want multiple print functions to be used but all the objects need to be printed on the same line the other two parameters are file which is again optional where the values are printed so basically by default the values are printed on the screen and that is why its default value is system. STD out which means it should print on the screen you can also provide some file path over here so that the content can be return in the file apart from that we also have the flush which is again an optional parameter it is a Boolean specifying if the output is flushed or buffered so by default it is having the false value so Guys these two parameters you can practice on your own as a homework for you apart from that guys it is very important that how do you take input from the user in Python Programming so basically while programming we might want to take the input from the user in Python we can use the input function so as you can see we have a variable over here or we can say identifier it is equal to we have used the input function so guys this input function it will take a parameter which will be kind of a label which will be printed on the screen for the user as a instruction so we are asking the user to enter a number and the number that will be entered by the user will be stored in this num variable over here so guys let us check this with the help of example now I'll just remove these lines of code so what we have to do is let's say we provide the number variable it is equal to we have to use the input function as you can see this is the function that is being suggested by the vs code over here and then using the open and close parentheses inside this we have to provide a string inside the double codes so we can simply provide enter a number now this is a instruction to the user to enter the number now guys what we can do is we can print this number now we can easily print this by using a string so let's say we provide the string over here that is entered number is and then followed by colon and then after this object we have to provide a comma and then we can provide the number variable to be printed so we have provided the number variable over here let me just save this file andent try running this code now so as you can see it is asking the user over here to enter a number so what I will provide is simply I will provide 10 as the number and then when I press enter as you can see entered number is 10 so this string is getting printed along with the number that is being entered by the user now guys it is very important to note that whenever we are using this input function the input that is taken by the user will be of the type string over here so if we print the type of this number variable over here let me just do that so we simply provide data type of number colon and then what we have to do is after comma we have to use the type function and inside this function we have to provide the number variable let me just save this file and try running this code now enter a number so let's say I provide 10 as the number as you can see enter number is 10 and after this data type of number it is class string so this is of string data type so whatever input is being taken from the user it will be stored as a string so what we have to do is we have to convert it into a number now since this is a string we cannot add another number to this particular number so let's say if we try to add some another number over here so we simply do number + 5 over here let me just save this file enter I running this code now so when we provide 10 as the number when I press enter as you can see it says can only concatenate string not in that's because we are trying to concatenate a string with a number over here that is the integer so what we have to do is we have to convert this input into an integer so we can simply provide int over here and then the entire input function needs to be enclosed within the open and close parenthesis so guys this we had seen previously as well this is the explicit type conversion over here which is the manual type conversion in which we are converting the string data type to the integer data type and now we will have the integer over here which can simply be added with another integer so let me just save this file and try running this code now so as you can see enter a number this time let's say I provide 15 as the number and then when I press enter as you can see entered number is so what is happening is this number that is 15 was taken and then five was added to this number and that is why 15 + 5 is 20 and this number is getting printed over here and you can see this data type of number now it is of the type integer that's because we have used the type conversion over here so guys this is the way you can take input from the user make sure that whenever you're using the input function the data that is being entered by the user is of the type string and you need to convert it into the appropriate data type before you can use the other operators arithmetic operators in Python Programming so guys arithmetic operators are used to perform mathematical operations like addition subtraction multiplication and many other operations which can be done using the integers or the numbers in Python so guys for example let's say we provide the print function over here and inside this function we provide 5 + 6 as the parameter so what will happen is the plus operator is being used over here in order to add these two numbers that is five and six and the result that is 11 will be printed so let us quickly check this with the help of example over here so what we will do is we will use the print function and inside this parenthesis we will simply provide 5 + 6 over here and when we just save this file and try running this code now so as you can see 11 is getting printed so guys what we have done over here is we have simply used the plus operator in order to add two numbers we can also do this by using the variables as well so let's say we provide num one it is equal to 10 and let's say we provide num two it is equal to 20 and then let's let's say I provide sum it is equal to num 1+ num 2 over here so guys basically once again we have used this plus operator in order to add two numbers that is num one and num two for which the values are 10 and 20 respectively and the result will be stored in this sum and when we provide this sum inside the print statement we will get that result so let me just save this file and try running this code now so as you can see 30 is getting printed that is a sum of 10 + 20 over here so guys this is one of the arithmetic operator that is plus is being used in order to add the two numbers apart from this addition we have other operators as well as you can see subtraction we have in which the two numbers can be subtracted so over here 4 Min 2 it is equal to 2 so over here minus operator is being used we have multiplication as well in which multiply operator is used in order to multiply two numbers we have division as well in order to divide the two numbers so as you can see four divided by 2 it is equal to 2 so we are getting the quotient over here and we have the modular operator as well which can be used by using this person operator so guys what happens is 5% 2 what this will do is it will divide the number on the left hand side that is five by the number on right hand side that is 2 so 5 ID 2 it will give us the quotient as two but the remainder will be one and we will be getting the remainder of this operation that is one over here and similarly we have power operator as well so as we can see 4 and then 2 * multiplication symbol over here which is the power symbol and then two which means 4 ultied 4 will be done which is equal to 16 so basically this is nothing but the square of the number in this case it is the square of this number that is four so guys let us check all these operators with the help of examples over here so what we will do is first of all we will print and add two numbers so let's say we provide 10 as first number and 20 as the second number so this is the addition of two numbers let's say we want to subtract two numbers over here and the two numbers are let's say 20 and then minus what we do is we will minus 15 over here let's say the third expression is multiplication so I will simply provide five as the number multiplied by 7 as another number the next operator is the Divide operator so let's say I provide the print statement over here and we provide 50 as one number divided by 10 as another number and then we have another print statement let's say we want to find the remainder after dividing two numbers so let's say 40 is one number and then we provide percentage sign and then we provide 15 as the second number and then the last operator that is the power operator I simply provide five as the number and then two times multiplication over here which means power and then I provide two as the second number so guys let me just save this file and try running this code we will check the results of all these operations over here so as you can see the first print statement that is 10 + 20 it is providing us 30 as the result and this is the correct result over here 20 15 should be 5 and that is what we are getting over here as 5 and then 5 * 7 it is equal to 35 and we are getting 35 over here then 50 divided 10 should give us the quotient that is 5 and we are getting 5.0 over here and then 40% 15 which means 40 is divided by 15 and then what is the remainder is getting returned to this print function and 10 is getting returned why 40 divid by 15 the quotient will be 2 that is 15 * 2 is 30 but the remaining number will be 10 which will be the remainder and that is what we are getting over here is the 10 as the remainder and then 5 power 2 which means 5 * 5 is done over here and 5 multili by 5 is 25 and that is what we are getting over here so Guys these are certain arithmetic operators that you can use which include addition subtraction multiplication division and then finding the remainder of the two numbers by dividing wring them and then we can also find the power of the number so guys you can use them based on your requirements assignment operators in Python Programming so guys the assignment operators are used to assign values to variables so as you can see in this example the number variable is assign the value that is five so this is the assignment operator that is equal to over here apart from that we have other operators as well so as you can see this is the assignment operator that is used in order to assign some value to a particular variable we also have addition assignment in which we use the plus operator first followed by the equal to symbol so guys what exactly happens over here is let's say if we provide this expression over here that is a and Then followed by plus symbol and then equal to operator and Then followed by this value that is 1 so this is nothing but it is the expression that is a equal to a + 1 so basically 1 is getting added to this variable that is a and then it is getting stored in the same variable that is a so guys let us check this with the help of example over here so first of all I will provide the number variable and we will provide a value that is five over here so this is a simple assignment operator we can simply use the print function in order to print this number so when we provide number as the parameter to this print function and when we just save this file and try running this code now so as you can see on the terminal five is getting printed that is the value of this number now let's say we want to add 10 to this number so we can do this in two ways is so first of all we can simply use the plus operator that we had seen previously so number equal to number followed by plus operator and then 10 so guys this is one of the arithmetic operators that we had seen previously that is used in order to add two numbers so number + 10 in this case it will be 5 + 10 that is 15 and 15 will get assigned to this number and it will be printed by using this line of code over here let me just save this file and try running this code now so as you can see 15 is getting printed now guys there is another way in order to add this 10 to this number so we will simply remove this part of the code over here and then what we have to do is we have to provide number followed by plus operator and then equal to operator and then the number that we want to add to this number that is 10 so guys what is happening over here is this is the shorthand method for the same expression that we had written previously so it is equal to number equal to number + 10 so guys this is the expression that is working over here behind the scenes and 10 is getting added to this number and the result is getting stored in this number variable itself let me just save this file and try running this code now so as you can see 15 is getting printed over here guys this is nothing but a comment that we have provided I can just remove this part over here and let's say I want to add 15 now so we provide 15 as the number so 5 + 15 should be 20 let me just save this file and try running this code now so as you can see 20 is getting printed and this this is how we can use one of the assignment operators in order to add two numbers let us move to another assignment operator we have the subtraction assignment as well in which case we have to use minus operator followed by equal to symbol in which case this expression will get computed that is a it is equal to a minus 3 in this case when we provide a minus operator followed by equal to operator and then 3 similarly we have multiplication assignment in which multiply and equal to are used in combination we have division assignment as well in which case divide and equal to is used remainder assignment in which case this percent sign is used along with the equal to symbol and exponent assignment as well in which case the two times multiplication symbol is used and then equal to operator is used in order to compute the power of the numbers so guys let us check the remaining assignment operators with the help of examples over here so what we have to do is the number variable is already five and to this number we can simply change the assignment operators so let's say I want to subtract some number over here so what we will do is number then minus equal to operator let's say I want to remove two from this number so it is nothing but 5 2 in which case the answer should be three so let me just save this file and try running this code now so as you can see three is getting printed if I want to multiply this number so I'll simply replace this minus by multiplication symbol and let's say I provide four over here as the number so this should be 5 * 4 let us check what will be the result so 5 * 4 is 20 in this case let's say I want to use the Divide operator so we can simply use the divide and then equal to symbol and let's say I provide the number over here as three so let me just save this file enter I running this code now so 5 divid 3 will give us 1.66 as the result and that is what we are getting over here now guys similarly let's say I want to find the remainder while we divide five by three over here so we simply have to replace this divide Operator by the percent operator over here and let me just save this file enter are running this code now so 5 / 3 the quotient will be 1 in this case and the remainder will be two in case we don't want the decimal output over here so two is the remainder and that is what we are getting over here and the last operator that is the exponent operator over here so we simply provide the multiplication symbol two times and then equal to operator and then let's say we provide two over here so this is nothing but 5 * 5 that is the square of the number that is five let me just save this file and try running this code now so it is 25 over here if you provide this as three so what will happen is five will be multiplied by the same number that is five three times over here so let me just save this file and try running this code now so as you can see five multiplied by 5 is 25 and then 25 multiplied by 5 again will give us 125 as the result and guys this is how we can use the assignment operators based on our requirements as the shorthand methods in order to carry out the the mathematical operations on the numbers comparison operators in Python Programming so guys the comparison operators compare two values or the variables and return a Boolean result that can be a true or a false value so let's say for example as you can see we have two variables over here that is a is equal to 3 and b is equal to 5 so when we print this statement and inside this we have a comparison operator that is greater than operator over here that is a greater than B so what is happening behind the scenes is there is a check whether this variable that is a is it greater than b so if we see 3 is not greater than 5 over here in which case the return value will be false over here but in case when the value of a is greater than b then this particular expression that a is greater than b will return us True Value so guys let us check this with the help of example over here so let's say we have the variable a it is equal to 3 and the variable B it is equal to 5 and then when we have this comparison operator over here we use the print statement we say a greater than b so guys this particular operator is the greater than symbol over here which can be treated as the comparison operator in order to compare the two variables or the two numbers as well so let me just save this file and try running this code now so as you can see we are getting false as the result that's because the value of a is three and the value of B is five in which case a is not greater than b and that is why we are getting false over here guys similarly we have other comparison operators as well as you can see we have is equal to so basically 3 equal to equal to 5 no in this case because both these numbers are not equal so that is why this expression will give us the result as false over here similarly we have not equal to in which case it will give us true that's because the two numbers are not equal so we use the exclamation mark followed by the equal operator in order to check the not equal to expression and then we have the greater than sign as we have seen just now greater than symbol similarly we have less than symbol over here so this less than symbol will give us true over here that's because 3 is less than 5 and we also have greater than or equal to so guys basically what happens is let's say if the value of a and b both are three so basically is three greater than three no in this case so false will be return but when we provide greater than or equal to which means we are checking that the two variables should be at least equal or greater than so in that case when both the values are three so 3 greater than or equal to three will give us true in this case similarly we will have less than or equal to symbol as the less than symbol and equal to symbol combination so guys let us check all these with the help of examples over here so we have checked the greater than symbol over here let us check the less than symbol so we will simply provide print a less than b over here which should return us true in this case that's because the value of a is actually less than the value of B over here let me just save this file and try running this code now so as you can see first expression is false that's because a greater than b no in this case but is a less than b yes in this case and that is why we are getting true over here let us check some more comparison operators over here we provide the print statement is a equal to B over here and then let us provide another operator that is a not equal to B in this case and then we have another oper operator that is a less than or equal to B and then we have another operator that is a greater than or equal to B in this case so guys we have provided all the comparison operators over here let me just save this file and try running this code now so as you can see these are the results over here so the first result is false that's because a is not greater than b a is less than b yes in this case so that is why we are getting true over here is a equal to B no in this case because 3 is not equal to 5 so we are getting four false as the result then is a not equal to B yes both numbers are not equal and that is why we are getting true over here is a less than or equal to B so is 3 less than or equal to B yes in this case so that is why we are getting true and is a greater than or equal to B no in this case and that is why we are getting false over here now guys let us see what happens when B is also equal to a so we have provided both the values as three over here let me just save this file and try running this code now so as you can see we are getting the results over here so the first result is false that's because is a greater than b no in this case they are equal and then the second result is also false is a less than b no in this case both are false over here so Guys these are false that's because we are not checking whether they are equal or not but in the last two operators as you can see over here the last two results are true that's because we have included the equal to symbol so a less than or equal to B yes in this case that's because a is equal to B and is a greater than or equal to B yes in this case since a is actually equal to B so both these operators will return us true whereas both these operators will return us false whenever both the numbers that we are comparing have the same value now guys apart from this the third operator that is a is equal to B yes in this case and that is why we are getting true over here and is a not equal to B no in this case since A and B both are equal so this will return as false and that is what we are getting over here so guys these are certain comparison operators that you will be using in the upcoming videos as well when we are going to check the if else statement and we will also be using the V loop as well in which case we have to use these comparison operators to go inside the loop or else to come out of the loop logical operators in Python Programming so guys The Logical operators are used to check whether an expression is true or false so they are used in decision making so as you can see for example let's say the value of variable that is a is equal to 5 and the value of B variable is 6 over here and we have the print statement over here and there are two conditions that we are checking first of all whether a is greater than two so in this case the return will be true over here that's because the value of a that is five is actually greater than two over here and then as you can see this end keyword this is nothing but this is one of the logical operators it is being used in order to check the multiple conditions and the second condition that is being checked over here is whether B is greater than or equal to 6 so in this case since B is equal to 6 so yes in this case it is also true so basically since both the Expressions over here that is the second expression and the first expression is true and because this end logical wants all the Expressions to be true the return for the entire expression will be true over here so as you can see these are certain logical operators over here first of all we have the end operator which means A and B it is true only if both both the operant that is a and b are true over here similarly we have r as well so as you can see A or B in this case only one operant needs to be true that is only one condition needs to be true over here so this will be true if at least one of the operant is true and then we also have the not operator in which case we can use it as not a so it will be true if the operant is false and it will be false when operant is true over here so guys let us check all this with the help of examples over here so let's say we have the variable that is a is equal to 5 and B it is equal to 6 over here so we simply have the print statement and let's say we provide the condition that is a is it greater than two over here and we also have another condition so using the end logical operator over here we can combine multiple conditions so next time we will be checking whether B is greater than or equal to 6 so guys in this case both these conditions that is a greater than two will return as true and then B is greater than than or equal to 6 will also return as true so this entire expression will be true over here so let me just save this file and try running this code now so as you can see true is getting returned over here now what if one of the conditions is false over here so what we have to do is let's say I provide a less than two in which case this particular expression will become false so let me just save this file and try running this code now so as you can see false is getting returned that's because one of the Expressions while using the end logical operator is false over here here and according to rules all the Expressions while using the end logical operator must be true in order to return the true as the result now guys if we check the same conditions that is both these conditions by using the or logical operator so we simply have to provide or over here and let me just save this file and try running this code now so as you can see true is getting returned that's because the second expression over here is true and the first expression over here is false so anyway the or logical operator wants one of the conditions to be true and that is why we are getting the true as the result over here what if we make the second condition false over here so let me just change this expression to B less than 6 over here let me just save this file and try running this code now so as you can see false is getting returned that's because is a less than 2 no in this case so false is getting returned over here and is B less than 6 over here no in this case it is equal to six so this expression is also false so the entire expression is false and that is the only combination where the or logical operator will return us the false result now guys when do we use this not operator over here so let's say I have just a simple expression so over here I will provide is a less than 4 over here so in this case is a less than 4 no so it should return false so let us save this file and try running this code now so it is returning false over here but what if we want the opposite of this result so if the result of any of the expression is false we want to print true but if the result of any expression is true we want to return it as false so what we have to do is we simply have to provide not logical operator and the expression needs to be provided within the parenthesis over here as we can see so let me just save this file now so since it was returning false by using the not logical operator it should now return true so let me just run this code once again so it is returning true over here similarly if let's say this particular expression turns out to be true so we will get false as the result so let's say I provide a greater than 4 so is a for which the value is five over here is it greater than four yes in this case so this will return as true but since we are using the not logical operator it will return this True Result to false and it will be printed so let me just save this file and try running this code now so as you can see false is getting returned over here and it is being printed so Guys these are certain logical operators that we will be using in the upcoming videos as well when we are going to use the if else state M apart from that we will be also using the while loops and other control statements as well where we are going to use these logical operators so guys practice on your own so that on different inputs you get different outputs if else statement in Python Programming so guys in computer programming we use the if statement to run a block of code only when a certain condition is met so for example as you can see assigning grades that is a b c based on the marks obtained by a student so basically over here in this case we will be using the if condition now what can be the conditions we can say that if the percentage of the student is above 90% so assign grade A in the same way if the percentage is above 75% then assign Grade B and if the percentage is above 65% but less than 75% then assign grade C so during such conditions we have to use the if else statement over here now similarly in Python there are three forms of if if else statement so we are going to check all these forms of statements one at a time with the help of examples the first part is the if statement in which case we are going to Simply have the if statement over here along with the condition and the block of code the next form will be if else statement in which case we will also have the else block over here and the third form of the IFL statement will be first we will be having the if statement and Then followed by the AL if statement in which case we have another condition over here and then finally we have the else statement over here so let us check all this with the help of examples in the vs code so over here let's say we have the value of x it is equal to 10 now what we have to do is we have to provide the if condition over here so as you can see when we type if keyword over here vs code is suggesting us that we can use this if keyword so we are going to use this and then we are supposed to have some condition so we can say x greater than 5 over here so guys this is one of the comparison operators that we have already seen SE previously it will check whether this left hand side variable is it greater than the value that is present on the right hand side so guys this is one of the conditions that we are going to check and then followed by a colon over here so guys this is the format in which we provide the if condition and if this condition that is whether X is greater than 5 if it is true then we want to come inside this and there will be the block of code we need to have certain statements over here so we will say print and we can simply put the string that is X is greater than 5 over here since that is the condition that we have checked so this is the very simple code that we can have with the if condition over here let me just save this file and try running this code now so as you can see it is displaying X is greater than five now guys this is just one statement that we have provided inside the if condition we can also have multiple lines of code inside this block over here after the if condition so we simply have to press enter and provide the another print statement and let's say we will simply put we have checked X so we have a very general statement over here that is we have checked X over here let me just save this file and TR running this code now so as you can see X is greater than 5 this thing is getting printed and this statement that is we have checked X is also getting printed so all the lines of code that is present inside the block after this condition that we have provided in the if statement will be executed only when this condition that is X greater than 5 is true now what if this condition is not true so let's say I provide X less than 5 over here in which case this condition will become false so what will happen is the control flow will not go inside this block and it will not print these statements over here let us verify this I will just save this file and try running this code now so as you can see nothing is getting printed over here that's because these lines of code are not getting executed because this condition was false now how do we verify that we have to to come out of this block so basically we have indented this code that is there are some space characters over here in this line that is why these lines of code over here are treated to be present inside the block after this condition we have to come out of that block over here so we simply press enter and then we press backspace so that the cursor is aligned to this if condition over here now we can simply provide another print statement and I will simply say outside if statement so over here we say outside if statement now guys this line of code it will confirm that the control flow has come out of the if block over here so let me just save this file now and try running this code so as you can see we are getting outside if statement that's because X less than 5 condition was false and that is why these two lines of code were not printed and then the control Flow came out of the if condition and then this line that is outside if statement was printed so guys it is very important that you follow this indentation as far as as your python programs are concerned you might get incorrect output if you don't follow such indentations properly now let us move to another form of if statement so over here the second form is we provide the else part as well so the first part we have already seen that is using the if statement let us now use the else statement as well so over here what we will do is first of all we will check whether X is greater than 5 and then we will print that is X is greater than 5 over here now what if X is not greater than 5 that means it is less than or equal to 5 so we have to define the else part over here so first of all we have to remove this indentation part so I'll just press on back space and then we provide the else keyword as you can see vs code is suggesting us this else keyword over here we will use this and then followed by colon and then we can go inside this block of code and similarly we will have another print statement in this case we will say X is not greater than 5 so we are checking whether X is greater than 5 and we will say x is is greater than 5 if this condition is true and if this is not true then it will go in the else part and it will say X is not greater than 5 and after this part of code gets executed the control flow will come over here and it will print this statement that is outside if statement over here so let me just save this file andent running this code now so as you can see it says X is greater than 5 so over here since the value of x it is 10 it is printing X is greater than 5 after this x greater than 5 condition is true and then after that we are getting outside if statement so the control flow did not go inside this else part that's because it went inside this if part and this line of code was executed so guys the control flow can only go inside one block of code if this condition is true then it will come out it will not go inside the else part and if this condition becomes false then it will go over here in the else part and execute that line of code so let us check that second scenario now what if X is not greater than 5 so we will change the value of x and let us say the X values is 2 now so in this case is X greater than 5 no in this case so this line of code that is X is not greater than 5 should get printed let me just save this file enter I running this code now so as you can see X is not greater than five this line of code is getting printed that's because the condition was false and the control Flow came in the lse part and it executed this line of code after this outside if statement got printed over here as you can see on the console so this is one of the examples of the if else statement that we can use guys there will be many instances where you will be using this if else statement in your actual programs so make sure that you practice on your own now after this let us see another part that is we have the AL if as well so guys let us take this example over here that is of grading system so if the percentage is greater than 90 we have to assign the grade that is a If the percentage is greater than 75 but less than 90 then we will say the grade is B and if the percentage is greater than 65 but less than 75 then we have to put the gr as C so guys let us move to the code over here let us clear all these lines of code and over here we will simply have the percentage variable and let's say we have 95 as the percentage initially and then we have another variable that is great let's say it is equal to D initially so we have this character that is D over here now what we have to do is we have to provide the if condition and the first condition is whether the percentage is above 90 so over here we will say inside the if condition first of all whether this percentage is it above 90 over here so we will simply have percentage greater than 90 and if this is true then we have to provide colon and then we have to make the value of this grade as a so grade it is equal to a over here inside the single codes now we have another condition that is if the percentage is greater than 75 but if it is less than or equal to 90 then it should be B so what we have to do is we can use the L If part over here so we have L if keyword so as you can see vs code is suggesting us this L if keyword over here followed by we have to check whether this percentage again is it greater than 75 so over here if it is greater than 75 then we have to come in this block of code and then after this again we have to assign the value to this grade variable and this time the value will be B over here so we will assign the value to grade as B and then after this we will again have the L If part over here and we need to check whether the percentage is greater than 65 or not and then in that case we have to provide C so over here we will say l if percentage it is greater than 65 in this case and then if this is true then we have to provide the grade value as C over here and then guys we can also have the else part over here and we can simply provide that the grade in the lse part it can be D over here in case the percentage is less than than 65 so we can have gr as D and then finally we will have the print statement over here so we have the print function and we will simply provide the grade value so the grade is and then we have comma and then the grade variable over here so guys over here as you can see initially the percentage is 95 so it should go inside the first if statement so let me just save this file now and try running this code so as you can see we are getting some error over here at the else part so over here we have forgot to provide the colon after the else part so it is very important that we provide the colon after any of these keywords that we have used and the conditions that we have used so let me just save this file and try running this code now so as you can see the grade is a that's because the percentage value is 95 and in this case percentage is greater than 90 and that is why the grade is being assigned as the value as a now what if the percentage value is not greater than 90 so let's say we provide the percentage value as 85 so in this case the control flow will come over here it will check whether the percentage greater than 90 no in this case then it will go inside the L If part so is percentage greater than 75 yes in this case so this line of code that is grade equal to B will get executed and then the control flow will come directly out of the if else statement and it will print the grade over here let me just save this file andent try running this code now so as you can see the grade is being assigned the value as B so grade is B is getting printed over here similarly let's say we provide the percentage value as 70 so this time this condition that is percentage greater than 65 will get executed because the previous conditions are already false in this case so let me just save this file Andy running this code now so grade must be C so as you can see the grade is C over here and what if the percentage is less than 65 so let's say we provide the percentage is 60 so finally the lse part that is grade equal to T will get executed so let me just save this file and try running this code now so now in this case the grid is D so in this way we can easily use the IFL statement we can also use the AL if key word in order to check the intermediate conditions over here for Loop in Python Programming so guys in computer programming Loops are used to repeat a block of code so let's say for example if we want to show a message 10 times we don't have to print that 10 number of times over here we can simply use the loop in order to repeat the same message again and again 10 times so in Python the fall Loop is used to run a block of code for a c certain number of times so in this example we have considered 10 we can have any number of iterations so basically it is used to iterate over any sequences such as list tle string Etc so guys this is the syntax of the Fall Loop in Python Programming so first of all we have the for keyword followed by a particular value or a variable and then we have this in keyword which is a kind of a membership operator that we have seen previously and then we have the sequence now this sequence can be anything it can be a list stle or any other sequence over here so let us check this with the help of examples now so over here what we will do is let's say we have the variable name as X and we have the list of numbers over here so in order to define the list we have the open and close square brackets and we have the list of numbers let's say we have one followed by two and then we have three four and then five so we have the top five numbers over here inside this list that is defined in the variable X now what we want to do is we want to print all all these numbers one at a time on the separate lines so we can simply use the for Loop over here so for and what we will do is let's say we provide value as the variable name and then we provide the in keyword which is the membership operator and after this on the right hand side of the in keyword we are supposed to have the sequence so the sequence in this case is the variable that is X over here so this is the format of the Fall Loop whenever we are going to iterate through a list or a sequence now inside this we can have the block of code over here so we simply want to print all the values so we have the print function and we can simply provide this value that is variable so guys what is happening behind the scenes is this x that is the list of all the numbers one at a time the number is being assigned to this variable that is value so first of all one will get assigned to value and this value that is one will get printed and then the control flow will go back again in the sequence that is X it will check whether there is a next element or not so two will get printed and then again three and then four and then five and then after this when the control flow comes over here it sees that there is no other element after this Fifth Element so the control flow will come out of this fall Loop and then the other lines of code after this fall Loop will get printed so guys let me just save this file enter I running this code now so as you can see all the numbers are getting printed over here on the terminal that is 1 2 3 4 5 now guys let's say we want all these numbers to be printed on the same line so so previously we had seen that we have certain parameters in the print function that will help us in order to print the values in a specific way so over here we have one of the parameters that is end over here so we provide end and this parameter helps us in order to separate the different elements that we want to print so what we are going to do is I'm going to separate all the numbers using the comma character so I have provided the comma character over here so all the numbers that were printed on the different lines will get printed on the same line now so let me just save this file and try running this code now so as you can see 1 2 3 4 5 is getting printed we are getting this additional comma over here at the end that's because after the last value is getting printed the comma is appended after that last value so guys this is one of the ways in which we can use the fall Loop in order to carry out our operations now guys there is another important thing that you must know in Python the fall loop with python range can also be used so in Python a range is a series of values between two numeric intervals we use the Python's builtin function that is range to define a range of values so let's say we want to define the top 10 numbers over here we can simply use the range function instead of defining them one at a time like how we have defined in this list so basically in order to have the top 10 numbers we have to manually Define it as 1 to 10 over here but we can also get rid of this part we can have the range method over here so as you can see when we type range vs code is suggesting us this function that is range over here and we simply have to provide a number over here so let's say we provide 10 as the number so what is happening is the list of 10 numbers over here is getting assigned to the variable that is X over here starting from the number zero up to the number that is 9 so over here we will be seeing all the numbers starting from zero up to 9 over here the last number that is 10 is excluded from the list so if we Simply Save this file enter running this code now we will get these numbers that is 0 1 2 3 4 5 6 7 8 9 so 10 numbers are getting displayed over here that's because we have provided 10 inside the range builtin method what if we provide 20 over here so 0 to 19 numbers will be displayed so let me just save this file and try running this code now so as you can see 0 to 19 is getting displayed so guys let's say if someone had told you write a Python program in order to print top 20 numbers starting from the number zero up to 19 so instead of having the print statements 20 number of times and writing each and every number inside the print statement we can simply have the range method over here and we can use the fall Loop in order to iterate through the list that we have already defined over here and that is how we simplify the problem that is given to us and write the Python program now guys there is another variation over here python fall loop with the else part so after this fall Loop we can also have the lse part that will mandatorily get executed after we reach the end end of this sequence that we have provided in the fall Loop so what we will do is we will simply come out of this block of code and we will have the else part over here and we will simply print outside for Loop over here so we have outside for Loop so guys what will happen is after the control flow comes out of this fall Loop the control flow will go inside this L's part and it will execute this line of code and print outside fall loop on the console now guys this print statement will be printed on the same line that's because we have provided the end part over here and there is a comma over here so you can expect the string to be present on this same line over here so let me just save this file and try running this code now so as you can see 0 to 19 that is all the numbers are getting printed and then the last line that is outside fall Loop is getting printed over here so in case you want to print something or carry out certain operations after the execution of the Fall Loop you can have the lse part as well and it will carry out the oper operations over here after the end of this sequence is reached so guys this is the main functionality of the Fall Loop that is in order to iterate through the sequence we can also have the sequence of list of strings as well we can also have tle or dictionary as well so guys it depends on your requirements as to what exactly you want to find out through the python programs while loop in Python Programming so guys previously we have seen how the fall Loop works in the Python Programming now the python y Loop is used to run a specific code until a certain condition is met so basically in the fall Loop there was no such condition that we had provided but it was iterating through a list that we had provided in the form of a variable but over here this is the syntax of the while loop first of all we have the while keyword over here and then we have a certain condition and if this condition is true then only the control flow will go inside the body of the while loop and then again the control flow will come over here it will check the condition again and if the condition is true once again it will again go inside the body of this while loop so guys again and again the control flow will come inside the while loop until and unless the condition becomes false so when this condition becomes false the control flow will come out of this while loop and that is how the while loop is going to work in the Python Programming so guys let us check this with the help of examples now so let's say we want to print the first five numbers that is 1 to 5 so over here initially we can have the variable that is I it is equal to 1 and the second variable that is J it is equal to 5 so this is the starting point that is I equal to 1 and the ending point is J is equal to 5 so basically we can have a while loop over here we will simply have the while keyword and the condition that we have to give is whether I is less than or equal to J and up to that condition we want to print the value of I so basically it is I less than or equal to J over here so if this condition is true we want to print the value of I which will be be one initially so basically I want to print this number that is I over here now guys what exactly is happening over here is I's value is 1 initially J value is five initially so is I less than or equal to J in the first instance yes in this case so I will be printed which is equal to 1 so again it will go inside the Y Loop and it will check whether 1 is less than or equal to 5 yes in this case so guys we are not changing any of the values that is I or J over here so this will be infinite Loop because again and again the condition will be true and the number that is I which is equal to 1 will get printed indefinitely so what we have to do is we have to increment the value of I because after one we want to print the value that is two over here so what we will do is we will simply add 1 to I so I it is equal to I + 1 we can also use the Shand method that is I + equal to 1 over here so what will happen now is I's value is updated to I + 1 which will be 2 2 now so is 2 less than or equal to 5 yes in this case and then again two will get printed and then I will again get incremented over here so the I's value will be three next time I's value will be four and then again I's value will be five and then ultimately when I's value is six this condition will become false that's because 6 is not less than or equal to 5 and the control flow will come out of the while loop so guys let me just save this file and try running this code now so as you can see all the numbers that is 1 2 3 4 5 is getting printed after the I's value is five over here five is getting printed now I's value becomes six over here that's because 5 + 1 will be 6 and is 6 less than or equal to 5 because the J's value is five over here in this case so no the condition becomes false and the control flow comes out of the while loop now what if we want to print all these numbers on the same line so simply inside the print statement we can have the comma and then we can have the end operator and then let's say we want to separate all the numbers with the space characters so inside the double codes we have provided the space character over here so let me just save this file and try running this code now so as you can see 1 2 3 4 5 is getting printed over here we can have any numbers over here let's say I is starting from 11 and let's say we want J is equal to 20 so in this case 11 to 20 should get printed let me just save this file and TR running this code now so as you can see 11 12 13 14 and up to 20 numbers are getting printed over here so guys this is the main functionality of the while loop it is going to have a certain condition and if this condition is true the block of code inside the while loop will get executed and once the condition becomes false control flow comes out of the while loop now guys we can also use the lse part with the while loop so over here as you can see python while loop with the else part so a while loop can have an optional else block as well the else part is executed after the condition in the while loop evaluates to false so basically after this while loop we can also have the else part which is optional so we can have the else part over here what we will do is we will simply have the print statement that is outside the while loop so we have the print function and we will say outside while loop over here so let me just save this file and running this code now so as you can see 11 12 13 up to 20 numbers are getting printed and then on the same line the outside while loop the statement that we have provided in the else part is getting printed so this is the functionality of the lse part after the Y Loop it is optional if you want to have we can have it or else we don't need to have it but guys the important thing is inside the V Loop we can provide a particular condition and the control flow will go again and again inside the V Loop until the condition is true once a condition becomes false the control flow will come out of the V Loop now guys what you should use whether you should use the python for Loop or python while loop over here so guys basically they are used based on the specific requirements so as you can see fall Loop is usually used when the number of iterations is known so as we had seen previously in the fall Loop we provide a particular sequence and iterate through that sequence by giving one value at a time to a variable and we use that variable inside the block of the Fall Loop but in the while loop there is a condition so while loop is usually used when the number of iterations are unknown so we don't know the number of iterations we don't have the sequence of elements or the list of numbers through which we want to iterate so basically we provide the condition in the while loop So based on these requirements you can choose whether you want to use the while loop or you want to use the fall Loop but guys it is very important that you practice both these Loops the implementation of these Loops are very important as far as Python Programming is concerned so break and continue keywords in Python Programming so Guys these are two important keywords in Python Loops that is break keyword and the continue keywords basically these are used in the loops in order to carry out certain operations so the break statement is used in order to terminate the loop immediately when it is encountered so whenever we are executing certain code inside the for or the while loop if there is certain condition we can use the break statement in order to come out of the loop and then on the contrary we have the continue statement as well so the continue statement is used to skip the current iteration of the loop and control flow of the program goes to the next iteration so guys let us check both both of these keywords with the help of examples over here so let's say first of all we will be using the fall Loop in order to print the top 10 numbers that is 0 to 9 so let's say we have 4 x and then we have the in membership operator and then we have the range builtin method in order to print the numbers so let's say we have the range of 10 numbers over here after the colon let's say we want to print all these numbers so what we will do is we will simply put print X and in order to get all the numbers on the same line I'm going to put end parameter over here and just have the space character over here so let me just save this file and try running this code now so as you can see we are getting the top 10 numbers that is 0 1 2 3 up to 9 over here but guys let's say now there is a requirement that before printing this six number we want to come out of the loop and we only want to print from 0 to 5 and if we are required to keep this foral statement as it is what we have to do is once we encounter the number six inside the fall Loop we have to come out of the Fall Loop so how that can be done basically we will have the if statement over here so inside this fall Loop we are having the if statement over here and we are going to check whether this x value is it equal to 6 over here so this is the relational operator that is equal to equal to we are trying to check whether this x variable is it equal to 6 and if it is equal to 6 then we can simply come out of the loop by using the break statement so after the colon over here here we will simply put the break keyword so once we put this code over here that is if xal to 6 we are putting the break statement the control flow will come out of the loop when the x value is equal to 6 so let me just save this file and try running this code now to see what happens so as you can see 0 1 2 3 and then up to five numbers are getting printed and once a control flow comes over here next time the value of x will become 6 and it will check whether X is equal to 6 yes in this case and since this condition is true the control flow goes inside the if statement and this break statement is encountered which makes the control flow come out of this fall Loop over here now similar operation is being carried out when we use the while loop as well so let's say I is equal to one over here and let's say we want to print the first 10 numbers once again so what we will do is we will say while we can simply put I less than or equal to 10 over here and then after the colon we can simply have the print function over here and we will print the value of I and then let's say I provide the end parameter as the space character over here so that all the numbers that is the value of I is printed on the same line so let me just save this file enter I running this code now so we have entered the infinite Loop over here I have just interrupted the printing of the numbers the mistake that we have done is we have not incremented the value of I over here so what we will do is simply we will increment the value of I by I + 1 over here let me just save this file and try running this code now once again so as you can see 1 to 10 numbers are getting printed now again let's say we want to print only the numbers from 1 to 7 so when the number 8 is encountered we want to come out of the while loop instead of printing the 8 9 10 numbers so we can simply put the if condition over here if I is equal to 8 then what we have to do is we have to use the break statement over here so let me just save this file and try running this code now in this case the top seven number should get printed and after eight is encounter the control flow should come out of this while loop over here so I'm running this code now so as you can see 1 to 7 is getting printed over here so guys this is the main functionality of the break keyword let us now understand how continue works as you can see the continue statement is used in order to skip the iteration of the loop and the control flow of the program goes to the next iteration let us understand this with the help of example over here we will take the same example that is for I in and then the range that is 0 to 9 over here so over here we will provide the number 10 inside the range builtin function so what we will do is we will simply print the value of I over here and then we will end it with the space character let me just run this code once so I'll just run this code over here as you can see 0 to 9 is getting printed now guys let's say I don't want this number five over here that is being printed in the range 0 to 9 so what we can do is simply I will put a condition over here if this I's value equal to 5 then what we have to do is we don't want to print that number right so after this colon we can simply put the continue keyword so guys what will happen is once the I's value is five the control flow comes inside the if condition and the control flow will encounter this continue keyword so what exactly will happen is instead of going to the next statement over here the control flow directly goes back again to the fall Loop and goes to the next number so next time the I's value will be six and this time since this condition will be f it will print this number that is six over here so in short what is happening is when the value of I is five it will not get printed over here with the help of this print statement so let us check this so I'll save this file and try running this code now so as you can see we are getting 0 1 2 3 4 and then there is no number five but after four we have six directly and then we have 7 8 9 so guys in this way continue keyword works so let's say if I only want to print the even numbers so what will happen is let's say I don't want the odd numbers so how do we check that in the if condition we can simply put I per 2 is it equal to 1 over here because every odd number if it is divided by two it will give us the remainder as one and that is what we are checking so all the odd numbers will not be printed but only even numbers will be printed so let me just save this file and try running this code now so as you can see only even numbers between 0 to 9 is getting printed that is 0 2 4 6 six and then 8 and guys this is the functionality of the continue keyword that is in order to make the control flow go back to the fall Loop for the next iteration and guys that is the main functionality of the continue keyword in order to skip the current iteration and go back to the next iteration inside the loop now guys similarly you can use the continue keyword with the while loop as well so that code I'll leave up to you so that you can practice on your own in order to learn more about it functions in Python Programming so guys we will learn about the python function fun and the function expressions with the help of examples so basically a function is a block of code that performs a specific task so it can be any task that you want to implement based on your requirements but it is the block of code that you can put inside the function and that block of code will have your implementation of the logic now suppose you need to create a program to create a circle and color it so there are two task over here that is first of all in order to create a circle and the second thing is to color it so you can create two functions to solve this problem that is the first function will be to create a circle and that will be one function and another function will be to create a color over here so basically what we have done is we have divided a complex problem into smaller chunks which makes it easier to understand the program and reuse the functions as well so there are two types of functions so first of all we have already seen some standard Library functions as well one of the example is the print statement that is the the print function so these are builin functions in Python that are available to use so let us check some examples of standard Library functions over here so previously we have seen the print statement so this is nothing but one of the builtin functions which take multiple parameters so one of the parameters is the value so when we are providing programming for beginners the string which is the name of the YouTube channel as well which you should definitely subscribe so this is the string that we have provided to the print function and this string is being passed to the print builin method and behind the scenes this print function is having some sort of code that will help us in order to print the statement on the terminal so when we save this file and try running this code now basically this programming for beginners is getting printed what we have done we have just called that function and the implementation is behind the scenes so this is one example of a builin function similarly we have another builtin function that is range which helps us in order to have the list of numbers from zero up to the number that we have provided so let's say we provide the number 10 so it will provide us all the numbers before 10 starting from zero so this is another builtin function so similarly we have other standard Library functions as well now you can also have the user defined functions so in case your requirement is not fulfilled by using one of the standard functions that is being provided by python you can have your own user defined functions also so we can create our own functions based on our requirements and this is the syntax that is first of all we have this keyword that is DF which means Define and then we have the function name so this function name will be the name of the function like this range is the name of the function then the print function the print name is the function name over there so similarly we can have our own function name and after that we have the list of arguments we can have any number of arguments over here inside that we will have the function body where our implementation code will be present and then we can also have the optional return statement which means it will return some value so over here as you can see this is the example we have the defined keyword and Then followed by the greed function over here so it is not taking any arguments for now it is simply printing some statement that is inside greed function now how do we call this function simply we use the function name that is greed followed by open and close parenthesis and then we call the print function and we say outside function so guys let us check this with the help of example over here so simply we will have the defined keyword so D EF and let's say we have sum and then underscore numbers so basically what we are doing over here is we will be adding two numbers so over here we have the open and close parenthesis and then after that we have a colon and let's say we have the number a it is equal to 10 and then we have number B it is equal to 20 we want to print the sum of these numbers so we simply provide print fun function inside this and we say A + B and then we can also have the string over here let's say we have sum of A and B and then we have colon and then after this we have comma and then we have a plus b over here so guys this is the function that we have already defined we have two numbers that is a is equal to 10 and B is equal to 20 now if we Simply Save this file and running this code we will not get anything so as you can see there is no print statement which is helping us in order to print something on the terminal why so because this code is present inside a function which is not called yet so we need to call this function that is some numbers so how do we call it by simply calling the name so we simply have to provide some numbers over here and then open and close parenthesis and that's it we have simply called this function which will make the control flow go to this particular function over here and inside it will go it will check that a value is 10 B value is 20 and it will print sum of A and B it will carry out this operation that is a plus b so let me just save this file and try running this code now so as you can see sum of A and B it is equal to 30 and that is how we can simply provide the function now guys why do we write this function just to add two numbers so let's say you have a scenario you have a it is equal to 10 and then we have B it is equal to 20 and you want to print the sum so you can simply provide print a + b so you will get the answer as 30 now with the same requirement you have another requirement as well in the same code that is with this particular addition you want to add more two number so what you will do is you will simply copy and paste these lines of code once again that is the three lines of code over here but this time the age value is something else so let's say we have something like 50 and then 60 over here so what will happen is with this print statement it will print the sum of these two numbers now let's say there is another requirement in which case all the sum needs to be printed at once and you have two more numbers so you will again copy these lines of code and then again paste this over here and then let's say the numbers are 100 and then 200 over here that is B is 200 so let me just save this file andent running this code now so what is happening is all the sum is getting printed once that is 30 110 and 300 but let's say similarly if you have 10 sets of A and B values in this way and you want to print all the sum of those numbers so what you will do so your code will become little bit complicated and it will be little bit lengthy as well so in order to avoid this what you can do is you can simply have the function and inside the function you can have those variables and have the sum of those variables so in order to achieve your task that is have the sum of multiple numbers over here in one screen and using the function what you can simply do is you can pass these values that is 10 20 50 60 and 120 while calling the function that is some number so I'll just remove these lines of code now over here and what we will do is I will simply provide the parameters that is the arguments over here that is a and Then followed by comma and then we have B now these A and B are not required because the values will come whenever this function is being called so I'll just remove these lines of code over here you will simply have one print statement inside the function and the sum of A and B it is A + B so this sum will get printed over here while calling the function you're supposed to provide the A and B value so what we will see simply do is I will simply call this some numbers over here and I will provide the values of A and B so what we had provided we had provided 10 and 20 and then again we had the requirement that is to add the other two numbers which were 50 and 60 so again I will just copy paste this sum numbers function and provide the different values this time and then again I will copy and paste this once again with some different values so 100 and 200 so as you can see our code has become little bit cleaner instead of having three lines of code in order to add two numbers every time for which our code has also become lengthy we have a very short code and it is very clean as well it is very readable as well so let me just save this file now and try running this code so as you can see we are getting sum of A and B it is 30 sum of A and B it is 110 and sum of A and B it is equal to 300 you can also customize your function in order to have the values of A and B over here so we can simply say over here we have the double codes and then we have comma and then we have a over here and then we have double codes and then we have and keyword double codes and then B value and then comma and then double codes over here before the colon so as you can see A and B values can also be printed so let me just save this file and try running this code now so as you can see 10 and 20 were pass first time so it is saying sum of 10 20 it is 30 then sum of 50 and 60 it is 110 and then sum of 100 and 200 is 300 you can call this function any number of times with different values in order to get the different sum over here I'll say 200 + 300 again and then let's say I provide 400 and 500 over here let me just save this file ENT I running this code all the sums are getting printed and our code is also very clean over here so guys this is the main functionality of using python functions you can simply have the defined keyword followed by the function name and then this arguments list is option over here you can pass it or if you don't want to pass it there is no need to pass so as you can see over here python function arguments this we have already covered that is in order to pass the argument now one last thing is return statement so guys we have not checked any return statement over here so return is nothing but it will return some value so let's say instead of having the print statement over here we want the print statement outside the function so what we can simply do is we can simply return the expression that is A+ B so so we can have the return keyword over here so it will say return a plus b so simply whatever value were being passed over here that is 10 and 20 it will return the sum that is 10 + 20 it is equal to 30 to this code and over here we should have something in order to catch that value so I'll just remove these lines of code for now and then let's say in order to catch the value I provide the sum variable so this sum variable is assigned the value that is being returned from the sum numbers over here which is equal to the sum of these two numbers and then simply we can have the print statement in order to print the sum value so some variable can be printed so let me just save this file and try running this code now so as you can see 30 is getting printed that's because we have passed 10 and 20 over here also to make it more short what we can do is instead of storing the value inside this variable we can simply have the print statement and inside the print statement we can simply call the sum numbers function so as you can see we have the print statement inside this we are calling the sum numbers 10 and 20 so it will return 10 + 20 it is equal to 30 so let me save this file enter I running this code now so 30 is being printed let's say I change the numbers to 20 and 50 over here so 20 + 50 should be 70 let me just run this code so 70 is getting printed and based on the requirement you can format the print function that is you can have any statements being printed over here along with the sum of the numbers so guys this is one of the examples of how you can find the functions and use them you can have any other logic inside the functions that you want to implement based on your requirements so guys practice on your own so that on different inputs you get different output recursion function in Python Programming so guys in Python we know that a function can call other functions as well it is even possible for the function to call itself and when the function call itself it's called recursive function so basically these type of construct are termed as recursive functions whenever a function calls itself from inside its body so for example the factorial of a number is the product of all the integers from one up to that number so if you see the example the factorial of 6 which is denoted as 6 and then exclamation mark it is equal to 1 * 2 * 3 * 4 * 5 * 6 which is equal to 720 and this is the factorial of the number that is six so guys we can find the factorial of any number by using the recursive function so let us understand how recursive functions work with the help of example over here so let's say we have the factorial function in this case so factorial is the name and then let's say if we provide the variable name as X over here so what we will do is we will simply have to provide the condition over here that is if x is equal to 1 we have to return one in this case so guys always remember that whenever we are having the recursive function we need to have the end point we need need to have a limit on which we need to return some basic number over here so this is the limit in this case that is when the value of x is equal to 1 that is at the lowest level the function needs to return the value which is one and then if it is not one then we can call that function once again now how do we call that function we simply use the x value that is the current x value and then we multiply that number with the factorial of x 1 so this time we provide x one in this casee and one more thing that we can do in order to return this result is we can have the return keyword so guys we will understand this function in detail now before which we will just call this function over here that is factorial and let's say I provide the number that is 6 that we have already seen for which the factorial of 6 must be 720 and what we will do is since this factorial function is returning this value that is return X multiplied by this recursive function we will catch the value in the result so result it is equal to factorial of 6 and we will simply have the print statement saying that factorial is and then colon and then we can simply provide result variable over here so let me just save this file and try running this code guys no need to worry over here I will make you understand each and every line of code over here and how it works so just stick with me till the end of this video so as you can see factorial is 720 so this is the result so we have got the correct result over here now let us understand the working of this recursive function so what exactly is happening over here is we have defined the function that is factorial in this case now result is the variable name for which we will get the value from this factorial function that we have called so basically the control statement comes over here factorial of 6 so the control statement will go to the definition of this function so x value is 6 right now so what we will do is we will understand over here one step at a time so right now X it is equal to 6 in this case so is x value equal to 1 no in this case so the control flow will come over here and it will check this expression that is x * factorial of x 1 so this expression we will put over here that is 6 which is the value of x * by factorial of x 1 so x value is 6 so X 1 will be equal to 5 in this case now what will happen is now factorial of five is being called over here so what is the factorial of five the control flow will go back again to this function and that is why we call it as recursive because from the body of this function we are calling the function itself now this time x value is 5 so is x equal to 1 no in this case so this time again this expression will be called so x value will be five in this case and multiplied by factorial of x 1 which will be 4 so again next time what will happen is 5 multiplied by factorial of four will be called now what is the factorial of four so again the control flow will come over here it will check whether X is equal to 1 no in this case so again this expression will be computed so this time it will be x = 4 * the factorial of 4 1 which is 3 right now and then again now x value is three so again it will be 3 * factorial of 2 in this case and then the last statement that is 2 * factorial of 1 in this case now when the factorial of 1 is being called what what will happen is factorial of X which will be factorial of 1 in this case so X is equal to 1 yes in this case so it will return true and the control flow will not go over here to carry out the computation of this expression so return one will return to the factorial of one function so in this case factorial of 1 will become one over here now 2 * 1 is equal to 2 and this result will be returned to this function that was called so 2 * 1 is 2 so two will be return returned over here 3 * 2 is 6 so factorial of 3 will become 6 and 6 will be returned over here 6 * by 4 is 24 so factorial of 4 will have 24 as the result and then 24 * 5 which is equal to 120 and that value will be returned to this function called that is 120 and then 120 * 6 will be 720 which is the last expression that was computed and that is what we will get over here that is the result will be 720 in this case and that is what we got 720 over here now guys similarly we have seen that the factorial of 4 is equal to 24 so this result we can get simply by calling the factorial function with the value four as the argument so let me just save this file enter I running this code so as you can see factorial is 24 similarly we can get the factorial of three which is equal to 6 so we can simply put three over here and then let me just save this file and try running this code so factorial is six in this case and guys that is how the recursive function works this is just one example that is in order to find the factorial we can have any kind of implementation code based on your requirements provided the requirement can be fulfilled by using the recursive functions if we see one more example let's say we want to find the factorial of the number that is 10 let me just run this code once again so it says 36280 and that is what we get as the factorial of 10 comment in the comment section below whether this result is correct or not so guys please practice on your own so that on different inputs you get different output and that is how you are going to learn more about Python Programming so guys there are certain advantages and disadvantages of recursive function as you can see recursive functions make the code look clean and elegant so we have made the code very clean and elegant over here a complex task can be broken down into simpler sub problems using recursion so we can have any number that is 100 or 200 and get the factorial of that number just by using these lines of code over here and then sequence generation is easier with recursion than using some nested iteration now what are the disadvantages sometimes the logic behind recursion is hard to follow through so basically as you have seen as I have told you that there must be some end point that you need to provide so basically this is the end point in this factorial function based on your requirements there must be some end point up to which you need to restrict the call of the function from its body itself so that condition you need to ident identify based on the requirement and recursive calls are expensive they are inefficient as they take up a lot of memory and time and the recursive functions are hard to debug so guys basically these are certain disadvantages so it depends on your requirements what exactly you want to implement and accordingly you can use the recursive functions Anonymous or Lambda function in Python Programming so guys in Python an anonymous or Lambda function is a special type of function without the function name so we use the Lambda keyword in instead of DF that is defined to create a Lambda function so as you can see this is the syntax previously we had used the DF keyword in order to create the normal functions but this time we are going to use the keyword that is Lambda along with the arguments which are optional over here and then followed by a colon and then we have the expression so this is one of the examples of the Lambda function over here we have the Lambda keyword followed by the colon over here and then we have the expression that is we are printing the hello world string and this entire function that is the anonymous function which is not having any name over here is being assigned to a variable that is greed and then this greed needs to be called as you can see call the Lambda over here along with the open and close parentheses so when we have this line of code over here this Lambda function will be called and hello world will be printed on the screen so guys let us check this with the help of example over here so what we will do is simply we will have the Lambda keyword first of all and Then followed by a colon and then let's say we want to print the name of this YouTube channel that is programming for beginners which you should definitely subscribe if you have not done so so we have programming for beginners over here so this is a Lambda function or the anonymous function without having any name and then let's say we assign it to a variable and we can simply provide the variable name as Str Str and then we have the equal to operator over here now what we have to do is simply we need to call this St Str variable so over here on the new line we will have S Str followed by open and close parenthesis and this is the way that we call the anonymous function so let me just save this file and try running this code now so as you can see programming for beginners is getting printed over here and this is one of the simple examples as far as Anonymous function or Lambda function is concerned in Python Programming now guys very important thing what if you have certain arguments which you want to print so this is kind of a static function which which is having a fixed string that you want to print but let's say you want to provide some string over here while calling the function so in case let's say we have this argument as this is a string that we want to print so this Str Str that is the Lambda function is being called but this value needs to be caught by this Lambda function over here so what we can simply do is we can take this argument after this Lambda keyword as we have seen in this syntax after the Lambda keyword we have the list of arguments that we can take and use them in the form of Expressions over here so what we will do is let's say I provide Lambda and Then followed by X so this x variable will have this value whatever we pass while we are calling this Str Str function that is the anonymous function so this x we can use in our expression inside this Lambda function so let's say I provide a label over here string pass and Then followed by colon and then I have comma and Then followed by this x variable which is being passed so so this is a string it is one of the arguments that we are passing to the Lambda expression and the X variable will be assigned to this value and it will be printed by using this print statement so let me just save this file and try running this code now so as you can see string passed this label is getting printed and then the value of x which was passed from this calling of the Lambda function over here that is this is a string and the same thing is getting printed over here so guys this is the way that we can pass arguments or parameters to Lambda or Anonymous functions over here now guys there is another variation can we have the multiple arguments let's say we have two or more numbers for which we need to find the sum of those numbers can we find the sum of those numbers by using the Lambda function so let us quickly check this with the help of examples over here so what we will do is again we will Define the Lambda function over here so we have Lambda keyword and this time we will take two numbers so let's say the two numbers are stored in these variables that is X and Y and Then followed by a colon and then what we can do is simply we can print the sum of these two numbers so we put x + y over here so this is the expression print x + y and over here in the Lambda we have defined the two variables over here now what we can do is we can assign it to another variable so let's say we have addore numbers as the variable name so we have addore numbers and then Lambda keyword followed by these two variables that is X and Y and then print x + y over here so what we can simply do is we can call this add numbers and provide the two numbers that we want to add so we just use this add numbers over here and then let's say the two numbers that we provide is 10 and 20 so we are expecting the sum that is 10 + 20 to be displayed by using this expression over here so let me just save this file and try running this code now so as you can see we are getting some syntax error Lambda expression parameters cannot be parenthesized so what we can do is we can simply remove these parenthesis that we have provided so when we are providing multiple arguments in the Lambda function we need not have to provide the parenthesis we can separate them using the commas over here so let me just save this file and try running this code so as you can see 30 is getting displayed we can format this string and have some label as well so what we can do is we have the double codes over here and we say sum of numbers and then colon and then comma X+ y so let me just save this file and try running this code now as you can see sum of numbers that is 30 is getting this played another way that we can print the sum of these numbers is just by returning the sum of these numbers and printing them over here outside the Lambda function so while returning any of the Expressions we need not have to have the return keyword we can simply have the expression over here so as you can see the two numbers were passed that is 10 and 20 it will be taken by this Lambda function in the form of X and Y X + Y will be computed and then it will be returned to this function which was called by using the add numbers now we can simply print this so we can have the print function over here and inside the print function we call the add numbers with these two numbers let's say this time we provide some other numbers that is 100 and let's say 150 so the sum should be 100 + 150 which should be 250 over here let me just save this file and try running this code now so as you can see 250 is getting printed and again we can have some labels over here in order to Define exactly what this function is doing so guys practice on your own so that on different inputs you get different output this Lambda function comes very important which is also called Anonymous function when you don't want to define the function explicitly and you have very less number of operations to be carried out by using this Anonymous function so modules in Python Programming so guys as our program grows bigger it may contain many lines of code so instead of putting everything in a single file as we have done so far we can use modules to separate codes in separate files as per their functionality so basically we can separate the codes and we can create separate files based on the functionality of the file that we are going to create so this will make our code organized and easier to maintain now a module is a file that contains code to perform a specific task so like let's say if we want to add two numbers we can have a function inside another file and we can call it as a module so a module may contain variables functions classes and many other things so as you can see over here for example there's a python module that is addition what we have done is we have defined a function over here so we have the add that is the function name which takes two parameters A and B so A + B which is the sum of these two variables will be stored in the result variable and this result variable is returned with the help of this return statement so guys this is one of the functions which can be present inside one module which is created as a separate file so guys let us check this with the help of example how we can create the module so basically when we go over here in the Explorer as we have seen previously we were using python thore code file in order to create all our programs but what if we want to create another file and have a function inside that file so we can come over here we can create a new file and let's say we want to name it as addition and Then followed by py which is the extension of the Python programming language so as you can see we have created this addition. py which is another python file over here so what we will do is let's say we have a function over here so Define add which takes two parameters that is a and b and then after colon what we will do is we will have the result variable which will have the addition of these two numbers that is a and b which will be passed over here and then we are going to return this result so return result so basically this function is going to take two values that is in the form of a and b and return the sum of these two values now this code is being return in another file that is addition. py so how do we call it from the main file that is python code over here so what I I will do is first of all we are going to save this file over here and switch back to our main file over here that is Python code. py and what I will do is over here we are going to import this module so this python file that we have created right now this is kind of a module so how do we import that module we are going to use the import keyword followed by the name of that module so the name of the module is the file name itself so we are going to provide addition so as you can see vs code is providing us this addition value over here which is part of the autocomplete feature of this editor so we are going to select this now what we can do is we can call this add function since we have already imported this module over here so simply what we will have to do is we are going to use this module name that is addition followed by Dot and then as you can see we have this add method and there will be many other methods that will be present which will come by default whenever we are going to create new python files in this way so basically we are interested in using this ad method so when we select this and then we have to provide the two values so what we will do is we will say 10 comma 20 now guys what is happening is this add function it is going to take two values that we have already passed and it is going to return the result so we are supposed to take that result in another variable over here so let's say we provide sum as the variable name which is going to take the return from this add function over here which will be the sum of these two numbers and then we can simply print the value of the sum variable so over here we will says sum of numbers followed by colon and then comma we have the sum variable name so guys let me just save this file now and try running this code so as you can see sum of numbers it is 30 right now so basically what we have done is we have created a module which is the user defined module over here and then we have created a new function inside that module which is going to take two values in the form of a and b and it is going to return the sum of these two values and then what we have done is we have imported that module that is addition and called the function that is the add function which is going to take two values as we had defined in the addition module and the sum will be stored in this sum variable over here and we have printed that sum variable so this is the classic example of a user defined module over here similarly there are multiple modules which are built in inside the Python programming language so as you can see there are certain important notes over here python has tons of standard modules so for now we have just seen the user module right now we are also going to take the example of a standard module now the standard modules can be imported the same way as we import our user defined modules so let us take the example of a standard module in this case we will take the example with the math Library module so what we will do is we will remove these lines of code over here and then we can simply import the math Library so as you can see over here once we put the M character as you can see these all are modules that are built in inside the Python programming language we are interested in this math Library over here so when we import math and then we can use the math Library over here and then follow by dot we can see many other functions and variables that are already present the thing that we are interested in is the pi value so as you can see we can get the pi value which is approximately equal to 3.14 and the same thing we can get from the math library and by using the pi variable over here so what we can do is let's say we provide the variable name as value and math do Y is the value that we want to store in this value variable and we can simply provide the print statement and then we can say by value is followed by colon and then we can simply put the value that is the variable name so guys what is exactly happening over here is we are importing the math Library which is the builtin Library over here which is a builtin module inside the Python programming language and then inside that we have certain variables and functions as well one of the variables is pi which is having a value and that value we are getting by using this math. Pi statement and then we are assigning it to this user defined variable that is value and the same thing we are printing over here with this particular string that is pi value is followed by colon and then the value variable over here let me just save this file and try running this code now so as you can see pi value is we can see this 3.141592 and so on it is a huge number after the decimal point so guys this is another way in order order to use the standard modules that are already present in the Python programming language next we are going to see how do we use the python import with renaming so far we have imported the libraries and used the names of those libraries or modules along with the function name or the variable name but what we can do is we can rename these libraries while importing them so after this import math we have to use the S keyword followed by m so guys this is nothing but it is a shorthand method that we can use in order to name this library right now so instead of typing this math Library over here we can simply use the M character over here because that is what we have defined that is import math as M so we can use M everywhere wherever we are going to use the math so let me just save this file now and try running this code we will see the same output that is pi value is 3.1415 and so on so guys the idea over here is you need not have to type the entire name of the module in this case whenever you are going to refer to a particular method or a function or a variable inside the module but you can use that simple one character or the two characters that you have used while importing the module now guys there is another way python from and then import statement so over here what we can do is let's say if we only want to use the pi variable in this case so exactly what we are doing is we are importing all the methods that is the functions as well as the variables but let's say if we only want the pi variable so what we can simply do is is we can use the from and then we can use the module name that is math and then we can simply import the variable so import and pi over here so as you can see we can use this statement as well that is from followed by the module name and then import and then what exactly we want to import we can just mention that and then after this we can simply use the pi variable name in order to assign it to another variable name or over here we can simply put pi as well so we can simply put Pi in the print statement also so let me just save this file and try running this code as you can see we are getting the same output that is pi value is so and so so basically in order to get the specific variable or the method we can use this statement that is by using the from followed by the module name and then we have the import keyword and then the name of that specific variable or the method now guys one last thing as far as python modules are concerned there is a builin function that is D which is directory it is a builtin function in Python in order to get all the variables and the function names inside the module so let's say I provide import math over here so we have import math and then what we can do is we can simply get the directory in this case we simply have to provide the DI function and Then followed by open and close parenthesis and let's say we provide the math Library over here inside the DI function so let me just save this file ENT I running this code now so guys nothing is happening over here that's because we have not provided the print statement so probably we'll provide the print statement and enclose the statement inside the print function let me just save this file and try running this code now as you can see we are getting the list of all the methods and the variables that are present inside the math Library so guys this is a very huge list over here as you can see we have A1 then a12 a 10 H and then so on we are getting all the method names we are also getting the variables as you can see we are having pi over here and so on guys similarly what we can do is let's say I import this addition module which is is a user defined module that we have already seen so I import this addition module and inside of this math I provide this addition module name so let me save this file so one of the methods that is present is ADD over here so this should be listed now so I'll just run this code now over here so as you can see add method is getting displayed apart from that there are many other builtin variable names at are present which gets generated whenever we create new modules over here so guys this di function can be useful in order to check which are the different variables and functions are present inside that module that we have already defined or if it is a builin module that is provided by the Python programming language random module in Python Programming so guys python offers the random module to Generate random numbers or to pick a random item from an iterator so we are going to check this with the help of examples now over here so first of all we are supposed to import the random module in this way and then as you can see we are print a random range over here we are using the random module followed by the dot operator and then we are using the Rand range function in order to find the random range over here so let us move to the vs code over here in order to check the examples so first of all we will be importing the random module so we have import followed by random over here next let's say I want to print the random range so what we will do is we will have the print function and inside that we will be using the random module that we have just imported followed by Dot and as you can see vs code is suggesting us many other variables and the method names as well that we can use so we are going to say random range over here and the range it should be between 10 and 20 so we provide 10 comma 20 s the range so let me just save this file now and try running this code so as you can see we are getting 12 over here which is the part of this random range that is 10 and 20 let's say we want the number to be between 100 and 200 over here here so let me save this file and try running this code now after making changes as you can see we are getting the 178 similarly let's say if you want to throw the dice and only numbers that are present on the dice is between 1 to six so you can use this random range function inside the random module and provide 1 comma 6s the number in order to get the number so as you can see we are getting four over here next time when we run this and then we are getting two over here so you can use this function in order to develop your next game as far as throwing a dice is concerned now similarly we can also have the list as you can see we have the list one and then we have five characters over here let's say out of these characters we want to select one of the characters so you can use the choice function inside the random module so let us check this with the help of example now over here so let's say we have the list of the programming languages so we name it as the list one as the variable name and then what are the programming languages so one is Python and then let's say we have Java as another programming language then let's say we have C++ and then let's say we have Swift as another programming language so these are certain programming languages now let's say out of all these four values we want to select one of the values randomly so what we can do is we can have the print function and then we can use this random module name followed by Dot and then we have the choice function name and inside this function we have to provide the list variable so we provide list one over here so basically we are passing this list one to this Choice function and asking the choice function to select one of the values from this list of values so let me just save this file and try running this code now so as you can see we are getting the Swift value as the random value if we run this code once again we will get some different value so as you can see we are getting Java this time then we run again we are getting python this time and then if we run again we are again getting Java so every time we will get a different value whenever we are using this particular function now let's say we want to print this list so what we will do is I'll just remove this part of the print statement and I'll simply provide a list one that is the variable name for that list let me just save this file enter I running this code now so as you can see we are getting this list of values now before this what we can do is we are saying original list over here as the label so we say original list now exactly what we want to do is we want to shuffle this list let's say this sequence of data that we have inside the list we want want to shuffle it so what we can do is simply we can use the random module name over here followed by Dot and it also has something called as Shuffle function so this will help us in order to shuffle all the values of this list that we provide so Shuffle followed by inside the open and close parenthesis we provide the list one variable name and then after that what we can do is we can simply print this list content once again and then we can simply put shuffled list over here instead of of original list so before shuffling we are printing the original list over here which will print the values in this sequence and then after shuffling it will print the shuffled list over here where the values will be shuffled in this case so let me just save this file and try running this code now as you can see original list we are getting python Java C++ and Swift and then shuffled list it is Java Swift C++ and then python so we have just shuffled the list the values were completely shuffled inside the list and were printed on the screen now guys let's say very randomly you want to generate some kind of element so what you can do is simply have the print statement over here and simply use the random module in this case so I'll just remove this part of this line and then we can have the random followed by dot we have something called as random function over here this line of code will generate any element over here so let me just save this file and try running this code so as you can see we are getting a float number 0.104 and so on and then let me just run this code once again as you can see we are getting another number over here and then let me just run this code 0.99 so this line of code is helping us in order to generate the random numbers over here in this case so guys this is the way that you can use random module over here in this case in order to randomly generate some numbers or randomly Shuffle the values inside the list that is present list in Python Programming so guys a list is a collection of similar or different types of data so for example suppose we need to record the age of five students so instead of creating five separate variables we can simply create a list so as you can see this is the way that we create the list first of all on the left hand side we have the variable name and then on the right hand side inside the open and close square brackets we have the list of elements which are separated using the commas so I'll just copy this line of code over here and then let us move to the vs code and paste this so as you can see on the left hand side it is the variable table name of the list and on the right hand side we have the age of all the students over here and simply we can print the list by using the print function after this we can provide the variable name that is list so let me just save this file andent I running this code now as you can see we are getting the list of all the elements in the sequence that we had provided over here it is very important that all these elements are separated using the commas over here now guys the list can have the same kind of elements that is this one is having the list of integers data type only but we can also have the string as well in between so let's say we have a string called John over here in between this list of elements so this is also possible it will not throw any errors while we are running this code so let me just save this file and try running this code now as you can see we are getting the list of all the values 17 18 and then we are getting John and then 19 and then 14 so this is a kind of a heterogeneous list whereas when we have the same kind of data type in the list then it is called the homogeneous list now how do we access the python list element so basically this is one way in order to access the list but what if we want to access only a single element by using this print statement we have accessed all the elements over here but in case we want to access a particular element from this list then what we can do is in Python each item in a list is associated with a number so the number is known as a list index so basically all the these numbers that is the elements of the list that are present inside the list so these are associated with the indices which starts from zero so the 17 number is at the zeroth index 18 number is at the first index and so on this is at the second index third index and then so on so basically these elements can be accessed using these indices so as you can see we can access elements of an array using the index number now how do we access them so what we can do is we simply come over here I'll simply simply change this to the number 15 that was there previously and what we have to do is let's say I want to access this element that is the fourth element so what will be the index so this is zeroth index then we have one and then two and then three so this is the third index so we can access by using the variable name followed by open and close square brackets and inside those brackets we have to provide the index number that is three in this case which represents this number that is 19 so let me save this file and try running this code now as you can see we are just getting 19 over here previously we were getting the entire list when we don't provide this index number I'll save this file so as you can see all the values are getting printed but when we provide the index number let's say I want to print 18 this time which is at the index one after this index which is zero so I provide list of one over here save this file and run this code so as you can see 18 is getting displayed and this is how it is one way in order to access a particular single element inside this list by using the index number now it is also possible that we provide the negative index in Python so python allows negative indexing for its sequences the index of minus1 refers to the last item minus 2 to the second last item and so on so for now we know that the zero index is the first element over here and then the first index is the second element but what about the last element let's say we don't know the length of the list like how many elements are present inside the list and we want to get the last element over here so since the first element is at the zero index the previous index that is before 0 which is minus1 it will point to the last index of this list that is 14 over here so what if we simply do list of minus one in this case so I'll just provide minus one in this case let me save this file and try running this code as you can see we are getting 14 so basically the minus1 index will point to the last element of the list in this case let's say we want want to get the second last element so in this case we will simply provide min2 so after minus1 we are having min2 which will be the previous element of the last element so let me just save this file and try running this code now so as you can see 19 is getting displayed now and this is the way that we can also use the negative indexing as far as accessing the last elements of the list are concerned now there is another concept of slicing in Python list so in Python it is possible to access a section of items from the list using using the slicing operator which is nothing but a colon not just a single item so let's say we want to access the second and third elements inside the list so we have to use the slicing operator in this case now what is the slicing operator while providing the indices inside the open and close brackets we have to provide the indexes and separate them using the colon so what is the index of the second element it is one over here since the first element is having the zeroth index we don't want that we want to start from the first index and then we also want the second index so this time we have to provide the next number that is at the third index now so after this one that is the first index we have to provide colon and then we provide three over here so three is not included in this case please remember that whenever you are providing the ending index that element will not be included whenever you are using the slicing operator over here so the elements that will be considered in this case will be at the index one and at the index 2 which means 18 and 15 so let me save this file and try running this code now as you can see we are getting 18 and 15 only let's say you want to get all the elements starting from this 18 so this index is 18 right now and there is no end index that you want to specify over here so we simply have to remove this three and then we can simply specify one followed by the colon so this will make python interpretor to consider all the elements after the first element including the first element itself so let me just save this file now and try running this code so as you can see we are getting all the elements that is 18 15 19 and 14 starting from the first index over here so guys this is the way that we can use slicing in the python list also in order to consider all the list elements over here we need not have to specify any of the indexes if we simply provide the colon over here all the elements will be considered let me just save this file and try running this code now so as you can see all the elements are getting considered but this thing is kind of a redundant over here that's because if it's simp we provide the variable name that is list still all the elements will be considered so if we run this code once again so all the elements are being considered over here only when you want to consider the subset of this list you have to use the slicing inside the python list now let us move to the next concept how do we add the elements to a python list so there are two ways to add the elements in the python list the first way is to use the upend function which will help us in order to add a single item in the list and the second way is to use the extend end function in order to add another list to the already existing list so let us check this with the help of examples now over here let's say we already have this list of values inside the list variable and now we want to add more elements so what we will do is we will say list followed by Dot and then we have something called as append so this is a function which will take a single element and it will add to the end of this list so let's say I want to provide 25 as the age of another student so let me just save this file now and try running this code so as you can see this element that is 25 it is already added at the end of the list now and in this way we can use the upend function to add more elements inside the list now let's say we have another list over here let's say I provide a list one and the numbers I provide is 1 comma 2 comma 3 over here so three elements are there and we want to add all these elements to the original list that is list variable so what we can do is we can use the extend function in this case so we have to use this list variable which is the original list variable followed by Dot and then we have the extend function and inside the parenthesis we have to provide this argument that is list one which is another variable having the list of elements and now if we print this list it will have the updated list of values so let me just save this file and try running this code now so as you can see after this 14 1 2 3 elements are also getting added over here since we have used the extend function in this case let us move to another section can we change the list items so basically the python list are mutable meaning list are changeable and we can change items of a list by assigning new values using equal to operator so what I will do over here is I'll just remove these lines of code so I'll simply provide the original list over here so we will say original list followed by colon and then we will print the list so let me just save this file Andy running this code now we have the original list over here I'll just spell this correctly so we have the or Or List 17 18 15 19 and then 14 now let's say at the third position that is 15 we want to change this element to 10 now this is being referred to the second index over here so this is zero index then one and then second index so what we have to do is simply we have to provide list followed by inside the square brackets we will provide the index number that is two and then equal to the new value that is 10 that we want to replace it with and then again what we will do is I'll simply copy this line of code and paste this over here and then we will say updated list and let me just save this file now and try running this code so basically as you can see original list it is having 15 at the third position over here that is at the second index and the updated list is having the number 10 at the same second index over here and this is the way that we can update the list elements so since python list are mutable we can change the elements of the list as well now removing an element from the list so there are two ways either we can use the D function or else we can use the remove function as well so let's say over here we have the original list now so I'll just remove these lines of code and then we can use the deel function and Then followed by list and let's say I want to remove this fourth element that is at the index 3 which is 19 so I'll just provide list of three in this case and then what I will do is I will print the updated list once again so I'll just change this to updated list so basically we are using the de method over here and deleting the third index inside this list so let me just save this file and try running this code now so as you can see we are getting the updated list as 17 18 15 and 14 this element that is 19 it was removed already now instead of this we can also use the remove method so in that case we have to use the variable name first in the deel method that is the delete method we simply used the function name and provided the element from the list in order to remove from that list but over here we have to provide the variable name followed by Dot and then we can simply use the remove function and Then followed by the position so which position we want to remove so let's say I want to remove this element that is 18 over here so in this case we have to provide the value of the element that is present inside the list so in this case we provide 18 in the previous example that we have taken using the deel method we used the index number of the element that is present inside the list but in this case we have to use the value in order to remove it so I'll just say this file and try running this code now as you can see 18 was present in the original list but in the updated list we don't have 18 it is 17 15 19 and 14 and in this way we can remove the elements from the list as well now very important operation how do we iterate through a list so basically we can use the for Loop to iterate over the elements of a list so till now what we have seen is we have just used the list that is the variable name in order to print the elements of those list now if you notice we are getting the square brackets over here open and close square brackets within which all the elements are getting printed but let's say we don't want those square brackets and one by one we want to print all the elements at a time so what we can simply do is use the for Loop and we have seen in the previous videos as well the syntax of the for Loop we have to use the for keyword followed by let's say a temporary variable name that is item followed by the in keyword and then we have to provide the sequence at his list and then after that we have the colon and then we can have the print statement over here now in the print statement if we only provide one item that is item in this case so every time all the elements will be printed on the separate lines over here so let us just try this code so we'll just save this file and try running this code now as you can see 17 18 15 19 14 all the elements are getting printed on the separate lines what if we want all the elements to be present on the same line so what we can do is after providing comma over here we have the end parameter inside the print function and this end parameter we can have the comma as the character by which we can separate all the elements so by default this is slashing character which means the next element will be printed on the next line but if we specify this in this way all the elements will be printed on the same line so let me just save this file now and try running this code so as you can see all the elements are getting printed on the same line in the same sequence that is present inside this list so in this way we can iterate through all the elements inside the list that are present by using the fall Loop over here now another important thing how do we find the list so we have something called as python list length so in Python we use the Ln function to find the number of elements present in a list so we can have any number of elements inside the list over here so there is no limit on the number of elements that we are supposed to have inside the python list so in case if we want to find the number of elements inside the list we can simply use the length function so we can simply print print this and then we can have Ln which is a function and then we can provide the variable name of the list inside this Ln function over here so it will return us the count of the elements inside the list so let me just save this file and try running this code now as you can see five that is the count of the number of elements inside the list is present over here if we provide some more elements over here let's say I have provided five more elements inside the list let me just save this file now and try running this code so we are getting the updated count at is 10 so 10 is the number of elements set are present inside the list and that is how we can easily find the length of the list in this case by using the Ln function over here so Guys these were certain operations as far as list variable is concerned please make sure that you practice on your own and as a homework for you there is something called as a sort function which can help you in order to sort all the elements inside the list so you can practice on your own as a homework for you in order to sort the elements inside the python list and print on your own Tuple in Python Programming so guys a tuple in Python is similar to a list basically the difference between the two is that we cannot change the elements of a tle once it is assigned whereas we can change the elements of a list so previously in the examples of the list that we have seen we were able to change the elements inside the list but the same thing cannot be done with the elements at are present inside the tle so how do we create a tupple a tupple is created by placing all the items that is elements inside the parenthesis so we have this open and close parenthesis whereas in the list we were using open and close square brackets now these are supposed to be separated by commas over here the parenthesis are optional however it is a good practice to use them so a tle can have any number of items and they may be of different types that is integer float list string Etc so guys let us check this with the help of example now over here as you can see we have my tle which is the name of the variable that we have given and 1 2 3 these are the elements that is present inside the Tuple if you notice we have this open and close parenthesis inside of the square brackets and that is the difference between the list and the tupple over here so let us move to the vs code and simply we will provide tupple one as the variable name over here equal to followed by open and close parenthesis and let's say we Define five elements one to five over here so this is nothing but we have defined the tle and we can simply print this Tuple by using the variable name tle one over here so let me just save this file and try running this code now as you can see we are getting all the elements that is 1 2 3 4 5 and in this way we have easily created and printed the tupple elements over here now an important thing over here let's say you want to create a python Tuple with only one element so in this case what happens is let's say if you provide where one that is variable one over here and you provide double codes that is hello with this open and close parenthesis in this case this will be considered as a string where whereas in the variable two what you do is after this hello you provide a comma so in this case it will be considered as a tle so this is very important thing if you want to create a tupple with just a one element you have to use the comma after providing that element over here let us check this with the help of examples now over here let's say I provide where one in this case and then open and close parenthesis and then let's say we have hello over here and then I'll just copy this line of code and paste this and I'll simply provide comma after this element so what we will do is I'll just name this variable name as where to so let us now confirm the data types of both the variables so we will say print and then inside this we will use the type function in order to find the data type of where one so we provide where one over here and I'll simply copy and paste this line of code and we provide where two over here so let me just save this file now and try running this code so as you can see first one it is showing us that it is is a string and the second thing is showing us that it is a tupple now in case if we simply remove this comma from this tupple so what happens so let me just save this file and try running this code once again as you can see it has become string now both are strings right now if we provide comma over here and comma over here as well so both the variables will be turned to the tupple data type so guys this is very important if you want to have only one element inside the tupple make sure that that element is followed by a comma over here here in order to make that data type as a tupple now guys moving to next section how do we access the python tupple elements so there are multiple ways in order to access the elements over here first of all is indexing so this we have already seen previously by using the index number we can access the elements of the Tuple so let's say we have Tuple one over here and we have five elements 1 2 3 4 5 so how do we access these elements by using the indices so we simply have to provide the D one that is the variable name and Then followed by open and close square brackets this time and let's say we want to print the element that is three over here every time remember guys that the index it starts from zero so this first element that is number one it is at the index zero and then the second element that is number two it is at the index one and then the third element that is number three it is at the index two over here so we provide the number that is two which is the index number in this case so this will tell the python interpretor to access the element that is at the index number two for this variable that is tle one so over here what will happen is the index number zero is this and then index number one is this and then we have index number two which is three over here and this element should be printed so let me just save this file and try running this code now so as you can see three is getting printed similarly let's say if you want to print this number two which is at the index one in this case so we have to provide one inside this open and cl close square brackets so let me save this file and try running this code now so two is getting printed this time so guys this is one way in order to access the elements by using the indexing we also have something called as negative indexing so let's say if you don't know the number of elements that are present inside the Tuple whereas there is a way in order to find the length of the Tuple but in case you want to access the last element of this tle over here so you already know that the first element is at the index zero so let me just print that so over here we provide tle one followed by the index number that is zero in this case I'll save this file and try running this code so one is getting printed now let's say you want to print the last element but you don't know at which index it is so we have something called as negative indexing in which case before the zero index the index that is minus one it will point to the last element of this tle that is five over here so when we provide minus one in this case this element that is five should get get printed so let me just save this file and try running this code now so five is getting printed similarly if you want to get the second last element of this tle you can simply provide minus two over here so when we provide minus two and run this code so four is getting displayed which is the second last element so this is like a cycle over here when you use the negative indexing the last elements of this tle will start getting printed over here and then guys you can also use the slicing functionality as we have already seen with the list so basically let's say if you want to print the subset of this tle between 2 to 4 so what you can do is what is the index of this element that is two it is zero and then one so at the first Index this two is present so we will provide one over here followed by a colon and then what is the index of the element that we want that is four so the index is it is 0 1 2 and then this index is three but we don't want to specify three because this is excluded so so the next index which is four we have to specify that index which will be not included in our slicing operator so when we provide four over here always remember that this index on the left hand side will be considered but this index will not be considered the fourth index will not be considered but before this that is the third index will be considered while printing the statement so let me save this file and try running this code now so as you can see 2 3 and four is getting printed the last index that is four which is having the element five this will not be considered because it is not included in the slicing operator so these are some of the ways that you can use in order to access the python tupple elements over here now python tle methods there are two methods only that is count and index over here what is count so basically in order to get the number of occurrences of a particular element you can use the count method so over here while using the count function we have to use the variable name followed by Dot and then as you can see count and index these are the only two methods the other methods such as appending or removing or deleting the elements are not present that's because as I've already told you the tle inside python are not mutable which means we cannot change the elements once they are assigned over here so when we provide count we have to provide one of the elements inside that tle so let's say we want to find the occurrence of the element that is two over here in this case that means how many times this number two is occurring so let me save this file now and try running this code so as you can see the count is one over here that's because only one occurrence of number two is present let's say I provide some more occurrences over here so I provide the number two two times over here so the total count becomes three in this case over here we have two and then two more twos are present so basically the total count is three let me just run this code once again so number of twos that are present over here inside the topple is three and that is what we are getting over here and this is the main functionality of the count function now the another function that is index so if you want to get the index of a particular element you can use the index function so after this dot we have something called as index and then inside the open and close parenthesis we have to provide the element for which we want to find the index so let's say I want to find the index of this element that is number five over here so it is four basically let me just save this file and try running this code and confirm so as you can see four that is the index of this element is getting printed over here so Guys these functions you can use based on your requ requirements as far as tupple is concerned now one very important thing iterating through a tupple in Python so we can use the fall Loop to iterate over the elements of a tupple so basically we have seen this in the previous video as well so far we have printed the elements of the tupple by using the variable name in this way so let me save this file now and try running this code as you can see all the elements are getting printed but there is a problem over here we are getting this open and close parenthesis also while printing these elements what if we only want to print single element at a time so we can simply use the for Loop and iterate through all the elements over here inside the tle so we use the for keyword followed by let's say the temporary variable as the item and then we have the in keyword and then the name of the variable that is the sequence which is tle one in this case and then we simply have to print this item that is item variable now what will happen is all the items will be printed on separate lines over here because by default the end parameter of this print function is having the Slash and character so let me just save this file and I running this code now as you can see all the elements are getting printed on the new line what if we want all the elements to be present on the same line separated by comma over here so we simply have to provide comma and then there is something called as end parameter for this print function so we use that and inside the double Cotes we provide the comma over here which will be kind of a separate for all those Elements which will be printed on the terminal so let me just save this file now and try running this code so as you can see all the elements now are getting printed on the same line and they are separated with a comma if you want a space character after comma that can also be done you provide comma followed by the space character let me just save this file now and try running this code so all the elements are separated with a comma character and then a space character additionally for a better readability so guys this is another way you can use the for Loop in order to iterate through all the elements of the tle now let us understand what are the different advantages of a tuple over list in Python so we generally use tles for heterogeneous that is different data types and list for homogeneous which means similar data types so in a tle you can have the different data types as well so basically the tupple is being used for that purpose only and we cannot change the elements inside the tupple so since tles are immutable which means you cannot change a data inside the tupple once they are assigned iterating through a tupple is faster than with a list so behind the scenes what is happening is the program already knows that the tupple elements will not be changed and for this reason the tupple is little bit faster compared to the list so there is a slight performance boost over here now tles that contain immutable elements can be used as a key for a dictionary as well with a list this is not possible so inside a dictionary as you must be knowing there are key value Pairs and the elements of the tle can be considered as keys for the dictionary if you have data that doesn't change implementing it as a tle will guarantee that it remains right protected so nobody can change the elements of a tle if you want some data to be fixed whenever you are implementing the list of elements that should be present in a sequence and that must not be changed so Guys these are certain advantages of a tle over a list in Python Programming string in Python Programming so guys in computer programming a string is a sequence of characters so for example as you can see this hello word it is the string which is the sequence of characters that is h e l o so this is a string containing the sequence of these characters and we call it as a string now we use the single quotes or double quotes to represent a string in Python so basically whenever we are defining a string we use the sequence of characters which are supposed to be enclosed Within These double Cotes or else we can use the single Cotes as well so as you can see for example Str Str that is the variable name that we have taken over here followed by the equal to operator we have the string that is programming for beginners which is the name of the YouTube channel which you should definitely subscribe and this is enclosed within the two double codes over here so let us check this with the help of example now we have Str Str it is equal to inside the double codes we can provide our string that is programming for beginners over here and then simply we can print the string by using the print function so we have print followed by open and close parenthesis and then we provide this Str Str variable name name let me just save this file now and try running this code as you can see programming for beginners is getting printed now now what are the different operations how do we access string characters in Python so let's say if I only want to print this character that is p over here how can we do that so one way in order to do that is by using the indexing which means we can use the index number basically the indexes that we have seen in the list and tle in the previous videos are also applicable over here for strings as well so this letter that is p can be accessed by using the index number which starts from zero so this is the zeroth index number which defines this P character the next character that is R it is at the first index number and then the next character is at the second index number and so on so we can simply use the variable name and then inside the open and close square brackets we can provide the index number so over here after the variable name inside the open and close square brackets as you can see we we provide the index number that is zero which will point to this character that is p over here so let me just save this file and try running this code now as you can see p is getting printed over here now let's say we want this o to be printed so what is the index number for this so the first one is zeroth index and then we have first index over here and then this o is at the second index number so we provide number two that is inside the open and close square brackets let me just save this file now and try running this code so as you you can see o is getting printed and in this way if you want to access a single character from the string you can use the index number in order to access them now there is another variation we can also use the negative indexing which means the negative index numbers can also be used in order to access the last elements of the string so let's say if you want to access the last element first element is having the index number zero and the previous index number that is before the number zero we have minus1 in the number system system so minus1 will refer to the last element inside this sequence of characters which is s over here so when we provide minus one in this case inside the open and close brackets so let me just save this file and try running this code as you can see s is getting printed so minus1 is pointing to this character that is s what will be the second last character it will be Min 2 in this case so when we provide minus 2 save this file enter I running this code so as you can see this R is getting printed over here and in this way we have the negative indexing Concept in Python Programming now there is another way we can use the slicing operator in order to print the subset of the sequence of characters so let's say if we only want this programming word to be printed instead of programming for beginners that is the entire string so what we can do is so we have to mention the indices in order to print these characters only so it starts from zero and then we have 1 2 3 3 4 5 6 7 8 9 10 and then we have to take extra index number that is 11th as well because that last index number is not included whenever we are using the slicing operator so the indexes will be between 0 to 11 in this case so how do we provide that range we provide zero first that is the left hand side index followed by the colon and then we provide 11 that is the second index up to which all the characters must be taken and printed over here so so as you can see this is the slicing of the sequence of characters let me just save this file enter I running this code now as you can see programming is getting printed over here let's say we want to include the characters up to F so we have to provide the index up to O over here so basically this was the 11th index and then we have 12th and then 13 so over here what we can do is we can simply provide 13 in this case so let me just save this file now and try running this code so as you can see programming word is getting considered and then after that we have have the space and then f is also considered which is at the 12th index there is another way we can do this instead of providing this zero index we can just remove this so by default it will take from the start of the string that is all the characters starting from the zero index over here so let me just save this file and try running this code now so as you can see again we are getting the same output that is programming up to the F character over here what if we want from this o character which is at the 13th position up to the last position so what we can do is we can simply provide the 13th index number which will start the string from this particular character and Then followed by colon and there is no need to provide the last index because we want all the characters to be included so this is the slicing operator for us we have the 13 index number and then colon over here let me just save this file now and try running this code so as you can see after F we are getting o r over here and then we have the space character and then we have the beginners as well so this is the way that we can use the slicing in Python in order to get the subring from the entire string that we have already defined now guys very important python strings are immutable so in Python strings are immutable that means the characters of a string cannot be changed so let's say this first character that is p if we want to change that character so what we will do is we will provide Str Str and Then followed by zero and then instead of this P character let's say I want to provide the character Q over here and then let me just print the string once again so we will simply print the string let me just save this file and try running this code now as you can see we are getting the type error string object does not support item assignment so we cannot change any of the characters over here but there is another way to do this what we can do is simply we can copy this entire string value and paste this over here and then again instead of P we can provide Q over here but this time we have to remove this index number so this is possible because we are providing the reassignment of the string variable so let us check this we'll save this file and try running this code now as you can see we are getting Q over here and all the other characters are same so basically by immutable we mean that we cannot change a particular Single Character inside the string by using the index number for that particular character but in case if you want to reassign the entire string that can be done by using such reassignments operator now guys that is another important functionality in Python multiline strings are allowed so basically we can also create a multiline string in Python so for this we use the triple double codes or triple single codes over here so what we will do is let's say I'll just remove these lines of code and then I'll say Str Str it is equal to three * double codes over here we will use and then I will say this is first line and then on the next line we will say this is another line so this is basically the multiline string that we have defined so how do we print this simply by using using the normal way that is print function followed by the name of the string that is Str Str variable let me just save this file and try running this code as you can see the format in which we have return return the string that is the three double codes were there over here followed by on the next line we were having this is first line and then this is another line and then we were having another double codes over here so these double codes followed by space characters and then between those space characters this is another line if we don't want these space characters soon after the double codes are being mentioned we have to provide the strings over here so the start of the double codes at the same line we are having this is first line and this is another line and then we have the three double codes on that same line so let me just save this file now and try running this code so basically this is the format so whatever format we follow in this three double codes or three single codes the same format will be followed while printing those lines on the terminal now what are the python string operations basically you can compare two strings with the the equal to operator over here as you can see so let's say we have two strings over here string one it is equal to let's say we have John and then string two it is equal to let's say we have the name Peter over here so we have Peter so what we will do is simply we will print Str str1 it is equal to Str str2 so this is nothing but we are comparing two strings by using the equal to equal to operator which we have done previously as well while we were using the relational operators in order to comp compare two numbers we can compare two strings in the same way as well it will either return true or false based on whether they are equal or not so let me just save this file and try running this code now as you can see we are getting false that's because the names are different so what if we make the names same so I'll just copy this value and paste this over here now both the strings are same St str1 and Str str2 both are having the value that is John so let me just run this code now as we can see we are getting true over here that's because both the strings are same in this case now there is another operation how do we join the two or more strings so we can do so by using the plus operator so let's say we go back over here once again we provide the string to as Peter and we want to join both the strings so in this case instead of equal to equal to what we will do is we will specify the string one that is Str str1 and then plus operator and Then followed by Str str2 in this case so let me just save this file now and try running this code as you can see we are getting John Peter over here continuously there is no space character so either we can provide a space character over here or else we can have the space character inside the print function as well so we can have the double codes inside which we can have the space character and then again we have to use the plus operator in order to join these strings so let me just save this file now and try running this code so as you can see we are getting John Peter and then there is a space character in between so we can join multiple strings as well by using the plus operator over here the same plus operator will be used in order to add two numbers if these variables are numbers but in our case these variables are strings and that is why it is being used in order to join the two strings in this case now how do we iterate through a python string so basically we can iterate through a string by using the fall Loop so let us check this with the help of example now let's say we have string one over here we provide four followed by S which is the temporary variable and then we have the in keyword followed by Str str1 I'll just make this as item so that it is more use of friendly in order to understand so basically Str str1 which is having the sequence of characters one character at a time will be assigned to this item variable and the control flow will go inside this fall Loop now inside this we can simply have the item being printed so when we provide item over here inside the print function and when we save this file and try running this code as you can see all the characters that is J hn these are getting printed on separate lines how do we get them on the same line so what we can do is we can provide the end operator equal to we can simply provide the double codes and we don't have to provide anything over here if we want to separate all the characters with a comma we can provide comma over here as well so let me save this file and try running this code as you can see John is getting printed but all the characters are getting separated using the comma we can simply remove this comma over here I'll save this file and try running this code now as you can see we are getting John over here so since we have provided this end parameter with nothing but simply double codes we are getting all the characters or else when we don't provide this parameter by default the end parameter is having the Slash and character due to which all the items will be printed on the new lines there is another important thing how do we find the python string length so basically we can use the Len method to find the length of the string so let's say we have programming for beginner string over here so I'll just type programming for beginners and we want to find the length of the string that means means how many characters are present inside the string so we can simply use the Len function that is the length function in order to print the count of the characters inside the string so we can have the Ln function followed by inside the open and close parenthesis we have the variable name that is s Str over here so let me just save this file and try running this code so it is saying object of type type has no l so basically we have provided Str Str over here instead we have to provide Str str1 which is the variable name so that was the mistake so let me just save this file now and try running this code as you can see 25 we are getting that is the number of characters that are present inside the string let's say I add some more characters over here I provide one two which means I have added two more characters inside the string so that should be 27 in this case so when we just save this file now and try running this code we get 27 as the count which is the updated count of number of characters inside the string and that is how this length function will work work in order to return you one particular integer which is the count of the number of characters inside the string now guys there is another important thing string membership test so basically this we have already seen we can test if a substring exist within a string or not using the keyword in so we have already used the fall loop as well and in the membership operator we have used the in keyword in order to find a particular letter is present or not inside the string so that you can take as a homework for you so that you can practice on your own you can find find out whether the character X is present inside the string or not and if it is present then you should display true and if it is not present then you should display false comment in the comment section below what is the output of your program while using this membership operator that is in now guys very important thing there is something called as Escape sequences in Python now the escape sequence is used to escape some of the characters present inside a string so what we have done over here is while providing the string we are enclosing it using the double quotes but what if the double quotes is a part of this string let's say I want to provide a double quotes over here before beginners so as you can see after providing the double codes we are getting a red underline over here which means there is some issue so what we can do is in order to avoid this issue and to make this as a part of this string we have to use the Escape character which means we have to use a back slash character over here just before the special character so this is the way that we use the Escape character we use the back slash character over here once and then followed by our special character which is causing the issue and in this case this double quote will be the part of the string now so let me just save this file and try running this code currently we are getting the length of the string what we will do is I'll just remove this length function so that we can print the value of the string so I'll just save this file and try running this code as you can see programming for and then we are getting the double codes over here which is the part of the string and then we have the beginners over here so this is the way in case you want to escape certain characters or special characters we can use the back slash which is known as the Escape character in Python Programming now guys there is another way in order to print the string by using the python string formatting so as you can see for example let's say we have the name that is John and we have age it is equal to 25 so one way that we can print both that is name and age is by using the multiple objects inside the print statement so let us check this so we have name over here which is John right now and then let's say we have age it is equal to 25 and we want to print both that is name and age within one print function so what we will do is we will say name is followed by comma and then we provide name and then again comma and then we have double codes and then we provide end age is followed by comma and then we have age over here so what we have done is this string will be printed that is name is followed by this name value will be taken from this variable that's because we have provided it outside the double quotes over here and after providing this comma and then again there is a comma and then we have a normal string label that is end ages and then we are specifying the age so this is one way in order to print both that is name and age in the same print statement so let me just save this file now and try running this code so as you can see name is John and age is 25 over here but guys this can be confusing since we have to use multi mle commas over here as well as multiple double quotes as well so there is another way in order to print the same string so what we can do is again we can have the print function but this time what we will do is in the open and close parenthesis we provide the F character followed by single codes over here so inside the single codes we can provide the variable name that is name and age as well so in this case if we want to get the value of this name variable we have to enclose it within the Curve curly braces so these are the curly braces as you can see we have the open and close curly braces and inside this we provide name over here so if we do it in this way we provide the F character and then inside the single codes inside the curly braces we have the name over here it will print the value that is John so let me just save this file and try running this code as you can see John is getting printed which is the value of this name variable now we want to print the entire string that is we also want the labels so for this name that we have provided we can simply provide the string that is name is and Then followed by open and close braces and inside the braces it will be name variable name and then we can simply provide end age is followed by open and close braces and then we can provide the age variable name so guys this is the format we have the F character and inside the single codes as you can see we have provided the string label that is name is and Then followed by open and close curly braces inside which we provide our variable name and Then followed by end ages or any other string label that you want to Define and then we can have the variable name that is age over here inside the open and close curly braces so let me just save this file now and try running this code as you can see we have the perfect string that we wanted that his name is John and age is 25 so this is another way we can use the python string formatting by using this F character inside the print function in order to print the string in the way that we want to print so Guys these are certain things as far as strings are concerned in Python programming language sets in Python Programming so guys a set is a collection of a unique data which means that the elements in a set cannot be duplicate elements so over here you can easily create a set in the python basically in Python we create the sets by placing all the elements inside the curly braces separated by comma so guys previously we have seen that for the list we are using the open and close square brackets for the tle we use the open and close parenthesis and over here for sets we are using the open and close curly braces so we will check this with the help of examples as well a set can have any number of items and they may be of different types so as you can see it can be of the integer float tle or string data type or any other data type but a set cannot have mutable elements like list sets or dictionaries as its elements so guys this is very important you can not have another list set or a dictionary which we are going to see in the upcoming videos over here we cannot have these kinds of data types inside a particular set now let us check the creation of set with the help of example now over here so let's say I provide set one as the variable name and then we provide the equal to symbol followed by the open and close curly braces so inside these braces we have to provide the elements of the set so let's say we have the set of integers we have 1 2 3 4 and then five so guys we have five elements over here 1 to five which are the elements of this set and simply we can print all these elements inside the set by using the print function over here and then we can say set elements are and then colon and then we can have set one that is the variable name so guys let me just save this file and try running this code now so as you can see we are getting set elements are we are getting all the elements that is 1 2 3 4 5 and guys this is is the way that we can create a set in the Python Programming now guys it is very important that we cannot have the duplicate items in this set so let's say I provide some more numbers over here which are already present in this set so let's say two and three are already present I provide this two and three once again so when we do this so right now we have seven number of elements but let me just save this file now and try running this code to see how many elements get printed so as you can see only five elements are getting printed so those two elements that is two and three will will not be considered once again while printing them because we cannot have duplicate elements we can only have the unique elements inside the set and guys this is the main functionality of having the set data structure in Python Programming So based on your requirements if you don't want the duplicate elements to be present you can use the set data structure in the Python programming language now guys how do we create an empty set in the python so basically creating an empty set is a bit tricky so empty curly braces if we use then it will make a empty dictionary in Python so basically when we create a dictionary we again use the curly braces so let us check this with the help of example now over here what happens if we create the empty set so let's say we provide set one it is equal to open and close curly braces as you can see we have not provided any element and this is the empty set but let me just print the type of this variable over here so we will simply use the type function and then provide the set one as the variable name so guys what will be the type of this set one variable so let me just save this file now and try running this code as you can see it is saying that class it is a dictionary data type so this set one variable is of the data type dictionary by default when we provide the open and close curly braces how do we make it as a empty set data type so what we have to do is instead of using the open and close curly braces we have to use the set function so there is something called a set function over here as you can VSS code is suggesting us so this set function followed by the open and close parenthesis will help us to create a new empty set over here so let me just save this file now and try running this code over here what we are trying to do is again we are trying to print the type of this set one but this time it should be of the set data type so let me just run this code now so as you can see we are getting the set data type over here previously we were getting the dictionary so in order to have the empty set in Python Programming we can can use the set function over here now very important question how do we add the set items in Python so basically sets are mutable which means we can add and remove items from the set however since they are unordered indexing has no meaning so guys basically if you must have noticed there is no one order in which the set items were printed previously so let us check this once again over here we provide set one it is equal to and let's say we provide some elements that is 3 2 4 1 5 and then let me just print this set one over here so we provide set one inside the print function let me just run this code as you can see we are getting 1 2 3 4 5 this is not of the same order in which we have provided these elements inside the set so we cannot use index numbers over here as well in order to access these elements one at a time since the way in which the elements inside the set are printed are not in a particular order now guys how how do we add new elements to this set so basically we cannot access or change an element of a set using the indexing or slicing but we can use the add method to add an item to a set so let us say I want to add another element over here so basically what we will do is we will say initial set and then colon and then we provide set one and then let's say we provide set one dot we have something called as ADD over here as you can see this is a function that we can use in order to add elements inside the set so let's say we provide 10 as the number to be added to this particular set that is set one and then again we want to print that set one so I'll just copy this and paste this over here and then we have updated set over here so we have updated set and then set one being printed so let me just save this file and try running this code now so as you can see initial set it is 1 2 3 4 5 and then after adding this element we are getting the updated set as 1 2 3 4 5 and then the last element that is 10 over here which is being added by using the add method and this is the way that we can add the elements inside the set remember that the order in which they are added will not be followed while printing them so you cannot rely on the order in which the set elements will be printed on Console now guys another important thing how do we remove an element from the set so we can use the discard method to remove the specified element from a set so let us say after after adding this we want to remove the element that is three from this set so what we can do is we can provide set one and then followed by Dot and then we can have discard method in order to remove the element we need to provide the element which needs to be removed so over here we provide the number three which will be removed from the set one and then again let me just copy this line of code and paste this over here so that we can print the updated set after removing so over here we say updated set after removing three and then let me just save this file and try running this code now so as you can see we are getting 1 2 4 5 and then 10 so the element three is being removed after using the discard method over here and guys this is the way that we can remove the elements from the set now guys there is another way in order to access the elements inside the set we can iterate over a set in Python by using the fall Loop so this can be easily done by using the fall Loop over here so what I will do is I'll just clear these lines of code and then we will say for and then item in set one so this is the syntax that we use while using the fall Loop and then we can have the print statement over here guys notice that till now we were printing the elements of the set by using the set one variable and that is why we were getting the starting and the ending open and close curly braces over here but this time let's say we don't want those but we want only those numbers that is the the elements inside the set to be printed so we can easily use the for Loop and iterate through each and every item inside the set and this is the way that we can do so we provide the print statement over here and inside the item variable one at a time all the elements will be printed over here so let me just save this file now and try running this code so as you can see we are getting 1 2 3 4 5 now all these numbers are on a different line what we can do is we can use the end parameter of the print function so over here we provide the end parameter and then we simply provide the space character so that all the items are separated by the space characters over here so let me just save this file now and try running this code so as you can see we are getting 1 2 3 4 5 which are the elements of this set if you want all these numbers to be separated by commas what we can do is instead of the space character we can provide the comma and let me just save this file and try running this code once again as you can see we are getting 1 2 3 4 5 and and all the elements are being separated using the comma character now guys how do we find the number of set elements so we can use the Len method that is the length method to find the number of elements that is present inside the set so what we can do is simply we can provide the print statement over here and we can simply say that length of set is and then colon and then we can simply use the alen method and then inside this method we can provide the set one that is the variable name so let me just save this file now and try running this code so as we can see length of set is five so basically since five elements are present over here we are getting the length as five what if we provide some more elements let's say I provide six 7 and let's say I provide some more duplicate elements over here that is 1 2 and then three so over here there are total 10 elements out of which three elements are duplicate so what is the exact length of the set so let me just save this file now and try running this code so as you can see length of set is seven so even though we are having 10 items inside the set but out of those 10 items three items are duplicate items so those duplicate items will not be considered it will be considered only once and that is why we are getting the length of this set S7 now guys very important thing about the set operations we can carry out different set operations in Python Programming one is Union of two sets which can be done by using the union method or this or symbol over here we can also have the set intersection which can be implemented by using the intersection method and then we also have the difference between the two sets which means we can use the difference method or the minus symbol over here so guys let us check all these operations one at a time so over here what we will do is we will have two sets over here we will say set one it is equal to 1 2 and then three and then let's say we have set to it is equal to 3 4 and then 5 now guys let's say we want to find the Union first so what we will do is we will say Union and then we will simply say set one followed by Dot and then we have the union method followed by the parameter needs to be set two over here because that is the another set that we want to find the union of similarly we will do the intersection and difference as well so I'll just copy and paste these lines of code over here we will say intersection in this case and then we will simply change the union method to intersection over here and then over here we will say difference so difference and then inste of this Union we will say difference so guys basically what we are doing over here is these are all the set operations the union will find all the elements that are present in set one and set two and all the elements will be unique in the intersection part we will get all the elements that are common in both the sets which means three in this case and then in the difference we will find all the elements that are present in set one but not present in set two so guys let me just save this file now and try running this code to see what will be the results of all these operations so as you can see the union is giving us 1 2 3 4 5 which means all the elements that are present in set one and set two so we are having 1 2 3 in set one and then in set two the three is already printed and then it is printing four and five as well in intersection we are getting only three that's because the element three is the only element which is common in both the sets for the difference operation we are getting only one and two that's because these are the only two elements which are present in set one but not present in set two so Guys these are certain set operations that can be implemented with Python Programming apart from this there are multiple builin methods that you can use as far as sets are concerned so when we provide the variable name that is set one followed by dot as you can see these are all the methods that can be used based on your requirements dictionary in Python Programming so guys the python dictionary is an ordered collection of items it stores elements in the form of key value pairs so basically on the left hand side we have a key and on the right hand side we have the value and such key value pairs are known as dictionary in Python Programming now guys the keys are unique identifiers that are associated with each value so basically we cannot have duplicate keys in a dictionary where we can have the duplicate values in the dictionary so as you can see for example over here on left hand side we are having the keys on right hand side we are having the values so Nepal Italy and England these are certain Keys over here and they are capital that is Katmandu Rome and then London these are the values on the right hand side so how do we create a dictionary in Python we can have any variable name in this case and after the equal to symbol inside the open and close curly braces we are having the key value pad so since this is a string we are enclosing it within the double codes over here and then after the key that is Nepal we are providing a colon in this case followed by the value which is again inside the double codes and then separated by commas we have more key value pairs over here so guys this is the way that we can create the dictionary so guys let us check this with the help of examples now over here so let us say we have dict1 that is the variable name followed by equal to and then let's say we provide the same data over here so I'll just copy and paste this line so we have copied the same key value pairs over here now simply we can print this key value PIR by using the print function and Then followed by dict1 which is the variable name so let me just save this file and try running this code now as you can see we are getting all the key value pads over here being printed on the console so guys this is the way that we can create the dictionary along with the key value P that we want to store inside the dictionary now how do we add elements to to a python dictionary so we can add the elements to a dictionary using the name of the dictionary with open and close square brackets so guys over here what we will do is we will say initial dictionary so this label we have added so that we can identify that this is the initial dictionary now what we will do is we will add one more key value pair inside the same dictionary so what we have to do is we have to use this variable name that is dict1 followed by open open and close square brackets and inside this we have to provide the key so let's say the key over here we provide India as the key and then the capital of India it is Delhi so over here the value that we have to provide is Delhi in this case so what we have done is we have provided the variable name and Then followed by the open and close square brackets and inside those brackets we have to provide the key in this case it is a string and then we have equal to followed by the value for this key which is again another string and then guys what we will do is let's say we want to print this entire dictionary once again so we will print this and over here we will say updated dictionary and then again dict1 so let me just save this file and try running this code now so as you can see we have the updated dictionary as we have Nepal Italy England and then the last element that we have added just now is the key that is India and Delhi that is the capital of India as the value so guys this is the way that we can add element ments inside the dictionary in the form of key value pairs now guys how do we change the value of a dictionary so we can again use the open and close square brackets in order to change the value associated with a particular key so guys let us check this with the help of example now so over here what we will do is let's say we have added this key value pair that is for India we have the capital that is Delhi but now let us say instead of having the capital as the value we can provide any city as the value for this country so so what we can do is again we can provide the variable name that is dict1 and then for this key that is India we want to update the value so let's say this time the value that we provide is Mumbai which is a very popular city in India so we provide Mumbai over here and then again we are printing this dictionary once again so let me just save this file now and try running this code so as you can see the updated dictionary first time it is showing India that is Delhi and then the second time that is updated dictionary it is showing India and this time the value it is Mumbai in this case so guys this is the way the same way is used in order to add the key value pair and in order to update the key value pair as well we have to make sure that whatever key we want to update it is K sensitive if let's say I provide the small I over here so in this case it will add a key value pair since this India is not matching with this India that's because over here we are having the capital I and over here we are having having the small I so let me save this file now and try running this code this time we are getting the five key value pairs in this case so India Delhi and then we have the small I and then Mumbai so guys make sure that whenever you are updating the key value pairs the key of the dictionary must exactly match with the existing keys that are present in the dictionary now guys how do we access the elements from the dictionary so in Python we use the keys to access their corresponding values so let us check this with the help of examples now over here so let's say we have these three key value pairs as the original dictionary now we only want to print the value of this particular key that is Nepal over here so what we will do is we will simply have the print statement and then we will say dict1 that is the variable name followed by open and close square brackets and we simply provide this key that is Nepal over here so inside the double codes we provide Nepal over here so let me just save this file and try running this code now so as you can see we are getting the value of this key that is Nepal similarly if we provide Italy as the key so I'll just replace Nepal by Italy over here so as you can see we are getting the value as Rome because the value for this key that is Italy is Rome over here so in this way we can easily access the values of the keys that we want to print now guys how do we remove the elements from the dictionary so we use the D statement to remove an element from the dictionary so what we will do is let's say I want to print the original dictionary over here here so we will say original dictionary and then colon and then we say dict1 now guys what we will do is let's say I want to delete this key value pair that is Nepal and Katmandu so we will use delete and Then followed by dict1 and then open and close square brackets and inside this we have the double codes and we simply provide the key over here that is Nepal so this statement will help us in order to delete this this particular key that is Nepal and Katmandu over here so let me just print this dictionary once again so over here we have updated dictionary and then let me just save this file now and try running this code so as you can see original dictionary we are getting all the three key value pairs that is Nepal Italy and England over here along with their values but the updated dictionary it is giving us only two key value pairs that is Italy that is Rome and for England we are getting London so over here this key value pair that is for Nepal we are having the Katmandu value this was removed because of this particular statement that we have used in order to remove the Nepal key and its value as well now guys as far as dictionary membership test is concerned we can test if a key is in a dictionary or not using the keyword in so in keyword is used in order to check the membership test so note that the membership test is only for the keys and not for the values so guys let's say over here I'll just remove these lines of code so for this original dictionary we want to find whether the key Italy is present inside the dictionary or not so we will say print and then we can simply say Italy and then we use the in keyword followed by dict1 so guys what exactly we are doing is we are checking whether this string it is present in dict1 or not so let me just save this file and try running this code so as you can see it is showing us true over here that's because the key itally is present inside the dictionary but the same thing is not applicable when we provide one of the values inside the dictionary so let's say we provide Rome as the value over here so Rome in dict1 so let me just save this file and try running this code so as you can see it is showing us false that's because Rome is the value and it is not one of the keys that are present inside the dictionary so guys we can also use the in keyword in order to check whether a particular key is present inside the dictionary and it is only applicable for the list of keys over here now guys we can also iterate through the dictionary by using the fall Loop over here so what we can do is simply we can use the for Loop in order to print all the key value pairs so over here we have the for keyword followed by let's say we provide the key variable name and then we provide the in keyword and Then followed by the variable name that is di1 and then colon so what we will do is we will simply have the print statement and then let's say we want to print the key value pirs in the particular format so we will say key in this case and Then followed by comma and then let's say we provide Arrow over here and then after this we provide the value so how do we access the value we provide the dict1 that is the variable name and then inside the open and close square brackets we provide the key in this case so guys basically what is happening over here is all the keys that are present inside this variable one at a time it will be assigned to this key and this key we are printing on the left hand side and then we are having the hyphen and the arrow symbol and then using this key variable we are getting the value from this dictionary in this case so guys let me just save this file now and try running this code so as you can see we are getting Nepal so Katmandu is the value then for the key Italy we are getting Rome as the value and for England we are getting the London as the value so guys this is the way that we can use the fall Loop in order to iterate through all the key value pirs inside the dictionary file reading in Python Programming so guys a file is a container in computer storage devices used for storing data so when we want to read from a file we need to open it first when we are done it needs to be closed so that the resources that are tied with the file are freed so guys we are going to check this with the help of example how we can open the file in order to read the content of the file and then after that we can close the file as well so basically in Python a file operation takes place in the following order first of all we have to open the file then the next thing is we read the file content and then after reading the file content we close the file so basically the first operation that is opening the file we can use the open method to open a file so as you can see for example over here we are providing the variable name on the leftand side and then on the right hand side we have the open function and then we have the path of theun file where the file is stored and then by default it is opened in the read mode we can also use the second parameter and provide the character that is R for reading the file and in order to write into the file we use W as the character over here in this case and then guys after this we can read the file in Python by using the read method so basically this variable that we had used on the left hand side we can use the same variable over here in order to call the function that is read and this will help help us in order to read the content into the variable that is read content and then in order to close the file we can simply use the close method so guys let us check all this with the help of example now over here so let's say we have the variable name that is file one and then followed by equal to and then we use the function name that is open in order to open the file and then inside the open and close parenthesis we are going to have the path of the file that we want to open so guys over here I have the test file for which I have written some content over here so we have these four lines inside the test file so what we can do is so guys we have to copy the entire path of this directory this is very important in whichever directory your file is you have to copy the entire path of that directory and paste this into your code so that your code can access that directory and the file that you want to read so basically over here inside the double codes we have to provide the directory path and Then followed by the name of the file that we want to read so over here I'll just copy the name of the file that is the test file and paste this over here followed by txt now guys it is very important that while you're copying the directory path you will be getting this back slashes over here so you have to provide another back slash since this one back slash is acting as the Escape character so you have to provide two back slashes over here every time that you are providing the directory path so I'll just provide extra back slashes over here at every instance in this directory path so guys this is our entire path over here followed by the test file that is the file name and then the extension that is txt now guys the second step is to read this file so the first step is completed that we have opened the file now the next step is to read the content so we will say read uncore content as the variable name followed by equal to we use this file one variable that we have used in order to open the file followed by Dot and then we have the read method so this method will help us in order to read the content into this read content variable and then guys simply we can print the read content variable so over here we can say read content so let me just save this file now and try running this code so as you can see we are getting all the four lines that are present inside the test file so if I open the test file over here once again it says this is a test line in a test file so the same line is printed over here on the console this is a test line in a test file similarly we have the other three lines it is this is another test line then we have this is third line and then this is fourth line in test file so all those lines that are present inside the test file are being printed over here on the console so guys this is one of the easiest way that you can open the file in a particular directory read the content by using the read function and then you can print the content of the file by using the print function now guys after these operations are completed what you have to do is you have to close the file which is very important so as you can see when we are done with performing operations on the file we need to properly close the file now closing a file will free up the resources that were tied with the file it is done using the close method in Python so basically after printing the content what we can do is simply we can provide file one followed by Dot and then we can have the close method being called so let me just save this file now and before running this code we will have another print function over here and we will print the statement that is file is closed in order to confirm that the control flow has reached the final statement over here in our code so let me just save this file now and try running this code so as you can see all the four lines are being printed over here from the file once again and then we are also getting file is closed being printed over here and in this way we have already closed the file by using the close function as well so guys this is the way you can read the content of the file just by using these four lines of code we can easily read the entire content of any of the file that we want to read based on our requirements file writing in Python Programming so guys in Python a file operation takes place in the following order so basically first of all we have to open the file then secondly we can write into the file that we have open and the last step is to close the file so these are the operations in this order in which we have to follow while writing the content into the file now there are two things we need to remember while writing to a file so first of all if we try to open a file that doesn't exist so a new file will be created in this case so guys we are going to check this with the help of example as well and in the second case if a file already exist then its content is erased and new content is added to the file again so Guys these are the two important things that you should know while writing into the file if the file is not already present then a new file will be created and if the file is already present then the existing content will be removed and the new content will be added into the file so guys the first operation is opening the file over here in which case we can use the open method to open the file and this is the example we have the variable on the left hand side and then we have the open method followed by the name of the file over here along with the entire path if it is present in some other directory and Then followed by the second parameter that is W which stands for the right mode so guys let us check this with the help of example now over here so what we will do is we will say file one which is the variable name followed by equal to and then we have the open method in this case so we have to provide the name of the file along with the directory path inside the parenthesis and the double codes over here so what we will do is we are going to use this directory over here in order to create a new file and write the content into the file so guys over here there are only two files that is Python tutorial and test file we are going to create a third file that is output.txt in which we are going to write the content by using the code over here so basically I'm going to paste the entire directory path and in order to avoid any errors I'll just use the double back slashes over here since these are the Escape characters so we provide the double back slashes and then at the end we have to provide the name of the file so I'll simply provide output txt in this case and then guys the second parameter needs to be the writing mode so over here inside the double quotes we can say w which means we are opening the file in the right mode in this case now guys we have completed the first step now what is the next step writing into the file so basically writing in a file in a python so after we open a file we use the write method to write the content in the file and this is the way as you can see in this example we have the variable name that is file one followed by Dot and then we have the write method and then the content that we want to write into the file so guys basically what we will do is on the second line over here we will say file one followed by Dot and then we have the write method this write method can be used in order to write the content into the file and it takes certain parameters the parameters will be the string or the integer numbers that you want to print or store inside the file so guys let's say I want to provide this is first line in output file so guys this is the content that we want to write into the file and this is the way that we can use the write function in order to write the content into the file and it takes the parameter as the string which we want to store inside the file now after writing what we have to do is we have to close the file so when we are done with performing operations on the file we need to properly close the file closing a file will free up the resources that tied with the file it is done using the close method in Python so as you can see in this example we have file 1. close so over here we can simply provide file 1. close in this case and then open and close parenthesis it doesn't take any parameters over here so guys let me just save this file now before running this code I'll show you the directory once again we have only two files over here that is Python tutorial and test file we are going to have a third file over here that is the output .txt that will be created after execution of this code so before running this code what I will do is I'll have the print statement so that we get the confirmation that the code is executed so we will say file created successfully so this is the statement that will be printed after all the lines of code are executed so guys let me just save this file now and try running this code so as you can see we are getting file created successfully and if we go inside the directory now as you can see we are getting the third file over here that is the output in this case so if we open this file as you can see this is first line in output file and this is what we have printed by using our program this is first line in output file the same statement is being printed over here it is being stored in our output file and guys this is the way that we have created a new file by using the python code in a particular directory that we wanted and also return the content into the file by using the two methods that is first of all we have used the open function in order to open the file in the right mode and then we have used the right function in order to write the content into the file now guys let us say we have another scenario in the same file we want to update the first line to this is first line and I'll just remove this in output file content over here so we have the short message that is this is first line and then what I will do is we have another statement so again we will have the file 1. write and then we can say this is second line in this case so guys we are having the two lines over here now and this will act as a kind of update now that's because we already have this output.txt file in this directory and now what we are doing is simply we are opening it once again and these lines will be stored in the file and guys remember that while you are opening the existing file what we already saw is the content is erased and the new content is added to the file so basically these two lines will be printed inside the output.txt file and now what we will do is for this print function we will say file updated successfully so guys let me just save this file now before running this code I'll show you that file once again over here we have the output file I'll just open this file we are having this is first line in a output file so let me just close this now and what we will do is we will run this code so as you can see file updated successfully we are getting this message we'll go to the directory to check what is the content so as you can see both the statements are getting printed over here this is first line and Then followed by this is second line now guys what happened is both the lines have continued on the same line but we can have them on the separate lines as well so what we can do is in our code we can simply provide the slashing character at the end of the first line over here so that the control flow goes to the next line while printing this statement that is this is second line so guys let me just save this file and try running this code now once again so it says file updated successfully we come back over here in the directory we open the output file now as you can see this is first line and then we have on the other line This is second line over here so guys in this way we can easily write the content in the file we can also have the multiple lines of content being stored in the file that we opened by using the Python programming language guys this concept of reading and writing the files are very important as far as your project requirements are concerned so please make sure that you practice on your own so that on different inputs you get different output apart from this can we use the with open syntax in order to write a file so you can try this as a homework for you you can watch my previous video as well in which I have explained you how we can use the with open syntax in order to read the file and in which case we don't have to close the file that's because it is automatically handled by this with open Syntax for us so please read this as a homework for you and comment in the comment section below whether you were able to use the with open syntax in order to write into the file exceptions in Python Programming so guys an exception is an unexpected event that occurs during the program execution so let's say for example if we have this divide by zero variable and then we do the assignment in such a way that we divide this number that is five by 0 then we get divide by 0 exception that's because this is a runtime exception and we cannot divide any number by zero so the above code causes an exception as it is not possible to divide a number by zero errors that occur at runtime after passing the syntax test are called exceptions or logical errors so guys basically there will be many exceptions that you will come across when you are going to write python programs and these exceptions are going to be the runtime exceptions after passing the syntax test that we have already seen in our vs code editor so basically these exceptions occur when we try to open a file for reading that does not exist that is file not found error so basically this is one of the exceptions in the Python programming language in which case if let's say you are trying to open a file which is not present in the directory then we will have file not found error over here then if we try to divide a number by zero then we will get zero division error and then again if we try to import a module that does not exist then we are going to get the import error and so on so basically there are many builtin exceptions that we can see by using this print statement inside the directory we have this locals and then we specify this builtins in order to get the list of exceptions that is already built in in the Python programming language so this we are going to check with the help of example as well what we are going to do is we are going to see how the exception occurs in the Python program so over here let's say we have the variable that is number over here and we have the number that is five divided by 0 so in this case we are dividing a number by zero syntactically this is correct over here vs code will not throw any error but during the run time we will get the error which we call it as the exception so over here when we print this number so we say value of number is followed by colon and then let's say we provide this number variable so let me just save this file now and try running this code so as you can see we are getting this Z Z division error division by zero which is not possible we cannot divide any number by zero now let me show you another exception let's say we are going to open a file in this particular directory and the file name is test one which doesn't occur inside this directory so let me just copy this directory path and we will open that file which is test one which is not present so over here we provide the variable name is file one it is equal to we say open and then with this we have the parameter that is the directory path we have just copied over here we will just Escape these back slash characters so that we don't get any error over here for the back slashes and then at the end what we are going to do is after this we are going to provide test 1.txt now this file name as I have showed you over here it is not present test one is not present over here so we are trying to open that by using this test 1.txt file name so now what we will do is simply we will save this file enter our running this code now so as you can see file not found error is being displayed no such file or directory and then this file name is being mentioned over here what if we provide the correct file name let's say I provide this test file as the name of the file so I'll just copy this file name and paste this over here at the end instead of test one so I'll just paste this over here and then let me just save this file now and I running this code so now as you can see nothing happens we are not printing anything but there is no exception that is being printed over here on on the terminal that's because this particular file name is actually present and hence there is no file not found error that is being displayed over here like how we have seen previously with the test 1.txt file so Guys these are certain exceptions that might occur when you are going to work with the python projects and such exceptions are inevitable we cannot avoid them but we can handle them so we are going to see exception handling in the upcoming videos as well how we are going to handle them but it is very important for you to know that these exceptions might occur when you're going to work with the Python programming language now guys let us see the list of all the builtin exceptions that are present inside the Python programming language so I'll just copy this line of code and then we'll paste this over here so as you can see this is a print statement and inside this we have the DI function and inside that we also have the locals function and then we provide the builtins attribute over here so let me just save this file now and try running this code as you can see we have got the list of all the exceptions that are present inside the Python programming language so there are multiple errors that might occur which includes arithmetic error then we have assertion error attribute error base exception so there are many errors that you can see over here file not found error this is one of the exceptions that we have just checked and then we also have this zero division error which we just saw when we divide any number by zero so guys there are multiple exceptions that might occur which are already built in inside the Python programming language and you can prce prce on your own to see which exception occurs on which particular input exception handling with try accept block so guys basically it is important to handle exceptions that we have already seen in Python we use the try accept Block in order to handle the exception and this is the syntax in order to handle the exceptions in Python so basically first of all we have the try keyword followed by the colon and then we have the code that may cause the exception for example we can have a number being divided by zero in which case Zero division error might occur which is the exception and not only the zero division exception but if any exception that occurs inside this Tri block we can have the except block just following this Tri Block in order to catch that exception so basically inside this accept block we have the code in order to run when the exception occurs so guys this we are going to check with the help of examples now so over here in the vs code what we will do is let's say we want want to divide a number by zero so we want to provide that code inside the tri block so we have this try keyword followed by the colon and then over here what we will do is we will say number variable it is equal to 10 / 0 so guys if we try to run this code over here 10 divided 0 for which the zero division error will occur which is one of the exceptions in the Python Programming so what we have to do is we have to catch that exception inside the except block so here what we have to do is we have to provide the accept keyword followed by the colon and then we can have the code in order to handle that exceptions over here we can simply provide the print statement and then we can say number cannot be divided by zero over here so guys this is the code that we are going to execute if the number is getting divided by0 and the zero division error is occurring so let me just save this file now and try running this code so as you you can see number cannot be divided by zero this line of statement is getting executed over here and this is the line that is getting printed now guys what would have happened if we don't have this try and accept block so let us just comment out these blocks over here so instead of this we are just having number it is equal to 10 / 0 and then let me just comment out this line as well so number is equal to 10 / by zero only this line of code is there let me just save this file and try running this code as you can see we are getting zero division error division by zero and this is the exception that we are getting on the terminal so over here since we have not properly handled this exception this is the way that we are getting the output but we can have the proper output in this way like we can have a particular statement being printed by using this try and accept block so over here we have just provided the try block and after this we have provided the accept block as well we have provided a beautiful statement that is a user fry statement with which says number cannot be divided by 0er and when we just save this file and try running this code now it says number cannot be divided by 0 if the exception is occurring over here inside the tri block now guys let's say if there is no exception occurring inside the tri block so still the print statement will be executed let us check that so over here instead of 10 / 0 we will say 10 / 2 in which case the answer will be five and that will be stored in this number variable and there is no exception that is occurring over here on this line of code so let me just save this file now what we will do is as a confirmation we will come out of this try and accept blocks and over here we will say end of code so we can just confirm that this is the line that is getting executed at the end of the code so over here let me just save this file enter I running this code now as you can see end of code is getting displayed now that is because there is no zero division error that is occurring inside the tri block that is because we have changed the expression from 10 / 0 to 10 / 2 now guys there is another thing that you can do catching the specific exceptions in Python so as you can see this is the example over here we have the tri block and then let's say we have the variable name as even numbers and this is the python list as you can see we have 2 4 6 8 which is the list of numbers all are even numbers and what we are trying to do is we are going to print the even numbers with the index five over here but guys as you can see this is the index zero then we have index one then we have index two and then three so three is the final index the total length of the list is four and three is the final index that we can access but we are trying to access the index that is five so basically we should get the index out of bound error over here but we can also specify the different exceptions that we have seen so far so basically while providing the accept keyword we can provide the zero division error over here which will say denominator cannot be zero and then we we also have the accept keyword followed by the index error so in this case since we are having the multiple accept logs it depends on the control flow the control flow will check that which type of exception is occurring and based on that exception it will try to match that exception is this exception related to zero division error no in this case so is it matching with the index error yes since it is related to the index that we are trying to access which is not possible so it will print this statement that is index out of bound so let us check this block of code over here I'll just copy this and paste this in the VSS code since I'm little bit lazy in order to type all this code once again so over here let me just save this file and try running this code now as you can see it says index out of bound that's because the exception that is matching inside this Tri block is the index error and this is the print statement that we are supposed to print if there is an index error that is occurring now guys let's say you want to print this denominator cannot be zero statement so what we have to do is we have to make sure that inside the tri block there is a divide by0 expression so what we will do is over here I'll just remove these lines of code and we will simply say number it is equal to 10 / 0 so in this case divide by zero expression is occuring and that is why we will get the zero division error and in this case we should get this statement that is denominator cannot be zero so let me just save this file now and try running this code as you can see denominator cannot be zero statement is getting printed so guys it depends on you you can have the specific exceptions being specified over here and each exception will be handled differently this is just a print statement that we have included over here you can have any code inside these except blocks that you want to use based on your requirements of the project but guys remember that whatever matching exceptions that is occurring inside the tri block the control flow will try to match with those exceptions one at a time and once it matches with a particular accept block it will try to execute those lines of code inside that block now guys let us move to another task over here python try with lse Clause so basically in some situations we might want to run a certain block of code if the code block inside try runs without any errors so for these cases you can use the optional else keyword with the try statement so guys what happens is sometimes there will be no errors that are occurring over here I'll just remove these lines of code so I'll just keep one accept block over here and I'll just remove this exception as well that is zero division error so what we are doing over here is denominator cannot be zero I'll just save this file and try running this code so this denominator cannot be zero is getting printed over here but guys what if this denominator is not zero let's say if I provide the denominator as two so in this case this statement will not get printed that's because there is no exception that is occurring and if there is no exception occurring no code in the accept block over here will get get executed but what if we want to execute some line of code so over here we can simply provide the else part so basically what happens is let's say inside the tri block if we don't have any exception that is occurring so no block of code that is inside the accept block will get executed but let's say in the end if we have this else block so whatever code we provide over here it will get executed only when there is no exception that is occurring over here inside the tri block so over here what we will do is we will say print we will simply say inside else block so guys this is the code let me just save this file now and try running this code as you can see there is no denominator cannot be zero that is getting printed but over here we are getting inside lse block that's because since there is no exception that is occurring the control flow is not going inside the except block but it sees that we have the else block over here so it executes those lines of code inside the lse block now guys what if there is an except ction that is occurring so let's say if we provide this s 10 / 0 as the expression so let me just save this file now this line should get printed over here but whether this lse part will get executed let us check that so let me just run this code once again as you can see denominator cannot be zero is getting printed but the code in the lse part is not getting printed so that's because since the exception has occurred we are getting into the accept block but not into the else block so guys this is very important in case the except block is not getting executed we can have the else Block in order to execute some lines of code that you want to execute now let us move to another task over here we have something called as python try finally so guys this is another important concept as far as exception handling in Python is concerned so basically in Python the finally block is always executed no matter whether there is an exception or not so the finally block is optional and for each Tri block there can be only one final block so guys what we will do is basically the understanding behind the finally block is irrespective of whether there is an exception that is occuring or not the code in the finally block will be executed so over here we will simply have the finally keyword followed by the colon and then we will say inside finally blog so over here we will simply have double codes and inside this we will say inside finally block so guys first of all we will check when there is an except that is occurring this line of code will get printed and we will not go inside the lse part but the control flow will go inside this finally block over here so let me just save this file now and try running this code so as you can see denominator cannot be zero which is this line of statement which is getting printed and then it is not going in the lse part but it is going in the finally part so it says inside finally blog so over here exception has occurred and the control flow is going in the finally block now let us say there is no exception that is occurring we say 10 / 5 over here so let me just save this file now and try running this code it says inside L's block so basically there is no exception that is occurring so the control flow is not going inside this except block but it is going inside the else block so over here as I have told you if the control flow doesn't go inside the accept block and if there is a else block basically this line of code will get executed and then at the end we have the finally block which is getting executed as you can see inside finally block so irrespective whether there is an exception that is occurring or not inside the tri block the finally block will be executed every time now guys where this thing is important basically let's say if you have the database connection or if you have file opened so you can close that file or close that database connection inside the finally block over here after carrying out your operations in the tri block which might have certain exceptions that might occur during the run time so guys during such instances the fin finally block becomes very important in order to execute those lines of code irrespective whether that was an exception that has occurred inside the tri block or not object oriented programming in Python so guys we are going to check the classes and objects with the help of examples python is a versatile programming language that supports various programming Styles including objectoriented programming through the use of objects and classes which we are going to see with the help of examples as well now in object is any entity that has attributes and behaviors so for example a parrot is an object and it has multiple attributes as you can see there are multiple attributes that can be present which is name then we have age color and so on apart from that it also has certain Behavior such as whether it can dance or not so dancing is one of the behavior whether it can sing or not so singing is another Behavior now I'm not sure whether a parrot can really dance or not but these are certain behaviors that we can consider in order to understand classes and objects now guys similarly a class is a blueprint for that object so basically these objects are having the attributes and behaviors and the values will be stored in these objects but the blueprint will be present inside the class so basically this class can be treated as a template which has certain attributes and behaviors being defined over here and we can create multiple objects related to that class so we are going to check with the help of example how do we create a class parot with the attributes as name and age so let us move to the VSS code over here the very first thing that we have to create is the class so basically we have to provide the class keyword followed by the name of the class so let's say the parot is the name of the class over here and then we have a colon and then we can have different attributes so one of the attributes is name over here we will assign it with a empty string and then we have age as well we will assign it as zero over here as the initial value now Guys these are the two attributes that we have defined for this class that is parro now we can create different objects out of this class now this class is acting as a blueprint or we can say as a template in order to create multiple objects so we will come out of this class and what we will do is we will create the objects for this class so let's say we have parot one followed by equal to operator and then we can simply provide the name of the class that is parot followed by the open and close parenthesis so this is the way that we can initially an object for this class that is parent and then we can use this object in order to initialize these attributes that is name and age so over here what we will do is we will use this parot one object followed by Dot and as you can see we are getting this name and age being Auto suggested by the VSS code that's because we have already defined these attributes inside this blueprint that is class parot so over here we are going to provide the name as the name of the parrot one object so let's say we provide the name as blue over here and then let's say we also want to provide the age of this parrot object so again we will provide parot one followed by Dot and then we have the age attribute let's say it is 2 years old so we have two as the parrot's age now guys let's say we want to create another object with another name and age so again we will copy these lines of code and paste this over here what I will do is instead of parot 1 we will say parot 2 because this is another object so this this is the second object that we are creating by using this parrot class and over here again we will say parot 2. name and parot 2. AG so let's say the name of the parot 2 is Vu and its age is five over here so 5 years so guys over here we have created two objects for this class that is parro similarly we can create any number of objects that we want it's very important to note that while creating the objects we provide this variable name on the left hand side and on the right hand side we provide the name of the class followed by the open and close parenthesis and then we can call the different attributes of that class in order to initialize them now guys after these objects are being initialized with their names and age we can simply print them on the console so what we can do is we can have the print statement with the formatting being enabled so over here inside the print statement we can have the F followed by the double codes and then what we can do is open and close curly braces inside this we can have the parent one do name over here is and Then followed by curly braces parot 1. Ag and then we can have ear B so guys basically what is happening over here is inside the open and close curly braces we can provide the variable names in order to get their values being printed inside the print statement so this parot 1. name will give us the value of this variable that is blue over here and then followed by is and then again we will get parot 1. AG which which is two in this case so blue is 2 years old so this is a statement that should get printed and then similarly we can copy this line of code and paste this over here and instead of parot one we can simply say parot 2 so we have parot 2. name and then parro 2. AG so guys let me just save this file now and try running this code as you can see blue is 2 years old this is what is getting printed by using the first print statement and over here again we are getting Vu is 5 years old so this is the second print statement that is helping us in order to print this particular statement so guys this is the way that we can easily create a class in this case we have created the parot class and we have two attributes that is name and age you can have any number of attributes for the class based on your requirements and apart from that while creating the objects you can have the values for those attributes based on those particular individual objects and then you can call those attributes by using the objects that you have just initialized by using this St statement that is the object on the left hand side followed by equal to operator and then we have the class name followed by the open and close parenthesis this is called instantiating of the object or we can also call it as initializing an object in Python Programming inheritance in Python Programming so guys inheritance is a way of creating a new class for using details of an existing class so this we are going to check with the help of examples as well the newly formed class is a derived class which is also called as a child class and similarly the existing class is a base class or the parent class so guys what we are doing over here is we are already creating a parent class that is also called as a base class over here and then we also create a child class for which the attributes are derived from the parent classroom here and this is what is called as The Inheritance now what will be inherited all the attributes provided that they are public along with the methods will be inherited by the child class so guys let us check python inheritance with the help of example now over here so let us switch to the vs code first of all we will create the parent class so let us say we have the class that is called as animal over here and inside this animal class we will Define two functions that is eat and sleep so we will have DF keyword followed by eat that is function one and then inside the parenthesis we are going to have the parameter that is self always remember guys whenever we are calling the function inside the class it is going to take a single parameter which is going to be the object by default so we need to catch that object with any name as a parameter over here so we have given the name of this parameter as over here so that we can identify that this is the object and then we can use this object as well in order to access its attributes and inside this eat function we are going to have a simple print statement and we will say I can eat so guys this is a statement that is going to be printed when we call the eat function using the animal object and then similarly we will have the Sleep Method as well so we have DF keyword followed by Sleep Method and then again we will have the parameter as the self which will be passed by default and then inside this again we are going to have the print statement and we can say I can sleep so Guys these are two methods or functions that we have defined inside the parent class that is the animal class now guys how do we inherit these methods to another class so let's say we have another class over here which will be a child class of the animal class CL so we are going to have another class and let's say the name of the class is dog over here and then in order to have its attributes and functions of the super class that is the animal after this name of the class that is dog we have to provide open and close parenthesis and inside this parenthesis we have to provide the name of the super class that is animal in this case so this particular class that is animal we want to inherit its attributes and functions inside the child class that is dog so this is the way that we inherit the super class and now we can have a colon over here and then we can have the attributes and the functions of this class that is dog class separately so over here we are going to have the DF keyword followed by let's say I'm simply going to have the display method over here and it is going to take one parameter that is self and then we are simply going to print that we are inside doc class so this particular statement will be printed whenever we are going to call this display method over here so guys this is the way that python inheritance Works what I will do is I'll just zoom out little bit so that you can see the entire code at once so over here we have created the super class that is the animal class and then we are creating another class that is called as the child class and after the name of the child class we are providing the name of the super class over here that is the parent class inside the open and close parenthesis and what this will do is the eat and sleep methods will be now available inside the dog class as well so guys why this is important so let us come out of this class now and what we will do is let us create the object of this class that is the dog class so what I will do over here is we will create dog one that is the object of the dog class followed by equal to and then the name of the class that is dog over here so we have created one object of the dog class now guys ideally we have seen that we can call the display method which belongs to the dog class so we can do that over here so I'm going to call the dog one object followed by Dot and then we have the display method so after this we are going to have the open and close parenthesis let me just save this file first and try running this code now so as you can see we are getting we are inside dog class which means this statement is getting printed now guys do we have any other method apart from this display method yes we do have and those are eat and sleep methods why so because we have inherited the methods from the animal class by using the python inheritance so basically we can use this object name that is dog one in order to call eat and sleep methods over here so if we call both the methods so I'll say dog one followed by Dot and then as you can see vs code is suggesting us this eat method as well so we have eat followed by open and close parenthesis and then again we will call the dog one object followed by Dot and then Sleep Method is also being suggested by the vs code so we are going to call both the methods over here so let me just save this file now and try running this code so as you can see we are getting all the three statements that is we are inside dog class I can eat and I can sleep which are the statements that are being printed by using these methods respectively so guys this is the power of python inheritance we can use the different attributes and the methods that were defined in a super class inside the subass by using the object of the child class over here which is also called as the subass over here guys it is very important to note that whenever we are defining the methods inside the class we need to provide one parameter over here which is going to be the object that will be passed so behind the scenes what is happening over here is when we call dog 1. display over here the dog one object is being passed with this display method even though we are not providing any parameter over here but behind the scenes the object is being passed over here and it needs to be caught by this particular method what happens if we don't provide this parameter let us check this so I'll just remove this self keyword over here and I'll just save this file now over here we are not receiving any parameter as we can see so let me just run this code now so as you can see type error dog. display takes zero positional arguments but one was given so basically behind the scenes this dog one object is being passed and we need to have a parameter over here while defining the function and that is the reason why we had given this self parameter name in order to identify that this is the object of this particular class that is dog so let me just save this file now and try running this code once again so as you can see there are no more errors that are getting displayed and all the three statements are getting displayed over here now guys what are the uses of inheritance so as you can see since a child class can inherit all the functionalities of the parents class this allows code reusability so as you can see over here we need not have to provide the eat and sleep methods once again inside the dog class and we were able to access both these methods by using the object of the dog class without actually providing the definition of those methods over here once a functionality is developed you can simply inherit it no need to reinvent the wheel this allows for cleaner code and easier to maintain now since you can also add your own functionalities in the child class you can inherit only the useful functionalities and Define other required features so guys based on your requirement it depends on you which class you want to inherit and create the child classes and the parent class classes over here based on your project requirements Constructor in Python Programming now guys a python Constructor is a function inside a class that helps us to initialize certain attributes of a class so far we have seen creating the class attributes and the functions and while initializing the attributes of the classes object we use the object name followed by the dot and then the attribute name but is there a better way in order to initialize those attributes inside the class yes it is so we have something called as double * underscore followed by in it and then again double * underscore followed by open and close parenthesis which is a Constructor function that is called whenever a new object of that class is instantiated so guys let us check this with the help of example now so let us move to the vs code what we will do is we will create a class that is called as the parot class over here and we will Define two attributes so over here we have the name which is of the string data type so let's say we have the empty string initial and then let's say we have the age attribute which is defined as zero over here which is the integer so guys what we will do is let us say we want to create the object of this class so what we have to do is let's say we provide the object name as parot 1 followed by equal to operator and then we have the name of the class that is parent followed by open and close parenthesis now guys so far what we had done is in order to initialize both these attributes we were calling this object name followed by Dot and then the name of the attribute so let us do that first so we are going to use the parot one object over here followed by Dot and then let's say the name of the parrot it is blue over here so we provide the name of the parrot and then we also provide the age of the parrot so let's say parrot 1. AG it is equal to 2 years old and then we can simply print the name and age of this parrot so let us say we provide the print method over here and we provide the parrot one object so parrot one followed by Dot and then we have name is and then again we want to get the age so parot 1 do age and then we have years old so over here blue is 2 years old will be displayed so let us save this file now and try running this code so as you can see blue is 2 years old so guys this is the conventional way that we had seen so far in order to instantiate an object of the class and also assign the values to the attributes of that class so is there a better way in order to assign these values to these attributes yes we can do so by using the Constructor so what we can do is we can simply remove these two lines of code over here so I'll just remove them and then guys inside this class we are going to have the innit method which is the Constructor so over here we are going to have the DF keyword followed by double * underscore and then we have the init so as you can see vs code is suggesting us this method which we are going to use so in it and it is going to take one parameter by by default as I have already told you previously whenever we are going to call any method inside the class the object that is used in order to call that method is also passed by default behind the scenes so this self parameter represents the object of this parot class over here I'll just remove this part and what we are going to do is we are going to take both these attributes that is name and age as the parameters so over here after the self we are going to have comma and then we are going to have name one so guys I'm naming this as name one so that you don't get confused between this name and this name one so this name one will be passed as the parameter when this Constructor is being called over here and then followed by comma we also have age one and then what we can do is for this self that is the object followed by dot we can have name it is equal to name one over here and then again we can have the self followed by Dot and then age it is equal to H 1 so what we are simply doing over here here is the name and age attributes of this object the object is being represented by self and then self. name it will be assigned with the value of this name one that is being passed same thing for the age as well the self. age the value will be passed by using this age one parameter over here and both these values will be assigned to name and age attributes now guys when exactly this Constructor is being called so basically whenever you are going to create an object and call this class over here that is the parrot class the Constructor will be called so while instantiating this object we also need to pass the name and age for this particular instance of the class so what we will do is let's say we take the same name that is blue over here so we provide the first parameter is the name of the parot followed by comma and then we provide the age that is 2 years old which is the second parameter so guys when the control flow comes over here it sees that the class is being called with these two parameters and we also have the Constructor so basically this parro one will be assigned to this parameter that is self and then this name and age will be assigned to this name one and age one and this name and age will be assigned those values respectively and then we can simply have this print statement in order to print the same statement that we had seen previously as well so let me just save this file now and try running this code so as you can see we are getting the same statement that is blue is 2 years old that's because we have provided the same name and the same age let's say we provide a different name over here so let's say we provide Wu and it is 5 years old so let me just save this file now and try running this code as you can see who is 5 years old is getting displayed over here so guys in this way what we have done is while instantiating the object we are passing the values or the attributes that are present inside that class for which the values are getting assigned now guys another important functionality of this Constructor is we can also remove these attributes that are being declared so there is no need of declaring these attributes over here so I'll just remove these lines of code over here and what exactly is happening is while this Constructor is being called the interpretor comes to know that this name and age are the attributes of this class that is the parot class over here and it assigns the values that are being passed to name one and age one so to make it more simple let us say we name this parrot as first parrot over here for which the age is 2 years old and let's say I provide another parrot so I'll just copy this line of code and paste this over here and then I provide this as parot 2 and then we can say second parrot over here which is 5 years old so we'll say 5 years old and then we will print both the parrots over here inside the print statement I'll just copy these lines of code and paste this over here and then we can say parot 2. name and then again over here parot 2. AG so let me just save this file now and try running this code so as you can see first parot is 2 years old and second parot is 5 years old both the state St ments are getting displayed over here so guys this is the way that you can Define The Constructor inside the class by using the underscore uncore init method and Then followed by the self that is being passed automatically as one of the parameters and then you can have any number of parameters being passed over here inside the Constructor which can be used as the values for the attributes of the class that you have defined and those values need to be passed whenever you are creating a new object for that class encapsulation in Python program in so guys encapsulation is one of the key features in objectoriented programming because encapsulation refers to the bundling of attributes and methods inside a single class so we have seen so far the various attributes and methods that we have been creating inside the class that functionality of the Python Programming is called encapsulation now it prevents outer classes from accessing and changing attributes and methods of a class so far we have seen that all the attributes and methods were public in nature but in this case we are going to create some private attributes which cannot be directly accessed outside the class so this also helps us to achieve data hiding over here now in Python we denote private attributes using the underscore as the prefix either we can have the single underscore or the double underscore so let us check this with the help of example now over here as you can see in this example we have the class computer and then we also have the Constructor that is in it followed by the self which is the parameter for that object that is being passed and then self. Max price so as you can see over here we have the prefix that is double underscore followed by Max price so this is one of the attributes of this computer class over here and we are providing the value of 900 to this Max price over here inside the Constructor now apart from this Constructor we have more couple of functions inside this class as you can see we have the sell function over here which simply prints the selling pric is the self for followed by Dot and then the max price so basically this statement will help us in order to print this value that is the max price value of the computer and then we have another method that is set max price which takes the object that is using the self and then it also takes the price over here so in case you want to set another Max price for this computer you can use this set max price function what it will do is it will simply update the value of the max price of the computer as you can see with this particular statement so guys let us check this with the help of example now what I will do is I'll simply copy these lines of code since I'm little bit lazy in order to type them again so we are going to paste it inside the vs code so over here what we are going to do is we are going to print the max price of the computer so first of all we are going to create the object that is comp one over here followed by equal to and then we have the computer class name so basically since a Constructor is not taking any other parameter apart from this self which is the object itself so we need not have to provide any parameter over here while instantiating this object that is comp one now what we will do is simply we will call the cell function over here that is this particular function so we can use the comp one object followed by Dot and then we have the cell function so after this open and close parenthesis so let me just save this file now and try running this code so basically this print statement should get executed and it should be displayed on the terminal so I'll just run this code now as you can see selling price is 900 so what exactly happened is when the control Flow came over here that is comp one it is equal to computer The Constructor of this class that is the init method was called and inside this what we have done is this private attribute so guys basically this double uncore denotes that this is the private attribute of the computer class so basically this private attribute was initialized inside the Constructor and a value of 900 was being assigned to this particular attribute and then what we did is when the control Flow came over here that is while calling the cell function basically this print statement was executed so selling price it is equal to this self. Max price got printed over here which is 900 right now now guys let us do another thing what we will do is we will try to access this private attribute from outside of this class so over here we will call comp one once again followed by Dot and then we can call this private attribute that is the max price so as you you can see this Max price is getting suggested by the vs code so we will call this Max price and what we will do is we will try to assign another value that is 1,000 over here to this Max price and then again let us say we want to call this print statement so again we will call this sell method over here so I'll just copy this line of code and paste this over here let me just save this file now and try running this code so as you can see selling price 900 this is a statement that was printed by calling the first sell method and then the the second time the sell method was called again the selling price was equal to 900 so guys why so that's because this Max price is the private attribute and we directly cannot access this attribute by using this object we need to have another method inside the computer class in order to assign another value to the private attribute and that is why we have this method that is the set max price along with the parameter price which it is going to take in order to replace the existing Max price over here so what we can do is we are going to call the comp one object once again followed by Dot and this time instead of directly accessing this Max price we are going to call this set max price over here so set max price and it is expecting two parameters the first parameter is the self which is going to be passed by default which is going to be the comp one object and then the second parameter is the price which we are going to pass to this method so again what we will do is simply we are going to provide this th000 price that we try to assign to the max price directly over here so set max price and then again let's say we want to print the selling price over here so again we are going to call the sell method once again so comp 1. sell so over here the only difference is we are calling the method that is the set max price and we are passing the value of the new Max price over here which is going to be passed to this price and then the max price value will be the updated price that we have just said so guys let me just save this file now and try running this code so as you can see selling price 900 and then selling price 900 once again and the third time that we tried by using the set max price over here it was 1,000 so this time it is selling price it is equal to 1,000 so guys by using this method in order to set the value of a private attribute we were successfully able to update the value of this private attribute and this is the main functionality which we call it as encapsulation as far as op object oriented programming in Python is concerned so guys let us run this code once again by a different value let's say the max price over here we set it to 2,000 so let me just save this file now and try running this code so this time the selling price is coming over here once again as 2,000 and guys this is the way in order to hide certain attributes of a class you can have them as the private attribute by prefixing and use the different methods in order to set their values by using the objects of that class method over overriding in Python Programming so guys method overriding in Python is a way of letting method of a subass override the method of a super class so let's say for instance inside the super class we have a method that is eat and then inside the subass we also have the same method with the same name that is eight so basically the method inside the subass will be executed instead of the method that is present inside the super class so let us check this with the help of example number over here so as you can see this is the class that is animal which is being treated as the parent class or the super class and over here we have the attribute that is the name of the animal and it has a function that is the eat and it takes one parameter that is self over here it simply prints a statement that is I can eat now guys again we have another class over here that is the dog which inherits this parent class that is animal and again what is happening over here is this eat is being inherited by this dog class but the dog class is also having its own eat method over here so as you can see this eat method is once again present inside the dog class and it is printing its own statement that is I like to eat bones so guys what we will do over here is I'll just simply copy these lines of code and paste it in the vs code and let us check the functionality of the method overriding and how it can be used in your project based on your requirement so I'll just remove certain comments over here so as you can see we have this parent class that is animal and then we have have the child class that is dog over here both are having the eat method so what we will do is first of all I'll just comment out these lines that is this particular function is not present let's say inside the dog class I'll simply provide the P statement over here so what exactly is happening first of all we have the animal class which is having the eat function and this dog class it is inheriting the animal class so the dog class will have access to this function that is eat over here so I can eat will be displayed so what we will do is first of all we will create the object of this dog class so let's say we have dog one it is equal to and then the name of the class that is dog over here and simply what we can do is since the dog class is inheriting the animal class we can use the eat method of the animal so we can simply use the dog one object followed by Dot and then we have the eat method being called followed by open and close parenthesis so guys over here simply if we save this file and try running this code now as you can see I can eat is being displayed over here which is the print statement inside the eat function of the animal class now guys let us say we have the same method that is eight with a different print function inside the dog class so I'll just remove this pass statement and we'll also remove these commands over here so basically now what will happen whether the E function of the animal class will be called or the eat function of the dog class will be called so let us check this so I'll just save this file now and try running this code once again as you can see I like to eat bones this particular statement is getting printed which is the statement from the eat function of the dog class so basically whenever we have the method with the same name inside the parent and the child class the method of the child class will be called over here and that is what we call it as method overriding now guys why method overriding is important so let's say you have the animal class over here this is a very generic statement that I can eat basically it doesn't specify what the animal can eat but let's say you want to have the child classes over here which inherits the parent class and you want to be more specific so what the dog likes to eat basically the dog likes to eat bones over here so you can have the same method name inside the child class and print a different message in this case and that is what we have done in this example so method overriding is very important as far as objectoriented programming in Python is concerned and you can use them in your own Project based on your requirements multiple inheritance in Python Programming so guys previously we have seen the single inheritance but in this video we are going to check the multiple inheritance in Python so a class can be derived from more than one super class in Python basically this is called multiple inheritance so basically the derived class will be having the multiple super classes in this case so for example a class bad is derived from Super classes that is mammal and a winged animal so basically this mammal and winged animal will be treated as the parent classes and this bad class will be the subass or the child class which can be derived from both of these super classes over here so it makes sense because bat is a mamal as well as it is a winged animal so let us check this with the help of the example code now in the vs code so over here first of all we will create a class that is called as maml over here and inside the maml what we will do is we will Define the function and we will simply say mammore info so this particular function it is going to take one parameter at itself which is the object itself and basically we are going to Simply print the statement that we are inside mammal function so as you can see we are simply printing we are inside mammal function in order to identify that the control flow has come over here inside the mammal info function and then again we will have another parent class over here that is winged animal so we say winged animal over here and this this time what we will do is again we will have the function but over here we will say Wing uncore info so this particular method belongs to the winged animal over here and then again it is going to take the parameter is the self and then again I'm simply going to copy this print statement over here and paste this inside the winged info and we will say we are inside winged animal function so we say we are inside winged animal function now guys we have created two classes over over here which will be treated as the parent classes now we will be defining a third class that will be the child class of both these classes so basically we will have the class that is called as B over here and how do we mention the multiple super classes whenever we are defining the sub classes over here so basically inside the parenthesis we will have both these classes separated by a comma so first of all we will have the memal class over here followed by comma and then again we will have the winged animal class over here in this same way you can have any number of classes separated by commas over here in order to achieve multiple inheritance and then after this we will have the colon and then again we will have another method which will belong to this B Class over here so over here we will have the bcore info method and then which will take the self as the parameter and then we have the colon over here again we will have the print statement we will say we are inside bad function so it says we are inside bad function now guys inside this bad class we have this bad info function and apart from this we also have this mamal info and winged info functions since both these functions are derived from these classes that is mammal and winged animal over here so we can access all these functions from the object that we create for the bad class so let us come out of these classes and what we will do is let's say I provide the object that is bad one it is equal to bat over here so we have created the object of this bad class in this case and then when we provide the B one object followed by dot as you can see we are getting all the three functions as the suggestions by the vs code over here that's because all the three functions are accessible by this bad one object over here so first of all we will say bad info and Then followed by open and close parenthesis and then again we will say b 1 dot let's call mammal info in this case so we have mammal info as well as the third function that is B one followed by Dot and then we have the winged info over here and then open and close parenthesis so all these three statements will be printed one at a time based on the functions that is being called by the control flow so let me just save this file now and try running this code in order to confirm the same so as you can see first of all we have called the bad info so we are inside bad function is being displayed and then again V are inside mammal function is being displayed that's because mammal info is being called the second time and third function is being called that is winged info and we are getting we are inside winged animal function function so guys in this way we have also achieved multiple inheritance over here in case the functions that you want to use are present in the multiple classes as you can see over here you can have multiple classes being inherited by the derived class which we also call it as a subass over here and this bad class is acting as a subass and both these classes that are mammal and winged animal are acting as the parent classes now guys let us move to another task over here what do you mean by Method resolution order in Python that is mro so if two super classes have the same method name and the derived class calls that method then python uses the mro to search for the right method to call so guys over here we have seen how multiple inheritance can be achieved but what if the method names in both the super classes that is in the memal class and the winged animal class are same so what we will do is instead of this memal info we will keep it as display over here and instead of winged info again we will will call it as display so basically this time what is happening over here is both these classes that is mamal class and winged animal classes are having the same method name that is display and what we are doing we are creating the subass that is B and inheriting both these classes that is mammal and winged animal over here and this time both these display methods are getting inherited by this bad function now which method will be called when we use the object of this bad method let us check that so basically I have to remove these lines of code since these functions are no longer present but instead of that what we will do is we will say B one followed by Dot and then we have another function that is display so we have only one function that's because the name of these functions are same in both the parent classes and Then followed by open and close parenthesis so guys over here inside the bat function we have the bat info which will be called by using the bad one object and then the next time what we are doing is we are using the bad one object in in order to call the display method now which display method will be executed out of these two let us check that with the help of execution so I'll just save this file now and try running this code now so as you can see we are getting we are inside B function which is this statement that is getting printed that is obvious that's because we have called the bad info function over here and next time when we call the display method it is saying we are inside mammal function so guys basically this print statement was executed which proves that the playay method of the mamal class is being called over here why so that's because when we are creating the child class the first parent class is being given the highest priority over here so first the control flow will check whether this display method is it present in the first parent class if not then it will go to the second parent class over here inside the manual class it is finding that the display function is present and that is what is getting printed over here so it is the leftmost class that will be used in order to call the method which is present in multiple parent classes over here so what if we provide winged animal as the first class so what we will do is I'll just remove this mammal class from here on the left hand side we will provide winged animal and Then followed by comma and then on the right hand side we provide mamal so over here again we have just changed the order in which the inheritance is being done over here both these classes are still the parent classes of this child class that is bed class now let us check which statement will be printed when we call the display method over here so let me just save this file now and try running this code as you can see we are getting we are inside winged animal function so guys basically this winged animal function that is display function was called and we are getting this statement that is we are inside winged animal function that's because this time we have provided winged animal as the leftmost class and the control flow found this particular display method inside the winged animal class over here which is the parent class of the bad class so guys this is very important as far as method resolution order is concerned the leftmost class is being given the highest priority as far as the same names of the methods are concerned so guys practice on your own so that on different inputs you get different outputs operator overloading in Python Programming so guys in Python we can change the way operators work for user defined types so for example the plus operator will perform arithmetic addition on two numbers in the same way it will merge the two list as well or else if we are dealing with the two strings then it can concatenate two strings so the same plus operator can perform multiple operations depending on the operant whether they are numbers or whether they are strings or list so this feature in Python that allows the same operator to have different meaning according to the context is called operator overloading so this we are going to check with the help of examples as well apart from this there are certain special functions in Python so basically the class functions that begin with the double underscore are called special functions in Python they are called double underscore functions because they have a double underscore prefix and suffix such as as you can see this in it which can be treated as the Constructor of a class it is one function which starts and ends with the double underscore in the same way the plus operator can be overridden by using this double underscore followed by add and then double underscore again and then open and close parenthesis so guys let us check operator overloading implementation in action using the vs code over here so we'll see the very basic examples first of all so let's say we have num one it is equal to 10 and then number two that is num two it is equal to 20 so if we simply print num 1 + num 2 over here so num 1+ num 2 so basically it is 10 + 20 which is 30 in this case so when we just save this file now and try running this code so as you can see we are getting the result as 30 but what if these variables are strings so instead of numbers let's say if we enclose them within the double quotes this means that we have a string over here that is 1 Z that is 10 and then over here as well we have another string that is 20 so when we do num 1 plus num 2 instead of 30 we will get the concatenation of this string which means 10 will be followed by 20 in this case when we try to print the statement so let me just save this file now and try run this code so as you can see we are getting 1020 so guys we have not changed anything over here the operator is same and the operants are also same the only thing is we have changed the values to the string and that is what operator overloading means that is by using the same operator we can have the different results based on the operant values now guys let us check how operator overloading can be implemented when we are dealing with classes over here so let's say we have a class that is named as point over here and this class let's let's say we have a Constructor inside it so we have init method inside this so init method it will take one parameter that is self and what we will do is let's say it has two attributes over here so self dox so the point class it will have two attributes that is X and Y coordinates so over here let's say we provide the x value by using the parameter that we are getting so let's say we have X1 over here and let's say we have y1 over here so self. X it will be equal to X1 and then again we will have self do y it is equal to y1 in this case so whenever we are creating the object by using the point class over here the Constructor that is in it method will be called along with the two points that we will be passing and those two points will be assigned the values to these variables that is X and Y over here now guys in order to override the two string method we also have another method that is double underscore and then Str Str so as you can see apart from this we have many other functions funs that can be used when we provide the double underscore so vs code is suggesting us the entire list of functions which we can use in our python code so over here we are going to use this s Str and then we are going to have our custom code inside this s Str so what we are going to do is we are simply going to print the values of this X and Y so how do we do that we are going to use the formatting part and then inside this we are going to call the cell followed by Dot and then we have X and then again we have called over here and then again we call the self do y so over here we are simply printing the X and Y values which are separated by the comma over here and then guys let's say we want to override the plus operator over here so before having the function inside the class what I will do is first of all we will create the object so let's say P1 is the object name it is equal to point which is the class over here and what we do is we do 1A 2 that is X and Y values over here and then let's say we have another point that is P2 it is equal to point and then this time we are going to provide the X and Y coordinates as 2 and three over here and what we want to do is we want to print the sum of both these points that is P1 plus P2 so guys in this case we are using this plus operator and then these are the operators that is P1 and P2 so how do we have the custom implementation of this plus operator over here which we will call it as the operator overloading as well so as we have seen over here we have something called as double underscore and then add and then double underscore so this represents the plus operator as well so we can use this method inside the class in order to have our custom implementation of addition of both these points so over here we have DF followed by double underscore and then we have the add method over here followed by double underscore and then we have the open and close parenthesis and then inside the parenthesis we will provide the self as the parameter now guys apart from the self parameter basically when we do P1 + P2 it is simply P1 dot this particular function that is we are going to Define followed by this P2 which will be a parameter so we need to catch this as the second parameter over here so what we will do is after the cell we will have another parameter and we will name it as other over here so what we can do is over here we can create another variable that is X it is equal to self.x over here plus we need to use another parameter that is other which represents the other point that is P2 in this case so over here we will say other do X in this case and then the same way we are going to have another variable that is y it is equal to self doy plus other do y in this case and then guys what we have to do is simply we need to return the point of both these values that we have found that is X and Y so basically return point of X comma Y in this case so we have X comma y so guys this is the implementation of our addition operator we are doing the operator overloading in this case so basically P1 + P2 it is same as P1 followed by Dot and then the add function being called along with the parameter that is P2 so in this case this function will be called and it will return point of X comma Y and basically while returning this we are providing the print statement so behind the scenes this function will be called in order to print the statement so guys basically over here inside of the print statement we need to have the return statement over here so I'll just remove this part over here and we will say return followed by double codes and then inside this double clotes we will be using the formatting so let's say we have zero and then comma and then let's say we have one followed by Dot and then we have format over here and inside this format we need to provide the x and y Valu so self. X and then comma and then we have self.y in this case so basically this is the way in which we are going to print the the values that is of X and Y so guys let me just save this file now and try running this code so as you can see we are getting the coordinates as 3 and 5 this x and x values are getting added so 1 + 2 it is equal to 3 and then 2 + 3 it is equal to 5 so we are getting five over here so guys basically what we have done is if you see the main code over here we have just defined P1 and P2 which are simply the points and if we were not having this implementation inside the class that is the string and the addition part then we won't be able to add both these points directly because by default this plus operator can only handle numbers or strings Or List over here but in order to handle the custom classes we need to define the custom functions as well inside those classes and according to our requirement we can have the code inside those custom functions guys we can also change the formatting over here in order to change the formatting we can say that X it is equal to this particular thing and then after comma we can have y it is equal to self.y part over here so let me just save this file now and try running this code so as you can see we have change the formatting xit is equal to 3 and Y is equal to 5 so whatever format that you want to print in or whatever code you want to have inside this Str Str method you can have it accordingly based on your requirements so guys this is operator overloading for you with the same operator you can have multiple implementations and it can have different meanings as far as operant are concerned similarly we have other special functions and the other operator overloading functions as well as you can see we have this init which initializes the attributes of the object which we have already seen as far as class Constructors are concerned then we have Str Str which returns a string representation of the object that is what we have implemented over here it returns a string implementation of the object that is point x comma Y and then we also have Len which Returns the length of the object then add which adds the two objects so so over here we have implemented the add method which adds two objects over here which is P1 and P2 that is what we have achieved in this particular program apart from that we also have this call function which calls the objects of the class like a normal function guys apart from this we can also have other operator overloading functions as well for addition we have seen P1 + P2 which means P1 Dot and then underscore uncore add will be called in which case the parameter will be P2 similarly we can have the subtraction multiplication the power of two objects and then we can have division as well and then we can have flow Division and many other mathematical operations can be achieved by using the operator overloading just how we have done in this program overloading comparison operators in Python Programming so guys previously we have seen how we can overload the plus operator in the python so python also allows us to overload comparison operators as well such as less than or greater than or less than or equal to or else greater than or equal to and so on many other comparison operators are present in Python Programming which can be overloaded so for example as you can see we have the class that is person and then we have the Constructor which takes the parameter is the self and then name and age is taken so basically this name and age are being assigned to the name and age attributes of the class and then we have the overloading of the less than operator over here in this case so as you can see we have the function DF and Then followed by underscore uncore LT which refers to the less than sign over here and then double uncore once again and then it takes one object that is the self object over here it takes the other object that is the second object so what we can do is we can create the two objects over here that is P1 it is equal to person the name is allies and the age is 20 years old and then we have P2 that is another person the name is Bob and the person is 30 years old old so guys basically what we are doing is we are printing over here P1 less than P2 so we are checking whether P1 is less than P2 or not so what exactly will happen is instead of this less than the control flow will go over here to this particular function because we have provided the comparison operator overloading over here so the first object will be P1 in this case which will be assigned to self and the second object will be P2 over here which will be assigned to the other and self. H will be compared whether it is less than the other do age over here if it is yes then it will return true or else it will return false so guys let us implement this in our vs code over here so let's say we have the class person in this case and then what do we do is we Define The Constructor over here so DF keyword followed by the init function in this case so I'm going to implement the Constructor over here so what we will do is let's say we have self do name it is equal to the name will be taken as the parameter over here so let's say I provide name one and then age one over here so that we can identify them so name it is equal to name 1 and then we have self. AG it is equal to H 1 so the name and age will be coming as the parameters when we are going to initialize the object when we are creating the object of the person class and those name and age will be assigned to these variable names that is name and age and then guys what we will do is we will be doing the comparison operator overload loading so over here we are going to Define double underscore and then LT over here so which refers to the less than operat in this case and it is going to take two parameters one is the self parameter and then the other object so over here the second parameter is the other object and this thing is simply going to return the comparison of the two ages over here so this will be return self do AG is it less than the other do age so over here we are simply going to to compare whether self. AG is less than other do age or not if yes then return true or else return false so guys what we will do is we will create two person objects over here so let's say P1 it is equal to the person and let's say the first person name is Tom and Tom is 10 years old in this case and then let's say we have P2 it is equal to person and let's say the name of this person is Harry and Harry is 20 years old so guys what we will do is simply we need to print two statements comparing the ages of both the person so we will say P1 is it less than P2 then it will return true or false so is P1 less than P2 yes in this case because p1's age is 10 and p2's age is 20 and that is what this particular function will be implementing and returning the result and over here again we will say print P2 is less than P1 this time so P2 less than P1 this time so is P2 less than P1 so so what will happen is is 20 less than 10 no in this case so this should return false so let me just save this file now and try running this code so as you can see for first statement we are getting it as true and for second statement we are getting the result as false to make it more understandable what we can do is we can provide the statements over here is Tom younger than AR question mark and then we can have a comma over here and similarly we can have such statement in the second PR statement as well so over here we will say is Harry younger than Tom in this case so we have is Harry younger than Tom so let me just save this file now and try running this code so as you can see is Tom younger than Harry so Tom age is 10 and Harry's age is 20 right now so it is returning true that Tom is younger than Harry and second time is Harry younger than Tom Harry is 20 years old Tom is 10 years old so it is saying is Harry younger than than Tom no in this case so that is why we are getting the result as false what if we have another person with the same name that is Tom who is 30 years old so over here we will update the age of Tom that is another person who is 30 years old and we are comparing it with the same person that is Harry which is 20 years old so let me just save this file now and try running this code this time is Tom younger than Harry no in this case because Tom is Elder than Harry right now so we are getting false and in the second statement is Harry younger than Tom yes because 20 is less than 30 this time so we are getting true in this case so guys this is the way that we can implement the comparison operator overloading as far as Python Programming is concerned iterator in Python Programming so guys iterators are methods that iterate collections like list tles Etc using an iterator method we can Loop through an object and return its elements so we have already seen how we can iterate through the list and tles as well using the fall Loop but we can also Al have our custom iterators in order to iterate through the different elements inside the list so that we are going to check with the help of examples as well now we can use the iter method which represents the iterator to initialize the iterator and the next method to go through the iterator so guys let us check this with the help of example now over here in the VSS code so what we will do is let's say we have the list that is named as list one and then let's say we have the list of numbers in this case so we have 1 2 3 4 and then 5 so guys how do we get the iterator to this particular list over here so what we can do is simply we can have the name of the variable that is iterator it is equal to and then we can use the function name that is i r this is one of the functions that will return us the iterator over here and inside this function it will take one parameter which will be the list one in this case so basically the list or tle it goes as the parameter to this function that is I t r and it Returns the iterator over here and then we can use this iterator in order to get the elements of this list so what we will do is let's say we have the print function and then we can use the next function in this case inside the print so as you can see vs code is suggesting us this next function over here which will take the iterator as the parameter so we provide the iterator as the parameter so what will happen is this thing will point to the first element to the list over here so let me just save this file now and try running this code so as you can see we are getting one in this case now what we can do is again we can have another print statement in order to print the second element so over here I have just copied and pasted this line of code and then let me just save this file now on the next line we should get the second element that is two so as you can see we are getting one and then we are also getting two over here so similarly we can get all the elements in this case by using the it method we have got the iterator over here and by using this iterator as the parameter to the next function we have got the element itself so guys this is the very basic way in which we can use the iterator along with the next function now guys let us check this with the help of the Fall Loop working of fall loop with the iterators so what we can do is instead of printing these statements multiple times we can simply use this iterator inside the fall Loop so over here we can have for and then element in and then we can provide this iterator so this iterator is having all the elements right now and we are going to iterate through this iterator and one at a time all the elements will be assigned to this element variable and inside this fall Loop we can simply provide the element over here so we can provide element and in order to have all the elements on the same line when we are providing the print statement we can have the end parameter over here which is Slash and by default which means a control flow goes to the new line so in this case we want it to be on on the same line so we will separate all the elements by using one space character over here so let me just save this file now and try running this code so as you can see we are getting 1 2 3 4 5 on the same line we can also separate them by using a comma and a space character so I've just provided comma in the end parameter I'll just save this file now and try running this code so as you can see we are getting 1 2 3 4 5 separated by commas so guys this is the way that we can use the fall Loop along with the iterator in order to go through all the elements inside the list we can also do this directly by using the list one as well so when we provide list one which is containing all the elements over here so instead of having the iterator as well we can use the list one so let me just save this file now and try running this code so the same output will be displayed that is all the elements of the list now guys where this iterator becomes important is whenever we are creating the custom classes and we want to iterate through the custom iterator that we want to create so guys let us check it with with the help of example now so guys what are the important points while building the custom iterators so building an iterator from scratch is easy in Python we just have to implement the double uncore iter followed by double uncore method so this is one of the custom methods that we have to implement inside the class along with this we also have to implement the double underscore next Double uncore method over here inside the same class so these are the two methods that are important which needs to be implemented inside the class while building the custom iterators so this it method it Returns the iterator object itself if required some initialization can be performed in this method and the second method that is the next method over here it must return the next item in the sequence on reaching the end and in subsequent calls it must raise stop iteration so guys let us check this with the help of examples as well so over here what we will do is we will implement the power of two class over here which means we are going to find the results of the power of the number that is two so we are going to have the class which is going to be named as power two in this case and what we will do is we will have the Constructor over here so we have the init method in this case and init method it will take the maximum number up to which we need to find the Power of Two over here so basically apart from self we will have the max value as well so over here we will say self do Max it is equal to Max so while creating the object of this class we will be providing the max number up to which we need to find the Power of Two And then guys as we have seen in order to build the custom iterator we need to have the two functions so first of all we will have the iter function over here so we have iter function and Then followed by open and close parenthesis this will again take the parameter as self and what we will do is the initial value that is self do n so we have the variable that is n which is equal to Zer right now so we will find the powers of two starting from zero up to the number that is Max that we have provided while creating the object of the power two class over here so what we are going to do is self. and it is equal to zero and this thing is going to return a iterator which is going to be the self itself so over here we are returning the iterator that is the self itself and then guys we are going to also Define the next method over here so we have DF followed by double underscore and then we have the next method followed by double underscore and then again we are going to have the self as the parameter so over here what we will do is first of all we need to check whether the value of n is it less than or equal to the value of Max that we have provided so over here we will provide the if condition and inside the parenthesis we will say whether self do n is this less than or equal to Max that is self do Max Max in this case so we have self. Max and if yes then we are going to have the result what is the result it is equal to 2 ra to the power of n so it will be 2 * by multili by double times and then self do n in this case so over here we are getting the current value of n we are checking whether it is less than or equal to Max and if yes then we are finding 2 ra to that number that is n over here and the result will be stored in this result variable next what we are going to do is we are going to increment the value of n by 1 so it is going to be self do n + = 1 so we are incrementing the value of n by 1 so that the next time the control flow comes over here it will find that the value of n is incremented by one and then after this we simply have to return result in this case for which we have already found the result over here so guys this is the case when n is less than or equal to Max but what if the N is incremented in such a way that it becomes becomes greater than the maximum number which we have already provided for which we don't want to find the Power of Two so over here inside the lse part what we will do is we will raise the stop iteration so over here we can simply provide raise stop iteration so we have this exception that is raise stop iteration over here which is one of the builin exceptions now guys what we can do is simply we can create the object of this power two class over here that we have created so what we can do is let's say we provide the object that is I it is equal to power two over here and the maximum number for which we want to find the Power of Two is three right now so what this will do is when we create this object I the control flow it sees that for this particular power two class we have a Constructor that is in it and it will take the number that is Max so over here we have provided the max as three so self. max that is this particular variable will have the value S3 over here and then guys in order to find the iterator we will name it as the iterator variable it is equal to i r this method and then inside this method we need to pass this object that is I so what exactly will happen is the control flow will see that for this particular class we have the user defined it method so it will come over here and initially the value of n will be set as zero in this case so we have zero to start with and at the end we have Max that is the value of three and then guys what we have to do is we have to iterate through this iterator over here so we already have the iterator next time when we call this next method the control flow comes over here it will see that the value of n it is zero right now and it is less than or equal to Max so 2 to 0 the first result it will be equal to 1 and that same result will be passed over here as the return statement and before that n will be incremented and the updated value of n will be one in this case so over here we can simply provide the print statement and we can say next over here and inside the parenthesis we will have the iterator as the parameter so guys let me just save this file now and try running this code so as you can see we are getting the result as one and next time what we will do is again we will copy paste these lines of code three times over here so let me just save this file now and try running this code as you can see we are getting 1 2 4 and 8 which is equal to 2 to 0 is 1 2 to 1 is 2 2 2 is 4 2 to 3 is 8 and next time when we print the value once again over here so what will happen is 2 to 4 will be found and in this case since n value is not less than or equal to Max so raise stop iteration will be called over here and we will get some other statement being printed on the terminal so let me just save this file now and try running this code so as you can see we have got 1 2 4 and 8 and after this as you can see Ray stop iteration was called while calling the next function over here so guys this is the way that we can build our custom iterators whenever we are dealing with our custom class we just need to Define two methods over here that is it which stands for iterator which will return an iterator over here and then we also have to define the next method which will return us the next element to be used as far as our requirements are concerned in the Python program so guys you can have any logic over here this is just an example that we have taken that is in order to find the Power of Two you can have any logic based on your requirements and raise the exception in any manner that you want based on your requirements so we have come to the conclusion of the Python programming language hopefully you have got enough knowledge about the Python language and you should practice on your own so that on different inputs you get different outputs and that is how you are going to learn more about the Python language so that's it in this video I'll see you in the next video till then stay tuned
