With timestamps:

00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to learn
00:03 - about inheritance in Python Programming
00:05 - so guys inheritance is a way of creating
00:08 - a new class for using details of an
00:11 - existing class so this we are going to
00:13 - check with the help of examples as well
00:14 - the newly formed class is a derived
00:17 - class which is also called as a child
00:19 - class and similarly the existing class
00:21 - is a base class or the parent class so
00:24 - guys what we are doing over here is we
00:26 - are already creating a parent class that
00:29 - is also called as a base class over here
00:31 - and then we also create a child class
00:33 - for which the attributes are derived
00:36 - from the parent class from here and this
00:38 - is what is called as The Inheritance now
00:40 - what will be inherited all the
00:42 - attributes provided that they are public
00:44 - along with the methods will be inherited
00:46 - by the child class so guys let us check
00:48 - python inheritance with the help of
00:50 - example now over here so let us switch
00:52 - to the vs code first of all we will
00:54 - create the parent class so let us say we
00:56 - have the class that is called as animal
00:58 - over here and inside the this animal
01:00 - class we will Define two functions that
01:02 - is eat and sleep so we will have def
01:05 - keyword followed by eat that is function
01:08 - 1 and then inside the parenthesis we are
01:11 - going to have the parameter that is self
01:12 - always remember guys whenever we are
01:15 - calling the function inside the class it
01:17 - is going to take a single parameter
01:19 - which is going to be the object by
01:21 - default so we need to catch that object
01:23 - with any name as a parameter over here
01:25 - so we have given the name of this
01:27 - parameter as self over here so that we
01:29 - can identify that this is the object and
01:31 - then we can use this object as well in
01:33 - order to access its attributes and
01:36 - inside this it function we are going to
01:38 - have a simple print statement and we
01:40 - will say I can eat so guys this is a
01:43 - statement that is going to be printed
01:44 - when we call the eat function using the
01:47 - animal object and then similarly we will
01:49 - have the Sleep Method as well so we have
01:51 - the EF keyword followed by Sleep Method
01:54 - and then again we will have the
01:56 - parameter as the self which will be
01:57 - passed by default and then inside the us
02:00 - again we are going to have the print
02:01 - statement and we can say I can sleep so
02:05 - Guys these are two methods or functions
02:07 - that we have defined inside the parent
02:09 - class that is the animal class now guys
02:11 - how do we inherit these methods to
02:13 - another class so let's say we have
02:15 - another class over here which will be a
02:17 - child class of the animal class so we
02:20 - are going to have another class and
02:22 - let's say the name of the class is dog
02:23 - over here and then in order to have its
02:26 - attributes and functions of the
02:28 - superclass that is the animal after this
02:30 - name of the class that is dog we have to
02:33 - provide open and close parenthesis and
02:36 - inside this parenthesis we have to
02:37 - provide the name of the superclass that
02:39 - is animal in this case so this
02:42 - particular class that is animal we want
02:44 - to inherit its attributes and functions
02:46 - inside the child class that is dog so
02:49 - this is the way that we inherit the
02:51 - super class and now we can have a colon
02:53 - over here and then we can have the
02:55 - attributes and the functions of this
02:57 - class that is dog class separately so
02:59 - over here we are going to have the def
03:01 - keyword followed by let's say I am
03:04 - simply going to have the display method
03:06 - over here and it is going to take one
03:08 - parameter that is self and then we are
03:10 - simply going to print that we are inside
03:14 - doc class
03:15 - so this particular statement will be
03:18 - printed whenever we are going to call
03:19 - this display method over here so guys
03:21 - this is the way that python returns
03:23 - Works what I will do is I'll just zoom
03:25 - out little bit so that you can see the
03:27 - entire code at once so over here we have
03:29 - created the superclass that is the
03:31 - animal class and then we are creating
03:33 - another class that is called as the
03:35 - child class and after the name of the
03:37 - child class we are providing the name of
03:39 - the superclass over here that is the
03:41 - parent class inside the open and close
03:43 - parenthesis and what this will do is the
03:46 - eat and sleep methods will be now
03:48 - available inside the doc class as well
03:51 - so guys why this is important so let us
03:53 - come out of this class now and what we
03:55 - will do is let us create the object of
03:58 - this class that is the dog class so what
04:00 - I will do over here is we will create
04:02 - dog one that is the object of the dog
04:04 - class followed by equal to and then the
04:07 - name of the class that is dog over here
04:09 - so we have created one object of the dog
04:12 - class now guys ideally we have seen that
04:14 - we can call the display a method which
04:16 - belongs to the dog class so we can do
04:18 - that over here so I am going to call the
04:21 - dog one object followed by Dot and then
04:24 - we have the display method so after this
04:26 - we are going to have the open and close
04:28 - Parent Access let me just save this file
04:30 - first and try running this code now so
04:32 - as you can see we are getting we are
04:34 - inside talk class which means this
04:36 - statement is getting printed now guys do
04:38 - we have any other method apart from this
04:41 - display method yes we do have and those
04:43 - are eat and sleep methods why so because
04:46 - we have inherited the methods from the
04:48 - animal class by using the python
04:50 - inheritance so basically we can use this
04:52 - object name that is dog one in order to
04:55 - call eat and sleep methods over here so
04:58 - if we call both the methods so I'll say
05:00 - dog one followed by Dot and then as you
05:03 - can see PS code is suggesting us this
05:05 - eat method as well so we have 8 followed
05:08 - by open and close parenthesis and then
05:10 - again we will call the dog one object
05:12 - followed by Dot and then Sleep Method is
05:15 - also being suggested by vs code so we
05:17 - are going to call both the methods over
05:18 - here so let me just save this file now
05:20 - and try running this code so as you can
05:23 - see we are getting all the three
05:24 - statements that is we are inside a doc
05:26 - class I can eat and I can sleep which
05:29 - are the statements that are being
05:31 - printed by using these methods
05:33 - respectively so guys this is the power
05:35 - of python inheritance we can use the
05:37 - different attributes and the methods
05:39 - that were defined in a super class
05:41 - inside the subclass by using the object
05:44 - of the child class over here which is
05:46 - also called as the subclass over here
05:48 - guys it is very important to note that
05:50 - whenever we are defining the methods
05:52 - inside the class we need to provide one
05:55 - parameter over here which is going to be
05:56 - the object that will be passed so behind
05:59 - the scenes what is happening over here
06:01 - is when we call dog1 dot display over
06:03 - here the top one object is being passed
06:06 - with this display method even though we
06:08 - are not providing any parameter over
06:10 - here but behind the scenes the object is
06:13 - being passed over here and it needs to
06:15 - be caught by this particular method what
06:17 - happens if we don't provide this
06:18 - parameter let us check this so I'll just
06:20 - remove the self keyword over here and
06:22 - I'll just save this file now over here
06:24 - we are not receiving any parameter as we
06:27 - can see so let me just run this code now
06:29 - so as you can see type
06:31 - error.display takes zero positional
06:33 - arguments but one was given so basically
06:36 - behind the scenes this dog one object is
06:38 - being passed and we need to have a
06:40 - parameter over here while defining the
06:43 - function and that is the reason why we
06:45 - had given this self parameter name in
06:47 - order to identify that this is the
06:49 - object of this particular class that is
06:51 - Doc so let me just save this file now
06:53 - and try running this code once again so
06:55 - as you can see there are no more errors
06:56 - that are getting displayed and all the
06:58 - three statements are getting displayed
06:59 - over here now guys what are the uses of
07:01 - inheritance so as you can see since a
07:04 - child class can inherit all the
07:05 - functionalities of the parents class
07:07 - this allows code reusability so as you
07:10 - can see over here we need not have to
07:12 - provide the eat and sleep methods once
07:15 - again inside inside the dog class and we
07:17 - were able to access both these methods
07:19 - by using the object of the dog class
07:21 - without actually providing the
07:23 - definition of those methods over here
07:24 - once a functionality is developed you
07:27 - can simply inherit it no need to
07:29 - reinvent the wheel this allows for
07:31 - cleaner code and easier to maintain now
07:33 - since you can also add your own
07:35 - functionalities in the child class you
07:37 - can inherit only the useful
07:38 - functionalities and Define other
07:40 - required features so guys based on your
07:43 - requirement it depends on you which
07:45 - class you want to inherit and create the
07:47 - child classes and the panel classes over
07:49 - here based on your project requirements
07:51 - so guys practice on your own so that on
07:52 - different inputs you get different
07:54 - outputs please make sure that you like
07:56 - this video so that it reaches to more
07:57 - people and subscribe to the channel so
07:59 - that you get the notifications on
08:01 - upcoming videos as well the next video
08:03 - that we are going to talk about is a
08:05 - Constructor in Python Programming so
08:07 - stay tuned

Cleaned transcript:

hey what's up guys welcome to another video in which we are going to learn about inheritance in Python Programming so guys inheritance is a way of creating a new class for using details of an existing class so this we are going to check with the help of examples as well the newly formed class is a derived class which is also called as a child class and similarly the existing class is a base class or the parent class so guys what we are doing over here is we are already creating a parent class that is also called as a base class over here and then we also create a child class for which the attributes are derived from the parent class from here and this is what is called as The Inheritance now what will be inherited all the attributes provided that they are public along with the methods will be inherited by the child class so guys let us check python inheritance with the help of example now over here so let us switch to the vs code first of all we will create the parent class so let us say we have the class that is called as animal over here and inside the this animal class we will Define two functions that is eat and sleep so we will have def keyword followed by eat that is function 1 and then inside the parenthesis we are going to have the parameter that is self always remember guys whenever we are calling the function inside the class it is going to take a single parameter which is going to be the object by default so we need to catch that object with any name as a parameter over here so we have given the name of this parameter as self over here so that we can identify that this is the object and then we can use this object as well in order to access its attributes and inside this it function we are going to have a simple print statement and we will say I can eat so guys this is a statement that is going to be printed when we call the eat function using the animal object and then similarly we will have the Sleep Method as well so we have the EF keyword followed by Sleep Method and then again we will have the parameter as the self which will be passed by default and then inside the us again we are going to have the print statement and we can say I can sleep so Guys these are two methods or functions that we have defined inside the parent class that is the animal class now guys how do we inherit these methods to another class so let's say we have another class over here which will be a child class of the animal class so we are going to have another class and let's say the name of the class is dog over here and then in order to have its attributes and functions of the superclass that is the animal after this name of the class that is dog we have to provide open and close parenthesis and inside this parenthesis we have to provide the name of the superclass that is animal in this case so this particular class that is animal we want to inherit its attributes and functions inside the child class that is dog so this is the way that we inherit the super class and now we can have a colon over here and then we can have the attributes and the functions of this class that is dog class separately so over here we are going to have the def keyword followed by let's say I am simply going to have the display method over here and it is going to take one parameter that is self and then we are simply going to print that we are inside doc class so this particular statement will be printed whenever we are going to call this display method over here so guys this is the way that python returns Works what I will do is I'll just zoom out little bit so that you can see the entire code at once so over here we have created the superclass that is the animal class and then we are creating another class that is called as the child class and after the name of the child class we are providing the name of the superclass over here that is the parent class inside the open and close parenthesis and what this will do is the eat and sleep methods will be now available inside the doc class as well so guys why this is important so let us come out of this class now and what we will do is let us create the object of this class that is the dog class so what I will do over here is we will create dog one that is the object of the dog class followed by equal to and then the name of the class that is dog over here so we have created one object of the dog class now guys ideally we have seen that we can call the display a method which belongs to the dog class so we can do that over here so I am going to call the dog one object followed by Dot and then we have the display method so after this we are going to have the open and close Parent Access let me just save this file first and try running this code now so as you can see we are getting we are inside talk class which means this statement is getting printed now guys do we have any other method apart from this display method yes we do have and those are eat and sleep methods why so because we have inherited the methods from the animal class by using the python inheritance so basically we can use this object name that is dog one in order to call eat and sleep methods over here so if we call both the methods so I'll say dog one followed by Dot and then as you can see PS code is suggesting us this eat method as well so we have 8 followed by open and close parenthesis and then again we will call the dog one object followed by Dot and then Sleep Method is also being suggested by vs code so we are going to call both the methods over here so let me just save this file now and try running this code so as you can see we are getting all the three statements that is we are inside a doc class I can eat and I can sleep which are the statements that are being printed by using these methods respectively so guys this is the power of python inheritance we can use the different attributes and the methods that were defined in a super class inside the subclass by using the object of the child class over here which is also called as the subclass over here guys it is very important to note that whenever we are defining the methods inside the class we need to provide one parameter over here which is going to be the object that will be passed so behind the scenes what is happening over here is when we call dog1 dot display over here the top one object is being passed with this display method even though we are not providing any parameter over here but behind the scenes the object is being passed over here and it needs to be caught by this particular method what happens if we don't provide this parameter let us check this so I'll just remove the self keyword over here and I'll just save this file now over here we are not receiving any parameter as we can see so let me just run this code now so as you can see type error.display takes zero positional arguments but one was given so basically behind the scenes this dog one object is being passed and we need to have a parameter over here while defining the function and that is the reason why we had given this self parameter name in order to identify that this is the object of this particular class that is Doc so let me just save this file now and try running this code once again so as you can see there are no more errors that are getting displayed and all the three statements are getting displayed over here now guys what are the uses of inheritance so as you can see since a child class can inherit all the functionalities of the parents class this allows code reusability so as you can see over here we need not have to provide the eat and sleep methods once again inside inside the dog class and we were able to access both these methods by using the object of the dog class without actually providing the definition of those methods over here once a functionality is developed you can simply inherit it no need to reinvent the wheel this allows for cleaner code and easier to maintain now since you can also add your own functionalities in the child class you can inherit only the useful functionalities and Define other required features so guys based on your requirement it depends on you which class you want to inherit and create the child classes and the panel classes over here based on your project requirements so guys practice on your own so that on different inputs you get different outputs please make sure that you like this video so that it reaches to more people and subscribe to the channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is a Constructor in Python Programming so stay tuned
