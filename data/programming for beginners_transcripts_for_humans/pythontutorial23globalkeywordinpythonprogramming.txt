With timestamps:

00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to learn
00:03 - about global keyword in Python
00:05 - Programming so guys in Python the global
00:08 - keyword allows us to modify the variable
00:10 - outside of the current scope so it is
00:13 - used to create a global variable and
00:16 - make changes to the variable in a local
00:18 - context so guys let us check this with
00:20 - the help of example now over here so
00:22 - let's say we have a global variable that
00:23 - is a and the value is equal to 10. so
00:26 - let's say we have a function over here
00:27 - and the function name is ADD so what we
00:30 - will do is so let's say we have a
00:32 - variable P for which the value is equal
00:33 - to 20 and we want to print the sum of
00:36 - these two numbers that is a and b a is
00:38 - the global variable and B is the local
00:40 - variable for this function that is ADD
00:43 - so we can simply print a plus b over
00:45 - here and then what we can do is we can
00:47 - simply call this function that is ADD
00:49 - followed by open and close parenthesis
00:51 - so let me just save this file and try
00:53 - running this code now so as you can see
00:55 - 30 is getting displayed we are using the
00:57 - global variable we are using the local
00:59 - variable and we are adding both the
01:01 - variables over here now guys let us say
01:03 - I want to change the value of a to some
01:06 - other value so what I will do is let's
01:08 - say I come inside this function and I do
01:10 - a it is equal to 30. so what we have
01:13 - done over here is This Global variable
01:15 - that is a for which the value was 10 I
01:17 - have just updated the value to 30 over
01:20 - here and B value will keep it same that
01:22 - is 20 and I want to print the sum of
01:24 - these two numbers I have called this
01:26 - function that is ADD so let me just save
01:28 - this file and try running this code now
01:30 - so as you can see 50 is getting
01:32 - displayed so we have assigned some other
01:34 - value to a that is 30 over here now guys
01:37 - let us say what we do is I just
01:39 - increment the value of a by 10 so over
01:41 - here a it is equal to a plus 10 over
01:44 - here so this expression we are using so
01:47 - what happens in this case let me just
01:48 - save this file and try running this code
01:50 - now so as you can see we are getting
01:52 - some error over here Unbound local error
01:55 - cannot access local variable a where it
01:58 - is not associated with a value so
02:01 - basically what is happening over here is
02:03 - local preference is given first so over
02:06 - here a is equal to a plus 10 it is
02:08 - trying to find out the expression that
02:11 - is a plus 10 but it doesn't have any
02:13 - local instance of the variable a and
02:16 - that is why we are getting this error
02:18 - that cannot access local variable a
02:20 - where it is not associated with the
02:23 - value so what we can do in this case is
02:25 - we can tell the python interpreter that
02:27 - we already have defined the variable a
02:30 - for which the value is 10 already and
02:32 - that 10 value is supposed to be taken
02:35 - when we are Computing this expression
02:37 - that is a plus 10 so how do we do that
02:39 - before this line of code over here we
02:42 - use the global keyword So This Global
02:44 - keyword followed by the variable a so
02:47 - this tells the python interpreter that
02:49 - the variable a needs to be treated as a
02:52 - global variable and this time a plus 10
02:54 - in this case the A's value will be taken
02:57 - as 10 and 10 plus 10 which is 20 will be
02:59 - as assigned to this a variable so let me
03:02 - just save this file now and try running
03:03 - this code so as you can see we are not
03:05 - getting any error now and we are getting
03:07 - the sum of two numbers that is 40 over
03:09 - here how because the a value is 10 and
03:12 - 10 plus 10 is equal to 20 so 20 is being
03:14 - assigned to this variable that is A and
03:16 - B's value is also 20 so 20 plus 20 will
03:19 - become 40 over here which is getting
03:21 - printed so guys this is the way that we
03:22 - can use the global keyword in order to
03:25 - tell the python interpreter that this
03:27 - variable needs to be treated as a global
03:29 - variable for which we have already
03:31 - defined it over here as the global scope
03:33 - now guys there is another variation over
03:35 - here that is global keyword in nested
03:37 - functions so we already have a example
03:39 - over here so I'll just copy this example
03:42 - and paste this in our vs code editor so
03:44 - we'll copy this and paste this over here
03:46 - so what exactly we are doing over here
03:48 - is we are having the outer function for
03:50 - which the number is equal to 20 and then
03:53 - we have a nested function that is the
03:55 - inner function over here and we are
03:56 - saying that a global keyword is there
03:58 - for which the variable is num and then
04:01 - num it is equal to 25 now this means
04:04 - that we are declaring the num variable
04:06 - as a global variable over here for which
04:09 - the value will be 25 right now so what
04:11 - is happening is print before calling in
04:13 - a function this num value will get
04:16 - printed but as I have told you the local
04:18 - preferences first so what should happen
04:20 - so we will check which value will get
04:22 - printed over here before calling the
04:24 - inner function and then the inner
04:26 - function will be called during which the
04:28 - global num for which num is equal to 25
04:30 - will get assigned over here and then
04:32 - print after calling in a function and
04:35 - then we will print the num value once
04:37 - again and then after this we are calling
04:39 - the outer function so that all these
04:41 - print statements can get executed and
04:43 - then after that outside both function we
04:45 - will again print the value of this num
04:47 - variable so let me just save this file
04:49 - and try running this code now so as you
04:51 - can see before calling in a function so
04:53 - where we are over here that is before
04:55 - calling in a function the value of num
04:58 - it is equal to 20 in this case is how so
05:01 - basically this num value that is 20 it
05:04 - was assigned over here in the outer
05:05 - function and then the control statement
05:07 - went over here before going inside the
05:10 - inner function because it was not called
05:12 - yet so before calling in a function num
05:14 - value is 20 that is what we had assigned
05:16 - over here now inner function was called
05:18 - and then we have after calling in a
05:20 - function the value of this variable was
05:22 - printed once again so after calling in a
05:25 - function it is again 20 why so because
05:28 - guys over here we have provided the
05:30 - global keyword so this means that we are
05:34 - creating another variable for which the
05:36 - scope is global and not local in this
05:38 - case and then the num variable over here
05:40 - for which the value is 25 this num
05:43 - variable is created with the global
05:45 - scope and not the local scope so
05:47 - basically right now as far as local
05:49 - scope is concerned within this outer
05:51 - function it is still 20 over here and
05:54 - that is what we are getting the value of
05:56 - num variable as 20 even after calling
05:59 - the inner function and then what happens
06:01 - is outside the outer function when we
06:03 - come once again so outside both the
06:05 - function now the num value will be what
06:08 - 25 that's because we had defined the
06:10 - global variable over here for which the
06:12 - num value was taken as 25 and that is
06:15 - what we are getting outside both
06:17 - function it is equal to 25 so guys it is
06:19 - little bit complex to understand for the
06:21 - very first time but with practice you
06:23 - will understand what are the different
06:24 - concepts as far as this Global keyword
06:27 - is concerned and where to use them so
06:29 - guys practice on your own so that on
06:30 - different inputs you get different
06:32 - output please make sure that you like
06:34 - this video so that it reaches to more
06:35 - people and subscribe to this channel so
06:37 - that you get the notifications on
06:39 - upcoming videos as well the next video
06:40 - that we are going to talk about is
06:42 - modules in Python Programming so stay
06:45 - tuned

Cleaned transcript:

hey what's up guys welcome to another video in which we are going to learn about global keyword in Python Programming so guys in Python the global keyword allows us to modify the variable outside of the current scope so it is used to create a global variable and make changes to the variable in a local context so guys let us check this with the help of example now over here so let's say we have a global variable that is a and the value is equal to 10. so let's say we have a function over here and the function name is ADD so what we will do is so let's say we have a variable P for which the value is equal to 20 and we want to print the sum of these two numbers that is a and b a is the global variable and B is the local variable for this function that is ADD so we can simply print a plus b over here and then what we can do is we can simply call this function that is ADD followed by open and close parenthesis so let me just save this file and try running this code now so as you can see 30 is getting displayed we are using the global variable we are using the local variable and we are adding both the variables over here now guys let us say I want to change the value of a to some other value so what I will do is let's say I come inside this function and I do a it is equal to 30. so what we have done over here is This Global variable that is a for which the value was 10 I have just updated the value to 30 over here and B value will keep it same that is 20 and I want to print the sum of these two numbers I have called this function that is ADD so let me just save this file and try running this code now so as you can see 50 is getting displayed so we have assigned some other value to a that is 30 over here now guys let us say what we do is I just increment the value of a by 10 so over here a it is equal to a plus 10 over here so this expression we are using so what happens in this case let me just save this file and try running this code now so as you can see we are getting some error over here Unbound local error cannot access local variable a where it is not associated with a value so basically what is happening over here is local preference is given first so over here a is equal to a plus 10 it is trying to find out the expression that is a plus 10 but it doesn't have any local instance of the variable a and that is why we are getting this error that cannot access local variable a where it is not associated with the value so what we can do in this case is we can tell the python interpreter that we already have defined the variable a for which the value is 10 already and that 10 value is supposed to be taken when we are Computing this expression that is a plus 10 so how do we do that before this line of code over here we use the global keyword So This Global keyword followed by the variable a so this tells the python interpreter that the variable a needs to be treated as a global variable and this time a plus 10 in this case the A's value will be taken as 10 and 10 plus 10 which is 20 will be as assigned to this a variable so let me just save this file now and try running this code so as you can see we are not getting any error now and we are getting the sum of two numbers that is 40 over here how because the a value is 10 and 10 plus 10 is equal to 20 so 20 is being assigned to this variable that is A and B's value is also 20 so 20 plus 20 will become 40 over here which is getting printed so guys this is the way that we can use the global keyword in order to tell the python interpreter that this variable needs to be treated as a global variable for which we have already defined it over here as the global scope now guys there is another variation over here that is global keyword in nested functions so we already have a example over here so I'll just copy this example and paste this in our vs code editor so we'll copy this and paste this over here so what exactly we are doing over here is we are having the outer function for which the number is equal to 20 and then we have a nested function that is the inner function over here and we are saying that a global keyword is there for which the variable is num and then num it is equal to 25 now this means that we are declaring the num variable as a global variable over here for which the value will be 25 right now so what is happening is print before calling in a function this num value will get printed but as I have told you the local preferences first so what should happen so we will check which value will get printed over here before calling the inner function and then the inner function will be called during which the global num for which num is equal to 25 will get assigned over here and then print after calling in a function and then we will print the num value once again and then after this we are calling the outer function so that all these print statements can get executed and then after that outside both function we will again print the value of this num variable so let me just save this file and try running this code now so as you can see before calling in a function so where we are over here that is before calling in a function the value of num it is equal to 20 in this case is how so basically this num value that is 20 it was assigned over here in the outer function and then the control statement went over here before going inside the inner function because it was not called yet so before calling in a function num value is 20 that is what we had assigned over here now inner function was called and then we have after calling in a function the value of this variable was printed once again so after calling in a function it is again 20 why so because guys over here we have provided the global keyword so this means that we are creating another variable for which the scope is global and not local in this case and then the num variable over here for which the value is 25 this num variable is created with the global scope and not the local scope so basically right now as far as local scope is concerned within this outer function it is still 20 over here and that is what we are getting the value of num variable as 20 even after calling the inner function and then what happens is outside the outer function when we come once again so outside both the function now the num value will be what 25 that's because we had defined the global variable over here for which the num value was taken as 25 and that is what we are getting outside both function it is equal to 25 so guys it is little bit complex to understand for the very first time but with practice you will understand what are the different concepts as far as this Global keyword is concerned and where to use them so guys practice on your own so that on different inputs you get different output please make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well the next video that we are going to talk about is modules in Python Programming so stay tuned
