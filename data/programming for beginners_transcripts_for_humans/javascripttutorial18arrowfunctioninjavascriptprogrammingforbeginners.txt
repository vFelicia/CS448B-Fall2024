With timestamps:

00:00 - so now we will see Arrow functions in
00:02 - JavaScript so guys basically these Arrow
00:04 - functions allow us to write the shorter
00:07 - function syntax so previously we had
00:09 - seen how we can write the functions and
00:11 - reuse functions in JavaScript but we can
00:13 - write shorter functions as well with the
00:16 - help of the arrow functions over here so
00:18 - as you can see this is the syntax and
00:19 - the example we have the let keyword and
00:22 - Then followed by the variable name that
00:24 - is function every time we will be using
00:26 - the my function that is the variable
00:28 - name in order to call call the function
00:31 - so previously in the regular functions
00:33 - we had the function name that we can use
00:35 - in order to call that function but over
00:37 - here we will be using the my function or
00:40 - any other name that we provide to that
00:42 - particular function followed by the
00:44 - equal to operator and then we have the
00:46 - open and close parenthesis over here now
00:48 - these parameters are optional if you
00:50 - want to provide the parameters you can
00:52 - provide them and you can use the
00:54 - variable names over here as you can see
00:56 - this particular Arrow function is using
00:58 - the parameters in this case followed by
01:01 - the equal to operator and then greater
01:03 - than symbol so guys this particular
01:05 - expression is important in order to
01:07 - understand how Arrow function works so
01:09 - basically we have the open and close
01:11 - parenthesis and then we have the
01:13 - combination of equal to and then greater
01:15 - than symbol and then after this we can
01:18 - have the lines of code over here so guys
01:20 - let us check the examples of Arrow
01:22 - function in vs code in this case so
01:24 - first of all we will understand the
01:26 - regular functions so we can provide the
01:29 - function keyword followed by let's say
01:31 - we want to multiply two numbers over
01:33 - here so simply we provide the function
01:35 - name that is multiply and Then followed
01:37 - by the open and close parenthesis over
01:39 - here and simply what we can do is we had
01:42 - seen the return statement and we can
01:44 - return the multiplication of the two
01:46 - variables that are being passed so over
01:48 - here we can take the two variables as
01:50 - parameters A and B so over here we will
01:53 - return a multiplied by B in this case
01:55 - now guys what we can do is simply we can
01:57 - provide the variable that is result over
02:00 - here and then we can call this regular
02:02 - function by using the function name that
02:04 - is multiply and then inside the open and
02:06 - close parenthesis simply we can provide
02:09 - the two values let's say we provide the
02:10 - first value as 10 followed by comma and
02:13 - then we have another value that is two
02:15 - in this case so a will be equal to 10
02:18 - over here and this B will be equal to 2
02:21 - in this case that is getting passed over
02:23 - here to the function and a multili by B
02:25 - will be returned and it will be stored
02:27 - inside this particular result and simply
02:30 - we can have the console. log statement
02:32 - over here and then we can say the
02:35 - multiplication result is and then over
02:38 - here we will provide dollar symbol
02:40 - followed by open and close curly Braes
02:42 - and simply we will provide result over
02:44 - here which is the variable name so guys
02:46 - the multiplication result is result in
02:48 - this case which will be displayed based
02:50 - on the multiplication of these two
02:52 - numbers let me just save this file now
02:54 - and try running this code once again
02:56 - over here by using the node command in
02:58 - this case so as as you can see the
03:00 - multiplication result is 20 that's
03:02 - because 10 * 2 is equal to 20 in this
03:05 - case let us change the number to 10A 7
03:09 - in this case so probably the result will
03:10 - be 10 * 7 which is equal to 70 over here
03:14 - so as you can see the multiplication
03:16 - result is 70 so guys in this way the
03:18 - regular functions work now guys how do
03:20 - we convert this into an arrow function
03:22 - over here so simply we have to remove
03:25 - this function keyword and we will
03:26 - provide the let keyword over here and
03:29 - then we are using this particular
03:30 - variable name that is multiply and Then
03:33 - followed by equal to operator in this
03:35 - case and then we will keep this open and
03:38 - close parenthesis which is helping us in
03:40 - order to pass the parameters over here
03:42 - and in between the parenthesis and the
03:44 - curly braces over here simply we will
03:47 - use the combination of equal to operator
03:49 - and the greater than symbol in this case
03:52 - so guys basically we have equal to
03:53 - operator and then greater than symbol so
03:55 - as you can see we have just converted
03:57 - the regular function to an arrow
03:59 - function over here so simply we have to
04:02 - use the multiply function name and then
04:05 - provide the parameters as it is expected
04:07 - by the arrow function over here that is
04:09 - a and b after which we have the equal to
04:12 - and the greater than symbol over here
04:14 - and then we have the lines of code in
04:15 - this case now guys it is very important
04:17 - to note that if you are just having one
04:19 - line of code over here within the arrow
04:21 - function then this particular return
04:23 - statement is not required so first of
04:26 - all we will check it with the return
04:28 - statement and then we will test it
04:30 - without the return statement as well so
04:32 - let me just save this file now let me
04:34 - just change these numbers to 5 and seven
04:36 - in this case so basically 5 * 7 it is
04:39 - equal to 35 should be returned and
04:41 - printed over here on the console so let
04:44 - me just save this file now and try
04:45 - running this code once again over here
04:47 - on the terminal so as you can see the
04:49 - multiplication result is 35 so in this
04:52 - way we can use the arrow functions which
04:54 - you are going to use a lot of times when
04:56 - you are going to work with the complex
04:59 - projects as well as when you are going
05:00 - to use the other JavaScript libraries
05:03 - including react and react native so guys
05:05 - over here since we have only one
05:07 - statement to be executed that is a
05:09 - multiplied by B the return statement is
05:12 - not required so simply what we will do
05:15 - is I'll get this particular statement on
05:18 - one line over here so as you can see
05:20 - this is the shorter format of this
05:21 - particular function that is the arrow
05:23 - function over here and simply we can
05:25 - remove the return statement as well so
05:28 - since we are only having a multili by B
05:31 - to be returned so when you're using
05:33 - Arrow function with a single statement
05:35 - the return statement is not required so
05:38 - let us verify that as well simply I'm
05:40 - going to change the numbers now to 12
05:42 - and let's say three in this case so 12 *
05:45 - 3 must be 36 over here so let me just
05:48 - save this file now and try running this
05:50 - code once again over here on the
05:51 - terminal so as you can see the
05:52 - multiplication result is undefined so we
05:55 - are not getting any results maybe it is
05:57 - because we are using the open and close
05:59 - CL curly braces over here so simply I
06:01 - can remove these curly braces as well
06:03 - let us see whether now we get any
06:05 - results on the console code once again
06:07 - over here as you can see the
06:09 - multiplication result is 36 this time so
06:12 - guys basically this is more shorter
06:14 - format of the regular function that we
06:16 - had seen previously which was taking
06:18 - around three to four lines of code over
06:19 - here but simply we have reduced it to
06:22 - just one line of code without any return
06:24 - statement and without any curly braces
06:26 - as well so in this way the arrow
06:28 - function helps us in order to write the
06:30 - shorter format of any of the functions
06:33 - that we want to write so to summarize we
06:35 - have the let keyword followed by the
06:37 - name of the function that we can use
06:39 - based on our project requirements
06:41 - followed by the equal to operator and
06:43 - then we have the open and close
06:45 - parenthesis over here these parameters
06:47 - are optional if you're not using any of
06:49 - the parameters over here then either you
06:51 - have to return certain string or use the
06:54 - fixed values if you want to use any of
06:56 - the values in this case but if you're
06:58 - using the parameter over here those
07:00 - parameters can be used after this
07:02 - particular combination of the special
07:04 - characters that is equal to and the
07:06 - greater than symbol and then you can
07:09 - return certain statement over here it is
07:11 - important to note that if you are just
07:13 - having one statement in this case simply
07:15 - you can write that statement in this way
07:17 - without any return function but you can
07:19 - also have statements inside the body of
07:22 - the arrow function over here in which
07:24 - case you have to use the open and close
07:26 - curly braces in this case so basically
07:28 - we can also so do it in this way we
07:31 - provide a MTI B over here and then
07:33 - simply we provide another variable name
07:36 - so let's say we provide the variable
07:38 - name as a result in this case remember
07:40 - that this particular variable name that
07:41 - is a result it is having the local scope
07:44 - and it is within the function that is
07:45 - multiply over here it will not conflict
07:48 - with the result that we are using
07:50 - outside of this particular function and
07:52 - then guys what we will do is after
07:53 - storing the result in this result
07:55 - variable we can simply have the return
07:58 - statement and then we can say the result
08:00 - variable that is getting returned which
08:02 - will be printed over here let me just
08:04 - change these numbers to 12 and 5 and let
08:06 - me just save this file now and try
08:08 - running this code once again over here
08:10 - as you can see the multiplication result
08:12 - is 60 so in case if you are having
08:14 - multiple lines of code then you must
08:16 - Define it within the open and close
08:18 - curly braces and if you are having just
08:21 - single line of code to be executed
08:23 - within the arrow function then simply
08:25 - you can provide that particular
08:27 - expression without the return statement
08:29 - so guys what will be the output when we
08:31 - provide the numbers that is four and
08:32 - five comment in the comment section
08:34 - below let us see whether your answer is
08:36 - correct or not please make sure that you
08:38 - like this video so that it reaches to
08:40 - more people and subscribe to this
08:41 - channel so that you get the
08:42 - notifications on upcoming videos as well
08:45 - I'll see you in the next video in which
08:47 - we are going to talk about recursive
08:49 - functions in JavaScript so stay tuned

Cleaned transcript:

so now we will see Arrow functions in JavaScript so guys basically these Arrow functions allow us to write the shorter function syntax so previously we had seen how we can write the functions and reuse functions in JavaScript but we can write shorter functions as well with the help of the arrow functions over here so as you can see this is the syntax and the example we have the let keyword and Then followed by the variable name that is function every time we will be using the my function that is the variable name in order to call call the function so previously in the regular functions we had the function name that we can use in order to call that function but over here we will be using the my function or any other name that we provide to that particular function followed by the equal to operator and then we have the open and close parenthesis over here now these parameters are optional if you want to provide the parameters you can provide them and you can use the variable names over here as you can see this particular Arrow function is using the parameters in this case followed by the equal to operator and then greater than symbol so guys this particular expression is important in order to understand how Arrow function works so basically we have the open and close parenthesis and then we have the combination of equal to and then greater than symbol and then after this we can have the lines of code over here so guys let us check the examples of Arrow function in vs code in this case so first of all we will understand the regular functions so we can provide the function keyword followed by let's say we want to multiply two numbers over here so simply we provide the function name that is multiply and Then followed by the open and close parenthesis over here and simply what we can do is we had seen the return statement and we can return the multiplication of the two variables that are being passed so over here we can take the two variables as parameters A and B so over here we will return a multiplied by B in this case now guys what we can do is simply we can provide the variable that is result over here and then we can call this regular function by using the function name that is multiply and then inside the open and close parenthesis simply we can provide the two values let's say we provide the first value as 10 followed by comma and then we have another value that is two in this case so a will be equal to 10 over here and this B will be equal to 2 in this case that is getting passed over here to the function and a multili by B will be returned and it will be stored inside this particular result and simply we can have the console. log statement over here and then we can say the multiplication result is and then over here we will provide dollar symbol followed by open and close curly Braes and simply we will provide result over here which is the variable name so guys the multiplication result is result in this case which will be displayed based on the multiplication of these two numbers let me just save this file now and try running this code once again over here by using the node command in this case so as as you can see the multiplication result is 20 that's because 10 * 2 is equal to 20 in this case let us change the number to 10A 7 in this case so probably the result will be 10 * 7 which is equal to 70 over here so as you can see the multiplication result is 70 so guys in this way the regular functions work now guys how do we convert this into an arrow function over here so simply we have to remove this function keyword and we will provide the let keyword over here and then we are using this particular variable name that is multiply and Then followed by equal to operator in this case and then we will keep this open and close parenthesis which is helping us in order to pass the parameters over here and in between the parenthesis and the curly braces over here simply we will use the combination of equal to operator and the greater than symbol in this case so guys basically we have equal to operator and then greater than symbol so as you can see we have just converted the regular function to an arrow function over here so simply we have to use the multiply function name and then provide the parameters as it is expected by the arrow function over here that is a and b after which we have the equal to and the greater than symbol over here and then we have the lines of code in this case now guys it is very important to note that if you are just having one line of code over here within the arrow function then this particular return statement is not required so first of all we will check it with the return statement and then we will test it without the return statement as well so let me just save this file now let me just change these numbers to 5 and seven in this case so basically 5 * 7 it is equal to 35 should be returned and printed over here on the console so let me just save this file now and try running this code once again over here on the terminal so as you can see the multiplication result is 35 so in this way we can use the arrow functions which you are going to use a lot of times when you are going to work with the complex projects as well as when you are going to use the other JavaScript libraries including react and react native so guys over here since we have only one statement to be executed that is a multiplied by B the return statement is not required so simply what we will do is I'll get this particular statement on one line over here so as you can see this is the shorter format of this particular function that is the arrow function over here and simply we can remove the return statement as well so since we are only having a multili by B to be returned so when you're using Arrow function with a single statement the return statement is not required so let us verify that as well simply I'm going to change the numbers now to 12 and let's say three in this case so 12 * 3 must be 36 over here so let me just save this file now and try running this code once again over here on the terminal so as you can see the multiplication result is undefined so we are not getting any results maybe it is because we are using the open and close CL curly braces over here so simply I can remove these curly braces as well let us see whether now we get any results on the console code once again over here as you can see the multiplication result is 36 this time so guys basically this is more shorter format of the regular function that we had seen previously which was taking around three to four lines of code over here but simply we have reduced it to just one line of code without any return statement and without any curly braces as well so in this way the arrow function helps us in order to write the shorter format of any of the functions that we want to write so to summarize we have the let keyword followed by the name of the function that we can use based on our project requirements followed by the equal to operator and then we have the open and close parenthesis over here these parameters are optional if you're not using any of the parameters over here then either you have to return certain string or use the fixed values if you want to use any of the values in this case but if you're using the parameter over here those parameters can be used after this particular combination of the special characters that is equal to and the greater than symbol and then you can return certain statement over here it is important to note that if you are just having one statement in this case simply you can write that statement in this way without any return function but you can also have statements inside the body of the arrow function over here in which case you have to use the open and close curly braces in this case so basically we can also so do it in this way we provide a MTI B over here and then simply we provide another variable name so let's say we provide the variable name as a result in this case remember that this particular variable name that is a result it is having the local scope and it is within the function that is multiply over here it will not conflict with the result that we are using outside of this particular function and then guys what we will do is after storing the result in this result variable we can simply have the return statement and then we can say the result variable that is getting returned which will be printed over here let me just change these numbers to 12 and 5 and let me just save this file now and try running this code once again over here as you can see the multiplication result is 60 so in case if you are having multiple lines of code then you must Define it within the open and close curly braces and if you are having just single line of code to be executed within the arrow function then simply you can provide that particular expression without the return statement so guys what will be the output when we provide the numbers that is four and five comment in the comment section below let us see whether your answer is correct or not please make sure that you like this video so that it reaches to more people and subscribe to this channel so that you get the notifications on upcoming videos as well I'll see you in the next video in which we are going to talk about recursive functions in JavaScript so stay tuned
