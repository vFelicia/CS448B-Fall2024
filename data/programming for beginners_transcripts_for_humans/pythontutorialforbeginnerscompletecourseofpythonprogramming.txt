With timestamps:

00:00 - in the next few hours we are going to
00:01 - learn a lot about the Python programming
00:03 - language with the help of the examples
00:06 - and python programs as well while you're
00:08 - watching this video please make sure
00:10 - that you pause this video and practice
00:12 - on your own so that on different inputs
00:14 - you get different output and that is how
00:16 - you are going to learn about the Python
00:18 - programming language you can also watch
00:20 - my other Python tutorial and Python
00:22 - program videos which are available for
00:24 - free on YouTube the link to those
00:26 - playlist I have given in the description
00:28 - section below and we are going to cover
00:30 - all the basics about the Python
00:32 - programming language so let's get
00:34 - started Python tutorial for beginners so
00:36 - if you're completely new to programming
00:38 - languages and want to start with the
00:40 - Python programming language then this
00:42 - video series is for you and it doesn't
00:44 - matter even if you have learned the
00:46 - other programming languages such as Java
00:48 - C C++ and if you're going to learn the
00:51 - Python language for the first time you
00:53 - can watch these video so that we can get
00:55 - started from the completely beginner
00:57 - level and we reach up to the
00:58 - intermediate and expert level as we go
01:01 - through the different concepts of the
01:02 - Python programming language so guys
01:04 - first of all we are going to check the
01:06 - environment setup using the Python
01:08 - language and we are going to use the VSS
01:10 - code as the editor now over here vs
01:12 - stands for visual studio and we are
01:14 - going to use the visual studio code
01:16 - editor in order to write our python
01:18 - programs apart from this vs code setup
01:21 - we are also going to see how do we write
01:23 - the first python code and execute it so
01:26 - guys basically I have written down the
01:27 - steps to install the vs code editor and
01:30 - python interpreter over here so first of
01:32 - all we are going to install VSS code
01:34 - using this link that I have already
01:36 - provided in the description section so
01:38 - when you hit this URL in the browser
01:40 - this is the page that is going to open
01:42 - from where you can easily download the
01:44 - visual studio code it depends on your
01:46 - operating system which installer you
01:48 - want to download you can also download
01:50 - for Windows Mac OS and Linux systems
01:53 - over here so it depends on your
01:54 - operating system once you have
01:56 - downloaded this and installed the vs
01:58 - code on your machine machine the next
02:00 - step is to install python extension in
02:03 - VSS code so guys once you have installed
02:05 - the visual studio code this is the get
02:07 - started page that you will see in the
02:09 - visual studio code ID so over here first
02:12 - of all you are supposed to install the
02:14 - python extension so on the left hand
02:16 - side as you can see there is an
02:18 - extensions button over here on which you
02:20 - can click and then this particular
02:22 - section will open so over here in the
02:24 - search bar you are supposed to type
02:25 - python so once you type python there
02:28 - will be list of extensions that will be
02:30 - available for you so guys this is the
02:32 - extension that you have to install over
02:34 - here so as you can see python
02:36 - intellisense file lens and this is a
02:38 - description that you can see on the
02:40 - right hand side so since I have already
02:42 - installed this python extension on this
02:44 - Visual Studio code I am getting this
02:46 - uninstall button but you will be getting
02:48 - the install button over here if you have
02:50 - not already installed this particular
02:52 - extension guys this python extension
02:54 - helps us in order to write the python
02:56 - programs very efficiently it allows us
02:59 - to have the code completion feature
03:01 - along with this we can also run the
03:03 - python code and have the output from
03:06 - within the visual studio code itself so
03:08 - guys it is very important extension if
03:10 - you are going to Learn Python and want
03:12 - to write the python programs now guys
03:13 - coming to the next step we have to
03:15 - install the python interpretor using
03:18 - this link that I have already provided
03:19 - in the description so once you open this
03:22 - URL in the browser over here this is the
03:24 - page that will open for you and this is
03:26 - the official website of the Python
03:28 - programming language from where you can
03:30 - download the latest version for Windows
03:33 - over here since my machine is Windows I
03:35 - will be downloading this Python and the
03:37 - latest version is
03:39 - 3.11.1 it might so happen that you are
03:41 - watching this video in the future for
03:43 - which the latest version might be
03:45 - something else so you can download the
03:46 - latest version of the Python interpretor
03:48 - from here apart from this you can also
03:50 - get the links to the installer if you're
03:52 - using some other operating system over
03:54 - here so guys once you have installed
03:56 - python on your machine you can quickly
03:58 - open command prompt so over here in the
04:00 - command prompt you can simply type py
04:03 - followed by double hyphen characters and
04:06 - then you provide version and then when
04:08 - you press enter as you can see python
04:12 - 3.11.1 this is the version of python
04:14 - that is already installed on my machine
04:16 - you might have some separate version but
04:18 - the command will be same in order to
04:19 - check whether the python is successfully
04:22 - installed on your machine now guys after
04:24 - successful installation what you have to
04:26 - do is the last step is to connect this
04:28 - python interpreter in vs code so we
04:30 - select the python interpreter in VSS
04:32 - code so over here you have to come on
04:35 - the settings on the bottom left and then
04:38 - over here you can see the command pallet
04:40 - you can also have the shortcut key as
04:42 - Control Plus shift plus P if you're
04:44 - using the keyboard keys and then when
04:46 - you click on this on the search bar you
04:48 - have to type Python and then colon and
04:50 - then we have select interpreter so as
04:52 - you can see this is the option and when
04:54 - you click on this as you can see this
04:56 - python 3.1.1 is getting displayed over
04:59 - over here which you are supposed to
05:00 - select in order to select the python
05:03 - interpretor now guys what we are doing
05:05 - over here is we are connecting this
05:07 - python interpreter with this Visual
05:09 - Studio code so that whenever we write
05:11 - the python code our program gets
05:13 - executed successfully on the VSS code
05:16 - itself now guys it might so happen that
05:18 - you don't get this option that's because
05:20 - you have installed python after
05:22 - installing vs code so you can simply
05:24 - restart this vs code in order to get
05:27 - this option over here and once you
05:28 - select this opt option you are ready in
05:31 - order to write the python programs in
05:33 - the vs code IDE so guys just by using
05:36 - these four steps of installation you can
05:38 - quickly get started in order to write
05:40 - the python programs in the vs code and
05:42 - all the steps have been documented in
05:44 - this official documentation of the
05:46 - visual Studio website so you can check
05:48 - the content of this documentation as
05:50 - well the link I have given in the
05:51 - description already now guys we are
05:53 - going to write the first code in Python
05:55 - so what we are going to do is we are
05:57 - just going to close these tabs over over
05:59 - here and we are going to open this
06:01 - Explorer over here it is saying no
06:03 - folder opened initially so what you can
06:05 - do is you can create the folder
06:07 - initially in order to organize all your
06:10 - python programs so basically I'm going
06:12 - to just create a new folder over here
06:14 - and I'm going to say python so this is
06:17 - the name of the folder and then I'll
06:19 - select this folder over here so as you
06:21 - can see a new folder that is python has
06:23 - been created now you can write python
06:25 - programs inside this python folder you
06:27 - can have any other folder in any of the
06:30 - directories it depends on you where you
06:32 - want to store the python codes that you
06:34 - will be writing from now on so what we
06:36 - will be doing is as you can see this is
06:38 - the icon it says new file so we will be
06:40 - clicking on this new file and let's say
06:42 - I provide the name of the Python program
06:45 - as python followed by underscore and
06:47 - then we have code followed by dot we
06:50 - have py so guys this is very important
06:52 - that after typing the name of the file
06:55 - we have to append it with py this is the
06:58 - extension of the pyth Python program and
07:00 - this extension will help the vs code in
07:02 - order to interpret that this is the
07:04 - python code and it should execute this
07:07 - code using the python interpretor so
07:09 - guys I'm going to press enter over here
07:11 - and once we press enter this python
07:13 - code. py it is going to open
07:15 - automatically over here now simply we
07:17 - can print some content in our Python
07:19 - program as the first code in Python so
07:21 - over here we have something called as
07:23 - print statement as you can see once we
07:25 - type print it is auto suggesting us what
07:27 - are the different keywords that we can
07:28 - use so so when we press enter over here
07:31 - this print gets selected automatically
07:33 - now inside the open and close
07:35 - parenthesis what we are supposed to do
07:37 - is we can type one particular statement
07:39 - that is the name of the YouTube channel
07:41 - that is programming for beginners which
07:44 - you should definitely subscribe so this
07:46 - is a string that is a statement that we
07:48 - have given over here and this is the
07:50 - very simple Python program that we can
07:52 - write and what this will do is it will
07:54 - simply print this content that is
07:56 - programming for beginners on the console
07:58 - so guys over here you have to come on
08:00 - file and then you can click on save or
08:02 - else you can use the control+ S on the
08:05 - keyboard in order to save the file which
08:07 - I'm going to do in the upcoming videos
08:09 - as well so first of all you save this
08:11 - file and simply you have to come on this
08:13 - top right corner over here you can see
08:15 - this run python file button over here so
08:17 - when you click on this run python file
08:20 - the terminal will open and it will
08:22 - execute this file that is python code.
08:24 - py that we have simply created over here
08:27 - and as you can see programming for
08:28 - beginners string is getting printed so
08:30 - guys in this way we have return the very
08:32 - first code in the python and using the
08:34 - print statement we have printed the
08:36 - programming for beginners we can print
08:39 - any other statement over here as well so
08:41 - let's say I'll provide this as a
08:44 - statement and then when we save this
08:46 - file and try running this code once
08:48 - again as you can see this is a statement
08:50 - is getting printed over here on the
08:52 - terminal so guys this is the way we can
08:53 - easily set up our python interpreter
08:56 - along with the editor that is Visual
08:58 - Studio code you you can use any other
09:00 - editor that you want such as you can
09:02 - simply use the notepad file as well but
09:04 - you will not get such strong features
09:06 - which are provided by the visual studio
09:08 - code in the notepad file apart from that
09:10 - you can also use notepad++ or we have a
09:13 - very popular ID that is py charm and
09:16 - apart from that we have many other
09:17 - editors that you can use but vs code is
09:20 - one of the lightweight editors that you
09:22 - can use when you are writing the python
09:24 - programs python variables constants and
09:27 - literals so guys what are pyth variables
09:30 - so in programming a variable is a
09:32 - container that is a storage area to hold
09:35 - data so as we have seen previously a
09:37 - number is a variable and we can provide
09:40 - the value that is 10 so previously we
09:42 - had seen a string variable in which we
09:44 - had stored some statement whereas we can
09:46 - also have the integer values being
09:48 - stored in the variables so over here if
09:51 - we move to our Visual Studio code so we
09:53 - can simply type number that is the
09:55 - variable name which can be assigned a
09:58 - value so equal Al to 10 so this is
10:00 - nothing but an integer value being
10:02 - assigned to a variable which is named as
10:04 - a number we can also have the string so
10:06 - let's say programming for beginners so
10:09 - we have programming for beginners as the
10:11 - string over here which can be assigned
10:14 - to a variable and the variable name can
10:16 - be given as Str Str or it can be also
10:18 - given as message or any other name that
10:21 - you want to give while writing your
10:22 - Python program Guys these are nothing
10:24 - but variables which can be used later on
10:26 - in the program basically their
10:27 - functionality is to store some values so
10:30 - in this case number is storing the value
10:32 - that is 10 and this Str Str variable is
10:34 - storing the value that is programming
10:36 - for beginner string now guys it is very
10:38 - important to note that python is a type
10:40 - inferred language so you don't have to
10:43 - explicitly Define the variable type it
10:45 - automatically knows that 10 is an
10:47 - integer and declares the number variable
10:50 - as the integer so guys basically it
10:53 - depends on the value that we are
10:54 - providing so just because you are typing
10:56 - number as the name of the variable it
10:59 - doesn't mean that it has to be
11:00 - necessarily having the integer value you
11:03 - can also have the string value as well
11:05 - so when I copy this and paste this over
11:08 - here the number will have programming
11:10 - for beginners but guys this doesn't make
11:12 - any sense over here but programmatically
11:14 - this is also possible that's because we
11:16 - don't have to provide any data type over
11:18 - here in the python programs so whatever
11:20 - the value is data type will be given to
11:23 - that particular variable based on the
11:25 - value that is being provided to the
11:26 - variable this is very important Point as
11:28 - far as as python programs are concerned
11:30 - in other programming languages such as
11:32 - Java or C++ we have a very strict data
11:35 - type that needs to be provided before we
11:38 - provide our variable names over here and
11:41 - guys this is also one of the advantages
11:42 - of using the Python program it allows us
11:45 - to write the code quickly compared to
11:47 - other programming languages now guys
11:48 - moving forward what is the python
11:50 - constant so basically a constant is a
11:53 - special type of variable whose value
11:55 - cannot be changed so for example as you
11:57 - can see the pi value is 3.14 so over
12:00 - here guys before defining the constant
12:03 - variable what we can do is if we simply
12:05 - print this variable over here that is
12:07 - print followed by number that is being
12:10 - given inside the parenthesis I'll save
12:12 - this file and TR running this code now
12:14 - so as you can see programming for
12:15 - beginners is getting printed that's
12:17 - because the value is given as
12:18 - programming for beginners let's say I
12:20 - provide the integer that is 20 over here
12:23 - and then when I save this file enter I
12:24 - running this code now the number should
12:26 - have the value that is 20 and that is
12:29 - should be printed so as you can see when
12:30 - we run this code 20 is getting printed
12:33 - over here so whatever value is being
12:34 - stored and whichever variable we want to
12:36 - print the content of that variable will
12:38 - be printed now coming to the constants
12:41 - that we have just defined so in Python
12:44 - let's say if you provide pi equal to
12:46 - 3.14 over here so instead of this number
12:49 - we provide Pi it is equal to 3.14 I'll
12:51 - just remove this line of code and then
12:53 - simply I'll provide pi over here so what
12:56 - will happen is it will display this
12:58 - value that is 3 3.14 I'll save this file
13:00 - and try running this code now as you can
13:02 - see 3.14 is getting printed but guys
13:05 - what is the use of this constant
13:06 - basically we are saying that Pi is
13:08 - constant over here that's because using
13:10 - this nomenclature that is the constant
13:13 - variable must have all the characters as
13:15 - the upper case so this can Define that
13:18 - it is a constant over here but is it
13:20 - actually a constant no in this case
13:22 - since again we can use pi over here and
13:25 - we can provide some other values as well
13:27 - such as 5.1 5 over here so when I save
13:30 - this file entery running this code now
13:32 - it is saying now that Pi is having 5.15
13:35 - which is the latest value so guys there
13:37 - is no concept of python constants over
13:39 - here right now but what we can do is we
13:41 - can save this value in some other file
13:43 - so let's say I create another file over
13:45 - here and name it as constant followed by
13:48 - the extension that is py over here when
13:50 - we press enter we can simply provide
13:53 - this statement that is Pi = to 3.14 I'll
13:56 - just copy this and paste this over here
13:58 - so we we have provided pi equal to 3.14
14:01 - now what we can do is coming to this
14:03 - python code what we can do is we can use
14:06 - the import keyword now guys this import
14:09 - keyword is used in order to import some
14:12 - other python files into this file so
14:14 - that we can use the content of that
14:16 - other python files over here so we are
14:18 - going to import this constant. py in our
14:21 - python code program so import we can say
14:24 - constant over here so when we type
14:26 - constant as you can see constant is
14:28 - getting getting Auto suggested over here
14:30 - that's the very important feature of the
14:32 - intellisense which is included in the
14:34 - python extension that we had installed
14:36 - so we provide constant over here and
14:39 - what we have to do is while printing we
14:41 - can simply provide this constant over
14:43 - here that is constant followed by Dot
14:45 - and then as you can see Pi is getting
14:48 - Auto suggested that's because we had
14:49 - defined pi over here so we simply have
14:52 - to provide Pi so what will happen is it
14:55 - will print the value of the pi so when
14:57 - we save this file and try running this
14:59 - code now once again it says module
15:01 - constant has no attribute Pi so guys
15:04 - that may be because we have not saved
15:06 - this file that is constant let me come
15:07 - over here and save this file over here
15:09 - once again and I'll go to this python
15:11 - code and then run this file once again
15:13 - so as you can see now 3.14 is getting
15:16 - displayed so guys if you want to use
15:18 - some constant values you can have a
15:20 - separate file that is constant. py in
15:22 - which you can store all the constant
15:24 - variables let's say we have another
15:26 - variable over here that is St Str and
15:29 - then we provide string s the value so
15:32 - this Str Str can also be treated as a
15:34 - constant for which the values never
15:35 - change while we are executing the code
15:38 - I'll save this file over here and let's
15:39 - say if I want to print the string as
15:42 - well so I'll copy this line of code
15:44 - paste this over here and instead of Pi
15:46 - we will provide St Str now so we provide
15:49 - constant. pi and constant do s Str also
15:52 - so when we save this file and try
15:53 - running this code now we get both the
15:55 - things that is 3.14 we get the string
15:57 - value as well so if you want to use the
15:59 - constants in Python you can have a
16:01 - separate file all of the constants can
16:03 - be defined over there and then you can
16:05 - import that constant file and use the
16:08 - various variables that you have defined
16:09 - as constant in order to write your
16:11 - python programs so guys moving forward
16:13 - over here what are python literals
16:15 - literals are representations of fixed
16:17 - values in a program they can be numbers
16:20 - characters or strings etc for example
16:23 - hello world is one of the literal then
16:25 - 12 is another literal 23.0 Z and then C
16:29 - character true false Etc so guys
16:32 - literals are nothing but these values so
16:34 - basically this value it is a literal
16:37 - this particular name that we have given
16:39 - is the identifier or also called as
16:41 - variable but in this case it is a
16:43 - constant now this variable becomes
16:45 - constant when the value cannot be
16:47 - changed but we can change this any time
16:49 - in this code but not over here an
16:51 - identifier can be a constant when we
16:53 - don't want to change its value anytime
16:56 - in our Python program and again the
16:58 - string string value inside the double
17:00 - codes it is a literal python data types
17:02 - in which numeric string list tle set are
17:06 - included so Guys these are the different
17:08 - data types that we can see in this video
17:10 - and the upcoming videos as well so
17:12 - basically in computer programming data
17:14 - type specify the type of data that can
17:17 - be stored inside a variable so for
17:19 - example number it is equal to 24 so 24
17:22 - value belongs to the numeric data type
17:25 - and this is the integer value inside the
17:28 - numeric data type we have many other
17:29 - data types such as integer value then we
17:32 - have float value as well in which there
17:34 - is a decimal point we have a complex
17:36 - value as well in which as you can see
17:38 - this expression that is 1 + 2J this is a
17:41 - complex expression so all these are
17:43 - having numeric data types over here so
17:45 - number over here is a numeric data type
17:47 - or the integer as you can see 24 is the
17:50 - value if it was 24.5 then we would say
17:53 - that number variable is of float data
17:55 - type so guys let us check this with the
17:57 - help of example what we can do is we can
17:59 - simply copy these lines of code over
18:01 - here I'll copy this and we'll paste this
18:04 - over here now what we will do is this
18:06 - constant. py that we had created
18:08 - previously I'll just remove from our
18:10 - python folder over here since it is no
18:12 - longer needed and we will simply keep
18:14 - python code. py where we are going to
18:17 - write all the programs over here so guys
18:19 - over here I'll simply replace the
18:22 - content of this file by this content
18:24 - I'll save this file and over here in the
18:26 - terminal I'll simply clear the script so
18:28 - as you can see num one it is defined as
18:30 - five which is the integer that is being
18:33 - assigned to num one so the data type
18:35 - over here will be the integer data type
18:37 - and using this print statement what we
18:39 - are doing is we are using this num one
18:41 - and then followed by comma is of type
18:44 - which means num one will be printed that
18:46 - is five will be printed and then we will
18:48 - have is of type string being printed and
18:51 - then type this is another method that is
18:53 - being used in order to get the type of a
18:56 - variable so as you can see this is the
18:58 - syntax that first we provide type and
19:00 - Then followed by open and close
19:02 - parenthesis and over here inside this we
19:04 - have num one that is the variable name
19:07 - guys similarly we have provided num 2s
19:09 - 2.0 and the same thing we are doing that
19:11 - is we are finding the type over here and
19:13 - then in the num three as well we are
19:15 - getting the type of this num three
19:17 - variable let me just save this file
19:19 - enter are running this code now so as
19:21 - you can see five is of type Class end so
19:25 - this is of the integer data type 2.0
19:28 - since it is having the decimal over here
19:30 - it is saying it is of type float over
19:32 - here and 1 + 2 J it is of type complex
19:36 - over here so these are all numeric data
19:38 - types and inside the numeric data types
19:40 - these are described as integer float and
19:43 - complex values now apart from this guys
19:45 - we have other data types as well such as
19:47 - string that we had seen previously we
19:49 - have list as well tle and set so guys
19:52 - let us check this one at a time so over
19:54 - here what we will do is simply I'll
19:55 - provide Str Str and then I provide the
19:58 - Str Str value as programming for
20:02 - beginners so what we will do over here
20:04 - is we want to find the type of this Str
20:06 - Str variable so what we can do is we can
20:09 - simply have the print statement followed
20:12 - by open and close parenthesis and we can
20:14 - simply have the type function so guys as
20:17 - you can see type is being Auto suggested
20:18 - over here we will select this and inside
20:21 - the open and close parenthesis we will
20:23 - use this variable so I'll just copy this
20:25 - and paste this over here that is Str Str
20:27 - and then when we save this file and try
20:29 - running this code now as you can see
20:31 - class that is St Str is getting printed
20:33 - over here we can also have some string
20:35 - value over here that is first of all we
20:37 - are going to type St Str that is the
20:40 - value of this Str Str and Then followed
20:42 - by comma and then we can simply have is
20:46 - of type inside the single codes over
20:49 - here guys it is very important that
20:51 - whenever you want to type certain
20:52 - characters we should either have it
20:54 - inside the single codes or double codes
20:57 - as we have seen over here and then when
20:58 - we save this file ENT running this code
21:01 - it will show us the data type of this
21:02 - string with a more sensible statement so
21:05 - as you can see programming for beginners
21:07 - this is the string value that we have
21:08 - given and then is of type now this is of
21:11 - type we have provided over here and then
21:14 - this type function that is St Str it is
21:16 - returning the type of this Str Str
21:18 - variable which is class Str Str over
21:21 - here so this is a string data type now
21:23 - guys this Str Str over here it stands
21:25 - for string and not the name of this
21:27 - variable if I provide here something
21:29 - else then it will be more sensible so
21:31 - let's say if I provide statement over
21:33 - here as the name I'll copy this and
21:35 - paste this over here and when we run
21:37 - this code once again so as you can see
21:39 - it says class s Str is of type class s
21:42 - Str so since we have not replaced this
21:44 - Str Str with the statement that is why
21:46 - we are not getting it properly I'll run
21:48 - this code once again now so as you can
21:50 - see programming for beginners which is
21:51 - the value of this statement variable
21:54 - over here and then is of type and then
21:56 - we have class Str Str over here here now
21:58 - apart from this we have other data types
22:00 - as well such as list which can be
22:02 - defined as the square brackets so what
22:04 - we have to do is let's say I provide
22:06 - list one as the name of the variable and
22:09 - then equal to now guys list is nothing
22:11 - but it is a data type that have
22:13 - collection of elements so over here
22:15 - let's say we have collection of strings
22:17 - so let's say we have collection of
22:19 - fruits over here so the first fruit is
22:21 - Apple followed by comma and then again
22:24 - we have double quotes and then we have
22:26 - mango so all the elements are being
22:28 - separated using the comma over here as
22:30 - you can see and then let's say we have
22:33 - banana over here as the third fruit so
22:35 - what we can do is we can simply have
22:37 - print statement over here and then we
22:40 - can have type of this list one so I'll
22:43 - say list one over here when we save this
22:46 - file and try running this code now as
22:48 - you can see class list is getting
22:50 - printed so this is of data type that is
22:52 - list over here similarly we have tle and
22:55 - set as well which we are going to see in
22:56 - the upcoming videos what are the
22:58 - different contents of these data types
23:00 - and how do we use them and when do we
23:02 - use them so guys for now you just need
23:04 - to remember that whatever value that we
23:06 - provide to a particular variable
23:08 - automatically that data type will be
23:10 - assigned to that particular variable
23:12 - basic input and output in Python
23:14 - Programming so guys in this tutorial we
23:16 - will learn simple ways to display output
23:18 - to the users and take input from users
23:21 - in Python with the help of examples now
23:24 - guys as we have seen previously in
23:26 - Python we can simply use the print print
23:28 - function to print the output so let us
23:30 - check this with the help of example over
23:32 - here so I simply want to print a
23:34 - statement so let's say I want to print
23:36 - programming for beginners that is the
23:39 - name of this YouTube channel which you
23:40 - should definitely subscribe if you have
23:42 - not subscribed it yet so once we provide
23:45 - the string inside the double codes we
23:47 - can simply save this file and try
23:49 - running this code now so on the terminal
23:51 - we will be able to see the string
23:53 - getting printed that is programming for
23:55 - beginners I have missed out an O
23:56 - character over here so this is the
23:58 - correct string so programming for
24:00 - beginners is the string that we want to
24:02 - print and that is what we have got over
24:04 - here in the terminal now guys even with
24:06 - this print function over here this is a
24:08 - function and it takes certain parameters
24:10 - so parameters are nothing but certain
24:12 - values that you can provide to the
24:13 - function so as you can see the actual
24:16 - syntax of the print function accepts
24:18 - five parameters so basically we have
24:20 - only provided one parameter over here
24:22 - this can be treated as a parameter that
24:24 - is the value that we want to print now
24:26 - apart from this we also have other
24:28 - parameters as well so object is the
24:30 - parameter which is nothing but the value
24:33 - to be printed apart from that we have
24:35 - separator then we have end parameter
24:37 - file and then flush parameter so these
24:40 - are the five parameters and these are
24:42 - the descriptions of each and every
24:43 - parameter so over here the separator
24:45 - which is an optional parameter since we
24:48 - have not provided any separator over
24:49 - here it allows us to separate multiple
24:52 - objects inside print so let's say after
24:55 - this string I want to provide another
24:57 - number over here so let's say 1 2 3 4 is
24:59 - the number that I want to provide now I
25:02 - want these objects that is one is
25:03 - programming for beginners which is a
25:05 - string and another object that is a
25:07 - number to be separated using commas so
25:09 - what we will do is after providing comma
25:12 - we will use the SCP that is another
25:14 - parameter as you can see vs code is
25:16 - providing us the autoc completion
25:18 - feature over here so we just need to
25:20 - select that and then we need to provide
25:23 - single codes and inside this we provide
25:25 - comma followed by the space character so
25:28 - guys what will happen is all the objects
25:30 - will be separated by using this comma
25:32 - and the space character over here it
25:34 - depends on your requirement how many
25:35 - objects you want to provide inside this
25:37 - print statement so let me just save this
25:39 - file and try running this code now so as
25:42 - you can see programming for beginners
25:44 - and then we have this comma followed by
25:46 - the space character and then we have
25:47 - this 1 2 3 4 object being printed over
25:50 - here we can have another object so let's
25:52 - say I provide another string that is
25:54 - another statement over here so let me
25:57 - just say save this file and try running
25:58 - this code now so we are getting an error
26:00 - invalid syntax perhaps you forgot a
26:03 - comma so basically after providing each
26:05 - and every object we have to separate it
26:07 - using the comma over here and then let
26:09 - me save this file and try running this
26:11 - code now so as you can see programming
26:13 - for beginners followed by comma and then
26:15 - we have space characters and then we
26:16 - have 1 2 3 4 again we have comma and
26:18 - then space character and then we have
26:20 - another statement so guys in this way we
26:22 - can use the separator parameter as well
26:25 - in order to separate the different
26:26 - objects inside the print function now
26:29 - going to next parameter which is end
26:31 - over here which is again optional by
26:33 - default it is the slend character in
26:35 - which case the control flow goes to the
26:37 - next line Whenever there is another
26:39 - object that is getting printed over here
26:41 - so as you can see it allows us to add
26:43 - specific values like new line or tab
26:45 - character so guys let's say we have this
26:47 - print function over here I'll just
26:49 - remove this part of the line over here
26:51 - and let's say I have another print
26:53 - function in which case I am providing
26:55 - another statement so let's say we have
26:57 - have another statement over here so guys
27:00 - what will happen is by default this end
27:03 - parameter is having the Slash and
27:04 - character which means the control flow
27:06 - should go to the new line Whenever there
27:08 - is a next print statement that is
27:10 - encountered so let me just save this
27:12 - file and try running this code now so as
27:14 - you can see programming for beginner
27:15 - string is getting printed in first line
27:17 - and on the second line another statement
27:19 - is getting printed now what if we want
27:22 - both these statements to be printed on
27:24 - the same line but they are present in
27:26 - the different print function so what we
27:28 - will have to do is in the first print
27:30 - function I will provide a comma over
27:32 - here and then we have the end parameter
27:35 - so as you can see this end parameter we
27:37 - have to select and then inside the
27:39 - double codes I'll simply provide the
27:41 - full stop followed by the space
27:43 - character so guys what is happening over
27:45 - here is after the string is getting
27:47 - printed at the end of the line we are
27:49 - providing this full stop and then
27:51 - followed by the space character and then
27:53 - whenever there is a next string that is
27:55 - encountered by the control flow it will
27:57 - get printed on this same line so let me
27:59 - just save this file and try running this
28:01 - code now so as you can see programming
28:03 - for beginners and then we have a full
28:05 - stop and then we have the space
28:06 - character as well and then we have
28:08 - another statement that is getting
28:09 - printed so guys we can also use this end
28:12 - parameter if we want multiple print
28:15 - functions to be used but all the objects
28:17 - need to be printed on the same line the
28:19 - other two parameters are file which is
28:21 - again optional where the values are
28:23 - printed so basically by default the
28:25 - values are printed on the screen and
28:27 - that is why its default value is system.
28:30 - STD out which means it should print on
28:32 - the screen you can also provide some
28:34 - file path over here so that the content
28:37 - can be return in the file apart from
28:39 - that we also have the flush which is
28:40 - again an optional parameter it is a
28:42 - Boolean specifying if the output is
28:44 - flushed or buffered so by default it is
28:47 - having the false value so Guys these two
28:49 - parameters you can practice on your own
28:51 - as a homework for you apart from that
28:53 - guys it is very important that how do
28:55 - you take input from the user in Python
28:58 - Programming so basically while
28:59 - programming we might want to take the
29:02 - input from the user in Python we can use
29:04 - the input function so as you can see we
29:07 - have a variable over here or we can say
29:09 - identifier it is equal to we have used
29:12 - the input function so guys this input
29:14 - function it will take a parameter which
29:16 - will be kind of a label which will be
29:18 - printed on the screen for the user as a
29:21 - instruction so we are asking the user to
29:23 - enter a number and the number that will
29:25 - be entered by the user will be stored in
29:28 - this num variable over here so guys let
29:30 - us check this with the help of example
29:32 - now I'll just remove these lines of code
29:34 - so what we have to do is let's say we
29:36 - provide the number variable it is equal
29:38 - to we have to use the input function as
29:40 - you can see this is the function that is
29:42 - being suggested by the vs code over here
29:44 - and then using the open and close
29:46 - parenthesis inside this we have to
29:49 - provide a string inside the double codes
29:51 - so we can simply provide enter a number
29:54 - now this is a instruction to the user to
29:56 - enter the number now guys what we can do
29:58 - is we can print this number now we can
30:01 - easily print this by using a string so
30:03 - let's say we provide the string over
30:04 - here that is
30:06 - entered number is and Then followed by
30:09 - colon and then after this object we have
30:12 - to provide a comma and then we can
30:14 - provide the number variable to be
30:15 - printed so we have provided the number
30:17 - variable over here let me just save this
30:19 - file andent try running this code now so
30:21 - as you can see it is asking the user
30:23 - over here to enter a number so what I
30:25 - will provide is simply I will provide 10
30:28 - as the number and then when I press
30:29 - enter as you can see entered number is
30:32 - 10 so this string is getting printed
30:35 - along with the number that is being
30:37 - entered by the user now guys it is very
30:39 - important to note that whenever we are
30:41 - using this input function the input that
30:44 - is taken by the user will be of the type
30:46 - string over here so if we print the type
30:48 - of this number variable over here let me
30:51 - just do that so we simply provide data
30:53 - type of number colon and and then what
30:57 - we have to do is after comma we have to
31:00 - use the type function and inside this
31:02 - function we have to provide the number
31:04 - variable let me just save this file
31:05 - enter I running this code now enter a
31:08 - number so let's say I provide 10 as the
31:10 - number as you can see enter number is 10
31:12 - and after this data type of number it is
31:15 - class string so this is of string data
31:18 - type so whatever input is being taken
31:20 - from the user it will be stored as a
31:22 - string so what we have to do is we have
31:24 - to convert it into a number now since
31:27 - this is a string we cannot add another
31:29 - number to this particular number so
31:30 - let's say if we try to add some another
31:32 - number over here so we simply do number
31:35 - + 5 over here let me just save this file
31:37 - enter I running this code now so when we
31:40 - provide 10 as the number when I press
31:42 - enter as you can see it says can only
31:45 - concatenate string not end that's
31:47 - because we are trying to concatenate a
31:50 - string with a number over here that is
31:52 - the integer so what we have to do is we
31:54 - have to convert this input into an
31:57 - integer so we can simply provide int
31:59 - over here and then the entire input
32:02 - function needs to be enclosed within the
32:04 - open and close parenthesis so guys this
32:06 - we had seen previously as well this is
32:08 - the explicit type conversion over here
32:10 - which is the manual type conversion in
32:12 - which we are converting the string data
32:14 - type to the integer data type and now we
32:16 - will have the integer over here which
32:18 - can simply be added with another integer
32:21 - so let me just save this file and try
32:22 - running this code now so as you can see
32:25 - enter a number this time let's say I
32:27 - provide 15 as the number and then when I
32:29 - press enter as you can see entered
32:31 - number is so what is happening is this
32:33 - number that is 15 was taken and then
32:36 - five was added to this number and that
32:38 - is why 15 + 5 is 20 and this number is
32:41 - getting printed over here and you can
32:42 - see this data type of number now it is
32:45 - of the type integer that's because we
32:47 - have used the type conversion over here
32:49 - so guys this is the way you can take
32:51 - input from the user make sure that
32:53 - whenever you're using the input function
32:55 - the data that is being entered by the
32:57 - user is of the type string and you need
32:59 - to convert it into the appropriate data
33:01 - type before you can use the other
33:03 - operators arithmetic operators in Python
33:06 - Programming so guys arithmetic operators
33:09 - are used to perform mathematical
33:11 - operations like addition subtraction
33:14 - multiplication and many other operations
33:16 - which can be done using the integers or
33:18 - the numbers in Python so guys for
33:20 - example let's say we provide the print
33:22 - function over here and inside this
33:24 - function we provide 5 + 6 as the
33:27 - parameter so what will happen is the
33:29 - plus operator is being used over here in
33:31 - order to add these two numbers that is
33:33 - five and six and the result that is 11
33:35 - will be printed so let us quickly check
33:37 - this with the help of example over here
33:39 - so what we will do is we will use the
33:41 - print function and inside this
33:43 - parenthesis we will simply provide 5 + 6
33:46 - over here and when we just save this
33:48 - file and try running this code now so as
33:50 - you can see 11 is getting printed so
33:52 - guys what we have done over here is we
33:54 - have simply used the plus operator in
33:56 - order to to add two numbers we can also
33:59 - do this by using the variables as well
34:01 - so let's say we provide num one it is
34:03 - equal to 10 and let's say we provide num
34:06 - 2 it is equal to 20 and then let's say I
34:09 - provide sum it is equal to num 1 plus
34:13 - num two over here so guys basically once
34:15 - again we have used this plus operator in
34:18 - order to add two numbers that is num one
34:20 - and num two for which the values are 10
34:23 - and 20 respectively and the result will
34:25 - be stored in this sum and when we
34:27 - provide this sum inside the print
34:29 - statement we will get that result so let
34:31 - me just save this file and try running
34:33 - this code now so as you can see 30 is
34:35 - getting printed that is the sum of 10 +
34:37 - 20 over here so guys this is one of the
34:40 - arithmetic operator that is plus is
34:42 - being used in order to add the two
34:44 - numbers apart from this addition we have
34:46 - other operators as well as you can see
34:48 - subtraction we have in which the two
34:50 - numbers can be subtracted so over here 4
34:53 - - 2 it is equal to 2 so over here minus
34:56 - operator is is being used we have
34:58 - multiplication as well in which multiply
35:00 - operator is used in order to multiply
35:02 - two numbers we have division as well in
35:05 - order to divide the two numbers so as
35:07 - you can see 4 / 2 it is equal to 2 so we
35:10 - are getting the quotient over here and
35:12 - we have the modular operator as well
35:14 - which can be used by using this percent
35:17 - operator so guys what happens is 5% 2
35:20 - what this will do is it will divide the
35:22 - number on the left hand side that is
35:23 - five by the number on right hand side
35:25 - that is two so 5 ID 2 it will give us
35:28 - the quotient as 2 but the remainder will
35:31 - be one and we will be getting the
35:33 - remainder of this operation that is 1
35:35 - over here and similarly we have power
35:36 - operator as well so as we can see four
35:39 - and then 2 * multiplication symbol over
35:41 - here which is the power symbol and then
35:43 - 2 which means 4 * 4 will be done which
35:46 - is equal to 16 so basically this is
35:49 - nothing but the square of the number in
35:51 - this case it is the square of this
35:52 - number that is four so guys let us check
35:55 - all these operators with the help of
35:56 - examples over here so what we will do is
35:59 - first of all we will print and add two
36:01 - numbers so let's say we provide 10 as
36:03 - first number and 20 is the second number
36:06 - so this is the addition of two numbers
36:08 - let's say we want to subtract two
36:09 - numbers over here and the two numbers
36:11 - are let's say 20 and then minus what we
36:14 - do is we will minus 15 over here let's
36:17 - say the third expression is
36:18 - multiplication so I will simply provide
36:20 - five as the number multiplied by seven
36:23 - as another number the next operator is
36:25 - the Divide operator so let's say I
36:27 - provide the print statement over here
36:29 - and we provide 50 as one number divided
36:31 - by 10 as another number and then we have
36:35 - another print statement let's say we
36:37 - want to find the remainder after
36:39 - dividing two numbers so let's say 40 is
36:41 - one number and then we provide
36:44 - percentage sign and then we provide 15
36:46 - as the second number and then the last
36:48 - operator that is the power operator I
36:51 - simply provide five as the number and
36:53 - then two times multiplication over here
36:55 - which means power and then I provide two
36:57 - as the second number so guys let me just
36:59 - save this file and try running this code
37:01 - we will check the results of all these
37:03 - operations over here so as you can see
37:05 - the first print statement that is 10 +
37:07 - 20 it is providing us 30 as the result
37:09 - and this is the correct result over here
37:11 - 20 - 15 should be five and that is what
37:14 - we are getting over here as 5 and then 5
37:16 - * by 7 it is equal to 35 and we are
37:19 - getting 35 over here then 50 ided 10
37:22 - should give us the quotient that is 5
37:24 - and we are getting 5.0 over here and
37:27 - then 40% 15 which means 40 is divided by
37:30 - 15 and then what is the remainder is
37:33 - getting returned to this print function
37:35 - and 10 is getting returned why 40
37:38 - divided 15 the quotient will be 2 that
37:40 - is 15 * 2 is 30 but the remaining number
37:44 - will be 10 which will be the remainder
37:46 - and that is what we are getting over
37:47 - here is the 10 as the remainder and then
37:50 - 5 power 2 which means 5 * 5 is done over
37:53 - here and 5 * 5 is 25 and that is what we
37:56 - are getting over here so Guys these are
37:58 - certain arithmetic operators that you
38:01 - can use which include addition
38:03 - subtraction multiplication division and
38:05 - then finding the remainder of the two
38:07 - numbers by dividing them and then we can
38:09 - also find the power of the number so
38:11 - guys you can use them based on your
38:13 - requirements assignment operators in
38:15 - Python Programming so guys the
38:17 - assignment operators are used to assign
38:20 - values to variables so as you can see in
38:22 - this example the number variable is
38:24 - assigned the value that is five so this
38:26 - is the assignment operator that is equal
38:28 - to over here apart from that we have
38:30 - other operators as well so as you can
38:32 - see this is the assignment operator that
38:34 - is used in order to assign some value to
38:36 - a particular variable we also have
38:39 - addition assignment in which we use the
38:41 - plus operator first followed by the
38:43 - equal to symbol so guys what exactly
38:46 - happens over here is let's say if we
38:48 - provide this expression over here that
38:50 - is a and Then followed by plus symbol
38:52 - and then equal to operator and Then
38:54 - followed by this value that is one so so
38:56 - this is nothing but it is the expression
38:58 - that is a equal to a + 1 so basically 1
39:02 - is getting added to this variable that
39:03 - is a and then it is getting stored in
39:06 - the same variable that is a so guys let
39:08 - us check this with the help of example
39:10 - over here so first of all I will provide
39:12 - the number variable and we will provide
39:14 - a value that is five over here so this
39:16 - is a simple assignment operator we can
39:19 - simply use the print function in order
39:21 - to print this number so when we provide
39:23 - number as the parameter to this print
39:26 - function and when we just save this file
39:28 - and try running this code now so as you
39:30 - can see on the terminal five is getting
39:32 - printed that is the value of this number
39:34 - now let's say we want to add 10 to this
39:36 - number so we can do this in two ways so
39:38 - first of all we can simply use the plus
39:40 - operator that we had seen previously so
39:43 - number equal to number followed by plus
39:46 - operator and then 10 so guys this is one
39:48 - of the arithmetic operators that we had
39:50 - seen previously that is used in order to
39:52 - add two numbers so number + 10 in this
39:55 - case it will be 5 + 10 that is 15 and 15
39:58 - will get assigned to this number and it
40:00 - will be printed by using this line of
40:02 - code over here let me just save this
40:04 - file andent try running this code now so
40:06 - as you can see 15 is getting printed now
40:08 - guys there is another way in order to
40:10 - add this 10 to this number so we will
40:13 - simply remove this part of the code over
40:15 - here and then what we have to do is we
40:17 - have to provide number followed by plus
40:19 - operator and then equal to operator and
40:22 - then the number that we want to add to
40:23 - this number that is 10 so guys what is
40:25 - happening over here is this is the
40:27 - shorthand method for the same expression
40:29 - that we had written previously so it is
40:32 - equal to number equal to number + 10 so
40:36 - guys this is the expression that is
40:38 - working over here behind the scenes and
40:40 - 10 is getting added to this number and
40:42 - the result is getting stored in this
40:44 - number variable itself let me just save
40:46 - this file and try running this code now
40:49 - so as you can see 15 is getting printed
40:51 - over here guys this is nothing but a
40:53 - comment that we have provided I can just
40:54 - remove this part over here and let's say
40:57 - I want to add 15 now so we provide 15 as
41:00 - the number so 5 + 15 should be 20 let me
41:03 - just save this file andent try running
41:04 - this code now so as you can see 20 is
41:07 - getting printed and this is how we can
41:08 - use one of the assignment operators in
41:11 - order to add two numbers let us move to
41:13 - another assignment operator we have the
41:15 - subtraction assignment as well in which
41:17 - case we have to use minus operator
41:19 - followed by equal to symbol in which
41:21 - case this expression will get computed
41:23 - that is a it is equal to a minus three
41:26 - in this case when we provide a minus
41:29 - operator followed by equal to operator
41:31 - and then three similarly we have
41:32 - multiplication assignment in which
41:34 - multiply and equal to are used in
41:36 - combination we have division assignment
41:39 - as well in which case divide and equal
41:41 - to is used remainder assignment in which
41:43 - case this percent sign is used along
41:45 - with the equal to symbol and exponent
41:48 - assignment as well in which case the two
41:50 - times multiplication symbol is used and
41:52 - then equal to operator is used in order
41:55 - to compute the power of the numbers so
41:57 - guys let us check the remaining
41:58 - assignment operators with the help of
42:00 - examples over here so what we have to do
42:02 - is the number variable is already five
42:04 - and to this number we can simply change
42:06 - the assignment operators so let's say I
42:09 - want to subtract some number over here
42:11 - so what we will do is number then minus
42:13 - equal to operator let's say I want to
42:15 - remove two from this number so it is
42:18 - nothing but 5 - 2 in which case the
42:20 - answer should be three so let me just
42:22 - save this file and try running this code
42:24 - now so as you can see three is getting
42:26 - printed if I want to multiply this
42:28 - number so I'll simply replace this minus
42:30 - by multiplication symbol and let's say I
42:33 - provide four over here as the number so
42:35 - this should be 5 * 4 let us check what
42:38 - will be the result so 5 * 4 is 20 in
42:41 - this case let's say I want to use the
42:43 - Divide operator so we can simply use the
42:45 - divide and then equal to symbol and
42:47 - let's say I provide the number over here
42:49 - as three so let me just save this file
42:52 - enter I running this code now so 5 divid
42:54 - 3 will give us 1 66 as the result and
42:57 - that is what we are getting over here
42:59 - now guys similarly let's say I want to
43:01 - find the remainder while we divide 5 by
43:04 - three over here so we simply have to
43:06 - replace this divide Operator by the
43:08 - percent operator over here and let me
43:10 - just save this file enter running this
43:11 - code now so 5 / 3 the quotient will be 1
43:15 - in this case and the remainder will be
43:17 - two in case we don't want the decimal
43:19 - output over here so two is the remainder
43:21 - and that is what we are getting over
43:23 - here and the last operator that is the
43:25 - exponent operator over here so we simply
43:27 - provide the multiplication symbol two
43:29 - times and then equal to operator and
43:32 - then let's say we provide two over here
43:34 - so this is nothing but 5 multiplied by 5
43:36 - that is the square of the number that is
43:39 - five let me just save this file and try
43:40 - running this code now so it is 25 over
43:43 - here if you provide this as three so
43:45 - what will happen is five will be
43:47 - multiplied by the same number that is
43:48 - five three times over here so let me
43:50 - just save this file and try running this
43:52 - code now so as you can see 5 * 5 is 25
43:55 - and then 25 * 5 again will give us 125
43:59 - as the result and guys this is how we
44:01 - can use the assignment operators based
44:03 - on our requirements as the shorthand
44:06 - methods in order to carry out the
44:08 - mathematical operations on the numbers
44:10 - comparison operators in Python
44:12 - Programming so guys the comparison
44:14 - operators compare two values or the
44:17 - variables and return a Boolean result
44:19 - that can be a true or a false value so
44:22 - let's say for example as you can see we
44:24 - have two variables over here that is a
44:26 - is equal to 3 and b is equal to 5 so
44:29 - when we print this statement and inside
44:31 - this we have a comparison operator that
44:34 - is greater than operator over here that
44:36 - is a greater than b so what is happening
44:39 - behind the scenes is there is a check
44:41 - whether this variable that is a is it
44:43 - greater than b so if we see 3 is not
44:46 - greater than 5 over here in which case
44:49 - the return value will be false over here
44:51 - but in case when the value of a is
44:53 - greater than b then this particular
44:55 - expression that a is greater than b will
44:58 - return us True Value so guys let us
44:59 - check this with the help of example over
45:01 - here so let's say we have the variable a
45:03 - it is equal to 3 and the variable B it
45:06 - is equal to 5 and then when we have this
45:08 - comparison operator over here we use the
45:11 - print statement we say a greater than b
45:14 - so guys this particular operator is the
45:16 - greater than symbol over here which can
45:19 - be treated as the comparison operator in
45:21 - order to compare the two variables or
45:23 - the two numbers as well so let me just
45:26 - save this file and try running this code
45:27 - now so as you can see we are getting
45:29 - false as the result that's because the
45:31 - value of a is three and the value of B
45:34 - is five in which case a is not greater
45:37 - than b and that is why we are getting
45:38 - false over here guys similarly we have
45:41 - other comparison operators as well as
45:43 - you can see we have is equal to so
45:46 - basically 3 equal to equal to 5 no in
45:48 - this case because both these numbers are
45:50 - not equal so that is why this expression
45:53 - will give us the result as false over
45:55 - here similarly we have not equal to in
45:57 - which case it will give us true that's
45:59 - because the two numbers are not equal so
46:02 - we use the exclamation mark followed by
46:04 - the equal operator in order to check the
46:06 - not equal to expression and then we have
46:08 - the greater than sign as we have seen
46:10 - just now greater than symbol similarly
46:12 - we have less than symbol over here so
46:14 - this less than symbol will give us true
46:16 - over here that's because three is less
46:18 - than five and we also have greater than
46:20 - or equal to so guys basically what
46:22 - happens is let's say if the value of a
46:25 - and b both are three so basically is 3
46:27 - greater than three no in this case so
46:30 - false will be return but when we provide
46:32 - greater than or equal to which means we
46:34 - are checking that the two variables
46:36 - should be at least equal or greater than
46:39 - so in that case when both the values are
46:42 - three so 3 greater than or equal to
46:44 - three will give us true in this case
46:46 - similarly we will have less than or
46:48 - equal to symbol as the less than symbol
46:51 - and equal to symbol combination so guys
46:53 - let us check all these with the help of
46:55 - example examples over here so we have
46:57 - checked the greater than symbol over
46:58 - here let us check the less than symbol
47:00 - so we will simply provide print a less
47:03 - than b over here which should return us
47:05 - true in this case that's because the
47:07 - value of a is actually less than the
47:09 - value of B over here let me just save
47:12 - this file and try running this code now
47:13 - so as you can see first expression is
47:15 - false that's because a greater than b no
47:17 - in this case but is a less than b yes in
47:20 - this case and that is why we are getting
47:22 - true over here let us check some more
47:24 - comparison operators over here we
47:26 - provide the print statement is a equal
47:29 - to B over here and then let us provide
47:31 - another operator that is a not equal to
47:34 - B in this case and then we have another
47:37 - operator that is a less than or equal to
47:40 - B and then we have another operator that
47:43 - is a greater than or equal to B in this
47:46 - case so guys we have provided all the
47:47 - comparison operators over here let me
47:50 - just save this file andent try running
47:51 - this code now so as you can see these
47:53 - are the results over here so the first
47:55 - result is false that's because a is not
47:57 - greater than b a is less than b yes in
48:00 - this case so that is why we are getting
48:01 - true over here is a equal to B no in
48:04 - this case because 3 is not equal to 5 so
48:06 - we are getting false as the result then
48:09 - is a not equal to B yes both numbers are
48:12 - not equal and that is why we are getting
48:14 - true over here is a less than or equal
48:16 - to B so is 3 less than or equal to B yes
48:20 - in this case so that is why we are
48:21 - getting true and is a greater than or
48:23 - equal to B no in this case and that is
48:26 - why we are getting false over here now
48:28 - guys let us see what happens when B is
48:30 - also equal to a so we have provided both
48:33 - the values as three over here let me
48:35 - just save this file and try running this
48:37 - code now so as you can see we are
48:38 - getting the results over here so the
48:40 - first result is false that's because is
48:42 - a greater than b no in this case they
48:45 - are equal and then the second result is
48:47 - also false is a less than b no in this
48:50 - case both are false over here so Guys
48:52 - these are false that's because we are
48:54 - not checking whether they are equ equal
48:55 - or not but in the last two operators as
48:58 - you can see over here the last two
49:00 - results are true that's because we have
49:02 - included the equal to symbol so a less
49:04 - than or equal to B yes in this case
49:06 - that's because a is equal to B and is a
49:09 - greater than or equal to B yes in this
49:11 - case since a is actually equal to B so
49:14 - both these operators will return us true
49:16 - whereas both these operators will return
49:18 - us false whenever both the numbers that
49:20 - we are comparing have the same value now
49:23 - guys apart from this the third operator
49:24 - that is a is equal to B yes in this case
49:27 - and that is why we are getting true over
49:28 - here and is a not equal to B no in this
49:31 - case since A and B both are equal so
49:34 - this will return as false and that is
49:35 - what we are getting over here so Guys
49:37 - these are certain comparison operators
49:39 - that you will be using in the upcoming
49:41 - videos as well when we are going to
49:43 - check the if else statement and we will
49:45 - also be using the while loop as well in
49:48 - which case we have to use these
49:49 - comparison operators to go inside the
49:51 - loop or else to come out of the loop so
49:54 - logical operators in Python Programming
49:56 - so guys The Logical operators are used
49:59 - to check whether an expression is true
50:01 - or false so they are used in decision
50:03 - making so as you can see for example
50:06 - let's say the value of variable that is
50:08 - a is equal to 5 and the value of B
50:11 - variable is six over here and we have
50:13 - the print statement over here and there
50:15 - are two conditions that we are checking
50:17 - first of all whether a is greater than 2
50:19 - so in this case the return will be true
50:21 - over here that's because the value of a
50:23 - that is five is actually greater than
50:26 - two over here and then as you can see
50:28 - this end keyword this is nothing but
50:30 - this is one of the logical operators it
50:32 - is being used in order to check the
50:34 - multiple conditions and the second
50:36 - condition that is being checked over
50:37 - here is whether B is greater than or
50:40 - equal to 6 so in this case since B is
50:42 - equal to 6 so yes in this case it is
50:45 - also true so basically since both the
50:47 - Expressions over here that is the second
50:49 - expression and the first expression is
50:51 - true and because this end logical wants
50:54 - all the Expressions to be true the
50:56 - return for the entire expression will be
50:58 - true over here so as you can see these
51:00 - are certain logical operators over here
51:02 - first of all we have the end operator
51:04 - which means A and B it is true only if
51:07 - both the operant that is a and b are
51:09 - true over here similarly we have r as
51:11 - well so as you can see A or B in this
51:14 - case only one oponent needs to be true
51:16 - that is only one condition needs to be
51:18 - true over here so this will be true if
51:20 - at least one of the operant is true and
51:23 - then we also have the not operator in
51:25 - which case we can use it as not a so it
51:28 - will be true if the operant is false and
51:30 - it will be false when operant is true
51:32 - over here so guys let us check all this
51:34 - with the help of examples over here so
51:36 - let's say we have the variable that is a
51:38 - is equal to 5 and B it is equal to 6
51:41 - over here so we simply have the print
51:43 - statement and let's say we provide the
51:46 - condition that is a is it greater than
51:48 - two over here and we also have another
51:51 - condition so using the end logical
51:53 - operator over here we can combine
51:55 - multiple conditions so next time we will
51:57 - be checking whether B is greater than or
52:00 - equal to 6 so guys in this case both
52:02 - these conditions that is a greater than
52:04 - two will return as true and then B is
52:06 - greater than or equal to 6 will also
52:08 - return as true so this entire expression
52:11 - will be true over here so let me just
52:13 - save this file and try running this code
52:14 - now so as you can see true is getting
52:17 - returned over here now what if one of
52:18 - the conditions is false over here so
52:20 - what we have to do is let's say I
52:22 - provide a less than 2 in which case this
52:25 - particular expression will become false
52:27 - so let me just save this file and try
52:28 - running this code now so as you can see
52:30 - false is getting returned that's because
52:32 - one of the Expressions while using the
52:34 - end logical operator is false over here
52:37 - and according to rules all the
52:39 - Expressions while using the end logical
52:41 - operator must be true in order to return
52:43 - the true s result now guys if we check
52:46 - the same conditions that is both these
52:48 - conditions by using the or logical
52:50 - operator so we simply have to provide or
52:52 - over here and let me just save this file
52:54 - and try run running this code now so as
52:56 - you can see true is getting returned
52:58 - that's because the second expression
53:00 - over here is true and the first
53:01 - expression over here is false so anyway
53:04 - the or logical operator wants one of the
53:06 - conditions to be true and that is why we
53:08 - are getting the true as the result over
53:10 - here what if we make the second
53:12 - condition false over here so let me just
53:14 - change this expression to B less than 6
53:17 - over here let me just save this file and
53:19 - try running this code now so as you can
53:21 - see false is getting return that's
53:22 - because is a less than 2 no in this case
53:25 - so false is getting returned over here
53:27 - and is B less than 6 over here no in
53:30 - this case it is equal to 6 so this
53:31 - expression is also false so the entire
53:34 - expression is false and that is the only
53:36 - combination where the or logical
53:38 - operator will return us the false result
53:41 - now guys when do we use this not
53:42 - operator over here so let's say I have
53:44 - just a simple expression so over here I
53:47 - will provide is a less than 4 over here
53:50 - so in this case is a less than 4 no so
53:53 - it should return false so let us save
53:55 - this file and try running this code now
53:57 - so it is returning false over here but
53:59 - what if we want the opposite of this
54:01 - result so if the result of any of the
54:03 - expression is false we want to print
54:06 - true but if the result of any expression
54:08 - is true we want to return it as false so
54:11 - what we have to do is we simply have to
54:13 - provide not logical operator and the
54:15 - expression needs to be provided within
54:18 - the parenthesis over here as we can see
54:20 - so let me just save this file now so
54:22 - since it was returning false by using
54:24 - the not logical operator it should now
54:26 - return true so let me just run this code
54:28 - once again so it is returning true over
54:31 - here similarly if let's say this
54:32 - particular expression turns out to be
54:34 - true so we will get false as the result
54:37 - so let's say I provide a greater than 4
54:39 - so is a for which the value is five over
54:42 - here is it greater than four yes in this
54:45 - case so this will return us true but
54:47 - since we are using the not logical
54:48 - operator it will return this True Result
54:51 - to false and it will be printed so let
54:53 - me just save this file ENT running
54:55 - running this code now so as you can see
54:56 - false is getting returned over here and
54:58 - it is being printed so Guys these are
55:00 - certain logical operators that we will
55:02 - be using in the upcoming videos as well
55:04 - when we are going to use the if else
55:06 - statement apart from that we will be
55:08 - also using the while loops and other
55:10 - control statements as well where we are
55:12 - going to use these logical operators so
55:15 - guys practice on your own so that on
55:16 - different inputs you get different
55:18 - outputs IFL statement in Python
55:21 - Programming so guys in computer
55:22 - programming we use the if statement to
55:25 - run a block of code only when a certain
55:28 - condition is meant so for example as you
55:31 - can see assigning grades that is a BC
55:33 - based on the marks obtained by a student
55:36 - so basically over here in this case we
55:38 - will be using the if condition now what
55:40 - can be the conditions we can say that if
55:42 - the percentage of the student is above
55:45 - 90% so assign grade A in the same way if
55:48 - the percentage is above 75% then assign
55:52 - Grade B and if the percentage is above
55:55 - 65% but less than 75% then assign grade
55:59 - C so during such conditions we have to
56:01 - use the if else statement over here now
56:03 - similarly in Python there are three
56:06 - forms of if else statement so we are
56:08 - going to check all these forms of
56:10 - statements one at a time with the help
56:11 - of examples the first part is the if
56:13 - statement in which case we are going to
56:15 - Simply have the if statement over here
56:17 - along with the condition and the block
56:19 - of code the next form will be if else
56:22 - statement in which case we will also
56:24 - have the lse block over here and the
56:26 - third form of the IFL statement will be
56:28 - first we will be having the if statement
56:30 - and Then followed by the L if statement
56:32 - in which case we have another condition
56:34 - over here and then finally we have the
56:37 - else statement over here so let us check
56:39 - all this with the help of examples in
56:40 - the vs code so over here let's say we
56:43 - have the value of x it is equal to 10
56:46 - now what we have to do is we have to
56:48 - provide the if condition over here so as
56:50 - you can see when we type if keyword over
56:52 - here vs code is suggesting us that we
56:54 - can we can use this if keyword so we are
56:56 - going to use this and then we are
56:58 - supposed to have some condition so we
57:00 - can say x greater than 5 over here so
57:03 - guys this is one of the comparison
57:05 - operators that we have already seen
57:06 - previously it will check whether this
57:08 - left hand side variable is it greater
57:10 - than the value that is present on the
57:12 - right hand side so guys this is one of
57:14 - the conditions that we are going to
57:15 - check and then followed by a colon over
57:18 - here so guys this is the format in which
57:20 - we provide the if condition and if this
57:23 - condition that is whether X is is
57:25 - greater than five if it is true then we
57:27 - want to come inside this and there will
57:29 - be the block of code we need to have
57:31 - certain statements over here so we will
57:34 - say print and we can simply put the
57:36 - string that is X is greater than 5 over
57:40 - here since that is the condition that we
57:42 - have checked so this is the very simple
57:44 - code that we can have with the if
57:46 - condition over here let me just save
57:47 - this file and try running this code now
57:49 - so as you can see it is displaying X is
57:52 - greater than 5 now guys this is just one
57:54 - state statement that we have provided
57:56 - inside the if condition we can also have
57:58 - multiple lines of code inside this block
58:00 - over here after the if condition so we
58:03 - simply have to press enter and provide
58:05 - the another print statement and let's
58:07 - say we will simply put we have check X
58:11 - so we have a very general statement over
58:13 - here that is we have checked X over here
58:15 - let me just save this file and running
58:17 - this code now so as you can see X is
58:19 - greater than 5 this thing is getting
58:21 - printed and this statement that is we
58:23 - have checked X is also Al getting
58:25 - printed so all the lines of code that is
58:28 - present inside the block after this
58:30 - condition that we have provided in the
58:32 - if statement will be executed only when
58:35 - this condition that is X greater than 5
58:37 - is true now what if this condition is
58:39 - not true so let's say I provide X less
58:42 - than 5 over here in which case this
58:44 - condition will become false so what will
58:46 - happen is the control flow will not go
58:48 - inside this block and it will not print
58:51 - these statements over here let us verify
58:53 - this I will just save this file and try
58:55 - running this code now so as you can see
58:57 - nothing is getting printed over here
58:59 - that's because these lines of code are
59:01 - not getting executed because this
59:03 - condition was false now how do we verify
59:05 - that we have to come out of this block
59:08 - so basically we have indented this code
59:10 - that is there are some space characters
59:12 - over here in this line that is why these
59:14 - lines of code over here are treated to
59:16 - be present inside the block after this
59:19 - condition we have to come out of that
59:21 - block over here so we simply press enter
59:24 - and then we press as backspace so that
59:25 - the cursor is aligned to this if
59:27 - condition over here now we can simply
59:29 - provide another print statement and I
59:32 - will simply say outside if statement so
59:36 - over here we say outside if statement
59:38 - now guys this line of code it will
59:40 - confirm that the control flow has come
59:42 - out of the if block over here so let me
59:45 - just save this file now and try running
59:46 - this code so as you can see we are
59:48 - getting outside if statement that's
59:50 - because X less than 5 condition was
59:53 - false and that is why these two lines of
59:55 - code were not printed and then the
59:57 - control Flow came out of the if
59:59 - condition and then this line that is
60:00 - outside if statement was printed so guys
60:03 - it is very important that you follow
60:04 - this indentation as far as your python
60:07 - programs are concerned you might get
60:09 - incorrect output if you don't follow
60:11 - such indentations properly now let us
60:13 - move to another form of if statement so
60:15 - over here the second form is we provide
60:17 - the else part as well so the first part
60:19 - we have already seen that is using the
60:21 - if statement let us now use the else
60:23 - statement as well so over here what we
60:25 - will do is first of all we will check
60:27 - whether X is greater than 5 and then we
60:29 - will print that is X is greater than 5
60:32 - over here now what if X is not greater
60:34 - than 5 that means it is less than or
60:36 - equal to 5 so we have to define the lse
60:39 - part over here so first of all we have
60:41 - to remove this indentation part so I'll
60:43 - just press on backspace and then we
60:45 - provide the else keyword as you can see
60:47 - vs code is suggesting us this lse
60:49 - keyword over here we will use this and
60:52 - then followed by colon and then we can
60:53 - go inside this block of code and
60:55 - similarly we will have another print
60:57 - statement in this case we will say X is
61:00 - not greater than 5 so we are checking
61:03 - whether X is greater than 5 and we will
61:05 - say x is greater than 5 if this
61:07 - condition is true and if this is not
61:09 - true then it will go in the lse part and
61:12 - it will say X is not greater than 5 and
61:14 - after this part of code gets executed
61:17 - the control flow will come over here and
61:18 - it will print this statement that is
61:20 - outside if statement over here so let me
61:22 - just save this file enter running this
61:24 - Cod now so as you can see it says X is
61:27 - greater than 5 so over here since the
61:29 - value of x it is 10 it is printing X is
61:32 - greater than five after this x greater
61:34 - than 5 condition is true and then after
61:36 - that we are getting outside if statement
61:38 - so the control flow did not go inside
61:41 - this else part that's because it went
61:43 - inside this if part and this line of
61:45 - code was executed so guys the control
61:47 - flow can only go inside one block of
61:50 - code if this condition is true then it
61:52 - will come out it will not go inside the
61:54 - else part and if this condition becomes
61:56 - false then it will go over here in the
61:59 - else part and execute that line of code
62:01 - so let us check that second scenario now
62:03 - what if X is not greater than 5 so we
62:05 - will change the value of x and let us
62:07 - say the X values is 2 now so in this
62:10 - case is X greater than 5 no in this case
62:13 - so this line of code that is X is not
62:15 - greater than 5 should get printed let me
62:17 - just save this file enter I running this
62:19 - code now so as you can see X is not
62:22 - greater than 5 this line of code is
62:24 - getting printed that's because the
62:26 - condition was false and the control Flow
62:28 - came in the else part and it executed
62:30 - this line of code after this outside if
62:33 - statement got printed over here as you
62:34 - can see on the console so guys this is
62:36 - one of the examples of the if else
62:38 - statement that we can use guys there
62:40 - will be many instances where you will be
62:42 - using this if else statement in your
62:44 - actual programs so make sure that you
62:46 - practice on your own now after this let
62:49 - us see another part that is we have the
62:51 - L if as well so guys let us take this
62:53 - example over here that is of grading
62:55 - system so if the percentage is greater
62:57 - than 90 we have to assign the grade that
62:59 - is a If the percentage is greater than
63:01 - 75 but less than 90 then we will say the
63:05 - grade is B and if the percentage is
63:07 - greater than 65 but less than 75 then we
63:10 - have to put the gr as C so guys let us
63:12 - move to the code over here let us clear
63:14 - all these lines of code and over here we
63:16 - will simply have the percentage variable
63:19 - and let's say we have 95 as the
63:21 - percentage initially and then we have
63:23 - another variable that is great let's say
63:25 - it is equal to D initially so we have
63:27 - this character that is D over here now
63:29 - what we have to do is we have to provide
63:31 - the if condition and the first condition
63:33 - is whether the percentage is above 90 so
63:36 - over here we will say inside the if
63:38 - condition first of all whether this
63:40 - percentage is it above 90 over here so
63:43 - we will simply have percentage greater
63:45 - than 90 and if this is true then we have
63:48 - to provide colon and then we have to
63:50 - make the value of this grade as a so
63:52 - grade it is equal to a over here inside
63:55 - the single codes now we have another
63:57 - condition that is if the percentage is
63:59 - greater than 75 but if it is less than
64:02 - or equal to 90 then it should be B so
64:04 - what we have to do is we can use the L
64:06 - If part over here so we have L if
64:09 - keyword so as you can see vs code is
64:11 - suggesting us this L if keyword over
64:13 - here followed by we have to check
64:15 - whether this percentage again is it
64:18 - greater than 75 so over here if it is
64:21 - greater than 75 then we have to come in
64:23 - this block of code and then after this
64:25 - again we have to assign the value to
64:27 - this grade variable and this time the
64:29 - value will be B over here so we will
64:31 - assign the value to grade as B and then
64:34 - after this we will again have the L If
64:36 - part over here and we need to check
64:38 - whether the percentage is greater than
64:40 - 65 or not and then in that case we have
64:42 - to provide C so over here we will say l
64:45 - if percentage it is greater than 65 in
64:50 - this case and then if this is true then
64:52 - we have to provide the grade value as C
64:56 - over here and then guys we can also have
64:58 - the else part over here and we can
65:00 - simply provide that the grade in the lse
65:02 - part it can be D over here in case the
65:05 - percentage is less than 65 so we can
65:07 - have grade as D and then finally we will
65:09 - have the print statement over here so we
65:11 - have the print function and we will
65:13 - simply provide the grade value so the
65:16 - grade is and then we have comma and then
65:19 - the grade variable over here so guys
65:21 - over here as you can see initially the
65:23 - percentage is 990 5 so it should go
65:25 - inside the first if statement so let me
65:27 - just save this file now and try running
65:29 - this code so as you can see we are
65:31 - getting some error over here at the else
65:33 - part so over here we have forgot to
65:35 - provide the colon after the else part so
65:37 - it is very important that we provide the
65:39 - colon after any of these keywords that
65:41 - we have used and the conditions that we
65:43 - have used so let me just save this file
65:44 - and try running this code now so as you
65:46 - can see the grade is a that's because
65:48 - the percentage value is 95 and in this
65:51 - case percentage is greater than 90 and
65:53 - that that is why the grade is being
65:55 - assigned as the value as a now what if
65:57 - the percentage value is not greater than
65:59 - 90 so let's say we provide the
66:01 - percentage value as 85 so in this case
66:03 - the control flow will come over here it
66:05 - will check whether percentage greater
66:06 - than 90 no in this case then it will go
66:09 - inside the L If part so is percentage
66:11 - greater than 75 yes in this case so this
66:14 - line of code that is grade equal to B
66:17 - will get executed and then the control
66:18 - flow will come directly out of the if
66:20 - else statement and it will print the
66:22 - grade over here that means save this
66:24 - file and try running this code now so as
66:26 - you can see the grade is being assigned
66:28 - the value as B so grade is B is getting
66:30 - printed over here similarly let's say we
66:32 - provide the percentage value as 70 so
66:35 - this time this condition that is
66:37 - percentage greater than 65 will get
66:39 - executed because the previous conditions
66:41 - are already false in this case so let me
66:43 - just save this file enter I running this
66:45 - code now so grade must be C so as you
66:47 - can see the grade is C over here and
66:49 - what if the percentage is less than 65
66:51 - so let's say we provide the percentage
66:53 - as 6 T So finally the lse part that is
66:56 - grade equal to T will get executed so
66:59 - let me just save this file and try
67:00 - running this code now so now in this
67:02 - case the grid is D so in this way we can
67:04 - easily use the IFL statement we can also
67:06 - use the L if keyword in order to check
67:09 - the intermediate conditions over here
67:11 - for Loop in Python Programming so guys
67:14 - in computer programming Loops are used
67:16 - to repeat a block of code so let's say
67:19 - for example if we want to show a message
67:21 - 10 times we don't have to print that 10
67:24 - number of times over here we can simply
67:26 - use the loop in order to repeat the same
67:29 - message again and again 10 times so in
67:31 - Python the fall Loop is used to run a
67:34 - block of code for a certain number of
67:36 - times so in this example we have
67:38 - considered 10 we can have any number of
67:40 - iterations so basically it is used to
67:42 - iterate over any sequences such as list
67:45 - tle string Etc so guys this is the
67:48 - syntax of the Fall Loop in Python
67:50 - Programming so first of all we have the
67:52 - for keyword followed by by a particular
67:54 - value or a variable and then we have
67:57 - this in keyword which is a kind of a
67:59 - membership operator that we have seen
68:00 - previously and then we have the sequence
68:03 - now this sequence can be anything it can
68:05 - be a list tole or any other sequence
68:07 - over here so let us check this with the
68:08 - help of examples now so over here what
68:11 - we will do is let's say we have the
68:13 - variable name as X and we have the list
68:15 - of numbers over here so in order to
68:17 - define the list we have the open and
68:19 - close square brackets and we have the
68:21 - list of numbers let's say we have one
68:23 - followed by two and then we have three 4
68:27 - and then five so we have the top five
68:29 - numbers over here inside this list that
68:31 - is defined in the variable X now what we
68:33 - want to do is we want to print all these
68:36 - numbers one at a time on the separate
68:38 - lines so we can simply use the for Loop
68:41 - over here so for and what we will do is
68:43 - let's say we provide value as the
68:46 - variable name and then we provide the in
68:48 - keyword which is the membership operator
68:50 - and after this on the right hand side of
68:52 - the in keyword we are supposed to have
68:54 - the sequence so the sequence in this
68:56 - case is the variable that is X over here
68:59 - so this is the format of the Fall Loop
69:01 - whenever we are going to iterate through
69:02 - a list or a sequence now inside this we
69:05 - can have the block of code over here so
69:07 - we simply want to print all the values
69:09 - so we have the print function and we can
69:11 - simply provide this value that is
69:13 - variable so guys what is happening
69:15 - behind the scenes is this x that is the
69:17 - list of all the numbers one at a time
69:20 - the number is being assigned to this
69:22 - variable that is value so first of all
69:24 - one will get assigned to value and this
69:26 - value that is one will get printed and
69:28 - then the control flow will go back again
69:30 - in the sequence at is X it will check
69:32 - whether there is a next element or not
69:34 - so two will get printed and then again
69:36 - three and then four and then five and
69:39 - then after this when the control flow
69:40 - comes over here it sees that there is no
69:43 - other element after this Fifth Element
69:45 - so the control flow will come out of
69:47 - this fall Loop and then the other lines
69:49 - of code after this fall Loop will get
69:51 - printed so guys let me just save this
69:52 - file enter I running this code now so as
69:55 - you can see all the numbers are getting
69:56 - printed over here on the terminal that
69:58 - is 1 2 3 4 5 now guys let's say we want
70:02 - all these numbers to be printed on the
70:04 - same line so previously we had seen that
70:07 - we have certain parameters in the print
70:09 - function that will help us in order to
70:11 - print the values in a specific way so
70:14 - over here we have one of the parameters
70:16 - that is end over here so we provide end
70:18 - and this parameter helps us in order to
70:20 - separate the different elements that we
70:22 - want to print so what we are going to do
70:25 - is I'm going to separate all the numbers
70:27 - using the comma character so I have
70:29 - provided the comma character over here
70:31 - so all the numbers that were printed on
70:33 - the different lines will get printed on
70:35 - the same line now so let me just save
70:36 - this file enter I running this code now
70:39 - so as you can see 1 2 3 4 5 is getting
70:41 - printed we are getting this additional
70:43 - comma over here at the end that's
70:45 - because after the last value is getting
70:47 - printed the comma is appended after that
70:49 - last value so guys this is one of the
70:51 - ways in which we can use the fall Loop
70:53 - in order to carry out our operations now
70:55 - guys there is another important thing
70:57 - that you must know in Python the fall
70:59 - loop with python range can also be used
71:02 - so in Python a range is a series of
71:04 - values between two numeric intervals we
71:06 - use the Python's built-in function that
71:08 - is range to define a range of values so
71:11 - let's say we want to define the top 10
71:13 - numbers over here we can simply use the
71:16 - range function instead of defining them
71:18 - one at a time like how we have defined
71:20 - in this list so basically in order to
71:22 - have the top 10 numbers we have to
71:24 - manually Define it as 1 to 10 over here
71:27 - but we can also get rid of this part we
71:29 - can have the range method over here so
71:31 - as you can see when we type range vs
71:33 - code is suggesting us this function that
71:35 - is range over here and we simply have to
71:37 - provide a number over here so let's say
71:39 - we provide 10 as the number so what is
71:41 - happening is the list of 10 numbers over
71:44 - here is getting assigned to the variable
71:46 - that is X over here starting from the
71:48 - number zero up to the number that is
71:50 - nine so over here we will be seeing all
71:52 - the numbers starting from zero up to 9
71:55 - over here the last number that is 10 is
71:57 - excluded from the list so if we Simply
71:59 - Save this file enter running this code
72:01 - now we will get these numbers that is 0
72:04 - 1 2 3 4 5 6 7 8 9 so 10 numbers are
72:08 - getting displayed over here that's
72:10 - because we have provided 10 inside the
72:12 - range built-in method what if we provide
72:14 - 20 over here so 0 to 19 numbers will be
72:17 - displayed so let me just save this file
72:18 - and try running this code now so as you
72:20 - can see 0 to 19 is getting displayed so
72:23 - guys let's say if someone had told you
72:25 - write a Python program in order to print
72:28 - top 20 numbers starting from the number
72:31 - 0 up to 19 so instead of having the
72:34 - print statements 20 number of times and
72:36 - writing each and every number inside the
72:39 - print statement we can simply have the
72:41 - range method over here and we can use
72:43 - the fall Loop in order to iterate
72:45 - through the list that we have already
72:47 - defined over here and that is how we
72:49 - simplify the problem that is given to us
72:52 - and write the Python program program now
72:54 - guys there is another variation over
72:55 - here python fall loop with the else part
72:58 - so after this fall Loop we can also have
73:00 - the else part that will mandatorily get
73:02 - executed after we reach the end of this
73:05 - sequence that we have provided in the
73:07 - fall Loop so what we will do is we will
73:09 - simply come out of this block of code
73:11 - and we will have the else part over here
73:14 - and we will simply print outside fall
73:16 - Loop over here so we have outside for
73:21 - Loop so guys what will happen is after
73:23 - the control flow comes out of this fall
73:25 - Loop the control flow will go inside
73:27 - this L's part and it will execute this
73:29 - line of code and print outside fall loop
73:32 - on the console now guys this print
73:34 - statement will be printed on the same
73:35 - line that's because we have provided the
73:38 - end part over here and there is a comma
73:40 - over here so you can expect the string
73:42 - to be present on this same line over
73:44 - here so let me just save this file
73:45 - andent try running this code now so as
73:47 - you can see 0 to 19 that is all the
73:50 - numbers are getting printed and then the
73:52 - last line that is outside fall Loop is
73:54 - getting printed over here so in case you
73:56 - want to print something or carry out
73:58 - certain operations after the execution
74:00 - of the Fall Loop you can have the lse
74:03 - part as well and it will carry out the
74:05 - operations over here after the end of
74:07 - this sequence is reached so guys this is
74:09 - the main functionality of the Fall Loop
74:11 - that is in order to iterate through the
74:12 - sequence we can also have the sequence
74:14 - of list of strings as well we can also
74:17 - have tle or dictionary as well so guys
74:19 - it depends on your requirements as to
74:21 - what exactly you want to find out
74:23 - through the python programs while loop
74:26 - in Python Programming so guys previously
74:28 - we have seen how the fall Loop works in
74:30 - the Python Programming now the python y
74:32 - Loop is used to run a specific code
74:35 - until a certain condition is met so
74:37 - basically in the fall Loop there was no
74:39 - such condition that we had provided but
74:41 - it was iterating through a list that we
74:43 - had provided in the form of a variable
74:46 - but over here this is the syntax of the
74:48 - while loop first of all we have the
74:50 - while keyword over here and then we have
74:52 - a certain condition and if this
74:54 - condition is true then only the control
74:56 - flow will go inside the body of the V
74:58 - Loop and then again the control flow
75:00 - will come over here it will check the
75:02 - condition again and if the condition is
75:04 - true once again it will again go inside
75:07 - the body of this while loop so guys
75:09 - again and again the control flow will
75:10 - come inside the while loop until and
75:12 - unless the condition becomes false so
75:15 - when this condition becomes false the
75:17 - control flow will come out of this while
75:19 - loop and that is how the while loop is
75:20 - going to work in the Python Programming
75:22 - so guys let us check this with the help
75:24 - of examples now so let's say we want to
75:26 - print the first five numbers that is 1
75:28 - to 5 so over here initially we can have
75:30 - the variable that is I it is equal to 1
75:33 - and the second variable that is J it is
75:35 - equal to 5 so this is the starting point
75:38 - that is I equal to one and the ending
75:40 - point is J is equal to 5 so basically we
75:43 - can have a while loop over here we will
75:45 - simply have the while keyword and the
75:47 - condition that we have to give is
75:49 - whether I is less than or equal to J and
75:52 - up to that that condition we want to
75:54 - print the value of I so basically it is
75:57 - I less than or equal to J over here so
76:01 - if this condition is true we want to
76:03 - print the value of I which will be one
76:05 - initially so basically I want to print
76:08 - this number that is I over here now guys
76:11 - what exactly is happening over here is
76:12 - I's value is 1 initially J value is five
76:15 - initially so is I less than or equal to
76:17 - J in the first instance yes in this case
76:20 - so I will be printed which is equal to 1
76:22 - so again it will go inside the Y Loop
76:25 - and it will check whether 1 is less than
76:27 - or equal to 5 yes in this case so guys
76:29 - we are not changing any of the values
76:31 - that is I or J over here so this will be
76:34 - infinite Loop because again and again
76:36 - the condition will be true and the
76:38 - number that is I which is equal to 1
76:41 - will get printed indefinitely so what we
76:43 - have to do is we have to increment the
76:45 - value of I because after 1 we want to
76:47 - print the value that is two over here so
76:49 - what we will do is we will simply add
76:51 - one to I so I it is equal to I + 1 we
76:56 - can also use the Shand method that is I
76:58 - + equal to 1 over here so what will
77:01 - happen now is I's value is updated to I
77:03 - + 1 which will be 2 now so is 2 less
77:06 - than or equal to 5 yes in this case and
77:08 - then again two will get printed and then
77:11 - I will again get incremented over here
77:13 - so the I's value will be three next time
77:15 - I's value will be four and then again
77:17 - I's value will be five and then
77:19 - ultimately when I's value is six this
77:22 - condition will become false that's
77:23 - because 6 is not less than or equal to 5
77:26 - and the control flow will come out of
77:28 - the V Loop so guys let me just save this
77:30 - file and try running this code now so as
77:32 - you can see all the numbers that is 1 2
77:34 - 3 4 5 is getting printed after the I's
77:37 - value is five over here 5 is getting
77:39 - printed now I's value becomes 6 over
77:42 - here that's because 5 + 1 will be 6 and
77:44 - is 6 less than or equal to 5 because the
77:46 - J's value is five over here in this case
77:49 - so no the condition becomes false and
77:51 - the control flow comes out of the while
77:53 - loop now what if we want to print all
77:55 - these numbers on the same line so simply
77:57 - inside the print statement we can have
77:59 - the comma and then we can have the end
78:01 - operator and then let's say we want to
78:03 - separate all the numbers with the space
78:05 - characters so inside the double codes we
78:07 - have provided the space character over
78:09 - here so let me just save this file and
78:10 - try running this code now so as you can
78:13 - see 1 2 3 4 5 is getting printed over
78:15 - here we can have any numbers over here
78:17 - let's say I is starting from 11 and
78:20 - let's say we want J is equal to 20 so in
78:23 - this case 11 to 20 should get printed
78:25 - let me just save this file and try
78:26 - running this code now so as you can see
78:29 - 11 12 13 14 and up to 20 numbers are
78:32 - getting printed over here so guys this
78:34 - is the main functionality of the while
78:36 - loop it is going to have a certain
78:38 - condition and if this condition is true
78:40 - the block of code inside the while loop
78:43 - will get executed and once the condition
78:45 - becomes false control flow comes out of
78:48 - the while loop now guys we can also use
78:50 - the lse part with the while loop so over
78:52 - here as you can see python while loop
78:54 - with the else part so a while loop can
78:56 - have an optional else block as well the
78:59 - else part is executed after the
79:01 - condition in the while loop evaluates to
79:03 - false so basically after this while loop
79:06 - we can also have the else part which is
79:08 - optional so we can have the else part
79:10 - over here what we will do is we will
79:12 - simply have the print statement that is
79:14 - outside the while loop so we have the
79:16 - print function and we will say outside
79:20 - while loop over here so let me just save
79:22 - this file inter I running this code now
79:25 - so as you can see 11 12 13 up to 20
79:28 - numbers are getting printed and then on
79:30 - the same line the outside while loop the
79:32 - statement that we have provided in the
79:34 - else part is getting printed so this is
79:36 - the functionality of the else part after
79:38 - the while loop it is optional if you
79:40 - want to have we can have it or else we
79:42 - don't need to have it but guys the
79:43 - important thing is inside the V Loop we
79:46 - can provide a particular condition and
79:48 - the control flow will go again and again
79:50 - inside the while loop until the
79:51 - condition is true once a condition
79:53 - becomes false the control flow will come
79:55 - out of the V Loop now guys what you
79:57 - should use whether you should use the
79:59 - python fall Loop or python while loop
80:01 - over here so guys basically they are
80:03 - used based on the specific requirements
80:05 - so as you can see fall Loop is usually
80:07 - used when the number of iterations is
80:10 - known so as we had seen previously in
80:12 - the fall Loop we provide a particular
80:14 - sequence and iterate through that
80:16 - sequence by giving one value at a time
80:18 - to a variable and we use that variable
80:21 - inside the block of the Fall Loop but in
80:23 - the while loop there is a condition so
80:25 - while loop is usually used when the
80:26 - number of iterations are unknown so we
80:28 - don't know the number of iterations we
80:30 - don't have the sequence of elements or
80:32 - the list of numbers through which we
80:34 - want to iterate so basically we provide
80:36 - the condition in the while loop So based
80:38 - on these requirements you can choose
80:40 - whether you want to use the while loop
80:42 - or you want to use the fall Loop but
80:44 - guys it is very important that you
80:46 - practice both these Loops the
80:47 - implementation of these Loops are very
80:49 - important as far as Python Programming
80:51 - is concerned so functions in Python
80:53 - Programming so guys we will learn about
80:55 - the python function and the function
80:57 - expressions with the help of examples so
81:00 - basically a function is a block of code
81:03 - that performs a specific task so it can
81:05 - be any task that you want to implement
81:08 - based on your requirements but it is the
81:10 - block of code that you can put inside
81:12 - the function and that block of code will
81:14 - have your implementation of the logic
81:17 - now suppose you need to create a program
81:19 - to create a circle and color it so there
81:21 - are two task over here that is first of
81:24 - all in order to create a circle and the
81:26 - second thing is to color it so you can
81:28 - create two functions to solve this
81:30 - problem that is the first function will
81:32 - be to create a circle and that will be
81:34 - one function and another function will
81:36 - be to create a color over here so
81:38 - basically what we have done is we have
81:40 - divided a complex problem into smaller
81:43 - chunks which makes it easier to
81:45 - understand the program and reuse the
81:47 - functions as well so there are two types
81:49 - of functions so first of all we have
81:51 - already seen some standard Library
81:53 - functions as well one of the example is
81:55 - the print statement that is the print
81:57 - function so these are buil-in functions
81:59 - in Python that are available to use so
82:01 - let us check some examples of standard
82:03 - Library functions over here so
82:05 - previously we have seen the print
82:06 - statement so this is nothing but one of
82:09 - the built-in functions which take
82:10 - multiple parameters so one of the
82:13 - parameters is the value so when we are
82:15 - providing programming for beginners the
82:18 - string which is the name of the YouTube
82:20 - channel as well which you should
82:21 - definitely subscribe type so this is the
82:23 - string that we have provided to the
82:25 - print function and this string is being
82:28 - passed to the print built-in method and
82:30 - behind the scenes this print function is
82:33 - having some sort of code that will help
82:35 - us in order to print the statement on
82:38 - the terminal so when we save this file
82:40 - and try running this code now basically
82:42 - this programming for beginners is
82:43 - getting printed what we have done we
82:45 - have just called that function and the
82:47 - implementation is behind the scenes so
82:49 - this is one example of a built-in
82:51 - function similarly we have another
82:53 - buil-in function that is range which
82:55 - helps us in order to have the list of
82:58 - numbers from zero up to the number that
83:00 - we have provided so let's say we provide
83:02 - the number 10 so it will provide us all
83:05 - the numbers before 10 starting from zero
83:07 - so this is another built in function so
83:09 - similarly we have other standard Library
83:11 - functions as well now you can also have
83:14 - the user defined functions so in case
83:16 - your requirement is not fulfilled by
83:18 - using one of the standard functions that
83:20 - is being provided by python you can have
83:23 - your own user defined functions also so
83:26 - we can create our own functions based on
83:28 - our requirements and this is the sentex
83:31 - that is first of all we have this
83:32 - keyword that is DF which means Define
83:35 - and then we have the function name so
83:37 - this function name will be the name of
83:39 - the function like this range is the name
83:41 - of the function then the print function
83:43 - the print name is the function name over
83:45 - there so similarly we can have our own
83:47 - function name and after that we have the
83:49 - list of arguments we can have any number
83:51 - of arguments over here here inside that
83:53 - we will have the function body where our
83:55 - implementation code will be present and
83:58 - then we can also have the optional
84:00 - return statement which means it will
84:02 - return some value so over here as you
84:04 - can see this is the example we have the
84:06 - defined keyword and Then followed by the
84:08 - greed function over here so it is not
84:10 - taking any arguments for now it is
84:12 - simply printing some statement that is
84:14 - inside greed function now how do we call
84:16 - this function simply we use the function
84:19 - name that is GD followed by open and
84:21 - close parenthesis and then we call the
84:23 - print function and we say outside
84:25 - function so guys let us check this with
84:27 - the help of example over here so simply
84:29 - we will have the Define keyword so DF
84:32 - and let's say we have sum and then
84:34 - underscore numbers so basically what we
84:37 - are doing over here is we will be adding
84:39 - two numbers so over here we have the
84:41 - open and close parenthesis and then
84:43 - after that we have a colon and let's say
84:45 - we have the number a it is equal to 10
84:48 - and then we have number B it is equal to
84:51 - 20 we want to print the sum of these
84:53 - numbers so we simply provide print
84:56 - function inside this and we say A + B
85:00 - and then we can also have the string
85:01 - over here let's say we have sum of A and
85:06 - B and then we have colon and then after
85:09 - this we have comma and then we have a
85:11 - plus b over here so guys this is the
85:13 - function that we have already defined we
85:15 - have two numbers that is a is equal to
85:17 - 10 and B is equal to 20 now if we Simply
85:20 - Save this file and try running this code
85:22 - we will not get anything so as you can
85:24 - see there is no print statement which is
85:26 - helping us in order to print something
85:28 - on the terminal why so because this code
85:30 - is present inside a function which is
85:32 - not called yet so we need to call this
85:35 - function that is some numbers so how do
85:37 - we call it by simply calling the name so
85:39 - we simply have to provide some numbers
85:42 - over here and then open and close
85:44 - parenthesis and that's it we have simply
85:46 - called this function which will make the
85:48 - control flow go to this particular
85:50 - function over here and inside it will go
85:52 - go it will check that a value is 10 B
85:54 - value is 20 and it will print sum of A
85:57 - and B it will carry out this operation
86:00 - that is A+ B so let me just save this
86:02 - file and try running this code now so as
86:04 - you can see sum of A and B it is equal
86:06 - to 30 and that is how we can simply
86:08 - provide the function now guys why do we
86:10 - write this function just to add two
86:12 - numbers so let's say you have a scenario
86:15 - you have 8 is equal to 10 and then we
86:17 - have B is equal to 20 and you want to
86:20 - print the sum so you can simply provide
86:22 - print a + b so you will get the answer
86:25 - as 30 now with the same requirement you
86:28 - have another requirement as well in the
86:30 - same code that is with this particular
86:32 - addition you want to add more two
86:34 - numbers so what you will do is you will
86:35 - simply copy and paste these lines of
86:38 - code once again that is the three lines
86:39 - of code over here but this time the age
86:41 - value is something else so let's say we
86:43 - have something like 50 and then 60 over
86:46 - here so what will happen is with this
86:47 - print statement it will print the sum of
86:49 - these two numbers now let's say there is
86:51 - another requirement m in which case all
86:53 - the sum needs to be printed at once and
86:55 - you have two more numbers so you will
86:57 - again copy these lines of code and then
87:00 - again paste this over here and then
87:01 - let's say the numbers are 100 and then
87:04 - 200 over here that is B is 200 so let me
87:07 - just save this file andent TR running
87:08 - this code now so what is happening is
87:10 - all the sum is getting printed once that
87:12 - is 30 110 and 300 but let's say
87:15 - similarly if you have 10 sets of A and B
87:18 - values in this way and you want to print
87:20 - all the sum of those numbers so what you
87:23 - will do so your code will become little
87:25 - bit complicated and it will be little
87:27 - bit lengthy as well so in order to avoid
87:29 - this what you can do is you can simply
87:31 - have the function and inside the
87:33 - function you can have those variables
87:35 - and have the sum of those variables so
87:37 - in order to achieve your task that is
87:40 - have the sum of multiple numbers over
87:41 - here in one screen and using the
87:44 - function what you can simply do is you
87:46 - can pass these values that is 10 20 50
87:49 - 60 and 120 while calling the function
87:53 - that is some number so I'll just remove
87:54 - these lines of code now over here and
87:57 - what we will do is I will simply provide
87:59 - the parameters that is the arguments
88:01 - over here that is a and Then followed by
88:03 - comma and then we have B now these A and
88:06 - B are not required because the values
88:08 - will come whenever this function is
88:10 - being called so I'll just remove these
88:12 - lines of code over here you will simply
88:14 - have one print statement inside the
88:15 - function and the sum of A and B it is A
88:19 - + B so this sum will get printed over
88:21 - here calling the function you're
88:23 - supposed to provide the A and B value so
88:25 - what we will simply do is I will simply
88:27 - call this some numbers over here and I
88:30 - will provide the values of A and B so
88:32 - what we had provided we had provided 10
88:34 - and 20 and then again we had the
88:36 - requirement that is to add the other two
88:38 - numbers which were 50 and 60 so again I
88:41 - will just copy paste this sum numbers
88:44 - function and provide the different
88:46 - values this time and then again I will
88:48 - copy and paste this once again with some
88:50 - different values so 100 and 200 so as
88:54 - you can see our code has become little
88:56 - bit cleaner instead of having three
88:58 - lines of code in order to add two
89:00 - numbers every time for which our code
89:02 - has also become lengthy we have a very
89:04 - short code and it is very clean as well
89:07 - it is very readable as well so let me
89:09 - just save this file now and try running
89:10 - this code so as you can see we are
89:12 - getting sum of A and B it is 30 sum of A
89:15 - and B it is 110 and sum of A and B it is
89:18 - equal to 300 you can also customize your
89:21 - function in order to have the values of
89:23 - A and B over here so we can simply say
89:26 - over here we have the double Cotes and
89:29 - then we have comma and then we have a
89:31 - over here and then we have double codes
89:34 - and then we have and keyword double
89:36 - codes and then B value and then comma
89:39 - and then double quotes over here before
89:41 - the colon so as you can see A and B
89:43 - values can also be printed so let me
89:45 - just save this file enter I running this
89:47 - code now so as you can see 10 and 20
89:49 - were passed first time so it is saying
89:51 - sum of 10 20 it is 30 then sum of 50 and
89:54 - 60 it is 110 and then sum of 100 and 200
89:57 - it is 300 you can call this function any
89:59 - number of times with different values in
90:01 - order to get the different sum over here
90:04 - I'll say 200 + 300 again and then let's
90:07 - say I provide 400 and 500 over here let
90:11 - me just save this file and try running
90:12 - this code all the sums are getting
90:14 - printed and our code is also very clean
90:16 - over here so guys this is the main
90:17 - functionality of using python functions
90:20 - you can simply have the defined keyword
90:21 - followed by the function name and then
90:24 - this arguments list is optional over
90:26 - here you can pass it or if you don't
90:28 - want to pass it there is no need to pass
90:30 - so as you can see over here python
90:32 - function arguments this we have already
90:33 - covered that is in order to pass the
90:35 - argument now one last thing is return
90:37 - statement so guys we have not checked
90:39 - any return statement over here so return
90:41 - is nothing but it will return some value
90:44 - so let's say instead of having the print
90:46 - statement over here we want the print
90:48 - statement outside the function so what
90:50 - we can simply do is we can simply return
90:53 - the expression that is a plus b so we
90:56 - can have the return keyword over here so
90:59 - it will say return a + b so simply
91:01 - whatever value were being passed over
91:03 - here that is 10 and 20 it will return
91:06 - the sum that is 10 + 20 it is equal to
91:08 - 30 to this code and over here we should
91:11 - have something in order to catch that
91:13 - value so I'll just remove these lines of
91:15 - code for now and then let's say in order
91:17 - to catch the value I provide the sum
91:19 - variable so this sum variable is
91:21 - assigned the value that is being
91:23 - returned from the sum numbers over here
91:26 - which is equal to the sum of these two
91:27 - numbers and then simply we can have the
91:29 - print statement in order to print the
91:32 - sum value so some variable can be
91:34 - printed so let me just save this file
91:36 - and try running this code now so as you
91:38 - can see 30 is getting printed that's
91:40 - because we have passed 10 and 20 over
91:42 - here also to make it more short what we
91:44 - can do is instead of storing the value
91:47 - inside this variable we can simply have
91:49 - the print statement and inside the print
91:51 - statement we can simply call the sum
91:53 - numbers function so as you can see we
91:55 - have the print statement inside this we
91:57 - are calling the sum numbers 10 and 20 so
91:59 - it will return 10 + 20 it is equal to 30
92:02 - so let me just save this file ENT I
92:03 - running this code now so 30 is being
92:05 - printed let's say I change the numbers
92:07 - to 20 and 50 over here so 20 + 50 should
92:11 - be 70 let me just run this code so 70 is
92:14 - getting printed and based on the
92:15 - requirement you can format the print
92:17 - function that is you can have any
92:19 - statements being printed over here along
92:21 - with the sum of the numbers so guys this
92:23 - is one of the examples of how you can
92:25 - Define the functions and use them you
92:27 - can have any other logic inside the
92:29 - functions that you want to implement
92:31 - based on your requirements so guys
92:32 - practice on your own so that on
92:34 - different inputs you get different
92:36 - output Anonymous or Lambda function in
92:38 - Python Programming so guys in Python an
92:41 - anonymous or Lambda function is a
92:43 - special type of function without the
92:45 - function name so we use the Lambda
92:48 - keyword instead of DF that is defined to
92:51 - create a Lambda function so as you can
92:53 - see this is the syntax previously we had
92:55 - used the DF keyword in order to create
92:58 - the normal functions but this time we
93:00 - are going to use the keyword that is
93:02 - Lambda along with the arguments which
93:04 - are optional over here and then followed
93:06 - by a colon and then we have the
93:08 - expression so this is one of the
93:10 - examples of the Lambda function over
93:11 - here we have the Lambda keyword followed
93:14 - by the colon over here and then we have
93:16 - the expression that is we are printing
93:18 - the hello world string and this entire
93:21 - function that is the anonymous function
93:23 - which is not having any name over here
93:25 - is being assigned to a variable that is
93:27 - greed and then this greed needs to be
93:30 - called as you can see call the Lambda
93:32 - over here along with the open and close
93:34 - parenthesis so when we have this line of
93:36 - code over here this Lambda function will
93:38 - be called and hello world will be
93:40 - printed on the screen so guys let us
93:42 - check this with the help of example over
93:43 - here so what we will do is simply we
93:45 - will have the Lambda keyword first of
93:48 - all and Then followed by a colon and
93:50 - then let's say we want to to print the
93:52 - name of this YouTube channel that is
93:54 - programming for beginners which you
93:55 - should definitely subscribe if you have
93:57 - not done so so we have programming for
94:00 - beginners over here so this is a Lambda
94:03 - function or the anonymous function
94:05 - without having any name and then let's
94:07 - say we assign it to a variable and we
94:10 - can simply provide the variable name as
94:12 - St Str and then we have the equal to
94:14 - operator over here now what we have to
94:16 - do is simply we need to call this Str
94:18 - Str variable so over here on the new
94:20 - line we will have s Str followed by open
94:23 - and close parenthesis and this is the
94:25 - way that we call the anonymous function
94:27 - so let me just save this file and try
94:28 - running this code
94:30 - now so as you can see programming for
94:33 - beginners is getting printed over here
94:35 - and this is one of the simple examples
94:37 - as far as Anonymous function or Lambda
94:39 - function is concerned in Python
94:41 - Programming now guys very important
94:43 - thing what if you have certain arguments
94:45 - which you want to print so this is kind
94:47 - of a static function which is having a
94:49 - fixed string that you want to print but
94:51 - let's say say you want to provide some
94:52 - string over here while calling the
94:54 - function so in case let's say we have
94:57 - this argument as this is a string that
95:01 - we want to print so this Str Str that is
95:04 - the Lambda function is being called but
95:06 - this value needs to be caught by this
95:08 - Lambda function over here so what we can
95:10 - simply do is we can take this argument
95:13 - after this Lambda keyword as we have
95:15 - seen in this syntax after the Lambda
95:17 - keyword we have the list of arguments
95:19 - that we can take and use them in in the
95:21 - form of Expressions over here so what we
95:23 - will do is let's say I provide Lambda
95:25 - and Then followed by X so this x
95:27 - variable will have this value whatever
95:30 - we pass while we are calling this Str
95:32 - Str function that is the anonymous
95:34 - function so this x we can use in our
95:36 - expression inside this Lambda function
95:38 - so let's say I provide a label over here
95:40 - string pass and Then followed by colon
95:44 - and then I have comma and Then followed
95:46 - by this x variable which is being passed
95:48 - so this is a string it is one of the
95:50 - arguments that we we are passing to the
95:52 - Lambda expression and the X variable
95:55 - will be assigned this value and it will
95:56 - be printed by using this print statement
95:59 - so let me just save this file and try
96:00 - running this code now so as you can see
96:03 - string passed this label is getting
96:05 - printed and then the value of x which
96:07 - was passed from this calling of the
96:09 - Lambda function over here that is this
96:11 - is a string and the same thing is
96:13 - getting printed over here so guys this
96:15 - is the way that we can pass arguments or
96:17 - parameters to our Lambda or Anonymous
96:20 - functions over here now there is another
96:22 - variation can we have the multiple
96:23 - arguments let's say we have two or more
96:26 - numbers for which we need to find the
96:28 - sum of those numbers can we find the sum
96:30 - of those numbers by using the Lambda
96:32 - function so let us quickly check this
96:34 - with the help of examples over here so
96:36 - what we will do is again we will Define
96:38 - the Lambda function over here so we have
96:40 - Lambda keyword and this time we will
96:42 - take two numbers so let's say the two
96:44 - numbers are stored in these variables
96:45 - that is X and Y and Then followed by a
96:48 - colon and then what we can do is simply
96:49 - we can print the sum of the these two
96:51 - numbers so we put x + y over here so
96:55 - this is the expression print x + y and
96:57 - over here in the Lambda we have defined
96:59 - the two variables over here now what we
97:01 - can do is we can assign it to another
97:03 - variable so let's say we have addcore
97:07 - numbers as the variable name so we have
97:09 - addore numbers and then Lambda keyword
97:12 - followed by these two variables that is
97:14 - X and Y and then print x + y over here
97:17 - so what we can simply do is we can call
97:19 - this add numbers and Pro provide the two
97:21 - numbers that we want to add so we just
97:24 - use this add numbers over here and then
97:26 - let's say the two numbers that we
97:27 - provide is 10 and 20 so we are expecting
97:30 - the sum that is 10 + 20 to be displayed
97:33 - by using this expression over here so
97:35 - let me just save this file and try
97:36 - running this code now so as you can see
97:39 - we are getting some syntax error Lambda
97:41 - expression parameters cannot be
97:43 - parenthesized so what we can do is we
97:45 - can simply remove these parenthesis that
97:47 - we have provided so when we are
97:49 - providing multiple arguments in the
97:50 - Lambda function we need not have to
97:53 - provide the parenthesis we can separate
97:54 - them using the commas over here so let
97:56 - me just save this file and try running
97:58 - this code so as you can see 30 is
98:00 - getting displayed we can format the
98:02 - string and have some label as well so
98:03 - what we can do is we have the double
98:05 - codes over here and we say sum of
98:09 - numbers and then colon and then comma x
98:12 - + y so let me just save this file and TR
98:14 - I running this code now as you can see
98:16 - sum of numbers that is 30 is getting
98:18 - displayed another way that we can print
98:20 - the sum of these numbers is just by
98:22 - returning the sum of these numbers and
98:24 - printing them over here outside the
98:25 - Lambda function so while returning any
98:27 - of the Expressions we need not have to
98:29 - have the return keyword we can simply
98:31 - have the expression over here so as you
98:33 - can see the two numbers were passed that
98:35 - is 10 and 20 it will be taken by this
98:37 - Lambda function in the form of X and Y X
98:40 - + Y will be computed and then it will be
98:43 - returned to this function which was
98:45 - called by using the add numbers now we
98:47 - can simply print this so we can have the
98:49 - print function over here and and inside
98:51 - the print function we call the add
98:53 - numbers with these two numbers let's say
98:55 - this time we provide some other numbers
98:57 - that is 100 and let's say 150 so the sum
99:00 - should be 100 + 150 which should be 250
99:02 - over here let me just save this file and
99:04 - try running this code now so as you can
99:06 - see 250 is getting printed and again we
99:08 - can have some labels over here in order
99:10 - to Define exactly what this function is
99:13 - doing so guys practice on your own so
99:14 - that on different inputs you get
99:16 - different output this Lambda function
99:18 - becomes very important which is also
99:19 - called Anonymous function when you don't
99:21 - want to define the function explicitly
99:24 - and you have very less number of
99:25 - operations to be carried out by using
99:27 - this Anonymous function so list in
99:29 - Python Programming so guys a list is a
99:31 - collection of similar or different types
99:34 - of data so for example suppose we need
99:36 - to record the age of five students so
99:39 - instead of creating five separate
99:41 - variables we can simply create a list so
99:44 - as you can see this is the way that we
99:45 - create the list first of all on the left
99:47 - hand side we have the variable name and
99:50 - then on the right hand side inside the
99:52 - open and close square brackets we have
99:54 - the list of elements which are separated
99:56 - using the commas so I'll just copy this
99:59 - line of code over here and then let us
100:01 - move to the vs code and paste this so as
100:03 - you can see on the left hand side it is
100:05 - the variable name of the list and on the
100:07 - right hand side we have the age of all
100:09 - the students over here and simply we can
100:12 - print the list by using the print
100:14 - function after this we can provide the
100:16 - variable name that is list so let me
100:18 - just save this file enter I running this
100:19 - code now as you can see we are getting
100:21 - the list of all the elements in the
100:23 - sequence that we had provided over here
100:26 - it is very important that all these
100:28 - elements are separated using the commas
100:30 - over here now guys the list can have the
100:32 - same kind of elements that is this one
100:35 - is having the list of integers data type
100:37 - only but we can also have the string as
100:40 - well in between so let's say we have a
100:42 - string called John over here in between
100:45 - this list of elements so this is also
100:48 - possible it will not throw any errors
100:50 - while we are running this code so let me
100:52 - just save this file andent I running
100:53 - this code now as you can see we are
100:55 - getting the list of all the values 17 18
100:58 - and then we are getting John and then 19
101:00 - and then 14 so this is a kind of a
101:02 - heterogeneous list whereas when we have
101:05 - the same kind of data type in the list
101:07 - then it is called the homogeneous list
101:09 - now how do we access the python list
101:11 - element so basically this is one way in
101:13 - order to access the list but what if we
101:16 - want to access only a single element by
101:18 - using this print statement we have
101:20 - accessed all the elements over here but
101:22 - in case we want to access a particular
101:25 - element from this list then what we can
101:27 - do is in Python each item in a list is
101:30 - associated with a number so the number
101:32 - is known as a list index so basically
101:35 - all these numbers that is the elements
101:37 - of the list that are present inside the
101:38 - list so these are associated with the
101:41 - indexes which starts from zero so the 17
101:44 - number is at the zeroth index 18 number
101:47 - is at the first index and so on this is
101:49 - at the second index third index and then
101:51 - so on so basically these elements can be
101:55 - accessed using these indices so as you
101:57 - can see we can access elements of an
101:59 - array using the index number now how do
102:01 - we access them so what we can do is we
102:03 - simply come over here I'll simply change
102:05 - this to the number 15 that was there
102:08 - previously and what we have to do is
102:10 - let's say I want to access this element
102:12 - that is the fourth element so what will
102:14 - be the index so this is zero index then
102:16 - we have one and then two and then three
102:18 - so this is the third index so we can
102:20 - access by using the variable name
102:23 - followed by open and close square
102:24 - brackets and inside those brackets we
102:26 - have to provide the index number that is
102:29 - three in this case which represents this
102:31 - number that is 19 so let me just save
102:33 - this file and try running this code now
102:35 - as you can see we are just getting 19
102:37 - over here previously we were getting the
102:39 - entire list when we don't provide this
102:40 - index number I'll save this file so as
102:43 - you can see all the values are getting
102:45 - printed but when we provide the index
102:47 - number let's say I want to print 18 this
102:49 - time which is at the index one after
102:51 - this index which is zero so I provide
102:53 - list of one over here save this file and
102:56 - run this code so as you can see 18 is
102:58 - getting displayed and this is how it is
103:00 - one way in order to access a particular
103:03 - single element inside this list by using
103:06 - the index number now it is also possible
103:08 - that we provide the negative index in
103:10 - Python so python allows negative
103:12 - indexing for its sequences the index of
103:15 - minus1 refers to the last item minus 2
103:18 - to the second last item and so on so for
103:21 - now we know that the zero index is the
103:23 - first element over here and then the
103:25 - first index is the second element but
103:27 - what about the last element let's say we
103:29 - don't know the length of the list like
103:31 - how many elements are present inside the
103:33 - list and we want to get the last element
103:35 - over here so since the first element is
103:38 - at the zero index the previous index
103:40 - that is before 0o which is minus1 it
103:43 - will point to the last index of this
103:46 - list that is 14 over here so what if we
103:48 - simply do list of minus 1 in this case
103:51 - so I'll just provide minus1 in this case
103:54 - let me save this file and TR running
103:56 - this code as you can see we are getting
103:58 - 14 so basically the minus1 index will
104:01 - point to the last element of the list in
104:04 - this case let's say we want to get the
104:05 - second last element so in this case we
104:08 - will simply provide Min -2 so after
104:10 - minus1 we are having min-2 which will be
104:12 - the previous element of the last element
104:15 - so let me just save this file ENT
104:16 - running this code now so as you can see
104:18 - 19 is getting displayed now and this is
104:20 - the way that we can also use the
104:22 - negative indexing as far as accessing
104:24 - the last elements of the list are
104:26 - concerned now there is another concept
104:28 - of slicing in Python list so in Python
104:31 - it is possible to access a section of
104:33 - items from the list using the slicing
104:36 - operator which is nothing but a colon
104:38 - not just a single item so let's say we
104:41 - want to access the second and third
104:43 - elements inside the list so we have to
104:45 - use the slicing operator in this case
104:47 - now what is the slicing operator while
104:49 - providing the index es inside the open
104:51 - and close brackets we have to provide
104:54 - the indices and separate them using the
104:56 - colon so what is the index of the second
104:58 - element it is one over here since the
105:00 - first element is having the zeroth index
105:02 - we don't want that we want to start from
105:04 - the first index and then we also want
105:06 - the second index so this time we have to
105:09 - provide the next number that is at the
105:11 - third index now so after this one that
105:13 - is the first index we have to provide
105:16 - colon and then we provide three over
105:18 - here so three is not included in this
105:20 - case please remember that whenever you
105:22 - are providing the ending index that
105:25 - element will not be included whenever
105:26 - you are using the slicing operator over
105:29 - here so the elements that will be
105:30 - considered in this case will be at the
105:32 - index one and at the index 2 which means
105:34 - 18 and 15 so let me save this file and
105:36 - try running this code now as you can see
105:39 - we are getting 18 and 15 only let's say
105:41 - you want to get all the elements
105:43 - starting from this 18 so this index is
105:46 - 18 right now and there is no end index
105:48 - that you want to specify over here so we
105:51 - simply have to remove this three and
105:53 - then we can simply specify one followed
105:55 - by the colon so this will make python
105:57 - interpreter to consider all the elements
106:00 - after the first element including the
106:02 - first element itself so let me just save
106:04 - this file now and try running this code
106:06 - so as you can see we are getting all the
106:07 - elements that is 18 15 19 and 14
106:10 - starting from the first index over here
106:13 - so guys this is the way that we can use
106:14 - slicing in the python list also in order
106:17 - to consider all the list elements over
106:19 - here we need not have have to specify
106:21 - any of the indexes if we simply provide
106:23 - the colon over here all the elements
106:25 - will be considered let me just save this
106:27 - file and try running this code now so as
106:29 - you can see all the elements are getting
106:31 - considered but this thing is kind of a
106:32 - redundant over here that's because if we
106:34 - simply provide the variable name that is
106:36 - list still all the elements will be
106:38 - considered so if we run this code once
106:40 - again so all the elements are being
106:42 - considered over here only when you want
106:44 - to consider the subset of this list you
106:47 - have to use the slicing inside the
106:48 - python list now let us move to the the
106:50 - next concept how do we add the elements
106:52 - to a python list so there are two ways
106:54 - to add the elements in the python list
106:57 - the first way is to use the upend
106:58 - function which will help us in order to
107:01 - add a single item in the list and the
107:03 - second way is to use the extend function
107:05 - in order to add another list to the
107:07 - already existing list so let us check
107:09 - this with the help of examples now over
107:11 - here let's say we already have this list
107:13 - of values inside the list variable and
107:16 - now we want to add more elements so what
107:18 - we will do is we will say list followed
107:20 - by Dot and then we have something called
107:22 - as append so this is a function which
107:24 - will take a single element and it will
107:26 - add to the end of this list so let's say
107:28 - I want to provide 25 as the age of
107:31 - another student so let me just save this
107:33 - file now and try running this code so as
107:36 - you can see this element that is 25 it
107:38 - is already added at the end of the list
107:40 - now and in this way we can use the upend
107:43 - function to add more elements inside the
107:45 - list now let's say we have another list
107:47 - over here let's say I provide a list one
107:49 - and the number numbers I provide is 1A 2
107:52 - comma 3 over here so three elements are
107:54 - there and we want to add all these
107:56 - elements to the original list that is
107:58 - list variable so what we can do is we
108:00 - can use the extend function in this case
108:02 - so we have to use this list variable
108:04 - which is the original list variable
108:06 - followed by Dot and then we have the
108:08 - extend function and inside the
108:10 - parenthesis we have to provide this
108:12 - argument that is list one which is
108:14 - another variable having the list of
108:16 - elements and now if we print this list
108:18 - it will have the updated list of values
108:21 - so let me just save this file and try
108:23 - running this code now so as you can see
108:25 - after this 14 1 2 3 elements are also
108:28 - getting added over here since we have
108:30 - used the extend function in this case
108:32 - let us move to another section can we
108:34 - change the list items so basically the
108:36 - python list are mutable meaning list are
108:39 - changeable and we can change items of a
108:41 - list by assigning new values using equal
108:44 - to operator so what I will do over here
108:46 - is I'll just remove these lines of code
108:48 - so I'll simply provide the or original
108:50 - list over here so we will say
108:53 - original list followed by colon and then
108:56 - we will print the list so let me just
108:58 - save this file and try running this code
108:59 - now we have the original list over here
109:02 - I'll just spell this correctly so we
109:04 - have the original list 17 18 15 19 and
109:07 - then 14 now let's say at the third
109:09 - position that is 15 we want to change
109:11 - this element to 10 now this is being
109:13 - referred to the second index over here
109:16 - so this is zero index then one and then
109:18 - second index so what we have to do is
109:20 - simply we have to provide list followed
109:22 - by inside the square brackets we will
109:24 - provide the index number that is two and
109:26 - then equal to the new value that is 10
109:29 - that we want to replace it with and then
109:31 - again what we will do is I'll simply
109:33 - copy this line of code and paste this
109:35 - over here and then we will say updated
109:37 - list and let me just save this file now
109:40 - and try running this code so basically
109:42 - as you can see original list it is
109:43 - having 15 at the third position over
109:46 - here that is at the second index and the
109:48 - updated list is having the number 10
109:50 - stand at the same second index over here
109:52 - and this is the way that we can update
109:54 - the list elements so since python list
109:56 - are mutable we can change the elements
109:57 - of the list as well now removing an
110:00 - element from the list so there are two
110:01 - ways either we can use the D function or
110:04 - else we can use the remove function as
110:06 - well so let's say over here we have the
110:08 - original list now so I'll just remove
110:10 - these lines of code and then we can use
110:12 - the D function and Then followed by list
110:15 - and let's say I want to remove this
110:17 - fourth element that is at the index
110:19 - three which is 19 so I'll just provide
110:21 - list of three in this case and then what
110:24 - I will do is I will print the updated
110:26 - list once again so I'll just change this
110:28 - to updated list so basically we are
110:30 - using the de method over here and
110:33 - deleting the third index inside this
110:36 - list so let me just save this file and
110:37 - try running this code now so as you can
110:39 - see we are getting the updated list as
110:41 - 17 18 15 and 14 this element that is 19
110:45 - it was removed already now instead of
110:47 - this we can also use the remove method
110:49 - so in that case we have to use the
110:51 - variable name first in the deel method
110:54 - that is the delete method we simply used
110:56 - the function name and provided the
110:58 - element from the list in order to remove
111:00 - from that list but over here we have to
111:02 - provide the variable name followed by
111:04 - Dot and then we can simply use the
111:06 - remove function and Then followed by the
111:09 - position so which position we want to
111:10 - remove so let's say I want to remove
111:12 - this element that is 18 over here so in
111:14 - this case we have to provide the value
111:17 - of the element that is present inside
111:19 - the list so in this case is we provide
111:21 - 18 in the previous example that we have
111:24 - taken using the deel method we used the
111:27 - index number of the element that is
111:29 - present inside the list but in this case
111:31 - we have to use the value in order to
111:33 - remove it so I'll just save this file
111:35 - and try running this code now as you can
111:37 - see 18 was present in the original list
111:39 - but in the updated list we don't have 18
111:41 - it is 17 15 19 and 14 and in this way we
111:44 - can remove the elements from the list as
111:46 - well now very important operation how do
111:48 - we iterate through a list so basically
111:50 - we can use the for Loop to iterate over
111:53 - the elements of a list so till now what
111:55 - we have seen is we have just used the
111:57 - list that is the variable name in order
111:59 - to print the elements of those list now
112:01 - if you notice we are getting the square
112:03 - brackets over here open and close square
112:05 - brackets within which all the elements
112:07 - are getting printed but let's say we
112:09 - don't want those square brackets and one
112:11 - by one we want to print all the elements
112:13 - at a time so what we can simply do is
112:15 - use the for Loop and we have seen in the
112:18 - previous videos as well the syn of the
112:20 - Fall Loop we have to use the for keyword
112:22 - followed by let's say a temporary
112:24 - variable name that is item followed by
112:27 - the in keyword and then we have to
112:29 - provide the sequence at his list and
112:31 - then after that we have the colon and
112:33 - then we can have the print statement
112:35 - over here now in the print statement if
112:37 - we only provide one item that is item in
112:40 - this case so every time all the elements
112:43 - will be printed on the separate lines
112:45 - over here so let us just try this code
112:47 - so we'll just save this file and try
112:49 - running this code now now as you can see
112:50 - 17 18 15 19 14 all the elements are
112:54 - getting printed on the separate lines
112:56 - what if we want all the elements to be
112:58 - present on the same line so what we can
113:00 - do is after providing comma over here we
113:03 - have the end parameter inside the print
113:06 - function and this end parameter we can
113:08 - have the comma as the character by which
113:11 - we can separate all the elements so by
113:13 - default this is slashing character which
113:15 - means the next element will be printed
113:17 - on the next line but if we specify this
113:19 - in this way all the elements will be
113:21 - printed on the same line so let me just
113:23 - save this file now and try running this
113:24 - code so as you can see all the elements
113:26 - are getting printed on the same line in
113:28 - the same sequence that is present inside
113:30 - this list so in this way we can iterate
113:32 - through all the elements inside the list
113:34 - that are present by using the fall Loop
113:36 - over here now another important thing
113:38 - how do we find the list so we have
113:40 - something called as python list length
113:42 - so in Python we use the Ln function to
113:46 - find the number of elements present in a
113:48 - list so we can have any number number of
113:50 - elements inside the list over here so
113:51 - there is no limit on the number of
113:53 - elements that we are supposed to have
113:55 - inside the python list so in case if we
113:57 - want to find the number of elements
113:59 - inside the list we can simply use the
114:01 - length function so we can simply print
114:04 - this and then we can have Ln which is a
114:07 - function and then we can provide the
114:09 - variable name of the list inside this Ln
114:12 - function over here so it will return us
114:14 - the count of the elements inside the
114:16 - list so let me just save this file and
114:18 - try running this code now and as you can
114:20 - see five that is the count of the number
114:22 - of elements inside the list is present
114:24 - over here if we provide some more
114:25 - elements over here let's say I have
114:27 - provided five more elements inside the
114:29 - list let me just save this file now and
114:31 - try running this code so we are getting
114:32 - the updated count that is 10 so 10 is
114:35 - the number of element set are present
114:37 - inside the list and that is how we can
114:39 - easily find the length of the list in
114:41 - this case by using the Len function over
114:43 - here so Guys these were certain
114:45 - operations as far as list variable is
114:47 - concerned please make sure that you
114:48 - practice on your own and as a homework
114:50 - for you there is something called as a
114:52 - sort function which can help you in
114:54 - order to sort all the elements inside
114:56 - the list so you can practice on your own
114:58 - as a homework for you in order to sort
115:01 - the elements inside the python list and
115:03 - print on your own tle in Python
115:05 - Programming so guys a tle in Python is
115:08 - similar to a list basically the
115:09 - difference between the two is that we
115:11 - cannot change the elements of a tuple
115:14 - once it is assigned whereas we can
115:16 - change the elements of a list so
115:17 - previously in the examples of the list
115:19 - that we have seen we were able to change
115:22 - the elements inside the list but the
115:24 - same thing cannot be done with the
115:26 - elements at are present inside the Tuple
115:28 - so how do we create a tupple a tuple is
115:30 - created by placing all the items that is
115:33 - elements inside the parenthesis so we
115:35 - have this open and close parenthesis
115:37 - whereas in the list we were using open
115:39 - and close square brackets now these are
115:41 - supposed to be separated by commas over
115:43 - here the parenthesis are optional
115:46 - however it is a good practice to use
115:48 - them so a tle can have have any number
115:50 - of items and they may be of different
115:52 - types that is integer float list string
115:55 - Etc so guys let us check this with the
115:57 - help of example now over here as you can
115:59 - see we have my tle which is the name of
116:01 - the variable that we have given and 1 2
116:03 - 3 these are the elements that is present
116:06 - inside the Tuple if you notice we have
116:08 - this open and close parenthesis inside
116:10 - of the square brackets and that is the
116:12 - difference between the list and the tle
116:14 - over here so let us move to the vs code
116:16 - and simply we will provide tupple one as
116:19 - the variable name over here equal to
116:21 - followed by open and close parenthesis
116:23 - and let's say we Define five elements
116:25 - one to five over here so this is nothing
116:27 - but we have defined the tle and we can
116:30 - simply print this Tuple by using the
116:32 - variable name tle one over here so let
116:34 - me just save this file and try running
116:36 - this code now as you can see we are
116:38 - getting all the elements that is 1 2 3 4
116:40 - 5 and in this way we have easily created
116:43 - and printed the tle elements over here
116:45 - now guys an important thing over here
116:47 - let's say you want to create a python
116:49 - tle with only one element so in this
116:51 - case what happens is let's say if you
116:53 - provide where one that is variable one
116:55 - over here and you provide double Cotes
116:58 - that is hello with this open and close
117:00 - parenthesis in this case this will be
117:02 - considered as a string whereas in the
117:04 - variable two what you do is after this
117:07 - hello you provide a comma so in this
117:09 - case it will be considered as a tle so
117:11 - this is very important thing if you want
117:13 - to create a tupple with just a one
117:15 - element you have to use the comma after
117:18 - providing that El element over here let
117:20 - us check this with the help of examples
117:22 - now over here let's say I provide where
117:25 - one in this case and then open and close
117:28 - parenthesis and then let's say we have
117:30 - hello over here and then I'll just copy
117:32 - this line of code and paste this and
117:34 - I'll simply provide comma after this
117:36 - element so what we will do is I'll just
117:39 - name this variable name as where to so
117:41 - let us now confirm the data types of
117:43 - both the variables so we will say print
117:45 - and then inside this we will use the
117:47 - type function in order to find find the
117:49 - data type of where one so we provide
117:52 - where one over here and I'll simply copy
117:55 - and paste this line of code and we
117:56 - provide where to over here so let me
117:59 - just save this file now and try running
118:00 - this code so as you can see first one it
118:02 - is showing us that it is a string and
118:04 - the second thing is showing us that it
118:06 - is a tupple now in case if we simply
118:08 - remove this comma from this tupple so
118:11 - what happens so let me just save this
118:12 - file and try running this code once
118:14 - again as you can see it has become
118:16 - string now both are strings right now if
118:18 - we provide comma over here and comma
118:20 - over here as well so both the variables
118:23 - will be turned to the tupple data type
118:25 - so guys this is very important if you
118:27 - want to have only one element inside the
118:29 - tupple make sure that that element is
118:32 - followed by a comma over here in order
118:34 - to make that data type as a tupple now
118:36 - guys moving to next section how do we
118:38 - access the python tupple elements so
118:40 - there are multiple ways in order to
118:42 - access the elements over here first of
118:44 - all is indexing so this we have already
118:46 - seen previously by using the index
118:48 - number we can access the elements of the
118:51 - tle so let's say we have Tuple one over
118:53 - here and we have five elements 1 2 3 4
118:57 - five so how do we access these elements
119:00 - by using the indices so we simply have
119:02 - to provide the dou one that is the
119:04 - variable name and Then followed by open
119:07 - and close square brackets this time and
119:09 - let's say we want to print the element
119:12 - that is three over here every time
119:14 - remember guys that the index it starts
119:16 - from zero so this first element that is
119:18 - number one it is is at the index zero
119:20 - and then the second element that is
119:22 - number two it is at the index one and
119:24 - then the third element that is number
119:26 - three it is at the index two over here
119:28 - so we provide the number that is two
119:30 - which is the index number in this case
119:33 - so this will tell the python interpretor
119:35 - to access the element that is at the
119:38 - index number two for this variable that
119:40 - is tle one so over here what will happen
119:42 - is the index number zero is this and
119:44 - then index number one is this and then
119:46 - we have index number two which is three
119:48 - over here and this element should be
119:50 - printed so let me just save this file
119:52 - and try running this code now so as you
119:54 - can see three is getting printed
119:56 - similarly let's say if you want to print
119:58 - this number two which is at the index
120:00 - one in this case so we have to provide
120:02 - one inside this open and close square
120:04 - brackets so let me save this file and
120:06 - try running this code now so two is
120:08 - getting printed this time so guys this
120:10 - is one way in order to access the
120:12 - elements by using the indexing we also
120:15 - have something called as negative
120:16 - indexing so let's say if you don't know
120:19 - the number of elements that are present
120:21 - inside the Tuple whereas there is a way
120:23 - in order to find the length of the Tuple
120:25 - but in case you want to access the last
120:27 - element of this tle over here so you
120:30 - already know that the first element is
120:32 - at the index zero so let me just print
120:34 - that so over here we provide tle one
120:36 - followed by the index number that is
120:38 - zero in this case I'll save this file
120:40 - and try running this code so one is
120:42 - getting printed now let's say you want
120:44 - to print the last element but you don't
120:46 - know at which index it is so we have
120:48 - something called as negative indexing in
120:50 - which case before the zero index the
120:53 - index that is minus one it will point to
120:56 - the last element of this tle that is
120:58 - five over here so when we provide minus
121:00 - one in this case this element that is
121:03 - five should get printed so let me save
121:05 - this file and try running this code now
121:07 - so five is getting printed similarly if
121:09 - you want to get the second last element
121:12 - of this tle you can simply provide minus
121:14 - two over here so when we provide minus
121:17 - two and run this code so four is getting
121:19 - displayed which is the second last
121:21 - element so this is like a cycle over
121:23 - here when you use the negative indexing
121:25 - the last elements of this tle will start
121:28 - getting printed over here and then guys
121:30 - you can also use the slicing
121:32 - functionality as we have already seen
121:34 - with the list so basically let's say if
121:36 - you want to print the subset of this tle
121:38 - between 2 to 4 so what you can do is
121:41 - what is the index of this element that
121:42 - is two it is zero and then one so at the
121:45 - first Index this two is present so we
121:47 - will provide one over here here followed
121:49 - by a colon and then what is the index of
121:53 - the element that we want that is four so
121:55 - the index is it is 0 1 2 and then this
121:59 - index is three but we don't want to
122:01 - specify three because this is excluded
122:03 - so the next index which is four we have
122:05 - to specify that index which will be not
122:07 - included in our slicing operator so when
122:10 - we provide four over here always
122:11 - remember that this index on the left
122:13 - hand side will be considered but this
122:16 - index will not be considered the fourth
122:18 - index will not be consider Ed but before
122:19 - this that is the third index will be
122:21 - considered while printing the statement
122:23 - so let me save this file and try running
122:25 - this code now so as you can see 2 3 and
122:28 - four is getting printed the last index
122:30 - that is four which is having the element
122:32 - five this will not be considered because
122:34 - it is not included in the slicing
122:36 - operator so these are some of the ways
122:38 - that you can use in order to access the
122:40 - python tupple elements over here now
122:42 - python tle methods there are two methods
122:45 - only that is count and index over here
122:48 - what is count so basically in order to
122:50 - get the number of occurrences of a
122:52 - particular element you can use the count
122:54 - method so over here while using the
122:56 - count function we have to use the
122:58 - variable name followed by Dot and then
123:01 - as you can see count and index these are
123:03 - the only two methods the other method
123:05 - such as appending or removing or
123:07 - deleting the elements are not present
123:08 - that's because as I already told you the
123:11 - tupple inside python are not mutable
123:13 - which means we cannot change the
123:15 - elements once they are assigned over
123:17 - here so when we provide count we have to
123:20 - provide one of the elements inside that
123:22 - tle so let's say we want to find the
123:24 - occurrence of the element that is two
123:26 - over here in this case that means how
123:27 - many times this number two is occurring
123:30 - so let me save this file now and try
123:31 - running this code so as you can see the
123:33 - count is one over here that's because
123:35 - only one occurrence of number two is
123:37 - present let's say I provide some more
123:38 - occurrences over here so I provide the
123:41 - number two two times over here so the
123:43 - total count becomes three in this case
123:45 - over here we have two and then two more
123:47 - twos are present so basically the total
123:49 - count is three let me just run this code
123:51 - once again so number of twos that are
123:53 - present over here inside the topple is
123:55 - three and that is what we are getting
123:57 - over here and this is the main
123:58 - functionality of the count function now
124:01 - the another function that is index so if
124:03 - you want to get the index of a
124:05 - particular element you can use the index
124:08 - function so after this dot we have
124:10 - something called as index and then
124:12 - inside the open and close parenthesis we
124:14 - have to provide the element for which we
124:16 - want to find the index so let's say I
124:18 - want to find the index of this element
124:20 - that is number five over here so it is
124:22 - four basically let me just save this
124:24 - file and try running this code and
124:26 - confirm so as you can see four that is
124:28 - the index of this element is getting
124:30 - printed over here so Guys these
124:31 - functions you can use based on your
124:33 - requirements as far as tle is concerned
124:35 - now one very important thing iterating
124:37 - through a tupple in Python so we can use
124:39 - the fall Loop to iterate over the
124:41 - elements of a tle so basically we have
124:43 - seen this in the previous video as well
124:45 - so far we have printed the elements of
124:47 - the tle by using the variable name in
124:49 - this way so let me save this file now
124:51 - and try running this code as you can see
124:53 - all the elements are getting printed but
124:54 - there is a problem over here we are
124:56 - getting this open and close parenthesis
124:59 - also while printing these elements what
125:01 - if we only want to print single element
125:03 - at a time so we can simply use the for
125:06 - Loop and iterate through all the
125:07 - elements over here inside the tble so we
125:10 - use the for keyword followed by let's
125:12 - say the temporary variable as the item
125:14 - and then we have the in keyword and then
125:16 - the name of the variable that is the
125:18 - sequence which is tle one in this case
125:21 - and then we simply have to print this
125:23 - item that is item variable now what will
125:26 - happen is all the items will be printed
125:28 - on separate lines over here because by
125:31 - default the end parameter of this print
125:33 - function is having the slend character
125:36 - so let me just save this file and try
125:37 - running this code now as you can see all
125:39 - the elements are getting printed on the
125:41 - new line what if we want all the
125:43 - elements to be present on the same line
125:45 - separated by comma over here so we
125:47 - simply have to provide comma and then
125:49 - there is something called as end
125:51 - parameter for this print function so we
125:53 - use that and inside the double codes we
125:56 - provide the comma over here which will
125:58 - be kind of a separate for all those
126:00 - Elements which will be printed on the
126:02 - terminal so let me just save this file
126:03 - now and try running this code so as you
126:06 - can see all the elements now are getting
126:08 - printed on the same line and they are
126:10 - separated with a comma if you want a
126:12 - space character after comma that can
126:14 - also be done you provide comma followed
126:16 - by the space character let me just save
126:18 - this file now and try running this code
126:20 - so all the elements are separated with a
126:22 - comma character and then a space
126:24 - character additionally for a better
126:26 - readability so guys this is another way
126:28 - you can use the for Loop in order to
126:30 - iterate through all the elements of the
126:32 - tle now let us understand what are the
126:34 - different advantages of a tuple over
126:36 - list in Python so we generally use tles
126:39 - for heterogeneous that is different data
126:41 - types and list for homogeneous which
126:43 - means similar data types so in a tle you
126:46 - can have the different data types as
126:48 - well so basically the tupple is being
126:50 - used for that purpose only and we cannot
126:52 - change the elements inside the tupple so
126:55 - since tles are immutable which means you
126:57 - cannot change a data inside the Tuple
126:59 - once they are assigned iterating through
127:01 - a tupple is faster than with a list so
127:04 - behind the scenes what is happening is
127:05 - the program already knows that the
127:07 - tupple elements will not be changed and
127:09 - for this reason the tupple is little bit
127:11 - faster compared to the list so there is
127:13 - a slight performance boost over here now
127:16 - tles that contain immutable elements can
127:18 - be used as a key for a dictionary as
127:21 - well with a list this is not possible so
127:23 - inside a dictionary as you must be
127:25 - knowing there are key value PA and the
127:27 - elements of the tle can be considered as
127:29 - keys for the dictionary if you have data
127:31 - that doesn't change implementing it as a
127:34 - tle will guarantee that it remains right
127:36 - protected so nobody can change the
127:38 - elements of a tle if you want some data
127:41 - to be fixed whenever you are
127:43 - implementing the list of elements that
127:45 - should be present in a sequence and that
127:47 - must not be changed so Guys these are
127:49 - certain advantages of a tle over a list
127:51 - in Python Programming string in Python
127:54 - Programming so guys in computer
127:56 - programming a string is a sequence of
127:58 - characters so for example as you can see
128:01 - this hello word it is the string which
128:03 - is the sequence of characters that is h
128:05 - e l o so this is a string containing the
128:09 - sequence of these characters and we call
128:11 - it as a string now we use the single
128:13 - quotes or double quotes to represent a
128:15 - string in Python so basically whenever
128:18 - we are defining a string we use the
128:20 - sequence of characters which are
128:21 - supposed to be enclosed Within These
128:23 - double codes or else we can use the
128:25 - single codes as well so as you can see
128:27 - for example Str Str that is the variable
128:30 - name that we have taken over here
128:32 - followed by the equal to operator we
128:34 - have the string that is programming for
128:36 - beginners which is the name of the
128:37 - YouTube channel which you should
128:39 - definitely subscribe and this is
128:40 - enclosed within the two double codes
128:42 - over here so let us check this with the
128:44 - help of example now we have Str Str it
128:46 - is equal to inside the double codes we
128:49 - can provide our string that is
128:51 - programming for beginners over here and
128:54 - then simply we can print the string by
128:56 - using the print function so we have
128:57 - print followed by open and close
128:59 - parenthesis and then we provide this St
129:01 - Str variable name let me just save this
129:04 - file now and try running this code as
129:06 - you can see programming for beginners is
129:07 - getting printed now now what are the
129:09 - different operations how do we access
129:11 - string characters in Python so let's say
129:14 - if I only want to print this character
129:17 - that is p over here how can we do that
129:19 - so one way in order to do that is by
129:22 - using the indexing which means we can
129:24 - use the index number basically the
129:26 - indexes that we have seen in the list
129:28 - and tle in the previous videos are also
129:31 - applicable over here for Strings as well
129:33 - so this letter that is p can be accessed
129:36 - by using the index number which starts
129:38 - from zero so this is the zeroth index
129:40 - number which defines this P character
129:42 - the next character that is R it is at
129:44 - the first index number and then the next
129:46 - character is at the second index number
129:49 - and so on so we can simply use the
129:51 - variable name and then inside the open
129:53 - and close square brackets we can provide
129:55 - the index number so over here after the
129:58 - variable name inside the open and close
130:01 - square brackets as you can see we
130:02 - provide the index number that is zero
130:05 - which will point to this character that
130:07 - is p over here so let me just save this
130:09 - file and try running this code now as
130:11 - you can see p is getting printed over
130:13 - here now let's say we want this o to be
130:15 - printed so what is the index number for
130:17 - this so the first one is zeroth index
130:20 - and then we have first index over here
130:22 - and then this o is at the second index
130:24 - number so we provide number two that is
130:27 - inside the open and close square
130:29 - brackets let me just save this file now
130:31 - and try running this code so as you can
130:33 - see o is getting printed and in this way
130:35 - if you want to access a single character
130:37 - from the string you can use the index
130:39 - number in order to access them now there
130:42 - is another variation we can also use the
130:44 - negative indexing which means the
130:46 - negative index numbers can also be used
130:49 - in order to access the last elements of
130:52 - the string so let's say if you want to
130:54 - access the last element first element is
130:56 - having the index number zero and the
130:58 - previous index number that is before the
131:00 - number zero we have minus1 in the number
131:02 - system so minus1 will refer to the last
131:06 - element inside this sequence of
131:08 - characters which is s over here so when
131:10 - we provide minus one in this case inside
131:13 - the open and close brackets so let me
131:15 - just save this file and try running this
131:16 - code as you can see s is getting printed
131:19 - so minus1 is pointing to this character
131:22 - that is s what will be the second last
131:24 - character it will be min-2 in this case
131:26 - so when we provide minus 2 save this
131:28 - file enter I running this code so as you
131:30 - can see this R is getting printed over
131:33 - here and in this way we have the
131:35 - negative indexing Concept in Python
131:37 - Programming now there is another way we
131:39 - can use the slicing operator in order to
131:42 - print the subset of the sequence of
131:44 - characters so let's say if we only want
131:47 - this programming word to be printed
131:49 - instead of programming for beginners
131:51 - that is the entire string so what we can
131:54 - do is so we have to mention the indices
131:56 - in order to print these characters only
131:59 - so it starts from zero and then we have
132:01 - 1 2 3 4 5 6 7 8 9 10 and then we have to
132:08 - take extra index number that is 11th as
132:10 - well because at last index number is not
132:14 - included whenever we are using the
132:15 - slicing operator so the indexes will
132:18 - will be between 0 to 11 in this case so
132:20 - how do we provide that range we provide
132:22 - zero first that is the left hand side
132:24 - index followed by the colon and then we
132:26 - provide 11 that is the second index up
132:28 - to which all the characters must be
132:30 - taken and printed over here so as you
132:32 - can see this is the slicing of the
132:35 - sequence of characters let me just save
132:36 - this file enter I running this code now
132:38 - as you can see programming is getting
132:40 - printed over here let's say we want to
132:42 - include the characters up to F so we
132:44 - have to provide the index up to O over
132:47 - here so basically this was the 11th
132:49 - index and then we have 12 and then 13 so
132:52 - over here what we can do is we can
132:53 - simply provide 13 in this case so let me
132:56 - just save this file now and try running
132:58 - this code so as you can see programming
133:00 - word is getting considered and then
133:01 - after that we have the space and then f
133:03 - is also considered which is at the 12th
133:05 - index there is another way we can do
133:07 - this instead of providing this zero
133:10 - index we can just remove this so by
133:12 - default it will take from the start of
133:14 - the string that is all the characters
133:16 - starting from the zeroth index over here
133:18 - so let me just save this file and try
133:20 - running this code now so as you can see
133:22 - again we are getting the same output
133:23 - that is programming up to the F
133:25 - character over here what if we want from
133:27 - this o character which is at the 13th
133:29 - position up to the last position so what
133:32 - we can do is we can simply provide the
133:34 - 13th index number which will start the
133:36 - string from this particular character
133:38 - and Then followed by colon and there is
133:40 - no need to provide the last index
133:42 - because we want all the characters to be
133:44 - included so this is the slicing operator
133:46 - for us we have the 13 index number and
133:48 - then colon over here let me just save
133:50 - this file now and try running this code
133:52 - so as you can see after F we are getting
133:54 - o r over here and then we have the space
133:56 - character and then we have the beginners
133:58 - as well so this is the way that we can
134:00 - use the slicing in Python in order to
134:02 - get the substring from the entire string
134:05 - that we have already defined now guys
134:07 - very important python strings are
134:09 - immutable so in Python strings are
134:11 - immutable that means the characters of a
134:13 - string cannot be changed so let's say
134:15 - this first character that is p if we
134:17 - want to change set character so what we
134:19 - will do is we will provide Str Str and
134:21 - Then followed by zero and then instead
134:23 - of this P character let's say I want to
134:25 - provide the character Q over here and
134:28 - then let me just print this string once
134:30 - again so we will simply print the string
134:33 - let me just save this file and try
134:34 - running this code now as you can see we
134:36 - are getting the type error string object
134:38 - does not support item assignment so we
134:41 - cannot change any of the characters over
134:43 - here but there is another way to do this
134:45 - what we can do is simply we can copy
134:47 - this entire string value and paste this
134:50 - over here and then again instead of P we
134:52 - can provide Q over here but this time we
134:55 - have to remove this index number so this
134:57 - is possible because we are providing the
135:00 - reassignment of the string variable so
135:02 - let us check this we'll save this file
135:04 - and try running this code now as you can
135:06 - see we are getting Q over here and all
135:08 - the other characters are same so
135:10 - basically by immutable we mean that we
135:12 - cannot change a particular Single
135:14 - Character inside the string by using the
135:17 - index number for that particular
135:18 - character but in case if you want to
135:20 - reassign the entire string that can be
135:23 - done by using such reassignments
135:25 - operator now guys there is another
135:27 - important functionality in Python
135:29 - multi-line strings are allowed so
135:31 - basically we can also create a
135:32 - multi-line string in Python so for this
135:35 - we use the triple double codes or triple
135:37 - single codes over here so what we will
135:39 - do is let's say I'll just remove these
135:40 - lines of code and then I'll say Str Str
135:43 - it is equal to three * double codes over
135:46 - here we will use and then I will say
135:49 - this is first line and then on the next
135:53 - line we will say this is another line so
135:57 - this is basically the multi-line string
135:59 - that we have defined so how do we print
136:01 - this simply by using the normal way that
136:03 - is print function followed by the name
136:05 - of the string that is St Str variable
136:08 - let me just save this file and try
136:09 - running this code as you can see the
136:11 - format in which we have return the
136:13 - string that is the three double quotes
136:15 - were there over here followed by on the
136:17 - next line we were having this is first
136:18 - line and then this is another line and
136:21 - then we were having another double codes
136:23 - over here so these double codes followed
136:25 - by space characters and then between
136:27 - those space characters this is another
136:28 - line if we don't want these space
136:30 - characters soon after the double codes
136:32 - are being mentioned we have to provide
136:35 - the strings over here so the start of
136:37 - the double codes at the same line we are
136:39 - having this is first line and this is
136:41 - another line and then we have the three
136:43 - double codes on that same line so let me
136:45 - just save this file now and try running
136:47 - this code so basically this is the
136:49 - format so whatever format we follow in
136:52 - this three double codes or three single
136:53 - codes the same format will be followed
136:56 - while printing those lines on the
136:57 - terminal now what are the python string
136:59 - operations basically you can compare two
137:01 - strings with the equal to operator over
137:03 - here as you can see so let's say we have
137:05 - two strings over here string one it is
137:08 - equal to let's say we have John and then
137:11 - string two it is equal to let's say we
137:13 - have the name Peter over here so we have
137:16 - Peter so what we will do simply we will
137:18 - print Str str1 it is equal to Str str2
137:22 - so this is nothing but we are comparing
137:24 - two strings by using the equal to equal
137:26 - to operator which we have done
137:28 - previously as well while we were using
137:29 - the relational operators in order to
137:32 - compare two numbers we can compare two
137:34 - strings in the same way as well it will
137:36 - either return true or false based on
137:38 - whether they are equal or not so let me
137:40 - just save this file and try running this
137:41 - code now as you can see we are getting
137:43 - false that's because the names are
137:45 - different so what if we make the names
137:47 - same so I'll just copy this value and
137:49 - paste this over here now both the
137:50 - strings are same Str str1 and Str str2
137:53 - both are having the value that is John
137:55 - so let me just run this code now as we
137:57 - can see we are getting true over here
137:58 - that's because both the strings are same
138:00 - in this case now there is another
138:02 - operation how do we join the two or more
138:04 - strings so we can do so by using the
138:06 - plus operator so let's say we go back
138:08 - over here once again we provide the
138:10 - string to as Peter and we want to join
138:13 - both the strings so in this case instead
138:15 - of equal to equal to what we will do is
138:18 - we will specify the string one that is
138:20 - St str1 and then plus operator and Then
138:23 - followed by Str str2 in this case so let
138:25 - me just save this file now and try
138:27 - running this code as you can see we are
138:29 - getting John Peter over here
138:30 - continuously there is no space character
138:32 - so either we can provide a space
138:34 - character over here or else we can have
138:36 - the space character inside the print
138:38 - function as well so we can have the
138:40 - double codes inside which we can have
138:42 - the space character and then again we
138:44 - have to use the plus operator in order
138:47 - to join these strings so let me just
138:48 - save this file now andent try running
138:50 - this code so as you can see we are
138:51 - getting John Peter and then there is a
138:53 - space character in between so we can
138:56 - join multiple strings as well by using
138:58 - the plus operator over here the same
139:00 - plus operator will be used in order to
139:02 - add two numbers if these variables are
139:04 - numbers but in our case these variables
139:06 - are strings and that is why it is being
139:08 - used in order to join the two strings in
139:11 - this case now how do we iterate through
139:12 - a python string so basically we can
139:15 - iterate through a string by using the
139:16 - fall Loop so let us check this with the
139:18 - help of example now let's say we have
139:20 - string one over here we provide four
139:22 - followed by S which is the temporary
139:24 - variable and then we have the in keyword
139:27 - followed by Str str1 I'll just make this
139:29 - as item so that it is more user friendly
139:32 - in order to understand so basically Str
139:35 - str1 which is having the sequence of
139:36 - characters one character at a time will
139:39 - be assigned to this item variable and
139:41 - the control flow will go inside this
139:43 - fall Loop now inside this we can simply
139:45 - have the item being printed so when we
139:48 - provide item over here inside the print
139:50 - function and when we save this file and
139:52 - try running this code as you can see all
139:54 - the characters that is j o h n these are
139:57 - getting printed on separate lines how do
139:59 - we get them on the same line so what we
140:01 - can do is we can provide the end
140:03 - operator equal to we can simply provide
140:06 - the double codes and we don't have to
140:08 - provide anything over here if we want to
140:10 - separate all the characters with a comma
140:12 - we can provide comma over here as well
140:14 - so let me save this file and try running
140:15 - this code as you can see John is getting
140:17 - printed but all the characters are
140:19 - getting separated using the comma we can
140:22 - simply remove this comma over here I'll
140:24 - save this file and try running this code
140:26 - now as you can see we are getting John
140:27 - over here so since we have provided this
140:30 - end parameter with nothing but simply
140:32 - double codes we are getting all the
140:34 - characters or else when we don't provide
140:36 - this parameter by default the end
140:38 - parameter is having the slend character
140:40 - due to which all the items will be
140:42 - printed on the new lines there is
140:44 - another important thing how do we find
140:46 - the python string length so basically we
140:48 - can use the Len method to find the
140:50 - length of the string so let's say we
140:52 - have programming for beginner string
140:54 - over here so I'll just type programming
140:57 - for beginners and we want to find the
141:00 - length of the string that means how many
141:02 - characters are present inside the string
141:04 - so we can simply use the Len function
141:07 - that is the length function in order to
141:09 - print the count of the characters inside
141:11 - the string so we can have the L and
141:14 - function followed by inside the open and
141:16 - close paresis we have the variable name
141:19 - that is s Str over here so let me save
141:21 - this file and try running this code so
141:23 - it is saying object of type type has no
141:25 - lens so basically we have provided Str
141:27 - Str over here instead we have to provide
141:30 - Str str1 which is the variable name so
141:32 - that was the mistake so let me just save
141:34 - this file now and try running this code
141:36 - as you can see 25 we are getting that is
141:39 - the number of characters that are
141:40 - present inside the string let's say I
141:42 - add some more characters over here I
141:44 - provide one two which means I have added
141:46 - two two more characters inside the
141:48 - string so that should be 27 in this case
141:51 - so when we just save this file now and
141:52 - try running this code we get 27 as the
141:55 - count which is the updated count of
141:57 - number of characters inside the string
141:59 - and that is how this length function
142:01 - will work in order to return you one
142:03 - particular integer which is the count of
142:05 - the number of characters inside the
142:07 - string now guys there is another
142:09 - important thing string membership test
142:11 - so basically this we have already seen
142:13 - we can test if a substring exist within
142:15 - a string or not using using the keyword
142:18 - in so we have already used the fall loop
142:20 - as well and in the membership operator
142:22 - we have used the in keyword in order to
142:24 - find a particular letter is present or
142:26 - not inside the string so that you can
142:28 - take as a homework for you so that you
142:30 - can practice on your own you can find
142:31 - out whether the character X is present
142:34 - inside the string or not and if it is
142:36 - present then you should display true and
142:38 - if it is not present then you should
142:39 - display false comment in the comment
142:41 - section below what is the output of your
142:43 - program while using this membership
142:45 - operator that is in now guys very
142:47 - important thing there is something
142:48 - called as Escape sequences in Python now
142:51 - the escape sequence is used to escape
142:53 - some of the characters present inside a
142:55 - string so what we have done over here is
142:58 - while providing the string we are
143:00 - enclosing it using the double codes but
143:02 - what if the double quotes is a part of
143:04 - this string let's say I want to provide
143:06 - a double quotes over here before
143:08 - beginners so as you can see after
143:10 - providing the double codes we are
143:11 - getting a red underline over here which
143:13 - means there is some issue so what we can
143:16 - do is in order to avoid this issue and
143:18 - to make this as a part of this string we
143:20 - have to use the Escape character which
143:22 - means we have to use a back slash
143:24 - character over here just before the
143:26 - special character so this is the way
143:28 - that we use the Escape character we use
143:30 - the back slash character over here once
143:32 - and then followed by our special
143:34 - character which is causing the issue and
143:36 - in this case this double quote will be
143:38 - the part of the string now so let me
143:40 - save this file and try running this code
143:42 - currently we are getting the length of
143:44 - the string what we will do is I'll just
143:45 - remove this length function so that we
143:47 - can print the value of the string so
143:49 - I'll just save this file and try running
143:51 - this code as you can see programming for
143:54 - and then we are getting the double codes
143:55 - over here which is the part of the
143:57 - string and then we have the beginners
143:58 - over here so this is the way in case you
144:00 - want to escape certain characters or
144:02 - special characters we can use the back
144:05 - slash which is known as the Escape
144:07 - character in Python Programming now guys
144:09 - there is another way in order to print
144:10 - the string by using the python string
144:12 - formatting so as you can see for example
144:14 - let's say we have the name that is John
144:16 - and we have age it is equal to 25 so one
144:19 - way that we can print both that is name
144:21 - and age is by using the multiple objects
144:24 - inside the print statement so let us
144:26 - check this so we have name over here
144:28 - which is John right now and then let's
144:31 - say we have age it is equal to 25 and we
144:35 - want to print both that is name and age
144:37 - within one print function so what we
144:39 - will do is we will say name is followed
144:43 - by comma and then we provide name and
144:45 - then again comma and then we have double
144:47 - codes and then we provide end age is
144:52 - followed by comma and then we have age
144:55 - over here so what we have done is this
144:57 - string will be printed that is name is
144:59 - followed by this name value will be
145:02 - taken from this variable that's because
145:04 - we have provided it outside the double
145:06 - codes over here and after providing this
145:08 - comma and then again there is a comma
145:10 - and then we have a normal string label
145:12 - that is end ages and then we are
145:14 - specifying the age so this is one way in
145:17 - order to print both that is name and age
145:19 - in the same print statement so let me
145:21 - just save this file now and try running
145:23 - this code so as you can see name is John
145:26 - and age is 25 over here but guys this
145:29 - can be confusing since we have to use
145:31 - multiple commas over here as well as
145:33 - multiple double quotes as well so there
145:35 - is another way in order to print the
145:37 - same string so what we can do is again
145:39 - we can have the print function but this
145:41 - time what we will do is in the open and
145:44 - close parenthesis we provide the F
145:46 - character followed by single codes over
145:49 - here so inside the single codes we can
145:51 - provide the variable name that is name
145:54 - and age as well so in this case if we
145:56 - want to get the value of this name
145:58 - variable we have to enclose it within
146:01 - the curly braces so these are the curly
146:03 - braces as you can see we have the open
146:05 - and close curly braces and inside this
146:08 - we provide name over here so if we do it
146:10 - in this way we provide the F character
146:13 - and then inside the single codes inside
146:15 - the curly braces we have the name over
146:17 - here it will print the value that is
146:19 - John so let me just save this file and
146:21 - try running this code as you can see
146:23 - John is getting printed which is the
146:25 - value of this name variable now we want
146:27 - to print the entire string that is we
146:29 - also want the labels so before this name
146:32 - that we have provided we can simply
146:34 - provide the string that is name is and
146:36 - Then followed by open and close braces
146:38 - and inside the braces it will be name
146:41 - variable name and then we can simply
146:43 - provide end age is followed by open and
146:47 - close braces and then we can provide the
146:50 - age variable name so guys this is the
146:53 - format we have the F character and
146:55 - inside the single codes as you can see
146:57 - we have provided the string label that
146:59 - is name is and Then followed by open and
147:01 - close curly braces inside which we
147:04 - provide our variable name and Then
147:05 - followed by end ages or any other string
147:08 - label that you want to Define and then
147:10 - we can have the variable name that is
147:12 - age over here inside the open and close
147:14 - curly Braes so let me just save this
147:16 - file now and try running this code as
147:18 - you can see we have the perfect string
147:20 - that we wanted that his name is John and
147:22 - age is 25 so this is another way we can
147:25 - use the python string formatting by
147:27 - using this F character inside the print
147:29 - function in order to print the string in
147:31 - the way that we want to print so Guys
147:33 - these are certain things as far as
147:35 - strings are concerned in Python
147:36 - programming language sets in Python
147:39 - Programming so guys a set is a
147:41 - collection of a unique data which means
147:44 - that the elements in a set cannot be
147:46 - duplicate elements so over here you can
147:48 - easily create a set in the python
147:50 - basically in Python we create the sets
147:53 - by placing all the elements inside the
147:55 - curly braces separated by comma so guys
147:58 - previously we have seen that for the
148:00 - list we are using the open and close
148:02 - square brackets for the tle we use the
148:04 - open and close parenthesis and over here
148:06 - for sets we are using the open and close
148:09 - curly braces so we will check this with
148:11 - the help of examples as well a set can
148:13 - have any number of items and they may be
148:16 - of different types so as you can see it
148:18 - can be of the integer float tle or
148:21 - string data type or any other data type
148:23 - but a set cannot have mutable elements
148:25 - like list sets or dictionaries as its
148:28 - elements so guys this is very important
148:30 - you cannot have another list set or a
148:33 - dictionary which we are going to see in
148:35 - the upcoming videos over here we cannot
148:37 - have these kinds of data types inside a
148:39 - particular set now let us check the
148:41 - creation of set with the help of example
148:43 - now over here so let's say I provide set
148:45 - one as the variable name and then we
148:48 - provide the equal to symbol followed by
148:50 - the open and close curly braces so
148:52 - inside these braces we have to provide
148:54 - the elements of the set so let's say we
148:56 - have the set of integers we have 1 2 3 4
149:00 - and then five so guys we have five
149:02 - elements over here 1 to 5 which are the
149:04 - elements of this set and simply we can
149:07 - print all these elements inside the set
149:09 - by using the print function over here
149:11 - and then we can say set
149:15 - elements are and then colon and then we
149:18 - can have set one that is the variable
149:21 - name so guys let me just save this file
149:23 - and try running this code now so as you
149:25 - can see we are getting set elements are
149:27 - we are getting all the elements that is
149:28 - 1 2 3 4 5 and guys this is the way that
149:31 - we can create a set in the Python
149:33 - Programming now guys it is very
149:35 - important that we cannot have the
149:36 - duplicate items in this set so let's say
149:39 - I provide some more numbers over here
149:41 - which are already present in this set so
149:43 - let's say two and three are already
149:45 - present I provide the 2 and three once
149:47 - again so when we do this so right now we
149:49 - have seven number of elements but let me
149:51 - just save this file now and try running
149:53 - this code to see how many elements get
149:55 - printed so as you can see only five
149:57 - elements are getting printed so those
149:59 - two elements that is two and three will
150:01 - not be considered once again while
150:03 - printing them because we cannot have
150:05 - duplicate elements we can only have the
150:07 - unique elements inside the set and guys
150:10 - this is the main functionality of having
150:12 - the set data structure in Python
150:14 - Programming So based on your
150:15 - requirements if if you don't want the
150:17 - duplicate elements to be present you can
150:19 - use the set data structure in the Python
150:21 - programming language now guys how do we
150:23 - create an empty set in the python so
150:25 - basically creating an empty set is a bit
150:28 - tricky so empty curly braces if we use
150:31 - then it will make a empty dictionary in
150:33 - Python so basically when we create a
150:35 - dictionary we again use the curly braces
150:38 - so let us check this with the help of
150:39 - example now over here what happens if we
150:41 - create the empty set so let's say we
150:44 - provide set one it is equal to open open
150:46 - and close curly braces as you can see we
150:48 - have not provided any element and this
150:50 - is the empty set but let me just print
150:53 - the type of this variable over here so
150:55 - we will simply use the type function and
150:58 - then provide the set one as the variable
151:01 - name so guys what will be the type of
151:02 - this set one variable so let me just
151:04 - save this file now and try running this
151:06 - code as you can see it is saying that
151:08 - class it is a dictionary data type so
151:11 - this set one variable is of the data
151:13 - type dictionary by default when we
151:15 - provide the open open and close curly
151:17 - braces how do we make it as a empty set
151:20 - data type so what we have to do is
151:22 - instead of using the open and close
151:24 - curly braces we have to use the set
151:27 - function so there is something called a
151:29 - set function over here as you can see vs
151:31 - code is suggesting us so this set
151:33 - function followed by the open and close
151:35 - parenthesis will help us to create a new
151:37 - empty set over here so let me just save
151:40 - this file now and try running this code
151:42 - over here what we are trying to do is
151:44 - again we are trying to print the type of
151:46 - this set one but this time it should be
151:48 - of the set data type so let me just run
151:50 - this code now so as you can see we are
151:53 - getting the set data type over here
151:55 - previously we were getting the
151:56 - dictionary so in order to have the empty
151:59 - set in Python Programming we can use the
152:01 - set function over here now very
152:03 - important question how do we add the set
152:05 - items in Python so basically sets are
152:07 - mutable which means we can add and
152:09 - remove items from the set however since
152:12 - they are unordered indexing has no
152:15 - meaning so guys basically Al if you must
152:17 - have noticed there is no one order in
152:19 - which the set items were printed
152:21 - previously so let us check this once
152:23 - again over here we provide set 1 it is
152:26 - equal to and let's say we provide some
152:28 - elements that is 3 2 4 1 5 and then let
152:33 - me just print this set one over here so
152:36 - we provide set one inside the print
152:39 - function let me just run this code as
152:41 - you can see we are getting 1 2 3 4 5
152:43 - this is not of the same order in which
152:45 - we have provided these elements inside
152:48 - the set so we cannot use index numbers
152:50 - over here as well in order to access
152:52 - these elements one at a time since the
152:55 - way in which the elements inside the set
152:57 - are printed are not in a particular
152:59 - order now guys how do we add new
153:01 - elements to this set so basically we
153:04 - cannot access or change an element of a
153:06 - set using the indexing or slicing but we
153:09 - can use the add method to add an item to
153:12 - a set so let us say I want to add
153:14 - another element over here so basically
153:17 - what we will do is we will say initial
153:20 - set and then colon and then we provide
153:23 - set one and then let's say we provide
153:25 - set one dot we have something called as
153:28 - ADD over here as you can see this is a
153:30 - function that we can use in order to add
153:33 - elements inside the set so let's say we
153:35 - provide 10 as the number to be added to
153:38 - this particular set that is set one and
153:40 - then again we want to print that set one
153:42 - so I'll just copy this and paste this
153:44 - over here and then we have updated set
153:47 - over here so we have updated set and
153:49 - then set one being printed so let me
153:51 - just save this file and try running this
153:53 - code now so as you can see initial set
153:55 - it is 1 2 3 4 5 and then after adding
153:58 - this element we are getting the updated
154:00 - set as 1 2 3 4 5 and then the last
154:03 - element that is 10 over here which is
154:05 - being added by using the add method and
154:08 - this is the way that we can add the
154:09 - elements inside the set remember that
154:12 - the order in which they are added will
154:14 - not be followed while printing them so
154:16 - you cannot rely on the order in which
154:18 - the set elements will be printed on
154:20 - Console now guys another important thing
154:22 - how do we remove an element from the set
154:25 - so we can use the discard method to
154:27 - remove the specified element from a set
154:29 - so let us say after adding this we want
154:31 - to remove the element that is three from
154:34 - this set so what we can do is we can
154:37 - provide set one and then followed by Dot
154:39 - and then we can have discard method in
154:42 - order to remove the element we need to
154:44 - provide the element which needs to to be
154:46 - removed so over here we provide the
154:48 - number three which will be removed from
154:50 - the set one and then again let me just
154:53 - copy this line of code and paste this
154:55 - over here so that we can print the
154:56 - updated set after removing so over here
154:59 - we say updated set after removing three
155:05 - and then let me just save this file and
155:06 - try running this code now so as you can
155:08 - see we are getting 1 2 4 5 and then 10
155:11 - so the element three is being removed
155:14 - after using the discard method over here
155:16 - and guys this is the way that we can
155:18 - remove the elements from the set now
155:20 - guys there is another way in order to
155:21 - access the elements inside the set we
155:23 - can iterate over a set in Python by
155:26 - using the fall Loop so this can be
155:28 - easily done by using the fall Loop over
155:30 - here so what I will do is I'll just
155:32 - clear these lines of code and then we
155:34 - will say for and then item in set one so
155:38 - this is the syntax that we use while
155:40 - using the fall Loop and then we can have
155:43 - the print statement over here guys
155:45 - notice that till now we were printing
155:47 - the elements of the set by using the set
155:49 - one variable and that is why we were
155:51 - getting the starting and the ending open
155:53 - and close curly braces over here but
155:56 - this time let's say we don't want those
155:58 - but we want only those numbers that is
156:00 - the elements inside the set to be
156:02 - printed so we can easily use the fall
156:05 - Loop and iterate through each and every
156:07 - item inside the set and this is the way
156:10 - that we can do so we provide the print
156:12 - statement over here and inside the item
156:15 - variable one at a time all the elements
156:17 - will be printed over here so let me just
156:19 - save this file now and try running this
156:21 - code so as you can see we are getting 1
156:23 - 2 3 4 5 now all these numbers are on a
156:26 - different line what we can do is we can
156:28 - use the end parameter of the print
156:31 - function so over here we provide the end
156:33 - parameter and then we simply provide the
156:35 - space character so that all the items
156:38 - are separated by the space characters
156:40 - over here so let me just save this file
156:41 - now and try running this code so as you
156:43 - can see we are getting 1 2 3 4 5 five
156:46 - which are the elements of this set if
156:48 - you want all these numbers to be
156:49 - separated by commas what we can do is
156:51 - inside of the space character we can
156:53 - provide the comma and let me just save
156:55 - this file and try running this code once
156:57 - again as you can see we are getting 1 2
156:59 - 3 4 5 and all the elements are being
157:01 - separated using the comma character now
157:04 - guys how do we find the number of set
157:06 - elements so we can use the Len method
157:09 - that is the length method to find the
157:11 - number of elements that is present
157:12 - inside the set so what we can do is
157:14 - simply we can provide the print
157:16 - statement over here and we can simply
157:18 - say that length of set is and then colum
157:24 - and then we can simply use the alen
157:26 - method and then inside this method we
157:29 - can provide the set one that is the
157:31 - variable name so let me just save this
157:33 - file now and try running this code so as
157:35 - we can see length of set is five so
157:37 - basically since five elements are
157:39 - present over here we are getting the
157:41 - length as five what if we provide some
157:43 - more elements let's say I provide 6 7
157:45 - and and let's say I provide some more
157:46 - duplicate elements over here that is 1 2
157:49 - and then three so over here there are
157:51 - total 10 elements out of which three
157:54 - elements are duplicate so what is the
157:55 - exact length of the set so let me just
157:58 - save this file now and try running this
157:59 - code so as you can see length of set is
158:01 - seven so even though we are having 10
158:04 - items inside the set but out of those 10
158:06 - items three items are duplicate items so
158:09 - those duplicate items will not be
158:11 - considered it will be considered only
158:13 - once and that is why we are getting the
158:15 - length of this set as 7even now guys
158:17 - very important thing about the set
158:19 - operations we can carry out different
158:21 - set operations in Python Programming one
158:24 - is Union of two sets which can be done
158:26 - by using the union method or this or
158:29 - symbol over here we can also have the
158:31 - set intersection which can be
158:33 - implemented by using the intersection
158:35 - method and then we also have the
158:37 - difference between the two sets which
158:39 - means we can use the difference method
158:41 - or the minus symbol over here so guys
158:43 - let us check all these operations one at
158:45 - at a time so over here what we will do
158:47 - is we will have two sets over here we
158:50 - will say set one it is equal to 1 2 and
158:52 - then three and then let's say we have
158:54 - set two it is equal to 3 4 and then 5
158:59 - now guys let's say we want to find the
159:01 - Union first so what we will do is we
159:03 - will say Union and then we will simply
159:06 - say set one followed by Dot and then we
159:09 - have the union method followed by the
159:12 - parameter needs to be set to over here
159:15 - because that is the another set that we
159:17 - want to find the union of similarly we
159:19 - will do the intersection and difference
159:21 - as well so I'll just copy and paste
159:23 - these lines of code over here we will
159:25 - say intersection in this case and then
159:29 - we will simply change the union method
159:31 - to intersection over here and then over
159:34 - here we will say
159:36 - difference so difference and then
159:38 - instead of this Union we will say
159:41 - difference so guys basically what we are
159:43 - doing over here is these are all the set
159:45 - operations
159:46 - the union will find all the elements
159:48 - that are present in set one and set two
159:51 - and all the elements will be unique in
159:53 - the intersection part we will get all
159:55 - the elements that are common in both the
159:58 - sets which means three in this case and
160:00 - then in the difference we will find all
160:02 - the elements that are present in set one
160:04 - but not present in set two so guys let
160:07 - me just save this file now and try
160:08 - running this code to see what will be
160:10 - the results of all these operations so
160:12 - as you can see the union is giving us 1
160:15 - 2 3 4 5 which means all the elements
160:17 - that are present in set one and set 2 so
160:20 - we are having 1 2 3 in set 1 and then in
160:23 - set two the three is already printed and
160:25 - then it is printing four and five as
160:27 - well in intersection we are getting only
160:30 - three that's because the element three
160:32 - is the only element which is common in
160:34 - both the sets for the difference
160:36 - operation we are getting only one and
160:38 - two that's because these are the only
160:39 - two elements which are present in set
160:41 - one but not present in set two so Guys
160:44 - these are certain set operations that
160:46 - can be implemented with Python
160:47 - Programming apart from this there are
160:49 - multiple built-in methods that you can
160:51 - use as far as sets are concerned so when
160:53 - we provide the variable name that is set
160:55 - one followed by dot as you can see these
160:57 - are all the methods that can be used
161:00 - based on your requirements dictionary in
161:02 - Python Programming so guys the python
161:04 - dictionary is an ordered collection of
161:07 - items it stores elements in the form of
161:10 - key value pairs so basically on the left
161:12 - hand side we have a key and on the right
161:15 - hand side we have the value and such key
161:17 - value pairs are known as dictionary in
161:19 - Python Programming now guys the keys are
161:22 - unique identifiers that are associated
161:25 - with each value so basically we cannot
161:27 - have duplicate keys in a dictionary
161:29 - whereas we can have the duplicate values
161:31 - in the dictionary so as you can see for
161:33 - example over here on left hand side we
161:35 - are having the keys on right hand side
161:37 - we are having the values so Nepal Italy
161:40 - and England these are certain Keys over
161:43 - here and they are capital that is katman
161:45 - to Rome and then London these are the
161:48 - values on the right hand side so how do
161:50 - we create a dictionary in Python we can
161:52 - have any variable name in this case and
161:54 - after the equal to symbol inside the
161:56 - open and close curly braces we are
161:58 - having the key value pairs so since this
162:00 - is a string we are enclosing it within
162:03 - the double Cotes over here and then
162:05 - after the key that is Nepal we are
162:07 - providing a colon in this case followed
162:09 - by the value which is again inside the
162:11 - double codes and then separated by
162:14 - commas we have more key value pairs over
162:16 - here so guys this is the way that we can
162:18 - create the dictionary so guys let us
162:20 - check this with the help of examples now
162:22 - over here so let us say we have dict1
162:25 - that is the variable name followed by
162:27 - equal to and then let's say we provide
162:29 - the same data over here so I'll just
162:31 - copy and paste this line so we have
162:34 - copied the same key value pairs over
162:36 - here now simply we can print this key
162:38 - value pairs by using the print function
162:40 - and Then followed by dict1 which is the
162:43 - variable name so let me just save this
162:45 - file and try running this code now as
162:47 - you can see we are getting all the key
162:48 - value pads over here being printed on
162:50 - the console so guys this is the way that
162:52 - we can create the dictionary along with
162:54 - the key value P that we want to store
162:57 - inside the dictionary now how do we add
162:59 - elements to a python dictionary so we
163:01 - can add the elements to a dictionary
163:03 - using the name of the dictionary with
163:05 - open and close square brackets so guys
163:08 - over here what we will do is we will say
163:11 - initial
163:13 - dictionary so this table we have added
163:16 - so that we can identify that this is the
163:18 - initial dictionary now what we will do
163:20 - is we will add one more key value pair
163:22 - inside the same dictionary so what we
163:25 - have to do is we have to use this
163:26 - variable name that is dict1 followed by
163:29 - open and close square brackets and
163:31 - inside this we have to provide the key
163:34 - so let's say the key over here we
163:36 - provide India as the key and then the
163:38 - capital of India it is Delhi so over
163:41 - here the value that we have to provide
163:42 - is Delhi in this case so what we have
163:45 - done is we have provided the variable
163:47 - name and Then followed by the open and
163:49 - close square brackets and inside those
163:51 - brackets we have to provide the key in
163:53 - this case it is a string and then we
163:55 - have equal to followed by the value for
163:57 - this key which is again another string
164:00 - and then guys what we will do is let's
164:02 - say we want to print this entire
164:03 - dictionary once again so we will print
164:05 - this and over here we will say updated
164:08 - dictionary and then again dict1 so let
164:11 - me just save this file and try running
164:13 - this code now so as you can see we have
164:15 - the updated dictionary as we have Nepal
164:18 - Italy England and then the last element
164:20 - that we have added just now is the key
164:23 - that is India and Delhi that is the
164:25 - capital of India as the value so guys
164:27 - this is the way that we can add elements
164:30 - inside the dictionary in the form of key
164:32 - value pairs now guys how do we change
164:34 - the value of a dictionary so we can
164:36 - again use the open and close square
164:38 - brackets in order to change the value
164:40 - associated with a particular key so guys
164:42 - let us check this with the help of
164:44 - example now so over here what we will do
164:46 - is let's say we have added this key
164:48 - value pair that is for India we have the
164:51 - capital that is Delhi but now let us say
164:53 - instead of having the capital as the
164:55 - value we can provide any city as the
164:58 - value for this country so what we can do
165:00 - is again we can provide the variable
165:03 - name that is dict1 and then for this key
165:06 - that is India we want to update the
165:08 - value so let's say this time the value
165:10 - that we provide is Mumbai which is a
165:13 - very popular city in India so we provide
165:16 - Mumbai over here and then again we are
165:18 - printing this dictionary once again so
165:20 - let me just save this file now and try
165:21 - running this code so as you can see the
165:24 - updated dictionary first time it is
165:26 - showing India that is Delhi and then the
165:28 - second time that is updated dictionary
165:31 - it is showing India and this time the
165:32 - value it is Mumbai in this case so guys
165:35 - this is the way the same way is used in
165:37 - order to add the key value pair and in
165:40 - order to update the key value pair as
165:42 - well we have to make sure that whatever
165:44 - key we want want to update it is case
165:46 - sensitive if let's say I provide the
165:48 - small I over here so in this case it
165:51 - will add a key value pair since this
165:53 - India is not matching with this India
165:55 - that's because over here we are having
165:57 - the capital I and over here we are
165:59 - having the small I so let me save this
166:01 - file now and try running this code this
166:03 - time we are getting the five key value
166:05 - pairs in this case so India Delhi and
166:07 - then we have the small I and then Mumbai
166:10 - so guys make sure that whenever you are
166:11 - updating the key value pairs the key of
166:14 - the dictionary must exactly match with
166:16 - the existing keys that are present in
166:18 - the dictionary now guys how do we access
166:20 - the elements from the dictionary so in
166:22 - Python we use the keys to access their
166:24 - corresponding values so let us check
166:26 - this with the help of examples now over
166:28 - here so let's say we have these three
166:30 - key value pairs as the original
166:32 - dictionary now we only want to print the
166:34 - value of this particular key that is
166:36 - Nepal over here so what we will do is we
166:38 - will simply have the print statement and
166:40 - then we will say dict1 that is the
166:43 - variable name followed Follow by open
166:45 - and close square brackets and we simply
166:47 - provide this key that is Nepal over here
166:50 - so inside the double codes we provide
166:52 - Nepal over here so let me just save this
166:54 - file and try running this code now so as
166:56 - you can see we are getting the value of
166:58 - this key that is Nepal similarly if we
167:00 - provide Italy as the key so I'll just
167:03 - replace Nepal by Italy over here so as
167:06 - you can see we are getting the value as
167:08 - Rome because the value for this key that
167:11 - is Italy is Rome over here so in this
167:13 - way we can easily access the values of
167:15 - the keys that we want to print now guys
167:17 - how do we remove the elements from the
167:19 - dictionary so we use the D statement to
167:22 - remove an element from the dictionary so
167:25 - what we will do is let's say I want to
167:27 - print the original dictionary over here
167:30 - so we will say
167:32 - original
167:34 - dictionary and then colon and then we
167:36 - say dict1 now guys what we will do is
167:39 - let's say I want to delete this key
167:42 - value pair that is Nepal and Katmandu so
167:45 - we will use delete and Then followed by
167:47 - dict1 and then open and close square
167:50 - brackets and inside this we have the
167:52 - double codes and we simply provide the
167:54 - key over here that is Nepal so this
167:56 - statement will help us in order to
167:58 - delete this particular key that is Nepal
168:01 - and Katmandu over here so let me just
168:04 - print this dictionary once again so over
168:06 - here we have updated dictionary and then
168:10 - let me just save this file now and try
168:12 - running this code so as you can see
168:13 - original dictionary we are getting all
168:15 - the three key value pairs that is Nepal
168:18 - Italy and England over here along with
168:20 - their values but the updated dictionary
168:22 - it is giving us only two key value pairs
168:25 - that is Italy that is Rome and for
168:27 - England we are getting London so over
168:30 - here this key value pair that is for
168:32 - Nepal we are having the Katmandu value
168:34 - this was removed because of this
168:36 - particular statement that we have used
168:38 - in order to remove the Nepal key and its
168:41 - value as well now guys as far as
168:43 - dictionary membership test is concerned
168:45 - we can test if a key is in a dictionary
168:48 - or not using the keyword in so in
168:50 - keyword is used in order to check the
168:52 - membership test so note that the
168:54 - membership test is only for the keys and
168:56 - not for the values so guys let's say
168:58 - over here I'll just remove these lines
169:00 - of code so for this original dictionary
169:03 - we want to find whether the key Italy is
169:06 - present inside the dictionary or not so
169:08 - we will say print and then we can simply
169:11 - say Italy and then we use the in keyword
169:15 - followed by dict1 so guys what exactly
169:18 - we are doing is we are checking whether
169:20 - this string it is present in dict1 or
169:22 - not so let me just save this file and
169:24 - try running this code so as you can see
169:26 - it is showing us true over here that's
169:28 - because the key Italy is present inside
169:30 - the dictionary but the same thing is not
169:32 - applicable when we provide one of the
169:34 - values inside the dictionary so let's
169:36 - say we provide Rome as the value over
169:39 - here so Rome in dict1 so let me just
169:42 - save this file and try running this code
169:44 - so as you can see it is showing us false
169:46 - that's because Rome is the value and it
169:48 - is not one of the keys that are present
169:50 - inside the dictionary so guys we can
169:52 - also use the in keyword in order to
169:54 - check whether a particular key is
169:56 - present inside the dictionary and it is
169:58 - only applicable for the list of keys
170:01 - over here now guys we can also iterate
170:03 - through the dictionary by using the fall
170:05 - Loop over here so what we can do is
170:07 - simply we can use the for Loop in order
170:09 - to print all the key value pairs so over
170:12 - here we have the for keyword for Follow
170:14 - by let's say we provide the key variable
170:18 - name and then we provide the in keyword
170:20 - and Then followed by the variable name
170:22 - that is dict1 and then colon so what we
170:25 - will do is we will simply have the print
170:27 - statement and then let's say we want to
170:29 - print the key value pairs in the
170:31 - particular format so we will say key in
170:34 - this case and Then followed by comma and
170:37 - then let's say we provide Arrow over
170:40 - here and then after this we provide the
170:42 - value so how do we access the value Val
170:45 - we provide the dict1 that is the
170:47 - variable name and then inside the open
170:50 - and close square brackets we provide the
170:52 - key in this case so guys basically what
170:54 - is happening over here is all the keys
170:56 - that are present inside this variable
170:58 - one at a time it will be assigned to
171:00 - this key and this key we are printing on
171:03 - the left hand side and then we are
171:05 - having the hyphen and the arrow symbol
171:07 - and then using this key variable we are
171:09 - getting the value from this dictionary
171:11 - in this case so guys let me just save
171:13 - this file now and try run running this
171:15 - code so as you can see we are getting
171:17 - Nepal so Katmandu is the value then for
171:19 - the key Italy we are getting Rome as the
171:22 - value and for England we are getting the
171:24 - London as the value so guys this is the
171:26 - way that we can use the fall Loop in
171:28 - order to iterate through all the key
171:30 - value P inside the dictionary file
171:32 - reading in Python Programming so guys a
171:35 - file is a container in computer storage
171:38 - devices used for storing data so when we
171:40 - want to read from a file we need to open
171:44 - it first first when we are done it needs
171:46 - to be closed so that the resources that
171:48 - are tied with the file are freed so guys
171:50 - we are going to check this with the help
171:52 - of example how we can open the file in
171:55 - order to read the content of the file
171:57 - and then after that we can close the
171:59 - file as well so basically in Python a
172:01 - file operation takes place in the
172:03 - following order first of all we have to
172:05 - open the file then the next thing is we
172:07 - read the file content and then after
172:10 - reading the file content we close the
172:12 - file so basically the first operation
172:14 - that is open opening the file we can use
172:16 - the open method to open a file so as you
172:18 - can see for example over here we are
172:21 - providing the variable name on the left
172:23 - hand side and then on the right hand
172:24 - side we have the open function and then
172:27 - we have the path of the file where the
172:29 - file is stored and then by default it is
172:32 - opened in the read mode we can also use
172:35 - the second parameter and provide the
172:37 - character that is R for reading the file
172:40 - and in order to write into the file we
172:42 - use W as the character over here in this
172:44 - cas case and then guys after this we can
172:46 - read the file in Python by using the
172:48 - read method so basically this variable
172:50 - that we had used on the left hand side
172:52 - we can use the same variable over here
172:55 - in order to call the function that is
172:57 - read and this will help us in order to
172:59 - read the content into the variable that
173:02 - is read content and then in order to
173:04 - close the file we can simply use the
173:06 - close method so guys let us check all
173:08 - this with the help of example now over
173:10 - here so let's say we have the variable
173:12 - name that is file one and then followed
173:14 - y equal to and then we use the function
173:17 - name that is open in order to open the
173:19 - file and then inside the open and close
173:22 - parentheses we are going to have the
173:24 - path of the file that we want to open so
173:26 - guys over here I have the test file for
173:29 - which I have return some content over
173:31 - here so we have these four lines inside
173:33 - the test file so what we can do is so
173:35 - guys we have to copy the entire path of
173:37 - this directory this is very important in
173:40 - whichever directory your file is you
173:42 - have to copy the entire path of that
173:44 - directory Dory and paste this into your
173:46 - code so that your code can access that
173:48 - directory and the file that you want to
173:50 - read so basically over here inside the
173:53 - double codes we have to provide the
173:55 - directory path and Then followed by the
173:57 - name of the file that we want to read so
173:59 - over here I'll just copy the name of the
174:01 - file that is the test file and paste
174:04 - this over here followed by txt now guys
174:06 - it is very important that while you're
174:08 - copying the directory path you will be
174:10 - getting this back slashes over here so
174:12 - you have to provide another back slash
174:15 - since this one back slash is acting as
174:17 - the Escape character so you have to
174:19 - provide two back slashes over here every
174:21 - time that you are providing the
174:23 - directory path so I'll just provide
174:25 - extra back slashes over here at every
174:27 - instance in this directory path so guys
174:30 - this is our entire path over here
174:32 - followed by the test file that is the
174:34 - file name and then the extension that is
174:36 - txt now guys the second step is to read
174:39 - this file so the first step is completed
174:41 - that we have opened the file now the
174:43 - next step is to read the content so we
174:46 - will say read uncore content as the
174:49 - variable name followed by equal to we
174:52 - use this file one variable that we have
174:54 - used in order to open the file followed
174:57 - by Dot and then we have the read method
174:59 - so this method will help us in order to
175:01 - read the content into this read content
175:05 - variable and then guys simply we can
175:07 - print the read content variable so over
175:10 - here we can say read content so let me
175:13 - just save this file now and by running
175:14 - this code so as you can see we are
175:16 - getting all the four lines that are
175:18 - present inside the test file so if I
175:20 - open the test file over here once again
175:22 - it says this is a test line in a test
175:24 - file so the same line is printed over
175:27 - here on the console this is a test line
175:29 - in a test file similarly we have the
175:32 - other three lines it is this is another
175:34 - test line then we have this is third
175:36 - line and then this is fourth line in
175:38 - test file so all those lines that are
175:41 - present inside the test file are being
175:43 - printed over here on the console so guys
175:45 - this is one of the easiest way that you
175:47 - can open the file in a particular
175:49 - directory read the content by using the
175:52 - read function and then you can print the
175:55 - content of the file by using the print
175:57 - function now guys after these operations
175:59 - are completed what you have to do is you
176:01 - have to close the file which is very
176:02 - important so as you can see when we are
176:05 - done with performing operations on the
176:07 - file we need to properly close the file
176:09 - now closing a file will free up the
176:11 - resources that were tied with the file
176:14 - it is done using the close method in
176:16 - Python so basically after printing the
176:19 - content what we can do is simply we can
176:21 - provide file one followed by Dot and
176:24 - then we can have the close method being
176:26 - called so let me just save this file now
176:28 - and before running this code we will
176:30 - have another print function over here
176:32 - and we will print the statement that is
176:34 - file is closed in order to confirm that
176:37 - the control flow has reached the final
176:39 - statement over here in our code so let
176:42 - me just save this file now and try
176:43 - running this code code so as you can see
176:45 - all the four lines are being printed
176:47 - over here from the file once again and
176:49 - then we are also getting file is closed
176:51 - being printed over here and in this way
176:53 - we have already closed the file by using
176:55 - the close function as well so guys this
176:57 - is the way you can read the content of
176:59 - the file just by using these four lines
177:02 - of code we can easily read the entire
177:05 - content of any of the file that we want
177:07 - to read based on our requirements file
177:09 - writing in Python Programming so guys in
177:12 - Python a file operation takes place in
177:15 - the following order so basically first
177:17 - of all we have to open the file then
177:19 - secondly we can write into the file that
177:22 - we have opened and the last step is to
177:24 - close the file so these are the
177:26 - operations in this order in which we
177:28 - have to follow while writing the content
177:30 - into the file now there are two things
177:32 - we need to remember while writing to a
177:34 - file so first of all if we try to open a
177:37 - file that doesn't exist so a new file
177:39 - will be created in this case so guys we
177:42 - are going to check this with the help of
177:43 - example as well and in the second case
177:46 - if a file already exist then its content
177:49 - is erased and new content is added to
177:51 - the file again so Guys these are the two
177:54 - important things that you should know
177:55 - while writing into the file if the file
177:58 - is not already present then a new file
178:00 - will be created and if the file is
178:02 - already present then the existing
178:04 - content will be removed and the new
178:06 - content will be added into the file so
178:08 - guys the first operation is opening the
178:10 - file over here in which case we can use
178:12 - the open me method to open the file and
178:15 - this is the example we have the variable
178:17 - on the left hand side and then we have
178:19 - the open method followed by the name of
178:22 - the file over here along with the entire
178:24 - path if it is present in some other
178:26 - directory and Then followed by the
178:28 - second parameter that is W which stands
178:30 - for the right mode so guys let us check
178:33 - this with the help of example now over
178:34 - here so what we will do is we will say
178:36 - file one which is the variable name
178:39 - followed by equal to and then we have
178:41 - the open method in this case so we have
178:43 - have to provide the name of the file
178:45 - along with the directory path inside the
178:47 - parenthesis and the double codes over
178:49 - here so what we will do is we are going
178:51 - to use this directory over here in order
178:54 - to create a new file and write the
178:56 - content into the file so guys over here
178:58 - there are only two files that is Python
179:00 - tutorial and test file we are going to
179:03 - create a third file that is output.txt
179:06 - in which we are going to write the
179:08 - content by using the code over here so
179:10 - basically I'm going to paste the entire
179:12 - directory path and in order to avoid any
179:15 - errors I'll just use the double back
179:17 - slashes over here since these are the
179:19 - Escape characters so we provide the
179:21 - double back slashes and then at the end
179:24 - we have to provide the name of the file
179:26 - so I'll simply provide output.txt in
179:29 - this case and then guys the second
179:31 - parameter needs to be the writing mode
179:33 - so over here inside the double quotes we
179:35 - can say w which means we are opening the
179:38 - file in the right mode in this case now
179:40 - guys we have completed the first step
179:42 - now what is the next step right writing
179:44 - into the file so basically writing in a
179:46 - file in a python so after we open a file
179:49 - we use the write method to write the
179:51 - content in the file and this is the way
179:53 - as you can see in this example we have
179:55 - the variable name that is file one
179:57 - followed by Dot and then we have the
179:59 - right method and then the content that
180:02 - we want to write into the file so guys
180:04 - basically what we will do is on the
180:06 - second line over here we will say file
180:08 - one followed by Dot and then we have the
180:11 - right method this write method can be
180:13 - used in order to write the content into
180:15 - the file and it takes certain parameters
180:18 - the parameters will be the string or the
180:20 - integer numbers that you want to print
180:22 - or store inside the file so guys let's
180:24 - say I want to provide this is first line
180:29 - in
180:31 - output file so guys this is the content
180:35 - that we want to write into the file and
180:37 - this is the way that we can use the
180:39 - write function in order to write the
180:41 - content into the file and it takes the
180:43 - parameter as the string which we want to
180:45 - store inside the file now after writing
180:47 - what we have to do is we have to close
180:49 - the file so when we are done with
180:51 - performing operations on the file we
180:53 - need to properly close the file closing
180:56 - a file will free up the resources that
180:58 - were tied with the file it is done using
181:00 - the close method in Python so as you can
181:03 - see in this example we have file 1.
181:05 - close so over here we can simply provide
181:08 - file 1 do close in this case and then
181:12 - open and close parenthesis it doesn't
181:14 - take any parameters over here so guys
181:16 - let me just save this file now before
181:18 - running this code I'll show you the
181:20 - directory once again we have only two
181:22 - files over here that is Python tutorial
181:24 - and test file we are going to have a
181:26 - third file over here that is the
181:27 - output.txt that will be created after
181:30 - execution of this code so before running
181:33 - this code what I will do is I'll have
181:35 - the print statement so that we get the
181:37 - confirmation that the code is executed
181:39 - so we will say file
181:42 - created
181:45 - successfully so this is the statement
181:47 - that will be printed after all the lines
181:50 - of code are executed so guys let me just
181:52 - save this file now and try running this
181:54 - code so as you can see we are getting
181:55 - file created successfully and if we go
181:58 - inside the directory now as you can see
182:00 - we are getting the third file over here
182:02 - that is the output in this case so if we
182:04 - open this file as you can see this is
182:06 - first line in output file and this is
182:09 - what we have printed by using our
182:10 - program this is first line in output
182:13 - file the same statement is being printed
182:15 - over here it is being stored in our
182:17 - output file and guys this is the way
182:20 - that we have created a new file by using
182:22 - the python code in a particular
182:24 - directory that we wanted and also return
182:27 - the content into the file by using the
182:30 - two methods that is first of all we have
182:32 - used the open function in order to open
182:35 - the file in the right mode and then we
182:37 - have used the right function in order to
182:40 - write the content into the file now guys
182:42 - let us say we have another scenar scario
182:44 - in the same file we want to update the
182:46 - first line to this is first line and
182:49 - I'll just remove this in output file
182:51 - content over here so we have the short
182:53 - message that is this is first line and
182:56 - then what I will do is we have another
182:58 - statement so again we will have the file
183:00 - 1. write and then we can say this is
183:04 - second line in this case so guys we are
183:06 - having the two lines over here now and
183:08 - this will act as a kind of update now
183:10 - that's because we already have this
183:12 - output. TX file in this directory and
183:15 - now what we are doing is simply we are
183:17 - opening it once again and these lines
183:20 - will be stored in the file and guys
183:22 - remember that while you are opening the
183:24 - existing file what we already saw is the
183:27 - content is erased and the new content is
183:29 - added to the file so basically these two
183:31 - lines will be printed inside the
183:33 - output.txt file and now what we will do
183:36 - is for this print function we will say
183:38 - file updated successfully so guys let me
183:41 - just save this file now before running
183:43 - this code I'll show you that file once
183:45 - again over here we have the output file
183:48 - I'll just open this file we are having
183:49 - this is first line in a output file so
183:52 - let me just close this now and what we
183:54 - will do is we will run this code so as
183:57 - you can see file updated successfully we
183:59 - are getting this message we'll go to the
184:01 - directory to check what is the content
184:03 - so as you can see both the statements
184:05 - are getting printed over here this is
184:07 - first line and Then followed by this is
184:09 - second line now guys what happened is
184:11 - both the lines have continued on the
184:13 - same line but we can have them on the
184:15 - separate lines as well so what we can do
184:17 - is in our code we can simply provide the
184:20 - slashing character at the end of the
184:22 - first line over here so that the control
184:24 - flow goes to the next line while
184:26 - printing this statement that is this is
184:28 - second line so guys let me just save
184:30 - this file and try running this code now
184:31 - once again so it says file updated
184:33 - successfully we come back over here in
184:36 - the directory we open the output file
184:38 - now as you can see this is first line
184:41 - and then we have on the other line This
184:43 - is second line over here so guys in this
184:45 - way we can easily write the content in
184:47 - the file we can also have the multiple
184:49 - lines of content being stored in the
184:52 - file that we opened by using the Python
184:54 - programming language guys this concept
184:56 - of reading and writing the files are
184:58 - very important as far as your project
185:00 - requirements are concerned so please
185:01 - make sure that you practice on your own
185:03 - so that on different inputs you get
185:05 - different output apart from this can we
185:07 - use the with open syntax in order to
185:10 - write a file so you can try this as a
185:12 - homework for you you can watch my
185:14 - previous video as well in which I have
185:15 - explained you how we can use the with
185:18 - open syntax in order to read the file
185:20 - and in which case we don't have to close
185:22 - the file that's because it is
185:24 - automatically handled by this with open
185:26 - Syntax for us so please treat this as a
185:28 - homework for you and comment in the
185:30 - comment section below whether you were
185:32 - able to use the with open syntax in
185:34 - order to write into the file exceptions
185:37 - in Python Programming so guys an
185:39 - exception is an unexpected event that
185:42 - occurs during the program program
185:43 - execution so let's say for example if we
185:46 - have this divide by zero variable and
185:49 - then we do the assignment in such a way
185:51 - that we divide this number that is five
185:53 - by 0er then we get divide by 0 exception
185:56 - that's because this is a runtime
185:58 - exception and we cannot divide any
186:00 - number by zero so the above code causes
186:03 - an exception as it is not possible to
186:05 - divide a number by zero errors that
186:08 - occur at runtime after passing the
186:10 - syntax test are called exceptions or
186:13 - logical errors so guys basically there
186:15 - will be many exceptions that you will
186:17 - come across when you are going to write
186:19 - python programs and these exceptions are
186:21 - going to be the runtime exceptions after
186:23 - passing the syntax test that we have
186:25 - already seen in our vs code editor so
186:28 - basically these exceptions occur when we
186:30 - try to open a file for reading that does
186:33 - not exist that is file not found error
186:36 - so basically this is one of the
186:37 - exceptions in the Python programming
186:39 - language in which case if let's say you
186:41 - are trying to open a file which is not
186:43 - present in the directory then we will
186:45 - have file not found error over here then
186:48 - if we try to divide a number by zero
186:50 - then we will get zero division error and
186:53 - then again if we try to import a module
186:55 - that does not exist then we are going to
186:57 - get the import error and so on so
187:00 - basically there are many built-in
187:01 - exceptions that we can see by using this
187:04 - print statement inside the directory we
187:06 - have this locals and then we specify
187:08 - this builtins in order to get the list
187:10 - of exceptions that is already built in
187:12 - in the Python programming language so
187:14 - this we are going to check with the help
187:16 - of example as well what we are going to
187:18 - do is we are going to see how the
187:20 - exception occurs in the Python program
187:22 - so over here let's say we have the
187:23 - variable that is number over here and we
187:26 - have the number that is 5 ided 0 so in
187:29 - this case we are dividing a number by
187:31 - zero syntactically this is correct over
187:34 - here vs code will not throw any error
187:36 - but during the run time we will get the
187:38 - error which we call it as the exception
187:41 - so over here when we print this number
187:43 - so we say value of number is followed by
187:48 - colon and then let's say we provide this
187:51 - number variable so let me just save this
187:53 - file now and try running this code so as
187:56 - you can see we are getting this zero
187:57 - division error division by zero which is
188:00 - not possible we cannot divide any number
188:03 - by zero now let me show you another
188:05 - exception let's say we are going to open
188:07 - a file in this particular directory and
188:09 - the file name is test one which doesn't
188:12 - occur inside this directory so let me
188:14 - just copy this directory path and we
188:16 - will open that file which is test one
188:18 - which is not present so over here we
188:20 - provide the variable name as file one it
188:23 - is equal to we say open and then with
188:26 - this we have the parameter that is the
188:28 - directory path we have just copied over
188:30 - here we will just Escape these back
188:32 - slash characters so that we don't get
188:34 - any error over here for the back slashes
188:37 - and then at the end what we are going to
188:39 - do is after this we are going to provide
188:41 - test 1 Dot txt now this file name as I
188:45 - have showed you over here it is not
188:47 - present test one is not present over
188:49 - here so we are trying to open that by
188:51 - using this test 1.txt file name so now
188:54 - what we will do is simply we will save
188:56 - this file and TR running this code now
188:58 - so as you can see file not found error
189:01 - is being displayed no such file or
189:03 - directory and then this file name is
189:05 - being mentioned over here what if we
189:07 - provide the correct file name let's say
189:08 - I provide this test file as the name of
189:11 - the file so I'll just copy this file
189:13 - name and paste this over here at the end
189:15 - instead of test one so I'll just paste
189:17 - this over here and then let me just save
189:19 - this file now and I running this code so
189:21 - now as you can see nothing happens we
189:23 - are not printing anything but there is
189:25 - no exception that is being printed over
189:27 - here on the terminal that's because this
189:29 - particular file name is actually present
189:31 - and hence there is no file not found
189:34 - error that is being displayed over here
189:35 - like how we have seen previously with
189:37 - the test1.txt file so Guys these are
189:40 - certain exceptions that might occur when
189:42 - you are going to work with the python
189:44 - projects and such exceptions are
189:46 - inevitable we cannot avoid them but we
189:48 - can handle them so we are going to see
189:51 - exception handling in the upcoming
189:53 - videos as well how we are going to
189:54 - handle them but it is very important for
189:56 - you to know that these exceptions might
189:59 - occur when you're going to work with the
190:00 - Python programming language now guys let
190:02 - us see the list of all the built-in
190:04 - exceptions that are present inside the
190:06 - Python programming language so I'll just
190:08 - copy this line of code and then we'll
190:10 - paste this over here so as you can see
190:12 - this is a print statement and inside
190:13 - this we have the DI function and inside
190:16 - that we also have the locals function
190:19 - and then we provide the builtins
190:21 - attribute over here so let me just save
190:23 - this file now and try running this code
190:25 - as you can see we have got the list of
190:27 - all the exceptions that are present
190:29 - inside the Python programming language
190:31 - so there are multiple errors that might
190:33 - occur which includes arithmetic error
190:35 - then we have assertion error attribute
190:37 - error base exception so there are many
190:39 - errors that you can see over here file
190:41 - not found error this is one of the
190:43 - exceptions that we have just checked and
190:45 - then we also have this zero division
190:47 - error which we just saw when we divide
190:49 - any number by zero so guys there are
190:51 - multiple exceptions that might occur
190:53 - which are already built in inside the
190:55 - Python programming language and you can
190:57 - practice on your own to see which
190:58 - exception occurs on which particular
191:01 - input exception handling with try accept
191:04 - block so guys basically it is important
191:06 - to handle exceptions that we have
191:08 - already seen in Python we use the try
191:11 - accept Block in order to handle the
191:13 - exception and this is the syntax in
191:15 - order to handle the exceptions in Python
191:18 - so basically first of all we have the
191:19 - try keyword followed by the colon and
191:22 - then we have the code that may cause the
191:24 - exception for example we can have a
191:27 - number being divided by zero in which
191:29 - case Zero division error might occur
191:31 - which is the exception and not only the
191:33 - zero division exception but if any
191:36 - exception that occurs inside this Tri
191:38 - block we can have the accept block just
191:41 - following this Tri Block in in order to
191:43 - catch that exception so basically inside
191:45 - this accept block we have the code in
191:48 - order to run when the exception occurs
191:51 - so guys this we are going to check with
191:52 - the help of examples now so over here in
191:54 - the vs code what we will do is let's say
191:57 - we want to divide a number by zero so we
191:59 - want to provide that code inside the tri
192:02 - block so we have this try keyword
192:04 - followed by the colon and then over here
192:07 - what we will do is we will say number
192:09 - variable it is equal to 10 / 0 so guys
192:13 - if we try to run this code over here 10
192:16 - / 0 for which the zero division error
192:18 - will occur which is one of the
192:20 - exceptions in the Python Programming so
192:22 - what we have to do is we have to catch
192:24 - that exception inside the accept blog so
192:27 - over here what we have to do is we have
192:29 - to provide the accept keyword followed
192:31 - by the colon and then we can have the
192:33 - code in order to handle that exception
192:35 - so over here we can simply provide the
192:37 - print statement and then we can say
192:40 - number cannot be
192:43 - divided by zero over here so guys this
192:47 - is the code that we are going to execute
192:49 - if the number is getting divided by zero
192:51 - and the zero division error is occurring
192:53 - so let me just save this file now and
192:55 - try running this code so as you can see
192:57 - number cannot be divided 0o this line of
193:00 - statement is getting executed over here
193:02 - and this is the line that is getting
193:04 - printed now guys what would have
193:06 - happened if we don't have this try and
193:08 - accept block so let us just comment out
193:10 - these blocks over here so instead of
193:12 - this we are just having number it is
193:14 - equal to 10 / 0 and then let me just
193:17 - comment out this line as well so number
193:19 - is equal to 10 ided 0 only this line of
193:22 - code is there let me just save this file
193:24 - and try running this code as you can see
193:26 - we are getting zero division error
193:28 - division by zero and this is the
193:30 - exception that we are getting on the
193:32 - terminal so over here since we have not
193:34 - properly handled this exception this is
193:36 - the way that we are getting the output
193:38 - but we can have the proper output in
193:41 - this way like we can have a particular
193:43 - statement being printed by using this
193:45 - try and accept block so over here we
193:47 - have just provided the try block and
193:49 - after this we have provided the accept
193:51 - block as well we have provided a
193:53 - beautiful statement that is a user
193:56 - friendly statement which says number
193:58 - cannot be divided by zero and when we
194:00 - just save this file and try running this
194:01 - code now it says number cannot be
194:04 - divided by zero if the exception is
194:06 - occurring over here inside the tri block
194:08 - now guys let's say there is no exception
194:10 - occurring inside the tri block so still
194:12 - the print statement will be executed let
194:15 - us check that so over here instead of 10
194:17 - / 0 we will say 10 / 2 in which case the
194:21 - answer will be five and that will be
194:23 - stored in this number variable and there
194:25 - is no exception that is occurring over
194:27 - here on this line of code so let me just
194:29 - save this file now what we will do is as
194:31 - a confirmation we will come out of this
194:33 - try and accept blocks and over here we
194:35 - will say end of code so we can just
194:39 - confirm that this is the line that is
194:41 - getting exec executed at the end of the
194:44 - code so over here let me just save this
194:46 - file enter I running this code now as
194:48 - you can see end of code is getting
194:49 - displayed now that is because there is
194:51 - no zero division error that is occurring
194:53 - inside the tri block that is because we
194:55 - have changed the expression from 10 / 0
194:58 - to 10 / 2 now guys there is another
195:01 - thing that you can do catching the
195:02 - specific exceptions in Python so as you
195:05 - can see this is the example over here we
195:07 - have the tri block and then let's say we
195:09 - have the variable name as even numbers
195:12 - and this is the python list as you can
195:13 - see we have 2 4 6 8 which is the list of
195:16 - numbers all are even numbers and what we
195:19 - are trying to do is we are going to
195:21 - print the even numbers with the index
195:23 - five over here but guys as you can see
195:25 - this is the index zero then we have
195:27 - index one then we have index two and
195:29 - then three so three is the final index
195:31 - the total length of the list is four and
195:34 - three is the final index that we can
195:36 - access but we are trying to access the
195:38 - index that is five so basically we
195:40 - should get the index out of bound error
195:42 - over here but we can also specify the
195:45 - different exceptions that we have seen
195:47 - so far so basically while providing the
195:50 - accept keyword we can provide the zero
195:52 - division error over here which will say
195:54 - denominator cannot be zero and then we
195:57 - also have the accept keyword followed by
195:59 - the index error so in this case since we
196:01 - are having the multiple accept logs it
196:04 - depends on the control flow the control
196:06 - flow will check that which type of
196:08 - exception is occurring and based on that
196:11 - exception it will try to match that
196:12 - exception is this exception related to
196:15 - zero division error no in this case so
196:17 - is it matching with the index error yes
196:20 - since it is related to the index that we
196:22 - are trying to access which is not
196:24 - possible so it will print this statement
196:26 - that is index out of bound so let us
196:28 - check this block of code over here I'll
196:30 - just copy this and paste this in the VSS
196:32 - code since I'm little bit lazy in order
196:34 - to type all this code once again so over
196:36 - here let me just save this file and
196:38 - running this code now as you can see it
196:40 - says index out of bound that's because
196:42 - the exception that is matching inside
196:45 - this Tri block is the index error and
196:48 - this is the print statement that we are
196:50 - supposed to print if there is an index
196:52 - error that is occurring now guys let's
196:54 - say you want to print this denominator
196:56 - cannot be zero statement so what we have
196:58 - to do is we have to make sure that
197:01 - inside the tri block there is a divide
197:03 - by0 expression so what we will do is
197:05 - over here I'll just remove these lines
197:07 - of code and we will simply say number it
197:09 - is equal to 10 / 0 so in this case
197:13 - divide by 0o expression is occuring and
197:15 - that is why we will get the zero
197:17 - division error and in this case we
197:18 - should get this statement that is
197:20 - denominator cannot be zero so let me
197:22 - just save this file now and try running
197:24 - this code as you can see denominator
197:26 - cannot be zero statement is getting
197:28 - printed so guys it depends on you you
197:30 - can have the specific exceptions being
197:33 - specified over here and each exception
197:35 - will be handled differently this is just
197:37 - a print statement that we have included
197:39 - over here you can have any code inside
197:41 - these accept blocks that you want to use
197:44 - based on your requirements of the
197:45 - project but guys remember that whatever
197:48 - matching exceptions that is occurring
197:49 - inside the tri block the control flow
197:51 - will try to match with those exceptions
197:54 - one at a time and once it matches with a
197:56 - particular except block it will try to
197:59 - execute those lines of code inside that
198:01 - block now guys let us move to another
198:03 - task over here python try with lse claw
198:06 - so basically in some situations we might
198:08 - want to run a certain block of code if
198:10 - the code block inside try runs without
198:13 - any errors so for these cases you can
198:15 - use the optional else keyword with the
198:18 - try statement so guys what happens is
198:20 - sometimes there will be no errors that
198:21 - are occurring over here I'll just remove
198:23 - these lines of code so I'll just keep
198:25 - one accept block over here and I'll just
198:28 - remove this exception as well that is
198:30 - zero division error so what we are doing
198:32 - over here is denominator cannot be zero
198:35 - I'll just save this file and try running
198:36 - this code so this denominator cannot be
198:39 - zero is getting printed over here but
198:41 - guys what if this denominator is not
198:43 - zero let's say if I provide the
198:44 - denominator as two so in this case this
198:47 - statement will not get printed that's
198:49 - because there is no exception that is
198:51 - occurring and if there is no exception
198:53 - occurring no code in the accept block
198:55 - over here will get executed but what if
198:58 - we want to execute some line of code so
199:01 - over here we can simply provide the else
199:03 - part so basically what happens is let's
199:05 - say inside the tri block if we don't
199:08 - have any exception that is occurring so
199:10 - no block of code that is is inside the
199:12 - accept block will get executed but let's
199:15 - say in the end if we have this else
199:17 - block so whatever code we provide over
199:19 - here it will get executed only when
199:22 - there is no exception that is occurring
199:24 - over here inside the tri block so over
199:26 - here what we will do is we will say
199:27 - print we will simply say inside else
199:31 - block so guys this is the code let me
199:33 - just save this file now and try running
199:35 - this code as you can see there is no
199:37 - denominator cannot be zero that is
199:39 - getting printed but over here we are
199:40 - getting inside else block that's because
199:43 - since there is no exception that is
199:45 - occurring the control flow is not going
199:47 - inside the except block but it sees that
199:49 - we have the else block over here so it
199:52 - executes those lines of code inside the
199:54 - else block now guys what if there is an
199:56 - exception that is occurring so let's say
199:58 - if we provide this as 10 / 0 as the
200:01 - expression so let me just save this file
200:03 - now this line should get printed over
200:05 - here but whether this lse part will get
200:07 - executed let us check that so let me
200:09 - just run this code once again as you can
200:12 - see denominator cannot be zero is
200:14 - getting printed but the code in the lse
200:16 - part is not getting printed so that's
200:18 - because since the exception has occurred
200:20 - we are getting into the accept block but
200:22 - not into the else block so guys this is
200:24 - very important in case the accept block
200:27 - is not getting executed we can have the
200:29 - else Block in order to execute some
200:31 - lines of code that you want to execute
200:34 - let us move to another task over here we
200:36 - have something called as python try
200:38 - finally so guys this is another
200:39 - important concept as far as exception
200:42 - handling in Python is concerned so
200:44 - basically in Python the finally block is
200:46 - always executed no matter whether there
200:49 - is an exception or not so the finally
200:51 - block is optional and for each Tri block
200:54 - there can be only one finally block so
200:57 - guys what we will do is basically the
200:59 - understanding behind the finally block
201:01 - is irrespective of whether there is an
201:03 - exception that is occurring or not the
201:05 - code in the finally block will be
201:07 - executed so over here we will simply
201:09 - have the finally keyword followed by the
201:11 - code Lear and then we will say inside
201:14 - finally blog so over here we will simply
201:17 - have double codes and inside this we
201:19 - will say inside finally block so guys
201:24 - first of all we will check when there is
201:25 - an exception that is occurring this line
201:28 - of code will get printed and we will not
201:30 - go inside the lse part but the control
201:32 - flow will go inside this finally block
201:34 - over here so let me just save this file
201:36 - now and try running this code so as you
201:38 - can see denominator cannot be zero which
201:40 - is this line of statement which is
201:41 - getting printed and then it is not going
201:43 - in the else part but it is going in the
201:45 - finally part so it says inside finally
201:48 - block so over here exception has
201:50 - occurred and the control flow is going
201:52 - in the finally block now let us say
201:54 - there is no exception that is occurring
201:56 - we say 10 / 5 over here so let me just
201:58 - save this file now and try running this
202:01 - code it says inside lse block so
202:03 - basically there is no exception that is
202:05 - occurring so the control flow is not
202:07 - going inside this accept block but it is
202:10 - going inside the else blocks over here
202:12 - as I have told you if the control flow
202:14 - doesn't go inside the accept block and
202:17 - if there is a else block basically this
202:18 - line of code will get executed and then
202:21 - at the end we have the finally block
202:23 - which is getting executed as you can see
202:25 - inside finally block so irrespective
202:28 - whether there is an exception that is
202:29 - occurring or not inside the tri block
202:32 - the finally block will be executed every
202:35 - time now guys where this thing is
202:36 - important basically let's say if you
202:38 - have the database connection or if you
202:40 - have file open so you can close that
202:43 - file or close that database connection
202:45 - inside the finally block over here after
202:48 - carrying out your operations in the tri
202:49 - block which might have certain
202:51 - exceptions that might occur during the
202:53 - run time so guys during such instances
202:56 - the finally block becomes very important
202:58 - in order to execute those lines of code
203:01 - irrespective whether there was an
203:03 - exception that has occurred inside the
203:04 - tri block or not object oriented
203:07 - programming in Python so guys we are
203:09 - going to check the classes and objects
203:10 - with the help of examples python is a
203:13 - versatile programming language that
203:15 - supports various programming Styles
203:17 - including objectoriented programming
203:19 - through the use of objects and classes
203:22 - which we are going to see with the help
203:23 - of examples as well now an object is any
203:26 - entity that has attributes and behaviors
203:30 - so for example a parrot is an object and
203:33 - it has multiple attributes as you can
203:35 - see there are multiple attributes that
203:37 - can be present which is name then we
203:39 - have age color and so on apart from that
203:42 - it also has certain Behavior such as
203:44 - whether it can dance or not so dancing
203:46 - is one of the behavior whether it can
203:48 - sing or not so singing is another
203:50 - Behavior now I'm not sure whether a
203:52 - parrot can really dance or not but these
203:54 - are certain behaviors that we can
203:55 - consider in order to understand classes
203:58 - and objects now guys similarly a class
204:00 - is a blueprint for that object so
204:03 - basically these objects are having the
204:05 - attributes and behaviors and the values
204:07 - will be stored in these objects but the
204:09 - blueprint will be present inside the
204:11 - class so basically this class can be
204:13 - treated as a template which has certain
204:16 - attributes and behaviors being defined
204:18 - over here and we can create multiple
204:20 - objects related to that class so we are
204:22 - going to check with the help of example
204:24 - how do we create a class parrot with the
204:26 - attributes as name and age so let us
204:28 - move to the vs code over here the very
204:30 - first thing that we have to create is
204:32 - the class so basically we have to
204:34 - provide the class keyword followed by
204:36 - the name of the class so let's say the
204:39 - parot is the name of the class over here
204:41 - and then we have a colon and then we can
204:43 - have different attributes so one of the
204:45 - attributes is name over here we will
204:47 - assign it with a empty string and then
204:50 - we have age as well we will assign it as
204:52 - zero over here as the initial value now
204:54 - Guys these are the two attributes that
204:56 - we have defined for this class that is
204:58 - pared now we can create different
205:00 - objects out of this class now this class
205:03 - is acting as a blueprint or we can say
205:05 - as a template in order to create
205:07 - multiple objects so we will come out of
205:09 - this class and what we will do we will
205:12 - create the objects for this class so
205:14 - let's say we have parot one followed by
205:16 - equal to operator and then we can simply
205:19 - provide the name of the class that is
205:21 - parot followed by the open and close
205:23 - parenthesis so this is the way that we
205:25 - can initialize an object for this class
205:27 - that is parad and then we can use this
205:30 - object in order to initialize these
205:33 - attributes that is name and age so here
205:35 - what we will do is we will use this
205:37 - parot one object followed by Dot and as
205:40 - you can see we are getting this name and
205:42 - age being Auto suggested by the vs code
205:45 - that's because we have already defined
205:47 - these attributes inside this blueprint
205:49 - that is class parrot so over here we are
205:52 - going to provide the name as the name of
205:54 - the parrot one object so let's say we
205:57 - provide the name as blue over here and
205:59 - then let's say we also want to provide
206:00 - the age of this parrot object so again
206:03 - we will provide parrot one followed by
206:05 - Dot and then we have the age attribute
206:07 - let's say it is 2 years old so we have
206:09 - two as the parent's age now guys let's
206:11 - say we want to create another object
206:14 - with another name and age so again we
206:16 - will copy these lines of code and paste
206:19 - this over here what I will do is instead
206:21 - of parot 1 we will say parot 2 because
206:24 - this is another object so this is the
206:26 - second object that we are creating by
206:28 - using this parrot class and over here
206:30 - again we will say parot 2. name and
206:33 - parot 2. age so let's say the name of
206:36 - the parot two is Vu and its age is five
206:39 - over here so 5 years so guys over here
206:41 - here we have created two objects for
206:43 - this class that is parot similarly we
206:45 - can create any number of objects that we
206:47 - want it's very important to note that
206:50 - while creating the objects we provide
206:52 - this variable name on the left hand side
206:54 - and on the right hand side we provide
206:55 - the name of the class followed by the
206:57 - open and close parenthesis and then we
207:00 - can call the different attributes of
207:01 - that class in order to initialize them
207:04 - now guys after these objects are being
207:05 - initialized with their names and age we
207:08 - can simply print them on the console so
207:10 - what we can do is we can have the print
207:12 - statement with the formatting being
207:14 - enabled so over here inside the print
207:16 - statement we can have the F followed by
207:18 - the double codes and then what we can do
207:20 - is open and close curly braces inside
207:23 - this we can have the parent one do name
207:25 - over here is and Then followed by curly
207:29 - braces parat 1. Ag and then we can have
207:33 - ear bold so guys basically what is
207:35 - happening over here is inside the open
207:38 - and close curly braces we can provide
207:40 - the variable names in order to get their
207:42 - values being printed inside the print
207:45 - statement so this parot 1. name will
207:47 - give us the value of this variable that
207:49 - is blue over here and then followed by
207:51 - is and then again we will get parot 1.
207:55 - age which is two in this case so blue is
207:58 - 2 years old so this is a statement that
208:01 - should get printed and then similarly we
208:03 - can copy this line of code and paste
208:05 - this over here and instead of parot 1 we
208:07 - can simply say parot 2 so we have parot
208:10 - 2. name and and then par 2. AG so guys
208:13 - let me just save this file now and try
208:14 - running this code as you can see blue is
208:17 - 2 years old this is what is getting
208:19 - printed by using the first print
208:21 - statement and over here again we are
208:23 - getting Vu is 5 years old so this is the
208:26 - second print statement that is helping
208:28 - us in order to print this particular
208:30 - statement so guys this is the way that
208:31 - we can easily create a class in this
208:34 - case we have created the parot class and
208:36 - we have two attributes that is name and
208:38 - age you can have any number of
208:39 - attributes for the class based on your
208:41 - requirements and apart from that while
208:43 - creating the objects you can have the
208:45 - values for those attributes based on
208:47 - those particular individual objects and
208:50 - then you can call those attributes by
208:52 - using the objects that you have just
208:53 - initialized by using this statement that
208:56 - is the object on the left hand side
208:58 - followed by equal to operator and then
209:00 - we have the class name followed by the
209:02 - open and close parenthesis this is
209:04 - called instantiating of the object or we
209:06 - can also call it as initializing an
209:08 - object in Python Programming inheritance
209:10 - in Python Programming so guys
209:12 - inheritance is a way of creating a new
209:15 - class for using details of an existing
209:18 - class so this we are going to check with
209:19 - the help of examples as well the newly
209:22 - formed class is a derived class which is
209:24 - also called as a child class and
209:26 - similarly the existing class is a base
209:29 - class or the parent class so guys what
209:31 - we are doing over here is we are already
209:33 - creating a parent class that is also
209:35 - called as a base class over here and
209:37 - then we also create a child class for
209:40 - which the attributes are derived from
209:42 - the parent class from here and this is
209:44 - what is called as The Inheritance now
209:46 - what will be inherited all the
209:48 - attributes provided that they are public
209:50 - along with the methods will be inherited
209:53 - by the child class so guys let us check
209:55 - python inheritance with the help of
209:57 - example now over here so let us switch
209:58 - to the vs code first of all we will
210:00 - create the parent class so let us say we
210:02 - have the class that is called as animal
210:05 - over here and inside this animal class
210:07 - we will Define two functions that is eat
210:09 - and sleep so we will have DF keyword
210:12 - followed by eat that is function one and
210:15 - then inside the parenthesis we are going
210:17 - to have the parameter that is self
210:19 - always remember guys whenever we are
210:21 - calling the function inside the class it
210:23 - is going to take a single parameter
210:25 - which is going to be the object by
210:27 - default so we need to catch that object
210:29 - with any name as a parameter over here
210:32 - so we have given the name of this
210:33 - parameter as self over here so that we
210:35 - can identify that this is the object and
210:37 - then we can use this object as well in
210:39 - order to access it it attributes and
210:42 - inside this eat function we are going to
210:44 - have a simple print statement and we
210:46 - will say I can eat so guys this is a
210:49 - statement that is going to be printed
210:51 - when we call the eat function using the
210:53 - animal object and then similarly we will
210:55 - have the Sleep Method as well so we have
210:58 - thef keyword followed by Sleep Method
211:01 - and then again we will have the
211:02 - parameter as the self which will be
211:04 - passed by default and then inside this
211:06 - again we are going to have the print
211:08 - statement and we can say I can sleep so
211:11 - Guys these are two methods or functions
211:13 - that we have defined inside the parent
211:15 - class that is the animal class now guys
211:17 - how do we inherit these methods to
211:20 - another class so let's say we have
211:22 - another class over here which will be a
211:23 - child class of the animal class so we
211:26 - are going to have another class and
211:28 - let's say the name of the class is dog
211:30 - over here and then in order to have its
211:32 - attributes and functions of the super
211:35 - class that is the animal after this name
211:37 - of the class that is dog we have to
211:40 - provide open and close close parenthesis
211:42 - and inside this parenthesis we have to
211:44 - provide the name of the super class that
211:46 - is animal in this case so this
211:48 - particular class that is animal we want
211:50 - to inherit its attributes and functions
211:52 - inside the child class that is dog so
211:55 - this is the way that we inherit the
211:57 - super class and now we can have a colon
212:00 - over here and then we can have the
212:01 - attributes and the functions of this
212:03 - class that is dog class separately so
212:05 - over here we are going to have the DF
212:08 - keyword followed by let's say I'm simply
212:10 - going to have the display method over
212:12 - here and it is going to take one
212:14 - parameter that is self and then we are
212:16 - simply going to print that we are inside
212:20 - doc class so this particular statement
212:23 - will be printed whenever we are going to
212:25 - call this display method over here so
212:27 - guys this is the way that python
212:29 - inheritance Works what I will do is I'll
212:31 - just zoom out little bit so that you can
212:32 - see the entire code at once so over here
212:35 - we have created the super class that is
212:37 - the animal class and then we are
212:39 - creating another class that is is called
212:41 - as the child class and after the name of
212:43 - the child class we are providing the
212:45 - name of the super class over here that
212:47 - is the parent class inside the open and
212:49 - close parenthesis and what this will do
212:52 - is the eat and sleep methods will be now
212:55 - available inside the dog class as well
212:57 - so guys why this is important so let us
212:59 - come out of this class now and what we
213:01 - will do is let us create the object of
213:04 - this class that is the dog class so what
213:06 - I will do over here is we will create
213:08 - dog one that is the object of the dog
213:11 - class followed by equal to and then the
213:13 - name of the class that is dog over here
213:15 - so we have created one object of the dog
213:18 - class now guys ideally we have seen that
213:21 - we can call the display method which
213:22 - belongs to the dog class so we can do
213:25 - that over here so I'm going to call the
213:27 - dog one object followed by Dot and then
213:30 - we have the display method so after this
213:33 - we are going to have the open and close
213:34 - parenthesis let me just save this file
213:36 - first and try running this code now so
213:39 - as you can see we are getting we are
213:40 - inside dog class which means this
213:43 - statement is getting printed now guys do
213:45 - we have any other method apart from this
213:47 - display method yes we do have and those
213:49 - are eat and sleep methods why so because
213:52 - we have inherited the methods from the
213:54 - animal class by using the python
213:56 - inheritance so basically we can use this
213:59 - object name that is dog one in order to
214:01 - call eat and sleep methods over here so
214:04 - if we call both the method so I'll say
214:07 - dog one followed by Dot and then as you
214:09 - can see vs code is suggesting us this
214:11 - eat method as well so we have eat
214:13 - followed by open and close parenthesis
214:16 - and then again we will call the dog one
214:18 - object followed by Dot and then Sleep
214:20 - Method is also being suggested by the vs
214:22 - code so we are going to call both the
214:24 - methods over here so let me just save
214:26 - this file now and try running this code
214:28 - so as you can see we are getting all the
214:30 - three statements that is we are inside
214:32 - dog class I can eat and I can sleep
214:35 - which are the statements that are being
214:37 - printed by using these methods
214:39 - respectively so guys this is the power
214:41 - of python inheritance we can use the
214:43 - different attributes and the methods
214:45 - that were defined in a super class
214:48 - inside the subass by using the object of
214:51 - the child class over here which is also
214:53 - called as the subass over here guys it
214:55 - is very important to note that whenever
214:57 - we are defining the methods inside the
214:59 - class we need to provide one parameter
215:01 - over here which is going to be the
215:03 - object that will be passed so behind the
215:05 - scenes what is happening over here is
215:07 - when we call dog 1. display over here
215:10 - the dog one object is being passed with
215:12 - this display method even though we are
215:15 - not providing any parameter over here
215:17 - but behind the scenes the object is
215:19 - being passed over here and it needs to
215:21 - be caught by this particular method what
215:23 - happens if we don't provide this
215:24 - parameter let us check this so I'll just
215:26 - remove the self keyword over here and
215:29 - I'll just save this file now over here
215:31 - we are not receiving any parameter as we
215:33 - can see so let me just run this code now
215:35 - so as you can see type error dog.
215:38 - display takes zero positional arguments
215:40 - but one was given so basically behind
215:42 - the scenes this dog one object is being
215:45 - passed and we need to have a parameter
215:47 - over here while defining the function
215:49 - and that is the reason why we had given
215:51 - this self parameter name in order to
215:54 - identify that this is the object of this
215:56 - particular class that is dog so let me
215:58 - just save this file now and try running
216:00 - this code once again so as you can see
216:01 - there are no more errors that are
216:03 - getting displayed and all the three
216:04 - statements are getting displayed over
216:06 - here now guys what are the uses of
216:08 - inheritance so as you can see since a
216:10 - child class can inherit all the
216:12 - functionalities of the parents class
216:14 - this allows code reusability so as you
216:16 - can see over here we need not have to
216:18 - provide the eat and sleep methods once
216:21 - again inside the dog class and we were
216:23 - able to access both these methods by
216:25 - using the object of the dog class
216:27 - without actually providing the
216:29 - definition of those methods over here
216:31 - once a functionality is developed you
216:33 - can simply inherit it no need to
216:35 - reinvent the wheel this allows for
216:37 - cleaner code and easier to maintain now
216:39 - since you can also add your own
216:41 - functionalities in the child class you
216:43 - can inherit only the useful
216:44 - functionalities and Define other
216:46 - required features so guys based on your
216:49 - requirement it depends on you which
216:51 - class you want to inherit and create the
216:53 - child classes and the parent classes
216:55 - over here based on your project
216:56 - requirements Constructor in Python
216:59 - Programming now guys a python
217:00 - Constructor is a function inside a class
217:03 - that helps us to initialize certain
217:05 - attributes of a class so far we have
217:07 - seen creating the class attributes and
217:09 - the function and while initializing the
217:12 - attributes of the classes object we use
217:14 - the object name followed by the dot and
217:17 - then the attribute name but is there a
217:19 - better way in order to initialize those
217:21 - attributes inside the class yes it is so
217:24 - we have something called as double times
217:26 - underscore followed by in it and then
217:28 - again double times underscore followed
217:30 - by open and close parenthesis which is a
217:32 - Constructor function that is called
217:35 - whenever a new object of that class is
217:37 - instantiated so guys let us check this
217:39 - with the help of example now so let us
217:41 - move to the vs code what we will do is
217:44 - we will create a class that is called as
217:46 - the parot class over here and we will
217:48 - Define two attributes so over here we
217:50 - have the name which is of the string
217:52 - data type so let's say we have the empty
217:54 - string initially and then let's say we
217:56 - have the age attribute which is defined
217:59 - as zero over here which is the integer
218:01 - so guys what we will do is let us say we
218:03 - want to create the object of this class
218:06 - so what we have to do is let's say we
218:07 - provide the object name as parot 1
218:10 - followed by equal to operator and then
218:12 - we have the name of the class that is
218:14 - parent followed by open and close
218:16 - parenthesis now guys so far what we had
218:18 - done is in order to initialize both
218:21 - these attributes we were calling this
218:23 - object name followed by Dot and then the
218:25 - name of the attribute so let us do that
218:27 - first so we are going to use the parot
218:30 - one object over here followed by Dot and
218:32 - then let's say the name of the parrot it
218:35 - is blue over here so we provide the name
218:37 - of the parrot and then we also provide
218:40 - the age of the parrot so let's say
218:42 - parrot 1. AG it is equal to 2 years old
218:45 - and then we can simply print the name
218:47 - and age of this parro so let us say we
218:49 - provide the print method over here and
218:51 - we provide the parrot one object so
218:54 - parot one followed by Dot and then we
218:56 - have name is and then again we want to
218:59 - get the age so parot 1. age and then we
219:03 - have years old so over here blue is 2
219:06 - years old will be displayed so let us
219:09 - save this file now and try running this
219:11 - code so as you can see blue is 2 years
219:13 - old so guys this is the conventional way
219:16 - that we had seen so far in order to
219:18 - instantiate an object of the class and
219:20 - also assign the values to the attributes
219:23 - of that class so is there a better way
219:25 - in order to assign these values to these
219:27 - attributes yes we can do so by using the
219:29 - Constructor so what we can do is we can
219:31 - simply remove these two lines of code
219:33 - over here so I'll just remove them and
219:35 - then guys inside this class we are going
219:37 - to have the innit method which is the
219:39 - constru structor so over here we are
219:41 - going to have the DF keyword followed by
219:45 - double * underscore and then we have the
219:47 - init so as you can see vs code is
219:49 - suggesting us this method which we are
219:51 - going to use so in it and it is going to
219:53 - take one parameter by default as I have
219:55 - already told you previously whenever we
219:58 - are going to call any method inside the
220:00 - class the object that is used in order
220:02 - to call that method is also passed by
220:05 - default behind the scenes so this self
220:07 - parameter represents the object of this
220:09 - parro class over here I'll just remove
220:11 - this part and what we are going to do is
220:14 - we are going to take both these
220:15 - attributes that is name and age as the
220:17 - parameters so over here after the self
220:20 - we are going to have comma and then we
220:22 - are going to have name one so guys I'm
220:24 - naming this as name one so that you
220:26 - don't get confused between this name and
220:29 - this name one so this name one will be
220:31 - passed as the parameter when this
220:32 - Constructor is being called over here
220:34 - and then followed by comma we also have
220:37 - age one and then what we can do is for
220:39 - this self that is the object followed by
220:42 - dot we can have name it is equal to name
220:45 - one over here and then again we can have
220:48 - the self followed by Dot and then age it
220:51 - is equal to age 1 so what we are simply
220:54 - doing over here is the name and age
220:56 - attributes of this object the object is
220:58 - being represented by self and then self.
221:01 - name it will be assigned with the value
221:03 - of this name one that is being passed
221:06 - same thing for the age as well the self.
221:08 - AG the value will be be passed by using
221:11 - this age one parameter over here and
221:13 - both these values will be assigned to
221:15 - name and age attributes now guys when
221:17 - exactly this Constructor is being called
221:19 - so basically whenever you are going to
221:22 - create an object and call this class
221:24 - over here that is the parrot class The
221:26 - Constructor will be called so while
221:28 - instantiating this object we also need
221:30 - to pass the name and age for this
221:33 - particular instance of the class so what
221:35 - we will do is let's say we take the same
221:37 - name that is blue over here so we
221:39 - provide the first parameter is the name
221:41 - of the parrot followed by comma and then
221:43 - we provide the age that is 2 years old
221:46 - which is the second parameter so guys
221:48 - when the control flow comes over here it
221:50 - sees that the class is being called with
221:52 - these two parameters and we also have
221:55 - the Constructor so basically this parro
221:57 - one will be assigned to this parameter
221:59 - that is self and then this name and age
222:01 - will be assigned to this name one and
222:03 - age one and this name and age will be
222:05 - assigned those values respectively and
222:08 - then we can simply have this print
222:10 - statement in order to print the same
222:12 - statement that we had seen previously as
222:14 - well so let me just save this file now
222:15 - and try running this code so as you can
222:17 - see we are getting the same statement
222:19 - that is blue is 2 years old that's
222:21 - because we have provided the same name
222:23 - and the same age let's say we provide a
222:25 - different name over here so let's say we
222:27 - provide Vu and it is 5 years old so let
222:30 - me just save this file now and try
222:31 - running this code as you can see Vu is 5
222:34 - years old is getting displayed over here
222:36 - so guys in this way what we have done is
222:38 - while instantiating the object we are
222:41 - passing the values or the attributes
222:43 - that are present inside that class for
222:45 - which the values are getting assigned
222:47 - now guys another important functionality
222:49 - of this Constructor is we can also
222:51 - remove these attributes that are being
222:53 - declared so there is no need of
222:55 - declaring these attributes over here so
222:57 - I'll just remove these lines of code
222:59 - over here and what exactly is happening
223:01 - is while this Constructor is being
223:03 - called the interpretor comes to know
223:05 - that this name and age are the
223:07 - attributes of this class that is the
223:09 - parent class over here and it assigns
223:11 - the values that are being passed to name
223:13 - one and age one so to make it more
223:15 - simple let us say we name this parrot s
223:18 - first parrot over here for which the age
223:20 - is 2 years old and let's say I provide
223:23 - another parrot so I'll just copy this
223:25 - line of code and paste this over here
223:27 - and then I provide this as parrot 2 and
223:29 - then we can say second parrot over here
223:31 - which is 5 years old so we'll say 5
223:33 - years old and then we will print both
223:35 - the parrots over here inside the print
223:37 - statement I'll just copy these lines of
223:39 - code and paste this over here and then
223:41 - we can say parot 2. name and then again
223:44 - over here parot 2. AG so let me just
223:46 - save this file now and try running this
223:48 - code so as you can see first parot is 2
223:51 - years old and second parot is 5 years
223:53 - old both the statements are getting
223:55 - displayed over here so guys this is the
223:56 - way that you can Define The Constructor
223:58 - inside the class by using the underscore
224:01 - uncore init method and Then followed by
224:04 - the self that is being passed
224:06 - automatically as one of the parameters
224:08 - and then you can have any number of
224:10 - parameters being passed over here inside
224:11 - the Constructor which can be used as the
224:14 - values for the attributes of the class
224:16 - that you have defined and those values
224:18 - need to be passed whenever you are
224:20 - creating a new object for that class
224:22 - encapsulation in Python Programming so
224:25 - guys encapsulation is one of the key
224:27 - features in objectoriented programming
224:30 - because encapsulation refers to the
224:32 - bundling of attributes and methods
224:34 - inside a single class so we have seen so
224:37 - far the various attributes and methods
224:39 - that we we have been creating inside the
224:41 - class that functionality of the Python
224:43 - Programming is called encapsulation now
224:45 - it prevents outer classes from accessing
224:48 - and changing attributes and methods of a
224:51 - class so far we have seen that all the
224:53 - attributes and methods were public in
224:55 - nature but in this case we are going to
224:57 - create some private attributes which
224:59 - cannot be directly accessed outside the
225:02 - class so this also helps us to achieve
225:04 - data hiding over here now in Python we
225:07 - denote private attributes using the
225:09 - underscore as the prefix either we can
225:12 - have the single underscore or the double
225:14 - underscore so let us check this with the
225:15 - help of example now over here as you can
225:18 - see in this example we have the class
225:20 - computer and then we also have the
225:22 - Constructor that is in it followed by
225:24 - the self which is the parameter for that
225:26 - object that is being passed and then
225:28 - self. Max price so as you can see over
225:31 - here we have the prefix that is double
225:33 - uncore followed by Max price so this is
225:36 - one of the attributes of this computer
225:38 - class over here and we are providing the
225:40 - value of 900 to this Max price over here
225:43 - inside the Constructor now apart from
225:45 - this Constructor we have more couple of
225:47 - functions inside this class as you can
225:49 - see we have the cell function over here
225:51 - which simply prints the selling pric is
225:53 - the self followed by Dot and then the
225:55 - max price so basically this statement
225:57 - will help us in order to print this
225:59 - value that is the max price value of the
226:01 - computer and then we have another method
226:04 - that is set max price which takes the
226:06 - object that is using the self and then
226:08 - it also takes the price over here so in
226:11 - case you want to set another Max price
226:13 - for this computer you can use this set
226:16 - max price function what it will do is it
226:18 - will simply update the value of the max
226:20 - price of the computer as you can see
226:22 - with this particular statement so guys
226:24 - let us check this with the help of
226:26 - example now what I will do is I'll
226:27 - simply copy these lines of code since
226:29 - I'm little bit lazy in order to type
226:31 - them again so we are going to paste it
226:33 - inside the vs code so over here what we
226:35 - are going to do is we are going to print
226:38 - the max price of the computer so first
226:40 - of all we are going to create the object
226:42 - that is comp one over here followed by
226:45 - equal to and then we have the computer
226:47 - class name so basically since a
226:49 - Constructor is not taking any other
226:51 - parameter apart from this self which is
226:53 - the object itself so we need not have to
226:55 - provide any parameter over here while
226:57 - instantiating this object that is comp
226:59 - one now what we will do is simply we
227:01 - will call the cell function over here
227:03 - that is this particular function so we
227:06 - can use the comp one object followed by
227:08 - Dot and then we have the cell function
227:11 - so after this open and close parenthesis
227:13 - so let me just save this file now and
227:15 - try running this code so basically this
227:17 - print statement should get executed and
227:19 - it should be displayed on the terminal
227:21 - so I'll just run this code now as you
227:23 - can see selling price is 900 so what
227:26 - exactly happened is when the control
227:28 - Flow came over here that is comp one it
227:30 - is equal to computer the Constructor of
227:32 - this class that is the init method was
227:34 - called and inside this what we have done
227:37 - is this private attribute so guys
227:39 - basically this double uncore denotes
227:41 - that this is the private attribute of
227:43 - the computer class so basically this
227:45 - private attribute was initialized inside
227:48 - the Constructor and a value of 900 was
227:51 - being assigned to this particular
227:53 - attribute and then what we did is when
227:55 - the control Flow came over here that is
227:57 - while calling the sell function
227:59 - basically this print statement was
228:01 - executed so selling price it is equal to
228:04 - this self. Max price got printed over
228:06 - here which is 900 right now now guys let
228:09 - us do another thing what we will do is
228:11 - we will try to access this private
228:13 - attribute from outside of this class so
228:16 - over here we will call comp one once
228:18 - again followed by Dot and then we can
228:21 - call this private attribute that is the
228:22 - max price so as you can see this Max
228:25 - price is getting suggested by the vs
228:27 - code so we will call this Max price and
228:29 - what we will do is we will try to assign
228:31 - another value that is 1,000 over here to
228:33 - this Max price and then again let us say
228:36 - we want to call this print statement so
228:39 - again we will call this sell method over
228:41 - here so I'll just copy this line of code
228:43 - and paste this over here let me just
228:44 - save this file now and try running this
228:46 - code so as you can see selling price 900
228:49 - this is the statement that was printed
228:51 - by calling the first sell method and
228:53 - then the second time the sell method was
228:55 - called again the selling price was equal
228:57 - to 900 so guys why so that's because
229:00 - this Max price is the private attribute
229:03 - and we directly cannot access this
229:05 - attribute by using this object we need
229:08 - to have another meth method inside the
229:10 - computer class in order to assign
229:13 - another value to the private attribute
229:15 - and that is why we have this method that
229:17 - is the set max price along with the
229:19 - parameter price which it is going to
229:21 - take in order to replace the existing
229:24 - Max price over here so what we can do is
229:27 - we are going to call the comp one object
229:30 - once again followed by Dot and this time
229:32 - instead of directly accessing this Max
229:34 - price we are going to call this set max
229:37 - price over here so set max price and it
229:39 - is expecting two parameters the first
229:42 - parameter is the self which is going to
229:44 - be passed by default which is going to
229:45 - be the comp one object and then the
229:47 - second parameter is the price which we
229:49 - are going to pass to this method so
229:52 - again what we will do is simply we are
229:54 - going to provide this th000 price that
229:56 - we try to assign to the max price
229:58 - directly over here so set max price and
230:01 - then again let's say we want to print
230:03 - the selling price over here so again we
230:05 - are going to call the sell method once
230:07 - again so comp 1. sell so over here the
230:09 - only difference is we are calling the
230:11 - method that is the set max price and we
230:13 - are passing the value of the new Max
230:16 - price over here which is going to be
230:18 - passed to this price and then the max
230:20 - price value will be the updated price
230:22 - that we have just said so guys let me
230:24 - just save this file now and try running
230:26 - this code so as you can see selling
230:28 - price 900 and then selling price 900
230:30 - once again and the third time that we
230:32 - tried by using the set max price over
230:34 - here it was 1,000 so this time it is
230:37 - selling price it is equal to 1,000 so
230:39 - guys by using this method in order to
230:42 - set the value of a private attribute we
230:45 - were successfully able to update the
230:47 - value of this private attribute and this
230:49 - is the main functionality which we call
230:51 - it as encapsulation as far as
230:53 - objectoriented programming in Python is
230:56 - concerned so guys let us run this code
230:57 - once again by a different value let's
230:59 - say the max price over here we set it to
231:01 - 2,000 so let me just save this file now
231:03 - and try running this code so this time
231:05 - the selling price is coming over here
231:07 - once again as 2,000 and guys this is the
231:09 - way in order to hide certain attributes
231:12 - of a class you can have them as the
231:14 - private attribute by prefixing and use
231:17 - the different methods in order to set
231:19 - their values by using the objects of
231:22 - that class method overriding in Python
231:24 - Programming so guys method overriding in
231:27 - Python is a way of letting method of a
231:30 - subass override the method of a super
231:33 - class so let's say for instance inside
231:35 - the super class we have a method that is
231:37 - eat and then in inside the subass we
231:40 - also have the same method with the same
231:43 - name that is eight so basically the
231:45 - method inside the subass will be
231:47 - executed instead of the method that is
231:50 - present inside the super class so let us
231:52 - check this with the help of example now
231:53 - over here so as you can see this is the
231:55 - class that is animal which is being
231:57 - treated as the parent class or the super
231:59 - class and over here we have the
232:01 - attribute that is the name of the animal
232:03 - and it has a function that is the eat
232:06 - and it takes one parameter that is self
232:08 - over here it simply prints a statement
232:09 - that is I can eat now guys again we have
232:12 - another class over here that is the dog
232:14 - which inherits this parent class that is
232:16 - animal and again what is happening over
232:19 - here is this eat is being inherited by
232:22 - this dog class but the dog class is also
232:24 - having its own eat method over here so
232:27 - as you can see this eat method is once
232:29 - again present inside the dog class and
232:31 - it is printing its own statement that is
232:33 - I like to eat bones so guys what we will
232:35 - do over here is I'll just simply copy
232:38 - these lines of code code and paste it in
232:40 - the VSS code and let us check the
232:41 - functionality of the method overriding
232:44 - and how it can be used in your project
232:46 - based on your requirement so I'll just
232:48 - remove certain comments over here so as
232:50 - you can see we have this parent class
232:52 - that is animal and then we have the
232:54 - child class that is dog over here both
232:56 - are having the eat method so what we
232:58 - will do is first of all I'll just
233:00 - comment out these lines that is this
233:02 - particular function is not present let's
233:04 - say inside the dog class I'll simply
233:06 - provide the past statement over here so
233:09 - what exactly is happening first of all
233:10 - we have the animal class which is having
233:12 - the eat function and this dog class it
233:15 - is inheriting the animal class so the
233:17 - dog class will have access to this
233:19 - function that is eat over here so I can
233:21 - eat will be displayed so what we will do
233:23 - is first of all we will create the
233:26 - object of this dog class so let's say we
233:28 - have dog one it is equal to and then the
233:30 - name of the class that is dog over here
233:33 - and simply what we can do is since the
233:35 - dog class is inheriting the animal class
233:38 - we can use the eat method of the animal
233:41 - so we can simply use the dog one object
233:44 - followed by Dot and then we have the eat
233:46 - method being called followed by open and
233:48 - close parenthesis so guys over here
233:50 - simply if we save this file and try
233:52 - running this code now as you can see I
233:54 - can eat is being displayed over here
233:56 - which is the print statement inside the
233:58 - eat function of the animal class now
234:01 - guys let us say we have the same method
234:03 - that is eight with a different print
234:04 - function inside the dog class so I'll
234:06 - just remove this pass statement and
234:09 - we'll also remove these commands over
234:11 - here so basically now what will happen
234:13 - whether the eat function of the animal
234:15 - class will be called or the eat function
234:17 - of the dog class will be called so let
234:18 - us check this so I'll just save this
234:20 - file now and try running this code once
234:22 - again as you can see I like to eat bones
234:24 - this particular statement is getting
234:26 - printed which is the statement from the
234:28 - eat function of the dog class so
234:31 - basically whenever we have the method
234:32 - with the same name inside the parent and
234:35 - the child class the method of the child
234:38 - class will be called over here and that
234:40 - is what we call it as method overriding
234:42 - now guys why method overriding is
234:44 - important so let's say you have the
234:46 - animal class over here this is a very
234:48 - generic statement that I can eat
234:50 - basically it doesn't specify what the
234:52 - animal can eat but let's say you want to
234:54 - have the child classes over here which
234:56 - inherits the parent class and you want
234:58 - to be more specific so what the dog
235:01 - likes to eat basically the dog likes to
235:04 - eat bones over here so you can have the
235:06 - same method name inside the child class
235:09 - and print a different message in this
235:10 - case and that is what we have done in
235:12 - this example so method overriding is
235:14 - very important as far as objectoriented
235:16 - programming in Python is concerned and
235:18 - you can use them in your own Project
235:20 - based on your requirements multiple
235:22 - inheritance in Python Programming so
235:24 - guys previously we have seen the single
235:26 - inheritance but in this video we are
235:28 - going to check the multiple inheritance
235:30 - in Python so a class can be derived from
235:33 - more than one super class in Python
235:36 - basically this is called multiple
235:37 - inheritance so basically the derived
235:39 - class will be having the multiple super
235:42 - classes in this case so for example a
235:44 - class bad is derived from Super classes
235:47 - that is mammal and a winged animal so
235:50 - basically this mammal and winged animal
235:52 - will be treated as the parent classes
235:54 - and this bad class will be the subass or
235:56 - the child class which can be derived
235:59 - from both of these super classes over
236:00 - here so it makes sense because bat is a
236:03 - mamal as well as it is a winged animal
236:06 - so let us check this with the help of
236:07 - the example code now in the vs code so
236:10 - over here first of all we will create a
236:12 - class that is called as maml over here
236:14 - and inside the maml what we will do is
236:16 - we will Define the function and we will
236:18 - simply say
236:19 - mamore info so this particular function
236:23 - it is going to take one parameter at
236:25 - itself which is the object itself and
236:27 - basically we are going to Simply print
236:29 - the statement that we are inside mammal
236:35 - function so as you can see we are simply
236:37 - printing we are in inside mammal
236:39 - function in order to identify that the
236:41 - control flow has come over here inside
236:43 - the mammal info function and then again
236:46 - we will have another parent class over
236:48 - here that is winged animal so we say
236:51 - winged animal over here and this time
236:53 - what we will do is again we will have
236:55 - the function but over here we will say
236:58 - Wing uncore info so this particular
237:02 - method belongs to the winged animal over
237:04 - here and then again it is going to take
237:06 - the parameter is the cell and then again
237:08 - I'm simply going to copy this print
237:10 - statement over here and paste this
237:12 - inside the winged info and we will say
237:15 - we are inside winged animal function so
237:18 - we say we are inside winged animal
237:20 - function now guys we have created two
237:22 - classes over here which will be treated
237:24 - as the parent classes now we will be
237:26 - defining a third class that will be the
237:28 - child class of both these classes so
237:30 - basically we will have the class that is
237:33 - called as B over here and how do we
237:35 - mention the multiple super classes
237:37 - whenever we are defining the the sub
237:38 - classes over here so basically inside
237:41 - the parenthesis we will have both these
237:43 - classes separated by a comma so first of
237:45 - all we will have the mamal class over
237:47 - here followed by comma and then again we
237:50 - will have the winged animal class over
237:52 - here in the same way you can have any
237:54 - number of classes separated by commas
237:56 - over here in order to achieve multiple
237:58 - inheritance and then after this we will
238:01 - have the colon and then again we will
238:03 - have another method which will belong to
238:05 - this bed class over here so over here we
238:07 - will have the pcore info method and then
238:11 - which will take the self as the
238:13 - parameter and then we have the colon
238:15 - over here again we will have the print
238:17 - statement we will say we are inside bad
238:19 - function so it says we are inside bad
238:22 - function now guys inside this bad class
238:24 - we have this B info function and apart
238:27 - from this we also have this mamal info
238:29 - and winged info functions since both
238:31 - these functions are derived from these
238:33 - classes that is mammal and winged animal
238:35 - over here so we can access all these
238:37 - functions from from the object that we
238:39 - create for the bad class so let us come
238:42 - out of these classes and what we will do
238:44 - is let's say I provide the object that
238:46 - is bad one it is equal to bad over here
238:49 - so we have created the object of this
238:51 - bad class in this case and then when we
238:54 - provide the B one object followed by dot
238:57 - as you can see we are getting all the
238:58 - three functions as the suggestions by
239:00 - the vs code over here that's because all
239:02 - the three functions are accessible by
239:04 - this bad one object over here so first
239:06 - of all we will say bad info and Then
239:08 - followed by open and close parenthesis
239:11 - and then again we will say b 1 dot let's
239:13 - call mammal info in this case so we have
239:16 - Mel info as well as the third function
239:18 - that is B one followed by Dot and then
239:21 - we have the winged info over here and
239:23 - then open and close parenthesis so all
239:26 - these three statements will be printed
239:27 - one at a time based on the functions
239:29 - that is being called by the control flow
239:31 - so let me just save this file now and
239:33 - try running this code in order to
239:35 - confirm the same so as you can see first
239:37 - of all we have called the bad info so we
239:39 - are inside bad function is being
239:41 - displayed and then again we are inside
239:43 - mammal function is being displayed
239:44 - that's because mammal info is being
239:46 - called the second time and third
239:48 - function is being called that is winged
239:49 - info and we are getting we are inside
239:51 - winged animal function so guys in this
239:54 - way we have also achieved multiple
239:56 - inheritance over here in case the
239:58 - functions that you want to use are
239:59 - present in the multiple classes as you
240:01 - can see over here you can have multiple
240:04 - classes being inherited by the derived
240:07 - class which we also call it a as a
240:08 - subass over here and this pad class is
240:10 - acting as a subass and both these
240:12 - classes that are mammal and winged
240:14 - animal are acting as the parent classes
240:17 - now guys let us move to another task
240:18 - over here what do you mean by Method
240:20 - resolution order in Python that is mro
240:24 - so if two super classes have the same
240:26 - method name and the derived class calls
240:29 - that method then python uses the mro to
240:31 - search for the right method to call so
240:34 - guys over here we have seen how multiple
240:36 - inheritance can be achieved but but what
240:38 - if the method names in both the super
240:41 - classes that is in the memal class and
240:43 - the winged animal class are same so what
240:45 - we will do is instead of this memal info
240:48 - we will keep it as display over here and
240:50 - instead of winged info again we will
240:53 - call it as display so basically this
240:55 - time what is happening over here is both
240:57 - these classes that is mammal class and
240:59 - winged animal classes are having the
241:01 - same method name that is display and
241:04 - what we are doing we are creating the
241:05 - subass that is B and inheriting both
241:08 - both these classes that is mammal and
241:10 - winged animal over here and this time
241:12 - both these display methods are getting
241:14 - inherited by this bad function now which
241:17 - method will be called when we use the
241:19 - object of this bad method let us check
241:21 - that so basically I'll have to remove
241:23 - these lines of code since these
241:25 - functions are no longer present but
241:27 - instead of that what we will do is we
241:28 - will say bad one followed by Dot and
241:31 - then we have another function that is
241:33 - display so we have only one function
241:35 - that's because the name of these
241:36 - functions are same in both both the
241:38 - parent classes and Then followed by open
241:41 - and close parenthesis so guys over here
241:43 - inside the bat function we have the B
241:45 - info which will be called by using the
241:47 - bad one object and then the next time
241:49 - what we are doing is we are using the
241:51 - bad one object in order to call the
241:53 - display method now which display method
241:55 - will be executed out of these two let us
241:58 - check that with the help of execution so
242:00 - I'll just save this file now and try
242:01 - running this code now so as you can see
242:04 - we are getting VR inside B function
242:07 - which is this statement that is getting
242:08 - printed that is obvious that's because
242:10 - we have called the bad info function
242:12 - over here and next time when we call the
242:14 - display method it is saying we are
242:17 - inside mammal function so guys basically
242:19 - this print statement was executed which
242:21 - proves that the display method of the
242:23 - mammal class is being called over here
242:26 - why so that's because when we are
242:27 - creating the child class the first
242:30 - parent class is being given the highest
242:32 - priority over here so first the control
242:34 - flow will check whether this display
242:36 - method is it present in the first first
242:38 - parent class if not then it will go to
242:40 - the second parent class so over here
242:42 - inside the manual class it is finding
242:44 - that the display function is present and
242:46 - that is what is getting printed over
242:48 - here so it is the leftmost class that
242:51 - will be used in order to call the method
242:54 - which is present in multiple parent
242:56 - classes over here so what if we provide
242:58 - wind animal as the first class so what
243:00 - we will do is I'll just remove this
243:02 - mammal class from here on the left hand
243:04 - side we will provide wind animal and
243:06 - Then followed by comma and then on the
243:07 - right right hand side we provide meml so
243:10 - over here again we have just changed the
243:12 - order in which the inheritance is being
243:14 - done over here both these classes are
243:16 - still the parent classes of this child
243:18 - class that is bed class now let us check
243:20 - which statement will be printed when we
243:22 - call the display method over here so let
243:24 - me just save this file now and try
243:26 - running this code as you can see we are
243:28 - getting we are inside winged animal
243:30 - function so guys basically this winged
243:32 - animal function that is display function
243:34 - was called and we are getting this
243:36 - statement that is we are inside winged
243:39 - animal function that's because this time
243:41 - we have provided winged animal as the
243:43 - leftmost class and the control flow
243:46 - found this particular display method
243:48 - inside the winged animal class over here
243:50 - which is the parent class of the bad
243:52 - class so guys this is very important as
243:54 - far as method resolution order is
243:56 - concerned the leftmost class is being
243:58 - given the highest priority as far as the
244:01 - same names of the methods are concerned
244:03 - so guys practice on your own so that on
244:05 - different inputs you get different
244:06 - outputs operator overloading in Python
244:09 - Programming so guys in Python we can
244:11 - change the way operators work for user
244:14 - defined types so for example the plus
244:17 - operator will perform arithmetic
244:19 - addition on two numbers in the same way
244:22 - it will merge the two list as well or
244:24 - else if we are dealing with the two
244:26 - strings then it can concatenate two
244:28 - strings so the same plus operator can
244:30 - perform multiple operations depending on
244:33 - the operant whether they are numbers or
244:35 - whether they are strings or list so this
244:38 - feature in Python that allows the same
244:40 - operator to have different meaning
244:42 - according to the context is called
244:45 - operator overloading so this we are
244:47 - going to check with the help of examples
244:49 - as well apart from this there are
244:50 - certain special functions in Python so
244:52 - basically the class functions that begin
244:55 - with the double underscore are called
244:57 - special functions in Python they are
244:59 - called double underscore functions
245:01 - because they have a double underscore
245:03 - prefix and suffix such as as you can see
245:06 - this in it which can be treated as the
245:08 - Constructor of a class it is one
245:10 - function which starts and ends with the
245:12 - double underscore in the same way the
245:15 - plus operator can be overridden by using
245:18 - this double underscore followed by add
245:20 - and then double underscore again and
245:22 - then open and close parenthesis so guys
245:24 - let us check operator overloading
245:26 - implementation in action using the VSS
245:29 - code over here so we'll see the very
245:30 - basic examples first of all so let's say
245:32 - we have num one it is equal to 10 and
245:35 - then number two that is num two it is
245:38 - equal to 20 so if we simply print num 1
245:42 - + num 2 over here so num 1 + num 2 so
245:46 - basically it is 10 + 20 which is 30 in
245:49 - this case so when we just save this file
245:51 - now and try running this code so as you
245:53 - can see we are getting the result as 30
245:55 - but what if these variables are strings
245:58 - so instead of numbers let's say if we
246:00 - enclose them within the double codes
246:02 - this means that we have a string over
246:04 - here that is 1 Z that is 10 and then
246:07 - over here is as well we have another
246:08 - string that is 20 so when we do num 1
246:11 - plus num 2 instead of 30 we will get the
246:14 - concatenation of this string which means
246:16 - 10 will be followed by 20 in this case
246:18 - when we try to print the statement so
246:20 - let me just save this file now and try
246:22 - running this code so as you can see we
246:24 - are getting 1020 so guys we have not
246:26 - changed anything over here the operator
246:28 - is same and the operant are also same
246:31 - the only thing is we have changed the
246:32 - values to the string and that is what
246:34 - operator overloading means that is by
246:37 - using the same operator we can have the
246:39 - different results based on the operant
246:41 - values now guys let us check how
246:43 - operator overloading can be implemented
246:45 - when we are dealing with classes over
246:47 - here so let's say we have a class that
246:49 - is named as point over here and this
246:51 - class let's say we have a Constructor
246:53 - inside it so we have init method inside
246:57 - this so init method it will take one
246:59 - parameter that is self and what we will
247:01 - do is let's say it has two attributes
247:03 - over here so self dox so the point class
247:07 - it will have have two attributes that is
247:09 - X and Y coordinates so over here let's
247:11 - say we provide the x value by using the
247:14 - parameter that we are getting so let's
247:16 - say we have X1 over here and let's say
247:18 - we have y1 over here so self. X it will
247:21 - be equal to X1 and then again we will
247:24 - have self do y it is equal to y1 in this
247:28 - case so whenever we are creating the
247:29 - object by using the point class over
247:31 - here the Constructor that is in it
247:33 - method will be called along with the two
247:35 - points that we will be passing and those
247:37 - those two points will be assigned the
247:39 - values to these variables that is X and
247:41 - Y over here now guys in order to
247:43 - override the two string method we also
247:45 - have another method that is double
247:47 - underscore and then Str Str so as you
247:49 - can see apart from this we have many
247:51 - other functions that can be used when we
247:54 - provide the double underscore so vs code
247:56 - is suggesting us the entire list of
247:58 - functions which we can use in our python
248:00 - code so over here we are going to use
248:02 - this s Str and then we are going to have
248:05 - our custom code inside this s Str so
248:07 - what we are going to do is we are simply
248:09 - going to print the values of this X and
248:11 - Y so how do we do that we are going to
248:13 - use the formatting part and then inside
248:16 - this we are going to call the celf
248:17 - followed by Dot and then we have X and
248:20 - then again we have comma over here and
248:23 - then again we call the self.y so over
248:26 - here we are simply printing the X and Y
248:28 - values which are separated by the comma
248:30 - over here and then guys let's say we
248:32 - want to override the plus operator over
248:34 - here so before having the function
248:36 - inside the class what I will do is first
248:38 - of all we will create the object so
248:40 - let's say P1 is the object name it is
248:43 - equal to point which is the class over
248:46 - here and what we do is we do 1A 2 that
248:49 - is X and Y values over here and then
248:51 - let's say we have another point that is
248:53 - P2 it is equal to point and then this
248:56 - time we are going to provide the X and Y
248:58 - coordinates as 2 and 3 over here and
249:01 - what we want to do is we want to print
249:03 - the sum of both these points that is P1
249:06 - plus P2 so guys in this case we are
249:08 - using this plus operator and then these
249:10 - are the operators that is P1 and P2 so
249:13 - how do we have the custom implementation
249:15 - of this plus operator over here which we
249:17 - will call it as the operator overloading
249:19 - as well so as we have seen over here we
249:22 - have something called as double
249:23 - underscore and then add and then double
249:25 - underscore so this represents the plus
249:28 - operator as well so we can use this
249:30 - method inside the class in order to have
249:32 - our custom implementation of addition of
249:35 - both these points so over here we have
249:37 - DF followed by double underscore and
249:40 - then we have the add method over here
249:42 - followed by double underscore and then
249:44 - we have the open and close parenthesis
249:46 - and then inside the parenthesis we will
249:48 - provide the self as the parameter now
249:50 - guys apart from the self parameter
249:52 - basically when we do P1 + P2 it is
249:55 - simply P1 dot this particular function
249:58 - that is we are going to Define followed
250:01 - by this P2 which will be a parameter so
250:03 - we need to catch this as the second
250:05 - parameter over here so what we will do
250:07 - is after the cell we will have another
250:09 - parameter and we will name it as other
250:11 - over here so what we can do is over here
250:13 - we can create another variable that is X
250:15 - it is equal to self.x over here plus we
250:19 - need to use another parameter that is
250:21 - other which represents the other point
250:23 - that is P2 in this case so over here we
250:26 - will say other do X in this case and
250:29 - then the same way we are going to have
250:31 - another variable that is y it is equal
250:33 - to self do y plus other do Y in this
250:38 - case and then guys what we have to do is
250:40 - simply we need to return the point of
250:42 - both these values that we have found
250:44 - that is X and Y so basically return
250:47 - point of X comma Y in this case so we
250:50 - have X comma y so guys this is the
250:52 - implementation of our addition operator
250:55 - we are doing the operator overloading in
250:57 - this case so basically P1 + P2 it is
251:00 - same as P1 followed by Dot and then the
251:03 - add function being called along with the
251:05 - parameter that is P2 so in this case
251:08 - this function will be called and it will
251:09 - return point of X comma Y and basically
251:12 - while returning this we are providing
251:14 - the print statement so behind the scenes
251:17 - this function will be called in order to
251:18 - print the statement so guys basically
251:20 - over here inside of the print statement
251:22 - we need to have the return statement
251:24 - over here so I'll just remove this part
251:26 - over here and we will say return
251:29 - followed by double codes and then inside
251:31 - this double cloes we will be using the
251:33 - formatting so let's say we have zero and
251:35 - then comma and then let's say we have 1
251:37 - followed by Dot and then we have format
251:39 - over here and inside this format we need
251:41 - to provide the x and y Valu so self do X
251:45 - and then comma and then we have self doy
251:48 - in this case so basically this is the
251:50 - way in which we are going to print the
251:52 - values that is of X and Y so guys let me
251:55 - just save this file now and try running
251:56 - this code so as you can see we are
251:58 - getting the coordinates as 3 and five
252:01 - this x and x values are getting added so
252:03 - 1 + 2 it is equal to 3 and then 2 + 3 it
252:07 - is equal to 5 so we are getting five
252:09 - over here so guys basically what we have
252:11 - done is if you see the main code over
252:13 - here we have just defined P1 and P2
252:16 - which are simply the points and if we
252:18 - were not having this implementation
252:20 - inside the class that is the string and
252:22 - the addition part then we won't be able
252:25 - to add both these points directly
252:27 - because by default this plus operator
252:29 - can only handle numbers or strings Or
252:31 - List over here but in order to handle
252:34 - the custom classes we need to define the
252:36 - custom function as well inside those
252:38 - classes and according to our requirement
252:40 - we can have the code inside those custom
252:42 - functions guys we can also change the
252:44 - formatting over here in order to change
252:46 - the formatting we can say that X it is
252:49 - equal to this particular thing and then
252:51 - after comma we can have y it is equal to
252:54 - self.y part over here so let me just
252:56 - save this file now and try running this
252:58 - code so as you can see we have changed
253:00 - the formatting xit is equal to 3 and Y
253:02 - is equal to 5 so whatever format that
253:04 - you want to print in or whatever code
253:06 - you want have inside this Str Str method
253:09 - you can have it accordingly based on
253:10 - your requirements so guys this is
253:12 - operator overloading for you with the
253:14 - same operator you can have multiple
253:17 - implementations and it can have
253:19 - different meanings as far as operant are
253:21 - concerned similarly we have other
253:23 - special functions and the other operator
253:25 - overloading functions as well as you can
253:27 - see we have this init which initializes
253:29 - the attributes of the object which we
253:31 - have already seen as far as class
253:33 - Constructors are concerned then we have
253:35 - Str Str which returns a string
253:37 - representation of the object that is
253:39 - what we have implemented over here it
253:41 - returns a string implementation of the
253:43 - object that is point x comma Y and then
253:46 - we also have Len which Returns the
253:48 - length of the object then add which adds
253:50 - the two objects so over here we have
253:52 - implemented the add method which adds
253:55 - two objects over here which is P1 and P2
253:58 - that is what we have achieved in this
253:59 - particular program apart from that we
254:01 - also have this call function which calls
254:04 - the objects of the class like a normal
254:06 - function guys apart from this we can
254:08 - also have other operator overloading
254:10 - functions as well for addition we have
254:12 - seen P1 + P2 which means P1 Dot and then
254:16 - underscore uncore add will be called in
254:18 - which case the parameter will be P2
254:21 - similarly we can have the subtraction
254:23 - multiplication the power of two objects
254:25 - and then we can have division as well
254:27 - and then we can have flow Division and
254:29 - many other mathematical operations can
254:32 - be achieved by using the operator
254:34 - overloading just how we have done in
254:36 - this program so we have come to the
254:38 - conclusion of the Python programming
254:39 - language hopefully you have got enough
254:41 - knowledge about the Python language and
254:43 - you should practice on your own so that
254:45 - on different inputs you get different
254:47 - outputs and that is how you are going to
254:48 - learn more about the Python language so
254:51 - that's it in this video I'll see you in
254:52 - the next video till then stay tuned

Cleaned transcript:

in the next few hours we are going to learn a lot about the Python programming language with the help of the examples and python programs as well while you're watching this video please make sure that you pause this video and practice on your own so that on different inputs you get different output and that is how you are going to learn about the Python programming language you can also watch my other Python tutorial and Python program videos which are available for free on YouTube the link to those playlist I have given in the description section below and we are going to cover all the basics about the Python programming language so let's get started Python tutorial for beginners so if you're completely new to programming languages and want to start with the Python programming language then this video series is for you and it doesn't matter even if you have learned the other programming languages such as Java C C++ and if you're going to learn the Python language for the first time you can watch these video so that we can get started from the completely beginner level and we reach up to the intermediate and expert level as we go through the different concepts of the Python programming language so guys first of all we are going to check the environment setup using the Python language and we are going to use the VSS code as the editor now over here vs stands for visual studio and we are going to use the visual studio code editor in order to write our python programs apart from this vs code setup we are also going to see how do we write the first python code and execute it so guys basically I have written down the steps to install the vs code editor and python interpreter over here so first of all we are going to install VSS code using this link that I have already provided in the description section so when you hit this URL in the browser this is the page that is going to open from where you can easily download the visual studio code it depends on your operating system which installer you want to download you can also download for Windows Mac OS and Linux systems over here so it depends on your operating system once you have downloaded this and installed the vs code on your machine machine the next step is to install python extension in VSS code so guys once you have installed the visual studio code this is the get started page that you will see in the visual studio code ID so over here first of all you are supposed to install the python extension so on the left hand side as you can see there is an extensions button over here on which you can click and then this particular section will open so over here in the search bar you are supposed to type python so once you type python there will be list of extensions that will be available for you so guys this is the extension that you have to install over here so as you can see python intellisense file lens and this is a description that you can see on the right hand side so since I have already installed this python extension on this Visual Studio code I am getting this uninstall button but you will be getting the install button over here if you have not already installed this particular extension guys this python extension helps us in order to write the python programs very efficiently it allows us to have the code completion feature along with this we can also run the python code and have the output from within the visual studio code itself so guys it is very important extension if you are going to Learn Python and want to write the python programs now guys coming to the next step we have to install the python interpretor using this link that I have already provided in the description so once you open this URL in the browser over here this is the page that will open for you and this is the official website of the Python programming language from where you can download the latest version for Windows over here since my machine is Windows I will be downloading this Python and the latest version is 3.11.1 it might so happen that you are watching this video in the future for which the latest version might be something else so you can download the latest version of the Python interpretor from here apart from this you can also get the links to the installer if you're using some other operating system over here so guys once you have installed python on your machine you can quickly open command prompt so over here in the command prompt you can simply type py followed by double hyphen characters and then you provide version and then when you press enter as you can see python 3.11.1 this is the version of python that is already installed on my machine you might have some separate version but the command will be same in order to check whether the python is successfully installed on your machine now guys after successful installation what you have to do is the last step is to connect this python interpreter in vs code so we select the python interpreter in VSS code so over here you have to come on the settings on the bottom left and then over here you can see the command pallet you can also have the shortcut key as Control Plus shift plus P if you're using the keyboard keys and then when you click on this on the search bar you have to type Python and then colon and then we have select interpreter so as you can see this is the option and when you click on this as you can see this python 3.1.1 is getting displayed over over here which you are supposed to select in order to select the python interpretor now guys what we are doing over here is we are connecting this python interpreter with this Visual Studio code so that whenever we write the python code our program gets executed successfully on the VSS code itself now guys it might so happen that you don't get this option that's because you have installed python after installing vs code so you can simply restart this vs code in order to get this option over here and once you select this opt option you are ready in order to write the python programs in the vs code IDE so guys just by using these four steps of installation you can quickly get started in order to write the python programs in the vs code and all the steps have been documented in this official documentation of the visual Studio website so you can check the content of this documentation as well the link I have given in the description already now guys we are going to write the first code in Python so what we are going to do is we are just going to close these tabs over over here and we are going to open this Explorer over here it is saying no folder opened initially so what you can do is you can create the folder initially in order to organize all your python programs so basically I'm going to just create a new folder over here and I'm going to say python so this is the name of the folder and then I'll select this folder over here so as you can see a new folder that is python has been created now you can write python programs inside this python folder you can have any other folder in any of the directories it depends on you where you want to store the python codes that you will be writing from now on so what we will be doing is as you can see this is the icon it says new file so we will be clicking on this new file and let's say I provide the name of the Python program as python followed by underscore and then we have code followed by dot we have py so guys this is very important that after typing the name of the file we have to append it with py this is the extension of the pyth Python program and this extension will help the vs code in order to interpret that this is the python code and it should execute this code using the python interpretor so guys I'm going to press enter over here and once we press enter this python code. py it is going to open automatically over here now simply we can print some content in our Python program as the first code in Python so over here we have something called as print statement as you can see once we type print it is auto suggesting us what are the different keywords that we can use so so when we press enter over here this print gets selected automatically now inside the open and close parenthesis what we are supposed to do is we can type one particular statement that is the name of the YouTube channel that is programming for beginners which you should definitely subscribe so this is a string that is a statement that we have given over here and this is the very simple Python program that we can write and what this will do is it will simply print this content that is programming for beginners on the console so guys over here you have to come on file and then you can click on save or else you can use the control+ S on the keyboard in order to save the file which I'm going to do in the upcoming videos as well so first of all you save this file and simply you have to come on this top right corner over here you can see this run python file button over here so when you click on this run python file the terminal will open and it will execute this file that is python code. py that we have simply created over here and as you can see programming for beginners string is getting printed so guys in this way we have return the very first code in the python and using the print statement we have printed the programming for beginners we can print any other statement over here as well so let's say I'll provide this as a statement and then when we save this file and try running this code once again as you can see this is a statement is getting printed over here on the terminal so guys this is the way we can easily set up our python interpreter along with the editor that is Visual Studio code you you can use any other editor that you want such as you can simply use the notepad file as well but you will not get such strong features which are provided by the visual studio code in the notepad file apart from that you can also use notepad++ or we have a very popular ID that is py charm and apart from that we have many other editors that you can use but vs code is one of the lightweight editors that you can use when you are writing the python programs python variables constants and literals so guys what are pyth variables so in programming a variable is a container that is a storage area to hold data so as we have seen previously a number is a variable and we can provide the value that is 10 so previously we had seen a string variable in which we had stored some statement whereas we can also have the integer values being stored in the variables so over here if we move to our Visual Studio code so we can simply type number that is the variable name which can be assigned a value so equal Al to 10 so this is nothing but an integer value being assigned to a variable which is named as a number we can also have the string so let's say programming for beginners so we have programming for beginners as the string over here which can be assigned to a variable and the variable name can be given as Str Str or it can be also given as message or any other name that you want to give while writing your Python program Guys these are nothing but variables which can be used later on in the program basically their functionality is to store some values so in this case number is storing the value that is 10 and this Str Str variable is storing the value that is programming for beginner string now guys it is very important to note that python is a type inferred language so you don't have to explicitly Define the variable type it automatically knows that 10 is an integer and declares the number variable as the integer so guys basically it depends on the value that we are providing so just because you are typing number as the name of the variable it doesn't mean that it has to be necessarily having the integer value you can also have the string value as well so when I copy this and paste this over here the number will have programming for beginners but guys this doesn't make any sense over here but programmatically this is also possible that's because we don't have to provide any data type over here in the python programs so whatever the value is data type will be given to that particular variable based on the value that is being provided to the variable this is very important Point as far as as python programs are concerned in other programming languages such as Java or C++ we have a very strict data type that needs to be provided before we provide our variable names over here and guys this is also one of the advantages of using the Python program it allows us to write the code quickly compared to other programming languages now guys moving forward what is the python constant so basically a constant is a special type of variable whose value cannot be changed so for example as you can see the pi value is 3.14 so over here guys before defining the constant variable what we can do is if we simply print this variable over here that is print followed by number that is being given inside the parenthesis I'll save this file and TR running this code now so as you can see programming for beginners is getting printed that's because the value is given as programming for beginners let's say I provide the integer that is 20 over here and then when I save this file enter I running this code now the number should have the value that is 20 and that is should be printed so as you can see when we run this code 20 is getting printed over here so whatever value is being stored and whichever variable we want to print the content of that variable will be printed now coming to the constants that we have just defined so in Python let's say if you provide pi equal to 3.14 over here so instead of this number we provide Pi it is equal to 3.14 I'll just remove this line of code and then simply I'll provide pi over here so what will happen is it will display this value that is 3 3.14 I'll save this file and try running this code now as you can see 3.14 is getting printed but guys what is the use of this constant basically we are saying that Pi is constant over here that's because using this nomenclature that is the constant variable must have all the characters as the upper case so this can Define that it is a constant over here but is it actually a constant no in this case since again we can use pi over here and we can provide some other values as well such as 5.1 5 over here so when I save this file entery running this code now it is saying now that Pi is having 5.15 which is the latest value so guys there is no concept of python constants over here right now but what we can do is we can save this value in some other file so let's say I create another file over here and name it as constant followed by the extension that is py over here when we press enter we can simply provide this statement that is Pi = to 3.14 I'll just copy this and paste this over here so we we have provided pi equal to 3.14 now what we can do is coming to this python code what we can do is we can use the import keyword now guys this import keyword is used in order to import some other python files into this file so that we can use the content of that other python files over here so we are going to import this constant. py in our python code program so import we can say constant over here so when we type constant as you can see constant is getting getting Auto suggested over here that's the very important feature of the intellisense which is included in the python extension that we had installed so we provide constant over here and what we have to do is while printing we can simply provide this constant over here that is constant followed by Dot and then as you can see Pi is getting Auto suggested that's because we had defined pi over here so we simply have to provide Pi so what will happen is it will print the value of the pi so when we save this file and try running this code now once again it says module constant has no attribute Pi so guys that may be because we have not saved this file that is constant let me come over here and save this file over here once again and I'll go to this python code and then run this file once again so as you can see now 3.14 is getting displayed so guys if you want to use some constant values you can have a separate file that is constant. py in which you can store all the constant variables let's say we have another variable over here that is St Str and then we provide string s the value so this Str Str can also be treated as a constant for which the values never change while we are executing the code I'll save this file over here and let's say if I want to print the string as well so I'll copy this line of code paste this over here and instead of Pi we will provide St Str now so we provide constant. pi and constant do s Str also so when we save this file and try running this code now we get both the things that is 3.14 we get the string value as well so if you want to use the constants in Python you can have a separate file all of the constants can be defined over there and then you can import that constant file and use the various variables that you have defined as constant in order to write your python programs so guys moving forward over here what are python literals literals are representations of fixed values in a program they can be numbers characters or strings etc for example hello world is one of the literal then 12 is another literal 23.0 Z and then C character true false Etc so guys literals are nothing but these values so basically this value it is a literal this particular name that we have given is the identifier or also called as variable but in this case it is a constant now this variable becomes constant when the value cannot be changed but we can change this any time in this code but not over here an identifier can be a constant when we don't want to change its value anytime in our Python program and again the string string value inside the double codes it is a literal python data types in which numeric string list tle set are included so Guys these are the different data types that we can see in this video and the upcoming videos as well so basically in computer programming data type specify the type of data that can be stored inside a variable so for example number it is equal to 24 so 24 value belongs to the numeric data type and this is the integer value inside the numeric data type we have many other data types such as integer value then we have float value as well in which there is a decimal point we have a complex value as well in which as you can see this expression that is 1 + 2J this is a complex expression so all these are having numeric data types over here so number over here is a numeric data type or the integer as you can see 24 is the value if it was 24.5 then we would say that number variable is of float data type so guys let us check this with the help of example what we can do is we can simply copy these lines of code over here I'll copy this and we'll paste this over here now what we will do is this constant. py that we had created previously I'll just remove from our python folder over here since it is no longer needed and we will simply keep python code. py where we are going to write all the programs over here so guys over here I'll simply replace the content of this file by this content I'll save this file and over here in the terminal I'll simply clear the script so as you can see num one it is defined as five which is the integer that is being assigned to num one so the data type over here will be the integer data type and using this print statement what we are doing is we are using this num one and then followed by comma is of type which means num one will be printed that is five will be printed and then we will have is of type string being printed and then type this is another method that is being used in order to get the type of a variable so as you can see this is the syntax that first we provide type and Then followed by open and close parenthesis and over here inside this we have num one that is the variable name guys similarly we have provided num 2s 2.0 and the same thing we are doing that is we are finding the type over here and then in the num three as well we are getting the type of this num three variable let me just save this file enter are running this code now so as you can see five is of type Class end so this is of the integer data type 2.0 since it is having the decimal over here it is saying it is of type float over here and 1 + 2 J it is of type complex over here so these are all numeric data types and inside the numeric data types these are described as integer float and complex values now apart from this guys we have other data types as well such as string that we had seen previously we have list as well tle and set so guys let us check this one at a time so over here what we will do is simply I'll provide Str Str and then I provide the Str Str value as programming for beginners so what we will do over here is we want to find the type of this Str Str variable so what we can do is we can simply have the print statement followed by open and close parenthesis and we can simply have the type function so guys as you can see type is being Auto suggested over here we will select this and inside the open and close parenthesis we will use this variable so I'll just copy this and paste this over here that is Str Str and then when we save this file and try running this code now as you can see class that is St Str is getting printed over here we can also have some string value over here that is first of all we are going to type St Str that is the value of this Str Str and Then followed by comma and then we can simply have is of type inside the single codes over here guys it is very important that whenever you want to type certain characters we should either have it inside the single codes or double codes as we have seen over here and then when we save this file ENT running this code it will show us the data type of this string with a more sensible statement so as you can see programming for beginners this is the string value that we have given and then is of type now this is of type we have provided over here and then this type function that is St Str it is returning the type of this Str Str variable which is class Str Str over here so this is a string data type now guys this Str Str over here it stands for string and not the name of this variable if I provide here something else then it will be more sensible so let's say if I provide statement over here as the name I'll copy this and paste this over here and when we run this code once again so as you can see it says class s Str is of type class s Str so since we have not replaced this Str Str with the statement that is why we are not getting it properly I'll run this code once again now so as you can see programming for beginners which is the value of this statement variable over here and then is of type and then we have class Str Str over here here now apart from this we have other data types as well such as list which can be defined as the square brackets so what we have to do is let's say I provide list one as the name of the variable and then equal to now guys list is nothing but it is a data type that have collection of elements so over here let's say we have collection of strings so let's say we have collection of fruits over here so the first fruit is Apple followed by comma and then again we have double quotes and then we have mango so all the elements are being separated using the comma over here as you can see and then let's say we have banana over here as the third fruit so what we can do is we can simply have print statement over here and then we can have type of this list one so I'll say list one over here when we save this file and try running this code now as you can see class list is getting printed so this is of data type that is list over here similarly we have tle and set as well which we are going to see in the upcoming videos what are the different contents of these data types and how do we use them and when do we use them so guys for now you just need to remember that whatever value that we provide to a particular variable automatically that data type will be assigned to that particular variable basic input and output in Python Programming so guys in this tutorial we will learn simple ways to display output to the users and take input from users in Python with the help of examples now guys as we have seen previously in Python we can simply use the print print function to print the output so let us check this with the help of example over here so I simply want to print a statement so let's say I want to print programming for beginners that is the name of this YouTube channel which you should definitely subscribe if you have not subscribed it yet so once we provide the string inside the double codes we can simply save this file and try running this code now so on the terminal we will be able to see the string getting printed that is programming for beginners I have missed out an O character over here so this is the correct string so programming for beginners is the string that we want to print and that is what we have got over here in the terminal now guys even with this print function over here this is a function and it takes certain parameters so parameters are nothing but certain values that you can provide to the function so as you can see the actual syntax of the print function accepts five parameters so basically we have only provided one parameter over here this can be treated as a parameter that is the value that we want to print now apart from this we also have other parameters as well so object is the parameter which is nothing but the value to be printed apart from that we have separator then we have end parameter file and then flush parameter so these are the five parameters and these are the descriptions of each and every parameter so over here the separator which is an optional parameter since we have not provided any separator over here it allows us to separate multiple objects inside print so let's say after this string I want to provide another number over here so let's say 1 2 3 4 is the number that I want to provide now I want these objects that is one is programming for beginners which is a string and another object that is a number to be separated using commas so what we will do is after providing comma we will use the SCP that is another parameter as you can see vs code is providing us the autoc completion feature over here so we just need to select that and then we need to provide single codes and inside this we provide comma followed by the space character so guys what will happen is all the objects will be separated by using this comma and the space character over here it depends on your requirement how many objects you want to provide inside this print statement so let me just save this file and try running this code now so as you can see programming for beginners and then we have this comma followed by the space character and then we have this 1 2 3 4 object being printed over here we can have another object so let's say I provide another string that is another statement over here so let me just say save this file and try running this code now so we are getting an error invalid syntax perhaps you forgot a comma so basically after providing each and every object we have to separate it using the comma over here and then let me save this file and try running this code now so as you can see programming for beginners followed by comma and then we have space characters and then we have 1 2 3 4 again we have comma and then space character and then we have another statement so guys in this way we can use the separator parameter as well in order to separate the different objects inside the print function now going to next parameter which is end over here which is again optional by default it is the slend character in which case the control flow goes to the next line Whenever there is another object that is getting printed over here so as you can see it allows us to add specific values like new line or tab character so guys let's say we have this print function over here I'll just remove this part of the line over here and let's say I have another print function in which case I am providing another statement so let's say we have have another statement over here so guys what will happen is by default this end parameter is having the Slash and character which means the control flow should go to the new line Whenever there is a next print statement that is encountered so let me just save this file and try running this code now so as you can see programming for beginner string is getting printed in first line and on the second line another statement is getting printed now what if we want both these statements to be printed on the same line but they are present in the different print function so what we will have to do is in the first print function I will provide a comma over here and then we have the end parameter so as you can see this end parameter we have to select and then inside the double codes I'll simply provide the full stop followed by the space character so guys what is happening over here is after the string is getting printed at the end of the line we are providing this full stop and then followed by the space character and then whenever there is a next string that is encountered by the control flow it will get printed on this same line so let me just save this file and try running this code now so as you can see programming for beginners and then we have a full stop and then we have the space character as well and then we have another statement that is getting printed so guys we can also use this end parameter if we want multiple print functions to be used but all the objects need to be printed on the same line the other two parameters are file which is again optional where the values are printed so basically by default the values are printed on the screen and that is why its default value is system. STD out which means it should print on the screen you can also provide some file path over here so that the content can be return in the file apart from that we also have the flush which is again an optional parameter it is a Boolean specifying if the output is flushed or buffered so by default it is having the false value so Guys these two parameters you can practice on your own as a homework for you apart from that guys it is very important that how do you take input from the user in Python Programming so basically while programming we might want to take the input from the user in Python we can use the input function so as you can see we have a variable over here or we can say identifier it is equal to we have used the input function so guys this input function it will take a parameter which will be kind of a label which will be printed on the screen for the user as a instruction so we are asking the user to enter a number and the number that will be entered by the user will be stored in this num variable over here so guys let us check this with the help of example now I'll just remove these lines of code so what we have to do is let's say we provide the number variable it is equal to we have to use the input function as you can see this is the function that is being suggested by the vs code over here and then using the open and close parenthesis inside this we have to provide a string inside the double codes so we can simply provide enter a number now this is a instruction to the user to enter the number now guys what we can do is we can print this number now we can easily print this by using a string so let's say we provide the string over here that is entered number is and Then followed by colon and then after this object we have to provide a comma and then we can provide the number variable to be printed so we have provided the number variable over here let me just save this file andent try running this code now so as you can see it is asking the user over here to enter a number so what I will provide is simply I will provide 10 as the number and then when I press enter as you can see entered number is 10 so this string is getting printed along with the number that is being entered by the user now guys it is very important to note that whenever we are using this input function the input that is taken by the user will be of the type string over here so if we print the type of this number variable over here let me just do that so we simply provide data type of number colon and and then what we have to do is after comma we have to use the type function and inside this function we have to provide the number variable let me just save this file enter I running this code now enter a number so let's say I provide 10 as the number as you can see enter number is 10 and after this data type of number it is class string so this is of string data type so whatever input is being taken from the user it will be stored as a string so what we have to do is we have to convert it into a number now since this is a string we cannot add another number to this particular number so let's say if we try to add some another number over here so we simply do number + 5 over here let me just save this file enter I running this code now so when we provide 10 as the number when I press enter as you can see it says can only concatenate string not end that's because we are trying to concatenate a string with a number over here that is the integer so what we have to do is we have to convert this input into an integer so we can simply provide int over here and then the entire input function needs to be enclosed within the open and close parenthesis so guys this we had seen previously as well this is the explicit type conversion over here which is the manual type conversion in which we are converting the string data type to the integer data type and now we will have the integer over here which can simply be added with another integer so let me just save this file and try running this code now so as you can see enter a number this time let's say I provide 15 as the number and then when I press enter as you can see entered number is so what is happening is this number that is 15 was taken and then five was added to this number and that is why 15 + 5 is 20 and this number is getting printed over here and you can see this data type of number now it is of the type integer that's because we have used the type conversion over here so guys this is the way you can take input from the user make sure that whenever you're using the input function the data that is being entered by the user is of the type string and you need to convert it into the appropriate data type before you can use the other operators arithmetic operators in Python Programming so guys arithmetic operators are used to perform mathematical operations like addition subtraction multiplication and many other operations which can be done using the integers or the numbers in Python so guys for example let's say we provide the print function over here and inside this function we provide 5 + 6 as the parameter so what will happen is the plus operator is being used over here in order to add these two numbers that is five and six and the result that is 11 will be printed so let us quickly check this with the help of example over here so what we will do is we will use the print function and inside this parenthesis we will simply provide 5 + 6 over here and when we just save this file and try running this code now so as you can see 11 is getting printed so guys what we have done over here is we have simply used the plus operator in order to to add two numbers we can also do this by using the variables as well so let's say we provide num one it is equal to 10 and let's say we provide num 2 it is equal to 20 and then let's say I provide sum it is equal to num 1 plus num two over here so guys basically once again we have used this plus operator in order to add two numbers that is num one and num two for which the values are 10 and 20 respectively and the result will be stored in this sum and when we provide this sum inside the print statement we will get that result so let me just save this file and try running this code now so as you can see 30 is getting printed that is the sum of 10 + 20 over here so guys this is one of the arithmetic operator that is plus is being used in order to add the two numbers apart from this addition we have other operators as well as you can see subtraction we have in which the two numbers can be subtracted so over here 4 2 it is equal to 2 so over here minus operator is is being used we have multiplication as well in which multiply operator is used in order to multiply two numbers we have division as well in order to divide the two numbers so as you can see 4 / 2 it is equal to 2 so we are getting the quotient over here and we have the modular operator as well which can be used by using this percent operator so guys what happens is 5% 2 what this will do is it will divide the number on the left hand side that is five by the number on right hand side that is two so 5 ID 2 it will give us the quotient as 2 but the remainder will be one and we will be getting the remainder of this operation that is 1 over here and similarly we have power operator as well so as we can see four and then 2 * multiplication symbol over here which is the power symbol and then 2 which means 4 * 4 will be done which is equal to 16 so basically this is nothing but the square of the number in this case it is the square of this number that is four so guys let us check all these operators with the help of examples over here so what we will do is first of all we will print and add two numbers so let's say we provide 10 as first number and 20 is the second number so this is the addition of two numbers let's say we want to subtract two numbers over here and the two numbers are let's say 20 and then minus what we do is we will minus 15 over here let's say the third expression is multiplication so I will simply provide five as the number multiplied by seven as another number the next operator is the Divide operator so let's say I provide the print statement over here and we provide 50 as one number divided by 10 as another number and then we have another print statement let's say we want to find the remainder after dividing two numbers so let's say 40 is one number and then we provide percentage sign and then we provide 15 as the second number and then the last operator that is the power operator I simply provide five as the number and then two times multiplication over here which means power and then I provide two as the second number so guys let me just save this file and try running this code we will check the results of all these operations over here so as you can see the first print statement that is 10 + 20 it is providing us 30 as the result and this is the correct result over here 20 15 should be five and that is what we are getting over here as 5 and then 5 * by 7 it is equal to 35 and we are getting 35 over here then 50 ided 10 should give us the quotient that is 5 and we are getting 5.0 over here and then 40% 15 which means 40 is divided by 15 and then what is the remainder is getting returned to this print function and 10 is getting returned why 40 divided 15 the quotient will be 2 that is 15 * 2 is 30 but the remaining number will be 10 which will be the remainder and that is what we are getting over here is the 10 as the remainder and then 5 power 2 which means 5 * 5 is done over here and 5 * 5 is 25 and that is what we are getting over here so Guys these are certain arithmetic operators that you can use which include addition subtraction multiplication division and then finding the remainder of the two numbers by dividing them and then we can also find the power of the number so guys you can use them based on your requirements assignment operators in Python Programming so guys the assignment operators are used to assign values to variables so as you can see in this example the number variable is assigned the value that is five so this is the assignment operator that is equal to over here apart from that we have other operators as well so as you can see this is the assignment operator that is used in order to assign some value to a particular variable we also have addition assignment in which we use the plus operator first followed by the equal to symbol so guys what exactly happens over here is let's say if we provide this expression over here that is a and Then followed by plus symbol and then equal to operator and Then followed by this value that is one so so this is nothing but it is the expression that is a equal to a + 1 so basically 1 is getting added to this variable that is a and then it is getting stored in the same variable that is a so guys let us check this with the help of example over here so first of all I will provide the number variable and we will provide a value that is five over here so this is a simple assignment operator we can simply use the print function in order to print this number so when we provide number as the parameter to this print function and when we just save this file and try running this code now so as you can see on the terminal five is getting printed that is the value of this number now let's say we want to add 10 to this number so we can do this in two ways so first of all we can simply use the plus operator that we had seen previously so number equal to number followed by plus operator and then 10 so guys this is one of the arithmetic operators that we had seen previously that is used in order to add two numbers so number + 10 in this case it will be 5 + 10 that is 15 and 15 will get assigned to this number and it will be printed by using this line of code over here let me just save this file andent try running this code now so as you can see 15 is getting printed now guys there is another way in order to add this 10 to this number so we will simply remove this part of the code over here and then what we have to do is we have to provide number followed by plus operator and then equal to operator and then the number that we want to add to this number that is 10 so guys what is happening over here is this is the shorthand method for the same expression that we had written previously so it is equal to number equal to number + 10 so guys this is the expression that is working over here behind the scenes and 10 is getting added to this number and the result is getting stored in this number variable itself let me just save this file and try running this code now so as you can see 15 is getting printed over here guys this is nothing but a comment that we have provided I can just remove this part over here and let's say I want to add 15 now so we provide 15 as the number so 5 + 15 should be 20 let me just save this file andent try running this code now so as you can see 20 is getting printed and this is how we can use one of the assignment operators in order to add two numbers let us move to another assignment operator we have the subtraction assignment as well in which case we have to use minus operator followed by equal to symbol in which case this expression will get computed that is a it is equal to a minus three in this case when we provide a minus operator followed by equal to operator and then three similarly we have multiplication assignment in which multiply and equal to are used in combination we have division assignment as well in which case divide and equal to is used remainder assignment in which case this percent sign is used along with the equal to symbol and exponent assignment as well in which case the two times multiplication symbol is used and then equal to operator is used in order to compute the power of the numbers so guys let us check the remaining assignment operators with the help of examples over here so what we have to do is the number variable is already five and to this number we can simply change the assignment operators so let's say I want to subtract some number over here so what we will do is number then minus equal to operator let's say I want to remove two from this number so it is nothing but 5 2 in which case the answer should be three so let me just save this file and try running this code now so as you can see three is getting printed if I want to multiply this number so I'll simply replace this minus by multiplication symbol and let's say I provide four over here as the number so this should be 5 * 4 let us check what will be the result so 5 * 4 is 20 in this case let's say I want to use the Divide operator so we can simply use the divide and then equal to symbol and let's say I provide the number over here as three so let me just save this file enter I running this code now so 5 divid 3 will give us 1 66 as the result and that is what we are getting over here now guys similarly let's say I want to find the remainder while we divide 5 by three over here so we simply have to replace this divide Operator by the percent operator over here and let me just save this file enter running this code now so 5 / 3 the quotient will be 1 in this case and the remainder will be two in case we don't want the decimal output over here so two is the remainder and that is what we are getting over here and the last operator that is the exponent operator over here so we simply provide the multiplication symbol two times and then equal to operator and then let's say we provide two over here so this is nothing but 5 multiplied by 5 that is the square of the number that is five let me just save this file and try running this code now so it is 25 over here if you provide this as three so what will happen is five will be multiplied by the same number that is five three times over here so let me just save this file and try running this code now so as you can see 5 * 5 is 25 and then 25 * 5 again will give us 125 as the result and guys this is how we can use the assignment operators based on our requirements as the shorthand methods in order to carry out the mathematical operations on the numbers comparison operators in Python Programming so guys the comparison operators compare two values or the variables and return a Boolean result that can be a true or a false value so let's say for example as you can see we have two variables over here that is a is equal to 3 and b is equal to 5 so when we print this statement and inside this we have a comparison operator that is greater than operator over here that is a greater than b so what is happening behind the scenes is there is a check whether this variable that is a is it greater than b so if we see 3 is not greater than 5 over here in which case the return value will be false over here but in case when the value of a is greater than b then this particular expression that a is greater than b will return us True Value so guys let us check this with the help of example over here so let's say we have the variable a it is equal to 3 and the variable B it is equal to 5 and then when we have this comparison operator over here we use the print statement we say a greater than b so guys this particular operator is the greater than symbol over here which can be treated as the comparison operator in order to compare the two variables or the two numbers as well so let me just save this file and try running this code now so as you can see we are getting false as the result that's because the value of a is three and the value of B is five in which case a is not greater than b and that is why we are getting false over here guys similarly we have other comparison operators as well as you can see we have is equal to so basically 3 equal to equal to 5 no in this case because both these numbers are not equal so that is why this expression will give us the result as false over here similarly we have not equal to in which case it will give us true that's because the two numbers are not equal so we use the exclamation mark followed by the equal operator in order to check the not equal to expression and then we have the greater than sign as we have seen just now greater than symbol similarly we have less than symbol over here so this less than symbol will give us true over here that's because three is less than five and we also have greater than or equal to so guys basically what happens is let's say if the value of a and b both are three so basically is 3 greater than three no in this case so false will be return but when we provide greater than or equal to which means we are checking that the two variables should be at least equal or greater than so in that case when both the values are three so 3 greater than or equal to three will give us true in this case similarly we will have less than or equal to symbol as the less than symbol and equal to symbol combination so guys let us check all these with the help of example examples over here so we have checked the greater than symbol over here let us check the less than symbol so we will simply provide print a less than b over here which should return us true in this case that's because the value of a is actually less than the value of B over here let me just save this file and try running this code now so as you can see first expression is false that's because a greater than b no in this case but is a less than b yes in this case and that is why we are getting true over here let us check some more comparison operators over here we provide the print statement is a equal to B over here and then let us provide another operator that is a not equal to B in this case and then we have another operator that is a less than or equal to B and then we have another operator that is a greater than or equal to B in this case so guys we have provided all the comparison operators over here let me just save this file andent try running this code now so as you can see these are the results over here so the first result is false that's because a is not greater than b a is less than b yes in this case so that is why we are getting true over here is a equal to B no in this case because 3 is not equal to 5 so we are getting false as the result then is a not equal to B yes both numbers are not equal and that is why we are getting true over here is a less than or equal to B so is 3 less than or equal to B yes in this case so that is why we are getting true and is a greater than or equal to B no in this case and that is why we are getting false over here now guys let us see what happens when B is also equal to a so we have provided both the values as three over here let me just save this file and try running this code now so as you can see we are getting the results over here so the first result is false that's because is a greater than b no in this case they are equal and then the second result is also false is a less than b no in this case both are false over here so Guys these are false that's because we are not checking whether they are equ equal or not but in the last two operators as you can see over here the last two results are true that's because we have included the equal to symbol so a less than or equal to B yes in this case that's because a is equal to B and is a greater than or equal to B yes in this case since a is actually equal to B so both these operators will return us true whereas both these operators will return us false whenever both the numbers that we are comparing have the same value now guys apart from this the third operator that is a is equal to B yes in this case and that is why we are getting true over here and is a not equal to B no in this case since A and B both are equal so this will return as false and that is what we are getting over here so Guys these are certain comparison operators that you will be using in the upcoming videos as well when we are going to check the if else statement and we will also be using the while loop as well in which case we have to use these comparison operators to go inside the loop or else to come out of the loop so logical operators in Python Programming so guys The Logical operators are used to check whether an expression is true or false so they are used in decision making so as you can see for example let's say the value of variable that is a is equal to 5 and the value of B variable is six over here and we have the print statement over here and there are two conditions that we are checking first of all whether a is greater than 2 so in this case the return will be true over here that's because the value of a that is five is actually greater than two over here and then as you can see this end keyword this is nothing but this is one of the logical operators it is being used in order to check the multiple conditions and the second condition that is being checked over here is whether B is greater than or equal to 6 so in this case since B is equal to 6 so yes in this case it is also true so basically since both the Expressions over here that is the second expression and the first expression is true and because this end logical wants all the Expressions to be true the return for the entire expression will be true over here so as you can see these are certain logical operators over here first of all we have the end operator which means A and B it is true only if both the operant that is a and b are true over here similarly we have r as well so as you can see A or B in this case only one oponent needs to be true that is only one condition needs to be true over here so this will be true if at least one of the operant is true and then we also have the not operator in which case we can use it as not a so it will be true if the operant is false and it will be false when operant is true over here so guys let us check all this with the help of examples over here so let's say we have the variable that is a is equal to 5 and B it is equal to 6 over here so we simply have the print statement and let's say we provide the condition that is a is it greater than two over here and we also have another condition so using the end logical operator over here we can combine multiple conditions so next time we will be checking whether B is greater than or equal to 6 so guys in this case both these conditions that is a greater than two will return as true and then B is greater than or equal to 6 will also return as true so this entire expression will be true over here so let me just save this file and try running this code now so as you can see true is getting returned over here now what if one of the conditions is false over here so what we have to do is let's say I provide a less than 2 in which case this particular expression will become false so let me just save this file and try running this code now so as you can see false is getting returned that's because one of the Expressions while using the end logical operator is false over here and according to rules all the Expressions while using the end logical operator must be true in order to return the true s result now guys if we check the same conditions that is both these conditions by using the or logical operator so we simply have to provide or over here and let me just save this file and try run running this code now so as you can see true is getting returned that's because the second expression over here is true and the first expression over here is false so anyway the or logical operator wants one of the conditions to be true and that is why we are getting the true as the result over here what if we make the second condition false over here so let me just change this expression to B less than 6 over here let me just save this file and try running this code now so as you can see false is getting return that's because is a less than 2 no in this case so false is getting returned over here and is B less than 6 over here no in this case it is equal to 6 so this expression is also false so the entire expression is false and that is the only combination where the or logical operator will return us the false result now guys when do we use this not operator over here so let's say I have just a simple expression so over here I will provide is a less than 4 over here so in this case is a less than 4 no so it should return false so let us save this file and try running this code now so it is returning false over here but what if we want the opposite of this result so if the result of any of the expression is false we want to print true but if the result of any expression is true we want to return it as false so what we have to do is we simply have to provide not logical operator and the expression needs to be provided within the parenthesis over here as we can see so let me just save this file now so since it was returning false by using the not logical operator it should now return true so let me just run this code once again so it is returning true over here similarly if let's say this particular expression turns out to be true so we will get false as the result so let's say I provide a greater than 4 so is a for which the value is five over here is it greater than four yes in this case so this will return us true but since we are using the not logical operator it will return this True Result to false and it will be printed so let me just save this file ENT running running this code now so as you can see false is getting returned over here and it is being printed so Guys these are certain logical operators that we will be using in the upcoming videos as well when we are going to use the if else statement apart from that we will be also using the while loops and other control statements as well where we are going to use these logical operators so guys practice on your own so that on different inputs you get different outputs IFL statement in Python Programming so guys in computer programming we use the if statement to run a block of code only when a certain condition is meant so for example as you can see assigning grades that is a BC based on the marks obtained by a student so basically over here in this case we will be using the if condition now what can be the conditions we can say that if the percentage of the student is above 90% so assign grade A in the same way if the percentage is above 75% then assign Grade B and if the percentage is above 65% but less than 75% then assign grade C so during such conditions we have to use the if else statement over here now similarly in Python there are three forms of if else statement so we are going to check all these forms of statements one at a time with the help of examples the first part is the if statement in which case we are going to Simply have the if statement over here along with the condition and the block of code the next form will be if else statement in which case we will also have the lse block over here and the third form of the IFL statement will be first we will be having the if statement and Then followed by the L if statement in which case we have another condition over here and then finally we have the else statement over here so let us check all this with the help of examples in the vs code so over here let's say we have the value of x it is equal to 10 now what we have to do is we have to provide the if condition over here so as you can see when we type if keyword over here vs code is suggesting us that we can we can use this if keyword so we are going to use this and then we are supposed to have some condition so we can say x greater than 5 over here so guys this is one of the comparison operators that we have already seen previously it will check whether this left hand side variable is it greater than the value that is present on the right hand side so guys this is one of the conditions that we are going to check and then followed by a colon over here so guys this is the format in which we provide the if condition and if this condition that is whether X is is greater than five if it is true then we want to come inside this and there will be the block of code we need to have certain statements over here so we will say print and we can simply put the string that is X is greater than 5 over here since that is the condition that we have checked so this is the very simple code that we can have with the if condition over here let me just save this file and try running this code now so as you can see it is displaying X is greater than 5 now guys this is just one state statement that we have provided inside the if condition we can also have multiple lines of code inside this block over here after the if condition so we simply have to press enter and provide the another print statement and let's say we will simply put we have check X so we have a very general statement over here that is we have checked X over here let me just save this file and running this code now so as you can see X is greater than 5 this thing is getting printed and this statement that is we have checked X is also Al getting printed so all the lines of code that is present inside the block after this condition that we have provided in the if statement will be executed only when this condition that is X greater than 5 is true now what if this condition is not true so let's say I provide X less than 5 over here in which case this condition will become false so what will happen is the control flow will not go inside this block and it will not print these statements over here let us verify this I will just save this file and try running this code now so as you can see nothing is getting printed over here that's because these lines of code are not getting executed because this condition was false now how do we verify that we have to come out of this block so basically we have indented this code that is there are some space characters over here in this line that is why these lines of code over here are treated to be present inside the block after this condition we have to come out of that block over here so we simply press enter and then we press as backspace so that the cursor is aligned to this if condition over here now we can simply provide another print statement and I will simply say outside if statement so over here we say outside if statement now guys this line of code it will confirm that the control flow has come out of the if block over here so let me just save this file now and try running this code so as you can see we are getting outside if statement that's because X less than 5 condition was false and that is why these two lines of code were not printed and then the control Flow came out of the if condition and then this line that is outside if statement was printed so guys it is very important that you follow this indentation as far as your python programs are concerned you might get incorrect output if you don't follow such indentations properly now let us move to another form of if statement so over here the second form is we provide the else part as well so the first part we have already seen that is using the if statement let us now use the else statement as well so over here what we will do is first of all we will check whether X is greater than 5 and then we will print that is X is greater than 5 over here now what if X is not greater than 5 that means it is less than or equal to 5 so we have to define the lse part over here so first of all we have to remove this indentation part so I'll just press on backspace and then we provide the else keyword as you can see vs code is suggesting us this lse keyword over here we will use this and then followed by colon and then we can go inside this block of code and similarly we will have another print statement in this case we will say X is not greater than 5 so we are checking whether X is greater than 5 and we will say x is greater than 5 if this condition is true and if this is not true then it will go in the lse part and it will say X is not greater than 5 and after this part of code gets executed the control flow will come over here and it will print this statement that is outside if statement over here so let me just save this file enter running this Cod now so as you can see it says X is greater than 5 so over here since the value of x it is 10 it is printing X is greater than five after this x greater than 5 condition is true and then after that we are getting outside if statement so the control flow did not go inside this else part that's because it went inside this if part and this line of code was executed so guys the control flow can only go inside one block of code if this condition is true then it will come out it will not go inside the else part and if this condition becomes false then it will go over here in the else part and execute that line of code so let us check that second scenario now what if X is not greater than 5 so we will change the value of x and let us say the X values is 2 now so in this case is X greater than 5 no in this case so this line of code that is X is not greater than 5 should get printed let me just save this file enter I running this code now so as you can see X is not greater than 5 this line of code is getting printed that's because the condition was false and the control Flow came in the else part and it executed this line of code after this outside if statement got printed over here as you can see on the console so guys this is one of the examples of the if else statement that we can use guys there will be many instances where you will be using this if else statement in your actual programs so make sure that you practice on your own now after this let us see another part that is we have the L if as well so guys let us take this example over here that is of grading system so if the percentage is greater than 90 we have to assign the grade that is a If the percentage is greater than 75 but less than 90 then we will say the grade is B and if the percentage is greater than 65 but less than 75 then we have to put the gr as C so guys let us move to the code over here let us clear all these lines of code and over here we will simply have the percentage variable and let's say we have 95 as the percentage initially and then we have another variable that is great let's say it is equal to D initially so we have this character that is D over here now what we have to do is we have to provide the if condition and the first condition is whether the percentage is above 90 so over here we will say inside the if condition first of all whether this percentage is it above 90 over here so we will simply have percentage greater than 90 and if this is true then we have to provide colon and then we have to make the value of this grade as a so grade it is equal to a over here inside the single codes now we have another condition that is if the percentage is greater than 75 but if it is less than or equal to 90 then it should be B so what we have to do is we can use the L If part over here so we have L if keyword so as you can see vs code is suggesting us this L if keyword over here followed by we have to check whether this percentage again is it greater than 75 so over here if it is greater than 75 then we have to come in this block of code and then after this again we have to assign the value to this grade variable and this time the value will be B over here so we will assign the value to grade as B and then after this we will again have the L If part over here and we need to check whether the percentage is greater than 65 or not and then in that case we have to provide C so over here we will say l if percentage it is greater than 65 in this case and then if this is true then we have to provide the grade value as C over here and then guys we can also have the else part over here and we can simply provide that the grade in the lse part it can be D over here in case the percentage is less than 65 so we can have grade as D and then finally we will have the print statement over here so we have the print function and we will simply provide the grade value so the grade is and then we have comma and then the grade variable over here so guys over here as you can see initially the percentage is 990 5 so it should go inside the first if statement so let me just save this file now and try running this code so as you can see we are getting some error over here at the else part so over here we have forgot to provide the colon after the else part so it is very important that we provide the colon after any of these keywords that we have used and the conditions that we have used so let me just save this file and try running this code now so as you can see the grade is a that's because the percentage value is 95 and in this case percentage is greater than 90 and that that is why the grade is being assigned as the value as a now what if the percentage value is not greater than 90 so let's say we provide the percentage value as 85 so in this case the control flow will come over here it will check whether percentage greater than 90 no in this case then it will go inside the L If part so is percentage greater than 75 yes in this case so this line of code that is grade equal to B will get executed and then the control flow will come directly out of the if else statement and it will print the grade over here that means save this file and try running this code now so as you can see the grade is being assigned the value as B so grade is B is getting printed over here similarly let's say we provide the percentage value as 70 so this time this condition that is percentage greater than 65 will get executed because the previous conditions are already false in this case so let me just save this file enter I running this code now so grade must be C so as you can see the grade is C over here and what if the percentage is less than 65 so let's say we provide the percentage as 6 T So finally the lse part that is grade equal to T will get executed so let me just save this file and try running this code now so now in this case the grid is D so in this way we can easily use the IFL statement we can also use the L if keyword in order to check the intermediate conditions over here for Loop in Python Programming so guys in computer programming Loops are used to repeat a block of code so let's say for example if we want to show a message 10 times we don't have to print that 10 number of times over here we can simply use the loop in order to repeat the same message again and again 10 times so in Python the fall Loop is used to run a block of code for a certain number of times so in this example we have considered 10 we can have any number of iterations so basically it is used to iterate over any sequences such as list tle string Etc so guys this is the syntax of the Fall Loop in Python Programming so first of all we have the for keyword followed by by a particular value or a variable and then we have this in keyword which is a kind of a membership operator that we have seen previously and then we have the sequence now this sequence can be anything it can be a list tole or any other sequence over here so let us check this with the help of examples now so over here what we will do is let's say we have the variable name as X and we have the list of numbers over here so in order to define the list we have the open and close square brackets and we have the list of numbers let's say we have one followed by two and then we have three 4 and then five so we have the top five numbers over here inside this list that is defined in the variable X now what we want to do is we want to print all these numbers one at a time on the separate lines so we can simply use the for Loop over here so for and what we will do is let's say we provide value as the variable name and then we provide the in keyword which is the membership operator and after this on the right hand side of the in keyword we are supposed to have the sequence so the sequence in this case is the variable that is X over here so this is the format of the Fall Loop whenever we are going to iterate through a list or a sequence now inside this we can have the block of code over here so we simply want to print all the values so we have the print function and we can simply provide this value that is variable so guys what is happening behind the scenes is this x that is the list of all the numbers one at a time the number is being assigned to this variable that is value so first of all one will get assigned to value and this value that is one will get printed and then the control flow will go back again in the sequence at is X it will check whether there is a next element or not so two will get printed and then again three and then four and then five and then after this when the control flow comes over here it sees that there is no other element after this Fifth Element so the control flow will come out of this fall Loop and then the other lines of code after this fall Loop will get printed so guys let me just save this file enter I running this code now so as you can see all the numbers are getting printed over here on the terminal that is 1 2 3 4 5 now guys let's say we want all these numbers to be printed on the same line so previously we had seen that we have certain parameters in the print function that will help us in order to print the values in a specific way so over here we have one of the parameters that is end over here so we provide end and this parameter helps us in order to separate the different elements that we want to print so what we are going to do is I'm going to separate all the numbers using the comma character so I have provided the comma character over here so all the numbers that were printed on the different lines will get printed on the same line now so let me just save this file enter I running this code now so as you can see 1 2 3 4 5 is getting printed we are getting this additional comma over here at the end that's because after the last value is getting printed the comma is appended after that last value so guys this is one of the ways in which we can use the fall Loop in order to carry out our operations now guys there is another important thing that you must know in Python the fall loop with python range can also be used so in Python a range is a series of values between two numeric intervals we use the Python's builtin function that is range to define a range of values so let's say we want to define the top 10 numbers over here we can simply use the range function instead of defining them one at a time like how we have defined in this list so basically in order to have the top 10 numbers we have to manually Define it as 1 to 10 over here but we can also get rid of this part we can have the range method over here so as you can see when we type range vs code is suggesting us this function that is range over here and we simply have to provide a number over here so let's say we provide 10 as the number so what is happening is the list of 10 numbers over here is getting assigned to the variable that is X over here starting from the number zero up to the number that is nine so over here we will be seeing all the numbers starting from zero up to 9 over here the last number that is 10 is excluded from the list so if we Simply Save this file enter running this code now we will get these numbers that is 0 1 2 3 4 5 6 7 8 9 so 10 numbers are getting displayed over here that's because we have provided 10 inside the range builtin method what if we provide 20 over here so 0 to 19 numbers will be displayed so let me just save this file and try running this code now so as you can see 0 to 19 is getting displayed so guys let's say if someone had told you write a Python program in order to print top 20 numbers starting from the number 0 up to 19 so instead of having the print statements 20 number of times and writing each and every number inside the print statement we can simply have the range method over here and we can use the fall Loop in order to iterate through the list that we have already defined over here and that is how we simplify the problem that is given to us and write the Python program program now guys there is another variation over here python fall loop with the else part so after this fall Loop we can also have the else part that will mandatorily get executed after we reach the end of this sequence that we have provided in the fall Loop so what we will do is we will simply come out of this block of code and we will have the else part over here and we will simply print outside fall Loop over here so we have outside for Loop so guys what will happen is after the control flow comes out of this fall Loop the control flow will go inside this L's part and it will execute this line of code and print outside fall loop on the console now guys this print statement will be printed on the same line that's because we have provided the end part over here and there is a comma over here so you can expect the string to be present on this same line over here so let me just save this file andent try running this code now so as you can see 0 to 19 that is all the numbers are getting printed and then the last line that is outside fall Loop is getting printed over here so in case you want to print something or carry out certain operations after the execution of the Fall Loop you can have the lse part as well and it will carry out the operations over here after the end of this sequence is reached so guys this is the main functionality of the Fall Loop that is in order to iterate through the sequence we can also have the sequence of list of strings as well we can also have tle or dictionary as well so guys it depends on your requirements as to what exactly you want to find out through the python programs while loop in Python Programming so guys previously we have seen how the fall Loop works in the Python Programming now the python y Loop is used to run a specific code until a certain condition is met so basically in the fall Loop there was no such condition that we had provided but it was iterating through a list that we had provided in the form of a variable but over here this is the syntax of the while loop first of all we have the while keyword over here and then we have a certain condition and if this condition is true then only the control flow will go inside the body of the V Loop and then again the control flow will come over here it will check the condition again and if the condition is true once again it will again go inside the body of this while loop so guys again and again the control flow will come inside the while loop until and unless the condition becomes false so when this condition becomes false the control flow will come out of this while loop and that is how the while loop is going to work in the Python Programming so guys let us check this with the help of examples now so let's say we want to print the first five numbers that is 1 to 5 so over here initially we can have the variable that is I it is equal to 1 and the second variable that is J it is equal to 5 so this is the starting point that is I equal to one and the ending point is J is equal to 5 so basically we can have a while loop over here we will simply have the while keyword and the condition that we have to give is whether I is less than or equal to J and up to that that condition we want to print the value of I so basically it is I less than or equal to J over here so if this condition is true we want to print the value of I which will be one initially so basically I want to print this number that is I over here now guys what exactly is happening over here is I's value is 1 initially J value is five initially so is I less than or equal to J in the first instance yes in this case so I will be printed which is equal to 1 so again it will go inside the Y Loop and it will check whether 1 is less than or equal to 5 yes in this case so guys we are not changing any of the values that is I or J over here so this will be infinite Loop because again and again the condition will be true and the number that is I which is equal to 1 will get printed indefinitely so what we have to do is we have to increment the value of I because after 1 we want to print the value that is two over here so what we will do is we will simply add one to I so I it is equal to I + 1 we can also use the Shand method that is I + equal to 1 over here so what will happen now is I's value is updated to I + 1 which will be 2 now so is 2 less than or equal to 5 yes in this case and then again two will get printed and then I will again get incremented over here so the I's value will be three next time I's value will be four and then again I's value will be five and then ultimately when I's value is six this condition will become false that's because 6 is not less than or equal to 5 and the control flow will come out of the V Loop so guys let me just save this file and try running this code now so as you can see all the numbers that is 1 2 3 4 5 is getting printed after the I's value is five over here 5 is getting printed now I's value becomes 6 over here that's because 5 + 1 will be 6 and is 6 less than or equal to 5 because the J's value is five over here in this case so no the condition becomes false and the control flow comes out of the while loop now what if we want to print all these numbers on the same line so simply inside the print statement we can have the comma and then we can have the end operator and then let's say we want to separate all the numbers with the space characters so inside the double codes we have provided the space character over here so let me just save this file and try running this code now so as you can see 1 2 3 4 5 is getting printed over here we can have any numbers over here let's say I is starting from 11 and let's say we want J is equal to 20 so in this case 11 to 20 should get printed let me just save this file and try running this code now so as you can see 11 12 13 14 and up to 20 numbers are getting printed over here so guys this is the main functionality of the while loop it is going to have a certain condition and if this condition is true the block of code inside the while loop will get executed and once the condition becomes false control flow comes out of the while loop now guys we can also use the lse part with the while loop so over here as you can see python while loop with the else part so a while loop can have an optional else block as well the else part is executed after the condition in the while loop evaluates to false so basically after this while loop we can also have the else part which is optional so we can have the else part over here what we will do is we will simply have the print statement that is outside the while loop so we have the print function and we will say outside while loop over here so let me just save this file inter I running this code now so as you can see 11 12 13 up to 20 numbers are getting printed and then on the same line the outside while loop the statement that we have provided in the else part is getting printed so this is the functionality of the else part after the while loop it is optional if you want to have we can have it or else we don't need to have it but guys the important thing is inside the V Loop we can provide a particular condition and the control flow will go again and again inside the while loop until the condition is true once a condition becomes false the control flow will come out of the V Loop now guys what you should use whether you should use the python fall Loop or python while loop over here so guys basically they are used based on the specific requirements so as you can see fall Loop is usually used when the number of iterations is known so as we had seen previously in the fall Loop we provide a particular sequence and iterate through that sequence by giving one value at a time to a variable and we use that variable inside the block of the Fall Loop but in the while loop there is a condition so while loop is usually used when the number of iterations are unknown so we don't know the number of iterations we don't have the sequence of elements or the list of numbers through which we want to iterate so basically we provide the condition in the while loop So based on these requirements you can choose whether you want to use the while loop or you want to use the fall Loop but guys it is very important that you practice both these Loops the implementation of these Loops are very important as far as Python Programming is concerned so functions in Python Programming so guys we will learn about the python function and the function expressions with the help of examples so basically a function is a block of code that performs a specific task so it can be any task that you want to implement based on your requirements but it is the block of code that you can put inside the function and that block of code will have your implementation of the logic now suppose you need to create a program to create a circle and color it so there are two task over here that is first of all in order to create a circle and the second thing is to color it so you can create two functions to solve this problem that is the first function will be to create a circle and that will be one function and another function will be to create a color over here so basically what we have done is we have divided a complex problem into smaller chunks which makes it easier to understand the program and reuse the functions as well so there are two types of functions so first of all we have already seen some standard Library functions as well one of the example is the print statement that is the print function so these are builin functions in Python that are available to use so let us check some examples of standard Library functions over here so previously we have seen the print statement so this is nothing but one of the builtin functions which take multiple parameters so one of the parameters is the value so when we are providing programming for beginners the string which is the name of the YouTube channel as well which you should definitely subscribe type so this is the string that we have provided to the print function and this string is being passed to the print builtin method and behind the scenes this print function is having some sort of code that will help us in order to print the statement on the terminal so when we save this file and try running this code now basically this programming for beginners is getting printed what we have done we have just called that function and the implementation is behind the scenes so this is one example of a builtin function similarly we have another builin function that is range which helps us in order to have the list of numbers from zero up to the number that we have provided so let's say we provide the number 10 so it will provide us all the numbers before 10 starting from zero so this is another built in function so similarly we have other standard Library functions as well now you can also have the user defined functions so in case your requirement is not fulfilled by using one of the standard functions that is being provided by python you can have your own user defined functions also so we can create our own functions based on our requirements and this is the sentex that is first of all we have this keyword that is DF which means Define and then we have the function name so this function name will be the name of the function like this range is the name of the function then the print function the print name is the function name over there so similarly we can have our own function name and after that we have the list of arguments we can have any number of arguments over here here inside that we will have the function body where our implementation code will be present and then we can also have the optional return statement which means it will return some value so over here as you can see this is the example we have the defined keyword and Then followed by the greed function over here so it is not taking any arguments for now it is simply printing some statement that is inside greed function now how do we call this function simply we use the function name that is GD followed by open and close parenthesis and then we call the print function and we say outside function so guys let us check this with the help of example over here so simply we will have the Define keyword so DF and let's say we have sum and then underscore numbers so basically what we are doing over here is we will be adding two numbers so over here we have the open and close parenthesis and then after that we have a colon and let's say we have the number a it is equal to 10 and then we have number B it is equal to 20 we want to print the sum of these numbers so we simply provide print function inside this and we say A + B and then we can also have the string over here let's say we have sum of A and B and then we have colon and then after this we have comma and then we have a plus b over here so guys this is the function that we have already defined we have two numbers that is a is equal to 10 and B is equal to 20 now if we Simply Save this file and try running this code we will not get anything so as you can see there is no print statement which is helping us in order to print something on the terminal why so because this code is present inside a function which is not called yet so we need to call this function that is some numbers so how do we call it by simply calling the name so we simply have to provide some numbers over here and then open and close parenthesis and that's it we have simply called this function which will make the control flow go to this particular function over here and inside it will go go it will check that a value is 10 B value is 20 and it will print sum of A and B it will carry out this operation that is A+ B so let me just save this file and try running this code now so as you can see sum of A and B it is equal to 30 and that is how we can simply provide the function now guys why do we write this function just to add two numbers so let's say you have a scenario you have 8 is equal to 10 and then we have B is equal to 20 and you want to print the sum so you can simply provide print a + b so you will get the answer as 30 now with the same requirement you have another requirement as well in the same code that is with this particular addition you want to add more two numbers so what you will do is you will simply copy and paste these lines of code once again that is the three lines of code over here but this time the age value is something else so let's say we have something like 50 and then 60 over here so what will happen is with this print statement it will print the sum of these two numbers now let's say there is another requirement m in which case all the sum needs to be printed at once and you have two more numbers so you will again copy these lines of code and then again paste this over here and then let's say the numbers are 100 and then 200 over here that is B is 200 so let me just save this file andent TR running this code now so what is happening is all the sum is getting printed once that is 30 110 and 300 but let's say similarly if you have 10 sets of A and B values in this way and you want to print all the sum of those numbers so what you will do so your code will become little bit complicated and it will be little bit lengthy as well so in order to avoid this what you can do is you can simply have the function and inside the function you can have those variables and have the sum of those variables so in order to achieve your task that is have the sum of multiple numbers over here in one screen and using the function what you can simply do is you can pass these values that is 10 20 50 60 and 120 while calling the function that is some number so I'll just remove these lines of code now over here and what we will do is I will simply provide the parameters that is the arguments over here that is a and Then followed by comma and then we have B now these A and B are not required because the values will come whenever this function is being called so I'll just remove these lines of code over here you will simply have one print statement inside the function and the sum of A and B it is A + B so this sum will get printed over here calling the function you're supposed to provide the A and B value so what we will simply do is I will simply call this some numbers over here and I will provide the values of A and B so what we had provided we had provided 10 and 20 and then again we had the requirement that is to add the other two numbers which were 50 and 60 so again I will just copy paste this sum numbers function and provide the different values this time and then again I will copy and paste this once again with some different values so 100 and 200 so as you can see our code has become little bit cleaner instead of having three lines of code in order to add two numbers every time for which our code has also become lengthy we have a very short code and it is very clean as well it is very readable as well so let me just save this file now and try running this code so as you can see we are getting sum of A and B it is 30 sum of A and B it is 110 and sum of A and B it is equal to 300 you can also customize your function in order to have the values of A and B over here so we can simply say over here we have the double Cotes and then we have comma and then we have a over here and then we have double codes and then we have and keyword double codes and then B value and then comma and then double quotes over here before the colon so as you can see A and B values can also be printed so let me just save this file enter I running this code now so as you can see 10 and 20 were passed first time so it is saying sum of 10 20 it is 30 then sum of 50 and 60 it is 110 and then sum of 100 and 200 it is 300 you can call this function any number of times with different values in order to get the different sum over here I'll say 200 + 300 again and then let's say I provide 400 and 500 over here let me just save this file and try running this code all the sums are getting printed and our code is also very clean over here so guys this is the main functionality of using python functions you can simply have the defined keyword followed by the function name and then this arguments list is optional over here you can pass it or if you don't want to pass it there is no need to pass so as you can see over here python function arguments this we have already covered that is in order to pass the argument now one last thing is return statement so guys we have not checked any return statement over here so return is nothing but it will return some value so let's say instead of having the print statement over here we want the print statement outside the function so what we can simply do is we can simply return the expression that is a plus b so we can have the return keyword over here so it will say return a + b so simply whatever value were being passed over here that is 10 and 20 it will return the sum that is 10 + 20 it is equal to 30 to this code and over here we should have something in order to catch that value so I'll just remove these lines of code for now and then let's say in order to catch the value I provide the sum variable so this sum variable is assigned the value that is being returned from the sum numbers over here which is equal to the sum of these two numbers and then simply we can have the print statement in order to print the sum value so some variable can be printed so let me just save this file and try running this code now so as you can see 30 is getting printed that's because we have passed 10 and 20 over here also to make it more short what we can do is instead of storing the value inside this variable we can simply have the print statement and inside the print statement we can simply call the sum numbers function so as you can see we have the print statement inside this we are calling the sum numbers 10 and 20 so it will return 10 + 20 it is equal to 30 so let me just save this file ENT I running this code now so 30 is being printed let's say I change the numbers to 20 and 50 over here so 20 + 50 should be 70 let me just run this code so 70 is getting printed and based on the requirement you can format the print function that is you can have any statements being printed over here along with the sum of the numbers so guys this is one of the examples of how you can Define the functions and use them you can have any other logic inside the functions that you want to implement based on your requirements so guys practice on your own so that on different inputs you get different output Anonymous or Lambda function in Python Programming so guys in Python an anonymous or Lambda function is a special type of function without the function name so we use the Lambda keyword instead of DF that is defined to create a Lambda function so as you can see this is the syntax previously we had used the DF keyword in order to create the normal functions but this time we are going to use the keyword that is Lambda along with the arguments which are optional over here and then followed by a colon and then we have the expression so this is one of the examples of the Lambda function over here we have the Lambda keyword followed by the colon over here and then we have the expression that is we are printing the hello world string and this entire function that is the anonymous function which is not having any name over here is being assigned to a variable that is greed and then this greed needs to be called as you can see call the Lambda over here along with the open and close parenthesis so when we have this line of code over here this Lambda function will be called and hello world will be printed on the screen so guys let us check this with the help of example over here so what we will do is simply we will have the Lambda keyword first of all and Then followed by a colon and then let's say we want to to print the name of this YouTube channel that is programming for beginners which you should definitely subscribe if you have not done so so we have programming for beginners over here so this is a Lambda function or the anonymous function without having any name and then let's say we assign it to a variable and we can simply provide the variable name as St Str and then we have the equal to operator over here now what we have to do is simply we need to call this Str Str variable so over here on the new line we will have s Str followed by open and close parenthesis and this is the way that we call the anonymous function so let me just save this file and try running this code now so as you can see programming for beginners is getting printed over here and this is one of the simple examples as far as Anonymous function or Lambda function is concerned in Python Programming now guys very important thing what if you have certain arguments which you want to print so this is kind of a static function which is having a fixed string that you want to print but let's say say you want to provide some string over here while calling the function so in case let's say we have this argument as this is a string that we want to print so this Str Str that is the Lambda function is being called but this value needs to be caught by this Lambda function over here so what we can simply do is we can take this argument after this Lambda keyword as we have seen in this syntax after the Lambda keyword we have the list of arguments that we can take and use them in in the form of Expressions over here so what we will do is let's say I provide Lambda and Then followed by X so this x variable will have this value whatever we pass while we are calling this Str Str function that is the anonymous function so this x we can use in our expression inside this Lambda function so let's say I provide a label over here string pass and Then followed by colon and then I have comma and Then followed by this x variable which is being passed so this is a string it is one of the arguments that we we are passing to the Lambda expression and the X variable will be assigned this value and it will be printed by using this print statement so let me just save this file and try running this code now so as you can see string passed this label is getting printed and then the value of x which was passed from this calling of the Lambda function over here that is this is a string and the same thing is getting printed over here so guys this is the way that we can pass arguments or parameters to our Lambda or Anonymous functions over here now there is another variation can we have the multiple arguments let's say we have two or more numbers for which we need to find the sum of those numbers can we find the sum of those numbers by using the Lambda function so let us quickly check this with the help of examples over here so what we will do is again we will Define the Lambda function over here so we have Lambda keyword and this time we will take two numbers so let's say the two numbers are stored in these variables that is X and Y and Then followed by a colon and then what we can do is simply we can print the sum of the these two numbers so we put x + y over here so this is the expression print x + y and over here in the Lambda we have defined the two variables over here now what we can do is we can assign it to another variable so let's say we have addcore numbers as the variable name so we have addore numbers and then Lambda keyword followed by these two variables that is X and Y and then print x + y over here so what we can simply do is we can call this add numbers and Pro provide the two numbers that we want to add so we just use this add numbers over here and then let's say the two numbers that we provide is 10 and 20 so we are expecting the sum that is 10 + 20 to be displayed by using this expression over here so let me just save this file and try running this code now so as you can see we are getting some syntax error Lambda expression parameters cannot be parenthesized so what we can do is we can simply remove these parenthesis that we have provided so when we are providing multiple arguments in the Lambda function we need not have to provide the parenthesis we can separate them using the commas over here so let me just save this file and try running this code so as you can see 30 is getting displayed we can format the string and have some label as well so what we can do is we have the double codes over here and we say sum of numbers and then colon and then comma x + y so let me just save this file and TR I running this code now as you can see sum of numbers that is 30 is getting displayed another way that we can print the sum of these numbers is just by returning the sum of these numbers and printing them over here outside the Lambda function so while returning any of the Expressions we need not have to have the return keyword we can simply have the expression over here so as you can see the two numbers were passed that is 10 and 20 it will be taken by this Lambda function in the form of X and Y X + Y will be computed and then it will be returned to this function which was called by using the add numbers now we can simply print this so we can have the print function over here and and inside the print function we call the add numbers with these two numbers let's say this time we provide some other numbers that is 100 and let's say 150 so the sum should be 100 + 150 which should be 250 over here let me just save this file and try running this code now so as you can see 250 is getting printed and again we can have some labels over here in order to Define exactly what this function is doing so guys practice on your own so that on different inputs you get different output this Lambda function becomes very important which is also called Anonymous function when you don't want to define the function explicitly and you have very less number of operations to be carried out by using this Anonymous function so list in Python Programming so guys a list is a collection of similar or different types of data so for example suppose we need to record the age of five students so instead of creating five separate variables we can simply create a list so as you can see this is the way that we create the list first of all on the left hand side we have the variable name and then on the right hand side inside the open and close square brackets we have the list of elements which are separated using the commas so I'll just copy this line of code over here and then let us move to the vs code and paste this so as you can see on the left hand side it is the variable name of the list and on the right hand side we have the age of all the students over here and simply we can print the list by using the print function after this we can provide the variable name that is list so let me just save this file enter I running this code now as you can see we are getting the list of all the elements in the sequence that we had provided over here it is very important that all these elements are separated using the commas over here now guys the list can have the same kind of elements that is this one is having the list of integers data type only but we can also have the string as well in between so let's say we have a string called John over here in between this list of elements so this is also possible it will not throw any errors while we are running this code so let me just save this file andent I running this code now as you can see we are getting the list of all the values 17 18 and then we are getting John and then 19 and then 14 so this is a kind of a heterogeneous list whereas when we have the same kind of data type in the list then it is called the homogeneous list now how do we access the python list element so basically this is one way in order to access the list but what if we want to access only a single element by using this print statement we have accessed all the elements over here but in case we want to access a particular element from this list then what we can do is in Python each item in a list is associated with a number so the number is known as a list index so basically all these numbers that is the elements of the list that are present inside the list so these are associated with the indexes which starts from zero so the 17 number is at the zeroth index 18 number is at the first index and so on this is at the second index third index and then so on so basically these elements can be accessed using these indices so as you can see we can access elements of an array using the index number now how do we access them so what we can do is we simply come over here I'll simply change this to the number 15 that was there previously and what we have to do is let's say I want to access this element that is the fourth element so what will be the index so this is zero index then we have one and then two and then three so this is the third index so we can access by using the variable name followed by open and close square brackets and inside those brackets we have to provide the index number that is three in this case which represents this number that is 19 so let me just save this file and try running this code now as you can see we are just getting 19 over here previously we were getting the entire list when we don't provide this index number I'll save this file so as you can see all the values are getting printed but when we provide the index number let's say I want to print 18 this time which is at the index one after this index which is zero so I provide list of one over here save this file and run this code so as you can see 18 is getting displayed and this is how it is one way in order to access a particular single element inside this list by using the index number now it is also possible that we provide the negative index in Python so python allows negative indexing for its sequences the index of minus1 refers to the last item minus 2 to the second last item and so on so for now we know that the zero index is the first element over here and then the first index is the second element but what about the last element let's say we don't know the length of the list like how many elements are present inside the list and we want to get the last element over here so since the first element is at the zero index the previous index that is before 0o which is minus1 it will point to the last index of this list that is 14 over here so what if we simply do list of minus 1 in this case so I'll just provide minus1 in this case let me save this file and TR running this code as you can see we are getting 14 so basically the minus1 index will point to the last element of the list in this case let's say we want to get the second last element so in this case we will simply provide Min 2 so after minus1 we are having min2 which will be the previous element of the last element so let me just save this file ENT running this code now so as you can see 19 is getting displayed now and this is the way that we can also use the negative indexing as far as accessing the last elements of the list are concerned now there is another concept of slicing in Python list so in Python it is possible to access a section of items from the list using the slicing operator which is nothing but a colon not just a single item so let's say we want to access the second and third elements inside the list so we have to use the slicing operator in this case now what is the slicing operator while providing the index es inside the open and close brackets we have to provide the indices and separate them using the colon so what is the index of the second element it is one over here since the first element is having the zeroth index we don't want that we want to start from the first index and then we also want the second index so this time we have to provide the next number that is at the third index now so after this one that is the first index we have to provide colon and then we provide three over here so three is not included in this case please remember that whenever you are providing the ending index that element will not be included whenever you are using the slicing operator over here so the elements that will be considered in this case will be at the index one and at the index 2 which means 18 and 15 so let me save this file and try running this code now as you can see we are getting 18 and 15 only let's say you want to get all the elements starting from this 18 so this index is 18 right now and there is no end index that you want to specify over here so we simply have to remove this three and then we can simply specify one followed by the colon so this will make python interpreter to consider all the elements after the first element including the first element itself so let me just save this file now and try running this code so as you can see we are getting all the elements that is 18 15 19 and 14 starting from the first index over here so guys this is the way that we can use slicing in the python list also in order to consider all the list elements over here we need not have have to specify any of the indexes if we simply provide the colon over here all the elements will be considered let me just save this file and try running this code now so as you can see all the elements are getting considered but this thing is kind of a redundant over here that's because if we simply provide the variable name that is list still all the elements will be considered so if we run this code once again so all the elements are being considered over here only when you want to consider the subset of this list you have to use the slicing inside the python list now let us move to the the next concept how do we add the elements to a python list so there are two ways to add the elements in the python list the first way is to use the upend function which will help us in order to add a single item in the list and the second way is to use the extend function in order to add another list to the already existing list so let us check this with the help of examples now over here let's say we already have this list of values inside the list variable and now we want to add more elements so what we will do is we will say list followed by Dot and then we have something called as append so this is a function which will take a single element and it will add to the end of this list so let's say I want to provide 25 as the age of another student so let me just save this file now and try running this code so as you can see this element that is 25 it is already added at the end of the list now and in this way we can use the upend function to add more elements inside the list now let's say we have another list over here let's say I provide a list one and the number numbers I provide is 1A 2 comma 3 over here so three elements are there and we want to add all these elements to the original list that is list variable so what we can do is we can use the extend function in this case so we have to use this list variable which is the original list variable followed by Dot and then we have the extend function and inside the parenthesis we have to provide this argument that is list one which is another variable having the list of elements and now if we print this list it will have the updated list of values so let me just save this file and try running this code now so as you can see after this 14 1 2 3 elements are also getting added over here since we have used the extend function in this case let us move to another section can we change the list items so basically the python list are mutable meaning list are changeable and we can change items of a list by assigning new values using equal to operator so what I will do over here is I'll just remove these lines of code so I'll simply provide the or original list over here so we will say original list followed by colon and then we will print the list so let me just save this file and try running this code now we have the original list over here I'll just spell this correctly so we have the original list 17 18 15 19 and then 14 now let's say at the third position that is 15 we want to change this element to 10 now this is being referred to the second index over here so this is zero index then one and then second index so what we have to do is simply we have to provide list followed by inside the square brackets we will provide the index number that is two and then equal to the new value that is 10 that we want to replace it with and then again what we will do is I'll simply copy this line of code and paste this over here and then we will say updated list and let me just save this file now and try running this code so basically as you can see original list it is having 15 at the third position over here that is at the second index and the updated list is having the number 10 stand at the same second index over here and this is the way that we can update the list elements so since python list are mutable we can change the elements of the list as well now removing an element from the list so there are two ways either we can use the D function or else we can use the remove function as well so let's say over here we have the original list now so I'll just remove these lines of code and then we can use the D function and Then followed by list and let's say I want to remove this fourth element that is at the index three which is 19 so I'll just provide list of three in this case and then what I will do is I will print the updated list once again so I'll just change this to updated list so basically we are using the de method over here and deleting the third index inside this list so let me just save this file and try running this code now so as you can see we are getting the updated list as 17 18 15 and 14 this element that is 19 it was removed already now instead of this we can also use the remove method so in that case we have to use the variable name first in the deel method that is the delete method we simply used the function name and provided the element from the list in order to remove from that list but over here we have to provide the variable name followed by Dot and then we can simply use the remove function and Then followed by the position so which position we want to remove so let's say I want to remove this element that is 18 over here so in this case we have to provide the value of the element that is present inside the list so in this case is we provide 18 in the previous example that we have taken using the deel method we used the index number of the element that is present inside the list but in this case we have to use the value in order to remove it so I'll just save this file and try running this code now as you can see 18 was present in the original list but in the updated list we don't have 18 it is 17 15 19 and 14 and in this way we can remove the elements from the list as well now very important operation how do we iterate through a list so basically we can use the for Loop to iterate over the elements of a list so till now what we have seen is we have just used the list that is the variable name in order to print the elements of those list now if you notice we are getting the square brackets over here open and close square brackets within which all the elements are getting printed but let's say we don't want those square brackets and one by one we want to print all the elements at a time so what we can simply do is use the for Loop and we have seen in the previous videos as well the syn of the Fall Loop we have to use the for keyword followed by let's say a temporary variable name that is item followed by the in keyword and then we have to provide the sequence at his list and then after that we have the colon and then we can have the print statement over here now in the print statement if we only provide one item that is item in this case so every time all the elements will be printed on the separate lines over here so let us just try this code so we'll just save this file and try running this code now now as you can see 17 18 15 19 14 all the elements are getting printed on the separate lines what if we want all the elements to be present on the same line so what we can do is after providing comma over here we have the end parameter inside the print function and this end parameter we can have the comma as the character by which we can separate all the elements so by default this is slashing character which means the next element will be printed on the next line but if we specify this in this way all the elements will be printed on the same line so let me just save this file now and try running this code so as you can see all the elements are getting printed on the same line in the same sequence that is present inside this list so in this way we can iterate through all the elements inside the list that are present by using the fall Loop over here now another important thing how do we find the list so we have something called as python list length so in Python we use the Ln function to find the number of elements present in a list so we can have any number number of elements inside the list over here so there is no limit on the number of elements that we are supposed to have inside the python list so in case if we want to find the number of elements inside the list we can simply use the length function so we can simply print this and then we can have Ln which is a function and then we can provide the variable name of the list inside this Ln function over here so it will return us the count of the elements inside the list so let me just save this file and try running this code now and as you can see five that is the count of the number of elements inside the list is present over here if we provide some more elements over here let's say I have provided five more elements inside the list let me just save this file now and try running this code so we are getting the updated count that is 10 so 10 is the number of element set are present inside the list and that is how we can easily find the length of the list in this case by using the Len function over here so Guys these were certain operations as far as list variable is concerned please make sure that you practice on your own and as a homework for you there is something called as a sort function which can help you in order to sort all the elements inside the list so you can practice on your own as a homework for you in order to sort the elements inside the python list and print on your own tle in Python Programming so guys a tle in Python is similar to a list basically the difference between the two is that we cannot change the elements of a tuple once it is assigned whereas we can change the elements of a list so previously in the examples of the list that we have seen we were able to change the elements inside the list but the same thing cannot be done with the elements at are present inside the Tuple so how do we create a tupple a tuple is created by placing all the items that is elements inside the parenthesis so we have this open and close parenthesis whereas in the list we were using open and close square brackets now these are supposed to be separated by commas over here the parenthesis are optional however it is a good practice to use them so a tle can have have any number of items and they may be of different types that is integer float list string Etc so guys let us check this with the help of example now over here as you can see we have my tle which is the name of the variable that we have given and 1 2 3 these are the elements that is present inside the Tuple if you notice we have this open and close parenthesis inside of the square brackets and that is the difference between the list and the tle over here so let us move to the vs code and simply we will provide tupple one as the variable name over here equal to followed by open and close parenthesis and let's say we Define five elements one to five over here so this is nothing but we have defined the tle and we can simply print this Tuple by using the variable name tle one over here so let me just save this file and try running this code now as you can see we are getting all the elements that is 1 2 3 4 5 and in this way we have easily created and printed the tle elements over here now guys an important thing over here let's say you want to create a python tle with only one element so in this case what happens is let's say if you provide where one that is variable one over here and you provide double Cotes that is hello with this open and close parenthesis in this case this will be considered as a string whereas in the variable two what you do is after this hello you provide a comma so in this case it will be considered as a tle so this is very important thing if you want to create a tupple with just a one element you have to use the comma after providing that El element over here let us check this with the help of examples now over here let's say I provide where one in this case and then open and close parenthesis and then let's say we have hello over here and then I'll just copy this line of code and paste this and I'll simply provide comma after this element so what we will do is I'll just name this variable name as where to so let us now confirm the data types of both the variables so we will say print and then inside this we will use the type function in order to find find the data type of where one so we provide where one over here and I'll simply copy and paste this line of code and we provide where to over here so let me just save this file now and try running this code so as you can see first one it is showing us that it is a string and the second thing is showing us that it is a tupple now in case if we simply remove this comma from this tupple so what happens so let me just save this file and try running this code once again as you can see it has become string now both are strings right now if we provide comma over here and comma over here as well so both the variables will be turned to the tupple data type so guys this is very important if you want to have only one element inside the tupple make sure that that element is followed by a comma over here in order to make that data type as a tupple now guys moving to next section how do we access the python tupple elements so there are multiple ways in order to access the elements over here first of all is indexing so this we have already seen previously by using the index number we can access the elements of the tle so let's say we have Tuple one over here and we have five elements 1 2 3 4 five so how do we access these elements by using the indices so we simply have to provide the dou one that is the variable name and Then followed by open and close square brackets this time and let's say we want to print the element that is three over here every time remember guys that the index it starts from zero so this first element that is number one it is is at the index zero and then the second element that is number two it is at the index one and then the third element that is number three it is at the index two over here so we provide the number that is two which is the index number in this case so this will tell the python interpretor to access the element that is at the index number two for this variable that is tle one so over here what will happen is the index number zero is this and then index number one is this and then we have index number two which is three over here and this element should be printed so let me just save this file and try running this code now so as you can see three is getting printed similarly let's say if you want to print this number two which is at the index one in this case so we have to provide one inside this open and close square brackets so let me save this file and try running this code now so two is getting printed this time so guys this is one way in order to access the elements by using the indexing we also have something called as negative indexing so let's say if you don't know the number of elements that are present inside the Tuple whereas there is a way in order to find the length of the Tuple but in case you want to access the last element of this tle over here so you already know that the first element is at the index zero so let me just print that so over here we provide tle one followed by the index number that is zero in this case I'll save this file and try running this code so one is getting printed now let's say you want to print the last element but you don't know at which index it is so we have something called as negative indexing in which case before the zero index the index that is minus one it will point to the last element of this tle that is five over here so when we provide minus one in this case this element that is five should get printed so let me save this file and try running this code now so five is getting printed similarly if you want to get the second last element of this tle you can simply provide minus two over here so when we provide minus two and run this code so four is getting displayed which is the second last element so this is like a cycle over here when you use the negative indexing the last elements of this tle will start getting printed over here and then guys you can also use the slicing functionality as we have already seen with the list so basically let's say if you want to print the subset of this tle between 2 to 4 so what you can do is what is the index of this element that is two it is zero and then one so at the first Index this two is present so we will provide one over here here followed by a colon and then what is the index of the element that we want that is four so the index is it is 0 1 2 and then this index is three but we don't want to specify three because this is excluded so the next index which is four we have to specify that index which will be not included in our slicing operator so when we provide four over here always remember that this index on the left hand side will be considered but this index will not be considered the fourth index will not be consider Ed but before this that is the third index will be considered while printing the statement so let me save this file and try running this code now so as you can see 2 3 and four is getting printed the last index that is four which is having the element five this will not be considered because it is not included in the slicing operator so these are some of the ways that you can use in order to access the python tupple elements over here now python tle methods there are two methods only that is count and index over here what is count so basically in order to get the number of occurrences of a particular element you can use the count method so over here while using the count function we have to use the variable name followed by Dot and then as you can see count and index these are the only two methods the other method such as appending or removing or deleting the elements are not present that's because as I already told you the tupple inside python are not mutable which means we cannot change the elements once they are assigned over here so when we provide count we have to provide one of the elements inside that tle so let's say we want to find the occurrence of the element that is two over here in this case that means how many times this number two is occurring so let me save this file now and try running this code so as you can see the count is one over here that's because only one occurrence of number two is present let's say I provide some more occurrences over here so I provide the number two two times over here so the total count becomes three in this case over here we have two and then two more twos are present so basically the total count is three let me just run this code once again so number of twos that are present over here inside the topple is three and that is what we are getting over here and this is the main functionality of the count function now the another function that is index so if you want to get the index of a particular element you can use the index function so after this dot we have something called as index and then inside the open and close parenthesis we have to provide the element for which we want to find the index so let's say I want to find the index of this element that is number five over here so it is four basically let me just save this file and try running this code and confirm so as you can see four that is the index of this element is getting printed over here so Guys these functions you can use based on your requirements as far as tle is concerned now one very important thing iterating through a tupple in Python so we can use the fall Loop to iterate over the elements of a tle so basically we have seen this in the previous video as well so far we have printed the elements of the tle by using the variable name in this way so let me save this file now and try running this code as you can see all the elements are getting printed but there is a problem over here we are getting this open and close parenthesis also while printing these elements what if we only want to print single element at a time so we can simply use the for Loop and iterate through all the elements over here inside the tble so we use the for keyword followed by let's say the temporary variable as the item and then we have the in keyword and then the name of the variable that is the sequence which is tle one in this case and then we simply have to print this item that is item variable now what will happen is all the items will be printed on separate lines over here because by default the end parameter of this print function is having the slend character so let me just save this file and try running this code now as you can see all the elements are getting printed on the new line what if we want all the elements to be present on the same line separated by comma over here so we simply have to provide comma and then there is something called as end parameter for this print function so we use that and inside the double codes we provide the comma over here which will be kind of a separate for all those Elements which will be printed on the terminal so let me just save this file now and try running this code so as you can see all the elements now are getting printed on the same line and they are separated with a comma if you want a space character after comma that can also be done you provide comma followed by the space character let me just save this file now and try running this code so all the elements are separated with a comma character and then a space character additionally for a better readability so guys this is another way you can use the for Loop in order to iterate through all the elements of the tle now let us understand what are the different advantages of a tuple over list in Python so we generally use tles for heterogeneous that is different data types and list for homogeneous which means similar data types so in a tle you can have the different data types as well so basically the tupple is being used for that purpose only and we cannot change the elements inside the tupple so since tles are immutable which means you cannot change a data inside the Tuple once they are assigned iterating through a tupple is faster than with a list so behind the scenes what is happening is the program already knows that the tupple elements will not be changed and for this reason the tupple is little bit faster compared to the list so there is a slight performance boost over here now tles that contain immutable elements can be used as a key for a dictionary as well with a list this is not possible so inside a dictionary as you must be knowing there are key value PA and the elements of the tle can be considered as keys for the dictionary if you have data that doesn't change implementing it as a tle will guarantee that it remains right protected so nobody can change the elements of a tle if you want some data to be fixed whenever you are implementing the list of elements that should be present in a sequence and that must not be changed so Guys these are certain advantages of a tle over a list in Python Programming string in Python Programming so guys in computer programming a string is a sequence of characters so for example as you can see this hello word it is the string which is the sequence of characters that is h e l o so this is a string containing the sequence of these characters and we call it as a string now we use the single quotes or double quotes to represent a string in Python so basically whenever we are defining a string we use the sequence of characters which are supposed to be enclosed Within These double codes or else we can use the single codes as well so as you can see for example Str Str that is the variable name that we have taken over here followed by the equal to operator we have the string that is programming for beginners which is the name of the YouTube channel which you should definitely subscribe and this is enclosed within the two double codes over here so let us check this with the help of example now we have Str Str it is equal to inside the double codes we can provide our string that is programming for beginners over here and then simply we can print the string by using the print function so we have print followed by open and close parenthesis and then we provide this St Str variable name let me just save this file now and try running this code as you can see programming for beginners is getting printed now now what are the different operations how do we access string characters in Python so let's say if I only want to print this character that is p over here how can we do that so one way in order to do that is by using the indexing which means we can use the index number basically the indexes that we have seen in the list and tle in the previous videos are also applicable over here for Strings as well so this letter that is p can be accessed by using the index number which starts from zero so this is the zeroth index number which defines this P character the next character that is R it is at the first index number and then the next character is at the second index number and so on so we can simply use the variable name and then inside the open and close square brackets we can provide the index number so over here after the variable name inside the open and close square brackets as you can see we provide the index number that is zero which will point to this character that is p over here so let me just save this file and try running this code now as you can see p is getting printed over here now let's say we want this o to be printed so what is the index number for this so the first one is zeroth index and then we have first index over here and then this o is at the second index number so we provide number two that is inside the open and close square brackets let me just save this file now and try running this code so as you can see o is getting printed and in this way if you want to access a single character from the string you can use the index number in order to access them now there is another variation we can also use the negative indexing which means the negative index numbers can also be used in order to access the last elements of the string so let's say if you want to access the last element first element is having the index number zero and the previous index number that is before the number zero we have minus1 in the number system so minus1 will refer to the last element inside this sequence of characters which is s over here so when we provide minus one in this case inside the open and close brackets so let me just save this file and try running this code as you can see s is getting printed so minus1 is pointing to this character that is s what will be the second last character it will be min2 in this case so when we provide minus 2 save this file enter I running this code so as you can see this R is getting printed over here and in this way we have the negative indexing Concept in Python Programming now there is another way we can use the slicing operator in order to print the subset of the sequence of characters so let's say if we only want this programming word to be printed instead of programming for beginners that is the entire string so what we can do is so we have to mention the indices in order to print these characters only so it starts from zero and then we have 1 2 3 4 5 6 7 8 9 10 and then we have to take extra index number that is 11th as well because at last index number is not included whenever we are using the slicing operator so the indexes will will be between 0 to 11 in this case so how do we provide that range we provide zero first that is the left hand side index followed by the colon and then we provide 11 that is the second index up to which all the characters must be taken and printed over here so as you can see this is the slicing of the sequence of characters let me just save this file enter I running this code now as you can see programming is getting printed over here let's say we want to include the characters up to F so we have to provide the index up to O over here so basically this was the 11th index and then we have 12 and then 13 so over here what we can do is we can simply provide 13 in this case so let me just save this file now and try running this code so as you can see programming word is getting considered and then after that we have the space and then f is also considered which is at the 12th index there is another way we can do this instead of providing this zero index we can just remove this so by default it will take from the start of the string that is all the characters starting from the zeroth index over here so let me just save this file and try running this code now so as you can see again we are getting the same output that is programming up to the F character over here what if we want from this o character which is at the 13th position up to the last position so what we can do is we can simply provide the 13th index number which will start the string from this particular character and Then followed by colon and there is no need to provide the last index because we want all the characters to be included so this is the slicing operator for us we have the 13 index number and then colon over here let me just save this file now and try running this code so as you can see after F we are getting o r over here and then we have the space character and then we have the beginners as well so this is the way that we can use the slicing in Python in order to get the substring from the entire string that we have already defined now guys very important python strings are immutable so in Python strings are immutable that means the characters of a string cannot be changed so let's say this first character that is p if we want to change set character so what we will do is we will provide Str Str and Then followed by zero and then instead of this P character let's say I want to provide the character Q over here and then let me just print this string once again so we will simply print the string let me just save this file and try running this code now as you can see we are getting the type error string object does not support item assignment so we cannot change any of the characters over here but there is another way to do this what we can do is simply we can copy this entire string value and paste this over here and then again instead of P we can provide Q over here but this time we have to remove this index number so this is possible because we are providing the reassignment of the string variable so let us check this we'll save this file and try running this code now as you can see we are getting Q over here and all the other characters are same so basically by immutable we mean that we cannot change a particular Single Character inside the string by using the index number for that particular character but in case if you want to reassign the entire string that can be done by using such reassignments operator now guys there is another important functionality in Python multiline strings are allowed so basically we can also create a multiline string in Python so for this we use the triple double codes or triple single codes over here so what we will do is let's say I'll just remove these lines of code and then I'll say Str Str it is equal to three * double codes over here we will use and then I will say this is first line and then on the next line we will say this is another line so this is basically the multiline string that we have defined so how do we print this simply by using the normal way that is print function followed by the name of the string that is St Str variable let me just save this file and try running this code as you can see the format in which we have return the string that is the three double quotes were there over here followed by on the next line we were having this is first line and then this is another line and then we were having another double codes over here so these double codes followed by space characters and then between those space characters this is another line if we don't want these space characters soon after the double codes are being mentioned we have to provide the strings over here so the start of the double codes at the same line we are having this is first line and this is another line and then we have the three double codes on that same line so let me just save this file now and try running this code so basically this is the format so whatever format we follow in this three double codes or three single codes the same format will be followed while printing those lines on the terminal now what are the python string operations basically you can compare two strings with the equal to operator over here as you can see so let's say we have two strings over here string one it is equal to let's say we have John and then string two it is equal to let's say we have the name Peter over here so we have Peter so what we will do simply we will print Str str1 it is equal to Str str2 so this is nothing but we are comparing two strings by using the equal to equal to operator which we have done previously as well while we were using the relational operators in order to compare two numbers we can compare two strings in the same way as well it will either return true or false based on whether they are equal or not so let me just save this file and try running this code now as you can see we are getting false that's because the names are different so what if we make the names same so I'll just copy this value and paste this over here now both the strings are same Str str1 and Str str2 both are having the value that is John so let me just run this code now as we can see we are getting true over here that's because both the strings are same in this case now there is another operation how do we join the two or more strings so we can do so by using the plus operator so let's say we go back over here once again we provide the string to as Peter and we want to join both the strings so in this case instead of equal to equal to what we will do is we will specify the string one that is St str1 and then plus operator and Then followed by Str str2 in this case so let me just save this file now and try running this code as you can see we are getting John Peter over here continuously there is no space character so either we can provide a space character over here or else we can have the space character inside the print function as well so we can have the double codes inside which we can have the space character and then again we have to use the plus operator in order to join these strings so let me just save this file now andent try running this code so as you can see we are getting John Peter and then there is a space character in between so we can join multiple strings as well by using the plus operator over here the same plus operator will be used in order to add two numbers if these variables are numbers but in our case these variables are strings and that is why it is being used in order to join the two strings in this case now how do we iterate through a python string so basically we can iterate through a string by using the fall Loop so let us check this with the help of example now let's say we have string one over here we provide four followed by S which is the temporary variable and then we have the in keyword followed by Str str1 I'll just make this as item so that it is more user friendly in order to understand so basically Str str1 which is having the sequence of characters one character at a time will be assigned to this item variable and the control flow will go inside this fall Loop now inside this we can simply have the item being printed so when we provide item over here inside the print function and when we save this file and try running this code as you can see all the characters that is j o h n these are getting printed on separate lines how do we get them on the same line so what we can do is we can provide the end operator equal to we can simply provide the double codes and we don't have to provide anything over here if we want to separate all the characters with a comma we can provide comma over here as well so let me save this file and try running this code as you can see John is getting printed but all the characters are getting separated using the comma we can simply remove this comma over here I'll save this file and try running this code now as you can see we are getting John over here so since we have provided this end parameter with nothing but simply double codes we are getting all the characters or else when we don't provide this parameter by default the end parameter is having the slend character due to which all the items will be printed on the new lines there is another important thing how do we find the python string length so basically we can use the Len method to find the length of the string so let's say we have programming for beginner string over here so I'll just type programming for beginners and we want to find the length of the string that means how many characters are present inside the string so we can simply use the Len function that is the length function in order to print the count of the characters inside the string so we can have the L and function followed by inside the open and close paresis we have the variable name that is s Str over here so let me save this file and try running this code so it is saying object of type type has no lens so basically we have provided Str Str over here instead we have to provide Str str1 which is the variable name so that was the mistake so let me just save this file now and try running this code as you can see 25 we are getting that is the number of characters that are present inside the string let's say I add some more characters over here I provide one two which means I have added two two more characters inside the string so that should be 27 in this case so when we just save this file now and try running this code we get 27 as the count which is the updated count of number of characters inside the string and that is how this length function will work in order to return you one particular integer which is the count of the number of characters inside the string now guys there is another important thing string membership test so basically this we have already seen we can test if a substring exist within a string or not using using the keyword in so we have already used the fall loop as well and in the membership operator we have used the in keyword in order to find a particular letter is present or not inside the string so that you can take as a homework for you so that you can practice on your own you can find out whether the character X is present inside the string or not and if it is present then you should display true and if it is not present then you should display false comment in the comment section below what is the output of your program while using this membership operator that is in now guys very important thing there is something called as Escape sequences in Python now the escape sequence is used to escape some of the characters present inside a string so what we have done over here is while providing the string we are enclosing it using the double codes but what if the double quotes is a part of this string let's say I want to provide a double quotes over here before beginners so as you can see after providing the double codes we are getting a red underline over here which means there is some issue so what we can do is in order to avoid this issue and to make this as a part of this string we have to use the Escape character which means we have to use a back slash character over here just before the special character so this is the way that we use the Escape character we use the back slash character over here once and then followed by our special character which is causing the issue and in this case this double quote will be the part of the string now so let me save this file and try running this code currently we are getting the length of the string what we will do is I'll just remove this length function so that we can print the value of the string so I'll just save this file and try running this code as you can see programming for and then we are getting the double codes over here which is the part of the string and then we have the beginners over here so this is the way in case you want to escape certain characters or special characters we can use the back slash which is known as the Escape character in Python Programming now guys there is another way in order to print the string by using the python string formatting so as you can see for example let's say we have the name that is John and we have age it is equal to 25 so one way that we can print both that is name and age is by using the multiple objects inside the print statement so let us check this so we have name over here which is John right now and then let's say we have age it is equal to 25 and we want to print both that is name and age within one print function so what we will do is we will say name is followed by comma and then we provide name and then again comma and then we have double codes and then we provide end age is followed by comma and then we have age over here so what we have done is this string will be printed that is name is followed by this name value will be taken from this variable that's because we have provided it outside the double codes over here and after providing this comma and then again there is a comma and then we have a normal string label that is end ages and then we are specifying the age so this is one way in order to print both that is name and age in the same print statement so let me just save this file now and try running this code so as you can see name is John and age is 25 over here but guys this can be confusing since we have to use multiple commas over here as well as multiple double quotes as well so there is another way in order to print the same string so what we can do is again we can have the print function but this time what we will do is in the open and close parenthesis we provide the F character followed by single codes over here so inside the single codes we can provide the variable name that is name and age as well so in this case if we want to get the value of this name variable we have to enclose it within the curly braces so these are the curly braces as you can see we have the open and close curly braces and inside this we provide name over here so if we do it in this way we provide the F character and then inside the single codes inside the curly braces we have the name over here it will print the value that is John so let me just save this file and try running this code as you can see John is getting printed which is the value of this name variable now we want to print the entire string that is we also want the labels so before this name that we have provided we can simply provide the string that is name is and Then followed by open and close braces and inside the braces it will be name variable name and then we can simply provide end age is followed by open and close braces and then we can provide the age variable name so guys this is the format we have the F character and inside the single codes as you can see we have provided the string label that is name is and Then followed by open and close curly braces inside which we provide our variable name and Then followed by end ages or any other string label that you want to Define and then we can have the variable name that is age over here inside the open and close curly Braes so let me just save this file now and try running this code as you can see we have the perfect string that we wanted that his name is John and age is 25 so this is another way we can use the python string formatting by using this F character inside the print function in order to print the string in the way that we want to print so Guys these are certain things as far as strings are concerned in Python programming language sets in Python Programming so guys a set is a collection of a unique data which means that the elements in a set cannot be duplicate elements so over here you can easily create a set in the python basically in Python we create the sets by placing all the elements inside the curly braces separated by comma so guys previously we have seen that for the list we are using the open and close square brackets for the tle we use the open and close parenthesis and over here for sets we are using the open and close curly braces so we will check this with the help of examples as well a set can have any number of items and they may be of different types so as you can see it can be of the integer float tle or string data type or any other data type but a set cannot have mutable elements like list sets or dictionaries as its elements so guys this is very important you cannot have another list set or a dictionary which we are going to see in the upcoming videos over here we cannot have these kinds of data types inside a particular set now let us check the creation of set with the help of example now over here so let's say I provide set one as the variable name and then we provide the equal to symbol followed by the open and close curly braces so inside these braces we have to provide the elements of the set so let's say we have the set of integers we have 1 2 3 4 and then five so guys we have five elements over here 1 to 5 which are the elements of this set and simply we can print all these elements inside the set by using the print function over here and then we can say set elements are and then colon and then we can have set one that is the variable name so guys let me just save this file and try running this code now so as you can see we are getting set elements are we are getting all the elements that is 1 2 3 4 5 and guys this is the way that we can create a set in the Python Programming now guys it is very important that we cannot have the duplicate items in this set so let's say I provide some more numbers over here which are already present in this set so let's say two and three are already present I provide the 2 and three once again so when we do this so right now we have seven number of elements but let me just save this file now and try running this code to see how many elements get printed so as you can see only five elements are getting printed so those two elements that is two and three will not be considered once again while printing them because we cannot have duplicate elements we can only have the unique elements inside the set and guys this is the main functionality of having the set data structure in Python Programming So based on your requirements if if you don't want the duplicate elements to be present you can use the set data structure in the Python programming language now guys how do we create an empty set in the python so basically creating an empty set is a bit tricky so empty curly braces if we use then it will make a empty dictionary in Python so basically when we create a dictionary we again use the curly braces so let us check this with the help of example now over here what happens if we create the empty set so let's say we provide set one it is equal to open open and close curly braces as you can see we have not provided any element and this is the empty set but let me just print the type of this variable over here so we will simply use the type function and then provide the set one as the variable name so guys what will be the type of this set one variable so let me just save this file now and try running this code as you can see it is saying that class it is a dictionary data type so this set one variable is of the data type dictionary by default when we provide the open open and close curly braces how do we make it as a empty set data type so what we have to do is instead of using the open and close curly braces we have to use the set function so there is something called a set function over here as you can see vs code is suggesting us so this set function followed by the open and close parenthesis will help us to create a new empty set over here so let me just save this file now and try running this code over here what we are trying to do is again we are trying to print the type of this set one but this time it should be of the set data type so let me just run this code now so as you can see we are getting the set data type over here previously we were getting the dictionary so in order to have the empty set in Python Programming we can use the set function over here now very important question how do we add the set items in Python so basically sets are mutable which means we can add and remove items from the set however since they are unordered indexing has no meaning so guys basically Al if you must have noticed there is no one order in which the set items were printed previously so let us check this once again over here we provide set 1 it is equal to and let's say we provide some elements that is 3 2 4 1 5 and then let me just print this set one over here so we provide set one inside the print function let me just run this code as you can see we are getting 1 2 3 4 5 this is not of the same order in which we have provided these elements inside the set so we cannot use index numbers over here as well in order to access these elements one at a time since the way in which the elements inside the set are printed are not in a particular order now guys how do we add new elements to this set so basically we cannot access or change an element of a set using the indexing or slicing but we can use the add method to add an item to a set so let us say I want to add another element over here so basically what we will do is we will say initial set and then colon and then we provide set one and then let's say we provide set one dot we have something called as ADD over here as you can see this is a function that we can use in order to add elements inside the set so let's say we provide 10 as the number to be added to this particular set that is set one and then again we want to print that set one so I'll just copy this and paste this over here and then we have updated set over here so we have updated set and then set one being printed so let me just save this file and try running this code now so as you can see initial set it is 1 2 3 4 5 and then after adding this element we are getting the updated set as 1 2 3 4 5 and then the last element that is 10 over here which is being added by using the add method and this is the way that we can add the elements inside the set remember that the order in which they are added will not be followed while printing them so you cannot rely on the order in which the set elements will be printed on Console now guys another important thing how do we remove an element from the set so we can use the discard method to remove the specified element from a set so let us say after adding this we want to remove the element that is three from this set so what we can do is we can provide set one and then followed by Dot and then we can have discard method in order to remove the element we need to provide the element which needs to to be removed so over here we provide the number three which will be removed from the set one and then again let me just copy this line of code and paste this over here so that we can print the updated set after removing so over here we say updated set after removing three and then let me just save this file and try running this code now so as you can see we are getting 1 2 4 5 and then 10 so the element three is being removed after using the discard method over here and guys this is the way that we can remove the elements from the set now guys there is another way in order to access the elements inside the set we can iterate over a set in Python by using the fall Loop so this can be easily done by using the fall Loop over here so what I will do is I'll just clear these lines of code and then we will say for and then item in set one so this is the syntax that we use while using the fall Loop and then we can have the print statement over here guys notice that till now we were printing the elements of the set by using the set one variable and that is why we were getting the starting and the ending open and close curly braces over here but this time let's say we don't want those but we want only those numbers that is the elements inside the set to be printed so we can easily use the fall Loop and iterate through each and every item inside the set and this is the way that we can do so we provide the print statement over here and inside the item variable one at a time all the elements will be printed over here so let me just save this file now and try running this code so as you can see we are getting 1 2 3 4 5 now all these numbers are on a different line what we can do is we can use the end parameter of the print function so over here we provide the end parameter and then we simply provide the space character so that all the items are separated by the space characters over here so let me just save this file now and try running this code so as you can see we are getting 1 2 3 4 5 five which are the elements of this set if you want all these numbers to be separated by commas what we can do is inside of the space character we can provide the comma and let me just save this file and try running this code once again as you can see we are getting 1 2 3 4 5 and all the elements are being separated using the comma character now guys how do we find the number of set elements so we can use the Len method that is the length method to find the number of elements that is present inside the set so what we can do is simply we can provide the print statement over here and we can simply say that length of set is and then colum and then we can simply use the alen method and then inside this method we can provide the set one that is the variable name so let me just save this file now and try running this code so as we can see length of set is five so basically since five elements are present over here we are getting the length as five what if we provide some more elements let's say I provide 6 7 and and let's say I provide some more duplicate elements over here that is 1 2 and then three so over here there are total 10 elements out of which three elements are duplicate so what is the exact length of the set so let me just save this file now and try running this code so as you can see length of set is seven so even though we are having 10 items inside the set but out of those 10 items three items are duplicate items so those duplicate items will not be considered it will be considered only once and that is why we are getting the length of this set as 7even now guys very important thing about the set operations we can carry out different set operations in Python Programming one is Union of two sets which can be done by using the union method or this or symbol over here we can also have the set intersection which can be implemented by using the intersection method and then we also have the difference between the two sets which means we can use the difference method or the minus symbol over here so guys let us check all these operations one at at a time so over here what we will do is we will have two sets over here we will say set one it is equal to 1 2 and then three and then let's say we have set two it is equal to 3 4 and then 5 now guys let's say we want to find the Union first so what we will do is we will say Union and then we will simply say set one followed by Dot and then we have the union method followed by the parameter needs to be set to over here because that is the another set that we want to find the union of similarly we will do the intersection and difference as well so I'll just copy and paste these lines of code over here we will say intersection in this case and then we will simply change the union method to intersection over here and then over here we will say difference so difference and then instead of this Union we will say difference so guys basically what we are doing over here is these are all the set operations the union will find all the elements that are present in set one and set two and all the elements will be unique in the intersection part we will get all the elements that are common in both the sets which means three in this case and then in the difference we will find all the elements that are present in set one but not present in set two so guys let me just save this file now and try running this code to see what will be the results of all these operations so as you can see the union is giving us 1 2 3 4 5 which means all the elements that are present in set one and set 2 so we are having 1 2 3 in set 1 and then in set two the three is already printed and then it is printing four and five as well in intersection we are getting only three that's because the element three is the only element which is common in both the sets for the difference operation we are getting only one and two that's because these are the only two elements which are present in set one but not present in set two so Guys these are certain set operations that can be implemented with Python Programming apart from this there are multiple builtin methods that you can use as far as sets are concerned so when we provide the variable name that is set one followed by dot as you can see these are all the methods that can be used based on your requirements dictionary in Python Programming so guys the python dictionary is an ordered collection of items it stores elements in the form of key value pairs so basically on the left hand side we have a key and on the right hand side we have the value and such key value pairs are known as dictionary in Python Programming now guys the keys are unique identifiers that are associated with each value so basically we cannot have duplicate keys in a dictionary whereas we can have the duplicate values in the dictionary so as you can see for example over here on left hand side we are having the keys on right hand side we are having the values so Nepal Italy and England these are certain Keys over here and they are capital that is katman to Rome and then London these are the values on the right hand side so how do we create a dictionary in Python we can have any variable name in this case and after the equal to symbol inside the open and close curly braces we are having the key value pairs so since this is a string we are enclosing it within the double Cotes over here and then after the key that is Nepal we are providing a colon in this case followed by the value which is again inside the double codes and then separated by commas we have more key value pairs over here so guys this is the way that we can create the dictionary so guys let us check this with the help of examples now over here so let us say we have dict1 that is the variable name followed by equal to and then let's say we provide the same data over here so I'll just copy and paste this line so we have copied the same key value pairs over here now simply we can print this key value pairs by using the print function and Then followed by dict1 which is the variable name so let me just save this file and try running this code now as you can see we are getting all the key value pads over here being printed on the console so guys this is the way that we can create the dictionary along with the key value P that we want to store inside the dictionary now how do we add elements to a python dictionary so we can add the elements to a dictionary using the name of the dictionary with open and close square brackets so guys over here what we will do is we will say initial dictionary so this table we have added so that we can identify that this is the initial dictionary now what we will do is we will add one more key value pair inside the same dictionary so what we have to do is we have to use this variable name that is dict1 followed by open and close square brackets and inside this we have to provide the key so let's say the key over here we provide India as the key and then the capital of India it is Delhi so over here the value that we have to provide is Delhi in this case so what we have done is we have provided the variable name and Then followed by the open and close square brackets and inside those brackets we have to provide the key in this case it is a string and then we have equal to followed by the value for this key which is again another string and then guys what we will do is let's say we want to print this entire dictionary once again so we will print this and over here we will say updated dictionary and then again dict1 so let me just save this file and try running this code now so as you can see we have the updated dictionary as we have Nepal Italy England and then the last element that we have added just now is the key that is India and Delhi that is the capital of India as the value so guys this is the way that we can add elements inside the dictionary in the form of key value pairs now guys how do we change the value of a dictionary so we can again use the open and close square brackets in order to change the value associated with a particular key so guys let us check this with the help of example now so over here what we will do is let's say we have added this key value pair that is for India we have the capital that is Delhi but now let us say instead of having the capital as the value we can provide any city as the value for this country so what we can do is again we can provide the variable name that is dict1 and then for this key that is India we want to update the value so let's say this time the value that we provide is Mumbai which is a very popular city in India so we provide Mumbai over here and then again we are printing this dictionary once again so let me just save this file now and try running this code so as you can see the updated dictionary first time it is showing India that is Delhi and then the second time that is updated dictionary it is showing India and this time the value it is Mumbai in this case so guys this is the way the same way is used in order to add the key value pair and in order to update the key value pair as well we have to make sure that whatever key we want want to update it is case sensitive if let's say I provide the small I over here so in this case it will add a key value pair since this India is not matching with this India that's because over here we are having the capital I and over here we are having the small I so let me save this file now and try running this code this time we are getting the five key value pairs in this case so India Delhi and then we have the small I and then Mumbai so guys make sure that whenever you are updating the key value pairs the key of the dictionary must exactly match with the existing keys that are present in the dictionary now guys how do we access the elements from the dictionary so in Python we use the keys to access their corresponding values so let us check this with the help of examples now over here so let's say we have these three key value pairs as the original dictionary now we only want to print the value of this particular key that is Nepal over here so what we will do is we will simply have the print statement and then we will say dict1 that is the variable name followed Follow by open and close square brackets and we simply provide this key that is Nepal over here so inside the double codes we provide Nepal over here so let me just save this file and try running this code now so as you can see we are getting the value of this key that is Nepal similarly if we provide Italy as the key so I'll just replace Nepal by Italy over here so as you can see we are getting the value as Rome because the value for this key that is Italy is Rome over here so in this way we can easily access the values of the keys that we want to print now guys how do we remove the elements from the dictionary so we use the D statement to remove an element from the dictionary so what we will do is let's say I want to print the original dictionary over here so we will say original dictionary and then colon and then we say dict1 now guys what we will do is let's say I want to delete this key value pair that is Nepal and Katmandu so we will use delete and Then followed by dict1 and then open and close square brackets and inside this we have the double codes and we simply provide the key over here that is Nepal so this statement will help us in order to delete this particular key that is Nepal and Katmandu over here so let me just print this dictionary once again so over here we have updated dictionary and then let me just save this file now and try running this code so as you can see original dictionary we are getting all the three key value pairs that is Nepal Italy and England over here along with their values but the updated dictionary it is giving us only two key value pairs that is Italy that is Rome and for England we are getting London so over here this key value pair that is for Nepal we are having the Katmandu value this was removed because of this particular statement that we have used in order to remove the Nepal key and its value as well now guys as far as dictionary membership test is concerned we can test if a key is in a dictionary or not using the keyword in so in keyword is used in order to check the membership test so note that the membership test is only for the keys and not for the values so guys let's say over here I'll just remove these lines of code so for this original dictionary we want to find whether the key Italy is present inside the dictionary or not so we will say print and then we can simply say Italy and then we use the in keyword followed by dict1 so guys what exactly we are doing is we are checking whether this string it is present in dict1 or not so let me just save this file and try running this code so as you can see it is showing us true over here that's because the key Italy is present inside the dictionary but the same thing is not applicable when we provide one of the values inside the dictionary so let's say we provide Rome as the value over here so Rome in dict1 so let me just save this file and try running this code so as you can see it is showing us false that's because Rome is the value and it is not one of the keys that are present inside the dictionary so guys we can also use the in keyword in order to check whether a particular key is present inside the dictionary and it is only applicable for the list of keys over here now guys we can also iterate through the dictionary by using the fall Loop over here so what we can do is simply we can use the for Loop in order to print all the key value pairs so over here we have the for keyword for Follow by let's say we provide the key variable name and then we provide the in keyword and Then followed by the variable name that is dict1 and then colon so what we will do is we will simply have the print statement and then let's say we want to print the key value pairs in the particular format so we will say key in this case and Then followed by comma and then let's say we provide Arrow over here and then after this we provide the value so how do we access the value Val we provide the dict1 that is the variable name and then inside the open and close square brackets we provide the key in this case so guys basically what is happening over here is all the keys that are present inside this variable one at a time it will be assigned to this key and this key we are printing on the left hand side and then we are having the hyphen and the arrow symbol and then using this key variable we are getting the value from this dictionary in this case so guys let me just save this file now and try run running this code so as you can see we are getting Nepal so Katmandu is the value then for the key Italy we are getting Rome as the value and for England we are getting the London as the value so guys this is the way that we can use the fall Loop in order to iterate through all the key value P inside the dictionary file reading in Python Programming so guys a file is a container in computer storage devices used for storing data so when we want to read from a file we need to open it first first when we are done it needs to be closed so that the resources that are tied with the file are freed so guys we are going to check this with the help of example how we can open the file in order to read the content of the file and then after that we can close the file as well so basically in Python a file operation takes place in the following order first of all we have to open the file then the next thing is we read the file content and then after reading the file content we close the file so basically the first operation that is open opening the file we can use the open method to open a file so as you can see for example over here we are providing the variable name on the left hand side and then on the right hand side we have the open function and then we have the path of the file where the file is stored and then by default it is opened in the read mode we can also use the second parameter and provide the character that is R for reading the file and in order to write into the file we use W as the character over here in this cas case and then guys after this we can read the file in Python by using the read method so basically this variable that we had used on the left hand side we can use the same variable over here in order to call the function that is read and this will help us in order to read the content into the variable that is read content and then in order to close the file we can simply use the close method so guys let us check all this with the help of example now over here so let's say we have the variable name that is file one and then followed y equal to and then we use the function name that is open in order to open the file and then inside the open and close parentheses we are going to have the path of the file that we want to open so guys over here I have the test file for which I have return some content over here so we have these four lines inside the test file so what we can do is so guys we have to copy the entire path of this directory this is very important in whichever directory your file is you have to copy the entire path of that directory Dory and paste this into your code so that your code can access that directory and the file that you want to read so basically over here inside the double codes we have to provide the directory path and Then followed by the name of the file that we want to read so over here I'll just copy the name of the file that is the test file and paste this over here followed by txt now guys it is very important that while you're copying the directory path you will be getting this back slashes over here so you have to provide another back slash since this one back slash is acting as the Escape character so you have to provide two back slashes over here every time that you are providing the directory path so I'll just provide extra back slashes over here at every instance in this directory path so guys this is our entire path over here followed by the test file that is the file name and then the extension that is txt now guys the second step is to read this file so the first step is completed that we have opened the file now the next step is to read the content so we will say read uncore content as the variable name followed by equal to we use this file one variable that we have used in order to open the file followed by Dot and then we have the read method so this method will help us in order to read the content into this read content variable and then guys simply we can print the read content variable so over here we can say read content so let me just save this file now and by running this code so as you can see we are getting all the four lines that are present inside the test file so if I open the test file over here once again it says this is a test line in a test file so the same line is printed over here on the console this is a test line in a test file similarly we have the other three lines it is this is another test line then we have this is third line and then this is fourth line in test file so all those lines that are present inside the test file are being printed over here on the console so guys this is one of the easiest way that you can open the file in a particular directory read the content by using the read function and then you can print the content of the file by using the print function now guys after these operations are completed what you have to do is you have to close the file which is very important so as you can see when we are done with performing operations on the file we need to properly close the file now closing a file will free up the resources that were tied with the file it is done using the close method in Python so basically after printing the content what we can do is simply we can provide file one followed by Dot and then we can have the close method being called so let me just save this file now and before running this code we will have another print function over here and we will print the statement that is file is closed in order to confirm that the control flow has reached the final statement over here in our code so let me just save this file now and try running this code code so as you can see all the four lines are being printed over here from the file once again and then we are also getting file is closed being printed over here and in this way we have already closed the file by using the close function as well so guys this is the way you can read the content of the file just by using these four lines of code we can easily read the entire content of any of the file that we want to read based on our requirements file writing in Python Programming so guys in Python a file operation takes place in the following order so basically first of all we have to open the file then secondly we can write into the file that we have opened and the last step is to close the file so these are the operations in this order in which we have to follow while writing the content into the file now there are two things we need to remember while writing to a file so first of all if we try to open a file that doesn't exist so a new file will be created in this case so guys we are going to check this with the help of example as well and in the second case if a file already exist then its content is erased and new content is added to the file again so Guys these are the two important things that you should know while writing into the file if the file is not already present then a new file will be created and if the file is already present then the existing content will be removed and the new content will be added into the file so guys the first operation is opening the file over here in which case we can use the open me method to open the file and this is the example we have the variable on the left hand side and then we have the open method followed by the name of the file over here along with the entire path if it is present in some other directory and Then followed by the second parameter that is W which stands for the right mode so guys let us check this with the help of example now over here so what we will do is we will say file one which is the variable name followed by equal to and then we have the open method in this case so we have have to provide the name of the file along with the directory path inside the parenthesis and the double codes over here so what we will do is we are going to use this directory over here in order to create a new file and write the content into the file so guys over here there are only two files that is Python tutorial and test file we are going to create a third file that is output.txt in which we are going to write the content by using the code over here so basically I'm going to paste the entire directory path and in order to avoid any errors I'll just use the double back slashes over here since these are the Escape characters so we provide the double back slashes and then at the end we have to provide the name of the file so I'll simply provide output.txt in this case and then guys the second parameter needs to be the writing mode so over here inside the double quotes we can say w which means we are opening the file in the right mode in this case now guys we have completed the first step now what is the next step right writing into the file so basically writing in a file in a python so after we open a file we use the write method to write the content in the file and this is the way as you can see in this example we have the variable name that is file one followed by Dot and then we have the right method and then the content that we want to write into the file so guys basically what we will do is on the second line over here we will say file one followed by Dot and then we have the right method this write method can be used in order to write the content into the file and it takes certain parameters the parameters will be the string or the integer numbers that you want to print or store inside the file so guys let's say I want to provide this is first line in output file so guys this is the content that we want to write into the file and this is the way that we can use the write function in order to write the content into the file and it takes the parameter as the string which we want to store inside the file now after writing what we have to do is we have to close the file so when we are done with performing operations on the file we need to properly close the file closing a file will free up the resources that were tied with the file it is done using the close method in Python so as you can see in this example we have file 1. close so over here we can simply provide file 1 do close in this case and then open and close parenthesis it doesn't take any parameters over here so guys let me just save this file now before running this code I'll show you the directory once again we have only two files over here that is Python tutorial and test file we are going to have a third file over here that is the output.txt that will be created after execution of this code so before running this code what I will do is I'll have the print statement so that we get the confirmation that the code is executed so we will say file created successfully so this is the statement that will be printed after all the lines of code are executed so guys let me just save this file now and try running this code so as you can see we are getting file created successfully and if we go inside the directory now as you can see we are getting the third file over here that is the output in this case so if we open this file as you can see this is first line in output file and this is what we have printed by using our program this is first line in output file the same statement is being printed over here it is being stored in our output file and guys this is the way that we have created a new file by using the python code in a particular directory that we wanted and also return the content into the file by using the two methods that is first of all we have used the open function in order to open the file in the right mode and then we have used the right function in order to write the content into the file now guys let us say we have another scenar scario in the same file we want to update the first line to this is first line and I'll just remove this in output file content over here so we have the short message that is this is first line and then what I will do is we have another statement so again we will have the file 1. write and then we can say this is second line in this case so guys we are having the two lines over here now and this will act as a kind of update now that's because we already have this output. TX file in this directory and now what we are doing is simply we are opening it once again and these lines will be stored in the file and guys remember that while you are opening the existing file what we already saw is the content is erased and the new content is added to the file so basically these two lines will be printed inside the output.txt file and now what we will do is for this print function we will say file updated successfully so guys let me just save this file now before running this code I'll show you that file once again over here we have the output file I'll just open this file we are having this is first line in a output file so let me just close this now and what we will do is we will run this code so as you can see file updated successfully we are getting this message we'll go to the directory to check what is the content so as you can see both the statements are getting printed over here this is first line and Then followed by this is second line now guys what happened is both the lines have continued on the same line but we can have them on the separate lines as well so what we can do is in our code we can simply provide the slashing character at the end of the first line over here so that the control flow goes to the next line while printing this statement that is this is second line so guys let me just save this file and try running this code now once again so it says file updated successfully we come back over here in the directory we open the output file now as you can see this is first line and then we have on the other line This is second line over here so guys in this way we can easily write the content in the file we can also have the multiple lines of content being stored in the file that we opened by using the Python programming language guys this concept of reading and writing the files are very important as far as your project requirements are concerned so please make sure that you practice on your own so that on different inputs you get different output apart from this can we use the with open syntax in order to write a file so you can try this as a homework for you you can watch my previous video as well in which I have explained you how we can use the with open syntax in order to read the file and in which case we don't have to close the file that's because it is automatically handled by this with open Syntax for us so please treat this as a homework for you and comment in the comment section below whether you were able to use the with open syntax in order to write into the file exceptions in Python Programming so guys an exception is an unexpected event that occurs during the program program execution so let's say for example if we have this divide by zero variable and then we do the assignment in such a way that we divide this number that is five by 0er then we get divide by 0 exception that's because this is a runtime exception and we cannot divide any number by zero so the above code causes an exception as it is not possible to divide a number by zero errors that occur at runtime after passing the syntax test are called exceptions or logical errors so guys basically there will be many exceptions that you will come across when you are going to write python programs and these exceptions are going to be the runtime exceptions after passing the syntax test that we have already seen in our vs code editor so basically these exceptions occur when we try to open a file for reading that does not exist that is file not found error so basically this is one of the exceptions in the Python programming language in which case if let's say you are trying to open a file which is not present in the directory then we will have file not found error over here then if we try to divide a number by zero then we will get zero division error and then again if we try to import a module that does not exist then we are going to get the import error and so on so basically there are many builtin exceptions that we can see by using this print statement inside the directory we have this locals and then we specify this builtins in order to get the list of exceptions that is already built in in the Python programming language so this we are going to check with the help of example as well what we are going to do is we are going to see how the exception occurs in the Python program so over here let's say we have the variable that is number over here and we have the number that is 5 ided 0 so in this case we are dividing a number by zero syntactically this is correct over here vs code will not throw any error but during the run time we will get the error which we call it as the exception so over here when we print this number so we say value of number is followed by colon and then let's say we provide this number variable so let me just save this file now and try running this code so as you can see we are getting this zero division error division by zero which is not possible we cannot divide any number by zero now let me show you another exception let's say we are going to open a file in this particular directory and the file name is test one which doesn't occur inside this directory so let me just copy this directory path and we will open that file which is test one which is not present so over here we provide the variable name as file one it is equal to we say open and then with this we have the parameter that is the directory path we have just copied over here we will just Escape these back slash characters so that we don't get any error over here for the back slashes and then at the end what we are going to do is after this we are going to provide test 1 Dot txt now this file name as I have showed you over here it is not present test one is not present over here so we are trying to open that by using this test 1.txt file name so now what we will do is simply we will save this file and TR running this code now so as you can see file not found error is being displayed no such file or directory and then this file name is being mentioned over here what if we provide the correct file name let's say I provide this test file as the name of the file so I'll just copy this file name and paste this over here at the end instead of test one so I'll just paste this over here and then let me just save this file now and I running this code so now as you can see nothing happens we are not printing anything but there is no exception that is being printed over here on the terminal that's because this particular file name is actually present and hence there is no file not found error that is being displayed over here like how we have seen previously with the test1.txt file so Guys these are certain exceptions that might occur when you are going to work with the python projects and such exceptions are inevitable we cannot avoid them but we can handle them so we are going to see exception handling in the upcoming videos as well how we are going to handle them but it is very important for you to know that these exceptions might occur when you're going to work with the Python programming language now guys let us see the list of all the builtin exceptions that are present inside the Python programming language so I'll just copy this line of code and then we'll paste this over here so as you can see this is a print statement and inside this we have the DI function and inside that we also have the locals function and then we provide the builtins attribute over here so let me just save this file now and try running this code as you can see we have got the list of all the exceptions that are present inside the Python programming language so there are multiple errors that might occur which includes arithmetic error then we have assertion error attribute error base exception so there are many errors that you can see over here file not found error this is one of the exceptions that we have just checked and then we also have this zero division error which we just saw when we divide any number by zero so guys there are multiple exceptions that might occur which are already built in inside the Python programming language and you can practice on your own to see which exception occurs on which particular input exception handling with try accept block so guys basically it is important to handle exceptions that we have already seen in Python we use the try accept Block in order to handle the exception and this is the syntax in order to handle the exceptions in Python so basically first of all we have the try keyword followed by the colon and then we have the code that may cause the exception for example we can have a number being divided by zero in which case Zero division error might occur which is the exception and not only the zero division exception but if any exception that occurs inside this Tri block we can have the accept block just following this Tri Block in in order to catch that exception so basically inside this accept block we have the code in order to run when the exception occurs so guys this we are going to check with the help of examples now so over here in the vs code what we will do is let's say we want to divide a number by zero so we want to provide that code inside the tri block so we have this try keyword followed by the colon and then over here what we will do is we will say number variable it is equal to 10 / 0 so guys if we try to run this code over here 10 / 0 for which the zero division error will occur which is one of the exceptions in the Python Programming so what we have to do is we have to catch that exception inside the accept blog so over here what we have to do is we have to provide the accept keyword followed by the colon and then we can have the code in order to handle that exception so over here we can simply provide the print statement and then we can say number cannot be divided by zero over here so guys this is the code that we are going to execute if the number is getting divided by zero and the zero division error is occurring so let me just save this file now and try running this code so as you can see number cannot be divided 0o this line of statement is getting executed over here and this is the line that is getting printed now guys what would have happened if we don't have this try and accept block so let us just comment out these blocks over here so instead of this we are just having number it is equal to 10 / 0 and then let me just comment out this line as well so number is equal to 10 ided 0 only this line of code is there let me just save this file and try running this code as you can see we are getting zero division error division by zero and this is the exception that we are getting on the terminal so over here since we have not properly handled this exception this is the way that we are getting the output but we can have the proper output in this way like we can have a particular statement being printed by using this try and accept block so over here we have just provided the try block and after this we have provided the accept block as well we have provided a beautiful statement that is a user friendly statement which says number cannot be divided by zero and when we just save this file and try running this code now it says number cannot be divided by zero if the exception is occurring over here inside the tri block now guys let's say there is no exception occurring inside the tri block so still the print statement will be executed let us check that so over here instead of 10 / 0 we will say 10 / 2 in which case the answer will be five and that will be stored in this number variable and there is no exception that is occurring over here on this line of code so let me just save this file now what we will do is as a confirmation we will come out of this try and accept blocks and over here we will say end of code so we can just confirm that this is the line that is getting exec executed at the end of the code so over here let me just save this file enter I running this code now as you can see end of code is getting displayed now that is because there is no zero division error that is occurring inside the tri block that is because we have changed the expression from 10 / 0 to 10 / 2 now guys there is another thing that you can do catching the specific exceptions in Python so as you can see this is the example over here we have the tri block and then let's say we have the variable name as even numbers and this is the python list as you can see we have 2 4 6 8 which is the list of numbers all are even numbers and what we are trying to do is we are going to print the even numbers with the index five over here but guys as you can see this is the index zero then we have index one then we have index two and then three so three is the final index the total length of the list is four and three is the final index that we can access but we are trying to access the index that is five so basically we should get the index out of bound error over here but we can also specify the different exceptions that we have seen so far so basically while providing the accept keyword we can provide the zero division error over here which will say denominator cannot be zero and then we also have the accept keyword followed by the index error so in this case since we are having the multiple accept logs it depends on the control flow the control flow will check that which type of exception is occurring and based on that exception it will try to match that exception is this exception related to zero division error no in this case so is it matching with the index error yes since it is related to the index that we are trying to access which is not possible so it will print this statement that is index out of bound so let us check this block of code over here I'll just copy this and paste this in the VSS code since I'm little bit lazy in order to type all this code once again so over here let me just save this file and running this code now as you can see it says index out of bound that's because the exception that is matching inside this Tri block is the index error and this is the print statement that we are supposed to print if there is an index error that is occurring now guys let's say you want to print this denominator cannot be zero statement so what we have to do is we have to make sure that inside the tri block there is a divide by0 expression so what we will do is over here I'll just remove these lines of code and we will simply say number it is equal to 10 / 0 so in this case divide by 0o expression is occuring and that is why we will get the zero division error and in this case we should get this statement that is denominator cannot be zero so let me just save this file now and try running this code as you can see denominator cannot be zero statement is getting printed so guys it depends on you you can have the specific exceptions being specified over here and each exception will be handled differently this is just a print statement that we have included over here you can have any code inside these accept blocks that you want to use based on your requirements of the project but guys remember that whatever matching exceptions that is occurring inside the tri block the control flow will try to match with those exceptions one at a time and once it matches with a particular except block it will try to execute those lines of code inside that block now guys let us move to another task over here python try with lse claw so basically in some situations we might want to run a certain block of code if the code block inside try runs without any errors so for these cases you can use the optional else keyword with the try statement so guys what happens is sometimes there will be no errors that are occurring over here I'll just remove these lines of code so I'll just keep one accept block over here and I'll just remove this exception as well that is zero division error so what we are doing over here is denominator cannot be zero I'll just save this file and try running this code so this denominator cannot be zero is getting printed over here but guys what if this denominator is not zero let's say if I provide the denominator as two so in this case this statement will not get printed that's because there is no exception that is occurring and if there is no exception occurring no code in the accept block over here will get executed but what if we want to execute some line of code so over here we can simply provide the else part so basically what happens is let's say inside the tri block if we don't have any exception that is occurring so no block of code that is is inside the accept block will get executed but let's say in the end if we have this else block so whatever code we provide over here it will get executed only when there is no exception that is occurring over here inside the tri block so over here what we will do is we will say print we will simply say inside else block so guys this is the code let me just save this file now and try running this code as you can see there is no denominator cannot be zero that is getting printed but over here we are getting inside else block that's because since there is no exception that is occurring the control flow is not going inside the except block but it sees that we have the else block over here so it executes those lines of code inside the else block now guys what if there is an exception that is occurring so let's say if we provide this as 10 / 0 as the expression so let me just save this file now this line should get printed over here but whether this lse part will get executed let us check that so let me just run this code once again as you can see denominator cannot be zero is getting printed but the code in the lse part is not getting printed so that's because since the exception has occurred we are getting into the accept block but not into the else block so guys this is very important in case the accept block is not getting executed we can have the else Block in order to execute some lines of code that you want to execute let us move to another task over here we have something called as python try finally so guys this is another important concept as far as exception handling in Python is concerned so basically in Python the finally block is always executed no matter whether there is an exception or not so the finally block is optional and for each Tri block there can be only one finally block so guys what we will do is basically the understanding behind the finally block is irrespective of whether there is an exception that is occurring or not the code in the finally block will be executed so over here we will simply have the finally keyword followed by the code Lear and then we will say inside finally blog so over here we will simply have double codes and inside this we will say inside finally block so guys first of all we will check when there is an exception that is occurring this line of code will get printed and we will not go inside the lse part but the control flow will go inside this finally block over here so let me just save this file now and try running this code so as you can see denominator cannot be zero which is this line of statement which is getting printed and then it is not going in the else part but it is going in the finally part so it says inside finally block so over here exception has occurred and the control flow is going in the finally block now let us say there is no exception that is occurring we say 10 / 5 over here so let me just save this file now and try running this code it says inside lse block so basically there is no exception that is occurring so the control flow is not going inside this accept block but it is going inside the else blocks over here as I have told you if the control flow doesn't go inside the accept block and if there is a else block basically this line of code will get executed and then at the end we have the finally block which is getting executed as you can see inside finally block so irrespective whether there is an exception that is occurring or not inside the tri block the finally block will be executed every time now guys where this thing is important basically let's say if you have the database connection or if you have file open so you can close that file or close that database connection inside the finally block over here after carrying out your operations in the tri block which might have certain exceptions that might occur during the run time so guys during such instances the finally block becomes very important in order to execute those lines of code irrespective whether there was an exception that has occurred inside the tri block or not object oriented programming in Python so guys we are going to check the classes and objects with the help of examples python is a versatile programming language that supports various programming Styles including objectoriented programming through the use of objects and classes which we are going to see with the help of examples as well now an object is any entity that has attributes and behaviors so for example a parrot is an object and it has multiple attributes as you can see there are multiple attributes that can be present which is name then we have age color and so on apart from that it also has certain Behavior such as whether it can dance or not so dancing is one of the behavior whether it can sing or not so singing is another Behavior now I'm not sure whether a parrot can really dance or not but these are certain behaviors that we can consider in order to understand classes and objects now guys similarly a class is a blueprint for that object so basically these objects are having the attributes and behaviors and the values will be stored in these objects but the blueprint will be present inside the class so basically this class can be treated as a template which has certain attributes and behaviors being defined over here and we can create multiple objects related to that class so we are going to check with the help of example how do we create a class parrot with the attributes as name and age so let us move to the vs code over here the very first thing that we have to create is the class so basically we have to provide the class keyword followed by the name of the class so let's say the parot is the name of the class over here and then we have a colon and then we can have different attributes so one of the attributes is name over here we will assign it with a empty string and then we have age as well we will assign it as zero over here as the initial value now Guys these are the two attributes that we have defined for this class that is pared now we can create different objects out of this class now this class is acting as a blueprint or we can say as a template in order to create multiple objects so we will come out of this class and what we will do we will create the objects for this class so let's say we have parot one followed by equal to operator and then we can simply provide the name of the class that is parot followed by the open and close parenthesis so this is the way that we can initialize an object for this class that is parad and then we can use this object in order to initialize these attributes that is name and age so here what we will do is we will use this parot one object followed by Dot and as you can see we are getting this name and age being Auto suggested by the vs code that's because we have already defined these attributes inside this blueprint that is class parrot so over here we are going to provide the name as the name of the parrot one object so let's say we provide the name as blue over here and then let's say we also want to provide the age of this parrot object so again we will provide parrot one followed by Dot and then we have the age attribute let's say it is 2 years old so we have two as the parent's age now guys let's say we want to create another object with another name and age so again we will copy these lines of code and paste this over here what I will do is instead of parot 1 we will say parot 2 because this is another object so this is the second object that we are creating by using this parrot class and over here again we will say parot 2. name and parot 2. age so let's say the name of the parot two is Vu and its age is five over here so 5 years so guys over here here we have created two objects for this class that is parot similarly we can create any number of objects that we want it's very important to note that while creating the objects we provide this variable name on the left hand side and on the right hand side we provide the name of the class followed by the open and close parenthesis and then we can call the different attributes of that class in order to initialize them now guys after these objects are being initialized with their names and age we can simply print them on the console so what we can do is we can have the print statement with the formatting being enabled so over here inside the print statement we can have the F followed by the double codes and then what we can do is open and close curly braces inside this we can have the parent one do name over here is and Then followed by curly braces parat 1. Ag and then we can have ear bold so guys basically what is happening over here is inside the open and close curly braces we can provide the variable names in order to get their values being printed inside the print statement so this parot 1. name will give us the value of this variable that is blue over here and then followed by is and then again we will get parot 1. age which is two in this case so blue is 2 years old so this is a statement that should get printed and then similarly we can copy this line of code and paste this over here and instead of parot 1 we can simply say parot 2 so we have parot 2. name and and then par 2. AG so guys let me just save this file now and try running this code as you can see blue is 2 years old this is what is getting printed by using the first print statement and over here again we are getting Vu is 5 years old so this is the second print statement that is helping us in order to print this particular statement so guys this is the way that we can easily create a class in this case we have created the parot class and we have two attributes that is name and age you can have any number of attributes for the class based on your requirements and apart from that while creating the objects you can have the values for those attributes based on those particular individual objects and then you can call those attributes by using the objects that you have just initialized by using this statement that is the object on the left hand side followed by equal to operator and then we have the class name followed by the open and close parenthesis this is called instantiating of the object or we can also call it as initializing an object in Python Programming inheritance in Python Programming so guys inheritance is a way of creating a new class for using details of an existing class so this we are going to check with the help of examples as well the newly formed class is a derived class which is also called as a child class and similarly the existing class is a base class or the parent class so guys what we are doing over here is we are already creating a parent class that is also called as a base class over here and then we also create a child class for which the attributes are derived from the parent class from here and this is what is called as The Inheritance now what will be inherited all the attributes provided that they are public along with the methods will be inherited by the child class so guys let us check python inheritance with the help of example now over here so let us switch to the vs code first of all we will create the parent class so let us say we have the class that is called as animal over here and inside this animal class we will Define two functions that is eat and sleep so we will have DF keyword followed by eat that is function one and then inside the parenthesis we are going to have the parameter that is self always remember guys whenever we are calling the function inside the class it is going to take a single parameter which is going to be the object by default so we need to catch that object with any name as a parameter over here so we have given the name of this parameter as self over here so that we can identify that this is the object and then we can use this object as well in order to access it it attributes and inside this eat function we are going to have a simple print statement and we will say I can eat so guys this is a statement that is going to be printed when we call the eat function using the animal object and then similarly we will have the Sleep Method as well so we have thef keyword followed by Sleep Method and then again we will have the parameter as the self which will be passed by default and then inside this again we are going to have the print statement and we can say I can sleep so Guys these are two methods or functions that we have defined inside the parent class that is the animal class now guys how do we inherit these methods to another class so let's say we have another class over here which will be a child class of the animal class so we are going to have another class and let's say the name of the class is dog over here and then in order to have its attributes and functions of the super class that is the animal after this name of the class that is dog we have to provide open and close close parenthesis and inside this parenthesis we have to provide the name of the super class that is animal in this case so this particular class that is animal we want to inherit its attributes and functions inside the child class that is dog so this is the way that we inherit the super class and now we can have a colon over here and then we can have the attributes and the functions of this class that is dog class separately so over here we are going to have the DF keyword followed by let's say I'm simply going to have the display method over here and it is going to take one parameter that is self and then we are simply going to print that we are inside doc class so this particular statement will be printed whenever we are going to call this display method over here so guys this is the way that python inheritance Works what I will do is I'll just zoom out little bit so that you can see the entire code at once so over here we have created the super class that is the animal class and then we are creating another class that is is called as the child class and after the name of the child class we are providing the name of the super class over here that is the parent class inside the open and close parenthesis and what this will do is the eat and sleep methods will be now available inside the dog class as well so guys why this is important so let us come out of this class now and what we will do is let us create the object of this class that is the dog class so what I will do over here is we will create dog one that is the object of the dog class followed by equal to and then the name of the class that is dog over here so we have created one object of the dog class now guys ideally we have seen that we can call the display method which belongs to the dog class so we can do that over here so I'm going to call the dog one object followed by Dot and then we have the display method so after this we are going to have the open and close parenthesis let me just save this file first and try running this code now so as you can see we are getting we are inside dog class which means this statement is getting printed now guys do we have any other method apart from this display method yes we do have and those are eat and sleep methods why so because we have inherited the methods from the animal class by using the python inheritance so basically we can use this object name that is dog one in order to call eat and sleep methods over here so if we call both the method so I'll say dog one followed by Dot and then as you can see vs code is suggesting us this eat method as well so we have eat followed by open and close parenthesis and then again we will call the dog one object followed by Dot and then Sleep Method is also being suggested by the vs code so we are going to call both the methods over here so let me just save this file now and try running this code so as you can see we are getting all the three statements that is we are inside dog class I can eat and I can sleep which are the statements that are being printed by using these methods respectively so guys this is the power of python inheritance we can use the different attributes and the methods that were defined in a super class inside the subass by using the object of the child class over here which is also called as the subass over here guys it is very important to note that whenever we are defining the methods inside the class we need to provide one parameter over here which is going to be the object that will be passed so behind the scenes what is happening over here is when we call dog 1. display over here the dog one object is being passed with this display method even though we are not providing any parameter over here but behind the scenes the object is being passed over here and it needs to be caught by this particular method what happens if we don't provide this parameter let us check this so I'll just remove the self keyword over here and I'll just save this file now over here we are not receiving any parameter as we can see so let me just run this code now so as you can see type error dog. display takes zero positional arguments but one was given so basically behind the scenes this dog one object is being passed and we need to have a parameter over here while defining the function and that is the reason why we had given this self parameter name in order to identify that this is the object of this particular class that is dog so let me just save this file now and try running this code once again so as you can see there are no more errors that are getting displayed and all the three statements are getting displayed over here now guys what are the uses of inheritance so as you can see since a child class can inherit all the functionalities of the parents class this allows code reusability so as you can see over here we need not have to provide the eat and sleep methods once again inside the dog class and we were able to access both these methods by using the object of the dog class without actually providing the definition of those methods over here once a functionality is developed you can simply inherit it no need to reinvent the wheel this allows for cleaner code and easier to maintain now since you can also add your own functionalities in the child class you can inherit only the useful functionalities and Define other required features so guys based on your requirement it depends on you which class you want to inherit and create the child classes and the parent classes over here based on your project requirements Constructor in Python Programming now guys a python Constructor is a function inside a class that helps us to initialize certain attributes of a class so far we have seen creating the class attributes and the function and while initializing the attributes of the classes object we use the object name followed by the dot and then the attribute name but is there a better way in order to initialize those attributes inside the class yes it is so we have something called as double times underscore followed by in it and then again double times underscore followed by open and close parenthesis which is a Constructor function that is called whenever a new object of that class is instantiated so guys let us check this with the help of example now so let us move to the vs code what we will do is we will create a class that is called as the parot class over here and we will Define two attributes so over here we have the name which is of the string data type so let's say we have the empty string initially and then let's say we have the age attribute which is defined as zero over here which is the integer so guys what we will do is let us say we want to create the object of this class so what we have to do is let's say we provide the object name as parot 1 followed by equal to operator and then we have the name of the class that is parent followed by open and close parenthesis now guys so far what we had done is in order to initialize both these attributes we were calling this object name followed by Dot and then the name of the attribute so let us do that first so we are going to use the parot one object over here followed by Dot and then let's say the name of the parrot it is blue over here so we provide the name of the parrot and then we also provide the age of the parrot so let's say parrot 1. AG it is equal to 2 years old and then we can simply print the name and age of this parro so let us say we provide the print method over here and we provide the parrot one object so parot one followed by Dot and then we have name is and then again we want to get the age so parot 1. age and then we have years old so over here blue is 2 years old will be displayed so let us save this file now and try running this code so as you can see blue is 2 years old so guys this is the conventional way that we had seen so far in order to instantiate an object of the class and also assign the values to the attributes of that class so is there a better way in order to assign these values to these attributes yes we can do so by using the Constructor so what we can do is we can simply remove these two lines of code over here so I'll just remove them and then guys inside this class we are going to have the innit method which is the constru structor so over here we are going to have the DF keyword followed by double * underscore and then we have the init so as you can see vs code is suggesting us this method which we are going to use so in it and it is going to take one parameter by default as I have already told you previously whenever we are going to call any method inside the class the object that is used in order to call that method is also passed by default behind the scenes so this self parameter represents the object of this parro class over here I'll just remove this part and what we are going to do is we are going to take both these attributes that is name and age as the parameters so over here after the self we are going to have comma and then we are going to have name one so guys I'm naming this as name one so that you don't get confused between this name and this name one so this name one will be passed as the parameter when this Constructor is being called over here and then followed by comma we also have age one and then what we can do is for this self that is the object followed by dot we can have name it is equal to name one over here and then again we can have the self followed by Dot and then age it is equal to age 1 so what we are simply doing over here is the name and age attributes of this object the object is being represented by self and then self. name it will be assigned with the value of this name one that is being passed same thing for the age as well the self. AG the value will be be passed by using this age one parameter over here and both these values will be assigned to name and age attributes now guys when exactly this Constructor is being called so basically whenever you are going to create an object and call this class over here that is the parrot class The Constructor will be called so while instantiating this object we also need to pass the name and age for this particular instance of the class so what we will do is let's say we take the same name that is blue over here so we provide the first parameter is the name of the parrot followed by comma and then we provide the age that is 2 years old which is the second parameter so guys when the control flow comes over here it sees that the class is being called with these two parameters and we also have the Constructor so basically this parro one will be assigned to this parameter that is self and then this name and age will be assigned to this name one and age one and this name and age will be assigned those values respectively and then we can simply have this print statement in order to print the same statement that we had seen previously as well so let me just save this file now and try running this code so as you can see we are getting the same statement that is blue is 2 years old that's because we have provided the same name and the same age let's say we provide a different name over here so let's say we provide Vu and it is 5 years old so let me just save this file now and try running this code as you can see Vu is 5 years old is getting displayed over here so guys in this way what we have done is while instantiating the object we are passing the values or the attributes that are present inside that class for which the values are getting assigned now guys another important functionality of this Constructor is we can also remove these attributes that are being declared so there is no need of declaring these attributes over here so I'll just remove these lines of code over here and what exactly is happening is while this Constructor is being called the interpretor comes to know that this name and age are the attributes of this class that is the parent class over here and it assigns the values that are being passed to name one and age one so to make it more simple let us say we name this parrot s first parrot over here for which the age is 2 years old and let's say I provide another parrot so I'll just copy this line of code and paste this over here and then I provide this as parrot 2 and then we can say second parrot over here which is 5 years old so we'll say 5 years old and then we will print both the parrots over here inside the print statement I'll just copy these lines of code and paste this over here and then we can say parot 2. name and then again over here parot 2. AG so let me just save this file now and try running this code so as you can see first parot is 2 years old and second parot is 5 years old both the statements are getting displayed over here so guys this is the way that you can Define The Constructor inside the class by using the underscore uncore init method and Then followed by the self that is being passed automatically as one of the parameters and then you can have any number of parameters being passed over here inside the Constructor which can be used as the values for the attributes of the class that you have defined and those values need to be passed whenever you are creating a new object for that class encapsulation in Python Programming so guys encapsulation is one of the key features in objectoriented programming because encapsulation refers to the bundling of attributes and methods inside a single class so we have seen so far the various attributes and methods that we we have been creating inside the class that functionality of the Python Programming is called encapsulation now it prevents outer classes from accessing and changing attributes and methods of a class so far we have seen that all the attributes and methods were public in nature but in this case we are going to create some private attributes which cannot be directly accessed outside the class so this also helps us to achieve data hiding over here now in Python we denote private attributes using the underscore as the prefix either we can have the single underscore or the double underscore so let us check this with the help of example now over here as you can see in this example we have the class computer and then we also have the Constructor that is in it followed by the self which is the parameter for that object that is being passed and then self. Max price so as you can see over here we have the prefix that is double uncore followed by Max price so this is one of the attributes of this computer class over here and we are providing the value of 900 to this Max price over here inside the Constructor now apart from this Constructor we have more couple of functions inside this class as you can see we have the cell function over here which simply prints the selling pric is the self followed by Dot and then the max price so basically this statement will help us in order to print this value that is the max price value of the computer and then we have another method that is set max price which takes the object that is using the self and then it also takes the price over here so in case you want to set another Max price for this computer you can use this set max price function what it will do is it will simply update the value of the max price of the computer as you can see with this particular statement so guys let us check this with the help of example now what I will do is I'll simply copy these lines of code since I'm little bit lazy in order to type them again so we are going to paste it inside the vs code so over here what we are going to do is we are going to print the max price of the computer so first of all we are going to create the object that is comp one over here followed by equal to and then we have the computer class name so basically since a Constructor is not taking any other parameter apart from this self which is the object itself so we need not have to provide any parameter over here while instantiating this object that is comp one now what we will do is simply we will call the cell function over here that is this particular function so we can use the comp one object followed by Dot and then we have the cell function so after this open and close parenthesis so let me just save this file now and try running this code so basically this print statement should get executed and it should be displayed on the terminal so I'll just run this code now as you can see selling price is 900 so what exactly happened is when the control Flow came over here that is comp one it is equal to computer the Constructor of this class that is the init method was called and inside this what we have done is this private attribute so guys basically this double uncore denotes that this is the private attribute of the computer class so basically this private attribute was initialized inside the Constructor and a value of 900 was being assigned to this particular attribute and then what we did is when the control Flow came over here that is while calling the sell function basically this print statement was executed so selling price it is equal to this self. Max price got printed over here which is 900 right now now guys let us do another thing what we will do is we will try to access this private attribute from outside of this class so over here we will call comp one once again followed by Dot and then we can call this private attribute that is the max price so as you can see this Max price is getting suggested by the vs code so we will call this Max price and what we will do is we will try to assign another value that is 1,000 over here to this Max price and then again let us say we want to call this print statement so again we will call this sell method over here so I'll just copy this line of code and paste this over here let me just save this file now and try running this code so as you can see selling price 900 this is the statement that was printed by calling the first sell method and then the second time the sell method was called again the selling price was equal to 900 so guys why so that's because this Max price is the private attribute and we directly cannot access this attribute by using this object we need to have another meth method inside the computer class in order to assign another value to the private attribute and that is why we have this method that is the set max price along with the parameter price which it is going to take in order to replace the existing Max price over here so what we can do is we are going to call the comp one object once again followed by Dot and this time instead of directly accessing this Max price we are going to call this set max price over here so set max price and it is expecting two parameters the first parameter is the self which is going to be passed by default which is going to be the comp one object and then the second parameter is the price which we are going to pass to this method so again what we will do is simply we are going to provide this th000 price that we try to assign to the max price directly over here so set max price and then again let's say we want to print the selling price over here so again we are going to call the sell method once again so comp 1. sell so over here the only difference is we are calling the method that is the set max price and we are passing the value of the new Max price over here which is going to be passed to this price and then the max price value will be the updated price that we have just said so guys let me just save this file now and try running this code so as you can see selling price 900 and then selling price 900 once again and the third time that we tried by using the set max price over here it was 1,000 so this time it is selling price it is equal to 1,000 so guys by using this method in order to set the value of a private attribute we were successfully able to update the value of this private attribute and this is the main functionality which we call it as encapsulation as far as objectoriented programming in Python is concerned so guys let us run this code once again by a different value let's say the max price over here we set it to 2,000 so let me just save this file now and try running this code so this time the selling price is coming over here once again as 2,000 and guys this is the way in order to hide certain attributes of a class you can have them as the private attribute by prefixing and use the different methods in order to set their values by using the objects of that class method overriding in Python Programming so guys method overriding in Python is a way of letting method of a subass override the method of a super class so let's say for instance inside the super class we have a method that is eat and then in inside the subass we also have the same method with the same name that is eight so basically the method inside the subass will be executed instead of the method that is present inside the super class so let us check this with the help of example now over here so as you can see this is the class that is animal which is being treated as the parent class or the super class and over here we have the attribute that is the name of the animal and it has a function that is the eat and it takes one parameter that is self over here it simply prints a statement that is I can eat now guys again we have another class over here that is the dog which inherits this parent class that is animal and again what is happening over here is this eat is being inherited by this dog class but the dog class is also having its own eat method over here so as you can see this eat method is once again present inside the dog class and it is printing its own statement that is I like to eat bones so guys what we will do over here is I'll just simply copy these lines of code code and paste it in the VSS code and let us check the functionality of the method overriding and how it can be used in your project based on your requirement so I'll just remove certain comments over here so as you can see we have this parent class that is animal and then we have the child class that is dog over here both are having the eat method so what we will do is first of all I'll just comment out these lines that is this particular function is not present let's say inside the dog class I'll simply provide the past statement over here so what exactly is happening first of all we have the animal class which is having the eat function and this dog class it is inheriting the animal class so the dog class will have access to this function that is eat over here so I can eat will be displayed so what we will do is first of all we will create the object of this dog class so let's say we have dog one it is equal to and then the name of the class that is dog over here and simply what we can do is since the dog class is inheriting the animal class we can use the eat method of the animal so we can simply use the dog one object followed by Dot and then we have the eat method being called followed by open and close parenthesis so guys over here simply if we save this file and try running this code now as you can see I can eat is being displayed over here which is the print statement inside the eat function of the animal class now guys let us say we have the same method that is eight with a different print function inside the dog class so I'll just remove this pass statement and we'll also remove these commands over here so basically now what will happen whether the eat function of the animal class will be called or the eat function of the dog class will be called so let us check this so I'll just save this file now and try running this code once again as you can see I like to eat bones this particular statement is getting printed which is the statement from the eat function of the dog class so basically whenever we have the method with the same name inside the parent and the child class the method of the child class will be called over here and that is what we call it as method overriding now guys why method overriding is important so let's say you have the animal class over here this is a very generic statement that I can eat basically it doesn't specify what the animal can eat but let's say you want to have the child classes over here which inherits the parent class and you want to be more specific so what the dog likes to eat basically the dog likes to eat bones over here so you can have the same method name inside the child class and print a different message in this case and that is what we have done in this example so method overriding is very important as far as objectoriented programming in Python is concerned and you can use them in your own Project based on your requirements multiple inheritance in Python Programming so guys previously we have seen the single inheritance but in this video we are going to check the multiple inheritance in Python so a class can be derived from more than one super class in Python basically this is called multiple inheritance so basically the derived class will be having the multiple super classes in this case so for example a class bad is derived from Super classes that is mammal and a winged animal so basically this mammal and winged animal will be treated as the parent classes and this bad class will be the subass or the child class which can be derived from both of these super classes over here so it makes sense because bat is a mamal as well as it is a winged animal so let us check this with the help of the example code now in the vs code so over here first of all we will create a class that is called as maml over here and inside the maml what we will do is we will Define the function and we will simply say mamore info so this particular function it is going to take one parameter at itself which is the object itself and basically we are going to Simply print the statement that we are inside mammal function so as you can see we are simply printing we are in inside mammal function in order to identify that the control flow has come over here inside the mammal info function and then again we will have another parent class over here that is winged animal so we say winged animal over here and this time what we will do is again we will have the function but over here we will say Wing uncore info so this particular method belongs to the winged animal over here and then again it is going to take the parameter is the cell and then again I'm simply going to copy this print statement over here and paste this inside the winged info and we will say we are inside winged animal function so we say we are inside winged animal function now guys we have created two classes over here which will be treated as the parent classes now we will be defining a third class that will be the child class of both these classes so basically we will have the class that is called as B over here and how do we mention the multiple super classes whenever we are defining the the sub classes over here so basically inside the parenthesis we will have both these classes separated by a comma so first of all we will have the mamal class over here followed by comma and then again we will have the winged animal class over here in the same way you can have any number of classes separated by commas over here in order to achieve multiple inheritance and then after this we will have the colon and then again we will have another method which will belong to this bed class over here so over here we will have the pcore info method and then which will take the self as the parameter and then we have the colon over here again we will have the print statement we will say we are inside bad function so it says we are inside bad function now guys inside this bad class we have this B info function and apart from this we also have this mamal info and winged info functions since both these functions are derived from these classes that is mammal and winged animal over here so we can access all these functions from from the object that we create for the bad class so let us come out of these classes and what we will do is let's say I provide the object that is bad one it is equal to bad over here so we have created the object of this bad class in this case and then when we provide the B one object followed by dot as you can see we are getting all the three functions as the suggestions by the vs code over here that's because all the three functions are accessible by this bad one object over here so first of all we will say bad info and Then followed by open and close parenthesis and then again we will say b 1 dot let's call mammal info in this case so we have Mel info as well as the third function that is B one followed by Dot and then we have the winged info over here and then open and close parenthesis so all these three statements will be printed one at a time based on the functions that is being called by the control flow so let me just save this file now and try running this code in order to confirm the same so as you can see first of all we have called the bad info so we are inside bad function is being displayed and then again we are inside mammal function is being displayed that's because mammal info is being called the second time and third function is being called that is winged info and we are getting we are inside winged animal function so guys in this way we have also achieved multiple inheritance over here in case the functions that you want to use are present in the multiple classes as you can see over here you can have multiple classes being inherited by the derived class which we also call it a as a subass over here and this pad class is acting as a subass and both these classes that are mammal and winged animal are acting as the parent classes now guys let us move to another task over here what do you mean by Method resolution order in Python that is mro so if two super classes have the same method name and the derived class calls that method then python uses the mro to search for the right method to call so guys over here we have seen how multiple inheritance can be achieved but but what if the method names in both the super classes that is in the memal class and the winged animal class are same so what we will do is instead of this memal info we will keep it as display over here and instead of winged info again we will call it as display so basically this time what is happening over here is both these classes that is mammal class and winged animal classes are having the same method name that is display and what we are doing we are creating the subass that is B and inheriting both both these classes that is mammal and winged animal over here and this time both these display methods are getting inherited by this bad function now which method will be called when we use the object of this bad method let us check that so basically I'll have to remove these lines of code since these functions are no longer present but instead of that what we will do is we will say bad one followed by Dot and then we have another function that is display so we have only one function that's because the name of these functions are same in both both the parent classes and Then followed by open and close parenthesis so guys over here inside the bat function we have the B info which will be called by using the bad one object and then the next time what we are doing is we are using the bad one object in order to call the display method now which display method will be executed out of these two let us check that with the help of execution so I'll just save this file now and try running this code now so as you can see we are getting VR inside B function which is this statement that is getting printed that is obvious that's because we have called the bad info function over here and next time when we call the display method it is saying we are inside mammal function so guys basically this print statement was executed which proves that the display method of the mammal class is being called over here why so that's because when we are creating the child class the first parent class is being given the highest priority over here so first the control flow will check whether this display method is it present in the first first parent class if not then it will go to the second parent class so over here inside the manual class it is finding that the display function is present and that is what is getting printed over here so it is the leftmost class that will be used in order to call the method which is present in multiple parent classes over here so what if we provide wind animal as the first class so what we will do is I'll just remove this mammal class from here on the left hand side we will provide wind animal and Then followed by comma and then on the right right hand side we provide meml so over here again we have just changed the order in which the inheritance is being done over here both these classes are still the parent classes of this child class that is bed class now let us check which statement will be printed when we call the display method over here so let me just save this file now and try running this code as you can see we are getting we are inside winged animal function so guys basically this winged animal function that is display function was called and we are getting this statement that is we are inside winged animal function that's because this time we have provided winged animal as the leftmost class and the control flow found this particular display method inside the winged animal class over here which is the parent class of the bad class so guys this is very important as far as method resolution order is concerned the leftmost class is being given the highest priority as far as the same names of the methods are concerned so guys practice on your own so that on different inputs you get different outputs operator overloading in Python Programming so guys in Python we can change the way operators work for user defined types so for example the plus operator will perform arithmetic addition on two numbers in the same way it will merge the two list as well or else if we are dealing with the two strings then it can concatenate two strings so the same plus operator can perform multiple operations depending on the operant whether they are numbers or whether they are strings or list so this feature in Python that allows the same operator to have different meaning according to the context is called operator overloading so this we are going to check with the help of examples as well apart from this there are certain special functions in Python so basically the class functions that begin with the double underscore are called special functions in Python they are called double underscore functions because they have a double underscore prefix and suffix such as as you can see this in it which can be treated as the Constructor of a class it is one function which starts and ends with the double underscore in the same way the plus operator can be overridden by using this double underscore followed by add and then double underscore again and then open and close parenthesis so guys let us check operator overloading implementation in action using the VSS code over here so we'll see the very basic examples first of all so let's say we have num one it is equal to 10 and then number two that is num two it is equal to 20 so if we simply print num 1 + num 2 over here so num 1 + num 2 so basically it is 10 + 20 which is 30 in this case so when we just save this file now and try running this code so as you can see we are getting the result as 30 but what if these variables are strings so instead of numbers let's say if we enclose them within the double codes this means that we have a string over here that is 1 Z that is 10 and then over here is as well we have another string that is 20 so when we do num 1 plus num 2 instead of 30 we will get the concatenation of this string which means 10 will be followed by 20 in this case when we try to print the statement so let me just save this file now and try running this code so as you can see we are getting 1020 so guys we have not changed anything over here the operator is same and the operant are also same the only thing is we have changed the values to the string and that is what operator overloading means that is by using the same operator we can have the different results based on the operant values now guys let us check how operator overloading can be implemented when we are dealing with classes over here so let's say we have a class that is named as point over here and this class let's say we have a Constructor inside it so we have init method inside this so init method it will take one parameter that is self and what we will do is let's say it has two attributes over here so self dox so the point class it will have have two attributes that is X and Y coordinates so over here let's say we provide the x value by using the parameter that we are getting so let's say we have X1 over here and let's say we have y1 over here so self. X it will be equal to X1 and then again we will have self do y it is equal to y1 in this case so whenever we are creating the object by using the point class over here the Constructor that is in it method will be called along with the two points that we will be passing and those those two points will be assigned the values to these variables that is X and Y over here now guys in order to override the two string method we also have another method that is double underscore and then Str Str so as you can see apart from this we have many other functions that can be used when we provide the double underscore so vs code is suggesting us the entire list of functions which we can use in our python code so over here we are going to use this s Str and then we are going to have our custom code inside this s Str so what we are going to do is we are simply going to print the values of this X and Y so how do we do that we are going to use the formatting part and then inside this we are going to call the celf followed by Dot and then we have X and then again we have comma over here and then again we call the self.y so over here we are simply printing the X and Y values which are separated by the comma over here and then guys let's say we want to override the plus operator over here so before having the function inside the class what I will do is first of all we will create the object so let's say P1 is the object name it is equal to point which is the class over here and what we do is we do 1A 2 that is X and Y values over here and then let's say we have another point that is P2 it is equal to point and then this time we are going to provide the X and Y coordinates as 2 and 3 over here and what we want to do is we want to print the sum of both these points that is P1 plus P2 so guys in this case we are using this plus operator and then these are the operators that is P1 and P2 so how do we have the custom implementation of this plus operator over here which we will call it as the operator overloading as well so as we have seen over here we have something called as double underscore and then add and then double underscore so this represents the plus operator as well so we can use this method inside the class in order to have our custom implementation of addition of both these points so over here we have DF followed by double underscore and then we have the add method over here followed by double underscore and then we have the open and close parenthesis and then inside the parenthesis we will provide the self as the parameter now guys apart from the self parameter basically when we do P1 + P2 it is simply P1 dot this particular function that is we are going to Define followed by this P2 which will be a parameter so we need to catch this as the second parameter over here so what we will do is after the cell we will have another parameter and we will name it as other over here so what we can do is over here we can create another variable that is X it is equal to self.x over here plus we need to use another parameter that is other which represents the other point that is P2 in this case so over here we will say other do X in this case and then the same way we are going to have another variable that is y it is equal to self do y plus other do Y in this case and then guys what we have to do is simply we need to return the point of both these values that we have found that is X and Y so basically return point of X comma Y in this case so we have X comma y so guys this is the implementation of our addition operator we are doing the operator overloading in this case so basically P1 + P2 it is same as P1 followed by Dot and then the add function being called along with the parameter that is P2 so in this case this function will be called and it will return point of X comma Y and basically while returning this we are providing the print statement so behind the scenes this function will be called in order to print the statement so guys basically over here inside of the print statement we need to have the return statement over here so I'll just remove this part over here and we will say return followed by double codes and then inside this double cloes we will be using the formatting so let's say we have zero and then comma and then let's say we have 1 followed by Dot and then we have format over here and inside this format we need to provide the x and y Valu so self do X and then comma and then we have self doy in this case so basically this is the way in which we are going to print the values that is of X and Y so guys let me just save this file now and try running this code so as you can see we are getting the coordinates as 3 and five this x and x values are getting added so 1 + 2 it is equal to 3 and then 2 + 3 it is equal to 5 so we are getting five over here so guys basically what we have done is if you see the main code over here we have just defined P1 and P2 which are simply the points and if we were not having this implementation inside the class that is the string and the addition part then we won't be able to add both these points directly because by default this plus operator can only handle numbers or strings Or List over here but in order to handle the custom classes we need to define the custom function as well inside those classes and according to our requirement we can have the code inside those custom functions guys we can also change the formatting over here in order to change the formatting we can say that X it is equal to this particular thing and then after comma we can have y it is equal to self.y part over here so let me just save this file now and try running this code so as you can see we have changed the formatting xit is equal to 3 and Y is equal to 5 so whatever format that you want to print in or whatever code you want have inside this Str Str method you can have it accordingly based on your requirements so guys this is operator overloading for you with the same operator you can have multiple implementations and it can have different meanings as far as operant are concerned similarly we have other special functions and the other operator overloading functions as well as you can see we have this init which initializes the attributes of the object which we have already seen as far as class Constructors are concerned then we have Str Str which returns a string representation of the object that is what we have implemented over here it returns a string implementation of the object that is point x comma Y and then we also have Len which Returns the length of the object then add which adds the two objects so over here we have implemented the add method which adds two objects over here which is P1 and P2 that is what we have achieved in this particular program apart from that we also have this call function which calls the objects of the class like a normal function guys apart from this we can also have other operator overloading functions as well for addition we have seen P1 + P2 which means P1 Dot and then underscore uncore add will be called in which case the parameter will be P2 similarly we can have the subtraction multiplication the power of two objects and then we can have division as well and then we can have flow Division and many other mathematical operations can be achieved by using the operator overloading just how we have done in this program so we have come to the conclusion of the Python programming language hopefully you have got enough knowledge about the Python language and you should practice on your own so that on different inputs you get different outputs and that is how you are going to learn more about the Python language so that's it in this video I'll see you in the next video till then stay tuned
