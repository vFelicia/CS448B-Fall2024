With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video I'm going to walk through how
00:03 - I personally handle multiple projects
00:05 - virtual environments and environment
00:07 - variables now when you're working on
00:08 - multiple projects at once it's easy to
00:10 - get your packages and dependencies mixed
00:12 - up and also it's hard to keep track of
00:15 - virtual environments and also you might
00:17 - have environment variables that are
00:18 - overriding each other and things like
00:20 - that so in this video I'll show you how
00:22 - I keep all of these separate and easy to
00:24 - work with so before I get started I just
00:26 - want to point out that this is how I
00:27 - personally manage these projects and
00:29 - environments it's definitely not the
00:30 - only way to do this and I'm not claiming
00:32 - it's the absolute best way to do this
00:34 - but it's something that has worked well
00:36 - for me up until this point so I figured
00:38 - I'd walk through how I do this and maybe
00:40 - it'll give you some ideas for how you
00:42 - can manage your projects but if you
00:43 - don't like this workflow then like I
00:45 - said there are plenty of other ways that
00:47 - you can accomplish this same thing so
00:49 - you have plenty of options now also I
00:51 - will be going over how I do this on my
00:53 - Mac and I apologize if you're on a
00:55 - Windows machine some of these steps will
00:57 - be similar on Windows but it's likely
00:59 - that a lot of this will be pretty
01:00 - different but I will leave a link to the
01:02 - page where I got a lot of these ideas
01:04 - for this workflow and I believe that
01:06 - they list the equivalent Windows
01:08 - commands on that website so I'll leave a
01:11 - link to that page in the description
01:12 - section below and with that said let's
01:14 - go ahead and get started okay so first
01:16 - of all I personally do a lot of work
01:18 - with data science libraries and packages
01:20 - so I use the Anaconda distribution and
01:22 - the Conda package manager now if you
01:24 - don't know what anaconda is it's
01:26 - basically an open source Python
01:28 - distribution that makes it easy to get
01:30 - up and running with different libraries
01:31 - and packages and it comes with its own
01:33 - package manager called Conda now Conda
01:36 - is similar to pip but certain things can
01:39 - be more easily installed through Conda
01:41 - now Conda isn't necessarily a
01:42 - replacement for pip so you can use them
01:45 - both interchangeably personally I
01:47 - actually use pip about 99% of the time
01:50 - and if there's something not available
01:52 - through pip then I will install it
01:54 - through Conda now Conda can also manage
01:56 - virtual environments and that is what I
01:58 - use in my projects so we'll see that in
02:01 - just a bit
02:01 - so I do have a separate video on
02:03 - installing anaconda and the basics of
02:05 - using Conda and I'll leave a link to
02:07 - that video in the description section
02:09 - below
02:10 - now I know that some people don't like
02:11 - anaconda for some reason but
02:13 - I've never really understood why that is
02:15 - but like I said this is just how I
02:17 - personally do things and my work from
02:19 - day to day okay so from this point on
02:21 - I'm just going to create a new project
02:23 - from scratch and we'll walk through the
02:25 - process of making sure that it is
02:26 - separate from our other projects so I'll
02:29 - go ahead and create a new project here
02:31 - called my project and we'll create an
02:33 - empty directory just called my
02:36 - underscore project and then we will CD
02:40 - into that directory okay so now I'm
02:42 - going to create my virtual environment
02:44 - using Conda so we need to figure out
02:46 - what version of Python and also what
02:48 - packages we'd like to use in this
02:50 - project so for example let's say that we
02:52 - wanted to create a project using the
02:54 - latest version of Python and the
02:56 - packages let's say flask SQL alchemy
03:00 - numpy and pandas so to do this we can
03:03 - say Conda create to create a new virtual
03:06 - environment and we want this name to be
03:09 - since I called this my project we'll
03:11 - call this my project underscore env and
03:13 - now we can pass in our starting
03:15 - dependencies so like I said we'll do
03:17 - flask SQL alchemy also numpy and pandas
03:22 - so then it's going to list all the
03:25 - dependencies for all those packages and
03:27 - if we want to proceed and we can just
03:29 - hit yes okay so once that's finished up
03:32 - it says here that we can activate this
03:34 - environment using this source activate
03:37 - command here and to deactivate we can do
03:39 - source deactivate so I'm gonna go ahead
03:42 - and clear my screen and activate this
03:44 - environment and once you have the
03:47 - environment activated it should add this
03:49 - to your prompt here in some parentheses
03:52 - saying so that you know that you're
03:53 - within your virtual environment so now
03:55 - that we're within our virtual
03:57 - environment if I do a pip list then we
03:59 - can see the packages that we installed
04:01 - and with the environment activated you
04:04 - can continue to add or remove any
04:05 - packages that you want but when you get
04:08 - to the point where you have everything
04:09 - that you need I'd like to create an
04:11 - environment Yama file that captures
04:13 - everything about our environment and can
04:16 - be used to build the same environment
04:17 - from scratch so let me go ahead and do
04:20 - this so that you can see what it looks
04:21 - like so I'll clear my screen and now to
04:24 - export this environment we can say Conda
04:26 - you
04:26 - I envy export and we want to export this
04:30 - to an environment dot yeah mole file now
04:35 - some people just use yml and some people
04:38 - use yam all spelled out either way
04:40 - should work fine so once that
04:42 - environment file is created let's go
04:44 - ahead and see what that looks like so
04:46 - you can either open it up or in a text
04:48 - editor or you can just display it here
04:50 - within the terminal so on Mac or Linux
04:52 - I'm just going to splay it on the
04:53 - terminal by adding that file so we can
04:56 - see that within this file here if I
04:58 - scroll down that it has the name of our
05:02 - environment and all of the dependencies
05:04 - with the exact version so someone else
05:07 - could grab this file and create the
05:10 - exact environment with just one command
05:13 - so now that we've seen what this
05:15 - environment file looks like I'm going to
05:18 - clear my screen so we could actually
05:20 - package up that environment yam will
05:22 - file with our project and then if
05:24 - someone wanted to replicate that
05:25 - environment all they would need to do is
05:27 - create their own project directory drop
05:30 - in that file and then they could do a
05:32 - Khanda env create and then they could
05:36 - just create with a dash F saying that
05:38 - they want to create from my file and
05:40 - then pass in that file now I'm not going
05:42 - to run this now since we already have
05:44 - that environment created but you can see
05:47 - how easy it would be to create that
05:48 - environment from scratch just using that
05:50 - file ok so now let's look at how we can
05:52 - manage our environment variables now
05:55 - environment variables are used in many
05:57 - different projects to you know set
05:59 - database URLs or hold secret keys or set
06:02 - a Python path and all kinds of different
06:04 - information so the environment variables
06:06 - allow us to access sensitive data
06:08 - without putting it directly in our
06:10 - projects code for everyone to see
06:12 - now some people just use global
06:14 - environment variables that they share
06:15 - amongst all different projects and that
06:17 - can work but then you have to be careful
06:20 - with naming and making sure that they're
06:21 - not overwriting each other so to
06:23 - separate these out the Conda environment
06:26 - the Conda environments come with some
06:28 - useful scripts that you can create so to
06:30 - create these scripts we need to put them
06:32 - in a specific location so we need to
06:34 - navigate to where our environment is
06:36 - located on the file system and to do
06:39 - this
06:40 - we need to first find out where our
06:42 - environment is located and to find that
06:44 - location we can say Konda env list and
06:47 - this is going to list out all of the
06:49 - environments currently on my machine and
06:52 - we can see that this one is the one that
06:54 - we just created this my project env now
06:57 - this is the location of this environment
07:00 - of this virtual environment so now I'm
07:02 - going to change directory to the
07:04 - location of that virtual environment and
07:06 - now that we're within our virtual
07:08 - environment directory we're going to
07:09 - create two different directory trees so
07:12 - that we can set environment variables
07:13 - now this is going to seem a little weird
07:17 - but I'll put a link to the instructions
07:19 - in the description section below
07:21 - now first we're going to create an
07:22 - activate directory and this is going to
07:24 - hold scripts that will run whenever our
07:27 - environment is activated so to create
07:29 - this directory we'll say make dirt - P
07:32 - that means that the directory doesn't
07:34 - have to currently exist and we're going
07:36 - to say etc' khandha and this is going to
07:39 - be called activate dot d and now we're
07:43 - going to create a deactivate directory
07:45 - which is just the exact same except
07:48 - instead of activate D its deactivate D
07:51 - okay so now we have created this
07:54 - activate directory and this deactivate
07:56 - directory now within the activate
07:59 - directory we're going to create a file
08:02 - so I'll do a touch and then within that
08:05 - directory we're going to call this e and
08:07 - V underscore FAR's Sh and then we're
08:10 - going to create that exact same file in
08:12 - the deactivate directory also okay so
08:15 - now we can create the environment
08:17 - variables that we want to set within the
08:19 - activate script and then unset those
08:22 - environment variables within the
08:24 - deactivate script so let's edit these
08:26 - files and add some variables now you can
08:28 - edit those files and any text editor but
08:30 - I'm going to use my sublime text editor
08:33 - to open up that directory that we just
08:36 - created so I am here in my virtual
08:39 - environment directory and we created
08:41 - this etc' conda and here's our activate
08:44 - directory and our deactivate so I'm
08:46 - going to open up this activate env VARs
08:49 - and this deactivate env VARs now within
08:52 - the activate
08:53 - script let's create a fake database URI
08:56 - environment variable so at the top I'm
08:59 - going to specify that this is a bash
09:01 - script by saying bin - SH and then
09:05 - underneath here I'll do an export of
09:07 - database underscore URI and set that
09:11 - equal to
09:15 - okay so this is kind of a actually I
09:17 - think this should be post SQL not
09:19 - entirely sure if that's the right
09:21 - connection string but anyways this is
09:23 - just a fake connection string to a test
09:26 - database here so this is something that
09:28 - you would use a an environment variable
09:31 - for is something like a connection to a
09:34 - database with the use username and
09:36 - password here so that you don't have to
09:38 - have the username and password actually
09:41 - within your projects code so whenever we
09:43 - activate our environment or virtual
09:46 - environment then it's going to set this
09:48 - database URI now within our deactivate
09:51 - script let's go ahead and unset this
09:54 - variable so again it will specify that
09:56 - this is a bash script with bin that's SH
10:00 - and then we will unset that database URI
10:04 - okay so once I have both of those files
10:06 - saved I'm going to quit out of our text
10:08 - editor here and now let me deactivate
10:11 - and reactivate our environment to see if
10:14 - those set properly so to deactivate this
10:17 - environment I can just say source D
10:19 - activate and you can see that now our
10:22 - environment our virtual environment has
10:24 - been deactivated
10:25 - and now if I reactivate that with source
10:28 - activate and that was called my
10:30 - underscore project underscore env and
10:33 - now let's echo out that database URI
10:36 - just to see if that was activated or see
10:40 - if this was set whenever we activated
10:43 - our virtual environment so that is
10:45 - database URI and you can see there that
10:48 - that environment variable was set when
10:51 - we activated our virtual environment so
10:54 - now if I deactivate this virtual
10:56 - environment say source the activate now
11:00 - if I try to echo out this database URI
11:02 - then you can see that now that doesn't
11:04 - exist because we unset that whenever we
11:07 - deactivated our virtual environment okay
11:09 - so so far we have our Python version our
11:12 - dependencies and the environment
11:13 - variables all separated out so for
11:16 - example I have another test project here
11:18 - that I've created in my projects
11:19 - directory called Cori MS underscore web
11:22 - so let me nag navigate to that project
11:25 - really quick and that is Cori MS under
11:28 - school
11:28 - or web and now let's look at the files I
11:32 - have available in here oh and actually
11:34 - I'm in the wrong location this is the
11:36 - virtual environment directory I really
11:39 - want to be in my projects directory kori
11:43 - MS underscore web so now if we look at
11:46 - the files that we have in here then we
11:48 - can see that we have an environment dot
11:50 - yam will file in here so let's take a
11:53 - quick look at that so we've got a simple
11:57 - environment yamo file here where we can
11:59 - see that the name of this virtual
12:00 - environment is kori ms underscore web
12:02 - and in our dependencies one thing to
12:05 - note here is that we're using Python 2:7
12:08 - instead of Python 3 so you can have
12:10 - different versions of Python between
12:12 - different environments and we can see
12:14 - that the environment is using the same
12:15 - dependencies that we listed before
12:17 - except we're also including a sigh PI
12:20 - down here at the bottom now I've already
12:22 - created this environment from this
12:24 - Yambol file so let's navigate to the
12:26 - location of this and virtual environment
12:29 - and see if any variables are being set
12:31 - so to do that we can say khandha env
12:35 - list just like we did before and we can
12:38 - see it lists out all of our virtual
12:40 - environments here so I want to navigate
12:42 - to this virtual environment folder so I
12:46 - will CD to that directory and now let's
12:48 - open this up in a text editor so that we
12:51 - can see if we have any activate and
12:54 - deactivate scripts within here so I do
12:57 - have an activate script and I deactivate
13:00 - script and it's another database URI
13:03 - so this is basically the same thing that
13:05 - we had before except here at the end
13:08 - instead of test DB we're using a
13:11 - different database this core ems
13:13 - database so that's why it's beneficial
13:14 - to keep these environments separate so
13:17 - when we activate our other project it
13:19 - will set that and that environment
13:21 - variable to its database and when we
13:24 - deactivate and activate our core ems
13:26 - project it will correctly set the
13:28 - database to this database so let's
13:31 - activate this query MS environment
13:34 - really quick so if I close out of my
13:37 - text editor and we activate this with
13:39 - source activate core EMS under school
13:42 - web and then we echo out that database
13:46 - URI
13:47 - then we can see that our database URI
13:50 - now has that correct database for that
13:52 - project and also if we check our version
13:55 - of Python so I'll run a Python here you
13:57 - can see that this is using Python 2 7
14:00 - for this project so we're able to switch
14:03 - between versions of Python as well which
14:05 - is extremely beneficial for different
14:07 - projects ok so we're almost finished up
14:09 - now for most people you could stop here
14:11 - and you've got a great way of separating
14:13 - out your projects and environments from
14:15 - each other but there's one more thing
14:17 - that I usually like to set up so when
14:19 - you're working on multiple projects
14:21 - sometimes it can be easy to forget to
14:23 - deactivate one project environment
14:25 - before working on another or maybe
14:27 - you'll try to run tests and be wondering
14:29 - why all your tests are failing only to
14:31 - realize that you haven't activated the
14:33 - virtual environment for that project and
14:35 - it's not seeing the correct dependencies
14:37 - and environment variables now my
14:38 - personal preference is to have something
14:40 - in place that checks when you navigate
14:42 - to our project whether that project has
14:44 - an environment DM will file and to
14:46 - activate that environment if it exists
14:49 - now there are programs out there that
14:50 - will do something like this for you so
14:53 - maybe you've heard of things like Auto
14:54 - env or dirty env and tools like that but
14:59 - for Conda I just prefer to use my own
15:00 - function to do this now I modified this
15:03 - function from some code that I found
15:04 - online and I will put a link to the
15:07 - original function in the description
15:09 - section below so that they're sure to
15:11 - get credit but basically to do this we
15:13 - need to write a bash function that
15:15 - checks for the virtual environment and
15:17 - automatically activates it if it finds
15:19 - one and then we need to set an
15:21 - environment variable called prompt
15:23 - command that will run this custom
15:25 - function before each bash prompt so
15:27 - let's open up my bash underscore profile
15:30 - file and we can see how we can create
15:34 - this function and environment variable
15:35 - so I'm just going to open this up in
15:37 - nano and this is in my home directory
15:39 - and it is the dot underscore bash
15:42 - profile I'm sorry that's dot bash
15:45 - underscore profile so if I scroll down
15:48 - here to the bottom then we can see this
15:51 - function and this environment variable
15:54 - okay so here's the function it's call
15:56 - kondeh auto envy and it checks if the
15:58 - environment dot llamo file exists and
16:02 - then it is grabbing the environment name
16:06 - from that environment dot yeah mol file
16:08 - and then it's checking if we're
16:10 - currently in that environment by
16:12 - checking this Conda prefix environment
16:15 - variable and then if we are not in our
16:18 - environment already then it does a
16:21 - source activate on that environment name
16:23 - that it plucked from the environment
16:26 - yeah mo file and like I said this is
16:28 - just a modified function that I grabbed
16:30 - offline and I will post a link to that
16:33 - in the description below now I have my
16:35 - prompt command environment variable here
16:38 - commented out where I'm exporting this
16:41 - because I didn't want the environments
16:43 - to be automatically activating during
16:45 - the video and you wondering what was
16:47 - going on so now I can uncomment out this
16:50 - line and then if we save this I'll do a
16:54 - control X and ay Y to save and then I'll
16:57 - save that now like I said when I added
17:00 - that function to that prompt command
17:02 - variable that will run that function
17:04 - before every prompt it's just a special
17:07 - bash environment variable that does that
17:09 - so now to make sure that that
17:11 - environment variable is set properly I'm
17:13 - going to quit out of mic terminal and
17:16 - then open this back up and I'll make
17:19 - this text a little larger here so now if
17:23 - we navigate to our project so within
17:26 - projects I'm navigating to this my
17:29 - project directory now I expected that to
17:33 - activate automatically ok it's because I
17:36 - misspelled environment here so I'm going
17:39 - to rename this file so I'm going to move
17:42 - that and spell this correctly so that is
17:46 - environment Djamel ok ok now you can see
17:49 - whenever I rename that to environment
17:51 - and spelled that correctly then that
17:54 - virtual environment did get activated
17:56 - automatically so we can see that we're
17:58 - in our my project a virtual environment
18:01 - right now so now we should have access
18:04 - to those environment variables that get
18:07 - set when this is activate
18:09 - and again I'm spelling these wrong sorry
18:12 - about that okay so now we can see that
18:15 - we are connected to our test database
18:18 - here or we have that database
18:20 - environment variable set so now if I
18:23 - navigate to my other project which is
18:28 - called core EMS web as soon as I
18:31 - navigate into there then it sets that
18:33 - core EMS web environment variable so now
18:36 - if we check that same database URI
18:40 - environment variable again we can see
18:42 - that now it's set to that different
18:44 - database so with that prompt command and
18:46 - Armit variable running that Khanda auto
18:48 - env function then we can see that the
18:51 - environment automatically gets activated
18:53 - so it changes the Python that we're
18:55 - using its using the project's
18:57 - dependencies and also it sets the
18:59 - environment variables just by navigating
19:01 - to the project folder that contains the
19:04 - environment yamo file so you don't need
19:06 - to deactivate the other project that
19:08 - you're working on or anything like that
19:10 - beforehand so I like this feature
19:12 - because it keeps you from needing to
19:14 - remember to switch back and forth
19:16 - between the correct environments or even
19:18 - needing to remember the name of your
19:20 - environment since they are in the
19:21 - environment yeah mol file it just does
19:23 - everything for you automatically okay so
19:26 - I think that is going to do it for this
19:27 - video I hope that this gave you some
19:29 - good ideas for how you can juggle
19:31 - multiple projects even if you're working
19:33 - on projects with different Python
19:36 - versions or different Python packages
19:38 - and a lot of different environment
19:40 - variables it should be easy to keep
19:42 - everything separate using a strategy
19:44 - like this now like I said this is how I
19:46 - personally do this but even if you
19:48 - aren't using anaconda or the Conda
19:51 - environments then you can still do
19:52 - something like this using virtual env
19:55 - and tools like Auto env so definitely
19:57 - see what's easiest for you to put
19:59 - together and see if you can get a
20:01 - similar workflow because most likely
20:03 - you'll need to learn how to handle
20:05 - multiple projects at some point in your
20:06 - career so if anyone has any questions
20:08 - about what we covered in this video then
20:10 - feel free to ask in the comment section
20:12 - below and I'll do my best to answer
20:13 - those and if you have a preferred method
20:15 - for how you do this then I'd love to
20:16 - hear about that also now if you enjoy
20:18 - these tutorials and would like to
20:19 - support them then there are several ways
20:21 - you can do that the easiest ways to
20:22 - simply like
20:23 - video and give it a thumbs up and also
20:25 - it's a huge help to share these videos
20:26 - with anyone who you think would find
20:27 - them useful and if you have the means
20:29 - you can contribute through patreon and
20:30 - there's a link to that page in the
20:32 - description section below be sure to
20:33 - subscribe for future videos and thank
20:35 - you all for watching
20:46 - you

Cleaned transcript:

hey there how's it going everybody in this video I'm going to walk through how I personally handle multiple projects virtual environments and environment variables now when you're working on multiple projects at once it's easy to get your packages and dependencies mixed up and also it's hard to keep track of virtual environments and also you might have environment variables that are overriding each other and things like that so in this video I'll show you how I keep all of these separate and easy to work with so before I get started I just want to point out that this is how I personally manage these projects and environments it's definitely not the only way to do this and I'm not claiming it's the absolute best way to do this but it's something that has worked well for me up until this point so I figured I'd walk through how I do this and maybe it'll give you some ideas for how you can manage your projects but if you don't like this workflow then like I said there are plenty of other ways that you can accomplish this same thing so you have plenty of options now also I will be going over how I do this on my Mac and I apologize if you're on a Windows machine some of these steps will be similar on Windows but it's likely that a lot of this will be pretty different but I will leave a link to the page where I got a lot of these ideas for this workflow and I believe that they list the equivalent Windows commands on that website so I'll leave a link to that page in the description section below and with that said let's go ahead and get started okay so first of all I personally do a lot of work with data science libraries and packages so I use the Anaconda distribution and the Conda package manager now if you don't know what anaconda is it's basically an open source Python distribution that makes it easy to get up and running with different libraries and packages and it comes with its own package manager called Conda now Conda is similar to pip but certain things can be more easily installed through Conda now Conda isn't necessarily a replacement for pip so you can use them both interchangeably personally I actually use pip about 99% of the time and if there's something not available through pip then I will install it through Conda now Conda can also manage virtual environments and that is what I use in my projects so we'll see that in just a bit so I do have a separate video on installing anaconda and the basics of using Conda and I'll leave a link to that video in the description section below now I know that some people don't like anaconda for some reason but I've never really understood why that is but like I said this is just how I personally do things and my work from day to day okay so from this point on I'm just going to create a new project from scratch and we'll walk through the process of making sure that it is separate from our other projects so I'll go ahead and create a new project here called my project and we'll create an empty directory just called my underscore project and then we will CD into that directory okay so now I'm going to create my virtual environment using Conda so we need to figure out what version of Python and also what packages we'd like to use in this project so for example let's say that we wanted to create a project using the latest version of Python and the packages let's say flask SQL alchemy numpy and pandas so to do this we can say Conda create to create a new virtual environment and we want this name to be since I called this my project we'll call this my project underscore env and now we can pass in our starting dependencies so like I said we'll do flask SQL alchemy also numpy and pandas so then it's going to list all the dependencies for all those packages and if we want to proceed and we can just hit yes okay so once that's finished up it says here that we can activate this environment using this source activate command here and to deactivate we can do source deactivate so I'm gonna go ahead and clear my screen and activate this environment and once you have the environment activated it should add this to your prompt here in some parentheses saying so that you know that you're within your virtual environment so now that we're within our virtual environment if I do a pip list then we can see the packages that we installed and with the environment activated you can continue to add or remove any packages that you want but when you get to the point where you have everything that you need I'd like to create an environment Yama file that captures everything about our environment and can be used to build the same environment from scratch so let me go ahead and do this so that you can see what it looks like so I'll clear my screen and now to export this environment we can say Conda you I envy export and we want to export this to an environment dot yeah mole file now some people just use yml and some people use yam all spelled out either way should work fine so once that environment file is created let's go ahead and see what that looks like so you can either open it up or in a text editor or you can just display it here within the terminal so on Mac or Linux I'm just going to splay it on the terminal by adding that file so we can see that within this file here if I scroll down that it has the name of our environment and all of the dependencies with the exact version so someone else could grab this file and create the exact environment with just one command so now that we've seen what this environment file looks like I'm going to clear my screen so we could actually package up that environment yam will file with our project and then if someone wanted to replicate that environment all they would need to do is create their own project directory drop in that file and then they could do a Khanda env create and then they could just create with a dash F saying that they want to create from my file and then pass in that file now I'm not going to run this now since we already have that environment created but you can see how easy it would be to create that environment from scratch just using that file ok so now let's look at how we can manage our environment variables now environment variables are used in many different projects to you know set database URLs or hold secret keys or set a Python path and all kinds of different information so the environment variables allow us to access sensitive data without putting it directly in our projects code for everyone to see now some people just use global environment variables that they share amongst all different projects and that can work but then you have to be careful with naming and making sure that they're not overwriting each other so to separate these out the Conda environment the Conda environments come with some useful scripts that you can create so to create these scripts we need to put them in a specific location so we need to navigate to where our environment is located on the file system and to do this we need to first find out where our environment is located and to find that location we can say Konda env list and this is going to list out all of the environments currently on my machine and we can see that this one is the one that we just created this my project env now this is the location of this environment of this virtual environment so now I'm going to change directory to the location of that virtual environment and now that we're within our virtual environment directory we're going to create two different directory trees so that we can set environment variables now this is going to seem a little weird but I'll put a link to the instructions in the description section below now first we're going to create an activate directory and this is going to hold scripts that will run whenever our environment is activated so to create this directory we'll say make dirt P that means that the directory doesn't have to currently exist and we're going to say etc' khandha and this is going to be called activate dot d and now we're going to create a deactivate directory which is just the exact same except instead of activate D its deactivate D okay so now we have created this activate directory and this deactivate directory now within the activate directory we're going to create a file so I'll do a touch and then within that directory we're going to call this e and V underscore FAR's Sh and then we're going to create that exact same file in the deactivate directory also okay so now we can create the environment variables that we want to set within the activate script and then unset those environment variables within the deactivate script so let's edit these files and add some variables now you can edit those files and any text editor but I'm going to use my sublime text editor to open up that directory that we just created so I am here in my virtual environment directory and we created this etc' conda and here's our activate directory and our deactivate so I'm going to open up this activate env VARs and this deactivate env VARs now within the activate script let's create a fake database URI environment variable so at the top I'm going to specify that this is a bash script by saying bin SH and then underneath here I'll do an export of database underscore URI and set that equal to okay so this is kind of a actually I think this should be post SQL not entirely sure if that's the right connection string but anyways this is just a fake connection string to a test database here so this is something that you would use a an environment variable for is something like a connection to a database with the use username and password here so that you don't have to have the username and password actually within your projects code so whenever we activate our environment or virtual environment then it's going to set this database URI now within our deactivate script let's go ahead and unset this variable so again it will specify that this is a bash script with bin that's SH and then we will unset that database URI okay so once I have both of those files saved I'm going to quit out of our text editor here and now let me deactivate and reactivate our environment to see if those set properly so to deactivate this environment I can just say source D activate and you can see that now our environment our virtual environment has been deactivated and now if I reactivate that with source activate and that was called my underscore project underscore env and now let's echo out that database URI just to see if that was activated or see if this was set whenever we activated our virtual environment so that is database URI and you can see there that that environment variable was set when we activated our virtual environment so now if I deactivate this virtual environment say source the activate now if I try to echo out this database URI then you can see that now that doesn't exist because we unset that whenever we deactivated our virtual environment okay so so far we have our Python version our dependencies and the environment variables all separated out so for example I have another test project here that I've created in my projects directory called Cori MS underscore web so let me nag navigate to that project really quick and that is Cori MS under school or web and now let's look at the files I have available in here oh and actually I'm in the wrong location this is the virtual environment directory I really want to be in my projects directory kori MS underscore web so now if we look at the files that we have in here then we can see that we have an environment dot yam will file in here so let's take a quick look at that so we've got a simple environment yamo file here where we can see that the name of this virtual environment is kori ms underscore web and in our dependencies one thing to note here is that we're using Python 27 instead of Python 3 so you can have different versions of Python between different environments and we can see that the environment is using the same dependencies that we listed before except we're also including a sigh PI down here at the bottom now I've already created this environment from this Yambol file so let's navigate to the location of this and virtual environment and see if any variables are being set so to do that we can say khandha env list just like we did before and we can see it lists out all of our virtual environments here so I want to navigate to this virtual environment folder so I will CD to that directory and now let's open this up in a text editor so that we can see if we have any activate and deactivate scripts within here so I do have an activate script and I deactivate script and it's another database URI so this is basically the same thing that we had before except here at the end instead of test DB we're using a different database this core ems database so that's why it's beneficial to keep these environments separate so when we activate our other project it will set that and that environment variable to its database and when we deactivate and activate our core ems project it will correctly set the database to this database so let's activate this query MS environment really quick so if I close out of my text editor and we activate this with source activate core EMS under school web and then we echo out that database URI then we can see that our database URI now has that correct database for that project and also if we check our version of Python so I'll run a Python here you can see that this is using Python 2 7 for this project so we're able to switch between versions of Python as well which is extremely beneficial for different projects ok so we're almost finished up now for most people you could stop here and you've got a great way of separating out your projects and environments from each other but there's one more thing that I usually like to set up so when you're working on multiple projects sometimes it can be easy to forget to deactivate one project environment before working on another or maybe you'll try to run tests and be wondering why all your tests are failing only to realize that you haven't activated the virtual environment for that project and it's not seeing the correct dependencies and environment variables now my personal preference is to have something in place that checks when you navigate to our project whether that project has an environment DM will file and to activate that environment if it exists now there are programs out there that will do something like this for you so maybe you've heard of things like Auto env or dirty env and tools like that but for Conda I just prefer to use my own function to do this now I modified this function from some code that I found online and I will put a link to the original function in the description section below so that they're sure to get credit but basically to do this we need to write a bash function that checks for the virtual environment and automatically activates it if it finds one and then we need to set an environment variable called prompt command that will run this custom function before each bash prompt so let's open up my bash underscore profile file and we can see how we can create this function and environment variable so I'm just going to open this up in nano and this is in my home directory and it is the dot underscore bash profile I'm sorry that's dot bash underscore profile so if I scroll down here to the bottom then we can see this function and this environment variable okay so here's the function it's call kondeh auto envy and it checks if the environment dot llamo file exists and then it is grabbing the environment name from that environment dot yeah mol file and then it's checking if we're currently in that environment by checking this Conda prefix environment variable and then if we are not in our environment already then it does a source activate on that environment name that it plucked from the environment yeah mo file and like I said this is just a modified function that I grabbed offline and I will post a link to that in the description below now I have my prompt command environment variable here commented out where I'm exporting this because I didn't want the environments to be automatically activating during the video and you wondering what was going on so now I can uncomment out this line and then if we save this I'll do a control X and ay Y to save and then I'll save that now like I said when I added that function to that prompt command variable that will run that function before every prompt it's just a special bash environment variable that does that so now to make sure that that environment variable is set properly I'm going to quit out of mic terminal and then open this back up and I'll make this text a little larger here so now if we navigate to our project so within projects I'm navigating to this my project directory now I expected that to activate automatically ok it's because I misspelled environment here so I'm going to rename this file so I'm going to move that and spell this correctly so that is environment Djamel ok ok now you can see whenever I rename that to environment and spelled that correctly then that virtual environment did get activated automatically so we can see that we're in our my project a virtual environment right now so now we should have access to those environment variables that get set when this is activate and again I'm spelling these wrong sorry about that okay so now we can see that we are connected to our test database here or we have that database environment variable set so now if I navigate to my other project which is called core EMS web as soon as I navigate into there then it sets that core EMS web environment variable so now if we check that same database URI environment variable again we can see that now it's set to that different database so with that prompt command and Armit variable running that Khanda auto env function then we can see that the environment automatically gets activated so it changes the Python that we're using its using the project's dependencies and also it sets the environment variables just by navigating to the project folder that contains the environment yamo file so you don't need to deactivate the other project that you're working on or anything like that beforehand so I like this feature because it keeps you from needing to remember to switch back and forth between the correct environments or even needing to remember the name of your environment since they are in the environment yeah mol file it just does everything for you automatically okay so I think that is going to do it for this video I hope that this gave you some good ideas for how you can juggle multiple projects even if you're working on projects with different Python versions or different Python packages and a lot of different environment variables it should be easy to keep everything separate using a strategy like this now like I said this is how I personally do this but even if you aren't using anaconda or the Conda environments then you can still do something like this using virtual env and tools like Auto env so definitely see what's easiest for you to put together and see if you can get a similar workflow because most likely you'll need to learn how to handle multiple projects at some point in your career so if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you have a preferred method for how you do this then I'd love to hear about that also now if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways to simply like video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
