With timestamps:

00:00 - hey how's it going everybody in this
00:02 - video I'm going to do something slightly
00:03 - different from my other tutorials so
00:06 - from time to time I'll run into a
00:07 - problem that can be solved with a quick
00:10 - and easy Python script now I thought I
00:12 - could start recording these videos so
00:14 - you can see how these scripts can help
00:15 - automate a process that would otherwise
00:17 - be boring or repetitive or just prone to
00:20 - mistakes so let me know how you all like
00:23 - this kind of video and if you find it
00:24 - useful I'm hoping that by seeing how we
00:26 - solve these simple real-world problems
00:28 - that it might give you some ideas for
00:30 - how you can automate your own repetitive
00:32 - tasks so the problem that I ran into
00:34 - today was that I downloaded a lot of
00:37 - videos from a free class online that I
00:39 - wanted to watch while I was traveling
00:41 - back home for the holidays but when I
00:43 - downloaded these videos the titles were
00:46 - formatted in such a way that they
00:48 - wouldn't be sorted properly on my
00:49 - phone's playlist so this is just a small
00:52 - example here this isn't the actual class
00:55 - files that I downloaded but this is just
00:58 - a small example that I made up so that
00:59 - you can kind of get an idea of what the
01:01 - problem was so you can see here that
01:03 - they put a title at the beginning of the
01:06 - file name and then they have a dash and
01:07 - then they had the course name and then
01:10 - they had a number which shows in what
01:12 - order these videos should be watched so
01:15 - for example this number 1 is the first
01:17 - video in the class the number two should
01:20 - be the second video number three should
01:21 - be the third and so on but these file
01:24 - names get sorted alphabetically so you
01:25 - can see how them having a custom title
01:29 - at the beginning of the file name can
01:31 - make the order in which these videos are
01:33 - supposed to be played all out of whack
01:35 - so you can imagine if I had hundreds of
01:37 - videos for a specific class how this
01:40 - would start to be kind of a pain if I
01:42 - was doing this on my phone and I watched
01:44 - the first video and then I had to scroll
01:46 - through a bunch of videos to find the
01:48 - second one it'd be really nice if they
01:49 - were just in order so that they could
01:51 - just autoplay in the order that they're
01:54 - supposed to so really I want to rename
01:56 - all these files and I want this number
01:58 - here to be at the beginning now I could
02:01 - go in and do this manually but the
02:04 - classes that I've downloaded were a lot
02:06 - more than this there were hundreds of
02:08 - them so it would take forever to go in
02:10 - and manually rename all of these so that
02:12 - the number is
02:13 - at the beginning so I'd really just like
02:15 - to write a quick and easy Python script
02:17 - to do this for me so let's go ahead and
02:18 - do that okay so I have a blank Python
02:21 - file here and the first thing I want to
02:23 - that I'm going to do is import the OS
02:26 - module this lets us navigate the file
02:28 - system and change file names and things
02:30 - like that so now one of the first things
02:32 - I'm going to want to do is to change my
02:35 - directory to the directory that holds
02:37 - all of my files and we can do that with
02:39 - OS dot CH dir and then we need to put in
02:44 - the path to the folder that holds those
02:46 - video files now there might be a faster
02:48 - way to do this but to get a file path
02:51 - quickly what I like to do is just open
02:53 - up finder and then drag the folder that
02:57 - I want into the terminal and then it
03:00 - will autocomplete that entire path and
03:02 - then from there I can copy that and then
03:04 - just paste it into my program here and
03:06 - if I save that now I'm going to check
03:09 - and make sure that I'm in the directory
03:11 - that I want to be in so I'm going to do
03:13 - a print of an OS and then a get current
03:16 - working directory and I'm going to run
03:19 - that and you can see that it prints out
03:21 - after a changes directory to this
03:23 - location then you can see that we are in
03:25 - the correct location where our files are
03:27 - so now that we know that we're in the
03:29 - right directory let's go ahead and try
03:31 - to print out all of the files that are
03:33 - in this directory so what I'm going to
03:34 - do is I'm going to do a for F in OS dot
03:39 - lister and this will list everything in
03:42 - the directory and just to start off here
03:44 - I'm just going to do a print F to see if
03:47 - I'm getting all the correct file names
03:49 - and you can see here at the output that
03:51 - it did print out all of those file names
03:52 - so you're going to kind of see that when
03:54 - you write scripts like this that there's
03:56 - a lot of trial and error so instead of
03:58 - just directly jumping in and trying to
04:01 - write out a solution you'll likely want
04:04 - to do one thing at a time so at first we
04:06 - change directory and then we printed
04:08 - that out to make sure we're in the right
04:09 - spot and then we loop through all the
04:11 - files in that directory and we printed
04:13 - out all those files to make sure that we
04:14 - were getting those correctly and then we
04:16 - can kind of just build up a solution one
04:18 - step at a time so now that we can see
04:20 - that we have all of our file names here
04:22 - let's go ahead and split off the
04:24 - extension from the rest of the file name
04:27 - the way that we do this is we do this
04:29 - with a command called OS dot split text
04:33 - and we'll pass in that file now if I
04:36 - print this out then you can see that
04:39 - what it gives us on actually that's not
04:42 - oh s dot split text that's Oh s dot path
04:45 - dot split text so if I save that and run
04:48 - that you can see what it gives us is a
04:51 - tuple and each tuple the first element
04:54 - has this file name here without the
04:57 - extension and then the second part is
04:59 - the extension so I'm going to use this
05:01 - tuple and I'm going to set this equal to
05:04 - two variables so the first one I'm going
05:06 - to call file name and then a comma and
05:08 - then the next one I'm going to call file
05:10 - ext and I'll just set that equal to
05:12 - those tuples and now underneath here if
05:16 - I was to print out the file name then we
05:20 - have the file name without the extension
05:21 - so now let's remember what we're trying
05:23 - to do we're trying to rename this file
05:25 - to where these numbers are at the
05:27 - beginning and in this specific example
05:30 - we can see that there are these hyphens
05:32 - between the title and then the course
05:35 - name and then the number so let's see
05:37 - what happens if we take this file name
05:39 - and do a split and we'll do a split on
05:43 - that - so if I save that and run it now
05:48 - you can see that we have three elements
05:50 - we have the title and the course name
05:52 - and then the number so now just like the
05:56 - line above I'm going to take what we
05:58 - just printed out and I'm going to set
06:00 - three different variables here I'm going
06:02 - to call this F title and then I'll call
06:06 - the second one F course and then I'll
06:08 - call the last one F num and I'll set
06:12 - that equal to those elements so now just
06:14 - to make sure that we did that right I'll
06:16 - print out one of these at a time so you
06:20 - can see how we have the title and if I
06:23 - print out the course they should all be
06:25 - the same and if I copy and print the
06:28 - number then they should all be different
06:29 - there so now let's see if I can print
06:31 - out a formatted string in a way that I
06:34 - want my file to be represented so a
06:38 - formatted string I can put in place
06:40 - holder
06:40 - here so let's say that I want the number
06:43 - here with a dash and then I want the
06:46 - course name and then a dash and then I
06:49 - want the title here at the end and then
06:51 - I'll also want the extension so I'm
06:53 - going to put in a placeholder for that
06:55 - too
06:55 - so I'll do a dot format and this is
06:58 - where we fill in what those placeholders
07:00 - were so first I wanted the number so
07:03 - I'll copy that and paste it in first and
07:05 - then I wanted the course so I'll grab
07:07 - that and put that in and then I wanted
07:10 - the title so I'll copy that and put that
07:12 - in and then I also wanted the file
07:15 - extension here so I'll save that and
07:17 - actually just to make this consistent
07:19 - with the rest of the program I'm going
07:20 - to call this F underscore ext and I'm
07:23 - going to call this F underscore name
07:26 - there so let me replace those okay so
07:29 - now let me print this out now you can
07:31 - see that this is close to what we want
07:33 - now we do have some weird spaces here
07:36 - between these hyphens and before the
07:38 - file extension so let's go ahead and
07:40 - take care of that so in order to remove
07:43 - those I'm going to take these three
07:46 - variables here and I'm just going to set
07:49 - them equal to their same variable but
07:54 - instead let me copy all three of these
07:57 - here and instead I'm going to do a dot
08:01 - strip on the end and this will strip
08:04 - away any white space that is on the left
08:06 - or the right so now if I save that and
08:09 - run it you can see that now when we
08:11 - print this out that those spaces are
08:13 - taken care of so this is looking pretty
08:15 - good we're just about to the point where
08:17 - we're finished up now I could probably
08:20 - go ahead and rename these files to this
08:22 - output and be done with it it would sort
08:25 - a lot of the files in the way that I
08:27 - want them sorted but there's a couple of
08:30 - things here for personal preference I
08:31 - don't like like for example I don't like
08:33 - the number sign being here at the
08:35 - beginning of the file name so one thing
08:37 - I'm going to do is I'm just going to
08:38 - strip that off by grabbing everything
08:42 - from the second character on so I'm
08:45 - going to go ahead and open this up and
08:47 - do a one and then a colon there to go to
08:49 - the end of that string now if I run that
08:52 - then you can see that now it stripped
08:54 - off that number sign there at the
08:56 - beginning and another thing that I
08:58 - notice here is that if we're going to be
09:00 - sorting these by the filenames that
09:02 - actually this one and this 10 will most
09:06 - likely be next to each other so after it
09:09 - plays the first video the next one in
09:12 - line will probably be the 10 because
09:14 - it'll just sort it based off of the
09:17 - first character here which is a 1 so all
09:19 - the ones will be grouped together so one
09:21 - way that we can get around this is to
09:23 - pad the single digits with zeros so
09:26 - instead it'll be 0 1 0 2 and then
09:29 - that'll put all of the single digits at
09:32 - the beginning and then the 10 will be at
09:34 - the end so the way that you can do a 0
09:36 - padded string is with a method called Z
09:40 - fill on the string so I'm going to go
09:42 - I'm up here to the number and I'm going
09:43 - to do a Z fill and then the parameter
09:46 - that you pass in is how wide you want
09:48 - the string to be so I want the string to
09:50 - be two digits wide so 0 1 so if I save
09:53 - that and run it now you can see that all
09:55 - my single digits are padded with a 0 and
09:58 - if the digit is already 2 as the 10 is
10:03 - then it won't do anything to it so now
10:06 - this is looking good now we can pretty
10:08 - much rename this in any way that we want
10:10 - now based on our personal preference so
10:12 - really now that I'm looking at it I kind
10:16 - of don't think that I need the course
10:18 - name there either so I'm just going to
10:20 - go ahead and take that out so I'm going
10:22 - to take out the placeholder for the
10:24 - course and then take it out of the
10:25 - format and if I rerun it now you can see
10:28 - that that's gone and this is looking
10:29 - good to me so I'm going to go ahead and
10:31 - rename all of the files to this new
10:34 - format so I'm going to go ahead and take
10:37 - away this print statement and that
10:39 - string that we printed out I'm just
10:41 - going to set that to a variable called
10:42 - new name and set that equal to that and
10:45 - now if we remember here we're within a
10:47 - for loop so we have the original file
10:49 - here as f so to rename this I'm just
10:52 - going to do an OS dot rename and within
10:56 - here I'm going to pass in the original
10:58 - file and then what I want to rename it
11:00 - to is this new name so I'll save that
11:04 - and now I'm going to go ahead
11:06 - and before I run it I'm just going to
11:08 - let this take up half the screen here
11:10 - and I'm going to let the folder that I
11:12 - was within take up half the screen here
11:14 - and you can see that whenever I run this
11:17 - I'm going to go ahead and run it now and
11:18 - within this directory it did exactly
11:21 - what we wanted so it took our new name
11:23 - and it replaced the old file name with
11:26 - the new so you can see how a simple
11:27 - script like this would save a ton of
11:30 - time if you had tens or hundreds of
11:33 - files that you had to rename instead of
11:35 - going in and doing them manually which
11:38 - also you could easily make mistakes this
11:41 - allows you to do everything all in one
11:43 - shot and it's less prone to errors and
11:44 - also you can save these short simple
11:46 - scripts for a later use if you ever run
11:48 - into the problem again so that's going
11:50 - to do it for this video let me know what
11:52 - you guys think about me doing this kind
11:54 - of video from time to time I know that I
11:56 - didn't go into as much step-by-step
11:59 - detail the kind of the idea here is that
12:01 - if you see a specific problem being
12:04 - solved with a quick and easy script that
12:06 - maybe it'll give you an idea for how you
12:08 - can solve some real world problems and
12:10 - easily automate some of the tasks that
12:13 - maybe you had to do that were repetitive
12:15 - or prone to mistakes and things like
12:18 - that so hopefully you guys found this
12:19 - useful if you have any questions just
12:21 - ask in the comment section below
12:22 - be sure to subscribe for future videos
12:25 - and thank you all for watching

Cleaned transcript:

hey how's it going everybody in this video I'm going to do something slightly different from my other tutorials so from time to time I'll run into a problem that can be solved with a quick and easy Python script now I thought I could start recording these videos so you can see how these scripts can help automate a process that would otherwise be boring or repetitive or just prone to mistakes so let me know how you all like this kind of video and if you find it useful I'm hoping that by seeing how we solve these simple realworld problems that it might give you some ideas for how you can automate your own repetitive tasks so the problem that I ran into today was that I downloaded a lot of videos from a free class online that I wanted to watch while I was traveling back home for the holidays but when I downloaded these videos the titles were formatted in such a way that they wouldn't be sorted properly on my phone's playlist so this is just a small example here this isn't the actual class files that I downloaded but this is just a small example that I made up so that you can kind of get an idea of what the problem was so you can see here that they put a title at the beginning of the file name and then they have a dash and then they had the course name and then they had a number which shows in what order these videos should be watched so for example this number 1 is the first video in the class the number two should be the second video number three should be the third and so on but these file names get sorted alphabetically so you can see how them having a custom title at the beginning of the file name can make the order in which these videos are supposed to be played all out of whack so you can imagine if I had hundreds of videos for a specific class how this would start to be kind of a pain if I was doing this on my phone and I watched the first video and then I had to scroll through a bunch of videos to find the second one it'd be really nice if they were just in order so that they could just autoplay in the order that they're supposed to so really I want to rename all these files and I want this number here to be at the beginning now I could go in and do this manually but the classes that I've downloaded were a lot more than this there were hundreds of them so it would take forever to go in and manually rename all of these so that the number is at the beginning so I'd really just like to write a quick and easy Python script to do this for me so let's go ahead and do that okay so I have a blank Python file here and the first thing I want to that I'm going to do is import the OS module this lets us navigate the file system and change file names and things like that so now one of the first things I'm going to want to do is to change my directory to the directory that holds all of my files and we can do that with OS dot CH dir and then we need to put in the path to the folder that holds those video files now there might be a faster way to do this but to get a file path quickly what I like to do is just open up finder and then drag the folder that I want into the terminal and then it will autocomplete that entire path and then from there I can copy that and then just paste it into my program here and if I save that now I'm going to check and make sure that I'm in the directory that I want to be in so I'm going to do a print of an OS and then a get current working directory and I'm going to run that and you can see that it prints out after a changes directory to this location then you can see that we are in the correct location where our files are so now that we know that we're in the right directory let's go ahead and try to print out all of the files that are in this directory so what I'm going to do is I'm going to do a for F in OS dot lister and this will list everything in the directory and just to start off here I'm just going to do a print F to see if I'm getting all the correct file names and you can see here at the output that it did print out all of those file names so you're going to kind of see that when you write scripts like this that there's a lot of trial and error so instead of just directly jumping in and trying to write out a solution you'll likely want to do one thing at a time so at first we change directory and then we printed that out to make sure we're in the right spot and then we loop through all the files in that directory and we printed out all those files to make sure that we were getting those correctly and then we can kind of just build up a solution one step at a time so now that we can see that we have all of our file names here let's go ahead and split off the extension from the rest of the file name the way that we do this is we do this with a command called OS dot split text and we'll pass in that file now if I print this out then you can see that what it gives us on actually that's not oh s dot split text that's Oh s dot path dot split text so if I save that and run that you can see what it gives us is a tuple and each tuple the first element has this file name here without the extension and then the second part is the extension so I'm going to use this tuple and I'm going to set this equal to two variables so the first one I'm going to call file name and then a comma and then the next one I'm going to call file ext and I'll just set that equal to those tuples and now underneath here if I was to print out the file name then we have the file name without the extension so now let's remember what we're trying to do we're trying to rename this file to where these numbers are at the beginning and in this specific example we can see that there are these hyphens between the title and then the course name and then the number so let's see what happens if we take this file name and do a split and we'll do a split on that so if I save that and run it now you can see that we have three elements we have the title and the course name and then the number so now just like the line above I'm going to take what we just printed out and I'm going to set three different variables here I'm going to call this F title and then I'll call the second one F course and then I'll call the last one F num and I'll set that equal to those elements so now just to make sure that we did that right I'll print out one of these at a time so you can see how we have the title and if I print out the course they should all be the same and if I copy and print the number then they should all be different there so now let's see if I can print out a formatted string in a way that I want my file to be represented so a formatted string I can put in place holder here so let's say that I want the number here with a dash and then I want the course name and then a dash and then I want the title here at the end and then I'll also want the extension so I'm going to put in a placeholder for that too so I'll do a dot format and this is where we fill in what those placeholders were so first I wanted the number so I'll copy that and paste it in first and then I wanted the course so I'll grab that and put that in and then I wanted the title so I'll copy that and put that in and then I also wanted the file extension here so I'll save that and actually just to make this consistent with the rest of the program I'm going to call this F underscore ext and I'm going to call this F underscore name there so let me replace those okay so now let me print this out now you can see that this is close to what we want now we do have some weird spaces here between these hyphens and before the file extension so let's go ahead and take care of that so in order to remove those I'm going to take these three variables here and I'm just going to set them equal to their same variable but instead let me copy all three of these here and instead I'm going to do a dot strip on the end and this will strip away any white space that is on the left or the right so now if I save that and run it you can see that now when we print this out that those spaces are taken care of so this is looking pretty good we're just about to the point where we're finished up now I could probably go ahead and rename these files to this output and be done with it it would sort a lot of the files in the way that I want them sorted but there's a couple of things here for personal preference I don't like like for example I don't like the number sign being here at the beginning of the file name so one thing I'm going to do is I'm just going to strip that off by grabbing everything from the second character on so I'm going to go ahead and open this up and do a one and then a colon there to go to the end of that string now if I run that then you can see that now it stripped off that number sign there at the beginning and another thing that I notice here is that if we're going to be sorting these by the filenames that actually this one and this 10 will most likely be next to each other so after it plays the first video the next one in line will probably be the 10 because it'll just sort it based off of the first character here which is a 1 so all the ones will be grouped together so one way that we can get around this is to pad the single digits with zeros so instead it'll be 0 1 0 2 and then that'll put all of the single digits at the beginning and then the 10 will be at the end so the way that you can do a 0 padded string is with a method called Z fill on the string so I'm going to go I'm up here to the number and I'm going to do a Z fill and then the parameter that you pass in is how wide you want the string to be so I want the string to be two digits wide so 0 1 so if I save that and run it now you can see that all my single digits are padded with a 0 and if the digit is already 2 as the 10 is then it won't do anything to it so now this is looking good now we can pretty much rename this in any way that we want now based on our personal preference so really now that I'm looking at it I kind of don't think that I need the course name there either so I'm just going to go ahead and take that out so I'm going to take out the placeholder for the course and then take it out of the format and if I rerun it now you can see that that's gone and this is looking good to me so I'm going to go ahead and rename all of the files to this new format so I'm going to go ahead and take away this print statement and that string that we printed out I'm just going to set that to a variable called new name and set that equal to that and now if we remember here we're within a for loop so we have the original file here as f so to rename this I'm just going to do an OS dot rename and within here I'm going to pass in the original file and then what I want to rename it to is this new name so I'll save that and now I'm going to go ahead and before I run it I'm just going to let this take up half the screen here and I'm going to let the folder that I was within take up half the screen here and you can see that whenever I run this I'm going to go ahead and run it now and within this directory it did exactly what we wanted so it took our new name and it replaced the old file name with the new so you can see how a simple script like this would save a ton of time if you had tens or hundreds of files that you had to rename instead of going in and doing them manually which also you could easily make mistakes this allows you to do everything all in one shot and it's less prone to errors and also you can save these short simple scripts for a later use if you ever run into the problem again so that's going to do it for this video let me know what you guys think about me doing this kind of video from time to time I know that I didn't go into as much stepbystep detail the kind of the idea here is that if you see a specific problem being solved with a quick and easy script that maybe it'll give you an idea for how you can solve some real world problems and easily automate some of the tasks that maybe you had to do that were repetitive or prone to mistakes and things like that so hopefully you guys found this useful if you have any questions just ask in the comment section below be sure to subscribe for future videos and thank you all for watching
