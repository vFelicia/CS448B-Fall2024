With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning about
00:03 - functions now functions are basically
00:05 - some instructions packaged together that
00:07 - perform a specific task so let's create
00:10 - our first function and see why these are
00:11 - so beneficial Now to create a function
00:14 - we'll use the defa keyword which I
00:16 - believe stands for definition and let's
00:18 - just make a simple function here to get
00:20 - started I'll call this hello Funk now we
00:23 - have parentheses there because that is
00:25 - where our parameters will go when we add
00:27 - those in but we don't have any
00:28 - parameters just yet so that will be
00:31 - empty for now now it is possible to
00:33 - write a function and not have any code
00:35 - in it but we can't leave it completely
00:37 - blank uh but if we want to fill this
00:40 - function in later then we can use this
00:43 - pass keyword and basically that pass
00:45 - keyword is saying that we don't want to
00:47 - do anything with this for now but it
00:48 - won't throw any errors for leaving it
00:50 - blank so if we want to run our function
00:54 - then we can just say hello Funk and put
00:57 - in these parentheses and we need to add
01:00 - those parentheses after the function in
01:01 - order to execute it if we don't have
01:04 - those parentheses there then it'll be
01:06 - equal to the function itself um so let's
01:09 - actually see what that looks like so I'm
01:11 - going to print out that hello function
01:14 - without the parentheses in place uh
01:16 - which means that we're not executing the
01:18 - function so let me run that and we can
01:20 - see when we printed that out that it
01:22 - prints out that this is a function in a
01:24 - certain location in memory but it didn't
01:27 - execute the function so to execute it
01:29 - then we add in these parentheses so now
01:32 - if I run this then now it just gives us
01:35 - none because we're not doing anything
01:37 - with this function yet and it doesn't
01:39 - have a return value so let's go ahead
01:41 - and put some code into our function so
01:44 - first we'll just put in a print
01:46 - statement and we'll just print out some
01:49 - text that says hello function with an
01:52 - exclamation point and now that we're
01:54 - actually running that print statement
01:55 - from within the function we don't need
01:57 - to print out that executed function we
02:01 - can just execute that function and it
02:03 - should run that print statement so we'll
02:05 - run that so we can see that we executed
02:07 - our function here it came within our
02:10 - function and ran our print statement now
02:12 - one benefit of functions is that they
02:14 - allow us to reuse code without repeating
02:16 - ourselves so let's say for example that
02:18 - we had to print out some text in several
02:20 - locations throughout our program so it
02:23 - might look something like this so let me
02:25 - copy this and I'll comment out our uh
02:27 - function execution for now and I'm just
02:29 - going to paste this in about four times
02:32 - so now if we run this then as we expect
02:35 - it prints out our four messages now
02:38 - imagine our boss came to us and told us
02:40 - that uh the text was a little bit off
02:42 - and that we didn't want to have an
02:43 - exclamation point at the end of the
02:45 - string well the way that we have it now
02:48 - we'd have to come in here and change all
02:50 - of those manually so I'd come in and
02:52 - change all these man messages to have a
02:55 - period instead now that was only four
02:57 - changes to make there but in some instan
03:00 - that can be in hundreds of locations in
03:02 - multiple different files so that's the
03:04 - first benefit of functions it allows us
03:07 - to put code with a specific purpose into
03:09 - a single location so instead of printing
03:12 - those four statements uh what we can
03:15 - instead do is run our function four
03:18 - times so I will remove that and
03:20 - uncomment our function and we're going
03:22 - to execute this four different times so
03:25 - now if we run that then we can see that
03:28 - it ran our function four times and
03:30 - executed our print statement four
03:31 - different times but now if our boss came
03:33 - to us and asked us to remove that
03:35 - exclamation point then it doesn't matter
03:37 - if this is spread out over a hundred
03:39 - different lines or a 100 different
03:41 - locations we can just update it in this
03:43 - one spot so I can change this to a
03:46 - period and now if we run this then we
03:48 - can see that those changes are seen
03:50 - everywhere that the function is called
03:52 - now this is called keeping your code dry
03:55 - which stands for don't repeat yourself
03:58 - it's a common mistake for people new to
04:00 - programming to repeat the same things
04:01 - throughout their code when really they
04:03 - could either put their code into certain
04:05 - variables or functions so that it's in a
04:08 - single location so we saw earlier that
04:11 - since we aren't returning anything from
04:13 - our function uh it was actually equal to
04:15 - none so what does it mean for uh our
04:19 - function to return something now this is
04:21 - where functions become really powerful
04:23 - because it allows us to operate on some
04:25 - data and then pass the result to
04:27 - whatever called our function so instead
04:29 - of of printing this string hello
04:31 - function within here let's instead
04:34 - return this okay so what does this mean
04:36 - exactly this means that when we execute
04:38 - our function it's actually going to be
04:40 - equal to our return value so these
04:43 - executed functions here are actually
04:45 - equal to the string hello function so
04:48 - right now if we run this then it doesn't
04:51 - give us any results because it's just a
04:53 - string that we're not doing anything
04:55 - with but if instead we print this so me
05:00 - print that executed function and if we
05:03 - run that then we can see that it prints
05:05 - out our string so basically think of a
05:08 - function as a machine that takes input
05:11 - and produces a result when you execute a
05:14 - function you can think of it almost like
05:16 - a black box you don't need to know
05:18 - exactly how it's doing what it's doing
05:20 - you're mainly concerned about the input
05:22 - and the return value so in this simple
05:24 - example here we don't have any input and
05:27 - we can see that the return value is a
05:29 - string
05:30 - um now don't get me wrong it's useful to
05:32 - know what a function is doing but when
05:34 - you're first getting started don't get
05:35 - caught up on understanding every detail
05:38 - of what every function does just focus
05:41 - on the input and what's returned so for
05:44 - example when we call the Len function on
05:47 - a string so if I print out Len of this
05:51 - string test if I run this then as we saw
05:55 - in a previous video this just returns an
05:57 - integer that is the number of of
05:59 - characters in our string so we have no
06:02 - idea what the code that produces that
06:04 - result looks like but we do know that we
06:07 - passed in a string and that it returned
06:09 - this integer and we'll see why here in a
06:11 - bit why looking at functions in this way
06:14 - will help you become better when working
06:16 - with python because we can treat the
06:18 - return value just like the data type
06:21 - that it is and understanding this will
06:23 - allow you to chain together some
06:24 - functionality so we know our hello
06:27 - function returns a string so we can
06:30 - treat that executed function just like a
06:32 - string so if we remember back to our
06:34 - string Methods remember that we can
06:36 - uppercase a string with upper so really
06:40 - we can take this executed function and
06:42 - just chain uper onto the end of it so
06:46 - now if we run this now we can see that
06:49 - our executed function returned the
06:51 - string hello function and then we were
06:53 - able to use the string method upper on
06:56 - that returned value to uppercase the
06:58 - string um okay so now let's look at how
07:01 - we can pass arguments to our function
07:04 - and real quick I'm going to remove that
07:07 - uper method so to be able to pass
07:09 - arguments to our function we'll need to
07:11 - create some parameters here within our
07:13 - parentheses so let's say that we wanted
07:16 - to customize the greeting that our
07:18 - function returns so let's create a uh a
07:21 - parameter called greeting and now within
07:24 - our function we'll return a string where
07:26 - we use that greeting instead of of our
07:30 - uh hello textt that we had before so now
07:33 - I'll just pass this in with a DOT format
07:36 - so now before we run this we have to
07:38 - pass in that greeting argument when we
07:41 - execute our function if we don't then
07:43 - we'll get an error so actually let's go
07:45 - ahead and run this and see this error so
07:48 - we can see that when we ran that it says
07:50 - that hello Funk is missing one required
07:54 - positional argument greeting so let's
07:56 - pass in that greeting argument to our
07:58 - hello function and to do that we can
08:01 - just pass it in directly here when we
08:03 - call our function so I'm just going to
08:05 - pass in uh high as our string so now if
08:09 - we run this then we can see that when we
08:11 - passed in that string High into our
08:13 - function that it set that greeding
08:16 - variable equal to the string high and
08:19 - then returned the string High function
08:22 - now this greeding variable doesn't
08:24 - affect any variables outside of the
08:26 - function its scope is only local to
08:29 - theun function which is nice because we
08:31 - don't have to worry about it affecting
08:33 - anything we don't want it to affect so
08:36 - and if you want to learn more about
08:38 - python scope then I do have a detailed
08:40 - video going in depth as to how that
08:42 - works exactly and I'll leave a link to
08:44 - that video in the description section
08:46 - below okay so right now this greeting
08:48 - parameter is a required argument and
08:51 - that is because it doesn't have a
08:53 - default value now if we had a default
08:55 - value then it would just fall back to
08:57 - the default value whenever we didn't
08:59 - pass that argument in so let's see an
09:02 - example of this so let's say that we
09:05 - also want to be able to pass a name to
09:07 - our hello function and it'll return a
09:09 - greeting and the name so we can add that
09:13 - to our parameters by putting in a comma
09:16 - here and saying that we also want to
09:18 - accept this name parameter but let's say
09:21 - that if no name is passed in then we
09:23 - want to have a default value of U so we
09:26 - can just say name is equal to U and now
09:30 - let's add that to our return string so
09:33 - I'll put in a comma space and then
09:36 - another placeholder and we'll pass in
09:39 - that name so what this is going to do is
09:41 - it'll return a greeting and a name
09:43 - separated by a comma and a space so if
09:46 - we run this then we can see that even
09:49 - though we didn't pass in a value for the
09:51 - name argument when we executed this
09:53 - function it didn't throw an error and
09:55 - instead Ed the default value that we
09:58 - specified as U but if we want to pass in
10:01 - a value then it will use that value
10:03 - instead so when we execute this function
10:07 - if I was to say name is equal to and
10:10 - we'll say Corey and run that then now we
10:12 - can see that printed out the greeting
10:14 - with the name that we passed in um now
10:17 - your required positional arguments have
10:19 - to come before your keyword arguments
10:22 - now if you try to create a function with
10:24 - those out of order then it's going to
10:26 - give you an error now this is a little
10:28 - more advanced topic topic that tripped a
10:30 - lot of people up but at some point
10:32 - you'll probably run across a function in
10:34 - Python uh that looks something like this
10:37 - so I'll say def student info and you
10:41 - might see something where you see this
10:43 - star args and star star quars and so let
10:48 - me just go ahead and within this new
10:50 - function here I will print out args and
10:54 - I'll also print out quars so let's not
10:57 - really worry about this function name
10:58 - for now it's the arguments that I want
11:00 - to focus on so seeing this star args and
11:04 - star star quars can seem confusing at
11:06 - first but basically all it's doing is
11:09 - allowing us to accept an arbitrary
11:12 - number of positional or keyword
11:14 - arguments so for example let's say that
11:16 - this student info function takes
11:19 - positional arguments that represent the
11:21 - classes that the student is taking plus
11:24 - the keyword arguments passed in will be
11:26 - random information about the student so
11:29 - so you can see in both of those examples
11:31 - we don't know how many of these
11:33 - positional or keyword arguments there
11:35 - will be and that's why we use star args
11:38 - and star star quars and the names don't
11:41 - have to be args and quars but that's a
11:44 - convention that you'll see a lot so it's
11:46 - always good to stick with convention so
11:48 - that people can understand your code so
11:50 - let's call this function with some
11:52 - random values so I'm going to say
11:54 - student info and first we want to pass
11:57 - in some positional arguments of the
11:59 - classes that they're taking so we'll say
12:01 - math and art and now for our keyword
12:04 - arguments we'll pass in some random
12:06 - information about the student so we'll
12:09 - say name is equal to John and age is
12:12 - equal to 22 so now if we run this then
12:16 - we can see that when we printed the args
12:19 - it's actually a tupal with all of our
12:22 - positional arguments and our quars are a
12:26 - dictionary with all of our keyword
12:29 - values so once you have that tupal and
12:31 - that dictionary then you'll be able to
12:32 - do whatever you want with that
12:34 - information now sometimes you might see
12:36 - a function call with arguments using the
12:39 - star or double star now when it's used
12:42 - in that context it will actually unpack
12:44 - a sequence or dictionary and pass those
12:47 - values into the function individually so
12:50 - to see what I mean let's make a list in
12:52 - a dictionary of everything that we just
12:54 - passed into our function and just to
12:56 - clear up some room here I'm going to go
12:58 - ahead and delete the hello function that
13:00 - we started off with so now I'm going to
13:03 - create a list called courses and I'm
13:06 - going to set this equal to math and art
13:09 - that we passed in before and instead of
13:11 - a tupal I'm going to make that a list so
13:13 - now for the student info I'm going to
13:16 - create a dictionary called info and set
13:19 - that equal to those values so now let me
13:22 - get rid of our positional and keyword
13:24 - arguments here so let's say that we
13:26 - wanted to pass all of these courses in
13:29 - as our positional arguments and the info
13:32 - dictionary as our keyword arguments so
13:35 - if we just pass these in as is and I
13:37 - passed in courses and info now if we run
13:41 - this then we can see that this might not
13:44 - be exactly what we thought instead of
13:46 - passing the values in individually and
13:49 - instead passed in the complete list and
13:52 - the complete dictionary as positional
13:54 - arguments so if we use the single star
13:57 - in front of our list and the double star
14:00 - in front of our dictionary then it will
14:02 - actually unpack these values and pass
14:04 - them in individually so basically it
14:06 - will be the equivalent to our previous
14:09 - execution uh where we pass them in
14:11 - individually so to see what I mean let's
14:13 - add a star in front of this courses to
14:16 - unpack those values and a star star in
14:20 - front of our dictionary to unpack those
14:23 - keyword values so now if we run this and
14:26 - we can see that we got what we had
14:27 - before um we can see that when our
14:30 - function prints args it's the values
14:32 - from our list that we unpacked and our
14:35 - quars is equal to the dictionary values
14:37 - that we unpacked now I know that's a
14:39 - little confusing especially to you know
14:41 - get the idea that whenever you're
14:43 - passing these in that it unpacks the
14:45 - values and within here it's for
14:47 - accepting an arbitrary number of
14:49 - positional or keyword values but uh it's
14:52 - a little more advanced of a topic and I
14:55 - know it's confusing but hopefully it
14:57 - makes some sense and you'll be able to
14:58 - better understand understand what's
14:59 - going on if you ever run into something
15:01 - like that okay so lastly I wanted to run
15:04 - through an example that ties together
15:06 - everything we've learned so far in this
15:07 - series of videos so I have some code
15:10 - here in my Snippets file that I'm going
15:12 - to grab real quick and paste into the
15:15 - file that we've been working with so now
15:18 - let me lower this output a little bit so
15:20 - that we can see everything here now
15:22 - these are actually a couple of functions
15:23 - that I grabbed in the python standard
15:25 - Library I modified them very slightly
15:27 - but it's basically the same and I wanted
15:29 - to show that even though we've only gone
15:31 - over the fundamentals we're already able
15:33 - to look at some code from within the
15:35 - standard Library itself and understand
15:37 - what's going on so at the top here we
15:39 - have a list called month days and this
15:42 - has the number of days in each month now
15:45 - the first index here is just a
15:47 - placeholder that's not going to get used
15:49 - um we're only going to be accessing
15:51 - indexes one through 12 since those are
15:54 - the months and then we have a function
15:56 - here called is Leap which determines if
15:59 - a year is a leap year it takes a single
16:01 - argument that is the year that it's
16:03 - checking and we can see that there's
16:05 - this string um after the function
16:08 - definition with three quotes and this is
16:11 - called a dock string and dock strings
16:13 - help document what a function or a class
16:16 - is supposed to do so it's a good
16:18 - practice anytime you write a function to
16:20 - write a doc string that goes along with
16:21 - it explaining what that function is
16:23 - supposed to do now this part here can
16:26 - seem a little intimidating but it's not
16:28 - important that you understand how a leap
16:30 - year is calculated there's not a lot of
16:32 - people who know that off the top of
16:33 - their head um but for various reasons
16:35 - this is how a leap year is calculated
16:37 - and it's not important but you could
16:39 - probably figure out what this uh
16:41 - conditional is doing so we're saying
16:43 - that if the year is divisible by four
16:46 - and uh it's not divisible by 100 or it's
16:51 - divisible by 400 so like I was saying
16:53 - there's a lot of different reasons why
16:55 - uh leap years are determined this way
16:58 - and if you don't know that that's
16:59 - completely fine but this function here
17:01 - is going to return true if a year is a
17:03 - leap year and false if it's a non-leap
17:05 - year and down here we have a days and
17:08 - month function that takes a year and a
17:11 - month as arguments and it'll return the
17:13 - number of days in that month so if we
17:17 - look at how this function works we can
17:18 - see that it first checks if a month is
17:21 - between one and 12 and if it's not then
17:25 - it returns that it's an invalid month
17:27 - and then it checks if the month that
17:29 - we're working with is the second month
17:31 - which would mean that it's February and
17:33 - is a leap year using our function up
17:36 - here at the top then it returns 29 if
17:39 - both of those are true and lastly if it
17:42 - makes it to the end without having
17:43 - returned anything yet then it will index
17:46 - into our month days and list up here at
17:49 - the top and return the value of our
17:52 - month so let's just run through this one
17:54 - time and see how these functions work so
17:57 - outside of both of the functions we're
18:00 - going to go ahead and first use this is
18:03 - Leap Year function so we'll say is Leap
18:06 - 2017 so if we run this then it returns
18:10 - false so we ran this function is Leap
18:13 - passed in 2017 as our value and it went
18:16 - through this complicated conditional
18:17 - here and determined that that was false
18:20 - but if we type in 2020 here and run that
18:24 - then we can see that it returns true
18:26 - that 2020 is a leap year but now let's
18:29 - try our days and month function which is
18:32 - going to be a little bit longer of a
18:34 - walkthrough so we'll say days and month
18:37 - and we'll pass in a year so it takes a
18:40 - year first we'll pass in a year of 2017
18:43 - and we'll pass in a month of two which
18:46 - is February now since 2017 is not a leap
18:49 - year then this second month which is
18:52 - February should only have 28 days so if
18:55 - we run this then we can see that we got
18:57 - 28 so let's walk through exactly what
18:59 - happened just so we're sure that we
19:01 - understand so we executed our days and
19:04 - month function with our arguments of
19:06 - 2017 for the year and two for the month
19:09 - so it comes in uh to our days and month
19:12 - function and it sets this year variable
19:15 - equal to 2017 and this month variable
19:18 - equal to two so let's comment those here
19:22 - just to keep track of them through our
19:24 - walkthr so I'll put a comment for year
19:27 - as 2017 and a comment for month as two
19:31 - so first it checks if our month is not
19:35 - between 1 and 12 our month is two so it
19:39 - is in that range so it doesn't meet this
19:41 - conditional and since it doesn't meet
19:43 - that conditional then we just continue
19:45 - on so our next conditional asks if the
19:48 - month is equal to two and is a leap year
19:51 - so our month is equal to two but this is
19:55 - Leap function runs through its code with
19:57 - the year 200 17 and returns false so
20:01 - since is Leap is false and we're using
20:04 - an and operator then the whole
20:06 - conditional evaluates to false so we
20:08 - move on and lastly it accesses the month
20:12 - days list at this month index and
20:16 - remember that our month is equal to two
20:19 - so it's accessing the second index and
20:22 - if we look up here to our month day list
20:25 - and go to our second index so 0 one two
20:29 - then we can see that that's equal to 28
20:32 - so it should be returning 28 here and
20:35 - finally when we printed out that result
20:37 - 28 is what we got as our result now I
20:40 - know that was kind of a long walkthrough
20:42 - but I thought it might be useful to see
20:44 - how these things actually work together
20:46 - and how do you go about determining what
20:48 - a function should return based on the
20:50 - arguments that you pass in okay so I
20:52 - think that is going to do it for this
20:53 - video I hope that now you have a clear
20:55 - understanding of how functions work how
20:57 - we return values and the different ways
20:59 - that we can pass arguments in the next
21:02 - video we'll be learning how to import
21:04 - modules and also learn about some of the
21:06 - useful modules that come in the standard
21:08 - library but if anyone has any questions
21:10 - about what we covered in this video then
21:12 - feel free to ask in the comment section
21:14 - below and I'll do my best to answer
21:15 - those and if you enjoy these tutorials
21:17 - and would like to support them then
21:18 - there are several ways you can do that
21:20 - the easiest way is to Simply like the
21:21 - video and give it a thumbs up and also
21:23 - it's a huge help to share these videos
21:25 - with anyone who you think would find
21:26 - them useful and if you have the means
21:28 - you can contribute through patreon and
21:29 - there's a link to that page in the
21:30 - description section below be sure to
21:32 - subscribe for future videos and thank
21:34 - you all for
21:46 - watching

Cleaned transcript:

hey there how's it going everybody in this video we'll be learning about functions now functions are basically some instructions packaged together that perform a specific task so let's create our first function and see why these are so beneficial Now to create a function we'll use the defa keyword which I believe stands for definition and let's just make a simple function here to get started I'll call this hello Funk now we have parentheses there because that is where our parameters will go when we add those in but we don't have any parameters just yet so that will be empty for now now it is possible to write a function and not have any code in it but we can't leave it completely blank uh but if we want to fill this function in later then we can use this pass keyword and basically that pass keyword is saying that we don't want to do anything with this for now but it won't throw any errors for leaving it blank so if we want to run our function then we can just say hello Funk and put in these parentheses and we need to add those parentheses after the function in order to execute it if we don't have those parentheses there then it'll be equal to the function itself um so let's actually see what that looks like so I'm going to print out that hello function without the parentheses in place uh which means that we're not executing the function so let me run that and we can see when we printed that out that it prints out that this is a function in a certain location in memory but it didn't execute the function so to execute it then we add in these parentheses so now if I run this then now it just gives us none because we're not doing anything with this function yet and it doesn't have a return value so let's go ahead and put some code into our function so first we'll just put in a print statement and we'll just print out some text that says hello function with an exclamation point and now that we're actually running that print statement from within the function we don't need to print out that executed function we can just execute that function and it should run that print statement so we'll run that so we can see that we executed our function here it came within our function and ran our print statement now one benefit of functions is that they allow us to reuse code without repeating ourselves so let's say for example that we had to print out some text in several locations throughout our program so it might look something like this so let me copy this and I'll comment out our uh function execution for now and I'm just going to paste this in about four times so now if we run this then as we expect it prints out our four messages now imagine our boss came to us and told us that uh the text was a little bit off and that we didn't want to have an exclamation point at the end of the string well the way that we have it now we'd have to come in here and change all of those manually so I'd come in and change all these man messages to have a period instead now that was only four changes to make there but in some instan that can be in hundreds of locations in multiple different files so that's the first benefit of functions it allows us to put code with a specific purpose into a single location so instead of printing those four statements uh what we can instead do is run our function four times so I will remove that and uncomment our function and we're going to execute this four different times so now if we run that then we can see that it ran our function four times and executed our print statement four different times but now if our boss came to us and asked us to remove that exclamation point then it doesn't matter if this is spread out over a hundred different lines or a 100 different locations we can just update it in this one spot so I can change this to a period and now if we run this then we can see that those changes are seen everywhere that the function is called now this is called keeping your code dry which stands for don't repeat yourself it's a common mistake for people new to programming to repeat the same things throughout their code when really they could either put their code into certain variables or functions so that it's in a single location so we saw earlier that since we aren't returning anything from our function uh it was actually equal to none so what does it mean for uh our function to return something now this is where functions become really powerful because it allows us to operate on some data and then pass the result to whatever called our function so instead of of printing this string hello function within here let's instead return this okay so what does this mean exactly this means that when we execute our function it's actually going to be equal to our return value so these executed functions here are actually equal to the string hello function so right now if we run this then it doesn't give us any results because it's just a string that we're not doing anything with but if instead we print this so me print that executed function and if we run that then we can see that it prints out our string so basically think of a function as a machine that takes input and produces a result when you execute a function you can think of it almost like a black box you don't need to know exactly how it's doing what it's doing you're mainly concerned about the input and the return value so in this simple example here we don't have any input and we can see that the return value is a string um now don't get me wrong it's useful to know what a function is doing but when you're first getting started don't get caught up on understanding every detail of what every function does just focus on the input and what's returned so for example when we call the Len function on a string so if I print out Len of this string test if I run this then as we saw in a previous video this just returns an integer that is the number of of characters in our string so we have no idea what the code that produces that result looks like but we do know that we passed in a string and that it returned this integer and we'll see why here in a bit why looking at functions in this way will help you become better when working with python because we can treat the return value just like the data type that it is and understanding this will allow you to chain together some functionality so we know our hello function returns a string so we can treat that executed function just like a string so if we remember back to our string Methods remember that we can uppercase a string with upper so really we can take this executed function and just chain uper onto the end of it so now if we run this now we can see that our executed function returned the string hello function and then we were able to use the string method upper on that returned value to uppercase the string um okay so now let's look at how we can pass arguments to our function and real quick I'm going to remove that uper method so to be able to pass arguments to our function we'll need to create some parameters here within our parentheses so let's say that we wanted to customize the greeting that our function returns so let's create a uh a parameter called greeting and now within our function we'll return a string where we use that greeting instead of of our uh hello textt that we had before so now I'll just pass this in with a DOT format so now before we run this we have to pass in that greeting argument when we execute our function if we don't then we'll get an error so actually let's go ahead and run this and see this error so we can see that when we ran that it says that hello Funk is missing one required positional argument greeting so let's pass in that greeting argument to our hello function and to do that we can just pass it in directly here when we call our function so I'm just going to pass in uh high as our string so now if we run this then we can see that when we passed in that string High into our function that it set that greeding variable equal to the string high and then returned the string High function now this greeding variable doesn't affect any variables outside of the function its scope is only local to theun function which is nice because we don't have to worry about it affecting anything we don't want it to affect so and if you want to learn more about python scope then I do have a detailed video going in depth as to how that works exactly and I'll leave a link to that video in the description section below okay so right now this greeting parameter is a required argument and that is because it doesn't have a default value now if we had a default value then it would just fall back to the default value whenever we didn't pass that argument in so let's see an example of this so let's say that we also want to be able to pass a name to our hello function and it'll return a greeting and the name so we can add that to our parameters by putting in a comma here and saying that we also want to accept this name parameter but let's say that if no name is passed in then we want to have a default value of U so we can just say name is equal to U and now let's add that to our return string so I'll put in a comma space and then another placeholder and we'll pass in that name so what this is going to do is it'll return a greeting and a name separated by a comma and a space so if we run this then we can see that even though we didn't pass in a value for the name argument when we executed this function it didn't throw an error and instead Ed the default value that we specified as U but if we want to pass in a value then it will use that value instead so when we execute this function if I was to say name is equal to and we'll say Corey and run that then now we can see that printed out the greeting with the name that we passed in um now your required positional arguments have to come before your keyword arguments now if you try to create a function with those out of order then it's going to give you an error now this is a little more advanced topic topic that tripped a lot of people up but at some point you'll probably run across a function in Python uh that looks something like this so I'll say def student info and you might see something where you see this star args and star star quars and so let me just go ahead and within this new function here I will print out args and I'll also print out quars so let's not really worry about this function name for now it's the arguments that I want to focus on so seeing this star args and star star quars can seem confusing at first but basically all it's doing is allowing us to accept an arbitrary number of positional or keyword arguments so for example let's say that this student info function takes positional arguments that represent the classes that the student is taking plus the keyword arguments passed in will be random information about the student so so you can see in both of those examples we don't know how many of these positional or keyword arguments there will be and that's why we use star args and star star quars and the names don't have to be args and quars but that's a convention that you'll see a lot so it's always good to stick with convention so that people can understand your code so let's call this function with some random values so I'm going to say student info and first we want to pass in some positional arguments of the classes that they're taking so we'll say math and art and now for our keyword arguments we'll pass in some random information about the student so we'll say name is equal to John and age is equal to 22 so now if we run this then we can see that when we printed the args it's actually a tupal with all of our positional arguments and our quars are a dictionary with all of our keyword values so once you have that tupal and that dictionary then you'll be able to do whatever you want with that information now sometimes you might see a function call with arguments using the star or double star now when it's used in that context it will actually unpack a sequence or dictionary and pass those values into the function individually so to see what I mean let's make a list in a dictionary of everything that we just passed into our function and just to clear up some room here I'm going to go ahead and delete the hello function that we started off with so now I'm going to create a list called courses and I'm going to set this equal to math and art that we passed in before and instead of a tupal I'm going to make that a list so now for the student info I'm going to create a dictionary called info and set that equal to those values so now let me get rid of our positional and keyword arguments here so let's say that we wanted to pass all of these courses in as our positional arguments and the info dictionary as our keyword arguments so if we just pass these in as is and I passed in courses and info now if we run this then we can see that this might not be exactly what we thought instead of passing the values in individually and instead passed in the complete list and the complete dictionary as positional arguments so if we use the single star in front of our list and the double star in front of our dictionary then it will actually unpack these values and pass them in individually so basically it will be the equivalent to our previous execution uh where we pass them in individually so to see what I mean let's add a star in front of this courses to unpack those values and a star star in front of our dictionary to unpack those keyword values so now if we run this and we can see that we got what we had before um we can see that when our function prints args it's the values from our list that we unpacked and our quars is equal to the dictionary values that we unpacked now I know that's a little confusing especially to you know get the idea that whenever you're passing these in that it unpacks the values and within here it's for accepting an arbitrary number of positional or keyword values but uh it's a little more advanced of a topic and I know it's confusing but hopefully it makes some sense and you'll be able to better understand understand what's going on if you ever run into something like that okay so lastly I wanted to run through an example that ties together everything we've learned so far in this series of videos so I have some code here in my Snippets file that I'm going to grab real quick and paste into the file that we've been working with so now let me lower this output a little bit so that we can see everything here now these are actually a couple of functions that I grabbed in the python standard Library I modified them very slightly but it's basically the same and I wanted to show that even though we've only gone over the fundamentals we're already able to look at some code from within the standard Library itself and understand what's going on so at the top here we have a list called month days and this has the number of days in each month now the first index here is just a placeholder that's not going to get used um we're only going to be accessing indexes one through 12 since those are the months and then we have a function here called is Leap which determines if a year is a leap year it takes a single argument that is the year that it's checking and we can see that there's this string um after the function definition with three quotes and this is called a dock string and dock strings help document what a function or a class is supposed to do so it's a good practice anytime you write a function to write a doc string that goes along with it explaining what that function is supposed to do now this part here can seem a little intimidating but it's not important that you understand how a leap year is calculated there's not a lot of people who know that off the top of their head um but for various reasons this is how a leap year is calculated and it's not important but you could probably figure out what this uh conditional is doing so we're saying that if the year is divisible by four and uh it's not divisible by 100 or it's divisible by 400 so like I was saying there's a lot of different reasons why uh leap years are determined this way and if you don't know that that's completely fine but this function here is going to return true if a year is a leap year and false if it's a nonleap year and down here we have a days and month function that takes a year and a month as arguments and it'll return the number of days in that month so if we look at how this function works we can see that it first checks if a month is between one and 12 and if it's not then it returns that it's an invalid month and then it checks if the month that we're working with is the second month which would mean that it's February and is a leap year using our function up here at the top then it returns 29 if both of those are true and lastly if it makes it to the end without having returned anything yet then it will index into our month days and list up here at the top and return the value of our month so let's just run through this one time and see how these functions work so outside of both of the functions we're going to go ahead and first use this is Leap Year function so we'll say is Leap 2017 so if we run this then it returns false so we ran this function is Leap passed in 2017 as our value and it went through this complicated conditional here and determined that that was false but if we type in 2020 here and run that then we can see that it returns true that 2020 is a leap year but now let's try our days and month function which is going to be a little bit longer of a walkthrough so we'll say days and month and we'll pass in a year so it takes a year first we'll pass in a year of 2017 and we'll pass in a month of two which is February now since 2017 is not a leap year then this second month which is February should only have 28 days so if we run this then we can see that we got 28 so let's walk through exactly what happened just so we're sure that we understand so we executed our days and month function with our arguments of 2017 for the year and two for the month so it comes in uh to our days and month function and it sets this year variable equal to 2017 and this month variable equal to two so let's comment those here just to keep track of them through our walkthr so I'll put a comment for year as 2017 and a comment for month as two so first it checks if our month is not between 1 and 12 our month is two so it is in that range so it doesn't meet this conditional and since it doesn't meet that conditional then we just continue on so our next conditional asks if the month is equal to two and is a leap year so our month is equal to two but this is Leap function runs through its code with the year 200 17 and returns false so since is Leap is false and we're using an and operator then the whole conditional evaluates to false so we move on and lastly it accesses the month days list at this month index and remember that our month is equal to two so it's accessing the second index and if we look up here to our month day list and go to our second index so 0 one two then we can see that that's equal to 28 so it should be returning 28 here and finally when we printed out that result 28 is what we got as our result now I know that was kind of a long walkthrough but I thought it might be useful to see how these things actually work together and how do you go about determining what a function should return based on the arguments that you pass in okay so I think that is going to do it for this video I hope that now you have a clear understanding of how functions work how we return values and the different ways that we can pass arguments in the next video we'll be learning how to import modules and also learn about some of the useful modules that come in the standard library but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to Simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching
