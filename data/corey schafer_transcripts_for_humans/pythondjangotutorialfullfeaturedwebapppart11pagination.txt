With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're gonna add a little more
00:02 - functionality to our site by adding some
00:05 - pagination so that we aren't pulling
00:06 - down too many posts at once and also
00:09 - we'll learn how to create a page of post
00:10 - filtered by a specific user that is also
00:13 - going to be paginate 'add so let's go
00:15 - ahead and get started
00:16 - so first of all since we're going to be
00:17 - working with pagination I'm going to
00:19 - take a second to add more posts to our
00:21 - current application from a variety of
00:23 - different users that way we have enough
00:25 - posts to see this pagination in action
00:27 - now I'm going to add some posts with a
00:30 - short script in the Jango shell using a
00:32 - JSON file that I've prepared but if you
00:34 - want to skip this part then it's not
00:36 - completely necessary I'm only doing this
00:38 - so that we have more data but if you'd
00:40 - like to follow along without doing this
00:41 - then you could just create some
00:43 - additional posts on your own so you only
00:45 - need about ten posts or so to see this
00:47 - pagination in action but if you do want
00:49 - to follow along and use the same JSON
00:51 - file as me then I've left a link in the
00:53 - description section below to the JSON of
00:55 - my sample post that I'll be creating
00:57 - here and if you want to use the same
00:59 - titles and content that I'm using in the
01:01 - video then you can just download that
01:03 - and use it now if you do want to use the
01:05 - shell to add these posts then I've
01:06 - actually put that post dot JSON file
01:09 - within my project folder where the
01:11 - manage dot py file is located so you
01:13 - should do that too if you choose to do
01:15 - the same so this is the file here this
01:17 - post Chaisson and these are the titles
01:20 - and the fake content and we can see that
01:22 - this is located here in our Django
01:24 - project so now I'm going to close that
01:26 - down and open up our terminal and I'm
01:28 - gonna add these through the Django shell
01:30 - so I'm gonna say Python manage dot py
01:34 - and then she'll and again this part is
01:37 - optional you can just manually add about
01:39 - 10 posts or so from the application that
01:41 - we've currently built and that will be
01:43 - fine but to do this if you want to do it
01:45 - this way then within the shell I'm gonna
01:47 - make a couple of imports so I'll import
01:49 - JSON and then I want to import my post
01:52 - model so from blog models import post
01:57 - and since that post dot JSON file is in
01:59 - the same directory as my manage py file
02:01 - then we can just open it up directly so
02:04 - I can say with open and that is post dot
02:07 - JSON and we'll say as F and now within
02:11 - here we have to end it
02:13 - now we'll use the JSON module to load
02:16 - that into Python so I'll say posts
02:18 - underscore JSON is equal to json dot
02:21 - load and we want to load in that file
02:23 - okay and now i'm going to loop over all
02:25 - the posts that were in my json file and
02:27 - add them to our application so i'll say
02:29 - for post in post underscore json and now
02:34 - we need to indent since we're inside a
02:36 - for loop now we'll create a post so post
02:38 - is equal to post and we will set the
02:41 - title equal to that post and access the
02:45 - title key and then we'll do the same
02:47 - thing for content so I'll say content is
02:50 - equal to post and access the content key
02:53 - and lastly we will say that the author
02:56 - underscore ID is equal to post and we
03:01 - will access the user underscore ID of
03:04 - that object and those keys that I'm
03:07 - accessing there are just what I call
03:08 - those inside the JSON file so on the
03:11 - next line we will do a post dot save to
03:14 - save all of those okay and it looks like
03:16 - we didn't get any errors so that's good
03:18 - now I can exit out of the application
03:20 - and now we should have about 25 more
03:23 - posts or so now that we've run that
03:24 - short script so now let me clear my
03:26 - screen okay so since we didn't get any
03:28 - errors they should have saved all those
03:29 - properly so let's run our application
03:31 - and see what our home page looks like so
03:33 - I'll say Python manage py run server and
03:37 - now we can open this in the browser so I
03:40 - will reload this okay so now it looks
03:43 - like we have more post to work with now
03:44 - so that's good so that worked and these
03:47 - posts are just gibberish lorem ipsum
03:49 - generated stuff so if it asks you to
03:51 - translate them or anything like that
03:53 - then you can just say no so now we
03:55 - should have about 25 new post so if I
03:58 - scroll down through these then we can
04:00 - see that it's kind of lot of information
04:03 - to have on a single page now if these
04:06 - posts had images included in them and
04:08 - things like that then loading them all
04:10 - in at once like this could really slow
04:12 - down our webpage it would be better if
04:14 - we could paginate this stuff so that we
04:16 - can load in a certain number of posts on
04:18 - one page and then display links at the
04:20 - bottom of the page to the other pages of
04:23 - posts and Django makes this really easy
04:25 - for us so to do this we're going to be
04:27 - working with a paginate or object so let
04:30 - me stop our dev server for a second and
04:32 - open up the Jango shell so that we can
04:34 - look at a paginate or object
04:35 - interactively so I will pull up our dev
04:39 - server and stop this for a second and
04:41 - let's open back up our Python shell ok
04:44 - so within here I'm going to import the
04:46 - paginate or clasp and to do that we can
04:48 - say from Jango dot cor dot paginate err
04:52 - import paginate err and now let's create
04:56 - some dummy posts that we want to
04:58 - paginate so I'm just going to do a list
05:00 - of short strings so I'm just going to
05:03 - say one and then let me copy this so I
05:06 - can just paste it in five times here and
05:09 - now I'll change the numbers of these so
05:12 - this will be the second post this will
05:14 - be the third this will be the fourth and
05:17 - this will be the fifth okay so now we're
05:19 - going to create a paginate or object out
05:21 - of these posts and we are going to make
05:23 - this so that it is two posts per page so
05:26 - I'll say P is equal to paginate err and
05:28 - then we will pass in posts and then a -
05:32 - 4 - post per page okay so we can pretend
05:35 - that the list of strings is actually a
05:37 - list of articles and we just broke that
05:38 - up into two posts per page so there
05:41 - should be three pages total so with one
05:43 - value left on that third page so if I
05:45 - say P dot num underscore pages then we
05:49 - can see that we have three pages and if
05:51 - we wanted to loop over those pages then
05:53 - we could use the page range method now
05:57 - that will return a Python range that we
06:00 - can loop over so I'll say for page in P
06:04 - dot page underscore range that's
06:07 - actually not a method it's an attribute
06:08 - so we don't need to put parentheses
06:10 - there and then we'll say print page and
06:14 - we can see that it loops over those
06:16 - three pages and if we want to look at a
06:18 - specific page then we can access it by
06:20 - saying so let me clear the screen here
06:23 - we can access it by saying p1 is equal
06:26 - to and now I'm just going to get page
06:28 - one by saying P page one and now if we
06:32 - look at this then we can see that it's
06:34 - page one of three and we can get the
06:36 - specific page number as an integer by
06:39 - saying p1 dot
06:41 - and that returns the number for that
06:44 - page now we can also look at posts on
06:47 - this page by saying P 1 dot object
06:50 - underscore list and if we run that then
06:53 - we can see that that returns 1 & 2 as
06:55 - the objects on that first page now
06:58 - probably the most important thing that
06:59 - we'll be using in terms of creating
07:01 - navigation links for these pages is
07:03 - whether or not they have previous or
07:05 - next pages so we're on page 1 so we
07:08 - shouldn't have a previous page since
07:10 - this is the beginning so to check that I
07:13 - can say P 1 dot has underscore previous
07:17 - and this is a method so put parentheses
07:19 - there and we can see that that is false
07:21 - but we should have a next page since
07:23 - there are three pages and we're only on
07:25 - the first page so if I say P 1 dot has
07:29 - next then this should be true and it is
07:33 - and if we want to get that next page
07:35 - number as an integer then we could do
07:37 - that by saying P 1 dot next underscore
07:40 - page underscore number and that is a
07:44 - method and we can see that the next page
07:46 - is 2 so that was a quick rundown of
07:48 - paginate or objects and I know that was
07:50 - really fast
07:51 - but I just want to show you a couple of
07:53 - things that we're going to be using in
07:54 - order to loop over these pages whenever
07:57 - we use this on our site so let's
07:59 - actually see how we can use this in our
08:01 - views and templates in order to paginate
08:03 - our posts so let's open up our views so
08:07 - I'm going to exit out of here and now
08:10 - let's open up our views and we want to
08:13 - open up the views for our blog so I'm
08:15 - gonna open the blog and then open our
08:17 - views here and now let me scroll down to
08:19 - the home page because this is one of the
08:21 - main ones that we're going to want to be
08:22 - paginating because right now we have so
08:25 - many posts on that home page now we're
08:27 - using class-based views and we saw in
08:30 - the last video how this can save us a
08:31 - lot of code by creating a lot of stuff
08:34 - for us in the background and pagination
08:36 - is no different we don't actually have
08:38 - to import that paginate or class and
08:41 - create that ourselves all we need to do
08:43 - is set an attribute on our list view
08:45 - called paginate by so underneath
08:48 - ordering here I can just say paginate
08:50 - underscore by is equal to 2 now I'm just
08:54 - using 2
08:55 - so that we can see what this looks like
08:56 - with a large number of pages and I'll
08:59 - set that to something higher once we're
09:00 - done like five posts or ten post per
09:02 - page and with that small change that
09:04 - will actually give us some pagination
09:06 - functionality so let's see what we have
09:09 - so far so let's pull back up the
09:11 - terminal here and I'm going to rerun
09:14 - that dev server and now let's open up
09:16 - the home page go up to the top here and
09:19 - let me rerun this okay so we can see
09:21 - that when I reloaded that we have two
09:24 - posts on this page so something is
09:26 - working but right off the bat we can see
09:28 - that we don't have any links to the
09:30 - other pages so we'll have to do
09:32 - something to fix that but we can
09:34 - actually hard code the page request into
09:36 - the URL to get these other pages right
09:38 - now so if I go up here to my url bar and
09:41 - I do a forged slash and then question
09:44 - mark to specify that we want to put in a
09:47 - parameter then I can say question mark
09:49 - page is equal to two and if I run that
09:52 - then that URL query parameter of page
09:55 - equal to two got passed to our view and
09:58 - then our view handled that and gave us
10:00 - the second page so we had about five
10:03 - posts before and then I added 25 posts
10:06 - with that script so I think now we
10:07 - should have around 30 posts so there
10:09 - should be around 14 or 15 pages total
10:12 - since there are two paid posts per page
10:14 - so let me try to go to page 14 we can
10:18 - see that there is a page 14 let me try
10:20 - 15 okay so we must only have 28 posts
10:23 - because when I go to page 15 we get a
10:26 - 404 and anytime you run out of pages and
10:29 - requests that page that doesn't exist
10:31 - then you will get a 404 which is good
10:34 - okay so now all we need to do is add
10:37 - some links in our template so that we
10:39 - can actually navigate to these pages by
10:41 - clicking on them rather than manually
10:43 - typing them in to the URL bar like we're
10:45 - doing it right now and our class-based
10:47 - view already passes in the context that
10:49 - we'll need in order to access this page
10:51 - information in our template so to do
10:54 - this let's open up our home dot HTML
10:57 - template where where we're going to be
10:58 - displaying all of our posts so first let
11:01 - me go back to the home page and now
11:04 - let's open up our editor and open up our
11:08 - home
11:09 - HTML template so that is within our blog
11:11 - app and templates and then they blog
11:14 - subdirectory and then home HTML ok so I
11:17 - think a good place for these pagination
11:19 - links will be right after our for loop
11:21 - where we loop over all of the posts so
11:23 - I'm going to go underneath our for loop
11:25 - here and now we can put in our
11:27 - pagination logic so the variables that
11:31 - got passed into our template are so let
11:34 - me put in a code block here and I'll say
11:36 - if one of those is is underscore
11:39 - paginating and that'll just tell us if
11:41 - this page is paginating so now I'm going
11:43 - to close off that if statement by saying
11:47 - end if and now we'll go inside here and
11:50 - if this is paginate 'add then we'll
11:52 - print out some paginating links now
11:55 - there are a lot of different ways that
11:56 - you could style your paginating links
11:58 - but one way that I like is that if the
12:01 - page has previous posts than to give
12:04 - them an option to go to the very first
12:06 - page and also an option to go to the
12:08 - previous page so I'm gonna do that by
12:11 - saying we'll say if and this is going to
12:14 - be called page underscore obj I'm sorry
12:18 - that is obj and that is the page object
12:21 - that our view passed into our template
12:23 - and we've already worked with some of
12:25 - these page objects when we looked at
12:27 - these in the shell so I can check if
12:29 - this has previous pages by saying if
12:31 - page underscore obj dot has underscore
12:36 - previous and then we can end that if
12:40 - statement and let me break these up a
12:43 - little bit so end if and I will give
12:47 - some room here okay so if our current
12:50 - page has a previous page then I'm going
12:53 - to give them two options I'm going to
12:54 - give them a link to go to the first page
12:56 - and then a link to just go to the
12:58 - previous page so this will be an anchor
13:01 - tag and this one I will say first so
13:05 - this will be a link to the very first
13:07 - page so for the href here I'm just going
13:09 - to put in question mark page equal to
13:12 - one so no matter what route we're on if
13:15 - it has pagination then this will use
13:18 - that URL query parameter of page equal
13:21 - to one to go to that
13:22 - first page of pagination so now let's
13:24 - also give this some styles so I'll say
13:27 - class is equal to and we will make this
13:30 - look like a button and I will give this
13:33 - a button style of BTN outline - info
13:37 - that's like a blueish style and also I'm
13:39 - going to give this a margin bottom of 4
13:42 - so MB - 4 ok and this will go a lot
13:45 - faster now that I can copy and paste
13:47 - some of these so now I'm going to copy
13:49 - this now since this current page has a
13:52 - previous page then I'm going to give
13:54 - them an option to go to the first page
13:56 - and also the previous page so to get to
13:59 - the previous page instead of saying that
14:02 - we want the page equal to 1 then I'm
14:05 - going to remove that one and now put in
14:08 - curly braces to access a an attribute
14:11 - here and I'll say page underscore obj to
14:14 - access the page object and then dot
14:17 - previous underscore page underscore
14:20 - number so now when they click on this
14:23 - previous link it will go to the page
14:26 - equal to the previous page number okay
14:29 - so now let's move on and now that we've
14:32 - displayed the previous pages now we want
14:34 - to display a certain number of pages
14:36 - around the current page so for example
14:38 - if we're on page 5 then we'll like to
14:41 - have links to a few pages before 5 and a
14:44 - few pages after 5 so that someone can
14:46 - easily navigate to pages nearby so I'm
14:48 - going to do a little trick here that I
14:50 - found online that allows us to do this
14:53 - so I am going to open up a code block
14:56 - here and this will be a for loop and
14:58 - we're going to loop over all of the
15:00 - pages and the paginate err so I will say
15:02 - for num in and then page underscore obj
15:08 - dot paginate err to get the paginate err
15:11 - object of our current page and then we
15:13 - can use that page underscore range that
15:16 - we saw before to loop over all of the
15:19 - pages and now let me end this for
15:22 - statement so I'll say IND 4 and then
15:25 - within this for loop so now within this
15:28 - loop we only want to print out the
15:30 - current page and a few pages surrounding
15:33 - the current page so first of all to see
15:36 - if we are on the current page let's put
15:38 - in a conditional here so I will say if
15:41 - the page underscore obj dot number which
15:46 - is going to be the current pages number
15:48 - if it is equal to the number that we
15:51 - were currently on through this loop then
15:54 - that means that the current page should
15:56 - be displayed a little differently than
15:58 - the other pages so we'll just make this
16:00 - one a little darker so first of all
16:02 - let's end this if statement and if and
16:06 - within this if statement
16:09 - let me grab one of these other anchor
16:11 - tags to go off of so I'll grab that one
16:13 - and paste this in now first of all since
16:15 - this is the current page we don't want
16:18 - this to be an outline we just want this
16:20 - to be a solid button and instead of the
16:24 - page going to page one we instead want
16:27 - this to go through whatever number we
16:29 - are currently on through in the loop now
16:32 - if it's a if this doesn't make sense yet
16:34 - I know that this is kind of confusing
16:36 - but once you actually see this in the
16:37 - site and then compare it back to the
16:39 - code then you'll be like oh okay I see
16:41 - what we were doing there so the text
16:43 - that we want to be displayed on this
16:45 - button is just going to be the number on
16:48 - through the loop so now that is what
16:52 - handles the current page when we see it
16:55 - through the loop and now we just want to
16:57 - print out a few pages that surround this
17:00 - current page and to do this we can use a
17:01 - couple of Django template filters so I'm
17:05 - going to put in an elf's statement here
17:08 - and this is actually going to be an L if
17:09 - so I'll say L if the num that we were on
17:13 - that we are on through the loop if that
17:16 - is greater than the page underscore obj
17:20 - dot number and then I'm going to use a
17:23 - filter here so that is that vertical bar
17:26 - tab and we want to add now they don't
17:29 - have a subtract so we have to say add
17:31 - and we want to add a negative three so
17:35 - basically what this is saying as we're
17:36 - looping through our page range this is
17:38 - saying if the number that we're
17:40 - currently on is within three previous
17:44 - pages then we want to print it out and
17:46 - we want to get all of the pages within
17:48 - the
17:49 - three pages so I'll also say and and I'm
17:52 - just going to copy this part here and
17:56 - paste that in and I'll say if the
17:59 - current number that we're on through the
18:00 - loop is less than the current page
18:04 - number and then add three then we will
18:07 - also print out a link to that page as
18:09 - well and we are very close to being done
18:13 - here so that we can see what this
18:14 - actually looks like in the browser
18:16 - because I know that this is confusing
18:18 - especially just to look at when you're
18:20 - not actually doing it so since this
18:22 - isn't the current page I'm going to give
18:24 - this an outline of BTN outline info and
18:28 - okay finally if the page has next pages
18:32 - then I'm also going to print out an
18:35 - option for them to go to just the next
18:37 - page and also the last page so that they
18:40 - can jump directly to the last page so
18:42 - I'm going to copy this section up here
18:45 - because it's going to be fairly similar
18:47 - and after our for loop in here I'm going
18:50 - to paste that in and now we'll say if
18:52 - the current page object has next then
18:56 - we'll want to have a link to that next
18:57 - page so for the text on that button I'll
19:00 - say next and then for the page that we
19:03 - want to link to we can say page
19:06 - underscore obj dot next underscore page
19:10 - underscore number and save that and
19:14 - finally we want to also give them a link
19:16 - to the very last page so on this link I
19:20 - will say last and for the page that we
19:24 - want to link to we will just say page
19:27 - underscore obj and then we'll access the
19:30 - paginate err object and then we will
19:33 - access the num underscore pages so if
19:37 - there are 30 pages then this will say
19:39 - you know that this page is equal to 30
19:43 - okay and if I typed all of that out
19:45 - correctly so let me see if I can fit all
19:47 - of this in so everything that is on the
19:50 - screen here is what we just typed in and
19:53 - I don't think I can fit at all so that's
19:55 - as much as I can get in there okay so I
19:58 - know that that was a lot of if
19:59 - statements but if you were at all
20:01 - confused with any of that that
20:02 - it'll probably make more sense once we
20:04 - see how this actually works on the front
20:06 - end and then if you want to modify you
20:08 - know how we're displaying the pages in
20:10 - any way then you can go back and change
20:12 - this however you'd like
20:13 - so now let's save this and open this up
20:16 - in our browser and see how this looks so
20:19 - first of all our dev server is still
20:21 - running so that's good and now let me
20:23 - reload the home page okay so this is
20:26 - what all of that logic did for us so we
20:28 - are currently on page one so we can see
20:30 - that that is styled differently that is
20:32 - just a solid button and page one doesn't
20:35 - have any previous pages so we can see
20:37 - that we don't have a link to go to a
20:39 - previous page or the very first page but
20:42 - and and then it also puts out page two
20:45 - and three since page two and three are
20:47 - close to one now we also have a next
20:50 - link here that will just take us to page
20:51 - two or we can go to the very last page
20:54 - by clicking on last so if I just go to
20:57 - page three actually let me go to like
20:59 - page seven or so to where we're right in
21:01 - the middle okay so if I go to page seven
21:03 - we can see that now we have previous
21:05 - pages so we can either go to the very
21:07 - first page so page number one we can go
21:09 - to the previous page which is page six
21:11 - and we also have page seven which is a
21:14 - solid color and this is what that filter
21:17 - did when we printed out the pages that
21:19 - were within three pages previous and
21:22 - three pages next so we can see that just
21:24 - to print out some of the nearby pages it
21:26 - prints out five six before and then
21:28 - eight and nine afterwards and we still
21:30 - have the next pages so we can go to the
21:33 - next page or we can simply go to the
21:35 - last page so hopefully after seeing that
21:37 - demo on the front end then you'll be
21:39 - able to go back to this code that we
21:41 - just wrote here and kind of make more
21:44 - sense of that okay and that will
21:46 - actually do it for our pagination so the
21:48 - pagination is now done so now that
21:50 - that's done let's change the post per
21:52 - page back to a higher number because
21:54 - having to post per page is kind of silly
21:56 - so I was only using that for a demo so I
21:59 - think five post per page would actually
22:01 - look pretty good so to do this we just
22:03 - need to go back to our views so I still
22:05 - have this open and change paginate by
22:07 - equal to something larger so you can do
22:10 - five or ten if you'd like so I'll do
22:12 - five and then go back to our home page
22:15 - here and now
22:16 - five posts and if we scroll down then we
22:18 - can see that our pagination is still
22:20 - working and now it says that our last
22:22 - page here is actually just going to be
22:24 - page six so it looks like all of that is
22:27 - still working so that's good okay so now
22:30 - there's one more thing that I'd like to
22:31 - do before we finish up this video now if
22:34 - we look at our home page here then we
22:36 - can see that the user name of the user
22:38 - who made the post is currently a link
22:41 - but it doesn't go anywhere so if I click
22:43 - on these and it's just a dead link so
22:46 - let's build a route that will display
22:48 - only the posts from that particular user
22:50 - when you click on that link and if the
22:52 - user has a bunch of post then we want
22:54 - those to be paginate ado it's going to
22:58 - be very similar to our home page list
23:00 - view that we currently have but we're
23:01 - just going to filter that list by that
23:04 - user so let's go ahead and see what this
23:07 - looks like so I'm going to open up our
23:09 - views and like I said this is going to
23:12 - be very similar to our post list view
23:14 - that we're using for our home page so
23:16 - let's just copy that so I'm going to
23:18 - copy that and right underneath it I will
23:21 - paste that in and now let's make a view
23:24 - called user post list view and for the
23:27 - template name here let's just create a
23:30 - template called user underscore post dot
23:33 - HTML so currently this will still list
23:35 - all of the posts from our post model but
23:38 - we want to add a filter to this that
23:40 - only gets the posts from a certain user
23:42 - and that is going to come directly from
23:44 - the URL so when we create a new URL
23:48 - pattern for this well specify the
23:49 - username and the URL path itself so
23:53 - we'll set that whenever we create the
23:54 - URL pattern here in a second but for now
23:56 - let's just assume that we have a
23:58 - username variable passed into the URL so
24:01 - in order to modify the query set that
24:04 - this list view returns we can override a
24:07 - method called get underscore query
24:09 - underscore set and change the query set
24:13 - from within there so let's do that so
24:16 - down here I'm going to say def get
24:18 - underscore query underscore set and this
24:22 - takes self as the first argument and now
24:24 - we want to get the user associated with
24:26 - the username that we're going to get
24:28 - from the URL so at this point
24:30 - if that user doesn't exist then we'll
24:33 - want to return a 404 telling the user
24:35 - that that page doesn't exist and I think
24:38 - that's better than returning an empty
24:40 - page for anything that they just type
24:42 - into the URL and to do that we can use a
24:45 - shortcut called get object or 404 and as
24:49 - the name implies there it will get an
24:51 - object from the database if that object
24:53 - exists and if it doesn't exist then
24:55 - it'll just return a 404 so first we need
24:57 - to import that and that is from Django
25:00 - shortcuts so we'll just go up to the top
25:02 - here and we're already importing render
25:05 - from Django shortcuts so now we just
25:06 - need to also import get underscore
25:09 - object underscore or underscore 404 so
25:14 - now let's go back down and also looking
25:16 - at the URLs here we actually haven't
25:18 - imported the user yet either and since
25:21 - we're going to be using that user model
25:24 - we need to also import that so I will
25:27 - also import that user and we've seen
25:30 - this a couple of times now it is from
25:32 - Django dot contrib dot auth dot models
25:37 - import user and now we can use those
25:40 - imports to grab the user so down here in
25:43 - the method that we just created that is
25:48 - right here get query sets we can say
25:51 - user is equal to get object or 404 and
25:56 - we want to get this object from that
25:59 - user model and the user that we want to
26:01 - get is a user with a username equal to
26:04 - and now we want to get the username from
26:07 - the URL and to do that we can say self
26:10 - dot Korg's dot get and kwargs are going
26:15 - to be the query parameters and we can
26:17 - get the username from the URL so now if
26:21 - that user exists then we will capture
26:24 - them in that user variable if they don't
26:27 - exist then it's just going to return a
26:28 - 404 so now we can limit our results for
26:32 - this ListView by finishing our post
26:34 - query so now we can simply say return
26:38 - post dot objects
26:41 - filter and we want a filter post that
26:45 - have an author equal to that user that
26:48 - we just got now there's actually one
26:50 - more thing that we need to do here now
26:52 - since we're overriding the query that
26:54 - this ListView will be making then our
26:57 - order by that we set up above here will
27:00 - also be overridden to so we can just
27:03 - remove that and instead we'll just add
27:06 - it directly to our query so to do an
27:09 - order by directly on a query right here
27:11 - at the end we can just say dot order
27:14 - underscore by and we want to order by
27:17 - the same thing that we had before so
27:19 - that minus date underscore posted so
27:23 - returning that filtered post query and
27:25 - our get query set method is what will
27:28 - limit our posts on that page to that
27:30 - specific user that has their user name
27:33 - as the parameter and the URL
27:35 - okay so now let's actually create that
27:37 - path in our URL patterns that contains
27:40 - the user name parameter so we want to
27:43 - open our blog URLs so within our blog
27:46 - app here I'm going to open our blog URLs
27:49 - and first we need to import that view
27:52 - that we just created and these are all
27:53 - of our views here so I'll just add on to
27:56 - this and that was user post list view
28:00 - and now I'm going to create a path where
28:02 - we pass in the user that we want posts
28:05 - from into the URL so I am just going to
28:08 - copy one of our default paths here so
28:12 - I'll just get the post list view path
28:13 - here and I will just put this right
28:16 - after our home page
28:17 - so now we'll say that if they navigate
28:19 - to user ford slash and then the username
28:23 - so again we'll put in these angle
28:25 - brackets here and we can use user name
28:28 - as the URL variable now just like with
28:31 - our primary key here we can specify what
28:33 - kind of data type this is going to be so
28:36 - we can say that this is going to be a
28:38 - string okay and the view that we want to
28:40 - handle this path is going to be that
28:43 - user post list view and then the name
28:47 - that we want to use here let's just use
28:49 - user - post okay so now we have the view
28:53 - and we have the URL pattern
28:55 - now let's just create that template so
28:58 - we said in our view that we would name
29:00 - that template user underscore post dot
29:03 - HTML so within our blog templates I'm
29:07 - going to create a new template here and
29:08 - call this user underscore post dot HTML
29:12 - and this is going to be very similar to
29:14 - our home page so I'm just gonna use that
29:16 - as the starting point so I'm going to
29:18 - open our home page here and copy that
29:20 - and we want to keep all that pagination
29:23 - logic in there too because our user post
29:25 - page can be paginate adapt enough posts
29:28 - so the difference here between this and
29:30 - the home page will be that I'll add a
29:32 - heading at the top specifying that this
29:35 - is this user's page so right below the
29:39 - content block here I'm just going to put
29:41 - in an h1 tag and within the h1 tag I'll
29:45 - just say posts by and then we will
29:48 - access an attribute here and to get that
29:51 - user name from the URL we can just say
29:53 - view dot quarks dot user name and that
29:58 - will get the username that is passed
30:00 - into the URL and now let's also print
30:02 - out how many posts this user has so
30:05 - within some parentheses here we'll put
30:07 - the total number of posts that this user
30:10 - has so we'll put in our curly brackets
30:13 - here now how can we do this so one way
30:16 - that we can do this would be to get the
30:18 - current paginate err page so page
30:21 - underscore obj and then get the paginate
30:24 - err object from there and then access
30:27 - the dot count attribute and the dot
30:30 - count attribute will return the total
30:33 - number of objects along all of the pages
30:36 - in that paginate err so if you have you
30:39 - know 30 pages of two objects then this
30:41 - will return a count of 60 okay so with
30:45 - that in place let me also just give this
30:47 - a quick class here so I'll set a class
30:50 - equal to and I just want to give this a
30:52 - margin bottom so I'll say MB - 3 now the
30:56 - post for loop will stay mostly the same
30:58 - but a couple of things are going to
31:00 - change so we can actually set the href
31:03 - for the user now to go to the user post
31:07 - route that we are creating
31:09 - right now so right here is where we're
31:12 - printing out the post author and we can
31:14 - see that this link is dead so let's
31:17 - actually let this link to this users
31:19 - users page so we will put in a code
31:24 - block here and we'll say that this is a
31:26 - URL and we called that URL user
31:30 - - posts and the username that we want to
31:33 - link to for this route is going to be
31:35 - the username of this author so we will
31:39 - say post dot author dot username and
31:44 - save that and we're actually going to
31:46 - have to change that in our home and post
31:48 - template as well and I know that having
31:50 - repeated code in multiple locations
31:52 - isn't the best practice but we'll fix
31:54 - that in a future video when we see how
31:56 - to use sub templates for repeated
31:58 - sections like this but for now let's
32:01 - just finish this up so we need to add
32:03 - those links to this user route to our
32:06 - home page and our post detail template
32:08 - as well so let's do that so I'm just
32:10 - going to copy this URL here so the
32:13 - beginning of this code block to the end
32:15 - and I know that this posts author has a
32:20 - link in the home page as well so in our
32:22 - home template I'm going to scroll up to
32:24 - where we have the link for this post
32:27 - author and now we'll just post that in
32:29 - so a URL to user post using that post
32:32 - author username and save that and we
32:36 - also want to set this in the post detail
32:39 - template as well so we can see here this
32:41 - is where we're printing out the author
32:42 - that link is currently dead we will
32:45 - paste that in for the user post post
32:48 - user name and actually almost made a
32:51 - mistake here this is in the post detail
32:54 - template remember this is called object
32:55 - so let's say object dot author dot user
32:58 - name okay so what those changes let's
33:00 - save everything and then open this in
33:02 - the browser and try to see post created
33:04 - by a single user so I will save all of
33:08 - that and check our dev server dev server
33:11 - is running
33:12 - so now let's reload our home page here
33:14 - and now let's click on this query MS
33:16 - user and see if we can go to their
33:19 - specific page so now we can see this
33:21 - says post by query MS
33:23 - twenty-eight total so let's see if
33:25 - that's right if I go to the last page
33:27 - here okay so actually this isn't right
33:29 - right now something is not returning
33:31 - properly
33:32 - I think twenty-eight posts is the total
33:34 - number of posts that we have on the
33:36 - entire blog right now and plus we can
33:38 - see that this is returning test user
33:40 - posts as well this should only be posts
33:42 - from this specific user so it's getting
33:44 - the username correctly from the URL but
33:47 - something must be wrong with the query
33:49 - set that we're getting back so let's go
33:51 - check that so I'm going to open up
33:53 - sublime and go to our views and so we
33:57 - have our get query set method here now
34:00 - this is my fault
34:01 - this query set is actually one word so
34:04 - it should be get underscore query set
34:06 - and so if I save that that should solve
34:09 - our problem so sorry about that so now
34:12 - let me go back to our page and let me go
34:16 - back or I'll just click on this user
34:18 - again so now if I click on this user
34:20 - well now it looks like we have another
34:22 - error here so this says query set object
34:25 - has no attribute order a by so I spelled
34:27 - order by wrong sorry about this guys I
34:29 - usually don't make this many mistakes so
34:32 - in the views here I misspelled order by
34:35 - you all probably notice that as I was
34:37 - typing it out so let me save that
34:40 - everything else looks good
34:42 - let's reload this and the browser here
34:44 - so let me just reload this page okay so
34:47 - now this is looking more like it so now
34:49 - it says post by query MS 18 so that is
34:52 - less than 28 so it is doing some kind of
34:55 - filtering there and it looks like these
34:57 - are only post by query MS so if I go to
34:59 - the last page here then there are three
35:02 - on the last page so this is the fourth
35:04 - page so that means that there would be
35:05 - three pages of five so 15 and then 16 17
35:09 - 18 so that total is correct so this is a
35:12 - nice feature to add to a blog
35:14 - application like this because you know
35:17 - if you're going through and reading an
35:18 - article maybe you'll click and read this
35:20 - article here if you like the article
35:22 - maybe you want to see more by that
35:24 - author so now we can just go click on
35:26 - the author and it takes you to all of
35:28 - the posts by them so we can see here
35:30 - post by test user a total of 10 so that
35:33 - should be two pages and it is two pages
35:35 - of five
35:36 - and also this make sure that we get a
35:38 - 404 page for users that don't exist so
35:41 - if I go to just some gibberish page here
35:44 - then we can see that we get a 404 for a
35:47 - user that doesn't exist so that is good
35:49 - so we can see that these user pages are
35:51 - working well and that we have pagination
35:54 - working for the post on these pages also
35:56 - okay so I think that it's going to do it
35:58 - for this video I hope that now you have
36:00 - a good idea for how you can get
36:02 - pagination working on your website and
36:04 - the different ways in which you can
36:06 - create the links and handle the logic
36:08 - for those and your application also we
36:10 - learned how to create new list views
36:12 - with custom filtered queries and created
36:14 - a useful route for posts written by
36:17 - specific users in the next video we'll
36:19 - be learning how to send emails and how
36:21 - we can use that to reset a user's
36:23 - password but if you have any questions
36:25 - about what we covered in this video then
36:27 - feel free to ask in the comment section
36:28 - below and I'll do my best to answer
36:29 - those and if you enjoy these tutorials
36:31 - and would like to support them then
36:32 - there are several ways you can do that
36:33 - the easiest ways to simply LIKE the
36:35 - video and give it a thumbs up and also
36:37 - it's a huge help to share these videos
36:38 - with anyone who you think would find
36:39 - them useful and if you have the means
36:41 - you can contribute through patreon and
36:42 - there's a link to that page in the
36:43 - description section below be sure to
36:45 - subscribe for future videos and thank
36:47 - you all for watching
36:58 - you

Cleaned transcript:

hey there how's it going everybody in this video we're gonna add a little more functionality to our site by adding some pagination so that we aren't pulling down too many posts at once and also we'll learn how to create a page of post filtered by a specific user that is also going to be paginate 'add so let's go ahead and get started so first of all since we're going to be working with pagination I'm going to take a second to add more posts to our current application from a variety of different users that way we have enough posts to see this pagination in action now I'm going to add some posts with a short script in the Jango shell using a JSON file that I've prepared but if you want to skip this part then it's not completely necessary I'm only doing this so that we have more data but if you'd like to follow along without doing this then you could just create some additional posts on your own so you only need about ten posts or so to see this pagination in action but if you do want to follow along and use the same JSON file as me then I've left a link in the description section below to the JSON of my sample post that I'll be creating here and if you want to use the same titles and content that I'm using in the video then you can just download that and use it now if you do want to use the shell to add these posts then I've actually put that post dot JSON file within my project folder where the manage dot py file is located so you should do that too if you choose to do the same so this is the file here this post Chaisson and these are the titles and the fake content and we can see that this is located here in our Django project so now I'm going to close that down and open up our terminal and I'm gonna add these through the Django shell so I'm gonna say Python manage dot py and then she'll and again this part is optional you can just manually add about 10 posts or so from the application that we've currently built and that will be fine but to do this if you want to do it this way then within the shell I'm gonna make a couple of imports so I'll import JSON and then I want to import my post model so from blog models import post and since that post dot JSON file is in the same directory as my manage py file then we can just open it up directly so I can say with open and that is post dot JSON and we'll say as F and now within here we have to end it now we'll use the JSON module to load that into Python so I'll say posts underscore JSON is equal to json dot load and we want to load in that file okay and now i'm going to loop over all the posts that were in my json file and add them to our application so i'll say for post in post underscore json and now we need to indent since we're inside a for loop now we'll create a post so post is equal to post and we will set the title equal to that post and access the title key and then we'll do the same thing for content so I'll say content is equal to post and access the content key and lastly we will say that the author underscore ID is equal to post and we will access the user underscore ID of that object and those keys that I'm accessing there are just what I call those inside the JSON file so on the next line we will do a post dot save to save all of those okay and it looks like we didn't get any errors so that's good now I can exit out of the application and now we should have about 25 more posts or so now that we've run that short script so now let me clear my screen okay so since we didn't get any errors they should have saved all those properly so let's run our application and see what our home page looks like so I'll say Python manage py run server and now we can open this in the browser so I will reload this okay so now it looks like we have more post to work with now so that's good so that worked and these posts are just gibberish lorem ipsum generated stuff so if it asks you to translate them or anything like that then you can just say no so now we should have about 25 new post so if I scroll down through these then we can see that it's kind of lot of information to have on a single page now if these posts had images included in them and things like that then loading them all in at once like this could really slow down our webpage it would be better if we could paginate this stuff so that we can load in a certain number of posts on one page and then display links at the bottom of the page to the other pages of posts and Django makes this really easy for us so to do this we're going to be working with a paginate or object so let me stop our dev server for a second and open up the Jango shell so that we can look at a paginate or object interactively so I will pull up our dev server and stop this for a second and let's open back up our Python shell ok so within here I'm going to import the paginate or clasp and to do that we can say from Jango dot cor dot paginate err import paginate err and now let's create some dummy posts that we want to paginate so I'm just going to do a list of short strings so I'm just going to say one and then let me copy this so I can just paste it in five times here and now I'll change the numbers of these so this will be the second post this will be the third this will be the fourth and this will be the fifth okay so now we're going to create a paginate or object out of these posts and we are going to make this so that it is two posts per page so I'll say P is equal to paginate err and then we will pass in posts and then a 4 post per page okay so we can pretend that the list of strings is actually a list of articles and we just broke that up into two posts per page so there should be three pages total so with one value left on that third page so if I say P dot num underscore pages then we can see that we have three pages and if we wanted to loop over those pages then we could use the page range method now that will return a Python range that we can loop over so I'll say for page in P dot page underscore range that's actually not a method it's an attribute so we don't need to put parentheses there and then we'll say print page and we can see that it loops over those three pages and if we want to look at a specific page then we can access it by saying so let me clear the screen here we can access it by saying p1 is equal to and now I'm just going to get page one by saying P page one and now if we look at this then we can see that it's page one of three and we can get the specific page number as an integer by saying p1 dot and that returns the number for that page now we can also look at posts on this page by saying P 1 dot object underscore list and if we run that then we can see that that returns 1 & 2 as the objects on that first page now probably the most important thing that we'll be using in terms of creating navigation links for these pages is whether or not they have previous or next pages so we're on page 1 so we shouldn't have a previous page since this is the beginning so to check that I can say P 1 dot has underscore previous and this is a method so put parentheses there and we can see that that is false but we should have a next page since there are three pages and we're only on the first page so if I say P 1 dot has next then this should be true and it is and if we want to get that next page number as an integer then we could do that by saying P 1 dot next underscore page underscore number and that is a method and we can see that the next page is 2 so that was a quick rundown of paginate or objects and I know that was really fast but I just want to show you a couple of things that we're going to be using in order to loop over these pages whenever we use this on our site so let's actually see how we can use this in our views and templates in order to paginate our posts so let's open up our views so I'm going to exit out of here and now let's open up our views and we want to open up the views for our blog so I'm gonna open the blog and then open our views here and now let me scroll down to the home page because this is one of the main ones that we're going to want to be paginating because right now we have so many posts on that home page now we're using classbased views and we saw in the last video how this can save us a lot of code by creating a lot of stuff for us in the background and pagination is no different we don't actually have to import that paginate or class and create that ourselves all we need to do is set an attribute on our list view called paginate by so underneath ordering here I can just say paginate underscore by is equal to 2 now I'm just using 2 so that we can see what this looks like with a large number of pages and I'll set that to something higher once we're done like five posts or ten post per page and with that small change that will actually give us some pagination functionality so let's see what we have so far so let's pull back up the terminal here and I'm going to rerun that dev server and now let's open up the home page go up to the top here and let me rerun this okay so we can see that when I reloaded that we have two posts on this page so something is working but right off the bat we can see that we don't have any links to the other pages so we'll have to do something to fix that but we can actually hard code the page request into the URL to get these other pages right now so if I go up here to my url bar and I do a forged slash and then question mark to specify that we want to put in a parameter then I can say question mark page is equal to two and if I run that then that URL query parameter of page equal to two got passed to our view and then our view handled that and gave us the second page so we had about five posts before and then I added 25 posts with that script so I think now we should have around 30 posts so there should be around 14 or 15 pages total since there are two paid posts per page so let me try to go to page 14 we can see that there is a page 14 let me try 15 okay so we must only have 28 posts because when I go to page 15 we get a 404 and anytime you run out of pages and requests that page that doesn't exist then you will get a 404 which is good okay so now all we need to do is add some links in our template so that we can actually navigate to these pages by clicking on them rather than manually typing them in to the URL bar like we're doing it right now and our classbased view already passes in the context that we'll need in order to access this page information in our template so to do this let's open up our home dot HTML template where where we're going to be displaying all of our posts so first let me go back to the home page and now let's open up our editor and open up our home HTML template so that is within our blog app and templates and then they blog subdirectory and then home HTML ok so I think a good place for these pagination links will be right after our for loop where we loop over all of the posts so I'm going to go underneath our for loop here and now we can put in our pagination logic so the variables that got passed into our template are so let me put in a code block here and I'll say if one of those is is underscore paginating and that'll just tell us if this page is paginating so now I'm going to close off that if statement by saying end if and now we'll go inside here and if this is paginate 'add then we'll print out some paginating links now there are a lot of different ways that you could style your paginating links but one way that I like is that if the page has previous posts than to give them an option to go to the very first page and also an option to go to the previous page so I'm gonna do that by saying we'll say if and this is going to be called page underscore obj I'm sorry that is obj and that is the page object that our view passed into our template and we've already worked with some of these page objects when we looked at these in the shell so I can check if this has previous pages by saying if page underscore obj dot has underscore previous and then we can end that if statement and let me break these up a little bit so end if and I will give some room here okay so if our current page has a previous page then I'm going to give them two options I'm going to give them a link to go to the first page and then a link to just go to the previous page so this will be an anchor tag and this one I will say first so this will be a link to the very first page so for the href here I'm just going to put in question mark page equal to one so no matter what route we're on if it has pagination then this will use that URL query parameter of page equal to one to go to that first page of pagination so now let's also give this some styles so I'll say class is equal to and we will make this look like a button and I will give this a button style of BTN outline info that's like a blueish style and also I'm going to give this a margin bottom of 4 so MB 4 ok and this will go a lot faster now that I can copy and paste some of these so now I'm going to copy this now since this current page has a previous page then I'm going to give them an option to go to the first page and also the previous page so to get to the previous page instead of saying that we want the page equal to 1 then I'm going to remove that one and now put in curly braces to access a an attribute here and I'll say page underscore obj to access the page object and then dot previous underscore page underscore number so now when they click on this previous link it will go to the page equal to the previous page number okay so now let's move on and now that we've displayed the previous pages now we want to display a certain number of pages around the current page so for example if we're on page 5 then we'll like to have links to a few pages before 5 and a few pages after 5 so that someone can easily navigate to pages nearby so I'm going to do a little trick here that I found online that allows us to do this so I am going to open up a code block here and this will be a for loop and we're going to loop over all of the pages and the paginate err so I will say for num in and then page underscore obj dot paginate err to get the paginate err object of our current page and then we can use that page underscore range that we saw before to loop over all of the pages and now let me end this for statement so I'll say IND 4 and then within this for loop so now within this loop we only want to print out the current page and a few pages surrounding the current page so first of all to see if we are on the current page let's put in a conditional here so I will say if the page underscore obj dot number which is going to be the current pages number if it is equal to the number that we were currently on through this loop then that means that the current page should be displayed a little differently than the other pages so we'll just make this one a little darker so first of all let's end this if statement and if and within this if statement let me grab one of these other anchor tags to go off of so I'll grab that one and paste this in now first of all since this is the current page we don't want this to be an outline we just want this to be a solid button and instead of the page going to page one we instead want this to go through whatever number we are currently on through in the loop now if it's a if this doesn't make sense yet I know that this is kind of confusing but once you actually see this in the site and then compare it back to the code then you'll be like oh okay I see what we were doing there so the text that we want to be displayed on this button is just going to be the number on through the loop so now that is what handles the current page when we see it through the loop and now we just want to print out a few pages that surround this current page and to do this we can use a couple of Django template filters so I'm going to put in an elf's statement here and this is actually going to be an L if so I'll say L if the num that we were on that we are on through the loop if that is greater than the page underscore obj dot number and then I'm going to use a filter here so that is that vertical bar tab and we want to add now they don't have a subtract so we have to say add and we want to add a negative three so basically what this is saying as we're looping through our page range this is saying if the number that we're currently on is within three previous pages then we want to print it out and we want to get all of the pages within the three pages so I'll also say and and I'm just going to copy this part here and paste that in and I'll say if the current number that we're on through the loop is less than the current page number and then add three then we will also print out a link to that page as well and we are very close to being done here so that we can see what this actually looks like in the browser because I know that this is confusing especially just to look at when you're not actually doing it so since this isn't the current page I'm going to give this an outline of BTN outline info and okay finally if the page has next pages then I'm also going to print out an option for them to go to just the next page and also the last page so that they can jump directly to the last page so I'm going to copy this section up here because it's going to be fairly similar and after our for loop in here I'm going to paste that in and now we'll say if the current page object has next then we'll want to have a link to that next page so for the text on that button I'll say next and then for the page that we want to link to we can say page underscore obj dot next underscore page underscore number and save that and finally we want to also give them a link to the very last page so on this link I will say last and for the page that we want to link to we will just say page underscore obj and then we'll access the paginate err object and then we will access the num underscore pages so if there are 30 pages then this will say you know that this page is equal to 30 okay and if I typed all of that out correctly so let me see if I can fit all of this in so everything that is on the screen here is what we just typed in and I don't think I can fit at all so that's as much as I can get in there okay so I know that that was a lot of if statements but if you were at all confused with any of that that it'll probably make more sense once we see how this actually works on the front end and then if you want to modify you know how we're displaying the pages in any way then you can go back and change this however you'd like so now let's save this and open this up in our browser and see how this looks so first of all our dev server is still running so that's good and now let me reload the home page okay so this is what all of that logic did for us so we are currently on page one so we can see that that is styled differently that is just a solid button and page one doesn't have any previous pages so we can see that we don't have a link to go to a previous page or the very first page but and and then it also puts out page two and three since page two and three are close to one now we also have a next link here that will just take us to page two or we can go to the very last page by clicking on last so if I just go to page three actually let me go to like page seven or so to where we're right in the middle okay so if I go to page seven we can see that now we have previous pages so we can either go to the very first page so page number one we can go to the previous page which is page six and we also have page seven which is a solid color and this is what that filter did when we printed out the pages that were within three pages previous and three pages next so we can see that just to print out some of the nearby pages it prints out five six before and then eight and nine afterwards and we still have the next pages so we can go to the next page or we can simply go to the last page so hopefully after seeing that demo on the front end then you'll be able to go back to this code that we just wrote here and kind of make more sense of that okay and that will actually do it for our pagination so the pagination is now done so now that that's done let's change the post per page back to a higher number because having to post per page is kind of silly so I was only using that for a demo so I think five post per page would actually look pretty good so to do this we just need to go back to our views so I still have this open and change paginate by equal to something larger so you can do five or ten if you'd like so I'll do five and then go back to our home page here and now five posts and if we scroll down then we can see that our pagination is still working and now it says that our last page here is actually just going to be page six so it looks like all of that is still working so that's good okay so now there's one more thing that I'd like to do before we finish up this video now if we look at our home page here then we can see that the user name of the user who made the post is currently a link but it doesn't go anywhere so if I click on these and it's just a dead link so let's build a route that will display only the posts from that particular user when you click on that link and if the user has a bunch of post then we want those to be paginate ado it's going to be very similar to our home page list view that we currently have but we're just going to filter that list by that user so let's go ahead and see what this looks like so I'm going to open up our views and like I said this is going to be very similar to our post list view that we're using for our home page so let's just copy that so I'm going to copy that and right underneath it I will paste that in and now let's make a view called user post list view and for the template name here let's just create a template called user underscore post dot HTML so currently this will still list all of the posts from our post model but we want to add a filter to this that only gets the posts from a certain user and that is going to come directly from the URL so when we create a new URL pattern for this well specify the username and the URL path itself so we'll set that whenever we create the URL pattern here in a second but for now let's just assume that we have a username variable passed into the URL so in order to modify the query set that this list view returns we can override a method called get underscore query underscore set and change the query set from within there so let's do that so down here I'm going to say def get underscore query underscore set and this takes self as the first argument and now we want to get the user associated with the username that we're going to get from the URL so at this point if that user doesn't exist then we'll want to return a 404 telling the user that that page doesn't exist and I think that's better than returning an empty page for anything that they just type into the URL and to do that we can use a shortcut called get object or 404 and as the name implies there it will get an object from the database if that object exists and if it doesn't exist then it'll just return a 404 so first we need to import that and that is from Django shortcuts so we'll just go up to the top here and we're already importing render from Django shortcuts so now we just need to also import get underscore object underscore or underscore 404 so now let's go back down and also looking at the URLs here we actually haven't imported the user yet either and since we're going to be using that user model we need to also import that so I will also import that user and we've seen this a couple of times now it is from Django dot contrib dot auth dot models import user and now we can use those imports to grab the user so down here in the method that we just created that is right here get query sets we can say user is equal to get object or 404 and we want to get this object from that user model and the user that we want to get is a user with a username equal to and now we want to get the username from the URL and to do that we can say self dot Korg's dot get and kwargs are going to be the query parameters and we can get the username from the URL so now if that user exists then we will capture them in that user variable if they don't exist then it's just going to return a 404 so now we can limit our results for this ListView by finishing our post query so now we can simply say return post dot objects filter and we want a filter post that have an author equal to that user that we just got now there's actually one more thing that we need to do here now since we're overriding the query that this ListView will be making then our order by that we set up above here will also be overridden to so we can just remove that and instead we'll just add it directly to our query so to do an order by directly on a query right here at the end we can just say dot order underscore by and we want to order by the same thing that we had before so that minus date underscore posted so returning that filtered post query and our get query set method is what will limit our posts on that page to that specific user that has their user name as the parameter and the URL okay so now let's actually create that path in our URL patterns that contains the user name parameter so we want to open our blog URLs so within our blog app here I'm going to open our blog URLs and first we need to import that view that we just created and these are all of our views here so I'll just add on to this and that was user post list view and now I'm going to create a path where we pass in the user that we want posts from into the URL so I am just going to copy one of our default paths here so I'll just get the post list view path here and I will just put this right after our home page so now we'll say that if they navigate to user ford slash and then the username so again we'll put in these angle brackets here and we can use user name as the URL variable now just like with our primary key here we can specify what kind of data type this is going to be so we can say that this is going to be a string okay and the view that we want to handle this path is going to be that user post list view and then the name that we want to use here let's just use user post okay so now we have the view and we have the URL pattern now let's just create that template so we said in our view that we would name that template user underscore post dot HTML so within our blog templates I'm going to create a new template here and call this user underscore post dot HTML and this is going to be very similar to our home page so I'm just gonna use that as the starting point so I'm going to open our home page here and copy that and we want to keep all that pagination logic in there too because our user post page can be paginate adapt enough posts so the difference here between this and the home page will be that I'll add a heading at the top specifying that this is this user's page so right below the content block here I'm just going to put in an h1 tag and within the h1 tag I'll just say posts by and then we will access an attribute here and to get that user name from the URL we can just say view dot quarks dot user name and that will get the username that is passed into the URL and now let's also print out how many posts this user has so within some parentheses here we'll put the total number of posts that this user has so we'll put in our curly brackets here now how can we do this so one way that we can do this would be to get the current paginate err page so page underscore obj and then get the paginate err object from there and then access the dot count attribute and the dot count attribute will return the total number of objects along all of the pages in that paginate err so if you have you know 30 pages of two objects then this will return a count of 60 okay so with that in place let me also just give this a quick class here so I'll set a class equal to and I just want to give this a margin bottom so I'll say MB 3 now the post for loop will stay mostly the same but a couple of things are going to change so we can actually set the href for the user now to go to the user post route that we are creating right now so right here is where we're printing out the post author and we can see that this link is dead so let's actually let this link to this users users page so we will put in a code block here and we'll say that this is a URL and we called that URL user posts and the username that we want to link to for this route is going to be the username of this author so we will say post dot author dot username and save that and we're actually going to have to change that in our home and post template as well and I know that having repeated code in multiple locations isn't the best practice but we'll fix that in a future video when we see how to use sub templates for repeated sections like this but for now let's just finish this up so we need to add those links to this user route to our home page and our post detail template as well so let's do that so I'm just going to copy this URL here so the beginning of this code block to the end and I know that this posts author has a link in the home page as well so in our home template I'm going to scroll up to where we have the link for this post author and now we'll just post that in so a URL to user post using that post author username and save that and we also want to set this in the post detail template as well so we can see here this is where we're printing out the author that link is currently dead we will paste that in for the user post post user name and actually almost made a mistake here this is in the post detail template remember this is called object so let's say object dot author dot user name okay so what those changes let's save everything and then open this in the browser and try to see post created by a single user so I will save all of that and check our dev server dev server is running so now let's reload our home page here and now let's click on this query MS user and see if we can go to their specific page so now we can see this says post by query MS twentyeight total so let's see if that's right if I go to the last page here okay so actually this isn't right right now something is not returning properly I think twentyeight posts is the total number of posts that we have on the entire blog right now and plus we can see that this is returning test user posts as well this should only be posts from this specific user so it's getting the username correctly from the URL but something must be wrong with the query set that we're getting back so let's go check that so I'm going to open up sublime and go to our views and so we have our get query set method here now this is my fault this query set is actually one word so it should be get underscore query set and so if I save that that should solve our problem so sorry about that so now let me go back to our page and let me go back or I'll just click on this user again so now if I click on this user well now it looks like we have another error here so this says query set object has no attribute order a by so I spelled order by wrong sorry about this guys I usually don't make this many mistakes so in the views here I misspelled order by you all probably notice that as I was typing it out so let me save that everything else looks good let's reload this and the browser here so let me just reload this page okay so now this is looking more like it so now it says post by query MS 18 so that is less than 28 so it is doing some kind of filtering there and it looks like these are only post by query MS so if I go to the last page here then there are three on the last page so this is the fourth page so that means that there would be three pages of five so 15 and then 16 17 18 so that total is correct so this is a nice feature to add to a blog application like this because you know if you're going through and reading an article maybe you'll click and read this article here if you like the article maybe you want to see more by that author so now we can just go click on the author and it takes you to all of the posts by them so we can see here post by test user a total of 10 so that should be two pages and it is two pages of five and also this make sure that we get a 404 page for users that don't exist so if I go to just some gibberish page here then we can see that we get a 404 for a user that doesn't exist so that is good so we can see that these user pages are working well and that we have pagination working for the post on these pages also okay so I think that it's going to do it for this video I hope that now you have a good idea for how you can get pagination working on your website and the different ways in which you can create the links and handle the logic for those and your application also we learned how to create new list views with custom filtered queries and created a useful route for posts written by specific users in the next video we'll be learning how to send emails and how we can use that to reset a user's password but if you have any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways to simply LIKE the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
