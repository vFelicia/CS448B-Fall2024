With timestamps:

00:00 - hey everybody how's it going in this
00:02 - programming terms video we'll be going
00:04 - over the term first class functions now
00:06 - we're going to look at first class
00:07 - functions in both JavaScript and in
00:09 - Python so you can see the concept in two
00:11 - different languages and that may help
00:13 - the term sink in a little bit but don't
00:15 - worry if you don't know either of these
00:17 - languages what's important to take away
00:19 - from the video is the concept of first
00:21 - class functions and not the specific
00:23 - syntax of any one language so
00:25 - understanding first class functions will
00:27 - help you understand other terms such as
00:29 - higher water functions currying and
00:32 - closures so it's a very useful term to
00:34 - note ok so what is a first class
00:36 - function if you look up the definition
00:38 - on Wikipedia one of the first lines
00:41 - you'll see is that it says a programming
00:43 - language is said to have first-class
00:45 - functions if it treats functions as
00:47 - first-class citizens and then if you
00:50 - look up first-class citizens for
00:51 - programming it says that a first-class
00:53 - citizen some kind sometimes called a
00:56 - first-class object in a programming
00:58 - language is an entity which supports all
01:00 - the operations generally available to
01:03 - other entities these operations
01:05 - typically include being passed as an
01:06 - argument returned from a function and
01:08 - assigned to a variable ok so what
01:11 - exactly does that mean so that means
01:13 - that we should be able to treat
01:14 - functions just like any other object or
01:17 - variable so I think this will be more
01:19 - clear once we take a look at these
01:21 - coding examples so here on the Left I
01:23 - have Python and here on the right I have
01:25 - JavaScript so you can see this concept
01:27 - working in two different languages ok so
01:30 - first of all let's see what it means to
01:32 - assign a function to a variable now this
01:35 - doesn't mean that we are assigning the
01:37 - result of the function to a variable
01:39 - this is where some people get confused
01:41 - so and the example I have pulled up here
01:44 - this is what we're used to doing with
01:46 - functions so we have a function called
01:48 - Square and we're setting this variable F
01:50 - equal to the square of 5 now down here
01:53 - on this line I'm printing out the
01:56 - function Square and I'm printing out
01:58 - this variable F so I'm going to go ahead
02:00 - and run that and then I'm going to do
02:02 - the same thing in JavaScript and I'll go
02:04 - ahead and run that so you can see
02:06 - whenever I print out the function square
02:08 - you can see that it prints out that it
02:11 - is a function called square now
02:13 - print out F it's printing out 25 and
02:16 - that's because we passed into five to
02:18 - the square function and that's the same
02:20 - thing here in JavaScript it's printing
02:22 - out the function square that we logged
02:24 - out and we're also logging F which is
02:26 - the square of five now what a lot of
02:28 - people don't realize is that we can
02:30 - remove these parentheses here and set
02:33 - our variable F to the square function so
02:36 - if I take out these parentheses and save
02:38 - that and let me do the same thing here
02:41 - in JavaScript and now we did take out
02:43 - those parentheses a lot of people get
02:45 - tripped up at this point and they only
02:47 - take out the arguments and they leave in
02:49 - the parenthesis but you don't want to do
02:51 - that because the parentheses mean that
02:52 - we're going to execute the function we
02:53 - don't want to execute the function we
02:55 - just want to set our variable F equal to
02:58 - the function not executed so now that I
03:00 - have my variable F equal to square what
03:03 - if I run this now so let me run this
03:07 - code so now you can see that when it
03:09 - prints out F F is equal to our square
03:12 - function so this is one of the aspects
03:14 - of what it means to be a first-class
03:16 - function so now we can treat the
03:18 - variable f as a function so now I can
03:21 - use f just like I would use square so
03:24 - instead of printing out F what if I
03:26 - print out f of five and I run it just
03:28 - like a function so you can see now I get
03:31 - 25 there if I do the same thing in
03:34 - JavaScript then I will get 25 there as
03:38 - well so so far we assigned a function to
03:41 - a variable but we can also pass
03:43 - functions as arguments and return
03:45 - functions as the result of other
03:47 - functions so let's take a look at both
03:50 - of those examples and by the way if a
03:52 - function accepts other functions as
03:55 - arguments or returns functions as their
03:58 - result that's what you call a
04:00 - higher-order function so first let's
04:02 - look at an example of passing a function
04:04 - as an argument to another function so a
04:07 - great example of this is the map
04:08 - function in both Python and in
04:11 - JavaScript so the map function takes a
04:13 - function and an array as its arguments
04:16 - and it runs each value of that array
04:19 - through the provided function and then
04:21 - returns a new array of those results so
04:24 - I think that will be more clear if we
04:26 - take a look at an
04:27 - example here so I have a sample map
04:31 - function here this isn't the built-in
04:33 - map function but what we're going to do
04:35 - is just build our own from scratch so
04:37 - that way we can see exactly what's going
04:39 - on okay so let me take out all these old
04:43 - variables here and uncomment out this
04:46 - and I'll push these down for now and let
04:48 - me do the same thing over here in
04:51 - JavaScript so let me go ahead and move
04:55 - these up okay let me go ahead and
04:58 - uncomment out this code here okay so we
05:01 - have a custom built map function here
05:04 - which is going to behave kind of like
05:06 - the built-in map function and what we're
05:09 - doing is we are taking in a function as
05:12 - an argument and then we're taking in an
05:14 - array as an argument and then here we're
05:16 - going to create an empty result array
05:18 - loop through all of the items in the
05:21 - passed an array and run each of those
05:24 - items through the function that we
05:26 - passed in as an argument and append that
05:28 - to the result and then after we're done
05:30 - we're going to return the result so you
05:32 - can see here I have an example where I'm
05:34 - setting this squares variable equal to
05:37 - the my map function I'm passing in the
05:40 - square function that we created up here
05:42 - and then I'm also passing in a list of
05:45 - values from 1 to 5 and again both here
05:48 - and Python and in JavaScript notice that
05:51 - I'm not using the parentheses when I
05:54 - pass this square function in to this
05:56 - other function because adding the
05:58 - parentheses would try to execute the
06:00 - function and that's not where what we're
06:02 - doing here
06:02 - we aren't executing the function until
06:05 - this line here within our map function
06:08 - so let me go ahead and run this so that
06:11 - you can see the results whenever we pass
06:13 - in this list and the square function to
06:16 - our map function so you can see here we
06:18 - printed out the squares it took this
06:20 - list of 1 through 5 and squared all of
06:22 - those numbers and if I do that over here
06:25 - in JavaScript then it does the same
06:26 - thing and actually to get the same
06:29 - result here I'm going to have to start
06:31 - at 1 and go to the end of that so let me
06:34 - save that and rerun it okay so now you
06:36 - can see that we're getting the same
06:38 - results okay so this is useful because
06:41 - now we can pass any function into our
06:44 - custom map function that we created so
06:46 - for example I have a cube function down
06:49 - here now let me grab this cube function
06:52 - and just pass it in to our map function
06:54 - and I'll do the same thing over here in
06:56 - JavaScript so let me clear that out and
06:59 - rerun that and in my Python example I'm
07:02 - going to have to actually cut this out
07:04 - and move it above here by the square
07:06 - function so let me save that and rerun
07:08 - it so you can see all that we did
07:10 - differently was pass in this new
07:12 - function as an argument to our map
07:15 - function and then it used that function
07:18 - within here to execute on each of these
07:21 - values instead of the square function so
07:23 - it's it's useful to be able to pass
07:25 - around functions like this okay so
07:28 - lastly let's see what it looks like to
07:30 - return a function from another function
07:33 - so that is one of the aspects of what it
07:37 - means to be a first-class function now
07:39 - this seems to be what trips people up
07:41 - the most and I have to admit I get
07:42 - tripped up on this all the time too
07:44 - because it can get complicated to keep
07:46 - track of everything and sometimes it can
07:48 - be hard to visualize exactly what's
07:50 - going on all at once but let's take a
07:52 - look at some simple examples and see if
07:54 - we can see what this looks like so let
07:57 - me go ahead and just remove all the code
07:59 - that I had and uncomment out these other
08:02 - examples that I have down here okay so
08:04 - first let's take a look at this really
08:07 - simple logger function that I have so
08:09 - I'm going to uncomment out these and
08:11 - save these okay so this is one of the
08:14 - simpler examples that I could think of
08:16 - to start out with so we have this
08:19 - function here called logger and this
08:21 - logger function takes in an argument a
08:23 - message argument and then within this
08:26 - function we have another function called
08:29 - log message and this function doesn't
08:31 - take in any arguments and all it does
08:33 - when you execute this log message
08:35 - function is that it prints out this log
08:38 - statement with the message that we
08:41 - passed in to our logger function and now
08:43 - down here at the bottom we are returning
08:45 - this log message function that is within
08:49 - our logger function now I know that
08:51 - might sound confusing but let's go ahead
08:53 - and run an example and walk through
08:55 - see if we can see what's going on okay
08:56 - so let me go ahead and execute this in
08:59 - both Python and in JavaScript and let's
09:02 - walk through exactly what just happened
09:04 - so what we did is we set this log hi
09:08 - variable equal to our logger function
09:12 - and we passed in a message of hi and
09:15 - then so this came in and it saw that we
09:18 - had a function created here and then we
09:21 - returned that function and again no
09:23 - parenthesis so that function did not
09:25 - execute at that time so now our log hi
09:29 - variable is equal to this function
09:33 - that's what got returned from this so
09:36 - now we can run this log hi variable just
09:40 - like it's a function because it is a
09:41 - function so now we can treat this
09:43 - variable just like this function here
09:47 - and it doesn't take in any arguments so
09:49 - if we put in these parentheses here and
09:51 - what it's going to do is it's going to
09:53 - execute this log message and then it
09:56 - came in here and printed out the log
09:58 - with our message so one thing important
10:01 - to point out here is that from this step
10:04 - two when we executed the function at
10:06 - this step that it remembered our initial
10:09 - message that we passed in to this
10:12 - initial logger function now this is what
10:15 - we call a closure but again I'll go in
10:18 - more in-depth into closures in a future
10:20 - video but this just kind of knocks the
10:23 - point home that understanding these
10:25 - first-class functions will help you
10:27 - understand these more complex terms like
10:29 - closures and higher-order functions okay
10:32 - so why would returning a function from
10:36 - another function like this be useful
10:38 - well I tried to some of the practical
10:41 - examples of this can get really
10:43 - complicated really fast so I tried to
10:45 - make a semi practical example that we
10:48 - could look at and still understand
10:50 - pretty well so I'm just going to remove
10:51 - this logger function that I have here
10:53 - and uncomment out the rest of the code
10:56 - that we have here so let me do this in
10:59 - Python also and I'll just go ahead and
11:02 - run that and over here I'm going to
11:04 - clear out the console and run that code
11:07 - okay so let's see if we
11:08 - and understand what's going on here so I
11:11 - have a function here called HTML tag
11:14 - which takes in an argument called tag
11:17 - and within this function I have another
11:20 - function called rat text and wrap text
11:23 - takes in an argument called message and
11:26 - when you execute this wrap text function
11:28 - it prints out this it prints out the tag
11:33 - within opening brackets here and then it
11:35 - prints out the message and then it
11:37 - prints out the tag again in closing
11:39 - brackets and it does the same thing here
11:41 - in JavaScript so then back to our HTML
11:44 - tag function outside of the wrap text
11:46 - what we're doing is returning this wrap
11:50 - text function okay so now let's look at
11:52 - our examples so I have this variable
11:55 - called print h1 and I'm setting this
11:58 - equal to our HTML tag function and I'm
12:01 - passing in a an a string of h1 so at
12:06 - this point whenever I do that actually
12:08 - to kind of explain this a little bit
12:11 - better I'm going to comment out these so
12:13 - at this point it's not actually doing
12:14 - anything yet so you can see if I rerun
12:17 - this code it hasn't actually done
12:18 - anything and if I come down here and
12:20 - just print out this print h1 variable
12:24 - then you can see that it's just equal to
12:27 - this wrap text function so it's just
12:30 - waiting to be executed so now we can use
12:33 - this print h1 variable just like it's a
12:37 - function because it is a function and if
12:39 - I uncommon out these lines here now
12:42 - remember the function that we returned
12:44 - this wrap text function it takes in an
12:47 - argument called message so I can pass in
12:52 - I'm going to execute this print h1
12:55 - variable that we just created and I'm
12:57 - going to pass in the message of test
12:59 - headline and then down here I'm running
13:02 - this code again and I'm passing in a
13:04 - message of another headline so whenever
13:06 - I run this now you can see that it ran
13:09 - our wrap text function and it remembered
13:13 - the tag that we passed in before so it
13:16 - prints out the tag that we passed in the
13:18 - HTML tag function here and then it also
13:21 - printed it out
13:22 - our message that we passed into each of
13:24 - these variables which is equal to our
13:26 - rap text function and everything that
13:29 - I'm describing over here in Python is
13:31 - also the exact same thing that's
13:33 - happening over here in JavaScript you
13:35 - can see it's the exact same process
13:36 - setting this variable equal to HTML tag
13:39 - function passing in the tag of h1 it
13:42 - returns the wrap text function waiting
13:46 - for this message argument so now our
13:49 - print h1 variable is equal to that
13:52 - function that got returned waiting for
13:54 - that message so now we can execute this
13:57 - just like any other function we passed
13:59 - in our message and it printed out our
14:02 - tags with the message and then the
14:05 - closing tags and then just to illustrate
14:07 - the point a little further you can see
14:09 - that the same thing down here starting
14:12 - off with a paragraph tag instead so you
14:15 - can see that that that worked as well
14:17 - now there's a lot more practical
14:19 - examples that people use this
14:21 - functionality for a lot of people use
14:23 - this for logging and in python it's it's
14:26 - similar to how we use decorators and you
14:29 - can see how returning functions like
14:31 - this can get extremely complicated and
14:33 - confusing because it's easy to lose
14:36 - track of exactly what's going on and
14:38 - like I said I'll go further into
14:40 - closures and a future video but to
14:42 - understand those we really need to have
14:44 - a grasp on these first-class functions
14:47 - and how we can use these functions not
14:50 - just execute the functions but we can
14:52 - also pass them around just like any
14:54 - other variable we can assign them to
14:56 - variables we can pass them in as
14:59 - arguments like we did in our previous
15:01 - example and we can return these
15:03 - functions from other functions so
15:06 - hopefully after this video you get a
15:08 - sense of all the different things that
15:10 - you can do with those so I think that's
15:12 - going to do it for this video if you do
15:14 - have any questions just feel free to ask
15:15 - in the comment section below
15:17 - be sure to subscribe for future videos
15:19 - and thank you all for watching
15:22 - you

Cleaned transcript:

hey everybody how's it going in this programming terms video we'll be going over the term first class functions now we're going to look at first class functions in both JavaScript and in Python so you can see the concept in two different languages and that may help the term sink in a little bit but don't worry if you don't know either of these languages what's important to take away from the video is the concept of first class functions and not the specific syntax of any one language so understanding first class functions will help you understand other terms such as higher water functions currying and closures so it's a very useful term to note ok so what is a first class function if you look up the definition on Wikipedia one of the first lines you'll see is that it says a programming language is said to have firstclass functions if it treats functions as firstclass citizens and then if you look up firstclass citizens for programming it says that a firstclass citizen some kind sometimes called a firstclass object in a programming language is an entity which supports all the operations generally available to other entities these operations typically include being passed as an argument returned from a function and assigned to a variable ok so what exactly does that mean so that means that we should be able to treat functions just like any other object or variable so I think this will be more clear once we take a look at these coding examples so here on the Left I have Python and here on the right I have JavaScript so you can see this concept working in two different languages ok so first of all let's see what it means to assign a function to a variable now this doesn't mean that we are assigning the result of the function to a variable this is where some people get confused so and the example I have pulled up here this is what we're used to doing with functions so we have a function called Square and we're setting this variable F equal to the square of 5 now down here on this line I'm printing out the function Square and I'm printing out this variable F so I'm going to go ahead and run that and then I'm going to do the same thing in JavaScript and I'll go ahead and run that so you can see whenever I print out the function square you can see that it prints out that it is a function called square now print out F it's printing out 25 and that's because we passed into five to the square function and that's the same thing here in JavaScript it's printing out the function square that we logged out and we're also logging F which is the square of five now what a lot of people don't realize is that we can remove these parentheses here and set our variable F to the square function so if I take out these parentheses and save that and let me do the same thing here in JavaScript and now we did take out those parentheses a lot of people get tripped up at this point and they only take out the arguments and they leave in the parenthesis but you don't want to do that because the parentheses mean that we're going to execute the function we don't want to execute the function we just want to set our variable F equal to the function not executed so now that I have my variable F equal to square what if I run this now so let me run this code so now you can see that when it prints out F F is equal to our square function so this is one of the aspects of what it means to be a firstclass function so now we can treat the variable f as a function so now I can use f just like I would use square so instead of printing out F what if I print out f of five and I run it just like a function so you can see now I get 25 there if I do the same thing in JavaScript then I will get 25 there as well so so far we assigned a function to a variable but we can also pass functions as arguments and return functions as the result of other functions so let's take a look at both of those examples and by the way if a function accepts other functions as arguments or returns functions as their result that's what you call a higherorder function so first let's look at an example of passing a function as an argument to another function so a great example of this is the map function in both Python and in JavaScript so the map function takes a function and an array as its arguments and it runs each value of that array through the provided function and then returns a new array of those results so I think that will be more clear if we take a look at an example here so I have a sample map function here this isn't the builtin map function but what we're going to do is just build our own from scratch so that way we can see exactly what's going on okay so let me take out all these old variables here and uncomment out this and I'll push these down for now and let me do the same thing over here in JavaScript so let me go ahead and move these up okay let me go ahead and uncomment out this code here okay so we have a custom built map function here which is going to behave kind of like the builtin map function and what we're doing is we are taking in a function as an argument and then we're taking in an array as an argument and then here we're going to create an empty result array loop through all of the items in the passed an array and run each of those items through the function that we passed in as an argument and append that to the result and then after we're done we're going to return the result so you can see here I have an example where I'm setting this squares variable equal to the my map function I'm passing in the square function that we created up here and then I'm also passing in a list of values from 1 to 5 and again both here and Python and in JavaScript notice that I'm not using the parentheses when I pass this square function in to this other function because adding the parentheses would try to execute the function and that's not where what we're doing here we aren't executing the function until this line here within our map function so let me go ahead and run this so that you can see the results whenever we pass in this list and the square function to our map function so you can see here we printed out the squares it took this list of 1 through 5 and squared all of those numbers and if I do that over here in JavaScript then it does the same thing and actually to get the same result here I'm going to have to start at 1 and go to the end of that so let me save that and rerun it okay so now you can see that we're getting the same results okay so this is useful because now we can pass any function into our custom map function that we created so for example I have a cube function down here now let me grab this cube function and just pass it in to our map function and I'll do the same thing over here in JavaScript so let me clear that out and rerun that and in my Python example I'm going to have to actually cut this out and move it above here by the square function so let me save that and rerun it so you can see all that we did differently was pass in this new function as an argument to our map function and then it used that function within here to execute on each of these values instead of the square function so it's it's useful to be able to pass around functions like this okay so lastly let's see what it looks like to return a function from another function so that is one of the aspects of what it means to be a firstclass function now this seems to be what trips people up the most and I have to admit I get tripped up on this all the time too because it can get complicated to keep track of everything and sometimes it can be hard to visualize exactly what's going on all at once but let's take a look at some simple examples and see if we can see what this looks like so let me go ahead and just remove all the code that I had and uncomment out these other examples that I have down here okay so first let's take a look at this really simple logger function that I have so I'm going to uncomment out these and save these okay so this is one of the simpler examples that I could think of to start out with so we have this function here called logger and this logger function takes in an argument a message argument and then within this function we have another function called log message and this function doesn't take in any arguments and all it does when you execute this log message function is that it prints out this log statement with the message that we passed in to our logger function and now down here at the bottom we are returning this log message function that is within our logger function now I know that might sound confusing but let's go ahead and run an example and walk through see if we can see what's going on okay so let me go ahead and execute this in both Python and in JavaScript and let's walk through exactly what just happened so what we did is we set this log hi variable equal to our logger function and we passed in a message of hi and then so this came in and it saw that we had a function created here and then we returned that function and again no parenthesis so that function did not execute at that time so now our log hi variable is equal to this function that's what got returned from this so now we can run this log hi variable just like it's a function because it is a function so now we can treat this variable just like this function here and it doesn't take in any arguments so if we put in these parentheses here and what it's going to do is it's going to execute this log message and then it came in here and printed out the log with our message so one thing important to point out here is that from this step two when we executed the function at this step that it remembered our initial message that we passed in to this initial logger function now this is what we call a closure but again I'll go in more indepth into closures in a future video but this just kind of knocks the point home that understanding these firstclass functions will help you understand these more complex terms like closures and higherorder functions okay so why would returning a function from another function like this be useful well I tried to some of the practical examples of this can get really complicated really fast so I tried to make a semi practical example that we could look at and still understand pretty well so I'm just going to remove this logger function that I have here and uncomment out the rest of the code that we have here so let me do this in Python also and I'll just go ahead and run that and over here I'm going to clear out the console and run that code okay so let's see if we and understand what's going on here so I have a function here called HTML tag which takes in an argument called tag and within this function I have another function called rat text and wrap text takes in an argument called message and when you execute this wrap text function it prints out this it prints out the tag within opening brackets here and then it prints out the message and then it prints out the tag again in closing brackets and it does the same thing here in JavaScript so then back to our HTML tag function outside of the wrap text what we're doing is returning this wrap text function okay so now let's look at our examples so I have this variable called print h1 and I'm setting this equal to our HTML tag function and I'm passing in a an a string of h1 so at this point whenever I do that actually to kind of explain this a little bit better I'm going to comment out these so at this point it's not actually doing anything yet so you can see if I rerun this code it hasn't actually done anything and if I come down here and just print out this print h1 variable then you can see that it's just equal to this wrap text function so it's just waiting to be executed so now we can use this print h1 variable just like it's a function because it is a function and if I uncommon out these lines here now remember the function that we returned this wrap text function it takes in an argument called message so I can pass in I'm going to execute this print h1 variable that we just created and I'm going to pass in the message of test headline and then down here I'm running this code again and I'm passing in a message of another headline so whenever I run this now you can see that it ran our wrap text function and it remembered the tag that we passed in before so it prints out the tag that we passed in the HTML tag function here and then it also printed it out our message that we passed into each of these variables which is equal to our rap text function and everything that I'm describing over here in Python is also the exact same thing that's happening over here in JavaScript you can see it's the exact same process setting this variable equal to HTML tag function passing in the tag of h1 it returns the wrap text function waiting for this message argument so now our print h1 variable is equal to that function that got returned waiting for that message so now we can execute this just like any other function we passed in our message and it printed out our tags with the message and then the closing tags and then just to illustrate the point a little further you can see that the same thing down here starting off with a paragraph tag instead so you can see that that that worked as well now there's a lot more practical examples that people use this functionality for a lot of people use this for logging and in python it's it's similar to how we use decorators and you can see how returning functions like this can get extremely complicated and confusing because it's easy to lose track of exactly what's going on and like I said I'll go further into closures and a future video but to understand those we really need to have a grasp on these firstclass functions and how we can use these functions not just execute the functions but we can also pass them around just like any other variable we can assign them to variables we can pass them in as arguments like we did in our previous example and we can return these functions from other functions so hopefully after this video you get a sense of all the different things that you can do with those so I think that's going to do it for this video if you do have any questions just feel free to ask in the comment section below be sure to subscribe for future videos and thank you all for watching you
