With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning how to work
00:02 - with numeric data in Python and numbers
00:05 - are most commonly represented with
00:06 - integers and floats and the difference
00:08 - between an integer and a float is that
00:11 - an integer is a whole number and a float
00:13 - as a decimal so to see an example of
00:15 - this let's create a variable called num
00:17 - and let's just set this equal to 3 now
00:20 - python has a built-in function called
00:23 - type where we can see the data type of
00:25 - an object so if we print out the type of
00:29 - num and run this and we can see that it
00:32 - returns that that is of the class
00:34 - integer now if we were to set this
00:37 - number instead to 3.14 and now rerun
00:41 - this and we can see that now the type of
00:44 - number is a float so that's the main
00:47 - difference between an integer and a
00:48 - float now when working with numeric data
00:51 - it's common that you'll need to use some
00:53 - basic arithmetic so let me grab some
00:55 - comments from my snippets here just so
00:58 - that we have a reference for everything
00:59 - that we can do so I'll copy these
01:01 - arithmetic operators and paste these in
01:03 - and now let's go ahead and just run
01:05 - through each of these so the first four
01:07 - we've likely already seen a lot and are
01:10 - familiar with so for example addition we
01:13 - if we print it out 3 plus 2 and we can
01:16 - expect that equal to 5 if we print out 3
01:19 - minus 2 that should be 1/3 times 2
01:23 - should be equal to 6 and 3 divided by 2
01:25 - should be equal to 1.5 now for division
01:28 - to behave this way this is actually new
01:30 - in Python 3 if you're running Python 2
01:33 - then this will actually equal 1 because
01:36 - it drops the decimal but in Python 3
01:39 - that gives us the right answer of 1.5
01:41 - now if we don't want to drop that
01:43 - decimal then we do have a floor division
01:45 - and for division can be performed by
01:47 - adding 2 division signs so if I run this
01:51 - and now we can see it drops that decimal
01:54 - and it's equal to 1 so if you ever see
01:56 - these 2 division signs then that is this
01:58 - floor division now if you wanted to work
02:00 - with exponents and powers and we can use
02:02 - these 2 multiplication signs so if we
02:05 - wanted to print 3 to the second power
02:07 - then we could just say 3 with these two
02:11 - multiplication signs
02:12 - if I print that then we can see that
02:14 - that equals nine because three squared
02:16 - is equal to nine
02:17 - now this last operator here is called a
02:19 - modulo operator and it gives us the
02:22 - remainder after a division so three mod
02:26 - two will have a remainder of 1 because 2
02:29 - goes into 3 once with one left over so
02:33 - if we say 3 mod 2 and run that we can
02:37 - see that that is equal to 1 now a common
02:40 - use case for this is to tell if a number
02:42 - is even or odd now the reason for this
02:45 - is because every time you divide a
02:47 - number by 2 there are only two possible
02:50 - remainders it's either going to be 0 or
02:52 - 1 so for example if we look at a few
02:55 - more examples here so let me just print
02:58 - out a few more module operators and I'll
03:00 - do 2 mod 2 3 mod 2 4 mod 2 and 5 mod 2
03:04 - so if we run this then we can see that 2
03:07 - goes into 2 once with no remainders
03:10 - that's why we get a 0 2 goes into 3 once
03:13 - with 1 as a remainder so 2 goes into 4
03:17 - twice with no remainder and 2 goes into
03:21 - 5 twice with 1 as a remainder so we can
03:24 - see from this pattern that if you do a
03:26 - mod 2 on any number and there is no
03:29 - remainder and that number is even if you
03:31 - do a mod 2 on any number and the
03:33 - remainder is 1 and that number is odd
03:36 - and that's a pretty common check that
03:37 - you'll use a lot throughout Python
03:39 - programming ok so now let's look at the
03:42 - order of operations just like we would
03:44 - expect we can also use parentheses to
03:47 - change the order of operations just like
03:49 - with normal arithmetic so for example if
03:52 - we were to say let's see 3 times 2 plus
03:57 - 1 and with the normal order of
03:59 - operations we would multiply 3 & 2 which
04:03 - would give us 6 and then we would add 1
04:06 - which would give us 7 so if we run that
04:08 - then we can see that we got 7 as our
04:11 - answer but if I put a parentheses here
04:13 - around this 2 plus 1 and now with normal
04:17 - arithmetic the way that this would work
04:19 - is that it should first add up these
04:21 - numbers in the parentheses which should
04:23 - give us 3 and then 3 times 3 should give
04:26 - 9 so now if we run this then we can see
04:29 - that we got 9 so the order of operations
04:31 - does work correctly within Python like
04:33 - we would expect ok so now let's look at
04:35 - another common operation that you'll see
04:37 - a lot and that is incrementing a
04:40 - variable so if I make a variable here
04:42 - called num and I set this equal to 1
04:45 - then what are some ways that we can
04:47 - increment that value by one well one way
04:50 - that we could do this is to say that num
04:52 - is equal to num plus 1 and if we print
04:56 - out that num that we can see that it did
05:00 - increment it by 1 and now it's equal to
05:02 - 2 but incrementing values is such a
05:04 - common operation that there is a
05:05 - shorthand for this so instead we can
05:08 - just say num plus equals 1 so if we run
05:12 - that that we can see that it's still
05:13 - incremented at value up to 2 and you can
05:16 - use this syntax with the other
05:17 - operations as well so instead if we were
05:20 - to say num x equals 10 and ran this then
05:25 - we can see that we got 10 because it
05:27 - took our original number and multiplied
05:29 - 1 by 10 okay so a couple more things
05:32 - here we also have some built-in
05:35 - functions available to us to work with
05:37 - numbers and one of these is abs for
05:40 - absolute value and basically this will
05:43 - just remove the sign for many negative
05:45 - numbers so if I took the absolute value
05:47 - of negative 3 and I'll just clean up a
05:51 - couple lines there ok so if we were to
05:53 - print out the absolute value of negative
05:56 - 3 and run that and we can see down here
05:58 - that we just got the absolute value
06:00 - which is 3 now another built-in function
06:03 - that we have is round and by default
06:05 - this will round our values to the
06:07 - nearest integer value so if we said
06:10 - print the round of 3 point 7 5 and run
06:16 - that and we can see that 3 point 7 5
06:19 - rounded up to 4 and we can also pass a
06:22 - second argument into our round function
06:24 - that tells it how many digits that we
06:26 - want to round to so if I put in a comma
06:30 - here and pass in a 1 as a second
06:33 - argument and now run this and what we're
06:36 - saying is that we want to round to the
06:37 - first digit after the decimal
06:40 - we can see that that rounded 23.8 okay
06:43 - so another common thing that you need to
06:45 - do when working with numbers is to use
06:47 - comparisons now we want to know if two
06:50 - values are equal greater than less than
06:52 - and all of that so to test this we can
06:54 - use comparison operators and I have some
06:57 - comments over here in my snippets with
06:59 - the comparison operators as well and I'm
07:01 - just going to paste over the arithmetic
07:04 - operators that we've already gone over
07:06 - and paste those in now these comparisons
07:08 - are going to return boolean switch our
07:10 - true/false values we'll be learning more
07:13 - about boolean in a future video when we
07:15 - go over conditionals but we'll see them
07:17 - here for the first time so let's say I
07:19 - have two variables here and we'll just
07:21 - call these two variables num1 and set
07:25 - that equal to three and we'll do num2 is
07:28 - equal to two so now let's run through
07:31 - all of these comparisons so first let's
07:34 - say that we wanted to check if these two
07:36 - variables were equal so I could say num1
07:39 - and you can see up here that the equals
07:42 - comparison is double equals now you
07:44 - don't want to use the single equals
07:46 - because the single equals is this
07:48 - assignment here so the double equals is
07:50 - comparison a single equals as assignment
07:52 - so we want to compare his number 1 equal
07:56 - to num2 and if we run that and we can
07:59 - see that it returns false because those
08:00 - two values are not equal now if I wanted
08:03 - to check if they weren't equal then I
08:06 - could use the exclamation point before
08:08 - the equal sign here exclamation point
08:11 - equals and if we run that that we can
08:13 - see that we got true because these two
08:15 - values are not equal now I can check if
08:18 - num 1 is greater than num2 by using the
08:22 - greater than sign so and save that and
08:25 - run it and we can see that we got true
08:27 - because num1 is 3 number 2 is 2 so 3 is
08:30 - greater than 2 and if you wanted to
08:32 - check less than then you can just use
08:34 - the less than sign so if we run that you
08:36 - can see we got false and you can also
08:38 - use the equal signs with these as well
08:40 - so if I want to check if this was
08:42 - greater than or equal to and we could
08:44 - run that we can see that it's true and
08:46 - if we want to check less than or equal
08:49 - to then we can use those as well and if
08:51 - we print that we can see that we got
08:52 - false
08:53 - ok so now we're going to look at one
08:54 - more thing I'm just going to delete
08:56 - these in order to get some more room now
08:59 - I will have these comments up on my
09:00 - github page if you want to reference to
09:03 - the arithmetic operators and the
09:04 - comparisons that we just looked at okay
09:06 - so in the last video we learned about
09:09 - strings now it's possible that you have
09:11 - something that looks like a number but
09:13 - it could actually be a string so let's
09:15 - look at a problem that we can run into
09:17 - if that's the case and then we'll see
09:19 - how to solve it so let's say that you
09:21 - have some variables that look like
09:22 - numbers so maybe we read these in from a
09:24 - text file or got them from a website or
09:27 - something like that so just to give an
09:29 - example let's recreate our number one
09:31 - but this time we're going to set these
09:33 - equal and single quotes here we'll set
09:36 - this to 100 and num2 we'll set equal to
09:40 - inside single quotes 200 so I explicitly
09:44 - set these equal to strings so it's
09:46 - obvious to us that they're strings but
09:48 - it might not be so obvious to us if we
09:50 - got these values from somewhere else so
09:52 - now let's say that we want to add these
09:54 - values together so if I was to say print
09:57 - num1 plus num2 and if we run this then
10:04 - we can see that this isn't the result
10:06 - that we thought it would be now if you
10:09 - remember from our string video when we
10:11 - add strings together it just
10:13 - concatenates those together so this is
10:16 - what we would expect with strings but
10:18 - with numbers we would expect this to be
10:20 - 300 so in order to turn these into
10:22 - integers we're going to have to do
10:24 - something called casting and casting is
10:27 - super easy and Python so to cast these
10:29 - values from string to integers then
10:31 - we'll just add a couple lines here and I
10:34 - will copy these and we'll just say that
10:37 - num1 equals
10:39 - int num1 so we just casted that to an
10:43 - integer and we can do the same thing
10:44 - here with num2 so now if we save that
10:48 - and run it and we can see that we got
10:50 - three hundred so if you have an integer
10:53 - that's actually a string and you want to
10:55 - cast that to an integer then you can
10:57 - wrap that string in this int function or
11:00 - this int class here to create an integer
11:01 - okay so I think that is going to do it
11:04 - for this video I hope that now you feel
11:05 - comfortable working with integers and
11:07 - floating
11:07 - point values and in the next video we'll
11:09 - be learning about lists sets and tuples
11:12 - which basically allow us to hold
11:13 - sequences of data and is extremely
11:16 - useful to learn how to use properly but
11:18 - if anyone has any questions about what
11:20 - we covered in this video then feel free
11:21 - to ask in the comment section below and
11:23 - I'll do my best to answer those if you
11:24 - enjoy these tutorials and would like to
11:26 - support them there are several ways you
11:27 - can do that the easiest ways to simply
11:29 - like the video and give it a thumbs up
11:30 - and also it's a huge help to share these
11:32 - videos with anyone who you think would
11:34 - find them useful and if you have the
11:35 - means you can contribute through patreon
11:37 - and there's a link to that page in the
11:38 - description section below be sure to
11:40 - subscribe for future videos and thank
11:41 - you all for watching
11:53 - you

Cleaned transcript:

hey there how's it going everybody in this video we'll be learning how to work with numeric data in Python and numbers are most commonly represented with integers and floats and the difference between an integer and a float is that an integer is a whole number and a float as a decimal so to see an example of this let's create a variable called num and let's just set this equal to 3 now python has a builtin function called type where we can see the data type of an object so if we print out the type of num and run this and we can see that it returns that that is of the class integer now if we were to set this number instead to 3.14 and now rerun this and we can see that now the type of number is a float so that's the main difference between an integer and a float now when working with numeric data it's common that you'll need to use some basic arithmetic so let me grab some comments from my snippets here just so that we have a reference for everything that we can do so I'll copy these arithmetic operators and paste these in and now let's go ahead and just run through each of these so the first four we've likely already seen a lot and are familiar with so for example addition we if we print it out 3 plus 2 and we can expect that equal to 5 if we print out 3 minus 2 that should be 1/3 times 2 should be equal to 6 and 3 divided by 2 should be equal to 1.5 now for division to behave this way this is actually new in Python 3 if you're running Python 2 then this will actually equal 1 because it drops the decimal but in Python 3 that gives us the right answer of 1.5 now if we don't want to drop that decimal then we do have a floor division and for division can be performed by adding 2 division signs so if I run this and now we can see it drops that decimal and it's equal to 1 so if you ever see these 2 division signs then that is this floor division now if you wanted to work with exponents and powers and we can use these 2 multiplication signs so if we wanted to print 3 to the second power then we could just say 3 with these two multiplication signs if I print that then we can see that that equals nine because three squared is equal to nine now this last operator here is called a modulo operator and it gives us the remainder after a division so three mod two will have a remainder of 1 because 2 goes into 3 once with one left over so if we say 3 mod 2 and run that we can see that that is equal to 1 now a common use case for this is to tell if a number is even or odd now the reason for this is because every time you divide a number by 2 there are only two possible remainders it's either going to be 0 or 1 so for example if we look at a few more examples here so let me just print out a few more module operators and I'll do 2 mod 2 3 mod 2 4 mod 2 and 5 mod 2 so if we run this then we can see that 2 goes into 2 once with no remainders that's why we get a 0 2 goes into 3 once with 1 as a remainder so 2 goes into 4 twice with no remainder and 2 goes into 5 twice with 1 as a remainder so we can see from this pattern that if you do a mod 2 on any number and there is no remainder and that number is even if you do a mod 2 on any number and the remainder is 1 and that number is odd and that's a pretty common check that you'll use a lot throughout Python programming ok so now let's look at the order of operations just like we would expect we can also use parentheses to change the order of operations just like with normal arithmetic so for example if we were to say let's see 3 times 2 plus 1 and with the normal order of operations we would multiply 3 & 2 which would give us 6 and then we would add 1 which would give us 7 so if we run that then we can see that we got 7 as our answer but if I put a parentheses here around this 2 plus 1 and now with normal arithmetic the way that this would work is that it should first add up these numbers in the parentheses which should give us 3 and then 3 times 3 should give 9 so now if we run this then we can see that we got 9 so the order of operations does work correctly within Python like we would expect ok so now let's look at another common operation that you'll see a lot and that is incrementing a variable so if I make a variable here called num and I set this equal to 1 then what are some ways that we can increment that value by one well one way that we could do this is to say that num is equal to num plus 1 and if we print out that num that we can see that it did increment it by 1 and now it's equal to 2 but incrementing values is such a common operation that there is a shorthand for this so instead we can just say num plus equals 1 so if we run that that we can see that it's still incremented at value up to 2 and you can use this syntax with the other operations as well so instead if we were to say num x equals 10 and ran this then we can see that we got 10 because it took our original number and multiplied 1 by 10 okay so a couple more things here we also have some builtin functions available to us to work with numbers and one of these is abs for absolute value and basically this will just remove the sign for many negative numbers so if I took the absolute value of negative 3 and I'll just clean up a couple lines there ok so if we were to print out the absolute value of negative 3 and run that and we can see down here that we just got the absolute value which is 3 now another builtin function that we have is round and by default this will round our values to the nearest integer value so if we said print the round of 3 point 7 5 and run that and we can see that 3 point 7 5 rounded up to 4 and we can also pass a second argument into our round function that tells it how many digits that we want to round to so if I put in a comma here and pass in a 1 as a second argument and now run this and what we're saying is that we want to round to the first digit after the decimal we can see that that rounded 23.8 okay so another common thing that you need to do when working with numbers is to use comparisons now we want to know if two values are equal greater than less than and all of that so to test this we can use comparison operators and I have some comments over here in my snippets with the comparison operators as well and I'm just going to paste over the arithmetic operators that we've already gone over and paste those in now these comparisons are going to return boolean switch our true/false values we'll be learning more about boolean in a future video when we go over conditionals but we'll see them here for the first time so let's say I have two variables here and we'll just call these two variables num1 and set that equal to three and we'll do num2 is equal to two so now let's run through all of these comparisons so first let's say that we wanted to check if these two variables were equal so I could say num1 and you can see up here that the equals comparison is double equals now you don't want to use the single equals because the single equals is this assignment here so the double equals is comparison a single equals as assignment so we want to compare his number 1 equal to num2 and if we run that and we can see that it returns false because those two values are not equal now if I wanted to check if they weren't equal then I could use the exclamation point before the equal sign here exclamation point equals and if we run that that we can see that we got true because these two values are not equal now I can check if num 1 is greater than num2 by using the greater than sign so and save that and run it and we can see that we got true because num1 is 3 number 2 is 2 so 3 is greater than 2 and if you wanted to check less than then you can just use the less than sign so if we run that you can see we got false and you can also use the equal signs with these as well so if I want to check if this was greater than or equal to and we could run that we can see that it's true and if we want to check less than or equal to then we can use those as well and if we print that we can see that we got false ok so now we're going to look at one more thing I'm just going to delete these in order to get some more room now I will have these comments up on my github page if you want to reference to the arithmetic operators and the comparisons that we just looked at okay so in the last video we learned about strings now it's possible that you have something that looks like a number but it could actually be a string so let's look at a problem that we can run into if that's the case and then we'll see how to solve it so let's say that you have some variables that look like numbers so maybe we read these in from a text file or got them from a website or something like that so just to give an example let's recreate our number one but this time we're going to set these equal and single quotes here we'll set this to 100 and num2 we'll set equal to inside single quotes 200 so I explicitly set these equal to strings so it's obvious to us that they're strings but it might not be so obvious to us if we got these values from somewhere else so now let's say that we want to add these values together so if I was to say print num1 plus num2 and if we run this then we can see that this isn't the result that we thought it would be now if you remember from our string video when we add strings together it just concatenates those together so this is what we would expect with strings but with numbers we would expect this to be 300 so in order to turn these into integers we're going to have to do something called casting and casting is super easy and Python so to cast these values from string to integers then we'll just add a couple lines here and I will copy these and we'll just say that num1 equals int num1 so we just casted that to an integer and we can do the same thing here with num2 so now if we save that and run it and we can see that we got three hundred so if you have an integer that's actually a string and you want to cast that to an integer then you can wrap that string in this int function or this int class here to create an integer okay so I think that is going to do it for this video I hope that now you feel comfortable working with integers and floating point values and in the next video we'll be learning about lists sets and tuples which basically allow us to hold sequences of data and is extremely useful to learn how to use properly but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those if you enjoy these tutorials and would like to support them there are several ways you can do that the easiest ways to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
