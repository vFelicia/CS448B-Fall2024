With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning how to use
00:02 - email to allow users to reset their
00:05 - passwords so first we'll show how we can
00:07 - generate a secure time-sensitive token
00:09 - to ensure that only a specific user can
00:12 - reset their password and then we'll see
00:14 - how we can send an email with that reset
00:16 - password information so let's go ahead
00:18 - and get started so first let's look at
00:21 - how we can generate a secure
00:22 - time-sensitive token that we can use to
00:24 - make sure that only someone who has
00:26 - access to the user's email can reset
00:29 - their password so to do this we'll be
00:31 - using the package called it's dangerous
00:33 - which should have been installed when we
00:35 - installed flask so let's open up our
00:37 - command line and see how this is going
00:39 - to work so I'm going to open a Python
00:42 - terminal here and now I'm gonna do a
00:43 - long import here so I'm gonna say from
00:46 - it's dangerous and that's all one word
00:49 - import and this import is timed JSON web
00:55 - signature and you have to get this camel
00:57 - casing correctly as well
00:59 - serial Lizer and we'll import that just
01:02 - simply as a serial Lizer so if I spelled
01:07 - that correctly then we shouldn't get any
01:08 - errors and now we're going to use this
01:10 - serializer
01:11 - and pass in a secret key and an
01:13 - expiration time in seconds so to do that
01:16 - I can say s is equal to serializer
01:20 - and we will pass in a secret key of just
01:24 - secret for now and then a time
01:27 - expiration time of 30 seconds and now to
01:30 - generate a token we can use the dump s
01:32 - method and I'm going to send in a
01:34 - payload that will just be our user ID so
01:37 - we can say token is equal to s dot dump
01:41 - s and we'll pass in a payload that is a
01:44 - dictionary and that dictionary will be
01:46 - our user ID so we'll set a user ID and
01:49 - we'll just pass this in as 1 for now
01:51 - because we're just looking at an example
01:53 - and now we're gonna want to decode this
01:56 - to utf-8 or else it will be in bytes so
01:59 - I will say decode and decode that with
02:03 - utf-8 and run that so now we have a
02:06 - token with an expiration of 30 seconds
02:09 - so if I look at this token then we can
02:12 - see it's a long random string
02:13 - of characters now to check if this is a
02:15 - valid token then we can use the load s
02:18 - method and as long as it's been less
02:20 - than 30 seconds then this should give us
02:22 - our payload so I'll say s dot load s and
02:26 - pass in that token and we can see that
02:29 - we got that payload of the user ID of 1
02:32 - now if we were to wait longer than 30
02:35 - seconds then this token will be expired
02:38 - so if I waited a bit and then tried to
02:40 - rerun this so now I'm going to try to
02:43 - reload this token and if it has been
02:46 - more than 30 seconds then we get an
02:48 - error that says that the signature is
02:50 - expired so that's good because it allows
02:53 - us to handle expirations and tokens
02:55 - without needing to put all of that in a
02:57 - database and make things more
02:58 - complicated than they need to be so now
03:00 - let's open up our database models and
03:02 - I'm gonna add some methods to our user
03:04 - model that creates and validates these
03:07 - tokens for us so if we open up our
03:09 - project and navigate to our models dot
03:12 - py file here and I already have this
03:14 - open then I'm going to go down to our
03:16 - user model and actually first let's
03:19 - import the same classes that we used in
03:21 - the command line so I'm just going to
03:23 - grab that import so that I don't have to
03:27 - type it all out again and paste this in
03:30 - to the top of our models py file so we
03:35 - can see that we are importing this timed
03:38 - JSON web signature serializer as
03:40 - serializer now we're also going to need
03:42 - our apps secret key
03:44 - so let's import app from our package and
03:47 - we're already importing DB and login
03:49 - manager from our flash blog package so
03:51 - let's just include app on to the end of
03:54 - that okay so now within our user model
03:58 - now I'm going to create some methods
03:59 - here that make it easier to create these
04:01 - tokens so I'm gonna create one method
04:04 - called get underscore reset underscore
04:08 - token and we will take in self and
04:13 - expires underscore seconds for how many
04:18 - seconds until it expires and I'll pass
04:20 - in 1800 for now and 1800 seconds is just
04:24 - 30 minutes so now let's
04:26 - go inside of our method here and we will
04:29 - create a serializer object so we'll say
04:32 - s equals serializer and now we pass in
04:36 - our secret key so in our example in the
04:39 - command line we just used the string
04:40 - secret but now we're actually going to
04:42 - use our app secret key so we'll say app
04:44 - dot config and access that secret
04:48 - underscore key and now we need our
04:52 - seconds and expiration time so that will
04:56 - be expires seconds
04:58 - which again the default is 1800 or 30
05:01 - minutes and now we can return a token
05:04 - created with this serializer so we can
05:07 - say returned and now we need to create
05:09 - our token so like we saw before this is
05:11 - s dot dump s and now we need to pass in
05:15 - a payload and again we're going to use a
05:17 - user ID for this payload and the user ID
05:20 - that we are going to use is the instance
05:23 - of this user so that'll be self dot ID
05:27 - and again now we can decode this into
05:30 - utf-8 and so I will pass that in now if
05:35 - you are unfamiliar with methods or what
05:37 - this self variable here is then I would
05:40 - suggest watching my object-oriented
05:42 - series where I go over all of that in
05:44 - detail I won't touch on those object
05:46 - oriented specifics in this flask series
05:49 - so we saw everything here before in our
05:51 - command line
05:52 - we're simply setting this up with our
05:54 - secret key and an expiration time and
05:56 - which by default is 30 minutes and then
05:59 - we're returning that token which is
06:01 - created by the dump s method and it also
06:04 - contains a payload of the current user
06:06 - ID so now let's put a method in place
06:09 - that verifies a token so I can come down
06:13 - here and say def verify underscore reset
06:18 - token and then we will take in a token
06:21 - as an argument and now we'll create a
06:24 - serializer
06:25 - object again with this secret key but we
06:29 - don't need to pass in the expires
06:31 - seconds this time now we could get an
06:34 - exception when we try to load this token
06:36 - the token could be invalid or the time
06:39 - could have expired or
06:40 - anything like that so we'll put this in
06:42 - a try except block so we will try to get
06:45 - the user ID by saying s dot load s and
06:51 - load that token and we'll try to get the
06:55 - user ID out of that and remember that
06:58 - user ID comes from the payload that we
07:00 - passed in now if that does not run
07:05 - smoothly and we get an exception then we
07:08 - will catch that exception and we will
07:10 - simply just return none from this method
07:13 - and if we are able to get this user ID
07:17 - without throwing an exception then let's
07:20 - just return the user with that ID so
07:23 - we'll say return user dot query dot get
07:27 - and we will get the user with that user
07:31 - ID so again we have this verify reset
07:34 - token that takes a token as an argument
07:37 - and just creates a serializer and then
07:40 - tries to load that token if we get an
07:43 - exception it returns none if we don't
07:45 - get an exception then it returns the
07:47 - user with that user ID now one more
07:49 - thing here is we can see that this
07:51 - method doesn't do anything with the
07:53 - instance of this user so for example it
07:56 - never uses that self variable and again
07:59 - I go over this and my object-oriented
08:00 - series but when you have a method like
08:02 - this we need to tell Python that this is
08:05 - a static method and we can do that with
08:07 - a simple decorator just by creating a
08:11 - static method right above the method
08:14 - name basically we're just telling Python
08:17 - not to expect that self parameter as an
08:21 - argument and we're only going to be
08:23 - accepting this token as an argument okay
08:25 - so now we have a way to generate and
08:27 - validate tokens
08:28 - so now let's actually create the routes
08:30 - for a user to reset their password and
08:32 - also see how to send an email with a
08:35 - link that they can use to do that so
08:37 - first of all we're going to need two new
08:39 - forms for our routes and these are going
08:42 - to be extremely simple forms so let's
08:44 - open up our forms dot py file and I'll
08:47 - come down here to the bottom of this
08:50 - file to create a new form so first we're
08:53 - going to want a form
08:54 - when they first go to the reset password
08:57 - page where they can submit their email
08:59 - for their account where the instructions
09:02 - for resetting their password will be
09:03 - sent so I'll create a form here called
09:07 - request reset form so we can say class
09:10 - request reset form and remember this is
09:15 - going to import from flask form just
09:18 - like our other forms and inside here
09:19 - we're just going to want one email field
09:21 - and a submit button so I can actually
09:24 - just copy this email field from one of
09:27 - our other forms here and paste it in and
09:30 - now we also want a submit button so I
09:34 - will grab another submit button here and
09:37 - paste it in but the label that we want
09:39 - for this is going to be request password
09:43 - reset and let's also validate that an
09:46 - account exists for this email address
09:48 - now if we don't have an account for this
09:50 - address then they haven't forgot their
09:52 - password they just haven't created an
09:54 - account and this is going to be similar
09:56 - to the validation that we do upon
09:59 - registration so let's just grab that
10:01 - from the registration form so if I go up
10:04 - to our registration form and copy this
10:07 - validate email and paste it in to our
10:12 - request form here except the difference
10:15 - here is going to be instead of checking
10:17 - if the email already exists we want to
10:19 - check if the email doesn't exist so
10:21 - instead of saying if user here when we
10:24 - filter by this email we want to say if
10:27 - user is none and now let's also change
10:30 - the validation message as well so
10:33 - instead of saying that this email is
10:35 - taken we can say there is no account
10:38 - with that email you must register first
10:44 - okay and we're also going to want a form
10:47 - for when they actually do reset their
10:49 - password and that will be a form with
10:52 - two password fields where they can type
10:54 - their new password and then confirm that
10:56 - password and this is similar to the
10:59 - password fields when they first created
11:01 - their account so I'll grab those from
11:04 - the registration form and then we'll
11:08 - paste those in and a bit so I will grab
11:10 - these two forms here and paste those
11:13 - into a new form that we are about to
11:17 - create so I will create a new form here
11:20 - and we'll call this class reset password
11:23 - form and then this will inherit from
11:27 - flask form like we've seen before
11:29 - and now I'm going to paste in those two
11:31 - fields the password and the confirm
11:34 - password field and we're also going to
11:36 - want a submit button so I will grab that
11:39 - from one of our other forms here and
11:41 - paste this in but we want to change the
11:46 - label here for this submit button and we
11:48 - will just change this to reset password
11:51 - okay so now we need to create the routes
11:54 - and the templates that will handle these
11:55 - so first let's do the routes so I'm
11:58 - going to open up routes top py file here
12:00 - and I'll come down actually first we
12:02 - need to import those new forms that we
12:05 - just created so right after our post
12:07 - form I will import the request reset
12:10 - form and I will also import the reset
12:14 - password' form now if your imports ever
12:18 - get extremely long and you want to break
12:20 - them up onto multiple lines then you can
12:22 - put them within parentheses here and
12:25 - then simply just break them up on
12:28 - multiple lines so I can break that there
12:30 - and save that and now that is fitting on
12:33 - the screen there so now let's go down to
12:35 - the bottom to create our new routes and
12:38 - our first route here will be where they
12:40 - actually enter their email address where
12:42 - the reset password information should be
12:45 - sent so let me get a another route here
12:50 - as a starting point so I will just grab
12:53 - one of these so I'll grab the new post
12:56 - route here and paste this in at the
12:59 - bottom so first of all the login
13:00 - required won't be required here so I'll
13:03 - take that out now the URL for this route
13:06 - we will set that equal to reset
13:09 - underscore password for methods we want
13:12 - both get and posts so that's good now
13:15 - for the function name instead of reset
13:17 - password let's actually call this reset
13:20 - request because we're going to have
13:22 - another route that is reset password' as
13:25 - well where they're actually going to
13:26 - change their password but this is going
13:29 - to be the route where they're just
13:30 - putting in their email for us to send
13:31 - that information and this is going to be
13:33 - another route where we want the user to
13:35 - be logged out in order to get to this
13:37 - page so we'll put in the same check here
13:40 - that we put into our login route so if
13:43 - we go up to our login route and see what
13:46 - that was I know there's a lot here then
13:49 - that was this line here so if current
13:52 - user is authenticated then just return a
13:55 - redirect to the home URL so we can paste
13:59 - that in to our new route to make sure
14:01 - that they're logged out before they
14:03 - reset their password and now let's
14:06 - create our form so we will say form is
14:08 - equal to and that is the request reset
14:12 - form and now we can render a template so
14:15 - I will grab this line up here and just
14:19 - as a starting point so we'll say render
14:22 - template now that we haven't created
14:24 - this template yet but we will create it
14:26 - in just a second and we will call this
14:28 - reset underscore request dot HTML and we
14:34 - want to pass in a title here so we'll
14:36 - say the title is equal to reset password
14:41 - and we also want to pass the form that
14:43 - we are using into that template as well
14:46 - so we'll say form is equal to form and
14:49 - since we've done this a few times now it
14:51 - should be coming kind of familiar how we
14:53 - do this and pass these forms to these
14:55 - templates okay so now let's create this
14:58 - template that we just rendered here so I
15:01 - will in my templates folder right click
15:04 - and do a new file and we'll say reset
15:07 - request dot HTML and these templates are
15:10 - going to be very similar to some of the
15:12 - templates that we currently have with
15:13 - forms so I'm going to open up the code
15:16 - from the login template and use that as
15:19 - a starting point and then change what I
15:21 - need so I'm going to copy all of the
15:23 - code from the login template and paste
15:25 - it into our reset request dot HTML
15:28 - template so now we have the code from
15:30 - our login Simplot and now let's change
15:32 - this to be what we need for our request
15:35 - reset
15:36 - so first I will scroll up and change the
15:39 - legend so here we have the legend on the
15:41 - line seven so instead of login I want
15:44 - this to be reset password and within
15:47 - this form we only have an email and a
15:50 - submit field so the first field that we
15:52 - have from our login form is already set
15:54 - to email so let's just keep that and
15:57 - everything else we can get rid of so
16:00 - I'll get rid of the form group for the
16:02 - password and I will also get rid of this
16:05 - div for the form check so we can get rid
16:07 - of that as well and we can keep the
16:11 - submit button there and we can also
16:13 - remove the text here for asking if they
16:16 - have forgot their password because that
16:18 - is going to be the route that we're
16:19 - currently on and we can also remove this
16:22 - div where it's asking if they need an
16:25 - account okay so that should be good for
16:27 - our request reset form and again if you
16:30 - are following along and think that you
16:31 - may have missed something then I do have
16:33 - the final versions of all these files
16:35 - for each video that you can download and
16:37 - the link to that is in the description
16:39 - section below okay so that is good for
16:41 - creating the route where the user will
16:42 - request to reset their password now
16:45 - let's create the route where the user
16:46 - will actually reset their password so I
16:49 - will go back to our routes here and now
16:52 - we'll create a route where the user
16:53 - actually resets their password now to
16:55 - make sure it's actually them we need to
16:58 - make sure that the token that we gave
16:59 - them and the email is active and we'll
17:02 - get that token from the URL so by
17:04 - sending them an email with a link
17:06 - containing this token we will know that
17:09 - it's them when they navigate to this
17:11 - route so I'll keep this route similar to
17:14 - the one that I just created but I'll
17:16 - also accept a token so I'm going to copy
17:19 - what we have here and paste it in and
17:23 - also get that section to make sure that
17:26 - they are logged out so I will paste that
17:29 - in here now this route is going to be
17:31 - similar to the one before except we are
17:33 - going to also accept a token as a
17:35 - parameter so the URL here will be forged
17:38 - slash reset underscore password forged
17:41 - slash and then we will accept a token as
17:44 - a parameter there and we also need to
17:47 - pass that in to
17:49 - our function and now we need to rename
17:51 - our function name here so let's call
17:53 - this reset token so that we're sure
17:57 - which route this is sooooo reset request
17:59 - will be the route where they enter their
18:01 - email to request a password reset and
18:04 - reset token will be where they actually
18:06 - reset their password with the token
18:08 - active so now at this point when they go
18:10 - to this URL we'll try to verify the
18:12 - token from the URL using the user method
18:15 - that we created just a minute ago so
18:18 - down here we can say the user is equal
18:22 - to user dot verify underscore reset
18:27 - token and we can pass in that token from
18:31 - the URL and just reminder if we look at
18:34 - our models not py file here this verify
18:37 - reset token just takes in a token as an
18:40 - argument and if it is valid then it will
18:44 - return the user with that user ID and
18:47 - remember that user ID was the payload
18:50 - that we passed in to the initial token
18:52 - so that is how that works so if we don't
18:55 - get a user back here then it means that
18:57 - our token is either invalid or it is
18:59 - expired so we can put in a conditional
19:02 - here and we could say if user is none or
19:05 - we could say if not user however you
19:07 - want to do it we can say if user is none
19:09 - then let's flash a message to our user
19:12 - that says that is an invalid token and
19:17 - just so they know it can be expired as
19:19 - well we can say invalid or expired token
19:22 - and then we can pass in a class here or
19:26 - a category that we're going to use as a
19:28 - class and we'll pass that in as a
19:30 - bootstrap warning class which is a
19:33 - yellow outlined alert and if they have
19:35 - an invalid or expired token then we will
19:38 - just return them back to that reset
19:40 - request page so we'll do a return for a
19:44 - redirect and that redirect will be the
19:47 - URL for whoops and that URL for will be
19:52 - for the reset request but if we make it
19:55 - past this conditional here then it means
19:58 - that the token was valid and that we
20:00 - were able to get that user so they
20:02 - we can display the form for the user to
20:05 - update their password so we will come
20:08 - down here and say the form is equal to
20:12 - reset password form and then we'll
20:15 - render a template for them to actually
20:17 - reset their password so I'll say return
20:20 - render template and I'll just copy the
20:23 - code from this rendered template here
20:26 - since it's so similar and paste this in
20:29 - but instead of this being the reset
20:32 - request dot HTML we will set this equal
20:36 - to reset token dot HTML will keep the
20:39 - title as reset password and the form we
20:43 - will pass in as well which will be this
20:46 - reset password form okay so now let's
20:48 - create this reset token template so I
20:51 - will copy that and create a new file and
20:53 - our templates I'll call this reset token
20:55 - dot HTML and this is going to be similar
20:58 - to our reset request form so I will just
21:01 - copy that from the reset request
21:04 - template and then paste that in the
21:08 - reset token template so we'll leave this
21:10 - legend as it is at reset password and
21:13 - now we don't have an emailed field
21:15 - anymore
21:15 - we only have the password and the
21:17 - password confirmation fields so I'll
21:20 - replace this email field and I'll do a
21:23 - multi-select here to make sure that I
21:25 - get all of these in your editor you
21:27 - could do a find and replace to replace
21:29 - this so I will change all of those
21:31 - emails over to a password field and now
21:35 - I'm going to copy this entire div for
21:37 - this form group and now I want to add in
21:41 - the confirm password field as well so
21:44 - I'm going to select all of the password
21:47 - fields in this div and that field we
21:50 - called confirm underscore password and
21:53 - save that ok and after we have a
21:55 - password field and a confirm password
21:57 - field there then everything else should
21:59 - be the same so we'll leave the submit
22:01 - button there and everything else is good
22:03 - ok so now we have to be able to handle
22:05 - what happens when we submit these forms
22:07 - that we've just created and these forms
22:09 - will submit back to the same route that
22:12 - they were rendered from and we're used
22:13 - to seeing that by now so let's go
22:16 - a validate on submit conditional to our
22:18 - routes to handle these forms being
22:21 - submitted so within our reset request
22:23 - route right after we create our form
22:26 - we'll handle this if the form was
22:29 - submitted and validated so we can do our
22:32 - normal conditional of if form dot
22:35 - validate on submit then at this point
22:38 - they have submitted an email into our
22:40 - form so now let's grab the user for that
22:43 - email so we'll say user is equal to user
22:47 - dot query dot filter by and we want to
22:51 - filter this by the email is equal to
22:54 - form email dot data and now that'll put
22:58 - the query together and now we just need
23:00 - to specify that we just want the first
23:03 - user with that email okay so after we
23:06 - have that user we're going to want to
23:08 - send this user and email with their
23:11 - token that they can use to reset their
23:13 - password so now we need to learn how to
23:16 - send emails so for now I'm just going to
23:18 - create a function that will leave empty
23:21 - while we talk about what we need to send
23:23 - emails so I'm going to create a function
23:26 - right above here that is called send
23:30 - reset email and we will take in a user
23:36 - as an argument to that function and for
23:40 - now I'm just going to put in a pass
23:41 - statement here and we will fill out the
23:43 - logic for that in just a second so now
23:46 - in our validate on submit conditional
23:50 - I'm going to say send reset email and
23:54 - pass in that user and now we can send a
23:59 - flash message here and in our message
24:01 - we'll just say an email has been sent
24:04 - with instructions to reset your password
24:11 - and then we will pass in a class of info
24:16 - which is kind of a blue alert button and
24:18 - after we send them that email to reset
24:21 - their password then we'll just redirect
24:23 - them back to the login page so I'll say
24:26 - return redirect and we want to redirect
24:29 - them to
24:30 - the URL for login okay so now we need to
24:35 - actually fill out this logic and learn
24:38 - how to actually send this email now to
24:40 - do this we're going to use another flask
24:42 - extension and this one is called flask
24:45 - mail and we can install this with pip so
24:48 - if we open our terminal here I'm going
24:51 - to exit out of our Python interpreter
24:53 - and we can install this simply by saying
24:55 - pip install flask - male and once that's
25:00 - installed let's pull up the double
25:02 - underscore an it dot PI file in our
25:05 - package since that's currently where
25:07 - everything is initialized and configured
25:09 - so I will open up this an it dot PI file
25:13 - and within here let's import that
25:15 - extension so we'll say from flask
25:17 - underscore male import male and now we
25:22 - need to also set some constants here so
25:24 - this is going to be how our app actually
25:26 - knows how to send mail so we're going to
25:29 - need a mail server a mail port whether
25:32 - to use TLS and also a username and
25:36 - password for that server now I'm going
25:39 - to be using Gmail in this example but if
25:41 - you have another one then you can use
25:43 - that as well and if you want to use
25:44 - Gmail and don't have an account then you
25:46 - can create an account and use the same
25:48 - constants with your username and
25:50 - password that I use in this video so for
25:53 - these constants I'm going to come down
25:54 - here below our login manager and now I'm
25:57 - gonna say app dot config and set these
26:01 - config variables so the first one is
26:03 - going to be mail underscore server and
26:06 - we will set that equal to
26:08 - SMTP dot goggle mail.com now I will copy
26:16 - and paste this line the next
26:19 - configuration variable here will be mail
26:22 - port we will set the mail port equal to
26:27 - 587 and lastly we're going to have a
26:32 - configuration variable here of mail
26:34 - underscore use underscore TLS and we
26:39 - will set that equal to true now for the
26:42 - username and password
26:44 - I'm not going to actually type those out
26:45 - here for obvious reasons because I don't
26:47 - want anyone to have access to my email
26:49 - so for this information I put this in an
26:52 - environment variable and I have a video
26:54 - on using environment variables to hide
26:56 - sensitive information for things like
26:57 - this so if you don't know how to do this
26:59 - then I would give that video a watch I
27:02 - show how to do it for both Mac Linux and
27:04 - Windows so first to use the environment
27:07 - variables I need to import the OS module
27:10 - so at the top of our module here I'm
27:12 - going to import OS and now I can set
27:16 - these variables by changing this to male
27:20 - username and that username is going to
27:24 - be an environment variable so I'm going
27:26 - to say Oh s dot environment
27:29 - it and I set that as an environment
27:32 - variable that is just equal to email
27:34 - underscore user and I will do the same
27:37 - thing here for my email password so I'll
27:40 - say app config mail password and that
27:44 - has to be spelled all the way out and
27:47 - for my environment variable here I only
27:50 - did an email underscore pass okay and
27:53 - once we have these five configurations
27:55 - set then we can initialize our extension
27:58 - and we can initialize our extension just
28:01 - like we've done the others so I'll say
28:03 - mail is equal to mail and we'll pass in
28:06 - the app to initialize that okay so now
28:09 - that we have all of that set let's open
28:11 - back up our routes dot py file and now
28:14 - we're going to need our mail instance
28:16 - that we just created in our anit dot pi
28:19 - file so let's go import that so here at
28:22 - the top of our file where we're
28:25 - importing everything else from our
28:26 - package we can add that on to our import
28:30 - so from flask blog import mail and we're
28:33 - also going to want to send an email
28:34 - message so we need to import the message
28:37 - class from flask mail as well so down
28:40 - here at the bottom I'm going to say from
28:43 - flask underscore mail import message
28:47 - okay so now let's go down to our send
28:50 - email function that we just created down
28:53 - here close to the bottom this is getting
28:55 - a little large so
28:57 - let's fill in this function to send the
28:59 - user and email with the reset token
29:02 - so first let's get that token using the
29:05 - method that we added earlier to our user
29:07 - model so we can say token is equal to
29:11 - user dot get underscore reset token and
29:17 - if we look at our models we can see that
29:21 - that takes also an argument for the
29:25 - seconds to expire but it has a default
29:28 - there as well so we're just going to
29:29 - leave that as the default and not pass
29:31 - anything else in and now we want to send
29:34 - the email with the URL with the reset
29:36 - token so we can create our email using
29:39 - the message class that we just imported
29:41 - so we can say MSG for message is equal
29:46 - to message and first this is going to be
29:50 - the subject line so we can say password
29:53 - reset request and now we can specify the
29:58 - sender now I'm just going to set a
30:00 - sender equal to no reply at demo dot-com
30:06 - now you want to be careful here not to
30:08 - spoof a sender because if you pretend to
30:11 - be somebody that you're not then you're
30:13 - gonna end up in the spam folder so try
30:16 - to have something that's coming from
30:19 - your domain or something that's actually
30:21 - coming from your email address okay and
30:24 - now we can pass in the recipients so I
30:28 - will do recipients are equal to and now
30:30 - this is going to be a list of recipients
30:33 - but we're just going to have one here
30:35 - and that is going to be the user dot
30:38 - email and let me break these up onto
30:40 - multiple lines here so that we can see
30:43 - everything and I will put that on
30:45 - another line as well okay okay so now
30:48 - for the actual body of our message I'm
30:50 - going to use a multi-line string for
30:53 - that and I'm going to use F strings but
30:55 - again if you're not using Python 3.6 or
30:58 - higher then you'll need to use string
31:00 - formatting here so to do this I'm going
31:03 - to say message dot body and I'll set
31:05 - this equal to a multi-line string and
31:08 - you can do that with
31:10 - three quote marks there and now I'll
31:13 - just pass in a message that says to
31:16 - reset your password visit the following
31:21 - link and then on the next line here I am
31:25 - going to pass in the value for URL for
31:31 - now we only want one curly brace here
31:33 - because this is an F string and I forgot
31:36 - to add that F there so when we're
31:38 - passing these variables into an F string
31:39 - we only have one curly brace it's not
31:41 - the two curly braces that were used to
31:44 - seeing in these Jinja two templates so
31:46 - I'll say URL for and this will be the
31:48 - URL for the reset underscore token route
31:53 - and we want the token to be equal to the
31:57 - token that we got up here from this user
31:59 - now we need to add in one more argument
32:02 - here and this is going to be underscore
32:04 - external and we're going to set this
32:07 - equal to true
32:08 - and now just to continue our message
32:11 - here I will write at the bottom of this
32:14 - email if you did not make this request
32:18 - then simply ignore this email and no
32:24 - changes will be made and then I'll just
32:28 - bring this back here to the baseline
32:30 - there now when you're working with a
32:32 - multi-line string like this then you do
32:34 - need to bring this text back to the
32:35 - baseline here because if you tab these
32:38 - over then those tabs will actually show
32:40 - up in the screen or in the string so you
32:42 - want to make sure that these are back at
32:44 - the baseline now the reason that we're
32:46 - using this external equal to true here
32:49 - is in order to get an absolute URL
32:52 - rather than a relative URL because
32:54 - relative URLs are fine within our
32:56 - application and that's what it normally
32:58 - returns but the link in the email needs
33:00 - to have the full domain now depending on
33:04 - how complex your email message is you
33:06 - can actually use the Jinja two templates
33:09 - to piece these messages together as well
33:12 - now I didn't feel like this message was
33:14 - long enough to need to do that here but
33:16 - perhaps if your message is complicated
33:19 - enough that
33:20 - that's something that you'll want to do
33:21 - so if anyone wants to see where we use
33:23 - templates to create these message bodies
33:25 - then maybe we can tackle that in a
33:28 - future video okay so we're almost done
33:30 - here so now we just need to handle the
33:32 - form submission when they actually
33:34 - changed their password and this will be
33:36 - very similar to how we set their
33:38 - password when they first registered
33:40 - their account so I'm gonna go to the
33:42 - register route and I'm gonna grab a bit
33:45 - of code from there so if I go up to the
33:49 - register route where is it at here it is
33:53 - then I'm just gonna grab this entire if
33:55 - form validate on submit conditional all
33:58 - the way down to the return statement and
34:00 - now let's paste this below if I go down
34:05 - to our reset token route let's paste
34:08 - this below where we are creating that
34:11 - form so if I paste that in there then
34:14 - there are only going to be a couple of
34:15 - differences here so first of all we
34:17 - already have the user from where we
34:19 - verified the token so we can remove this
34:23 - line where we're getting the user and
34:26 - again that's because we have the user up
34:28 - here already and also instead of adding
34:31 - this user to the database like we did in
34:32 - the register route we're instead just
34:34 - going to edit their password and set it
34:37 - to this new hashed password so we can
34:40 - remove this DB session dot add part and
34:43 - instead just say user dot password is
34:47 - equal to this hashed password and it's
34:52 - just hashing that password from our form
34:54 - password dot data which we do have a
34:58 - password field in this reset password
35:01 - form so that'll work
35:02 - so then whenever it does this DB session
35:04 - commit then it will commit the changes
35:07 - to that user's password and lastly let's
35:09 - just update this flash message so
35:11 - instead of saying your account has been
35:13 - created let's say your password has been
35:18 - updated and then leave the part where it
35:20 - says you are now able to log in and then
35:23 - redirect them to the login page so
35:26 - that's good
35:26 - okay so last quick step before we run
35:28 - our application and test all this out we
35:31 - need to actually add a link to the reset
35:33 - past
35:34 - Paige in our application now if you
35:36 - remember back to one of our earlier
35:37 - videos we put a forgot password link on
35:41 - the login page but the link didn't
35:43 - actually go anywhere and this is usually
35:45 - where you'll find the links to reset
35:47 - your passwords is somewhere in the login
35:49 - area so let's go set that location to
35:52 - our reset request route so that was
35:55 - within our login template and I have my
35:58 - login template open here and that was
36:01 - towards the bottom of our page so if we
36:03 - look at the bottom of the page then we
36:05 - can see here on line 43 is where we have
36:08 - that forgot password link and I will
36:10 - change that from being a filler to our
36:13 - actual URL so I will put in the double
36:17 - curly braces and say URL four and we
36:21 - want the URL for the reset underscore
36:25 - request route okay so we didn't really
36:28 - get to look at our application at any of
36:30 - the in-between steps in this video and
36:32 - that's because a lot of this process
36:34 - really all depends on all these
36:36 - different parts but that should be the
36:38 - last change that we just made to this
36:40 - template so now let's start up our
36:41 - application and test all of this out and
36:43 - if we did everything correctly then this
36:46 - should work so let's start our
36:49 - application so I'll go back to our
36:51 - command line here and do a Python run
36:54 - dot pi and we didn't get any errors so
36:57 - that's good and our debug server is
37:00 - running then now we can test out whether
37:02 - or not this works so if we go to our
37:04 - login page here then we can see that we
37:07 - have our forgot password link here now
37:10 - that should be beside the login button
37:12 - it's not a big deal but if I open up the
37:15 - login template this forgot password
37:19 - small tag here should actually be inside
37:23 - this form group right beside our submit
37:26 - button and that will put that actually
37:28 - beside at the button so if I save that
37:31 - and reload the page then we can see that
37:33 - now that's beside the login button so if
37:35 - I click on the forgot password link then
37:38 - it takes us to our reset password route
37:42 - and we can put in our email and request
37:45 - a password reset so I'm going to require
37:48 - a password reset for Cory M Schaefer at
37:52 - gmail.com so I will request that
37:54 - password reset we can see that we got a
37:57 - notice alert here that says an email has
38:00 - been sent with instructions to reset
38:02 - your password so I actually have my
38:03 - gmail pulled up in another Chrome window
38:06 - here so if we check this and refresh
38:09 - this then we're not getting any messages
38:12 - yet so let's see if something is wrong
38:16 - here so let's pull back up our
38:18 - application and go to our routes where
38:21 - we are sending this email so let me look
38:24 - in this send reset email function here
38:28 - and okay I can already see what the
38:32 - problem is here I made a dumb mistake we
38:35 - created the message and everything but
38:37 - we didn't actually send it so we need to
38:39 - use that mail variable that we imported
38:43 - from our double underscore and knit dot
38:46 - PI file and we need to use that to
38:48 - actually send the message
38:50 - so we'll say mail dot sinned and we will
38:52 - pass in that message that we created
38:55 - that we want to send okay
38:56 - so sorry about that okay so now let's go
38:58 - back to our application and see if that
39:01 - is working now so our development server
39:03 - is still running and I will pull up our
39:06 - flask app and send this again so I'll do
39:10 - forgot password and type in that same
39:14 - account that I signed up to this
39:16 - application with request password reset
39:19 - okay so we can see that we got the same
39:22 - alert that an email has been sent with
39:24 - our instructions so now I have my gmail
39:27 - pulled up here and we can see that that
39:28 - already came through so we got this
39:30 - password reset request email if I open
39:33 - this up then we can see that it says to
39:35 - reset your password visit the following
39:37 - link and we have this huge token here on
39:40 - the end so if I click on that then since
39:43 - our token was valid
39:44 - we can see that we are now here to our
39:47 - reset password form but if this token
39:50 - wasn't valid or if this token was
39:52 - expired because it was older than 30
39:55 - minutes which was the expiration time
39:56 - that we put on this token then it would
39:59 - redirect us back to I believe the reset
40:02 - password route so if I was to change one
40:05 - character up here then we can see that
40:08 - it redirected us back to this request
40:11 - password reset form and says that that
40:13 - is an invalid or expired token so now
40:16 - I'm just going to hit the back button to
40:17 - go back to the valid token and now since
40:20 - we have a valid token we should be able
40:22 - to reset our password so my password was
40:24 - testing and now I'm just going to set it
40:26 - to password which is never a good idea
40:29 - but just an example so reset password
40:32 - and now we can see that we got an alert
40:34 - that says your password has been updated
40:36 - I spelled that wrong sorry about the
40:38 - typos but now let's see if we can log in
40:40 - with our new password so Cory M Shafer
40:44 - at gmail.com and I changed my password -
40:46 - password okay so I was able to log in
40:50 - with that new password and we can see
40:51 - that I have access to my account and
40:53 - everything now I'm just going to go back
40:56 - and change that small little typo that I
40:59 - had there and that was within our reset
41:02 - password link and I'll say your password
41:04 - has been updated instead of update but
41:06 - other than that the functionality worked
41:08 - well we got our email and we're able to
41:11 - reset our password with our valid token
41:13 - okay so I think that is going to do it
41:15 - for this video I hope that now you have
41:17 - a good idea for how you can handle
41:18 - resetting passwords and also how to send
41:21 - mail through a flask application and in
41:24 - the next video we will clean up our
41:26 - application a little bit by learning how
41:28 - to organize different parts and to flask
41:30 - blueprints and also how to move our
41:32 - configuration variables into one single
41:34 - place but if you have any questions
41:36 - about what we covered in this video then
41:38 - feel free to ask in the comment section
41:39 - below and I'll do my best to answer
41:40 - those and if you enjoy these tutorials
41:42 - and would like to support them then
41:44 - there are several ways you can do that
41:45 - the easiest way is to simply like the
41:46 - video and give it a thumbs up and also a
41:48 - huge help to share these videos with
41:50 - anyone who you think would find them
41:51 - useful and if you have the means you can
41:52 - contribute through patreon and there's a
41:54 - link to that page in the description
41:55 - section below
41:56 - be sure to subscribe for future videos
41:57 - and thank you all for watching
42:00 - you
42:09 - you

Cleaned transcript:

hey there how's it going everybody in this video we'll be learning how to use email to allow users to reset their passwords so first we'll show how we can generate a secure timesensitive token to ensure that only a specific user can reset their password and then we'll see how we can send an email with that reset password information so let's go ahead and get started so first let's look at how we can generate a secure timesensitive token that we can use to make sure that only someone who has access to the user's email can reset their password so to do this we'll be using the package called it's dangerous which should have been installed when we installed flask so let's open up our command line and see how this is going to work so I'm going to open a Python terminal here and now I'm gonna do a long import here so I'm gonna say from it's dangerous and that's all one word import and this import is timed JSON web signature and you have to get this camel casing correctly as well serial Lizer and we'll import that just simply as a serial Lizer so if I spelled that correctly then we shouldn't get any errors and now we're going to use this serializer and pass in a secret key and an expiration time in seconds so to do that I can say s is equal to serializer and we will pass in a secret key of just secret for now and then a time expiration time of 30 seconds and now to generate a token we can use the dump s method and I'm going to send in a payload that will just be our user ID so we can say token is equal to s dot dump s and we'll pass in a payload that is a dictionary and that dictionary will be our user ID so we'll set a user ID and we'll just pass this in as 1 for now because we're just looking at an example and now we're gonna want to decode this to utf8 or else it will be in bytes so I will say decode and decode that with utf8 and run that so now we have a token with an expiration of 30 seconds so if I look at this token then we can see it's a long random string of characters now to check if this is a valid token then we can use the load s method and as long as it's been less than 30 seconds then this should give us our payload so I'll say s dot load s and pass in that token and we can see that we got that payload of the user ID of 1 now if we were to wait longer than 30 seconds then this token will be expired so if I waited a bit and then tried to rerun this so now I'm going to try to reload this token and if it has been more than 30 seconds then we get an error that says that the signature is expired so that's good because it allows us to handle expirations and tokens without needing to put all of that in a database and make things more complicated than they need to be so now let's open up our database models and I'm gonna add some methods to our user model that creates and validates these tokens for us so if we open up our project and navigate to our models dot py file here and I already have this open then I'm going to go down to our user model and actually first let's import the same classes that we used in the command line so I'm just going to grab that import so that I don't have to type it all out again and paste this in to the top of our models py file so we can see that we are importing this timed JSON web signature serializer as serializer now we're also going to need our apps secret key so let's import app from our package and we're already importing DB and login manager from our flash blog package so let's just include app on to the end of that okay so now within our user model now I'm going to create some methods here that make it easier to create these tokens so I'm gonna create one method called get underscore reset underscore token and we will take in self and expires underscore seconds for how many seconds until it expires and I'll pass in 1800 for now and 1800 seconds is just 30 minutes so now let's go inside of our method here and we will create a serializer object so we'll say s equals serializer and now we pass in our secret key so in our example in the command line we just used the string secret but now we're actually going to use our app secret key so we'll say app dot config and access that secret underscore key and now we need our seconds and expiration time so that will be expires seconds which again the default is 1800 or 30 minutes and now we can return a token created with this serializer so we can say returned and now we need to create our token so like we saw before this is s dot dump s and now we need to pass in a payload and again we're going to use a user ID for this payload and the user ID that we are going to use is the instance of this user so that'll be self dot ID and again now we can decode this into utf8 and so I will pass that in now if you are unfamiliar with methods or what this self variable here is then I would suggest watching my objectoriented series where I go over all of that in detail I won't touch on those object oriented specifics in this flask series so we saw everything here before in our command line we're simply setting this up with our secret key and an expiration time and which by default is 30 minutes and then we're returning that token which is created by the dump s method and it also contains a payload of the current user ID so now let's put a method in place that verifies a token so I can come down here and say def verify underscore reset token and then we will take in a token as an argument and now we'll create a serializer object again with this secret key but we don't need to pass in the expires seconds this time now we could get an exception when we try to load this token the token could be invalid or the time could have expired or anything like that so we'll put this in a try except block so we will try to get the user ID by saying s dot load s and load that token and we'll try to get the user ID out of that and remember that user ID comes from the payload that we passed in now if that does not run smoothly and we get an exception then we will catch that exception and we will simply just return none from this method and if we are able to get this user ID without throwing an exception then let's just return the user with that ID so we'll say return user dot query dot get and we will get the user with that user ID so again we have this verify reset token that takes a token as an argument and just creates a serializer and then tries to load that token if we get an exception it returns none if we don't get an exception then it returns the user with that user ID now one more thing here is we can see that this method doesn't do anything with the instance of this user so for example it never uses that self variable and again I go over this and my objectoriented series but when you have a method like this we need to tell Python that this is a static method and we can do that with a simple decorator just by creating a static method right above the method name basically we're just telling Python not to expect that self parameter as an argument and we're only going to be accepting this token as an argument okay so now we have a way to generate and validate tokens so now let's actually create the routes for a user to reset their password and also see how to send an email with a link that they can use to do that so first of all we're going to need two new forms for our routes and these are going to be extremely simple forms so let's open up our forms dot py file and I'll come down here to the bottom of this file to create a new form so first we're going to want a form when they first go to the reset password page where they can submit their email for their account where the instructions for resetting their password will be sent so I'll create a form here called request reset form so we can say class request reset form and remember this is going to import from flask form just like our other forms and inside here we're just going to want one email field and a submit button so I can actually just copy this email field from one of our other forms here and paste it in and now we also want a submit button so I will grab another submit button here and paste it in but the label that we want for this is going to be request password reset and let's also validate that an account exists for this email address now if we don't have an account for this address then they haven't forgot their password they just haven't created an account and this is going to be similar to the validation that we do upon registration so let's just grab that from the registration form so if I go up to our registration form and copy this validate email and paste it in to our request form here except the difference here is going to be instead of checking if the email already exists we want to check if the email doesn't exist so instead of saying if user here when we filter by this email we want to say if user is none and now let's also change the validation message as well so instead of saying that this email is taken we can say there is no account with that email you must register first okay and we're also going to want a form for when they actually do reset their password and that will be a form with two password fields where they can type their new password and then confirm that password and this is similar to the password fields when they first created their account so I'll grab those from the registration form and then we'll paste those in and a bit so I will grab these two forms here and paste those into a new form that we are about to create so I will create a new form here and we'll call this class reset password form and then this will inherit from flask form like we've seen before and now I'm going to paste in those two fields the password and the confirm password field and we're also going to want a submit button so I will grab that from one of our other forms here and paste this in but we want to change the label here for this submit button and we will just change this to reset password okay so now we need to create the routes and the templates that will handle these so first let's do the routes so I'm going to open up routes top py file here and I'll come down actually first we need to import those new forms that we just created so right after our post form I will import the request reset form and I will also import the reset password' form now if your imports ever get extremely long and you want to break them up onto multiple lines then you can put them within parentheses here and then simply just break them up on multiple lines so I can break that there and save that and now that is fitting on the screen there so now let's go down to the bottom to create our new routes and our first route here will be where they actually enter their email address where the reset password information should be sent so let me get a another route here as a starting point so I will just grab one of these so I'll grab the new post route here and paste this in at the bottom so first of all the login required won't be required here so I'll take that out now the URL for this route we will set that equal to reset underscore password for methods we want both get and posts so that's good now for the function name instead of reset password let's actually call this reset request because we're going to have another route that is reset password' as well where they're actually going to change their password but this is going to be the route where they're just putting in their email for us to send that information and this is going to be another route where we want the user to be logged out in order to get to this page so we'll put in the same check here that we put into our login route so if we go up to our login route and see what that was I know there's a lot here then that was this line here so if current user is authenticated then just return a redirect to the home URL so we can paste that in to our new route to make sure that they're logged out before they reset their password and now let's create our form so we will say form is equal to and that is the request reset form and now we can render a template so I will grab this line up here and just as a starting point so we'll say render template now that we haven't created this template yet but we will create it in just a second and we will call this reset underscore request dot HTML and we want to pass in a title here so we'll say the title is equal to reset password and we also want to pass the form that we are using into that template as well so we'll say form is equal to form and since we've done this a few times now it should be coming kind of familiar how we do this and pass these forms to these templates okay so now let's create this template that we just rendered here so I will in my templates folder right click and do a new file and we'll say reset request dot HTML and these templates are going to be very similar to some of the templates that we currently have with forms so I'm going to open up the code from the login template and use that as a starting point and then change what I need so I'm going to copy all of the code from the login template and paste it into our reset request dot HTML template so now we have the code from our login Simplot and now let's change this to be what we need for our request reset so first I will scroll up and change the legend so here we have the legend on the line seven so instead of login I want this to be reset password and within this form we only have an email and a submit field so the first field that we have from our login form is already set to email so let's just keep that and everything else we can get rid of so I'll get rid of the form group for the password and I will also get rid of this div for the form check so we can get rid of that as well and we can keep the submit button there and we can also remove the text here for asking if they have forgot their password because that is going to be the route that we're currently on and we can also remove this div where it's asking if they need an account okay so that should be good for our request reset form and again if you are following along and think that you may have missed something then I do have the final versions of all these files for each video that you can download and the link to that is in the description section below okay so that is good for creating the route where the user will request to reset their password now let's create the route where the user will actually reset their password so I will go back to our routes here and now we'll create a route where the user actually resets their password now to make sure it's actually them we need to make sure that the token that we gave them and the email is active and we'll get that token from the URL so by sending them an email with a link containing this token we will know that it's them when they navigate to this route so I'll keep this route similar to the one that I just created but I'll also accept a token so I'm going to copy what we have here and paste it in and also get that section to make sure that they are logged out so I will paste that in here now this route is going to be similar to the one before except we are going to also accept a token as a parameter so the URL here will be forged slash reset underscore password forged slash and then we will accept a token as a parameter there and we also need to pass that in to our function and now we need to rename our function name here so let's call this reset token so that we're sure which route this is sooooo reset request will be the route where they enter their email to request a password reset and reset token will be where they actually reset their password with the token active so now at this point when they go to this URL we'll try to verify the token from the URL using the user method that we created just a minute ago so down here we can say the user is equal to user dot verify underscore reset token and we can pass in that token from the URL and just reminder if we look at our models not py file here this verify reset token just takes in a token as an argument and if it is valid then it will return the user with that user ID and remember that user ID was the payload that we passed in to the initial token so that is how that works so if we don't get a user back here then it means that our token is either invalid or it is expired so we can put in a conditional here and we could say if user is none or we could say if not user however you want to do it we can say if user is none then let's flash a message to our user that says that is an invalid token and just so they know it can be expired as well we can say invalid or expired token and then we can pass in a class here or a category that we're going to use as a class and we'll pass that in as a bootstrap warning class which is a yellow outlined alert and if they have an invalid or expired token then we will just return them back to that reset request page so we'll do a return for a redirect and that redirect will be the URL for whoops and that URL for will be for the reset request but if we make it past this conditional here then it means that the token was valid and that we were able to get that user so they we can display the form for the user to update their password so we will come down here and say the form is equal to reset password form and then we'll render a template for them to actually reset their password so I'll say return render template and I'll just copy the code from this rendered template here since it's so similar and paste this in but instead of this being the reset request dot HTML we will set this equal to reset token dot HTML will keep the title as reset password and the form we will pass in as well which will be this reset password form okay so now let's create this reset token template so I will copy that and create a new file and our templates I'll call this reset token dot HTML and this is going to be similar to our reset request form so I will just copy that from the reset request template and then paste that in the reset token template so we'll leave this legend as it is at reset password and now we don't have an emailed field anymore we only have the password and the password confirmation fields so I'll replace this email field and I'll do a multiselect here to make sure that I get all of these in your editor you could do a find and replace to replace this so I will change all of those emails over to a password field and now I'm going to copy this entire div for this form group and now I want to add in the confirm password field as well so I'm going to select all of the password fields in this div and that field we called confirm underscore password and save that ok and after we have a password field and a confirm password field there then everything else should be the same so we'll leave the submit button there and everything else is good ok so now we have to be able to handle what happens when we submit these forms that we've just created and these forms will submit back to the same route that they were rendered from and we're used to seeing that by now so let's go a validate on submit conditional to our routes to handle these forms being submitted so within our reset request route right after we create our form we'll handle this if the form was submitted and validated so we can do our normal conditional of if form dot validate on submit then at this point they have submitted an email into our form so now let's grab the user for that email so we'll say user is equal to user dot query dot filter by and we want to filter this by the email is equal to form email dot data and now that'll put the query together and now we just need to specify that we just want the first user with that email okay so after we have that user we're going to want to send this user and email with their token that they can use to reset their password so now we need to learn how to send emails so for now I'm just going to create a function that will leave empty while we talk about what we need to send emails so I'm going to create a function right above here that is called send reset email and we will take in a user as an argument to that function and for now I'm just going to put in a pass statement here and we will fill out the logic for that in just a second so now in our validate on submit conditional I'm going to say send reset email and pass in that user and now we can send a flash message here and in our message we'll just say an email has been sent with instructions to reset your password and then we will pass in a class of info which is kind of a blue alert button and after we send them that email to reset their password then we'll just redirect them back to the login page so I'll say return redirect and we want to redirect them to the URL for login okay so now we need to actually fill out this logic and learn how to actually send this email now to do this we're going to use another flask extension and this one is called flask mail and we can install this with pip so if we open our terminal here I'm going to exit out of our Python interpreter and we can install this simply by saying pip install flask male and once that's installed let's pull up the double underscore an it dot PI file in our package since that's currently where everything is initialized and configured so I will open up this an it dot PI file and within here let's import that extension so we'll say from flask underscore male import male and now we need to also set some constants here so this is going to be how our app actually knows how to send mail so we're going to need a mail server a mail port whether to use TLS and also a username and password for that server now I'm going to be using Gmail in this example but if you have another one then you can use that as well and if you want to use Gmail and don't have an account then you can create an account and use the same constants with your username and password that I use in this video so for these constants I'm going to come down here below our login manager and now I'm gonna say app dot config and set these config variables so the first one is going to be mail underscore server and we will set that equal to SMTP dot goggle mail.com now I will copy and paste this line the next configuration variable here will be mail port we will set the mail port equal to 587 and lastly we're going to have a configuration variable here of mail underscore use underscore TLS and we will set that equal to true now for the username and password I'm not going to actually type those out here for obvious reasons because I don't want anyone to have access to my email so for this information I put this in an environment variable and I have a video on using environment variables to hide sensitive information for things like this so if you don't know how to do this then I would give that video a watch I show how to do it for both Mac Linux and Windows so first to use the environment variables I need to import the OS module so at the top of our module here I'm going to import OS and now I can set these variables by changing this to male username and that username is going to be an environment variable so I'm going to say Oh s dot environment it and I set that as an environment variable that is just equal to email underscore user and I will do the same thing here for my email password so I'll say app config mail password and that has to be spelled all the way out and for my environment variable here I only did an email underscore pass okay and once we have these five configurations set then we can initialize our extension and we can initialize our extension just like we've done the others so I'll say mail is equal to mail and we'll pass in the app to initialize that okay so now that we have all of that set let's open back up our routes dot py file and now we're going to need our mail instance that we just created in our anit dot pi file so let's go import that so here at the top of our file where we're importing everything else from our package we can add that on to our import so from flask blog import mail and we're also going to want to send an email message so we need to import the message class from flask mail as well so down here at the bottom I'm going to say from flask underscore mail import message okay so now let's go down to our send email function that we just created down here close to the bottom this is getting a little large so let's fill in this function to send the user and email with the reset token so first let's get that token using the method that we added earlier to our user model so we can say token is equal to user dot get underscore reset token and if we look at our models we can see that that takes also an argument for the seconds to expire but it has a default there as well so we're just going to leave that as the default and not pass anything else in and now we want to send the email with the URL with the reset token so we can create our email using the message class that we just imported so we can say MSG for message is equal to message and first this is going to be the subject line so we can say password reset request and now we can specify the sender now I'm just going to set a sender equal to no reply at demo dotcom now you want to be careful here not to spoof a sender because if you pretend to be somebody that you're not then you're gonna end up in the spam folder so try to have something that's coming from your domain or something that's actually coming from your email address okay and now we can pass in the recipients so I will do recipients are equal to and now this is going to be a list of recipients but we're just going to have one here and that is going to be the user dot email and let me break these up onto multiple lines here so that we can see everything and I will put that on another line as well okay okay so now for the actual body of our message I'm going to use a multiline string for that and I'm going to use F strings but again if you're not using Python 3.6 or higher then you'll need to use string formatting here so to do this I'm going to say message dot body and I'll set this equal to a multiline string and you can do that with three quote marks there and now I'll just pass in a message that says to reset your password visit the following link and then on the next line here I am going to pass in the value for URL for now we only want one curly brace here because this is an F string and I forgot to add that F there so when we're passing these variables into an F string we only have one curly brace it's not the two curly braces that were used to seeing in these Jinja two templates so I'll say URL for and this will be the URL for the reset underscore token route and we want the token to be equal to the token that we got up here from this user now we need to add in one more argument here and this is going to be underscore external and we're going to set this equal to true and now just to continue our message here I will write at the bottom of this email if you did not make this request then simply ignore this email and no changes will be made and then I'll just bring this back here to the baseline there now when you're working with a multiline string like this then you do need to bring this text back to the baseline here because if you tab these over then those tabs will actually show up in the screen or in the string so you want to make sure that these are back at the baseline now the reason that we're using this external equal to true here is in order to get an absolute URL rather than a relative URL because relative URLs are fine within our application and that's what it normally returns but the link in the email needs to have the full domain now depending on how complex your email message is you can actually use the Jinja two templates to piece these messages together as well now I didn't feel like this message was long enough to need to do that here but perhaps if your message is complicated enough that that's something that you'll want to do so if anyone wants to see where we use templates to create these message bodies then maybe we can tackle that in a future video okay so we're almost done here so now we just need to handle the form submission when they actually changed their password and this will be very similar to how we set their password when they first registered their account so I'm gonna go to the register route and I'm gonna grab a bit of code from there so if I go up to the register route where is it at here it is then I'm just gonna grab this entire if form validate on submit conditional all the way down to the return statement and now let's paste this below if I go down to our reset token route let's paste this below where we are creating that form so if I paste that in there then there are only going to be a couple of differences here so first of all we already have the user from where we verified the token so we can remove this line where we're getting the user and again that's because we have the user up here already and also instead of adding this user to the database like we did in the register route we're instead just going to edit their password and set it to this new hashed password so we can remove this DB session dot add part and instead just say user dot password is equal to this hashed password and it's just hashing that password from our form password dot data which we do have a password field in this reset password form so that'll work so then whenever it does this DB session commit then it will commit the changes to that user's password and lastly let's just update this flash message so instead of saying your account has been created let's say your password has been updated and then leave the part where it says you are now able to log in and then redirect them to the login page so that's good okay so last quick step before we run our application and test all this out we need to actually add a link to the reset past Paige in our application now if you remember back to one of our earlier videos we put a forgot password link on the login page but the link didn't actually go anywhere and this is usually where you'll find the links to reset your passwords is somewhere in the login area so let's go set that location to our reset request route so that was within our login template and I have my login template open here and that was towards the bottom of our page so if we look at the bottom of the page then we can see here on line 43 is where we have that forgot password link and I will change that from being a filler to our actual URL so I will put in the double curly braces and say URL four and we want the URL for the reset underscore request route okay so we didn't really get to look at our application at any of the inbetween steps in this video and that's because a lot of this process really all depends on all these different parts but that should be the last change that we just made to this template so now let's start up our application and test all of this out and if we did everything correctly then this should work so let's start our application so I'll go back to our command line here and do a Python run dot pi and we didn't get any errors so that's good and our debug server is running then now we can test out whether or not this works so if we go to our login page here then we can see that we have our forgot password link here now that should be beside the login button it's not a big deal but if I open up the login template this forgot password small tag here should actually be inside this form group right beside our submit button and that will put that actually beside at the button so if I save that and reload the page then we can see that now that's beside the login button so if I click on the forgot password link then it takes us to our reset password route and we can put in our email and request a password reset so I'm going to require a password reset for Cory M Schaefer at gmail.com so I will request that password reset we can see that we got a notice alert here that says an email has been sent with instructions to reset your password so I actually have my gmail pulled up in another Chrome window here so if we check this and refresh this then we're not getting any messages yet so let's see if something is wrong here so let's pull back up our application and go to our routes where we are sending this email so let me look in this send reset email function here and okay I can already see what the problem is here I made a dumb mistake we created the message and everything but we didn't actually send it so we need to use that mail variable that we imported from our double underscore and knit dot PI file and we need to use that to actually send the message so we'll say mail dot sinned and we will pass in that message that we created that we want to send okay so sorry about that okay so now let's go back to our application and see if that is working now so our development server is still running and I will pull up our flask app and send this again so I'll do forgot password and type in that same account that I signed up to this application with request password reset okay so we can see that we got the same alert that an email has been sent with our instructions so now I have my gmail pulled up here and we can see that that already came through so we got this password reset request email if I open this up then we can see that it says to reset your password visit the following link and we have this huge token here on the end so if I click on that then since our token was valid we can see that we are now here to our reset password form but if this token wasn't valid or if this token was expired because it was older than 30 minutes which was the expiration time that we put on this token then it would redirect us back to I believe the reset password route so if I was to change one character up here then we can see that it redirected us back to this request password reset form and says that that is an invalid or expired token so now I'm just going to hit the back button to go back to the valid token and now since we have a valid token we should be able to reset our password so my password was testing and now I'm just going to set it to password which is never a good idea but just an example so reset password and now we can see that we got an alert that says your password has been updated I spelled that wrong sorry about the typos but now let's see if we can log in with our new password so Cory M Shafer at gmail.com and I changed my password password okay so I was able to log in with that new password and we can see that I have access to my account and everything now I'm just going to go back and change that small little typo that I had there and that was within our reset password link and I'll say your password has been updated instead of update but other than that the functionality worked well we got our email and we're able to reset our password with our valid token okay so I think that is going to do it for this video I hope that now you have a good idea for how you can handle resetting passwords and also how to send mail through a flask application and in the next video we will clean up our application a little bit by learning how to organize different parts and to flask blueprints and also how to move our configuration variables into one single place but if you have any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you you
