With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - how to send emails with Python
00:04 - so we've sent emails and previous videos
00:06 - but in this video we're gonna look at
00:07 - this more in depth and see how to use
00:09 - best practices and we're also gonna look
00:11 - at how to do more advanced emails such
00:13 - as adding attachments or sending HTML
00:15 - messages so let's go ahead and get
00:17 - started so first of all you're going to
00:19 - want to have an email account to send
00:21 - emails in this video we're going to be
00:22 - using Gmail which most of you are likely
00:25 - familiar with but you can use any email
00:27 - service that you'd like but the setup
00:30 - might be slightly different from this
00:31 - video if you're using a different
00:33 - service now we're also going to see how
00:34 - we can use your localhost to send test
00:37 - emails if you don't have an actual email
00:40 - address setup yet but for now let's look
00:42 - at some stuff that we need to do to get
00:44 - an account ready so for example if
00:47 - you're using Gmail then there are a
00:49 - couple of settings that you need to
00:50 - change in order to send emails through
00:52 - python using this account so let me pull
00:55 - these up in my browser so one is this my
00:59 - account google.com ford slash less
01:03 - secure apps so first if you don't have
01:06 - two factor authentication setup then
01:08 - you're going to need to allow less
01:09 - secure applications like python to
01:12 - connect to your account and you can do
01:14 - that at this URL here and I'll have
01:16 - links to these pages in the description
01:17 - section below if you want to access
01:20 - these URLs now if you do have two-factor
01:23 - authentication which I would always
01:25 - recommend then instead you'll need to
01:27 - create an app password so that you can
01:30 - connect through Python and you will do
01:32 - that at this URL here my account
01:35 - google.com forge / app passwords so you
01:39 - can see that I have an app password here
01:41 - called Python test and this is what I
01:43 - use to connect to my account now I've
01:46 - placed that password into an environment
01:48 - variable so that I never need to add it
01:50 - directly into a Python script I think
01:53 - it's a good habit to never add your
01:54 - sensitive information directly to your
01:56 - script but instead you should use
01:58 - configuration files that don't get
02:00 - committed to source control or use
02:02 - environment variables so if you've never
02:04 - used environment variables to hide
02:05 - information like this then I do have a
02:07 - separate video that shows how to do that
02:09 - for Mac Linux
02:10 - and windows so I'll leave a link to
02:12 - those videos in the description section
02:13 - below if anyone would like to see how
02:15 - that's done ok so once you've got an
02:17 - email account and you have your security
02:19 - settings in order let's see how we can
02:22 - send some emails so I have an empty
02:24 - Python script pulled up here in sublime
02:26 - text and you can create an empty script
02:29 - in the editor of your choice
02:31 - now just one tip if you're writing a
02:33 - script to test these things then don't
02:36 - call your script email dot pi because
02:38 - that will conflict with the module built
02:40 - in to the standard library so I have
02:43 - mine called mail - demo dot pi ok so
02:46 - first let's connect to the mail server
02:48 - now there are two different classes that
02:51 - we can use to do this and both of those
02:53 - are going to be imported from the SMTP
02:55 - lib module so I'll just import that
02:57 - entire module so I'll say import SMTP
03:01 - lib so first I'm going to go ahead and
03:03 - connect using plain old SMTP so I'm
03:06 - going to use a context manager here and
03:07 - using a context manager well make sure
03:10 - that our connection is closed
03:11 - automatically without us needing to do
03:13 - it manually so I'm just going to say
03:15 - with SMTP Lib dot SMTP so we're using
03:20 - the SMTP class there and now we'll put
03:23 - in the mail server that we want to use
03:25 - if you're using Gmail then this will be
03:28 - smtp.gmail.com so make sure that's
03:32 - spelled correctly and now we're going to
03:35 - put in the port number that we want to
03:37 - connect to and if you're using plain old
03:39 - SMTP then that's going to be 587 and now
03:42 - we can give this connection a variable
03:44 - name and I'm just going to call this
03:45 - SMTP and now within this with statement
03:49 - we're going to say SMTP dot
03:52 - and the eh ello method just identifies
03:57 - ourselves with the mail server that
03:58 - we're using and I think this is actually
04:01 - gets called automatically in the
04:02 - background anyways but just in case I'm
04:04 - going to go ahead and run this
04:05 - explicitly here and now we want to
04:08 - encrypt our traffic so to encrypt our
04:10 - traffic we can say SMTP dot start TLS ok
04:15 - and now that we've encrypted to traffic
04:18 - we need to rerun the eh ello method
04:21 - again to re-identify our cell
04:24 - as an encrypted connection so I'm just
04:26 - going to copy this here and paste this
04:29 - in to run that again and now that we're
04:33 - encrypted we can go ahead and login to
04:35 - our mail server so I'm gonna say SMTP
04:38 - dot
04:39 - in and now we can put in up sorry that's
04:42 - going to be a method and now we can put
04:45 - in our email address and password that
04:47 - we want to login with now you can put
04:49 - this directly into the script but
04:51 - remember I said that I think it's a good
04:52 - idea to get into the habit of putting
04:54 - sensitive information into environment
04:57 - variables so that's where I currently
04:58 - have mine so at the top of my script I'm
05:01 - going to go ahead and grab these
05:02 - environment variables so I can do that
05:05 - with the OS module so above SMTP here
05:08 - I'm going to import OS and now here at
05:11 - the top of the file I'm going to create
05:13 - some variables using these environment
05:15 - variables so the first one I'm going to
05:17 - call email address and I'll set this
05:20 - equal to and to grab environment
05:22 - variables in Python we can say OS dot
05:25 - environment
05:27 - and I called my environment variable
05:29 - email underscore user and I'm gonna do
05:33 - the exact same thing for the password so
05:37 - I'll call this one email password and I
05:43 - call this environment variable email
05:45 - underscore pass so now I'm going to
05:47 - login to the gmail server using those
05:49 - credentials so I'm going to copy my
05:51 - email address and that is the first
05:53 - argument that we pass in to login and we
05:56 - pass in the password as the second
05:58 - argument okay so now that should log us
06:02 - in to our mail server now in my case I
06:05 - have two factor authentication so the
06:07 - email address is just simply my email
06:10 - address and the password here is the app
06:12 - password that I created through that app
06:15 - passwords page that I showed you earlier
06:17 - in the video okay so now let's create a
06:20 - simple message so we're going to see
06:23 - more organized ways to create messages
06:25 - and just a bit with other modules but if
06:27 - we want to create a simple message
06:28 - without importing anything else then we
06:31 - can do that so let's go ahead and do
06:32 - that first so first I'm going to create
06:35 - a subject for our message so I'll so
06:37 - a subject is equal to and I'll just say
06:41 - grab dinner this weekend and now I'll
06:46 - put in a body so for the body I'll say
06:49 - how about dinner at 6:00 p.m. this
06:54 - Saturday okay and now I can combine
06:58 - these into a single message now when
07:00 - you're constructing a plaintext
07:02 - email from scratch you need to add the
07:04 - subject as a header and then have a
07:07 - couple of blank lines and then put the
07:09 - body of the message so I'm going to do
07:11 - this using an F string so I'm going to
07:13 - say msg is equal to and now I'm going to
07:16 - create an EPS tring so we'll put an F
07:18 - there and now we need to put the subject
07:21 - as a header so I'll say subject and then
07:23 - put in our subject there and now we need
07:27 - a couple of blank lines and now we can
07:29 - put in the body of our message now I
07:32 - know that that looks a little strange
07:33 - and it's a weird way to format a message
07:36 - but we are going to see more convenient
07:38 - ways to do this later in the video but
07:40 - if you're going to do it without any
07:41 - additional modules then you have to do
07:43 - it this way now if you've never used f
07:45 - strings before then you can use regular
07:46 - string formatting there as well now but
07:49 - basically you just need your subject
07:50 - those two new lines and then your body
07:52 - okay so now we can send this simple
07:56 - plain text email so to do this I can
07:59 - just say SMTP dot sin mail and now the
08:03 - format that we are going to use for this
08:06 - we is going to be the sender then the
08:10 - receiver and then the message so for the
08:13 - sender we want the sender to be the
08:16 - email address that we logged in as for
08:19 - the receiver I'm actually going to send
08:21 - this to myself so I could put email
08:23 - address here as well but just to kind of
08:25 - differentiate these two I'll just put my
08:27 - email address and manually to make it
08:29 - look like I'm sending it to someone else
08:31 - so my email address is khorium Schaefer
08:33 - at gmail.com okay now if you're testing
08:37 - this on your machine then you know I'd
08:39 - appreciate it if you didn't set my email
08:41 - address as the receiving address there I
08:43 - don't mind getting questions and
08:45 - messages from you all but if you're just
08:47 - going to be using this for a test
08:50 - then you know I'd rather not be
08:51 - bombarded with a lot of those test
08:53 - emails so you know if you don't mind
08:56 - please change that to your own address
08:57 - for testing purposes okay so for sending
09:01 - simple plain text emails then it's just
09:03 - as simple as this so if I save this then
09:06 - we can see if I scroll up here we've
09:08 - done this in 20 lines of code so now I
09:11 - can go ahead and run this and we didn't
09:14 - have an output so that's fine we didn't
09:15 - print anything but if I go back to my
09:18 - browser here then if I pull up my email
09:21 - here then we can see that I got my
09:23 - message so that's good now your if
09:26 - you're doing a lot of testing and don't
09:28 - actually want to send yourself an email
09:29 - each time then you can use a local debug
09:33 - server to test this so next we're gonna
09:35 - take a look at how to do that but
09:38 - quickly just to make sure that this all
09:40 - looks well let me open this up so that's
09:42 - our subject looks good our body looks
09:45 - good okay so I'm going to go ahead and
09:46 - delete that and now like I was saying
09:49 - now let's go ahead and take a look at
09:51 - how to use a local debug server to test
09:53 - these emails if you don't actually want
09:55 - to send yourself a bunch of emails so in
09:57 - order to do this I'm going to open up
10:00 - the terminal here so I open up a new
10:02 - terminal let me re size my terminal here
10:07 - and I'm just going to minimize this
10:10 - browser here in the background okay so
10:14 - we can start a debug mail server on our
10:16 - localhost by saying Python 3 if you're
10:20 - on Windows or if you're in a virtual
10:22 - environment then that might just be
10:24 - Python I'm on a Mac so I have to say
10:26 - Python 3 when I'm in my global
10:28 - environment so I say python 3 - M SMTP D
10:33 - so not just SMTP or SMTP lib but SMTP D
10:38 - and then - C and this will be d bugging
10:43 - server all one word with those
10:47 - capitalizations there and now - in
10:51 - localhost and then we will run this on
10:54 - you know port 1025 so if I run that then
10:59 - that will now listen for emails on our
11:01 - local machine and when it gets it
11:04 - we'll just print it out here to the
11:06 - terminal and then discard it so let's go
11:09 - back to our code and send an email to
11:11 - this debug server so I'm going to open
11:13 - up sublime and to do this I'm going to
11:15 - close our current output now I'm just
11:18 - going to comment out the current SMTP
11:20 - connection that we have with Google and
11:22 - just create a different one so I'm going
11:24 - to copy this and comment out the current
11:28 - one and just paste in another one here
11:30 - underneath it and instead of connecting
11:32 - to the Google Mail server
11:34 - I'm just going to connect to local host
11:36 - on port 1 0 to 5 so instead of Gmail
11:41 - here I'm just going to say local host
11:44 - and that's going to be on port 1025 okay
11:48 - and with the debug server we're not
11:50 - going to be able to start TLS or login
11:52 - so I'm just going to comment out those
11:54 - lines as well so I'm going to comment
11:56 - out those and now all we have is our
11:59 - message creation and the send mail so
12:03 - now if I run this code then again we
12:06 - don't have any output but if I go back
12:07 - to the terminal then we can see that
12:10 - that message was printed out to our
12:11 - terminal instead of actually sending an
12:13 - email so that's a way that we can test
12:16 - these messages if we don't want to keep
12:17 - sending emails to ourselves ok so I'm
12:20 - going to go back now and undo those
12:22 - changes and I'm just going to go back to
12:24 - sending real emails for the purpose of
12:26 - this video so I'm going to shut down the
12:28 - terminal here and go back and just undo
12:32 - all of those changes that I made and
12:34 - save that ok so now let's take a look
12:37 - and see how we can make this a bit
12:38 - easier on ourselves and how we can send
12:41 - more complex messages so first of all I
12:43 - feel like this part here at the top of
12:46 - our context manager is a bit weird where
12:48 - we are you know sending the eh ello then
12:52 - the start TLS and then the eh ello again
12:55 - now if we wanted to then we could just
12:56 - use the SMTP SSL class to have an SSL
13:01 - connection from the very beginning and
13:02 - then we won't have to run these other
13:04 - commands so to do this instead of using
13:07 - the SMTP class I'm going to use SMTP
13:11 - underscore SSL and when you use an SSL
13:15 - connection that instead of this being on
13:17 - port
13:18 - 587 we're now gonna use port 465 and now
13:23 - we can remove these other lines here so
13:25 - I'm just going to remove these other
13:28 - lines here and now we're just simply
13:29 - logging in and sending our message so if
13:32 - I save this and go back to my browser
13:34 - here then we can see that that still
13:37 - works - I still got that new email okay
13:40 - so the other thing that's a bit weird
13:41 - back in our code let me delete that test
13:44 - email so that we're sure that we're
13:46 - working with a clean slate let me go
13:48 - back to the code okay so another thing
13:50 - that is a bit weird is the formatting
13:54 - that we're using with our message it's
13:56 - not really intuitive that we have our
13:58 - subject and then the two blank lines and
14:00 - then our body so let's see a better way
14:03 - to do this so I'm gonna make another
14:04 - import here at the top and I'm going to
14:08 - import a class called email message and
14:10 - that is from email dot message import
14:16 - and this is email whoops email message
14:20 - so this is an email message class and
14:23 - now we can use this email message to set
14:27 - these things a bit more cleanly and we
14:29 - don't even need to create this message
14:31 - inside of our width statement so let's
14:33 - instead build this up at the top of our
14:36 - file here and then just use our width
14:39 - statement to log in and send the message
14:41 - so up here underneath our email address
14:44 - and password I'm going to create a new
14:46 - email message so I'm going to say
14:48 - message is equal to email message and
14:51 - now instead of creating these different
14:53 - parts of the message separately and then
14:55 - combining them I'm instead just going to
14:57 - set these on our message object itself
15:00 - and I'm also going to add the sender and
15:02 - receiver to the message object also so
15:05 - we can simply say so I will copy this
15:09 - here and now to set the subject we can
15:12 - just set the subject directly like this
15:14 - so I will copy our old subject here and
15:18 - paste it in and now I'll get rid of that
15:21 - subject line and now I'm also going to
15:25 - put the sender and receiver inside the
15:28 - message itself so to set the sender and
15:31 - receiver
15:31 - this is going to be a from right here so
15:34 - we can set the from to our email address
15:39 - and we can set the message and access
15:44 - this to key there and we're going to set
15:47 - the two to be to Cory M Shaffer at
15:51 - gmail.com okay
15:53 - and now we can actually set the content
15:56 - of our message which is going to be our
15:57 - body so I can say MSG dot set underscore
16:02 - content and now we can pass in the
16:05 - content of our message so I'm just going
16:07 - to copy the same one that we had before
16:09 - and now I can get rid of our body down
16:13 - here I can get rid of our message down
16:15 - here and also when we send mail and
16:19 - instead of using the send mail method
16:22 - since we're no longer using the sender
16:25 - and receiver within this instead we're
16:28 - going to use the send message method
16:29 - because all we're doing is sending a
16:31 - message so I'm going to get rid of those
16:33 - and just have the message there and this
16:36 - is going to be send underscore message
16:40 - okay so I think that this organizes the
16:42 - information for our message a little bit
16:44 - better so now we have it all in one
16:46 - place and not only that but this is also
16:49 - going to let us put together some more
16:51 - complicated messages as well with us
16:53 - doing it this way but if we were to run
16:55 - this right now then we should still just
16:57 - get that same plain text email that we
16:59 - got before so I'm gonna save this and
17:01 - run it and now if I check my browser
17:04 - here and if I check my email then we can
17:07 - see that we got that same plain text
17:09 - message that we got before so that's
17:11 - still working okay so now let me go back
17:14 - to our code okay so now we're using this
17:16 - new email message object to send our
17:19 - message so now let's see how we can add
17:22 - some attachments to this email so I have
17:24 - some pictures of my dog when he was a
17:26 - puppy saved in the same directory as
17:28 - this script so let's say that I wanted
17:30 - to add those as an email attachment so
17:33 - first I'll just attach one image and
17:36 - then we'll see how to do two after we
17:38 - send the one so first I'm going to
17:41 - change the subject of subject and the
17:43 - body of our message
17:45 - here so I'll just say check out Bronx as
17:48 - a puppy and then for the content here I
17:52 - will just let them know that there's are
17:53 - an image attached so I'll just say
17:55 - imaged attached here okay so now below
17:59 - set content here I'm going to open that
18:02 - file that I want to attach so to open
18:05 - this file I can just say with open and
18:07 - this file is in the same directory as my
18:11 - current script that I'm running so I
18:12 - don't have to set a full path or
18:13 - anything but you would set the full path
18:15 - to the image that you want to attach and
18:18 - this image for me is called Bronx one
18:20 - jpg so I'm going to open that as in our
18:25 - B mode which is read bytes and I will
18:27 - just call this F so now within here I
18:30 - can read that image data so I'll say
18:33 - file data is equal to F dot read and now
18:37 - we can attach this to our message but
18:39 - before we attach this we're going to
18:41 - need to be able to determine what kind
18:43 - of image were attaching so if we're just
18:46 - doing one image then we could put this
18:48 - in manually but if you're doing multiple
18:50 - images then you're likely going to want
18:52 - Python to determine this for us and
18:54 - there's a built in module that can do
18:56 - this for us and that's the image HDR
18:59 - module so to import this I'm going to go
19:02 - up here to the top and I'm going to
19:04 - import oops import and this is I M G HDR
19:10 - okay and I'm just going to copy that
19:13 - module name here so that I don't spell
19:16 - it incorrectly and now to get the type
19:18 - of image that this is within our with
19:21 - statement down here where we have this
19:23 - image file open I'm going to say file
19:26 - underscore type is equal to IMG
19:30 - HDR dot what this is a dot what method
19:34 - and now we can just pass in that it that
19:36 - name of that file so I'm going to say F
19:38 - dot name so we're passing in the name of
19:41 - the file now you could also change that
19:42 - up a bit in order to get the image type
19:45 - by reading in the image bytes but in
19:47 - this case I think it's just easier to do
19:49 - it with the file name so just to show
19:51 - you what this does if I comment out
19:53 - everything underneath this so I'm not
19:56 - going to send an email right now
19:58 - now I'm just going to print out this
20:01 - file type and see what Python gives us
20:04 - here so if I run this then we can see
20:07 - that the output that we got that it
20:09 - returns JPEG so that worked because it
20:11 - is a JPEG image okay so now let's attach
20:13 - our image to our message so I'm going to
20:17 - remove this print statement here where
20:19 - we printed out that file type I'm going
20:21 - to uncomment out everything here let me
20:24 - just get that up there okay okay so now
20:27 - that we've set that file data in that
20:30 - file type now below that with statement
20:33 - and outside of the West statement we're
20:35 - back on the main level of our code here
20:37 - I'm going to say MSG dot add underscore
20:41 - attachment and what we want to add is
20:44 - that file data
20:46 - whoops file data and now we want to say
20:49 - main type is equal to and this is an
20:53 - image and it also needs a sub type so
20:58 - I'm going to say sub type is equal to
20:59 - and that is what kind of image it is so
21:02 - I want to pass in file type as the sub
21:05 - type okay so that should attach that
21:08 - image now we also want the name of the
21:11 - image for our attachment so I'm going to
21:14 - go ahead and grab that too so up here
21:17 - underneath file type I'm just going to
21:19 - say file name is equal to F dot name so
21:23 - let me pass this in as well so another
21:27 - argument to add attachment I'm going to
21:29 - say file name is equal to file name now
21:34 - I named my variable file underscore name
21:36 - and the argument here is just file name
21:39 - one word so keep that in mind if you're
21:41 - following along okay so that should add
21:44 - our image as an attachment to our email
21:46 - so if I spelled everything correctly if
21:48 - I save that and run it so we don't have
21:51 - any output but if I go back to our
21:54 - browser here and check this now this
21:56 - might take a second because we're
21:58 - sending an image instead of plain text
22:00 - okay so we can see that that just came
22:02 - in so if I check this then we can see
22:04 - that we have our subject as check out
22:06 - Brock's as a puppy our body is image
22:09 - attached and if I open this then we have
22:11 - the image that we attached to the email
22:13 - and if I check the name of this image if
22:16 - I just hover over this then it also got
22:18 - the image name of that file as well so
22:20 - this is Bronx one dot jpg okay so let's
22:23 - go back to our script okay so now that
22:25 - we've attached one image let's see what
22:28 - we do in order to attach multiple images
22:30 - so you can simply create a loop while
22:33 - making these attachments in order to do
22:35 - this so above the with statement I'm
22:38 - going to say files are equal to and I'm
22:43 - going to create a list of file names
22:44 - here and these are going to be the list
22:46 - of file names that I want to attach to
22:48 - my email so one is going to be Bronx one
22:50 - dot jpg the other one is just called
22:53 - Bronx underscore two dot jpg and now I'm
22:59 - going to say for file in files and now
23:04 - I'm going to indent this with statement
23:07 - here so that we're getting this
23:08 - information for both files now I'm also
23:11 - going to indent my message add
23:14 - attachment into our for loop so that
23:17 - we're attaching both of these and also
23:19 - we need to change the file name that we
23:21 - are opening so right now we're just
23:23 - opening this Bronx one dot jpg we want
23:27 - to just open file so when it loops
23:29 - through this we're going to open Bronx
23:31 - one dot jpg read in that data get the
23:34 - file type get the file name and attach
23:36 - that to our message and then it's going
23:38 - to move on to Bronx two jpg get the file
23:41 - data file type file name and then add
23:44 - that as an attachment to our message so
23:46 - if I save that and run it then this one
23:49 - will probably take even longer to come
23:52 - in now but if I check the browser then
23:54 - let me go back to my inbox and it looks
23:58 - like this came in here so now we have
24:00 - two attachments so we have Bronx one jpg
24:03 - and that came in with the right file
24:05 - name and we have Bronx two jpg and that
24:08 - came in with the correct file name as
24:10 - well so now I'm going to delete both of
24:12 - these just to clean that up a bit go
24:15 - back to my code okay so attaching both
24:17 - of those images to our email worked well
24:19 - now if you're attaching some other kind
24:22 - of file then you just need to change the
24:24 - main type
24:25 - the subtype for each one so I also have
24:27 - a PDF on my or in the same directory as
24:31 - my script here so if I wanted to send
24:34 - something like a PDF then I could go
24:37 - ahead and do something like this so I'm
24:39 - just going to keep my for loop here but
24:41 - for the files up here I'm just going to
24:43 - make this a list of one file and I
24:46 - called this resume dot PDF
24:48 - so now that's going to loop through here
24:52 - it's just going to loop through once
24:53 - because there's one PDF file it's going
24:55 - to open it read in the data read in we
24:58 - don't need the file type anymore because
25:00 - it's not an image so now we can just
25:02 - have the file data and the file name and
25:04 - now for the when we add the attachment
25:07 - what we're going to do here as the main
25:09 - type is we're going to say application
25:12 - and for the subtype I'm going to put in
25:17 - a string here and this is going to be
25:18 - octet - string so make sure you can see
25:24 - both of those there now by setting the
25:26 - application as the main type and octet
25:29 - stream as the subtype that's what the
25:31 - Python documentation calls a generic bag
25:34 - of bits type so basically just generic
25:37 - information for that so if I save that
25:40 - and run it then let's go back to the
25:43 - browser here and let's see if we got
25:46 - this message and we did I forgot to
25:48 - change the subject here from check out
25:51 - Broncs as a puppy but if we look at the
25:54 - resume then we can see that we do have
25:56 - this resume PDF here and we do have that
25:59 - PDF file so that works well ok so now
26:02 - let's look at a couple more tips here
26:03 - that you might find useful when sending
26:05 - emails so first let's say that you want
26:08 - to send emails to multiple people that's
26:10 - fairly common now in order to do that
26:12 - it's as simple as passing in a list
26:15 - where we currently have the receiver so
26:18 - let me make a list here so I'm going to
26:20 - go up here to the top now above my
26:23 - message here I'm just going to create a
26:26 - list and call this contacts and set this
26:29 - equal to and I will set this equal to my
26:32 - email address and then you can pass in
26:37 - what other email address that
26:39 - you want to send this to so test at
26:41 - example.com or something like that and
26:44 - now when you do the message too we could
26:48 - pass in that list of contacts now when I
26:51 - was making this video I tested this with
26:53 - my email and the email of a friend of
26:55 - mine and it worked well it did send
26:58 - emails to both of us but this isn't how
27:00 - they have it in the Python documentation
27:02 - so I'm not sure if this is frowned on
27:04 - for any reason but in the documentation
27:06 - they have it where they are passing in a
27:09 - string of comma separated values so I
27:12 - could do this manually by adding a
27:15 - string with both of these email
27:16 - addresses comma separated or if we
27:19 - wanted to create a comma separated
27:20 - string from this list then we could do
27:23 - that simply by saying we could do a
27:28 - comma there as a string and then say dot
27:32 - whoops dot join and we want to join that
27:37 - contacts list now I know that looks a
27:39 - little confusing there if you've never
27:40 - used it if you've never seen a joint
27:42 - statement like that then you can watch
27:44 - my video on lists for more details on
27:47 - how that works so those are some ways of
27:50 - how you dad multiple recipients to an
27:52 - email but for now I'm just gonna set
27:54 - this back to send this just to myself so
27:58 - I will just put back in my email address
28:04 - here instead of using those contacts
28:06 - okay so the last thing that I want to
28:07 - show here in this video is how to send
28:10 - an email with HTML so this is common for
28:12 - newsletters and things like that where
28:14 - you want to spice it up a bit and have a
28:16 - better presentation than just plain text
28:18 - email so in this email that I'm gonna
28:20 - send I'm gonna have HTML and plain text
28:22 - as an alternative because some people
28:25 - turn off HTML emails so you want to have
28:27 - that text as a fallback so I'm just
28:30 - going to delete the part where I added
28:32 - the attachments here so I'm going to
28:34 - delete all the way down from the files
28:37 - to the attachments now for the message
28:41 - set content I'm just going to have this
28:43 - be the plain text so within here I'm
28:47 - just going to say this is a plain whoops
28:51 - plain text
28:53 - email and now to set the HTML message
28:56 - I'm gonna use a small HTML snippet that
28:59 - I have open up here in sublime that just
29:02 - has a simple heading that is styled with
29:05 - a color so I have that open here and if
29:09 - you want to use this simple HTML to test
29:10 - this out for yourself then I'll be sure
29:12 - to add that to my github and leave a
29:14 - link to that in the description section
29:16 - below if you would like to use this as
29:18 - well so I'm just going to copy this
29:20 - email here and now go back to the script
29:23 - and now let's add that email to our or
29:27 - let's add that HTML to our email so to
29:31 - do this I can simply say MSG dot add
29:34 - underscore alternative and now within
29:39 - add alternative I'm going to put triple
29:43 - quotes here oops
29:44 - let me do double quotes here so triple
29:47 - quotes which means it's going to be a
29:48 - multi-line string and I'm gonna put a
29:52 - backslash there to cancel out that
29:55 - newline and now I'm just going to paste
29:57 - in that HTML and now so we this is kind
30:01 - of large here but when we add
30:03 - alternative this entire string here is
30:06 - our first argument to add alternative
30:08 - and now I'm going to put in a comma to
30:11 - add in one more argument and that
30:13 - argument is going to be sub type so that
30:16 - sub type is going to be equal to HTML
30:18 - okay so by adding that HTML as our
30:21 - alternative there and setting that sub
30:23 - type now if I save this and run it then
30:28 - let me go back to my email here and I
30:31 - will go back to my inbox and again I
30:33 - forgot to change this subject line
30:36 - but if I click on this then we can see
30:38 - that we got that HTML email and that the
30:40 - text has a h1 heading style with this
30:43 - blueish gray color so that hTML is
30:46 - working so that's good okay so now let's
30:50 - go back to my script and let me see if
30:53 - we can fit I don't think we can fit all
30:55 - of this on one screen here but if you
30:59 - need to see this hopefully you can see
31:01 - everything to create that message right
31:02 - there and I'll be sure to put this
31:04 - finish script on my github as well and
31:06 - leave
31:06 - link to that in the description section
31:08 - below if anyone would like to see this
31:09 - finished script okay so I think that is
31:12 - gonna do it for this video hopefully now
31:14 - you have a pretty good idea for how you
31:15 - can send just about any type of email
31:17 - that you'd want to send with Python but
31:20 - if anyone does have any questions about
31:21 - what we covered in this video then feel
31:23 - free to ask in the comment section below
31:24 - and I'll do my best to answer those and
31:26 - if you enjoy these tutorials and would
31:28 - like to support them then there are
31:29 - several ways you can do that these this
31:30 - ways to simply LIKE the video and give
31:32 - it a thumbs up and also it's a huge help
31:34 - to share these videos with anyone who
31:35 - you think would find them useful and if
31:36 - you have the means you can contribute to
31:38 - patreon and there's a link to that page
31:39 - in the description section below be sure
31:41 - to subscribe for future videos and thank
31:43 - you all for watching
31:54 - you

Cleaned transcript:

hey there how's it going everybody in this video we're going to be learning how to send emails with Python so we've sent emails and previous videos but in this video we're gonna look at this more in depth and see how to use best practices and we're also gonna look at how to do more advanced emails such as adding attachments or sending HTML messages so let's go ahead and get started so first of all you're going to want to have an email account to send emails in this video we're going to be using Gmail which most of you are likely familiar with but you can use any email service that you'd like but the setup might be slightly different from this video if you're using a different service now we're also going to see how we can use your localhost to send test emails if you don't have an actual email address setup yet but for now let's look at some stuff that we need to do to get an account ready so for example if you're using Gmail then there are a couple of settings that you need to change in order to send emails through python using this account so let me pull these up in my browser so one is this my account google.com ford slash less secure apps so first if you don't have two factor authentication setup then you're going to need to allow less secure applications like python to connect to your account and you can do that at this URL here and I'll have links to these pages in the description section below if you want to access these URLs now if you do have twofactor authentication which I would always recommend then instead you'll need to create an app password so that you can connect through Python and you will do that at this URL here my account google.com forge / app passwords so you can see that I have an app password here called Python test and this is what I use to connect to my account now I've placed that password into an environment variable so that I never need to add it directly into a Python script I think it's a good habit to never add your sensitive information directly to your script but instead you should use configuration files that don't get committed to source control or use environment variables so if you've never used environment variables to hide information like this then I do have a separate video that shows how to do that for Mac Linux and windows so I'll leave a link to those videos in the description section below if anyone would like to see how that's done ok so once you've got an email account and you have your security settings in order let's see how we can send some emails so I have an empty Python script pulled up here in sublime text and you can create an empty script in the editor of your choice now just one tip if you're writing a script to test these things then don't call your script email dot pi because that will conflict with the module built in to the standard library so I have mine called mail demo dot pi ok so first let's connect to the mail server now there are two different classes that we can use to do this and both of those are going to be imported from the SMTP lib module so I'll just import that entire module so I'll say import SMTP lib so first I'm going to go ahead and connect using plain old SMTP so I'm going to use a context manager here and using a context manager well make sure that our connection is closed automatically without us needing to do it manually so I'm just going to say with SMTP Lib dot SMTP so we're using the SMTP class there and now we'll put in the mail server that we want to use if you're using Gmail then this will be smtp.gmail.com so make sure that's spelled correctly and now we're going to put in the port number that we want to connect to and if you're using plain old SMTP then that's going to be 587 and now we can give this connection a variable name and I'm just going to call this SMTP and now within this with statement we're going to say SMTP dot and the eh ello method just identifies ourselves with the mail server that we're using and I think this is actually gets called automatically in the background anyways but just in case I'm going to go ahead and run this explicitly here and now we want to encrypt our traffic so to encrypt our traffic we can say SMTP dot start TLS ok and now that we've encrypted to traffic we need to rerun the eh ello method again to reidentify our cell as an encrypted connection so I'm just going to copy this here and paste this in to run that again and now that we're encrypted we can go ahead and login to our mail server so I'm gonna say SMTP dot in and now we can put in up sorry that's going to be a method and now we can put in our email address and password that we want to login with now you can put this directly into the script but remember I said that I think it's a good idea to get into the habit of putting sensitive information into environment variables so that's where I currently have mine so at the top of my script I'm going to go ahead and grab these environment variables so I can do that with the OS module so above SMTP here I'm going to import OS and now here at the top of the file I'm going to create some variables using these environment variables so the first one I'm going to call email address and I'll set this equal to and to grab environment variables in Python we can say OS dot environment and I called my environment variable email underscore user and I'm gonna do the exact same thing for the password so I'll call this one email password and I call this environment variable email underscore pass so now I'm going to login to the gmail server using those credentials so I'm going to copy my email address and that is the first argument that we pass in to login and we pass in the password as the second argument okay so now that should log us in to our mail server now in my case I have two factor authentication so the email address is just simply my email address and the password here is the app password that I created through that app passwords page that I showed you earlier in the video okay so now let's create a simple message so we're going to see more organized ways to create messages and just a bit with other modules but if we want to create a simple message without importing anything else then we can do that so let's go ahead and do that first so first I'm going to create a subject for our message so I'll so a subject is equal to and I'll just say grab dinner this weekend and now I'll put in a body so for the body I'll say how about dinner at 600 p.m. this Saturday okay and now I can combine these into a single message now when you're constructing a plaintext email from scratch you need to add the subject as a header and then have a couple of blank lines and then put the body of the message so I'm going to do this using an F string so I'm going to say msg is equal to and now I'm going to create an EPS tring so we'll put an F there and now we need to put the subject as a header so I'll say subject and then put in our subject there and now we need a couple of blank lines and now we can put in the body of our message now I know that that looks a little strange and it's a weird way to format a message but we are going to see more convenient ways to do this later in the video but if you're going to do it without any additional modules then you have to do it this way now if you've never used f strings before then you can use regular string formatting there as well now but basically you just need your subject those two new lines and then your body okay so now we can send this simple plain text email so to do this I can just say SMTP dot sin mail and now the format that we are going to use for this we is going to be the sender then the receiver and then the message so for the sender we want the sender to be the email address that we logged in as for the receiver I'm actually going to send this to myself so I could put email address here as well but just to kind of differentiate these two I'll just put my email address and manually to make it look like I'm sending it to someone else so my email address is khorium Schaefer at gmail.com okay now if you're testing this on your machine then you know I'd appreciate it if you didn't set my email address as the receiving address there I don't mind getting questions and messages from you all but if you're just going to be using this for a test then you know I'd rather not be bombarded with a lot of those test emails so you know if you don't mind please change that to your own address for testing purposes okay so for sending simple plain text emails then it's just as simple as this so if I save this then we can see if I scroll up here we've done this in 20 lines of code so now I can go ahead and run this and we didn't have an output so that's fine we didn't print anything but if I go back to my browser here then if I pull up my email here then we can see that I got my message so that's good now your if you're doing a lot of testing and don't actually want to send yourself an email each time then you can use a local debug server to test this so next we're gonna take a look at how to do that but quickly just to make sure that this all looks well let me open this up so that's our subject looks good our body looks good okay so I'm going to go ahead and delete that and now like I was saying now let's go ahead and take a look at how to use a local debug server to test these emails if you don't actually want to send yourself a bunch of emails so in order to do this I'm going to open up the terminal here so I open up a new terminal let me re size my terminal here and I'm just going to minimize this browser here in the background okay so we can start a debug mail server on our localhost by saying Python 3 if you're on Windows or if you're in a virtual environment then that might just be Python I'm on a Mac so I have to say Python 3 when I'm in my global environment so I say python 3 M SMTP D so not just SMTP or SMTP lib but SMTP D and then C and this will be d bugging server all one word with those capitalizations there and now in localhost and then we will run this on you know port 1025 so if I run that then that will now listen for emails on our local machine and when it gets it we'll just print it out here to the terminal and then discard it so let's go back to our code and send an email to this debug server so I'm going to open up sublime and to do this I'm going to close our current output now I'm just going to comment out the current SMTP connection that we have with Google and just create a different one so I'm going to copy this and comment out the current one and just paste in another one here underneath it and instead of connecting to the Google Mail server I'm just going to connect to local host on port 1 0 to 5 so instead of Gmail here I'm just going to say local host and that's going to be on port 1025 okay and with the debug server we're not going to be able to start TLS or login so I'm just going to comment out those lines as well so I'm going to comment out those and now all we have is our message creation and the send mail so now if I run this code then again we don't have any output but if I go back to the terminal then we can see that that message was printed out to our terminal instead of actually sending an email so that's a way that we can test these messages if we don't want to keep sending emails to ourselves ok so I'm going to go back now and undo those changes and I'm just going to go back to sending real emails for the purpose of this video so I'm going to shut down the terminal here and go back and just undo all of those changes that I made and save that ok so now let's take a look and see how we can make this a bit easier on ourselves and how we can send more complex messages so first of all I feel like this part here at the top of our context manager is a bit weird where we are you know sending the eh ello then the start TLS and then the eh ello again now if we wanted to then we could just use the SMTP SSL class to have an SSL connection from the very beginning and then we won't have to run these other commands so to do this instead of using the SMTP class I'm going to use SMTP underscore SSL and when you use an SSL connection that instead of this being on port 587 we're now gonna use port 465 and now we can remove these other lines here so I'm just going to remove these other lines here and now we're just simply logging in and sending our message so if I save this and go back to my browser here then we can see that that still works I still got that new email okay so the other thing that's a bit weird back in our code let me delete that test email so that we're sure that we're working with a clean slate let me go back to the code okay so another thing that is a bit weird is the formatting that we're using with our message it's not really intuitive that we have our subject and then the two blank lines and then our body so let's see a better way to do this so I'm gonna make another import here at the top and I'm going to import a class called email message and that is from email dot message import and this is email whoops email message so this is an email message class and now we can use this email message to set these things a bit more cleanly and we don't even need to create this message inside of our width statement so let's instead build this up at the top of our file here and then just use our width statement to log in and send the message so up here underneath our email address and password I'm going to create a new email message so I'm going to say message is equal to email message and now instead of creating these different parts of the message separately and then combining them I'm instead just going to set these on our message object itself and I'm also going to add the sender and receiver to the message object also so we can simply say so I will copy this here and now to set the subject we can just set the subject directly like this so I will copy our old subject here and paste it in and now I'll get rid of that subject line and now I'm also going to put the sender and receiver inside the message itself so to set the sender and receiver this is going to be a from right here so we can set the from to our email address and we can set the message and access this to key there and we're going to set the two to be to Cory M Shaffer at gmail.com okay and now we can actually set the content of our message which is going to be our body so I can say MSG dot set underscore content and now we can pass in the content of our message so I'm just going to copy the same one that we had before and now I can get rid of our body down here I can get rid of our message down here and also when we send mail and instead of using the send mail method since we're no longer using the sender and receiver within this instead we're going to use the send message method because all we're doing is sending a message so I'm going to get rid of those and just have the message there and this is going to be send underscore message okay so I think that this organizes the information for our message a little bit better so now we have it all in one place and not only that but this is also going to let us put together some more complicated messages as well with us doing it this way but if we were to run this right now then we should still just get that same plain text email that we got before so I'm gonna save this and run it and now if I check my browser here and if I check my email then we can see that we got that same plain text message that we got before so that's still working okay so now let me go back to our code okay so now we're using this new email message object to send our message so now let's see how we can add some attachments to this email so I have some pictures of my dog when he was a puppy saved in the same directory as this script so let's say that I wanted to add those as an email attachment so first I'll just attach one image and then we'll see how to do two after we send the one so first I'm going to change the subject of subject and the body of our message here so I'll just say check out Bronx as a puppy and then for the content here I will just let them know that there's are an image attached so I'll just say imaged attached here okay so now below set content here I'm going to open that file that I want to attach so to open this file I can just say with open and this file is in the same directory as my current script that I'm running so I don't have to set a full path or anything but you would set the full path to the image that you want to attach and this image for me is called Bronx one jpg so I'm going to open that as in our B mode which is read bytes and I will just call this F so now within here I can read that image data so I'll say file data is equal to F dot read and now we can attach this to our message but before we attach this we're going to need to be able to determine what kind of image were attaching so if we're just doing one image then we could put this in manually but if you're doing multiple images then you're likely going to want Python to determine this for us and there's a built in module that can do this for us and that's the image HDR module so to import this I'm going to go up here to the top and I'm going to import oops import and this is I M G HDR okay and I'm just going to copy that module name here so that I don't spell it incorrectly and now to get the type of image that this is within our with statement down here where we have this image file open I'm going to say file underscore type is equal to IMG HDR dot what this is a dot what method and now we can just pass in that it that name of that file so I'm going to say F dot name so we're passing in the name of the file now you could also change that up a bit in order to get the image type by reading in the image bytes but in this case I think it's just easier to do it with the file name so just to show you what this does if I comment out everything underneath this so I'm not going to send an email right now now I'm just going to print out this file type and see what Python gives us here so if I run this then we can see that the output that we got that it returns JPEG so that worked because it is a JPEG image okay so now let's attach our image to our message so I'm going to remove this print statement here where we printed out that file type I'm going to uncomment out everything here let me just get that up there okay okay so now that we've set that file data in that file type now below that with statement and outside of the West statement we're back on the main level of our code here I'm going to say MSG dot add underscore attachment and what we want to add is that file data whoops file data and now we want to say main type is equal to and this is an image and it also needs a sub type so I'm going to say sub type is equal to and that is what kind of image it is so I want to pass in file type as the sub type okay so that should attach that image now we also want the name of the image for our attachment so I'm going to go ahead and grab that too so up here underneath file type I'm just going to say file name is equal to F dot name so let me pass this in as well so another argument to add attachment I'm going to say file name is equal to file name now I named my variable file underscore name and the argument here is just file name one word so keep that in mind if you're following along okay so that should add our image as an attachment to our email so if I spelled everything correctly if I save that and run it so we don't have any output but if I go back to our browser here and check this now this might take a second because we're sending an image instead of plain text okay so we can see that that just came in so if I check this then we can see that we have our subject as check out Brock's as a puppy our body is image attached and if I open this then we have the image that we attached to the email and if I check the name of this image if I just hover over this then it also got the image name of that file as well so this is Bronx one dot jpg okay so let's go back to our script okay so now that we've attached one image let's see what we do in order to attach multiple images so you can simply create a loop while making these attachments in order to do this so above the with statement I'm going to say files are equal to and I'm going to create a list of file names here and these are going to be the list of file names that I want to attach to my email so one is going to be Bronx one dot jpg the other one is just called Bronx underscore two dot jpg and now I'm going to say for file in files and now I'm going to indent this with statement here so that we're getting this information for both files now I'm also going to indent my message add attachment into our for loop so that we're attaching both of these and also we need to change the file name that we are opening so right now we're just opening this Bronx one dot jpg we want to just open file so when it loops through this we're going to open Bronx one dot jpg read in that data get the file type get the file name and attach that to our message and then it's going to move on to Bronx two jpg get the file data file type file name and then add that as an attachment to our message so if I save that and run it then this one will probably take even longer to come in now but if I check the browser then let me go back to my inbox and it looks like this came in here so now we have two attachments so we have Bronx one jpg and that came in with the right file name and we have Bronx two jpg and that came in with the correct file name as well so now I'm going to delete both of these just to clean that up a bit go back to my code okay so attaching both of those images to our email worked well now if you're attaching some other kind of file then you just need to change the main type the subtype for each one so I also have a PDF on my or in the same directory as my script here so if I wanted to send something like a PDF then I could go ahead and do something like this so I'm just going to keep my for loop here but for the files up here I'm just going to make this a list of one file and I called this resume dot PDF so now that's going to loop through here it's just going to loop through once because there's one PDF file it's going to open it read in the data read in we don't need the file type anymore because it's not an image so now we can just have the file data and the file name and now for the when we add the attachment what we're going to do here as the main type is we're going to say application and for the subtype I'm going to put in a string here and this is going to be octet string so make sure you can see both of those there now by setting the application as the main type and octet stream as the subtype that's what the Python documentation calls a generic bag of bits type so basically just generic information for that so if I save that and run it then let's go back to the browser here and let's see if we got this message and we did I forgot to change the subject here from check out Broncs as a puppy but if we look at the resume then we can see that we do have this resume PDF here and we do have that PDF file so that works well ok so now let's look at a couple more tips here that you might find useful when sending emails so first let's say that you want to send emails to multiple people that's fairly common now in order to do that it's as simple as passing in a list where we currently have the receiver so let me make a list here so I'm going to go up here to the top now above my message here I'm just going to create a list and call this contacts and set this equal to and I will set this equal to my email address and then you can pass in what other email address that you want to send this to so test at example.com or something like that and now when you do the message too we could pass in that list of contacts now when I was making this video I tested this with my email and the email of a friend of mine and it worked well it did send emails to both of us but this isn't how they have it in the Python documentation so I'm not sure if this is frowned on for any reason but in the documentation they have it where they are passing in a string of comma separated values so I could do this manually by adding a string with both of these email addresses comma separated or if we wanted to create a comma separated string from this list then we could do that simply by saying we could do a comma there as a string and then say dot whoops dot join and we want to join that contacts list now I know that looks a little confusing there if you've never used it if you've never seen a joint statement like that then you can watch my video on lists for more details on how that works so those are some ways of how you dad multiple recipients to an email but for now I'm just gonna set this back to send this just to myself so I will just put back in my email address here instead of using those contacts okay so the last thing that I want to show here in this video is how to send an email with HTML so this is common for newsletters and things like that where you want to spice it up a bit and have a better presentation than just plain text email so in this email that I'm gonna send I'm gonna have HTML and plain text as an alternative because some people turn off HTML emails so you want to have that text as a fallback so I'm just going to delete the part where I added the attachments here so I'm going to delete all the way down from the files to the attachments now for the message set content I'm just going to have this be the plain text so within here I'm just going to say this is a plain whoops plain text email and now to set the HTML message I'm gonna use a small HTML snippet that I have open up here in sublime that just has a simple heading that is styled with a color so I have that open here and if you want to use this simple HTML to test this out for yourself then I'll be sure to add that to my github and leave a link to that in the description section below if you would like to use this as well so I'm just going to copy this email here and now go back to the script and now let's add that email to our or let's add that HTML to our email so to do this I can simply say MSG dot add underscore alternative and now within add alternative I'm going to put triple quotes here oops let me do double quotes here so triple quotes which means it's going to be a multiline string and I'm gonna put a backslash there to cancel out that newline and now I'm just going to paste in that HTML and now so we this is kind of large here but when we add alternative this entire string here is our first argument to add alternative and now I'm going to put in a comma to add in one more argument and that argument is going to be sub type so that sub type is going to be equal to HTML okay so by adding that HTML as our alternative there and setting that sub type now if I save this and run it then let me go back to my email here and I will go back to my inbox and again I forgot to change this subject line but if I click on this then we can see that we got that HTML email and that the text has a h1 heading style with this blueish gray color so that hTML is working so that's good okay so now let's go back to my script and let me see if we can fit I don't think we can fit all of this on one screen here but if you need to see this hopefully you can see everything to create that message right there and I'll be sure to put this finish script on my github as well and leave link to that in the description section below if anyone would like to see this finished script okay so I think that is gonna do it for this video hopefully now you have a pretty good idea for how you can send just about any type of email that you'd want to send with Python but if anyone does have any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that these this ways to simply LIKE the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute to patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
