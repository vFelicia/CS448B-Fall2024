With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - how to add and remove columns from our
00:04 - data frames we'll also take a look at
00:06 - how we can combine information from
00:07 - multiple columns into one now in my last
00:10 - video on updating rows and columns that
00:12 - one was pretty long but this one should
00:14 - be a lot shorter now I'd like to mention
00:16 - that we do have a sponsor for the series
00:18 - of videos and that is brilliant so I
00:20 - really want to thank brilliant for
00:21 - sponsoring this series and it would be
00:23 - great if you all could check them out
00:24 - using the link in the description
00:25 - section below and support the sponsors
00:27 - and I'll talk more about their services
00:28 - in just a bit so with that said let's go
00:30 - ahead and get started now like I said in
00:33 - the last video we saw how to update
00:35 - information within our rows and columns
00:37 - now we're gonna see how we can add and
00:39 - remove rows and columns first let's look
00:42 - at adding columns now adding columns is
00:44 - going to be pretty easy for us because
00:45 - it's basically the same thing that we
00:47 - did when we were updating values we can
00:49 - simply create a column and pass in a
00:52 - series of values that we want that
00:54 - column to have so I currently have my
00:56 - snippets file open here that we've seen
00:58 - in previous videos so that we can see
01:00 - what this looks like on a smaller data
01:01 - set and as usual if you want to follow
01:03 - along then I'll have links to the code
01:06 - and the notebooks and the data that I'm
01:08 - using in this series in the description
01:11 - section below so for example let's say
01:13 - that we wanted to combine our first name
01:15 - and last name column into a single
01:17 - column and simply call that column first
01:20 - name so first in order to get a series
01:23 - of the first name and last name combined
01:25 - we could simply say when it come down
01:27 - here to the bottom we can simply grab
01:30 - that first column and then we can just
01:33 - add these together and I'm putting a
01:36 - space between there and then I will add
01:39 - in the last name and if I run this
01:41 - whoops and I missed my second plus
01:45 - symbol there now if I run this then we
01:47 - can see that we get the first name and
01:49 - then a space that's what this section is
01:51 - doing here and then the last name so now
01:55 - that we have this series of values here
01:57 - we can see that we have three values in
01:59 - order to add these to a new column with
02:01 - these values we can simply say DF and
02:05 - then the name of what we want our new
02:07 - column to be I'm going to call this full
02:10 - name and then I'm just going to copy
02:12 - this that gave us that series
02:13 - four and assign this full name column to
02:17 - that returned series so if I run that
02:20 - and then we look at our data frame then
02:23 - now we can see that our data frame here
02:24 - has this new column that is the first
02:27 - and the last name combined and again I'm
02:29 - using strings here but you could also
02:31 - create a new column using the apply
02:33 - method that we saw in the last video to
02:35 - have a new column for some mathematical
02:37 - analysis for another column in the data
02:40 - frame as well now I do want to point out
02:42 - that you can't use the dot notation when
02:45 - assigning a column like this we have to
02:47 - use the brackets like we did here in
02:51 - order to make these assignments because
02:53 - if you use dot notation then Python is
02:55 - going to think that you're trying to
02:57 - assign an attribute onto the data frame
02:59 - object and not a column okay so that's
03:04 - how we'd add a column to our data frames
03:06 - now let's look at removing columns so
03:09 - now that we have our full-name column
03:11 - let's say that we no longer need or once
03:13 - our first and last name columns so to
03:15 - remove these I can use the drop method
03:18 - on our data frame so it's as easy as
03:21 - just saying DF drop and now what do we
03:25 - want to drop we want to drop columns and
03:27 - the columns are going to be equal to and
03:29 - I'm gonna pass in a list because we want
03:32 - to delete multiple columns here so I
03:35 - want to delete the first column and the
03:37 - last column so if I run this then we can
03:41 - see that it returns a data frame without
03:43 - those columns and like we've seen before
03:45 - this just gives us a view of what our
03:47 - data frame would look like but it
03:49 - doesn't actually apply those changes if
03:51 - we're happy with those changes then we
03:53 - can set the in place argument to true so
03:55 - that it changes our data frame in place
03:57 - so I can come over here and just say in
04:01 - place equal to true within our drop
04:04 - method and if I run that and then we
04:06 - look at our data frame then now we can
04:09 - see that our data frame no longer has
04:11 - that first and last name column now if
04:14 - we wanted to reverse that process and
04:16 - split that full name column into two
04:18 - different columns then that's a little
04:20 - more complicated but still pretty simple
04:22 - so we've seen the string split method a
04:25 - few times in the series
04:27 - so far so let's run that on our
04:29 - full-name column and see what we get so
04:31 - I'm gonna say DF and access that full
04:36 - name column and now I'm going to use
04:38 - that string class on our series and then
04:42 - we will do a split and we'll just split
04:44 - this on a space now split splits on
04:48 - spaces by default but I just want to be
04:50 - explicit here so if we run this then the
04:54 - result of that split method is that we
04:56 - get the first name and the last name and
04:58 - a list so the first name is the first
05:01 - value and the last name is the second
05:03 - value now if we want to assign these to
05:05 - two different columns then we need to
05:08 - expand this list so that they're
05:10 - actually in two different columns so to
05:12 - do this in pandas we can use the expand
05:15 - argument so let's see what this looks
05:17 - like so this is within the split method
05:20 - here and we can just pass in another
05:23 - argument and say expand is equal to true
05:25 - so if I run this then we can see that
05:28 - the results are pretty similar but now
05:30 - everything that was in our list is split
05:33 - up into columns so now we have two
05:35 - columns here of those split results so
05:38 - now what we need to do is set two
05:40 - columns and our data frame to those two
05:42 - columns that were just returned so we
05:45 - can say I'm going to if we remember from
05:49 - earlier in the series if we want to
05:50 - access multiple columns then within the
05:53 - brackets we can pass in a list so we're
05:56 - going to have two pairs of brackets here
05:57 - the inner bracket is our list of columns
06:00 - so I want to add a first column and a
06:05 - last column and we're going to set that
06:08 - equal to this what we did here with the
06:12 - split method so if I run this then now
06:16 - our first and last column should have
06:18 - been assigned to these columns here so
06:21 - let's take a look at our data frame and
06:23 - see if that worked so we can see that
06:25 - now we added a first and a last column
06:29 - with the values that we returned up here
06:31 - okay so that's how we would add and
06:33 - remove columns so now let's look at
06:35 - adding and removing rows of data so
06:38 - there are a couple of different ways
06:39 - that we might want to add
06:40 - to our data frame so first we might just
06:43 - want to add a single row to our data
06:46 - frame of new data and second maybe we
06:49 - want to combine two data frames together
06:51 - into a single data frame by appending
06:54 - the rows of one to another so first
06:56 - let's look at adding a single row of
06:59 - data so we can do this with the append
07:01 - method so if I want to add a single row
07:04 - then I can just say DF dot append and
07:07 - now we can pass in our values here so
07:11 - I'm just gonna pass in a dictionary here
07:13 - and we'll pass in a first name of Tony
07:16 - so if I run this then we can see that we
07:19 - get an error now this is because this
07:22 - currently doesn't have an index now it
07:26 - can sometimes be difficult to read these
07:28 - pandas errors and figure out what the
07:30 - problem is
07:30 - but in this case it tells us exactly
07:33 - what to do it says down here at the
07:35 - bottom can only append a series if
07:37 - ignore index is equal to true or if the
07:40 - series has a name so let's just ignore
07:42 - the index and our existing data frame
07:44 - will automatically assign this new row
07:47 - and index itself so up here at the top
07:50 - we can simply pass in an argument of
07:53 - ignore underscore index and set that
07:57 - equal to true now if I run this then we
08:00 - can see that that worked we're no longer
08:02 - getting an error and also down here at
08:04 - the bottom we can see that this new name
08:06 - was appended now we only assign this row
08:10 - a first name value so we can see here
08:13 - that we assign that as Tony and all of
08:16 - the other column values are set to n/a
08:19 - in which is not a number which is used
08:21 - for missing values so you can pass in an
08:24 - entire series or a list of information
08:26 - there in order to add a single row of
08:30 - data of any information that you want
08:32 - now if we have a data frame that we'd
08:34 - like to append to our existing data
08:36 - frame then we can do that as well so let
08:39 - me create a new data frame here from our
08:41 - existing values up here at the top so
08:44 - I'm just going to scroll up here and I'm
08:45 - gonna grab our first dictionary here of
08:49 - the data that we originally created our
08:52 - data frame with and I'm going to
08:54 - modify this a bit so I'm going to just
08:57 - have this be two names here so I'm going
09:00 - to take out these third values and then
09:03 - we will go ahead and up these so update
09:06 - these so for the first name I'll do Tony
09:09 - and Steve and for the last name I'll do
09:13 - Stark and Rogers and for the email
09:17 - addresses let's say I'll do Iron Man At
09:21 - avenge comm and for the second one I'll
09:25 - do cap at avenge comm so now I'm going
09:29 - to create a new data frame here from
09:31 - this new dictionary now I'm going to
09:34 - call this D f2 so now I can just say PD
09:38 - dot data frame and pass in that people
09:42 - dictionary there and now we should have
09:44 - a second data frame okay so now let's
09:47 - say that we want to add this to our
09:49 - existing data frame so one way we can do
09:52 - this is to simply append the one data
09:54 - frame to the other now these have
09:57 - conflicting indexes and they also have
10:00 - columns that are not in the same order
10:02 - so again we're going to want to ignore
10:05 - the indexes when appending these so that
10:07 - they are assigned indexes properly so
10:10 - I'm going to say D F dot append and I'm
10:13 - going to pass in d f2 so that it appends
10:16 - it to our original data frame and then
10:19 - I'm going to say ignore underscore index
10:22 - is equal to true and if I run this here
10:26 - then we can see down here at the bottom
10:27 - that it added these new rows now if you
10:31 - got a warning here then the reason for
10:33 - this is because we didn't pass in all of
10:36 - the columns in the same order when
10:37 - appending these so it's giving us a
10:39 - warning here that there are different
10:41 - ways that it could have sorted the
10:43 - columns so don't worry too much about
10:45 - that but in the future version of pandas
10:48 - it's going to set the sort to false by
10:51 - default and actually pandas version one
10:53 - was just released as I was recording
10:55 - this series so this may have already
10:57 - been done but we can ignore this for now
10:59 - but if we wanted to then we could pass
11:02 - in the value of sort equal to false and
11:05 - get rid of this warning so if I went
11:07 - back up here
11:08 - I passed an sort is equal to false and
11:11 - also when I run this it's no longer
11:13 - going to sort these columns here so if I
11:16 - run this then we can see that we no
11:17 - longer get that warning and now it's not
11:20 - sorting the columns anymore now unlike
11:23 - the drop method if we want to make these
11:25 - changes permanent then we don't have an
11:27 - in-place method to use instead we'd have
11:29 - to just set the data frame to this
11:31 - returned data frame by copying this and
11:35 - then we can say DF is equal to and then
11:39 - just pass in that returned data frame
11:41 - there so if I run that then we look at
11:43 - our original data frame then we can see
11:45 - that with those rows were added on there
11:47 - now I'll be honest some of you might
11:49 - want to ask in the comment section below
11:51 - why some of these have an in-place
11:53 - argument and others don't but honestly
11:56 - I'm not really sure I'm sure there's a
11:58 - reason but I'd have to do some more
11:59 - digging around to find out exactly why
12:01 - but this append method doesn't have an
12:03 - in-place argument like the drop method
12:05 - has so we have to do it this way okay so
12:08 - lastly let's look at removing rows so
12:11 - let's say that you're an Ironman fan and
12:14 - you want to remove Steve Rogers here
12:16 - from our data frame now we can do that
12:18 - in almost the same way that we dropped
12:20 - our columns but instead of specifying
12:22 - the columns that we want to drop where
12:24 - you can simply pass in the indexes that
12:26 - we want to drop so I can come down here
12:28 - and say DF drop and we can see here on
12:33 - the far left if you've watched my video
12:34 - on indexes this has an index of four so
12:38 - let's just say we want to drop an index
12:41 - to of four so if I run this and we can
12:44 - see that we still have Iron Man and Tony
12:46 - Stark here but we no longer have Steve
12:48 - Rogers so that fourth index was deleted
12:51 - and again if you want to actually apply
12:53 - that to the data frame then you'll need
12:56 - to set the in place argument to true now
12:59 - you might want to do something a little
13:00 - more complicated and drop rows using a
13:02 - conditional now I'd probably do this
13:05 - using Lok like we saw in the previous
13:07 - video where we were learning about
13:08 - filtering data from our data frame but
13:11 - we can also do this using drop so if I
13:14 - wanted to drop all of the rows where the
13:16 - last name is equal to dou so we have two
13:19 - of those values here
13:21 - then I can pass in the indexes of that
13:24 - filter so let me show you what this
13:26 - means and it won't be as complicated so
13:29 - I can say DF drop and now I'm gonna say
13:32 - index is equal to and now I'm gonna put
13:35 - in my conditional so if you remember
13:38 - from the filtering video we can actually
13:41 - pass the conditional here inside of our
13:44 - brackets so now I can say okay I want a
13:48 - conditional where the last name of that
13:51 - column equals equals doh now the only
13:56 - difference here is that we have a
13:58 - conditional here but we want the indexes
14:01 - since we're saying index is equal to so
14:03 - just here at the end I'm gonna use this
14:06 - method and just say dot index so if I
14:10 - run this then we can see that it removed
14:13 - those values with the last name of DOE
14:15 - now like I said in that filtering video
14:17 - I don't really like all of this being
14:19 - bunched up together because I think that
14:21 - it's hard to read and you always want
14:23 - your code to be easy to read by other
14:25 - developers
14:26 - so I would pull the conditional out into
14:28 - its own variable and instead I would say
14:31 - something like this I would say filt
14:34 - for filter is equal to and then I'll
14:36 - just grab our conditional here and cut
14:39 - that out and paste that here and now we
14:42 - can say that we want our filter applied
14:46 - to that data frame and then grab the
14:48 - index of that so if I run this then we
14:52 - can see that that gives us the exact
14:53 - same result but that's a little bit
14:55 - easier to read okay so that's been an
14:58 - overview of adding and removing rows and
15:00 - columns from our data frames now before
15:03 - we end here I'd like to mention the
15:04 - sponsor of this video and that sponsor
15:07 - is brilliant so in this series we've
15:09 - been learning about pandas and how to
15:11 - analyze data and python and brilliant
15:13 - would be an excellent way to supplement
15:14 - what you learn here with their hands-on
15:16 - courses they have some excellent courses
15:18 - and lessons that do a deep dive on how
15:20 - to think about and analyze data
15:21 - correctly for data analysis fundamentals
15:24 - I would really recommend checking out
15:26 - their statistics course which shows you
15:27 - how to analyze graphs and determine
15:29 - significance in the data and I would
15:31 - also recommend their machine learning
15:32 - course which takes data analysis to a
15:34 - new
15:35 - while you learn about the techniques
15:37 - being used that allow machines to make
15:39 - decisions where there's just too many
15:40 - variables for a human to consider so to
15:43 - support my channel and learn more about
15:44 - brilliant you can go to brilliant org
15:46 - Forge slash CMS to sign up for free and
15:49 - also the first 200 people they go to
15:51 - that link will get 20% off the annual
15:54 - premium subscription and you can find
15:56 - that link in the description section
15:57 - below
15:58 - again that's brilliant org forge slash
16:01 - CMS okay so I think that's gonna do it
16:04 - for this pandas video I hope you feel
16:06 - like you got a good idea for how to add
16:08 - and remove columns and rows from your
16:10 - data frame and feel comfortable doing
16:12 - that in the next video we'll be learning
16:14 - about different ways to sort our data
16:16 - but if anyone has any questions about
16:18 - what we've covered in this video then
16:20 - feel free to ask in the comment section
16:21 - below and I'll do my best to answer
16:23 - those and if you enjoy these tutorials
16:25 - and would like to support them then
16:26 - there are several ways you can do that
16:27 - the easiest way is to simply like the
16:29 - video and give it a thumbs up and also
16:31 - it's a huge help to share these videos
16:32 - with anyone who you think would find
16:33 - them useful and if you have the means
16:35 - you can contribute through patreon and
16:36 - there's a link to that page and a
16:37 - description section below be sure to
16:39 - subscribe for future videos and thank
16:41 - you all for watching
16:53 - you

Cleaned transcript:

hey there how's it going everybody in this video we're going to be learning how to add and remove columns from our data frames we'll also take a look at how we can combine information from multiple columns into one now in my last video on updating rows and columns that one was pretty long but this one should be a lot shorter now I'd like to mention that we do have a sponsor for the series of videos and that is brilliant so I really want to thank brilliant for sponsoring this series and it would be great if you all could check them out using the link in the description section below and support the sponsors and I'll talk more about their services in just a bit so with that said let's go ahead and get started now like I said in the last video we saw how to update information within our rows and columns now we're gonna see how we can add and remove rows and columns first let's look at adding columns now adding columns is going to be pretty easy for us because it's basically the same thing that we did when we were updating values we can simply create a column and pass in a series of values that we want that column to have so I currently have my snippets file open here that we've seen in previous videos so that we can see what this looks like on a smaller data set and as usual if you want to follow along then I'll have links to the code and the notebooks and the data that I'm using in this series in the description section below so for example let's say that we wanted to combine our first name and last name column into a single column and simply call that column first name so first in order to get a series of the first name and last name combined we could simply say when it come down here to the bottom we can simply grab that first column and then we can just add these together and I'm putting a space between there and then I will add in the last name and if I run this whoops and I missed my second plus symbol there now if I run this then we can see that we get the first name and then a space that's what this section is doing here and then the last name so now that we have this series of values here we can see that we have three values in order to add these to a new column with these values we can simply say DF and then the name of what we want our new column to be I'm going to call this full name and then I'm just going to copy this that gave us that series four and assign this full name column to that returned series so if I run that and then we look at our data frame then now we can see that our data frame here has this new column that is the first and the last name combined and again I'm using strings here but you could also create a new column using the apply method that we saw in the last video to have a new column for some mathematical analysis for another column in the data frame as well now I do want to point out that you can't use the dot notation when assigning a column like this we have to use the brackets like we did here in order to make these assignments because if you use dot notation then Python is going to think that you're trying to assign an attribute onto the data frame object and not a column okay so that's how we'd add a column to our data frames now let's look at removing columns so now that we have our fullname column let's say that we no longer need or once our first and last name columns so to remove these I can use the drop method on our data frame so it's as easy as just saying DF drop and now what do we want to drop we want to drop columns and the columns are going to be equal to and I'm gonna pass in a list because we want to delete multiple columns here so I want to delete the first column and the last column so if I run this then we can see that it returns a data frame without those columns and like we've seen before this just gives us a view of what our data frame would look like but it doesn't actually apply those changes if we're happy with those changes then we can set the in place argument to true so that it changes our data frame in place so I can come over here and just say in place equal to true within our drop method and if I run that and then we look at our data frame then now we can see that our data frame no longer has that first and last name column now if we wanted to reverse that process and split that full name column into two different columns then that's a little more complicated but still pretty simple so we've seen the string split method a few times in the series so far so let's run that on our fullname column and see what we get so I'm gonna say DF and access that full name column and now I'm going to use that string class on our series and then we will do a split and we'll just split this on a space now split splits on spaces by default but I just want to be explicit here so if we run this then the result of that split method is that we get the first name and the last name and a list so the first name is the first value and the last name is the second value now if we want to assign these to two different columns then we need to expand this list so that they're actually in two different columns so to do this in pandas we can use the expand argument so let's see what this looks like so this is within the split method here and we can just pass in another argument and say expand is equal to true so if I run this then we can see that the results are pretty similar but now everything that was in our list is split up into columns so now we have two columns here of those split results so now what we need to do is set two columns and our data frame to those two columns that were just returned so we can say I'm going to if we remember from earlier in the series if we want to access multiple columns then within the brackets we can pass in a list so we're going to have two pairs of brackets here the inner bracket is our list of columns so I want to add a first column and a last column and we're going to set that equal to this what we did here with the split method so if I run this then now our first and last column should have been assigned to these columns here so let's take a look at our data frame and see if that worked so we can see that now we added a first and a last column with the values that we returned up here okay so that's how we would add and remove columns so now let's look at adding and removing rows of data so there are a couple of different ways that we might want to add to our data frame so first we might just want to add a single row to our data frame of new data and second maybe we want to combine two data frames together into a single data frame by appending the rows of one to another so first let's look at adding a single row of data so we can do this with the append method so if I want to add a single row then I can just say DF dot append and now we can pass in our values here so I'm just gonna pass in a dictionary here and we'll pass in a first name of Tony so if I run this then we can see that we get an error now this is because this currently doesn't have an index now it can sometimes be difficult to read these pandas errors and figure out what the problem is but in this case it tells us exactly what to do it says down here at the bottom can only append a series if ignore index is equal to true or if the series has a name so let's just ignore the index and our existing data frame will automatically assign this new row and index itself so up here at the top we can simply pass in an argument of ignore underscore index and set that equal to true now if I run this then we can see that that worked we're no longer getting an error and also down here at the bottom we can see that this new name was appended now we only assign this row a first name value so we can see here that we assign that as Tony and all of the other column values are set to n/a in which is not a number which is used for missing values so you can pass in an entire series or a list of information there in order to add a single row of data of any information that you want now if we have a data frame that we'd like to append to our existing data frame then we can do that as well so let me create a new data frame here from our existing values up here at the top so I'm just going to scroll up here and I'm gonna grab our first dictionary here of the data that we originally created our data frame with and I'm going to modify this a bit so I'm going to just have this be two names here so I'm going to take out these third values and then we will go ahead and up these so update these so for the first name I'll do Tony and Steve and for the last name I'll do Stark and Rogers and for the email addresses let's say I'll do Iron Man At avenge comm and for the second one I'll do cap at avenge comm so now I'm going to create a new data frame here from this new dictionary now I'm going to call this D f2 so now I can just say PD dot data frame and pass in that people dictionary there and now we should have a second data frame okay so now let's say that we want to add this to our existing data frame so one way we can do this is to simply append the one data frame to the other now these have conflicting indexes and they also have columns that are not in the same order so again we're going to want to ignore the indexes when appending these so that they are assigned indexes properly so I'm going to say D F dot append and I'm going to pass in d f2 so that it appends it to our original data frame and then I'm going to say ignore underscore index is equal to true and if I run this here then we can see down here at the bottom that it added these new rows now if you got a warning here then the reason for this is because we didn't pass in all of the columns in the same order when appending these so it's giving us a warning here that there are different ways that it could have sorted the columns so don't worry too much about that but in the future version of pandas it's going to set the sort to false by default and actually pandas version one was just released as I was recording this series so this may have already been done but we can ignore this for now but if we wanted to then we could pass in the value of sort equal to false and get rid of this warning so if I went back up here I passed an sort is equal to false and also when I run this it's no longer going to sort these columns here so if I run this then we can see that we no longer get that warning and now it's not sorting the columns anymore now unlike the drop method if we want to make these changes permanent then we don't have an inplace method to use instead we'd have to just set the data frame to this returned data frame by copying this and then we can say DF is equal to and then just pass in that returned data frame there so if I run that then we look at our original data frame then we can see that with those rows were added on there now I'll be honest some of you might want to ask in the comment section below why some of these have an inplace argument and others don't but honestly I'm not really sure I'm sure there's a reason but I'd have to do some more digging around to find out exactly why but this append method doesn't have an inplace argument like the drop method has so we have to do it this way okay so lastly let's look at removing rows so let's say that you're an Ironman fan and you want to remove Steve Rogers here from our data frame now we can do that in almost the same way that we dropped our columns but instead of specifying the columns that we want to drop where you can simply pass in the indexes that we want to drop so I can come down here and say DF drop and we can see here on the far left if you've watched my video on indexes this has an index of four so let's just say we want to drop an index to of four so if I run this and we can see that we still have Iron Man and Tony Stark here but we no longer have Steve Rogers so that fourth index was deleted and again if you want to actually apply that to the data frame then you'll need to set the in place argument to true now you might want to do something a little more complicated and drop rows using a conditional now I'd probably do this using Lok like we saw in the previous video where we were learning about filtering data from our data frame but we can also do this using drop so if I wanted to drop all of the rows where the last name is equal to dou so we have two of those values here then I can pass in the indexes of that filter so let me show you what this means and it won't be as complicated so I can say DF drop and now I'm gonna say index is equal to and now I'm gonna put in my conditional so if you remember from the filtering video we can actually pass the conditional here inside of our brackets so now I can say okay I want a conditional where the last name of that column equals equals doh now the only difference here is that we have a conditional here but we want the indexes since we're saying index is equal to so just here at the end I'm gonna use this method and just say dot index so if I run this then we can see that it removed those values with the last name of DOE now like I said in that filtering video I don't really like all of this being bunched up together because I think that it's hard to read and you always want your code to be easy to read by other developers so I would pull the conditional out into its own variable and instead I would say something like this I would say filt for filter is equal to and then I'll just grab our conditional here and cut that out and paste that here and now we can say that we want our filter applied to that data frame and then grab the index of that so if I run this then we can see that that gives us the exact same result but that's a little bit easier to read okay so that's been an overview of adding and removing rows and columns from our data frames now before we end here I'd like to mention the sponsor of this video and that sponsor is brilliant so in this series we've been learning about pandas and how to analyze data and python and brilliant would be an excellent way to supplement what you learn here with their handson courses they have some excellent courses and lessons that do a deep dive on how to think about and analyze data correctly for data analysis fundamentals I would really recommend checking out their statistics course which shows you how to analyze graphs and determine significance in the data and I would also recommend their machine learning course which takes data analysis to a new while you learn about the techniques being used that allow machines to make decisions where there's just too many variables for a human to consider so to support my channel and learn more about brilliant you can go to brilliant org Forge slash CMS to sign up for free and also the first 200 people they go to that link will get 20% off the annual premium subscription and you can find that link in the description section below again that's brilliant org forge slash CMS okay so I think that's gonna do it for this pandas video I hope you feel like you got a good idea for how to add and remove columns and rows from your data frame and feel comfortable doing that in the next video we'll be learning about different ways to sort our data but if anyone has any questions about what we've covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page and a description section below be sure to subscribe for future videos and thank you all for watching you
