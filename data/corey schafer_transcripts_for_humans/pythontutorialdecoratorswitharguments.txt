With timestamps:

00:00 - hey there how's it going everybody now
00:01 - this is going to be a pretty quick video
00:03 - and in this video we're going to be
00:04 - going over how we create decorators that
00:06 - accept arguments now several people had
00:08 - requested this after I put out my
00:10 - decorators tutorial video and in that
00:12 - video I go over decorators in depth but
00:14 - one scenario that I didn't go over was
00:16 - creating a decorator that takes
00:18 - arguments now this is something that
00:20 - you'll see from time to time so for
00:22 - example if I look at the hello world
00:24 - application for a flask website now if
00:27 - you've never used flask then it's not a
00:29 - big deal I just pulled down their hello
00:30 - world application so that we could see
00:32 - an example of a decorator that takes
00:34 - arguments now we can see here that their
00:37 - routes are defined using these acts
00:40 - route decorators and the string gets
00:43 - passed in is the URL path and there's an
00:45 - example here with the about page as well
00:48 - this argument is the URL path to that
00:51 - decorator so this is something that
00:53 - you'll see from time to time and it's
00:54 - useful to know how to do this so let's
00:56 - go ahead and see how it's done now I
00:58 - have a very simple decorator example
01:01 - pulled up here which is very similar to
01:03 - the one from the decorator tutorial
01:05 - video that I've done before now just a
01:07 - quick recap of what's going on here now
01:09 - what we have is this display info
01:12 - function that takes two arguments name
01:15 - and age and it's being decorated with
01:17 - this decorator function and up here with
01:21 - this decorator function we can see that
01:23 - it takes an argument that is the
01:25 - original function and then nested within
01:28 - our decorator function we have this
01:30 - wrapper function and that just takes any
01:32 - number of arguments or keyword arguments
01:35 - now within our wrapper function we are
01:37 - executing some code before our original
01:40 - function executes so in this case we're
01:43 - just printing out a line that said
01:44 - executed before original function and
01:47 - then we are executing our original
01:49 - function and saving it to this result
01:52 - variable and then after that we're
01:55 - executing some code after our original
01:58 - function and in this case it's just
02:00 - another line that says executed after
02:01 - the original function and then within
02:03 - the wrapper we are returning the result
02:06 - of that execution and then lastly here
02:09 - outside of our wrapper function now we
02:11 - are returning
02:13 - that wrapper function of waiting to be
02:15 - executed so if any of that was overly
02:17 - confusing then you might want to go back
02:20 - and watch that decorator tutorial just
02:22 - to get a refresher of what's going on
02:24 - okay so let's go ahead and run this code
02:27 - as it is now so we can see down here we
02:29 - ran display info twice with two
02:32 - different names and two different ages
02:34 - now every time we ran display info our
02:38 - decorators also added the functionality
02:40 - of printing out a line before and a line
02:43 - after that wrapped function now this is
02:46 - something that we've seen before in the
02:48 - last video so now let's go ahead and get
02:50 - our decorator function to accept
02:52 - arguments so for this example let's say
02:55 - that I wanted a customizable prefix to
02:58 - all of these print statements within the
03:01 - wrapper now this would be a good
03:03 - candidate for an argument to the
03:05 - decorator the argument that we pass in
03:07 - will be that prefix now in order to do
03:10 - this we're just going to add another
03:11 - outer layer to our decorator so I'm
03:15 - going to call this a function a prefix
03:18 - decorator and now I'm going to have this
03:21 - take an argument and I'm going to call
03:22 - that argument prefix and then I'm going
03:25 - to nest one more level deep and put that
03:29 - decorator function inside that prefix
03:31 - decorator now just a warning this is
03:33 - going to get even harder to keep track
03:35 - of everything and now that this is
03:37 - nested another level let's go ahead and
03:39 - see what this looks like so now
03:40 - everything that's nested within here has
03:43 - access to this prefix argument here so
03:46 - let's just add this prefix to the
03:49 - beginning of both of our print
03:51 - statements like we wanted so I'm going
03:53 - to go ahead and put that prefix in there
03:55 - and just put a comma there and it will
03:57 - add the space in automatically and now
03:59 - lastly since this is nested one more
04:01 - level now we have to do another return
04:05 - so this time we're going to return our
04:07 - decorator function uh neck's acute 'add
04:10 - so I know that this multiple nest of
04:13 - functions can get really confusing
04:14 - really fast but all we've done here is
04:16 - add one more layer to our existing
04:19 - decorator that accepts whatever
04:20 - arguments we want and then use those
04:23 - arguments somewhere within our decorator
04:25 - so now when we get
04:27 - radar functions we use the outside
04:30 - function here that takes the argument so
04:32 - I'm going to replace this decorator down
04:35 - here with prefix decorator so now we can
04:38 - pass in our argument to this decorator
04:41 - so in this case it's the prefix that we
04:44 - want added before our print statements
04:46 - here so I'll just start off by saying
04:49 - testing with a colon there so now if I
04:53 - run that then you can see that now we
04:56 - have that testing prefix before our
05:00 - print statements in our wrapper function
05:02 - and you can change this any time that
05:05 - you want so now if I want that to say
05:07 - log instead and then I'll rerun that
05:09 - then you can see that now log is that
05:11 - prefix ok so I think that about does it
05:13 - for this video now this probably isn't
05:15 - something that very many people will
05:17 - ever need to do but when you do need it
05:19 - it's nice to know and especially when
05:22 - you see it in code like you know in the
05:24 - flask examples and other frameworks then
05:26 - it'll be something nice to know at least
05:29 - how it works so hopefully after this
05:31 - video it makes sense for how you go
05:33 - about doing something like that but if
05:34 - anyone does have any questions about
05:36 - what we covered in the video then feel
05:38 - free to ask in the comment section below
05:39 - and I'll do my best to answer those now
05:41 - if you enjoy these tutorials and would
05:42 - like to support them there are several
05:44 - ways you can do that the easiest way is
05:46 - to simply like the video and give it a
05:47 - thumbs up and also it's a huge help to
05:49 - share these videos with anyone who you
05:50 - think would find them useful and if you
05:52 - have the means and you can contribute
05:53 - through patreon and there's the link to
05:55 - that page in the description section
05:56 - below be sure to subscribe for future
05:58 - videos and thank you all for watching
06:03 - you

Cleaned transcript:

hey there how's it going everybody now this is going to be a pretty quick video and in this video we're going to be going over how we create decorators that accept arguments now several people had requested this after I put out my decorators tutorial video and in that video I go over decorators in depth but one scenario that I didn't go over was creating a decorator that takes arguments now this is something that you'll see from time to time so for example if I look at the hello world application for a flask website now if you've never used flask then it's not a big deal I just pulled down their hello world application so that we could see an example of a decorator that takes arguments now we can see here that their routes are defined using these acts route decorators and the string gets passed in is the URL path and there's an example here with the about page as well this argument is the URL path to that decorator so this is something that you'll see from time to time and it's useful to know how to do this so let's go ahead and see how it's done now I have a very simple decorator example pulled up here which is very similar to the one from the decorator tutorial video that I've done before now just a quick recap of what's going on here now what we have is this display info function that takes two arguments name and age and it's being decorated with this decorator function and up here with this decorator function we can see that it takes an argument that is the original function and then nested within our decorator function we have this wrapper function and that just takes any number of arguments or keyword arguments now within our wrapper function we are executing some code before our original function executes so in this case we're just printing out a line that said executed before original function and then we are executing our original function and saving it to this result variable and then after that we're executing some code after our original function and in this case it's just another line that says executed after the original function and then within the wrapper we are returning the result of that execution and then lastly here outside of our wrapper function now we are returning that wrapper function of waiting to be executed so if any of that was overly confusing then you might want to go back and watch that decorator tutorial just to get a refresher of what's going on okay so let's go ahead and run this code as it is now so we can see down here we ran display info twice with two different names and two different ages now every time we ran display info our decorators also added the functionality of printing out a line before and a line after that wrapped function now this is something that we've seen before in the last video so now let's go ahead and get our decorator function to accept arguments so for this example let's say that I wanted a customizable prefix to all of these print statements within the wrapper now this would be a good candidate for an argument to the decorator the argument that we pass in will be that prefix now in order to do this we're just going to add another outer layer to our decorator so I'm going to call this a function a prefix decorator and now I'm going to have this take an argument and I'm going to call that argument prefix and then I'm going to nest one more level deep and put that decorator function inside that prefix decorator now just a warning this is going to get even harder to keep track of everything and now that this is nested another level let's go ahead and see what this looks like so now everything that's nested within here has access to this prefix argument here so let's just add this prefix to the beginning of both of our print statements like we wanted so I'm going to go ahead and put that prefix in there and just put a comma there and it will add the space in automatically and now lastly since this is nested one more level now we have to do another return so this time we're going to return our decorator function uh neck's acute 'add so I know that this multiple nest of functions can get really confusing really fast but all we've done here is add one more layer to our existing decorator that accepts whatever arguments we want and then use those arguments somewhere within our decorator so now when we get radar functions we use the outside function here that takes the argument so I'm going to replace this decorator down here with prefix decorator so now we can pass in our argument to this decorator so in this case it's the prefix that we want added before our print statements here so I'll just start off by saying testing with a colon there so now if I run that then you can see that now we have that testing prefix before our print statements in our wrapper function and you can change this any time that you want so now if I want that to say log instead and then I'll rerun that then you can see that now log is that prefix ok so I think that about does it for this video now this probably isn't something that very many people will ever need to do but when you do need it it's nice to know and especially when you see it in code like you know in the flask examples and other frameworks then it'll be something nice to know at least how it works so hopefully after this video it makes sense for how you go about doing something like that but if anyone does have any questions about what we covered in the video then feel free to ask in the comment section below and I'll do my best to answer those now if you enjoy these tutorials and would like to support them there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means and you can contribute through patreon and there's the link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
