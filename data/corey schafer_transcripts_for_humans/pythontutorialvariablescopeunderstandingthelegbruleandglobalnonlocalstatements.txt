With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - about variable scope in Python now
00:04 - understanding how the scope works is one
00:06 - of the more important concepts when
00:08 - working with the language because it's
00:09 - something that we're going to need to
00:10 - understand in just about every program
00:12 - that we write and understanding this
00:14 - also helps a lot when a variable may not
00:16 - have the value that we expected and we
00:18 - need to debug our code now if you don't
00:20 - know what I mean by variable scope now
00:22 - this is what determines where our
00:24 - variables can be accessed from within
00:25 - the program and what values those
00:28 - variables hold in different contexts so
00:30 - let's go ahead and look at some examples
00:31 - to get a better understanding of this so
00:34 - there's a common abbreviation for
00:35 - understanding the scoping rules within
00:37 - Python and that abbreviation is le g/b
00:41 - and this stands for local enclosing
00:44 - global and built-in now the local is
00:48 - which are variables defined within a
00:51 - function now in closing our variables in
00:54 - the local scope of enclosing functions
00:57 - and I'm going to go over examples of all
00:58 - these in just a second and a global are
01:01 - variables defined at the top level of a
01:03 - module or explicitly declared global
01:06 - using the global keyword and the
01:08 - built-ins are just names that are pre
01:10 - assigned in Python now the reason that
01:13 - the abbreviation is in this order is
01:15 - because this is the order that
01:16 - determines what a variable is assigned
01:18 - to so Python first checks the variables
01:21 - in the local scope and the enclosing
01:23 - scope and the global and then lastly the
01:25 - built-ins now we're going to look at all
01:27 - these in this video but instead of going
01:29 - in this exact order let's first start
01:31 - off with the global and local scope
01:33 - because these are probably the most
01:35 - commonly confused so let's say that I
01:37 - have a python module here where i simply
01:40 - set a variable x equal to a string
01:43 - global x and let me go ahead and just
01:46 - make this text a little bit bigger here
01:48 - okay now the variable X here is a global
01:51 - variable because it is in the main body
01:55 - of our file so now let's make a function
02:00 - here and I'll just call this test and
02:02 - within test I'm going to create a
02:05 - variable Y and I'm going to set this
02:08 - equal to the string local Y now this Y
02:12 - variable here is a
02:13 - local variable and it's local to this
02:15 - test function so if I were to print out
02:19 - why and then outside of this function
02:24 - run that function now you can see at the
02:26 - bottom here that prints out local Y so
02:29 - Python use that le GB rule when I print
02:32 - it out that Y variable and it said okay
02:34 - so first I'm going to check if I have Y
02:37 - and my local scope which our variables
02:40 - that are defined within the function and
02:42 - it found that local Y variable and
02:44 - printed it out so now within this test
02:46 - function I'm going to comment out that
02:48 - print Y and instead I'm going to also
02:52 - print X here now I'm printing X from
02:54 - within the test function so let's try to
02:57 - imagine what's going on here if I do
02:59 - this so if I go ahead and run this then
03:02 - you can see that even though we're
03:04 - within our test function it's still
03:06 - printed out that global X and the reason
03:08 - that it printed out global X is because
03:11 - it said okay do I have an X variable in
03:14 - my local scope which means that it's
03:16 - defined within this test function so it
03:19 - doesn't so now that it doesn't find it
03:22 - there it says do I have anything in my
03:24 - enclosing scope and we haven't gone over
03:25 - enclosing scope yet but we will in just
03:27 - a minute but I'll just tell you that it
03:29 - doesn't find an X and then enclosing
03:31 - scope either and then it checks if it
03:33 - has an X in its global scope and it does
03:36 - so it prints out the value that it found
03:38 - in that global scope which was global X
03:40 - but this doesn't go both ways though so
03:43 - for example if I come down here after my
03:45 - test function and I say print Y and run
03:50 - this now you can see that we got an
03:52 - error here and it says that name Y is
03:54 - not fine now if you're new to Python
03:56 - then you might think while I ran the
03:58 - test function here which should have set
04:01 - that Y variable and now I'm printing the
04:03 - Y variable here but the Y variable
04:05 - doesn't live outside of that test
04:07 - function when we print this Y variable
04:09 - out here it doesn't find a Y variable
04:12 - and it's local scope enclosing scope
04:14 - global or built-in so then it throws
04:16 - that name error okay so now instead of
04:18 - printing this Y from outside the test
04:20 - function now let's print that X variable
04:23 - and let me save that and run it so now
04:25 - you can see that sees that X global
04:27 - variable from within the test function
04:28 - and from without okay so now within the
04:32 - test function here let's change this Y
04:36 - variable here from Y to X and inside
04:40 - here I'm going to say local X and I'm
04:42 - going to save that okay so now before I
04:44 - run this it might not be obvious what
04:47 - this will print out so let's go ahead
04:49 - and run it so when I run that you can
04:52 - see that it ran the test function here
04:55 - came in and printed out this local X and
04:58 - then this it comes out and prints this X
05:02 - after the test function and it prints a
05:04 - global X now some people might think
05:06 - that the global X variable would have
05:08 - been overwritten here within the test
05:11 - function but that's not what happened so
05:13 - this just creates a local X variable
05:15 - here that lives only within this
05:17 - function and anything outside of that
05:19 - local scope still sees the global X
05:22 - variable okay but what if we actually
05:24 - wanted to set a new value for that
05:27 - global X variable from within this test
05:30 - function now to do this we can
05:32 - explicitly tell Python that the X
05:34 - variable we want to work with is the
05:36 - global X variable and to do this at the
05:38 - top we can just say global X and now it
05:42 - knows that we're working with that
05:43 - global X variable so now if I rerun this
05:46 - then you can see that it ran this test
05:49 - function came in and said that we're
05:50 - working with this global X variable set
05:52 - that the local x printed that out which
05:55 - was local X and since we explicitly told
05:58 - Python that we wanted to change that
06:00 - global X variable when we printed it
06:02 - even outside the function it still
06:04 - printed out this local x string now
06:06 - having this string set to local X is a
06:08 - little bit misleading now because that's
06:10 - no longer just in the local scope it's
06:13 - now in the global scope now one thing
06:15 - about this global statement is that we
06:17 - don't even have to have a global X
06:19 - variable defined before we set it here
06:21 - within our function so if I come up here
06:23 - and I comment out this global X variable
06:26 - and then rerun this code then you can
06:30 - see when we set this global X within the
06:32 - test function even though it didn't
06:33 - exist up here that it was still able to
06:36 - find that variable when we printed it
06:38 - out down here at the bottom now that
06:39 - only works when we're set
06:40 - that as a global variable so for example
06:43 - if I come in here and comment out that
06:45 - global X now we're just setting that
06:48 - locally so now if I run that then you
06:51 - can see that it printed out that local X
06:53 - from within the test function but this
06:55 - print statement outside of the test
06:57 - function threw an error because that
06:59 - global variable is no longer set now a
07:01 - lot of the times it can be tempting to
07:03 - learn something new and then overuse it
07:06 - I wanted to show you the global
07:08 - statement so that you know what it does
07:09 - and how to use it
07:11 - but honestly I don't think I've ever had
07:13 - the need to use this myself and if you
07:15 - find yourself using it often then you're
07:17 - probably doing something wrong so using
07:20 - the local scope of a function makes it
07:22 - easier to understand and easier to work
07:24 - with so you can imagine how difficult it
07:26 - would be to maintain our code if you use
07:29 - these global statements and had to worry
07:30 - about variables and your functions
07:32 - overriding values outside of that
07:34 - function so with the local scope being
07:37 - self-contained it allows us to not have
07:39 - to worry about what's going on outside
07:41 - of our function so I wanted to show you
07:43 - how the global statement works but be
07:46 - careful not to overuse it okay so now
07:48 - I'm going to go ahead and get rid of
07:50 - this global X statement here okay so now
07:54 - all of us have most likely seen
07:56 - functions that take arguments so let me
07:58 - add an argument here to this test
08:00 - function and I'll just call this
08:01 - variable Z now Z is going to be a local
08:06 - variable within this test function also
08:08 - so it's not going to exist outside of
08:11 - that function either it's just like when
08:13 - we set our local X variable within this
08:16 - function the only difference is that as
08:18 - a function parameter it can now be
08:21 - assigned values that are passed into our
08:24 - function so for example when I call my
08:26 - test function down here now I'm going to
08:29 - pass in local Z this string and that's
08:33 - going to set that local variable Z equal
08:37 - to this local Z string and so now within
08:40 - that function instead of printing out
08:42 - this X variable I'm going to print out Z
08:44 - and I'm just going to comment out this
08:46 - outside print statement here now if I
08:49 - run this then you can see that we passed
08:51 - in that local Z string when we
08:54 - see here it first looked in its local
08:56 - scope and Z is in its local scope and it
08:59 - found it there so it printed out that
09:01 - locals e-string
09:02 - and just to show you what it does if we
09:05 - try to print that outside of that
09:07 - function here I'm going to change this
09:09 - with print Z and if I run that and you
09:12 - can see that we got our name err name Z
09:15 - is not defined and that's because that
09:17 - sea variable is only local to that test
09:19 - function so now go ahead and comment out
09:21 - that and rerun it okay so now let's take
09:24 - a look at the built in scope now this
09:27 - one is pretty easy to understand because
09:29 - it's just names that are pre assigned in
09:32 - Python so for example min is a built-in
09:36 - function in Python that finds the
09:39 - smallest value of an iterable so for
09:42 - example I can use min by saying M equals
09:46 - min and I can pass in an iterable so in
09:49 - this case I'll just pass in 5 1 4 2 3
09:53 - and now I'm just going to print M below
09:58 - here and let me comment out where I'm
10:01 - running that test function now if I run
10:03 - that then you can see that it prints out
10:04 - 1 because 1 is the smallest value in
10:07 - that interval now we were able to use
10:09 - min here because it's a built-in
10:12 - function in Python so if we'd like to
10:15 - view the variables that are within the
10:18 - built-in scope then we can simply say
10:21 - import built-ins and then after we
10:25 - import that then I can just print out e
10:30 - I are on that built-ins module now dir
10:35 - just gets a list of the attributes of a
10:37 - given object so if I run that and then
10:40 - let me drag this up a little bit here
10:42 - you can see that it returns all of the
10:45 - built-ins here a lot of these are
10:47 - exceptions and error names then if we
10:50 - scroll down here then you can see some
10:54 - others that were more used to so we have
10:57 - like print and min and Max and int and
11:02 - list and range and a few others that
11:05 - you're probably familiar with
11:06 - now one thing that you want to be
11:08 - careful with as far as built-ins go is
11:10 - accidentally overriding them so this
11:13 - isn't something that Python prevents us
11:15 - from doing now there's reasons for this
11:18 - but basically they're just trusting us
11:20 - with having the power to do that so for
11:22 - example if I was to create a min
11:26 - function here so let me comment out that
11:28 - printed built-ins there so if I was to
11:32 - create a min function here and then I'm
11:35 - just going to put in a pass statement
11:37 - there so now before I run this I'm just
11:39 - going to comment out where I use that
11:42 - built-in min function here so now I'm
11:45 - going to run this and you can see that I
11:48 - don't get any errors but now if I try to
11:51 - use that built-in min function that
11:53 - worked just a second ago so I'm going to
11:55 - uncomment out that code and run that and
11:57 - you can see that it gets an error saying
12:00 - that men doesn't or min takes zero
12:03 - positional arguments but one was given
12:05 - now the reason for that is when we ran
12:09 - this min function here Python found our
12:12 - min function in the global scope before
12:14 - it fell back to the built-in scope so
12:17 - you have to be careful with that so if I
12:19 - change the name of my global min
12:21 - function here to something like my men
12:24 - and rerun that code then that now you
12:27 - can see that it works again because now
12:29 - it doesn't find men in that global scope
12:32 - and instead uses the built-in a min
12:36 - function just like we expected okay so
12:38 - now we're going to take a look at the e
12:40 - part of that le GB rule and that stands
12:43 - for enclosing now before we do that let
12:46 - me go ahead and clean up some of this
12:48 - other code here so I'm just going to
12:51 - comment out everything except for that
12:55 - global X and that print X there now the
12:58 - reason that we saved the enclosing scope
13:00 - for last is because it's easier to
13:03 - understand once we understand the local
13:05 - and global scope
13:06 - so the enclosing scope has to do with
13:09 - nested functions so let's say for
13:11 - example that I have a function within a
13:14 - function so I'm just going to say I'm
13:18 - going to make a function call
13:20 - outer here and within here I'm going to
13:22 - set an X variable equal to outer X and
13:27 - now I'm going to have a nested function
13:29 - so within the outer function I'm going
13:32 - to call this function inner and within
13:35 - inner I'm going to have another X
13:37 - variable and I'm going to set this equal
13:40 - to the string enter X and now I'm going
13:44 - to print out that X variable from within
13:47 - the inner function and now I'm going to
13:51 - run that inner function and now I'm
13:54 - going to print out the X variable from
13:57 - within the outer function and now to run
14:00 - all of this I can run that outer
14:03 - function in the global scope area so now
14:07 - I'm going to go ahead and run that okay
14:10 - so I know that there's a good bit going
14:12 - on there so let's go ahead and walk
14:13 - through this so we have our outer
14:16 - function here that we ran so we came in
14:19 - here and we set our local X variable now
14:22 - this variable is local to our outer
14:24 - function and now we come in here and run
14:28 - our inner function and within our inner
14:30 - function we set this X variable and this
14:34 - X variable is local to our inner
14:36 - function and then we print that X
14:39 - variable now it uses our rule le GB so
14:43 - it looked if it had any local X
14:46 - variables and it does it has this inner
14:48 - X here and that's why it printed out
14:51 - enter X here because that is in the
14:53 - local scope and then we printed out X in
14:56 - our outer function here and it looked if
14:59 - it had any local X variables and it does
15:02 - it has this outer X local variable and
15:05 - it printed out outer X here so now let's
15:08 - comment out where we set our X variable
15:10 - within our inner function so now if I
15:14 - rerun this and you can see that it
15:17 - printed out outer X both times and this
15:20 - is what the enclosing scope is so when
15:24 - we got to the point within our inner
15:26 - function where we printed out this X it
15:28 - first checked if it had any X variables
15:31 - local to that inner func
15:33 - and it doesn't because we just commented
15:36 - it out so then it checks if it has an X
15:38 - variable and the local scope of any
15:41 - enclosing functions so that's why it's
15:43 - called the enclosing scope so now we're
15:45 - looking in the local scope of any
15:48 - enclosing functions so our enclosure
15:50 - closing function here is the outer
15:52 - function and we do have an X variable in
15:56 - the local scope of that enclosing
15:57 - function so that's why it printed out
15:59 - outer X so you can see that that's kind
16:02 - of similar to our global and local scope
16:04 - example except now we're inside
16:06 - functions the same concept kind of
16:09 - applies when we set X and our inner
16:12 - function it doesn't affect the X
16:14 - variable in the outer function and just
16:16 - like with our global and local scopes if
16:19 - I come out here and comment out this
16:21 - outer X and then uncomment out that
16:24 - inner X and save that and run that then
16:27 - we get an error because this printed out
16:30 - X within our inner function because it
16:33 - has that local X variable within the
16:35 - inner function then when we try to print
16:37 - it outside of that function it checked
16:39 - its local scope but that's commented out
16:41 - and then it's enclosing scope which it
16:44 - doesn't have any enclosing functions and
16:46 - then global which there's no global x
16:48 - function and then built-ins so it threw
16:50 - an error there ok so now let's go ahead
16:52 - and set that back to how it was where we
16:54 - comment out that inner x and uncomment
16:58 - out that outer x and rerun that okay so
17:00 - when we looked at our global and local
17:02 - variables I showed you how you could use
17:04 - that global statement in order to
17:06 - explicitly tell Python that you wanted
17:09 - to work with the global X variable so
17:11 - you may be wondering if there's a way
17:13 - that you can do this with the enclosing
17:15 - scope variables as well and there is a
17:17 - way to do that so let's say within our
17:20 - inner function here that we wanted to
17:22 - actually change the X variable of our
17:25 - outer function now we shouldn't use
17:28 - global because global will affect the
17:30 - global scope in this case we use the
17:34 - non-local statement so up at the top
17:37 - here I'm going to atop of this inner
17:38 - function I'm going to say non-local X
17:41 - and save that now this will allow us to
17:44 - work with the local variables of enclose
17:46 - functions so in this case it means that
17:49 - we're now affecting this X variable of
17:51 - the outer function so now if i uncomment
17:55 - out that inner x and i rerun this and
17:58 - now you can see that it prints out enter
18:00 - X twice and that's because when we set
18:03 - our X here to enter X within our inner
18:07 - function we were actually affecting that
18:10 - local x of our enclosing function so it
18:13 - prints out inner X within this inner
18:16 - function and also when we print it out
18:18 - here it got overwritten here so now it
18:21 - prints out inner X twice now I can
18:24 - actually see the non-local statement
18:26 - being used more often than the global
18:28 - statement because non-local can be
18:31 - useful in order to change the state of
18:33 - closures and decorators and things like
18:35 - that
18:36 - now I'm not going to go into closures
18:37 - and decorators in this video but if
18:39 - you're interested then I do have a video
18:41 - on both of those topics and if you watch
18:44 - those then you could probably think of
18:46 - some use cases where using this
18:48 - non-local statement could be useful ok
18:50 - so now just to wrap all of this up let's
18:54 - remove this non-local statement here and
18:57 - let's uncomment out our global X
19:00 - variable here at the top and here at the
19:04 - bottom I'm going to uncomment out where
19:06 - we print out that global X variable so
19:09 - now if I was to run this
19:12 - we're simply setting an X variable in
19:15 - each of these scopes and then printing
19:17 - them out so now that we've gone over the
19:20 - LD GB rule then you should know exactly
19:23 - what would happen if I was to come in
19:26 - here and comment out where I set the X
19:29 - here within this inner function so if I
19:32 - run that and you can see that when we
19:35 - printed that it didn't find it in its
19:37 - local scope and instead fell back to
19:40 - that enclosing scope and if I was to
19:42 - comment out where I set the X here
19:44 - within this outer function and ran that
19:47 - then you can see that each time we
19:50 - printed all of those X variables then it
19:52 - doesn't find either of these and their
19:55 - local scopes or their enclosing scopes
19:57 - and instead falls back to that global
20:00 - scope
20:00 - in that global X string and if it didn't
20:03 - find anything in that global scope then
20:05 - it would look in that list of built-ins
20:07 - that we looked at earlier and if it
20:09 - doesn't find it there then an error is
20:11 - thrown and also after this video you
20:13 - should know how to use the global and
20:16 - non-local statements to change the
20:18 - values within those scopes if need be so
20:21 - I think that's going to do it for this
20:22 - video if you have any questions about
20:24 - what we covered then feel free to ask in
20:25 - the comment section below and I'll do my
20:27 - best to answer those if you all enjoy
20:29 - these tutorials and would like to
20:30 - support them then there are several ways
20:32 - you can do that the easiest way is to
20:33 - simply like the video and give it a
20:35 - thumbs up and also it's a huge help to
20:36 - share these videos with anyone who you
20:38 - think would find them useful and if you
20:40 - have the means then you can contribute
20:41 - through patreon and there's a link to
20:43 - that page in the description section
20:44 - below be sure to subscribe for future
20:46 - videos and thank you all for watching

Cleaned transcript:

hey there how's it going everybody in this video we're going to be learning about variable scope in Python now understanding how the scope works is one of the more important concepts when working with the language because it's something that we're going to need to understand in just about every program that we write and understanding this also helps a lot when a variable may not have the value that we expected and we need to debug our code now if you don't know what I mean by variable scope now this is what determines where our variables can be accessed from within the program and what values those variables hold in different contexts so let's go ahead and look at some examples to get a better understanding of this so there's a common abbreviation for understanding the scoping rules within Python and that abbreviation is le g/b and this stands for local enclosing global and builtin now the local is which are variables defined within a function now in closing our variables in the local scope of enclosing functions and I'm going to go over examples of all these in just a second and a global are variables defined at the top level of a module or explicitly declared global using the global keyword and the builtins are just names that are pre assigned in Python now the reason that the abbreviation is in this order is because this is the order that determines what a variable is assigned to so Python first checks the variables in the local scope and the enclosing scope and the global and then lastly the builtins now we're going to look at all these in this video but instead of going in this exact order let's first start off with the global and local scope because these are probably the most commonly confused so let's say that I have a python module here where i simply set a variable x equal to a string global x and let me go ahead and just make this text a little bit bigger here okay now the variable X here is a global variable because it is in the main body of our file so now let's make a function here and I'll just call this test and within test I'm going to create a variable Y and I'm going to set this equal to the string local Y now this Y variable here is a local variable and it's local to this test function so if I were to print out why and then outside of this function run that function now you can see at the bottom here that prints out local Y so Python use that le GB rule when I print it out that Y variable and it said okay so first I'm going to check if I have Y and my local scope which our variables that are defined within the function and it found that local Y variable and printed it out so now within this test function I'm going to comment out that print Y and instead I'm going to also print X here now I'm printing X from within the test function so let's try to imagine what's going on here if I do this so if I go ahead and run this then you can see that even though we're within our test function it's still printed out that global X and the reason that it printed out global X is because it said okay do I have an X variable in my local scope which means that it's defined within this test function so it doesn't so now that it doesn't find it there it says do I have anything in my enclosing scope and we haven't gone over enclosing scope yet but we will in just a minute but I'll just tell you that it doesn't find an X and then enclosing scope either and then it checks if it has an X in its global scope and it does so it prints out the value that it found in that global scope which was global X but this doesn't go both ways though so for example if I come down here after my test function and I say print Y and run this now you can see that we got an error here and it says that name Y is not fine now if you're new to Python then you might think while I ran the test function here which should have set that Y variable and now I'm printing the Y variable here but the Y variable doesn't live outside of that test function when we print this Y variable out here it doesn't find a Y variable and it's local scope enclosing scope global or builtin so then it throws that name error okay so now instead of printing this Y from outside the test function now let's print that X variable and let me save that and run it so now you can see that sees that X global variable from within the test function and from without okay so now within the test function here let's change this Y variable here from Y to X and inside here I'm going to say local X and I'm going to save that okay so now before I run this it might not be obvious what this will print out so let's go ahead and run it so when I run that you can see that it ran the test function here came in and printed out this local X and then this it comes out and prints this X after the test function and it prints a global X now some people might think that the global X variable would have been overwritten here within the test function but that's not what happened so this just creates a local X variable here that lives only within this function and anything outside of that local scope still sees the global X variable okay but what if we actually wanted to set a new value for that global X variable from within this test function now to do this we can explicitly tell Python that the X variable we want to work with is the global X variable and to do this at the top we can just say global X and now it knows that we're working with that global X variable so now if I rerun this then you can see that it ran this test function came in and said that we're working with this global X variable set that the local x printed that out which was local X and since we explicitly told Python that we wanted to change that global X variable when we printed it even outside the function it still printed out this local x string now having this string set to local X is a little bit misleading now because that's no longer just in the local scope it's now in the global scope now one thing about this global statement is that we don't even have to have a global X variable defined before we set it here within our function so if I come up here and I comment out this global X variable and then rerun this code then you can see when we set this global X within the test function even though it didn't exist up here that it was still able to find that variable when we printed it out down here at the bottom now that only works when we're set that as a global variable so for example if I come in here and comment out that global X now we're just setting that locally so now if I run that then you can see that it printed out that local X from within the test function but this print statement outside of the test function threw an error because that global variable is no longer set now a lot of the times it can be tempting to learn something new and then overuse it I wanted to show you the global statement so that you know what it does and how to use it but honestly I don't think I've ever had the need to use this myself and if you find yourself using it often then you're probably doing something wrong so using the local scope of a function makes it easier to understand and easier to work with so you can imagine how difficult it would be to maintain our code if you use these global statements and had to worry about variables and your functions overriding values outside of that function so with the local scope being selfcontained it allows us to not have to worry about what's going on outside of our function so I wanted to show you how the global statement works but be careful not to overuse it okay so now I'm going to go ahead and get rid of this global X statement here okay so now all of us have most likely seen functions that take arguments so let me add an argument here to this test function and I'll just call this variable Z now Z is going to be a local variable within this test function also so it's not going to exist outside of that function either it's just like when we set our local X variable within this function the only difference is that as a function parameter it can now be assigned values that are passed into our function so for example when I call my test function down here now I'm going to pass in local Z this string and that's going to set that local variable Z equal to this local Z string and so now within that function instead of printing out this X variable I'm going to print out Z and I'm just going to comment out this outside print statement here now if I run this then you can see that we passed in that local Z string when we see here it first looked in its local scope and Z is in its local scope and it found it there so it printed out that locals estring and just to show you what it does if we try to print that outside of that function here I'm going to change this with print Z and if I run that and you can see that we got our name err name Z is not defined and that's because that sea variable is only local to that test function so now go ahead and comment out that and rerun it okay so now let's take a look at the built in scope now this one is pretty easy to understand because it's just names that are pre assigned in Python so for example min is a builtin function in Python that finds the smallest value of an iterable so for example I can use min by saying M equals min and I can pass in an iterable so in this case I'll just pass in 5 1 4 2 3 and now I'm just going to print M below here and let me comment out where I'm running that test function now if I run that then you can see that it prints out 1 because 1 is the smallest value in that interval now we were able to use min here because it's a builtin function in Python so if we'd like to view the variables that are within the builtin scope then we can simply say import builtins and then after we import that then I can just print out e I are on that builtins module now dir just gets a list of the attributes of a given object so if I run that and then let me drag this up a little bit here you can see that it returns all of the builtins here a lot of these are exceptions and error names then if we scroll down here then you can see some others that were more used to so we have like print and min and Max and int and list and range and a few others that you're probably familiar with now one thing that you want to be careful with as far as builtins go is accidentally overriding them so this isn't something that Python prevents us from doing now there's reasons for this but basically they're just trusting us with having the power to do that so for example if I was to create a min function here so let me comment out that printed builtins there so if I was to create a min function here and then I'm just going to put in a pass statement there so now before I run this I'm just going to comment out where I use that builtin min function here so now I'm going to run this and you can see that I don't get any errors but now if I try to use that builtin min function that worked just a second ago so I'm going to uncomment out that code and run that and you can see that it gets an error saying that men doesn't or min takes zero positional arguments but one was given now the reason for that is when we ran this min function here Python found our min function in the global scope before it fell back to the builtin scope so you have to be careful with that so if I change the name of my global min function here to something like my men and rerun that code then that now you can see that it works again because now it doesn't find men in that global scope and instead uses the builtin a min function just like we expected okay so now we're going to take a look at the e part of that le GB rule and that stands for enclosing now before we do that let me go ahead and clean up some of this other code here so I'm just going to comment out everything except for that global X and that print X there now the reason that we saved the enclosing scope for last is because it's easier to understand once we understand the local and global scope so the enclosing scope has to do with nested functions so let's say for example that I have a function within a function so I'm just going to say I'm going to make a function call outer here and within here I'm going to set an X variable equal to outer X and now I'm going to have a nested function so within the outer function I'm going to call this function inner and within inner I'm going to have another X variable and I'm going to set this equal to the string enter X and now I'm going to print out that X variable from within the inner function and now I'm going to run that inner function and now I'm going to print out the X variable from within the outer function and now to run all of this I can run that outer function in the global scope area so now I'm going to go ahead and run that okay so I know that there's a good bit going on there so let's go ahead and walk through this so we have our outer function here that we ran so we came in here and we set our local X variable now this variable is local to our outer function and now we come in here and run our inner function and within our inner function we set this X variable and this X variable is local to our inner function and then we print that X variable now it uses our rule le GB so it looked if it had any local X variables and it does it has this inner X here and that's why it printed out enter X here because that is in the local scope and then we printed out X in our outer function here and it looked if it had any local X variables and it does it has this outer X local variable and it printed out outer X here so now let's comment out where we set our X variable within our inner function so now if I rerun this and you can see that it printed out outer X both times and this is what the enclosing scope is so when we got to the point within our inner function where we printed out this X it first checked if it had any X variables local to that inner func and it doesn't because we just commented it out so then it checks if it has an X variable and the local scope of any enclosing functions so that's why it's called the enclosing scope so now we're looking in the local scope of any enclosing functions so our enclosure closing function here is the outer function and we do have an X variable in the local scope of that enclosing function so that's why it printed out outer X so you can see that that's kind of similar to our global and local scope example except now we're inside functions the same concept kind of applies when we set X and our inner function it doesn't affect the X variable in the outer function and just like with our global and local scopes if I come out here and comment out this outer X and then uncomment out that inner X and save that and run that then we get an error because this printed out X within our inner function because it has that local X variable within the inner function then when we try to print it outside of that function it checked its local scope but that's commented out and then it's enclosing scope which it doesn't have any enclosing functions and then global which there's no global x function and then builtins so it threw an error there ok so now let's go ahead and set that back to how it was where we comment out that inner x and uncomment out that outer x and rerun that okay so when we looked at our global and local variables I showed you how you could use that global statement in order to explicitly tell Python that you wanted to work with the global X variable so you may be wondering if there's a way that you can do this with the enclosing scope variables as well and there is a way to do that so let's say within our inner function here that we wanted to actually change the X variable of our outer function now we shouldn't use global because global will affect the global scope in this case we use the nonlocal statement so up at the top here I'm going to atop of this inner function I'm going to say nonlocal X and save that now this will allow us to work with the local variables of enclose functions so in this case it means that we're now affecting this X variable of the outer function so now if i uncomment out that inner x and i rerun this and now you can see that it prints out enter X twice and that's because when we set our X here to enter X within our inner function we were actually affecting that local x of our enclosing function so it prints out inner X within this inner function and also when we print it out here it got overwritten here so now it prints out inner X twice now I can actually see the nonlocal statement being used more often than the global statement because nonlocal can be useful in order to change the state of closures and decorators and things like that now I'm not going to go into closures and decorators in this video but if you're interested then I do have a video on both of those topics and if you watch those then you could probably think of some use cases where using this nonlocal statement could be useful ok so now just to wrap all of this up let's remove this nonlocal statement here and let's uncomment out our global X variable here at the top and here at the bottom I'm going to uncomment out where we print out that global X variable so now if I was to run this we're simply setting an X variable in each of these scopes and then printing them out so now that we've gone over the LD GB rule then you should know exactly what would happen if I was to come in here and comment out where I set the X here within this inner function so if I run that and you can see that when we printed that it didn't find it in its local scope and instead fell back to that enclosing scope and if I was to comment out where I set the X here within this outer function and ran that then you can see that each time we printed all of those X variables then it doesn't find either of these and their local scopes or their enclosing scopes and instead falls back to that global scope in that global X string and if it didn't find anything in that global scope then it would look in that list of builtins that we looked at earlier and if it doesn't find it there then an error is thrown and also after this video you should know how to use the global and nonlocal statements to change the values within those scopes if need be so I think that's going to do it for this video if you have any questions about what we covered then feel free to ask in the comment section below and I'll do my best to answer those if you all enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means then you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching
