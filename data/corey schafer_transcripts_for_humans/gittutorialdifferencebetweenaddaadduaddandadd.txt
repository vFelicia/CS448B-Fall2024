With timestamps:

00:00 - hey how's it going everybody in this
00:02 - video we're gonna be taking a look at
00:04 - get add and all the different ways that
00:07 - we can add files to the staging area now
00:11 - there's a lot of confusion as to the
00:14 - different syntaxes that you can use with
00:17 - get add so for example you can use get a
00:20 - dash a dash you some people do get add
00:24 - with the current directory and a lot of
00:27 - people are unclear as to exactly what
00:30 - changes these are adding to the staging
00:33 - area to get ready to be committed so in
00:36 - this video we're going to take a look at
00:38 - all of those and hopefully clear up some
00:41 - of that confusion so just to show you
00:42 - what we're working with here I'm going
00:44 - to run a git status to show you the
00:46 - current state of our working directory
00:48 - so we've kind of got all the bases
00:51 - covered here we have a file that is
00:53 - being deleted from our repository we
00:55 - have a modified file we have a deleted
00:58 - file within a subdirectory a modified
01:01 - file within a subdirectory we have a dot
01:05 - file which is a good ignore file here we
01:08 - have a new file within our sub directory
01:10 - and a new file and our top directory so
01:13 - let's go ahead and run through these git
01:15 - add commands and see exactly what each
01:17 - one of them does so first of all we have
01:20 - get add dash a and now you can also
01:23 - write - - all but - a is the shorthand
01:27 - notation for that so if I run git add
01:29 - dash a and then I run a get status what
01:33 - that's going to do is it's going to
01:34 - stage all of the changes all the
01:37 - modified deleted and new files and the
01:40 - dot file in the entire working tree so
01:44 - when I say that it does the entire
01:45 - working tree so let me reset these back
01:48 - to where they were and by the way if you
01:50 - run a reset what that does is it just on
01:52 - stages all of the changes there so what
01:56 - I mean by it doing the entire working
01:58 - tree was even if I was in my sub
02:01 - directory here and I go into minder if I
02:04 - do get add - a within here and then run
02:08 - a get status that you can see that it
02:10 - still got all of those changes even
02:12 - though some of the
02:13 - changes were up one directory so let me
02:16 - go ahead and run a git reset here to get
02:19 - back to where we were and now let me go
02:21 - back up to my top level directory here
02:25 - and now you can also add directories
02:27 - onto the git add commands so if I do get
02:29 - add - a and then specify my der that I
02:34 - only want to add the changes within that
02:36 - directory and then run that if I run a
02:40 - get status here you can see that added
02:42 - all of the new modified and deleted
02:46 - changes within that directory but it
02:49 - didn't touch anything up here in the top
02:51 - level directory because we specifically
02:53 - told it that we only wanted to add
02:54 - changes within that directory so let me
02:58 - reset those changes and move on to the
03:00 - next example
03:01 - now that get add - a is actually the
03:05 - default behavior for git add so I can
03:09 - leave off the - a and if I just did
03:11 - so my Durer here then it's going to do
03:16 - the exact same thing as if we had run
03:18 - get add capital a so if I look at my git
03:24 - status here then you can see that it
03:26 - just did the exact same thing but we
03:28 - didn't need to specify the - a now that
03:34 - behavior is actually new to get version
03:38 - 2 and get version 1 if you left off that
03:42 - - a what it would do is it would ignore
03:45 - the deleted files now if you still want
03:48 - that get version 1 functionality then
03:53 - you can still do it but you just have to
03:54 - do I'd get add and you can either do - -
03:58 - no all and if I do that on my dirt and
04:02 - then do a git status you can see that
04:06 - even within my dirty even though I
04:07 - specified it it did not stage this
04:11 - deleted file here now instead of no all
04:14 - you could also use it is ignore removal
04:20 - I believe but that's a little long I
04:22 - usually just use no all so let's go
04:25 - ahead and reset those chain
04:27 - just and clear that out so you can also
04:30 - do a git add - you option and this is
04:35 - the same as - - update now what the get
04:39 - add - you does is it adds all of the
04:43 - modified and deleted files but not any
04:47 - untracked files not any new files and it
04:50 - does that for the entire tree so I just
04:53 - ran that if I do a git status then you
04:55 - can see here that it got all of the
04:57 - deleted and modified files but not any
05:00 - of these untracked files here so none of
05:02 - these new files were added so let me run
05:04 - a git reset here and clear this out now
05:08 - just like with the - a you can specify a
05:11 - directory so if I do get a - you and do
05:14 - my dirt and then do a git status then
05:18 - you can see that it got all of the
05:19 - modified and deleted files within my der
05:22 - but it didn't get this new file here and
05:26 - it also did not get these deleted and
05:29 - modified files in our top directory so
05:32 - I'll reset those changes and clear that
05:35 - out now a lot of people use the syntax
05:37 - git add and then the dot which is the
05:41 - current directory so if we run that and
05:44 - run and get status then you can see that
05:46 - it got all of the changes and it leaves
05:48 - a lot of people to believe that this is
05:51 - the exact same thing as running git add
05:53 - - a because it looks the same as long as
05:57 - you're in your top directory but let me
06:00 - show you how this is different
06:02 - so if I reset these changes here now if
06:07 - you remember the - a is the default get
06:11 - functionality so get add dot in the
06:15 - current directory is the same as running
06:17 - get add a in the current directory so if
06:21 - you're in your top directory then it
06:23 - will be the same as running get add - a
06:25 - now where it's different is if we CD
06:29 - down into our sub directory here now if
06:33 - I run get add dot it's the same as
06:36 - running get add - a in the current
06:39 - directory and what the
06:40 - going to do is it's going to add all of
06:43 - the changes in our current directory but
06:46 - not in our comp directory so now if I
06:47 - run and get status you can see that it
06:50 - didn't get anything within our level up
06:54 - here so in our directory one level up it
06:57 - didn't get any of our bolita the
06:58 - modified new files or the hidden files
07:00 - so how that's different from the get a -
07:04 - a is that if you run this from anywhere
07:08 - it does all of the changes in the entire
07:10 - working tree like we showed before but
07:12 - I'll go ahead and show it one more time
07:13 - so if I'm running to get status now you
07:16 - can see that it got all of those files
07:17 - even the ones that were up a directory
07:20 - okay so let me go ahead and reset these
07:22 - changes and clear this out okay and let
07:25 - me go up to my top directory here now
07:29 - one last thing that I see people using a
07:30 - lot that I wouldn't recommend whenever
07:32 - they're trying to add all of their
07:34 - changes to the staging area is sometimes
07:37 - I'll see people do get add star now the
07:40 - reason I wouldn't recommend this is
07:41 - because the star is a shell command it's
07:44 - it's not something that gets
07:46 - specifically knows how to use it's just
07:48 - going to take everything that's passed
07:49 - to it what I mean by that is if I do an
07:52 - LS star you can see the files and the
07:55 - directories that's going to be passed
07:57 - and to get add so it's going to find our
07:59 - modified files our new files and it's
08:01 - even going to find that directory here
08:03 - and the files within that directory but
08:06 - notice that it didn't find the deleted
08:08 - files because those are no longer on the
08:10 - file system only get knows about those
08:12 - and it also didn't find our hidden files
08:15 - so if I was to run get add star which is
08:19 - the same as get add - a star because - a
08:22 - is the default if I was to run that and
08:25 - then I ran get status you can see that
08:28 - we might get some unexpected results
08:31 - because I said that it couldn't see the
08:34 - deleted files but one deleted file got
08:37 - added to the staging area and this
08:40 - deleted file didn't and the hidden file
08:42 - didn't get at it so what exactly is
08:43 - going on here well I don't know for 100%
08:47 - sure but I think what happens here in
08:50 - this talk directory if I do the LS star
08:52 - again I think it's also passing
08:54 - my dirt to get add so get knows what to
08:57 - do with that deleted file when we add my
09:00 - dirt so if we were to reset this and
09:03 - then clear that out so let's change into
09:06 - our subdirectory and now if we run get
09:09 - add star within here and then did it get
09:12 - status you can see that it didn't get
09:14 - either of those deleted files it didn't
09:16 - get the one in the top also didn't get
09:19 - the one in the current directory and it
09:20 - also didn't get any of these top-level
09:22 - files the hidden files or anything like
09:24 - that so that's why I wouldn't recommend
09:27 - using the git add star unless you really
09:30 - know what's going on in the background
09:32 - it's a lot easier to understand using
09:36 - the dot for the current directory or
09:38 - even specifically typing in the
09:40 - directory that you want to add so I
09:42 - would stick to the git command so get a
09:44 - - a - you and things like that and I
09:47 - just wouldn't use that star so that
09:49 - about does it for this video I hope that
09:51 - that clears up any confusion as to the
09:53 - differences between the different ways
09:55 - to add files to the staging area if you
09:58 - do have any questions or if anything
10:00 - about that was confusing then just ask
10:01 - in the comment section below
10:03 - be sure to subscribe for future videos
10:05 - and thank you all for watching

Cleaned transcript:

hey how's it going everybody in this video we're gonna be taking a look at get add and all the different ways that we can add files to the staging area now there's a lot of confusion as to the different syntaxes that you can use with get add so for example you can use get a dash a dash you some people do get add with the current directory and a lot of people are unclear as to exactly what changes these are adding to the staging area to get ready to be committed so in this video we're going to take a look at all of those and hopefully clear up some of that confusion so just to show you what we're working with here I'm going to run a git status to show you the current state of our working directory so we've kind of got all the bases covered here we have a file that is being deleted from our repository we have a modified file we have a deleted file within a subdirectory a modified file within a subdirectory we have a dot file which is a good ignore file here we have a new file within our sub directory and a new file and our top directory so let's go ahead and run through these git add commands and see exactly what each one of them does so first of all we have get add dash a and now you can also write all but a is the shorthand notation for that so if I run git add dash a and then I run a get status what that's going to do is it's going to stage all of the changes all the modified deleted and new files and the dot file in the entire working tree so when I say that it does the entire working tree so let me reset these back to where they were and by the way if you run a reset what that does is it just on stages all of the changes there so what I mean by it doing the entire working tree was even if I was in my sub directory here and I go into minder if I do get add a within here and then run a get status that you can see that it still got all of those changes even though some of the changes were up one directory so let me go ahead and run a git reset here to get back to where we were and now let me go back up to my top level directory here and now you can also add directories onto the git add commands so if I do get add a and then specify my der that I only want to add the changes within that directory and then run that if I run a get status here you can see that added all of the new modified and deleted changes within that directory but it didn't touch anything up here in the top level directory because we specifically told it that we only wanted to add changes within that directory so let me reset those changes and move on to the next example now that get add a is actually the default behavior for git add so I can leave off the a and if I just did so my Durer here then it's going to do the exact same thing as if we had run get add capital a so if I look at my git status here then you can see that it just did the exact same thing but we didn't need to specify the a now that behavior is actually new to get version 2 and get version 1 if you left off that a what it would do is it would ignore the deleted files now if you still want that get version 1 functionality then you can still do it but you just have to do I'd get add and you can either do no all and if I do that on my dirt and then do a git status you can see that even within my dirty even though I specified it it did not stage this deleted file here now instead of no all you could also use it is ignore removal I believe but that's a little long I usually just use no all so let's go ahead and reset those chain just and clear that out so you can also do a git add you option and this is the same as update now what the get add you does is it adds all of the modified and deleted files but not any untracked files not any new files and it does that for the entire tree so I just ran that if I do a git status then you can see here that it got all of the deleted and modified files but not any of these untracked files here so none of these new files were added so let me run a git reset here and clear this out now just like with the a you can specify a directory so if I do get a you and do my dirt and then do a git status then you can see that it got all of the modified and deleted files within my der but it didn't get this new file here and it also did not get these deleted and modified files in our top directory so I'll reset those changes and clear that out now a lot of people use the syntax git add and then the dot which is the current directory so if we run that and run and get status then you can see that it got all of the changes and it leaves a lot of people to believe that this is the exact same thing as running git add a because it looks the same as long as you're in your top directory but let me show you how this is different so if I reset these changes here now if you remember the a is the default get functionality so get add dot in the current directory is the same as running get add a in the current directory so if you're in your top directory then it will be the same as running get add a now where it's different is if we CD down into our sub directory here now if I run get add dot it's the same as running get add a in the current directory and what the going to do is it's going to add all of the changes in our current directory but not in our comp directory so now if I run and get status you can see that it didn't get anything within our level up here so in our directory one level up it didn't get any of our bolita the modified new files or the hidden files so how that's different from the get a a is that if you run this from anywhere it does all of the changes in the entire working tree like we showed before but I'll go ahead and show it one more time so if I'm running to get status now you can see that it got all of those files even the ones that were up a directory okay so let me go ahead and reset these changes and clear this out okay and let me go up to my top directory here now one last thing that I see people using a lot that I wouldn't recommend whenever they're trying to add all of their changes to the staging area is sometimes I'll see people do get add star now the reason I wouldn't recommend this is because the star is a shell command it's it's not something that gets specifically knows how to use it's just going to take everything that's passed to it what I mean by that is if I do an LS star you can see the files and the directories that's going to be passed and to get add so it's going to find our modified files our new files and it's even going to find that directory here and the files within that directory but notice that it didn't find the deleted files because those are no longer on the file system only get knows about those and it also didn't find our hidden files so if I was to run get add star which is the same as get add a star because a is the default if I was to run that and then I ran get status you can see that we might get some unexpected results because I said that it couldn't see the deleted files but one deleted file got added to the staging area and this deleted file didn't and the hidden file didn't get at it so what exactly is going on here well I don't know for 100% sure but I think what happens here in this talk directory if I do the LS star again I think it's also passing my dirt to get add so get knows what to do with that deleted file when we add my dirt so if we were to reset this and then clear that out so let's change into our subdirectory and now if we run get add star within here and then did it get status you can see that it didn't get either of those deleted files it didn't get the one in the top also didn't get the one in the current directory and it also didn't get any of these toplevel files the hidden files or anything like that so that's why I wouldn't recommend using the git add star unless you really know what's going on in the background it's a lot easier to understand using the dot for the current directory or even specifically typing in the directory that you want to add so I would stick to the git command so get a a you and things like that and I just wouldn't use that star so that about does it for this video I hope that that clears up any confusion as to the differences between the different ways to add files to the staging area if you do have any questions or if anything about that was confusing then just ask in the comment section below be sure to subscribe for future videos and thank you all for watching
