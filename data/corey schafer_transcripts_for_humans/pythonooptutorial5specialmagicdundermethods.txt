With timestamps:

00:00 - hey everybody how's it going in this
00:01 - video we'll be learning about special
00:03 - methods that we can use within our
00:04 - classes and some people call these magic
00:06 - methods now these special methods allow
00:08 - us to emulate some built-in Behavior
00:10 - within Python and it's also how we
00:12 - implement operat or overloading so what
00:14 - I mean by that is for example when we
00:16 - add two integers together so down here
00:18 - I'm going to print out 1 plus two and
00:20 - when we add two strings together so I'm
00:22 - going to print out a plus b if I run
00:25 - this code then you can see that the
00:27 - behavior when we add two strings
00:29 - together is different than when we add
00:31 - two integers together so the strings
00:32 - were just concatenated and the integers
00:34 - were actually added together so
00:36 - depending on what objects you're working
00:38 - with the addition actually has different
00:40 - behavior um and also if we were to print
00:44 - out our employee instance here then you
00:46 - can see that we just get this vague
00:47 - employee object and it would be nice if
00:50 - we could change this Behavior to print
00:51 - out something a little bit more
00:52 - userfriendly and that's what these
00:54 - special methods are going to allow us to
00:56 - do so by defining our own special
00:58 - methods we'll be able to change some of
01:00 - this uh built-in behavior and operations
01:02 - so these special methods are always
01:04 - surrounded by double underscores so a
01:06 - lot of people call these double
01:07 - underscores Dunder so if you ever hear
01:10 - someone say something like Dunder a nit
01:12 - then they mean a nit surrounded by
01:14 - double underscores So speaking of Dunder
01:16 - a knit that is a special method that
01:18 - we've already been using and are
01:20 - familiar with and it's probably the
01:21 - first and most common special method
01:23 - that people use when working with
01:24 - classes so just like we learned in
01:27 - previous videos this special Dunder a
01:29 - nit method me is implicitly called when
01:31 - we create our employee objects here and
01:34 - it comes in and sets all of our
01:36 - attributes for us so let's take a look
01:38 - at some other common special methods so
01:40 - two more common special methods that we
01:42 - should probably always Implement are
01:44 - this Dunder re and Dunder St Str now
01:48 - these are what are implicitly called
01:51 - anytime we run re on one of our objects
01:55 - or Str STR on one of our objects and
01:59 - these are what we're going to used to
02:00 - fix our problem of printing out this
02:02 - vague employee object when we printed
02:04 - out our employee instance here now I
02:07 - have an earlier video on the difference
02:08 - between these two methods um but in
02:11 - short re is meant to be an unambiguous
02:15 - representation of the object and should
02:17 - be used for debugging and logging and
02:19 - things like that it's really meant to be
02:20 - seen by other developers and Str Str is
02:24 - meant to be more of a readable
02:26 - representation of an object and is meant
02:28 - to be used as a display to the end user
02:31 - so let's go ahead and write code for
02:32 - these and take a look at the difference
02:34 - so first we want to be sure to at least
02:37 - have an re method because if we have
02:40 - this without an Str Str then calling Str
02:44 - STR on an employee we'll just use the re
02:47 - as a fallback so it's good to have this
02:49 - as a minimum now A good rule of thumb
02:51 - when creating this method is to try to
02:54 - display something that you can copy and
02:56 - paste back in the python code that would
02:58 - recreate that same object so for example
03:01 - here if I was to come in here and return
03:05 - um so we would want this to be something
03:07 - that we could use to recreate this
03:09 - object so I'm going to say employee and
03:12 - then in quotes I'm just going to put a
03:15 - uh placeholder there and I'm going to do
03:17 - quotes again for the last name and then
03:21 - I'll do another placeholder for the pay
03:24 - and then I'll just go ahead and create a
03:26 - format string here and let's do self
03:30 - first self. last and self. pay so again
03:35 - what I was doing here is that I was
03:36 - trying to return a string that I can use
03:39 - to recreate the object so to show you
03:41 - what I mean let's go ahead and print out
03:43 - this employee one again so first I'm
03:45 - just going to go ahead and comment out
03:47 - these lines here now remember when I
03:49 - printed out this instance before then we
03:52 - got this vague employee uh output here
03:55 - but now whenever I rerun this with this
03:58 - rpr method now you can see that it
04:00 - returned the string that we specified in
04:03 - our rpr method and you can see how if I
04:06 - wanted to recreate this employee object
04:09 - then I can just copy this output and
04:12 - it's the exact same thing that we used
04:14 - to create that employee to begin with so
04:16 - now let's go ahead and fill in the code
04:18 - for our Dunder string method so this is
04:21 - meant to be more readable for an end
04:23 - user so this is a little bit more
04:25 - arbitrary but to print out this employee
04:28 - let's see I'll just say something like
04:30 - uh I'll do a return and I'll do a
04:32 - placeholder for their full name and a
04:35 - placeholder for their email and then
04:37 - I'll just go ahead and pass those in so
04:39 - I'll do self. full name and then I'll
04:43 - also do uh self. email so now if I print
04:48 - out this employee object again now it
04:51 - should use that Dunder St method instead
04:54 - so now when we print out that employee
04:56 - object it's printing out the employees
04:58 - full name and email address now we can
05:01 - still access the rpr and the Str Str
05:04 - specifically if I was to go in here and
05:06 - print both of these out and then let me
05:09 - go ahead and close those off and I'll
05:12 - comment out that now really when we run
05:15 - this rpr and Str Str what's actually
05:18 - going on in the background is that it's
05:20 - directly calling those special methods
05:23 - so let me go ahead and copy these out
05:26 - and instead it's actually calling this
05:32 - _ and then if I go ahead and grab this
05:34 - then I'll also print out the Str Str and
05:39 - if I run that then you can see that we
05:41 - got the exact same object by calling
05:43 - those directly so these two special
05:45 - methods allow us to change how our
05:47 - objects are printed and displayed now to
05:50 - be honest unless you're writing some
05:52 - more complicated classes these three
05:54 - methods of anit re and Str Str uh will
05:59 - be the ones that you'll probably use
06:01 - most often but let's go ahead and look
06:03 - at a few more just so we can get an idea
06:05 - of how these work now there are also a
06:07 - lot of special methods for arithmetic um
06:10 - so like we saw before when we added
06:13 - those two integers together so if I was
06:15 - to say print one plus print two now if I
06:18 - go ahead and run this now what this is
06:20 - actually doing is it's using a special
06:22 - method in the background called Dunder
06:25 - ad so I can actually access this uh
06:28 - directly if I use the integer object I
06:31 - can do Dunder add and I can pass in
06:35 - arguments of one and two so if I run
06:38 - that then you can see that that gives us
06:40 - the same result and strings are actually
06:42 - using their own Dunder ad method so if I
06:46 - use a string object and do a Dunder ad
06:50 - and pass in a character of a and a
06:53 - character of B and run that then you can
06:56 - see that the strings Dunder ad actually
06:58 - concats those
07:00 - together so we can actually customize
07:02 - how addition works for our objects uh by
07:06 - creating that Dunder ad method so let's
07:08 - say that with our employee class we
07:10 - wanted to be able to calculate total
07:12 - salaries just by adding employees
07:14 - together now that's kind of a contrived
07:16 - example because if I was to make a class
07:18 - like that in real life then it's
07:19 - probably better to be explicit about
07:21 - what you're adding together uh but just
07:23 - for the sake of this example let's go
07:24 - ahead and see how we do this and we'll
07:26 - look at some better real world examples
07:28 - uh from the standard Library here in
07:30 - just a minute so if I wanted to add two
07:33 - employees together and have the result
07:35 - be their combined salaries then we're
07:38 - going to have to create a Dunder ad
07:40 - method so I'll go ahead and do that and
07:42 - this is going to take in self which is
07:45 - going to be what's on the left side of
07:47 - the addition and other which will be on
07:49 - the right side of the addition and for
07:51 - this example we're just going to assume
07:53 - that these are both employee objects so
07:55 - we want to return self. pay and
08:00 - added to other. pay so when we add two
08:03 - employees together it's going to give us
08:06 - their combined pay added together so
08:09 - let's go ahead and see if this works so
08:12 - here I can just print out employee one
08:16 - plus employee 2 and if I go ahead and
08:19 - run that you can see that when we added
08:21 - these two employee objects together that
08:23 - it gave us their combined salaries now
08:26 - if we didn't have this Dunder ad method
08:28 - and I copy and comment out that then you
08:31 - can see if I try to run that then it
08:33 - gives us an error here and it says that
08:34 - it doesn't know how to add these two
08:36 - employees together um so if we put that
08:39 - back in then we are telling it how we
08:41 - want to add these employees together so
08:43 - if I run that then you can see that that
08:45 - works now there are all kinds of these
08:47 - special methods for arithmetic and if I
08:49 - go to the documentation here you can see
08:52 - that there are uh special methods for
08:55 - subtracting multiplying uh dividing and
08:58 - plenty of others so so let's go ahead
08:59 - and run through one more example here
09:01 - before we look at some of these uh real
09:04 - world examples in the standard Library
09:06 - so if you have ever used the Len
09:09 - function to check the length of a list
09:11 - or a string now this is also a special
09:13 - method so if I wanted to print the
09:16 - length of a string so for example I
09:18 - could say print Len of the string test
09:23 - and let me go ahead and get rid of that
09:25 - print statement there if I run that you
09:27 - can see that that string is four
09:28 - characters long now this is also just
09:30 - using a special Dunder method in the
09:33 - background so if instead I was to print
09:36 - test and on that string object I could
09:39 - actually specifically run that Dunder
09:42 - length method and if I run that then you
09:45 - can see that we get the same result so
09:47 - if we want this Lin function to work on
09:50 - our objects then we'll have to create a
09:53 - Dunder ly method um so let's say that
09:56 - for example when we ran Lyn on our
09:58 - employee instance that we wanted it to
10:00 - return the total number of characters in
10:02 - their full name and maybe this could be
10:05 - useful if someone's writing a document
10:07 - and needs to know how many characters
10:08 - the employees name will take up so I can
10:11 - create this Dunder Lin method just by
10:15 - saying def Dunder Lin and this is only
10:17 - going to take in self and now for this I
10:20 - just want to return the link of self.
10:25 - full name so now we can actually use
10:28 - this Lin fun function on our objects so
10:31 - if I was to pass in employee one here
10:35 - and print that out then you can see that
10:37 - we get 13 characters when their full
10:39 - name is printed out now there are a ton
10:41 - of other special methods that we could
10:43 - go over so you can use these to
10:44 - customize how objects are compared how
10:47 - they check for equality and a lot of
10:49 - other useful stuff that we're not going
10:51 - to be able to fit into one video but if
10:53 - you go to the documentation then you can
10:55 - see a short description of all the ones
10:57 - that you can use and I'll put a link to
10:58 - that page in the description section
11:00 - below so now let's go ahead and take a
11:02 - look at some real world examples in the
11:04 - standard Library so that we can see how
11:06 - useful these can be in real code so I've
11:08 - got the datetime module pulled up here
11:11 - so in the datetime module I'm just going
11:13 - to do a search here for Dunder ad so the
11:17 - first result that we land on here is
11:18 - from the time Delta class and you can
11:21 - see that they are uh checking if the
11:23 - other object that they're adding against
11:26 - is another time Delta and to add those
11:29 - together
11:29 - they are just returning another time
11:31 - Delta with the days seconds and micros
11:34 - seconds added up from both of those and
11:36 - if the other object isn't a Time Delta
11:39 - then it's going to come down here to
11:40 - this return not implemented now that's
11:43 - something that we didn't go over in our
11:44 - examples but basically when they return
11:46 - not implemented uh they don't want to
11:49 - throw an error because the other object
11:51 - might know how to handle that operation
11:53 - so returning not implemented is a way to
11:56 - fall back on the other object to see if
11:59 - it knows how to handle the operation and
12:01 - if none of them know how to handle it
12:03 - then it'll eventually throw an error
12:04 - okay so let's go ahead and take another
12:07 - look at another example so I'm going to
12:09 - search here for the date class so now
12:12 - we're here within the date class and I'm
12:15 - just going to scroll down here a little
12:17 - bit and here we can see that they have
12:19 - their Dunder re method and you can see
12:22 - that they give some examples of what the
12:24 - output should look like and just like we
12:27 - talked about earlier uh it looks just
12:29 - like how you would create a date object
12:32 - and if we scroll down a little bit
12:34 - further here now here we can see that
12:36 - they're setting their Dunder string
12:38 - method equal to the iso format function
12:42 - so when you print the date it'll
12:44 - actually print out the iso format so
12:46 - that's pretty interesting so you can see
12:48 - how learning about these things makes it
12:50 - a little less intimidating to look
12:51 - around in the standard library and it
12:53 - makes it a little easier to just be able
12:54 - to look under the hood and see what's
12:56 - going on now don't get me wrong there's
12:58 - a lot of complex code in here but
13:00 - learning how these special methods work
13:02 - is a big step towards better
13:04 - understanding a lot of what's going on
13:05 - in here okay so I think that is going to
13:07 - do it for this video I hope this gave
13:09 - you a better idea of how these special
13:10 - methods work and what's going on in the
13:12 - background when you're performing some
13:14 - of these operations but if you do have
13:16 - any questions about what we covered in
13:17 - the video then just feel free to ask in
13:19 - the comment section below and I'll do my
13:20 - best to answer those if you enjoy these
13:22 - tutorials and would like to support them
13:24 - then there are several ways you can do
13:25 - that the easiest way is to Simply like
13:27 - the video and give it a thumbs up and
13:28 - also if a huge help to share these
13:30 - videos with anyone who you think would
13:31 - find them useful and if you have the
13:32 - means you can contribute through patreon
13:34 - and there's a link to that page in the
13:35 - description section below be sure to
13:37 - subscribe for future videos and thank
13:39 - you all for
13:48 - watching

Cleaned transcript:

hey everybody how's it going in this video we'll be learning about special methods that we can use within our classes and some people call these magic methods now these special methods allow us to emulate some builtin Behavior within Python and it's also how we implement operat or overloading so what I mean by that is for example when we add two integers together so down here I'm going to print out 1 plus two and when we add two strings together so I'm going to print out a plus b if I run this code then you can see that the behavior when we add two strings together is different than when we add two integers together so the strings were just concatenated and the integers were actually added together so depending on what objects you're working with the addition actually has different behavior um and also if we were to print out our employee instance here then you can see that we just get this vague employee object and it would be nice if we could change this Behavior to print out something a little bit more userfriendly and that's what these special methods are going to allow us to do so by defining our own special methods we'll be able to change some of this uh builtin behavior and operations so these special methods are always surrounded by double underscores so a lot of people call these double underscores Dunder so if you ever hear someone say something like Dunder a nit then they mean a nit surrounded by double underscores So speaking of Dunder a knit that is a special method that we've already been using and are familiar with and it's probably the first and most common special method that people use when working with classes so just like we learned in previous videos this special Dunder a nit method me is implicitly called when we create our employee objects here and it comes in and sets all of our attributes for us so let's take a look at some other common special methods so two more common special methods that we should probably always Implement are this Dunder re and Dunder St Str now these are what are implicitly called anytime we run re on one of our objects or Str STR on one of our objects and these are what we're going to used to fix our problem of printing out this vague employee object when we printed out our employee instance here now I have an earlier video on the difference between these two methods um but in short re is meant to be an unambiguous representation of the object and should be used for debugging and logging and things like that it's really meant to be seen by other developers and Str Str is meant to be more of a readable representation of an object and is meant to be used as a display to the end user so let's go ahead and write code for these and take a look at the difference so first we want to be sure to at least have an re method because if we have this without an Str Str then calling Str STR on an employee we'll just use the re as a fallback so it's good to have this as a minimum now A good rule of thumb when creating this method is to try to display something that you can copy and paste back in the python code that would recreate that same object so for example here if I was to come in here and return um so we would want this to be something that we could use to recreate this object so I'm going to say employee and then in quotes I'm just going to put a uh placeholder there and I'm going to do quotes again for the last name and then I'll do another placeholder for the pay and then I'll just go ahead and create a format string here and let's do self first self. last and self. pay so again what I was doing here is that I was trying to return a string that I can use to recreate the object so to show you what I mean let's go ahead and print out this employee one again so first I'm just going to go ahead and comment out these lines here now remember when I printed out this instance before then we got this vague employee uh output here but now whenever I rerun this with this rpr method now you can see that it returned the string that we specified in our rpr method and you can see how if I wanted to recreate this employee object then I can just copy this output and it's the exact same thing that we used to create that employee to begin with so now let's go ahead and fill in the code for our Dunder string method so this is meant to be more readable for an end user so this is a little bit more arbitrary but to print out this employee let's see I'll just say something like uh I'll do a return and I'll do a placeholder for their full name and a placeholder for their email and then I'll just go ahead and pass those in so I'll do self. full name and then I'll also do uh self. email so now if I print out this employee object again now it should use that Dunder St method instead so now when we print out that employee object it's printing out the employees full name and email address now we can still access the rpr and the Str Str specifically if I was to go in here and print both of these out and then let me go ahead and close those off and I'll comment out that now really when we run this rpr and Str Str what's actually going on in the background is that it's directly calling those special methods so let me go ahead and copy these out and instead it's actually calling this _ and then if I go ahead and grab this then I'll also print out the Str Str and if I run that then you can see that we got the exact same object by calling those directly so these two special methods allow us to change how our objects are printed and displayed now to be honest unless you're writing some more complicated classes these three methods of anit re and Str Str uh will be the ones that you'll probably use most often but let's go ahead and look at a few more just so we can get an idea of how these work now there are also a lot of special methods for arithmetic um so like we saw before when we added those two integers together so if I was to say print one plus print two now if I go ahead and run this now what this is actually doing is it's using a special method in the background called Dunder ad so I can actually access this uh directly if I use the integer object I can do Dunder add and I can pass in arguments of one and two so if I run that then you can see that that gives us the same result and strings are actually using their own Dunder ad method so if I use a string object and do a Dunder ad and pass in a character of a and a character of B and run that then you can see that the strings Dunder ad actually concats those together so we can actually customize how addition works for our objects uh by creating that Dunder ad method so let's say that with our employee class we wanted to be able to calculate total salaries just by adding employees together now that's kind of a contrived example because if I was to make a class like that in real life then it's probably better to be explicit about what you're adding together uh but just for the sake of this example let's go ahead and see how we do this and we'll look at some better real world examples uh from the standard Library here in just a minute so if I wanted to add two employees together and have the result be their combined salaries then we're going to have to create a Dunder ad method so I'll go ahead and do that and this is going to take in self which is going to be what's on the left side of the addition and other which will be on the right side of the addition and for this example we're just going to assume that these are both employee objects so we want to return self. pay and added to other. pay so when we add two employees together it's going to give us their combined pay added together so let's go ahead and see if this works so here I can just print out employee one plus employee 2 and if I go ahead and run that you can see that when we added these two employee objects together that it gave us their combined salaries now if we didn't have this Dunder ad method and I copy and comment out that then you can see if I try to run that then it gives us an error here and it says that it doesn't know how to add these two employees together um so if we put that back in then we are telling it how we want to add these employees together so if I run that then you can see that that works now there are all kinds of these special methods for arithmetic and if I go to the documentation here you can see that there are uh special methods for subtracting multiplying uh dividing and plenty of others so so let's go ahead and run through one more example here before we look at some of these uh real world examples in the standard Library so if you have ever used the Len function to check the length of a list or a string now this is also a special method so if I wanted to print the length of a string so for example I could say print Len of the string test and let me go ahead and get rid of that print statement there if I run that you can see that that string is four characters long now this is also just using a special Dunder method in the background so if instead I was to print test and on that string object I could actually specifically run that Dunder length method and if I run that then you can see that we get the same result so if we want this Lin function to work on our objects then we'll have to create a Dunder ly method um so let's say that for example when we ran Lyn on our employee instance that we wanted it to return the total number of characters in their full name and maybe this could be useful if someone's writing a document and needs to know how many characters the employees name will take up so I can create this Dunder Lin method just by saying def Dunder Lin and this is only going to take in self and now for this I just want to return the link of self. full name so now we can actually use this Lin fun function on our objects so if I was to pass in employee one here and print that out then you can see that we get 13 characters when their full name is printed out now there are a ton of other special methods that we could go over so you can use these to customize how objects are compared how they check for equality and a lot of other useful stuff that we're not going to be able to fit into one video but if you go to the documentation then you can see a short description of all the ones that you can use and I'll put a link to that page in the description section below so now let's go ahead and take a look at some real world examples in the standard Library so that we can see how useful these can be in real code so I've got the datetime module pulled up here so in the datetime module I'm just going to do a search here for Dunder ad so the first result that we land on here is from the time Delta class and you can see that they are uh checking if the other object that they're adding against is another time Delta and to add those together they are just returning another time Delta with the days seconds and micros seconds added up from both of those and if the other object isn't a Time Delta then it's going to come down here to this return not implemented now that's something that we didn't go over in our examples but basically when they return not implemented uh they don't want to throw an error because the other object might know how to handle that operation so returning not implemented is a way to fall back on the other object to see if it knows how to handle the operation and if none of them know how to handle it then it'll eventually throw an error okay so let's go ahead and take another look at another example so I'm going to search here for the date class so now we're here within the date class and I'm just going to scroll down here a little bit and here we can see that they have their Dunder re method and you can see that they give some examples of what the output should look like and just like we talked about earlier uh it looks just like how you would create a date object and if we scroll down a little bit further here now here we can see that they're setting their Dunder string method equal to the iso format function so when you print the date it'll actually print out the iso format so that's pretty interesting so you can see how learning about these things makes it a little less intimidating to look around in the standard library and it makes it a little easier to just be able to look under the hood and see what's going on now don't get me wrong there's a lot of complex code in here but learning how these special methods work is a big step towards better understanding a lot of what's going on in here okay so I think that is going to do it for this video I hope this gave you a better idea of how these special methods work and what's going on in the background when you're performing some of these operations but if you do have any questions about what we covered in the video then just feel free to ask in the comment section below and I'll do my best to answer those if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to Simply like the video and give it a thumbs up and also if a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching
