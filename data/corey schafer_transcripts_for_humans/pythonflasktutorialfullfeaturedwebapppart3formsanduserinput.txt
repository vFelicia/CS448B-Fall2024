With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we'll continue with our Flash
00:03 - series by learning how to create forms
00:05 - and also how to validate user input so
00:07 - the application that we're going to be
00:08 - creating is going to have the ability
00:10 - for users to create accounts login make
00:13 - posts and logout and things like that
00:15 - and the first part of that process is to
00:18 - create a registration page where a user
00:20 - can create an account on the website and
00:22 - then be able to log in and log out and
00:24 - that's what we're going to be doing in
00:25 - this video so let's go ahead and get
00:27 - started
00:27 - now if you were to create forms from
00:29 - scratch then that can get pretty
00:31 - complicated pretty fast you would have
00:33 - to put in different kinds of validation
00:35 - checks to make sure that the user was
00:37 - inserting information correctly you'd
00:39 - also have to make sure that their
00:40 - passwords matched and you might have to
00:42 - write some regular expressions to make
00:44 - sure that they entered a valid email and
00:46 - things like that but luckily this
00:48 - process is so common that we don't have
00:50 - to reinvent the wheel there are
00:52 - extensions out there that have already
00:54 - put in all the hard work so that you
00:56 - don't have to and the most popular
00:57 - extension for working with forms and
00:59 - flask is called WT forms and that's what
01:02 - we're going to be using in this video so
01:04 - first we have to install this and we can
01:05 - do this with a simple pip install so I'm
01:08 - here with in my virtual environment but
01:09 - you could also do this without a virtual
01:11 - environment so I will say pip install
01:13 - and that is flask - WTF for WT forms so
01:18 - we'll run that and go through the
01:20 - installation and once that's installed
01:21 - I'm going to open up our existing
01:23 - project and our text editor so I'm going
01:25 - to open up sublime text here and now
01:27 - let's create a file where we can put
01:29 - these forms so I'm going to create
01:31 - another file in our project directory
01:33 - and I'm going to call this forms dot p/y
01:38 - now these forms could go directly into
01:40 - that application module that we've been
01:42 - writing but it's best to split things
01:43 - like this out into their own files so
01:45 - that everything has its own place that
01:47 - way if we need to update a form in the
01:49 - future then we know exactly where to
01:50 - look so it's better to have this stuff
01:52 - split up into smaller more manageable
01:54 - sections of code rather than one larger
01:57 - application file where everything is in
01:59 - one place and hard to find okay so now
02:01 - within this file let's create our forms
02:03 - so first let's import this into our
02:05 - application by saying from flask
02:08 - underscore WTF import and we want to
02:12 - import flask for
02:13 - now if you've done web development for
02:15 - some time and then you may be used to
02:16 - writing forms in HTML and this is going
02:19 - to be a little different using this
02:20 - flask extension so we will actually be
02:23 - writing Python classes that will be
02:25 - representative of our forms and then
02:27 - they will automatically be converted in
02:29 - the HTML forms within our template so
02:31 - let's see how to do this so let's say
02:33 - that we wanted to create a registration
02:35 - form then we can create a registration
02:37 - form class so I'm going to come down
02:39 - here and say class and then we will call
02:42 - this registration form and this will
02:45 - inherit from flask form and now within
02:49 - our form we're going to have different
02:50 - form fields and these form fields are
02:53 - all going to be imported classes as well
02:55 - so for example let's say that the first
02:57 - field that we want in our form is a user
02:59 - name and the user name is going to be a
03:01 - string field and this won't be imported
03:04 - from the flask wdf package but instead
03:07 - the WT forms package and that was also
03:11 - installed with the PIP install so we
03:13 - don't need to do anything extra there so
03:15 - we can just say from WT forms and then
03:19 - we can import this string field class
03:22 - and now within our registration form
03:24 - class we can create a new attribute and
03:27 - we can just say username is equal to and
03:30 - then this will be a string field and
03:32 - then the first argument here is the name
03:35 - of this field so I'll call this user
03:37 - name and that is also going to be used
03:38 - as the label and our HTML okay so that's
03:41 - easy enough to create that but now also
03:44 - when it comes to user names there might
03:45 - be a few limitations that we want to put
03:47 - in place so first of all we want to make
03:49 - sure they actually put something for
03:51 - their username and just don't leave it
03:53 - empty or blank second we wouldn't want a
03:56 - user to be able to create a username
03:57 - that's you know 50 characters long
03:59 - because then it would look weird on our
04:01 - website so let's say that we want to
04:03 - allow user names that are between
04:05 - between 2 and 20 characters so to put
04:08 - these checks and validations in place we
04:11 - can use something called validators and
04:13 - they will be another argument that we
04:15 - pass in to our field so let's add a list
04:19 - of what we want validated by coming in
04:21 - here and passing in another argument and
04:24 - this will be validators
04:27 - and this is going to be equal to a list
04:29 - of validations that we want to check and
04:31 - just like with the fields these
04:33 - validators are also going to be classes
04:35 - that we import so to make sure a field
04:37 - isn't empty we can use the data required
04:39 - validator so let's import that and this
04:42 - is going to come from WT forms dot
04:46 - validators and then we can import that
04:50 - data required validator and then we can
04:54 - just add that to our list of validator
04:56 - so I'll copy that and paste it in here
04:58 - and put in these parentheses and be sure
05:01 - that you have those parentheses after
05:03 - the class okay so now if we want to make
05:05 - sure that the username is between two
05:06 - and twenty characters then we can use
05:08 - the length validator so let's include
05:10 - that in our imports so after data
05:12 - required
05:13 - I'll come up here and also import length
05:15 - and now we can add this to our list of
05:17 - validators as well so I'll say length
05:20 - and then we'll actually pass in some
05:22 - arguments to this length so I'll say min
05:24 - is equal to two and Max is equal to
05:27 - twenty and this line is getting a little
05:31 - long here so we can always break this up
05:33 - on multiple lines if need be so now we
05:35 - can see that we have a list of
05:36 - validators here of data required
05:38 - I mean meaning that it can't be empty
05:40 - and also a length validation that gives
05:43 - a minimum and a max amount that a
05:45 - username can be and that's why using
05:47 - this extension is so convenient because
05:49 - we don't have to write these from
05:50 - scratch okay so moving on let's write
05:54 - another field now and the next field
05:55 - that we're going to want is an email so
05:57 - I can just say email is equal to and
05:59 - that's also going to be a string field
06:02 - and the label that we want for that is
06:04 - going to be email and let's also pass in
06:07 - some validators for this as well so
06:10 - remember this is going to be a list and
06:12 - we want the data required for this email
06:15 - as well because we don't want them to
06:17 - leave that empty and also we're going to
06:19 - want to make sure that this is a valid
06:20 - email address and we can do that with
06:22 - the email validator so we also need to
06:24 - import that so up here at the top we can
06:27 - just import email and then pass that
06:30 - into our list of validators as well okay
06:33 - and lastly for this registration form we
06:35 - also need fields for a password and also
06:38 - a password confirmation so we'll need to
06:40 - use
06:41 - a password field for those so let's
06:43 - import that so right after this string
06:45 - field let's import password field and
06:48 - now we can add these in so I will say
06:51 - password is equal to this password field
06:55 - and we just want the label to this to be
06:58 - password and we also want some
07:01 - validators for this as well so let's
07:04 - pass in validators and the only one that
07:06 - we want for this is going to be data
07:08 - required I mean you could do a minimum
07:11 - length on this if you want but we won't
07:14 - for this specific application okay and
07:16 - now we also want a password confirmation
07:17 - so it's basically going to be the same
07:20 - as this field here but a little bit
07:24 - different so I'll just call this confirm
07:25 - password and for the label here I'll say
07:29 - confirm password and we will move these
07:32 - validators to the next line and we just
07:34 - want that to be a data required
07:36 - validator and that's good enough well
07:38 - actually there is going to be one more
07:39 - validation on this confirm password
07:41 - field because we want to make sure that
07:43 - the password and the password
07:45 - confirmation are equal so we need to use
07:48 - the equal to validator so up here in our
07:50 - imports I will import equal to and then
07:53 - I'll add that to our list of validators
07:55 - for the confirm password field so I will
07:59 - say equal to and now the argument here
08:02 - is the field that we want this to be
08:04 - equal to so we want this to be equal to
08:06 - the password field so we'll save that
08:08 - and let make sure that I closed
08:10 - everything out here correctly and I did
08:13 - okay so that is good so once we finish
08:15 - these forms we now need a submit button
08:18 - to send that information to us and we
08:20 - can do that with a submit field so now
08:23 - we need to import that so up here at the
08:25 - top I will import submit field and then
08:29 - we can add this field to our form just
08:31 - by coming down here into our class and
08:33 - then saying submit is equal to the
08:36 - submit field and the label for this
08:38 - since this is a registration form I'll
08:41 - just say sign up as the label here so
08:44 - that is going to finish up our
08:45 - registration form so now let's create a
08:47 - login form that will be pretty similar
08:49 - so I will just copy our registration
08:52 - form here and paste it on
08:54 - neath and now we'll just change this
08:56 - around to be a login form instead of a
08:58 - registration form so first I'm going to
09:01 - change the name of our class and I'll
09:03 - call this login form now first of all
09:06 - you can choose to either login with the
09:08 - username or the email it's up to you
09:10 - I like logins that use email instead of
09:12 - usernames because it's easy to forget a
09:14 - username and it's less easy to forget
09:16 - your email so I'm gonna use the email as
09:19 - the login form there and all of those
09:22 - validators for our email are going to
09:24 - remain the same they will also need to
09:27 - login with a password and all everything
09:30 - for that field will be the same we no
09:32 - longer need a confirm password because
09:34 - they did that when they registered and
09:36 - I'm also going to add a remember field
09:38 - to our login form and this will allow
09:41 - users to stay logged in for some time
09:43 - after their browser closes using a
09:45 - secure cookie so I'm going to put in a
09:48 - field here called remember and this is
09:51 - going to be a boolean field so let's
09:53 - come back up here to our imports on
09:56 - these fields and we're going to import
09:58 - boolean field which basically is a true
10:01 - or false so we can paste this in down
10:05 - here and we just want the label for this
10:08 - to be remember me now we need a submit
10:12 - button for this form as well but instead
10:14 - of sign up we want this label to be
10:16 - login okay so that is going to do it for
10:19 - those two forms for now now when we use
10:21 - these forms we need to set a secret key
10:24 - for our application a secret key will
10:26 - protect against modifying cookies and
10:28 - cross-site request forgery attacks and
10:31 - things like that it's simple to do we
10:33 - just need to go to the top of our
10:35 - application file here and right under
10:38 - our app variable we can set a secret key
10:41 - by saying app dot config and that is how
10:45 - you set config values on our application
10:46 - and this is going to be the secret key
10:51 - and we will set this equal to an empty
10:54 - string for now and ideally you want the
10:56 - secret key for your application to just
10:58 - be some random characters now a good way
11:01 - to get some a good set of random
11:02 - characters in Python is to pull up your
11:05 - command line and start the
11:08 - Python interpreter so I will do that now
11:09 - and I'm gonna use this built-in secrets
11:12 - module so I'm gonna say import secrets
11:15 - and to get a big random string of
11:17 - characters I'm just going to use the
11:19 - token hex method on this so I'm gonna
11:22 - say secrets dot token underscore hex
11:25 - then we can pass in a 16 here and that's
11:28 - 16 there is just the number of bytes so
11:31 - now I have a pretty good random string
11:33 - here and I'm just going to use this as
11:35 - my secret key in this video so I'll exit
11:37 - out of our Python interpreter and clear
11:40 - the screen and then go back to our
11:42 - application and paste that in here and
11:44 - you'll likely want to make this
11:46 - environment variable at some point and
11:47 - we'll look at doing that later on in the
11:49 - series okay so now let's use those forms
11:52 - that we created here in our application
11:54 - so first we need to import those forms
11:56 - and those are in the form stop py module
11:59 - so and it's within the same directory as
12:02 - this module here so we can just import
12:04 - directly from that so we can say from
12:06 - forms import and that was the
12:11 - registration form make sure I spell that
12:13 - correctly and the login form and now
12:17 - let's create some routes for our
12:18 - registration and login so we can see how
12:20 - these get converted to HTML so first
12:23 - let's create the registration route so
12:25 - down here above our main conditional I'm
12:30 - going to create another route so I'll
12:32 - copy one of these existing ones and I
12:35 - will call this route register and we
12:38 - need to change the function name as well
12:40 - and now we need to create an instance of
12:43 - our form that we're going to send to our
12:45 - application so we can say form is equal
12:49 - to registration form and we want to put
12:51 - in the parentheses there to create an
12:53 - instance of that and now we can pass
12:55 - this form to a template now we haven't
12:57 - created register or login templates yet
12:59 - but we will in just a second but I'll go
13:01 - ahead and pretend that they're there for
13:03 - now so I will say down here at the
13:06 - bottom return render template and we
13:10 - will create a template called register
13:12 - HTML so that's what I'll fill in there
13:15 - so now we can add in some additional
13:17 - information here so I'll pass in a title
13:20 - of register for that
13:21 - Paige and also we want to pass in our
13:24 - form so I would just say form is equal
13:27 - to form that way within that template we
13:30 - have access to this form instance here
13:33 - and now let's do the same thing for a
13:34 - login route now this is going to be
13:36 - pretty similar so I'm just going to copy
13:37 - our entire register route here and then
13:40 - change a few things so I will change the
13:42 - route and the function name to login we
13:46 - want this to be our login form we want
13:49 - to render the login dot HTML template we
13:53 - want the title to be login and we can
13:56 - say form equals form because now we're
13:58 - going to be passing in that instance of
14:00 - the login form so now that we have these
14:02 - routes created now we just need to
14:04 - create the templates that use these form
14:06 - variables that we just passed in so
14:08 - let's go ahead and create those
14:09 - templates so up here in my templates
14:11 - directory I am going to create two new
14:14 - files so I will recreate register dot
14:17 - HTML and I will also create new file
14:22 - called login dot HTML and now let's grab
14:25 - some code from our about page just to
14:27 - get us started so everything that just
14:29 - extends the layout and opens up that
14:31 - content block so I will do my register
14:35 - route first so I'll paste that in here
14:37 - so we can see that we're already
14:38 - extending our layout template and we
14:42 - learned how to do that in the last video
14:43 - when we looked at templates and now we
14:45 - want to put our form in the content
14:47 - section of this page and to do this
14:49 - there's going to be a little bit of
14:50 - typing so bear with me here but I will
14:53 - open up a div and this div I want to
14:56 - give the class of content section this
15:00 - is a style that I have in our main CSS
15:04 - file that will just make this look a
15:05 - little nicer and now we want to open up
15:07 - a form tag so we'll say form and we want
15:11 - the method of this form to be equal to
15:15 - post and we want the action here we'll
15:19 - just set the action equal to an empty
15:21 - string now that means that when we post
15:23 - this form it's just going to go back to
15:25 - the same route it's going to post that
15:27 - information to the same route that we're
15:29 - currently on ok so now we're ready to
15:31 - start putting in some form fields here
15:33 - now the first feel
15:35 - that we need is going to be one called
15:38 - form dot hidden underscore tag now
15:42 - remember when you're actually accessing
15:43 - variables in our template you do have to
15:45 - wrap it in these double curly braces
15:47 - here and then we are accessing the form
15:50 - instance that we passed in to this
15:52 - template and now we're using this hidden
15:54 - tag method here now that hidden tag is
15:56 - something that you need to add in but
15:58 - don't worry too much about what it does
15:59 - it's adding something called a CSRF
16:03 - token or a cross-site request forgery
16:05 - token and when I said earlier that
16:07 - setting our secret key for our
16:08 - application would protect our form
16:11 - against certain attacks
16:13 - well this hidden tag here is part of
16:15 - that protection so add it in but you
16:17 - don't need to worry about the underlying
16:18 - details but you definitely need it okay
16:20 - so now let's add in our other form
16:22 - fields here and I'm also going to add a
16:25 - couple of HTML and CSS classes here as
16:29 - well so I'll add a field set and we'll
16:32 - set a class here equal to form group and
16:35 - this is all bootstrap stuff just to make
16:36 - this look a little nicer and then we
16:39 - will pass in a legend
16:41 - so this is going to be the legend for
16:43 - our register form so I want this to say
16:46 - we'll say just join today and let's also
16:49 - give this some classes as well so I will
16:51 - give this a class of border bottom and
16:54 - also mb4 which is just a margin bottom
16:58 - with a value of 4 and now let's create
17:00 - our form groups and those are going to
17:02 - be within divs so I'm going to give this
17:05 - a class of form group as well so form -
17:09 - group and within this div now this is
17:12 - where we're going to actually use the
17:13 - fields from our form that we passed in
17:16 - so we're going to want those double
17:18 - curly braces and now we can say form dot
17:21 - user name dot label and that will print
17:25 - out the label from our user name field
17:27 - now we also want to give this a class as
17:29 - well so we can do that by putting in
17:32 - some parentheses here and passing in a
17:34 - class argument so I'll say class is
17:37 - equal to and we want this equal to a
17:40 - form control - label and again this is
17:44 - up this should be a dash here and again
17:47 - this is just some bootstrap stuff to
17:49 - make
17:49 - these look nicer okay so that would
17:50 - actually print out the form label there
17:53 - but we also want the field itself so I'm
17:56 - going to copy this and paste it in here
17:58 - but instead of just the label I'm going
18:01 - to do form dot username and the classes
18:03 - that I'm going to use for that is going
18:05 - to be form control and also form control
18:10 - - LG for large okay so now that we have
18:14 - one of those we can just copy and paste
18:16 - this for the rest of these so we'll do
18:19 - another form group here
18:20 - the next form group will be the email so
18:23 - I will change both of those there to
18:25 - form email dot label and form email and
18:29 - we'll keep those same classes and now we
18:31 - want to do the password field so I will
18:33 - paste that div and again and instead of
18:36 - username we want to change this to that
18:39 - use that password field and leave the
18:42 - same classes again now we want the
18:44 - confirm password field
18:46 - so we'll paste that in again and change
18:48 - both of these to confirm underscore
18:51 - password now if you're wondering where
18:53 - I'm getting these field names here these
18:56 - are the variable names that we specified
18:58 - here within our class so we want all of
19:02 - those to be equal to these variable
19:04 - names here so go back to that register
19:07 - template so that confirm password field
19:09 - is the last field that we want in our
19:12 - field set now we still have the submit
19:15 - button here so I'm going to create
19:18 - another form field div here and I just
19:21 - realized that all of these are spelled
19:23 - wrong and I've been copying those the
19:25 - whole time so I'm going to go back and
19:27 - change that so I will highlight all of
19:31 - those that say dir those need to be div
19:34 - for div and then I'll put a closing tag
19:37 - in for that one there and now we want to
19:39 - put our submit button so within this
19:42 - last form group here I'll put in our
19:44 - double curly braces we want to say form
19:46 - dot submit and we also want a class for
19:50 - this as well so we'll say class is equal
19:53 - to and we want a button clasp on this
19:56 - BTN and also BTN outline - info and
20:01 - that's like
20:02 - bootstrap that's a nice little blueish
20:04 - outline button that they will style for
20:06 - you okay so that will do it for our form
20:08 - now since we're on the register page
20:11 - you'll see on a lot of websites they'll
20:13 - have on the register page it'll say you
20:16 - know do you already have an account well
20:18 - if you have an account then just go and
20:19 - sign in instead of creating a new
20:21 - account so let's put something like that
20:23 - here as well so we'll add in another div
20:25 - below our form here actually below that
20:29 - div that the form was wrapped in and
20:31 - we'll give this a class as well so we'll
20:33 - say class is equal to we'll give this a
20:36 - border of top and also a padding top of
20:39 - a value of three and now within here
20:43 - let's do a some small text and let's
20:46 - give this small text a class of text -
20:51 - muted and that just kind of fades out
20:54 - the text a little bit and then we'll put
20:56 - in the text here already have an account
21:00 - question mark and that will put in a
21:02 - link to the login page so this is going
21:05 - to be an anchor tag
21:06 - I'll give this anchor tag a class of a
21:09 - margin left of two just to give it some
21:11 - spacing from that text there and now we
21:14 - want an href equal to and we want this
21:17 - to link to our login page so remember if
21:20 - you want to link somewhere it's always a
21:22 - good idea to use the URL for function so
21:25 - we'll say URL underscore four and we
21:28 - want to pass in the link to the login
21:32 - page now just remember that the value
21:34 - that we're passing in to the URL for
21:36 - function is not the name of the route
21:39 - it's the name of the route function so
21:41 - if I go back to our application we are
21:43 - actually passing in this value here not
21:46 - this so we want the name of the function
21:49 - so that's what we have there and now we
21:52 - need to close out this linker to anchor
21:54 - tag so I will give this text I'll say
21:57 - you know just sign in and then close out
21:59 - that anchor tag there okay so it's been
22:01 - a while since we viewed our application
22:03 - in the browser so let's save what we
22:05 - have now and see what we get so far so
22:08 - let me save this and now if I go back to
22:11 - our command line then we can run our
22:14 - current application by saying PI
22:16 - and then the name of our application so
22:18 - we didn't get any air so that's good so
22:20 - let's open up our page so that was local
22:24 - host on port 5000 and now let's go to
22:26 - that register page that we just created
22:28 - and see if we get that form so I'll say
22:33 - register and go to that form and we can
22:35 - see that this looks pretty good so far
22:37 - so we have our form legend here and then
22:40 - it did get all of those forms that we
22:42 - created in our forms file so we have our
22:44 - user name email password and confirm
22:46 - password and down here is that link
22:49 - where it says already have an account
22:50 - sign in that'll take us to our login
22:52 - route but we don't have anything in that
22:54 - template yet so it's just a blank page
22:55 - so let's go out and actually fill out
22:58 - this form so I'm going to just fill in
23:01 - some values here and then submit this to
23:05 - see what it currently does so now if I
23:08 - fill all that out and then click our
23:10 - submit button then we can see that it
23:12 - returns a method not allowed err and the
23:14 - reason that we get that is because it's
23:16 - submitting a post request back to the
23:19 - same register route with our form data
23:21 - but we currently don't accept post
23:24 - requests in that route so to accept a
23:26 - post request we need to add a list of
23:29 - allowed mess methods in our route so if
23:32 - I go back to sublime here and go to our
23:35 - flask application file up to our
23:38 - register route then we can add a list of
23:40 - allowed methods by passing in an
23:43 - argument of methods is equal to this is
23:46 - going to be a list and we want this to
23:49 - be equal to get so it accepts get
23:50 - requests and also post so it accepts
23:53 - post requests which is what we just made
23:55 - in the browser so now if I save that and
23:57 - go back to our browser and then reload
24:01 - our register page and we can fill this
24:04 - out again I'll just fill it out with
24:08 - some sample values here really fast and
24:10 - then hit the submit button then we can
24:13 - see that now we don't get that error but
24:14 - now it just posts the data and directs
24:16 - us right back to the register page so we
24:19 - have no idea if the form validated
24:21 - properly or not
24:22 - so before we wouldn't render our
24:24 - register template in our route let's put
24:26 - in a check in place that checks whether
24:28 - we have
24:29 - post data and that is and that that data
24:32 - is valid for our form so to do this I'm
24:35 - going to go back to our application here
24:38 - and after we create our form but before
24:40 - we return our template I'm going to use
24:43 - this validate on submit method so I'll
24:46 - say if form dot validate on submit and
24:51 - as you can probably tell by the name
24:52 - this will tell us if our form validated
24:55 - when it was submitted so now I'm going
24:58 - to use something called a flash message
25:00 - a flash message in flask is an easy way
25:03 - for us to send a one-time alert so first
25:06 - I'll have to import this and this is
25:08 - from flask
25:09 - so from flask I will import flash and
25:12 - then come back down here to our
25:14 - conditional and now we can add the
25:16 - message that we want to display when
25:18 - we've created a user successfully so I
25:20 - will say flash and pass in a message of
25:23 - and this is going to be an F string here
25:27 - since I'm going to pass in a variable so
25:28 - I'll say account created for and then we
25:32 - will pass in the form dot username dot
25:36 - data then we'll put an exclamation point
25:39 - after that as well now I'm using Python
25:41 - 3.6 and that's why I can use this F
25:45 - string here I suggest that everyone used
25:48 - the latest version that they can but if
25:50 - you're still below python 3.6 then
25:52 - you're gonna have to use the format
25:54 - method on that string to fill in that
25:56 - placeholder instead of this f string
25:58 - because the f strings are only Python 3
26:00 - 6 and above so if you get an error there
26:02 - then that's probably what it is
26:04 - ok so now we have a flashed message here
26:06 - but I want to be able to tell the
26:07 - difference between the different kinds
26:09 - of alerts so bootstrap has different
26:11 - alert styles for successes and warnings
26:13 - and errors and the flash function
26:15 - accepts a second argument that is called
26:18 - a category so I'm going to pass in the
26:20 - name of the bootstrap class that I want
26:22 - this alert to have and that is success
26:25 - so I'll put in a comma and pass in a
26:28 - second argument to this flash function
26:31 - here and this is going to be the string
26:33 - success ok and now that we've got our
26:36 - flashed message now let's redirect the
26:38 - user to a different page because you
26:40 - don't want to fill out a form and then
26:41 - just get redirected back
26:43 - the same form after you submit it that
26:45 - would be a little confusing for the user
26:47 - so instead we'll redirect the user to
26:49 - the home page so to do this we're going
26:51 - to need to import the redirect function
26:54 - and that is from flask so I'll come back
26:57 - up here to the top and after our last
27:00 - import I'll also import redirect then
27:03 - come back down here inside of our
27:06 - conditional so when the form validates
27:08 - properly we will say return redirect and
27:11 - we want to redirect to the URL for so
27:16 - we'll use that route URL for function
27:17 - again and if we want this to redirect to
27:20 - our home page and again that is the name
27:23 - of the function for that route so we're
27:25 - redirecting to here okay so this should
27:27 - all work except for one thing we haven't
27:30 - updated our template to actually show
27:32 - the flashed messages yet so I'm going to
27:35 - put this within our layout template so
27:37 - that flashed messages pop up on any page
27:40 - so I'm going to open up our layout dot
27:42 - HTML and let's just assume that we want
27:45 - to display any of our flash messages up
27:47 - here at the top of our content so I will
27:50 - come down to our block content here and
27:54 - now right above this content I'm going
27:56 - to display these messages so I'm going
27:58 - to open up a code block so that is a
28:01 - curly brace two parentheses and then the
28:04 - closed curly brace and let me get rid of
28:07 - that one there and in this code block
28:09 - we're going to use a with statement so I
28:11 - will say with messages equal to get
28:16 - flashed messages and this is a function
28:19 - that will get the flashed messages that
28:21 - we send to this template and we want to
28:23 - also pass in an argument here of with
28:26 - categories equal to true now that with
28:30 - categories equal to true will allow us
28:33 - to grab this success category that we
28:36 - passed in to that flashed message which
28:39 - is the bootstrap class that we're going
28:40 - to use and so now I'm going to close off
28:44 - this block so I will put in a closed
28:50 - block here and say end with now within
28:54 - our block here
28:57 - we want to print out any messages if
28:59 - there were messages returned from this
29:01 - get flashed messages function so we can
29:04 - open up a another code block and we'll
29:07 - say if messages and then we'll also
29:10 - close off that code block as well so
29:14 - we'll say end if and now within here
29:18 - this will mean that if messages was not
29:21 - empty then it means that we have some
29:22 - flashed messages to display so now we
29:24 - can loop over those flashed messages so
29:27 - I'm going to open up another code block
29:28 - I know this is getting a little nested
29:30 - here but we can say for category comma
29:34 - message in those messages so since we
29:38 - said with categories equal true we're
29:41 - going to get two values from these
29:42 - messages so for category and message in
29:45 - messages and now we can end this block
29:48 - as well
29:49 - so we'll say end four and now within
29:52 - here we can finally print out this
29:55 - message so I will create a div within
29:58 - here and this div I'm going to give a
30:01 - class equal to and we want to set this
30:04 - equal to alert and also alert - and then
30:08 - the category value so if we want to put
30:11 - in a value we need those double curly
30:13 - braces and we're going to set this equal
30:15 - to category so for example since we
30:17 - passed in success this class is going to
30:20 - be assigned alert - success and we'll
30:24 - see this in action in just a second so
30:26 - now within this div we want to actually
30:29 - print out this message so I'll just pass
30:31 - in our message variable within our curly
30:34 - braces there okay so now that we have
30:36 - all of that in place let's make sure
30:37 - that it all works if our forum validates
30:40 - properly so let's open back up our site
30:42 - let's make sure that our server is still
30:45 - running and it's not so you might see
30:47 - this sometimes if you actually save your
30:49 - file and there's a syntax error at the
30:52 - time that you save it then it might shut
30:54 - down your development server so to run
30:56 - that again you can just rerun the file
30:58 - again so now we don't have any errors so
31:01 - that's good so let's go back to our site
31:03 - and reload our register page
31:05 - and load that up and now I'm going to
31:08 - fill out this form correctly so that it
31:10 - will validate so I'm going to pass in
31:13 - valid emails and passwords and all of
31:16 - that and now if I submit this valid form
31:20 - then we can see that we got redirected
31:21 - back to our home page with our flash
31:23 - message that an account was created for
31:26 - our username and in that case our
31:28 - username was CMS now we didn't actually
31:31 - create an account for that user we will
31:33 - need a database for that and that is
31:35 - what we'll be covering in the next video
31:36 - but now we know our forums are
31:39 - validating correctly and giving us some
31:41 - feedback now these flash messages are
31:43 - nice but like I said they are only a
31:45 - one-time alert so if I reload this
31:48 - homepage then we can see that that flash
31:50 - message goes away okay so lastly let's
31:53 - give some validation feedback to our end
31:55 - user so that if they input incorrect
31:58 - information then they know exactly what
32:00 - it is that they did wrong and what they
32:02 - need to fix so if I go back to our
32:05 - registration form and if I fill this out
32:08 - but I give a bad email address I'll just
32:11 - put in some gibberish there and do the
32:14 - password correct then submit that then
32:17 - we can see that it just sends us back to
32:19 - our form because our form was invalid
32:21 - but we have no feedback for our user as
32:23 - to why it was invalid so let's go back
32:25 - to our registration template and fix
32:27 - this so I open back up our editor here
32:30 - and open up that register template so
32:33 - for each field that we have here
32:34 - each of those fields will actually have
32:36 - a list of errors if that field was
32:38 - invalid so we can open up a conditional
32:41 - and print out those errors so the way
32:44 - that this is done in bootstrap is that
32:46 - you add a class of is and valid to your
32:49 - field and then you put a div underneath
32:52 - that with the class of invalid feedback
32:55 - and then put in the error there so let's
32:58 - see what this looks like so I'm going to
33:00 - go underneath our label here and I'm
33:03 - going to just keep this valid feedback
33:07 - form here and now let's put in one that
33:10 - has errors so I'm going to open up a
33:12 - code block here and this is going to be
33:14 - an if statement so I'll say if form dot
33:18 - username dot
33:19 - ere's so it's only going to hit this
33:21 - conditional if we have any heirs and
33:23 - then I can end this if block so I will
33:28 - put in a code block here and say end if
33:30 - and now within here we want our username
33:34 - field just like we have on the outside
33:36 - here but we also want to add a class of
33:39 - is invalid to that field and underneath
33:43 - that invalid field we also want to give
33:46 - a div with a class to invalid - feedback
33:53 - and now within this div we want to print
33:57 - out all of the errors that we have so
33:59 - I'll open up a another code block here
34:02 - and this is going to be a for loop so
34:04 - we'll say for errors in and fix that
34:07 - typo there so we're going to say for
34:10 - errors in form dot username err so I'll
34:14 - just copy and paste that there and then
34:15 - I will close out this for loop by saying
34:20 - in for and we will just print out a span
34:24 - of all of these errors so we want to
34:27 - print out this error and actually here I
34:31 - should have said for error and errors
34:33 - not errors so I will print out that
34:36 - error variable there from the for loop
34:38 - okay so I know that this is kind of a
34:40 - long section here but hopefully that all
34:42 - made sense
34:43 - so if our form had errors on it
34:46 - then it will print out this form field
34:49 - and also these errors but if we have no
34:52 - errors then we just want to print out
34:53 - what we had before so we can put this
34:57 - inside of the else block of this if
35:00 - statement so I will put in an else here
35:03 - and that is where we will move the valid
35:05 - form or the valid of field from that
35:09 - section so I will paste that in there
35:12 - now I know that this can look like a lot
35:14 - here just to print out the validation
35:16 - errors and honestly forms and validation
35:19 - is really where the Flast bootstrap
35:21 - extension has some advantages but I
35:23 - still like doing these myself because I
35:25 - like to be able to easily be able to
35:28 - make design decisions if I want to
35:30 - change the look of something and I feel
35:32 - like you just have more control
35:33 - overdoing that if you do it manually
35:35 - okay so now we want to put in these
35:37 - validation errors for all of the form or
35:40 - all of the field sections in our form so
35:43 - I'm going to copy and paste this in
35:45 - every section so I'm just going to
35:46 - overwrite the valid input for the email
35:49 - and also for the password and also for
35:53 - the confirm password now I just paste it
35:56 - in the username field for all those so
35:59 - now I'm going to change that now I'm
36:00 - going to use the multi cursor
36:02 - functionality within sublime text but
36:04 - you could use a Find and Replace
36:06 - functionality within your editor so
36:08 - within sublime text I can just highlight
36:11 - all of these here and change these all
36:13 - at once so instead of form dot username
36:15 - we want that to be formed email so now
36:18 - I'll go down here to our password group
36:20 - and change these user names to password
36:25 - and now go down here to our confirm
36:28 - password group highlight all those user
36:31 - names and change that to confirm
36:34 - password now if you misspelled any of
36:37 - this or run into any problems at this
36:40 - point then remember I do have all of the
36:42 - source code for these videos on my
36:44 - github and you can always copy and paste
36:46 - from there so that you can be sure that
36:47 - you didn't make any small mistakes here
36:50 - or there and the link for that is in the
36:51 - description section below okay so
36:53 - speaking of which let's make sure that I
36:55 - didn't make any small mistakes by making
36:57 - sure that this form validation is now
36:59 - working so let's save that and make sure
37:02 - that our server is still running and it
37:05 - is and pull up our website and we will
37:08 - reload our register page and first let's
37:11 - just submit a form with zero information
37:13 - so if I just submit this form then we
37:16 - can see that we get the few the feedback
37:17 - on every single field that says that
37:19 - this field is required and it's those
37:22 - bootstrap classes that we added in that
37:24 - handles the coloring of the red text and
37:27 - the red outline on the actual field
37:29 - there so now if I put a user name that
37:31 - is too short
37:32 - remember if we said that a user name has
37:34 - to be at least two characters and also
37:37 - an invalid email so I'll just put in an
37:40 - email of Cori and also I'll put in
37:42 - passwords that don't match so I'll do
37:45 - this one and just say testing and then
37:47 - the
37:47 - when I'll put in some gibberish so now
37:49 - if I hit submit then we can see now that
37:51 - it's telling us that our field must be
37:53 - between 2 and 20 20 characters long and
37:56 - that we have an invalid email address
37:58 - and also that this field must be equal
38:00 - to the password and if we had multiple
38:03 - errors on any of these than it would
38:05 - show all of those as well so we're
38:07 - getting some good feedback here to let
38:08 - the user know exactly what they need to
38:10 - fix in order to create their account
38:12 - properly ok so we're almost finished up
38:15 - but we were also going to do our login
38:17 - page now this is going to be a lot
38:19 - faster because we've already done most
38:21 - of this work for the register page so
38:23 - let's copy our register template to our
38:26 - login template so I'll go back to our
38:28 - page here and copy this big long
38:31 - register template here into our blank
38:34 - login template and now there are some
38:36 - things that we need to change with this
38:39 - form so here at the top we will change
38:41 - our legend and our legend we will change
38:44 - to log in and remember we were logging
38:48 - in with our email and not our username
38:50 - so I'm just going to get rid of this
38:52 - entire form group div here that
38:54 - contained our username so I'll get rid
38:56 - of that we're going to keep the email we
38:59 - are going to keep the password this
39:02 - confirmed password we no longer need so
39:04 - we can get rid of that form group now we
39:07 - did have that Remember Me field that we
39:09 - needed to add in but this is going to be
39:11 - a little different from the other fields
39:13 - so this is going to be a div and this is
39:17 - going to be a bootstrap class equal to
39:20 - form
39:21 - - check since it's going to be a
39:23 - checkbox and we don't need any
39:25 - complicated validations here because
39:26 - this is either going to be checked or
39:28 - not checked there's not really anything
39:30 - that you can do wrong here so now we can
39:33 - just put in these field values so first
39:36 - I'll put in the check box so we'll say
39:37 - form a form dot remember and we want to
39:41 - pass a class into this so we will say
39:43 - that this class is equal to form - check
39:47 - - input and also we want to pass in the
39:51 - label for this field so we'll just copy
39:53 - that paste it in below here so this is
39:55 - going to be form dot remember dot label
39:59 - and instead of 4
40:01 - check input this is going to be form
40:02 - check label for the class there now also
40:05 - on most login pages you'll see a link
40:08 - for if you forgot your password then you
40:10 - can do a password reset so let's add one
40:13 - of those in as well so I'll put that
40:15 - right after our submit button and right
40:18 - after our submit button I'll just do a
40:19 - small tag here and I'll give this a
40:22 - class of text muted just to make that a
40:27 - little subtle I also give it a margin
40:29 - left of two just to spread it away from
40:33 - that submit button a little bit and now
40:35 - we want to add in an anchor tag here now
40:38 - we don't have a URL for this forgot
40:41 - password link yet that we'll be doing
40:43 - later in the series so if you ever just
40:45 - want to do a dummy link then you can
40:48 - just put in a pound sign there and that
40:51 - will just be a link that goes nowhere so
40:53 - for the text for this for this link I'll
40:57 - say forgot password with a question mark
41:00 - and also on our register page I said
41:03 - that there's usually something that says
41:05 - you know do you already have an account
41:06 - well then you can sign in here also on
41:10 - most login pages you'll see something
41:12 - that says something like well do you
41:14 - need an account well you can register
41:16 - here so that's what we'll put here so
41:18 - we'll say need an account and instead of
41:22 - putting a URL for our login page we'll
41:24 - put in a URL for our register page and
41:27 - this the text for this link will just
41:30 - say sign up now okay so now with those
41:33 - changes in place if we save those and
41:36 - pull back up our website so our server
41:38 - is still running if now we go to our
41:40 - login page then we can see that now we
41:43 - have our login form okay so this is
41:45 - looking pretty good now we don't
41:47 - currently have any users but let's put
41:49 - some temporary code in here to simulate
41:52 - a successful login so I'm going to go
41:54 - back to our application code and go down
41:58 - to our login route and we also want to
42:01 - see if this form is valid on submission
42:04 - as well so we'll copy this conditional
42:06 - here and paste this in now that means
42:09 - that we also need to accept post
42:11 - requests to this route as well
42:12 - so just like we did with our register
42:14 - let's copy this section that allows post
42:18 - requests to our login route and now
42:21 - within our conditional let's just put in
42:23 - some fake data here for now to simulate
42:25 - a successful login so I'm just going to
42:28 - say if form dot email dot data so that's
42:32 - the data that was submitted in the email
42:34 - form if that is equal to admin at
42:39 - blog.com and our form dot password dot
42:46 - data is equal to and we will just do a
42:49 - password of password which is normally a
42:53 - bad idea but this is just going to be
42:55 - temporary here until we get our database
42:58 - setup so if they submit our login form
43:00 - with an email of admin at blog comm and
43:03 - a password of password then we want to
43:05 - simulate a successful login so we'll do
43:08 - a flashed message like we saw before and
43:10 - this is just going to say you have been
43:14 - logged in exclamation point and remember
43:17 - we want to pass in a category in here
43:20 - that'll be the bootstrap class and
43:21 - that'll be a bootstrap class of success
43:25 - and then we can return a redirect to our
43:30 - home page so we'll do URL for and go to
43:34 - that home route and now we'll just say
43:37 - that any other submissions are invalid
43:40 - so we will put in an else statement here
43:43 - so anything that isn't an email of admin
43:47 - blog and a password a password then
43:49 - we'll say that that's an unsuccessful
43:50 - login so we will put in a flash message
43:53 - here and say login unsuccessful please
43:59 - please check user name and password
44:04 - okay now instead of passing in a
44:06 - category of success there we really want
44:09 - this to be like a Red Alert
44:10 - and in bootstrap that class is called
44:13 - danger for the alert and now at this
44:17 - point we don't want to return anything
44:19 - because it will just fall down here to
44:21 - this render template where it renders
44:24 - the login page again so I will clean
44:27 - that up
44:28 - and save that okay so if we did all of
44:30 - that correctly
44:31 - then we should be able to do a fake
44:33 - login with the email that we specified
44:36 - here and our fake password so let's make
44:39 - sure okay so we had I save that when we
44:42 - had a mistake in our file so if I rerun
44:46 - our server there now our server is
44:48 - running so our web shot site should be
44:50 - running as well I'll go back and reload
44:52 - our login page and let's just try to
44:55 - login with some incorrect credentials so
44:58 - I'll say test at test comm and some
45:02 - made-up password so if I login then we
45:04 - can see that we get that red danger
45:06 - alert that says login unsuccessful
45:09 - please check user name and password so
45:11 - now if we change this to what we
45:14 - specified so admin at blog comm and a
45:17 - password of password if we login we get
45:21 - redirected to our home route and it says
45:23 - you have been logged in okay so now one
45:26 - very quick thing here and then we'll be
45:28 - finished up with the video when I pasted
45:30 - in the snippet of our navigation bar
45:32 - into our layout template the navigation
45:35 - bar currently is using direct links to
45:38 - our different routes and this works fine
45:40 - sometimes but if we ever change our
45:42 - routes for any reason then we want our
45:44 - website to pick that up automatically
45:46 - instead of us needing to remember to
45:48 - change it in multiple locations and as
45:51 - we've seen several times now we can do
45:53 - this with that URL for function that
45:55 - we've already used a couple of times and
45:57 - you definitely want to utilize that
45:58 - function a lot because it makes linking
46:00 - to different pages pretty effortless so
46:03 - the only reason I didn't do this in the
46:05 - last video is because our login and
46:07 - register routes didn't exist yet and
46:09 - using URL for to a non-existent route
46:12 - will throw an error so let's see what
46:15 - this looks like to convert existing
46:16 - links to use that URL for function so
46:19 - let's go back to our project and open up
46:23 - our layout template so I still have that
46:26 - open here and now we want to go down to
46:28 - our navigation links so our navigation
46:31 - links are up here in our header so they
46:34 - are right here and right now you can see
46:36 - that these are direct links to you know
46:39 - ford slash about ford slash login button
46:41 - says let's change these to use the URL
46:43 - for function so I will put in those
46:45 - double curly braces say URL four and we
46:49 - want this to be the URL for home and
46:51 - I'll just copy this and do the same for
46:54 - our other routes so this will be the URL
46:57 - for about this will be the URL for login
47:02 - and this will be the URL for register so
47:08 - just make sure that worked if we go back
47:10 - to our website and reload our homepage
47:12 - and we should be able to click around
47:14 - and see the forms that we've created and
47:16 - go to all of these different links with
47:20 - no problem okay so I think that is going
47:22 - to do it for this video I hope that now
47:23 - you have a good understanding for how we
47:25 - can work with forums and flask and also
47:27 - how we can validate the data that the
47:29 - user sends to our route and in the next
47:31 - video we'll learn how to use a database
47:33 - so that we can actually store this
47:35 - information and implement a real
47:37 - registration and login system so if
47:40 - anyone has any questions about what we
47:41 - covered in this video then feel free to
47:43 - ask in the comment section below and
47:44 - I'll do my best to answer those and if
47:46 - you enjoyed these tutorials and would
47:47 - like to support them then there are some
47:49 - ways you can do that the easiest way is
47:50 - to simply like the video and give it a
47:52 - thumbs up and also it's a huge help to
47:53 - share these videos with anyone who you
47:55 - think would find them useful and if you
47:56 - have the means you can contribute
47:57 - through patreon and there's a link to
47:59 - that page in a description section below
48:00 - be sure to subscribe for future videos
48:02 - and thank you all for watching
48:14 - you

Cleaned transcript:

hey there how's it going everybody in this video we'll continue with our Flash series by learning how to create forms and also how to validate user input so the application that we're going to be creating is going to have the ability for users to create accounts login make posts and logout and things like that and the first part of that process is to create a registration page where a user can create an account on the website and then be able to log in and log out and that's what we're going to be doing in this video so let's go ahead and get started now if you were to create forms from scratch then that can get pretty complicated pretty fast you would have to put in different kinds of validation checks to make sure that the user was inserting information correctly you'd also have to make sure that their passwords matched and you might have to write some regular expressions to make sure that they entered a valid email and things like that but luckily this process is so common that we don't have to reinvent the wheel there are extensions out there that have already put in all the hard work so that you don't have to and the most popular extension for working with forms and flask is called WT forms and that's what we're going to be using in this video so first we have to install this and we can do this with a simple pip install so I'm here with in my virtual environment but you could also do this without a virtual environment so I will say pip install and that is flask WTF for WT forms so we'll run that and go through the installation and once that's installed I'm going to open up our existing project and our text editor so I'm going to open up sublime text here and now let's create a file where we can put these forms so I'm going to create another file in our project directory and I'm going to call this forms dot p/y now these forms could go directly into that application module that we've been writing but it's best to split things like this out into their own files so that everything has its own place that way if we need to update a form in the future then we know exactly where to look so it's better to have this stuff split up into smaller more manageable sections of code rather than one larger application file where everything is in one place and hard to find okay so now within this file let's create our forms so first let's import this into our application by saying from flask underscore WTF import and we want to import flask for now if you've done web development for some time and then you may be used to writing forms in HTML and this is going to be a little different using this flask extension so we will actually be writing Python classes that will be representative of our forms and then they will automatically be converted in the HTML forms within our template so let's see how to do this so let's say that we wanted to create a registration form then we can create a registration form class so I'm going to come down here and say class and then we will call this registration form and this will inherit from flask form and now within our form we're going to have different form fields and these form fields are all going to be imported classes as well so for example let's say that the first field that we want in our form is a user name and the user name is going to be a string field and this won't be imported from the flask wdf package but instead the WT forms package and that was also installed with the PIP install so we don't need to do anything extra there so we can just say from WT forms and then we can import this string field class and now within our registration form class we can create a new attribute and we can just say username is equal to and then this will be a string field and then the first argument here is the name of this field so I'll call this user name and that is also going to be used as the label and our HTML okay so that's easy enough to create that but now also when it comes to user names there might be a few limitations that we want to put in place so first of all we want to make sure they actually put something for their username and just don't leave it empty or blank second we wouldn't want a user to be able to create a username that's you know 50 characters long because then it would look weird on our website so let's say that we want to allow user names that are between between 2 and 20 characters so to put these checks and validations in place we can use something called validators and they will be another argument that we pass in to our field so let's add a list of what we want validated by coming in here and passing in another argument and this will be validators and this is going to be equal to a list of validations that we want to check and just like with the fields these validators are also going to be classes that we import so to make sure a field isn't empty we can use the data required validator so let's import that and this is going to come from WT forms dot validators and then we can import that data required validator and then we can just add that to our list of validator so I'll copy that and paste it in here and put in these parentheses and be sure that you have those parentheses after the class okay so now if we want to make sure that the username is between two and twenty characters then we can use the length validator so let's include that in our imports so after data required I'll come up here and also import length and now we can add this to our list of validators as well so I'll say length and then we'll actually pass in some arguments to this length so I'll say min is equal to two and Max is equal to twenty and this line is getting a little long here so we can always break this up on multiple lines if need be so now we can see that we have a list of validators here of data required I mean meaning that it can't be empty and also a length validation that gives a minimum and a max amount that a username can be and that's why using this extension is so convenient because we don't have to write these from scratch okay so moving on let's write another field now and the next field that we're going to want is an email so I can just say email is equal to and that's also going to be a string field and the label that we want for that is going to be email and let's also pass in some validators for this as well so remember this is going to be a list and we want the data required for this email as well because we don't want them to leave that empty and also we're going to want to make sure that this is a valid email address and we can do that with the email validator so we also need to import that so up here at the top we can just import email and then pass that into our list of validators as well okay and lastly for this registration form we also need fields for a password and also a password confirmation so we'll need to use a password field for those so let's import that so right after this string field let's import password field and now we can add these in so I will say password is equal to this password field and we just want the label to this to be password and we also want some validators for this as well so let's pass in validators and the only one that we want for this is going to be data required I mean you could do a minimum length on this if you want but we won't for this specific application okay and now we also want a password confirmation so it's basically going to be the same as this field here but a little bit different so I'll just call this confirm password and for the label here I'll say confirm password and we will move these validators to the next line and we just want that to be a data required validator and that's good enough well actually there is going to be one more validation on this confirm password field because we want to make sure that the password and the password confirmation are equal so we need to use the equal to validator so up here in our imports I will import equal to and then I'll add that to our list of validators for the confirm password field so I will say equal to and now the argument here is the field that we want this to be equal to so we want this to be equal to the password field so we'll save that and let make sure that I closed everything out here correctly and I did okay so that is good so once we finish these forms we now need a submit button to send that information to us and we can do that with a submit field so now we need to import that so up here at the top I will import submit field and then we can add this field to our form just by coming down here into our class and then saying submit is equal to the submit field and the label for this since this is a registration form I'll just say sign up as the label here so that is going to finish up our registration form so now let's create a login form that will be pretty similar so I will just copy our registration form here and paste it on neath and now we'll just change this around to be a login form instead of a registration form so first I'm going to change the name of our class and I'll call this login form now first of all you can choose to either login with the username or the email it's up to you I like logins that use email instead of usernames because it's easy to forget a username and it's less easy to forget your email so I'm gonna use the email as the login form there and all of those validators for our email are going to remain the same they will also need to login with a password and all everything for that field will be the same we no longer need a confirm password because they did that when they registered and I'm also going to add a remember field to our login form and this will allow users to stay logged in for some time after their browser closes using a secure cookie so I'm going to put in a field here called remember and this is going to be a boolean field so let's come back up here to our imports on these fields and we're going to import boolean field which basically is a true or false so we can paste this in down here and we just want the label for this to be remember me now we need a submit button for this form as well but instead of sign up we want this label to be login okay so that is going to do it for those two forms for now now when we use these forms we need to set a secret key for our application a secret key will protect against modifying cookies and crosssite request forgery attacks and things like that it's simple to do we just need to go to the top of our application file here and right under our app variable we can set a secret key by saying app dot config and that is how you set config values on our application and this is going to be the secret key and we will set this equal to an empty string for now and ideally you want the secret key for your application to just be some random characters now a good way to get some a good set of random characters in Python is to pull up your command line and start the Python interpreter so I will do that now and I'm gonna use this builtin secrets module so I'm gonna say import secrets and to get a big random string of characters I'm just going to use the token hex method on this so I'm gonna say secrets dot token underscore hex then we can pass in a 16 here and that's 16 there is just the number of bytes so now I have a pretty good random string here and I'm just going to use this as my secret key in this video so I'll exit out of our Python interpreter and clear the screen and then go back to our application and paste that in here and you'll likely want to make this environment variable at some point and we'll look at doing that later on in the series okay so now let's use those forms that we created here in our application so first we need to import those forms and those are in the form stop py module so and it's within the same directory as this module here so we can just import directly from that so we can say from forms import and that was the registration form make sure I spell that correctly and the login form and now let's create some routes for our registration and login so we can see how these get converted to HTML so first let's create the registration route so down here above our main conditional I'm going to create another route so I'll copy one of these existing ones and I will call this route register and we need to change the function name as well and now we need to create an instance of our form that we're going to send to our application so we can say form is equal to registration form and we want to put in the parentheses there to create an instance of that and now we can pass this form to a template now we haven't created register or login templates yet but we will in just a second but I'll go ahead and pretend that they're there for now so I will say down here at the bottom return render template and we will create a template called register HTML so that's what I'll fill in there so now we can add in some additional information here so I'll pass in a title of register for that Paige and also we want to pass in our form so I would just say form is equal to form that way within that template we have access to this form instance here and now let's do the same thing for a login route now this is going to be pretty similar so I'm just going to copy our entire register route here and then change a few things so I will change the route and the function name to login we want this to be our login form we want to render the login dot HTML template we want the title to be login and we can say form equals form because now we're going to be passing in that instance of the login form so now that we have these routes created now we just need to create the templates that use these form variables that we just passed in so let's go ahead and create those templates so up here in my templates directory I am going to create two new files so I will recreate register dot HTML and I will also create new file called login dot HTML and now let's grab some code from our about page just to get us started so everything that just extends the layout and opens up that content block so I will do my register route first so I'll paste that in here so we can see that we're already extending our layout template and we learned how to do that in the last video when we looked at templates and now we want to put our form in the content section of this page and to do this there's going to be a little bit of typing so bear with me here but I will open up a div and this div I want to give the class of content section this is a style that I have in our main CSS file that will just make this look a little nicer and now we want to open up a form tag so we'll say form and we want the method of this form to be equal to post and we want the action here we'll just set the action equal to an empty string now that means that when we post this form it's just going to go back to the same route it's going to post that information to the same route that we're currently on ok so now we're ready to start putting in some form fields here now the first feel that we need is going to be one called form dot hidden underscore tag now remember when you're actually accessing variables in our template you do have to wrap it in these double curly braces here and then we are accessing the form instance that we passed in to this template and now we're using this hidden tag method here now that hidden tag is something that you need to add in but don't worry too much about what it does it's adding something called a CSRF token or a crosssite request forgery token and when I said earlier that setting our secret key for our application would protect our form against certain attacks well this hidden tag here is part of that protection so add it in but you don't need to worry about the underlying details but you definitely need it okay so now let's add in our other form fields here and I'm also going to add a couple of HTML and CSS classes here as well so I'll add a field set and we'll set a class here equal to form group and this is all bootstrap stuff just to make this look a little nicer and then we will pass in a legend so this is going to be the legend for our register form so I want this to say we'll say just join today and let's also give this some classes as well so I will give this a class of border bottom and also mb4 which is just a margin bottom with a value of 4 and now let's create our form groups and those are going to be within divs so I'm going to give this a class of form group as well so form group and within this div now this is where we're going to actually use the fields from our form that we passed in so we're going to want those double curly braces and now we can say form dot user name dot label and that will print out the label from our user name field now we also want to give this a class as well so we can do that by putting in some parentheses here and passing in a class argument so I'll say class is equal to and we want this equal to a form control label and again this is up this should be a dash here and again this is just some bootstrap stuff to make these look nicer okay so that would actually print out the form label there but we also want the field itself so I'm going to copy this and paste it in here but instead of just the label I'm going to do form dot username and the classes that I'm going to use for that is going to be form control and also form control LG for large okay so now that we have one of those we can just copy and paste this for the rest of these so we'll do another form group here the next form group will be the email so I will change both of those there to form email dot label and form email and we'll keep those same classes and now we want to do the password field so I will paste that div and again and instead of username we want to change this to that use that password field and leave the same classes again now we want the confirm password field so we'll paste that in again and change both of these to confirm underscore password now if you're wondering where I'm getting these field names here these are the variable names that we specified here within our class so we want all of those to be equal to these variable names here so go back to that register template so that confirm password field is the last field that we want in our field set now we still have the submit button here so I'm going to create another form field div here and I just realized that all of these are spelled wrong and I've been copying those the whole time so I'm going to go back and change that so I will highlight all of those that say dir those need to be div for div and then I'll put a closing tag in for that one there and now we want to put our submit button so within this last form group here I'll put in our double curly braces we want to say form dot submit and we also want a class for this as well so we'll say class is equal to and we want a button clasp on this BTN and also BTN outline info and that's like bootstrap that's a nice little blueish outline button that they will style for you okay so that will do it for our form now since we're on the register page you'll see on a lot of websites they'll have on the register page it'll say you know do you already have an account well if you have an account then just go and sign in instead of creating a new account so let's put something like that here as well so we'll add in another div below our form here actually below that div that the form was wrapped in and we'll give this a class as well so we'll say class is equal to we'll give this a border of top and also a padding top of a value of three and now within here let's do a some small text and let's give this small text a class of text muted and that just kind of fades out the text a little bit and then we'll put in the text here already have an account question mark and that will put in a link to the login page so this is going to be an anchor tag I'll give this anchor tag a class of a margin left of two just to give it some spacing from that text there and now we want an href equal to and we want this to link to our login page so remember if you want to link somewhere it's always a good idea to use the URL for function so we'll say URL underscore four and we want to pass in the link to the login page now just remember that the value that we're passing in to the URL for function is not the name of the route it's the name of the route function so if I go back to our application we are actually passing in this value here not this so we want the name of the function so that's what we have there and now we need to close out this linker to anchor tag so I will give this text I'll say you know just sign in and then close out that anchor tag there okay so it's been a while since we viewed our application in the browser so let's save what we have now and see what we get so far so let me save this and now if I go back to our command line then we can run our current application by saying PI and then the name of our application so we didn't get any air so that's good so let's open up our page so that was local host on port 5000 and now let's go to that register page that we just created and see if we get that form so I'll say register and go to that form and we can see that this looks pretty good so far so we have our form legend here and then it did get all of those forms that we created in our forms file so we have our user name email password and confirm password and down here is that link where it says already have an account sign in that'll take us to our login route but we don't have anything in that template yet so it's just a blank page so let's go out and actually fill out this form so I'm going to just fill in some values here and then submit this to see what it currently does so now if I fill all that out and then click our submit button then we can see that it returns a method not allowed err and the reason that we get that is because it's submitting a post request back to the same register route with our form data but we currently don't accept post requests in that route so to accept a post request we need to add a list of allowed mess methods in our route so if I go back to sublime here and go to our flask application file up to our register route then we can add a list of allowed methods by passing in an argument of methods is equal to this is going to be a list and we want this to be equal to get so it accepts get requests and also post so it accepts post requests which is what we just made in the browser so now if I save that and go back to our browser and then reload our register page and we can fill this out again I'll just fill it out with some sample values here really fast and then hit the submit button then we can see that now we don't get that error but now it just posts the data and directs us right back to the register page so we have no idea if the form validated properly or not so before we wouldn't render our register template in our route let's put in a check in place that checks whether we have post data and that is and that that data is valid for our form so to do this I'm going to go back to our application here and after we create our form but before we return our template I'm going to use this validate on submit method so I'll say if form dot validate on submit and as you can probably tell by the name this will tell us if our form validated when it was submitted so now I'm going to use something called a flash message a flash message in flask is an easy way for us to send a onetime alert so first I'll have to import this and this is from flask so from flask I will import flash and then come back down here to our conditional and now we can add the message that we want to display when we've created a user successfully so I will say flash and pass in a message of and this is going to be an F string here since I'm going to pass in a variable so I'll say account created for and then we will pass in the form dot username dot data then we'll put an exclamation point after that as well now I'm using Python 3.6 and that's why I can use this F string here I suggest that everyone used the latest version that they can but if you're still below python 3.6 then you're gonna have to use the format method on that string to fill in that placeholder instead of this f string because the f strings are only Python 3 6 and above so if you get an error there then that's probably what it is ok so now we have a flashed message here but I want to be able to tell the difference between the different kinds of alerts so bootstrap has different alert styles for successes and warnings and errors and the flash function accepts a second argument that is called a category so I'm going to pass in the name of the bootstrap class that I want this alert to have and that is success so I'll put in a comma and pass in a second argument to this flash function here and this is going to be the string success ok and now that we've got our flashed message now let's redirect the user to a different page because you don't want to fill out a form and then just get redirected back the same form after you submit it that would be a little confusing for the user so instead we'll redirect the user to the home page so to do this we're going to need to import the redirect function and that is from flask so I'll come back up here to the top and after our last import I'll also import redirect then come back down here inside of our conditional so when the form validates properly we will say return redirect and we want to redirect to the URL for so we'll use that route URL for function again and if we want this to redirect to our home page and again that is the name of the function for that route so we're redirecting to here okay so this should all work except for one thing we haven't updated our template to actually show the flashed messages yet so I'm going to put this within our layout template so that flashed messages pop up on any page so I'm going to open up our layout dot HTML and let's just assume that we want to display any of our flash messages up here at the top of our content so I will come down to our block content here and now right above this content I'm going to display these messages so I'm going to open up a code block so that is a curly brace two parentheses and then the closed curly brace and let me get rid of that one there and in this code block we're going to use a with statement so I will say with messages equal to get flashed messages and this is a function that will get the flashed messages that we send to this template and we want to also pass in an argument here of with categories equal to true now that with categories equal to true will allow us to grab this success category that we passed in to that flashed message which is the bootstrap class that we're going to use and so now I'm going to close off this block so I will put in a closed block here and say end with now within our block here we want to print out any messages if there were messages returned from this get flashed messages function so we can open up a another code block and we'll say if messages and then we'll also close off that code block as well so we'll say end if and now within here this will mean that if messages was not empty then it means that we have some flashed messages to display so now we can loop over those flashed messages so I'm going to open up another code block I know this is getting a little nested here but we can say for category comma message in those messages so since we said with categories equal true we're going to get two values from these messages so for category and message in messages and now we can end this block as well so we'll say end four and now within here we can finally print out this message so I will create a div within here and this div I'm going to give a class equal to and we want to set this equal to alert and also alert and then the category value so if we want to put in a value we need those double curly braces and we're going to set this equal to category so for example since we passed in success this class is going to be assigned alert success and we'll see this in action in just a second so now within this div we want to actually print out this message so I'll just pass in our message variable within our curly braces there okay so now that we have all of that in place let's make sure that it all works if our forum validates properly so let's open back up our site let's make sure that our server is still running and it's not so you might see this sometimes if you actually save your file and there's a syntax error at the time that you save it then it might shut down your development server so to run that again you can just rerun the file again so now we don't have any errors so that's good so let's go back to our site and reload our register page and load that up and now I'm going to fill out this form correctly so that it will validate so I'm going to pass in valid emails and passwords and all of that and now if I submit this valid form then we can see that we got redirected back to our home page with our flash message that an account was created for our username and in that case our username was CMS now we didn't actually create an account for that user we will need a database for that and that is what we'll be covering in the next video but now we know our forums are validating correctly and giving us some feedback now these flash messages are nice but like I said they are only a onetime alert so if I reload this homepage then we can see that that flash message goes away okay so lastly let's give some validation feedback to our end user so that if they input incorrect information then they know exactly what it is that they did wrong and what they need to fix so if I go back to our registration form and if I fill this out but I give a bad email address I'll just put in some gibberish there and do the password correct then submit that then we can see that it just sends us back to our form because our form was invalid but we have no feedback for our user as to why it was invalid so let's go back to our registration template and fix this so I open back up our editor here and open up that register template so for each field that we have here each of those fields will actually have a list of errors if that field was invalid so we can open up a conditional and print out those errors so the way that this is done in bootstrap is that you add a class of is and valid to your field and then you put a div underneath that with the class of invalid feedback and then put in the error there so let's see what this looks like so I'm going to go underneath our label here and I'm going to just keep this valid feedback form here and now let's put in one that has errors so I'm going to open up a code block here and this is going to be an if statement so I'll say if form dot username dot ere's so it's only going to hit this conditional if we have any heirs and then I can end this if block so I will put in a code block here and say end if and now within here we want our username field just like we have on the outside here but we also want to add a class of is invalid to that field and underneath that invalid field we also want to give a div with a class to invalid feedback and now within this div we want to print out all of the errors that we have so I'll open up a another code block here and this is going to be a for loop so we'll say for errors in and fix that typo there so we're going to say for errors in form dot username err so I'll just copy and paste that there and then I will close out this for loop by saying in for and we will just print out a span of all of these errors so we want to print out this error and actually here I should have said for error and errors not errors so I will print out that error variable there from the for loop okay so I know that this is kind of a long section here but hopefully that all made sense so if our form had errors on it then it will print out this form field and also these errors but if we have no errors then we just want to print out what we had before so we can put this inside of the else block of this if statement so I will put in an else here and that is where we will move the valid form or the valid of field from that section so I will paste that in there now I know that this can look like a lot here just to print out the validation errors and honestly forms and validation is really where the Flast bootstrap extension has some advantages but I still like doing these myself because I like to be able to easily be able to make design decisions if I want to change the look of something and I feel like you just have more control overdoing that if you do it manually okay so now we want to put in these validation errors for all of the form or all of the field sections in our form so I'm going to copy and paste this in every section so I'm just going to overwrite the valid input for the email and also for the password and also for the confirm password now I just paste it in the username field for all those so now I'm going to change that now I'm going to use the multi cursor functionality within sublime text but you could use a Find and Replace functionality within your editor so within sublime text I can just highlight all of these here and change these all at once so instead of form dot username we want that to be formed email so now I'll go down here to our password group and change these user names to password and now go down here to our confirm password group highlight all those user names and change that to confirm password now if you misspelled any of this or run into any problems at this point then remember I do have all of the source code for these videos on my github and you can always copy and paste from there so that you can be sure that you didn't make any small mistakes here or there and the link for that is in the description section below okay so speaking of which let's make sure that I didn't make any small mistakes by making sure that this form validation is now working so let's save that and make sure that our server is still running and it is and pull up our website and we will reload our register page and first let's just submit a form with zero information so if I just submit this form then we can see that we get the few the feedback on every single field that says that this field is required and it's those bootstrap classes that we added in that handles the coloring of the red text and the red outline on the actual field there so now if I put a user name that is too short remember if we said that a user name has to be at least two characters and also an invalid email so I'll just put in an email of Cori and also I'll put in passwords that don't match so I'll do this one and just say testing and then the when I'll put in some gibberish so now if I hit submit then we can see now that it's telling us that our field must be between 2 and 20 20 characters long and that we have an invalid email address and also that this field must be equal to the password and if we had multiple errors on any of these than it would show all of those as well so we're getting some good feedback here to let the user know exactly what they need to fix in order to create their account properly ok so we're almost finished up but we were also going to do our login page now this is going to be a lot faster because we've already done most of this work for the register page so let's copy our register template to our login template so I'll go back to our page here and copy this big long register template here into our blank login template and now there are some things that we need to change with this form so here at the top we will change our legend and our legend we will change to log in and remember we were logging in with our email and not our username so I'm just going to get rid of this entire form group div here that contained our username so I'll get rid of that we're going to keep the email we are going to keep the password this confirmed password we no longer need so we can get rid of that form group now we did have that Remember Me field that we needed to add in but this is going to be a little different from the other fields so this is going to be a div and this is going to be a bootstrap class equal to form check since it's going to be a checkbox and we don't need any complicated validations here because this is either going to be checked or not checked there's not really anything that you can do wrong here so now we can just put in these field values so first I'll put in the check box so we'll say form a form dot remember and we want to pass a class into this so we will say that this class is equal to form check input and also we want to pass in the label for this field so we'll just copy that paste it in below here so this is going to be form dot remember dot label and instead of 4 check input this is going to be form check label for the class there now also on most login pages you'll see a link for if you forgot your password then you can do a password reset so let's add one of those in as well so I'll put that right after our submit button and right after our submit button I'll just do a small tag here and I'll give this a class of text muted just to make that a little subtle I also give it a margin left of two just to spread it away from that submit button a little bit and now we want to add in an anchor tag here now we don't have a URL for this forgot password link yet that we'll be doing later in the series so if you ever just want to do a dummy link then you can just put in a pound sign there and that will just be a link that goes nowhere so for the text for this for this link I'll say forgot password with a question mark and also on our register page I said that there's usually something that says you know do you already have an account well then you can sign in here also on most login pages you'll see something that says something like well do you need an account well you can register here so that's what we'll put here so we'll say need an account and instead of putting a URL for our login page we'll put in a URL for our register page and this the text for this link will just say sign up now okay so now with those changes in place if we save those and pull back up our website so our server is still running if now we go to our login page then we can see that now we have our login form okay so this is looking pretty good now we don't currently have any users but let's put some temporary code in here to simulate a successful login so I'm going to go back to our application code and go down to our login route and we also want to see if this form is valid on submission as well so we'll copy this conditional here and paste this in now that means that we also need to accept post requests to this route as well so just like we did with our register let's copy this section that allows post requests to our login route and now within our conditional let's just put in some fake data here for now to simulate a successful login so I'm just going to say if form dot email dot data so that's the data that was submitted in the email form if that is equal to admin at blog.com and our form dot password dot data is equal to and we will just do a password of password which is normally a bad idea but this is just going to be temporary here until we get our database setup so if they submit our login form with an email of admin at blog comm and a password of password then we want to simulate a successful login so we'll do a flashed message like we saw before and this is just going to say you have been logged in exclamation point and remember we want to pass in a category in here that'll be the bootstrap class and that'll be a bootstrap class of success and then we can return a redirect to our home page so we'll do URL for and go to that home route and now we'll just say that any other submissions are invalid so we will put in an else statement here so anything that isn't an email of admin blog and a password a password then we'll say that that's an unsuccessful login so we will put in a flash message here and say login unsuccessful please please check user name and password okay now instead of passing in a category of success there we really want this to be like a Red Alert and in bootstrap that class is called danger for the alert and now at this point we don't want to return anything because it will just fall down here to this render template where it renders the login page again so I will clean that up and save that okay so if we did all of that correctly then we should be able to do a fake login with the email that we specified here and our fake password so let's make sure okay so we had I save that when we had a mistake in our file so if I rerun our server there now our server is running so our web shot site should be running as well I'll go back and reload our login page and let's just try to login with some incorrect credentials so I'll say test at test comm and some madeup password so if I login then we can see that we get that red danger alert that says login unsuccessful please check user name and password so now if we change this to what we specified so admin at blog comm and a password of password if we login we get redirected to our home route and it says you have been logged in okay so now one very quick thing here and then we'll be finished up with the video when I pasted in the snippet of our navigation bar into our layout template the navigation bar currently is using direct links to our different routes and this works fine sometimes but if we ever change our routes for any reason then we want our website to pick that up automatically instead of us needing to remember to change it in multiple locations and as we've seen several times now we can do this with that URL for function that we've already used a couple of times and you definitely want to utilize that function a lot because it makes linking to different pages pretty effortless so the only reason I didn't do this in the last video is because our login and register routes didn't exist yet and using URL for to a nonexistent route will throw an error so let's see what this looks like to convert existing links to use that URL for function so let's go back to our project and open up our layout template so I still have that open here and now we want to go down to our navigation links so our navigation links are up here in our header so they are right here and right now you can see that these are direct links to you know ford slash about ford slash login button says let's change these to use the URL for function so I will put in those double curly braces say URL four and we want this to be the URL for home and I'll just copy this and do the same for our other routes so this will be the URL for about this will be the URL for login and this will be the URL for register so just make sure that worked if we go back to our website and reload our homepage and we should be able to click around and see the forms that we've created and go to all of these different links with no problem okay so I think that is going to do it for this video I hope that now you have a good understanding for how we can work with forums and flask and also how we can validate the data that the user sends to our route and in the next video we'll learn how to use a database so that we can actually store this information and implement a real registration and login system so if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoyed these tutorials and would like to support them then there are some ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in a description section below be sure to subscribe for future videos and thank you all for watching you
