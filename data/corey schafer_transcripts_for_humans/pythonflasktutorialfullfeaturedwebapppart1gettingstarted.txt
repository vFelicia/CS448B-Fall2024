With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this series of videos we'll be learning
00:02 - how to build a full-featured web
00:04 - application
00:04 - using the flask framework in python so
00:07 - flask is an excellent micro framework
00:09 - that really makes it enjoyable
00:10 - to work with these back-end web
00:11 - applications and also at the time of
00:13 - this recording they just released
00:14 - version 1.0
00:15 - of the framework so it's a great time to
00:17 - learn this so first of all let me show
00:19 - you what we'll be building in this
00:20 - series of videos
00:21 - and then we'll get started learning how
00:23 - to actually put all this together so
00:24 - this is the application that we'll be
00:26 - building in this series of videos
00:27 - and you can see that it is a blog style
00:30 - of an application where different users
00:32 - can make
00:32 - different posts now these can be regular
00:34 - blog posts or they can be
00:36 - you know smaller like twitter updates or
00:38 - whatever you want to do with it
00:40 - so let's go through a little tour of the
00:42 - features of this application
00:44 - so we can see that we have a user
00:46 - management system so we can
00:47 - register new users and once a new user
00:50 - is registered
00:51 - we can go to login and if they have
00:53 - forgot their password then they can
00:55 - get a password reset email sent to their
00:58 - email address
00:58 - so if we log in here so i'll log in with
01:01 - the email address that i used
01:03 - to sign up for the application here
01:06 - and once i sign in at the top here we
01:09 - can see that we have a few new options
01:11 - so if i go to my account
01:13 - then we can see the account information
01:14 - that we have here we also have the
01:16 - ability to update
01:17 - profile pictures to where we save
01:19 - pictures on the backend
01:20 - web application so if we update that
01:23 - then we can see that that change is
01:25 - there and that picture also
01:26 - automatically gets resized to
01:29 - save space on our web server so we also
01:31 - have the ability to write new posts here
01:33 - if we go to the home page we can look at
01:36 - other people's posts
01:38 - or if we go to a post that we have
01:40 - written then
01:41 - we can see that we can actually update
01:43 - and delete our post here
01:44 - so if i update this post that can say my
01:47 - latest
01:48 - updated post and post that if i go back
01:51 - to the home page
01:52 - then we can see that that post was
01:53 - updated and if i wanted to
01:55 - delete a post i could just come in and
01:57 - delete
01:58 - and delete and we can see that that post
02:01 - is no longer
02:02 - there so that's a quick tour of what
02:04 - we'll be building and building an
02:05 - application like this
02:06 - is a great way to learn the ins and outs
02:08 - of a framework because we're going to
02:09 - have to deal
02:10 - with databases and also accepting
02:13 - user input from forms and saving
02:15 - pictures onto the backend
02:17 - file system and sending emails and all
02:20 - kinds of different things so we're
02:21 - really going to learn a lot
02:22 - about the framework by building this now
02:25 - i'm going to mention this several times
02:26 - throughout the series
02:27 - but if you're following along and would
02:28 - like to download the source code of each
02:30 - step in the process
02:31 - then i will have links to the source
02:33 - code of each video in the description
02:35 - section below so that you can download
02:36 - that
02:36 - if you'd like and also if you'd like to
02:38 - know how to build this same website in
02:40 - another framework
02:41 - then in the near future i'm also going
02:42 - to be releasing a series showing how to
02:44 - build this same site in django
02:46 - and on pyramid and possibly other
02:48 - frameworks as well
02:50 - okay so let's go ahead and get started
02:52 - learning how to build this using flask
02:54 - so i'm just going to close out of this
02:56 - application and open up my terminal here
02:58 - so first of all let's start off by
03:00 - installing the packages that we need to
03:01 - get started out
03:02 - so you can do this in a virtual
03:03 - environment or in your default python
03:05 - environment
03:06 - but it's always a good idea to separate
03:08 - different projects into their own
03:09 - virtual environments
03:10 - now i'm mainly going to focus on flask
03:12 - in these videos so if you need to
03:14 - install python or want to learn how to
03:16 - work with virtual environments
03:17 - or are wondering how i set up my text
03:19 - editor or anything like that
03:20 - then i'm going to put links to those
03:22 - videos in the description section below
03:24 - but i'm not going to go into those in
03:26 - detail in this series
03:28 - i'm just going to assume that you're
03:30 - specifically ready to start learning
03:31 - flask
03:32 - okay so first of all let's install flask
03:34 - and to do this we can do a simple pip
03:36 - install so i'll say pip
03:37 - install flask
03:41 - and once that is installed let's make
03:42 - sure that it installed correctly
03:44 - so we can do that just by starting up
03:46 - our python repo here
03:48 - and then importing flask so if we say
03:50 - import flask
03:52 - if that doesn't give you an error then
03:54 - that installed correctly
03:55 - so now we can exit out of that
03:57 - interpreter and now let's create a new
03:58 - project from scratch
04:00 - so i'm here on my desktop but you can
04:02 - create this project anywhere you'd like
04:04 - so i'm going to create a new directory
04:06 - on my desktop
04:07 - so within a mac on my machine this is
04:09 - going to be
04:11 - mk der and i'm just going to call this
04:13 - flask
04:14 - blog now on a windows machine that is
04:16 - going to be a different command
04:18 - but you can just create the folder on
04:20 - your desktop like you would any other
04:21 - folder
04:22 - and i'm going to open up this new
04:23 - project directory in my text editor
04:25 - and i'm going to be using sublime text
04:26 - but you can use any editor that you'd
04:28 - like
04:28 - so i'm going to open up sublime text go
04:31 - to
04:32 - file open and then open up this
04:35 - directory okay so now we have a
04:39 - completely empty
04:40 - project now within our project directory
04:43 - here i'm going to create a new
04:44 - file and i'm going to call this flask
04:47 - blog
04:48 - dot pi and now we should be ready for a
04:51 - basic flask application
04:52 - so i have the flask website pulled up
04:54 - here in my browser
04:56 - so if i go to this then if you go to the
04:58 - front page of their documentation
05:00 - then they have about the simplest
05:02 - application that you can start with
05:03 - so let's copy and paste this into our
05:06 - file and i'll explain what's going on
05:08 - so i'm going to grab this code here
05:11 - and paste this into our sublime
05:14 - application i'm going to make this text
05:16 - a little larger here okay so at the top
05:19 - here
05:19 - we're saying from flask import flask
05:23 - so we are importing this flask class and
05:26 - then we're creating this
05:27 - app variable and setting this to
05:30 - an instance of this flask class now
05:33 - passing in
05:34 - the double underscore name can seem a
05:37 - bit confusing
05:38 - double underscore name is a special
05:40 - variable in python that is just the name
05:42 - of the module
05:43 - now if we run the script with python
05:45 - directly
05:46 - then double underscore name can be equal
05:49 - to
05:49 - double underscore main and we'll see
05:51 - that in just a second
05:53 - basically that is so flask knows where
05:55 - to look for
05:56 - your templates and static files and
05:58 - things like that
05:59 - so now we have an instantiated flask
06:01 - application
06:02 - in this app variable now we can create
06:05 - our routes
06:06 - so our routes are what we type into our
06:09 - browser to go to different pages
06:11 - so for example you've probably been to
06:12 - websites that have
06:14 - about pages and contact pages and in
06:16 - flask we create these
06:18 - using route decorators so decorators can
06:20 - be a confusing topic
06:22 - but you don't really need to understand
06:24 - how they work in order to
06:25 - use flask so i would recommend learning
06:27 - at some point just because they're nice
06:29 - to know
06:30 - but if you don't really understand them
06:31 - then don't worry too much about it for
06:33 - this series
06:34 - basically decorators are just a way to
06:35 - add additional functionality
06:37 - to existing functions and in this case
06:40 - this
06:40 - app.route decorator will handle all of
06:43 - the complicated
06:44 - backend stuff and simply allow us to
06:46 - write a function that returns the
06:48 - information that will be shown on our
06:50 - website
06:50 - for this specific route so this forward
06:53 - slash here
06:54 - is just the root page of our website or
06:56 - you can think of it as the home page
06:58 - and we are simply returning the text
07:01 - hello world
07:02 - so this is normally where we'd want to
07:04 - return some html
07:05 - but we'll start off with this text just
07:08 - to make sure
07:08 - it all works so when we start our
07:10 - application if we navigate to our home
07:13 - page
07:13 - then it should show us this text hello
07:15 - world so now let's run this so
07:17 - you can see how this works so i'm going
07:18 - to pull back up my command line here
07:21 - and now i'm going to navigate to my
07:23 - project directory so i'm going to do a
07:24 - cd
07:26 - flask blog and the cd command is the
07:28 - same on windows as well
07:30 - and now we're in the same directory
07:31 - where that flask blog.pi
07:33 - module lives now before we run our
07:35 - application we need to set an
07:36 - environment variable to the file
07:38 - that we want to be our flask application
07:41 - so in my case i can say
07:42 - export flask underscore app
07:46 - is equal to flask blog dot pi
07:49 - now that's the command that you use on
07:51 - mac and linux if you're on
07:52 - windows then that is going to be equal
07:55 - to
07:56 - set flask app instead of export so you
07:59 - can just run that
08:00 - and now with that environment variable
08:01 - set we should be able to run our flask
08:03 - application just by saying
08:04 - flask run so if that worked and you
08:06 - don't have any errors
08:07 - then you should see this message that
08:09 - says that it's serving your flask app
08:11 - on 127.0.0.1
08:14 - and this is the ip address of your local
08:17 - machine
08:18 - and the 5000 here is the port number
08:21 - now this is a running web server this
08:23 - actually comes with flask itself
08:25 - and you have to leave this running while
08:26 - you're viewing your site or else you
08:28 - won't be able to see it
08:29 - so if i copy this address here
08:32 - and go back to my web browser and paste
08:35 - this in
08:36 - then we should see our sample
08:38 - application now this is a little small
08:40 - here but we can see that we got the text
08:41 - hello world
08:42 - and that is what we returned from that
08:44 - home route
08:45 - now when i said that this 127.0.0.1
08:50 - was the ip address of our local machine
08:52 - there's actually an alias for that ip
08:54 - address called localhost
08:55 - and i like using that more than the ip
08:58 - address itself
08:59 - so if i go back and paste in that url
09:01 - again
09:02 - and replace this 127.0.0.1
09:05 - with localhost and hit enter
09:08 - then we can see that that returns the
09:10 - same route and gives us the same results
09:12 - okay so now let's try to update our code
09:14 - to include some actual html
09:16 - so i'm going to wrap our text here in h1
09:19 - tags
09:19 - which are heading tags and this should
09:21 - make the text look a lot
09:23 - larger so i'm going to open up our
09:26 - flask blog and instead of returning
09:29 - just hello world i'm going to wrap these
09:32 - in h1
09:33 - tags which are html heading 1
09:36 - tags so we can close that out and save
09:39 - it and if we go back to our browser
09:41 - and reload that page then we can see
09:44 - that the changes did not take effect
09:46 - so we actually need to stop the web
09:48 - server and then run it again
09:50 - so i'm going to pull up my command line
09:52 - here and stop this
09:53 - using control c and then rerun that with
09:57 - flask
09:57 - run again and then go back to my web
10:00 - server
10:01 - reload that page then now we can see
10:03 - that those changes took effect
10:04 - and we now have our text and our h1 tags
10:07 - and within chrome and other browsers as
10:09 - well
10:09 - you can view the source code of any html
10:12 - page just by right-clicking
10:13 - and then going to view page source and
10:16 - if i do that then
10:18 - this is a little small here but we have
10:19 - our text wrapped in h1 tags
10:21 - okay so most likely when you're
10:23 - developing a site you're going to be
10:25 - making a lot of changes to your
10:26 - application
10:27 - and it would be a major pain to have to
10:29 - shut down and restart the web server
10:31 - each time you make a small change and we
10:33 - can actually get around this
10:34 - and have the server show changes without
10:36 - restarting
10:37 - our application just by running our
10:39 - application in
10:40 - debug mode so here is one way to do this
10:43 - so
10:44 - if we stop our current application so
10:46 - i'll pull up our terminal and hit
10:47 - control
10:48 - c now i'm going to clear out the screen
10:50 - here then if we set another environment
10:52 - variable so i'll say
10:53 - export this one is called flask
10:56 - underscore debug
10:57 - and i'm going to set that equal to 1 and
10:59 - hit enter
11:00 - and remember on windows you use the word
11:02 - set instead of export for an environment
11:04 - variable
11:05 - so now if we run this application so i'm
11:08 - going to go back
11:08 - and do a flask run again then right away
11:12 - we can see that there's some additional
11:13 - information here
11:14 - in debug mode that wasn't there before
11:16 - so if i go back
11:17 - and refresh our page in the browser
11:21 - then we can see that our application is
11:22 - still working and now let me change
11:24 - some text in our code so i'm going to go
11:26 - back and instead of
11:28 - this hello world i'm instead going to
11:30 - change this to
11:32 - home page and save that now without
11:34 - restarting
11:35 - the web server like we did before i'm
11:37 - just going to reload my browser
11:39 - and you can see that since we're in
11:40 - debug mode that those changes reloaded
11:43 - automatically and we didn't have to
11:44 - restart that web server like we did
11:45 - before
11:46 - okay so i also wanted to show you that
11:48 - if you don't want to work with those
11:50 - environment variables
11:51 - then there's another way that we can run
11:53 - our application directly using python
11:55 - so let's go back to our application here
11:58 - and to do this let's go down to the
11:59 - bottom of the file
12:00 - and we're going to want to put in a
12:02 - conditional that says
12:04 - if double underscore name is
12:07 - equal to and in quotes here double
12:10 - underscore
12:11 - main and then within this conditional we
12:14 - can say
12:14 - app dot run and we run run this in debug
12:18 - mode so we'll say debug
12:19 - is equal to true now this conditional
12:22 - here can be confusing when you first see
12:24 - it
12:24 - like i said before the double underscore
12:27 - name is
12:28 - main if we run the script with python
12:30 - directly
12:31 - but if we import this module to
12:33 - somewhere else then the name will be
12:35 - the name of our module so this continu
12:38 - this conditional
12:38 - is only true if we run this script
12:41 - directly and i have a more detailed uh
12:43 - video on this concept
12:45 - if that's still confusing to you so if
12:47 - we were to run this flask blog.pi
12:50 - module with python then it should come
12:52 - in here to this conditional
12:54 - and run this app.run statement so let's
12:57 - do that now so i'll pull up
12:59 - the command line again
13:02 - and i'm going to stop my server here and
13:05 - clear out this page
13:06 - and now instead of doing flask run like
13:08 - we did before that uses the environment
13:10 - variables
13:11 - we could instead just call this script
13:12 - directly with python by saying python
13:15 - and then flaskblog.pi and run that
13:18 - directly
13:19 - if we run that we can see that we get a
13:21 - similar output
13:22 - says that we're running on our local
13:24 - host and debug mode so if we go back to
13:26 - our browser and
13:27 - refresh the page then we can see that
13:29 - that's still working now running the
13:30 - module directly used to be how i always
13:32 - ran flask applications
13:34 - but now the flash documentation uses the
13:36 - flask run command
13:37 - so i've been using that as well so the
13:40 - flash command with the environment
13:41 - variables also allows us to
13:44 - use the flash shell for some debugging
13:46 - and we'll see a couple of examples of
13:48 - that in later videos
13:49 - now in this series i probably will be
13:50 - running the application directly with
13:52 - python
13:53 - just because i don't want to keep
13:55 - setting those environment variables
13:56 - again whenever i
13:58 - shut down my terminal okay so now that
14:00 - we have this running
14:01 - now let's add another route so that we
14:03 - can see how easy this is
14:04 - using flask so let's add an about route
14:07 - to make an about page for our website
14:09 - so if i try to navigate to an about page
14:12 - right now so that would be forward slash
14:14 - about if i go there then we can see that
14:16 - we get this not found
14:18 - error and if we look at our command line
14:20 - that was running the
14:21 - server then we can see that we our last
14:24 - get request
14:25 - returned a 404 response and that 404
14:28 - response means that the page doesn't
14:30 - exist
14:31 - so let's create that now so i'm going to
14:33 - open up sublime text
14:35 - and now i'm just going to copy and paste
14:36 - this home page route here
14:38 - and then change a couple of things here
14:42 - so for the route i'm going to say
14:44 - forward slash about
14:45 - and we also have to change the function
14:47 - name here so that's
14:48 - something that's easy to forget so just
14:50 - be sure that you do that and i'm just
14:52 - going to call that function
14:53 - about and within here instead of saying
14:56 - home page
14:57 - i'm just going to say about page so now
14:59 - we have a route at forward slash
15:01 - about and this about function is
15:04 - returning the information for that page
15:06 - and in this case it's just an h1 heading
15:09 - with the text
15:10 - of about page so let's see if this
15:12 - worked
15:13 - so let's look at our command line to
15:14 - make sure the server's still running and
15:16 - it is
15:16 - so if we reload this page in the browser
15:19 - then we can see we no longer get that
15:21 - 404
15:22 - not found error and instead it returns
15:24 - the about page text
15:26 - for our route so now we have two routes
15:28 - here we have this about page and if i
15:29 - take that
15:30 - about away and just go back to our home
15:32 - page
15:33 - then we can see that that route still
15:34 - exists as well now if we ever wanted to
15:36 - have multiple routes
15:38 - handled by the same function then it's
15:40 - as simple as just adding another
15:42 - decorator so let's say that we wanted a
15:44 - route of
15:45 - forward slash home to go to our home
15:47 - page
15:48 - as well as just the forward slash so i'm
15:50 - going to copy this and paste
15:52 - another decorator right below it and
15:55 - just say forge slash
15:56 - home and i'm also going to change the
15:58 - function name here from hello
16:00 - to home then now if we pull back up
16:04 - our browser here and reload the home
16:07 - page we can see that that still works
16:09 - but also if we go to forward slash home
16:11 - then that gives us the home page as well
16:13 - so those two routes are being being
16:15 - handled by the same
16:16 - function okay so i think that is going
16:18 - to do it for the first video
16:20 - now we know how to get a flask
16:21 - application up and running and also how
16:23 - to create some basic routes
16:25 - and in the next video we'll learn how to
16:26 - return some more complicated html code
16:29 - using templates
16:30 - and also how to pass variables to our
16:32 - web page but if you have any questions
16:33 - about what we covered in this video then
16:35 - feel free to ask in the comments section
16:36 - below and i'll do my best to answer
16:38 - those
16:38 - and if you enjoy these tutorials and
16:39 - would like to support them then there
16:41 - are several ways you can do that
16:42 - the easiest ways to simply like the
16:43 - video and give it a thumbs up and also
16:45 - it's a huge help to share these videos
16:46 - with anyone you think would find them
16:48 - useful
16:48 - and if you have the means you can
16:49 - contribute through patreon and there's a
16:50 - link to that page in the description
16:52 - section below
16:53 - be sure to subscribe for future videos
16:54 - and thank you all for watching
17:08 - you

Cleaned transcript:

hey there how's it going everybody in this series of videos we'll be learning how to build a fullfeatured web application using the flask framework in python so flask is an excellent micro framework that really makes it enjoyable to work with these backend web applications and also at the time of this recording they just released version 1.0 of the framework so it's a great time to learn this so first of all let me show you what we'll be building in this series of videos and then we'll get started learning how to actually put all this together so this is the application that we'll be building in this series of videos and you can see that it is a blog style of an application where different users can make different posts now these can be regular blog posts or they can be you know smaller like twitter updates or whatever you want to do with it so let's go through a little tour of the features of this application so we can see that we have a user management system so we can register new users and once a new user is registered we can go to login and if they have forgot their password then they can get a password reset email sent to their email address so if we log in here so i'll log in with the email address that i used to sign up for the application here and once i sign in at the top here we can see that we have a few new options so if i go to my account then we can see the account information that we have here we also have the ability to update profile pictures to where we save pictures on the backend web application so if we update that then we can see that that change is there and that picture also automatically gets resized to save space on our web server so we also have the ability to write new posts here if we go to the home page we can look at other people's posts or if we go to a post that we have written then we can see that we can actually update and delete our post here so if i update this post that can say my latest updated post and post that if i go back to the home page then we can see that that post was updated and if i wanted to delete a post i could just come in and delete and delete and we can see that that post is no longer there so that's a quick tour of what we'll be building and building an application like this is a great way to learn the ins and outs of a framework because we're going to have to deal with databases and also accepting user input from forms and saving pictures onto the backend file system and sending emails and all kinds of different things so we're really going to learn a lot about the framework by building this now i'm going to mention this several times throughout the series but if you're following along and would like to download the source code of each step in the process then i will have links to the source code of each video in the description section below so that you can download that if you'd like and also if you'd like to know how to build this same website in another framework then in the near future i'm also going to be releasing a series showing how to build this same site in django and on pyramid and possibly other frameworks as well okay so let's go ahead and get started learning how to build this using flask so i'm just going to close out of this application and open up my terminal here so first of all let's start off by installing the packages that we need to get started out so you can do this in a virtual environment or in your default python environment but it's always a good idea to separate different projects into their own virtual environments now i'm mainly going to focus on flask in these videos so if you need to install python or want to learn how to work with virtual environments or are wondering how i set up my text editor or anything like that then i'm going to put links to those videos in the description section below but i'm not going to go into those in detail in this series i'm just going to assume that you're specifically ready to start learning flask okay so first of all let's install flask and to do this we can do a simple pip install so i'll say pip install flask and once that is installed let's make sure that it installed correctly so we can do that just by starting up our python repo here and then importing flask so if we say import flask if that doesn't give you an error then that installed correctly so now we can exit out of that interpreter and now let's create a new project from scratch so i'm here on my desktop but you can create this project anywhere you'd like so i'm going to create a new directory on my desktop so within a mac on my machine this is going to be mk der and i'm just going to call this flask blog now on a windows machine that is going to be a different command but you can just create the folder on your desktop like you would any other folder and i'm going to open up this new project directory in my text editor and i'm going to be using sublime text but you can use any editor that you'd like so i'm going to open up sublime text go to file open and then open up this directory okay so now we have a completely empty project now within our project directory here i'm going to create a new file and i'm going to call this flask blog dot pi and now we should be ready for a basic flask application so i have the flask website pulled up here in my browser so if i go to this then if you go to the front page of their documentation then they have about the simplest application that you can start with so let's copy and paste this into our file and i'll explain what's going on so i'm going to grab this code here and paste this into our sublime application i'm going to make this text a little larger here okay so at the top here we're saying from flask import flask so we are importing this flask class and then we're creating this app variable and setting this to an instance of this flask class now passing in the double underscore name can seem a bit confusing double underscore name is a special variable in python that is just the name of the module now if we run the script with python directly then double underscore name can be equal to double underscore main and we'll see that in just a second basically that is so flask knows where to look for your templates and static files and things like that so now we have an instantiated flask application in this app variable now we can create our routes so our routes are what we type into our browser to go to different pages so for example you've probably been to websites that have about pages and contact pages and in flask we create these using route decorators so decorators can be a confusing topic but you don't really need to understand how they work in order to use flask so i would recommend learning at some point just because they're nice to know but if you don't really understand them then don't worry too much about it for this series basically decorators are just a way to add additional functionality to existing functions and in this case this app.route decorator will handle all of the complicated backend stuff and simply allow us to write a function that returns the information that will be shown on our website for this specific route so this forward slash here is just the root page of our website or you can think of it as the home page and we are simply returning the text hello world so this is normally where we'd want to return some html but we'll start off with this text just to make sure it all works so when we start our application if we navigate to our home page then it should show us this text hello world so now let's run this so you can see how this works so i'm going to pull back up my command line here and now i'm going to navigate to my project directory so i'm going to do a cd flask blog and the cd command is the same on windows as well and now we're in the same directory where that flask blog.pi module lives now before we run our application we need to set an environment variable to the file that we want to be our flask application so in my case i can say export flask underscore app is equal to flask blog dot pi now that's the command that you use on mac and linux if you're on windows then that is going to be equal to set flask app instead of export so you can just run that and now with that environment variable set we should be able to run our flask application just by saying flask run so if that worked and you don't have any errors then you should see this message that says that it's serving your flask app on 127.0.0.1 and this is the ip address of your local machine and the 5000 here is the port number now this is a running web server this actually comes with flask itself and you have to leave this running while you're viewing your site or else you won't be able to see it so if i copy this address here and go back to my web browser and paste this in then we should see our sample application now this is a little small here but we can see that we got the text hello world and that is what we returned from that home route now when i said that this 127.0.0.1 was the ip address of our local machine there's actually an alias for that ip address called localhost and i like using that more than the ip address itself so if i go back and paste in that url again and replace this 127.0.0.1 with localhost and hit enter then we can see that that returns the same route and gives us the same results okay so now let's try to update our code to include some actual html so i'm going to wrap our text here in h1 tags which are heading tags and this should make the text look a lot larger so i'm going to open up our flask blog and instead of returning just hello world i'm going to wrap these in h1 tags which are html heading 1 tags so we can close that out and save it and if we go back to our browser and reload that page then we can see that the changes did not take effect so we actually need to stop the web server and then run it again so i'm going to pull up my command line here and stop this using control c and then rerun that with flask run again and then go back to my web server reload that page then now we can see that those changes took effect and we now have our text and our h1 tags and within chrome and other browsers as well you can view the source code of any html page just by rightclicking and then going to view page source and if i do that then this is a little small here but we have our text wrapped in h1 tags okay so most likely when you're developing a site you're going to be making a lot of changes to your application and it would be a major pain to have to shut down and restart the web server each time you make a small change and we can actually get around this and have the server show changes without restarting our application just by running our application in debug mode so here is one way to do this so if we stop our current application so i'll pull up our terminal and hit control c now i'm going to clear out the screen here then if we set another environment variable so i'll say export this one is called flask underscore debug and i'm going to set that equal to 1 and hit enter and remember on windows you use the word set instead of export for an environment variable so now if we run this application so i'm going to go back and do a flask run again then right away we can see that there's some additional information here in debug mode that wasn't there before so if i go back and refresh our page in the browser then we can see that our application is still working and now let me change some text in our code so i'm going to go back and instead of this hello world i'm instead going to change this to home page and save that now without restarting the web server like we did before i'm just going to reload my browser and you can see that since we're in debug mode that those changes reloaded automatically and we didn't have to restart that web server like we did before okay so i also wanted to show you that if you don't want to work with those environment variables then there's another way that we can run our application directly using python so let's go back to our application here and to do this let's go down to the bottom of the file and we're going to want to put in a conditional that says if double underscore name is equal to and in quotes here double underscore main and then within this conditional we can say app dot run and we run run this in debug mode so we'll say debug is equal to true now this conditional here can be confusing when you first see it like i said before the double underscore name is main if we run the script with python directly but if we import this module to somewhere else then the name will be the name of our module so this continu this conditional is only true if we run this script directly and i have a more detailed uh video on this concept if that's still confusing to you so if we were to run this flask blog.pi module with python then it should come in here to this conditional and run this app.run statement so let's do that now so i'll pull up the command line again and i'm going to stop my server here and clear out this page and now instead of doing flask run like we did before that uses the environment variables we could instead just call this script directly with python by saying python and then flaskblog.pi and run that directly if we run that we can see that we get a similar output says that we're running on our local host and debug mode so if we go back to our browser and refresh the page then we can see that that's still working now running the module directly used to be how i always ran flask applications but now the flash documentation uses the flask run command so i've been using that as well so the flash command with the environment variables also allows us to use the flash shell for some debugging and we'll see a couple of examples of that in later videos now in this series i probably will be running the application directly with python just because i don't want to keep setting those environment variables again whenever i shut down my terminal okay so now that we have this running now let's add another route so that we can see how easy this is using flask so let's add an about route to make an about page for our website so if i try to navigate to an about page right now so that would be forward slash about if i go there then we can see that we get this not found error and if we look at our command line that was running the server then we can see that we our last get request returned a 404 response and that 404 response means that the page doesn't exist so let's create that now so i'm going to open up sublime text and now i'm just going to copy and paste this home page route here and then change a couple of things here so for the route i'm going to say forward slash about and we also have to change the function name here so that's something that's easy to forget so just be sure that you do that and i'm just going to call that function about and within here instead of saying home page i'm just going to say about page so now we have a route at forward slash about and this about function is returning the information for that page and in this case it's just an h1 heading with the text of about page so let's see if this worked so let's look at our command line to make sure the server's still running and it is so if we reload this page in the browser then we can see we no longer get that 404 not found error and instead it returns the about page text for our route so now we have two routes here we have this about page and if i take that about away and just go back to our home page then we can see that that route still exists as well now if we ever wanted to have multiple routes handled by the same function then it's as simple as just adding another decorator so let's say that we wanted a route of forward slash home to go to our home page as well as just the forward slash so i'm going to copy this and paste another decorator right below it and just say forge slash home and i'm also going to change the function name here from hello to home then now if we pull back up our browser here and reload the home page we can see that that still works but also if we go to forward slash home then that gives us the home page as well so those two routes are being being handled by the same function okay so i think that is going to do it for the first video now we know how to get a flask application up and running and also how to create some basic routes and in the next video we'll learn how to return some more complicated html code using templates and also how to pass variables to our web page but if you have any questions about what we covered in this video then feel free to ask in the comments section below and i'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
