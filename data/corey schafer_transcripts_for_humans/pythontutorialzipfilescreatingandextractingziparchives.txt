With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - how to read and write zip files now this
00:05 - can be extremely useful if you're
00:06 - wanting to write automated scripts to do
00:09 - all of this kind of stuff for you in
00:10 - Python so for example in my latest video
00:13 - where we analyze the 2019 Stack Overflow
00:15 - developer survey I went out and I
00:18 - downloaded that data manually but if you
00:20 - want to automate that entire process
00:23 - using Python then we can do that in a
00:25 - few ways so we'll learn how to use the
00:27 - zip file module to do this but we'll
00:29 - also see a couple of other ways to do
00:31 - this using the SH util module to do this
00:34 - in a bit simpler way and with SH util
00:37 - we'll also be able to work with gzip
00:39 - files as well now I'd also like to
00:41 - mention that we do have a sponsor for
00:42 - this video and that is brilliant org so
00:45 - I really want to thank brilliant for
00:47 - sponsoring this video and it would be
00:48 - great if y'all could go and check them
00:50 - out using the link in the description
00:51 - section below and support the sponsors
00:53 - and I'll talk more about their services
00:54 - in just a bit so with that said let's go
00:57 - ahead and get started so first let me
00:59 - show you how to do this with local files
01:01 - on our machine so that we can get the
01:04 - hang of this and then later in the video
01:05 - we'll see how we can download a zip file
01:08 - online and extract that data so I
01:10 - currently have a directory open here on
01:13 - my desktop and within this directory I
01:16 - also have a couple of files that I'm
01:17 - going to write to a zip archive so one
01:20 - of these files is just a simple text
01:22 - file called test txt and the other is an
01:25 - image called thumbnail dot PNG so if I
01:28 - open test dot txt we can see that it's
01:31 - just a text file that says this is a
01:32 - test file we'll use this file for the
01:34 - zip tutorial and for the image this is
01:38 - just the thumbnail for this video ok so
01:41 - let me open up our script here and we
01:45 - will write a script to zip these files
01:47 - and first we're going to do this using
01:49 - the zip file module so I'm going to
01:51 - import the zip file module and that is
01:55 - in the standard library so you don't
01:56 - need to install anything and now in
01:59 - order to create a new zip file we can
02:01 - work with this in a simple way just like
02:04 - we work with other files so we can open
02:06 - this up for writing just by saying
02:09 - something like my zip is equal to and
02:12 - this will be zip
02:13 - dot zip file now this is a zip file
02:18 - class be sure you get the casing correct
02:20 - here it's a capital Z and a capital F
02:22 - and now let's put what we want to call
02:26 - this
02:27 - zip archive so I'll just call this files
02:29 - dot zip and now we want to say that we
02:32 - want to open this in write mode since
02:34 - we're going to be creating a zip file
02:36 - okay and now we can write those files to
02:40 - our new zip file here just by saying my
02:43 - zip dot right and then pass in the files
02:47 - that we want so first I want to write
02:50 - test dot txt and also I want to write
02:54 - thumbnail whoops let me do this here
02:58 - thumbnail dot PNG and once we have
03:01 - written the files that we want to this
03:03 - zip file then I can just say my zip dot
03:07 - closed okay so let's run the script and
03:10 - see if we get a zip archive in this
03:13 - directory so I don't have any output
03:15 - here so that's good that we don't have
03:17 - any errors so let me open up finder here
03:19 - and here within finder we can see that
03:21 - we have this files dot zip archive so
03:25 - let me extract that here within my
03:27 - Finder window so I'm just going to
03:29 - double click this on windows you might
03:31 - extract that a different way and now I
03:33 - have this files directory and if I look
03:36 - in here we can see that we have this
03:37 - test txt file and this thumbnail dot PNG
03:40 - image okay so we successfully created a
03:44 - zip file using Python so one thing that
03:47 - you might have noticed when we created
03:49 - our zip file is that we opened the file
03:52 - and close the zip file manually and
03:55 - usually this is a good indication that
03:57 - we should be using a context manager
03:59 - instead and we can do this with zip
04:01 - files as well so if you aren't familiar
04:03 - with context managers then I do have a
04:05 - separate video on that topic so I'll be
04:08 - sure to leave a link to that video in
04:09 - the description section below if anyone
04:11 - is interested learning more about those
04:13 - so in order to do this with zip files we
04:17 - can just say I'm going to grab this part
04:20 - here I'm just going to say with zip file
04:23 - dot zip file everything is the same
04:25 - there and then I'll just say
04:27 - as my zip and open up our context
04:30 - manager here and then I can just indent
04:33 - these sections here into our context
04:36 - manager and then I can get rid of this
04:39 - closed part down here at the bottom
04:41 - because that's what context managers are
04:43 - used for it opens the file and then it
04:46 - handles the closing of that file for us
04:48 - so now just to make sure that this
04:50 - worked I can delete the files archive
04:55 - that we created before and now if I
04:59 - rerun our script then we can see that we
05:02 - still have that files archive with those
05:05 - files so that's good now you might
05:07 - expect your zip file to be compressed
05:09 - here but by default we're not actually
05:12 - creating a compressed zip file in order
05:14 - to do this we need to pass in a specific
05:16 - value to the compression parameter now
05:19 - the zip file that I'm creating here
05:21 - doesn't have too many files in here so
05:23 - there's probably not of competive
05:25 - compression that can be done but let's
05:27 - go back and just see how we would be
05:30 - able to do this so to compress this zip
05:34 - file we need to pass in an additional
05:37 - parameter here of compression and I will
05:40 - set this equal to
05:42 - zip file dot and this is all capital
05:46 - here
05:46 - zip deflated whoops let me spell that
05:49 - right okay so now we can see that we are
05:53 - opening this zip file with a compression
05:55 - set to zip file dot zip deflated so if I
06:00 - run that then we can see that we don't
06:01 - get any errors down here so that is how
06:05 - we compress a zip file when we're
06:08 - writing it ok so so far we've created a
06:11 - zip file within our script but we might
06:13 - want to extract the zip file within our
06:16 - script as well so let's go ahead and do
06:18 - that so I'll go ahead and delete what we
06:21 - just extracted so that we don't have
06:25 - this here within our script so I'm going
06:27 - to delete this files directory I'm going
06:30 - to keep the files archive this files dot
06:32 - zip because I'm going to extract that
06:34 - within my Python script now first I'm
06:37 - going to copy the section where we
06:38 - created our zip file
06:41 - and paste this down here a line and then
06:46 - I'm just going to comment out that first
06:48 - part so first let me just delete these
06:51 - sections here within the context manager
06:52 - where we are writing to our zip file
06:56 - because now we're going to be extracting
06:58 - and now instead of writing a zip file
07:01 - we're now reading a zip file that
07:03 - already exists so instead of aw here for
07:07 - writing a file let's change this to an R
07:10 - for reading a file and I'm going to get
07:13 - rid of this compression part as well
07:15 - since we're no longer creating that ok
07:18 - so we can see that we have a context
07:20 - manager here it says with zip file dot
07:22 - zip file and we are reading in this
07:26 - files zip which we created earlier and
07:29 - now if we just want to see what's in the
07:32 - zip file then we can look at a list of
07:35 - the names of the files within that zip
07:37 - so to do this we can just say I will
07:40 - print this out we'll print out my zip
07:43 - dot name list and this is a method here
07:47 - so don't forget these parentheses so if
07:51 - I run this then we can see that we get
07:53 - the names of the files in that zip
07:56 - archive that we just read in and now
08:00 - with this zip file we can extract all of
08:03 - those by saying so I'm just going to
08:07 - delete this name list here now we
08:10 - actually want to extract these so to
08:12 - extract these I'll just say my zip dot
08:15 - extract all and that's a method and when
08:20 - we extract this let's give this a name
08:23 - for the directory where we're going to
08:24 - extract these files so and extract all
08:28 - here I'm just going to call this
08:30 - directory files so if I run this we can
08:33 - see that we didn't get any errors here
08:35 - and if I open up my Finder window then
08:38 - we can see that now we have this files
08:40 - directory with those files extracted so
08:43 - we we extracted this zip file here and
08:47 - created this files directory all within
08:50 - our Python script now if you just want
08:53 - to extract a specific
08:55 - then we can do that as well so if you
08:57 - have a zip file that has you know tons
08:59 - of files and you just want certain files
09:00 - out of there then you can extract just
09:03 - single files so for example let's say
09:06 - that I only wanted to extract the
09:08 - thumbnail dot PNG from my zip file so
09:11 - first let me go back and delete the
09:14 - original thumbnail dot PNG that I have
09:17 - here in my directory and now I will
09:20 - extract that thumbnail dot PNG from this
09:24 - files zip archive so to just extract
09:26 - that file instead of saying my zip dot
09:29 - extract all here I'm just going to say
09:32 - my zip dot extract and then pass in the
09:37 - name of the file that we want to extract
09:40 - and that was thumbnail dot PNG so now if
09:44 - I run this we didn't get any errors and
09:47 - if I open this up we can see that now we
09:49 - have that thumbnail dot PNG back in our
09:52 - directory here ok so that covers the
09:54 - basics of zip files but another common
09:57 - format for these zip files is gzip and
10:00 - we can't actually use this zip file
10:02 - module to create and extract gzip files
10:05 - to do that we could use the gzip module
10:08 - but I'd really like to show you this
10:10 - using the SH util module instead because
10:13 - it allows us to work with both zip and
10:15 - gzip files the reason I didn't show SH
10:18 - you till right off the bat is because I
10:20 - like how the zip file module allows us
10:22 - to work with these like we're used to
10:25 - working with other files and also when
10:27 - using Shu till I don't believe we can
10:30 - add individual files into an archive as
10:33 - far as I know we can just pass in an
10:35 - entire directory if anyone knows a way
10:37 - to zip individual files with SH util
10:40 - with the Shu told module then be sure to
10:43 - let me know if I'm wrong about that in
10:45 - the comment section below but I use this
10:48 - when I'm zipping and unzipping entire
10:50 - directories so let's see how to do this
10:52 - so let me get rid of everything that
10:54 - we've done here so far and now I'm going
10:58 - to import the SH util module so that is
11:01 - going to be import and this is SH util
11:04 - ok so now let's use the SH util
11:08 - module to create a zip file of an entire
11:11 - directory and I'll use that files
11:13 - directory that we extracted in our
11:15 - previous example so to do this we can
11:18 - just say Sh util dot make underscore
11:22 - archive and now we need to pass in a
11:26 - couple of arguments here so the first
11:29 - argument is going to be the name of the
11:32 - file that we want to create so I'm going
11:35 - to call this another and since we
11:38 - already have one call two files that's
11:40 - the one that we're going to be working
11:41 - with and now we need to pass in the
11:44 - format and there are some different
11:46 - formats and we're going to take a look
11:48 - at you know gzip here in a second but
11:50 - for now I'm just going to use zip I also
11:53 - show you the other formats that we can
11:55 - use as well and now we are going to pass
11:59 - in the directory that we want to zip so
12:02 - just so this isn't too confusing here we
12:05 - are going to zip this directory up here
12:08 - this files directory and we are going to
12:10 - create an archive called another so that
12:16 - is called files and this is all that we
12:19 - need right here
12:21 - so if I run this then let's see what
12:24 - this did I'm going to pull up my finder
12:25 - here so we can see that it took this
12:28 - files directory here and it created a
12:32 - zip archive called another dot zip and
12:35 - it used sip since we passed in zip as
12:38 - the format and if I open this then now I
12:42 - have another directory and it has test
12:45 - txt and thumbnail dot PNG within there
12:49 - okay so this was pretty simple
12:52 - making a zip file from a directory using
12:55 - the SH util module all we had was this
12:59 - one line right here and extracting the
13:02 - contents is just as easy so let me
13:05 - delete the folder that I just extracted
13:07 - manually so I'm going to delete this
13:11 - another folder there and then I'll
13:15 - extract that using Python so we can just
13:18 - come back over here to the script and
13:20 - I'm going to comment out where we
13:22 - created our zip file since we already
13:25 - created that and to extract that zip
13:28 - file that we created we can just say SH
13:32 - util dot unpack underscore archive and
13:37 - then first we need to pass in an
13:40 - argument of the archive that we want to
13:43 - unpack and we call that another dot zip
13:46 - you have to add the dot zip here or else
13:49 - it won't know what directory you're
13:51 - talking about
13:52 - and now let's pass in a name for the
13:56 - folder that we would like to unpack this
13:57 - to so I'm just going to call this
14:00 - another for another directory and if I
14:04 - run this then open this up then we can
14:08 - see that we deleted this before but we
14:10 - have unpacked that zip file and we have
14:14 - our files there in that unpacked
14:15 - directory now like I was saying the SH
14:19 - util module allows us to make and unpack
14:22 - G zip archives as well so there are some
14:25 - other archive formats but I'm not too
14:27 - familiar with all of these I have these
14:30 - pulled up here in a snippets file so let
14:33 - me switch over here so these are the
14:35 - different formats here so we have zip
14:38 - which is a zip file we have tar and tar
14:42 - is just an uncompressed tar file we have
14:44 - GZ tar which is a gzip tar file and BZ
14:49 - tar be zipped tar file and XZ tar and XZ
14:54 - tar file so those are the different
14:56 - formats there and from these snippets
14:59 - here we can see that to make a gzip
15:02 - archive right here a gzip tar file we
15:05 - can use this GZ tar as the format that
15:10 - we pass in to our make archive so I'm
15:14 - going to comment where we are unpacking
15:17 - our archive here and uncomment where we
15:20 - are making an archive and now instead of
15:22 - doing another zip file I'm going to do
15:26 - another as the name steel and I will
15:29 - pass in that GZ tar format instead so if
15:34 - I run this
15:35 - then let me open up my directory here
15:37 - kind of getting crowded with all these
15:39 - zip files but we can see right here I
15:41 - know that this text is a little small on
15:43 - my Mac but we have a GZ archive here
15:47 - it's another tar.gz and i can unpack
15:51 - this one just like I've been doing the
15:52 - others first I would delete the other
15:55 - the folder that we have so far I can
15:58 - unpack that
16:00 - tar.gz and we can see that here we have
16:04 - the test txt file and our thumbnail dot
16:07 - PNG so we can see that that worked and I
16:10 - won't show unpacking that in Python
16:12 - because it's just the same process of
16:14 - using that unpack archive function and
16:18 - specifying that gzip file name instead
16:21 - of the zip file name okay so with those
16:23 - examples of local files out of the way
16:26 - let's now see how we can go about
16:28 - downloading a zip file online and
16:30 - extracting that so this is something
16:32 - that might be really common if you're
16:34 - writing automated scripts for pulling
16:36 - down certain data and in this example
16:38 - I'll use the zip file of the data from
16:41 - the 20-19 stackoverflow developer survey
16:45 - so I've got that page pulled up here in
16:48 - my browser so let me open this up so
16:50 - I've got the page open here where we can
16:52 - download this data now this is easy to
16:55 - find online but if you want to follow
16:58 - along then I do have a link to this page
17:02 - in the description section below as well
17:03 - okay so here are all the download links
17:06 - here for all the different years and I'm
17:08 - gonna want the 2019 data and I need the
17:11 - link to download this zip file to get
17:14 - that link we can right click on it and
17:17 - then click here where it says copy link
17:20 - address so I'm going to copy that link
17:22 - address now if you're writing an
17:25 - automated script with a URL that's
17:27 - created dynamically so this link address
17:30 - here is always going to be the same but
17:32 - if you have a link that's being created
17:35 - dynamically then you either have to know
17:38 - that URL or how that URL is generated or
17:42 - you have to go out and scrape that URL
17:44 - somehow using something like
17:46 - beautifulsoup and i've got a video on
17:48 - beautiful soup as well that I'll add to
17:51 - the description section below if anyone
17:53 - has never scraped websites before that
17:56 - goes into depth about how to do that but
17:59 - for our example here we will just copy
18:02 - this link address but again if you're
18:04 - scraping the site you can grab it that
18:06 - way so now let's go back to our script
18:09 - with that URL to download that zip file
18:13 - and now we'll just erase everything that
18:15 - we have here so far and now let's import
18:19 - requests now you'll need requests
18:22 - installed - if you don't have that pip
18:24 - installed yet now again I'm not going to
18:26 - go into the details of these other
18:28 - modules in this video so if you'd like
18:31 - to learn more about what we're doing
18:32 - here in requests then you can watch my
18:34 - video on that specific topic so I'll
18:37 - leave a link to that video in the
18:38 - description as well but I'll go ahead
18:40 - and import this say import requests and
18:44 - now to grab that file we can just say R
18:48 - is equal to request dot git and then I'm
18:54 - going to paste in the link address which
18:58 - apparently they're storing this on on
19:01 - Google Drive to that CSV file so that is
19:07 - that URL there and now to download this
19:09 - to our machine we're going to say with
19:13 - open and now what we want to call this
19:17 - file so I'm going to call this data
19:19 - zip and now we want to open this file in
19:23 - a in write mode and also a B for byte
19:28 - mode because we're actually downloading
19:30 - bytes here okay so now we can say as F
19:35 - and now we have opened this data dot zip
19:40 - file and we're ready to write these
19:42 - bytes that we just downloaded so now
19:44 - let's actually write them so I'll say F
19:46 - dot write and we will write the bytes
19:50 - that we download from this link and to
19:52 - do that it is r dot content okay so now
19:57 - at this point we should download this
20:02 - data from this URL here and save that
20:06 - into a data type file and now to see
20:09 - what's in that zip file that we download
20:11 - we can just use what we learned earlier
20:13 - and print out the name list or anything
20:16 - that you want from that zip file so let
20:19 - me import the zip file module so I'll
20:23 - import zip file and now down here at the
20:26 - bottom I can just say with zip file dot
20:32 - zip file and we want to open up data dot
20:37 - zip because that's what we called the
20:39 - file that we're writing here and we want
20:41 - to open this in read mode and I'll say
20:45 - as data underscore zip and now we can
20:49 - just print data zip dot nameless we can
20:55 - also extract that data whatever you want
20:57 - to do with it but I'll just print the
20:59 - name list for now so let's run that and
21:02 - see if that entire process works so I'll
21:05 - save that and run it whoops looks like I
21:09 - misspelled requests here yep I should
21:13 - have seen that don't know how I didn't
21:15 - okay so now let me rerun this now this
21:19 - might take a second because it's going
21:22 - to go out on the internet here okay so I
21:25 - got another error here it says bad zip
21:29 - file file is not a zip file so I'm
21:33 - assuming everything else looks right
21:35 - here so I'm not too sure what's going on
21:38 - here I'm not gonna bore you guys too
21:40 - long with trying to figure this out so
21:43 - I'm going to pause the video real quick
21:45 - and go back and look at my notes and see
21:47 - what's going on here okay so I went back
21:49 - over my notes and I'm not really having
21:51 - any luck figuring out what is going on
21:54 - with this right now
21:55 - but let's go ahead and just do a backup
21:58 - just so you can see what this looks like
22:00 - so I'm going to go to my github here and
22:03 - you can download repositories as zip
22:07 - files so let's just use this as a backup
22:10 - so that I can show you what this looks
22:13 - like and maybe that issue will
22:16 - of itself with the stackoverflow
22:19 - downloads I'm not sure but I'm here on
22:24 - my github and I'm going here into my dot
22:26 - files repository let me zoom in here a
22:29 - little bit and on gob we can see that
22:31 - there is a button here for clone or
22:33 - download so I'm going to click on clone
22:35 - or download and then there is a download
22:38 - zip link right here so I'm gonna do the
22:40 - same thing that worked earlier on
22:43 - stackoverflow and it's not working now
22:45 - for some reason but I'm going to right
22:47 - click and I'm going to click on copy
22:50 - link address so I should have that link
22:55 - address copied and now I'm going to use
22:59 - this URL this github URL instead of that
23:04 - stackoverflow and now let me save and
23:09 - run this and now we can see that we
23:13 - printed out the name list of everything
23:15 - in that zip file and here we can see
23:19 - everything so I've got my dot files
23:21 - aliases file bash profile so it did
23:24 - download that zip file there and we
23:27 - named it datatype and we did extract or
23:30 - we actually didn't extract that data but
23:32 - we opened it up in zip format here and
23:35 - printed out the name list and if I
23:37 - wanted to extract that then it's as easy
23:39 - as just saying extract all running that
23:43 - and if I go back to finder here then we
23:47 - can see that we have that dot files
23:49 - master repository there that was
23:52 - extracted in my folder and also whenever
23:55 - I used extract all right there like we
23:58 - saw before I could have put a name in
24:02 - here to give that a specific name so if
24:04 - I just wanted that to be data then I
24:07 - could just call that data I'll take that
24:11 - print statement out and now we can see
24:14 - that that repository was now called data
24:17 - instead and we have that dot files
24:18 - master right there ok
24:21 - so sorry about that mishap there with
24:25 - the stack overflow data I'm not sure
24:28 - what happened
24:28 - usually these tutorials
24:30 - pretty smoothly without any hiccups but
24:33 - I couldn't quite figure that one out so
24:35 - maybe I think they changed the links on
24:37 - me or something while I was doing this
24:38 - video because it worked earlier and now
24:41 - it's not but with that said before we
24:43 - finish up here I would like to mention
24:46 - the sponsor of this video and that is
24:48 - brilliant org so if you'd like to learn
24:51 - more about programming and programming
24:52 - concepts like we touched in this video
24:54 - then I would definitely recommend
24:56 - checking out brilliant dot org brilliant
24:58 - is a problem-solving website that helps
25:00 - you understand underlying concepts by
25:03 - actively working through guided lessons
25:04 - and they've recently added some
25:06 - brand-new interactive content that makes
25:08 - problem-solving and challenges even more
25:11 - fun and hands-on so if you'd like to
25:13 - learn more about programming with Python
25:14 - then I would recommend checking out
25:16 - their newer Python course that covers
25:19 - everything from the basics to some real
25:21 - world applications they even use Python
25:23 - in their statistics courses and will
25:25 - quiz you on how to correctly analyze the
25:27 - data within the language so they're
25:29 - guided lessons will challenge you but
25:31 - you also have the ability to get hints
25:33 - or even solutions if you need them it's
25:34 - really tailored towards understanding
25:36 - the material they even have a coding
25:38 - environment built into their website so
25:40 - that you can run code directly in the
25:42 - browser and that's a great compliment to
25:44 - watching my tutorials because you can
25:45 - apply what you've learned and their
25:46 - active problem-solving environment and
25:48 - that helps to solidify that knowledge so
25:51 - to support my channel and learn more
25:52 - about brilliant you can go to brilliant
25:54 - org forward slash CMS to sign up for
25:57 - free and also the first 200 people that
25:59 - go to that link will get 20% off the
26:01 - annual premium subscription and you can
26:04 - find that link in the description
26:05 - section below and again that's brilliant
26:07 - org forge slash CMS ok so I think that's
26:12 - gonna do it for this video hopefully now
26:14 - you have a pretty good idea for how you
26:15 - can create and extract zip files in
26:18 - Python along with a few other tricks
26:20 - like I said this is really useful for
26:22 - writing these automated scripts of
26:24 - pulling down data and doing everything
26:27 - within your script instead of doing some
26:29 - of these steps manually every single
26:31 - time but if anyone does have any
26:33 - questions about will be covered in this
26:34 - video then feel free to ask in the
26:36 - comments section below and I'll do my
26:37 - best to answer those and if you enjoy
26:39 - these tutorials and would like to
26:40 - support them then there are several ways
26:41 - you can do that the easiest ways to
26:43 - simply like
26:44 - video and give it a thumbs up and also
26:46 - it's a huge help to share these videos
26:47 - with anyone who you think would find
26:48 - them useful and if you have the means
26:50 - you can contribute through patreon and
26:51 - there's a link to that page and
26:53 - inscription section below be sure to
26:55 - subscribe for future videos and thank
26:56 - you all for watching
27:08 - you

Cleaned transcript:

hey there how's it going everybody in this video we're going to be learning how to read and write zip files now this can be extremely useful if you're wanting to write automated scripts to do all of this kind of stuff for you in Python so for example in my latest video where we analyze the 2019 Stack Overflow developer survey I went out and I downloaded that data manually but if you want to automate that entire process using Python then we can do that in a few ways so we'll learn how to use the zip file module to do this but we'll also see a couple of other ways to do this using the SH util module to do this in a bit simpler way and with SH util we'll also be able to work with gzip files as well now I'd also like to mention that we do have a sponsor for this video and that is brilliant org so I really want to thank brilliant for sponsoring this video and it would be great if y'all could go and check them out using the link in the description section below and support the sponsors and I'll talk more about their services in just a bit so with that said let's go ahead and get started so first let me show you how to do this with local files on our machine so that we can get the hang of this and then later in the video we'll see how we can download a zip file online and extract that data so I currently have a directory open here on my desktop and within this directory I also have a couple of files that I'm going to write to a zip archive so one of these files is just a simple text file called test txt and the other is an image called thumbnail dot PNG so if I open test dot txt we can see that it's just a text file that says this is a test file we'll use this file for the zip tutorial and for the image this is just the thumbnail for this video ok so let me open up our script here and we will write a script to zip these files and first we're going to do this using the zip file module so I'm going to import the zip file module and that is in the standard library so you don't need to install anything and now in order to create a new zip file we can work with this in a simple way just like we work with other files so we can open this up for writing just by saying something like my zip is equal to and this will be zip dot zip file now this is a zip file class be sure you get the casing correct here it's a capital Z and a capital F and now let's put what we want to call this zip archive so I'll just call this files dot zip and now we want to say that we want to open this in write mode since we're going to be creating a zip file okay and now we can write those files to our new zip file here just by saying my zip dot right and then pass in the files that we want so first I want to write test dot txt and also I want to write thumbnail whoops let me do this here thumbnail dot PNG and once we have written the files that we want to this zip file then I can just say my zip dot closed okay so let's run the script and see if we get a zip archive in this directory so I don't have any output here so that's good that we don't have any errors so let me open up finder here and here within finder we can see that we have this files dot zip archive so let me extract that here within my Finder window so I'm just going to double click this on windows you might extract that a different way and now I have this files directory and if I look in here we can see that we have this test txt file and this thumbnail dot PNG image okay so we successfully created a zip file using Python so one thing that you might have noticed when we created our zip file is that we opened the file and close the zip file manually and usually this is a good indication that we should be using a context manager instead and we can do this with zip files as well so if you aren't familiar with context managers then I do have a separate video on that topic so I'll be sure to leave a link to that video in the description section below if anyone is interested learning more about those so in order to do this with zip files we can just say I'm going to grab this part here I'm just going to say with zip file dot zip file everything is the same there and then I'll just say as my zip and open up our context manager here and then I can just indent these sections here into our context manager and then I can get rid of this closed part down here at the bottom because that's what context managers are used for it opens the file and then it handles the closing of that file for us so now just to make sure that this worked I can delete the files archive that we created before and now if I rerun our script then we can see that we still have that files archive with those files so that's good now you might expect your zip file to be compressed here but by default we're not actually creating a compressed zip file in order to do this we need to pass in a specific value to the compression parameter now the zip file that I'm creating here doesn't have too many files in here so there's probably not of competive compression that can be done but let's go back and just see how we would be able to do this so to compress this zip file we need to pass in an additional parameter here of compression and I will set this equal to zip file dot and this is all capital here zip deflated whoops let me spell that right okay so now we can see that we are opening this zip file with a compression set to zip file dot zip deflated so if I run that then we can see that we don't get any errors down here so that is how we compress a zip file when we're writing it ok so so far we've created a zip file within our script but we might want to extract the zip file within our script as well so let's go ahead and do that so I'll go ahead and delete what we just extracted so that we don't have this here within our script so I'm going to delete this files directory I'm going to keep the files archive this files dot zip because I'm going to extract that within my Python script now first I'm going to copy the section where we created our zip file and paste this down here a line and then I'm just going to comment out that first part so first let me just delete these sections here within the context manager where we are writing to our zip file because now we're going to be extracting and now instead of writing a zip file we're now reading a zip file that already exists so instead of aw here for writing a file let's change this to an R for reading a file and I'm going to get rid of this compression part as well since we're no longer creating that ok so we can see that we have a context manager here it says with zip file dot zip file and we are reading in this files zip which we created earlier and now if we just want to see what's in the zip file then we can look at a list of the names of the files within that zip so to do this we can just say I will print this out we'll print out my zip dot name list and this is a method here so don't forget these parentheses so if I run this then we can see that we get the names of the files in that zip archive that we just read in and now with this zip file we can extract all of those by saying so I'm just going to delete this name list here now we actually want to extract these so to extract these I'll just say my zip dot extract all and that's a method and when we extract this let's give this a name for the directory where we're going to extract these files so and extract all here I'm just going to call this directory files so if I run this we can see that we didn't get any errors here and if I open up my Finder window then we can see that now we have this files directory with those files extracted so we we extracted this zip file here and created this files directory all within our Python script now if you just want to extract a specific then we can do that as well so if you have a zip file that has you know tons of files and you just want certain files out of there then you can extract just single files so for example let's say that I only wanted to extract the thumbnail dot PNG from my zip file so first let me go back and delete the original thumbnail dot PNG that I have here in my directory and now I will extract that thumbnail dot PNG from this files zip archive so to just extract that file instead of saying my zip dot extract all here I'm just going to say my zip dot extract and then pass in the name of the file that we want to extract and that was thumbnail dot PNG so now if I run this we didn't get any errors and if I open this up we can see that now we have that thumbnail dot PNG back in our directory here ok so that covers the basics of zip files but another common format for these zip files is gzip and we can't actually use this zip file module to create and extract gzip files to do that we could use the gzip module but I'd really like to show you this using the SH util module instead because it allows us to work with both zip and gzip files the reason I didn't show SH you till right off the bat is because I like how the zip file module allows us to work with these like we're used to working with other files and also when using Shu till I don't believe we can add individual files into an archive as far as I know we can just pass in an entire directory if anyone knows a way to zip individual files with SH util with the Shu told module then be sure to let me know if I'm wrong about that in the comment section below but I use this when I'm zipping and unzipping entire directories so let's see how to do this so let me get rid of everything that we've done here so far and now I'm going to import the SH util module so that is going to be import and this is SH util ok so now let's use the SH util module to create a zip file of an entire directory and I'll use that files directory that we extracted in our previous example so to do this we can just say Sh util dot make underscore archive and now we need to pass in a couple of arguments here so the first argument is going to be the name of the file that we want to create so I'm going to call this another and since we already have one call two files that's the one that we're going to be working with and now we need to pass in the format and there are some different formats and we're going to take a look at you know gzip here in a second but for now I'm just going to use zip I also show you the other formats that we can use as well and now we are going to pass in the directory that we want to zip so just so this isn't too confusing here we are going to zip this directory up here this files directory and we are going to create an archive called another so that is called files and this is all that we need right here so if I run this then let's see what this did I'm going to pull up my finder here so we can see that it took this files directory here and it created a zip archive called another dot zip and it used sip since we passed in zip as the format and if I open this then now I have another directory and it has test txt and thumbnail dot PNG within there okay so this was pretty simple making a zip file from a directory using the SH util module all we had was this one line right here and extracting the contents is just as easy so let me delete the folder that I just extracted manually so I'm going to delete this another folder there and then I'll extract that using Python so we can just come back over here to the script and I'm going to comment out where we created our zip file since we already created that and to extract that zip file that we created we can just say SH util dot unpack underscore archive and then first we need to pass in an argument of the archive that we want to unpack and we call that another dot zip you have to add the dot zip here or else it won't know what directory you're talking about and now let's pass in a name for the folder that we would like to unpack this to so I'm just going to call this another for another directory and if I run this then open this up then we can see that we deleted this before but we have unpacked that zip file and we have our files there in that unpacked directory now like I was saying the SH util module allows us to make and unpack G zip archives as well so there are some other archive formats but I'm not too familiar with all of these I have these pulled up here in a snippets file so let me switch over here so these are the different formats here so we have zip which is a zip file we have tar and tar is just an uncompressed tar file we have GZ tar which is a gzip tar file and BZ tar be zipped tar file and XZ tar and XZ tar file so those are the different formats there and from these snippets here we can see that to make a gzip archive right here a gzip tar file we can use this GZ tar as the format that we pass in to our make archive so I'm going to comment where we are unpacking our archive here and uncomment where we are making an archive and now instead of doing another zip file I'm going to do another as the name steel and I will pass in that GZ tar format instead so if I run this then let me open up my directory here kind of getting crowded with all these zip files but we can see right here I know that this text is a little small on my Mac but we have a GZ archive here it's another tar.gz and i can unpack this one just like I've been doing the others first I would delete the other the folder that we have so far I can unpack that tar.gz and we can see that here we have the test txt file and our thumbnail dot PNG so we can see that that worked and I won't show unpacking that in Python because it's just the same process of using that unpack archive function and specifying that gzip file name instead of the zip file name okay so with those examples of local files out of the way let's now see how we can go about downloading a zip file online and extracting that so this is something that might be really common if you're writing automated scripts for pulling down certain data and in this example I'll use the zip file of the data from the 2019 stackoverflow developer survey so I've got that page pulled up here in my browser so let me open this up so I've got the page open here where we can download this data now this is easy to find online but if you want to follow along then I do have a link to this page in the description section below as well okay so here are all the download links here for all the different years and I'm gonna want the 2019 data and I need the link to download this zip file to get that link we can right click on it and then click here where it says copy link address so I'm going to copy that link address now if you're writing an automated script with a URL that's created dynamically so this link address here is always going to be the same but if you have a link that's being created dynamically then you either have to know that URL or how that URL is generated or you have to go out and scrape that URL somehow using something like beautifulsoup and i've got a video on beautiful soup as well that I'll add to the description section below if anyone has never scraped websites before that goes into depth about how to do that but for our example here we will just copy this link address but again if you're scraping the site you can grab it that way so now let's go back to our script with that URL to download that zip file and now we'll just erase everything that we have here so far and now let's import requests now you'll need requests installed if you don't have that pip installed yet now again I'm not going to go into the details of these other modules in this video so if you'd like to learn more about what we're doing here in requests then you can watch my video on that specific topic so I'll leave a link to that video in the description as well but I'll go ahead and import this say import requests and now to grab that file we can just say R is equal to request dot git and then I'm going to paste in the link address which apparently they're storing this on on Google Drive to that CSV file so that is that URL there and now to download this to our machine we're going to say with open and now what we want to call this file so I'm going to call this data zip and now we want to open this file in a in write mode and also a B for byte mode because we're actually downloading bytes here okay so now we can say as F and now we have opened this data dot zip file and we're ready to write these bytes that we just downloaded so now let's actually write them so I'll say F dot write and we will write the bytes that we download from this link and to do that it is r dot content okay so now at this point we should download this data from this URL here and save that into a data type file and now to see what's in that zip file that we download we can just use what we learned earlier and print out the name list or anything that you want from that zip file so let me import the zip file module so I'll import zip file and now down here at the bottom I can just say with zip file dot zip file and we want to open up data dot zip because that's what we called the file that we're writing here and we want to open this in read mode and I'll say as data underscore zip and now we can just print data zip dot nameless we can also extract that data whatever you want to do with it but I'll just print the name list for now so let's run that and see if that entire process works so I'll save that and run it whoops looks like I misspelled requests here yep I should have seen that don't know how I didn't okay so now let me rerun this now this might take a second because it's going to go out on the internet here okay so I got another error here it says bad zip file file is not a zip file so I'm assuming everything else looks right here so I'm not too sure what's going on here I'm not gonna bore you guys too long with trying to figure this out so I'm going to pause the video real quick and go back and look at my notes and see what's going on here okay so I went back over my notes and I'm not really having any luck figuring out what is going on with this right now but let's go ahead and just do a backup just so you can see what this looks like so I'm going to go to my github here and you can download repositories as zip files so let's just use this as a backup so that I can show you what this looks like and maybe that issue will of itself with the stackoverflow downloads I'm not sure but I'm here on my github and I'm going here into my dot files repository let me zoom in here a little bit and on gob we can see that there is a button here for clone or download so I'm going to click on clone or download and then there is a download zip link right here so I'm gonna do the same thing that worked earlier on stackoverflow and it's not working now for some reason but I'm going to right click and I'm going to click on copy link address so I should have that link address copied and now I'm going to use this URL this github URL instead of that stackoverflow and now let me save and run this and now we can see that we printed out the name list of everything in that zip file and here we can see everything so I've got my dot files aliases file bash profile so it did download that zip file there and we named it datatype and we did extract or we actually didn't extract that data but we opened it up in zip format here and printed out the name list and if I wanted to extract that then it's as easy as just saying extract all running that and if I go back to finder here then we can see that we have that dot files master repository there that was extracted in my folder and also whenever I used extract all right there like we saw before I could have put a name in here to give that a specific name so if I just wanted that to be data then I could just call that data I'll take that print statement out and now we can see that that repository was now called data instead and we have that dot files master right there ok so sorry about that mishap there with the stack overflow data I'm not sure what happened usually these tutorials pretty smoothly without any hiccups but I couldn't quite figure that one out so maybe I think they changed the links on me or something while I was doing this video because it worked earlier and now it's not but with that said before we finish up here I would like to mention the sponsor of this video and that is brilliant org so if you'd like to learn more about programming and programming concepts like we touched in this video then I would definitely recommend checking out brilliant dot org brilliant is a problemsolving website that helps you understand underlying concepts by actively working through guided lessons and they've recently added some brandnew interactive content that makes problemsolving and challenges even more fun and handson so if you'd like to learn more about programming with Python then I would recommend checking out their newer Python course that covers everything from the basics to some real world applications they even use Python in their statistics courses and will quiz you on how to correctly analyze the data within the language so they're guided lessons will challenge you but you also have the ability to get hints or even solutions if you need them it's really tailored towards understanding the material they even have a coding environment built into their website so that you can run code directly in the browser and that's a great compliment to watching my tutorials because you can apply what you've learned and their active problemsolving environment and that helps to solidify that knowledge so to support my channel and learn more about brilliant you can go to brilliant org forward slash CMS to sign up for free and also the first 200 people that go to that link will get 20% off the annual premium subscription and you can find that link in the description section below and again that's brilliant org forge slash CMS ok so I think that's gonna do it for this video hopefully now you have a pretty good idea for how you can create and extract zip files in Python along with a few other tricks like I said this is really useful for writing these automated scripts of pulling down data and doing everything within your script instead of doing some of these steps manually every single time but if anyone does have any questions about will be covered in this video then feel free to ask in the comments section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways to simply like video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page and inscription section below be sure to subscribe for future videos and thank you all for watching you
