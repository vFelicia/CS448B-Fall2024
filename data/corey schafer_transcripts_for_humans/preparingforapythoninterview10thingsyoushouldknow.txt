With timestamps:

00:00 - hey everybody how's it going uh in this
00:02 - video uh we're going to learn how to
00:03 - prepare for a python interview and 10
00:06 - things that you should know before going
00:08 - into this interview um so I'm going to
00:10 - go over some different advice and we'll
00:12 - also look at some code examples to get
00:14 - you ready uh so one thing before I get
00:16 - started is uh that a lot of what I'm
00:18 - going to say here applies to entrylevel
00:21 - python positions so if you're applying
00:23 - for a senior level position uh then
00:26 - likely that's going to require you to
00:28 - know all of the items in this list but
00:30 - then you'll also need to know some more
00:32 - advanced topics as well um so with that
00:34 - said let's go ahead and get started so
00:37 - the first thing is that you should know
00:38 - how to write code on a whiteboard or or
00:41 - a piece of paper now this isn't just
00:43 - specific to python this goes for any
00:46 - programming language that you're going
00:47 - to have an interview with because a lot
00:49 - of companies won't have a computer set
00:52 - up for your interview so you're likely
00:54 - going to be in a room with either a
00:56 - notebook or a whiteboard and live coding
00:59 - might not even come up in your interview
01:01 - but if it does then you need to be ready
01:03 - to do that without a computer so if
01:05 - you've never done this before then you'd
01:06 - actually be surprised at how hard it is
01:08 - to not use a computer um so you might
01:12 - want to go ahead and start doing all of
01:14 - your practice problems that you're
01:15 - preparing for your interview do them all
01:17 - on a whiteboard or on a piece of paper
01:19 - and then go back and check all of those
01:22 - answers on a computer to make sure that
01:23 - you got all the syntax correct and
01:25 - everything like that okay so moving on
01:28 - to number two know the base basic
01:30 - control flow within python so by control
01:34 - flow I mean know how to use for Loops
01:37 - while Loops uh if and else statements
01:39 - and things like that um so I have a code
01:42 - example here that we can take a look at
01:44 - so I know a lot of this looks extremely
01:46 - basic but like I said before you're not
01:49 - going to have a computer so you want to
01:50 - know how to write these things out uh
01:53 - without thinking about it you're not
01:54 - going to have any autoc completion or
01:56 - anything like that um so know how to
01:59 - write down a for Loop and loop through a
02:01 - certain amount of numbers um so if I run
02:03 - this code here it just Loops through
02:05 - these numbers um you want to know how to
02:08 - use while Loops because those could come
02:10 - up in an interview as well um and then
02:14 - you also want to know how to use your uh
02:17 - if and else statements and um also um
02:21 - your L if statements here now I know
02:24 - these three things uh you know for Loops
02:26 - while loops and these if statements I
02:27 - know it seems completely basic but you'd
02:30 - be surprised at how many people uh
02:32 - freeze up on these very basic questions
02:35 - whenever they are new to the interview
02:37 - process so just be sure that you can
02:39 - write them down all by hand and that you
02:41 - know them inside it out and exactly how
02:43 - the uh how the program is going to uh
02:46 - flow through all of these
02:49 - conditionals okay so number three be
02:51 - able to discuss how you've used python
02:54 - in the past so your interviewer is
02:56 - likely going to ask you about past
02:58 - projects and you just don't want to draw
03:00 - a blank um so if you've never used
03:03 - python professionally and you're
03:04 - applying for an entry-level position uh
03:06 - then be sure to write a basic project uh
03:09 - before the interview so that you can
03:11 - have some example of something uh that
03:14 - you've written in your free time and
03:15 - also whatever you choose to write try to
03:17 - make it something that's interesting and
03:19 - that'll be interesting to your
03:20 - interviewer um you know just don't tell
03:23 - them how you've uh solved a bunch of
03:26 - sample interview problems like fs buuz
03:28 - and Fibonacci sequences and things like
03:30 - that so for example if you need a couple
03:32 - of ideas for some cool programs that you
03:35 - could write um maybe you want to play
03:37 - around with web scraping and make a
03:40 - script that pulls weather information
03:43 - each day uh you can use the beautiful
03:45 - sup module for that um or you could
03:47 - write a program that performs system
03:49 - tasks so you could write a program that
03:51 - cleans up folders on your computer or
03:53 - moves files around uh displays CPU and
03:57 - memory or something along those lines so
03:59 - so for example I've written a a really
04:02 - small program here that just goes uh
04:05 - uses the OS module and the glob module
04:08 - goes into this directory here if I run
04:10 - this code it just goes into uh My Demo
04:14 - directory here and prints out all of the
04:17 - uh jpeg images so you know something
04:19 - like this just learn how to write a file
04:21 - like this and then whenever you're
04:23 - interviewer asks you the question you
04:25 - know you can say something interesting
04:27 - like well once I did write a program
04:29 - that um looked through my file system
04:31 - and found all these images and moved
04:33 - them to a specific location or something
04:35 - like that so those are just a couple of
04:37 - examples and ideas to get you started
04:39 - but I'm sure that you can think of some
04:41 - really cool ideas on your own after
04:42 - thinking about it for a few
04:44 - minutes okay so number four uh know how
04:48 - to solve common interview problems and
04:51 - questions so a little bit ago I
04:53 - mentioned fizzbuzz and Fibonacci
04:56 - sequences and things like that um those
04:58 - are some common questions that
05:00 - interviewers like to ask now there's
05:02 - been a lot of debate around that type of
05:04 - interview process on online forums um a
05:07 - lot of people say that uh those type of
05:09 - problems aren't a good indicator of
05:12 - programming skill and that interviewers
05:14 - should uh should ask better problems
05:17 - that more reflect real world situations
05:20 - but even though there's a lot of debate
05:22 - whether interviewers should ask those
05:24 - questions a lot of interviewers do ask
05:26 - those questions so um so whether or not
05:28 - you think that they should shouldn't uh
05:30 - is a totally different discussion but um
05:33 - but you should be prepared to at least
05:35 - answer those questions and really it
05:37 - doesn't take a long time to learn how to
05:39 - uh solve a lot of these common problems
05:41 - so like for example if you don't know
05:43 - what fizzbuzz is basically it is um your
05:47 - interviewer will ask you to uh loop
05:50 - through a range of numbers and if the
05:52 - number is divisible by three then print
05:55 - out Fizz if it's divisible by five print
05:57 - out buzz if it's divisible by both than
06:00 - print out fs buuz and this is a solution
06:03 - to the problem here if I print this out
06:06 - um you can see that um it Loops through
06:09 - and everyone that's divisible by three
06:11 - it prints out Fizz and Buzz and if it's
06:13 - divisible by both then it prints out
06:15 - fizzbuzz so usually these kind of
06:17 - questions are meant to weed out people
06:19 - who don't uh understand the basic
06:22 - concepts of a computer language so um
06:25 - for example here you have to know how to
06:26 - use uh for loops and enterate over a um
06:30 - a range of numbers um you know the you
06:33 - have to know the modulo operator and um
06:36 - some things like that and it's the same
06:38 - thing with the Fibonacci sequence that's
06:40 - another question that a lot of
06:42 - interviewers like to ask um so the
06:45 - Fibonacci sequence if you don't know
06:46 - what that is uh basically uh you print
06:49 - out a number and each each number that
06:53 - you print out is the previous two
06:56 - numbers added together um so here let me
07:00 - just print out this example it'll be
07:01 - easier to show so you can see I printed
07:03 - out these numbers here so zero and one
07:07 - if you add those together it equals one
07:10 - if you add one and one it equals two if
07:12 - you add one and two it equals three and
07:14 - it keeps going and keeps G um so you can
07:16 - do this in let's see this is four lines
07:18 - of python code here so like I said a lot
07:21 - of people don't like these questions
07:23 - because they're not the best indicator
07:25 - of programming ability um but they do
07:28 - like to ask these questions and they're
07:30 - so short that it really wouldn't hurt
07:32 - you to learn um how to solve these
07:34 - problems and not only should you learn
07:37 - how to solve them just don't memorize
07:39 - these solutions to these because it'll
07:41 - be obvious that you're just um kind of
07:44 - regurgitating what you've memorized you
07:46 - really want to understand what's going
07:48 - on so for example in this Fibonacci
07:49 - Sequence um this is kind of a unique
07:52 - assignment here a comma b equals 0 comma
07:55 - 1 you want to understand what's going on
07:57 - there um you want to understand um
08:00 - what's going on in this assignment here
08:02 - that looks a little bit more complicated
08:04 - so uh look this up online understand
08:06 - what's going on and be prepared for
08:08 - these type of questions and these two
08:10 - questions aren't the only two common
08:12 - questions that get asked in interviews
08:14 - so after you understand these two
08:16 - questions uh you know get on Google and
08:19 - uh just Google python interview
08:21 - questions and take a look at the first
08:22 - few results because you might even run
08:24 - into a recruiter or an interviewer uh
08:27 - who has taken the questions straight
08:29 - from the first results of the Google
08:31 - search um so then you'd be prepared for
08:33 - those questions so it's a good practice
08:35 - just to go through those and um be ready
08:38 - for some of the basic stuff that people
08:39 - might throw at you okay so moving on
08:42 - here um number five uh no basic python
08:46 - data types and when to use them so these
08:49 - basic data types include um strings and
08:52 - lists and tuples and dictionaries and
08:54 - sets um not only should you understand
08:58 - um how they differ from each other and
09:00 - when you should use one over the other
09:03 - but also know how to iterate over each
09:06 - one so for example here um we just have
09:09 - a list here that we can iterate over um
09:12 - we have a tupal here that we can iterate
09:15 - over in the same way uh the dictionary
09:17 - is kind of unique so uh whenever we
09:20 - iterate over the dictionary here a
09:22 - dictionary is key value pairs um so we
09:25 - want to look at the key and value in all
09:29 - of the dictionaries items and then print
09:31 - those out so that's something that
09:33 - you'll probably get asked and you want
09:35 - to know how to solve and also sets if
09:38 - you don't know what a set is um pretty
09:40 - much it's a list with uh no repeated
09:43 - values and if you uh if we Loop through
09:45 - this list here and print this out you
09:48 - can see that all of these are unique
09:49 - values even though that there are uh
09:52 - duplicates that are added to this set so
09:54 - whenever I say that you want to know uh
09:56 - when to use different data types over
09:58 - another
10:00 - um like one question for example that
10:02 - you might get asked is uh why would you
10:04 - use a tupal instead of a list and that's
10:07 - something that you want to know the
10:08 - answer to um so I'm not going to go into
10:11 - that detail here but I will put some
10:13 - links into this description below um
10:16 - that kind of answer some of these
10:17 - questions for you and also for some
10:19 - bonus points in a question like this um
10:22 - if you can understand the underlying
10:25 - data structures and functionality of how
10:27 - these data types work then that would be
10:29 - great um so this that's more computer
10:32 - science related um but for example you
10:34 - should be able to talk about a
10:37 - dictionary being a hash table and
10:40 - exactly uh what that means um so yeah
10:43 - like I said I'm not going to go into
10:45 - much depth uh about that topic here but
10:47 - you should look up the underlying data
10:49 - structures involved with these data
10:51 - types and know their advantages uh know
10:54 - their weaknesses um know how data gets
10:57 - accessed Within These data types and
10:59 - also know when uh to when to properly
11:03 - use each data type okay so moving on
11:06 - here to uh number six know how to use
11:09 - list comprehensions um now this is a
11:12 - little bit more advanced but um this is
11:14 - the kind of information that will help
11:15 - you stick out amongst other candidates
11:18 - so for example I have a file here of
11:21 - list comprehensions now again I'm not
11:23 - going to go into too much detail here uh
11:25 - I have an entire video on list
11:27 - comprehensions dictionary comprehensions
11:29 - and set comprehensions so if you want
11:31 - more detail about that then I'll put
11:33 - that uh description uh I'll put that
11:36 - link in the description below um but
11:38 - basically it's a more clean and readable
11:40 - way to create these lists so for example
11:43 - in this um so say you have a sample
11:46 - problem where your interviewer gives you
11:48 - a list of 1 2 3 4 5 6 Seven 8 nine 10
11:51 - and then he says okay just create a list
11:54 - that gives me uh the square of each
11:57 - number in that list so after the top of
11:59 - your head you might want to write a for
12:00 - Loop that goes through each item and
12:03 - then squares the item and Returns the
12:05 - result and all that but I think your
12:07 - interviewer will be really impressed if
12:09 - you just know how to do this short
12:11 - little oneliner here and um list
12:14 - comprehensions are used in real world
12:16 - scenarios all the time so not only is it
12:18 - going to help you in your interview but
12:19 - it's going to help you actually on the
12:21 - job um so here we just are creating a
12:24 - list that is the square of the number
12:26 - for each number in the list so if we
12:29 - print that out you can see that we
12:31 - returned a list here with the squares of
12:33 - all of those numbers okay so let's move
12:36 - on to uh number seven here know how to
12:39 - use generators so you're going to want
12:41 - to know when you want to use generators
12:43 - and also the benefits that you receive
12:46 - uh from using generators um so if I go
12:48 - back to the common problem example here
12:52 - with the fizzbuzz and the Fibonacci
12:53 - sequence um I actually have a Fibonacci
12:57 - Sequence here that I've written using
12:59 - using uh generators instead so if they
13:02 - do ask you a question like this and you
13:04 - used uh generators instead uh then
13:07 - that'll be uh big bonus points for your
13:10 - interviewer so in this example it's
13:12 - almost exactly like the Fibonacci
13:14 - sequence that we went over before um
13:16 - except now we have a function here which
13:19 - yields and yield is the key word that um
13:23 - let you know that it's a generator so it
13:25 - yields your result and then we can Loop
13:28 - through through uh the generator and
13:30 - print out each item so if we run through
13:33 - then we can see that it still works just
13:35 - like it worked before but now we're
13:36 - using generators instead which have um
13:39 - more advantages over uh returning a list
13:42 - but there are times in when uh you
13:44 - wouldn't want to use generators so you
13:46 - do want to do your research and figure
13:48 - out uh when you really do get those
13:50 - advantages from generators and when they
13:53 - may not be the best option for you at
13:54 - the time um also no generator
13:58 - Alternatives uh to certain python
14:00 - version two functions so for example
14:02 - here uh you can see that we have an X
14:05 - range here so it's nice to know that
14:07 - this is that X range behaves more like a
14:11 - generator than what range does so uh X
14:14 - range uh yields one result at a time and
14:18 - range puts the entire range of numbers
14:21 - into memory at once um that's the same
14:24 - thing with uh if I go back to the data
14:26 - types example here um this dictionary
14:29 - example here uh you can see that we are
14:32 - using iter items instead of items
14:35 - because it or items gives us one result
14:39 - back at a time uh rather than putting
14:41 - all of the items into memory so be sure
14:44 - to look up generators understand what
14:46 - they are uh when you would want to use
14:48 - them and also some of these um
14:50 - Alternatives where you can use
14:52 - generators in place of these older
14:56 - python 2 functions okay so moving on
14:59 - here um number eight know the basics of
15:02 - oop or objectoriented programming so to
15:06 - prepare for the basics of objectoriented
15:08 - programming uh for your interview um
15:11 - what I would do is I would just have a
15:14 - sample file or program and write these
15:18 - from scratch over and over and over
15:20 - until it just feels natural so in your
15:23 - head you're going to want to know the
15:25 - general template uh for a class and uh
15:28 - so you have to remember uh again that
15:30 - you're not going to be uh using a
15:33 - computer so um this is one of the main
15:36 - things that uh will trip people up if
15:39 - they are just writing stuff on the
15:41 - Whiteboard because it's so easy on your
15:44 - computer just to hit control space or
15:46 - something and have it pop up and give
15:48 - you the entire um init function and fill
15:52 - it all in for you but to do that from
15:54 - scratch can be a challenge so I would
15:55 - just write these files over and over and
15:58 - over until you just know U how to write
16:03 - down the class uh what it inherits from
16:06 - um remember to put in your init
16:08 - functions and self and then the
16:10 - arguments and then initialize um all of
16:14 - those parameters also you may be asked
16:16 - to explain what certain things mean uh
16:19 - for example self you might be asked to
16:21 - explain what self means um and what it
16:24 - means to make an instance of a class uh
16:26 - so for example I would also make
16:28 - instances of your classes and um here's
16:32 - an example where we are taking a person
16:36 - class and giving them a name then we
16:38 - have a method called reveal identity
16:40 - that just prints out their name so I
16:42 - have an instance of that class down here
16:45 - if I run that you can see that it just
16:46 - prints out my name is Corey when it runs
16:49 - this reveal identity function and we
16:51 - also have a superhero class that
16:53 - inherits from person so you want to know
16:55 - how to inherit from classes um also you
16:59 - want to know how to initialize based off
17:02 - of that um base class and then uh how to
17:08 - override also how to override methods so
17:11 - for example here uh we are calling our
17:14 - base classes reveal identity and then
17:16 - we're adding in some additional
17:17 - functionality here so if I comment out
17:19 - this um Corey variable and uncomment
17:22 - this Wade variable and then run this you
17:25 - can see that it prints out his name and
17:28 - then his super superhero name so there's
17:29 - a little extra functionality there so
17:32 - like I said I would just have a sample
17:34 - file here of a base class uh a class
17:37 - that inherits from that base class and
17:39 - then instances of both of those and just
17:41 - write those over and over and over until
17:43 - you feel really comfortable uh with
17:46 - writing out those templates from scratch
17:48 - and um and being able to do that without
17:50 - a computer okay so let's move on here to
17:53 - number nine so number nine have python
17:56 - related questions ready to to ask your
17:59 - interviewer so it's good to have these
18:01 - questions prepared because uh if you
18:03 - feel strong in a certain area of python
18:07 - um then this will give you a chance to
18:08 - bring up those areas that you're strong
18:10 - in if they don't come up in the
18:12 - interview so for example let's say that
18:14 - you've been um really studying the
18:17 - differences between Python 2 and Python
18:20 - 3 and how to Port python 2 applications
18:23 - over to Python 3 if it doesn't come up
18:25 - in in the interview um at the end
18:27 - they're going to ask you if you any
18:29 - questions so just bring up uh bring up
18:31 - questions like um hey do you guys use
18:35 - Python 2 or Python 3 and also you want
18:38 - to be prepared for follow-up questions
18:40 - to your questions so don't ask a
18:43 - question that you're not prepared to
18:44 - answer follow-up questions about because
18:47 - um if you ask are you using python 2 or
18:49 - Python 3 then your interviewer may ask
18:52 - you oh well that's a good question we
18:54 - just uh moved over to Python 3 or we're
18:56 - thinking about moving over to Python 3
18:58 - what would you recommend and why um also
19:01 - can you tell me some of the differences
19:03 - between those versions and things like
19:04 - that um so a couple of other examples of
19:07 - this um maybe you've been practicing
19:09 - working with uh databases in Python um
19:12 - you could ask them what they're using to
19:15 - communicate with their databases ask
19:16 - them if they're using SQL Alchemy um if
19:19 - you've been practicing unit testing with
19:22 - python and it didn't come up in the
19:23 - interview then you could ask them if
19:25 - they're currently testing their python
19:28 - codebase
19:29 - and or and what testing modules that
19:31 - they're using um so just questions like
19:33 - that it'll let you bring up the areas
19:36 - that you're most strong in and um and
19:39 - then they can ask you follow-up
19:40 - questions about that so that uh you can
19:42 - really end on a strong note okay and the
19:45 - last bit of advice here that uh I have
19:47 - isn't really related to python uh but
19:50 - you're also going to want to know the
19:51 - basics of other Technologies uh when you
19:54 - go into your interview so in today's
19:56 - tech industry I mean there's tons of
19:58 - Technology that programmers use on a
20:00 - daily basis and um you're going to want
20:03 - to know some of these Technologies and
20:04 - not just python so for example it'll be
20:07 - a huge benefit to learn Version Control
20:10 - uh like something like git um it'll be
20:13 - nice to know how to navigate through the
20:15 - command line and basic Linux commands um
20:18 - understand how databases work and how to
20:21 - write some basic SQL code now I know
20:23 - that sounds like a lot and it can sound
20:25 - overwhelming but you don't need to be an
20:27 - expert in these other techn Oles a lot
20:29 - of people get caught up on that and they
20:31 - feel like they need to know everything
20:33 - about everything um but just know at
20:35 - least know what these other Technologies
20:37 - are and know the basics of some of those
20:39 - Technologies um some people like to
20:41 - describe this as a t-shaped skill set
20:44 - and uh I'll provide a link to that in
20:46 - the description below but basically a
20:48 - t-shaped skill set means that you're
20:51 - advanced in a certain topic um but also
20:55 - that you have exposure to several other
20:57 - Technologies so I'd really suggest
20:59 - before your job interview to go back to
21:01 - the job description uh and see what
21:04 - other Technologies they list in that in
21:07 - that description besides Python and be
21:09 - sure that you at least know something
21:11 - about everything that's on that list and
21:14 - so that about does it for the uh 10
21:17 - things for preparing for a python
21:19 - interview uh that's all the advice that
21:22 - I had now I do want to say that this is
21:24 - my own advice and um I'm sure that a lot
21:27 - of other people probably disagree with
21:28 - this or have other methods and uh and
21:30 - that's okay I mean the best methods for
21:33 - preparing for interviews and the
21:34 - interview process in general um it's
21:37 - always been constantly evolving and
21:39 - mutating um you know what's the norm
21:42 - today for the interview process might be
21:44 - frowned upon the next day for example
21:47 - Google used to ask these brain teasers
21:48 - that people never really liked um like
21:51 - for example they might ask how many
21:53 - pingpong balls that you could fit into a
21:55 - 747 Jet and to talk through your thought
21:58 - process as you solve that problem um now
22:01 - I believe that they've recently stopped
22:03 - doing these brain teasers and they've
22:05 - instead started focusing on data
22:07 - structures and algorithms um but really
22:10 - the point is that the interview process
22:11 - it changes over time different people
22:14 - have different advice for how to prepare
22:16 - for these interviews um so by all means
22:18 - don't use this video as your single
22:21 - resource to prepare for your python
22:23 - interview um I strongly believe that you
22:26 - should feel comfortable with everything
22:27 - in this list but after you've got all
22:29 - this stuff down then search through
22:31 - other resources online to prepare for
22:34 - that interview so that about does it for
22:36 - this video I hope it was useful for you
22:38 - guys uh if you have any questions just
22:40 - ask in the comment section below be sure
22:42 - to subscribe for future videos thank you
22:44 - guys for watching and good luck on your
22:46 - job interview

Cleaned transcript:

hey everybody how's it going uh in this video uh we're going to learn how to prepare for a python interview and 10 things that you should know before going into this interview um so I'm going to go over some different advice and we'll also look at some code examples to get you ready uh so one thing before I get started is uh that a lot of what I'm going to say here applies to entrylevel python positions so if you're applying for a senior level position uh then likely that's going to require you to know all of the items in this list but then you'll also need to know some more advanced topics as well um so with that said let's go ahead and get started so the first thing is that you should know how to write code on a whiteboard or or a piece of paper now this isn't just specific to python this goes for any programming language that you're going to have an interview with because a lot of companies won't have a computer set up for your interview so you're likely going to be in a room with either a notebook or a whiteboard and live coding might not even come up in your interview but if it does then you need to be ready to do that without a computer so if you've never done this before then you'd actually be surprised at how hard it is to not use a computer um so you might want to go ahead and start doing all of your practice problems that you're preparing for your interview do them all on a whiteboard or on a piece of paper and then go back and check all of those answers on a computer to make sure that you got all the syntax correct and everything like that okay so moving on to number two know the base basic control flow within python so by control flow I mean know how to use for Loops while Loops uh if and else statements and things like that um so I have a code example here that we can take a look at so I know a lot of this looks extremely basic but like I said before you're not going to have a computer so you want to know how to write these things out uh without thinking about it you're not going to have any autoc completion or anything like that um so know how to write down a for Loop and loop through a certain amount of numbers um so if I run this code here it just Loops through these numbers um you want to know how to use while Loops because those could come up in an interview as well um and then you also want to know how to use your uh if and else statements and um also um your L if statements here now I know these three things uh you know for Loops while loops and these if statements I know it seems completely basic but you'd be surprised at how many people uh freeze up on these very basic questions whenever they are new to the interview process so just be sure that you can write them down all by hand and that you know them inside it out and exactly how the uh how the program is going to uh flow through all of these conditionals okay so number three be able to discuss how you've used python in the past so your interviewer is likely going to ask you about past projects and you just don't want to draw a blank um so if you've never used python professionally and you're applying for an entrylevel position uh then be sure to write a basic project uh before the interview so that you can have some example of something uh that you've written in your free time and also whatever you choose to write try to make it something that's interesting and that'll be interesting to your interviewer um you know just don't tell them how you've uh solved a bunch of sample interview problems like fs buuz and Fibonacci sequences and things like that so for example if you need a couple of ideas for some cool programs that you could write um maybe you want to play around with web scraping and make a script that pulls weather information each day uh you can use the beautiful sup module for that um or you could write a program that performs system tasks so you could write a program that cleans up folders on your computer or moves files around uh displays CPU and memory or something along those lines so so for example I've written a a really small program here that just goes uh uses the OS module and the glob module goes into this directory here if I run this code it just goes into uh My Demo directory here and prints out all of the uh jpeg images so you know something like this just learn how to write a file like this and then whenever you're interviewer asks you the question you know you can say something interesting like well once I did write a program that um looked through my file system and found all these images and moved them to a specific location or something like that so those are just a couple of examples and ideas to get you started but I'm sure that you can think of some really cool ideas on your own after thinking about it for a few minutes okay so number four uh know how to solve common interview problems and questions so a little bit ago I mentioned fizzbuzz and Fibonacci sequences and things like that um those are some common questions that interviewers like to ask now there's been a lot of debate around that type of interview process on online forums um a lot of people say that uh those type of problems aren't a good indicator of programming skill and that interviewers should uh should ask better problems that more reflect real world situations but even though there's a lot of debate whether interviewers should ask those questions a lot of interviewers do ask those questions so um so whether or not you think that they should shouldn't uh is a totally different discussion but um but you should be prepared to at least answer those questions and really it doesn't take a long time to learn how to uh solve a lot of these common problems so like for example if you don't know what fizzbuzz is basically it is um your interviewer will ask you to uh loop through a range of numbers and if the number is divisible by three then print out Fizz if it's divisible by five print out buzz if it's divisible by both than print out fs buuz and this is a solution to the problem here if I print this out um you can see that um it Loops through and everyone that's divisible by three it prints out Fizz and Buzz and if it's divisible by both then it prints out fizzbuzz so usually these kind of questions are meant to weed out people who don't uh understand the basic concepts of a computer language so um for example here you have to know how to use uh for loops and enterate over a um a range of numbers um you know the you have to know the modulo operator and um some things like that and it's the same thing with the Fibonacci sequence that's another question that a lot of interviewers like to ask um so the Fibonacci sequence if you don't know what that is uh basically uh you print out a number and each each number that you print out is the previous two numbers added together um so here let me just print out this example it'll be easier to show so you can see I printed out these numbers here so zero and one if you add those together it equals one if you add one and one it equals two if you add one and two it equals three and it keeps going and keeps G um so you can do this in let's see this is four lines of python code here so like I said a lot of people don't like these questions because they're not the best indicator of programming ability um but they do like to ask these questions and they're so short that it really wouldn't hurt you to learn um how to solve these problems and not only should you learn how to solve them just don't memorize these solutions to these because it'll be obvious that you're just um kind of regurgitating what you've memorized you really want to understand what's going on so for example in this Fibonacci Sequence um this is kind of a unique assignment here a comma b equals 0 comma 1 you want to understand what's going on there um you want to understand um what's going on in this assignment here that looks a little bit more complicated so uh look this up online understand what's going on and be prepared for these type of questions and these two questions aren't the only two common questions that get asked in interviews so after you understand these two questions uh you know get on Google and uh just Google python interview questions and take a look at the first few results because you might even run into a recruiter or an interviewer uh who has taken the questions straight from the first results of the Google search um so then you'd be prepared for those questions so it's a good practice just to go through those and um be ready for some of the basic stuff that people might throw at you okay so moving on here um number five uh no basic python data types and when to use them so these basic data types include um strings and lists and tuples and dictionaries and sets um not only should you understand um how they differ from each other and when you should use one over the other but also know how to iterate over each one so for example here um we just have a list here that we can iterate over um we have a tupal here that we can iterate over in the same way uh the dictionary is kind of unique so uh whenever we iterate over the dictionary here a dictionary is key value pairs um so we want to look at the key and value in all of the dictionaries items and then print those out so that's something that you'll probably get asked and you want to know how to solve and also sets if you don't know what a set is um pretty much it's a list with uh no repeated values and if you uh if we Loop through this list here and print this out you can see that all of these are unique values even though that there are uh duplicates that are added to this set so whenever I say that you want to know uh when to use different data types over another um like one question for example that you might get asked is uh why would you use a tupal instead of a list and that's something that you want to know the answer to um so I'm not going to go into that detail here but I will put some links into this description below um that kind of answer some of these questions for you and also for some bonus points in a question like this um if you can understand the underlying data structures and functionality of how these data types work then that would be great um so this that's more computer science related um but for example you should be able to talk about a dictionary being a hash table and exactly uh what that means um so yeah like I said I'm not going to go into much depth uh about that topic here but you should look up the underlying data structures involved with these data types and know their advantages uh know their weaknesses um know how data gets accessed Within These data types and also know when uh to when to properly use each data type okay so moving on here to uh number six know how to use list comprehensions um now this is a little bit more advanced but um this is the kind of information that will help you stick out amongst other candidates so for example I have a file here of list comprehensions now again I'm not going to go into too much detail here uh I have an entire video on list comprehensions dictionary comprehensions and set comprehensions so if you want more detail about that then I'll put that uh description uh I'll put that link in the description below um but basically it's a more clean and readable way to create these lists so for example in this um so say you have a sample problem where your interviewer gives you a list of 1 2 3 4 5 6 Seven 8 nine 10 and then he says okay just create a list that gives me uh the square of each number in that list so after the top of your head you might want to write a for Loop that goes through each item and then squares the item and Returns the result and all that but I think your interviewer will be really impressed if you just know how to do this short little oneliner here and um list comprehensions are used in real world scenarios all the time so not only is it going to help you in your interview but it's going to help you actually on the job um so here we just are creating a list that is the square of the number for each number in the list so if we print that out you can see that we returned a list here with the squares of all of those numbers okay so let's move on to uh number seven here know how to use generators so you're going to want to know when you want to use generators and also the benefits that you receive uh from using generators um so if I go back to the common problem example here with the fizzbuzz and the Fibonacci sequence um I actually have a Fibonacci Sequence here that I've written using using uh generators instead so if they do ask you a question like this and you used uh generators instead uh then that'll be uh big bonus points for your interviewer so in this example it's almost exactly like the Fibonacci sequence that we went over before um except now we have a function here which yields and yield is the key word that um let you know that it's a generator so it yields your result and then we can Loop through through uh the generator and print out each item so if we run through then we can see that it still works just like it worked before but now we're using generators instead which have um more advantages over uh returning a list but there are times in when uh you wouldn't want to use generators so you do want to do your research and figure out uh when you really do get those advantages from generators and when they may not be the best option for you at the time um also no generator Alternatives uh to certain python version two functions so for example here uh you can see that we have an X range here so it's nice to know that this is that X range behaves more like a generator than what range does so uh X range uh yields one result at a time and range puts the entire range of numbers into memory at once um that's the same thing with uh if I go back to the data types example here um this dictionary example here uh you can see that we are using iter items instead of items because it or items gives us one result back at a time uh rather than putting all of the items into memory so be sure to look up generators understand what they are uh when you would want to use them and also some of these um Alternatives where you can use generators in place of these older python 2 functions okay so moving on here um number eight know the basics of oop or objectoriented programming so to prepare for the basics of objectoriented programming uh for your interview um what I would do is I would just have a sample file or program and write these from scratch over and over and over until it just feels natural so in your head you're going to want to know the general template uh for a class and uh so you have to remember uh again that you're not going to be uh using a computer so um this is one of the main things that uh will trip people up if they are just writing stuff on the Whiteboard because it's so easy on your computer just to hit control space or something and have it pop up and give you the entire um init function and fill it all in for you but to do that from scratch can be a challenge so I would just write these files over and over and over until you just know U how to write down the class uh what it inherits from um remember to put in your init functions and self and then the arguments and then initialize um all of those parameters also you may be asked to explain what certain things mean uh for example self you might be asked to explain what self means um and what it means to make an instance of a class uh so for example I would also make instances of your classes and um here's an example where we are taking a person class and giving them a name then we have a method called reveal identity that just prints out their name so I have an instance of that class down here if I run that you can see that it just prints out my name is Corey when it runs this reveal identity function and we also have a superhero class that inherits from person so you want to know how to inherit from classes um also you want to know how to initialize based off of that um base class and then uh how to override also how to override methods so for example here uh we are calling our base classes reveal identity and then we're adding in some additional functionality here so if I comment out this um Corey variable and uncomment this Wade variable and then run this you can see that it prints out his name and then his super superhero name so there's a little extra functionality there so like I said I would just have a sample file here of a base class uh a class that inherits from that base class and then instances of both of those and just write those over and over and over until you feel really comfortable uh with writing out those templates from scratch and um and being able to do that without a computer okay so let's move on here to number nine so number nine have python related questions ready to to ask your interviewer so it's good to have these questions prepared because uh if you feel strong in a certain area of python um then this will give you a chance to bring up those areas that you're strong in if they don't come up in the interview so for example let's say that you've been um really studying the differences between Python 2 and Python 3 and how to Port python 2 applications over to Python 3 if it doesn't come up in in the interview um at the end they're going to ask you if you any questions so just bring up uh bring up questions like um hey do you guys use Python 2 or Python 3 and also you want to be prepared for followup questions to your questions so don't ask a question that you're not prepared to answer followup questions about because um if you ask are you using python 2 or Python 3 then your interviewer may ask you oh well that's a good question we just uh moved over to Python 3 or we're thinking about moving over to Python 3 what would you recommend and why um also can you tell me some of the differences between those versions and things like that um so a couple of other examples of this um maybe you've been practicing working with uh databases in Python um you could ask them what they're using to communicate with their databases ask them if they're using SQL Alchemy um if you've been practicing unit testing with python and it didn't come up in the interview then you could ask them if they're currently testing their python codebase and or and what testing modules that they're using um so just questions like that it'll let you bring up the areas that you're most strong in and um and then they can ask you followup questions about that so that uh you can really end on a strong note okay and the last bit of advice here that uh I have isn't really related to python uh but you're also going to want to know the basics of other Technologies uh when you go into your interview so in today's tech industry I mean there's tons of Technology that programmers use on a daily basis and um you're going to want to know some of these Technologies and not just python so for example it'll be a huge benefit to learn Version Control uh like something like git um it'll be nice to know how to navigate through the command line and basic Linux commands um understand how databases work and how to write some basic SQL code now I know that sounds like a lot and it can sound overwhelming but you don't need to be an expert in these other techn Oles a lot of people get caught up on that and they feel like they need to know everything about everything um but just know at least know what these other Technologies are and know the basics of some of those Technologies um some people like to describe this as a tshaped skill set and uh I'll provide a link to that in the description below but basically a tshaped skill set means that you're advanced in a certain topic um but also that you have exposure to several other Technologies so I'd really suggest before your job interview to go back to the job description uh and see what other Technologies they list in that in that description besides Python and be sure that you at least know something about everything that's on that list and so that about does it for the uh 10 things for preparing for a python interview uh that's all the advice that I had now I do want to say that this is my own advice and um I'm sure that a lot of other people probably disagree with this or have other methods and uh and that's okay I mean the best methods for preparing for interviews and the interview process in general um it's always been constantly evolving and mutating um you know what's the norm today for the interview process might be frowned upon the next day for example Google used to ask these brain teasers that people never really liked um like for example they might ask how many pingpong balls that you could fit into a 747 Jet and to talk through your thought process as you solve that problem um now I believe that they've recently stopped doing these brain teasers and they've instead started focusing on data structures and algorithms um but really the point is that the interview process it changes over time different people have different advice for how to prepare for these interviews um so by all means don't use this video as your single resource to prepare for your python interview um I strongly believe that you should feel comfortable with everything in this list but after you've got all this stuff down then search through other resources online to prepare for that interview so that about does it for this video I hope it was useful for you guys uh if you have any questions just ask in the comment section below be sure to subscribe for future videos thank you guys for watching and good luck on your job interview
