With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're going to be continuing
00:02 - the Django series and learning how to
00:04 - deploy our django application to a web
00:06 - server so that anyone with internet
00:08 - access can use it within a browser so
00:10 - far we've created this application with
00:12 - some good functionality but the site
00:14 - still only lives on our local machine
00:16 - right now this is just running in my
00:18 - browser on my local machine but no one
00:20 - else can access this so the point of
00:22 - building these sites is to deploy them
00:24 - so that they're accessible over the
00:26 - Internet now look I'm not gonna lie to
00:27 - you deploying is a bit tricky you can
00:30 - find a lot of Django tutorials online
00:31 - but not many of those covered
00:33 - deployments and that's because they can
00:35 - be difficult it can be overwhelming
00:37 - because there's a lot of different ways
00:38 - to deploy an application and it's hard
00:40 - to know what's best for your specific
00:42 - application so we're going to look at
00:44 - several deployment options in this
00:46 - series so we'll look at how to deploy to
00:48 - your own Linux server how to deploy to
00:50 - Heroku how to deploy to Python anywhere
00:53 - and possibly some others in this video
00:55 - we'll be learning how to deploy our
00:56 - application to our own Linux server so
00:59 - when you deploy to a Linux server you're
01:00 - most likely going to be deploying to a
01:02 - virtual machine that is hosted by a
01:04 - company so that's going to be a company
01:06 - like Leno door digitalocean or AWS I
01:10 - personally use lenôtre my own web
01:12 - applications so that's what we're going
01:14 - to be using in this video
01:15 - and lenôtre was actually kind enough to
01:17 - sponsor this video and has provided me
01:19 - with a link where you can get $20 of
01:22 - free credit towards an account so if you
01:24 - want to follow along with this video
01:25 - then I'll leave that link in the
01:27 - description section below where you can
01:29 - sign up for an account and get enough
01:30 - credit to follow along so I've been
01:32 - using their services from my own
01:33 - personal website for years so I was
01:35 - really happy when they contacted me
01:37 - about sponsoring a video so with that
01:39 - said let's go ahead and get started ok
01:41 - so like I said we're going to be
01:43 - deploying to a Linux server so this
01:45 - method of deployment actually takes the
01:47 - most effort to setup but is also the
01:49 - most flexible in terms of what control
01:51 - you're gonna have over your application
01:53 - and web server so in future videos we'll
01:56 - look at deployment options that offer
01:57 - some free tiers but they usually only
02:00 - offer basic services so for example if
02:02 - you want to use your own domain name
02:03 - such as my Django blog.com or something
02:07 - like that then you'll have to upgrade to
02:09 - a paid service on those free options in
02:11 - order to set that up and even then you
02:13 - won't have
02:13 - the freedom or possibilities that you
02:15 - get with having your own virtual private
02:17 - server so the way that we're doing it in
02:19 - this video will give you a lot of
02:20 - freedom and room for your application to
02:22 - grow but it's not as simple as some
02:24 - other methods so there's definitely some
02:26 - trade-offs there okay so first things
02:28 - first for those of you have been
02:29 - following along with this Jango series I
02:31 - need to make one correction to the
02:32 - actual Jango code before we deploy this
02:34 - it worked in development but when I
02:36 - tried to deploy the application it gave
02:38 - me some issues so the correction that
02:40 - needs to be made is in our users models
02:43 - dot py file so I'm going to open that up
02:45 - really quick and make a quick change so
02:47 - I have my application open here in
02:50 - sublime text and this was in let me
02:52 - maximize this here this was then our
02:55 - users app here and this was in models
02:59 - dot py and the mistake that I made was
03:02 - down here in our save method so when we
03:05 - were calling the save method on our
03:06 - parent class this super dot SAV we need
03:09 - to accept any other arguments that our
03:11 - parent class might be expecting so in
03:13 - this case we need to pass in args which
03:17 - are positional arguments and kwargs
03:19 - keyword arguments into that save method
03:21 - so to do this I will just accept
03:26 - positional and keyword arguments here by
03:28 - doing stark wargs and star args and star
03:31 - star clogs and we also want to pass
03:34 - those in to our save method whenever we
03:37 - call that on our parent class so again
03:39 - what that does is if you've watched my
03:41 - video on functions before then you'll
03:43 - know that the convention of passing argh
03:45 - and kwargs to your function allows you
03:47 - to accept any arbitrary number of
03:49 - positional or keyword arguments okay so
03:52 - with that correction in place let's now
03:54 - deploy our application so like I said
03:56 - I'm going to be using lenôtre play this
03:58 - application to a linux server that's my
04:00 - personal preference but you can do this
04:02 - same deployment with any Linux server
04:04 - that can that you can access via SSH now
04:07 - I already have an account with one node
04:09 - so let me go ahead and pull that up here
04:11 - in my browser so I have a tab open here
04:14 - and I'll refresh this page so if you
04:16 - create an account with them then you
04:17 - should be able to access a page like
04:19 - this as well this is their new cloud
04:21 - manager and that's at cloud dot Llano
04:23 - dot-com now there's also a lonoa and
04:27 - at manage node comm but that's older and
04:30 - I believe they're now steering people
04:32 - towards using this instead so this page
04:34 - gives me access to all of my currently
04:36 - node servers so you can see I already
04:37 - have one it created for my personal
04:40 - website here called core EMS - server
04:42 - but we're going to create a new one from
04:44 - scratch to deploy our django application
04:46 - so let's go ahead and see what this
04:48 - process is like so first I'm going to
04:51 - come up here to create and we're going
04:52 - to click on create and we want to create
04:54 - a new 'la note 'la note is there name
04:57 - for there you can see here it says
04:58 - high-performance SSD Linux servers for
05:01 - all your infrastructure needs so we're
05:03 - going to click on that to create a new
05:04 - Linux server and now we need to select
05:06 - what image we want to create with this
05:09 - server so I'm going to use a bun -
05:11 - server in this video but depending on
05:14 - what your preference is you can use any
05:16 - of these CentOS might be another option
05:18 - or Fedora but I'm gonna choose Ubuntu so
05:21 - for the region I'm going to come down
05:22 - here I'm just going to pick Dallas Texas
05:24 - it's a nice midpoint in the United
05:26 - States you can see that they also have
05:28 - some regions in Europe and Asia as well
05:30 - so depending on where people are going
05:33 - to be accessing your application you
05:35 - might want the server to be served up to
05:37 - them from a closed location so for this
05:40 - application here I'm just going to
05:41 - choose Dallas Texas that's fine so down
05:43 - here for the low note plan this is where
05:46 - you pick how much performance you want
05:48 - in your machine and you can see the
05:50 - prices are attached here so this one is
05:52 - $10 a month
05:53 - this one is $20 a month now this is
05:56 - their standard plan here they also have
05:58 - something called an anode here and if we
06:00 - click on that you can see that this is a
06:02 - pretty low performance machine it's just
06:03 - got one CPU 25 gigs of storage and a one
06:07 - gig of ram but it's only $5 a month
06:10 - and our application especially if you're
06:12 - just testing most likely isn't going to
06:15 - be very intensive so I'm just going to
06:17 - pick their cheapest option for deploying
06:20 - our django application now you can
06:22 - always resize these later so I just
06:23 - suggest going small at first and if you
06:26 - want to bump it up to something bigger
06:27 - depending on you know how much traffic
06:30 - you're getting then you can do that at a
06:31 - later time okay so down here at the
06:34 - label I'm just going to call this Django
06:37 - - server okay so for the tags
06:40 - I'm just gonna leave that empty there so
06:42 - now we need to choose a root password so
06:45 - this is going to be the root password on
06:47 - the server so you're going to want to
06:48 - pick something secure for me I'm just
06:51 - going to put in a password of this is a
06:55 - test now I'm going to delete this server
06:57 - after this video so you know you're not
06:59 - going to be able to log into my server
07:01 - as a root or anything like that
07:03 - now whatever password you choose here be
07:04 - sure that you remember this because this
07:06 - is a root password on your server and
07:08 - you're definitely going to need to know
07:10 - it whenever you first log into your
07:11 - computer so you know definitely remember
07:14 - this for later because we are going to
07:17 - be using that so now that we have that
07:19 - I'm just going to go over here and click
07:20 - create and now it's going to create our
07:23 - server for us so you can see here that
07:25 - our Django server it says that it is
07:27 - provisioning the server and now it is
07:29 - booting up so I'm going to go ahead and
07:32 - fast forward to where this machine is
07:34 - fully created but it shouldn't take too
07:36 - long just a couple of minutes ok so once
07:39 - our server has completed booting up we
07:41 - can see our server here within our list
07:43 - of Leno's we can also go to our
07:46 - dashboard and see it here now if we
07:49 - click on our 'la node then it will give
07:51 - us more options with this so click on
07:54 - that django server that you just created
07:56 - whatever you named it and now go to the
07:59 - networking tab so we can see that we
08:01 - have a lot of tabs here summary volumes
08:03 - networking settings everything like that
08:06 - let's click on networking and down here
08:09 - we see access and the first thing it
08:11 - says here is SSH access so let's copy
08:14 - this because we're going to SSH into
08:16 - this machine so you're going to want to
08:18 - copy that SSH command and paste it into
08:21 - your command line to SSH into your newly
08:24 - created server now if you're on Windows
08:26 - then you won't have access to the SSH
08:29 - command in the command line there are
08:31 - other tools that you can use that allow
08:33 - you to SSH into a server so one of the
08:36 - more popular ones is called putty and I
08:38 - have it here on I have their website
08:40 - pulled up here it's at putty org and
08:42 - they have documentation in here of how
08:44 - you can SSH into a server but personally
08:47 - what I would recommend on Windows if
08:49 - you're on a newer version of Windows is
08:51 - to simply install the Linux back
08:53 - she´ll on windows and you're able to use
08:56 - ssh through that that's what I
08:57 - personally do on my Windows laptop
08:59 - anytime I need to connect to a server
09:01 - now I'm not going to show that process
09:03 - of installing the Linux bash shell on
09:05 - Windows in this video because I already
09:07 - have a separate video detailing that
09:09 - whole process so I'll put a link to that
09:11 - in the description section below if
09:13 - anyone wants to watch that so once
09:15 - you're running bash then you should be
09:17 - able to use SSH and again if you don't
09:19 - want to use bash for any reason then you
09:21 - should install the software called putty
09:23 - that allows you to use SSH on Windows
09:26 - here at putty org but I will say that if
09:29 - you're using a Linux bash shell then
09:31 - it'll allow you to more easily follow
09:33 - along with all of the commands in this
09:34 - video okay so if you're using bash then
09:38 - we'll want to copy this SSH command here
09:41 - for from our networking tab inland ode
09:43 - and let's paste this into our command
09:46 - line now I have two different terminals
09:49 - pulled up here right now now one of
09:51 - these I'm going to use to run commands
09:52 - on my local machine and one I'm going to
09:54 - use to run commands on our remote Linode
09:57 - server now you don't have to do it this
09:58 - way but if you only use one terminal
10:01 - window then you'll have to go back and
10:02 - forth between your local machine and
10:04 - your server so I think it's easier to
10:06 - simply have two windows open and let me
10:08 - actually minimize our browser here in
10:10 - the background so that we only have our
10:12 - terminal windows open here okay so now
10:15 - I'm going to paste that ssh command into
10:17 - my terminal on the left side here so on
10:20 - the left i'm gonna have our remote
10:22 - server and on the right i'm gonna have
10:24 - our local machine so i'm going to paste
10:26 - in that command and hit enter and this
10:29 - is going to ask you if you're sure that
10:32 - you want to continue connecting this is
10:34 - only going to ask you this the first
10:35 - time so i'll just say yes and now it's
10:38 - asking for that root password this is
10:40 - what we created when we created our
10:43 - lenôtre so for mine I had that as this
10:46 - is a test so if I insert that password
10:49 - then we can see that that worked we are
10:51 - now SSH into what is going to be our web
10:54 - server so you can see that we are root
10:57 - at localhost so local host this is our
11:00 - low note server so we were actually in
11:02 - the terminal of that machine so first
11:05 - let me clear the output there
11:07 - first let's install some software
11:09 - updates this is just something that
11:11 - you're going to want to do for the first
11:13 - time that you get on to your Linux
11:15 - machine now I'm actually going to
11:17 - minimize this right side here and expand
11:21 - this over so that we have more room to
11:22 - work with here on our server so to do
11:25 - this now remember I'm on a bun too so
11:27 - I'll say apt-get update and then I will
11:31 - also type in these two ampersands and
11:34 - then apt-get upgrade and let me make
11:38 - sure I spelled that right and this is
11:42 - just going to go through and update our
11:43 - machine and make sure that we have all
11:45 - the latest security patches and things
11:47 - like that
11:47 - it might ask you occasionally if you
11:49 - want to continue so you might have to
11:50 - hit yes a couple of times through this
11:52 - and this could also take a little bit of
11:54 - time so I'm just going to fast forward
11:56 - it in to where this is done okay so
11:59 - after a couple minutes those software
12:01 - updates should complete so now I'm going
12:03 - to clear my screen here so now what we
12:06 - want to do is we want to set the
12:08 - hostname of this new machine so on
12:11 - Ubuntu we can do that by saying a
12:13 - hostname CTL set
12:16 - - hostname and now let's put in whatever
12:20 - we want the hostname to be so I'm just
12:22 - going to say Django - server here for
12:25 - this machine and we can check that that
12:26 - worked by typing in hostname and we
12:29 - should get Django server there now
12:31 - remember I did use a boon - for the
12:32 - operating system for this example but if
12:35 - you are using something like CentOS or
12:37 - Red Hat then some of these commands are
12:39 - going to be different so you're gonna
12:40 - have to map the differences between
12:42 - those if you're using a different
12:44 - operating system than what I'm using
12:46 - here in this tutorial okay so now we
12:48 - also need to set the hostname in the
12:50 - host file so to do this I'm just gonna
12:52 - use Nano because Nano is a simple editor
12:54 - that most people know how to use so I'm
12:57 - going to say Neto Nano and this is in
12:59 - the e.t.c directory and this file called
13:02 - host so I'm going to nano on that and
13:05 - underneath this 127 0 0.1 I am going to
13:11 - put in the IP address of our server now
13:13 - you're going to need that IP address
13:14 - alot so it would probably be a good idea
13:17 - just to write it down now this is the IP
13:20 - a dress that we used in our SSH command
13:23 - now I think that I still have that
13:26 - command pasted in or copied into my
13:28 - clipboard here and I do so I'm just
13:31 - going to get rid of that first part and
13:33 - there is the IP address that we want to
13:35 - put in there so we want to put in that
13:37 - IP address and then hit tab and now we
13:41 - want to put in what we had as our host
13:44 - name so that was Jango - server so if I
13:49 - now hit control X and then yes to save
13:53 - and then just hit enter to keep the same
13:55 - file name and that should finish up
13:57 - setting the hostname okay so now we want
14:00 - to add a limited user so right now we
14:03 - are logged in as the root user the root
14:05 - user has unlimited privileges and can
14:07 - execute any command now that might sound
14:10 - nice but it's best practice to add a new
14:12 - user that has limited privileges that
14:14 - you can use as your main account and
14:17 - you'll still be able to run admin
14:18 - commands using the sudo command
14:20 - so let's add this limited user so I'm
14:22 - going to say add user and the user that
14:26 - I'm going to create is going to be Corey
14:28 - MS now you can put whatever username you
14:31 - want here so I will hit enter there and
14:34 - now it's asking us to put in a password
14:37 - so again I'm just gonna say this is a
14:40 - test with a few capitalizations in there
14:44 - same password again and now it's going
14:47 - to ask you to fill out a little bit of
14:49 - information like your full name and
14:50 - stuff like that this is actually
14:52 - optional you don't have to do this so
14:54 - I'm gonna put in my full name but for
14:56 - the others here I'm just going to leave
14:57 - blank and hit enter and then it's going
15:00 - to ask if that information is correct
15:01 - I'll just accept the default of yes and
15:04 - that created a new user for us now we
15:06 - want that new user to be able to run you
15:09 - know route commands so we want them to
15:11 - be able to use sudo so way the way we
15:14 - can do that
15:15 - then I'm going to clear the screen here
15:16 - the way we can do that is to simply say
15:18 - add user Cori MS and then just put sudo
15:24 - after that and that will it says here
15:27 - adding user Cori MS to the group sudo
15:30 - okay so now we have created a new user
15:32 - on this Linux server
15:34 - and now we can just log in as that user
15:36 - it's not good practice to log in as root
15:39 - because there's a lot of things that you
15:41 - can mess up that way so let's exit out
15:44 - of our server so I'm going to exit and
15:46 - now let's log back in but so I just hit
15:50 - up arrow there to log back into our
15:52 - server but instead of logging in as root
15:54 - I'm going to log in as Cori MS as the
15:57 - user that we just created so you want to
15:59 - fill in whatever user you created here
16:01 - so when we hit enter it's going to ask
16:03 - for that users password and that's what
16:06 - we put in whenever we created the user
16:08 - it looks like I mistyped that let me try
16:11 - one more time okay so now we can see
16:15 - that we logged in as our new user so I'm
16:17 - going to clear our screen here and we
16:20 - can see that we also have our host name
16:22 - there so now it's saying that that is
16:23 - the name of our server okay so now that
16:25 - we have a user created now we're going
16:27 - to want to setup SSH key based
16:29 - authentication so that we can login to
16:31 - our server without a password okay so at
16:34 - this point I know that you might be
16:36 - thinking to yourself like why do I have
16:38 - to do all of this stuff I just want to
16:40 - deploy my django application well the
16:43 - reason that we're doing all of this is
16:44 - because I want to show you what it's
16:46 - like to deploy a real-world application
16:48 - and to put the proper precautions in
16:51 - place on your server from scratch so
16:53 - that includes best practices like
16:55 - setting up SSH keys and firewalls and
16:58 - things like that you're going to want to
16:59 - do that on any real-world application
17:02 - that you deploy so I may as well include
17:04 - it in this tutorial instead of just
17:05 - showing you the bare minimum so right
17:07 - now the next best practice that we're
17:09 - going to put in place is using SSH key
17:11 - based authentication to login instead of
17:14 - passwords so by default we're using a
17:16 - password to login to our web server we
17:19 - instead want to use key-based
17:20 - authentication and that's more secure
17:22 - and more convenient because it uses keys
17:25 - that can't be brute force and also
17:27 - allows us to log in without putting in a
17:30 - password every single time and that's
17:32 - great for you know running remote
17:34 - scripts that connect to your web server
17:35 - or anything like that now I have a
17:37 - separate video on SSH key based
17:40 - authentication as well so I'm not gonna
17:42 - go into a lot of detail of these
17:44 - commands but we're going to run through
17:45 - all of them here anyway
17:47 - if you want to know more details as to
17:49 - what these commands are doing then you
17:51 - can watch that video and I'll put a link
17:53 - to that in the description section below
17:54 - now there's actually an easier way to do
17:56 - this by using a command called SSH copy
17:59 - ID but it's not available on all
18:01 - operating systems so instead we're just
18:03 - going to do this the slightly longer way
18:06 - okay so we are logged in to our
18:08 - webserver as our user that we just
18:10 - created and we are in the home folder if
18:13 - I do a PWD that will print the working
18:16 - directory and we are currently in our
18:18 - home folder here so in our home folder
18:20 - we're going to want to make a directory
18:22 - called dot SSH so I'm going to say m'kay
18:26 - der - P that means it's going to make
18:30 - the entire tree of the directory and we
18:33 - want to create that in our home folder
18:34 - and that's what that tilde is so home
18:36 - folder and that is going to be dot SSH
18:39 - so let's make that and if you do an LS -
18:42 - la then we can see that we do now have
18:45 - that SSH folder so now I'm going to
18:48 - clear my screen there and now we want to
18:51 - go back to our local machine so if you
18:55 - don't have two windows pulled up then
18:57 - you can simply exit out to get back to
18:59 - your local machine but I am just going
19:01 - to use this other window terminal here
19:05 - so here I'm on my local computer
19:07 - now again I'm doing this in bash in this
19:10 - tutorial but if you're using a program
19:12 - like putty on Windows that we talked
19:14 - about before then you'll have to do this
19:16 - differently to create and copy your SSH
19:18 - keys to your webserver so I found
19:20 - documentation and lenôtre putty users on
19:23 - how you can do this through putty and
19:25 - I'll put a link to that in the
19:26 - description section below as well so
19:29 - that you can see how to do that using
19:30 - that software but here in bash we can
19:34 - simply say SSH - keygen and I'm going to
19:39 - do a - B and then 409 6 that just makes
19:44 - it a little more secure now remember
19:46 - we're on our local machine here and now
19:48 - it says generating public private RSA
19:50 - key pair enter the file in which you
19:52 - wish to save that key and this is in my
19:55 - home folder on my local machine in an SH
19:57 - 8 SSH directory with an ID RSA
20:01 - file I'm just gonna leave that as the
20:03 - default there and it's saying that I
20:05 - have one that already exists so I'm just
20:07 - going to overwrite that with yes and
20:09 - enter a passphrase so you can also have
20:11 - a passphrase
20:12 - for this key as well I'm going to leave
20:14 - that empty but you can add one if you'd
20:16 - like to make it even more secure okay so
20:19 - what that did for us is it created two
20:21 - keys so we can see that it says your
20:22 - identification has been saved as ID RSA
20:26 - and then your public key has been saved
20:28 - as ID RSA dot pub now what we're going
20:32 - to want to do is put our public key on
20:34 - the server so that then we can log in
20:37 - without a password it's going to be able
20:40 - to recognize us because these two keys
20:42 - are going to match so let me go ahead
20:44 - and clear the screen here so now we need
20:46 - to get that public key to our server now
20:49 - if you're on Windows and you're not
20:51 - using bash then you can use you know FTP
20:54 - or FileZilla or something like that
20:56 - where you can drag and drop since we're
20:58 - using bash we can just simply use an SCP
21:01 - command so I'm going to say SCP and that
21:04 - was created in my home folder and this
21:07 - dot SSH directory and that was called
21:10 - our ID underscore RSA dot pub and we
21:16 - want to copy that file up to our server
21:18 - so now I'm gonna say clorium s but at
21:22 - this point you're gonna want to put in
21:23 - the user that you created but I'm using
21:25 - koream s and also now we want to put
21:29 - that IP address so like I said you're
21:31 - going to be using that IP address to
21:33 - your server a lot so it's probably best
21:35 - to write it down so I wrote mine down
21:37 - here mine is one night 8.5 8.11
21:42 - 9.1 8 3 so after we specify where we
21:45 - want to copy that
21:47 - public key to the server now we want to
21:50 - put an exact location in that server so
21:53 - I'm going to put a colon here and now we
21:56 - can specify the location on this server
21:58 - that we want to save that public key so
22:00 - that is within the home directory of
22:02 - this user here so a tilde there for the
22:06 - home directory and then dot ssh
22:08 - directory and let's save this as a file
22:12 - called authorized
22:14 - underscore keys now you don't need file
22:17 - extensions on Linux so we can just call
22:19 - that authorized keys and leave it at
22:21 - that so I'm going to run that and it's
22:24 - going to ask us for our password because
22:25 - we don't have this set up to use without
22:28 - a password yet okay and we can see that
22:31 - that was copied over so now I'm going to
22:34 - go back to our server here so now if I
22:37 - do an LS 1 our dot SSH directory then we
22:42 - can see that now we have that authorized
22:44 - key file ok so now just to finish this
22:46 - ssh stuff up we now need to update some
22:49 - permissions and again I can't go into
22:51 - deep detail as to what every command is
22:53 - doing in this video or else it would
22:55 - just run on for a long long time but
22:57 - basically what we're going to be doing
22:58 - here is setting the permissions for the
23:00 - SSH directory to where the owner of the
23:03 - directory has read write and execute
23:05 - permissions on that directory and the
23:08 - owner of the files in the directory will
23:10 - have read and write permissions on those
23:12 - files so to do that we can say sudo
23:15 - chmod and that's how we change
23:17 - permissions in Linux and we're gonna do
23:19 - 700 permissions and we're going to do
23:22 - 700 permissions on that SSH directory so
23:26 - I will run that and now it's going to
23:28 - ask for a sudo password so we can put in
23:32 - that password oh it looks like I may
23:35 - have mistyped and now I'm gonna run at
23:39 - that same command but I'm going to do
23:41 - 600 permissions and I'm gonna do a 600
23:44 - permissions on all of the files within
23:47 - that directory so I'll run that and if
23:49 - you use sudo a good bit then you don't
23:51 - have to put in the password every time
23:53 - it'll remember it for some time now
23:54 - again I'm not going to go into a lot of
23:56 - detail here as to what these permissions
23:57 - mean but basically on Linux the way that
24:00 - the permissions work is this first
24:02 - number here is the permissions for the
24:05 - owner of either the directory or the
24:07 - file the second number here is the
24:09 - permissions for the group and the third
24:12 - one here is the permissions for everyone
24:14 - else so what we were saying here with
24:15 - seven is read write and execute and with
24:19 - six here it's just read and write and
24:21 - those are just zero permissions for
24:23 - everybody else okay so now we should be
24:26 - able to log in without
24:28 - a password so again I'm going to exit my
24:31 - machine just to test this so now we're
24:34 - back on our local machine so I'm gonna
24:35 - hit the up arrow to where we logged in
24:38 - SSH in as our user and I'm gonna hit
24:41 - enter and you can see that it just
24:43 - logged us in without a password there so
24:46 - our SSH keys are now working and that is
24:48 - also more secure than using a password
24:51 - as well okay so we're just about
24:52 - finished up with the SSH stuff but
24:54 - there's a couple more things that are
24:56 - best practices to change here before we
24:58 - finish this out so first of all we want
25:02 - to not allow root logins we just want to
25:06 - be able to log in as our users and we
25:09 - also don't want to allow password
25:11 - authentication because we just want to
25:14 - be able to log in with key-based
25:15 - authentication and somebody needs a
25:17 - password then it means that they don't
25:19 - have the keys that they need so let's
25:21 - just disallow that altogether and we can
25:23 - do that within the SSH config file so
25:27 - that is in the location and you have to
25:29 - use sudo here so we'll do sudo nano and
25:32 - this was within this et Cie directory
25:35 - SSH and that file is sshd underscore
25:39 - config so we need to put in our sudo
25:44 - password again so we're gonna change two
25:46 - things in this configuration file so
25:49 - first we are going to change the permit
25:52 - root login so if you scroll down a
25:54 - little bit then you can see that this is
25:56 - the first one uncommented here and right
25:59 - now it's set to yes we're gonna set that
26:00 - equal to no and let's scroll down a
26:03 - little further here and there should be
26:05 - a commented one that says password
26:08 - authentication so we can see here this
26:11 - one is commented out password
26:13 - authentication so let's uncomment that
26:15 - and it's already set to yes let's
26:17 - instead set that to no okay so now let's
26:22 - save that so in Nano you hit control X
26:25 - and then a Y to save and then enter just
26:28 - to keep the same file name and now we
26:30 - need to restart the SSH service so we
26:32 - can do that with sudo system CTL restart
26:37 - sshd so let's run that and that should
26:41 - have restarted our
26:42 - sh service okay so we're almost ready to
26:44 - push our django application there's just
26:46 - one more thing that we're gonna do and
26:47 - that is setting up a firewall but this
26:49 - is going to be very quick so first we
26:53 - need to install something so I'm going
26:54 - to clear my screen so let's say sudo
26:57 - apt-get and we're going to install
26:59 - something called ufw and UFW stands for
27:04 - uncomplicated firewall this is a lot
27:06 - easier than using like IP tables or
27:09 - something like that
27:10 - okay so now we're just going to set up a
27:11 - few basic rules so first we're gonna say
27:14 - sudo ufw default and we're going to
27:18 - allow outgoing and hit enter there and
27:22 - now I'm gonna hit the up arrow and I'm
27:26 - gonna put in another rule and this is
27:27 - gonna be deny incoming let me spell that
27:31 - correctly deny incoming now configuring
27:33 - a default deny rule that denies all
27:36 - incoming traffic can lock you out of
27:38 - your server unless you explicitly allow
27:41 - SSH so be sure that you've configured
27:43 - these next allow rules for SSH and HTTP
27:47 - before applying our changes so to allow
27:50 - SSH you need to say sudo ufw allow and
27:55 - we can just allow SSH okay so that's
27:58 - good now I'm not gonna allow HTTP right
28:01 - now instead since we're going to test
28:04 - our site before we actually make it live
28:06 - I'm just going to allow a certain port
28:08 - now if you remember our Django
28:10 - development server runs on port 8000 so
28:14 - let's just allow that port for now and
28:16 - that's how we'll test it on this Linode
28:18 - server and if it's all working
28:20 - then we'll allow HTTP over port 80 so
28:23 - I'm going to allow 8000 there and we can
28:26 - see that these rules were updated and
28:27 - now we need to enable these we're
28:30 - getting a little far down here so let me
28:31 - clear my screen okay so now we need to
28:34 - enable these so I'll say sudo ufw I'm
28:38 - sorry enable not allow so sudo ufw
28:42 - enable I'll run that and it says command
28:45 - may disrupt existing SSH connections so
28:47 - hopefully you remembered to allow those
28:49 - SSH connections so I'm gonna say yes and
28:52 - now if we do a sudo UFW
28:55 - status then we can see everything that
28:58 - is being allowed here
29:00 - so port 22 is ssh and port 8000 here is
29:03 - what we're going to use to test our
29:05 - django application before we make it
29:07 - live on port 80 so i'm going to clear
29:10 - the screen okay so that's going to
29:12 - finish up all of the new linux server
29:14 - setup type of stuff so now we're ready
29:16 - to actually deploy our django
29:18 - application so first we want to put our
29:21 - application on the web server now there
29:23 - are multiple ways that you can get this
29:24 - application to your web server so if you
29:27 - have it checked into a git repository
29:28 - then you can simply use git to do a git
29:31 - clone to our server here you can use an
29:34 - FTP client like filezilla to push it to
29:37 - the server since we're already in the
29:39 - command line on our local machine we can
29:41 - just use the terminal command to do this
29:43 - so I'm gonna pull up my other terminal
29:46 - window here where I'm on my local
29:47 - machine and let's clear the screen now
29:51 - before you push your django application
29:52 - if you're using a virtual environment
29:54 - for your application then you're gonna
29:56 - want to create a requirements txt file
29:59 - that captures everything that we need to
30:01 - install for our django application to
30:03 - work now I was using a virtual
30:05 - environment for this series so I'm going
30:08 - to activate that and then create a
30:10 - requirements that txt file from that
30:12 - environment so I am going to activate my
30:16 - virtual environment so I'm going to say
30:19 - source and that environment lives on my
30:22 - desktop and this is called Django env
30:26 - and then I have to run I have to source
30:29 - the activate file so - been - activate
30:33 - so now we can see in our prompt here
30:37 - that that Django environment is now
30:39 - activated now if we want to see all of
30:41 - the dependencies that we have for our
30:43 - application then we can simply run pip
30:46 - freeze and if we run this then we can
30:49 - see it displays everything that we're
30:52 - using in this project so we have django
30:55 - Django Krispies forms pillow and some of
30:58 - these are dependencies on others so PI
31:00 - TZ is a dependency that Django uses and
31:05 - you can see that this also provides all
31:07 - of the versions the
31:09 - exact versions that we were using in
31:11 - development as well so saving all of
31:14 - these and then installing those on our
31:16 - server should make sure that you know no
31:19 - updates or anything are going to break
31:21 - our application because we're installing
31:23 - exactly what we were running in
31:25 - development now if you're on Windows
31:26 - then you can create a requirements txt
31:29 - file and then just paste all of this
31:31 - here into it but if you're on Mac or
31:34 - Linux or using bash then we can simply
31:38 - say let me clear my screen here we can
31:40 - simply say pip freeze and then we can
31:43 - feed that into a requirements that txt
31:48 - file and that'll work
31:49 - that will create a requirements that txt
31:51 - file with the contents with the output
31:54 - of that pip freeze command so I will run
31:56 - that and now we want to put this
31:58 - requirements txt file into our Django
32:00 - application so I am going to open up
32:04 - finder here and I have two windows
32:07 - opened up so this is my desktop here now
32:10 - let me open up my Django project so this
32:12 - is my Gengo project and this is my
32:14 - desktop I'm going to well I thought I
32:17 - created the requirements that txt file
32:19 - on my desktop but actually I'm within my
32:22 - home folder instead sorry about that so
32:26 - let me go to my home folder so here's
32:28 - that requirements txt file and I'm just
32:30 - going to drag this over and it dropped
32:32 - that into my Django project so now that
32:35 - requirements dot txt file is inside of
32:38 - our Django projects and I'm going to
32:39 - close down those Finder windows okay so
32:42 - now we need to put our application on to
32:45 - our web server now since I'm using bash
32:47 - I'm going to use the same SCP command
32:49 - that we used earlier to copy our SSH
32:52 - keys but if you're not using bash then
32:54 - again you can use something like
32:56 - FileZilla or get to get your project
32:58 - folder onto the server okay so to do
33:01 - this first I'm going to navigate to my
33:04 - desktop because that is where my Django
33:07 - project currently lives and that project
33:10 - is called at django underscore project
33:12 - so now I'm going to say SCP which will
33:15 - copy and we need a dash are here to do a
33:18 - recursive copy that means that we can
33:20 - copy a directory so now I will do
33:23 - ooh django underscore project that's
33:26 - what we want to copy to our server and
33:29 - we want to copy this to query ms at now
33:33 - you want to use whatever user you
33:35 - created there and now the IP address so
33:38 - again I wrote this down you want to use
33:40 - your IP address mine is one 98.5 8.11
33:44 - 9.1 8 3 and again to specify an exact
33:48 - location on that server we can put a
33:50 - colon and I'm just going to put this in
33:52 - the home folder on for this core EMS
33:56 - user so after the colon I'm just going
33:58 - to put a tilde and a forged slash and
34:01 - that should put it in the home folder on
34:03 - that server so I'm going to run that
34:07 - okay and that copied everything from our
34:09 - Django project and one to our server so
34:12 - now let me minimize our local machine
34:15 - here and go back to our server that we
34:18 - still have opened in this terminal
34:20 - window and now let me do an LS on the
34:22 - home directory to make sure that that
34:24 - copied over and we can see that it did
34:26 - we have our Django project here and if
34:28 - we do an LS on Django project then we
34:30 - can see that it has all of our
34:32 - applications so it's got the main Django
34:34 - project here the users the blog and our
34:37 - sequel Lite file everything okay so now
34:40 - that we have our Django application on
34:42 - our web server now we're ready to
34:44 - actually get it running on here so first
34:46 - of all let's create a virtual
34:48 - environment that is going to run our
34:50 - application so to do this we're going to
34:53 - need to install a couple of things so
34:55 - I'm going to say sudo apt-get install
34:59 - and we want to install so first I'll
35:02 - install Python 3 - pip now you want to
35:06 - do the Python 3 - pip because if you
35:08 - don't put the 3 there it'll do Python
35:10 - version 2 so we'll do a sudo install of
35:13 - Python 3 - pip
35:17 - now some of those installations can take
35:19 - a bit so instead of watching the entire
35:22 - installation throughout these videos I'm
35:24 - just fast-forwarding to where these are
35:26 - complete so if you're following along
35:27 - and yours is still installing then you
35:30 - can just pause the video until yours is
35:32 - done as well okay so I'm going to clear
35:34 - my screen here and now let's install
35:37 - Python threes virtual environment so
35:40 - I'll say sudo apt-get install and this
35:45 - is going to be Python 3
35:47 - - ve in V and I'll say yes there ok so
35:53 - once that is finished installing now I'm
35:55 - going to create a new virtual
35:57 - environment now you can create this
35:59 - virtual environment anywhere that you
36:00 - want but I'm going to put this inside of
36:02 - our Django project folder so to create a
36:05 - virtual environment we can simply say
36:07 - Python 3 - M V E + V and I'm going to
36:12 - put this within our Django project
36:14 - folder and I'm going to call this
36:16 - virtual environment just simply V E + V
36:19 - so now if I do an LS on our Django
36:22 - project then we can see that we have a
36:24 - virtual environment right here
36:25 - so now let's activate that virtual
36:28 - environment so that we can install all
36:30 - of our dependencies so I'm going to CD
36:33 - into our Django project directory and
36:35 - within here I'm going to say source the
36:39 - env bin activate and that should
36:43 - activate our virtual environment we can
36:46 - see here at the beginning of our prompt
36:47 - we now it now says V in V so that's a
36:50 - good sign that our virtual environment
36:51 - is activated okay so now I'm going to
36:54 - install all of those dependencies from
36:56 - our requirements txt file and remember
36:58 - our requirements txt file we just put
37:01 - that here within our Django project so
37:04 - we can simply say pip install and if we
37:07 - do a - our on pip install then it'll
37:10 - expect at requirements txt file so we
37:13 - can say requirements txt and run that
37:16 - and it's going to go through and install
37:18 - everything in that requirements file so
37:20 - it's going to install Django and PI T C
37:22 - and crispy forms and all of that now if
37:25 - you didn't create a requirements txt
37:28 - file then at that step you still want to
37:30 - create the virtual environment
37:31 - but you're just going to install those
37:33 - manually so you just install the version
37:36 - of Django that you used in the series
37:37 - and then pillow and crispy forms and all
37:40 - of the other packages that we use
37:42 - throughout the series okay so now that
37:44 - we have all of that installed let me
37:46 - clear my screen here now let's change
37:49 - some settings in Django so that we can
37:52 - test this on our lamode server so first
37:55 - I'm going to open up our settings dot py
37:57 - file now that is located so I'm going to
38:00 - do a sudo nano that is located inside of
38:03 - Django project settings dot py so I will
38:08 - run that and there are a couple of
38:10 - things that we need to change here so
38:12 - I'm gonna go down here a little bit and
38:14 - we should see something called a loud
38:17 - host now a loud host we need to put in
38:20 - our IP address of our server now if you
38:24 - have a domain name then you can use the
38:25 - domain name as well but for now we just
38:27 - have the IP address now this is going to
38:30 - be a string so I wrote my IP address
38:32 - down you would insert yours here but
38:35 - mine was one 98.5 8.11 9.1 8 3 now you
38:40 - have to have that in a loud host because
38:43 - for security reasons Jango isn't going
38:45 - to allow traffic anywhere that it
38:48 - doesn't recognize the host ok so now
38:50 - with that in place now let's scroll down
38:53 - towards the bottom here where we put ok
38:57 - so here at the bottom I want to scroll
38:59 - up just a little bit to our static URL
39:02 - so if you remember earlier in the series
39:04 - I said that static files were handled
39:06 - differently in development than they are
39:08 - in production so in production we have
39:11 - to put in a place where these static
39:13 - files are going to exist and that's
39:15 - going to be the static route so right
39:17 - above the static URL here I'm going to
39:19 - put static underscore route and I'm
39:22 - going to set this equal to that for me
39:25 - I'm just going to put OS dot path dot
39:28 - join and I'm going to put this in the
39:30 - base directory so base dur it's actually
39:33 - going to be very similar to our media
39:36 - folder here so it's going to be in the
39:38 - base directory of our project and
39:39 - instead of media we will do static so
39:42 - once we've made those changes to our
39:44 - settings
39:45 - let's save those so I'll hit control X
39:47 - and then Y to save and then enter to
39:49 - keep that same filename so now to get
39:53 - our static files working here on the
39:55 - server we need to run a command called
39:58 - collect static so I'm gonna say Python
40:01 - managed up py and that is collect static
40:06 - so if we run that then we can see that
40:08 - it says 120 static files copied to this
40:13 - static directory here within our Django
40:15 - project so if I do an LS now then we can
40:18 - see that now we have a static folder
40:20 - here within our Django project okay so
40:22 - now let's test this so let's run our
40:25 - development server but we're going to
40:27 - open it up on our lenôtre server here to
40:30 - where we can access it from the outside
40:32 - so I'm going to say Python manage py run
40:36 - server now don't hit enter yet we want
40:40 - to do the address of 0 0 0 and then :
40:45 - port 8000 remember that we opened up
40:48 - port 8000 on this server sorry this is
40:52 - going to the next line here now but
40:54 - hopefully you can read that alright so
40:56 - if I hit enter there then it says that
41:00 - our server is running and since we
41:03 - specified this as 0 0 0 0 that should
41:07 - allow us to go to our IP address on port
41:10 - 8000 and see this development server
41:13 - running so I'm going to open Chrome back
41:16 - up and see if we can access this so my
41:20 - IP address was 1 98.5 8.1 19.1 8 3 and
41:26 - you go to port 8000 we can put in a
41:28 - colon and then 8000 so if I run that
41:31 - then we can see that our blog is now
41:36 - available through our browser so this
41:39 - should be accessible to anybody so you
41:41 - could send somebody your IP address and
41:44 - that port and they should be able to go
41:46 - to your blog and interact with it
41:49 - so let's test the site so if I go here
41:53 - to create a new user let's try to create
41:55 - a new user so I'll do
41:57 - test four and an email of test for at
42:01 - test comm a random password and let's
42:08 - sign up and we can see that our user has
42:10 - been created let's try to login with
42:12 - that user so test four and then the
42:15 - password that we used so we can see that
42:17 - we can login it gives us a default
42:20 - profile here where it has all the
42:22 - information that we entered so let's
42:25 - test that we can create a new post
42:27 - so test post test content if we post
42:33 - that then it looks like our post was
42:36 - created let's try to update a post so I
42:38 - will do test updated post and that seems
42:43 - to work let's try to delete a post and
42:46 - that seems to work as well let's try to
42:49 - update our profile picture you want to
42:52 - be sure that you test a good bit of
42:53 - functionality just to make sure that it
42:56 - all seems to be working properly now so
42:58 - let's update a profile picture and that
43:01 - seems to work as well let's test the
43:04 - logout okay and the logout works and
43:07 - lastly let's test the admin page so I'm
43:10 - going to go to forge slash admin and
43:12 - then put in the user I created with
43:15 - admin access is Cori MS and I will log
43:20 - in here okay and it looks like our admin
43:24 - page works as well so now I'm going to
43:27 - log out of there okay so it seems like
43:31 - most of our functionality is working on
43:33 - our server now so that is a really good
43:35 - sign now one bit of functionality that
43:37 - isn't going to work yet is our forgot
43:40 - password functionality so if I go to
43:42 - forgot password and try to reset my
43:45 - password then it's going to give me an
43:47 - error and the reason is is because we
43:50 - haven't copied over our environment
43:52 - variables from our local machine that
43:54 - contain our email service username and
43:56 - password so that's one bit of
43:58 - functionality that's not going to work
43:59 - right now but we will get that set up
44:01 - here in just a bit
44:03 - okay so our site is working but you
44:06 - don't want to actually leave it like
44:08 - this so I'm going to go back to
44:10 - our terminal here now we don't actually
44:12 - want to run this using the Django server
44:15 - like we've done here this was just for
44:17 - testing that everything worked so far
44:20 - but now let's kill that server that we
44:24 - were just running and now we want to run
44:26 - a server that's more reliable so you
44:28 - know something like Apache or nginx or
44:31 - something like that now in this video
44:33 - I'm going to use Apache but there's
44:35 - different options available to you and
44:37 - let me actually minimize our browser
44:40 - there okay okay so there are a couple of
44:42 - things that we need to install here
44:43 - first we need to install Apache which is
44:46 - going to be our webserver and then we're
44:48 - gonna install something called a mod
44:49 - whiskey now whiskey which is WSGI
44:54 - stands for web service gateway interface
44:57 - and that's what allows our web server in
45:00 - this case Apache it allows our web
45:02 - server to talk to Python and to talk to
45:05 - our web application which in this case
45:07 - is Django so we need to install and
45:10 - configure both of those so first I'll
45:12 - install Apache so I'll say actually let
45:15 - me go back to my root directory here by
45:18 - typing CD so that we have some more
45:20 - space here so now I'm going to say sudo
45:23 - apt-get install and this is going to be
45:26 - Apache too so let's run that
45:31 - okay and once that's installed I'm gonna
45:33 - clear my screen here and now let's
45:35 - install mod whiskey so to do that that
45:38 - is sudo apt-get install and this is Lib
45:43 - Apache - - mod - whiskey - pi/3 I always
45:51 - have to look that up I can never
45:52 - remember these long package names so I
45:54 - think that should work let me run that
45:57 - and hit yes okay so it looks like that
46:00 - was installed successfully so now we
46:03 - need to configure our Apache web server
46:06 - so I'm going to clear my screen so now
46:08 - let's CD into a directory here in etc'
46:15 - Apache - sites available and this
46:20 - directory here is where the Apache
46:21 - configuration files live so if I do an
46:24 - LS in this directory here then we can
46:27 - see that there are some default
46:28 - configuration files here now I'm going
46:31 - to use one of these configuration files
46:33 - as the starting point for our projects
46:36 - configuration so I'm just going to copy
46:38 - one of these so I'll say sudo CP and I
46:42 - will copy that first one so 0 0 0
46:45 - default and I will copy that into a file
46:48 - called Django underscore project.com and
46:54 - again sorry for the text scrolling on to
46:57 - multiple lines here I know that that can
46:59 - make it a little bit more difficult to
47:00 - read but I have to make a trade-off
47:02 - between having the text large enough to
47:04 - where you can read it but you know
47:06 - sometimes that makes it harder to read
47:08 - when it goes onto multiple lines like
47:10 - that ok so now we've created this Django
47:12 - project.com configuration file that is a
47:16 - copy of the default configuration file
47:18 - so now let's edit it to where it meets
47:23 - the needs for our project so I'm going
47:25 - to do sudo nano and change that Django
47:29 - project comm file ok so what we have
47:32 - here is a default configuration file for
47:34 - Apache now where it says virtual host 80
47:38 - right here this 80
47:40 - it means port 80 so this is what's going
47:43 - to show up on HT
47:44 - P port so whenever we go to our IP
47:48 - address in the browser it's going to
47:51 - follow these rules so I'm gonna scroll
47:53 - down here towards the bottom all of this
47:55 - stuff is just default standard stuff so
47:58 - right here before the closing virtual
48:01 - host tag I'm gonna add in a few of our
48:04 - own rules so first of all we're gonna
48:06 - use an alias to tell Apache to map
48:08 - requests starting with static to our
48:12 - apps static folder and remember in our
48:14 - project settings we put this in our
48:16 - projects base directory so to do this
48:19 - I'm going to say alias and we want to
48:22 - alias anything that references static
48:25 - and we want that to go to our projects
48:29 - static directory now on my machine this
48:32 - is located in my home directory and my
48:35 - user is corey MS you're going to want to
48:37 - put your user there my project is called
48:39 - django underscore project you're going
48:42 - to put a want to put your project there
48:43 - and I put that static folder in my
48:47 - Django project directory so that is
48:49 - where mine is located you want to put
48:52 - where you put your static directory
48:54 - there so now we want to give some
48:58 - permissions here so we're gonna say for
49:01 - that directory sorry that needs to be
49:03 - capitalized so we'll say directory and
49:06 - the directory is going to be the same
49:08 - thing that we put here so I will just
49:11 - try to copy that and paste it and within
49:14 - that directory tag we are going to say
49:17 - require all granted and now we can close
49:22 - out the directory tag so we will put a
49:25 - forward slash there and directory and
49:28 - now we want to create another one of
49:30 - these for the media folder as well so
49:33 - I'm just going to copy that big whole
49:35 - section there and paste that in and up
49:39 - here where we had static we want to
49:41 - change these to be media so I will
49:44 - change this one here to be media and
49:46 - then here at the end I will change that
49:51 - to be media as well and one more place
49:55 - right there okay and now that we have
49:58 - the
49:58 - and media directories taken care of next
50:01 - we need to grant access to the WSGI dot
50:05 - pi file within our project this ensures
50:08 - that Apache can access our whiskey dot
50:11 - PI file which is how our app is actually
50:13 - going to talk to our webserver so to do
50:16 - this I'm going to scroll down here just
50:18 - a little bit so to do this I am going to
50:22 - copy up until this point of this line
50:26 - here and paste this in but for the
50:29 - directory here I also want to go one
50:32 - more level deep and I want to go into
50:34 - the Django project directory within our
50:37 - Django project and that's because that's
50:39 - where that whiskey dot 5 PI file lives
50:42 - so now within there and I'm just going
50:45 - to go ahead and close this off right now
50:48 - so I don't forget later so within here
50:50 - we want to create some file tags so I
50:54 - will say files and that is WSGI pi and
50:59 - i'll also close off that files tag there
51:04 - as well and within here we also want to
51:08 - say require all granted ok so we're just
51:13 - about finished up here just a couple of
51:15 - more things to add so next we're going
51:18 - to add the part that actually handles
51:20 - the WSGI part so we're going to use the
51:24 - demon mode for this and this is
51:27 - recommended in Django's official
51:28 - documentation so to do this let me
51:31 - scroll down here just a little bit so we
51:33 - can see this a little better so to do
51:35 - this I'm going to put in a tag here
51:36 - called WSGI script alias and then we are
51:42 - just going to put a forward slash and
51:43 - then we will do a ford slash home core
51:48 - EMS you're going to want to put your
51:50 - user in there Jango underscore project
51:54 - ford slash Jango underscore project
51:57 - forge last WSGI dot pi so the first bit
52:02 - here is the base URL path where we want
52:06 - to serve our application and in this
52:09 - case it indicates the root URL so
52:11 - basically that means
52:12 - going to the base of our IP address
52:14 - without any extra routes will take us to
52:16 - our django application and the second
52:19 - part here is the full path to that WSGI
52:22 - dot PI file so once we have that done
52:25 - now we can specify the daemon process so
52:28 - I'll say WSGI da e mo n is how you spell
52:33 - that daemon process and now we can just
52:38 - call this whatever we want it's just
52:40 - going to be the process so we'll just
52:42 - call it Django app and now I can say
52:45 - Python path open I don't want any spaces
52:49 - there so Python path equal to this is
52:51 - going to be the path to our project
52:53 - directory so on my machine that's ford
52:55 - slash home forge / square EMS forge /
52:59 - Django project again you put in the path
53:03 - to your Django project there and now we
53:07 - also need to specify Python - home and
53:10 - for python home I'm going to say that
53:13 - equals and this is going to be the
53:16 - location to our virtual environment so
53:18 - I'm in on my machine that is fork slash
53:21 - home forge / core EMS forge / django
53:25 - underscore project forge / ve in V now I
53:30 - know that this is a lot of typing and it
53:32 - might be easy to mess something up here
53:34 - or miss type something so I'm going to
53:37 - take this configuration file once we're
53:39 - done with this video and I'll put this
53:41 - in my github page so that you can
53:43 - compare it to yours to see you know if
53:46 - you've made any mistakes ok so with that
53:48 - said we only have one more line here to
53:51 - finish up this configuration so this is
53:53 - going to be WSGI process group and we
53:58 - want this process group to be equal to
54:01 - this process here that we specified in
54:03 - this daemon process so I'm just going to
54:07 - type in the same thing there so Django
54:10 - app is what we name that process ok so
54:12 - hopefully we didn't make any typos there
54:14 - and got everything correct
54:16 - so I will save this file so within Nano
54:20 - it's ctrl X a Y for yes to save and then
54:24 - just hit enter to keep the same
54:26 - my own name so now I am going to clear
54:30 - my screen and I'm going to see the back
54:33 - to my home directory here so that we
54:36 - have a little bit more typing room so
54:38 - now let's enable that site through
54:40 - Apache so to do that we can say sudo and
54:44 - this is a to e in site to enable the
54:49 - site so that's Apache to enable site and
54:53 - then we want to specify that Django
54:57 - project and I will hit enter there and
55:00 - you can see that it's telling us that to
55:02 - activate the new configuration we need
55:04 - to restart Apache we'll do that in just
55:06 - a minute now I'm also going to disable
55:09 - the default site so I'm gonna say sue do
55:12 - a two for Apache to this for disabled
55:16 - and then site and we will disable that
55:20 - zero-zero-zero
55:21 - default dot kampf okay so now that
55:25 - default site is disabled and our Django
55:28 - project is enabled okay so now let's
55:31 - finish up with doing some file
55:34 - permissions here so there are still a
55:36 - couple of things that we need to change
55:37 - so right now we have to give Apache
55:41 - access to things like our database
55:45 - because we are right now we're using
55:46 - sequel Lite in a future video we're
55:48 - going to use Postgres but right now
55:50 - we're still using sequel Lite so Apache
55:52 - has to be able to read and write from
55:55 - that sequel Lite file and the same goes
55:57 - for our media folder so if somebody is
55:59 - uploading a picture then Django has to
56:02 - be able to write to that media folder so
56:05 - let's do a few different permission
56:07 - updates here so I'm gonna say sudo CH
56:11 - owned which changes the owner of a
56:13 - directory or a file and I'm gonna do a
56:15 - colon WWD des that is the Apache user
56:22 - there and we want to change the
56:25 - permission and Django project DB SQL
56:29 - Lite 3 is the name of our database file
56:32 - so what this is going to do is it's
56:34 - going to make Apache the group on that
56:39 - file so
56:40 - if I run that then now Apache is the
56:42 - group owner of that file and now I'm
56:44 - going to change the permissions so I'll
56:46 - say sudo chmod and the permissions that
56:50 - we want here are 6 6 4 so again that's a
56:54 - 6 for the owner a 6 for the group and a
56:57 - 4 for everybody else a 4 is read
57:00 - permissions and I want to give
57:03 - permissions to Django project DB SQL
57:07 - Lite 3 okay so I also want that WWD
57:11 - group to own the Django project folder
57:13 - itself as well so I'm gonna say sudo CH
57:17 - own and we will put in a colon WWD de
57:22 - and we will change the ownership of the
57:26 - Django project itself so I will run that
57:29 - now if we do an LS - la then we'll be
57:32 - able to see these permissions so if we
57:34 - see Django project here we can see that
57:36 - now quarry ms is the owner but it is now
57:40 - w WD is the group owner so that's what
57:44 - that CH own command is doing ok so now
57:47 - I'm going to clear the screen here now
57:48 - let's do those same things for the media
57:51 - folder so I'm gonna say sudo CH o W in
57:56 - and now we're going to do a dash R for
57:59 - recursive and again we're gonna do a
58:02 - colon WWD des and we want to give
58:06 - permissions here on the media folder so
58:09 - I'll say for Django project forge /
58:11 - media so I'll run that and that will
58:14 - allow Apache to actually write uploaded
58:18 - media to that media folder and now let's
58:21 - change the permissions here so I'm gonna
58:22 - do a sudo chmod - R and we will do a 7 7
58:28 - 5 and we will do Django project media
58:33 - again and run that okay so I know that
58:35 - this has been a long video so far but we
58:38 - are just about finished up with the
58:40 - final deployment of our Django
58:42 - application there are just some final
58:44 - changes that we need to make before we
58:46 - go live with our website so the first
58:49 - thing is that we need to move sensitive
58:51 - information to
58:53 - a config file now I was using
58:56 - environment variables in the development
58:59 - of this application but in Apache
59:01 - environment variables can be a little
59:03 - tricky to work with and you have to
59:05 - change the WSGI Python file and things
59:08 - like that since this video has already
59:11 - been long enough and we've done so much
59:13 - configurations I think it would be a lot
59:15 - easier to just do a config file for the
59:17 - sensitive information instead of doing
59:19 - environment variables so the sensitive
59:21 - information that I'm talking about is
59:23 - going to be like our secret key for our
59:25 - application and our email username and
59:28 - our email password that we use to reset
59:30 - our password in the application and in
59:33 - the future this is also where we are
59:35 - going to add our database username and
59:38 - database password and things like that
59:39 - when we use Postgres so I'm just going
59:42 - to create a config dot JSON file on our
59:44 - system that holds that secret
59:47 - information so I'm gonna put this in so
59:50 - I'll do a pseudo touch which will create
59:52 - a file and I'm gonna put this in the
59:54 - e.t.c directory and I'm just going to
59:56 - call this config dot JSON now if you
59:59 - have you know multiple applications on
60:01 - the same server then you can have the
60:04 - name of your application
60:05 - - config dot JSON or something like that
60:08 - to differentiate between their different
60:10 - applications so I'm going to run that to
60:13 - create that file and now I'm going to
60:15 - grab our secret key from our application
60:17 - so to get the secret key I'm gonna say
60:19 - sudo nano and that is within Django
60:23 - project Django project settings dot py
60:27 - if I run that and scroll down just a
60:31 - little bit here then it is close to the
60:33 - top of our settings dot py file and you
60:36 - can see here it says security warning
60:38 - keep the secret key used in production
60:40 - secret so if you're using something like
60:42 - git then you don't want to you know have
60:46 - this pushed up to github or something
60:48 - like that you want to either use an
60:50 - environment variable or load it in from
60:52 - a cake fig file like we're going to do
60:54 - here so I'm going to copy this secret
60:58 - key copy and I will now erase this here
61:04 - and we will add this
61:06 - back in in just a second but for now I'm
61:09 - going to save that settings file and now
61:12 - let's open up that config dot JSON file
61:14 - that we just created so I'm gonna say
61:16 - sudo nano and we put that in - et Cie
61:19 - config JSON now this is empty right now
61:23 - but to create this JSON file I'm going
61:26 - to put in opening and closing braces
61:28 - there and now I will put in a key for
61:33 - the secret key and I will give that a
61:35 - value and this is going to be within
61:38 - quotes here now we're going to paste in
61:40 - that secret key that we copied from
61:42 - before now we're also going to put other
61:45 - secret or sensitive information in here
61:47 - as well so our email user that we use to
61:53 - send emails through our email service we
61:57 - can put that email address in here and
61:59 - we also need our email password so I'll
62:03 - say email underscore pass is what we
62:05 - called it in our application and I will
62:08 - put that in here as well now you're
62:10 - gonna want to put your email username
62:12 - and your email password that we used in
62:15 - this series now I'm gonna use my own I'm
62:18 - not gonna show you my email username and
62:21 - password here for obvious reasons I
62:23 - don't want you to be able to log into my
62:24 - email but so I'm gonna exit out of this
62:28 - file now but before I actually run this
62:31 - live I'll fill this in off of the
62:34 - recording so that we can see that it
62:36 - works properly so now I'm going to save
62:39 - this file so ctrl X Y to save and then
62:42 - enter and now we want to update our
62:44 - settings not py file and pass in the
62:48 - values from that config file so I'm
62:50 - going to run that same command that we
62:53 - ran earlier sudo nano and we want to run
62:56 - Nano on our settings dot py file so I
62:59 - will run that now here at the top of our
63:02 - settings dot py file I'm just going to
63:05 - import JSON now I used
63:07 - JSON for my configuration but if you're
63:09 - more comfortable using gamal or
63:11 - something like that then you can
63:13 - definitely use that as well so now here
63:17 - at the top I'm just going to load
63:19 - in this config file so I'm going to say
63:21 - with open and we are going to open that
63:25 - file so that was in /e TC config dot
63:29 - JSON and we will open that as config
63:33 - underscore file and within here I will
63:37 - say config is equal to json dot load and
63:41 - we will load in that config file make
63:45 - sure that i spell that correctly we will
63:47 - load in that config file and I think
63:49 - that Nano is putting in more spaces here
63:52 - than what I'm used to when I hit tab so
63:55 - instead I'm just gonna use spaces so
63:58 - I'll put in four spaces there instead
64:01 - okay so with that config file loaded
64:03 - these should be the last changes that we
64:05 - need to make in our settings dot py file
64:08 - so here for our secret key remember we
64:12 - load it in that JSON file and JSON
64:15 - whenever you load something in and use
64:17 - JSON load it loads that in as a
64:20 - dictionary so now our config variable
64:23 - should be a dictionary with all of our
64:25 - sensitive information so for our secret
64:27 - key here I'll just say config and access
64:32 - that secret key key of that config
64:35 - dictionary and that config variable that
64:38 - we are using there let me show you just
64:40 - one more time that is what we set right
64:45 - here that is that variable that is the
64:47 - JSON that we loaded in so let me go back
64:49 - down to our secret key and now that
64:52 - we've set the secret key to that
64:54 - sensitive information now we also need
64:57 - to set debug equal to false
65:00 - you don't want debug equal to true on
65:02 - your production machine because anytime
65:05 - there's an error it's going to give way
65:08 - too much information to people and it
65:10 - could you know expose other flaws in
65:14 - your system to people who could hack
65:16 - into your system or something like that
65:18 - so you always want debug turned to false
65:22 - in production and you can see that
65:23 - Django says that here - they say
65:25 - security warning don't run with debug
65:27 - turned on in production ok and we are
65:29 - almost done let me scroll down to the
65:31 - very bottom here where
65:33 - I set my email username and email
65:36 - password information so that's at the
65:38 - very bottom of the settings that py file
65:40 - and you can see here we were using
65:44 - environment variables that's what we
65:46 - used earlier in the series whenever we
65:48 - added this functionality but now I'm
65:50 - using that config file instead so
65:52 - instead of OS dot environment I'm just
65:55 - gonna say config dot get and we will
65:59 - keep that as email user and instead of
66:03 - OS dot environed I get that is config
66:06 - dot git and now I will save our settings
66:09 - not py file by hitting ctrl X Y to save
66:13 - and enter ok so now that we've updated
66:15 - our settings not py file let me clear my
66:18 - screen here now at this point I'm going
66:20 - to pause the video and I'm going to go
66:22 - back into my configuration JSON file and
66:26 - I'm going to put in my email username
66:29 - and my email password and then I'm going
66:33 - to start the video back up so that
66:35 - whenever we actually test this in
66:38 - production and we can see that the
66:40 - emails actually work when we try to
66:43 - reset our password so I'm going to go
66:44 - ahead and do that now ok so I went back
66:47 - into my configuration file and I put in
66:49 - my information for my email username and
66:52 - password you'll have to go in and do
66:54 - your information there but now that
66:56 - should be it like we should be ready to
66:59 - go it should be fully deployed at this
67:01 - point so now all we need to do is a
67:05 - couple more commands here so we want to
67:09 - disallow the port 8000 that we were
67:13 - using to test earlier with our firewall
67:15 - so what I'm going to do is a sudo ufw
67:18 - delete that allow so delete allow on
67:22 - port 8000 and so we can see that the
67:26 - rule was deleted and now we want to
67:29 - allow HTTP traffic so I'm gonna say sudo
67:33 - ufw allow HTTP forge slash TCP so I'll
67:39 - run that ok and with that done now we
67:42 - can restart our Apache server and it
67:45 - should be good to go so
67:47 - I will say sudo service Apache Apache to
67:52 - restart so let's restart that and I'll
67:55 - clear my screen okay so at this point if
67:58 - we did everything correctly then our
68:00 - site should now be live so if we pull
68:04 - back up our browser and here before we
68:08 - were at port 8000 if I try to reload
68:11 - that page at port 8000 now it shouldn't
68:14 - give me anything so we can see up here
68:16 - it's spinning there's stuff on the
68:18 - screen here but that's just from before
68:20 - if we let this wait long enough it'll
68:21 - say the site can't be reached but if we
68:24 - take off that port 8000 hopefully we
68:26 - didn't have any typos and our
68:27 - configurations or settings and it should
68:30 - work okay so we can see that this looks
68:32 - promising we kind of have our website
68:34 - here so now let's test the functionality
68:36 - so let's try to first create a user so
68:40 - I'm going to create a user called
68:42 - deployed user and I'll do an email at
68:46 - deployed user at test com put in a
68:50 - sample password here and confirm that so
68:57 - sign up okay so we got an error here
69:00 - when we tried to create that user so
69:03 - that means that somewhere along the
69:05 - lines we either forgot a step or we made
69:08 - a typo somewhere
69:10 - now if debug was set to true in our
69:14 - settings then there would be a lot more
69:16 - information here as to what exactly went
69:19 - wrong
69:19 - but since debug is set to false we can
69:22 - see that this is a very vague err it
69:24 - just says server error 500 now like I
69:26 - said before you never want debug set to
69:29 - true when you're working with a live
69:31 - website because if you have an error
69:33 - like this you don't want just any random
69:36 - person to see all that detailed error
69:39 - information because it can give a lot of
69:41 - information about your back-end server
69:43 - and leave you more vulnerable to future
69:46 - attacks but if we have an error like
69:47 - this then how do we go about debugging
69:50 - this well if you're on a live server or
69:54 - working on a live website then I would
69:57 - recommend setting up a test server and
70:00 - testing everything there where you can
70:01 - set debug equal to true that's not open
70:04 - to the public now since our website here
70:07 - isn't you know available for everyone
70:10 - just yet and we don't even have a domain
70:12 - name I'm just going to go back to our
70:14 - site and set debug equal to true so that
70:18 - we can see what this is doing but if I
70:20 - was actually working on a real website
70:22 - then I would probably setup a completely
70:25 - different test server or maybe just open
70:28 - this up on a specific port and then set
70:30 - debug equal to true but since this isn't
70:33 - completely live yet then it's okay to do
70:37 - it this way so I'm going to say sudo
70:39 - nano and we will open back up our
70:44 - settings here so settings dot py and I
70:49 - will scroll down here and set debug
70:54 - equal to true that has to be capitalized
70:58 - there and I will save that file and now
71:02 - let's restart our Apache server so to do
71:06 - that we can say sudo service Apache to
71:12 - restart so now if we go back to our page
71:16 - and try this again
71:20 - so I'll fill out everything that I just
71:23 - did so deployed user deployed user at
71:26 - test comm and then put in a password so
71:33 - let's sign up and now we have more
71:35 - detailed error information so we can see
71:38 - here that it says attempt to write read
71:41 - only database so that leads me to
71:45 - believe that it is a permissions
71:48 - err with our database so if we go back
71:51 - to our server then let me clear this out
71:55 - if I do an LS - la then we can see the
71:58 - permissions here so I'm going to do that
72:01 - on our project so our DB dot sequel Lite
72:05 - this is our database file so this is the
72:08 - apache group here and the group can
72:11 - write to that
72:13 - a base so that doesn't seem to be the
72:16 - problem if I do an LS - LA and my
72:20 - current directory then we can see that
72:24 - we have the apache group owns this
72:27 - directory but it doesn't have write
72:30 - permissions so the parent directory also
72:33 - has to have write permissions for that
72:35 - database so that is most likely the
72:37 - problem there so if instead I say sudo
72:41 - chmod 775 on Django project remember
72:47 - this is the user here this is the group
72:51 - so this will give the group read write
72:53 - and execute permissions there with that
72:55 - seven in the second spot so if I run
72:57 - that and now again let me restart the
73:01 - Apache server and now let's try testing
73:05 - our website again so hopefully this will
73:09 - work and we don't have to make any more
73:13 - changes so deployed user employed user
73:15 - at test comm fill out password there and
73:22 - sign up okay and it looks like that
73:24 - worked ok so now let's also test all of
73:27 - the other functionality as well so let's
73:29 - log in with that deployed user that we
73:32 - just created okay so we can log in so
73:35 - that's good we can go to our profile and
73:38 - let's try to create a post so I'll say
73:42 - test post test post ok so that works
73:48 - let's try to update a post test update
73:52 - post that works let's delete one that
73:56 - works as well let's go to our profile
73:58 - and try to upload a new picture ok so
74:04 - that is working for us let's try to log
74:08 - out
74:08 - ok so that is working lastly let's try
74:11 - the admin page let's see query MS is my
74:17 - admin user okay so my admin page is
74:22 - working as well
74:24 - so lastly I'm going to go back to the
74:26 - site and I'm going to
74:27 - logout now the one thing that wasn't
74:29 - working before was the password reset
74:32 - but like I said if you went in and you
74:35 - put your email username and password
74:37 - into that configuration file that we
74:39 - loaded into our settings then this
74:41 - should now work so I'm going to try this
74:43 - out I'm going to send a reset password
74:49 - to my email address and we can see here
74:52 - that it looks like it worked it said an
74:54 - email has been sent with instructions to
74:56 - reset your password and I actually have
74:58 - my email opened up in another browser
75:00 - over here if I reload my email then we
75:05 - can see that we have an email that says
75:06 - password reset on and right now we just
75:09 - have the IP address if we had a domain
75:11 - name here then that would be the domain
75:13 - name so let's click on that password
75:15 - reset link and we can see that that
75:18 - looks like it works so I'm going to put
75:20 - in a new password here and then try to
75:26 - sign in with that new password so that
75:30 - was core EMS as the username and then
75:34 - I'll put in a new password okay so all
75:37 - of that functionality seems to be
75:39 - working so now we have a fully deployed
75:41 - fully functional Django application that
75:45 - we deployed to a Linux server now if you
75:48 - are deploying your own Django
75:49 - application then I would also recommend
75:52 - going to Google and typing in Django
75:56 - deployment checklist and the first
76:00 - result should be from their website they
76:03 - have a deployment checklist on their web
76:05 - site here of things that you can go down
76:07 - through and check so if we just kind of
76:10 - scroll through here then we can see a
76:13 - couple of things so like critical
76:15 - settings secret key the secret key
76:17 - should be either an environment variable
76:19 - or from a file and we put it in a file
76:22 - so that's good you should have you
76:25 - should never enable debug and production
76:28 - we have had that turned off actually
76:30 - that's good that I thought of that
76:33 - because we actually need to go back and
76:36 - disable that so I won't do it right now
76:39 - just to wind this video down
76:41 - but definitely go back in and set debug
76:44 - equal to false
76:45 - once you're done debugging your
76:46 - application and you can see that there's
76:48 - just all kinds of different checks that
76:49 - we can make so here's the aloud host
76:52 - there's some stuff about caches and
76:54 - databases so it says database connection
76:56 - parameters should be exactly like your
76:58 - secret key either put them in
77:00 - environment variables or in a
77:02 - configuration file just like we did so
77:05 - things like that this checklist will
77:07 - give you a good bit of things to go
77:09 - through and check and make sure that you
77:11 - did everything properly for deploying
77:13 - your application to production okay so
77:16 - let me go back to the blog here and go
77:18 - back here to the main page okay so now
77:22 - we've deployed our django application to
77:24 - our server and it's accessible through
77:26 - the IP address of our server now there's
77:28 - still a lot more that we could do with
77:30 - this in the future if you're interested
77:32 - so right now we only have an IP address
77:34 - but if you want then I can also walk
77:36 - through the process of buying a domain
77:38 - name and how to get the domain name to
77:41 - go to this server that we've set up we
77:44 - could also see how to add SSL
77:45 - certificates so that we can have an HTTP
77:49 - domain that's actually something that I
77:51 - still need to do for my personal website
77:53 - as well now after I record this video
77:56 - I'm going to delete the lenôtre
77:59 - server so if you go to this IP address
78:02 - that I have here then you probably won't
78:05 - see this website that we just deployed
78:06 - and that is why it's because I deleted
78:09 - it I'll spin up another server with
78:12 - these same parameters whenever we're
78:14 - ready to record future videos on this
78:17 - blog actually let me go ahead and delete
78:19 - that server right now that way you can
78:22 - see how to do it if you were following
78:24 - along and using the node as well and you
78:26 - want to delete the server also so that
78:28 - you're not charged for it so what we can
78:31 - do is I'll just log in here using my
78:34 - account it logged me out because of how
78:37 - much time we were away now here is the
78:39 - server that we created in this tutorial
78:41 - this django server now to delete this
78:44 - it's just as simple as clicking on your
78:47 - linen and going to settings and then in
78:51 - settings we can come down here to delete
78:53 - the node and if we click
78:55 - delete now it gives you a warning here
78:57 - that deleting a Linode server will
78:59 - result in permanent data loss so
79:01 - everything that we did to our server is
79:03 - going to be lost so I will click delete
79:06 - and then it'll ask us if we're sure
79:08 - click delete and that server is gone so
79:11 - it's no longer charging us money for
79:13 - that Linode server now like I said at
79:15 - the beginning of this video
79:16 - one owed was actually kind enough to
79:18 - sponsor this tutorial and I've used the
79:21 - node for many years and have recommended
79:23 - them to people long before I ever had
79:25 - any sponsors so if you get a chance I
79:27 - would highly recommend giving them a
79:29 - shot so like we saw in this video they
79:31 - have this really nice new cloud manager
79:34 - that makes spinning up a server fast and
79:38 - easy you can also choose from available
79:41 - images or you can even upload your own
79:43 - custom image if that's something that
79:45 - you'd like to do and if you're doing
79:47 - something that is fairly common then
79:49 - they even have stacks scripts that allow
79:51 - you to spin up a server with all of the
79:53 - relevant software ready to go so for
79:56 - example if you're making a wordpress
79:58 - site or something like that then you can
80:00 - simply choose their WordPress stack
80:03 - script that spins up a server with
80:05 - WordPress ready to go so if you were to
80:07 - do something like that you would come in
80:09 - here and go to create one node we could
80:11 - go to create from stack script go to the
80:14 - node stats
80:14 - stack scripts and we can see that they
80:17 - have a WordPress server here that would
80:19 - already have all of that ready to go as
80:22 - soon as it spins up so it's things like
80:24 - that that make this a really nice
80:26 - platform to work on they also have nine
80:28 - data centers around the world so far and
80:31 - they have two more set to open in 2019
80:34 - so no matter where you are you should be
80:36 - able to spin up a server close to your
80:38 - audience so if you want to check them
80:40 - out then feel free to use my referral
80:42 - link in the description section below
80:44 - and you can get twenty dollars of credit
80:46 - applied to your account to try them out
80:48 - okay so with that said that is going to
80:51 - do it for this video hopefully now you
80:53 - have a pretty good idea for how you can
80:55 - deploy a django application to your own
80:57 - linux server like I said before this
80:59 - option takes a little more effort than
81:01 - some other options out there but having
81:03 - your own private server gives you so
81:05 - much more flexibility and room for
81:07 - growth with your application
81:09 - doing it this way also provides terrific
81:11 - knowledge for learning more about back
81:13 - in Linux systems which is really sought
81:15 - after with a lot of people in the
81:17 - industry and it's one of those things
81:20 - where if you have it on a job
81:21 - application it's really going to look
81:22 - good but if anyone has any questions
81:24 - about what we covered in this video then
81:26 - feel free to ask in the comment section
81:27 - below and I'll do my best to answer
81:28 - those and if you enjoy these tutorials
81:30 - and would like to support them then
81:32 - there are several ways you can do that
81:33 - the easiest ways to simply like the
81:35 - video and give it a thumbs up and also
81:36 - it's a huge help to share these videos
81:37 - with anyone who you think would find
81:39 - them useful and if you have the means
81:40 - you can contribute through patreon and
81:42 - there's a link to that page in the
81:43 - description section below be sure to
81:45 - subscribe for future videos and thank
81:46 - you all for watching
81:58 - you

Cleaned transcript:

hey there how's it going everybody in this video we're going to be continuing the Django series and learning how to deploy our django application to a web server so that anyone with internet access can use it within a browser so far we've created this application with some good functionality but the site still only lives on our local machine right now this is just running in my browser on my local machine but no one else can access this so the point of building these sites is to deploy them so that they're accessible over the Internet now look I'm not gonna lie to you deploying is a bit tricky you can find a lot of Django tutorials online but not many of those covered deployments and that's because they can be difficult it can be overwhelming because there's a lot of different ways to deploy an application and it's hard to know what's best for your specific application so we're going to look at several deployment options in this series so we'll look at how to deploy to your own Linux server how to deploy to Heroku how to deploy to Python anywhere and possibly some others in this video we'll be learning how to deploy our application to our own Linux server so when you deploy to a Linux server you're most likely going to be deploying to a virtual machine that is hosted by a company so that's going to be a company like Leno door digitalocean or AWS I personally use lenôtre my own web applications so that's what we're going to be using in this video and lenôtre was actually kind enough to sponsor this video and has provided me with a link where you can get $20 of free credit towards an account so if you want to follow along with this video then I'll leave that link in the description section below where you can sign up for an account and get enough credit to follow along so I've been using their services from my own personal website for years so I was really happy when they contacted me about sponsoring a video so with that said let's go ahead and get started ok so like I said we're going to be deploying to a Linux server so this method of deployment actually takes the most effort to setup but is also the most flexible in terms of what control you're gonna have over your application and web server so in future videos we'll look at deployment options that offer some free tiers but they usually only offer basic services so for example if you want to use your own domain name such as my Django blog.com or something like that then you'll have to upgrade to a paid service on those free options in order to set that up and even then you won't have the freedom or possibilities that you get with having your own virtual private server so the way that we're doing it in this video will give you a lot of freedom and room for your application to grow but it's not as simple as some other methods so there's definitely some tradeoffs there okay so first things first for those of you have been following along with this Jango series I need to make one correction to the actual Jango code before we deploy this it worked in development but when I tried to deploy the application it gave me some issues so the correction that needs to be made is in our users models dot py file so I'm going to open that up really quick and make a quick change so I have my application open here in sublime text and this was in let me maximize this here this was then our users app here and this was in models dot py and the mistake that I made was down here in our save method so when we were calling the save method on our parent class this super dot SAV we need to accept any other arguments that our parent class might be expecting so in this case we need to pass in args which are positional arguments and kwargs keyword arguments into that save method so to do this I will just accept positional and keyword arguments here by doing stark wargs and star args and star star clogs and we also want to pass those in to our save method whenever we call that on our parent class so again what that does is if you've watched my video on functions before then you'll know that the convention of passing argh and kwargs to your function allows you to accept any arbitrary number of positional or keyword arguments okay so with that correction in place let's now deploy our application so like I said I'm going to be using lenôtre play this application to a linux server that's my personal preference but you can do this same deployment with any Linux server that can that you can access via SSH now I already have an account with one node so let me go ahead and pull that up here in my browser so I have a tab open here and I'll refresh this page so if you create an account with them then you should be able to access a page like this as well this is their new cloud manager and that's at cloud dot Llano dotcom now there's also a lonoa and at manage node comm but that's older and I believe they're now steering people towards using this instead so this page gives me access to all of my currently node servers so you can see I already have one it created for my personal website here called core EMS server but we're going to create a new one from scratch to deploy our django application so let's go ahead and see what this process is like so first I'm going to come up here to create and we're going to click on create and we want to create a new 'la note 'la note is there name for there you can see here it says highperformance SSD Linux servers for all your infrastructure needs so we're going to click on that to create a new Linux server and now we need to select what image we want to create with this server so I'm going to use a bun server in this video but depending on what your preference is you can use any of these CentOS might be another option or Fedora but I'm gonna choose Ubuntu so for the region I'm going to come down here I'm just going to pick Dallas Texas it's a nice midpoint in the United States you can see that they also have some regions in Europe and Asia as well so depending on where people are going to be accessing your application you might want the server to be served up to them from a closed location so for this application here I'm just going to choose Dallas Texas that's fine so down here for the low note plan this is where you pick how much performance you want in your machine and you can see the prices are attached here so this one is $10 a month this one is $20 a month now this is their standard plan here they also have something called an anode here and if we click on that you can see that this is a pretty low performance machine it's just got one CPU 25 gigs of storage and a one gig of ram but it's only $5 a month and our application especially if you're just testing most likely isn't going to be very intensive so I'm just going to pick their cheapest option for deploying our django application now you can always resize these later so I just suggest going small at first and if you want to bump it up to something bigger depending on you know how much traffic you're getting then you can do that at a later time okay so down here at the label I'm just going to call this Django server okay so for the tags I'm just gonna leave that empty there so now we need to choose a root password so this is going to be the root password on the server so you're going to want to pick something secure for me I'm just going to put in a password of this is a test now I'm going to delete this server after this video so you know you're not going to be able to log into my server as a root or anything like that now whatever password you choose here be sure that you remember this because this is a root password on your server and you're definitely going to need to know it whenever you first log into your computer so you know definitely remember this for later because we are going to be using that so now that we have that I'm just going to go over here and click create and now it's going to create our server for us so you can see here that our Django server it says that it is provisioning the server and now it is booting up so I'm going to go ahead and fast forward to where this machine is fully created but it shouldn't take too long just a couple of minutes ok so once our server has completed booting up we can see our server here within our list of Leno's we can also go to our dashboard and see it here now if we click on our 'la node then it will give us more options with this so click on that django server that you just created whatever you named it and now go to the networking tab so we can see that we have a lot of tabs here summary volumes networking settings everything like that let's click on networking and down here we see access and the first thing it says here is SSH access so let's copy this because we're going to SSH into this machine so you're going to want to copy that SSH command and paste it into your command line to SSH into your newly created server now if you're on Windows then you won't have access to the SSH command in the command line there are other tools that you can use that allow you to SSH into a server so one of the more popular ones is called putty and I have it here on I have their website pulled up here it's at putty org and they have documentation in here of how you can SSH into a server but personally what I would recommend on Windows if you're on a newer version of Windows is to simply install the Linux back she´ll on windows and you're able to use ssh through that that's what I personally do on my Windows laptop anytime I need to connect to a server now I'm not going to show that process of installing the Linux bash shell on Windows in this video because I already have a separate video detailing that whole process so I'll put a link to that in the description section below if anyone wants to watch that so once you're running bash then you should be able to use SSH and again if you don't want to use bash for any reason then you should install the software called putty that allows you to use SSH on Windows here at putty org but I will say that if you're using a Linux bash shell then it'll allow you to more easily follow along with all of the commands in this video okay so if you're using bash then we'll want to copy this SSH command here for from our networking tab inland ode and let's paste this into our command line now I have two different terminals pulled up here right now now one of these I'm going to use to run commands on my local machine and one I'm going to use to run commands on our remote Linode server now you don't have to do it this way but if you only use one terminal window then you'll have to go back and forth between your local machine and your server so I think it's easier to simply have two windows open and let me actually minimize our browser here in the background so that we only have our terminal windows open here okay so now I'm going to paste that ssh command into my terminal on the left side here so on the left i'm gonna have our remote server and on the right i'm gonna have our local machine so i'm going to paste in that command and hit enter and this is going to ask you if you're sure that you want to continue connecting this is only going to ask you this the first time so i'll just say yes and now it's asking for that root password this is what we created when we created our lenôtre so for mine I had that as this is a test so if I insert that password then we can see that that worked we are now SSH into what is going to be our web server so you can see that we are root at localhost so local host this is our low note server so we were actually in the terminal of that machine so first let me clear the output there first let's install some software updates this is just something that you're going to want to do for the first time that you get on to your Linux machine now I'm actually going to minimize this right side here and expand this over so that we have more room to work with here on our server so to do this now remember I'm on a bun too so I'll say aptget update and then I will also type in these two ampersands and then aptget upgrade and let me make sure I spelled that right and this is just going to go through and update our machine and make sure that we have all the latest security patches and things like that it might ask you occasionally if you want to continue so you might have to hit yes a couple of times through this and this could also take a little bit of time so I'm just going to fast forward it in to where this is done okay so after a couple minutes those software updates should complete so now I'm going to clear my screen here so now what we want to do is we want to set the hostname of this new machine so on Ubuntu we can do that by saying a hostname CTL set hostname and now let's put in whatever we want the hostname to be so I'm just going to say Django server here for this machine and we can check that that worked by typing in hostname and we should get Django server there now remember I did use a boon for the operating system for this example but if you are using something like CentOS or Red Hat then some of these commands are going to be different so you're gonna have to map the differences between those if you're using a different operating system than what I'm using here in this tutorial okay so now we also need to set the hostname in the host file so to do this I'm just gonna use Nano because Nano is a simple editor that most people know how to use so I'm going to say Neto Nano and this is in the e.t.c directory and this file called host so I'm going to nano on that and underneath this 127 0 0.1 I am going to put in the IP address of our server now you're going to need that IP address alot so it would probably be a good idea just to write it down now this is the IP a dress that we used in our SSH command now I think that I still have that command pasted in or copied into my clipboard here and I do so I'm just going to get rid of that first part and there is the IP address that we want to put in there so we want to put in that IP address and then hit tab and now we want to put in what we had as our host name so that was Jango server so if I now hit control X and then yes to save and then just hit enter to keep the same file name and that should finish up setting the hostname okay so now we want to add a limited user so right now we are logged in as the root user the root user has unlimited privileges and can execute any command now that might sound nice but it's best practice to add a new user that has limited privileges that you can use as your main account and you'll still be able to run admin commands using the sudo command so let's add this limited user so I'm going to say add user and the user that I'm going to create is going to be Corey MS now you can put whatever username you want here so I will hit enter there and now it's asking us to put in a password so again I'm just gonna say this is a test with a few capitalizations in there same password again and now it's going to ask you to fill out a little bit of information like your full name and stuff like that this is actually optional you don't have to do this so I'm gonna put in my full name but for the others here I'm just going to leave blank and hit enter and then it's going to ask if that information is correct I'll just accept the default of yes and that created a new user for us now we want that new user to be able to run you know route commands so we want them to be able to use sudo so way the way we can do that then I'm going to clear the screen here the way we can do that is to simply say add user Cori MS and then just put sudo after that and that will it says here adding user Cori MS to the group sudo okay so now we have created a new user on this Linux server and now we can just log in as that user it's not good practice to log in as root because there's a lot of things that you can mess up that way so let's exit out of our server so I'm going to exit and now let's log back in but so I just hit up arrow there to log back into our server but instead of logging in as root I'm going to log in as Cori MS as the user that we just created so you want to fill in whatever user you created here so when we hit enter it's going to ask for that users password and that's what we put in whenever we created the user it looks like I mistyped that let me try one more time okay so now we can see that we logged in as our new user so I'm going to clear our screen here and we can see that we also have our host name there so now it's saying that that is the name of our server okay so now that we have a user created now we're going to want to setup SSH key based authentication so that we can login to our server without a password okay so at this point I know that you might be thinking to yourself like why do I have to do all of this stuff I just want to deploy my django application well the reason that we're doing all of this is because I want to show you what it's like to deploy a realworld application and to put the proper precautions in place on your server from scratch so that includes best practices like setting up SSH keys and firewalls and things like that you're going to want to do that on any realworld application that you deploy so I may as well include it in this tutorial instead of just showing you the bare minimum so right now the next best practice that we're going to put in place is using SSH key based authentication to login instead of passwords so by default we're using a password to login to our web server we instead want to use keybased authentication and that's more secure and more convenient because it uses keys that can't be brute force and also allows us to log in without putting in a password every single time and that's great for you know running remote scripts that connect to your web server or anything like that now I have a separate video on SSH key based authentication as well so I'm not gonna go into a lot of detail of these commands but we're going to run through all of them here anyway if you want to know more details as to what these commands are doing then you can watch that video and I'll put a link to that in the description section below now there's actually an easier way to do this by using a command called SSH copy ID but it's not available on all operating systems so instead we're just going to do this the slightly longer way okay so we are logged in to our webserver as our user that we just created and we are in the home folder if I do a PWD that will print the working directory and we are currently in our home folder here so in our home folder we're going to want to make a directory called dot SSH so I'm going to say m'kay der P that means it's going to make the entire tree of the directory and we want to create that in our home folder and that's what that tilde is so home folder and that is going to be dot SSH so let's make that and if you do an LS la then we can see that we do now have that SSH folder so now I'm going to clear my screen there and now we want to go back to our local machine so if you don't have two windows pulled up then you can simply exit out to get back to your local machine but I am just going to use this other window terminal here so here I'm on my local computer now again I'm doing this in bash in this tutorial but if you're using a program like putty on Windows that we talked about before then you'll have to do this differently to create and copy your SSH keys to your webserver so I found documentation and lenôtre putty users on how you can do this through putty and I'll put a link to that in the description section below as well so that you can see how to do that using that software but here in bash we can simply say SSH keygen and I'm going to do a B and then 409 6 that just makes it a little more secure now remember we're on our local machine here and now it says generating public private RSA key pair enter the file in which you wish to save that key and this is in my home folder on my local machine in an SH 8 SSH directory with an ID RSA file I'm just gonna leave that as the default there and it's saying that I have one that already exists so I'm just going to overwrite that with yes and enter a passphrase so you can also have a passphrase for this key as well I'm going to leave that empty but you can add one if you'd like to make it even more secure okay so what that did for us is it created two keys so we can see that it says your identification has been saved as ID RSA and then your public key has been saved as ID RSA dot pub now what we're going to want to do is put our public key on the server so that then we can log in without a password it's going to be able to recognize us because these two keys are going to match so let me go ahead and clear the screen here so now we need to get that public key to our server now if you're on Windows and you're not using bash then you can use you know FTP or FileZilla or something like that where you can drag and drop since we're using bash we can just simply use an SCP command so I'm going to say SCP and that was created in my home folder and this dot SSH directory and that was called our ID underscore RSA dot pub and we want to copy that file up to our server so now I'm gonna say clorium s but at this point you're gonna want to put in the user that you created but I'm using koream s and also now we want to put that IP address so like I said you're going to be using that IP address to your server a lot so it's probably best to write it down so I wrote mine down here mine is one night 8.5 8.11 9.1 8 3 so after we specify where we want to copy that public key to the server now we want to put an exact location in that server so I'm going to put a colon here and now we can specify the location on this server that we want to save that public key so that is within the home directory of this user here so a tilde there for the home directory and then dot ssh directory and let's save this as a file called authorized underscore keys now you don't need file extensions on Linux so we can just call that authorized keys and leave it at that so I'm going to run that and it's going to ask us for our password because we don't have this set up to use without a password yet okay and we can see that that was copied over so now I'm going to go back to our server here so now if I do an LS 1 our dot SSH directory then we can see that now we have that authorized key file ok so now just to finish this ssh stuff up we now need to update some permissions and again I can't go into deep detail as to what every command is doing in this video or else it would just run on for a long long time but basically what we're going to be doing here is setting the permissions for the SSH directory to where the owner of the directory has read write and execute permissions on that directory and the owner of the files in the directory will have read and write permissions on those files so to do that we can say sudo chmod and that's how we change permissions in Linux and we're gonna do 700 permissions and we're going to do 700 permissions on that SSH directory so I will run that and now it's going to ask for a sudo password so we can put in that password oh it looks like I may have mistyped and now I'm gonna run at that same command but I'm going to do 600 permissions and I'm gonna do a 600 permissions on all of the files within that directory so I'll run that and if you use sudo a good bit then you don't have to put in the password every time it'll remember it for some time now again I'm not going to go into a lot of detail here as to what these permissions mean but basically on Linux the way that the permissions work is this first number here is the permissions for the owner of either the directory or the file the second number here is the permissions for the group and the third one here is the permissions for everyone else so what we were saying here with seven is read write and execute and with six here it's just read and write and those are just zero permissions for everybody else okay so now we should be able to log in without a password so again I'm going to exit my machine just to test this so now we're back on our local machine so I'm gonna hit the up arrow to where we logged in SSH in as our user and I'm gonna hit enter and you can see that it just logged us in without a password there so our SSH keys are now working and that is also more secure than using a password as well okay so we're just about finished up with the SSH stuff but there's a couple more things that are best practices to change here before we finish this out so first of all we want to not allow root logins we just want to be able to log in as our users and we also don't want to allow password authentication because we just want to be able to log in with keybased authentication and somebody needs a password then it means that they don't have the keys that they need so let's just disallow that altogether and we can do that within the SSH config file so that is in the location and you have to use sudo here so we'll do sudo nano and this was within this et Cie directory SSH and that file is sshd underscore config so we need to put in our sudo password again so we're gonna change two things in this configuration file so first we are going to change the permit root login so if you scroll down a little bit then you can see that this is the first one uncommented here and right now it's set to yes we're gonna set that equal to no and let's scroll down a little further here and there should be a commented one that says password authentication so we can see here this one is commented out password authentication so let's uncomment that and it's already set to yes let's instead set that to no okay so now let's save that so in Nano you hit control X and then a Y to save and then enter just to keep the same file name and now we need to restart the SSH service so we can do that with sudo system CTL restart sshd so let's run that and that should have restarted our sh service okay so we're almost ready to push our django application there's just one more thing that we're gonna do and that is setting up a firewall but this is going to be very quick so first we need to install something so I'm going to clear my screen so let's say sudo aptget and we're going to install something called ufw and UFW stands for uncomplicated firewall this is a lot easier than using like IP tables or something like that okay so now we're just going to set up a few basic rules so first we're gonna say sudo ufw default and we're going to allow outgoing and hit enter there and now I'm gonna hit the up arrow and I'm gonna put in another rule and this is gonna be deny incoming let me spell that correctly deny incoming now configuring a default deny rule that denies all incoming traffic can lock you out of your server unless you explicitly allow SSH so be sure that you've configured these next allow rules for SSH and HTTP before applying our changes so to allow SSH you need to say sudo ufw allow and we can just allow SSH okay so that's good now I'm not gonna allow HTTP right now instead since we're going to test our site before we actually make it live I'm just going to allow a certain port now if you remember our Django development server runs on port 8000 so let's just allow that port for now and that's how we'll test it on this Linode server and if it's all working then we'll allow HTTP over port 80 so I'm going to allow 8000 there and we can see that these rules were updated and now we need to enable these we're getting a little far down here so let me clear my screen okay so now we need to enable these so I'll say sudo ufw I'm sorry enable not allow so sudo ufw enable I'll run that and it says command may disrupt existing SSH connections so hopefully you remembered to allow those SSH connections so I'm gonna say yes and now if we do a sudo UFW status then we can see everything that is being allowed here so port 22 is ssh and port 8000 here is what we're going to use to test our django application before we make it live on port 80 so i'm going to clear the screen okay so that's going to finish up all of the new linux server setup type of stuff so now we're ready to actually deploy our django application so first we want to put our application on the web server now there are multiple ways that you can get this application to your web server so if you have it checked into a git repository then you can simply use git to do a git clone to our server here you can use an FTP client like filezilla to push it to the server since we're already in the command line on our local machine we can just use the terminal command to do this so I'm gonna pull up my other terminal window here where I'm on my local machine and let's clear the screen now before you push your django application if you're using a virtual environment for your application then you're gonna want to create a requirements txt file that captures everything that we need to install for our django application to work now I was using a virtual environment for this series so I'm going to activate that and then create a requirements that txt file from that environment so I am going to activate my virtual environment so I'm going to say source and that environment lives on my desktop and this is called Django env and then I have to run I have to source the activate file so been activate so now we can see in our prompt here that that Django environment is now activated now if we want to see all of the dependencies that we have for our application then we can simply run pip freeze and if we run this then we can see it displays everything that we're using in this project so we have django Django Krispies forms pillow and some of these are dependencies on others so PI TZ is a dependency that Django uses and you can see that this also provides all of the versions the exact versions that we were using in development as well so saving all of these and then installing those on our server should make sure that you know no updates or anything are going to break our application because we're installing exactly what we were running in development now if you're on Windows then you can create a requirements txt file and then just paste all of this here into it but if you're on Mac or Linux or using bash then we can simply say let me clear my screen here we can simply say pip freeze and then we can feed that into a requirements that txt file and that'll work that will create a requirements that txt file with the contents with the output of that pip freeze command so I will run that and now we want to put this requirements txt file into our Django application so I am going to open up finder here and I have two windows opened up so this is my desktop here now let me open up my Django project so this is my Gengo project and this is my desktop I'm going to well I thought I created the requirements that txt file on my desktop but actually I'm within my home folder instead sorry about that so let me go to my home folder so here's that requirements txt file and I'm just going to drag this over and it dropped that into my Django project so now that requirements dot txt file is inside of our Django projects and I'm going to close down those Finder windows okay so now we need to put our application on to our web server now since I'm using bash I'm going to use the same SCP command that we used earlier to copy our SSH keys but if you're not using bash then again you can use something like FileZilla or get to get your project folder onto the server okay so to do this first I'm going to navigate to my desktop because that is where my Django project currently lives and that project is called at django underscore project so now I'm going to say SCP which will copy and we need a dash are here to do a recursive copy that means that we can copy a directory so now I will do ooh django underscore project that's what we want to copy to our server and we want to copy this to query ms at now you want to use whatever user you created there and now the IP address so again I wrote this down you want to use your IP address mine is one 98.5 8.11 9.1 8 3 and again to specify an exact location on that server we can put a colon and I'm just going to put this in the home folder on for this core EMS user so after the colon I'm just going to put a tilde and a forged slash and that should put it in the home folder on that server so I'm going to run that okay and that copied everything from our Django project and one to our server so now let me minimize our local machine here and go back to our server that we still have opened in this terminal window and now let me do an LS on the home directory to make sure that that copied over and we can see that it did we have our Django project here and if we do an LS on Django project then we can see that it has all of our applications so it's got the main Django project here the users the blog and our sequel Lite file everything okay so now that we have our Django application on our web server now we're ready to actually get it running on here so first of all let's create a virtual environment that is going to run our application so to do this we're going to need to install a couple of things so I'm going to say sudo aptget install and we want to install so first I'll install Python 3 pip now you want to do the Python 3 pip because if you don't put the 3 there it'll do Python version 2 so we'll do a sudo install of Python 3 pip now some of those installations can take a bit so instead of watching the entire installation throughout these videos I'm just fastforwarding to where these are complete so if you're following along and yours is still installing then you can just pause the video until yours is done as well okay so I'm going to clear my screen here and now let's install Python threes virtual environment so I'll say sudo aptget install and this is going to be Python 3 ve in V and I'll say yes there ok so once that is finished installing now I'm going to create a new virtual environment now you can create this virtual environment anywhere that you want but I'm going to put this inside of our Django project folder so to create a virtual environment we can simply say Python 3 M V E + V and I'm going to put this within our Django project folder and I'm going to call this virtual environment just simply V E + V so now if I do an LS on our Django project then we can see that we have a virtual environment right here so now let's activate that virtual environment so that we can install all of our dependencies so I'm going to CD into our Django project directory and within here I'm going to say source the env bin activate and that should activate our virtual environment we can see here at the beginning of our prompt we now it now says V in V so that's a good sign that our virtual environment is activated okay so now I'm going to install all of those dependencies from our requirements txt file and remember our requirements txt file we just put that here within our Django project so we can simply say pip install and if we do a our on pip install then it'll expect at requirements txt file so we can say requirements txt and run that and it's going to go through and install everything in that requirements file so it's going to install Django and PI T C and crispy forms and all of that now if you didn't create a requirements txt file then at that step you still want to create the virtual environment but you're just going to install those manually so you just install the version of Django that you used in the series and then pillow and crispy forms and all of the other packages that we use throughout the series okay so now that we have all of that installed let me clear my screen here now let's change some settings in Django so that we can test this on our lamode server so first I'm going to open up our settings dot py file now that is located so I'm going to do a sudo nano that is located inside of Django project settings dot py so I will run that and there are a couple of things that we need to change here so I'm gonna go down here a little bit and we should see something called a loud host now a loud host we need to put in our IP address of our server now if you have a domain name then you can use the domain name as well but for now we just have the IP address now this is going to be a string so I wrote my IP address down you would insert yours here but mine was one 98.5 8.11 9.1 8 3 now you have to have that in a loud host because for security reasons Jango isn't going to allow traffic anywhere that it doesn't recognize the host ok so now with that in place now let's scroll down towards the bottom here where we put ok so here at the bottom I want to scroll up just a little bit to our static URL so if you remember earlier in the series I said that static files were handled differently in development than they are in production so in production we have to put in a place where these static files are going to exist and that's going to be the static route so right above the static URL here I'm going to put static underscore route and I'm going to set this equal to that for me I'm just going to put OS dot path dot join and I'm going to put this in the base directory so base dur it's actually going to be very similar to our media folder here so it's going to be in the base directory of our project and instead of media we will do static so once we've made those changes to our settings let's save those so I'll hit control X and then Y to save and then enter to keep that same filename so now to get our static files working here on the server we need to run a command called collect static so I'm gonna say Python managed up py and that is collect static so if we run that then we can see that it says 120 static files copied to this static directory here within our Django project so if I do an LS now then we can see that now we have a static folder here within our Django project okay so now let's test this so let's run our development server but we're going to open it up on our lenôtre server here to where we can access it from the outside so I'm going to say Python manage py run server now don't hit enter yet we want to do the address of 0 0 0 and then port 8000 remember that we opened up port 8000 on this server sorry this is going to the next line here now but hopefully you can read that alright so if I hit enter there then it says that our server is running and since we specified this as 0 0 0 0 that should allow us to go to our IP address on port 8000 and see this development server running so I'm going to open Chrome back up and see if we can access this so my IP address was 1 98.5 8.1 19.1 8 3 and you go to port 8000 we can put in a colon and then 8000 so if I run that then we can see that our blog is now available through our browser so this should be accessible to anybody so you could send somebody your IP address and that port and they should be able to go to your blog and interact with it so let's test the site so if I go here to create a new user let's try to create a new user so I'll do test four and an email of test for at test comm a random password and let's sign up and we can see that our user has been created let's try to login with that user so test four and then the password that we used so we can see that we can login it gives us a default profile here where it has all the information that we entered so let's test that we can create a new post so test post test content if we post that then it looks like our post was created let's try to update a post so I will do test updated post and that seems to work let's try to delete a post and that seems to work as well let's try to update our profile picture you want to be sure that you test a good bit of functionality just to make sure that it all seems to be working properly now so let's update a profile picture and that seems to work as well let's test the logout okay and the logout works and lastly let's test the admin page so I'm going to go to forge slash admin and then put in the user I created with admin access is Cori MS and I will log in here okay and it looks like our admin page works as well so now I'm going to log out of there okay so it seems like most of our functionality is working on our server now so that is a really good sign now one bit of functionality that isn't going to work yet is our forgot password functionality so if I go to forgot password and try to reset my password then it's going to give me an error and the reason is is because we haven't copied over our environment variables from our local machine that contain our email service username and password so that's one bit of functionality that's not going to work right now but we will get that set up here in just a bit okay so our site is working but you don't want to actually leave it like this so I'm going to go back to our terminal here now we don't actually want to run this using the Django server like we've done here this was just for testing that everything worked so far but now let's kill that server that we were just running and now we want to run a server that's more reliable so you know something like Apache or nginx or something like that now in this video I'm going to use Apache but there's different options available to you and let me actually minimize our browser there okay okay so there are a couple of things that we need to install here first we need to install Apache which is going to be our webserver and then we're gonna install something called a mod whiskey now whiskey which is WSGI stands for web service gateway interface and that's what allows our web server in this case Apache it allows our web server to talk to Python and to talk to our web application which in this case is Django so we need to install and configure both of those so first I'll install Apache so I'll say actually let me go back to my root directory here by typing CD so that we have some more space here so now I'm going to say sudo aptget install and this is going to be Apache too so let's run that okay and once that's installed I'm gonna clear my screen here and now let's install mod whiskey so to do that that is sudo aptget install and this is Lib Apache mod whiskey pi/3 I always have to look that up I can never remember these long package names so I think that should work let me run that and hit yes okay so it looks like that was installed successfully so now we need to configure our Apache web server so I'm going to clear my screen so now let's CD into a directory here in etc' Apache sites available and this directory here is where the Apache configuration files live so if I do an LS in this directory here then we can see that there are some default configuration files here now I'm going to use one of these configuration files as the starting point for our projects configuration so I'm just going to copy one of these so I'll say sudo CP and I will copy that first one so 0 0 0 default and I will copy that into a file called Django underscore project.com and again sorry for the text scrolling on to multiple lines here I know that that can make it a little bit more difficult to read but I have to make a tradeoff between having the text large enough to where you can read it but you know sometimes that makes it harder to read when it goes onto multiple lines like that ok so now we've created this Django project.com configuration file that is a copy of the default configuration file so now let's edit it to where it meets the needs for our project so I'm going to do sudo nano and change that Django project comm file ok so what we have here is a default configuration file for Apache now where it says virtual host 80 right here this 80 it means port 80 so this is what's going to show up on HT P port so whenever we go to our IP address in the browser it's going to follow these rules so I'm gonna scroll down here towards the bottom all of this stuff is just default standard stuff so right here before the closing virtual host tag I'm gonna add in a few of our own rules so first of all we're gonna use an alias to tell Apache to map requests starting with static to our apps static folder and remember in our project settings we put this in our projects base directory so to do this I'm going to say alias and we want to alias anything that references static and we want that to go to our projects static directory now on my machine this is located in my home directory and my user is corey MS you're going to want to put your user there my project is called django underscore project you're going to put a want to put your project there and I put that static folder in my Django project directory so that is where mine is located you want to put where you put your static directory there so now we want to give some permissions here so we're gonna say for that directory sorry that needs to be capitalized so we'll say directory and the directory is going to be the same thing that we put here so I will just try to copy that and paste it and within that directory tag we are going to say require all granted and now we can close out the directory tag so we will put a forward slash there and directory and now we want to create another one of these for the media folder as well so I'm just going to copy that big whole section there and paste that in and up here where we had static we want to change these to be media so I will change this one here to be media and then here at the end I will change that to be media as well and one more place right there okay and now that we have the and media directories taken care of next we need to grant access to the WSGI dot pi file within our project this ensures that Apache can access our whiskey dot PI file which is how our app is actually going to talk to our webserver so to do this I'm going to scroll down here just a little bit so to do this I am going to copy up until this point of this line here and paste this in but for the directory here I also want to go one more level deep and I want to go into the Django project directory within our Django project and that's because that's where that whiskey dot 5 PI file lives so now within there and I'm just going to go ahead and close this off right now so I don't forget later so within here we want to create some file tags so I will say files and that is WSGI pi and i'll also close off that files tag there as well and within here we also want to say require all granted ok so we're just about finished up here just a couple of more things to add so next we're going to add the part that actually handles the WSGI part so we're going to use the demon mode for this and this is recommended in Django's official documentation so to do this let me scroll down here just a little bit so we can see this a little better so to do this I'm going to put in a tag here called WSGI script alias and then we are just going to put a forward slash and then we will do a ford slash home core EMS you're going to want to put your user in there Jango underscore project ford slash Jango underscore project forge last WSGI dot pi so the first bit here is the base URL path where we want to serve our application and in this case it indicates the root URL so basically that means going to the base of our IP address without any extra routes will take us to our django application and the second part here is the full path to that WSGI dot PI file so once we have that done now we can specify the daemon process so I'll say WSGI da e mo n is how you spell that daemon process and now we can just call this whatever we want it's just going to be the process so we'll just call it Django app and now I can say Python path open I don't want any spaces there so Python path equal to this is going to be the path to our project directory so on my machine that's ford slash home forge / square EMS forge / Django project again you put in the path to your Django project there and now we also need to specify Python home and for python home I'm going to say that equals and this is going to be the location to our virtual environment so I'm in on my machine that is fork slash home forge / core EMS forge / django underscore project forge / ve in V now I know that this is a lot of typing and it might be easy to mess something up here or miss type something so I'm going to take this configuration file once we're done with this video and I'll put this in my github page so that you can compare it to yours to see you know if you've made any mistakes ok so with that said we only have one more line here to finish up this configuration so this is going to be WSGI process group and we want this process group to be equal to this process here that we specified in this daemon process so I'm just going to type in the same thing there so Django app is what we name that process ok so hopefully we didn't make any typos there and got everything correct so I will save this file so within Nano it's ctrl X a Y for yes to save and then just hit enter to keep the same my own name so now I am going to clear my screen and I'm going to see the back to my home directory here so that we have a little bit more typing room so now let's enable that site through Apache so to do that we can say sudo and this is a to e in site to enable the site so that's Apache to enable site and then we want to specify that Django project and I will hit enter there and you can see that it's telling us that to activate the new configuration we need to restart Apache we'll do that in just a minute now I'm also going to disable the default site so I'm gonna say sue do a two for Apache to this for disabled and then site and we will disable that zerozerozero default dot kampf okay so now that default site is disabled and our Django project is enabled okay so now let's finish up with doing some file permissions here so there are still a couple of things that we need to change so right now we have to give Apache access to things like our database because we are right now we're using sequel Lite in a future video we're going to use Postgres but right now we're still using sequel Lite so Apache has to be able to read and write from that sequel Lite file and the same goes for our media folder so if somebody is uploading a picture then Django has to be able to write to that media folder so let's do a few different permission updates here so I'm gonna say sudo CH owned which changes the owner of a directory or a file and I'm gonna do a colon WWD des that is the Apache user there and we want to change the permission and Django project DB SQL Lite 3 is the name of our database file so what this is going to do is it's going to make Apache the group on that file so if I run that then now Apache is the group owner of that file and now I'm going to change the permissions so I'll say sudo chmod and the permissions that we want here are 6 6 4 so again that's a 6 for the owner a 6 for the group and a 4 for everybody else a 4 is read permissions and I want to give permissions to Django project DB SQL Lite 3 okay so I also want that WWD group to own the Django project folder itself as well so I'm gonna say sudo CH own and we will put in a colon WWD de and we will change the ownership of the Django project itself so I will run that now if we do an LS la then we'll be able to see these permissions so if we see Django project here we can see that now quarry ms is the owner but it is now w WD is the group owner so that's what that CH own command is doing ok so now I'm going to clear the screen here now let's do those same things for the media folder so I'm gonna say sudo CH o W in and now we're going to do a dash R for recursive and again we're gonna do a colon WWD des and we want to give permissions here on the media folder so I'll say for Django project forge / media so I'll run that and that will allow Apache to actually write uploaded media to that media folder and now let's change the permissions here so I'm gonna do a sudo chmod R and we will do a 7 7 5 and we will do Django project media again and run that okay so I know that this has been a long video so far but we are just about finished up with the final deployment of our Django application there are just some final changes that we need to make before we go live with our website so the first thing is that we need to move sensitive information to a config file now I was using environment variables in the development of this application but in Apache environment variables can be a little tricky to work with and you have to change the WSGI Python file and things like that since this video has already been long enough and we've done so much configurations I think it would be a lot easier to just do a config file for the sensitive information instead of doing environment variables so the sensitive information that I'm talking about is going to be like our secret key for our application and our email username and our email password that we use to reset our password in the application and in the future this is also where we are going to add our database username and database password and things like that when we use Postgres so I'm just going to create a config dot JSON file on our system that holds that secret information so I'm gonna put this in so I'll do a pseudo touch which will create a file and I'm gonna put this in the e.t.c directory and I'm just going to call this config dot JSON now if you have you know multiple applications on the same server then you can have the name of your application config dot JSON or something like that to differentiate between their different applications so I'm going to run that to create that file and now I'm going to grab our secret key from our application so to get the secret key I'm gonna say sudo nano and that is within Django project Django project settings dot py if I run that and scroll down just a little bit here then it is close to the top of our settings dot py file and you can see here it says security warning keep the secret key used in production secret so if you're using something like git then you don't want to you know have this pushed up to github or something like that you want to either use an environment variable or load it in from a cake fig file like we're going to do here so I'm going to copy this secret key copy and I will now erase this here and we will add this back in in just a second but for now I'm going to save that settings file and now let's open up that config dot JSON file that we just created so I'm gonna say sudo nano and we put that in et Cie config JSON now this is empty right now but to create this JSON file I'm going to put in opening and closing braces there and now I will put in a key for the secret key and I will give that a value and this is going to be within quotes here now we're going to paste in that secret key that we copied from before now we're also going to put other secret or sensitive information in here as well so our email user that we use to send emails through our email service we can put that email address in here and we also need our email password so I'll say email underscore pass is what we called it in our application and I will put that in here as well now you're gonna want to put your email username and your email password that we used in this series now I'm gonna use my own I'm not gonna show you my email username and password here for obvious reasons I don't want you to be able to log into my email but so I'm gonna exit out of this file now but before I actually run this live I'll fill this in off of the recording so that we can see that it works properly so now I'm going to save this file so ctrl X Y to save and then enter and now we want to update our settings not py file and pass in the values from that config file so I'm going to run that same command that we ran earlier sudo nano and we want to run Nano on our settings dot py file so I will run that now here at the top of our settings dot py file I'm just going to import JSON now I used JSON for my configuration but if you're more comfortable using gamal or something like that then you can definitely use that as well so now here at the top I'm just going to load in this config file so I'm going to say with open and we are going to open that file so that was in /e TC config dot JSON and we will open that as config underscore file and within here I will say config is equal to json dot load and we will load in that config file make sure that i spell that correctly we will load in that config file and I think that Nano is putting in more spaces here than what I'm used to when I hit tab so instead I'm just gonna use spaces so I'll put in four spaces there instead okay so with that config file loaded these should be the last changes that we need to make in our settings dot py file so here for our secret key remember we load it in that JSON file and JSON whenever you load something in and use JSON load it loads that in as a dictionary so now our config variable should be a dictionary with all of our sensitive information so for our secret key here I'll just say config and access that secret key key of that config dictionary and that config variable that we are using there let me show you just one more time that is what we set right here that is that variable that is the JSON that we loaded in so let me go back down to our secret key and now that we've set the secret key to that sensitive information now we also need to set debug equal to false you don't want debug equal to true on your production machine because anytime there's an error it's going to give way too much information to people and it could you know expose other flaws in your system to people who could hack into your system or something like that so you always want debug turned to false in production and you can see that Django says that here they say security warning don't run with debug turned on in production ok and we are almost done let me scroll down to the very bottom here where I set my email username and email password information so that's at the very bottom of the settings that py file and you can see here we were using environment variables that's what we used earlier in the series whenever we added this functionality but now I'm using that config file instead so instead of OS dot environment I'm just gonna say config dot get and we will keep that as email user and instead of OS dot environed I get that is config dot git and now I will save our settings not py file by hitting ctrl X Y to save and enter ok so now that we've updated our settings not py file let me clear my screen here now at this point I'm going to pause the video and I'm going to go back into my configuration JSON file and I'm going to put in my email username and my email password and then I'm going to start the video back up so that whenever we actually test this in production and we can see that the emails actually work when we try to reset our password so I'm going to go ahead and do that now ok so I went back into my configuration file and I put in my information for my email username and password you'll have to go in and do your information there but now that should be it like we should be ready to go it should be fully deployed at this point so now all we need to do is a couple more commands here so we want to disallow the port 8000 that we were using to test earlier with our firewall so what I'm going to do is a sudo ufw delete that allow so delete allow on port 8000 and so we can see that the rule was deleted and now we want to allow HTTP traffic so I'm gonna say sudo ufw allow HTTP forge slash TCP so I'll run that ok and with that done now we can restart our Apache server and it should be good to go so I will say sudo service Apache Apache to restart so let's restart that and I'll clear my screen okay so at this point if we did everything correctly then our site should now be live so if we pull back up our browser and here before we were at port 8000 if I try to reload that page at port 8000 now it shouldn't give me anything so we can see up here it's spinning there's stuff on the screen here but that's just from before if we let this wait long enough it'll say the site can't be reached but if we take off that port 8000 hopefully we didn't have any typos and our configurations or settings and it should work okay so we can see that this looks promising we kind of have our website here so now let's test the functionality so let's try to first create a user so I'm going to create a user called deployed user and I'll do an email at deployed user at test com put in a sample password here and confirm that so sign up okay so we got an error here when we tried to create that user so that means that somewhere along the lines we either forgot a step or we made a typo somewhere now if debug was set to true in our settings then there would be a lot more information here as to what exactly went wrong but since debug is set to false we can see that this is a very vague err it just says server error 500 now like I said before you never want debug set to true when you're working with a live website because if you have an error like this you don't want just any random person to see all that detailed error information because it can give a lot of information about your backend server and leave you more vulnerable to future attacks but if we have an error like this then how do we go about debugging this well if you're on a live server or working on a live website then I would recommend setting up a test server and testing everything there where you can set debug equal to true that's not open to the public now since our website here isn't you know available for everyone just yet and we don't even have a domain name I'm just going to go back to our site and set debug equal to true so that we can see what this is doing but if I was actually working on a real website then I would probably setup a completely different test server or maybe just open this up on a specific port and then set debug equal to true but since this isn't completely live yet then it's okay to do it this way so I'm going to say sudo nano and we will open back up our settings here so settings dot py and I will scroll down here and set debug equal to true that has to be capitalized there and I will save that file and now let's restart our Apache server so to do that we can say sudo service Apache to restart so now if we go back to our page and try this again so I'll fill out everything that I just did so deployed user deployed user at test comm and then put in a password so let's sign up and now we have more detailed error information so we can see here that it says attempt to write read only database so that leads me to believe that it is a permissions err with our database so if we go back to our server then let me clear this out if I do an LS la then we can see the permissions here so I'm going to do that on our project so our DB dot sequel Lite this is our database file so this is the apache group here and the group can write to that a base so that doesn't seem to be the problem if I do an LS LA and my current directory then we can see that we have the apache group owns this directory but it doesn't have write permissions so the parent directory also has to have write permissions for that database so that is most likely the problem there so if instead I say sudo chmod 775 on Django project remember this is the user here this is the group so this will give the group read write and execute permissions there with that seven in the second spot so if I run that and now again let me restart the Apache server and now let's try testing our website again so hopefully this will work and we don't have to make any more changes so deployed user employed user at test comm fill out password there and sign up okay and it looks like that worked ok so now let's also test all of the other functionality as well so let's log in with that deployed user that we just created okay so we can log in so that's good we can go to our profile and let's try to create a post so I'll say test post test post ok so that works let's try to update a post test update post that works let's delete one that works as well let's go to our profile and try to upload a new picture ok so that is working for us let's try to log out ok so that is working lastly let's try the admin page let's see query MS is my admin user okay so my admin page is working as well so lastly I'm going to go back to the site and I'm going to logout now the one thing that wasn't working before was the password reset but like I said if you went in and you put your email username and password into that configuration file that we loaded into our settings then this should now work so I'm going to try this out I'm going to send a reset password to my email address and we can see here that it looks like it worked it said an email has been sent with instructions to reset your password and I actually have my email opened up in another browser over here if I reload my email then we can see that we have an email that says password reset on and right now we just have the IP address if we had a domain name here then that would be the domain name so let's click on that password reset link and we can see that that looks like it works so I'm going to put in a new password here and then try to sign in with that new password so that was core EMS as the username and then I'll put in a new password okay so all of that functionality seems to be working so now we have a fully deployed fully functional Django application that we deployed to a Linux server now if you are deploying your own Django application then I would also recommend going to Google and typing in Django deployment checklist and the first result should be from their website they have a deployment checklist on their web site here of things that you can go down through and check so if we just kind of scroll through here then we can see a couple of things so like critical settings secret key the secret key should be either an environment variable or from a file and we put it in a file so that's good you should have you should never enable debug and production we have had that turned off actually that's good that I thought of that because we actually need to go back and disable that so I won't do it right now just to wind this video down but definitely go back in and set debug equal to false once you're done debugging your application and you can see that there's just all kinds of different checks that we can make so here's the aloud host there's some stuff about caches and databases so it says database connection parameters should be exactly like your secret key either put them in environment variables or in a configuration file just like we did so things like that this checklist will give you a good bit of things to go through and check and make sure that you did everything properly for deploying your application to production okay so let me go back to the blog here and go back here to the main page okay so now we've deployed our django application to our server and it's accessible through the IP address of our server now there's still a lot more that we could do with this in the future if you're interested so right now we only have an IP address but if you want then I can also walk through the process of buying a domain name and how to get the domain name to go to this server that we've set up we could also see how to add SSL certificates so that we can have an HTTP domain that's actually something that I still need to do for my personal website as well now after I record this video I'm going to delete the lenôtre server so if you go to this IP address that I have here then you probably won't see this website that we just deployed and that is why it's because I deleted it I'll spin up another server with these same parameters whenever we're ready to record future videos on this blog actually let me go ahead and delete that server right now that way you can see how to do it if you were following along and using the node as well and you want to delete the server also so that you're not charged for it so what we can do is I'll just log in here using my account it logged me out because of how much time we were away now here is the server that we created in this tutorial this django server now to delete this it's just as simple as clicking on your linen and going to settings and then in settings we can come down here to delete the node and if we click delete now it gives you a warning here that deleting a Linode server will result in permanent data loss so everything that we did to our server is going to be lost so I will click delete and then it'll ask us if we're sure click delete and that server is gone so it's no longer charging us money for that Linode server now like I said at the beginning of this video one owed was actually kind enough to sponsor this tutorial and I've used the node for many years and have recommended them to people long before I ever had any sponsors so if you get a chance I would highly recommend giving them a shot so like we saw in this video they have this really nice new cloud manager that makes spinning up a server fast and easy you can also choose from available images or you can even upload your own custom image if that's something that you'd like to do and if you're doing something that is fairly common then they even have stacks scripts that allow you to spin up a server with all of the relevant software ready to go so for example if you're making a wordpress site or something like that then you can simply choose their WordPress stack script that spins up a server with WordPress ready to go so if you were to do something like that you would come in here and go to create one node we could go to create from stack script go to the node stats stack scripts and we can see that they have a WordPress server here that would already have all of that ready to go as soon as it spins up so it's things like that that make this a really nice platform to work on they also have nine data centers around the world so far and they have two more set to open in 2019 so no matter where you are you should be able to spin up a server close to your audience so if you want to check them out then feel free to use my referral link in the description section below and you can get twenty dollars of credit applied to your account to try them out okay so with that said that is going to do it for this video hopefully now you have a pretty good idea for how you can deploy a django application to your own linux server like I said before this option takes a little more effort than some other options out there but having your own private server gives you so much more flexibility and room for growth with your application doing it this way also provides terrific knowledge for learning more about back in Linux systems which is really sought after with a lot of people in the industry and it's one of those things where if you have it on a job application it's really going to look good but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
