With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're going to be using
00:02 - python and the youtube api to access a
00:05 - user's account
00:06 - so so far we've only been using public
00:09 - information on youtube
00:10 - by accessing public playlists public
00:12 - videos
00:13 - and things like that but you might want
00:15 - to access some private user data such as
00:18 - a user's likes or comments
00:20 - or even allow a user to modify their
00:23 - account in some way through python
00:25 - such as allowing them to upload a video
00:27 - like videos
00:29 - comment or whatever else we're able to
00:31 - do through the api
00:32 - so to do this we're going to need to use
00:35 - a better authentication protocol than
00:36 - the api keys that we've currently been
00:38 - using
00:39 - so we're going to need to update our
00:41 - scripts to use oauth instead
00:43 - so oauth 2 will allow you or your users
00:46 - to give our scripts
00:47 - and applications limited access to
00:50 - third-party accounts
00:52 - and that third-party account or
00:54 - application in this video
00:56 - is going to be youtube you've likely
00:58 - seen something
00:59 - like this in applications before so for
01:01 - example if you've used instagram
01:04 - then you probably have noticed that
01:05 - instagram also gives you the option
01:08 - to automatically post photos to twitter
01:11 - or facebook now if you did choose to
01:13 - post to twitter
01:14 - then instagram would open up a page to
01:17 - log
01:17 - into your twitter account and it would
01:19 - say something like
01:20 - you know instagram would like to be able
01:22 - to post a tweet on your behalf
01:24 - please log in to allow instagram access
01:27 - to your twitter account
01:28 - that is basically what oauth is so for
01:31 - example i'm currently using this
01:34 - on youtube to grab a list of my youtube
01:36 - members
01:37 - so that i can add them and my patrons to
01:40 - credits at the end of my videos
01:42 - so in this video i'm going to give my
01:44 - python script
01:45 - access to my youtube channel using oauth
01:48 - and
01:49 - then i'll just do something simple like
01:51 - list my private or
01:52 - unlisted videos i think my latest
01:55 - unlisted video is one
01:57 - of me as like a kid back in 1992 or
02:00 - something like that
02:01 - so if you stick around to the end of the
02:02 - video then you'll get to see that
02:05 - now if you haven't watched my video on
02:06 - getting started with
02:08 - the youtube api using python then
02:11 - definitely watch that video first
02:12 - because that's where i show the basics
02:14 - of the youtube api
02:15 - and how to connect different services
02:17 - and i'm using the script that we ended
02:19 - with in that video
02:20 - as a starting point so with that said
02:23 - let's go ahead and get started
02:24 - so like i said i'm just going to do a
02:26 - very simple example where i use oauth to
02:29 - access my uploaded videos but first
02:32 - let's see what this looks out
02:33 - looks like without oauth so that you can
02:36 - see what it looks like just using an api
02:38 - key
02:39 - so to grab my uploaded videos
02:42 - one way that we can do this is first
02:45 - instead of accessing my channel
02:47 - statistics like we did in that getting
02:49 - started video
02:50 - i'm instead going to access content
02:52 - details and this will print out
02:55 - some details from my channel and if i
02:57 - run this
02:58 - then there's one part down here that
03:01 - says related playlists
03:03 - now if we look at our related playlists
03:06 - we can see that we have one here called
03:08 - uploads so that is a playlist of all of
03:10 - my uploads and this is that playlist id
03:14 - so i'm going to grab that playlist id
03:17 - and now let's print out all of my
03:21 - videos from that playlist or actually
03:24 - it'll just be the first five videos of
03:25 - the playlist
03:27 - so in order to do this instead of
03:29 - accessing the channels resourced here
03:31 - i'm instead going to
03:32 - change this to playlist items
03:36 - and i'm still going to list these now
03:39 - let's grab the
03:40 - status of these playlist items
03:43 - and i can just remove this four username
03:45 - here
03:46 - and instead i'm going to type in
03:49 - playlist
03:50 - id and paste that playlist id that we
03:53 - got before
03:54 - now that d and id is lowercase
03:57 - sometimes i've accidentally made that
03:59 - uppercase instead
04:01 - so now that we have this in place let's
04:03 - go ahead and run our code
04:05 - and now we can see that we get back some
04:07 - information here
04:09 - for the first five videos of this
04:11 - playlist and we can
04:12 - take a look at the status here we can
04:15 - see that uh the privacy status of these
04:17 - videos are
04:18 - public uh so those are these are my
04:20 - latest public videos
04:21 - uh but one thing i wanted to show here
04:23 - was down here at the bottom where it
04:24 - says page info
04:26 - total results is 229 so we can see that
04:29 - using an api key
04:31 - that just gives us public data and it's
04:33 - telling me that i have 229 video uploads
04:36 - uh when i release this video this will
04:38 - be it'll be 230 public videos
04:42 - but these are all public if i wanted to
04:44 - also view my private or unlisted videos
04:47 - then i would need to give my script
04:49 - permission to view my
04:50 - youtube accounts data so to do this
04:54 - we're going to need to create an oauth
04:55 - client
04:57 - so in order to create this we're going
05:00 - to open up our google developers console
05:02 - that we've used in previous videos
05:04 - and i already have mine open here in the
05:06 - browser so to create a new oauth client
05:09 - i am just going to go here to
05:11 - credentials
05:13 - and now now i don't have any api keys
05:17 - here
05:18 - that's because i created a new project
05:20 - so that we could see what this looks
05:21 - like
05:21 - from scratch what i was using for that
05:24 - first example was an api key from a
05:26 - different project
05:28 - so if you're confused about that then
05:29 - that's why so in order to create an
05:32 - oauth client we can click up here on
05:34 - create credentials
05:35 - now instead of an api key we're going to
05:37 - create an
05:38 - oauth client id now if this is the first
05:41 - oauth client
05:42 - id that you've created then you're going
05:45 - to have this screen here that says that
05:46 - you need to configure
05:48 - a consent screen now if uh
05:51 - you've already walked through this once
05:53 - then you won't see this
05:54 - but if it's the first time then let's go
05:56 - ahead and walk through this
05:58 - so first we have to configure a user
06:01 - type
06:02 - so i'm going to choose external here
06:04 - because that is available to
06:05 - any user with a google account um
06:08 - internal
06:08 - is for like g suite users and things
06:11 - like that for
06:12 - internal applications um but most of the
06:15 - time we're going to be
06:16 - uh making external user types here uh
06:20 - so let me click click on create and
06:23 - now i got an error here i've been having
06:25 - some uh issues with
06:27 - their site today i don't hopefully that
06:29 - won't affect
06:30 - what we're doing here but now all i'm
06:33 - going to do on this oauth consent screen
06:36 - is i'm just going to put in an
06:37 - application name and then we'll take
06:39 - care of everything else later like the
06:41 - scopes and things like that
06:42 - so i'm just going to set my application
06:44 - name to youtube api
06:46 - so now down here at the bottom i will
06:49 - click on
06:50 - save and once that is saved
06:54 - then we should be able to go back here
06:56 - to our
06:57 - credentials and now let's try this again
07:00 - where we
07:00 - click on create credentials and then
07:03 - oauth client id
07:05 - and now that we've set up that consent
07:06 - screen now we can move forward
07:08 - with creating our client id now when you
07:11 - get to this screen here
07:12 - it's going to ask you what type of
07:14 - application that we'll be using for our
07:16 - oauth
07:17 - keys now so far in this series of videos
07:20 - i've only been using python scripts but
07:23 - a simple
07:24 - script isn't listed here in any of the
07:27 - application types
07:29 - now there are several ways that we could
07:30 - set this up but what i'm going to do is
07:32 - i'm going to choose
07:33 - web application now that might be
07:36 - confusing
07:36 - but basically what this means is that
07:38 - i'm going to run a local web server
07:41 - that allows me to log into my google
07:43 - account and give my script access to my
07:46 - private youtube data
07:47 - now this doesn't have to be a local web
07:50 - server if you created a web application
07:52 - that allowed people to log in to their
07:54 - google accounts
07:55 - then you would select this option as
07:57 - well and perhaps in the future i can
07:59 - show
07:59 - how to do this with flask or django so
08:02 - that we could set up that functionality
08:04 - on
08:04 - an actual real website now if running a
08:07 - local web server
08:08 - sounds confusing then don't worry
08:11 - because we're going to be using a google
08:12 - library that makes all of this
08:14 - very easy for us to use okay so now that
08:17 - i've selected this application type
08:19 - now i'm just going to name this so i'll
08:20 - just name this
08:22 - youtube api app and
08:26 - now down here we do need to select a
08:29 - redirect
08:30 - uri and i'll explain more about this in
08:33 - just a minute
08:34 - now since i'm going to be doing this
08:36 - locally i can just do http
08:39 - colon forward slash forward slash i'll
08:41 - do localhost
08:42 - and let's run this on port 8080
08:46 - okay and again i'll explain more about
08:48 - this in just a bit
08:49 - so now let's go ahead and create our
08:52 - application here okay
08:54 - and once we create those oauth
08:55 - credentials it's going to
08:57 - display our client id and our client
08:59 - secret
09:00 - now unlike our api key i'm not going to
09:03 - copy and paste these into my script
09:06 - instead i'm going to use the option um
09:09 - that google gives us to download all
09:11 - these credentials to a single file and
09:13 - that's going to make
09:14 - things a lot easier for us to get
09:17 - authorized later on
09:18 - so i'm just going to say ok here and now
09:21 - here with my client ids
09:23 - i'm going to click this download button
09:25 - here and it's going to download
09:27 - all of this to a clientsecret.json file
09:30 - now this file is going to have a big
09:33 - long
09:34 - random name but i'm going to go to our
09:36 - downloads folder here
09:38 - and i'm just going to let me make this a
09:40 - little larger here
09:41 - so we can see i'm just going to rename
09:43 - this to
09:45 - client secrets dot json
09:48 - instead of this big long random name
09:51 - okay so client secrets dot json and now
09:54 - i'm going to move this json
09:56 - uh file into the directory of our script
09:59 - so i also have that open here in my
10:03 - finder so i'm going to drag this client
10:06 - secrets.json
10:07 - into the same directory as my python
10:10 - script
10:10 - so now i can close these windows down
10:13 - okay so now that we have those client
10:15 - secrets now we can change our script so
10:18 - that this is working with oauth instead
10:20 - of just our api key
10:22 - but we're going to make this process a
10:24 - bit easier by installing some google
10:26 - authorization libraries
10:28 - that will handle a lot of the
10:29 - authorization for us
10:31 - this will also allow or this will also
10:33 - handle the process of running a local
10:35 - web server
10:36 - and everything like that so it makes the
10:38 - entire process a lot easier
10:40 - and we can install these just by using
10:42 - pip so
10:44 - i'm going to open my terminal here
10:47 - and now let's install those
10:51 - libraries so this is pip install and one
10:54 - is called
10:54 - google auth so let's run that
10:58 - and now let's also pip install google
11:01 - auth
11:02 - dash uh oauth lib so let's install this
11:06 - as well
11:07 - okay okay so now that we have those
11:09 - libraries installed
11:11 - now let's modify our script so that we
11:13 - can authenticate with oauth
11:15 - okay so first of all i'm going to import
11:17 - the authorization classes
11:20 - and i'll need these from the libraries
11:22 - that we just installed
11:24 - so first i'm going to say from google
11:27 - underscore auth underscore oauth lib
11:32 - dot flow i want to import
11:36 - installed app flow and i'm also going to
11:40 - import this request
11:42 - class that it uses to make web requests
11:45 - so i'm going to say from
11:52 - google.auth.transport.request
11:54 - import and this is called
11:58 - request okay and now we're not going to
12:00 - be using this api key
12:02 - anymore so instead let's load in all of
12:05 - our oauth credentials
12:06 - from that client secrets json file that
12:09 - we move to the same directory as our
12:11 - script
12:12 - so to do this this is going to be a flow
12:15 - object so we are going to take this
12:17 - installed app
12:18 - flow class that we just imported
12:22 - and this has a method called from
12:26 - underscore clients underscore
12:29 - secrets underscore file
12:32 - and this file was called
12:36 - client oops let me spell this correctly
12:40 - clientsecrets.json okay so this line
12:43 - here is going to load in all of our
12:45 - credentials
12:46 - now one more thing that we need to add
12:48 - in when working with oauth
12:49 - is the scope of the information our
12:52 - script can access
12:53 - and when we set the scope then when
12:57 - i allow my script to access my youtube
12:59 - account it will tell me
13:01 - something like you know this script
13:02 - would like to view your youtube account
13:05 - and if we actually wanted to make
13:06 - modifications to our account or
13:08 - view different information then we would
13:11 - need to tell our script exactly what
13:13 - scopes our script will be accessing
13:15 - so that it tells the end user exactly
13:17 - what they're agreeing to
13:19 - when they allow our script access to
13:22 - their account
13:22 - so if you want to view all of the scopes
13:24 - then i have this page open
13:26 - here in my browser as well and it breaks
13:29 - down
13:29 - a little bit more what these scopes do
13:32 - so we can see here that this scope
13:33 - allows us to manage our youtube account
13:36 - um this one is to see all active channel
13:39 - members that's one that i'm using for my
13:40 - private script
13:42 - uh and then there are a few other ones
13:44 - here
13:45 - now the one that we're going to be using
13:46 - is this youtube read only because we're
13:49 - not going to be making any changes
13:51 - to our script we're just going to be
13:52 - viewing information about my account
13:55 - but based on what you're doing with your
13:56 - application
13:58 - you're going to have to choose different
13:59 - scopes so i'm going to copy this url
14:03 - here and now uh let's go back to our
14:07 - script
14:08 - and now we need to also add the our
14:10 - scopes into this
14:12 - installed app flow here so i'm just
14:15 - going to go the next
14:16 - line and i'm going to say that the
14:18 - scopes are
14:19 - equal to and this will be a list
14:22 - but the list is just going to contain
14:24 - that read-only scope now if you wanted
14:26 - to add additional scopes here then this
14:28 - is where you would do it
14:29 - okay so that should be everything that
14:31 - we need in terms of our credentials
14:33 - but now we need to run our local web
14:35 - server so that we can log into our
14:37 - google account
14:38 - and allow our script access to our data
14:41 - and
14:42 - this flow object that we just created
14:44 - will do all of this for us
14:46 - so to do this we can just go
14:49 - down another line here and i'm going to
14:51 - use this flow
14:52 - object that we just created and say flow
14:55 - dot
14:56 - run underscore local underscore
14:59 - server so run local server and also
15:03 - if you remember whenever i specified
15:05 - that
15:06 - the url for our redirect uris i said
15:10 - that it was
15:10 - localhost on port 8080 so
15:14 - i'm going to say port 8080 here on my
15:16 - local server
15:17 - now i'm also going to add one more
15:19 - argument here
15:20 - now that this might actually not be
15:22 - necessary
15:23 - but i ran into an issue where i wasn't
15:25 - getting all of the tokens back that i
15:27 - expected
15:28 - and i found this solution online
15:31 - basically
15:32 - i wasn't getting a refresh token and
15:34 - i'll
15:35 - talk more about those in a minute but i
15:38 - think what was happening is that i was
15:40 - getting a refresh token
15:42 - uh for the first time i was running it
15:44 - but since i was uh
15:45 - testing um and running it multiple times
15:48 - it wasn't giving me
15:49 - a re or refresh token every single time
15:52 - so the solution that i found online for
15:54 - this was to pass in a prompt of
15:57 - consent and that should uh make this
16:00 - give me a refresh token
16:01 - every time i run this even when i'm
16:03 - testing and like i said i'll explain
16:05 - more about these tokens in just a bit
16:07 - but basically once we get authorized
16:10 - with our google account
16:12 - we're going to receive several tokens
16:14 - and one of these
16:15 - is called an access token and another is
16:18 - a
16:19 - refresh token now these access tokens
16:21 - have a short life span
16:23 - and will expire uh shortly after they're
16:26 - issued
16:26 - now the refresh tokens last much longer
16:29 - and you can use them to fetch
16:30 - new access tokens for accessing your
16:33 - data
16:33 - and the issue that i was running into
16:35 - like i said is that i was testing these
16:37 - routes
16:38 - and when you do that it might not send a
16:40 - new refresh token every time
16:42 - okay so let's go ahead and move on and
16:45 - like i said i'll talk more about those
16:46 - tokens in just
16:47 - a bit now when we reach this line
16:51 - of our python script then google is
16:53 - going to run a local web server for us
16:55 - and open up a page for us to log into
16:57 - our google account
16:58 - and once we log in and are properly
17:01 - authorized
17:02 - then it's going to set our credentials
17:04 - within this flow
17:05 - object now we can grab those credentials
17:08 - simply by accessing flow.credentials
17:12 - so i'm going to create a variable here
17:13 - called credentials
17:15 - and these will be set in flow dot
17:18 - credentials okay and that credentials
17:21 - object
17:22 - that's returned has a method called to
17:25 - json
17:26 - that will allow us to print these out in
17:28 - json format
17:30 - so let's do that just so we can make
17:32 - sure everything is working
17:34 - so far so i'm going to print out
17:38 - these credentials and like i said this
17:40 - credentials object
17:42 - has a method called 2json now let me
17:45 - comment out everything
17:47 - below here for now so that we can make
17:49 - sure that everything
17:51 - is working so far so
17:54 - i'm going to comment out everything down
17:56 - here at the bottom so i'm not actually
17:58 - going to use these credentials to
18:00 - connect to the youtube service yet right
18:02 - now we're just going to make sure that
18:03 - we are getting
18:05 - all of our authentication uh taken care
18:07 - of here
18:08 - with what we have so far so let me run
18:12 - this
18:12 - okay so i got an error here that
18:14 - installed appflow has no attributes
18:17 - from clients secrets file this is
18:20 - actually from
18:21 - client secrets file uh sorry for that
18:24 - typo
18:26 - so hopefully that's the only typo i made
18:28 - let's try this again
18:29 - okay so now when i run this we can see
18:32 - that it automatically opens up my web
18:34 - browser
18:35 - and brings me to this page here so let
18:37 - me make this just a little larger
18:39 - so now it's saying okay what account
18:42 - do you want to log in with so i'm going
18:45 - to log in with my main account here
18:48 - and when i click on this it's going to
18:50 - say which
18:51 - account or brand do you want to use i
18:53 - have two youtube channels
18:55 - but i'm just going to click my main
18:57 - youtube channel here that
18:59 - you all are mostly familiar with now
19:03 - this screen will pop up here saying that
19:06 - this app isn't verified that's because
19:09 - um you know we're just using a local
19:11 - script but we know that we can trust
19:13 - this because we wrote the script
19:14 - um now if somebody else wrote the script
19:17 - and they're trying to get access to your
19:18 - youtube information
19:20 - or any other information that for that
19:22 - matter
19:23 - then you probably won't want to give
19:25 - them access
19:26 - but we know that we wrote this script
19:28 - and that it's safe so i can click on
19:30 - show advanced here and then go to the
19:33 - youtube api
19:35 - so now this is the scope here
19:38 - it's saying that this script uh wants to
19:40 - view your youtube account
19:42 - so even if it was a nefarious
19:44 - application
19:45 - um all that they would be able to do
19:48 - with this scope
19:49 - is view your youtube data they wouldn't
19:51 - be able to make any changes to your
19:52 - account
19:53 - and you always want to use as little
19:55 - scopes or as few scopes as possible you
19:58 - only want
19:59 - you know you don't want to scare people
20:00 - away you just want to access only the
20:03 - information that you need
20:05 - so i'm going to say that i want to allow
20:07 - this script
20:08 - to view my youtube information so i'll
20:11 - allow that
20:12 - it's going to ask to confirm so i'll
20:14 - allow that again
20:15 - and now it automatically redirects me to
20:17 - this page here
20:18 - that says the auto uh the authentication
20:21 - flow has completed
20:22 - you may close this window so i'm going
20:24 - to close this
20:25 - go back to our script and if you
20:28 - remember
20:29 - we printed out our credentials dot
20:32 - to json here and these
20:35 - are our credentials now whenever it runs
20:38 - the local server
20:39 - it prints out this prompt here that says
20:42 - to authorize your application please
20:45 - visit this url
20:47 - so that is all this part here our actual
20:50 - credentials
20:52 - are this bottom half here so just so
20:54 - that we can see these a little bit
20:56 - better
20:56 - let me copy these and go to a new window
21:00 - here
21:00 - and let me run this json pretty print
21:04 - here
21:05 - so that we can see these a little bit
21:07 - better now one more thing before we look
21:09 - at these
21:11 - credentials now i don't really need that
21:14 - output there that said
21:16 - you know to authorize your application
21:18 - please visit this url
21:20 - i don't want that printed out within my
21:22 - python script
21:23 - if you don't want that one thing that
21:25 - you can do here in your run localsover
21:27 - method
21:28 - is that you can add this authorization
21:31 - let's see i think it's um authorization
21:35 - underscore prompt um underscore
21:39 - message and i'm just gonna set that to
21:42 - an empty string
21:43 - sorry having trouble typing here so
21:45 - authorization prompt
21:46 - message set that to an empty string and
21:49 - you won't see that
21:50 - big long prompt anymore so
21:54 - now let's go back here to our
21:56 - credentials
21:57 - and now let me take a second to describe
21:59 - a little bit more of what's actually
22:01 - going on here
22:02 - so far with our flow object and what
22:05 - this is actually doing in the background
22:07 - so when it runs this local web server
22:11 - here
22:12 - it's using our client id and our client
22:15 - secret that we get from our client
22:17 - secrets json file
22:20 - and it's using that to go to an
22:22 - authorization
22:23 - url now that authorization url
22:26 - is where we log in and give our
22:28 - application access to the scopes that we
22:31 - listed
22:31 - uh within this method as well now like i
22:34 - said in this case i'm giving access for
22:36 - my app to have read-only access to my
22:38 - youtube account
22:39 - and then after we successfully log in
22:42 - then google sends us back something
22:45 - called an authentication code
22:47 - and then automatically in the background
22:51 - google is exchanging this authentication
22:53 - code for an
22:54 - access token and a refresh token and
22:56 - like i said before the access token
22:59 - is what we use to talk to the youtube
23:01 - api
23:02 - and get the data that we're after but
23:05 - the
23:05 - access token expires fairly quickly so
23:08 - we should set up our application so that
23:10 - it automatically checks if the access
23:12 - token is expired
23:14 - and if it is expired then we'll simply
23:16 - use the refresh token to fetch a new one
23:19 - instead of going through that entire
23:21 - login process again
23:23 - there are probably a few different ways
23:25 - that we could do this but i'll show you
23:27 - how
23:27 - i've personally been doing this so with
23:30 - that said we can see that in our
23:32 - credentials here we have a token this is
23:34 - that access token then we have our
23:36 - refresh token
23:37 - um the token uri client id
23:40 - client secret and scopes just like we
23:43 - talked about before
23:44 - um now if that doesn't make sense let me
23:48 - really quick pause the video and go find
23:50 - a visual
23:51 - of what's going on and that might make a
23:53 - bit more sense
23:54 - okay so i know that what i said earlier
23:57 - was probably a little confusing
23:58 - uh you know this stuff was confusing for
24:00 - me the first couple of times that i did
24:02 - this
24:02 - as well so here's an actual visual
24:05 - of what's going on in the background
24:08 - just so you can be sure
24:09 - that you know what's going on when we
24:11 - request these tokens
24:12 - so first what we're doing is that we are
24:15 - requesting a
24:16 - token that is and then our flow
24:20 - object in the background will run that
24:22 - local web server
24:23 - and go out to the google servers here
24:26 - and that's where we have this user login
24:29 - and consent that's whenever i actually
24:30 - logged into my youtube account
24:32 - and allowed my script access
24:36 - to my youtube data and then this sends
24:38 - back
24:39 - an authorization code to the user and
24:42 - using that flow object this is all done
24:45 - automatically
24:46 - you can also do this manually if you
24:48 - want using http request
24:50 - but what google did automatically for us
24:53 - using that flow
24:53 - object was that it exchanged our
24:57 - authorization code
24:58 - for tokens so that is this part here
25:02 - and then we got a token response from
25:05 - the google servers
25:06 - that is the access token and the refresh
25:09 - token
25:10 - and we use those tokens to call the
25:12 - google api
25:14 - and that is what we're going to do now
25:16 - that we have these
25:17 - access tokens and refresh tokens okay i
25:20 - just wanted to be clear with that
25:22 - so now that we've gone over that again
25:24 - let's actually use these tokens
25:26 - to access our youtube account now like i
25:29 - said i'm going to set up our application
25:31 - so that it automatically checks if the
25:33 - access token is expired
25:35 - and if it is expired then i'm simply
25:37 - going to use the refresh token to fetch
25:39 - a new one
25:40 - instead of going through that entire
25:42 - login process again
25:44 - so the way that i'm going to do this is
25:47 - that
25:48 - i'm going to be saving our credentials
25:50 - into a
25:51 - file using pickle now if you don't know
25:53 - what pickle is
25:55 - basically it's a way for us to save
25:57 - python objects in a file as
25:59 - bytes and then load those objects back
26:01 - into python
26:02 - using that file now if you've never used
26:05 - it before
26:05 - then don't worry too much about it it's
26:07 - almost exactly like
26:09 - working with a regular file so i'm going
26:12 - to
26:12 - import a couple of modules for this so
26:15 - up here at the top we're going to need
26:18 - the os package which we already have
26:20 - imported and also i'm going to import
26:25 - pickle and now what i'm going to do here
26:27 - is that i'm going to initialize our
26:29 - credits variable at the top of our
26:31 - script
26:32 - and i'm going to set these equal to none
26:34 - so let me
26:35 - cut these out and paste these in
26:38 - up here and i'm going to initialize
26:41 - these
26:42 - uh to none and then we're going to go
26:46 - through
26:46 - some conditionals uh to check if our
26:50 - credentials already exist and if they
26:52 - don't
26:53 - then we will go through this login
26:54 - process okay so
26:56 - now let's imagine how we want the flow
26:58 - of our application to go
27:00 - when we actually run this script so
27:03 - first we want to check
27:04 - if we already have some credentials
27:06 - saved in a pickle file
27:08 - if we do then we want to load those
27:10 - credentials in
27:12 - now i'm going to copy and paste some
27:13 - snippets that i have here since i'm kind
27:15 - of
27:15 - a slow typer and also i make a lot of
27:17 - typos like you guys have probably seen
27:20 - but after i paste these snippets in i'm
27:22 - going to walk over everything
27:23 - that we're doing and also i have a link
27:26 - to these snippets in the description
27:27 - section below
27:28 - if anybody would like to follow along
27:31 - okay so the first
27:32 - snippet that i'm going to grab here is
27:34 - going to be
27:36 - where we are checking if a pickle file
27:38 - already exists
27:40 - so right below our credentials here i'm
27:42 - just going to
27:43 - paste this in and now let me walk over
27:47 - what this snippet is doing so we are
27:50 - saying
27:50 - okay do we have a file in the current
27:53 - directory
27:54 - called token.pickle uh if we do
27:57 - then print out that i'm loading in
27:59 - credentials from
28:00 - my pickle file so then
28:04 - we are opening this pickle file now this
28:07 - is
28:07 - read bytes since this is a a bytes file
28:11 - and not just a regular text file
28:14 - so i'm going to open that file and i'm
28:16 - going to call that token
28:17 - and then we are doing credentials is
28:20 - equal to
28:21 - pickle.load and load in that token
28:25 - so that is how you load in information
28:27 - from pickle like i said it's very
28:29 - similar
28:30 - to working with a regular file but you
28:32 - just have to use
28:34 - this pickle.load here and
28:38 - also open this up as bytes okay so at
28:40 - this point in our script
28:42 - here where we check if this exists
28:46 - if we already had some credentials saved
28:50 - then this conditional here will load in
28:52 - those credentials
28:53 - but if that pickle file didn't exist
28:56 - then our credentials would
28:58 - still be set to none so we're going to
29:00 - want to check
29:01 - if those if that credentials variable is
29:04 - still
29:04 - none and even if those credentials were
29:07 - loaded in
29:08 - we're also going to want to check if
29:09 - they're still valid so let me grab the
29:12 - next snippet and walk through everything
29:14 - in detail there now here i have a
29:16 - snippet that we need to
29:19 - import that request i think we already
29:21 - have that
29:22 - yeah we already have that here so i
29:23 - don't need to use
29:25 - this snippet here the one that i want is
29:28 - checking if our credentials were loaded
29:31 - in
29:31 - and if they are valid so let me copy
29:34 - these and then i will explain
29:36 - what we're doing here so right after
29:38 - that conditional where we're checking if
29:41 - um that pickle file exists with our
29:44 - current credentials
29:45 - i'm going to just overwrite all of the
29:48 - code that we currently have now
29:50 - all the way up into my comments here so
29:52 - i'm going to paste
29:54 - this in and let's scroll back over here
29:57 - okay so now let me explain what these
29:59 - are doing here
30:00 - so here is the part where we load in our
30:02 - credentials if they already
30:04 - exist so now we're saying if those
30:06 - credentials
30:07 - don't exist or if those credentials are
30:10 - not
30:10 - valid then we want to come inside of
30:14 - this
30:14 - conditional here and within this
30:16 - conditional there are two things that we
30:18 - want to do
30:20 - we first want to check if our
30:22 - credentials actually
30:24 - exist so if we have credentials which
30:27 - means that they were actually loaded in
30:29 - from the pickle file
30:31 - and if those credentials are expired and
30:34 - if we have a refresh token then we want
30:38 - to refresh our access token token
30:41 - using that refresh token and we can do
30:44 - that simply with
30:46 - credentials.refresh and then pass in
30:49 - that google request class that we
30:51 - imported
30:52 - up here at the top and i also made a
30:54 - print statement here
30:55 - just so that we can see that within our
30:57 - file that we are refreshing our access
31:00 - token
31:01 - now if we don't hit this conditional
31:04 - then it means that we don't have uh
31:06 - credentials
31:07 - or you know that we don't have a refresh
31:09 - token or something like that
31:11 - in that case what we want to do is just
31:14 - do everything that we did before
31:16 - where we fetch new tokens and that is
31:19 - what we have
31:20 - uh done in this video previously up to
31:22 - this point
31:23 - we're in using that we're using that
31:25 - installed app flow
31:27 - from client secrets file um using that
31:30 - client
31:31 - passing in the corrupts correct scope
31:33 - which in my case is
31:34 - youtube read only i am running my local
31:37 - web server and in my case it's on port
31:39 - 8080
31:41 - and then we are setting our credentials
31:45 - equal to
31:46 - those flow credentials after we are
31:47 - properly authenticated and the user logs
31:50 - into their youtube account
31:52 - and now that we have those credentials i
31:54 - want to save those
31:56 - to a pickle file so that the next time
31:58 - we run this script
32:00 - we don't have to go through this entire
32:01 - login process again
32:03 - so to save this using pickle
32:07 - we can just open up a file using
32:10 - write byte mode and then i can just say
32:13 - pickle dot dump credentials into
32:16 - that file okay so i know that that was a
32:18 - lot but like i said i am going to have
32:20 - these uh snippets available
32:22 - in the description section below if
32:25 - anybody wants to
32:26 - follow along with these i'll have those
32:27 - available so that you can copy and paste
32:30 - okay so now that we have all of this in
32:32 - place let's go ahead and run this and
32:34 - make sure that everything's working
32:35 - correctly
32:36 - and if it looks like it's working how it
32:38 - should then we'll finally connect to
32:41 - the youtube service using these oauth
32:43 - credentials and see if we can
32:45 - see my unlisted videos so let's run this
32:48 - and make sure that these snippets that i
32:50 - pasted in are currently working
32:52 - now i don't currently have a credentials
32:55 - pickle file here
32:57 - so i'll probably have to log in again so
33:00 - this is the process that we saw before
33:02 - i'm going to
33:03 - choose my youtube account that i want to
33:05 - give access to
33:07 - i'm going to say that i trust my script
33:10 - allow access
33:11 - and then it says authentication has
33:13 - completed you may close this window so i
33:15 - will
33:16 - close that open that script back
33:19 - up and we can see everything that we
33:22 - printed out here so i said fetching new
33:24 - tokens
33:25 - saving credentials for future use now
33:28 - i know that this is probably going to be
33:30 - hard to see in my sidebar here
33:33 - but i do have a token.pickle file
33:36 - here now like i said this is bytes so
33:38 - this is just going to be a bunch of
33:39 - gibberish
33:41 - but whenever we load that back in python
33:44 - is going to know what to
33:45 - do with that so now that we have our
33:47 - credentials saved in this token.pickle
33:50 - file
33:51 - if i run this again then it should need
33:53 - to open up a browser
33:55 - and make us go through that entire login
33:57 - process again
33:58 - it should just be able to use that
34:00 - pickle file with our existing
34:02 - credentials
34:03 - so let me run this again and see what
34:05 - happens
34:06 - so we can see that when i ran this it
34:08 - simply says
34:09 - loading credentials from file
34:12 - so that means that it loaded in and
34:16 - whenever we hit this conditional here
34:19 - apparently our credentials weren't
34:20 - expired
34:22 - and we didn't have to go through our
34:24 - entire login process again so that's
34:26 - good
34:26 - okay so that should be everything that
34:28 - we need to do for our credentials
34:30 - so now let's finally use these
34:32 - credentials to connect to the youtube
34:34 - api and list out uh my
34:37 - videos so i'm going to go down here
34:40 - and uncomment out my
34:43 - code from before where we connected to
34:45 - this youtube service
34:47 - now we actually don't need to change
34:48 - much here but one thing that we do need
34:51 - to change
34:52 - is that we are no longer using this api
34:54 - key or
34:55 - what youtube has this argument is called
34:58 - developer key
34:59 - so instead of passing in an api key i'm
35:02 - instead going to change this
35:03 - so that we're passing in our new
35:05 - credentials and
35:07 - all we need to do is change this
35:10 - parameter
35:10 - and this argument to credentials so i'm
35:14 - going to say credentials
35:15 - is equal to credentials so let's save
35:18 - that
35:19 - and now if i run this using those new
35:22 - credentials
35:24 - then let's look what we have here so we
35:27 - can see that it loaded those in from a
35:29 - file
35:30 - and now whenever we look at the videos
35:32 - that i get back from my account
35:35 - the first video that i have here this is
35:38 - a privacy status of
35:40 - unlisted so it is seeing my unlisted
35:42 - videos and if i go down to the bottom
35:44 - here
35:45 - now i can see that the page info the
35:47 - total results is 236.
35:50 - now if you remember at the beginning of
35:51 - the video when we made a public request
35:53 - to my channel
35:54 - we were getting 229 videos so we're
35:58 - seeing more videos and that's because i
36:00 - have
36:00 - about seven that are private or unlisted
36:04 - now let's see if we can list out the url
36:06 - of an unlisted video
36:08 - now i could loop through all of my
36:10 - videos like we've done in previous
36:11 - videos
36:12 - but i'd like to keep my other you know
36:14 - videos actually private
36:16 - so i'm just going to grab my first
36:17 - unlisted video that i uploaded not long
36:20 - ago
36:21 - so first let me loop over the first five
36:24 - videos here
36:25 - and make sure that i actually have this
36:28 - unlisted video here
36:29 - now we've actually already seen this
36:32 - but what i'm going to do here is instead
36:35 - of printing out this response
36:37 - i'm going to say for item in
36:41 - response and i'm going to access
36:44 - the items here that were returned
36:48 - and then i'm just going to print out
36:50 - each of those items and each of these in
36:52 - this case
36:53 - should be a video so i'm going to run
36:56 - this
36:57 - and now each of these should be a video
36:59 - and we can see here that the latest
37:01 - video here
37:02 - is unlisted and now let's grab the video
37:06 - id
37:06 - of this video with the video id we'll be
37:10 - able to
37:11 - create a youtube link so in order to get
37:13 - the video id
37:15 - uh up here where we make our request
37:18 - oops i went up a little bit too far here
37:20 - up here where we make this request right
37:22 - here for the part we don't only want the
37:25 - status
37:26 - while we also want the content details
37:29 - so i'm going to save that and run it
37:33 - and now for each video let me go up to
37:36 - the top
37:37 - one here that was the uh unlisted video
37:40 - so that is right here um we can see that
37:43 - we have a video id
37:46 - and with these video ids we can actually
37:48 - create a youtube link
37:50 - so what i'm going to do here is i'm only
37:52 - going to print out the video ids
37:55 - of these videos so to do this
37:59 - we could access we can see here that we
38:01 - have content details and then within
38:03 - that
38:04 - is video id and this is all dictionaries
38:06 - here
38:07 - so up here when we print out our item
38:11 - i'm just going to access both of those
38:13 - so i'm going to say content details
38:15 - so i want to access that key of each
38:17 - item and then i also want to access the
38:20 - video id within those content details
38:24 - so i'm going to save that and run it and
38:26 - now we're just getting
38:28 - the video ids for each of those now if
38:31 - you want to create
38:32 - a youtube link using the video id
38:36 - then we can simply do this so first let
38:39 - me capture this into a variable
38:41 - so i'll call this vid underscore id
38:45 - and to create a youtube link i can say
38:48 - youtube link is equal to
38:50 - i'm going to do uh an f string here and
38:53 - this is what
38:54 - uh youtube links to videos look like so
38:57 - i'll say
38:58 - https colon forward slash forward slash
39:01 - and this will be a shorthand link so a
39:03 - shorthand link on youtube
39:05 - is u2.be
39:08 - and then forward slash and then the
39:11 - video id
39:12 - so since we're using an f string i'm
39:15 - just going to
39:16 - paste that in there dynamically like
39:18 - that and
39:19 - now let's print out these full
39:23 - youtube links so i'll print these out
39:27 - and
39:28 - so now i have a youtube link here so now
39:30 - let me paste this into my browser and
39:32 - make sure that this
39:34 - worked um so if i paste this
39:38 - sorry hopefully my sound is off let me
39:40 - mute this up let me meet that
39:42 - okay so that is an unlisted video that's
39:44 - a private video that is on my channel
39:47 - um and let me go ahead and pause this as
39:49 - well
39:51 - so if you're interested in watching one
39:52 - of my old home videos that i had
39:54 - unlisted on my channel
39:56 - then you can type in that url and check
39:59 - that out if you'd like it's an unlisted
40:00 - video
40:02 - which means that it's not private but
40:03 - anybody with the url can actually watch
40:05 - it
40:06 - but i'm not going to play the whole
40:07 - thing here because i assume that most
40:10 - of you are more interested in the
40:11 - youtube api and
40:13 - not my home videos so now that we
40:16 - made sure that that worked and that we
40:18 - did get a link to our unlisted video
40:20 - here let me go back to
40:21 - uh the script okay so that uh actually
40:25 - worked we can see that this entire
40:26 - process here which i know is a lot of
40:28 - code
40:29 - but most of this is just checking
40:30 - credentials and things like that so that
40:32 - we don't have to log in
40:33 - every time um but we were able to log in
40:37 - using oauth to log into our youtube
40:40 - account
40:40 - and give our script access to some
40:42 - private user data
40:44 - and in this video we only saw that i
40:46 - could see my unlisted videos
40:48 - but there's so much more that we can do
40:50 - with this some apps use this to run
40:52 - analytics for youtube channels and give
40:54 - them tips for how they can
40:56 - improve their import performance um i
40:59 - could
40:59 - use this concept to write an app so that
41:01 - i could use a python script to update my
41:04 - youtube descriptions
41:06 - upload videos change thumbnails or
41:08 - really anything that
41:10 - we'd like to do like i said at the
41:12 - beginning of the video
41:13 - i'm actually using this same process
41:15 - right now to grab my youtube members
41:17 - with the python script
41:18 - so that i can automatically create some
41:20 - credits to the end
41:22 - of each video and i did finally get this
41:25 - working with youtube
41:26 - so now at the end of each video i now
41:28 - have my patreon and youtube contributors
41:31 - listed
41:32 - and you'll see those at the end of this
41:34 - video in just a bit
41:35 - but with that said i think that's going
41:37 - to do it for this video i hope you feel
41:39 - like you
41:40 - got a better understanding of the
41:41 - process of connecting to an api
41:44 - using oauth even if you're not using the
41:46 - youtube api
41:48 - the oauth process will likely look like
41:50 - this for most applications
41:52 - and we'll probably see this in future
41:54 - videos when i use
41:56 - python with twitter and reddit and
41:58 - things like that
41:59 - now in this video we saw an example
42:02 - using my local machine
42:03 - but you could also have the same
42:05 - functionality on a web page or an
42:07 - app where users allow access to their
42:09 - private information for a specific
42:11 - reason
42:12 - so like i said at the beginning of the
42:14 - video this would be similar to instagram
42:17 - having you log into your twitter and
42:19 - allowing them to post photos to your
42:21 - twitter automatically on your behalf
42:24 - each time you post a picture to
42:25 - instagram so something like that is a
42:27 - good example
42:29 - of where you would use something like
42:30 - this so if you
42:32 - find this kind of video useful then
42:34 - maybe i can make some future flask or
42:36 - django videos
42:37 - where we do some oauth stuff like this
42:39 - on an actual web page
42:40 - but if anyone has any questions about
42:42 - what we covered in this video
42:44 - then feel free to ask in the comments
42:45 - section below and i'll do my best to
42:46 - answer those
42:47 - and if you enjoy these tutorials and
42:49 - would like to support them then there
42:50 - are several ways you can do that
42:52 - the easiest way is simply like the video
42:53 - and give it a thumbs up and also it's a
42:55 - huge help to share these videos with
42:57 - anyone who you think would find them
42:58 - useful
42:58 - and if you have the means you can
43:00 - contribute to patreon or youtube
43:02 - and there are links to those pages in
43:03 - the description section below
43:05 - be sure to subscribe for future videos
43:06 - and thank you all for watching
43:20 - you

Cleaned transcript:

hey there how's it going everybody in this video we're going to be using python and the youtube api to access a user's account so so far we've only been using public information on youtube by accessing public playlists public videos and things like that but you might want to access some private user data such as a user's likes or comments or even allow a user to modify their account in some way through python such as allowing them to upload a video like videos comment or whatever else we're able to do through the api so to do this we're going to need to use a better authentication protocol than the api keys that we've currently been using so we're going to need to update our scripts to use oauth instead so oauth 2 will allow you or your users to give our scripts and applications limited access to thirdparty accounts and that thirdparty account or application in this video is going to be youtube you've likely seen something like this in applications before so for example if you've used instagram then you probably have noticed that instagram also gives you the option to automatically post photos to twitter or facebook now if you did choose to post to twitter then instagram would open up a page to log into your twitter account and it would say something like you know instagram would like to be able to post a tweet on your behalf please log in to allow instagram access to your twitter account that is basically what oauth is so for example i'm currently using this on youtube to grab a list of my youtube members so that i can add them and my patrons to credits at the end of my videos so in this video i'm going to give my python script access to my youtube channel using oauth and then i'll just do something simple like list my private or unlisted videos i think my latest unlisted video is one of me as like a kid back in 1992 or something like that so if you stick around to the end of the video then you'll get to see that now if you haven't watched my video on getting started with the youtube api using python then definitely watch that video first because that's where i show the basics of the youtube api and how to connect different services and i'm using the script that we ended with in that video as a starting point so with that said let's go ahead and get started so like i said i'm just going to do a very simple example where i use oauth to access my uploaded videos but first let's see what this looks out looks like without oauth so that you can see what it looks like just using an api key so to grab my uploaded videos one way that we can do this is first instead of accessing my channel statistics like we did in that getting started video i'm instead going to access content details and this will print out some details from my channel and if i run this then there's one part down here that says related playlists now if we look at our related playlists we can see that we have one here called uploads so that is a playlist of all of my uploads and this is that playlist id so i'm going to grab that playlist id and now let's print out all of my videos from that playlist or actually it'll just be the first five videos of the playlist so in order to do this instead of accessing the channels resourced here i'm instead going to change this to playlist items and i'm still going to list these now let's grab the status of these playlist items and i can just remove this four username here and instead i'm going to type in playlist id and paste that playlist id that we got before now that d and id is lowercase sometimes i've accidentally made that uppercase instead so now that we have this in place let's go ahead and run our code and now we can see that we get back some information here for the first five videos of this playlist and we can take a look at the status here we can see that uh the privacy status of these videos are public uh so those are these are my latest public videos uh but one thing i wanted to show here was down here at the bottom where it says page info total results is 229 so we can see that using an api key that just gives us public data and it's telling me that i have 229 video uploads uh when i release this video this will be it'll be 230 public videos but these are all public if i wanted to also view my private or unlisted videos then i would need to give my script permission to view my youtube accounts data so to do this we're going to need to create an oauth client so in order to create this we're going to open up our google developers console that we've used in previous videos and i already have mine open here in the browser so to create a new oauth client i am just going to go here to credentials and now now i don't have any api keys here that's because i created a new project so that we could see what this looks like from scratch what i was using for that first example was an api key from a different project so if you're confused about that then that's why so in order to create an oauth client we can click up here on create credentials now instead of an api key we're going to create an oauth client id now if this is the first oauth client id that you've created then you're going to have this screen here that says that you need to configure a consent screen now if uh you've already walked through this once then you won't see this but if it's the first time then let's go ahead and walk through this so first we have to configure a user type so i'm going to choose external here because that is available to any user with a google account um internal is for like g suite users and things like that for internal applications um but most of the time we're going to be uh making external user types here uh so let me click click on create and now i got an error here i've been having some uh issues with their site today i don't hopefully that won't affect what we're doing here but now all i'm going to do on this oauth consent screen is i'm just going to put in an application name and then we'll take care of everything else later like the scopes and things like that so i'm just going to set my application name to youtube api so now down here at the bottom i will click on save and once that is saved then we should be able to go back here to our credentials and now let's try this again where we click on create credentials and then oauth client id and now that we've set up that consent screen now we can move forward with creating our client id now when you get to this screen here it's going to ask you what type of application that we'll be using for our oauth keys now so far in this series of videos i've only been using python scripts but a simple script isn't listed here in any of the application types now there are several ways that we could set this up but what i'm going to do is i'm going to choose web application now that might be confusing but basically what this means is that i'm going to run a local web server that allows me to log into my google account and give my script access to my private youtube data now this doesn't have to be a local web server if you created a web application that allowed people to log in to their google accounts then you would select this option as well and perhaps in the future i can show how to do this with flask or django so that we could set up that functionality on an actual real website now if running a local web server sounds confusing then don't worry because we're going to be using a google library that makes all of this very easy for us to use okay so now that i've selected this application type now i'm just going to name this so i'll just name this youtube api app and now down here we do need to select a redirect uri and i'll explain more about this in just a minute now since i'm going to be doing this locally i can just do http colon forward slash forward slash i'll do localhost and let's run this on port 8080 okay and again i'll explain more about this in just a bit so now let's go ahead and create our application here okay and once we create those oauth credentials it's going to display our client id and our client secret now unlike our api key i'm not going to copy and paste these into my script instead i'm going to use the option um that google gives us to download all these credentials to a single file and that's going to make things a lot easier for us to get authorized later on so i'm just going to say ok here and now here with my client ids i'm going to click this download button here and it's going to download all of this to a clientsecret.json file now this file is going to have a big long random name but i'm going to go to our downloads folder here and i'm just going to let me make this a little larger here so we can see i'm just going to rename this to client secrets dot json instead of this big long random name okay so client secrets dot json and now i'm going to move this json uh file into the directory of our script so i also have that open here in my finder so i'm going to drag this client secrets.json into the same directory as my python script so now i can close these windows down okay so now that we have those client secrets now we can change our script so that this is working with oauth instead of just our api key but we're going to make this process a bit easier by installing some google authorization libraries that will handle a lot of the authorization for us this will also allow or this will also handle the process of running a local web server and everything like that so it makes the entire process a lot easier and we can install these just by using pip so i'm going to open my terminal here and now let's install those libraries so this is pip install and one is called google auth so let's run that and now let's also pip install google auth dash uh oauth lib so let's install this as well okay okay so now that we have those libraries installed now let's modify our script so that we can authenticate with oauth okay so first of all i'm going to import the authorization classes and i'll need these from the libraries that we just installed so first i'm going to say from google underscore auth underscore oauth lib dot flow i want to import installed app flow and i'm also going to import this request class that it uses to make web requests so i'm going to say from google.auth.transport.request import and this is called request okay and now we're not going to be using this api key anymore so instead let's load in all of our oauth credentials from that client secrets json file that we move to the same directory as our script so to do this this is going to be a flow object so we are going to take this installed app flow class that we just imported and this has a method called from underscore clients underscore secrets underscore file and this file was called client oops let me spell this correctly clientsecrets.json okay so this line here is going to load in all of our credentials now one more thing that we need to add in when working with oauth is the scope of the information our script can access and when we set the scope then when i allow my script to access my youtube account it will tell me something like you know this script would like to view your youtube account and if we actually wanted to make modifications to our account or view different information then we would need to tell our script exactly what scopes our script will be accessing so that it tells the end user exactly what they're agreeing to when they allow our script access to their account so if you want to view all of the scopes then i have this page open here in my browser as well and it breaks down a little bit more what these scopes do so we can see here that this scope allows us to manage our youtube account um this one is to see all active channel members that's one that i'm using for my private script uh and then there are a few other ones here now the one that we're going to be using is this youtube read only because we're not going to be making any changes to our script we're just going to be viewing information about my account but based on what you're doing with your application you're going to have to choose different scopes so i'm going to copy this url here and now uh let's go back to our script and now we need to also add the our scopes into this installed app flow here so i'm just going to go the next line and i'm going to say that the scopes are equal to and this will be a list but the list is just going to contain that readonly scope now if you wanted to add additional scopes here then this is where you would do it okay so that should be everything that we need in terms of our credentials but now we need to run our local web server so that we can log into our google account and allow our script access to our data and this flow object that we just created will do all of this for us so to do this we can just go down another line here and i'm going to use this flow object that we just created and say flow dot run underscore local underscore server so run local server and also if you remember whenever i specified that the url for our redirect uris i said that it was localhost on port 8080 so i'm going to say port 8080 here on my local server now i'm also going to add one more argument here now that this might actually not be necessary but i ran into an issue where i wasn't getting all of the tokens back that i expected and i found this solution online basically i wasn't getting a refresh token and i'll talk more about those in a minute but i think what was happening is that i was getting a refresh token uh for the first time i was running it but since i was uh testing um and running it multiple times it wasn't giving me a re or refresh token every single time so the solution that i found online for this was to pass in a prompt of consent and that should uh make this give me a refresh token every time i run this even when i'm testing and like i said i'll explain more about these tokens in just a bit but basically once we get authorized with our google account we're going to receive several tokens and one of these is called an access token and another is a refresh token now these access tokens have a short life span and will expire uh shortly after they're issued now the refresh tokens last much longer and you can use them to fetch new access tokens for accessing your data and the issue that i was running into like i said is that i was testing these routes and when you do that it might not send a new refresh token every time okay so let's go ahead and move on and like i said i'll talk more about those tokens in just a bit now when we reach this line of our python script then google is going to run a local web server for us and open up a page for us to log into our google account and once we log in and are properly authorized then it's going to set our credentials within this flow object now we can grab those credentials simply by accessing flow.credentials so i'm going to create a variable here called credentials and these will be set in flow dot credentials okay and that credentials object that's returned has a method called to json that will allow us to print these out in json format so let's do that just so we can make sure everything is working so far so i'm going to print out these credentials and like i said this credentials object has a method called 2json now let me comment out everything below here for now so that we can make sure that everything is working so far so i'm going to comment out everything down here at the bottom so i'm not actually going to use these credentials to connect to the youtube service yet right now we're just going to make sure that we are getting all of our authentication uh taken care of here with what we have so far so let me run this okay so i got an error here that installed appflow has no attributes from clients secrets file this is actually from client secrets file uh sorry for that typo so hopefully that's the only typo i made let's try this again okay so now when i run this we can see that it automatically opens up my web browser and brings me to this page here so let me make this just a little larger so now it's saying okay what account do you want to log in with so i'm going to log in with my main account here and when i click on this it's going to say which account or brand do you want to use i have two youtube channels but i'm just going to click my main youtube channel here that you all are mostly familiar with now this screen will pop up here saying that this app isn't verified that's because um you know we're just using a local script but we know that we can trust this because we wrote the script um now if somebody else wrote the script and they're trying to get access to your youtube information or any other information that for that matter then you probably won't want to give them access but we know that we wrote this script and that it's safe so i can click on show advanced here and then go to the youtube api so now this is the scope here it's saying that this script uh wants to view your youtube account so even if it was a nefarious application um all that they would be able to do with this scope is view your youtube data they wouldn't be able to make any changes to your account and you always want to use as little scopes or as few scopes as possible you only want you know you don't want to scare people away you just want to access only the information that you need so i'm going to say that i want to allow this script to view my youtube information so i'll allow that it's going to ask to confirm so i'll allow that again and now it automatically redirects me to this page here that says the auto uh the authentication flow has completed you may close this window so i'm going to close this go back to our script and if you remember we printed out our credentials dot to json here and these are our credentials now whenever it runs the local server it prints out this prompt here that says to authorize your application please visit this url so that is all this part here our actual credentials are this bottom half here so just so that we can see these a little bit better let me copy these and go to a new window here and let me run this json pretty print here so that we can see these a little bit better now one more thing before we look at these credentials now i don't really need that output there that said you know to authorize your application please visit this url i don't want that printed out within my python script if you don't want that one thing that you can do here in your run localsover method is that you can add this authorization let's see i think it's um authorization underscore prompt um underscore message and i'm just gonna set that to an empty string sorry having trouble typing here so authorization prompt message set that to an empty string and you won't see that big long prompt anymore so now let's go back here to our credentials and now let me take a second to describe a little bit more of what's actually going on here so far with our flow object and what this is actually doing in the background so when it runs this local web server here it's using our client id and our client secret that we get from our client secrets json file and it's using that to go to an authorization url now that authorization url is where we log in and give our application access to the scopes that we listed uh within this method as well now like i said in this case i'm giving access for my app to have readonly access to my youtube account and then after we successfully log in then google sends us back something called an authentication code and then automatically in the background google is exchanging this authentication code for an access token and a refresh token and like i said before the access token is what we use to talk to the youtube api and get the data that we're after but the access token expires fairly quickly so we should set up our application so that it automatically checks if the access token is expired and if it is expired then we'll simply use the refresh token to fetch a new one instead of going through that entire login process again there are probably a few different ways that we could do this but i'll show you how i've personally been doing this so with that said we can see that in our credentials here we have a token this is that access token then we have our refresh token um the token uri client id client secret and scopes just like we talked about before um now if that doesn't make sense let me really quick pause the video and go find a visual of what's going on and that might make a bit more sense okay so i know that what i said earlier was probably a little confusing uh you know this stuff was confusing for me the first couple of times that i did this as well so here's an actual visual of what's going on in the background just so you can be sure that you know what's going on when we request these tokens so first what we're doing is that we are requesting a token that is and then our flow object in the background will run that local web server and go out to the google servers here and that's where we have this user login and consent that's whenever i actually logged into my youtube account and allowed my script access to my youtube data and then this sends back an authorization code to the user and using that flow object this is all done automatically you can also do this manually if you want using http request but what google did automatically for us using that flow object was that it exchanged our authorization code for tokens so that is this part here and then we got a token response from the google servers that is the access token and the refresh token and we use those tokens to call the google api and that is what we're going to do now that we have these access tokens and refresh tokens okay i just wanted to be clear with that so now that we've gone over that again let's actually use these tokens to access our youtube account now like i said i'm going to set up our application so that it automatically checks if the access token is expired and if it is expired then i'm simply going to use the refresh token to fetch a new one instead of going through that entire login process again so the way that i'm going to do this is that i'm going to be saving our credentials into a file using pickle now if you don't know what pickle is basically it's a way for us to save python objects in a file as bytes and then load those objects back into python using that file now if you've never used it before then don't worry too much about it it's almost exactly like working with a regular file so i'm going to import a couple of modules for this so up here at the top we're going to need the os package which we already have imported and also i'm going to import pickle and now what i'm going to do here is that i'm going to initialize our credits variable at the top of our script and i'm going to set these equal to none so let me cut these out and paste these in up here and i'm going to initialize these uh to none and then we're going to go through some conditionals uh to check if our credentials already exist and if they don't then we will go through this login process okay so now let's imagine how we want the flow of our application to go when we actually run this script so first we want to check if we already have some credentials saved in a pickle file if we do then we want to load those credentials in now i'm going to copy and paste some snippets that i have here since i'm kind of a slow typer and also i make a lot of typos like you guys have probably seen but after i paste these snippets in i'm going to walk over everything that we're doing and also i have a link to these snippets in the description section below if anybody would like to follow along okay so the first snippet that i'm going to grab here is going to be where we are checking if a pickle file already exists so right below our credentials here i'm just going to paste this in and now let me walk over what this snippet is doing so we are saying okay do we have a file in the current directory called token.pickle uh if we do then print out that i'm loading in credentials from my pickle file so then we are opening this pickle file now this is read bytes since this is a a bytes file and not just a regular text file so i'm going to open that file and i'm going to call that token and then we are doing credentials is equal to pickle.load and load in that token so that is how you load in information from pickle like i said it's very similar to working with a regular file but you just have to use this pickle.load here and also open this up as bytes okay so at this point in our script here where we check if this exists if we already had some credentials saved then this conditional here will load in those credentials but if that pickle file didn't exist then our credentials would still be set to none so we're going to want to check if those if that credentials variable is still none and even if those credentials were loaded in we're also going to want to check if they're still valid so let me grab the next snippet and walk through everything in detail there now here i have a snippet that we need to import that request i think we already have that yeah we already have that here so i don't need to use this snippet here the one that i want is checking if our credentials were loaded in and if they are valid so let me copy these and then i will explain what we're doing here so right after that conditional where we're checking if um that pickle file exists with our current credentials i'm going to just overwrite all of the code that we currently have now all the way up into my comments here so i'm going to paste this in and let's scroll back over here okay so now let me explain what these are doing here so here is the part where we load in our credentials if they already exist so now we're saying if those credentials don't exist or if those credentials are not valid then we want to come inside of this conditional here and within this conditional there are two things that we want to do we first want to check if our credentials actually exist so if we have credentials which means that they were actually loaded in from the pickle file and if those credentials are expired and if we have a refresh token then we want to refresh our access token token using that refresh token and we can do that simply with credentials.refresh and then pass in that google request class that we imported up here at the top and i also made a print statement here just so that we can see that within our file that we are refreshing our access token now if we don't hit this conditional then it means that we don't have uh credentials or you know that we don't have a refresh token or something like that in that case what we want to do is just do everything that we did before where we fetch new tokens and that is what we have uh done in this video previously up to this point we're in using that we're using that installed app flow from client secrets file um using that client passing in the corrupts correct scope which in my case is youtube read only i am running my local web server and in my case it's on port 8080 and then we are setting our credentials equal to those flow credentials after we are properly authenticated and the user logs into their youtube account and now that we have those credentials i want to save those to a pickle file so that the next time we run this script we don't have to go through this entire login process again so to save this using pickle we can just open up a file using write byte mode and then i can just say pickle dot dump credentials into that file okay so i know that that was a lot but like i said i am going to have these uh snippets available in the description section below if anybody wants to follow along with these i'll have those available so that you can copy and paste okay so now that we have all of this in place let's go ahead and run this and make sure that everything's working correctly and if it looks like it's working how it should then we'll finally connect to the youtube service using these oauth credentials and see if we can see my unlisted videos so let's run this and make sure that these snippets that i pasted in are currently working now i don't currently have a credentials pickle file here so i'll probably have to log in again so this is the process that we saw before i'm going to choose my youtube account that i want to give access to i'm going to say that i trust my script allow access and then it says authentication has completed you may close this window so i will close that open that script back up and we can see everything that we printed out here so i said fetching new tokens saving credentials for future use now i know that this is probably going to be hard to see in my sidebar here but i do have a token.pickle file here now like i said this is bytes so this is just going to be a bunch of gibberish but whenever we load that back in python is going to know what to do with that so now that we have our credentials saved in this token.pickle file if i run this again then it should need to open up a browser and make us go through that entire login process again it should just be able to use that pickle file with our existing credentials so let me run this again and see what happens so we can see that when i ran this it simply says loading credentials from file so that means that it loaded in and whenever we hit this conditional here apparently our credentials weren't expired and we didn't have to go through our entire login process again so that's good okay so that should be everything that we need to do for our credentials so now let's finally use these credentials to connect to the youtube api and list out uh my videos so i'm going to go down here and uncomment out my code from before where we connected to this youtube service now we actually don't need to change much here but one thing that we do need to change is that we are no longer using this api key or what youtube has this argument is called developer key so instead of passing in an api key i'm instead going to change this so that we're passing in our new credentials and all we need to do is change this parameter and this argument to credentials so i'm going to say credentials is equal to credentials so let's save that and now if i run this using those new credentials then let's look what we have here so we can see that it loaded those in from a file and now whenever we look at the videos that i get back from my account the first video that i have here this is a privacy status of unlisted so it is seeing my unlisted videos and if i go down to the bottom here now i can see that the page info the total results is 236. now if you remember at the beginning of the video when we made a public request to my channel we were getting 229 videos so we're seeing more videos and that's because i have about seven that are private or unlisted now let's see if we can list out the url of an unlisted video now i could loop through all of my videos like we've done in previous videos but i'd like to keep my other you know videos actually private so i'm just going to grab my first unlisted video that i uploaded not long ago so first let me loop over the first five videos here and make sure that i actually have this unlisted video here now we've actually already seen this but what i'm going to do here is instead of printing out this response i'm going to say for item in response and i'm going to access the items here that were returned and then i'm just going to print out each of those items and each of these in this case should be a video so i'm going to run this and now each of these should be a video and we can see here that the latest video here is unlisted and now let's grab the video id of this video with the video id we'll be able to create a youtube link so in order to get the video id uh up here where we make our request oops i went up a little bit too far here up here where we make this request right here for the part we don't only want the status while we also want the content details so i'm going to save that and run it and now for each video let me go up to the top one here that was the uh unlisted video so that is right here um we can see that we have a video id and with these video ids we can actually create a youtube link so what i'm going to do here is i'm only going to print out the video ids of these videos so to do this we could access we can see here that we have content details and then within that is video id and this is all dictionaries here so up here when we print out our item i'm just going to access both of those so i'm going to say content details so i want to access that key of each item and then i also want to access the video id within those content details so i'm going to save that and run it and now we're just getting the video ids for each of those now if you want to create a youtube link using the video id then we can simply do this so first let me capture this into a variable so i'll call this vid underscore id and to create a youtube link i can say youtube link is equal to i'm going to do uh an f string here and this is what uh youtube links to videos look like so i'll say https colon forward slash forward slash and this will be a shorthand link so a shorthand link on youtube is u2.be and then forward slash and then the video id so since we're using an f string i'm just going to paste that in there dynamically like that and now let's print out these full youtube links so i'll print these out and so now i have a youtube link here so now let me paste this into my browser and make sure that this worked um so if i paste this sorry hopefully my sound is off let me mute this up let me meet that okay so that is an unlisted video that's a private video that is on my channel um and let me go ahead and pause this as well so if you're interested in watching one of my old home videos that i had unlisted on my channel then you can type in that url and check that out if you'd like it's an unlisted video which means that it's not private but anybody with the url can actually watch it but i'm not going to play the whole thing here because i assume that most of you are more interested in the youtube api and not my home videos so now that we made sure that that worked and that we did get a link to our unlisted video here let me go back to uh the script okay so that uh actually worked we can see that this entire process here which i know is a lot of code but most of this is just checking credentials and things like that so that we don't have to log in every time um but we were able to log in using oauth to log into our youtube account and give our script access to some private user data and in this video we only saw that i could see my unlisted videos but there's so much more that we can do with this some apps use this to run analytics for youtube channels and give them tips for how they can improve their import performance um i could use this concept to write an app so that i could use a python script to update my youtube descriptions upload videos change thumbnails or really anything that we'd like to do like i said at the beginning of the video i'm actually using this same process right now to grab my youtube members with the python script so that i can automatically create some credits to the end of each video and i did finally get this working with youtube so now at the end of each video i now have my patreon and youtube contributors listed and you'll see those at the end of this video in just a bit but with that said i think that's going to do it for this video i hope you feel like you got a better understanding of the process of connecting to an api using oauth even if you're not using the youtube api the oauth process will likely look like this for most applications and we'll probably see this in future videos when i use python with twitter and reddit and things like that now in this video we saw an example using my local machine but you could also have the same functionality on a web page or an app where users allow access to their private information for a specific reason so like i said at the beginning of the video this would be similar to instagram having you log into your twitter and allowing them to post photos to your twitter automatically on your behalf each time you post a picture to instagram so something like that is a good example of where you would use something like this so if you find this kind of video useful then maybe i can make some future flask or django videos where we do some oauth stuff like this on an actual web page but if anyone has any questions about what we covered in this video then feel free to ask in the comments section below and i'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute to patreon or youtube and there are links to those pages in the description section below be sure to subscribe for future videos and thank you all for watching you
