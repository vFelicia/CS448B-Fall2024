With timestamps:

00:00 - hey how's it going everybody this is
00:02 - going to be another video on programming
00:04 - terms and in this video we're going to
00:06 - look at the term idempotence so
00:08 - idempotence is actually a pretty easy
00:11 - concept to grasp
00:12 - once you see it in action but some of
00:15 - the definitions can be a little
00:16 - confusing if you look at Wikipedia the
00:20 - definition for idempotence it says the
00:22 - property of certain operations in
00:25 - mathematics and computer science that
00:27 - can be applied multiple times without
00:29 - changing the result beyond the initial
00:31 - application so if you're still a little
00:35 - confused by that then you will usually
00:36 - see this example here they'll say now
00:40 - what this example is saying is that if
00:43 - you have a function f and parameters X
00:47 - the result from f of X if you pass that
00:51 - into the function f again then that
00:53 - should equal the result of just f of X
00:58 - being run one time now if that's still a
01:01 - little bit unclear to you
01:02 - I think it'll clear it up once we see an
01:05 - example of this in some working code now
01:09 - the code that I have here is Python code
01:11 - but you know you can use any language
01:14 - for this it's it's language agnostic
01:16 - it's it's the same definition for any
01:18 - language that you use but just to show
01:21 - you what this is I'm using Python code
01:22 - here so I have a function here called
01:25 - add 10 and I have a parameter that I'm
01:28 - passing in to add pin that is num and if
01:31 - we compare this to our f of X from the
01:33 - last slide
01:35 - imagine that add 10 is our F and num is
01:39 - our X so now if you look down here you
01:42 - can see that I am printing out add 10
01:46 - and I'm just going to go ahead and pass
01:48 - in 10 to that function so if I run this
01:52 - then you can see down here that my
01:54 - result is 20 now if we remember back to
01:57 - the definition of something that is
02:00 - idempotent it means that if we pass this
02:04 - result into the function again and we
02:07 - should get the same result that we got
02:09 - the first time so if I take this
02:13 - function
02:13 - and I wrap it around our result here and
02:17 - I run it again you can see that now we
02:21 - get 30 so by definition this is not
02:24 - idempotent because whenever we have F of
02:29 - 10 and we wrap that inside of F again
02:34 - that result we get is 30 and whenever we
02:39 - just do F of 10 that result is 20 so you
02:44 - can see if we map this to the definition
02:46 - here then this by definition is not item
02:48 - potent so let's look at an example of
02:51 - something that is idempotent so I have
02:53 - here let me comment this one out so
02:55 - there's a built in function in Python
02:58 - abs it just gives you the absolute value
03:00 - of a number so if I run this the
03:04 - absolute value of negative 10 is 10 but
03:07 - now if I take the absolute value of the
03:11 - absolute value and run it again it's 10
03:13 - so I can keep doing this over and over
03:16 - and every time I pass in the result back
03:21 - into absolute the absolute value again
03:25 - no matter how many times you pass that
03:26 - value in it's still going to give you 10
03:29 - every time and that's what item Potence
03:30 - means
03:31 - so hopefully that kind of clears that up
03:33 - and it doesn't have to be a function
03:35 - either I mean you can have a line in
03:36 - your code that is a equals 10 or
03:39 - something like that just an assignment
03:40 - and this is a line of code so it can be
03:45 - executed and no matter how many times
03:47 - you execute it in a row equals 10 equals
03:50 - 10 equals 10 run it over and over over
03:52 - every time it's going to do the exact
03:54 - same thing so that's an idempotent
03:55 - statement also
03:56 - so really the simple definition of
03:58 - idempotence is that whenever you do
04:02 - something over and over and over and
04:03 - over and over and you do the same thing
04:05 - that you get the same result back every
04:08 - time and that you're not building on top
04:10 - of that result now where you usually see
04:12 - this is in HTTP methods so a lot of
04:17 - these are considered idempotent so a get
04:20 - HTTP method is considered item potent so
04:23 - because if you go to a URL and you're
04:25 - just getting the URL for this you
04:27 - sir no matter how many times you reload
04:29 - this page and reload this page it's
04:31 - going to give you the same result every
04:32 - time it's not changing anything
04:34 - now put is considered idempotent also
04:37 - because put is usually used for updating
04:41 - values so say you update the same
04:45 - parameter to the same value every time
04:46 - and say you want to set you know a user
04:50 - equal to Cori and then you submit that
04:54 - if you submit the update to set user
04:58 - equals to user equals Cori again and
05:00 - again and again every time it's just
05:03 - going to set that user equal to Cori and
05:05 - it's not changing the value so that's
05:07 - considered an item button as well now
05:09 - the method that's not considered item
05:11 - potent is post so post is used for
05:15 - changing data in the background so say
05:18 - for example you have a website with a
05:21 - voting system and every time you go to a
05:24 - certain URL it casts a vote so every
05:28 - time you go to that URL and it casts a
05:30 - vote at Casa vote and cast a vote that's
05:32 - not idempotent because every time you go
05:35 - to it you're getting a different result
05:37 - back it's either going to vote up or
05:40 - down based on the URL that you're going
05:42 - to so every time you get back a
05:45 - different different result so by
05:47 - definition post is not idempotent now
05:51 - lastly elite is considered idempotent so
05:55 - this one's a little bit confusing to
05:57 - some people because you would think that
06:00 - if you deleted a user and then you tried
06:02 - to deleted that user again maybe you'll
06:04 - get a 404 because that user no longer
06:06 - exists but you have to think about the
06:09 - the state of your server and the effect
06:11 - that it's having so say you delete user
06:14 - one two three here whenever you try to
06:17 - read elite and read elite and read elite
06:19 - it's already deleted that user so you
06:22 - can run that multiple multiple times
06:24 - again and again and again and it's not
06:26 - changing anything additionally on your
06:29 - server so the state of your server is
06:30 - still the same no matter how many times
06:32 - you call in a row so after the one time
06:35 - you call it every time after that gives
06:38 - the same result so it is considered
06:40 - idempotent
06:41 - so I hope that makes that more clear
06:43 - just remember whenever you run a
06:46 - function or do an operation after the
06:50 - first time the value can change on the
06:52 - first time like for example absolute
06:54 - value of 10 it changes from negative 10
06:56 - to 10 but if you keep passing it in and
06:58 - keep passing in and pass your result in
07:00 - over and over and over
07:01 - if you always get the same result that's
07:03 - considered idempotent so anytime you
07:05 - hear somebody mentioned item potent
07:07 - source umthe enlike that you'll know
07:09 - what your what they are talking about so
07:11 - hopefully this video is useful for you
07:13 - guys be sure to subscribe for future
07:15 - programming term videos if you have any
07:18 - questions just ask in the comment
07:19 - section below and thank you for watching

Cleaned transcript:

hey how's it going everybody this is going to be another video on programming terms and in this video we're going to look at the term idempotence so idempotence is actually a pretty easy concept to grasp once you see it in action but some of the definitions can be a little confusing if you look at Wikipedia the definition for idempotence it says the property of certain operations in mathematics and computer science that can be applied multiple times without changing the result beyond the initial application so if you're still a little confused by that then you will usually see this example here they'll say now what this example is saying is that if you have a function f and parameters X the result from f of X if you pass that into the function f again then that should equal the result of just f of X being run one time now if that's still a little bit unclear to you I think it'll clear it up once we see an example of this in some working code now the code that I have here is Python code but you know you can use any language for this it's it's language agnostic it's it's the same definition for any language that you use but just to show you what this is I'm using Python code here so I have a function here called add 10 and I have a parameter that I'm passing in to add pin that is num and if we compare this to our f of X from the last slide imagine that add 10 is our F and num is our X so now if you look down here you can see that I am printing out add 10 and I'm just going to go ahead and pass in 10 to that function so if I run this then you can see down here that my result is 20 now if we remember back to the definition of something that is idempotent it means that if we pass this result into the function again and we should get the same result that we got the first time so if I take this function and I wrap it around our result here and I run it again you can see that now we get 30 so by definition this is not idempotent because whenever we have F of 10 and we wrap that inside of F again that result we get is 30 and whenever we just do F of 10 that result is 20 so you can see if we map this to the definition here then this by definition is not item potent so let's look at an example of something that is idempotent so I have here let me comment this one out so there's a built in function in Python abs it just gives you the absolute value of a number so if I run this the absolute value of negative 10 is 10 but now if I take the absolute value of the absolute value and run it again it's 10 so I can keep doing this over and over and every time I pass in the result back into absolute the absolute value again no matter how many times you pass that value in it's still going to give you 10 every time and that's what item Potence means so hopefully that kind of clears that up and it doesn't have to be a function either I mean you can have a line in your code that is a equals 10 or something like that just an assignment and this is a line of code so it can be executed and no matter how many times you execute it in a row equals 10 equals 10 equals 10 run it over and over over every time it's going to do the exact same thing so that's an idempotent statement also so really the simple definition of idempotence is that whenever you do something over and over and over and over and over and you do the same thing that you get the same result back every time and that you're not building on top of that result now where you usually see this is in HTTP methods so a lot of these are considered idempotent so a get HTTP method is considered item potent so because if you go to a URL and you're just getting the URL for this you sir no matter how many times you reload this page and reload this page it's going to give you the same result every time it's not changing anything now put is considered idempotent also because put is usually used for updating values so say you update the same parameter to the same value every time and say you want to set you know a user equal to Cori and then you submit that if you submit the update to set user equals to user equals Cori again and again and again every time it's just going to set that user equal to Cori and it's not changing the value so that's considered an item button as well now the method that's not considered item potent is post so post is used for changing data in the background so say for example you have a website with a voting system and every time you go to a certain URL it casts a vote so every time you go to that URL and it casts a vote at Casa vote and cast a vote that's not idempotent because every time you go to it you're getting a different result back it's either going to vote up or down based on the URL that you're going to so every time you get back a different different result so by definition post is not idempotent now lastly elite is considered idempotent so this one's a little bit confusing to some people because you would think that if you deleted a user and then you tried to deleted that user again maybe you'll get a 404 because that user no longer exists but you have to think about the the state of your server and the effect that it's having so say you delete user one two three here whenever you try to read elite and read elite and read elite it's already deleted that user so you can run that multiple multiple times again and again and again and it's not changing anything additionally on your server so the state of your server is still the same no matter how many times you call in a row so after the one time you call it every time after that gives the same result so it is considered idempotent so I hope that makes that more clear just remember whenever you run a function or do an operation after the first time the value can change on the first time like for example absolute value of 10 it changes from negative 10 to 10 but if you keep passing it in and keep passing in and pass your result in over and over and over if you always get the same result that's considered idempotent so anytime you hear somebody mentioned item potent source umthe enlike that you'll know what your what they are talking about so hopefully this video is useful for you guys be sure to subscribe for future programming term videos if you have any questions just ask in the comment section below and thank you for watching
