With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this series of videos were going to be
00:02 - learning how to build a full-featured
00:04 - web application using the Django
00:05 - framework and Python
00:07 - so Django is a very popular framework
00:08 - that gives us a lot of functionality
00:10 - right out of the box
00:11 - and makes it really enjoyable to work
00:12 - with these web applications so first let
00:14 - me show you what will be building in
00:16 - this series of videos and then we'll get
00:17 - started learning how to actually put all
00:19 - of this together so this is the
00:20 - application that we'll be building here
00:22 - and you can see that it's a blog style
00:23 - of an application where different users
00:25 - can write different posts now this can
00:27 - be like blog post or they can be Twitter
00:30 - updates or whatever it is that you want
00:31 - to do with this now we have an
00:33 - authentication system so I'm logged in
00:35 - right now so we can log out and if we go
00:38 - to register then new users can create a
00:41 - new account if you already have an
00:43 - account then you can login and we can
00:45 - see at the login page we have this
00:46 - forgot password link now that will allow
00:48 - users to reset their password by getting
00:51 - an email now if we have an account then
00:54 - we can login so I'll say Corre EMS here
00:56 - is the username I created and I'll login
00:58 - with my password and now that we're
01:00 - logged in we have a few different
01:01 - options up here at the top so we can
01:03 - view our profile and update our profile
01:05 - information now we can also update the
01:08 - profile picture that we have here so if
01:09 - I go to choose file and choose a
01:12 - different file and update that then we
01:14 - can see that profile picture was updated
01:16 - now that's also resized in the
01:18 - background to save room on our web
01:19 - server if that picture is too large so
01:21 - if we go back to our home page then we
01:23 - can view other people's posts so we can
01:25 - view an individual post here by someone
01:27 - else now if we view an individual post
01:30 - that is something that we've written
01:31 - then we also have the ability to update
01:34 - or delete that post so if I go to update
01:36 - and say my latest updated post and post
01:39 - that then we can see that now that post
01:42 - was updated with that new content so we
01:44 - also have the ability to delete posts if
01:46 - I click on delete then we'll ask if we
01:48 - want to confirm that we want to delete
01:50 - the post so I'll say yes and then back
01:52 - on the home page we can see that that
01:53 - post was deleted so that's a quick tour
01:55 - of the application that we're going to
01:56 - be building and building something like
01:58 - this is a great way to learn the ins and
01:59 - outs of a framework because you're going
02:01 - to be exposed to so many different
02:02 - things so for example we'll learn how to
02:04 - work with databases and also how to
02:07 - create an authentication system and
02:08 - accept user input from forms and send
02:12 - email
02:13 - to reset passwords and all kinds of
02:15 - different things like that now since
02:16 - this is a django application we also
02:18 - have the ability to access an admin page
02:21 - if we have the correct permissions and
02:23 - within here you get a nice GUI to be
02:26 - able to view all of this back-end
02:27 - information and update it on the fly if
02:30 - you'd like so let me go back to the main
02:33 - site here so we're going to be learning
02:34 - how to add a lot of functionality to an
02:36 - application within this series now I'm
02:38 - gonna mention this several times
02:39 - throughout the series but if you're
02:41 - following along and would like to
02:42 - download the source code of each step in
02:44 - the process then I will have links to
02:45 - the source code of each video in the
02:47 - description section below so that you
02:48 - can download those if you'd like and
02:50 - also if you'd like to know how to build
02:51 - the same application and another
02:53 - framework then I also have a flash
02:55 - series where I've created the same
02:56 - application using the flask framework so
02:59 - if you're interested in that then I'll
03:00 - put a link to that in the description
03:01 - section below as well also I'll be doing
03:04 - a video in the near future where I
03:05 - compare the two frameworks and when it
03:07 - might be best to use one over the other
03:09 - okay so let's get started with learning
03:11 - how to build this application using
03:13 - Django so I'm going to close down my
03:15 - browser here and pull up my terminal and
03:18 - if you're on Windows you can pull up
03:19 - your command line so first off let's
03:21 - start off by installing the packages
03:23 - that we need to get started out so you
03:24 - can do this in a virtual environment or
03:26 - in your default Python environment but
03:28 - it's always a good idea to separate
03:29 - different projects into their own
03:30 - virtual environments now I'm mainly
03:32 - going to focus on Django in this series
03:34 - so if you need to install Python or want
03:37 - to learn how to work with virtual
03:38 - environments or are wondering how I set
03:40 - up my text editor or anything like that
03:42 - then I'm gonna put links to those videos
03:43 - in the description section below but I'm
03:45 - not gonna go into those and detail in
03:48 - this series I'm just going to assume
03:49 - that you're specifically ready to start
03:51 - learning Django okay so with that said
03:52 - let's get started so first let's install
03:54 - Django so to do this we can simply do a
03:56 - pip install so I'll say pip install
03:59 - Django and we can see it looks like it's
04:02 - successfully installed Django 2.1 but to
04:05 - be sure let's run a command and that
04:08 - command is python - m django - - version
04:13 - and that should display the version of
04:15 - django that we are using so if that runs
04:17 - then django was installed correctly now
04:20 - you can also see that we're using django
04:22 - version 2.1 in this series so be sure
04:24 - that you're also using Django to point
04:26 - 1 or higher or else some of what you
04:28 - learned here might not work in previous
04:30 - versions now I'm also using Python 3.7
04:33 - so you'll want to use a later version of
04:36 - Python also if you can there are some
04:38 - features that I'll be using in this
04:40 - series such as f strings that are only
04:42 - available if you're running Python 3
04:44 - point 6 or higher ok so now we have
04:46 - Django installed so now let's create a
04:48 - new project from scratch so I'm on my
04:50 - desktop here you can create this project
04:52 - anywhere you'd like on your machine but
04:54 - I'm going to use my desktop so to create
04:56 - a new project we're going to use some
04:58 - commands that are available to us now
05:00 - that Django is installed and one of
05:02 - these commands is Django admin so if you
05:05 - type that in then it should show you the
05:06 - available subcommands so if I run that
05:08 - that is Django - admin then we can see
05:12 - that we get a list of subcommands here
05:15 - and we can see that there are a lot of
05:17 - different sub commands listed here and
05:18 - we'll see a couple of these later in the
05:20 - video but we're going to use the one
05:22 - right now called start project which is
05:25 - right here so start project will create
05:27 - a new Django project for us that has a
05:29 - complete structure with different files
05:31 - and everything else that we'll need to
05:32 - get started so let's do that
05:34 - so I'm simply I'll clear my screen here
05:37 - and I'm simply gonna say Django - admin
05:41 - start project and now we can specify the
05:44 - name of our project so I'm just gonna
05:46 - call mine Django let's do Django -
05:49 - project and run that ok so that's not a
05:52 - valid project name let's see if I use an
05:55 - underscore instead ok so that worked I
05:57 - always forget which one is which so you
05:59 - can create a project with an underscore
06:01 - but not a dash so I created a new
06:03 - project called Django underscore project
06:06 - and now that we've created that if I
06:08 - look at my desktop then we can see that
06:11 - now I have a directory on here called
06:13 - Django underscore project ok so first
06:16 - let's simply CD into this directory and
06:19 - look at the project structure of what
06:21 - that start project command just created
06:23 - for us
06:24 - so within my command line here I'm gonna
06:25 - say CD into Django underscore project
06:29 - and now I'm just going to open this
06:30 - project and a text editor now I'm using
06:33 - sublime text but you can use any editor
06:35 - that you'd like I have a video on how I
06:37 - set up my editor and that will be in the
06:39 - description
06:40 - and below if anyone is interested so I'm
06:42 - going to open up sublime text here and
06:44 - then drag our Django project into
06:47 - sublime text and open that up so now
06:50 - let's look at the project structure that
06:52 - that start project command created for
06:54 - us now I don't know how to make the text
06:56 - over here in the sidebar of sublime text
06:58 - any bigger so instead I'm gonna use my
07:01 - terminal to look at this so let me open
07:03 - the terminal back up here and clear the
07:06 - screen now on my machine I have a
07:07 - command called tree that helps visualize
07:09 - this a little bit better so I'm going to
07:11 - use that now you might not have this
07:13 - command installed on your machine but
07:15 - you could simply use your editor to view
07:17 - this structure instead so I'm gonna use
07:19 - that tree command okay so we can see
07:21 - that we have a pretty simple structure
07:23 - here now I'm going to open up my editor
07:25 - and go through each of these really
07:27 - quick so just so we can still see the
07:29 - terminal and the structure here I'm
07:30 - going to put this over here on the side
07:33 - about right there and my editor I'm
07:36 - going to drag over here and make this
07:38 - take up about 3/4 of the screen here
07:41 - okay so we can see here in the structure
07:43 - that on the base level we have a manage
07:46 - pie file and a django project directory
07:50 - and that man is not pi file is a file
07:52 - that allows us to run command line
07:54 - commands so let me open that up here in
07:57 - my editor and this is what that manage
08:00 - dot pi file looks like now we'll see
08:02 - this in action in just a second when we
08:03 - run this default site but we won't
08:06 - actually be making any changes to this
08:07 - file so also in our base directory for
08:10 - our project we also have a directory
08:12 - called
08:13 - django project which is also the name
08:15 - that we used for our project itself and
08:17 - within that directory let me open that
08:20 - so within this directory we can see that
08:22 - we have four different files the first
08:24 - is this double underscore Anette dot pi
08:27 - and if we look at that in our text
08:29 - editor then we can see that that is just
08:30 - an empty file so that just tells python
08:32 - that this is a Python package so next we
08:36 - have this settings dot PI file so if I
08:38 - open that in the editor as you can
08:40 - probably tell from the name this is
08:42 - where we'll change different settings
08:43 - and configurations so we'll be using
08:45 - this throughout the series we can see
08:47 - that most of these files have good
08:49 - documentation and links provided where
08:52 - we can learn more
08:53 - information now if we get glanced
08:55 - through here then we can see up here
08:57 - towards the top that we have a secret
08:59 - key and that just adds a lot of security
09:02 - enhancements to Django now we can see
09:04 - that we also have debug set to true here
09:07 - we have an installed app section we have
09:10 - some database settings here and all
09:14 - kinds of different useful settings that
09:16 - we will talk about more in future videos
09:19 - but for now we're just taking a quick
09:20 - glance so looking back at our project
09:23 - structure we also have this URL spy file
09:26 - so let me open that up now this is where
09:28 - we'll set up the mapping from certain
09:30 - URLs to where we sent the user so for
09:32 - example there is one path pattern here
09:35 - set up right now and that is for admin
09:38 - so if we were to go to our site and go
09:40 - to the route admin then it will send us
09:43 - to this admin dot sites not URLs and
09:46 - we'll see more about this in just a
09:47 - moment when we add some additional
09:49 - routes okay lastly we can see that we
09:51 - have this whiskey dot pie file here if I
09:54 - open this up in the editor so whiskey or
09:56 - WSGI
09:57 - is how our Python web application and
10:00 - the web server communicate so Django set
10:02 - up a simple default whiskey
10:04 - configuration for us in this file but
10:06 - we're not going to be actually touching
10:07 - this file okay so that is a quick
10:09 - overview of the project structure that
10:12 - was created for us when we ran that
10:14 - start project command so now let's
10:16 - actually open up the default web site in
10:18 - our browser unlike a framework like
10:21 - flask we actually don't have to write a
10:23 - single line of code to open up a basic
10:26 - web web site in our browser we just have
10:28 - to run a command so to do that we're
10:31 - just going to use that manage py file so
10:34 - to run our server that to access our
10:36 - site we're just going to go over to our
10:38 - terminal and I'll make this larger again
10:40 - so that we can see everything and now
10:42 - within that Django project in the same
10:44 - directory where that manage py file is
10:46 - we can say Python manage py run server
10:50 - and that is a command that we're going
10:54 - to be using a lot okay so you're likely
10:56 - going to see this warning here that says
10:59 - that you have 15 unapplied migrations
11:01 - and then it tells you a command that you
11:04 - can run to get rid of that warning
11:06 - so let's not do that right now I'll
11:08 - explain this migration stuff in just a
11:10 - bit
11:10 - but for now if we look here at the
11:12 - bottom it says that our website is now
11:15 - running and that we can access our site
11:18 - by going to this URL here HTTP 127 0 to
11:23 - 0.1 port 8000 now another name for 127 0
11:28 - dot 0 dot 1 is localhost it's basically
11:31 - just our local computer that we're
11:33 - currently on now this is actually a
11:34 - running webserver so we have to leave
11:36 - this running while you're viewing your
11:38 - site in the browser or else you won't be
11:40 - able to see it so let's copy and paste
11:42 - this URL that it gives us and open this
11:45 - up in the browser so I'm going to open a
11:47 - new incognito window here and paste that
11:50 - in to our URL bar and we can see that we
11:52 - have what looks to be a website here so
11:55 - this is the default website that Django
11:57 - has created for us and in this series we
11:59 - will modify this so that we have the web
12:01 - application that I showed at the
12:03 - beginning of the video so by default it
12:05 - shows us that a page that says that
12:07 - debug is equal to true and also it
12:10 - provides us some links down here to the
12:12 - Django documentation and stuff like that
12:14 - now when I said that 127 zero to 0.1 was
12:17 - the IP address of our local machine I
12:19 - also mentioned that there's an alias for
12:21 - that IP address called localhost and I
12:23 - like using that more than the IP address
12:25 - itself so if I replace that 127 does
12:29 - zero to 0.1 with localhost then this
12:32 - should still work so now we're at
12:34 - localhost port 8000 and we still have
12:36 - that same site ok so if you remember I
12:38 - said that within our projects URLs dot
12:41 - PI module that we had that admin route
12:44 - so let's try to navigate to that route
12:47 - really quick so if I go to Ford slash
12:48 - admin then we can see that there's
12:50 - actually something on this page we get a
12:52 - login screen so let's pull back up the
12:55 - project and open that URLs dot PI module
12:59 - one more time here so like I said before
13:01 - this is a way to map URLs to certain
13:04 - locations so that they can be handled in
13:06 - a certain way so in this case when we
13:08 - went to ford slash admin then it's going
13:11 - to admin site stat URLs and then the
13:14 - logic within that location handles the
13:16 - route further and we'll look at adding
13:18 - more routes
13:19 - but for now that is how that admin route
13:22 - is working so the logic at this admin
13:24 - dot site URLs that is what allows this
13:28 - admin page here to work correctly now we
13:31 - can't access this with any credentials
13:33 - just yet because there is some more that
13:35 - we need to do first but I just wanted to
13:37 - show you that the URLs and that URLs
13:39 - module are already routing us to
13:41 - different locations and in the next
13:42 - video we'll see how to add some more
13:44 - routes to that module so that we can
13:46 - show users exactly what we want them to
13:47 - see when navigating to different areas
13:49 - of the site but for now let's open our
13:52 - terminal back up and stop running our
13:54 - server so I will pull up my terminal and
13:57 - you can stop running your server by
13:59 - hitting ctrl C and sometimes I have to
14:02 - hit that twice to get that to stop for
14:04 - some reason but just hit ctrl C a couple
14:06 - of times and it should stop now I will
14:09 - clear our page now with that server
14:11 - running and debug mode like it was it
14:13 - should automatically reload any changes
14:15 - that we make to our code but if you ever
14:17 - have any trouble with the website not
14:18 - reloading for any reason then you might
14:20 - want to stop the server just like we did
14:23 - and restart it by running the command
14:25 - that we reran earlier so to bring it
14:27 - back up we can just do python manage py
14:30 - run server and that runs the server
14:32 - again ok so I think that's going to do
14:34 - it for this video in this video we
14:35 - learned how to get Django installed and
14:37 - how to create a new project we also
14:39 - looked at the structure of what gets
14:41 - created and how to pull up that default
14:43 - site in the browser so in the next video
14:45 - we'll learn how to create an application
14:47 - for our site and set up some basic
14:49 - routes now that might sound confusing
14:51 - right now that we'll be creating an
14:52 - application within our current project
14:54 - but we'll see what that means in the
14:56 - next video but if you have any questions
14:57 - about what we covered in this video then
14:59 - feel free to ask in the comment section
15:00 - below and I'll do my best to answer
15:02 - those and if you enjoy these tutorials
15:03 - and would like to support them then
15:05 - there are several ways you can do that
15:06 - the easiest ways to simply like the
15:07 - video and give it a thumbs up and also
15:09 - it's a huge help to share these videos
15:10 - with anyone who you think would find
15:11 - them useful and if you have the means
15:13 - you can contribute through patreon and
15:14 - there's a link to that page and in
15:15 - description section below be sure to
15:17 - subscribe for future videos and thank
15:18 - you all for watching
15:20 - you
15:29 - you

Cleaned transcript:

hey there how's it going everybody in this series of videos were going to be learning how to build a fullfeatured web application using the Django framework and Python so Django is a very popular framework that gives us a lot of functionality right out of the box and makes it really enjoyable to work with these web applications so first let me show you what will be building in this series of videos and then we'll get started learning how to actually put all of this together so this is the application that we'll be building here and you can see that it's a blog style of an application where different users can write different posts now this can be like blog post or they can be Twitter updates or whatever it is that you want to do with this now we have an authentication system so I'm logged in right now so we can log out and if we go to register then new users can create a new account if you already have an account then you can login and we can see at the login page we have this forgot password link now that will allow users to reset their password by getting an email now if we have an account then we can login so I'll say Corre EMS here is the username I created and I'll login with my password and now that we're logged in we have a few different options up here at the top so we can view our profile and update our profile information now we can also update the profile picture that we have here so if I go to choose file and choose a different file and update that then we can see that profile picture was updated now that's also resized in the background to save room on our web server if that picture is too large so if we go back to our home page then we can view other people's posts so we can view an individual post here by someone else now if we view an individual post that is something that we've written then we also have the ability to update or delete that post so if I go to update and say my latest updated post and post that then we can see that now that post was updated with that new content so we also have the ability to delete posts if I click on delete then we'll ask if we want to confirm that we want to delete the post so I'll say yes and then back on the home page we can see that that post was deleted so that's a quick tour of the application that we're going to be building and building something like this is a great way to learn the ins and outs of a framework because you're going to be exposed to so many different things so for example we'll learn how to work with databases and also how to create an authentication system and accept user input from forms and send email to reset passwords and all kinds of different things like that now since this is a django application we also have the ability to access an admin page if we have the correct permissions and within here you get a nice GUI to be able to view all of this backend information and update it on the fly if you'd like so let me go back to the main site here so we're going to be learning how to add a lot of functionality to an application within this series now I'm gonna mention this several times throughout the series but if you're following along and would like to download the source code of each step in the process then I will have links to the source code of each video in the description section below so that you can download those if you'd like and also if you'd like to know how to build the same application and another framework then I also have a flash series where I've created the same application using the flask framework so if you're interested in that then I'll put a link to that in the description section below as well also I'll be doing a video in the near future where I compare the two frameworks and when it might be best to use one over the other okay so let's get started with learning how to build this application using Django so I'm going to close down my browser here and pull up my terminal and if you're on Windows you can pull up your command line so first off let's start off by installing the packages that we need to get started out so you can do this in a virtual environment or in your default Python environment but it's always a good idea to separate different projects into their own virtual environments now I'm mainly going to focus on Django in this series so if you need to install Python or want to learn how to work with virtual environments or are wondering how I set up my text editor or anything like that then I'm gonna put links to those videos in the description section below but I'm not gonna go into those and detail in this series I'm just going to assume that you're specifically ready to start learning Django okay so with that said let's get started so first let's install Django so to do this we can simply do a pip install so I'll say pip install Django and we can see it looks like it's successfully installed Django 2.1 but to be sure let's run a command and that command is python m django version and that should display the version of django that we are using so if that runs then django was installed correctly now you can also see that we're using django version 2.1 in this series so be sure that you're also using Django to point 1 or higher or else some of what you learned here might not work in previous versions now I'm also using Python 3.7 so you'll want to use a later version of Python also if you can there are some features that I'll be using in this series such as f strings that are only available if you're running Python 3 point 6 or higher ok so now we have Django installed so now let's create a new project from scratch so I'm on my desktop here you can create this project anywhere you'd like on your machine but I'm going to use my desktop so to create a new project we're going to use some commands that are available to us now that Django is installed and one of these commands is Django admin so if you type that in then it should show you the available subcommands so if I run that that is Django admin then we can see that we get a list of subcommands here and we can see that there are a lot of different sub commands listed here and we'll see a couple of these later in the video but we're going to use the one right now called start project which is right here so start project will create a new Django project for us that has a complete structure with different files and everything else that we'll need to get started so let's do that so I'm simply I'll clear my screen here and I'm simply gonna say Django admin start project and now we can specify the name of our project so I'm just gonna call mine Django let's do Django project and run that ok so that's not a valid project name let's see if I use an underscore instead ok so that worked I always forget which one is which so you can create a project with an underscore but not a dash so I created a new project called Django underscore project and now that we've created that if I look at my desktop then we can see that now I have a directory on here called Django underscore project ok so first let's simply CD into this directory and look at the project structure of what that start project command just created for us so within my command line here I'm gonna say CD into Django underscore project and now I'm just going to open this project and a text editor now I'm using sublime text but you can use any editor that you'd like I have a video on how I set up my editor and that will be in the description and below if anyone is interested so I'm going to open up sublime text here and then drag our Django project into sublime text and open that up so now let's look at the project structure that that start project command created for us now I don't know how to make the text over here in the sidebar of sublime text any bigger so instead I'm gonna use my terminal to look at this so let me open the terminal back up here and clear the screen now on my machine I have a command called tree that helps visualize this a little bit better so I'm going to use that now you might not have this command installed on your machine but you could simply use your editor to view this structure instead so I'm gonna use that tree command okay so we can see that we have a pretty simple structure here now I'm going to open up my editor and go through each of these really quick so just so we can still see the terminal and the structure here I'm going to put this over here on the side about right there and my editor I'm going to drag over here and make this take up about 3/4 of the screen here okay so we can see here in the structure that on the base level we have a manage pie file and a django project directory and that man is not pi file is a file that allows us to run command line commands so let me open that up here in my editor and this is what that manage dot pi file looks like now we'll see this in action in just a second when we run this default site but we won't actually be making any changes to this file so also in our base directory for our project we also have a directory called django project which is also the name that we used for our project itself and within that directory let me open that so within this directory we can see that we have four different files the first is this double underscore Anette dot pi and if we look at that in our text editor then we can see that that is just an empty file so that just tells python that this is a Python package so next we have this settings dot PI file so if I open that in the editor as you can probably tell from the name this is where we'll change different settings and configurations so we'll be using this throughout the series we can see that most of these files have good documentation and links provided where we can learn more information now if we get glanced through here then we can see up here towards the top that we have a secret key and that just adds a lot of security enhancements to Django now we can see that we also have debug set to true here we have an installed app section we have some database settings here and all kinds of different useful settings that we will talk about more in future videos but for now we're just taking a quick glance so looking back at our project structure we also have this URL spy file so let me open that up now this is where we'll set up the mapping from certain URLs to where we sent the user so for example there is one path pattern here set up right now and that is for admin so if we were to go to our site and go to the route admin then it will send us to this admin dot sites not URLs and we'll see more about this in just a moment when we add some additional routes okay lastly we can see that we have this whiskey dot pie file here if I open this up in the editor so whiskey or WSGI is how our Python web application and the web server communicate so Django set up a simple default whiskey configuration for us in this file but we're not going to be actually touching this file okay so that is a quick overview of the project structure that was created for us when we ran that start project command so now let's actually open up the default web site in our browser unlike a framework like flask we actually don't have to write a single line of code to open up a basic web web site in our browser we just have to run a command so to do that we're just going to use that manage py file so to run our server that to access our site we're just going to go over to our terminal and I'll make this larger again so that we can see everything and now within that Django project in the same directory where that manage py file is we can say Python manage py run server and that is a command that we're going to be using a lot okay so you're likely going to see this warning here that says that you have 15 unapplied migrations and then it tells you a command that you can run to get rid of that warning so let's not do that right now I'll explain this migration stuff in just a bit but for now if we look here at the bottom it says that our website is now running and that we can access our site by going to this URL here HTTP 127 0 to 0.1 port 8000 now another name for 127 0 dot 0 dot 1 is localhost it's basically just our local computer that we're currently on now this is actually a running webserver so we have to leave this running while you're viewing your site in the browser or else you won't be able to see it so let's copy and paste this URL that it gives us and open this up in the browser so I'm going to open a new incognito window here and paste that in to our URL bar and we can see that we have what looks to be a website here so this is the default website that Django has created for us and in this series we will modify this so that we have the web application that I showed at the beginning of the video so by default it shows us that a page that says that debug is equal to true and also it provides us some links down here to the Django documentation and stuff like that now when I said that 127 zero to 0.1 was the IP address of our local machine I also mentioned that there's an alias for that IP address called localhost and I like using that more than the IP address itself so if I replace that 127 does zero to 0.1 with localhost then this should still work so now we're at localhost port 8000 and we still have that same site ok so if you remember I said that within our projects URLs dot PI module that we had that admin route so let's try to navigate to that route really quick so if I go to Ford slash admin then we can see that there's actually something on this page we get a login screen so let's pull back up the project and open that URLs dot PI module one more time here so like I said before this is a way to map URLs to certain locations so that they can be handled in a certain way so in this case when we went to ford slash admin then it's going to admin site stat URLs and then the logic within that location handles the route further and we'll look at adding more routes but for now that is how that admin route is working so the logic at this admin dot site URLs that is what allows this admin page here to work correctly now we can't access this with any credentials just yet because there is some more that we need to do first but I just wanted to show you that the URLs and that URLs module are already routing us to different locations and in the next video we'll see how to add some more routes to that module so that we can show users exactly what we want them to see when navigating to different areas of the site but for now let's open our terminal back up and stop running our server so I will pull up my terminal and you can stop running your server by hitting ctrl C and sometimes I have to hit that twice to get that to stop for some reason but just hit ctrl C a couple of times and it should stop now I will clear our page now with that server running and debug mode like it was it should automatically reload any changes that we make to our code but if you ever have any trouble with the website not reloading for any reason then you might want to stop the server just like we did and restart it by running the command that we reran earlier so to bring it back up we can just do python manage py run server and that runs the server again ok so I think that's going to do it for this video in this video we learned how to get Django installed and how to create a new project we also looked at the structure of what gets created and how to pull up that default site in the browser so in the next video we'll learn how to create an application for our site and set up some basic routes now that might sound confusing right now that we'll be creating an application within our current project but we'll see what that means in the next video but if you have any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page and in description section below be sure to subscribe for future videos and thank you all for watching you you
