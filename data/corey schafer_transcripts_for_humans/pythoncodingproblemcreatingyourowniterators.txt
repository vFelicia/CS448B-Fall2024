With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video I'm going to try something a
00:03 - bit different so I've had a lot of
00:04 - requests for me to provide some practice
00:06 - problems alongside my tutorials so that
00:08 - people can practice what they've learned
00:09 - so that's what I'm going to try to do
00:11 - with these videos so the plan is that
00:13 - I'll occasionally release a coding
00:15 - problem video alongside a tutorial so
00:17 - that you can practice what you've
00:19 - learned and see my solution now the
00:21 - reason that I'm making these videos
00:22 - separate instead of just adding the code
00:24 - and problem to the tutorial video is
00:26 - because I want to keep the tutorials
00:27 - separate from the problems so that the
00:29 - tutorial videos don't get excessively
00:31 - long and I also want the problems to be
00:33 - optional so for those who feel like you
00:36 - don't need to practice these things that
00:38 - we've learned in the videos then you can
00:40 - simply skip these coding problem videos
00:42 - so with that said let me know what you
00:44 - all think about this new thing that I'm
00:45 - trying out I love your all's feedback
00:47 - and I want to make sure that most of you
00:48 - think that this is going to be
00:50 - beneficial so I'll definitely monitor
00:52 - the comments and feedback on this video
00:54 - to see if it's something that I want to
00:56 - continue doing but with that said let's
00:58 - go on with the coding problem for this
01:00 - video so this coding problem is going to
01:02 - be about iterators and iterables
01:04 - now if you haven't watched a tutorial i
01:06 - released on iterators and iterables then
01:08 - I highly recommend that you watch that
01:09 - video first so I'll leave a link to that
01:11 - video in a description section below
01:14 - so after you've watched that video then
01:15 - you should have a pretty good
01:16 - understanding of how iterators and
01:18 - iterables work and also how we can
01:20 - create our own using either a class or a
01:23 - generator so in this video let me give
01:25 - you an example problem that you can try
01:27 - to solve and if you want you can pause
01:29 - the video before I give you my solutions
01:31 - so let's say that we want to create a
01:34 - sentence object where we expect a string
01:37 - of words and when we loop over the
01:40 - sentence we simply want to loop over the
01:42 - words in the sentence now let's keep it
01:45 - simple and not worry about punctuation
01:46 - or anything like that for the time being
01:49 - so let's just split the sentence up
01:51 - based on spaces alone so let's first
01:54 - create a sentence class that does this
01:56 - and then let's do the same thing by
01:58 - creating a sentence generator function
02:00 - so for example for the class that should
02:04 - look like this so I can just say my
02:06 - sentence is equal to and we're going to
02:08 - create this class and then we can just
02:10 - pass in a simple sentence and then we
02:13 - can do a
02:13 - that says forward in my sentence print
02:16 - out the word now that should have the
02:19 - following output it should just loop
02:21 - through and say this is a test so it
02:24 - just looped through and printed out one
02:26 - word at a time from that sentence so
02:28 - again for the coding problem I would
02:30 - like you to create a class that has this
02:33 - functionality and then I would also like
02:35 - you to create a generator that has this
02:37 - functionality so if you want to pause
02:39 - the video and give that a try then you
02:42 - can go ahead and do that now but with
02:44 - that said then let me go ahead and show
02:46 - you my solution to this problem so I'm
02:48 - going to come up to the top here and
02:50 - create this sentence class so I'll say
02:54 - class sentence and first I'll create and
02:57 - a knit method so I'll say double
02:59 - underscore a knit and we want to pass in
03:02 - self for the instance and then we also
03:04 - want to pass in a sentence and now we
03:07 - can simply create a class attribute from
03:09 - this so I'll say self dot sentence is
03:11 - equal to sentence and now if you
03:15 - remember what I said in the iterators
03:16 - tutorial an iterator is an object with a
03:19 - state so that it remembers where it is
03:21 - during its iteration so in order to keep
03:23 - track of where we currently are in our
03:25 - loop let's add in an index attribute so
03:29 - I'm going to say self dot index is equal
03:32 - to zero and we'll see how I'm gonna use
03:34 - this in just a minute okay and now we
03:36 - also need to have our list of words that
03:39 - we're going to iterate over so we can
03:41 - get the words from the sentence just by
03:43 - saying so I'll say self dot words is
03:46 - equal to self dot sentence dot split now
03:51 - if you've never used the split method on
03:53 - a string basically it splits the string
03:56 - into a list based on a specific
03:57 - delimiter by default it splits the
04:00 - string by spaces which is what we want
04:02 - in this tutorial but if you wanted to
04:04 - split the string on some other delimiter
04:06 - then you could just pass that in as an
04:08 - argument okay and now to make this class
04:10 - interval we need to create a dunder
04:12 - itter method and that method has to
04:15 - return an object that has a dunder next
04:17 - method so we're going to create the
04:19 - dunder next method on this class itself
04:21 - so we can simply return self from dunder
04:25 - itter so I can say
04:27 - dunder underscore it er look let me fix
04:32 - that there so we can create an inter
04:35 - method here and we can simply return
04:37 - self because this class itself is going
04:40 - to have that dunder next method okay and
04:42 - finally we need to create that dunder
04:45 - next method now this is what is going to
04:47 - return the next word in the sentence and
04:50 - if it doesn't have any more words then
04:51 - we can raise a stop iteration exception
04:54 - so we will create this by saying def
04:57 - double underscore next and we will take
05:01 - self as an argument there and now we
05:04 - need the logic for returning the next
05:06 - word in the sentence and if there are no
05:09 - more words then we need to raise a stop
05:11 - iteration exception so the way I'm going
05:14 - to do this is I'll just say if self dot
05:16 - index is greater than or equal to the
05:20 - length of our self dot words list if our
05:25 - index is greater than or equal to the
05:27 - length of that list then it means that
05:29 - we have looped through all of those
05:31 - values already so we can simply raise
05:34 - stop iteration exception and now if it
05:39 - doesn't raise that stop iteration then
05:41 - we want to return the current word of
05:45 - the index that we are on but we also
05:47 - want to increment the index so that we
05:49 - go to the next word the next time
05:52 - through this next function so the way
05:54 - that I'm going to do this is I'm just
05:56 - going to create a temporary variable
05:58 - here and just say index is equal to self
06:01 - dot index and now we will increment self
06:04 - dot index so I'll say self dot index
06:06 - plus equals 1 and now we will return
06:10 - self dot words and we want to return the
06:16 - index here that we set to the previous
06:19 - value so let me save that so let me run
06:22 - through this one more time so that it's
06:23 - clear what I'm doing here so the first
06:25 - time that we run through this self dot
06:27 - index is going to be equal to zero so
06:30 - it's going to come in and say if zero is
06:33 - greater than or equal to length of self
06:35 - dot words and if we're using our example
06:37 - down here then that's going to be for
06:40 - words
06:40 - so this is not going to be true so it's
06:43 - not going to raise that stop iteration
06:44 - and then it's going to say index is
06:47 - equal to self dot index which will set
06:49 - this equal to zero then we're going to
06:52 - increment self dot index by one so then
06:54 - self dot index will be one and then
06:57 - we're going to return the self dot words
07:01 - at the index of zero because remember
07:04 - this index is zero it's only self done
07:07 - index that is now one so the first time
07:09 - through this is going to return the zero
07:12 - index of self dot words which will be
07:14 - the first word the next time through
07:16 - that self dot index is now equal to 1
07:19 - because we incremented it and then it's
07:21 - just going to keep looping through that
07:23 - returning the next word until it finally
07:25 - says our until our index is higher than
07:29 - the length of our list and then it's
07:31 - going to raise that stop iteration
07:33 - exception so hopefully that makes sense
07:34 - okay so with that class created we
07:37 - should be able to run the test code that
07:39 - we wrote before and it should loop over
07:41 - the words in that sentence let me make
07:43 - the text just a little smaller here to
07:46 - see if we can fit all this on one screen
07:48 - okay
07:48 - so here's the test code that we had
07:50 - before we're saying my sentence is equal
07:52 - to a new instance of our sentence class
07:55 - and we're passing in this sentence of
07:57 - this is a test and now we're looping
07:59 - over this my sentence variable and
08:01 - printing out those words and the output
08:04 - I said should be you know the first word
08:07 - second word third word fourth word so if
08:10 - I run this then we can see that that
08:13 - worked it ran through our for loop and
08:15 - printed out the words one at a time so
08:18 - since we were able to use that in a for
08:20 - loop it means that our object is
08:22 - iterable but it is also an iterator
08:24 - because it has a next method so if we
08:27 - only wanted one word at a time then we
08:30 - could just print out the next variable
08:33 - from my sentence so if I comment this
08:37 - out then we can simply say print next
08:43 - and we will just print out the next
08:45 - value from my sentence oops let me copy
08:48 - that and paste that there and let me do
08:50 - this a couple of times actually and run
08:52 - that and we can see that since we
08:54 - print it out next two times that it
08:57 - printed out the first two words now if I
09:00 - was to do this five times there are only
09:02 - four words so if I did this five times
09:04 - then we should loop through our entire
09:07 - sentence and then hit a stop iteration
09:09 - exception so if I run that then scroll
09:13 - up then we can see that we loop through
09:15 - the entire sentence and then this last
09:17 - part here we hit an error of our stop
09:20 - iteration now that's expected because
09:22 - we're trying to get the next value
09:24 - manually whenever we use a for loop it
09:28 - catches that stop iteration exception
09:29 - for us and it doesn't show us that but
09:31 - when we do it manually we should see
09:33 - that so that's working as it should okay
09:35 - so now I'm going to comment those out
09:38 - and scroll up a little bit and uncomment
09:41 - out my for loop here okay so hopefully
09:45 - you got something working there even if
09:47 - your solution was a little different
09:48 - than mine you probably could have used a
09:51 - try except block here within the next
09:53 - method as well as long as you got it
09:56 - working and it was able to loop through
09:58 - with the for loop and then hit that stop
09:59 - iteration exception when you tried to
10:02 - you know do more than the words that
10:05 - were in the sentence then that should be
10:07 - a good solution okay so now that we've
10:09 - created a class let's now try to create
10:12 - a generator function that does the same
10:14 - thing now I actually think that
10:16 - generators are a lot more simple since
10:18 - they take care of the inner and next
10:20 - methods for us so if you want to try to
10:22 - write a generator function that does the
10:24 - same thing as our class then you can
10:27 - pause the video and do that now but with
10:30 - that said here is my solution to writing
10:32 - this generator so I'm going to put this
10:35 - right underneath the class here so let
10:39 - me scroll down a little bit and now
10:41 - remember this is going to be a generator
10:43 - function so we'll do a function with def
10:45 - and I'm just going to call this sentence
10:47 - with a lowercase s to differentiate it
10:50 - between our class now we'll pass in a
10:53 - parameter here of sentence and for this
10:55 - generator I'm just gonna simply do a
10:57 - loop in here and say for word in
11:00 - sentence dot split and then I'm going to
11:05 - yield the word and
11:07 - our generator it should be as simple as
11:10 - that so what we're doing here is taking
11:12 - in our sentence and then we are saying
11:14 - forward in sentence not split and by
11:16 - default I said that that splits on a
11:19 - space and that's going to return a list
11:21 - of words and since we're looping over
11:23 - that we are just yielding each word one
11:26 - at a time and when there are no more
11:28 - words to loop over then it will
11:29 - automatically take care of that stop
11:31 - iteration exception for us so now let's
11:34 - test this so instead of using our class
11:37 - sentence here let's instead use our
11:39 - generator function so I will lowercase
11:42 - that so that we're now using this
11:44 - generator instead and now we are looping
11:48 - over my sentence here so it should print
11:51 - out one word at a time here so if I run
11:53 - that then you can see that we get one
11:55 - word at a time so that's good let me
11:57 - comment out that and uncomment our print
12:02 - statements here to make sure that our
12:03 - next functions are still working so if I
12:06 - save that and run it then sometimes this
12:09 - runs out of order for some reason in
12:10 - sublime text but now we can see that it
12:13 - loops through those first four words and
12:16 - on the fifth word we get this stop
12:18 - iteration exception okay so it looks
12:20 - like that generator function is working
12:22 - the way that we want it to now I think
12:24 - that those generators are a lot easier
12:26 - to write than these custom classes but
12:29 - depending on your use case you might
12:30 - need to know how to do the inner method
12:33 - and the next method on a class as well
12:35 - but I find myself using generators a lot
12:38 - more than these inner and next methods
12:41 - just because of how simple they are okay
12:43 - so let me close out of the output there
12:45 - and scroll up here to the top okay so
12:48 - that's going to do it for this coding
12:50 - problem now if any of you have any
12:51 - different solutions to this problem then
12:53 - let me know in the comments section
12:55 - below I'd be interested to see what you
12:56 - came up with now I'll have my code
12:58 - available on github if you'd like to
13:00 - have a look and I'll leave a link to
13:01 - that in the description section below
13:03 - and also be sure to let me know what you
13:04 - think about these coding problem videos
13:06 - and if you'd like to see more of these
13:08 - alongside other tutorials in the future
13:10 - other than that if anyone has any
13:12 - questions about what we covered then
13:13 - feel free to ask in the comment section
13:15 - below and I'll do my best to answer
13:16 - those and if you enjoy these tutorials
13:18 - and would like to support them then
13:19 - there are several ways you can do that
13:20 - these
13:21 - ways to simply like the video and give
13:22 - it a thumbs up and also it's a huge help
13:24 - to share these videos with anyone who
13:26 - you think would find them useful and if
13:27 - you have the means you can contribute
13:28 - through patreon and there's a link to
13:29 - that page in the description section
13:31 - below be sure to subscribe for future
13:32 - videos and thank you all for watching
13:45 - you

Cleaned transcript:

hey there how's it going everybody in this video I'm going to try something a bit different so I've had a lot of requests for me to provide some practice problems alongside my tutorials so that people can practice what they've learned so that's what I'm going to try to do with these videos so the plan is that I'll occasionally release a coding problem video alongside a tutorial so that you can practice what you've learned and see my solution now the reason that I'm making these videos separate instead of just adding the code and problem to the tutorial video is because I want to keep the tutorials separate from the problems so that the tutorial videos don't get excessively long and I also want the problems to be optional so for those who feel like you don't need to practice these things that we've learned in the videos then you can simply skip these coding problem videos so with that said let me know what you all think about this new thing that I'm trying out I love your all's feedback and I want to make sure that most of you think that this is going to be beneficial so I'll definitely monitor the comments and feedback on this video to see if it's something that I want to continue doing but with that said let's go on with the coding problem for this video so this coding problem is going to be about iterators and iterables now if you haven't watched a tutorial i released on iterators and iterables then I highly recommend that you watch that video first so I'll leave a link to that video in a description section below so after you've watched that video then you should have a pretty good understanding of how iterators and iterables work and also how we can create our own using either a class or a generator so in this video let me give you an example problem that you can try to solve and if you want you can pause the video before I give you my solutions so let's say that we want to create a sentence object where we expect a string of words and when we loop over the sentence we simply want to loop over the words in the sentence now let's keep it simple and not worry about punctuation or anything like that for the time being so let's just split the sentence up based on spaces alone so let's first create a sentence class that does this and then let's do the same thing by creating a sentence generator function so for example for the class that should look like this so I can just say my sentence is equal to and we're going to create this class and then we can just pass in a simple sentence and then we can do a that says forward in my sentence print out the word now that should have the following output it should just loop through and say this is a test so it just looped through and printed out one word at a time from that sentence so again for the coding problem I would like you to create a class that has this functionality and then I would also like you to create a generator that has this functionality so if you want to pause the video and give that a try then you can go ahead and do that now but with that said then let me go ahead and show you my solution to this problem so I'm going to come up to the top here and create this sentence class so I'll say class sentence and first I'll create and a knit method so I'll say double underscore a knit and we want to pass in self for the instance and then we also want to pass in a sentence and now we can simply create a class attribute from this so I'll say self dot sentence is equal to sentence and now if you remember what I said in the iterators tutorial an iterator is an object with a state so that it remembers where it is during its iteration so in order to keep track of where we currently are in our loop let's add in an index attribute so I'm going to say self dot index is equal to zero and we'll see how I'm gonna use this in just a minute okay and now we also need to have our list of words that we're going to iterate over so we can get the words from the sentence just by saying so I'll say self dot words is equal to self dot sentence dot split now if you've never used the split method on a string basically it splits the string into a list based on a specific delimiter by default it splits the string by spaces which is what we want in this tutorial but if you wanted to split the string on some other delimiter then you could just pass that in as an argument okay and now to make this class interval we need to create a dunder itter method and that method has to return an object that has a dunder next method so we're going to create the dunder next method on this class itself so we can simply return self from dunder itter so I can say dunder underscore it er look let me fix that there so we can create an inter method here and we can simply return self because this class itself is going to have that dunder next method okay and finally we need to create that dunder next method now this is what is going to return the next word in the sentence and if it doesn't have any more words then we can raise a stop iteration exception so we will create this by saying def double underscore next and we will take self as an argument there and now we need the logic for returning the next word in the sentence and if there are no more words then we need to raise a stop iteration exception so the way I'm going to do this is I'll just say if self dot index is greater than or equal to the length of our self dot words list if our index is greater than or equal to the length of that list then it means that we have looped through all of those values already so we can simply raise stop iteration exception and now if it doesn't raise that stop iteration then we want to return the current word of the index that we are on but we also want to increment the index so that we go to the next word the next time through this next function so the way that I'm going to do this is I'm just going to create a temporary variable here and just say index is equal to self dot index and now we will increment self dot index so I'll say self dot index plus equals 1 and now we will return self dot words and we want to return the index here that we set to the previous value so let me save that so let me run through this one more time so that it's clear what I'm doing here so the first time that we run through this self dot index is going to be equal to zero so it's going to come in and say if zero is greater than or equal to length of self dot words and if we're using our example down here then that's going to be for words so this is not going to be true so it's not going to raise that stop iteration and then it's going to say index is equal to self dot index which will set this equal to zero then we're going to increment self dot index by one so then self dot index will be one and then we're going to return the self dot words at the index of zero because remember this index is zero it's only self done index that is now one so the first time through this is going to return the zero index of self dot words which will be the first word the next time through that self dot index is now equal to 1 because we incremented it and then it's just going to keep looping through that returning the next word until it finally says our until our index is higher than the length of our list and then it's going to raise that stop iteration exception so hopefully that makes sense okay so with that class created we should be able to run the test code that we wrote before and it should loop over the words in that sentence let me make the text just a little smaller here to see if we can fit all this on one screen okay so here's the test code that we had before we're saying my sentence is equal to a new instance of our sentence class and we're passing in this sentence of this is a test and now we're looping over this my sentence variable and printing out those words and the output I said should be you know the first word second word third word fourth word so if I run this then we can see that that worked it ran through our for loop and printed out the words one at a time so since we were able to use that in a for loop it means that our object is iterable but it is also an iterator because it has a next method so if we only wanted one word at a time then we could just print out the next variable from my sentence so if I comment this out then we can simply say print next and we will just print out the next value from my sentence oops let me copy that and paste that there and let me do this a couple of times actually and run that and we can see that since we print it out next two times that it printed out the first two words now if I was to do this five times there are only four words so if I did this five times then we should loop through our entire sentence and then hit a stop iteration exception so if I run that then scroll up then we can see that we loop through the entire sentence and then this last part here we hit an error of our stop iteration now that's expected because we're trying to get the next value manually whenever we use a for loop it catches that stop iteration exception for us and it doesn't show us that but when we do it manually we should see that so that's working as it should okay so now I'm going to comment those out and scroll up a little bit and uncomment out my for loop here okay so hopefully you got something working there even if your solution was a little different than mine you probably could have used a try except block here within the next method as well as long as you got it working and it was able to loop through with the for loop and then hit that stop iteration exception when you tried to you know do more than the words that were in the sentence then that should be a good solution okay so now that we've created a class let's now try to create a generator function that does the same thing now I actually think that generators are a lot more simple since they take care of the inner and next methods for us so if you want to try to write a generator function that does the same thing as our class then you can pause the video and do that now but with that said here is my solution to writing this generator so I'm going to put this right underneath the class here so let me scroll down a little bit and now remember this is going to be a generator function so we'll do a function with def and I'm just going to call this sentence with a lowercase s to differentiate it between our class now we'll pass in a parameter here of sentence and for this generator I'm just gonna simply do a loop in here and say for word in sentence dot split and then I'm going to yield the word and our generator it should be as simple as that so what we're doing here is taking in our sentence and then we are saying forward in sentence not split and by default I said that that splits on a space and that's going to return a list of words and since we're looping over that we are just yielding each word one at a time and when there are no more words to loop over then it will automatically take care of that stop iteration exception for us so now let's test this so instead of using our class sentence here let's instead use our generator function so I will lowercase that so that we're now using this generator instead and now we are looping over my sentence here so it should print out one word at a time here so if I run that then you can see that we get one word at a time so that's good let me comment out that and uncomment our print statements here to make sure that our next functions are still working so if I save that and run it then sometimes this runs out of order for some reason in sublime text but now we can see that it loops through those first four words and on the fifth word we get this stop iteration exception okay so it looks like that generator function is working the way that we want it to now I think that those generators are a lot easier to write than these custom classes but depending on your use case you might need to know how to do the inner method and the next method on a class as well but I find myself using generators a lot more than these inner and next methods just because of how simple they are okay so let me close out of the output there and scroll up here to the top okay so that's going to do it for this coding problem now if any of you have any different solutions to this problem then let me know in the comments section below I'd be interested to see what you came up with now I'll have my code available on github if you'd like to have a look and I'll leave a link to that in the description section below and also be sure to let me know what you think about these coding problem videos and if you'd like to see more of these alongside other tutorials in the future other than that if anyone has any questions about what we covered then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that these ways to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
