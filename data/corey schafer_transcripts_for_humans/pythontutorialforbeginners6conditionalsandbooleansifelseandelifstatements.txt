With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning about
00:03 - conditionals and how we can control what
00:04 - statements get executed depending on
00:06 - whether certain values evaluate to true
00:08 - or false and we've mentioned in previous
00:11 - videos that these true and false values
00:13 - are called booleans so let's look at one
00:15 - of the simplest conditionals that we can
00:16 - write so we're going to write an if
00:18 - statement and we'll say if and now the
00:21 - condition that we want to check whether
00:23 - it evaluates to true or false so we're
00:25 - just going to make this obvious for now
00:27 - and just say true then we'll put in a c
00:30 - and hit enter and now on the next line
00:32 - we want to be sure that we're indented
00:33 - over so that we're writing code within
00:35 - our if block so now we'll just print out
00:38 - a string here and I'll just say
00:41 - conditional was true so now if I save
00:44 - that and run it then we can see that it
00:46 - printed out that our condition was true
00:49 - now this print statement will only be
00:51 - executed if the condition after our if
00:53 - statement evaluates to true so what if I
00:56 - was to instead change this over to false
01:00 - now if I run this then we can see that
01:02 - it didn't print out the statement within
01:04 - our if block now conditionals are
01:06 - usually not hardcoded to true and false
01:09 - values like this we really want to put
01:11 - in some code that evaluates to true or
01:13 - false so for example I'm going to create
01:17 - a variable here and I'll just call this
01:18 - variable language and I'll set this
01:20 - equal to python so now let's say that we
01:23 - only want to execute this print
01:25 - statement if the language is equal to
01:28 - python so to do this we can can say if
01:30 - language equals equals python now notice
01:34 - that we have a double equals here so
01:36 - this tests for equality now this is
01:39 - different from the single equal sign
01:41 - which is for assigning values so with
01:45 - this double equals here we're testing
01:46 - for equality and this will evaluate to
01:49 - true or false and that will determine if
01:52 - the code in our if statement is executed
01:54 - so if we run this then we can see that
01:56 - it executed our print statement that the
01:59 - condition was true now there are a lot
02:01 - of different comparisons that we can
02:02 - test for and I've got these written out
02:04 - in a Snippets file here so I'm just
02:06 - going to copy these and paste them in so
02:09 - that we have them as a reference now we
02:11 - went over some of these in our numbers
02:13 - tutorial but let's go ahead and just
02:15 - look through here really quick so double
02:17 - equals test for equality exclamation
02:20 - point equals test if something is not
02:22 - equal greater than sign is for greater
02:24 - than less than sign is for less than
02:26 - greater than equal to is for greater
02:28 - than or equal to less than equal to is
02:30 - for less or equal and then we have this
02:33 - uh object identity now some people
02:36 - wonder what the difference is between
02:37 - this and the double equal signs but when
02:40 - we use this is keyword check we're
02:43 - actually checking if values have the
02:45 - same ID or basically whether they're the
02:47 - same object in memory and we're going to
02:50 - look at an example of this in just a bit
02:52 - but right now let's move on to else
02:53 - statements so what if we wanted to
02:55 - execute one portion of our code if our
02:57 - language was equal to python but another
03:00 - portion of our code if it wasn't so to
03:02 - do this we're going to use an else
03:04 - statement so first I'm going to change
03:06 - my print statement here and just print
03:09 - this to say that the language is Python
03:13 - and now we want to execute some code if
03:15 - the language is not equal to python so
03:18 - to do this we're just going to put in an
03:19 - else statement and make sure that your
03:22 - else is back here on our Baseline and
03:24 - not within our if statement so now we'll
03:27 - say else and now Within our else block
03:30 - we will print out a string that just
03:32 - says no match so now if we run this we
03:36 - can see that it printed out that the
03:38 - language is python so our check if the
03:41 - language is equal to python is
03:42 - evaluating to true so it's printing the
03:45 - code within that block and since it
03:47 - meets that conditional it never executes
03:49 - the code within our else block now if I
03:52 - was instead to change this language and
03:54 - set that equal to Java and rerun this
03:57 - then we can see that it didn't meet the
03:59 - conditional for our if statement so that
04:01 - evaluated to false so then it dropped
04:03 - down to our else statement and executed
04:06 - that code okay so what if we wanted to
04:08 - check for multiple languages and execute
04:10 - different code for each one that we
04:12 - encountered so this is where an lft
04:14 - statement comes in so let's say that we
04:17 - wanted to check if the language was
04:18 - equal to Python and if it wasn't then we
04:21 - wanted to check if it was equal to Java
04:24 - and if it was neither of those then we
04:26 - would just print out no match so we'll
04:28 - add our additional check after our if
04:30 - statement by putting in an L if and
04:34 - again make sure that your indentation is
04:36 - back to this base level because we're no
04:39 - longer in the if block so now I'm just
04:41 - going to copy this code here and say if
04:45 - the language is equal to Java and put in
04:48 - our colon and then we'll grab this and
04:50 - just say print language is Java so
04:54 - basically what this is saying is if the
04:56 - language is equal to python then execute
04:59 - this code if it's not then run a second
05:03 - conditional and see if it's equal to
05:04 - Java and if it is then run this code and
05:07 - if none of those conditionals are met
05:09 - then print no match so now if we run
05:12 - this then we can see that it executed
05:14 - the print statement that the language is
05:16 - Java and none of these other statements
05:18 - were executed now if you're coming from
05:20 - another language you might be wondering
05:21 - if python has a switch case statement
05:24 - now if you don't know what a switch case
05:25 - statement is then it's not a big deal
05:27 - basically it's just a way to check multi
05:29 - values and python doesn't have a switch
05:32 - case and the reason is because the if LF
05:35 - and else statements are plenty clean
05:37 - enough to do this already so if we
05:39 - wanted to check another language then we
05:42 - could just keep adding LF statements so
05:44 - if I wanted to add a JavaScript check to
05:48 - the list then I could just come down
05:50 - here if I copy all of this then I could
05:54 - just do another test here for JavaScript
05:57 - and then say if the language is
05:58 - Javascript then execute this code here
06:01 - and this basically gives us the same
06:03 - functionality as a switch case from
06:05 - another language okay so now I'm going
06:07 - to remove some code here so that we can
06:09 - take a look at another example now in
06:12 - addition to these comparisons that we
06:14 - have here we also have some Boolean
06:16 - operations that we can use and these are
06:19 - and or and not so for example let me
06:23 - create two variables here and I'll call
06:26 - one of these user and set this equal to
06:29 - string of admin and then I'll create a
06:32 - another variable here called logged in
06:34 - and I'll set that equal to true now
06:36 - let's say that we only wanted to execute
06:38 - some code if the user is equal to admin
06:41 - and logged in is equal to true now to do
06:44 - this we can use the and keyword so I
06:46 - could say if user equal equals admin and
06:51 - then we'll use this and keyword and
06:54 - logged in and now we can run the code uh
06:57 - if this is true so I'll just print out a
07:00 - string that says admin page and now we
07:03 - can put in an else block and then for
07:06 - the else block I'll just say if neither
07:07 - of these are true then print out the
07:10 - string that just says uh bad creds for
07:13 - credentials and let me bring this down
07:16 - just a little bit here and just to give
07:18 - us a little bit of extra room I'm
07:19 - actually going to delete uh these
07:21 - comparison comments up here that we have
07:23 - as a reference but I will have a link to
07:25 - these uh to the GitHub page so that you
07:28 - can download those if you want to have
07:30 - those as a reference okay so now if we
07:33 - run the code that we currently have then
07:35 - we can see that it printed out our admin
07:38 - page because both of those evaluated to
07:41 - True our user is equal to admin and our
07:44 - logged in is equal to true but if I
07:46 - changed our logged in variable to false
07:49 - and rerun this then we can see that it
07:52 - executes our bad credentials statement
07:55 - because both of these didn't evaluate to
07:57 - true so this user equal admin evaluated
08:00 - to true but logged in was equal to false
08:03 - so and make sure that both of these have
08:05 - to be true now if we only care if one of
08:08 - these evaluate the true then we can use
08:10 - the or keyword so I could change this
08:13 - and to an or and now if I run this then
08:17 - you can see that it printed out our
08:18 - admin page statement because that
08:20 - evaluated to true because only one or
08:23 - the other needed to be true and our user
08:26 - was equal to admin so it didn't matter
08:29 - if the logged in was false or not
08:31 - because it only had to be one or the
08:33 - other now this not operation is just
08:36 - used to switch a bullion so it'll change
08:39 - a true to a false and a false to a true
08:42 - so for example if we were to say if not
08:46 - logged in then we will print a string
08:50 - here that just says uh please log in and
08:54 - else print welcome so we can see that
08:57 - currently our logged in value is equal
08:59 - to false now when we say not logged in
09:04 - then it will evaluate to true because
09:06 - this not just switches that false to a
09:08 - true now I know that that can sound a
09:10 - little confusing but basically you can
09:12 - just think of it as saying not false if
09:15 - not false which would evaluate to true
09:18 - so if we run this then it prints out
09:20 - please log in because not logged in
09:24 - evaluated to true so it ran what was in
09:26 - our if statement so when I had the
09:28 - conditionals pulled up here as a
09:30 - reference before so now I'm in my
09:31 - Snippets here we remember that we had
09:34 - this object identity with this is
09:36 - keyword and I said that we'd look at the
09:38 - difference between that and the double
09:40 - equals which test for equality now like
09:42 - I said before that object identity um
09:46 - test if two objects have the same ID
09:49 - which basically means if they're the
09:50 - same object in memory so two objects can
09:53 - actually be equal and not be the same
09:55 - object in memory so for example let me
09:58 - create two different lists here so I'll
10:00 - just call one list equal to a and I'll
10:04 - put in the values of 1 two 3 another
10:06 - list equal to B and put in the values 1
10:09 - 2 3 and now I will print out a double
10:12 - equals B so this should evaluate to true
10:16 - because these two lists are equal so if
10:19 - we run this then we can see that we got
10:20 - true which is what we would expect
10:23 - because A and B are equal but instead if
10:26 - we say a is B and then we run this then
10:30 - that returns false now the reason is
10:33 - because these are two different objects
10:35 - in memory and we can print out these
10:37 - locations with this built-in ID function
10:39 - so right above printing that uh a is B
10:43 - I'm also going to print out the ID of a
10:47 - and I will also print out the ID of B so
10:51 - I'll save that and run it and we can see
10:54 - that these IDs are different so really
10:56 - this is comparison is really checking
10:58 - whether these IDs are the same so up
11:02 - here instead of creating a new list if I
11:04 - just said b equals a and save that and
11:07 - run it now we can see that the ID of a
11:10 - and the ID of B are the same and then
11:13 - when we print a is B that evaluates to
11:16 - true because now these are the same
11:18 - object in memory and if I check equality
11:22 - then they're also equal so that's
11:24 - basically the difference there behind
11:26 - the scenes the is comparison if you say
11:28 - a is B it's really the same as saying ID
11:32 - of a equals equals the ID of B so if I
11:38 - run that that's equal to true that's
11:40 - basically what the is operator does okay
11:43 - so basically all the conditionals that
11:45 - we looked at uh completely depend on
11:48 - what python evaluates to true or false
11:51 - so let's see what all python evaluates
11:53 - to true or false and there are a few
11:56 - things that may be unexpected to us so I
11:58 - have a couple couple of things pulled up
12:00 - here in my Snippets and let me grab
12:03 - these really
12:05 - fast so to determine what python
12:08 - evaluates to true and false it's easier
12:10 - to show everything that evaluates to
12:12 - false and then everything else will by
12:15 - default evaluate to true and we have a
12:18 - quick if else statement here to test all
12:21 - of these so we're going to make a few
12:22 - different conditions here and if that
12:24 - condition evaluates to True we'll print
12:26 - out evaluated to True else evaluated to
12:28 - false and my comments here are all the
12:31 - things in Python that evaluate to false
12:33 - values so the first one is the most
12:36 - obvious if we set a conditional equal to
12:39 - false then it's going to evaluate to
12:41 - false and this would would include all
12:43 - the comparison operations that we just
12:45 - saw so they would return true or false
12:47 - so if I run this then we can see that
12:50 - obviously our conditional evaluated to
12:52 - false here since we set our condition
12:54 - equal to false now the next value in our
12:56 - list here is none so none actually
13:00 - evaluates to false as well so if we put
13:02 - that value in as our conditional and run
13:05 - this then we can see that with our
13:07 - condition equal to none that that
13:10 - condition also evaluates to false now
13:13 - this next one here isn't always so
13:14 - obvious so if you have a numeric data
13:17 - type and pass it into a conditional then
13:20 - zero will evaluate to false so if we set
13:23 - this condition equal to zero and run
13:26 - this then we can see that that evaluated
13:28 - to false but if we set this to any other
13:31 - number so if our condition is 10 instead
13:33 - of zero and run that then we can see
13:36 - that that evaluated to true so that's
13:39 - something to keep in mind there where
13:40 - working with numbers because you don't
13:42 - want to accidentally pass in a zero that
13:45 - you think would be true but it evaluates
13:47 - to false okay so moving on down the list
13:49 - if we have any empty squids and pass it
13:52 - into a conditional then that will
13:54 - evaluate to false so this can be an
13:57 - empty string an empty list an empty
13:59 - Tuple um so for example if I just set
14:02 - this condition to an empty list and run
14:05 - this then we can see that that evaluates
14:07 - to false and if you have an empty string
14:10 - that evaluates to false also and now
14:13 - lastly here in our list uh empty mapping
14:15 - so an empty mapping which is basically
14:17 - an empty dictionary this evaluates to
14:20 - false as well so if I pass in an empty
14:23 - dictionary here and run this then we can
14:25 - see that that empty dictionary also
14:27 - evaluated to false now knowing these
14:29 - types of things can be useful because
14:31 - let's say that you have a function or
14:33 - something that is supposed to return
14:34 - some values now sometimes it's needed to
14:37 - check if those values are actually there
14:39 - so you could just pass in these
14:41 - sequences into a conditional to check
14:44 - whether a string is empty or a
14:46 - dictionary is empty and you don't
14:47 - actually have to call any specific
14:49 - method you can just pass in the empty
14:51 - sequence or the empty dictionary and
14:53 - it'll evaluate the true or false if that
14:55 - is empty now there are also some
14:57 - userdefined classes that can evaluate to
14:59 - false but these are the majority of the
15:01 - conditions that we'll be checking so now
15:04 - that we know everything that evaluates
15:05 - to false then everything else is
15:07 - obviously going to evaluate to true so
15:10 - you know for example just to uh do
15:13 - another example here if I set this
15:15 - condition equal to a string that just
15:17 - says test now an empty string would
15:20 - evaluate the false so if we pass that in
15:23 - then we can see that that a string with
15:25 - some characters evaluated to true so
15:27 - that's really important when working
15:29 - with these conditionals is just having
15:31 - an idea of what is going to evaluate to
15:33 - true and what's going to evaluate to
15:35 - false okay so I think that is going to
15:37 - do it for this video I hope that now
15:39 - everyone has a clear understanding of
15:41 - how these conditionals work and all the
15:42 - different ways that python determines
15:44 - what values are true and false now in
15:46 - the next video we'll be learning about
15:48 - loops and iterations but if anyone has
15:51 - any questions about what we covered in
15:52 - this video then feel free to ask in the
15:54 - comment section below and I'll do my
15:55 - best to answer those now if you enjoy
15:57 - these tutorials and would like to
15:59 - support them then there are several ways
16:00 - you can do that the easiest way is to
16:01 - Simply like the video and give it a
16:03 - thumbs up and also it's a huge help to
16:05 - share these videos with anyone who you
16:06 - think would find them useful and if you
16:08 - have the means you can contribute
16:09 - through patreon and there's a link to
16:10 - that page in the description section
16:12 - below be sure to subscribe for future
16:14 - videos and thank you all for watching

Cleaned transcript:

hey there how's it going everybody in this video we'll be learning about conditionals and how we can control what statements get executed depending on whether certain values evaluate to true or false and we've mentioned in previous videos that these true and false values are called booleans so let's look at one of the simplest conditionals that we can write so we're going to write an if statement and we'll say if and now the condition that we want to check whether it evaluates to true or false so we're just going to make this obvious for now and just say true then we'll put in a c and hit enter and now on the next line we want to be sure that we're indented over so that we're writing code within our if block so now we'll just print out a string here and I'll just say conditional was true so now if I save that and run it then we can see that it printed out that our condition was true now this print statement will only be executed if the condition after our if statement evaluates to true so what if I was to instead change this over to false now if I run this then we can see that it didn't print out the statement within our if block now conditionals are usually not hardcoded to true and false values like this we really want to put in some code that evaluates to true or false so for example I'm going to create a variable here and I'll just call this variable language and I'll set this equal to python so now let's say that we only want to execute this print statement if the language is equal to python so to do this we can can say if language equals equals python now notice that we have a double equals here so this tests for equality now this is different from the single equal sign which is for assigning values so with this double equals here we're testing for equality and this will evaluate to true or false and that will determine if the code in our if statement is executed so if we run this then we can see that it executed our print statement that the condition was true now there are a lot of different comparisons that we can test for and I've got these written out in a Snippets file here so I'm just going to copy these and paste them in so that we have them as a reference now we went over some of these in our numbers tutorial but let's go ahead and just look through here really quick so double equals test for equality exclamation point equals test if something is not equal greater than sign is for greater than less than sign is for less than greater than equal to is for greater than or equal to less than equal to is for less or equal and then we have this uh object identity now some people wonder what the difference is between this and the double equal signs but when we use this is keyword check we're actually checking if values have the same ID or basically whether they're the same object in memory and we're going to look at an example of this in just a bit but right now let's move on to else statements so what if we wanted to execute one portion of our code if our language was equal to python but another portion of our code if it wasn't so to do this we're going to use an else statement so first I'm going to change my print statement here and just print this to say that the language is Python and now we want to execute some code if the language is not equal to python so to do this we're just going to put in an else statement and make sure that your else is back here on our Baseline and not within our if statement so now we'll say else and now Within our else block we will print out a string that just says no match so now if we run this we can see that it printed out that the language is python so our check if the language is equal to python is evaluating to true so it's printing the code within that block and since it meets that conditional it never executes the code within our else block now if I was instead to change this language and set that equal to Java and rerun this then we can see that it didn't meet the conditional for our if statement so that evaluated to false so then it dropped down to our else statement and executed that code okay so what if we wanted to check for multiple languages and execute different code for each one that we encountered so this is where an lft statement comes in so let's say that we wanted to check if the language was equal to Python and if it wasn't then we wanted to check if it was equal to Java and if it was neither of those then we would just print out no match so we'll add our additional check after our if statement by putting in an L if and again make sure that your indentation is back to this base level because we're no longer in the if block so now I'm just going to copy this code here and say if the language is equal to Java and put in our colon and then we'll grab this and just say print language is Java so basically what this is saying is if the language is equal to python then execute this code if it's not then run a second conditional and see if it's equal to Java and if it is then run this code and if none of those conditionals are met then print no match so now if we run this then we can see that it executed the print statement that the language is Java and none of these other statements were executed now if you're coming from another language you might be wondering if python has a switch case statement now if you don't know what a switch case statement is then it's not a big deal basically it's just a way to check multi values and python doesn't have a switch case and the reason is because the if LF and else statements are plenty clean enough to do this already so if we wanted to check another language then we could just keep adding LF statements so if I wanted to add a JavaScript check to the list then I could just come down here if I copy all of this then I could just do another test here for JavaScript and then say if the language is Javascript then execute this code here and this basically gives us the same functionality as a switch case from another language okay so now I'm going to remove some code here so that we can take a look at another example now in addition to these comparisons that we have here we also have some Boolean operations that we can use and these are and or and not so for example let me create two variables here and I'll call one of these user and set this equal to string of admin and then I'll create a another variable here called logged in and I'll set that equal to true now let's say that we only wanted to execute some code if the user is equal to admin and logged in is equal to true now to do this we can use the and keyword so I could say if user equal equals admin and then we'll use this and keyword and logged in and now we can run the code uh if this is true so I'll just print out a string that says admin page and now we can put in an else block and then for the else block I'll just say if neither of these are true then print out the string that just says uh bad creds for credentials and let me bring this down just a little bit here and just to give us a little bit of extra room I'm actually going to delete uh these comparison comments up here that we have as a reference but I will have a link to these uh to the GitHub page so that you can download those if you want to have those as a reference okay so now if we run the code that we currently have then we can see that it printed out our admin page because both of those evaluated to True our user is equal to admin and our logged in is equal to true but if I changed our logged in variable to false and rerun this then we can see that it executes our bad credentials statement because both of these didn't evaluate to true so this user equal admin evaluated to true but logged in was equal to false so and make sure that both of these have to be true now if we only care if one of these evaluate the true then we can use the or keyword so I could change this and to an or and now if I run this then you can see that it printed out our admin page statement because that evaluated to true because only one or the other needed to be true and our user was equal to admin so it didn't matter if the logged in was false or not because it only had to be one or the other now this not operation is just used to switch a bullion so it'll change a true to a false and a false to a true so for example if we were to say if not logged in then we will print a string here that just says uh please log in and else print welcome so we can see that currently our logged in value is equal to false now when we say not logged in then it will evaluate to true because this not just switches that false to a true now I know that that can sound a little confusing but basically you can just think of it as saying not false if not false which would evaluate to true so if we run this then it prints out please log in because not logged in evaluated to true so it ran what was in our if statement so when I had the conditionals pulled up here as a reference before so now I'm in my Snippets here we remember that we had this object identity with this is keyword and I said that we'd look at the difference between that and the double equals which test for equality now like I said before that object identity um test if two objects have the same ID which basically means if they're the same object in memory so two objects can actually be equal and not be the same object in memory so for example let me create two different lists here so I'll just call one list equal to a and I'll put in the values of 1 two 3 another list equal to B and put in the values 1 2 3 and now I will print out a double equals B so this should evaluate to true because these two lists are equal so if we run this then we can see that we got true which is what we would expect because A and B are equal but instead if we say a is B and then we run this then that returns false now the reason is because these are two different objects in memory and we can print out these locations with this builtin ID function so right above printing that uh a is B I'm also going to print out the ID of a and I will also print out the ID of B so I'll save that and run it and we can see that these IDs are different so really this is comparison is really checking whether these IDs are the same so up here instead of creating a new list if I just said b equals a and save that and run it now we can see that the ID of a and the ID of B are the same and then when we print a is B that evaluates to true because now these are the same object in memory and if I check equality then they're also equal so that's basically the difference there behind the scenes the is comparison if you say a is B it's really the same as saying ID of a equals equals the ID of B so if I run that that's equal to true that's basically what the is operator does okay so basically all the conditionals that we looked at uh completely depend on what python evaluates to true or false so let's see what all python evaluates to true or false and there are a few things that may be unexpected to us so I have a couple couple of things pulled up here in my Snippets and let me grab these really fast so to determine what python evaluates to true and false it's easier to show everything that evaluates to false and then everything else will by default evaluate to true and we have a quick if else statement here to test all of these so we're going to make a few different conditions here and if that condition evaluates to True we'll print out evaluated to True else evaluated to false and my comments here are all the things in Python that evaluate to false values so the first one is the most obvious if we set a conditional equal to false then it's going to evaluate to false and this would would include all the comparison operations that we just saw so they would return true or false so if I run this then we can see that obviously our conditional evaluated to false here since we set our condition equal to false now the next value in our list here is none so none actually evaluates to false as well so if we put that value in as our conditional and run this then we can see that with our condition equal to none that that condition also evaluates to false now this next one here isn't always so obvious so if you have a numeric data type and pass it into a conditional then zero will evaluate to false so if we set this condition equal to zero and run this then we can see that that evaluated to false but if we set this to any other number so if our condition is 10 instead of zero and run that then we can see that that evaluated to true so that's something to keep in mind there where working with numbers because you don't want to accidentally pass in a zero that you think would be true but it evaluates to false okay so moving on down the list if we have any empty squids and pass it into a conditional then that will evaluate to false so this can be an empty string an empty list an empty Tuple um so for example if I just set this condition to an empty list and run this then we can see that that evaluates to false and if you have an empty string that evaluates to false also and now lastly here in our list uh empty mapping so an empty mapping which is basically an empty dictionary this evaluates to false as well so if I pass in an empty dictionary here and run this then we can see that that empty dictionary also evaluated to false now knowing these types of things can be useful because let's say that you have a function or something that is supposed to return some values now sometimes it's needed to check if those values are actually there so you could just pass in these sequences into a conditional to check whether a string is empty or a dictionary is empty and you don't actually have to call any specific method you can just pass in the empty sequence or the empty dictionary and it'll evaluate the true or false if that is empty now there are also some userdefined classes that can evaluate to false but these are the majority of the conditions that we'll be checking so now that we know everything that evaluates to false then everything else is obviously going to evaluate to true so you know for example just to uh do another example here if I set this condition equal to a string that just says test now an empty string would evaluate the false so if we pass that in then we can see that that a string with some characters evaluated to true so that's really important when working with these conditionals is just having an idea of what is going to evaluate to true and what's going to evaluate to false okay so I think that is going to do it for this video I hope that now everyone has a clear understanding of how these conditionals work and all the different ways that python determines what values are true and false now in the next video we'll be learning about loops and iterations but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those now if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to Simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching
