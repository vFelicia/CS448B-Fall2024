With timestamps:

00:00 - hey how's it going everybody in this
00:02 - video we're going to go over get command
00:04 - line Basics we're going to talk a little
00:07 - bit about what git is and then we're
00:09 - going to walk through how to get get
00:12 - installed and then the basic commands
00:14 - for working with local and remote
00:17 - repositories I'm going to use a couple
00:19 - of images in this uh walk through and
00:21 - these images were taken from the prit
00:23 - book written by uh these two authors
00:25 - here and it is licens under the Creative
00:28 - Commons uh if you want to read the book
00:31 - which is uh great resource you can go to
00:33 - the git website click on the
00:36 - documentation and the book is listed
00:38 - there so this video is going to be
00:40 - useful for three different types of
00:42 - people uh first of all somebody who has
00:44 - never used Version Control before this
00:46 - is a great place to start because git is
00:49 - the most widely used Version Control
00:52 - System out there um second for people
00:54 - who have used Version Control but not
00:57 - get so if you're coming from a version
00:58 - control system like
01:00 - SVN uh then it's going to be great to
01:03 - learn about git also and third this will
01:06 - be useful for people who have used git
01:09 - but have mainly used the guey visual
01:12 - tools so the guey tools are really
01:15 - useful but it's better to learn these
01:17 - command line tools from the very
01:19 - beginning because uh the goys can only
01:22 - do so much and you'll eventually run
01:24 - into a situation where you get stuck and
01:26 - the underlying knowledge of the command
01:29 - line would be extremely useful so with
01:31 - all that said let's go ahead and get
01:32 - started so first of all git is a
01:35 - distributed version control system so if
01:38 - you're coming from a version control
01:40 - system like SVN which is a central
01:42 - Version Control System then what is the
01:44 - difference between central and
01:45 - distributed Version Control well a
01:48 - central version control system is
01:50 - located in one place so people can check
01:53 - out from this central location and make
01:55 - their changes and then check everything
01:56 - back in but this can be problematic if
01:59 - you can't get access to that Central
02:01 - server or that Central repository um so
02:04 - for example if that server's offline or
02:06 - you're working somewhere that doesn't
02:07 - have a network connection then you'll
02:09 - only be able to see the files that
02:10 - you've checked out from that repository
02:12 - and no additional information about that
02:15 - Central remote repository also if
02:18 - something happens to that Central
02:19 - repository or it somehow gets corrupted
02:22 - then you've got to hope that there's a
02:23 - backup of that code somewhere now on the
02:25 - other hand a distributed Version Control
02:27 - System like git in this situation
02:30 - everybody has a local repository so you
02:33 - can have the option to have that censal
02:36 - remote repository uh which we'll look at
02:38 - here in a little bit um but your local
02:41 - repository has all of the information
02:43 - that your that your remote repository
02:45 - has based on the last time that you sync
02:47 - those two together so the good thing
02:49 - about this is that if you don't have
02:51 - access to that remote repository then
02:53 - you can still view every single change
02:55 - that's been made to that repository
02:58 - since it was created so in a way it's
03:00 - almost like every developer has an
03:02 - entire backup of the repository so in
03:04 - the worst case scenario of something
03:07 - happening to the remote repository every
03:09 - developer has a copy of that same
03:12 - repository on their machine so that's
03:14 - why it's called a distributed version
03:16 - control system so now let's go ahead and
03:18 - get started with Git now I'm not going
03:20 - to go into too much detail about the
03:21 - installation here um if you go to the
03:24 - website which is
03:26 - g-s cm.com uh and then you go to the
03:30 - downloads tab here then you can find the
03:32 - download the download for any operating
03:35 - system that you're working with and the
03:37 - installation is pretty self-explanatory
03:39 - so after we get get installed there is a
03:42 - firsttime setup that we have to go
03:44 - through so first of all after you get
03:47 - get installed then you can check the
03:50 - version to make sure that it installed
03:52 - correctly so if you run this command
03:54 - here get-- version so I'm going to open
03:57 - up my terminal window here now if I run
04:02 - get-- version and it pops up with some
04:06 - version here here it says get version
04:09 - 2.3.2 then that means that git is
04:11 - successfully installed now once you have
04:13 - git successfully installed now we need
04:15 - to set up some Global configuration
04:18 - variables now these variables are
04:20 - important because if you're working with
04:22 - other developers then they need to know
04:24 - uh who is checking the code in and out
04:27 - and making changes and things like that
04:29 - so this is a way to add your name to all
04:33 - of your check-ins and code changes so
04:35 - this is the syntax here to add these um
04:38 - variables in here so if I go back to my
04:41 - terminal I can type get config D-
04:46 - Global
04:48 - user.name and then in quotes I can type
04:51 - in my name here so I'll type in Corey
04:54 - Schaefer hit enter and now we can do the
04:56 - same thing for email so I'll type in
04:59 - user. mail and then here I'll type in my
05:04 - email address at
05:06 - gmail.com hit enter and now after we've
05:09 - put in those values then to check th
05:12 - those values we can do get config d-list
05:15 - and this will list all of our
05:16 - configuration values here now I'm going
05:19 - to have a little bit more than you do
05:21 - you'll probably only have a few values
05:22 - here but I've customize my g a little
05:24 - bit over time so you can see all the
05:26 - values that I have listed here but the
05:29 - important ones look for are to make sure
05:30 - that we have our user.name set and our
05:33 - user. email set so once you have those
05:35 - values working then you are good to move
05:38 - on now get config was the first get verb
05:42 - that we actually used it was the first
05:44 - action that we used now if you ever need
05:46 - help with any of these actions then you
05:48 - can use this syntax either get help in
05:51 - the verb or get verb d-el and what I
05:54 - mean by that is using config as an
05:57 - example so say I want to see what you
05:59 - can do with the config action so I can
06:01 - do get help config and hit enter and
06:05 - it'll take me to the manual page and you
06:06 - can read all about it here um or the
06:09 - other syntax that you can do is get
06:11 - config d-el and read through there and
06:14 - you can do this with any get action so
06:17 - you get add- dhel does the same thing it
06:20 - takes you to the manual page for the add
06:23 - action so that's extremely useful once
06:25 - you start doing uh more intermediate and
06:28 - advanced things with git uh it's useful
06:31 - to look at those manuals and see exactly
06:34 - what you can do with
06:35 - them now there are two common scenarios
06:38 - for people to begin using git so the
06:41 - first scenario is that you have an
06:44 - existing project on your local machine
06:46 - that you want to start tracking using
06:48 - git and the second scenario is whenever
06:52 - there's an existing project remotely
06:54 - that you want to start developing on so
06:56 - first let's take a look at that first
06:59 - example where you have a local code base
07:02 - that you want to start tracking using
07:04 - git so in order to do this it's just as
07:06 - easy as running the git and nit command
07:09 - from within the directory in your
07:10 - terminal so for example let me pull up
07:13 - my terminal here now the code that I
07:15 - want to start tracking if I do an LS
07:18 - within this directory the code that I
07:20 - want to start tracking is with within
07:22 - this local repo directory so if I CD to
07:25 - local repo and then I do an ls- LA in
07:29 - here which will will list all of the
07:30 - files in the directory you can see that
07:32 - there is a project file here and there's
07:34 - a calc. py file here so to begin
07:37 - tracking this code with Git it's just as
07:40 - easy as running git and knit and if I
07:42 - hit enter you can see that an init
07:44 - initialized an empty git repository and
07:47 - now if I do n ls- La then you can see
07:51 - that it placed this dogit file here now
07:54 - this dogit it's actually a directory
07:56 - this dogit directory contains everything
07:59 - that's relateded to our repository so if
08:01 - we ever want to stop tracking our
08:03 - project uh with Git then all we have to
08:06 - do is remove this git directory just
08:10 - like we would any other directory and if
08:12 - I do an lsla it's gone and we're no
08:15 - longer tracking this project with Git
08:17 - but we don't want to do that we want to
08:19 - uh track this project so let's do this
08:22 - again now you can see it put that uh get
08:25 - directory back there and now we are
08:27 - using get within this directory so now
08:29 - we're using git in our directory but we
08:33 - haven't actually committed anything yet
08:35 - so before we commit anything let's first
08:38 - run this get status here so if I pull up
08:41 - my terminal and I run get status you can
08:44 - see here that we have two untracked
08:46 - files project and cal. py now this
08:50 - project file is just a file that I
08:52 - created as an example of a file that we
08:54 - don't want in our repository for other
08:56 - people to see so there's a lot of files
08:59 - that contain personal preferences
09:01 - specific to our machine or our operating
09:03 - system that aren't actually part of the
09:06 - code that we want tracked so for example
09:08 - say that I had my personal preferences
09:11 - within this project file I wouldn't want
09:13 - to uh add those to the repository and
09:16 - whenever other people check those out
09:18 - they would be getting my preferences and
09:19 - we don't want that so what we want to do
09:21 - is ignore these files and to ignore
09:24 - files uh you just have to create a do
09:28 - get ignore file so I'm going to do a
09:29 - touch on a do get ignore file which will
09:32 - recreate which will create that get
09:34 - ignore file and now let me go ahead and
09:36 - open this up in my text
09:39 - editor okay so the get ignore file is
09:44 - just a simple text file where we can add
09:47 - files that we want get to ignore and we
09:50 - can also use wild cards so for example
09:52 - here in um this slide I have this star.
09:58 - pyc uh which will ignore all files with
10:01 - a pyc extension so that's a python
10:04 - example but that's not important it's
10:06 - I'm just showing the concept here so
10:08 - let's go ahead and add all these files
10:10 - here to our get ignore file and I'll
10:13 - paste that in and save that and now let
10:16 - me go back to my terminal now that we've
10:18 - added those to the get ignore file and
10:20 - saved it now let's rerun get status and
10:24 - now you can see here that the project
10:25 - file is no longer coming up in our list
10:29 - of untracked files it's only theg ignore
10:32 - file and the cal. py file and we want to
10:35 - commit the get ignore file because we
10:36 - want the repository uh to know to always
10:39 - ignore those files okay now let's take a
10:42 - step back here and try to picture
10:45 - exactly where we are right now now with
10:47 - Git there are three states that we need
10:50 - to know about there's the working
10:52 - directory the staging area and the
10:54 - committed files and right now we're
10:57 - currently in our working directory so
10:59 - untracked and modified files will be in
11:02 - our working directory and it will list
11:04 - those when we ran get status so you can
11:07 - see here if I open up my terminal then
11:09 - these are the files in our working
11:11 - directory here now the staging area is
11:14 - where we organize what we want to be
11:16 - committed to our repository now the
11:18 - reason for the staging area is so that
11:20 - we can pick and choose what we want
11:22 - committed so if we've done a lot of work
11:24 - spanning multiple files and we want to
11:26 - make multip multiple commits from those
11:28 - changes then you can stage individual
11:31 - files and commit those in small chunks
11:33 - at once so that's going to allow us to
11:35 - be more detailed with our commits so for
11:37 - example you don't want to make a commit
11:40 - that where you add a message that just
11:41 - say says like I made a lot of changes to
11:44 - the code you want commits that are very
11:46 - detailed as to what changes were made so
11:49 - now that we know about that staging area
11:51 - uh let's go ahead and add files to the
11:53 - staging area so if we want to add all
11:55 - the files that are currently untracked
11:58 - or that we've made changes to to uh to
12:00 - the staging area then we could run get
12:02 - add- capital a um or we could add these
12:06 - individually so for example here if I
12:09 - did a get
12:11 - add. get ignore then if I do a get
12:15 - status and that's going to show us okay
12:18 - so here we have cal. py which is
12:21 - currently untracked and then you can see
12:23 - that our get ignore file is in our
12:26 - staging area because we ran get add. get
12:28 - ignore
12:30 - and like I said in the slide if we want
12:31 - to add everything to the staging area
12:33 - then we can just do get add- capital A
12:36 - and hit enter and now if I run get
12:39 - status then you can see that all of our
12:41 - files are now in the staging area so if
12:44 - we were to run get commit right now then
12:46 - it would commit these changes to our
12:48 - repository now if you ever want to
12:50 - remove files from the staging area then
12:52 - you can use the get reset command so if
12:55 - I did get reset calc py and then did a
13:01 - get status you can see that the G ignore
13:04 - file is still in our changes to be
13:06 - committed which is in the staging area
13:09 - and our calc. py file is in the
13:11 - untracked files if you want to remove
13:13 - everything from the staging area then
13:15 - you can run get reset without any other
13:18 - options and it will remove everything so
13:20 - if I type get status now then you can
13:22 - see that all these files are moved back
13:23 - to our working directory as untracked
13:26 - files okay but we actually want to make
13:28 - a commit now so let's go through this
13:31 - process again what we want to do is we
13:33 - want to run get add- a to add everything
13:37 - to the staging area and now if I run a
13:41 - get status you can see that all of these
13:43 - changes will be committed and in order
13:46 - to get these uh in order to commit these
13:48 - files we run get commit and then dasm
13:52 - which will put a message now the
13:53 - messages are important you want to be
13:55 - detailed as to the changes that you made
13:58 - uh to the code
13:59 - but this is our first uh commit here so
14:03 - we're just going to put something like
14:04 - initial commit so if I hit enter there
14:07 - you can see that it added the two files
14:08 - to the repository now if I run a get
14:11 - status you can see that it says that the
14:13 - working directory is clean that's
14:15 - because um we've committed those files
14:18 - and now we don't have any modified or
14:20 - untracked files those are being tracked
14:21 - now and we haven't modify them since we
14:24 - committed them now another useful
14:26 - command here is the log command so if we
14:29 - run get log then we can see the commit
14:32 - that we just made so this gives us the
14:35 - hash number of that commit now all those
14:37 - hashes will be unique and then you can
14:40 - see that the our author who made the
14:42 - commit and then the message for that
14:44 - commit also so now for this example we
14:47 - are successfully tracking our local
14:49 - project and we have made changes and uh
14:52 - committed those changes to the
14:54 - repository so now let's talk about the
14:56 - situation that we mentioned earlier uh
14:59 - where we want to track an existing
15:01 - remote project with Git now this is
15:04 - likely how uh most of you will be using
15:07 - git if you're going to be using it in
15:09 - the workplace so for example say that
15:12 - your company has a remote repository and
15:15 - you want to clone that remote repository
15:17 - and begin developing on it now the
15:19 - Syntax for this is get clone then the
15:23 - URL and then where you want to clone
15:25 - that repository so in the example that
15:28 - I'm going to use I'm going to use this
15:31 - remote repo here which is actually just
15:33 - a directory on my local machine now
15:35 - usually this is going to be a URL so for
15:38 - example if this was coming from uh
15:41 - GitHub or something like that then it
15:44 - may look something more like this so you
15:47 - do get clone and then the URL of the
15:50 - remote repository and then where you
15:53 - want to clone that repository so in this
15:55 - case the dot is just means in the
15:57 - current directory but like I said in
16:00 - this example I'm going to be using uh
16:02 - this directory here which is on my local
16:05 - machine but it's going to behave exactly
16:07 - like a remote repository would so let me
16:09 - open up my terminal and let me go back
16:13 - to this get Basics directory now if I
16:15 - run an LS here then I have this
16:18 - directory called clone repo I'm going to
16:20 - CD into that now if I do an ls- LA here
16:25 - then you can see that this is completely
16:27 - empty these are just relative paths here
16:29 - so now I want to clone a remote
16:31 - repository here so I want to do a get
16:34 - clone and then the URL of the repository
16:37 - and then this dot means that I want to
16:39 - clone all the files from that repository
16:42 - into this current directory so if I hit
16:44 - enter you can see that it cloned into
16:46 - the current directory now if I do an ls-
16:49 - LA then you can see now I have files
16:51 - here now I set up this sample remote
16:54 - repository to be very similar to the uh
16:57 - example that we just used in the local
16:59 - directory so now that we've cloned that
17:01 - remote repository now let's see how we
17:04 - can view information about that remote
17:06 - repository so in order to do that we can
17:08 - use a couple of commands one of these
17:10 - commands is get remote- V and another is
17:13 - get Branch d a so if I was to do get
17:18 - remote- V then you can see it lists the
17:22 - information to the repository here so um
17:25 - this is just the location on my local
17:27 - machine of where this repository is and
17:29 - also if I was to do get Branch d a then
17:33 - it will list all of the branches in our
17:36 - repository not only locally but remotely
17:39 - as well now we haven't gone over
17:40 - branches yet but we will do that here
17:42 - shortly now let's make a couple of
17:44 - changes to the code base and we can take
17:47 - a look at how to uh commit those files
17:49 - and how to push them to the remote
17:55 - repository so over here I'm going to go
17:58 - into this uh clone repo and open up this
18:01 - cal. py file and now I'm just going to
18:03 - make a simple change here I'm just going
18:05 - to change this multiply function to
18:08 - return what we want it to return so I'll
18:10 - do return x x y and I'll save that so
18:13 - now we've made a change to our code so
18:16 - now that we've made a change to our code
18:18 - how are we going to push these changes
18:20 - to the remote repository so first we
18:23 - need to commit these changes locally
18:25 - just like we did before so if I open up
18:27 - the terminal here then the first thing I
18:30 - can do is get diff and get diff is going
18:34 - to show me the changes that I have made
18:37 - to the code so you can see here that it
18:39 - has this minus sign with the pass that's
18:42 - what I removed and then the plus sign
18:44 - here return x * y That's What I added in
18:48 - so those are the changes that I made to
18:49 - the code now if I run get status we've
18:52 - seen this before then you can see that
18:54 - in our working directory we have this
18:56 - modified do uh cal. py file and now if
18:59 - you remember we want to add those to the
19:01 - staging directory so that they can be
19:03 - committed so we'll do a get add- capital
19:06 - A to add all the changes now if I run
19:09 - get status again then we can see that
19:11 - those are ready to be committed and now
19:13 - we can do get commit DM and then for a
19:16 - message here we can just do uh you know
19:20 - multiply function okay so now we have
19:24 - committed these files locally and now we
19:26 - want to push these changes to the remote
19:28 - repository so that other people have
19:30 - access to those now whenever you're
19:33 - ready to commit those changes and push
19:35 - them to the remote repository there are
19:37 - two things that you want to do a get
19:39 - pull and a get push now people a lot of
19:42 - the times forget the get pull but you
19:45 - have to remember that we're now working
19:48 - on a project that could potentially have
19:50 - multiple developers and people have been
19:53 - uh pushing code to that remote
19:55 - repository while we've been working on
19:57 - our own featur
19:59 - so what the get pull does is it will
20:01 - pull any changes that have been made
20:04 - since the last time that we pulled from
20:06 - that repository and as you can see after
20:09 - we ran that pool it said that we were
20:10 - already up to date because there have
20:12 - been no changes to that remote
20:14 - repository since the last time that we
20:16 - pulled from it and now we're ready to
20:19 - push and we will do a get push and this
20:23 - origin here is just the name of our
20:24 - remote repository and then the master is
20:26 - the branch that we want to push to so so
20:28 - if we run that then we have successfully
20:31 - pushed those changes that we just made
20:34 - to the master branch of that remote
20:36 - repository so now that we've worked a
20:39 - little bit with local and remote
20:41 - repositories now let's go ahead and take
20:43 - a look at a common workflow that uh a
20:47 - lot of developers use when working with
20:49 - Git so I said before that we were going
20:51 - to take a deeper look into branching so
20:55 - so far we've been working directly on
20:57 - our Master branch but this isn't really
20:59 - how you should be using it from dayto
21:01 - day so let's say that for example now
21:05 - instead of that multiply function we
21:06 - want to work on our divide function so a
21:09 - common workflow that you're going to use
21:11 - to do this is to create a branch for
21:13 - your desired feature and then begin
21:16 - working off of that Branch so the Syntax
21:19 - for creating a branch is get branch and
21:22 - then the name of the branch which we'll
21:23 - just call calc divide so I'm just going
21:25 - to copy that now let's open up our
21:27 - terminal
21:29 - and now let's create that Branch so get
21:31 - Branch Cal divide and now if I run get
21:34 - Branch without the branch name then it's
21:36 - going to list all of my local branches
21:39 - you can see that I have Master here
21:41 - which has the asteris beside it that
21:43 - means that I that's the branch that I'm
21:44 - currently working on if I want to start
21:47 - working on the Cal divide Branch then I
21:50 - have to check that Branch out and that's
21:52 - using this syntax here get checkout and
21:55 - then the name of the branch so I'm going
21:56 - to do get checkout Cal divide now if I
22:00 - rerun that get Branch you can see that I
22:02 - am working on the calc divide Branch so
22:04 - now let's start working on the changes
22:06 - that we want to make on this Branch so
22:08 - the changes I want to make here I want
22:10 - to work on this divide function so I
22:12 - want to return x / Y and I'll save those
22:16 - changes and now that I've made those
22:18 - changes now let's just commit this just
22:21 - like we have been doing so if I do a get
22:23 - status you can see that our calc. py
22:25 - file has been modified I want to add
22:28 - those changes to our staging area using
22:31 - the get add command then I want to do a
22:34 - get commit with a message of we'll just
22:38 - call this divide Funk well divide
22:41 - function and now we we have successfully
22:44 - committed this change to our local calc
22:48 - divide Branch now this had no effect on
22:50 - our local Master branch and it's had no
22:53 - effect on our remote
22:55 - repository so now let's say that we want
22:58 - to
22:59 - uh push this Branch to our remote
23:02 - repository so this is the Syntax for
23:04 - doing that here this get push dasu
23:07 - origin which is the name of our remote
23:09 - repository and then the branch that we
23:11 - want to push to now I'm not going to go
23:13 - too far into what that dasu does since
23:15 - it's a basic git video but basically the
23:18 - U option just tells git that we want to
23:20 - associate our local Cal divide Branch
23:23 - with the remote calc divide branch and
23:26 - then in the future instead of doing this
23:28 - get push dasu uh origin Cal divide stuff
23:32 - like that we can just do uh get push and
23:35 - get
23:36 - pull like this and it will know that
23:40 - those two branches are associated to
23:42 - each other but we're not going to go too
23:44 - far into that right now so if I pull up
23:47 - the terminal here and I do this command
23:50 - get push dasu origin Cal divide hit
23:53 - enter now we have pushed that Cal divide
23:56 - Branch to the remote reposit repository
23:59 - so now if you remember uh earlier we did
24:01 - this get Branch d a command and if we
24:05 - run this again this command was to see
24:08 - all of our branches so if we run this
24:11 - then you can see that we can see our two
24:13 - local branches here Cal divide which has
24:16 - the asterisk which means we're currently
24:17 - working on that Branch then we can see
24:20 - that in our remote repository we have uh
24:23 - a cal divide branch and the master
24:25 - Branch now there's a lot of reasons for
24:27 - why you would want to push your branch
24:29 - up to the remote repository and a lot of
24:31 - companies that's where they run their
24:34 - unit test and things like that to make
24:36 - sure that all the code runs well before
24:38 - it's merged with Master but let's say
24:40 - that all of those unit tests and
24:42 - everything ran really well and now we're
24:45 - ready to merge that Branch with Master
24:47 - now the way we want to do this is we
24:49 - want to check out our local Master
24:51 - Branch so we'll do get checkout Master
24:55 - you can see here that we switched to our
24:57 - Master branch now we want to pull all
24:59 - the changes down uh remember before we
25:02 - commit anything to master we always want
25:04 - to pull down the changes in case any
25:07 - changes were made while we were working
25:08 - on our feature you can see here that it
25:10 - says that we're already up to date
25:12 - because nobody else has made changes to
25:14 - that remote Branch since we've been
25:15 - working on the Cal divide branch and now
25:18 - we can do this uh option on get Branch
25:22 - here which is D- merged and what that's
25:24 - going to tell us is the branches that
25:26 - we've merged in so far bar and you can
25:29 - see here that if I run that Cal divide
25:32 - doesn't pop up here because it hasn't
25:34 - been merged yet so in order to merge
25:37 - that Branch with Master you do a get
25:40 - merge and then the name of the branch so
25:43 - I want to merge Cal divide with master
25:45 - so I'm in the master branch and I do a
25:47 - get merge Cal divide and it will merge
25:50 - those changes into Master now that I've
25:53 - have merged those changes into the
25:54 - master Branch then I can push these
25:56 - changes to our our remote Master Branch
26:00 - by doing a get push origin Master just
26:03 - like we did before and then now those
26:05 - changes have been pushed to the master
26:08 - uh Master branch on the remote
26:09 - repository so now that we have finished
26:12 - uh merging those changes from Cal divide
26:16 - uh now that feature is done and we're
26:18 - ready to delete that Branch so that same
26:21 - command that I ran earlier just to
26:24 - double check that everything was
26:25 - successfully merged if we rerun get
26:29 - Branch D- merged here now you can see
26:32 - that Cal divide shows up here so that
26:34 - means that we have already merged in all
26:37 - the changes when in that Branch into
26:39 - master so now we're ready to delete that
26:41 - Branch since it's no longer necessary so
26:43 - we can do get branch and then- D which
26:47 - will delete it and then Cal divide which
26:50 - is the name of our Branch so now that
26:52 - has been deleted locally but remember
26:55 - that we also push that Branch to the
26:58 - remote repository so that command that
27:00 - we did earlier get Branch d a if we run
27:04 - that again then you can see that we
27:06 - deleted our local branch and all we have
27:08 - is Master but we still have this Cal
27:11 - divide branch on our remote repository
27:13 - so to delete a branch from the remote
27:16 - repository then it's this syntax here we
27:20 - can do a get push origin which is the
27:24 - name of our remote repository D- delete
27:27 - then the Branch so if we run that and
27:30 - then we rerun get Branch d a you can see
27:33 - that all we have is our local Master
27:34 - branch and our remote Master
27:37 - Branch okay and I know that that was a
27:40 - lot to take in especially if you're new
27:42 - to something like git but um it's really
27:46 - not that bad once you get the hang of it
27:48 - and this becomes part of your daily
27:50 - routine now uh really quick I'm going to
27:53 - run through a faster example here
27:55 - because I know that that seemed like a
27:57 - very long process but uh if I'm not
28:00 - talking through step by step then you'll
28:03 - see how fast it is to actually make
28:06 - these changes with this workflow so for
28:08 - example run the master Branch here and
28:11 - say I wanted to work on the subtract
28:12 - function so I can do get Branch
28:17 - subtract and then get checkout subtract
28:21 - so now I'm working on the subtract
28:22 - Branch I can come in here make the
28:25 - changes we want to return x - y y save
28:29 - that do a get status over here we've
28:32 - modified that we need want to add that
28:35 - to our staging directory now we want to
28:37 - commit those
28:39 - changes and you want the commit uh
28:43 - messages to be more detailed than that
28:44 - but this is just an example and then we
28:47 - can do a get push you
28:53 - origin subtract so now we've pushed that
28:56 - Branch to our remote Repository and
28:58 - let's say that all those tests ran well
29:02 - so now we're ready to merge this with
29:03 - Master we can check out our Master
29:05 - branch and now we can do a get pull
29:10 - because we want to pull in all the
29:11 - changes that have been made so now we
29:13 - pulled in all the changes now we can do
29:15 - a get
29:17 - merge of the subtract Branch this will
29:19 - merge Subtract with master and
29:24 - now we can push those changes and then
29:27 - you can go through the process of
29:28 - deleting that Branch just like we looked
29:31 - at earlier but you can see how that
29:33 - process isn't actually as slow as it was
29:36 - with me uh going through and step by-
29:38 - step explaining it um along the way so
29:41 - that was a broad overview of using the
29:43 - get command line on local and remote
29:46 - repositories I know that was a lot to
29:48 - take in for one video but I really hope
29:50 - it was useful for you guys if you do
29:52 - have any questions just ask in the
29:54 - comment section below now there's a lot
29:56 - that we didn't get to in this video and
29:58 - I'm going to make additional videos soon
30:01 - on other topics like if you run into
30:03 - merge conflicts if you need to undo your
30:06 - mistakes um some other common pitfalls
30:09 - uh tagging versions in git and also
30:12 - Advanced topics like um your git history
30:15 - rebasing cherry-picking and things like
30:18 - that so be sure to subscribe to the
30:21 - channel to make sure that you catch
30:22 - those later videos and again I hope this
30:25 - video was useful for you all and thank
30:27 - you for watching

Cleaned transcript:

hey how's it going everybody in this video we're going to go over get command line Basics we're going to talk a little bit about what git is and then we're going to walk through how to get get installed and then the basic commands for working with local and remote repositories I'm going to use a couple of images in this uh walk through and these images were taken from the prit book written by uh these two authors here and it is licens under the Creative Commons uh if you want to read the book which is uh great resource you can go to the git website click on the documentation and the book is listed there so this video is going to be useful for three different types of people uh first of all somebody who has never used Version Control before this is a great place to start because git is the most widely used Version Control System out there um second for people who have used Version Control but not get so if you're coming from a version control system like SVN uh then it's going to be great to learn about git also and third this will be useful for people who have used git but have mainly used the guey visual tools so the guey tools are really useful but it's better to learn these command line tools from the very beginning because uh the goys can only do so much and you'll eventually run into a situation where you get stuck and the underlying knowledge of the command line would be extremely useful so with all that said let's go ahead and get started so first of all git is a distributed version control system so if you're coming from a version control system like SVN which is a central Version Control System then what is the difference between central and distributed Version Control well a central version control system is located in one place so people can check out from this central location and make their changes and then check everything back in but this can be problematic if you can't get access to that Central server or that Central repository um so for example if that server's offline or you're working somewhere that doesn't have a network connection then you'll only be able to see the files that you've checked out from that repository and no additional information about that Central remote repository also if something happens to that Central repository or it somehow gets corrupted then you've got to hope that there's a backup of that code somewhere now on the other hand a distributed Version Control System like git in this situation everybody has a local repository so you can have the option to have that censal remote repository uh which we'll look at here in a little bit um but your local repository has all of the information that your that your remote repository has based on the last time that you sync those two together so the good thing about this is that if you don't have access to that remote repository then you can still view every single change that's been made to that repository since it was created so in a way it's almost like every developer has an entire backup of the repository so in the worst case scenario of something happening to the remote repository every developer has a copy of that same repository on their machine so that's why it's called a distributed version control system so now let's go ahead and get started with Git now I'm not going to go into too much detail about the installation here um if you go to the website which is gs cm.com uh and then you go to the downloads tab here then you can find the download the download for any operating system that you're working with and the installation is pretty selfexplanatory so after we get get installed there is a firsttime setup that we have to go through so first of all after you get get installed then you can check the version to make sure that it installed correctly so if you run this command here get version so I'm going to open up my terminal window here now if I run get version and it pops up with some version here here it says get version 2.3.2 then that means that git is successfully installed now once you have git successfully installed now we need to set up some Global configuration variables now these variables are important because if you're working with other developers then they need to know uh who is checking the code in and out and making changes and things like that so this is a way to add your name to all of your checkins and code changes so this is the syntax here to add these um variables in here so if I go back to my terminal I can type get config D Global user.name and then in quotes I can type in my name here so I'll type in Corey Schaefer hit enter and now we can do the same thing for email so I'll type in user. mail and then here I'll type in my email address at gmail.com hit enter and now after we've put in those values then to check th those values we can do get config dlist and this will list all of our configuration values here now I'm going to have a little bit more than you do you'll probably only have a few values here but I've customize my g a little bit over time so you can see all the values that I have listed here but the important ones look for are to make sure that we have our user.name set and our user. email set so once you have those values working then you are good to move on now get config was the first get verb that we actually used it was the first action that we used now if you ever need help with any of these actions then you can use this syntax either get help in the verb or get verb del and what I mean by that is using config as an example so say I want to see what you can do with the config action so I can do get help config and hit enter and it'll take me to the manual page and you can read all about it here um or the other syntax that you can do is get config del and read through there and you can do this with any get action so you get add dhel does the same thing it takes you to the manual page for the add action so that's extremely useful once you start doing uh more intermediate and advanced things with git uh it's useful to look at those manuals and see exactly what you can do with them now there are two common scenarios for people to begin using git so the first scenario is that you have an existing project on your local machine that you want to start tracking using git and the second scenario is whenever there's an existing project remotely that you want to start developing on so first let's take a look at that first example where you have a local code base that you want to start tracking using git so in order to do this it's just as easy as running the git and nit command from within the directory in your terminal so for example let me pull up my terminal here now the code that I want to start tracking if I do an LS within this directory the code that I want to start tracking is with within this local repo directory so if I CD to local repo and then I do an ls LA in here which will will list all of the files in the directory you can see that there is a project file here and there's a calc. py file here so to begin tracking this code with Git it's just as easy as running git and knit and if I hit enter you can see that an init initialized an empty git repository and now if I do n ls La then you can see that it placed this dogit file here now this dogit it's actually a directory this dogit directory contains everything that's relateded to our repository so if we ever want to stop tracking our project uh with Git then all we have to do is remove this git directory just like we would any other directory and if I do an lsla it's gone and we're no longer tracking this project with Git but we don't want to do that we want to uh track this project so let's do this again now you can see it put that uh get directory back there and now we are using get within this directory so now we're using git in our directory but we haven't actually committed anything yet so before we commit anything let's first run this get status here so if I pull up my terminal and I run get status you can see here that we have two untracked files project and cal. py now this project file is just a file that I created as an example of a file that we don't want in our repository for other people to see so there's a lot of files that contain personal preferences specific to our machine or our operating system that aren't actually part of the code that we want tracked so for example say that I had my personal preferences within this project file I wouldn't want to uh add those to the repository and whenever other people check those out they would be getting my preferences and we don't want that so what we want to do is ignore these files and to ignore files uh you just have to create a do get ignore file so I'm going to do a touch on a do get ignore file which will recreate which will create that get ignore file and now let me go ahead and open this up in my text editor okay so the get ignore file is just a simple text file where we can add files that we want get to ignore and we can also use wild cards so for example here in um this slide I have this star. pyc uh which will ignore all files with a pyc extension so that's a python example but that's not important it's I'm just showing the concept here so let's go ahead and add all these files here to our get ignore file and I'll paste that in and save that and now let me go back to my terminal now that we've added those to the get ignore file and saved it now let's rerun get status and now you can see here that the project file is no longer coming up in our list of untracked files it's only theg ignore file and the cal. py file and we want to commit the get ignore file because we want the repository uh to know to always ignore those files okay now let's take a step back here and try to picture exactly where we are right now now with Git there are three states that we need to know about there's the working directory the staging area and the committed files and right now we're currently in our working directory so untracked and modified files will be in our working directory and it will list those when we ran get status so you can see here if I open up my terminal then these are the files in our working directory here now the staging area is where we organize what we want to be committed to our repository now the reason for the staging area is so that we can pick and choose what we want committed so if we've done a lot of work spanning multiple files and we want to make multip multiple commits from those changes then you can stage individual files and commit those in small chunks at once so that's going to allow us to be more detailed with our commits so for example you don't want to make a commit that where you add a message that just say says like I made a lot of changes to the code you want commits that are very detailed as to what changes were made so now that we know about that staging area uh let's go ahead and add files to the staging area so if we want to add all the files that are currently untracked or that we've made changes to to uh to the staging area then we could run get add capital a um or we could add these individually so for example here if I did a get add. get ignore then if I do a get status and that's going to show us okay so here we have cal. py which is currently untracked and then you can see that our get ignore file is in our staging area because we ran get add. get ignore and like I said in the slide if we want to add everything to the staging area then we can just do get add capital A and hit enter and now if I run get status then you can see that all of our files are now in the staging area so if we were to run get commit right now then it would commit these changes to our repository now if you ever want to remove files from the staging area then you can use the get reset command so if I did get reset calc py and then did a get status you can see that the G ignore file is still in our changes to be committed which is in the staging area and our calc. py file is in the untracked files if you want to remove everything from the staging area then you can run get reset without any other options and it will remove everything so if I type get status now then you can see that all these files are moved back to our working directory as untracked files okay but we actually want to make a commit now so let's go through this process again what we want to do is we want to run get add a to add everything to the staging area and now if I run a get status you can see that all of these changes will be committed and in order to get these uh in order to commit these files we run get commit and then dasm which will put a message now the messages are important you want to be detailed as to the changes that you made uh to the code but this is our first uh commit here so we're just going to put something like initial commit so if I hit enter there you can see that it added the two files to the repository now if I run a get status you can see that it says that the working directory is clean that's because um we've committed those files and now we don't have any modified or untracked files those are being tracked now and we haven't modify them since we committed them now another useful command here is the log command so if we run get log then we can see the commit that we just made so this gives us the hash number of that commit now all those hashes will be unique and then you can see that the our author who made the commit and then the message for that commit also so now for this example we are successfully tracking our local project and we have made changes and uh committed those changes to the repository so now let's talk about the situation that we mentioned earlier uh where we want to track an existing remote project with Git now this is likely how uh most of you will be using git if you're going to be using it in the workplace so for example say that your company has a remote repository and you want to clone that remote repository and begin developing on it now the Syntax for this is get clone then the URL and then where you want to clone that repository so in the example that I'm going to use I'm going to use this remote repo here which is actually just a directory on my local machine now usually this is going to be a URL so for example if this was coming from uh GitHub or something like that then it may look something more like this so you do get clone and then the URL of the remote repository and then where you want to clone that repository so in this case the dot is just means in the current directory but like I said in this example I'm going to be using uh this directory here which is on my local machine but it's going to behave exactly like a remote repository would so let me open up my terminal and let me go back to this get Basics directory now if I run an LS here then I have this directory called clone repo I'm going to CD into that now if I do an ls LA here then you can see that this is completely empty these are just relative paths here so now I want to clone a remote repository here so I want to do a get clone and then the URL of the repository and then this dot means that I want to clone all the files from that repository into this current directory so if I hit enter you can see that it cloned into the current directory now if I do an ls LA then you can see now I have files here now I set up this sample remote repository to be very similar to the uh example that we just used in the local directory so now that we've cloned that remote repository now let's see how we can view information about that remote repository so in order to do that we can use a couple of commands one of these commands is get remote V and another is get Branch d a so if I was to do get remote V then you can see it lists the information to the repository here so um this is just the location on my local machine of where this repository is and also if I was to do get Branch d a then it will list all of the branches in our repository not only locally but remotely as well now we haven't gone over branches yet but we will do that here shortly now let's make a couple of changes to the code base and we can take a look at how to uh commit those files and how to push them to the remote repository so over here I'm going to go into this uh clone repo and open up this cal. py file and now I'm just going to make a simple change here I'm just going to change this multiply function to return what we want it to return so I'll do return x x y and I'll save that so now we've made a change to our code so now that we've made a change to our code how are we going to push these changes to the remote repository so first we need to commit these changes locally just like we did before so if I open up the terminal here then the first thing I can do is get diff and get diff is going to show me the changes that I have made to the code so you can see here that it has this minus sign with the pass that's what I removed and then the plus sign here return x * y That's What I added in so those are the changes that I made to the code now if I run get status we've seen this before then you can see that in our working directory we have this modified do uh cal. py file and now if you remember we want to add those to the staging directory so that they can be committed so we'll do a get add capital A to add all the changes now if I run get status again then we can see that those are ready to be committed and now we can do get commit DM and then for a message here we can just do uh you know multiply function okay so now we have committed these files locally and now we want to push these changes to the remote repository so that other people have access to those now whenever you're ready to commit those changes and push them to the remote repository there are two things that you want to do a get pull and a get push now people a lot of the times forget the get pull but you have to remember that we're now working on a project that could potentially have multiple developers and people have been uh pushing code to that remote repository while we've been working on our own featur so what the get pull does is it will pull any changes that have been made since the last time that we pulled from that repository and as you can see after we ran that pool it said that we were already up to date because there have been no changes to that remote repository since the last time that we pulled from it and now we're ready to push and we will do a get push and this origin here is just the name of our remote repository and then the master is the branch that we want to push to so so if we run that then we have successfully pushed those changes that we just made to the master branch of that remote repository so now that we've worked a little bit with local and remote repositories now let's go ahead and take a look at a common workflow that uh a lot of developers use when working with Git so I said before that we were going to take a deeper look into branching so so far we've been working directly on our Master branch but this isn't really how you should be using it from dayto day so let's say that for example now instead of that multiply function we want to work on our divide function so a common workflow that you're going to use to do this is to create a branch for your desired feature and then begin working off of that Branch so the Syntax for creating a branch is get branch and then the name of the branch which we'll just call calc divide so I'm just going to copy that now let's open up our terminal and now let's create that Branch so get Branch Cal divide and now if I run get Branch without the branch name then it's going to list all of my local branches you can see that I have Master here which has the asteris beside it that means that I that's the branch that I'm currently working on if I want to start working on the Cal divide Branch then I have to check that Branch out and that's using this syntax here get checkout and then the name of the branch so I'm going to do get checkout Cal divide now if I rerun that get Branch you can see that I am working on the calc divide Branch so now let's start working on the changes that we want to make on this Branch so the changes I want to make here I want to work on this divide function so I want to return x / Y and I'll save those changes and now that I've made those changes now let's just commit this just like we have been doing so if I do a get status you can see that our calc. py file has been modified I want to add those changes to our staging area using the get add command then I want to do a get commit with a message of we'll just call this divide Funk well divide function and now we we have successfully committed this change to our local calc divide Branch now this had no effect on our local Master branch and it's had no effect on our remote repository so now let's say that we want to uh push this Branch to our remote repository so this is the Syntax for doing that here this get push dasu origin which is the name of our remote repository and then the branch that we want to push to now I'm not going to go too far into what that dasu does since it's a basic git video but basically the U option just tells git that we want to associate our local Cal divide Branch with the remote calc divide branch and then in the future instead of doing this get push dasu uh origin Cal divide stuff like that we can just do uh get push and get pull like this and it will know that those two branches are associated to each other but we're not going to go too far into that right now so if I pull up the terminal here and I do this command get push dasu origin Cal divide hit enter now we have pushed that Cal divide Branch to the remote reposit repository so now if you remember uh earlier we did this get Branch d a command and if we run this again this command was to see all of our branches so if we run this then you can see that we can see our two local branches here Cal divide which has the asterisk which means we're currently working on that Branch then we can see that in our remote repository we have uh a cal divide branch and the master Branch now there's a lot of reasons for why you would want to push your branch up to the remote repository and a lot of companies that's where they run their unit test and things like that to make sure that all the code runs well before it's merged with Master but let's say that all of those unit tests and everything ran really well and now we're ready to merge that Branch with Master now the way we want to do this is we want to check out our local Master Branch so we'll do get checkout Master you can see here that we switched to our Master branch now we want to pull all the changes down uh remember before we commit anything to master we always want to pull down the changes in case any changes were made while we were working on our feature you can see here that it says that we're already up to date because nobody else has made changes to that remote Branch since we've been working on the Cal divide branch and now we can do this uh option on get Branch here which is D merged and what that's going to tell us is the branches that we've merged in so far bar and you can see here that if I run that Cal divide doesn't pop up here because it hasn't been merged yet so in order to merge that Branch with Master you do a get merge and then the name of the branch so I want to merge Cal divide with master so I'm in the master branch and I do a get merge Cal divide and it will merge those changes into Master now that I've have merged those changes into the master Branch then I can push these changes to our our remote Master Branch by doing a get push origin Master just like we did before and then now those changes have been pushed to the master uh Master branch on the remote repository so now that we have finished uh merging those changes from Cal divide uh now that feature is done and we're ready to delete that Branch so that same command that I ran earlier just to double check that everything was successfully merged if we rerun get Branch D merged here now you can see that Cal divide shows up here so that means that we have already merged in all the changes when in that Branch into master so now we're ready to delete that Branch since it's no longer necessary so we can do get branch and then D which will delete it and then Cal divide which is the name of our Branch so now that has been deleted locally but remember that we also push that Branch to the remote repository so that command that we did earlier get Branch d a if we run that again then you can see that we deleted our local branch and all we have is Master but we still have this Cal divide branch on our remote repository so to delete a branch from the remote repository then it's this syntax here we can do a get push origin which is the name of our remote repository D delete then the Branch so if we run that and then we rerun get Branch d a you can see that all we have is our local Master branch and our remote Master Branch okay and I know that that was a lot to take in especially if you're new to something like git but um it's really not that bad once you get the hang of it and this becomes part of your daily routine now uh really quick I'm going to run through a faster example here because I know that that seemed like a very long process but uh if I'm not talking through step by step then you'll see how fast it is to actually make these changes with this workflow so for example run the master Branch here and say I wanted to work on the subtract function so I can do get Branch subtract and then get checkout subtract so now I'm working on the subtract Branch I can come in here make the changes we want to return x y y save that do a get status over here we've modified that we need want to add that to our staging directory now we want to commit those changes and you want the commit uh messages to be more detailed than that but this is just an example and then we can do a get push you origin subtract so now we've pushed that Branch to our remote Repository and let's say that all those tests ran well so now we're ready to merge this with Master we can check out our Master branch and now we can do a get pull because we want to pull in all the changes that have been made so now we pulled in all the changes now we can do a get merge of the subtract Branch this will merge Subtract with master and now we can push those changes and then you can go through the process of deleting that Branch just like we looked at earlier but you can see how that process isn't actually as slow as it was with me uh going through and step by step explaining it um along the way so that was a broad overview of using the get command line on local and remote repositories I know that was a lot to take in for one video but I really hope it was useful for you guys if you do have any questions just ask in the comment section below now there's a lot that we didn't get to in this video and I'm going to make additional videos soon on other topics like if you run into merge conflicts if you need to undo your mistakes um some other common pitfalls uh tagging versions in git and also Advanced topics like um your git history rebasing cherrypicking and things like that so be sure to subscribe to the channel to make sure that you catch those later videos and again I hope this video was useful for you all and thank you for watching
