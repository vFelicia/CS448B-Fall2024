With timestamps:

00:00 - hey guys how's it going uh today we're
00:02 - going to take a look at array properties
00:04 - and methods uh we're going to go over
00:06 - each one of these and explain exactly
00:10 - what each one of them does also look at
00:11 - a few examples and also go over a few
00:14 - common problems that you may run into
00:16 - with each one of these um we're going to
00:18 - go over you know some of them may may
00:21 - seem pretty basic like length and index
00:23 - of and then we'll get down here to the
00:25 - harder stuff like um uh reduce and map
00:29 - and things like that
00:30 - um uh one thing before I get started if
00:32 - we go over here to the Milla developer
00:34 - Network to the array documentation
00:37 - pretty much everything I'm going to show
00:38 - you you can find here uh in the
00:40 - documentation and they also have some
00:42 - great examples over here um but you know
00:44 - some people learn this stuff better
00:46 - visually so I thought it was something
00:47 - that would make a good video um one more
00:50 - little side note here um the methods
00:53 - that we're going to take a look at if
00:55 - you see some of these have this little
00:56 - Beaker icon to the side of it uh these
00:59 - are exper mental and we're not going to
01:01 - go over those in this video but I will
01:03 - make a video for those in the near
01:06 - future um so with that let's go ahead
01:09 - and get
01:10 - started the first method we're going to
01:12 - take a look at is one called isarray and
01:14 - just like it sounds it's a method that
01:17 - takes in a variable and returns a true
01:19 - or false as to whether or not that
01:21 - variable is an array um so I have uh
01:24 - three values here I have a string an
01:26 - object and an array so if I run each one
01:29 - of these through this method and that is
01:32 - array do
01:36 - isarray and go ahead and grab this
01:38 - variable here and then let me copy and
01:41 - paste this line for each one of these
01:44 - and then paste in each one of these
01:49 - variables and this code that I'm going
01:51 - to uncommon out right here don't worry
01:53 - about this it's just some code that uh
01:55 - displays this down here into the HTML so
01:58 - that you can uh see the results a little
02:00 - bit better um so as we can see here uh
02:03 - the string variable that we passed
02:05 - through uh this array function return
02:08 - false the object also returned false and
02:11 - the array returned true um so you know
02:13 - no surprises there pretty much what we
02:15 - expected next up let's take a look at
02:19 - the length
02:21 - property you all have most likely seen
02:23 - the length property before um what it
02:26 - does is it uh looks at the length the
02:30 - total length of the array so right here
02:31 - we have a test array that is 0 1 2 3 4 5
02:36 - 6 7 8 9 so 10 total um so if we do array
02:41 - Lin equals array
02:43 - 2.
02:45 - length and then we output that to the
02:48 - HTML then we can see that that length
02:51 - that we get is 10 where you usually see
02:55 - something like this is in uh a for Loop
02:59 - so if I uncommon out this for Loop here
03:02 - um this is a for Lo that for Loop that
03:06 - uh calculates the sum total of all the
03:08 - numbers in this array um so you can see
03:10 - here it is uh for VAR I equal to zero
03:14 - less than array 2. length so um once I
03:19 - hits the point to where it is equal to
03:21 - the array 2. length then it breaks out
03:23 - of the for Loop and you can see here
03:26 - when it runs through that uh we get the
03:28 - sum total is 45 so that is the array
03:32 - length property um so next let's take a
03:36 - look at the index of
03:39 - method the index of method uh takes an
03:43 - element and checks whether or not it is
03:45 - in the array and if it is in the array
03:47 - it Returns the number of uh the index um
03:51 - so here I have a sample array that is
03:54 - just uh 1 123 1 23 1 23 um here I have a
03:59 - variable called index of three if I
04:01 - wanted to see what index three was in in
04:05 - that array I could do array
04:10 - 31. index of
04:14 - three and now if I uncom comment out
04:17 - this line to display it to the
04:18 - HTML then we can see see that the index
04:22 - of three is two and if we look up at our
04:24 - array 0 1 2 you can also pass in a
04:28 - second parameter into index of that
04:31 - specifies the starting position um so
04:34 - for example if I was to put in a two
04:37 - here and start at position two then it
04:41 - still finds index or the it still finds
04:44 - three at index two uh right at the
04:46 - starting point but if I was to do the
04:48 - starting point at index position three
04:51 - then you can see now down here in the
04:54 - HTML it returns uh five for the position
04:57 - that it found three uh because we
05:00 - started at 0 1 2 3 we started here and
05:05 - so it didn't equal three here then moved
05:08 - on to four then moved on to position
05:10 - five and then returned five there is
05:13 - also a last index of method if I copy
05:17 - this up here and paste it in and let me
05:20 - get rid of this starting
05:22 - position uh what last index of does is
05:25 - it SE instead of searching from left to
05:27 - right it searches from right to left
05:30 - um so last index of three in this
05:32 - situation uh gives us eight uh that's
05:36 - because it's starting here at the last
05:38 - element and finds three right off the
05:39 - bat uh which is the eighth index in this
05:43 - array and you can do starting positions
05:45 - with these as well if I put in a six
05:48 - here and save that then now it gives me
05:51 - the index of three is five because I
05:53 - started at index six which is this one
05:56 - value here and then it searches from
05:58 - right to left and finds three at the
06:02 - fifth position in the array and these
06:05 - don't only work with numbers here um
06:07 - that's just an easy example uh if I come
06:11 - down here and uncomment uncomment this
06:13 - code here um I have an array of uh
06:17 - strings of names and at this line here
06:21 - I'm searching for an index of Rob and
06:24 - you can see that it's
06:26 - 01 and if I look down here at the HTML
06:29 - index of Rob returns a one if I was to
06:32 - do a last index of for Rob then you can
06:36 - see it now returns a three because it's
06:38 - searching from right to left and there
06:40 - is a another Rob string in here um now
06:44 - if you search for an element that
06:46 - doesn't exist um you see here I'm
06:49 - searching for index of Joey and if I
06:52 - take a look at my list of names here
06:55 - there isn't one that exists and in that
06:57 - case index of turns a negative one index
07:01 - of and last index of both turn negative
07:04 - 1 if it searches the array and doesn't
07:06 - find the element so that is the index of
07:10 - method for the
07:11 - array let's move down here and take a
07:14 - look at push and pop push and pop are
07:19 - ways to add and remove elements from
07:22 - your array um so you can see here I have
07:25 - a sample array that is just simply um
07:28 - three numbers one 1 2 3 and to push a
07:33 - value on I can do array 4 do push and I
07:38 - will just push on the string one and
07:42 - then let me output this to the
07:47 - HTML and you can see here that um this
07:52 - value got pushed onto the end of the
07:54 - array so it's 1 2 3 and then the string
07:57 - one um so now me go ahead and push on
08:01 - another
08:02 - value and I'll just push on the string
08:06 - two and then let me output this to the
08:11 - HTML and you can see that this got added
08:13 - onto the array too so uh 1 two 3 then
08:17 - the strings one two now what pop does is
08:20 - it it pops that element off of the end
08:23 - the array um and it doesn't take any
08:25 - parameters so if I just run array 4 do
08:29 - pop then semicolon and then let me
08:33 - output
08:34 - that then you can see it pop that uh two
08:38 - string off of the end and if I run array
08:41 - 4. pop one more time then we should get
08:46 - back to our original array of one two
08:49 - three um and if you look down here um it
08:53 - popped off that string one and now we
08:56 - have 1 two 3 um so you can see here here
08:59 - I started off by pushing on the string
09:02 - one pushing on the string two and then
09:05 - popping off two and then popping off one
09:08 - um so basically that's how push and pop
09:11 - work um so now we can look at something
09:15 - very similar to push and pop and that is
09:18 - shift and unshift now shift and unshift
09:22 - are pretty much like push and pop except
09:26 - instead of adding and removing elements
09:28 - from the end of the array uh you add and
09:30 - remove elements to the beginning of the
09:32 - array uh so here I have the uh the same
09:37 - test array that I had before of 1 two
09:39 - three and if I do that array and unshift
09:44 - is what I use to add elements on and
09:47 - I'll just do the same one I'll do one
09:49 - the string one and then let me output
09:52 - that to the to the
09:54 - screen and you can see down here that
09:57 - whenever I unshifted one it added it to
10:00 - the beginning of the array um so now let
10:04 - me go ahead and unshift the string two
10:08 - and save that and let me output that to
10:12 - the
10:14 - screen and now you can see when I
10:16 - unshifted two uh it added it to the
10:19 - beginning of the array here array here
10:21 - so now I have 2 one and then 1 2 3 which
10:24 - was my original array um so now just
10:27 - like pop if I run shift
10:30 - then it will remove that element from
10:33 - the front of the array so I can
10:36 - do array
10:38 - 5. shift and then if I output my array
10:42 - to the
10:43 - screen then you can see I shifted and
10:46 - that two got removed from the front of
10:49 - the array and now if I run shift one
10:52 - more time then we should get the
10:55 - original array that we started with so
10:58 - shift and then let me output that array
11:01 - to the screen and now shift 1 2 3 we
11:05 - have the array that we started with so
11:08 - here I unshifted one and it added it to
11:11 - the beginning then I unshifted two and
11:14 - it added it to the beginning then I ran
11:16 - shift which shifted this two off of the
11:19 - front and then I ran shift again which
11:21 - shifted one off the front which left us
11:24 - with our original array of 1 2 3 so that
11:28 - is shift and unshift um so now we can
11:33 - take a look at the two string method

Cleaned transcript:

hey guys how's it going uh today we're going to take a look at array properties and methods uh we're going to go over each one of these and explain exactly what each one of them does also look at a few examples and also go over a few common problems that you may run into with each one of these um we're going to go over you know some of them may may seem pretty basic like length and index of and then we'll get down here to the harder stuff like um uh reduce and map and things like that um uh one thing before I get started if we go over here to the Milla developer Network to the array documentation pretty much everything I'm going to show you you can find here uh in the documentation and they also have some great examples over here um but you know some people learn this stuff better visually so I thought it was something that would make a good video um one more little side note here um the methods that we're going to take a look at if you see some of these have this little Beaker icon to the side of it uh these are exper mental and we're not going to go over those in this video but I will make a video for those in the near future um so with that let's go ahead and get started the first method we're going to take a look at is one called isarray and just like it sounds it's a method that takes in a variable and returns a true or false as to whether or not that variable is an array um so I have uh three values here I have a string an object and an array so if I run each one of these through this method and that is array do isarray and go ahead and grab this variable here and then let me copy and paste this line for each one of these and then paste in each one of these variables and this code that I'm going to uncommon out right here don't worry about this it's just some code that uh displays this down here into the HTML so that you can uh see the results a little bit better um so as we can see here uh the string variable that we passed through uh this array function return false the object also returned false and the array returned true um so you know no surprises there pretty much what we expected next up let's take a look at the length property you all have most likely seen the length property before um what it does is it uh looks at the length the total length of the array so right here we have a test array that is 0 1 2 3 4 5 6 7 8 9 so 10 total um so if we do array Lin equals array 2. length and then we output that to the HTML then we can see that that length that we get is 10 where you usually see something like this is in uh a for Loop so if I uncommon out this for Loop here um this is a for Lo that for Loop that uh calculates the sum total of all the numbers in this array um so you can see here it is uh for VAR I equal to zero less than array 2. length so um once I hits the point to where it is equal to the array 2. length then it breaks out of the for Loop and you can see here when it runs through that uh we get the sum total is 45 so that is the array length property um so next let's take a look at the index of method the index of method uh takes an element and checks whether or not it is in the array and if it is in the array it Returns the number of uh the index um so here I have a sample array that is just uh 1 123 1 23 1 23 um here I have a variable called index of three if I wanted to see what index three was in in that array I could do array 31. index of three and now if I uncom comment out this line to display it to the HTML then we can see see that the index of three is two and if we look up at our array 0 1 2 you can also pass in a second parameter into index of that specifies the starting position um so for example if I was to put in a two here and start at position two then it still finds index or the it still finds three at index two uh right at the starting point but if I was to do the starting point at index position three then you can see now down here in the HTML it returns uh five for the position that it found three uh because we started at 0 1 2 3 we started here and so it didn't equal three here then moved on to four then moved on to position five and then returned five there is also a last index of method if I copy this up here and paste it in and let me get rid of this starting position uh what last index of does is it SE instead of searching from left to right it searches from right to left um so last index of three in this situation uh gives us eight uh that's because it's starting here at the last element and finds three right off the bat uh which is the eighth index in this array and you can do starting positions with these as well if I put in a six here and save that then now it gives me the index of three is five because I started at index six which is this one value here and then it searches from right to left and finds three at the fifth position in the array and these don't only work with numbers here um that's just an easy example uh if I come down here and uncomment uncomment this code here um I have an array of uh strings of names and at this line here I'm searching for an index of Rob and you can see that it's 01 and if I look down here at the HTML index of Rob returns a one if I was to do a last index of for Rob then you can see it now returns a three because it's searching from right to left and there is a another Rob string in here um now if you search for an element that doesn't exist um you see here I'm searching for index of Joey and if I take a look at my list of names here there isn't one that exists and in that case index of turns a negative one index of and last index of both turn negative 1 if it searches the array and doesn't find the element so that is the index of method for the array let's move down here and take a look at push and pop push and pop are ways to add and remove elements from your array um so you can see here I have a sample array that is just simply um three numbers one 1 2 3 and to push a value on I can do array 4 do push and I will just push on the string one and then let me output this to the HTML and you can see here that um this value got pushed onto the end of the array so it's 1 2 3 and then the string one um so now me go ahead and push on another value and I'll just push on the string two and then let me output this to the HTML and you can see that this got added onto the array too so uh 1 two 3 then the strings one two now what pop does is it it pops that element off of the end the array um and it doesn't take any parameters so if I just run array 4 do pop then semicolon and then let me output that then you can see it pop that uh two string off of the end and if I run array 4. pop one more time then we should get back to our original array of one two three um and if you look down here um it popped off that string one and now we have 1 two 3 um so you can see here here I started off by pushing on the string one pushing on the string two and then popping off two and then popping off one um so basically that's how push and pop work um so now we can look at something very similar to push and pop and that is shift and unshift now shift and unshift are pretty much like push and pop except instead of adding and removing elements from the end of the array uh you add and remove elements to the beginning of the array uh so here I have the uh the same test array that I had before of 1 two three and if I do that array and unshift is what I use to add elements on and I'll just do the same one I'll do one the string one and then let me output that to the to the screen and you can see down here that whenever I unshifted one it added it to the beginning of the array um so now let me go ahead and unshift the string two and save that and let me output that to the screen and now you can see when I unshifted two uh it added it to the beginning of the array here array here so now I have 2 one and then 1 2 3 which was my original array um so now just like pop if I run shift then it will remove that element from the front of the array so I can do array 5. shift and then if I output my array to the screen then you can see I shifted and that two got removed from the front of the array and now if I run shift one more time then we should get the original array that we started with so shift and then let me output that array to the screen and now shift 1 2 3 we have the array that we started with so here I unshifted one and it added it to the beginning then I unshifted two and it added it to the beginning then I ran shift which shifted this two off of the front and then I ran shift again which shifted one off the front which left us with our original array of 1 2 3 so that is shift and unshift um so now we can take a look at the two string method
