With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning about loops
00:03 - and iterations specifically we'll be
00:05 - going over for loops and while Loops now
00:07 - we've seen Loops a couple of times in
00:09 - our previous videos when looping through
00:11 - strings or lists but there's some more
00:14 - functionality that we haven't gone over
00:15 - yet uh that we'll see in this video but
00:18 - first let's just do a quick recap so
00:20 - we've got a list of numbers here with
00:22 - numbers one through five so let's Loop
00:24 - through this list so to do this we're
00:26 - going to use a for Loop so we'll say for
00:29 - num in nums and within here I'm just
00:32 - going to print out that num so what
00:35 - we're saying here is that we want to
00:36 - create a loop where We're looping
00:38 - through each value of our list and each
00:41 - time through the loop this num variable
00:44 - will be equal to the next item in the
00:46 - list so the first time through it'll be
00:48 - equal to one the next time through it'll
00:50 - be equal to two and so on so if we run
00:54 - this we can see that it looped through
00:56 - and printed each number of our list so
00:59 - now let's look at two important keywords
01:02 - when working with loops and these are
01:05 - the break and continue keywords so the
01:07 - break keyword will completely break out
01:10 - of a loop and the continue keyword moves
01:13 - on to the next iteration of the loop so
01:16 - first let's look at the break statement
01:18 - so let's say that we are looking for a
01:21 - certain number in our list and once we
01:24 - find it we don't need to continue
01:25 - looping through the rest of our values
01:27 - now this is when the break statement
01:29 - comes in handy so let's say that we're
01:32 - looking for the value of three so I
01:34 - could come in here to our list and I
01:36 - could say if num equals equals 3 then
01:41 - within this uh conditional we'll print
01:43 - out that we found it and then we will
01:48 - break out of that Loop so now let's go
01:51 - ahead and run this so we can see that it
01:54 - looped through the numbers one and two
01:57 - but it didn't hit this conditional when
01:59 - when the num equal one and the num equal
02:03 - two and since those first two values
02:05 - didn't meet this conditional then it
02:06 - didn't print out found and it didn't
02:08 - break out of the loop but when it got to
02:10 - number three it did meet this
02:12 - conditional so it printed out found and
02:15 - then our break statement broke out of
02:17 - the for Loop and when it broke out of
02:19 - the for Loop you can see that we didn't
02:21 - iterate through any more values so we
02:23 - did not get through to values four or
02:26 - values five now notice that we broke out
02:30 - of our Loop before we printed the number
02:34 - so the three never got printed out but
02:36 - if our print statement were Above This
02:38 - conditional then the three would have
02:40 - been printed out so the break statement
02:42 - breaks out of the loop but what if we
02:44 - wanted to just ignore a value but not
02:47 - break out of the loop completely so to
02:49 - do this we can use the continue
02:51 - statement now continue will skip to the
02:54 - next iteration of a loop so if we
02:56 - replace this break statement with
02:59 - continue
03:00 - uh and run this so we can see here that
03:03 - just like before the first two times
03:05 - through with one and two it didn't meet
03:07 - this conditional so it didn't do
03:09 - anything within this if block and it
03:11 - just printed out our number but when we
03:13 - got to the number three it did meet this
03:16 - conditional and it came in here and
03:17 - printed out found and then our con
03:19 - continue statement just skipped to the
03:21 - next iteration without coming out here
03:24 - and printing out the number three so as
03:26 - soon as we hit continue then it just
03:28 - went to the next iteration which was
03:30 - four and five so when four and five ran
03:33 - through they didn't meet these
03:35 - conditionals and it just printed out the
03:36 - number so it's important to understand
03:38 - the break and continued statements and
03:40 - the differences between those because
03:42 - there's a lot of different use cases for
03:44 - when they come in handy to solve certain
03:46 - problems okay so now let's look at
03:47 - something that we might run into which
03:50 - is a loop within a loop and this is
03:52 - possible so within our Loop here I'm
03:54 - going to replace this conditional with
03:57 - an inner loop so now I'll say four
03:59 - letter in and I'll just uh make a string
04:02 - here of ABC Now within this inter Loop
04:06 - then I'll just go ahead and print out
04:08 - num comma and the letter so now what's
04:11 - going to happen here is that for each
04:14 - number it'll Loop through every
04:16 - character in this string and print out
04:18 - the number and the character and then
04:21 - move on to the next number and do it all
04:23 - over again so let's run this and see
04:25 - what we get so now let me make this just
04:27 - a little bit larger here so now we can
04:30 - see that what happened is that for one
04:32 - it looped through every letter in the
04:35 - string and then after it finished that
04:37 - inter Loop then it moved on to the next
04:39 - number before doing the exact same thing
04:42 - so we have 1 a 1 b 1 C then it moved on
04:45 - to two 2 a 2 b 2 C and so on so what
04:49 - this really did is it gave us every
04:50 - combination of those numbers and
04:52 - characters now you want to be careful
04:54 - with nested list because these
04:56 - combinations can grow pretty quickly so
04:59 - if you have tested loops with a lot of
05:01 - different values then it may take a
05:03 - while to Loop through all of those
05:04 - different combinations okay so something
05:07 - that we'll probably run into a lot is
05:09 - that there's going to be times when we
05:11 - just want to go through a loop a certain
05:14 - number of times and there's a built-in
05:16 - function called range that is really
05:18 - useful for this so let's say that we
05:20 - wanted to just run through a loop 10
05:23 - times so to do this we can just say 4 I
05:26 - in range 10 and with in here we will
05:30 - just print out I so now if we run this
05:34 - then we can see that it just prints out
05:36 - 0 through 9 which is 10 items so we
05:39 - start at zero and go up to but not
05:42 - including this number that we passed
05:44 - into range now if we don't want to start
05:47 - at zero then we can also pass a starting
05:49 - value into range so if we wanted to
05:52 - start at one and print out the the
05:54 - values 1 through 10 then what we could
05:57 - do is say that we want to start at one
06:00 - and now we're going to have to go up to
06:03 - 11 because it doesn't include the last
06:05 - value so now if we run this then we can
06:08 - see that now it started at one and goes
06:11 - up two but not including 11 so 1 through
06:14 - 10 okay so now let's take a look at
06:17 - while Loops so our for Loops iterated
06:20 - through a certain number of values but
06:22 - while Loops will just keep going until
06:25 - until a certain condition is met or
06:27 - until we hit a break so for example
06:30 - let's say that we had a variable here of
06:33 - xal to0 and now we can say that while
06:37 - that X is less than 10 then what we want
06:40 - to do is just print out X and then we
06:44 - will iterate X by 1 now we have to
06:47 - remember that this Loop is going to go
06:49 - on forever until this condition here
06:52 - evaluates to false so if we want this
06:55 - Loop to end at some point then we have
06:57 - to remember to increment this X so that
07:00 - at some point it will be greater than or
07:03 - equal to 10 so that it breaks out so now
07:06 - if we run this then we can see that it
07:08 - prints out 0 through 9 so it came in and
07:12 - saw that x was 0 Which is less than 10
07:16 - so it goes through the loop prints the
07:17 - value and increments X by one now X is
07:20 - equal to one and it does this check
07:23 - again so one is still less than 10 so it
07:25 - stays in the loop and it does this until
07:28 - we increment X X from 9 to 10 and then
07:32 - it'll come in here and make that check
07:34 - and it checks if 10 is less than 10
07:36 - which it doesn't um which evaluates to
07:39 - false so it breaks out of that Loop now
07:42 - at any point you can just use a break to
07:45 - break out of the while loop just like we
07:48 - did with the for Loop so if I came in
07:50 - here and I said if x is equal to five
07:54 - then we just want to break out so if we
07:57 - run that then we can see that it went Z
07:59 - through 4 and once X was equal to 5 then
08:02 - we hit that break statement now
08:04 - sometimes you'll just want to create an
08:06 - infinite Loop That Never Ends until we
08:09 - get some input or find some value now to
08:12 - create an infinite Loop you can just
08:14 - replace the comparison that we're doing
08:16 - here with a value of true so now that we
08:19 - have an infinite Loop there's no
08:21 - conditional here that can break out so
08:23 - now we have to have this break statement
08:24 - in here if we ever want to stop this
08:26 - Loop so if we run this then we can see
08:29 - that we get the uh same output there now
08:31 - in this example we're using a
08:33 - conditional but this is also how you
08:35 - would keep a loop going indefinitely
08:37 - until you find or receive values that
08:39 - you're looking for now if you ever
08:41 - accidentally get stuck in an infinite
08:42 - Loop then within most environments or
08:45 - operating systems you can interrupt that
08:47 - by pressing controll C to stop the
08:50 - process so if we comment out our
08:53 - conditional here with the break
08:54 - statement then this is going to get
08:57 - stuck in an infinite Loop and just go on
08:59 - forever so now if we run this code then
09:03 - we can see that we get stuck in this
09:04 - infinite Loop where it just keeps
09:06 - incrementing X by one and printing out X
09:09 - now to get out of this on most operating
09:11 - systems you can press contrl C and it'll
09:14 - interrupt that so I press contrl C and
09:17 - you can see that it was cancelled and if
09:19 - you are in your terminal or command
09:21 - prompt then cons uh control C should
09:23 - send a keyboard interrupt okay so I
09:26 - think that is going to do it for this
09:27 - video I hope that now you have a clear
09:29 - clear understanding of the different
09:30 - loops and how the break and continue
09:32 - statements work in the next video we'll
09:34 - be learning how to write functions but
09:36 - if anyone has any questions about what
09:38 - we covered in this video then feel free
09:39 - to ask in the comments section below and
09:41 - I'll do my best to answer those um if
09:43 - you enjoy these tutorials and would like
09:44 - to support them then there are several
09:46 - ways you can do that the easiest way is
09:47 - to Simply like the video and give it a
09:49 - thumbs up and also it's a huge help to
09:51 - share these videos with anyone who you
09:52 - think would find them useful and if you
09:53 - have the means you can contribute
09:55 - through patreon and there's a link to
09:56 - that page in the description section
09:57 - below be sure to subscribe for future
09:59 - videos and thank you all for
10:12 - watching

Cleaned transcript:

hey there how's it going everybody in this video we'll be learning about loops and iterations specifically we'll be going over for loops and while Loops now we've seen Loops a couple of times in our previous videos when looping through strings or lists but there's some more functionality that we haven't gone over yet uh that we'll see in this video but first let's just do a quick recap so we've got a list of numbers here with numbers one through five so let's Loop through this list so to do this we're going to use a for Loop so we'll say for num in nums and within here I'm just going to print out that num so what we're saying here is that we want to create a loop where We're looping through each value of our list and each time through the loop this num variable will be equal to the next item in the list so the first time through it'll be equal to one the next time through it'll be equal to two and so on so if we run this we can see that it looped through and printed each number of our list so now let's look at two important keywords when working with loops and these are the break and continue keywords so the break keyword will completely break out of a loop and the continue keyword moves on to the next iteration of the loop so first let's look at the break statement so let's say that we are looking for a certain number in our list and once we find it we don't need to continue looping through the rest of our values now this is when the break statement comes in handy so let's say that we're looking for the value of three so I could come in here to our list and I could say if num equals equals 3 then within this uh conditional we'll print out that we found it and then we will break out of that Loop so now let's go ahead and run this so we can see that it looped through the numbers one and two but it didn't hit this conditional when when the num equal one and the num equal two and since those first two values didn't meet this conditional then it didn't print out found and it didn't break out of the loop but when it got to number three it did meet this conditional so it printed out found and then our break statement broke out of the for Loop and when it broke out of the for Loop you can see that we didn't iterate through any more values so we did not get through to values four or values five now notice that we broke out of our Loop before we printed the number so the three never got printed out but if our print statement were Above This conditional then the three would have been printed out so the break statement breaks out of the loop but what if we wanted to just ignore a value but not break out of the loop completely so to do this we can use the continue statement now continue will skip to the next iteration of a loop so if we replace this break statement with continue uh and run this so we can see here that just like before the first two times through with one and two it didn't meet this conditional so it didn't do anything within this if block and it just printed out our number but when we got to the number three it did meet this conditional and it came in here and printed out found and then our con continue statement just skipped to the next iteration without coming out here and printing out the number three so as soon as we hit continue then it just went to the next iteration which was four and five so when four and five ran through they didn't meet these conditionals and it just printed out the number so it's important to understand the break and continued statements and the differences between those because there's a lot of different use cases for when they come in handy to solve certain problems okay so now let's look at something that we might run into which is a loop within a loop and this is possible so within our Loop here I'm going to replace this conditional with an inner loop so now I'll say four letter in and I'll just uh make a string here of ABC Now within this inter Loop then I'll just go ahead and print out num comma and the letter so now what's going to happen here is that for each number it'll Loop through every character in this string and print out the number and the character and then move on to the next number and do it all over again so let's run this and see what we get so now let me make this just a little bit larger here so now we can see that what happened is that for one it looped through every letter in the string and then after it finished that inter Loop then it moved on to the next number before doing the exact same thing so we have 1 a 1 b 1 C then it moved on to two 2 a 2 b 2 C and so on so what this really did is it gave us every combination of those numbers and characters now you want to be careful with nested list because these combinations can grow pretty quickly so if you have tested loops with a lot of different values then it may take a while to Loop through all of those different combinations okay so something that we'll probably run into a lot is that there's going to be times when we just want to go through a loop a certain number of times and there's a builtin function called range that is really useful for this so let's say that we wanted to just run through a loop 10 times so to do this we can just say 4 I in range 10 and with in here we will just print out I so now if we run this then we can see that it just prints out 0 through 9 which is 10 items so we start at zero and go up to but not including this number that we passed into range now if we don't want to start at zero then we can also pass a starting value into range so if we wanted to start at one and print out the the values 1 through 10 then what we could do is say that we want to start at one and now we're going to have to go up to 11 because it doesn't include the last value so now if we run this then we can see that now it started at one and goes up two but not including 11 so 1 through 10 okay so now let's take a look at while Loops so our for Loops iterated through a certain number of values but while Loops will just keep going until until a certain condition is met or until we hit a break so for example let's say that we had a variable here of xal to0 and now we can say that while that X is less than 10 then what we want to do is just print out X and then we will iterate X by 1 now we have to remember that this Loop is going to go on forever until this condition here evaluates to false so if we want this Loop to end at some point then we have to remember to increment this X so that at some point it will be greater than or equal to 10 so that it breaks out so now if we run this then we can see that it prints out 0 through 9 so it came in and saw that x was 0 Which is less than 10 so it goes through the loop prints the value and increments X by one now X is equal to one and it does this check again so one is still less than 10 so it stays in the loop and it does this until we increment X X from 9 to 10 and then it'll come in here and make that check and it checks if 10 is less than 10 which it doesn't um which evaluates to false so it breaks out of that Loop now at any point you can just use a break to break out of the while loop just like we did with the for Loop so if I came in here and I said if x is equal to five then we just want to break out so if we run that then we can see that it went Z through 4 and once X was equal to 5 then we hit that break statement now sometimes you'll just want to create an infinite Loop That Never Ends until we get some input or find some value now to create an infinite Loop you can just replace the comparison that we're doing here with a value of true so now that we have an infinite Loop there's no conditional here that can break out so now we have to have this break statement in here if we ever want to stop this Loop so if we run this then we can see that we get the uh same output there now in this example we're using a conditional but this is also how you would keep a loop going indefinitely until you find or receive values that you're looking for now if you ever accidentally get stuck in an infinite Loop then within most environments or operating systems you can interrupt that by pressing controll C to stop the process so if we comment out our conditional here with the break statement then this is going to get stuck in an infinite Loop and just go on forever so now if we run this code then we can see that we get stuck in this infinite Loop where it just keeps incrementing X by one and printing out X now to get out of this on most operating systems you can press contrl C and it'll interrupt that so I press contrl C and you can see that it was cancelled and if you are in your terminal or command prompt then cons uh control C should send a keyboard interrupt okay so I think that is going to do it for this video I hope that now you have a clear clear understanding of the different loops and how the break and continue statements work in the next video we'll be learning how to write functions but if anyone has any questions about what we covered in this video then feel free to ask in the comments section below and I'll do my best to answer those um if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to Simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching
