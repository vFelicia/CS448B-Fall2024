With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning how to use
00:03 - key-based authentication instead of
00:04 - passwords in order to SSH into a machine
00:07 - so this is much more convenient and also
00:09 - more secure than using passwords so if
00:11 - you ever plan on doing any system
00:13 - administration work in the future
00:14 - then you'll most likely spend a lot of
00:16 - time at using the secure shell to log
00:18 - into different machines to do some work
00:20 - and setting up key-based authentication
00:22 - not only saves time but it's more secure
00:24 - and also allows you to automate tasks
00:27 - more easily now for this video I'm going
00:29 - to assume that you currently have a
00:30 - machine that you can SSH into using a
00:32 - password and if you don't currently have
00:34 - a machine that you can SSH into but
00:37 - would like to follow along with this
00:38 - video then you can watch my video on
00:39 - setting up virtual machines within
00:41 - VirtualBox
00:42 - that you can access via SSH so let's go
00:45 - ahead and get started I have two
00:47 - terminals pulled up right now and on the
00:48 - left I'm going to keep as my local
00:50 - machine and on my right I'm going to use
00:52 - as my remote machine so I currently have
00:55 - a virtual machine running that I can SSH
00:57 - into but it requires that I enter a
00:59 - password every time so for example I can
01:02 - say SSH core EMS that's the username on
01:06 - that machine and the IP address for this
01:09 - machine is 192.168.1 hundred so the
01:14 - first time we try to SSH in we'll have
01:16 - to say that we want to continue and then
01:18 - I'll ask us for our password just like
01:20 - it did there and now we are in the
01:22 - machine so our goal is to be able to log
01:24 - into this machine without using a
01:26 - password now I'm going to leave this
01:28 - remote machine that logged in over here
01:30 - and leave this connection open while
01:32 - we're looking at how we can set up
01:33 - key-based authentication so what we're
01:36 - going to do is we're going to create a
01:37 - private key and a public key now the
01:40 - private key will live on our local
01:42 - machine and the public key is going to
01:44 - live on the machine
01:45 - that will be SSH into or the remote
01:47 - machine so when I first learned how to
01:49 - setup key based authentication for SSH I
01:51 - could never remember if it was the
01:53 - private or public key that I was
01:55 - supposed to push to the remote machine
01:57 - that I wanted to log into so just to say
01:59 - that again it's the public key that we
02:02 - want to push to that remote machine that
02:04 - we'll be logging into now you can
02:06 - remember this by thinking about the
02:07 - private key being on the machine that
02:09 - only you have access to your private
02:11 - local machine and the public
02:13 - key will be placed on the machine that
02:15 - you'll be trying to access so to create
02:17 - the public and private keys on our local
02:20 - machine we're going to use the command
02:21 - SSH - keygen
02:24 - now if you look this up online before
02:26 - like in github Orla no documentation or
02:29 - something like that then you'll notice a
02:31 - lot of people recommend adding a - key
02:34 - RSA - B 4096 now that - key option just
02:40 - means that we want to make sure that
02:41 - we're using RSA as the type of key and
02:43 - the - B option just makes our keys a bit
02:46 - more secure so I'm going to go ahead and
02:48 - add that in the default is 2048
02:50 - and it's probably fine but it's easy to
02:52 - bump this up so we might as well do that
02:54 - so now let's go ahead and run this
02:56 - command and it'll ask us where we want
02:59 - to save this and we'll just keep that
03:00 - default location and then it'll ask us
03:03 - to insert a passphrase now if you want
03:07 - more security or you're worried about
03:09 - someone getting access to your local
03:11 - computer then you can put in a
03:12 - passphrase here but I'm just going to go
03:14 - ahead and leave this blank so now that
03:17 - key was created so now that we created
03:20 - those keys we can navigate to the
03:22 - directory where those were placed and
03:24 - that was in our home directory and this
03:26 - dot SSH directory now if I list the
03:30 - files in this directory then you can see
03:33 - that we have two keys here ID underscore
03:36 - RSA is our private key and ID underscore
03:40 - RSA dot pub is our public key so ID
03:43 - underscore RSA pub is the one that we
03:46 - want to copy over to our remote machine
03:48 - that we're going to be logging into now
03:50 - at this point some people use a simple
03:52 - command called SSH - copy - ID ssh copy
03:57 - ID but if you're on a Mac and don't have
03:59 - that command by default first we're
04:01 - going to go ahead and go over how to do
04:03 - this manually which isn't very difficult
04:05 - and once we do it manually then we'll
04:07 - also see how to do this with SSH copy ID
04:09 - so first let's do this manually so we
04:12 - still have our ssh connection open up on
04:15 - this machine over here to our right and
04:17 - before I copy the key over to that
04:19 - remote machine I'm first going to make
04:21 - sure that the machine has a dot ssh
04:24 - directory for me to place that file in
04:26 - so
04:27 - within my home folder over here on my
04:29 - local machine or in my remote machine
04:32 - and if I do a PWD then you can see that
04:34 - my home directory on this remote machine
04:37 - is located at - home - core EMS now if
04:40 - you're not within your home directory
04:41 - then you can just type in CD enter and
04:43 - it will automatically take you there
04:45 - so once you're in that home directory
04:47 - then let's create that dot SSH directory
04:50 - we can do that with make dirty SSH and
04:54 - that will create our dot SSH directory
04:56 - if it doesn't already exist so now let's
04:58 - copy our public key over to that remote
05:00 - machine now to do this I'm going to use
05:02 - the SCP command SCP is a way to copy
05:06 - files to a machine over SSH now this is
05:10 - somewhat of a long command but to run
05:12 - this command I'm just going to say SCP
05:14 - and then my home directory dot SSH
05:18 - that's where we placed those keys and
05:19 - then the key that I want to come copy
05:22 - over is ID underscore RSA dot pub now
05:26 - that's the file that we want to copy
05:27 - over so now we'll put in a space and now
05:30 - where we want to copy it so we want to
05:31 - copy it to core EMS 192.168.1 hundred so
05:37 - that is the username at the machine and
05:40 - once we have that type in we're going to
05:42 - type in a colon here to specify where in
05:45 - that machine we want to place this file
05:47 - we want to place this in slash home
05:49 - slash core EMS which is that user's home
05:52 - directory slash dot SSH that's the one
05:56 - that we just created and then slash and
05:59 - now what we want to call this key when
06:01 - we move it over so I'm just going to
06:03 - rename this to uploaded underscore key
06:06 - pub now that's not necessary but that's
06:09 - just one that I usually pick so that it
06:11 - stands out so now if I hit enter then it
06:14 - will ask for our password because we
06:15 - haven't set up key-based authentication
06:18 - yet so now I'll put in that password so
06:20 - now that should have copied over so if
06:22 - we come over to our local machine here
06:23 - and we do an LS on that dot SSH
06:26 - directory then we can see that we have
06:28 - that uploaded key public key so now that
06:32 - we have that key let's append the
06:34 - contents of that file to a new file
06:36 - called authorized keys now this file
06:39 - doesn't currently exist but it
06:41 - we'll create it when we append the key
06:43 - to that file so to do this we're just
06:45 - going to say cat and then the file that
06:48 - we want to cut is in our home folder ssh
06:52 - uploaded key pub and now this double
06:57 - carrots here will append to a file and
06:59 - the file that we want to append to is
07:02 - the our home folder dot ssh and this is
07:06 - going to be called authorized underscore
07:08 - keys now this is a file it's not a
07:11 - directory on linux systems files don't
07:14 - have to have a file extension so we're
07:15 - just going to leave it like this and
07:17 - this appending right here will
07:19 - automatically create this file when we
07:21 - run this so let's go ahead and run that
07:23 - and now let's go ahead and make sure
07:25 - that worked by typing in cat which will
07:28 - print out the contents of the file and
07:30 - we'll print out that authorized key file
07:33 - that we just created and you can see
07:35 - here that it did append that public key
07:37 - information to that file ok and now I'm
07:40 - just going to clear my screen so we can
07:42 - see a little bit better here so now we
07:44 - should make sure that our permissions
07:46 - are set up correctly now if you don't
07:48 - know Linux permissions very well then
07:50 - that will be a topic for another video
07:52 - but in this video we will just set these
07:54 - permissions where they need to be
07:55 - so our SSH folder should be set to 700
07:58 - and the files within that folder should
08:00 - be set to 600 so we can set this by
08:03 - saying chmod 701
08:08 - our dot SSH folder so we'll go ahead and
08:11 - run that and now we want to do a chmod
08:14 - 600
08:16 - all of the files in that folder so we're
08:20 - going to put an asterisk there to get
08:22 - all of the files and we're setting those
08:24 - to 600 so I'll run that okay so now if
08:27 - we did all of that correctly then we
08:28 - should be able to SSH into our machine
08:31 - without a password so now let's try this
08:33 - from our local machine so let's do an
08:36 - SSH we want to SSH in as core EMS at
08:42 - 192.168.1 hundred ok so awesome that
08:45 - looked like it worked and that we were
08:47 - able to log in without a password so now
08:50 - that you have this set up to use
08:52 - key-based authentication one last thing
08:54 - that you might want
08:55 - do is maximize security by only allowing
08:58 - this kind of logging login and turning
09:01 - off password authentication all together
09:02 - so this will require all users connect
09:05 - through SSH using this key based
09:08 - authentication so this is a really quick
09:10 - change so let me show you how to do this
09:11 - really quick since we're already logged
09:13 - into that machine over here so what I'm
09:16 - going to do is I'm just going to use
09:17 - this console to change our SSH
09:19 - configuration to turn off password
09:21 - authentication so to do this we need to
09:23 - edit our SSH config file and on a Linux
09:26 - machine that file is located at /et c /
09:31 - ssh slash sshd underscore config now
09:35 - it's a good idea to always make a backup
09:37 - of configuration files before you change
09:39 - anything so first I'm going to do a sudo
09:42 - copy of that file now is located at
09:44 - slash etc' slice SSH slash SSH
09:49 - underscore OSS HD underscore config so
09:53 - now to back this up we'll just put it in
09:55 - that same folder but we will give it a
09:58 - name of the same name but with a dot
10:03 - back to so that it's a backup file and
10:06 - then we'll have to put in our password
10:07 - there so now that we have a backup of
10:10 - that configuration file now let's go
10:12 - ahead and just change the original file
10:14 - and turn off that password
10:15 - authentication so I'm going to do a sudo
10:18 - nano you can use them if you want to use
10:20 - them but if you're not familiar with
10:22 - them the Nano is an easier editor for
10:26 - beginners so let's go ahead and just run
10:28 - nano on that file and what we want to
10:31 - find is the option that is password
10:35 - authentication so if we scroll down here
10:38 - a bit until we find this so it's right
10:42 - here so there's a chance that this is
10:44 - going to be commented out that's what
10:45 - this pound sign here is so let's
10:47 - uncomment out that and for password
10:49 - authentication we instead want to set
10:51 - this equal to
10:52 - no so now let's go ahead and save the
10:54 - file so on Nano that's control X and
10:57 - then a wide to save now you should have
10:59 - no problem finding that option in that
11:00 - file but even if you don't find that you
11:02 - can just add it in there so now that
11:05 - we've saved that let's restart our SSH
11:07 - service for those
11:08 - to take place and on a bun - we can do
11:11 - that by saying sudo service SSH restart
11:17 - okay and now with that change that
11:19 - should prevent anyone from using regular
11:22 - pass passwords to log into that machine
11:24 - and that's going to make it a lot more
11:25 - secure okay so that is how you set up
11:28 - key-based authentication manually but
11:31 - now let's see how to do it using the ssh
11:34 - copy ID command so I have another
11:37 - terminal pulled up here now I have
11:39 - another machine that is able to SSH into
11:43 - as well and it is at query m/s at
11:50 - 192.168.1 hundred this one is at one
11:53 - zero one and we'll just go ahead and
11:55 - connect to this machine regularly using
11:58 - our password and once we're in I'll
12:00 - clear that so now real quick we're going
12:03 - to learn how we can use this ssh copy ID
12:05 - command to set up key-based
12:07 - authentication here on our second
12:09 - machine now this is considered a way
12:11 - easier approach than the one that I
12:12 - showed you how to do manually but for
12:15 - some of you meet you may not have access
12:16 - to this ssh copy ID command so I wanted
12:19 - to show the way that would work for
12:20 - everyone first and then this easier
12:23 - method if it's available to you so if
12:25 - you're on Linux then you should already
12:26 - have ssh copy ID as a command but if
12:30 - you're on Mac then you can install this
12:32 - by using homebrew and if you don't know
12:36 - what homebrew is basically it's just a
12:38 - package manager for the Mac now I have
12:40 - the website for it pulled up right here
12:42 - it's at HTTP brew SH and it's super easy
12:46 - to install and once you have that
12:48 - installed then it's just as easy as
12:51 - saying brew install SSH - copy - ID and
12:56 - then you'll have that command available
12:58 - to you okay so on our local machine we
13:01 - already have that public and private key
13:03 - that were generated using that SSH key
13:05 - gene command and those were here inside
13:08 - of our SSH folder now we'll go ahead and
13:11 - reuse these to login to the second
13:13 - machine without a password so this is as
13:15 - simple as just typing the command SSH -
13:19 - copy - ID and then the
13:22 - machine that we want to login to so our
13:24 - username and 192.168.1 is one zero one
13:30 - so let's go ahead and run that now even
13:33 - without specifying the key that command
13:35 - should find our ID RSA public key for us
13:38 - and when it does it will ask us for the
13:40 - password to our remote machine so I'll
13:42 - go ahead and type in that password and
13:44 - once that's finished let's go ahead and
13:46 - try to SSH into that machine now so
13:49 - let's do an ssh query ms @ 192 dot sixty
13:55 - okay so that looked like it worked so we
13:58 - didn't have to create an Sh folder on
14:00 - our remote machine we didn't have to
14:02 - manually copy the key over we didn't
14:04 - have to mess with permissions or
14:05 - anything like that so over here on our
14:08 - remote machine if we just do an LS la
14:11 - now there's a lot of files here but you
14:13 - can see right here we it created that
14:16 - dot ssh folder for us and if you even
14:19 - set the correct permissions of 700 there
14:21 - now if i clear my screen and list the
14:24 - files within that folder then we can see
14:27 - that it created that authorized keys
14:29 - file for us and it has the permissions
14:32 - of 600 already and it put our public key
14:35 - inside of that file so it did everything
14:37 - for us now that does do a lot of steps
14:39 - for you but it doesn't change the ssh
14:41 - configuration like we mentioned before
14:43 - when we went into that configuration
14:45 - file so if you want to disable password
14:47 - logins and you would still need to do
14:49 - that manually at this point okay so I
14:52 - think I just going to do it for this
14:53 - video I hope that this was useful for
14:55 - anyone wanting to learn how to use SSH
14:57 - key based authentication so it's really
15:00 - much more secure than regular passwords
15:02 - and also will be more convenient when
15:04 - running scripts that connect to these
15:06 - machines and things like that but if
15:08 - anyone does have any questions about
15:09 - what we covered in this video then feel
15:10 - free to ask in the comment section below
15:12 - and I'll do my best to answer those and
15:14 - if you enjoy these tutorials and would
15:15 - like to support them then there are
15:17 - several ways you can do that the easiest
15:18 - ways to simply like the video and give
15:20 - it a thumbs up and also it's a huge help
15:21 - to share these videos with anyone who
15:23 - you think would find them useful and if
15:24 - you have the means you can contribute
15:26 - through patreon and there's a link to
15:27 - that page in the description section
15:29 - below
15:29 - be sure to subscribe for future videos
15:31 - and thank you all for watching
15:34 - you
15:43 - you

Cleaned transcript:

hey there how's it going everybody in this video we'll be learning how to use keybased authentication instead of passwords in order to SSH into a machine so this is much more convenient and also more secure than using passwords so if you ever plan on doing any system administration work in the future then you'll most likely spend a lot of time at using the secure shell to log into different machines to do some work and setting up keybased authentication not only saves time but it's more secure and also allows you to automate tasks more easily now for this video I'm going to assume that you currently have a machine that you can SSH into using a password and if you don't currently have a machine that you can SSH into but would like to follow along with this video then you can watch my video on setting up virtual machines within VirtualBox that you can access via SSH so let's go ahead and get started I have two terminals pulled up right now and on the left I'm going to keep as my local machine and on my right I'm going to use as my remote machine so I currently have a virtual machine running that I can SSH into but it requires that I enter a password every time so for example I can say SSH core EMS that's the username on that machine and the IP address for this machine is 192.168.1 hundred so the first time we try to SSH in we'll have to say that we want to continue and then I'll ask us for our password just like it did there and now we are in the machine so our goal is to be able to log into this machine without using a password now I'm going to leave this remote machine that logged in over here and leave this connection open while we're looking at how we can set up keybased authentication so what we're going to do is we're going to create a private key and a public key now the private key will live on our local machine and the public key is going to live on the machine that will be SSH into or the remote machine so when I first learned how to setup key based authentication for SSH I could never remember if it was the private or public key that I was supposed to push to the remote machine that I wanted to log into so just to say that again it's the public key that we want to push to that remote machine that we'll be logging into now you can remember this by thinking about the private key being on the machine that only you have access to your private local machine and the public key will be placed on the machine that you'll be trying to access so to create the public and private keys on our local machine we're going to use the command SSH keygen now if you look this up online before like in github Orla no documentation or something like that then you'll notice a lot of people recommend adding a key RSA B 4096 now that key option just means that we want to make sure that we're using RSA as the type of key and the B option just makes our keys a bit more secure so I'm going to go ahead and add that in the default is 2048 and it's probably fine but it's easy to bump this up so we might as well do that so now let's go ahead and run this command and it'll ask us where we want to save this and we'll just keep that default location and then it'll ask us to insert a passphrase now if you want more security or you're worried about someone getting access to your local computer then you can put in a passphrase here but I'm just going to go ahead and leave this blank so now that key was created so now that we created those keys we can navigate to the directory where those were placed and that was in our home directory and this dot SSH directory now if I list the files in this directory then you can see that we have two keys here ID underscore RSA is our private key and ID underscore RSA dot pub is our public key so ID underscore RSA pub is the one that we want to copy over to our remote machine that we're going to be logging into now at this point some people use a simple command called SSH copy ID ssh copy ID but if you're on a Mac and don't have that command by default first we're going to go ahead and go over how to do this manually which isn't very difficult and once we do it manually then we'll also see how to do this with SSH copy ID so first let's do this manually so we still have our ssh connection open up on this machine over here to our right and before I copy the key over to that remote machine I'm first going to make sure that the machine has a dot ssh directory for me to place that file in so within my home folder over here on my local machine or in my remote machine and if I do a PWD then you can see that my home directory on this remote machine is located at home core EMS now if you're not within your home directory then you can just type in CD enter and it will automatically take you there so once you're in that home directory then let's create that dot SSH directory we can do that with make dirty SSH and that will create our dot SSH directory if it doesn't already exist so now let's copy our public key over to that remote machine now to do this I'm going to use the SCP command SCP is a way to copy files to a machine over SSH now this is somewhat of a long command but to run this command I'm just going to say SCP and then my home directory dot SSH that's where we placed those keys and then the key that I want to come copy over is ID underscore RSA dot pub now that's the file that we want to copy over so now we'll put in a space and now where we want to copy it so we want to copy it to core EMS 192.168.1 hundred so that is the username at the machine and once we have that type in we're going to type in a colon here to specify where in that machine we want to place this file we want to place this in slash home slash core EMS which is that user's home directory slash dot SSH that's the one that we just created and then slash and now what we want to call this key when we move it over so I'm just going to rename this to uploaded underscore key pub now that's not necessary but that's just one that I usually pick so that it stands out so now if I hit enter then it will ask for our password because we haven't set up keybased authentication yet so now I'll put in that password so now that should have copied over so if we come over to our local machine here and we do an LS on that dot SSH directory then we can see that we have that uploaded key public key so now that we have that key let's append the contents of that file to a new file called authorized keys now this file doesn't currently exist but it we'll create it when we append the key to that file so to do this we're just going to say cat and then the file that we want to cut is in our home folder ssh uploaded key pub and now this double carrots here will append to a file and the file that we want to append to is the our home folder dot ssh and this is going to be called authorized underscore keys now this is a file it's not a directory on linux systems files don't have to have a file extension so we're just going to leave it like this and this appending right here will automatically create this file when we run this so let's go ahead and run that and now let's go ahead and make sure that worked by typing in cat which will print out the contents of the file and we'll print out that authorized key file that we just created and you can see here that it did append that public key information to that file ok and now I'm just going to clear my screen so we can see a little bit better here so now we should make sure that our permissions are set up correctly now if you don't know Linux permissions very well then that will be a topic for another video but in this video we will just set these permissions where they need to be so our SSH folder should be set to 700 and the files within that folder should be set to 600 so we can set this by saying chmod 701 our dot SSH folder so we'll go ahead and run that and now we want to do a chmod 600 all of the files in that folder so we're going to put an asterisk there to get all of the files and we're setting those to 600 so I'll run that okay so now if we did all of that correctly then we should be able to SSH into our machine without a password so now let's try this from our local machine so let's do an SSH we want to SSH in as core EMS at 192.168.1 hundred ok so awesome that looked like it worked and that we were able to log in without a password so now that you have this set up to use keybased authentication one last thing that you might want do is maximize security by only allowing this kind of logging login and turning off password authentication all together so this will require all users connect through SSH using this key based authentication so this is a really quick change so let me show you how to do this really quick since we're already logged into that machine over here so what I'm going to do is I'm just going to use this console to change our SSH configuration to turn off password authentication so to do this we need to edit our SSH config file and on a Linux machine that file is located at /et c / ssh slash sshd underscore config now it's a good idea to always make a backup of configuration files before you change anything so first I'm going to do a sudo copy of that file now is located at slash etc' slice SSH slash SSH underscore OSS HD underscore config so now to back this up we'll just put it in that same folder but we will give it a name of the same name but with a dot back to so that it's a backup file and then we'll have to put in our password there so now that we have a backup of that configuration file now let's go ahead and just change the original file and turn off that password authentication so I'm going to do a sudo nano you can use them if you want to use them but if you're not familiar with them the Nano is an easier editor for beginners so let's go ahead and just run nano on that file and what we want to find is the option that is password authentication so if we scroll down here a bit until we find this so it's right here so there's a chance that this is going to be commented out that's what this pound sign here is so let's uncomment out that and for password authentication we instead want to set this equal to no so now let's go ahead and save the file so on Nano that's control X and then a wide to save now you should have no problem finding that option in that file but even if you don't find that you can just add it in there so now that we've saved that let's restart our SSH service for those to take place and on a bun we can do that by saying sudo service SSH restart okay and now with that change that should prevent anyone from using regular pass passwords to log into that machine and that's going to make it a lot more secure okay so that is how you set up keybased authentication manually but now let's see how to do it using the ssh copy ID command so I have another terminal pulled up here now I have another machine that is able to SSH into as well and it is at query m/s at 192.168.1 hundred this one is at one zero one and we'll just go ahead and connect to this machine regularly using our password and once we're in I'll clear that so now real quick we're going to learn how we can use this ssh copy ID command to set up keybased authentication here on our second machine now this is considered a way easier approach than the one that I showed you how to do manually but for some of you meet you may not have access to this ssh copy ID command so I wanted to show the way that would work for everyone first and then this easier method if it's available to you so if you're on Linux then you should already have ssh copy ID as a command but if you're on Mac then you can install this by using homebrew and if you don't know what homebrew is basically it's just a package manager for the Mac now I have the website for it pulled up right here it's at HTTP brew SH and it's super easy to install and once you have that installed then it's just as easy as saying brew install SSH copy ID and then you'll have that command available to you okay so on our local machine we already have that public and private key that were generated using that SSH key gene command and those were here inside of our SSH folder now we'll go ahead and reuse these to login to the second machine without a password so this is as simple as just typing the command SSH copy ID and then the machine that we want to login to so our username and 192.168.1 is one zero one so let's go ahead and run that now even without specifying the key that command should find our ID RSA public key for us and when it does it will ask us for the password to our remote machine so I'll go ahead and type in that password and once that's finished let's go ahead and try to SSH into that machine now so let's do an ssh query ms @ 192 dot sixty okay so that looked like it worked so we didn't have to create an Sh folder on our remote machine we didn't have to manually copy the key over we didn't have to mess with permissions or anything like that so over here on our remote machine if we just do an LS la now there's a lot of files here but you can see right here we it created that dot ssh folder for us and if you even set the correct permissions of 700 there now if i clear my screen and list the files within that folder then we can see that it created that authorized keys file for us and it has the permissions of 600 already and it put our public key inside of that file so it did everything for us now that does do a lot of steps for you but it doesn't change the ssh configuration like we mentioned before when we went into that configuration file so if you want to disable password logins and you would still need to do that manually at this point okay so I think I just going to do it for this video I hope that this was useful for anyone wanting to learn how to use SSH key based authentication so it's really much more secure than regular passwords and also will be more convenient when running scripts that connect to these machines and things like that but if anyone does have any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you you
