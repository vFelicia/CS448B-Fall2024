With timestamps:

00:00 - hey everybody how's it going today I
00:02 - thought we could take a look at get if
00:04 - tools and merge tools if you've ever
00:07 - used to get in the terminal before then
00:10 - you may have noticed that the diffs and
00:13 - the merges aren't the easiest things to
00:15 - look at or do for example I'm in a git
00:18 - repository right here if I open up some
00:22 - of the files that are within this
00:23 - repository and I start making some
00:26 - changes here and do one more down here
00:32 - let me save those and now within the
00:34 - repository if I do a git diff then you
00:39 - can see the previous lines are here in
00:41 - red and then the new lines are here in
00:45 - green and the changes I made here's one
00:48 - here and then this 1 2 3 4 so it's not
00:51 - too bad whenever you have a few lines of
00:54 - code to see what it is that you've
00:55 - changed but you know if you have
00:57 - hundreds of lines of code with it
01:00 - stacking one on top of the other like
01:02 - this it may be hard to visualize what
01:06 - changes that you've made but luckily
01:08 - there's tools that really improve this
01:10 - visualization for you to where you can
01:12 - compare them side-by-side and it will
01:14 - highlight exactly the words that have
01:17 - changed and and things like that so the
01:20 - one that I'm going to show you guys
01:21 - today there's a whole lot of these out
01:22 - there but the one that I've been using
01:24 - lately is called diff merge so let me go
01:27 - ahead and pull this up now to get
01:30 - started with this you'll download it
01:32 - just like you will any other program you
01:34 - click on the download button here and
01:36 - I'm on OS X so I would install this OS X
01:41 - installer there's also this OS X dmg but
01:45 - I would recommend choosing choosing the
01:47 - installer and I'll explain why here in a
01:49 - second so go ahead and download that
01:52 - just to be a little quicker here I've
01:55 - already downloaded it and you can see
01:57 - here I have this dot pkg file instead of
02:01 - the dmg file so if you install this just
02:06 - open that and then go through this
02:08 - installation agree to the terms things
02:10 - like that and then go ahead and install
02:12 - it i've already
02:13 - installed this so I'm just going to exit
02:16 - out here but for you just go ahead and
02:18 - click that install button and finish the
02:19 - installation now the reason I
02:22 - recommended that we chose that installer
02:25 - instead of the dmg file if you look at
02:28 - their this is their documentation here
02:30 - if you just google diff merge OSX then
02:34 - it will show you how to set this up as
02:36 - your merge tool and you can see here
02:40 - that they have their settings for OS X
02:42 - Linux and windows so you can find
02:44 - whatever operating system your work you
02:45 - work with but you can see the first line
02:47 - here it says first confirm that user
02:50 - slash bin slash diff merge is present
02:53 - and that's the command then it needs to
02:55 - find in order to set this up as your
02:57 - diff or merge tool now whenever I try to
02:59 - installing this as the dmg then that
03:02 - didn't work for me
03:04 - so to test this we can just copy this
03:06 - directory here and we can pull up our
03:08 - terminal and if I just do an LS user
03:11 - slash bin and hit that and scroll up to
03:15 - the Dee's here and you can see differed
03:18 - right there so that installation work
03:21 - and then installed everything that we
03:23 - needed it to install now to finish
03:26 - setting this up as your diff tool then
03:29 - you'll have to run these git commands
03:32 - here which goes into your config file
03:34 - and changes your diff tool to diff merge
03:38 - I kind of have trouble on my machine
03:41 - here copying and pasting these line
03:44 - breaks here I went ahead and just
03:47 - searched differ j-- OSX and this i'd
03:50 - better luck with this fourth option down
03:52 - here this two bit labs they have pretty
03:56 - much the exact same config but they have
03:59 - everything on one line so let's go ahead
04:01 - and run through and copy and paste these
04:05 - in and set our config file to where this
04:08 - we're using differs as our diff tool and
04:11 - our merge tool so i'm going to go
04:13 - through and go ahead and do all of these
04:18 - ok I went ahead and fast forwarded there
04:20 - a little bit so that you didn't have to
04:22 - see me copy and paste all those git
04:24 - config lines in but once you have all
04:26 - those line
04:27 - to change your get config file you can
04:29 - test to make sure that that went through
04:32 - by typing git config and then we can do
04:35 - a - - global ghost - list check that and
04:39 - you can see here that we have our div
04:43 - tool equal to diff merge with some other
04:45 - options here and we have our merge tool
04:47 - whoops we have our merge tool set to
04:50 - diff merge with some other options here
04:52 - as well so to test to make sure if this
04:54 - works if we just do a regular get diff
04:57 - like we did before then it's going to
04:59 - give us the default get diff that's what
05:02 - we saw before and what you're used to in
05:04 - the terminal if we want to actually use
05:07 - the git if tool that we just configured
05:10 - then that's exactly what type in we can
05:12 - get diff tool and it'll ask us
05:16 - we've changed one file do you want to
05:18 - open this and get merged you can type in
05:21 - Y or just hit enter and it will open up
05:24 - your changes within if merge and you can
05:26 - see here that this is kind of a lot a
05:28 - better look than your typical git diff
05:33 - that you have in your terminal you have
05:34 - a side-by-side comparison and also shows
05:37 - you the exact words that you've changed
05:39 - and also you can go through and
05:41 - interactively change your get diff here
05:46 - so we see all of our div and we can
05:48 - click on the lines that are different if
05:51 - we click on this line here say we wanted
05:53 - to keep this one change but we wanted to
05:56 - revert these back to the original you
05:59 - know with within the terminal you would
06:01 - have to type in get diff and then you'd
06:03 - have to open up the file go in and make
06:04 - those changes manually and here you can
06:07 - just select hey I want to apply these
06:10 - changes from the left at this line so
06:13 - click on this button here and you can
06:15 - see that it changed these lines back to
06:17 - the original and left this change in
06:19 - here then we can just click Save and
06:21 - then this go ahead and close this down
06:23 - and now if we type in get diff like we
06:27 - normally did before within the terminal
06:30 - then you can see the two changes that
06:33 - were made towards the top of the file
06:36 - are now gone and it's only left with
06:39 - these changes made at the
06:41 - autum where it says one more here so let
06:44 - me clear this out and I've also set up
06:46 - an example for a git merge already I've
06:49 - already set up my repository in a way to
06:52 - where I am going to have a merge
06:54 - whenever I try to merge a branch left
06:56 - created so if I run git branch you can
06:59 - see that I created a branch called test
07:01 - merge and it's going to cause a merge
07:04 - conflict when I try to merge that in
07:06 - with master so I'm going to go ahead and
07:07 - do that now
07:08 - get merge that's merge and you can see
07:12 - here it says Auto merging to txt and
07:16 - that there is a conflict and then I need
07:18 - to fix the conflict or to fix the
07:20 - conflicts and then commit the result so
07:23 - if I do a git merge tool then it'll
07:28 - launch diff merge and let me explain
07:33 - exactly what is going on here within
07:36 - diff merge so this over here is
07:38 - currently what's on our master branch to
07:42 - the left to the right is what is on our
07:45 - test merge branch and in the middle this
07:48 - is the change that it's trying to
07:49 - resolve both our master branch and our
07:52 - test merge branch changed this same file
07:55 - and that's where we have the merge
07:56 - conflict so to resolve this we could
07:59 - either bring in our changes from the
08:02 - left and use what is currently on our
08:04 - master branch or we could click over
08:06 - here bring in our changes from the right
08:09 - and use what is in our test merge branch
08:11 - or we could compromise between the two
08:14 - and I will just change this manually and
08:19 - this is kind of a compromise between the
08:22 - two and then I can just save that and if
08:26 - I come over here and close it now that
08:29 - merge conflict should be resolved and we
08:31 - can just do a git commit like we
08:33 - normally would and that should take care
08:36 - of it so now if I do a git log you can
08:39 - see that we were successfully merged the
08:42 - branch test merge so you can see how
08:45 - having a visual representation of these
08:48 - dips and these merges could really be
08:51 - beneficial to kind of see the changes
08:53 - and not only see the changes
08:55 - be able to interact with your merges in
08:58 - a way that you can't do within terminal
09:01 - and it makes merges and and seeing
09:03 - things like that a lot easier and this
09:06 - isn't the only tool that's out there
09:08 - there's tons of tools out there like
09:09 - this and ways to set them up this is a
09:12 - free version that I've been using and
09:14 - that I kind of enjoy but you know go out
09:17 - there and try a few that you find and
09:20 - see what you like best so that about
09:22 - does it for this video you know if you
09:24 - guys have any questions about this stuff
09:25 - just ask in the comment section below
09:28 - be sure to subscribe for future tips and
09:31 - tutorials and thank you guys for
09:32 - watching

Cleaned transcript:

hey everybody how's it going today I thought we could take a look at get if tools and merge tools if you've ever used to get in the terminal before then you may have noticed that the diffs and the merges aren't the easiest things to look at or do for example I'm in a git repository right here if I open up some of the files that are within this repository and I start making some changes here and do one more down here let me save those and now within the repository if I do a git diff then you can see the previous lines are here in red and then the new lines are here in green and the changes I made here's one here and then this 1 2 3 4 so it's not too bad whenever you have a few lines of code to see what it is that you've changed but you know if you have hundreds of lines of code with it stacking one on top of the other like this it may be hard to visualize what changes that you've made but luckily there's tools that really improve this visualization for you to where you can compare them sidebyside and it will highlight exactly the words that have changed and and things like that so the one that I'm going to show you guys today there's a whole lot of these out there but the one that I've been using lately is called diff merge so let me go ahead and pull this up now to get started with this you'll download it just like you will any other program you click on the download button here and I'm on OS X so I would install this OS X installer there's also this OS X dmg but I would recommend choosing choosing the installer and I'll explain why here in a second so go ahead and download that just to be a little quicker here I've already downloaded it and you can see here I have this dot pkg file instead of the dmg file so if you install this just open that and then go through this installation agree to the terms things like that and then go ahead and install it i've already installed this so I'm just going to exit out here but for you just go ahead and click that install button and finish the installation now the reason I recommended that we chose that installer instead of the dmg file if you look at their this is their documentation here if you just google diff merge OSX then it will show you how to set this up as your merge tool and you can see here that they have their settings for OS X Linux and windows so you can find whatever operating system your work you work with but you can see the first line here it says first confirm that user slash bin slash diff merge is present and that's the command then it needs to find in order to set this up as your diff or merge tool now whenever I try to installing this as the dmg then that didn't work for me so to test this we can just copy this directory here and we can pull up our terminal and if I just do an LS user slash bin and hit that and scroll up to the Dee's here and you can see differed right there so that installation work and then installed everything that we needed it to install now to finish setting this up as your diff tool then you'll have to run these git commands here which goes into your config file and changes your diff tool to diff merge I kind of have trouble on my machine here copying and pasting these line breaks here I went ahead and just searched differ j OSX and this i'd better luck with this fourth option down here this two bit labs they have pretty much the exact same config but they have everything on one line so let's go ahead and run through and copy and paste these in and set our config file to where this we're using differs as our diff tool and our merge tool so i'm going to go through and go ahead and do all of these ok I went ahead and fast forwarded there a little bit so that you didn't have to see me copy and paste all those git config lines in but once you have all those line to change your get config file you can test to make sure that that went through by typing git config and then we can do a global ghost list check that and you can see here that we have our div tool equal to diff merge with some other options here and we have our merge tool whoops we have our merge tool set to diff merge with some other options here as well so to test to make sure if this works if we just do a regular get diff like we did before then it's going to give us the default get diff that's what we saw before and what you're used to in the terminal if we want to actually use the git if tool that we just configured then that's exactly what type in we can get diff tool and it'll ask us we've changed one file do you want to open this and get merged you can type in Y or just hit enter and it will open up your changes within if merge and you can see here that this is kind of a lot a better look than your typical git diff that you have in your terminal you have a sidebyside comparison and also shows you the exact words that you've changed and also you can go through and interactively change your get diff here so we see all of our div and we can click on the lines that are different if we click on this line here say we wanted to keep this one change but we wanted to revert these back to the original you know with within the terminal you would have to type in get diff and then you'd have to open up the file go in and make those changes manually and here you can just select hey I want to apply these changes from the left at this line so click on this button here and you can see that it changed these lines back to the original and left this change in here then we can just click Save and then this go ahead and close this down and now if we type in get diff like we normally did before within the terminal then you can see the two changes that were made towards the top of the file are now gone and it's only left with these changes made at the autum where it says one more here so let me clear this out and I've also set up an example for a git merge already I've already set up my repository in a way to where I am going to have a merge whenever I try to merge a branch left created so if I run git branch you can see that I created a branch called test merge and it's going to cause a merge conflict when I try to merge that in with master so I'm going to go ahead and do that now get merge that's merge and you can see here it says Auto merging to txt and that there is a conflict and then I need to fix the conflict or to fix the conflicts and then commit the result so if I do a git merge tool then it'll launch diff merge and let me explain exactly what is going on here within diff merge so this over here is currently what's on our master branch to the left to the right is what is on our test merge branch and in the middle this is the change that it's trying to resolve both our master branch and our test merge branch changed this same file and that's where we have the merge conflict so to resolve this we could either bring in our changes from the left and use what is currently on our master branch or we could click over here bring in our changes from the right and use what is in our test merge branch or we could compromise between the two and I will just change this manually and this is kind of a compromise between the two and then I can just save that and if I come over here and close it now that merge conflict should be resolved and we can just do a git commit like we normally would and that should take care of it so now if I do a git log you can see that we were successfully merged the branch test merge so you can see how having a visual representation of these dips and these merges could really be beneficial to kind of see the changes and not only see the changes be able to interact with your merges in a way that you can't do within terminal and it makes merges and and seeing things like that a lot easier and this isn't the only tool that's out there there's tons of tools out there like this and ways to set them up this is a free version that I've been using and that I kind of enjoy but you know go out there and try a few that you find and see what you like best so that about does it for this video you know if you guys have any questions about this stuff just ask in the comment section below be sure to subscribe for future tips and tutorials and thank you guys for watching
