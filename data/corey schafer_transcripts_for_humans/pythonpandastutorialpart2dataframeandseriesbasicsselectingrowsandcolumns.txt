With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're gonna continue learning
00:02 - more about pandas and specifically we're
00:04 - going to be learning about the data
00:06 - frame and series data types so like I
00:08 - said in the last video these are
00:10 - basically the backbone of pandas and are
00:12 - the two primary data types that you'll
00:14 - likely be using the most so in this
00:16 - video we're gonna go over how we can
00:18 - think of data frames and series data
00:20 - types in a different way and then we'll
00:22 - look at the basics of getting
00:24 - information from these data types now I
00:26 - would like to mention that we do have a
00:27 - sponsor for this series of videos and
00:29 - that is brilliant work so I really want
00:31 - to thank brilliant for sponsoring the
00:32 - series and it would be great if you all
00:34 - can check them out using the link in the
00:35 - description section below and support
00:37 - the sponsors and I'll talk more about
00:38 - their services in just a bit so with
00:40 - that said let's go ahead and get started
00:42 - okay so first let's look at what a data
00:45 - frame is and then we'll learn more about
00:47 - how we can think about this in terms of
00:50 - a Python object so we saw data frames
00:52 - briefly in our last video when we check
00:55 - to make sure that our data was loaded in
00:57 - correctly so these were the objects that
01:00 - were displayed in Jupiter as rows and
01:03 - columns basically a table so let's take
01:06 - a look at what this looks like so if you
01:08 - were following along with the last video
01:09 - this is basically the same jupiter
01:12 - notebook that i had before except this
01:15 - has just cleaned up a bit so we're
01:17 - importing pandas here we are reading in
01:20 - our csv files so one is just our main
01:23 - data frame for our survey results one is
01:26 - our schema data frame for the schema
01:29 - results and then we are setting some
01:31 - options here where we have the max
01:33 - columns set to 85 so we can see all the
01:36 - columns and the max row set the 85 so
01:38 - that we can see all of the schema now if
01:41 - you haven't been following along with
01:42 - the video so far then I do have a link
01:44 - in the description section below that
01:46 - links to where you can download this
01:47 - Dayla data and follow along with this
01:50 - okay so this is a data frame here so
01:54 - where we are printing out D F dot head
01:56 - this is what this returns so this here
01:59 - is the first five rows of our data frame
02:03 - so you can see that a data frame is made
02:05 - up of multiple rows here and we also
02:08 - have multiple columns so in the case of
02:10 - this data
02:11 - these are survey results
02:13 - but your data can be you know whatever
02:16 - your data is but it's most likely going
02:18 - to be in rows and columns kind of like a
02:21 - table so for this data with these being
02:24 - survey results each row is a survey as
02:27 - one person who answered the survey and
02:30 - each question was their answer for that
02:33 - question on the survey so for example
02:36 - this respondent number one here they
02:38 - answered that yes they were a hobbyist
02:40 - and if you want to know what hobbyist
02:42 - means then we just like we saw in the
02:45 - last video we can look at our schema
02:47 - data frame so let me go ahead and print
02:49 - this out here and let's look at this so
02:53 - if I look at what a hobbyist is then we
02:56 - can see that that question was do you
02:58 - code as a hobby so that's what this data
03:01 - is and that kind of gives us an idea of
03:03 - what a data frame is basically a data
03:05 - frame is just rows and columns but now
03:09 - let me explain how I like to think of
03:11 - data frames using native Python so if we
03:14 - were only using Python and not using
03:16 - pandas to store information in rows and
03:18 - columns
03:19 - then how would we do this well for those
03:22 - of you familiar with dictionaries you
03:24 - might think that it's a good idea to
03:25 - store information that way so let me
03:27 - pull up a new notebook here that I have
03:30 - open here with some snippets and let's
03:33 - take a look at this okay so let's look
03:35 - at this first cell here so a lot of us
03:37 - are probably familiar with Python
03:39 - dictionaries where we have keys and
03:41 - values so if I'm representing some data
03:43 - in this example it's a person then we
03:46 - can use a dictionary so first off I have
03:49 - a key of first which is going to be the
03:51 - first name and then that has a value of
03:54 - kori and then we also have keys and
03:57 - values for the last name and the email
03:59 - as well okay so this dictionary here
04:02 - represents data for a single person but
04:05 - how would we represent data for multiple
04:07 - people well there are probably a couple
04:09 - of different ways that we can do this
04:10 - but the way that I like to think of this
04:12 - in terms of learning pandas is to make
04:15 - all of our values and our dictionaries a
04:17 - list so let's take a look in the second
04:21 - cell here to see what this would look
04:22 - like so here in the second cell now we
04:25 - can see that we have a pretty similar
04:26 - diction
04:27 - to what we had above but now instead of
04:31 - just a single string here for the values
04:33 - I instead have a list and our list
04:36 - currently just has one person but now
04:39 - since this is a list we can add more
04:42 - first names and information in here so
04:44 - the first value of our list is going to
04:47 - be our first person so if I go to the
04:51 - third cell down here at the bottom then
04:53 - now we can use this as an example to see
04:55 - what this would look like with multiple
04:58 - people so the second value in our list
05:01 - will be our second person and the third
05:04 - value in the list will be our third
05:06 - person so if we look here we have people
05:08 - we have a key of first so if we want the
05:12 - second person here we go to the second
05:13 - value that's Jane the last name is Doe
05:16 - and the email go to the second value
05:19 - here is Jane Doe at email com
05:21 - if you want the third person that would
05:23 - be John and then third value in last
05:25 - would be Doe then third value and email
05:28 - is John Doe at email com
05:29 - so we can kind of think of this like
05:31 - rows and columns the keys are the
05:33 - columns and the values are the rows now
05:36 - if you look up the definition of a
05:38 - panda's data frame online then you'll
05:40 - see a lot of definitions that just say
05:42 - something like it's a two dimensional
05:45 - data structure now that might sound a
05:47 - little confusing but in layman's terms
05:49 - that basically just means rows and
05:51 - columns okay so like I said here the key
05:53 - for email here would be our email column
05:56 - and contain all of the email values and
06:00 - if we wanted to see the email column
06:03 - then we can just access that key so if I
06:07 - come down here into actually let me run
06:11 - all of these really quick here I think I
06:14 - open this up without running these so I
06:15 - want to make sure that we have this
06:17 - registered okay so if I wanted to see
06:19 - that email column then I can simply say
06:22 - people and then access that email key if
06:25 - I run that then we can see that we got
06:27 - all of the emails now the reason that I
06:29 - wanted to show you this is because I
06:30 - feel like this really helped me in terms
06:33 - of how I think about data frames so data
06:35 - frames are very similar to this but with
06:37 - more functionality than what we have
06:39 - here in stand
06:40 - Python now we can actually create a data
06:43 - frame from this dictionary and see what
06:45 - this looks like
06:46 - so let's do that and look at some basic
06:48 - data frame functionality and then we'll
06:50 - look at this more using the stack
06:52 - overflow data from the last video so
06:55 - here in this bottom cell in order to
06:57 - create a data frame from the information
06:59 - that we have here I'm going to go ahead
07:01 - and import pandas so I'm going to say
07:03 - import pandas as PD and now we can
07:07 - create a data frame actually using this
07:09 - dictionary that we have up here so to do
07:12 - that I can just say DF is equal to PD
07:15 - dot data frame and check the casing
07:19 - there that's a capital D and a capital F
07:21 - and then we'll just pass in that
07:24 - dictionary that has values as lists so
07:29 - if I run this and that seemed to run
07:31 - okay without any errors and now let me
07:34 - just print out DF here and if I print
07:36 - that out then we can see that now our
07:38 - data frame is representing this in a way
07:41 - to where we do have rows and columns
07:43 - that we can visualize so we get these
07:45 - people printed out in a nice table of
07:47 - rows and columns now we also have these
07:50 - over here to the far left that don't
07:53 - have column names this 0 1 & 2 now this
07:56 - is an index now I'm not going to go too
07:59 - much into indexes right now because
08:01 - that's what the next video is going to
08:02 - cover but basically it's a unique value
08:05 - for our rows now it doesn't need to be
08:07 - unique but again we'll talk more about
08:10 - that in the video specifically on
08:12 - indexes so now that we have a bit of an
08:14 - idea of how to think about data frames
08:16 - now let's take a look at how to access
08:19 - information here within the data frame
08:21 - so first let's just access the values of
08:24 - a single column so just like we did with
08:26 - the dictionary we can access a single
08:29 - column just like we were accessing the
08:32 - key of a dictionary so just like I did
08:35 - people and email up here I can do very
08:38 - similar down here and just say that I
08:41 - want that email column of my data frame
08:43 - now that's not actually a key that is
08:47 - going to access the column of a data
08:49 - frame but we can see here that we get
08:51 - all of the emails back from that data
08:54 - so again I do want to emphasize that I
08:56 - only use the pure Python example so that
09:00 - we could get an idea of how to think
09:01 - about a data frame but like I said a
09:04 - data frame is much much more than just a
09:06 - dictionary of Lists so for example we
09:09 - can see that when we displayed the email
09:11 - column here it doesn't look the same as
09:14 - when we displayed the list of values
09:17 - from that dictionary and that's because
09:19 - this is actually returning a series and
09:22 - we can see this if we check the type so
09:27 - if I check the type of this email column
09:32 - here so let me run that we can see that
09:36 - this is Panda score series series so
09:39 - this is a series object so what is a
09:42 - series so a series is still basically a
09:45 - list of data but just like with a data
09:48 - frame it has a lot more functionality
09:50 - than just that now if you look up the
09:53 - definition of a series online then
09:55 - you'll see a lot of definitions that
09:56 - just say it's a one-dimensional array
09:58 - and that might sound a little confusing
10:00 - but in layman's terms that basically
10:03 - just means that it's rows of data so
10:06 - again you can think of a data frame as
10:08 - being rows and columns and a series as
10:11 - being rows of a single column so a data
10:16 - frame is basically a container for
10:18 - multiple of these series objects so
10:21 - again that's important so let me go over
10:23 - that one more time so we can see that a
10:25 - data frame here is two-dimensional
10:27 - because it has rows and columns so we
10:29 - can see here that it has you know first
10:32 - name last name email now whenever we
10:34 - access just the email then we can see
10:37 - that we get all these emails here now
10:39 - this is a series and I said that a data
10:42 - frame basically contains is a container
10:44 - for multiple series objects so we can
10:48 - think of this email column here as a
10:49 - series this last column here is a series
10:52 - and this first column as a series and
10:54 - also we can see where we printed out
10:57 - this series here for the emails we can
11:00 - see that this series also has an index
11:02 - as well just like our data frame did so
11:04 - this index is over here on the left the
11:06 - 0 1
11:07 - - okay so we can access a single column
11:10 - of a data frame like we're accessing a
11:13 - key just like we did here in this cell
11:17 - but you might also see some people use
11:20 - dot notation to do the same thing so you
11:22 - might see some people do it like this so
11:25 - they might do D F dot email and if I run
11:28 - this cell then we can see that let me
11:32 - get rid of this cell here and just so we
11:35 - can compare these two we can see that
11:37 - this gives us the same thing whether we
11:40 - access this like a key or whether we use
11:42 - dot notation this returns the same
11:45 - series object of the email values now
11:48 - whichever way that you want to do this
11:49 - is really just a personal preference I
11:51 - actually prefer the first way of using
11:54 - the brackets and there are a couple of
11:57 - reasons that I prefer to use that over
11:59 - dot notation first is that I like using
12:02 - the brackets because there's a chance
12:05 - that one of your columns is named the
12:07 - same thing as one of the attributes or
12:10 - methods of a data frame and if that's
12:12 - the case then using the dot notation
12:14 - might give you some errors so for
12:17 - example if a data frame a dataframe has
12:20 - a method called count so if you had a
12:23 - column named count and you did and you
12:27 - were trying to access that count column
12:29 - using dot notation then that's actually
12:32 - going to access the count method from
12:36 - data frame instead of that count column
12:39 - so that actually wouldn't work how we
12:41 - did it here if you wanted to access the
12:43 - actual column called count which we
12:46 - don't have one in this specific data
12:48 - frame but if we did then we would have
12:50 - to access it like this so that's kind of
12:52 - why I prefer brackets so I'm going to be
12:55 - using brackets throughout this series
12:59 - but I wanted you to know about dot
13:00 - notation because if you're working with
13:02 - other people using pandas then you might
13:04 - see them access columns in using dot
13:07 - notation so you need to know that it's
13:10 - at least a possibility and again that
13:12 - doesn't mean that they're doing it wrong
13:13 - it's just a personal preference I just
13:16 - prefer using the brackets okay so I said
13:19 - that data frames have a lot
13:21 - functionality than what we saw using you
13:24 - know standard Python so let's look at
13:27 - some other stuff that we can do here so
13:29 - let's say that we wanted to access
13:30 - multiple columns now in order to access
13:33 - multiple columns we can use the bracket
13:35 - notation and pass in a list of the
13:38 - columns that we want so if I wanted both
13:40 - the last name and email columns then we
13:44 - could say DF and use our brackets just
13:47 - like we saw before but now I'm going to
13:49 - put in a set of inner brackets here as a
13:51 - list of columns that I want to access so
13:55 - for the first value
13:56 - I'll put last for the last name and for
13:58 - the second value I'll put email for the
14:00 - email so if I run this then we can see
14:03 - that now we have a data frame returned
14:06 - here of the last column and the email
14:09 - column now I want to emphasize again
14:11 - here that I passed a list inside of
14:14 - these brackets here
14:16 - so there are two pairs of brackets you
14:19 - can't leave off the inner brackets
14:21 - because you'll likely get a key error
14:23 - because pandas will think that you're
14:25 - passing in both of those strings as a
14:27 - single column name and another thing
14:30 - that I want to point out here is that
14:32 - now that we're getting multiple columns
14:35 - this can no longer be a series because
14:38 - remember a series is basically a single
14:40 - column of rows so when we get multiple
14:44 - columns like this
14:45 - it's just returning another data frame
14:47 - and in this case it's a filtered down
14:49 - data frame with just these specific
14:52 - columns so we filtered out the first
14:55 - name column here and we just have the
14:57 - last and the email okay so that's how we
14:59 - get a specific column or multiple
15:01 - columns and we can slice these as well
15:04 - similar similar to how we slice a list
15:07 - but I'll show that on our larger stack
15:10 - overflow data set here in a second now
15:12 - if you have a lot of columns and want to
15:15 - see all of them easily then we can just
15:17 - grab the columns specifically by saying
15:19 - D F dot columns and we can run this and
15:24 - we can see here that this gives us all
15:28 - of our columns here so our columns are
15:30 - an index of first last and email okay so
15:34 - now we've seen
15:35 - to get a column but how would we get a
15:37 - row so in order to get rose we can use
15:40 - the Lok and I Lok indexers so that is
15:44 - Lok and I look so let's take a look at
15:48 - these so first let's take a look at I
15:51 - look so I local iäôs us to access rows
15:54 - by integer location hence the name I Lok
15:58 - is integer location so if I wanted to
16:00 - get the first row then we can just say
16:03 - DF dot i lok and then use brackets here
16:07 - too since this is an indexer use
16:10 - brackets and pass in a 0 and that will
16:13 - give us the first row so if I run this
16:16 - then we can see that the first row has a
16:19 - first name of Cori last name of Schaefer
16:21 - and email of corium Schaefer at
16:23 - gmail.com so what that did is it returns
16:26 - a series that contains the values of
16:28 - that first row of data which like I said
16:31 - is the first name last name and email of
16:34 - the first person in this example and
16:36 - again we haven't discussed indexes yet
16:39 - that will be in the next video but the
16:42 - index here is the column names so that
16:45 - we know what those values are so up here
16:49 - our index was 0 1 & 2 but whenever we're
16:53 - actually accessing a row it's going to
16:56 - set that index to the column name so
16:58 - that we know what those values are
16:59 - because if this just said 0 1 & 2 then
17:02 - we might not know what these are
17:04 - and just like when we selected multiple
17:06 - columns we can select multiple rows as
17:08 - well by passing in a list of integers so
17:11 - if I want the 1st and 2nd row then we
17:15 - can just say and again this is going to
17:17 - be a pair of brackets within these
17:20 - brackets because we're passing in a list
17:23 - to our index here and I'm just going to
17:26 - pass in a list of 0 & 1 so if I run this
17:30 - then we can see that now we get the
17:32 - first two rows of data and again be sure
17:35 - to pass in an inner list inside those
17:38 - brackets so that it does what you expect
17:40 - it to do and also we can see that now
17:42 - we're getting a data frame with these
17:44 - multiple rows now with these I'll oak
17:48 - and Lok
17:48 - indexers we can also select columns as
17:51 - well and that is going to be the second
17:54 - value that we pass into these outer
17:56 - brackets so if we thought of I'll oak
17:59 - and Lok as functions then we can think
18:02 - of the rows that we want as the first
18:04 - argument and the columns as the second
18:07 - argument so let me show you what this
18:08 - looks like so here we have our inner
18:11 - bracket those are the rows that we want
18:13 - but now after that list we can put a
18:15 - comma and now we can specify the column
18:19 - that we want now with I Lok we can't
18:21 - specify an actual column name because
18:23 - these use integers integer locations so
18:27 - these are for integers only so remember
18:30 - our first name is the first column the
18:33 - last name is the second column and the
18:35 - email is the third column so if we
18:37 - wanted to grab the email address of the
18:40 - first two rows then we can grab the
18:42 - column at index 2 which will be the
18:46 - third column since all of these start at
18:48 - 0 so if I was to pass in a 2 here and
18:51 - run that then we can see that now we get
18:54 - the email addresses of these first two
18:56 - rows okay so that's I'll okay so now
18:59 - let's look at Lok so with I Lok we were
19:02 - searching by integer location with Lok
19:05 - we're going to be searching by label and
19:08 - when we're talking about labels for rows
19:10 - these will be the indexes and again we
19:13 - don't have custom indexes right now so
19:15 - this index is just a default range of
19:18 - integers so at the moment this will
19:20 - somewhat be similar with I Lok the I Lok
19:23 - indexer but we'll look at uses or use
19:26 - cases with Lok with actual labels in the
19:29 - next video when we cover indexes so real
19:32 - quick let's look at our entire data
19:35 - frame again so I'm just going to print
19:37 - that out down here so like I said over
19:40 - here on the far left these are our
19:42 - indexes so these are the labels for that
19:45 - row so if I want the first row then by
19:48 - default this just has a label of 0 so I
19:51 - can say DF Lok and pass in a 0 there and
19:55 - if I run that then we can see that we
19:58 - get that row with that label of 0 and
20:00 - again I know that that looks similar to
20:02 - look at the moment but we'll see how to
20:04 - use indexes with labels in the next
20:06 - video and just like with I Lok we can
20:10 - also pass in a list to specify multiple
20:12 - rows so if I wanted the first and second
20:15 - row then just like with I Lok I can pass
20:18 - in an inner list here so let's say that
20:21 - I want the first row and the second row
20:23 - so I'll run that we can see that now we
20:26 - get the first and the second row and
20:28 - again now we can see that we are getting
20:30 - a data frame back with now that we have
20:33 - multiple rows and just like with I Lok
20:36 - we can also pass in a second value into
20:39 - our indexer to select specific columns
20:42 - for these rows now with I'll oprah used
20:45 - integers to select the columns but now
20:48 - that we're using lok we can use labels
20:50 - so if we want the email column of these
20:53 - first two rows then now we can just pass
20:56 - in a value of email so if I run that
20:59 - then we can see that now we get the
21:01 - email value of these first two rows now
21:03 - I didn't show this with I Lok but we can
21:06 - also pass in a list for the columns as
21:08 - well so if I want the last name and the
21:11 - email for these rows then instead of
21:14 - just passing in a string as this second
21:17 - value here then we can pass in a list of
21:20 - strings of the columns that we want so
21:22 - I'm gonna wrap this in brackets here I
21:25 - know that this can get a little
21:27 - confusing with all these inner brackets
21:28 - but let's say that we want email and we
21:32 - want last name so if I run this then now
21:36 - we can see that we got these specific
21:38 - columns here email and last name for
21:40 - these specific rows the row with label 0
21:43 - and the row with the label of 1 and also
21:46 - notice that the columns display and the
21:50 - order that we used in our list up here
21:52 - within loke which is a different order
21:56 - from our original data frame so up here
21:58 - its first last email but we asked for
22:01 - email and last and it gave us back in
22:04 - that order of email and last okay so now
22:07 - that we've seen the basics of grabbing
22:08 - certain rows and columns from a small
22:11 - data set now let's go back to our data
22:13 - set from the last video and
22:15 - see how we grab some rows and columns
22:17 - from the Stack Overflow data set so I'm
22:20 - gonna go over here to back to our pandas
22:22 - demo here and again just a quick
22:25 - overview of the data that we have here
22:26 - we're importing pandas we have DF as our
22:30 - main survey results here our schema DF
22:32 - as our schema results we are setting
22:36 - some options here this is what our main
22:38 - data frame head looks like which is the
22:41 - first five rows and then this is what
22:43 - our schema looks like so I'm going to go
22:45 - down below our schema here and now let's
22:48 - mess around with this a little bit so
22:50 - let's go over a bit of what we learned
22:51 - and pluck out certain rows and columns
22:53 - but first let's see how many rows and
22:56 - columns that we have in this data frame
22:58 - now we saw a couple couple of different
23:00 - ways to do this in the last video but
23:02 - the easiest way to do this is to use the
23:04 - shape attribute so if I say DF dot shape
23:07 - and run this then we can see that we
23:09 - have 88,000 rows and 85 columns so let's
23:14 - grab all of the responses for the
23:17 - hobbiest column so again what I'm trying
23:20 - to do here is if we look at our main
23:22 - data frame I want to grab all of the
23:24 - responses for this column right here
23:27 - hobbiest okay so how would we do that
23:30 - now if you remember if you want to see
23:34 - what columns are available then you
23:36 - could just say DF doc columns to see all
23:39 - of these we can see that these are kind
23:41 - of long we have 85 here but here we have
23:44 - hobbiest which is the one that we want
23:45 - and that is the question where people
23:47 - answered if they code as a hobby or not
23:50 - and in the next video we're going to
23:52 - cover indexes I'll show how we can you
23:56 - know search a schema data frame to find
23:59 - exact questions so that we can see what
24:03 - questions are what specific columns and
24:05 - the data frame but right now let's just
24:07 - grab those hobbyist responses so if you
24:10 - remember from that small data set that
24:12 - we just saw in order to grab that
24:15 - hobbyist column we can just access that
24:18 - like a key so if I say DF and then pass
24:22 - in hobbyists there then we get a series
24:24 - of all of those responses and luckily
24:27 - that doesn't display the entire 89
24:29 - thousand rows and our browser here but
24:32 - we do get the head and the tail of that
24:34 - data to get an idea of what those
24:36 - responses look like now real quick let
24:39 - me show you something that will cover
24:40 - more of further into the series but I
24:43 - want to give you an idea of how powerful
24:45 - something like pandas is so let's say
24:48 - that we wanted to know how many of these
24:50 - responses were answered yes and how many
24:53 - were answered no now if we were using
24:55 - regular Python then we might import the
24:58 - counter class or write a quick function
25:00 - or a loop to do this but pandas has so
25:03 - much of this stuff already built in so
25:05 - to get the count of unique values in
25:08 - this column I can just use this value
25:11 - counts method to calculate this so right
25:13 - up here I can just tack on a method of
25:16 - value underscore counts now again this
25:20 - is going to be for a future video but I
25:22 - just want to give you an idea of what
25:24 - pandas can do so whenever I add this
25:27 - value counts method we can see that out
25:29 - of this series that we returned here for
25:32 - all of our answers for this hobbyist
25:34 - question the value counts are seventy
25:37 - one thousand people said yes they do
25:40 - code as a hobby and about eighteen
25:43 - thousand said no they don't code as a
25:45 - hobby and again we'll cover more of this
25:46 - and future videos when we learn more
25:48 - about analyzing data in depth but I
25:50 - wanted to give you a quick taste as to
25:52 - why it's beneficial to even learn pandas
25:55 - like we're doing here it makes this type
25:57 - of stuff really easy and we could go
26:00 - further and plot that out and everything
26:02 - okay but with that quick sidetrack out
26:05 - of the way let's keep going and go over
26:08 - the other things that we learned earlier
26:10 - so we got a column here so let me get
26:14 - rid of that value counts so we have our
26:16 - column here so now let's grab a specific
26:18 - row and a specific column so let's grab
26:22 - the first row and we'll also grab that
26:24 - same hobbyist column for that row so how
26:27 - do we grab rows so remember if we want
26:30 - to grab rows that we use the loke or
26:33 - I'll oak met or indexers so I'm going to
26:36 - go ahead and use lok because remember
26:38 - that that's the one that allows me to
26:40 - use labels and i'm going to use a label
26:43 - instead
26:43 - an integer for the hobbyist column name
26:46 - now again since we're just using a
26:48 - default index and we can see the indexes
26:51 - here 0 1 2 3 4 since we're just using a
26:54 - default index instead of a custom one
26:56 - our current labels for our indexes are
26:59 - just a range of values from 0 to 88,000
27:03 - something so in order to get the first
27:07 - row I can say D F dot Lok and pass in
27:10 - that label of that first index which in
27:14 - this case is just a 0 and these are all
27:18 - of the responses from the first
27:20 - respondent so this is one person's
27:23 - entire survey results here now if we
27:27 - wanted to see their results for just
27:30 - that hobbyist question then remember
27:33 - within the brackets here I can pass in a
27:36 - second value for the columns that I
27:39 - would like so if I pass in hobbiest then
27:41 - we can see that their answer to that
27:43 - whether they code as a hobby is yes and
27:46 - also like we saw earlier I can also pass
27:49 - in a list of multiple rows or multiple
27:51 - columns to get the exact rows and
27:54 - columns that we want to see so to get
27:56 - the first three responses for the
27:58 - hobbiest column then instead of just
28:01 - passing in a single value here then I
28:03 - can put in some inner brackets here and
28:05 - pass in a list of multiple rows so if I
28:09 - pass in a list of three rows here and
28:13 - run this then these are the first three
28:16 - results for that hobbiest column now one
28:19 - thing that we haven't seen yet is that
28:21 - we can also use slicing to grab multiple
28:23 - rows and columns as well now if you're
28:26 - familiar with list slicing then this is
28:29 - pretty much the same thing the only
28:31 - difference is that our last value is
28:33 - going to be inclusive
28:35 - at least with loke so if we wanted the
28:38 - first three rows then we could say that
28:41 - we want from 0 and then slice to the
28:45 - index of 2 and if I run this oops and I
28:49 - accidentally made a mistake here
28:51 - actually whenever we're using slicing we
28:54 - do not wrap these in brackets
28:57 - so I'm gonna take that out so for our
28:59 - first value we're just saying we're no
29:02 - longer passing in a list of values we're
29:04 - just passing in this slice of zero and
29:06 - then colon 2 so if I run that then we
29:10 - can see that now we get the same result
29:12 - that we got before and we can do this
29:14 - with the columns as well so right now
29:16 - we're only getting two hobbiest column
29:18 - but let's go back and look at our
29:20 - columns and see what columns come after
29:22 - the hobbiest column so up here these are
29:25 - all of our columns here where we printed
29:27 - them out so let's look at a few columns
29:29 - after hobbiest here so we have open
29:31 - source or open source employment so
29:34 - let's say that we wanted to get all of
29:36 - the columns from hobbiest all the way up
29:39 - to this employee employment column so to
29:41 - do that I'm just gonna copy that we can
29:44 - come down here and we can just pass in a
29:48 - colon and then employment and that'll do
29:51 - a slice from hobbyists to employment now
29:54 - I also want to point out that this is
29:56 - the reason that slicing is inclusive for
30:01 - these values because imagine how much of
30:03 - a pain it would be if we wanted all of
30:06 - the columns from hobbyist to employment
30:08 - but the last value here wasn't inclusive
30:12 - and we had to come up here and say well
30:13 - if I want from hobbyists to employment
30:15 - then I really need to pass in you know
30:18 - hobbyist to country and country's not
30:20 - inclusive that would just be way too
30:23 - confusing so it's so much easier for
30:25 - this to be inclusive here so if you are
30:28 - wondering why they did that then that's
30:30 - why they do it so if I run this then we
30:33 - can see that now for we get these first
30:36 - three rows here and for the first three
30:38 - rows we get all of those responses for
30:42 - the columns of hobbyist open source er
30:44 - all the way up to employment so now
30:47 - we've seen an overview of everything
30:48 - that we've learned about exploring our
30:50 - data frames and series objects so far
30:53 - and how we can pluck some you know basic
30:55 - information out of these now there's
30:57 - still tons to learn about data frames
30:59 - and series objects and we'll continue
31:01 - learning more learning more about these
31:03 - throughout the pandas series since these
31:05 - two data types are the main data types
31:07 - that we'll be using and pandas so we'll
31:09 - be learning more about advanced
31:11 - filtering queries how to see which data
31:14 - type each column of our data contains
31:17 - and a lot more now before we end here
31:19 - I do want to mention that way you have a
31:21 - sponsor for this video and that is
31:23 - brilliant
31:23 - org brilliant is a problem-solving
31:25 - website that helps you understand
31:27 - underlying concepts by actively working
31:29 - through guided lessons and brilliant
31:31 - would be an excellent way to supplement
31:32 - what you learn here with their hands-on
31:34 - courses they have some excellent courses
31:36 - and lessons on data science that do a
31:38 - deep dive on how to think about and
31:40 - analyze data correctly so if you're
31:42 - watching my panda series because you're
31:44 - getting into the data science field then
31:46 - I would highly recommend also checking
31:47 - out brilliant and seeing what other data
31:49 - science skills you can learn they even
31:51 - use Python in their statistics course
31:53 - and will quiz you on how to correctly
31:55 - analyze the data within the language
31:57 - they're guided lessons will challenge
31:58 - you but you'll also have the ability to
32:00 - get hints or even solutions if you need
32:02 - them it's really tailored towards
32:04 - understanding the material so to support
32:06 - my channel and learn more about
32:07 - brilliant you can go to brilliant org
32:09 - forge slash CMS to sign up for free and
32:12 - also the first 200 people to go to that
32:14 - link will get 20% off the annual premium
32:17 - subscription and you can find that link
32:19 - in the description section below
32:20 - again that's brilliant dot org forge
32:23 - slash C m/s okay so I think that's gonna
32:27 - do it for this pandas video I hope you
32:29 - feel like you got a good introduction to
32:31 - the data frame and series objects and
32:33 - how to navigate through some of your
32:35 - data now like I said there's a lot more
32:37 - to learn about these data types and some
32:40 - advanced filtering that we'll learn and
32:42 - future videos so be sure to stick around
32:44 - for that now in the next video we're
32:46 - going to be learning more about indexes
32:48 - so we saw basic default indexes in this
32:51 - video but we'll learn how to set the
32:53 - index to specific columns and the
32:55 - benefits of doing that in the next video
32:57 - but if anyone has any questions about
32:59 - what we covered here then feel free to
33:00 - ask in the comment section below and
33:02 - I'll do my best to answer those and if
33:04 - you enjoyed these tutorials and would
33:05 - like to support them then there are
33:06 - several ways you can do that the easiest
33:08 - ways to simply LIKE the video and give
33:10 - it a thumbs up and also it's a huge help
33:12 - to share these videos with anyone who
33:13 - you think would find them useful
33:14 - and if you have the means you can
33:16 - contribute through patreon and there's a
33:17 - link to that page in the description
33:18 - section below be sure to subscribe for
33:20 - future videos and thank you all for
33:21 - watching
33:33 - you

Cleaned transcript:

hey there how's it going everybody in this video we're gonna continue learning more about pandas and specifically we're going to be learning about the data frame and series data types so like I said in the last video these are basically the backbone of pandas and are the two primary data types that you'll likely be using the most so in this video we're gonna go over how we can think of data frames and series data types in a different way and then we'll look at the basics of getting information from these data types now I would like to mention that we do have a sponsor for this series of videos and that is brilliant work so I really want to thank brilliant for sponsoring the series and it would be great if you all can check them out using the link in the description section below and support the sponsors and I'll talk more about their services in just a bit so with that said let's go ahead and get started okay so first let's look at what a data frame is and then we'll learn more about how we can think about this in terms of a Python object so we saw data frames briefly in our last video when we check to make sure that our data was loaded in correctly so these were the objects that were displayed in Jupiter as rows and columns basically a table so let's take a look at what this looks like so if you were following along with the last video this is basically the same jupiter notebook that i had before except this has just cleaned up a bit so we're importing pandas here we are reading in our csv files so one is just our main data frame for our survey results one is our schema data frame for the schema results and then we are setting some options here where we have the max columns set to 85 so we can see all the columns and the max row set the 85 so that we can see all of the schema now if you haven't been following along with the video so far then I do have a link in the description section below that links to where you can download this Dayla data and follow along with this okay so this is a data frame here so where we are printing out D F dot head this is what this returns so this here is the first five rows of our data frame so you can see that a data frame is made up of multiple rows here and we also have multiple columns so in the case of this data these are survey results but your data can be you know whatever your data is but it's most likely going to be in rows and columns kind of like a table so for this data with these being survey results each row is a survey as one person who answered the survey and each question was their answer for that question on the survey so for example this respondent number one here they answered that yes they were a hobbyist and if you want to know what hobbyist means then we just like we saw in the last video we can look at our schema data frame so let me go ahead and print this out here and let's look at this so if I look at what a hobbyist is then we can see that that question was do you code as a hobby so that's what this data is and that kind of gives us an idea of what a data frame is basically a data frame is just rows and columns but now let me explain how I like to think of data frames using native Python so if we were only using Python and not using pandas to store information in rows and columns then how would we do this well for those of you familiar with dictionaries you might think that it's a good idea to store information that way so let me pull up a new notebook here that I have open here with some snippets and let's take a look at this okay so let's look at this first cell here so a lot of us are probably familiar with Python dictionaries where we have keys and values so if I'm representing some data in this example it's a person then we can use a dictionary so first off I have a key of first which is going to be the first name and then that has a value of kori and then we also have keys and values for the last name and the email as well okay so this dictionary here represents data for a single person but how would we represent data for multiple people well there are probably a couple of different ways that we can do this but the way that I like to think of this in terms of learning pandas is to make all of our values and our dictionaries a list so let's take a look in the second cell here to see what this would look like so here in the second cell now we can see that we have a pretty similar diction to what we had above but now instead of just a single string here for the values I instead have a list and our list currently just has one person but now since this is a list we can add more first names and information in here so the first value of our list is going to be our first person so if I go to the third cell down here at the bottom then now we can use this as an example to see what this would look like with multiple people so the second value in our list will be our second person and the third value in the list will be our third person so if we look here we have people we have a key of first so if we want the second person here we go to the second value that's Jane the last name is Doe and the email go to the second value here is Jane Doe at email com if you want the third person that would be John and then third value in last would be Doe then third value and email is John Doe at email com so we can kind of think of this like rows and columns the keys are the columns and the values are the rows now if you look up the definition of a panda's data frame online then you'll see a lot of definitions that just say something like it's a two dimensional data structure now that might sound a little confusing but in layman's terms that basically just means rows and columns okay so like I said here the key for email here would be our email column and contain all of the email values and if we wanted to see the email column then we can just access that key so if I come down here into actually let me run all of these really quick here I think I open this up without running these so I want to make sure that we have this registered okay so if I wanted to see that email column then I can simply say people and then access that email key if I run that then we can see that we got all of the emails now the reason that I wanted to show you this is because I feel like this really helped me in terms of how I think about data frames so data frames are very similar to this but with more functionality than what we have here in stand Python now we can actually create a data frame from this dictionary and see what this looks like so let's do that and look at some basic data frame functionality and then we'll look at this more using the stack overflow data from the last video so here in this bottom cell in order to create a data frame from the information that we have here I'm going to go ahead and import pandas so I'm going to say import pandas as PD and now we can create a data frame actually using this dictionary that we have up here so to do that I can just say DF is equal to PD dot data frame and check the casing there that's a capital D and a capital F and then we'll just pass in that dictionary that has values as lists so if I run this and that seemed to run okay without any errors and now let me just print out DF here and if I print that out then we can see that now our data frame is representing this in a way to where we do have rows and columns that we can visualize so we get these people printed out in a nice table of rows and columns now we also have these over here to the far left that don't have column names this 0 1 & 2 now this is an index now I'm not going to go too much into indexes right now because that's what the next video is going to cover but basically it's a unique value for our rows now it doesn't need to be unique but again we'll talk more about that in the video specifically on indexes so now that we have a bit of an idea of how to think about data frames now let's take a look at how to access information here within the data frame so first let's just access the values of a single column so just like we did with the dictionary we can access a single column just like we were accessing the key of a dictionary so just like I did people and email up here I can do very similar down here and just say that I want that email column of my data frame now that's not actually a key that is going to access the column of a data frame but we can see here that we get all of the emails back from that data so again I do want to emphasize that I only use the pure Python example so that we could get an idea of how to think about a data frame but like I said a data frame is much much more than just a dictionary of Lists so for example we can see that when we displayed the email column here it doesn't look the same as when we displayed the list of values from that dictionary and that's because this is actually returning a series and we can see this if we check the type so if I check the type of this email column here so let me run that we can see that this is Panda score series series so this is a series object so what is a series so a series is still basically a list of data but just like with a data frame it has a lot more functionality than just that now if you look up the definition of a series online then you'll see a lot of definitions that just say it's a onedimensional array and that might sound a little confusing but in layman's terms that basically just means that it's rows of data so again you can think of a data frame as being rows and columns and a series as being rows of a single column so a data frame is basically a container for multiple of these series objects so again that's important so let me go over that one more time so we can see that a data frame here is twodimensional because it has rows and columns so we can see here that it has you know first name last name email now whenever we access just the email then we can see that we get all these emails here now this is a series and I said that a data frame basically contains is a container for multiple series objects so we can think of this email column here as a series this last column here is a series and this first column as a series and also we can see where we printed out this series here for the emails we can see that this series also has an index as well just like our data frame did so this index is over here on the left the 0 1 okay so we can access a single column of a data frame like we're accessing a key just like we did here in this cell but you might also see some people use dot notation to do the same thing so you might see some people do it like this so they might do D F dot email and if I run this cell then we can see that let me get rid of this cell here and just so we can compare these two we can see that this gives us the same thing whether we access this like a key or whether we use dot notation this returns the same series object of the email values now whichever way that you want to do this is really just a personal preference I actually prefer the first way of using the brackets and there are a couple of reasons that I prefer to use that over dot notation first is that I like using the brackets because there's a chance that one of your columns is named the same thing as one of the attributes or methods of a data frame and if that's the case then using the dot notation might give you some errors so for example if a data frame a dataframe has a method called count so if you had a column named count and you did and you were trying to access that count column using dot notation then that's actually going to access the count method from data frame instead of that count column so that actually wouldn't work how we did it here if you wanted to access the actual column called count which we don't have one in this specific data frame but if we did then we would have to access it like this so that's kind of why I prefer brackets so I'm going to be using brackets throughout this series but I wanted you to know about dot notation because if you're working with other people using pandas then you might see them access columns in using dot notation so you need to know that it's at least a possibility and again that doesn't mean that they're doing it wrong it's just a personal preference I just prefer using the brackets okay so I said that data frames have a lot functionality than what we saw using you know standard Python so let's look at some other stuff that we can do here so let's say that we wanted to access multiple columns now in order to access multiple columns we can use the bracket notation and pass in a list of the columns that we want so if I wanted both the last name and email columns then we could say DF and use our brackets just like we saw before but now I'm going to put in a set of inner brackets here as a list of columns that I want to access so for the first value I'll put last for the last name and for the second value I'll put email for the email so if I run this then we can see that now we have a data frame returned here of the last column and the email column now I want to emphasize again here that I passed a list inside of these brackets here so there are two pairs of brackets you can't leave off the inner brackets because you'll likely get a key error because pandas will think that you're passing in both of those strings as a single column name and another thing that I want to point out here is that now that we're getting multiple columns this can no longer be a series because remember a series is basically a single column of rows so when we get multiple columns like this it's just returning another data frame and in this case it's a filtered down data frame with just these specific columns so we filtered out the first name column here and we just have the last and the email okay so that's how we get a specific column or multiple columns and we can slice these as well similar similar to how we slice a list but I'll show that on our larger stack overflow data set here in a second now if you have a lot of columns and want to see all of them easily then we can just grab the columns specifically by saying D F dot columns and we can run this and we can see here that this gives us all of our columns here so our columns are an index of first last and email okay so now we've seen to get a column but how would we get a row so in order to get rose we can use the Lok and I Lok indexers so that is Lok and I look so let's take a look at these so first let's take a look at I look so I local iäôs us to access rows by integer location hence the name I Lok is integer location so if I wanted to get the first row then we can just say DF dot i lok and then use brackets here too since this is an indexer use brackets and pass in a 0 and that will give us the first row so if I run this then we can see that the first row has a first name of Cori last name of Schaefer and email of corium Schaefer at gmail.com so what that did is it returns a series that contains the values of that first row of data which like I said is the first name last name and email of the first person in this example and again we haven't discussed indexes yet that will be in the next video but the index here is the column names so that we know what those values are so up here our index was 0 1 & 2 but whenever we're actually accessing a row it's going to set that index to the column name so that we know what those values are because if this just said 0 1 & 2 then we might not know what these are and just like when we selected multiple columns we can select multiple rows as well by passing in a list of integers so if I want the 1st and 2nd row then we can just say and again this is going to be a pair of brackets within these brackets because we're passing in a list to our index here and I'm just going to pass in a list of 0 & 1 so if I run this then we can see that now we get the first two rows of data and again be sure to pass in an inner list inside those brackets so that it does what you expect it to do and also we can see that now we're getting a data frame with these multiple rows now with these I'll oak and Lok indexers we can also select columns as well and that is going to be the second value that we pass into these outer brackets so if we thought of I'll oak and Lok as functions then we can think of the rows that we want as the first argument and the columns as the second argument so let me show you what this looks like so here we have our inner bracket those are the rows that we want but now after that list we can put a comma and now we can specify the column that we want now with I Lok we can't specify an actual column name because these use integers integer locations so these are for integers only so remember our first name is the first column the last name is the second column and the email is the third column so if we wanted to grab the email address of the first two rows then we can grab the column at index 2 which will be the third column since all of these start at 0 so if I was to pass in a 2 here and run that then we can see that now we get the email addresses of these first two rows okay so that's I'll okay so now let's look at Lok so with I Lok we were searching by integer location with Lok we're going to be searching by label and when we're talking about labels for rows these will be the indexes and again we don't have custom indexes right now so this index is just a default range of integers so at the moment this will somewhat be similar with I Lok the I Lok indexer but we'll look at uses or use cases with Lok with actual labels in the next video when we cover indexes so real quick let's look at our entire data frame again so I'm just going to print that out down here so like I said over here on the far left these are our indexes so these are the labels for that row so if I want the first row then by default this just has a label of 0 so I can say DF Lok and pass in a 0 there and if I run that then we can see that we get that row with that label of 0 and again I know that that looks similar to look at the moment but we'll see how to use indexes with labels in the next video and just like with I Lok we can also pass in a list to specify multiple rows so if I wanted the first and second row then just like with I Lok I can pass in an inner list here so let's say that I want the first row and the second row so I'll run that we can see that now we get the first and the second row and again now we can see that we are getting a data frame back with now that we have multiple rows and just like with I Lok we can also pass in a second value into our indexer to select specific columns for these rows now with I'll oprah used integers to select the columns but now that we're using lok we can use labels so if we want the email column of these first two rows then now we can just pass in a value of email so if I run that then we can see that now we get the email value of these first two rows now I didn't show this with I Lok but we can also pass in a list for the columns as well so if I want the last name and the email for these rows then instead of just passing in a string as this second value here then we can pass in a list of strings of the columns that we want so I'm gonna wrap this in brackets here I know that this can get a little confusing with all these inner brackets but let's say that we want email and we want last name so if I run this then now we can see that we got these specific columns here email and last name for these specific rows the row with label 0 and the row with the label of 1 and also notice that the columns display and the order that we used in our list up here within loke which is a different order from our original data frame so up here its first last email but we asked for email and last and it gave us back in that order of email and last okay so now that we've seen the basics of grabbing certain rows and columns from a small data set now let's go back to our data set from the last video and see how we grab some rows and columns from the Stack Overflow data set so I'm gonna go over here to back to our pandas demo here and again just a quick overview of the data that we have here we're importing pandas we have DF as our main survey results here our schema DF as our schema results we are setting some options here this is what our main data frame head looks like which is the first five rows and then this is what our schema looks like so I'm going to go down below our schema here and now let's mess around with this a little bit so let's go over a bit of what we learned and pluck out certain rows and columns but first let's see how many rows and columns that we have in this data frame now we saw a couple couple of different ways to do this in the last video but the easiest way to do this is to use the shape attribute so if I say DF dot shape and run this then we can see that we have 88,000 rows and 85 columns so let's grab all of the responses for the hobbiest column so again what I'm trying to do here is if we look at our main data frame I want to grab all of the responses for this column right here hobbiest okay so how would we do that now if you remember if you want to see what columns are available then you could just say DF doc columns to see all of these we can see that these are kind of long we have 85 here but here we have hobbiest which is the one that we want and that is the question where people answered if they code as a hobby or not and in the next video we're going to cover indexes I'll show how we can you know search a schema data frame to find exact questions so that we can see what questions are what specific columns and the data frame but right now let's just grab those hobbyist responses so if you remember from that small data set that we just saw in order to grab that hobbyist column we can just access that like a key so if I say DF and then pass in hobbyists there then we get a series of all of those responses and luckily that doesn't display the entire 89 thousand rows and our browser here but we do get the head and the tail of that data to get an idea of what those responses look like now real quick let me show you something that will cover more of further into the series but I want to give you an idea of how powerful something like pandas is so let's say that we wanted to know how many of these responses were answered yes and how many were answered no now if we were using regular Python then we might import the counter class or write a quick function or a loop to do this but pandas has so much of this stuff already built in so to get the count of unique values in this column I can just use this value counts method to calculate this so right up here I can just tack on a method of value underscore counts now again this is going to be for a future video but I just want to give you an idea of what pandas can do so whenever I add this value counts method we can see that out of this series that we returned here for all of our answers for this hobbyist question the value counts are seventy one thousand people said yes they do code as a hobby and about eighteen thousand said no they don't code as a hobby and again we'll cover more of this and future videos when we learn more about analyzing data in depth but I wanted to give you a quick taste as to why it's beneficial to even learn pandas like we're doing here it makes this type of stuff really easy and we could go further and plot that out and everything okay but with that quick sidetrack out of the way let's keep going and go over the other things that we learned earlier so we got a column here so let me get rid of that value counts so we have our column here so now let's grab a specific row and a specific column so let's grab the first row and we'll also grab that same hobbyist column for that row so how do we grab rows so remember if we want to grab rows that we use the loke or I'll oak met or indexers so I'm going to go ahead and use lok because remember that that's the one that allows me to use labels and i'm going to use a label instead an integer for the hobbyist column name now again since we're just using a default index and we can see the indexes here 0 1 2 3 4 since we're just using a default index instead of a custom one our current labels for our indexes are just a range of values from 0 to 88,000 something so in order to get the first row I can say D F dot Lok and pass in that label of that first index which in this case is just a 0 and these are all of the responses from the first respondent so this is one person's entire survey results here now if we wanted to see their results for just that hobbyist question then remember within the brackets here I can pass in a second value for the columns that I would like so if I pass in hobbiest then we can see that their answer to that whether they code as a hobby is yes and also like we saw earlier I can also pass in a list of multiple rows or multiple columns to get the exact rows and columns that we want to see so to get the first three responses for the hobbiest column then instead of just passing in a single value here then I can put in some inner brackets here and pass in a list of multiple rows so if I pass in a list of three rows here and run this then these are the first three results for that hobbiest column now one thing that we haven't seen yet is that we can also use slicing to grab multiple rows and columns as well now if you're familiar with list slicing then this is pretty much the same thing the only difference is that our last value is going to be inclusive at least with loke so if we wanted the first three rows then we could say that we want from 0 and then slice to the index of 2 and if I run this oops and I accidentally made a mistake here actually whenever we're using slicing we do not wrap these in brackets so I'm gonna take that out so for our first value we're just saying we're no longer passing in a list of values we're just passing in this slice of zero and then colon 2 so if I run that then we can see that now we get the same result that we got before and we can do this with the columns as well so right now we're only getting two hobbiest column but let's go back and look at our columns and see what columns come after the hobbiest column so up here these are all of our columns here where we printed them out so let's look at a few columns after hobbiest here so we have open source or open source employment so let's say that we wanted to get all of the columns from hobbiest all the way up to this employee employment column so to do that I'm just gonna copy that we can come down here and we can just pass in a colon and then employment and that'll do a slice from hobbyists to employment now I also want to point out that this is the reason that slicing is inclusive for these values because imagine how much of a pain it would be if we wanted all of the columns from hobbyist to employment but the last value here wasn't inclusive and we had to come up here and say well if I want from hobbyists to employment then I really need to pass in you know hobbyist to country and country's not inclusive that would just be way too confusing so it's so much easier for this to be inclusive here so if you are wondering why they did that then that's why they do it so if I run this then we can see that now for we get these first three rows here and for the first three rows we get all of those responses for the columns of hobbyist open source er all the way up to employment so now we've seen an overview of everything that we've learned about exploring our data frames and series objects so far and how we can pluck some you know basic information out of these now there's still tons to learn about data frames and series objects and we'll continue learning more learning more about these throughout the pandas series since these two data types are the main data types that we'll be using and pandas so we'll be learning more about advanced filtering queries how to see which data type each column of our data contains and a lot more now before we end here I do want to mention that way you have a sponsor for this video and that is brilliant org brilliant is a problemsolving website that helps you understand underlying concepts by actively working through guided lessons and brilliant would be an excellent way to supplement what you learn here with their handson courses they have some excellent courses and lessons on data science that do a deep dive on how to think about and analyze data correctly so if you're watching my panda series because you're getting into the data science field then I would highly recommend also checking out brilliant and seeing what other data science skills you can learn they even use Python in their statistics course and will quiz you on how to correctly analyze the data within the language they're guided lessons will challenge you but you'll also have the ability to get hints or even solutions if you need them it's really tailored towards understanding the material so to support my channel and learn more about brilliant you can go to brilliant org forge slash CMS to sign up for free and also the first 200 people to go to that link will get 20% off the annual premium subscription and you can find that link in the description section below again that's brilliant dot org forge slash C m/s okay so I think that's gonna do it for this pandas video I hope you feel like you got a good introduction to the data frame and series objects and how to navigate through some of your data now like I said there's a lot more to learn about these data types and some advanced filtering that we'll learn and future videos so be sure to stick around for that now in the next video we're going to be learning more about indexes so we saw basic default indexes in this video but we'll learn how to set the index to specific columns and the benefits of doing that in the next video but if anyone has any questions about what we covered here then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoyed these tutorials and would like to support them then there are several ways you can do that the easiest ways to simply LIKE the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
