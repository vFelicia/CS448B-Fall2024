With timestamps:

00:00 - hey there how's it going everybody so I
00:01 - wanted to do a quick follow-up video to
00:03 - my last video on a five common Python
00:06 - mistakes and explain one of those
00:07 - mistakes and a bit more detail so one of
00:10 - the things that I talked about in that
00:11 - video was mutable default arguments and
00:14 - the issues that you can run into when
00:16 - using those and it seems like there were
00:18 - still a lot of people confused by how
00:20 - those work and after going back and
00:22 - watching that video again I realized
00:24 - that I could have added in some extra
00:25 - details that would have made that a lot
00:27 - easier to understand so I wanted to make
00:29 - a quick follow-up video and try to make
00:31 - sure that that's a bit more clear as to
00:34 - what's going on there so I have my
00:36 - example from that last video open and in
00:38 - case you missed that video let me go
00:40 - over the problem one more time
00:41 - so we have a function here called add
00:44 - employee so let me explain what this
00:47 - function is meant to do so it takes a
00:49 - single employee as its first argument
00:51 - and also a list of employees here called
00:55 - employee lists and then it's simply
00:57 - going to append this appoint employee
01:00 - that we pass in to that list and then
01:03 - print out that employee list so we can
01:05 - see here that the employee list has a
01:07 - default argument set to an empty list
01:10 - and an empty list is a mutable data type
01:13 - so what we want to happen here is if we
01:16 - don't pass in an employee list to the
01:18 - function then it should just create a
01:20 - new one from scratch for us but let's
01:22 - actually see what this does
01:23 - so I have an existing list of employees
01:25 - down here so let me add a new employee
01:28 - and I'm going to use that function to
01:31 - add an employee to that list so I'll
01:33 - just add an employee of Korie I'm going
01:36 - to pass in that existing list that we
01:39 - want to append to and now it should
01:42 - print out that employee list so if I run
01:44 - that then we can see that that works
01:47 - fine our employee was added to that
01:49 - employee list but now let's add a couple
01:53 - of employees without providing an
01:55 - existing list so I will add Korie here
02:00 - and I'll also add an employee of John so
02:04 - if I save that and run it then what
02:08 - we're going to expect happens here is
02:10 - that since we're not passing in a
02:12 - default or
02:14 - a list here it's going to use the
02:15 - default of an empty list and just add
02:18 - that one employee to that empty list and
02:20 - the second time through we would expect
02:22 - that John will also get added to an
02:25 - empty list since that's the default and
02:26 - we didn't provide an existing list here
02:28 - but if I save that and run it then we
02:31 - can see that it seems like it used that
02:34 - same list twice and it added John on
02:36 - here to this list that was created here
02:39 - which is kind of strange and if we keep
02:41 - doing this then it's just going to keep
02:44 - adding to that list
02:46 - so that's a bit weird because we expect
02:48 - it to be setting this to an empty list
02:51 - each time we run the function so what's
02:53 - going on here is that in Python default
02:55 - arguments are evaluated once at the time
02:58 - it creates the function so it's not
03:00 - actually creating a new list each time
03:02 - we run the function now you won't notice
03:04 - this with immutable types like strings
03:06 - and things like that but with mutable
03:08 - data types like a list it's going to use
03:11 - that same list that it created when the
03:13 - function was defined so in the last
03:15 - video that's about as much detail as I
03:18 - went into I then showed that in order to
03:21 - fix the problem we would just need to
03:22 - set the default argument to none and
03:24 - then set the empty list inside the
03:26 - function so let me do that again but
03:29 - this time I'm going to create that
03:30 - function separately so that we can
03:32 - compare these so I'm just going to copy
03:34 - this function here and I'm going to
03:37 - create a new one and I'm going to call
03:39 - this add employee fixed and to in order
03:43 - to fix this function like I was saying
03:45 - we can just set the default argument to
03:48 - none whoops that's none and then inside
03:51 - here I will say if the employee list is
03:55 - none then we want to set employee list
03:59 - equal to an empty list so again in the
04:03 - original video that's about as much
04:04 - detail as I went into but there were
04:07 - still some people confused by this I had
04:09 - a few people who commented who said well
04:12 - if the default arguments are only set
04:14 - once when the function is created then
04:17 - how is the Employee List set to none
04:20 - each time we run the function so here's
04:24 - where I feel like I failed to provide a
04:26 - proper explanation
04:27 - so I never said that the default
04:29 - arguments were only set one time when
04:31 - the function is created I said that the
04:34 - default arguments were only evaluated
04:36 - one time each time the function is
04:38 - created so to illustrate this more
04:40 - clearly we can look at a magic method on
04:43 - our function that holds the default
04:45 - arguments and I think that's going to
04:47 - make things a lot more clear as to
04:48 - what's going on here so first let me
04:50 - show this on our original function up
04:53 - here so I'm going to copy our output
04:58 - here and paste it in and let me actually
05:01 - just comment those out and I'm gonna
05:05 - comment these out now for now as well so
05:08 - right underneath this function here I'm
05:10 - going to print out add employee and this
05:15 - has a magic method here called defaults
05:18 - so and this isn't actually a method
05:21 - sorry it is an attribute so I don't want
05:24 - to put parentheses there to run it so if
05:26 - I save this and I run it then these are
05:29 - the defaults that were created for this
05:32 - function and this is what only it gets
05:35 - evaluated once so we can see that this
05:38 - has a default of an empty list but a
05:41 - list is mutable so since this was only
05:45 - created once and set as a default here
05:49 - we can actually add to this list and
05:52 - each time we run the function if we
05:55 - don't provide anything for our employee
05:58 - list then it's going to set it equal to
06:00 - this default value here but let me show
06:03 - you what happens when we add an employee
06:07 - so let me add an employee and then I'll
06:10 - print out that default again so if I
06:12 - save this and I run it then we can see
06:15 - that the first time through it evaluated
06:17 - that empty list once so it says okay I
06:19 - have a default value here that is an
06:21 - empty list then we added this employee
06:24 - and it appended it to that default list
06:27 - and then we're printing the list here so
06:28 - we have a list of one person and now
06:31 - when we print those defaults afterwards
06:33 - that original list that it created now
06:36 - has a value it has a value of Corre so
06:40 - it's no
06:40 - longer empty because it only creates
06:43 - that empty list that one time and now
06:45 - we're mutating that list since this are
06:47 - mutable so now every time through if I
06:53 - look at this and I keep adding employees
06:56 - then every time through it started out
06:59 - as empty then we added Cori and now Cori
07:02 - is that default list then we added John
07:04 - and now we have Cori and John as that
07:06 - default list so that's why that keeps
07:09 - getting modified each time we run that
07:12 - function so now let me show you this
07:15 - with our fixed version where we set this
07:19 - equal to none so right underneath here
07:23 - I'm going to print out and I'm just
07:26 - gonna get rid of this list here I don't
07:29 - need that anymore
07:30 - so now I'm just gonna print out add
07:32 - employee fixed dot defaults and let's
07:37 - look at this so now when I run this we
07:40 - can see that we have a default value of
07:43 - none so that got evaluated once but just
07:47 - because it got evaluated once doesn't
07:49 - mean that it doesn't get set to that
07:51 - value each time we run the function if
07:54 - an argument isn't supplied it'll still
07:57 - set each time through equal to that
08:00 - default value but it's only evaluated
08:02 - one time and if this still doesn't make
08:04 - sense then I think it'll really knock at
08:06 - home once we look at the date/time
08:07 - example down here at the bottom but for
08:09 - now let's just stick with this example
08:11 - so now I'm gonna uncomment out adding
08:15 - one employee here and then I'm going to
08:18 - print out the defaults after we add that
08:21 - employee let me make this a little
08:22 - smaller here so that we can see a little
08:25 - bit more of the code here so now I'm
08:26 - gonna save this and run it and we can
08:29 - see that the first time through it
08:32 - evaluated this statement one time of
08:34 - employee the default of Employee List is
08:36 - equal to none so that was our default
08:39 - and we can see that here so then we add
08:42 - an employee and it came up here and it
08:45 - said okay so we don't have an employee
08:48 - list that we want to append to so this
08:50 - is equal to none so by default it's
08:54 - is that equal to none then we come in
08:56 - here in the function and it says okay if
08:58 - employee list is equal to none which it
09:00 - is because that's our default then just
09:03 - create a new empty list and then we
09:05 - append to that list and print out those
09:07 - employees so we printed out our one
09:09 - employee that was added to this empty
09:11 - list here and now when we print out the
09:15 - defaults again afterwards that default
09:17 - is still equal to none because it's it
09:20 - even though it was evaluated one time
09:23 - that's not mutable so that's not getting
09:25 - changed each time through like our list
09:27 - was getting changed each time through so
09:29 - we can come in here and when we're
09:32 - adding more and more employees so I can
09:34 - add John and save that and run it whoops
09:37 - and it looks like that's a mistake but
09:39 - it's not it's because I'm using add
09:41 - employee instead of add employee fixed
09:43 - here so let me put in adam ploy ii fix
09:47 - there so now when we run this now we can
09:50 - see that it's not appending to that list
09:53 - every time because the since this is set
09:57 - to none as the default it is still
09:59 - setting employee list to that default
10:02 - value every time we run the function but
10:05 - the difference between our fixed
10:07 - function and our other function was that
10:09 - when it sets it to none none is not
10:12 - being modified each time through but
10:14 - this mutable default argument that's the
10:17 - reason that these are a problem that was
10:19 - getting modified each time through so
10:22 - when I say that those default arguments
10:24 - are evaluated one time every when the
10:27 - function is created I don't mean that it
10:29 - only sets that value one time this is
10:32 - still getting set to this list each time
10:34 - we don't provide a list and this is
10:36 - still getting set to none each time we
10:38 - don't provide the Employee List but it's
10:42 - just the initial values is what gets
10:44 - evaluated once so I really think this
10:47 - point will be knocked home once we look
10:49 - at this date time example down here so
10:53 - let me show you this example here and I
10:57 - showed this in the original video as
10:59 - well so we have a function here called
11:01 - display time and it takes in time as an
11:04 - argument and then it's just going to
11:06 - print that out in a special format
11:08 - now if we don't provide a time then this
11:12 - has a default argument of date/time dot
11:14 - now now this isn't exactly the same as
11:16 - mutable default arguments like we are
11:19 - talking about before but we can still
11:21 - see why this would be a problem if we
11:23 - think about it because this gets
11:25 - evaluated one time and gets set to those
11:28 - defaults so if you didn't know that then
11:31 - what you might expect to happen here is
11:33 - each time we run this function and we
11:35 - don't provide a date then we would think
11:38 - that it would just use this default
11:40 - value here of date/time now and that
11:43 - would be executed each time we run at
11:45 - the function so down here I'm running
11:47 - display time three different times but
11:49 - I'm sleeping a second between each time
11:52 - I call that function so we might expect
11:54 - that since it's using now that it would
11:58 - increment by a second each time through
12:00 - but if I run this then we can see that
12:02 - it does wait a second each time through
12:05 - but it's not incrementing by a second so
12:07 - it's just printing out the same time
12:09 - over and over so why is it doing this
12:12 - the reason it's doing this let me print
12:15 - out display time and then I will print
12:19 - out those defaults oops and that's a
12:23 - magic or a dunder attribute there so I
12:27 - want to be sure I have those and now let
12:29 - me actually I'll keep those in as well
12:32 - so if I run this now where I'm printing
12:35 - out those defaults if I run that then we
12:39 - can see that the default value it
12:43 - executed this date/time dot now and set
12:47 - it here in our defaults so this is
12:50 - what's going to get this is the default
12:52 - value that it's going to be set to every
12:55 - time we run the function so and we can
12:58 - see here that it's 10 seconds into the
13:01 - minute and that's what gets run every
13:03 - time we run display time it gets set
13:05 - there in even though we're sleeping it's
13:07 - still the same default value here so
13:11 - that was evaluated once and now that is
13:13 - our default value it's not being set to
13:17 - the actual dot now each time the
13:20 - function is executed it's being set to
13:21 - this
13:22 - fault here so that's probably not what
13:25 - you would expect to happen if you didn't
13:27 - know about this so again the fix for
13:29 - this like we saw like I showed in the
13:32 - last video in the common mistakes video
13:34 - is to just set that equal to none and
13:37 - now we'll say if the time to print is
13:41 - none then we want to set the time to
13:45 - print equal to date/time dot now whoops
13:50 - sorry
13:51 - date time dot now so now when we run
13:55 - this I can see here that our default
13:57 - value is equal to none so it's not
14:00 - evaluating that date time dot now that
14:04 - one time when we create the function so
14:06 - it comes in here and it says okay I'm
14:09 - running display time they didn't provide
14:11 - me a time to print out so I'm gonna set
14:13 - this equal to none so if time to print
14:16 - is none which it is each time through
14:18 - then we want the time to print to be
14:20 - equal to date/time dot now now this does
14:23 - get executed each time we run the
14:24 - function because it's coming in here and
14:27 - running this code every time we run the
14:29 - function so now we can see that our
14:31 - seconds are being updated like we would
14:34 - expect because it's sleeping for one
14:36 - second in between those function calls
14:38 - okay so now let me close this and just
14:42 - scroll up here a little bit okay so
14:43 - that's all I wanted to show in this
14:45 - video just a quick little update to that
14:47 - last video I put out I hope that this
14:49 - was a lot more clear this time around
14:51 - when I rode this default value here and
14:54 - how that gets evaluated once but the
14:57 - general confusion seemed to be that
14:59 - people were wondering like okay well if
15:01 - its evaluated once they seem to think
15:03 - that it meant that it was only set one
15:06 - time and that it didn't set these
15:07 - default values each time you run the
15:09 - function it does but if you use
15:12 - something that is executed or a mutable
15:15 - default argument then that's where you
15:17 - run into problems like we saw in this
15:19 - video so I hope that this video cleared
15:21 - up any confusion that may be lingering
15:23 - after that last video where I didn't go
15:26 - into as much detail but if you do have
15:28 - any further questions then feel free to
15:30 - ask in the comment section below and
15:31 - I'll do my best to answer those and if
15:33 - you enjoy these tutorials and would like
15:35 - to support them
15:36 - there are several ways you can do that
15:37 - the easiest ways to simply LIKE the
15:38 - video and give it a thumbs up and also
15:40 - it's a huge help to shared these videos
15:41 - with anyone who you think would find
15:43 - them useful and if you have the means
15:44 - you can contribute through patreon and
15:46 - there's a link to that page in the
15:47 - description section below be sure to
15:48 - subscribe for future videos and thank
15:50 - you all for watching
16:01 - you

Cleaned transcript:

hey there how's it going everybody so I wanted to do a quick followup video to my last video on a five common Python mistakes and explain one of those mistakes and a bit more detail so one of the things that I talked about in that video was mutable default arguments and the issues that you can run into when using those and it seems like there were still a lot of people confused by how those work and after going back and watching that video again I realized that I could have added in some extra details that would have made that a lot easier to understand so I wanted to make a quick followup video and try to make sure that that's a bit more clear as to what's going on there so I have my example from that last video open and in case you missed that video let me go over the problem one more time so we have a function here called add employee so let me explain what this function is meant to do so it takes a single employee as its first argument and also a list of employees here called employee lists and then it's simply going to append this appoint employee that we pass in to that list and then print out that employee list so we can see here that the employee list has a default argument set to an empty list and an empty list is a mutable data type so what we want to happen here is if we don't pass in an employee list to the function then it should just create a new one from scratch for us but let's actually see what this does so I have an existing list of employees down here so let me add a new employee and I'm going to use that function to add an employee to that list so I'll just add an employee of Korie I'm going to pass in that existing list that we want to append to and now it should print out that employee list so if I run that then we can see that that works fine our employee was added to that employee list but now let's add a couple of employees without providing an existing list so I will add Korie here and I'll also add an employee of John so if I save that and run it then what we're going to expect happens here is that since we're not passing in a default or a list here it's going to use the default of an empty list and just add that one employee to that empty list and the second time through we would expect that John will also get added to an empty list since that's the default and we didn't provide an existing list here but if I save that and run it then we can see that it seems like it used that same list twice and it added John on here to this list that was created here which is kind of strange and if we keep doing this then it's just going to keep adding to that list so that's a bit weird because we expect it to be setting this to an empty list each time we run the function so what's going on here is that in Python default arguments are evaluated once at the time it creates the function so it's not actually creating a new list each time we run the function now you won't notice this with immutable types like strings and things like that but with mutable data types like a list it's going to use that same list that it created when the function was defined so in the last video that's about as much detail as I went into I then showed that in order to fix the problem we would just need to set the default argument to none and then set the empty list inside the function so let me do that again but this time I'm going to create that function separately so that we can compare these so I'm just going to copy this function here and I'm going to create a new one and I'm going to call this add employee fixed and to in order to fix this function like I was saying we can just set the default argument to none whoops that's none and then inside here I will say if the employee list is none then we want to set employee list equal to an empty list so again in the original video that's about as much detail as I went into but there were still some people confused by this I had a few people who commented who said well if the default arguments are only set once when the function is created then how is the Employee List set to none each time we run the function so here's where I feel like I failed to provide a proper explanation so I never said that the default arguments were only set one time when the function is created I said that the default arguments were only evaluated one time each time the function is created so to illustrate this more clearly we can look at a magic method on our function that holds the default arguments and I think that's going to make things a lot more clear as to what's going on here so first let me show this on our original function up here so I'm going to copy our output here and paste it in and let me actually just comment those out and I'm gonna comment these out now for now as well so right underneath this function here I'm going to print out add employee and this has a magic method here called defaults so and this isn't actually a method sorry it is an attribute so I don't want to put parentheses there to run it so if I save this and I run it then these are the defaults that were created for this function and this is what only it gets evaluated once so we can see that this has a default of an empty list but a list is mutable so since this was only created once and set as a default here we can actually add to this list and each time we run the function if we don't provide anything for our employee list then it's going to set it equal to this default value here but let me show you what happens when we add an employee so let me add an employee and then I'll print out that default again so if I save this and I run it then we can see that the first time through it evaluated that empty list once so it says okay I have a default value here that is an empty list then we added this employee and it appended it to that default list and then we're printing the list here so we have a list of one person and now when we print those defaults afterwards that original list that it created now has a value it has a value of Corre so it's no longer empty because it only creates that empty list that one time and now we're mutating that list since this are mutable so now every time through if I look at this and I keep adding employees then every time through it started out as empty then we added Cori and now Cori is that default list then we added John and now we have Cori and John as that default list so that's why that keeps getting modified each time we run that function so now let me show you this with our fixed version where we set this equal to none so right underneath here I'm going to print out and I'm just gonna get rid of this list here I don't need that anymore so now I'm just gonna print out add employee fixed dot defaults and let's look at this so now when I run this we can see that we have a default value of none so that got evaluated once but just because it got evaluated once doesn't mean that it doesn't get set to that value each time we run the function if an argument isn't supplied it'll still set each time through equal to that default value but it's only evaluated one time and if this still doesn't make sense then I think it'll really knock at home once we look at the date/time example down here at the bottom but for now let's just stick with this example so now I'm gonna uncomment out adding one employee here and then I'm going to print out the defaults after we add that employee let me make this a little smaller here so that we can see a little bit more of the code here so now I'm gonna save this and run it and we can see that the first time through it evaluated this statement one time of employee the default of Employee List is equal to none so that was our default and we can see that here so then we add an employee and it came up here and it said okay so we don't have an employee list that we want to append to so this is equal to none so by default it's is that equal to none then we come in here in the function and it says okay if employee list is equal to none which it is because that's our default then just create a new empty list and then we append to that list and print out those employees so we printed out our one employee that was added to this empty list here and now when we print out the defaults again afterwards that default is still equal to none because it's it even though it was evaluated one time that's not mutable so that's not getting changed each time through like our list was getting changed each time through so we can come in here and when we're adding more and more employees so I can add John and save that and run it whoops and it looks like that's a mistake but it's not it's because I'm using add employee instead of add employee fixed here so let me put in adam ploy ii fix there so now when we run this now we can see that it's not appending to that list every time because the since this is set to none as the default it is still setting employee list to that default value every time we run the function but the difference between our fixed function and our other function was that when it sets it to none none is not being modified each time through but this mutable default argument that's the reason that these are a problem that was getting modified each time through so when I say that those default arguments are evaluated one time every when the function is created I don't mean that it only sets that value one time this is still getting set to this list each time we don't provide a list and this is still getting set to none each time we don't provide the Employee List but it's just the initial values is what gets evaluated once so I really think this point will be knocked home once we look at this date time example down here so let me show you this example here and I showed this in the original video as well so we have a function here called display time and it takes in time as an argument and then it's just going to print that out in a special format now if we don't provide a time then this has a default argument of date/time dot now now this isn't exactly the same as mutable default arguments like we are talking about before but we can still see why this would be a problem if we think about it because this gets evaluated one time and gets set to those defaults so if you didn't know that then what you might expect to happen here is each time we run this function and we don't provide a date then we would think that it would just use this default value here of date/time now and that would be executed each time we run at the function so down here I'm running display time three different times but I'm sleeping a second between each time I call that function so we might expect that since it's using now that it would increment by a second each time through but if I run this then we can see that it does wait a second each time through but it's not incrementing by a second so it's just printing out the same time over and over so why is it doing this the reason it's doing this let me print out display time and then I will print out those defaults oops and that's a magic or a dunder attribute there so I want to be sure I have those and now let me actually I'll keep those in as well so if I run this now where I'm printing out those defaults if I run that then we can see that the default value it executed this date/time dot now and set it here in our defaults so this is what's going to get this is the default value that it's going to be set to every time we run the function so and we can see here that it's 10 seconds into the minute and that's what gets run every time we run display time it gets set there in even though we're sleeping it's still the same default value here so that was evaluated once and now that is our default value it's not being set to the actual dot now each time the function is executed it's being set to this fault here so that's probably not what you would expect to happen if you didn't know about this so again the fix for this like we saw like I showed in the last video in the common mistakes video is to just set that equal to none and now we'll say if the time to print is none then we want to set the time to print equal to date/time dot now whoops sorry date time dot now so now when we run this I can see here that our default value is equal to none so it's not evaluating that date time dot now that one time when we create the function so it comes in here and it says okay I'm running display time they didn't provide me a time to print out so I'm gonna set this equal to none so if time to print is none which it is each time through then we want the time to print to be equal to date/time dot now now this does get executed each time we run the function because it's coming in here and running this code every time we run the function so now we can see that our seconds are being updated like we would expect because it's sleeping for one second in between those function calls okay so now let me close this and just scroll up here a little bit okay so that's all I wanted to show in this video just a quick little update to that last video I put out I hope that this was a lot more clear this time around when I rode this default value here and how that gets evaluated once but the general confusion seemed to be that people were wondering like okay well if its evaluated once they seem to think that it meant that it was only set one time and that it didn't set these default values each time you run the function it does but if you use something that is executed or a mutable default argument then that's where you run into problems like we saw in this video so I hope that this video cleared up any confusion that may be lingering after that last video where I didn't go into as much detail but if you do have any further questions then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them there are several ways you can do that the easiest ways to simply LIKE the video and give it a thumbs up and also it's a huge help to shared these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
