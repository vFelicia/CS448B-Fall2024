With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're just going to go over a
00:02 - quick tip and discuss a question that I
00:04 - get from time to time so what we're
00:06 - going to be looking at is the difference
00:08 - between the double equals and the is
00:11 - keyword when doing comparisons so the
00:14 - difference between these is that the
00:16 - double equals checks for equality checks
00:19 - if values are equal and the is keyword
00:22 - checks their identity which means it's
00:25 - going to check if the values are
00:26 - identical in terms of being the same
00:28 - object in memory so first let me give an
00:31 - example using real-world objects to try
00:33 - to explain this concept and then we'll
00:36 - take a look at some code examples to
00:37 - solidify those points so let's say that
00:41 - I wanted to compare soft drinks at a
00:43 - party so let's pretend that my brother
00:46 - and I both have a drink so he has a can
00:49 - of coke and I have a can of Pepsi
00:54 - so let me write these down here now try
00:56 - to think of these as actual objects in
00:58 - the real world and not Python strings
01:00 - for the moment just so we can
01:02 - conceptualize this so if he had a can of
01:04 - coke and I had a can of Pepsi if we
01:07 - compared those for equality using the
01:09 - double equals comparison then those
01:12 - wouldn't be equal because he has Coke
01:14 - and I have a Pepsi those aren't the same
01:16 - but now let's say that my brother and I
01:19 - both have cans of Pepsi so if we
01:23 - compared those using the double equals
01:25 - comparison then we could consider those
01:28 - equal since they're both cans of Pepsi
01:30 - and have the same ingredients and things
01:32 - like that but ultimately equality can be
01:35 - a little subjective it just depends on
01:37 - the objects that you are comparing and
01:39 - kind of what the developer considers
01:42 - equal so for example if you know maybe
01:45 - it's good enough if these are the same
01:47 - types of soft drinks that we could
01:49 - consider those equal but maybe you know
01:52 - just depending on how we set up our
01:54 - program these would only be equal if
01:56 - they were both Pepsi and they were both
01:58 - in blue cups or something like that so
02:01 - equality can be a little subjective and
02:03 - we'll take another look at an example of
02:06 - this once we actually look at some code
02:08 - okay but now let's see if we were to
02:11 - compare our drinks using the
02:13 - keyword instead then this wouldn't be
02:16 - true because the is keyword checks if
02:19 - they are actually the same object so in
02:21 - this example we have two different cans
02:24 - of Pepsi and even though we could
02:26 - consider those equal since they're the
02:28 - same type of drink there's still
02:30 - different objects so for example if I
02:33 - was to put a lemon in my drink then my
02:36 - brother's drink would still stay the
02:37 - same it wouldn't have a lemon in it now
02:39 - I could change that real-world example
02:41 - and instead say that my brother and I
02:43 - are going to share the same cane of
02:45 - Pepsi so we can describe that in
02:47 - multiple ways so this would be like
02:49 - having multiple variables that point to
02:52 - the same object so I could say you know
02:55 - Cory's drink is a can of Pepsi and I
02:58 - could also say that my brother's drink
03:00 - is that same can of Pepsi so now if we
03:03 - were to check if me and my brother's
03:05 - drinks for equality using the double
03:08 - equals comparison then that would be
03:10 - true because they're the same object but
03:12 - if we compared the drinks using the is
03:14 - keyword then that would also be true
03:17 - because we're sharing that exact same
03:19 - object and since we're sharing that
03:21 - single can of Pepsi then if I were to
03:24 - put a lemon in my drink then my brother
03:27 - would also have a lemon in his so that's
03:29 - a quick overview of the difference using
03:31 - a real-world example but now let's see
03:34 - what this looks like in code and it'll
03:35 - probably make more sense and if that
03:38 - example didn't make sense to you then
03:39 - this should clear it up so let me create
03:41 - two different lists here so I'm going to
03:43 - create l1 and I'm just going to set this
03:45 - equal to one two three four five and
03:47 - then I'll also create an l2 but I will
03:51 - take out a value here so just one two
03:54 - four five and now I'm going to say if
03:56 - oops and I didn't call that l2 so let me
03:58 - call that l2 so now let me say if l2
04:01 - equals equals or l1 equals equals l2
04:04 - then I will just print true and then
04:09 - else I will print false so right now
04:13 - these lists have different values so
04:15 - we're not going to expect these to be
04:17 - equal so when if I run this then we can
04:21 - see that we get false because those have
04:23 - different values but now let me set
04:25 - these lists to have the same
04:26 - values and see what they get so now they
04:29 - both have one two three four five one
04:31 - two three four five so now if I run this
04:33 - then we can see that it prints out true
04:36 - that the lists are equal but values can
04:39 - be considered equal without actually
04:41 - being the same object in memory just
04:43 - like in the example where I said our two
04:45 - camps of Pepsi could be considered equal
04:47 - because they contain the same contents
04:49 - but even if they're equal there's still
04:53 - two different objects but if we do want
04:55 - to check if they're the same object in
04:57 - memory then that's when we use the is
04:59 - keyword so it checks the memory
05:01 - addresses of the objects and it tells us
05:04 - if those are the same so if I can change
05:06 - if I change my conditional here to B if
05:09 - l1 is l2 if I run that then we can see
05:15 - that that is false but now let me set my
05:18 - second list equal to the first one so if
05:22 - I say L 2 is equal to L 1 now the second
05:27 - list is going to be equal to the exact
05:29 - same list object in memory as our first
05:32 - list so now if I run this then we can
05:35 - see that now that prints out true now
05:38 - since list objects are mutable and these
05:40 - are equal to the same list object and
05:42 - memory it means that if we change one
05:44 - then it will also change the other so
05:47 - let me do that and see if we can see how
05:51 - that looks so I'm going to comment out
05:53 - our if statement here and I'm just gonna
05:56 - say l1 I'm gonna set the first value of
06:00 - l1 instead of 1 I'm going to set that
06:03 - equal to 6 and now I'm going to print
06:06 - out both l1 and printout l2 so if I run
06:12 - that now we can see that when we change
06:14 - that value of l1
06:16 - it also changed the first value of l2 as
06:20 - well because those are now equal to the
06:23 - same object in memory now the reason
06:25 - that does this is because lists are
06:26 - mutable if you'd like to learn more
06:28 - about mutable and immutable objects then
06:30 - I'll leave a link to my video
06:31 - specifically on that subject in the
06:34 - description section below if anyone is
06:36 - interested so like I was saying earlier
06:38 - the is keyword compares the objects
06:41 - memory locations to see if it's pointing
06:43 - to the same object so we can actually
06:46 - see an object's memory address by
06:48 - passing it in to the ID function so I'm
06:51 - just going to take this line out here
06:53 - and I'm also going to remove this print
06:56 - statement I'll or this conditional I
06:57 - don't think I'm using that anymore
07:00 - so now let me print out the memory
07:03 - locations by passing these into the ID
07:06 - function and we are printing that out so
07:08 - if I run this then that prints out the
07:12 - objects memory address and in this case
07:14 - they're the same so really what the is
07:17 - keyword is doing in the background is
07:20 - checking if the memory addresses are
07:23 - equal so we could write that using a
07:25 - double equals as well so instead of
07:28 - using the is keyword we could say if and
07:31 - I probably shouldn't have deleted my
07:33 - conditional because I am using it using
07:35 - it again actually I won't I'll just
07:37 - print this out so I'm just going to
07:39 - print out I'm gonna say ID of l1 is
07:43 - equal equal to the ID of l2 so if I save
07:50 - that and run it then we can see that
07:52 - that prints out true that the ID of l1
07:55 - was equal to the ID of l2 so this here
08:00 - is basically what that is keyword is
08:03 - doing in the background okay
08:05 - so I hope that that made sense okay so I
08:07 - think that is going to do it for this
08:08 - video I hope that that cleared up the
08:10 - difference between the double equals
08:11 - comparison and using the is keyword but
08:15 - if anyone has any questions about what
08:16 - we covered in this video then feel free
08:18 - to ask in the comment section below and
08:19 - I'll do my best to answer those and if
08:21 - you enjoyed these tutorials and would
08:22 - like to support them then there are
08:23 - several ways you can do that the easiest
08:25 - ways to simply like the video and give
08:26 - it a thumbs up and also it's a huge help
08:28 - to share these videos with anyone who
08:29 - you think would find them useful
08:30 - and if you have the means you can
08:32 - contribute through patreon and there's a
08:33 - link to that page in a description
08:34 - section below be sure to subscribe for
08:36 - future videos and thank you all for
08:38 - watching
08:40 - you
08:49 - you

Cleaned transcript:

hey there how's it going everybody in this video we're just going to go over a quick tip and discuss a question that I get from time to time so what we're going to be looking at is the difference between the double equals and the is keyword when doing comparisons so the difference between these is that the double equals checks for equality checks if values are equal and the is keyword checks their identity which means it's going to check if the values are identical in terms of being the same object in memory so first let me give an example using realworld objects to try to explain this concept and then we'll take a look at some code examples to solidify those points so let's say that I wanted to compare soft drinks at a party so let's pretend that my brother and I both have a drink so he has a can of coke and I have a can of Pepsi so let me write these down here now try to think of these as actual objects in the real world and not Python strings for the moment just so we can conceptualize this so if he had a can of coke and I had a can of Pepsi if we compared those for equality using the double equals comparison then those wouldn't be equal because he has Coke and I have a Pepsi those aren't the same but now let's say that my brother and I both have cans of Pepsi so if we compared those using the double equals comparison then we could consider those equal since they're both cans of Pepsi and have the same ingredients and things like that but ultimately equality can be a little subjective it just depends on the objects that you are comparing and kind of what the developer considers equal so for example if you know maybe it's good enough if these are the same types of soft drinks that we could consider those equal but maybe you know just depending on how we set up our program these would only be equal if they were both Pepsi and they were both in blue cups or something like that so equality can be a little subjective and we'll take another look at an example of this once we actually look at some code okay but now let's see if we were to compare our drinks using the keyword instead then this wouldn't be true because the is keyword checks if they are actually the same object so in this example we have two different cans of Pepsi and even though we could consider those equal since they're the same type of drink there's still different objects so for example if I was to put a lemon in my drink then my brother's drink would still stay the same it wouldn't have a lemon in it now I could change that realworld example and instead say that my brother and I are going to share the same cane of Pepsi so we can describe that in multiple ways so this would be like having multiple variables that point to the same object so I could say you know Cory's drink is a can of Pepsi and I could also say that my brother's drink is that same can of Pepsi so now if we were to check if me and my brother's drinks for equality using the double equals comparison then that would be true because they're the same object but if we compared the drinks using the is keyword then that would also be true because we're sharing that exact same object and since we're sharing that single can of Pepsi then if I were to put a lemon in my drink then my brother would also have a lemon in his so that's a quick overview of the difference using a realworld example but now let's see what this looks like in code and it'll probably make more sense and if that example didn't make sense to you then this should clear it up so let me create two different lists here so I'm going to create l1 and I'm just going to set this equal to one two three four five and then I'll also create an l2 but I will take out a value here so just one two four five and now I'm going to say if oops and I didn't call that l2 so let me call that l2 so now let me say if l2 equals equals or l1 equals equals l2 then I will just print true and then else I will print false so right now these lists have different values so we're not going to expect these to be equal so when if I run this then we can see that we get false because those have different values but now let me set these lists to have the same values and see what they get so now they both have one two three four five one two three four five so now if I run this then we can see that it prints out true that the lists are equal but values can be considered equal without actually being the same object in memory just like in the example where I said our two camps of Pepsi could be considered equal because they contain the same contents but even if they're equal there's still two different objects but if we do want to check if they're the same object in memory then that's when we use the is keyword so it checks the memory addresses of the objects and it tells us if those are the same so if I can change if I change my conditional here to B if l1 is l2 if I run that then we can see that that is false but now let me set my second list equal to the first one so if I say L 2 is equal to L 1 now the second list is going to be equal to the exact same list object in memory as our first list so now if I run this then we can see that now that prints out true now since list objects are mutable and these are equal to the same list object and memory it means that if we change one then it will also change the other so let me do that and see if we can see how that looks so I'm going to comment out our if statement here and I'm just gonna say l1 I'm gonna set the first value of l1 instead of 1 I'm going to set that equal to 6 and now I'm going to print out both l1 and printout l2 so if I run that now we can see that when we change that value of l1 it also changed the first value of l2 as well because those are now equal to the same object in memory now the reason that does this is because lists are mutable if you'd like to learn more about mutable and immutable objects then I'll leave a link to my video specifically on that subject in the description section below if anyone is interested so like I was saying earlier the is keyword compares the objects memory locations to see if it's pointing to the same object so we can actually see an object's memory address by passing it in to the ID function so I'm just going to take this line out here and I'm also going to remove this print statement I'll or this conditional I don't think I'm using that anymore so now let me print out the memory locations by passing these into the ID function and we are printing that out so if I run this then that prints out the objects memory address and in this case they're the same so really what the is keyword is doing in the background is checking if the memory addresses are equal so we could write that using a double equals as well so instead of using the is keyword we could say if and I probably shouldn't have deleted my conditional because I am using it using it again actually I won't I'll just print this out so I'm just going to print out I'm gonna say ID of l1 is equal equal to the ID of l2 so if I save that and run it then we can see that that prints out true that the ID of l1 was equal to the ID of l2 so this here is basically what that is keyword is doing in the background okay so I hope that that made sense okay so I think that is going to do it for this video I hope that that cleared up the difference between the double equals comparison and using the is keyword but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoyed these tutorials and would like to support them then there are several ways you can do that the easiest ways to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in a description section below be sure to subscribe for future videos and thank you all for watching you you
