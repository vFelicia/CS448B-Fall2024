With timestamps:

00:00 - hey everybody how's it going in this
00:01 - video we'll be learning how to work with
00:03 - dates within Python now it's extremely
00:05 - important to know how to work with dates
00:07 - because you're going to be using these
00:08 - and just about every type of application
00:10 - that you're going to write and dates can
00:12 - sometimes be overwhelming because
00:13 - there's so much to think about so for
00:15 - example in Python we have dates times
00:18 - eight times time zones time deltas and
00:22 - it's not really obvious when we should
00:24 - use what so let's go ahead and dive in
00:26 - and look at some examples of this to get
00:28 - more comfortable so the main module for
00:30 - working with dates in Python is the date
00:33 - time module and we can import that just
00:35 - by saying import date time now the first
00:38 - thing to talk about when working with
00:39 - dates and times is understanding the
00:42 - difference between naive and aware date
00:44 - times and you'll hear these two terms a
00:46 - lot now naive dates and times don't have
00:49 - enough information to determine things
00:51 - like timezone or daylight savings times
00:53 - but they're easier to work with if you
00:55 - don't need that level of detail but if
00:57 - you do need that level of detail to
00:58 - avoid confusion then you need to use
01:00 - aware dates and times now these do have
01:03 - enough information to determine their
01:05 - timezone and keep track of daylight
01:07 - savings time now since naive date times
01:09 - are the easiest to work with we'll start
01:11 - off by looking at those first so first
01:14 - let's look at date time dot date so with
01:17 - a normal date we're going to be working
01:20 - with a year month and day now there are
01:23 - a couple of different ways that we can
01:24 - create a date but to create a date right
01:28 - now I'm just going to do a date time
01:30 - date and I'm going to pass in a year a
01:34 - month and a day so now let's go ahead
01:37 - and print this out so we can see what
01:40 - this looks like so you can see that when
01:41 - we printed that out that it gave us a
01:43 - date of 2016 Oh 724 now when you're
01:48 - creating these dates be sure to just
01:50 - pass in regular integers as the days and
01:53 - months with no leading 0 because if we
01:55 - were to pass in 0 7 here and run that
01:59 - you can see that this gave us a syntax
02:01 - error and I make this mistake a lot
02:03 - myself because when I write down baits
02:05 - I'm used to adding in that leading 0 but
02:08 - that's not the correct way to pass it in
02:10 - so just do for single digits just do
02:13 - that
02:13 - single-digit and you can see that that
02:15 - works now we do have other ways of
02:17 - creating dates also so if I wanted to
02:20 - get today's local date then I'm just
02:23 - going to call this today and instead of
02:26 - doing this constructor here I'm just
02:29 - going to do date dot today so now I'm
02:32 - just going to go ahead and grab this
02:34 - variable name here and let's go ahead
02:36 - and print that out so when I print that
02:38 - out you can see that we got the current
02:39 - local date now we also have some methods
02:42 - available to get more information about
02:44 - our dates so if I wanted to grab just
02:46 - the year month or day then so for
02:49 - example if I wanted to grab just the
02:51 - year I could say today dot year and if I
02:53 - wanted to grab just the day then I could
02:56 - do day now we can also get the day of
02:59 - the week and there's actually two
03:01 - different ways that we can use this so
03:03 - we can either use weekday or we can use
03:07 - I so weekday so if I go ahead and print
03:11 - this out you can see that for 1 we get a
03:14 - 1 and for the other one we get a 2 so
03:16 - the only difference here is that for the
03:19 - weekday Monday is 0 and sunday is 6 and
03:25 - for the icer weekday Monday is 1 and
03:31 - sunday is 7 so the current day where I
03:34 - am now it is Tuesday so you can see that
03:38 - for the weekday we got a 1 which if
03:42 - Monday is 0 then Tuesday that would be
03:44 - correct
03:44 - and for the I so weekday Monday is 1 so
03:48 - Tuesday would be 2 so that's correct
03:50 - also ok so now let's take a look at time
03:52 - deltas now time deltas are simply the
03:55 - difference between two dates or times
03:57 - and they're extremely useful when we
03:59 - want to do operations on our dates or
04:02 - times so for example let me create a
04:04 - time Delta one week away which would be
04:07 - seven days so I'm going to do a time
04:10 - Delta is equal to date time dot time
04:14 - Delta and I'm just going to pass in a
04:16 - duration here of days equal to seven
04:20 - so now I'm going to go ahead and just
04:22 - get rid of these two print statements
04:24 - here so now that I have this duration of
04:27 - seven days I can use this to do some
04:29 - calculations so let's say that I wanted
04:31 - to print out what the date will be one
04:34 - week from now so what I can do here is I
04:37 - can just do a print and I'm going to
04:39 - print out today Plus this time Delta
04:43 - which would be seven days so if I run
04:46 - that then you can see that it prints out
04:47 - what the date will be seven days from
04:50 - now now you can also subtract time
04:52 - Delta's also so if I wanted to know what
04:55 - the date was one week ago then instead
04:57 - of adding on seven days I can subtract
05:00 - seven days and if I print that out then
05:02 - you can see that it prints out what the
05:03 - date was one week ago
05:04 - okay so right now we are adding and
05:08 - subtracting a time Delta from a date and
05:11 - getting another date as the result now
05:14 - if we instead add or subtract a date for
05:18 - my date then we'll get a time Delta as
05:20 - the result and so that's kind of
05:22 - important to see the difference there so
05:24 - if I make a comment here so that we can
05:26 - better visualize this so let me do time
05:31 - Delta and let me also make another
05:34 - comment here but change a few things
05:36 - around okay so this comment will make
05:41 - what I just said here a little bit
05:43 - easier to visualize so if we add or
05:46 - subtract a time Delta from a date then
05:50 - we get another date as a result and if
05:52 - we add or subtract another date from a
05:56 - date then we'll get a time Delta as a
05:59 - result so let's go ahead and take a look
06:01 - at an example of this so let's figure
06:04 - out how many days there are until my
06:07 - birthday this year
06:08 - so to calculate that we're going to have
06:10 - to do is subtract the current date from
06:13 - the date of my birthday this year so I'm
06:16 - going to create a new date here called
06:18 - d-day I want to set that equal to date
06:21 - time dot date and it's going to be the
06:25 - year 2016 and my birthday is on 924 so
06:30 - now I'm going to create another variable
06:31 - here and I'm kind of going to call this
06:33 - till bday now this is going to be a time
06:36 - delta once we run this calculation and
06:39 - I'm going to say till bday
06:41 - is equal to my birthday - the current
06:45 - day so now if I print out this till bday
06:51 - and run that you can see that it has 60
06:54 - days as the total duration between those
06:57 - two dates and if you want to get just
07:00 - the days then you can do the time Delta
07:04 - dot days and print that you can see that
07:06 - that's equal to 60 now you can also use
07:08 - the total seconds here so I'm going to
07:12 - do total seconds and that's a method to
07:15 - get the number of seconds between these
07:17 - two dates so if I print that out oh and
07:20 - it looks like I forgot to do total
07:22 - seconds so if I print that out then you
07:25 - can see I have a little more than 5
07:28 - million seconds to go until my birthday
07:31 - ok so now that we have looked at this
07:33 - date time dot date right here now let's
07:36 - look at date time dot time and I'm just
07:40 - going to go ahead and set this variable
07:41 - equal to T okay so when we were working
07:44 - with date time dot date we were only
07:47 - working with year month and day and with
07:50 - date time dot time we're going to be
07:52 - working with hours minutes seconds and
07:55 - microseconds so this isn't going to
07:57 - include the year the month or the day
08:00 - now by default this doesn't have
08:02 - timezone information so this is still
08:04 - naive but we can specify a time zone
08:07 - using TZ info if we'd liked and we'll
08:10 - look at some time zones in just a second
08:12 - but for now we're going to create a new
08:14 - time so I can create a new local time a
08:18 - saying date time dot time and I'm going
08:21 - to pass in hours minutes seconds and
08:26 - microseconds so now I'm just going to go
08:28 - ahead and print this out so we can see
08:30 - what this looks like so you can see that
08:32 - it printed out here in a nice format and
08:34 - just like with the date we can access
08:37 - these attributes individually so if I
08:39 - wanted to just print out the hour then I
08:42 - can just print out the hour now to be
08:44 - honest I hardly ever use date time time
08:46 - because most of the time when I need the
08:49 - time of day I also need the date and
08:52 - that's where date time that date time
08:54 - comes
08:54 - so what we had here is we had date time
08:58 - dot date and that gave us the Year month
09:01 - and day without the hours minutes
09:04 - seconds and microseconds and then we had
09:07 - date time dot time and that gave us the
09:10 - hours minutes and seconds and
09:12 - microseconds without the Year month and
09:15 - the day and the date time dot date/time
09:20 - that's going to give us access to
09:21 - everything so for example if I create a
09:25 - new date time here then I could pass in
09:28 - all of these so I'll pass in the year of
09:30 - 2016
09:32 - 7:26 then I'll just do 12 for the hours
09:36 - 30 for the minutes 45 for the seconds
09:40 - and another hundred thousand for the
09:42 - milliseconds and I'm going to go ahead
09:43 - and call this DT for date time let's go
09:47 - ahead and print this out so now if I
09:50 - print this out you can see that it gave
09:51 - us back the entire date and the time so
09:54 - we have the whole date right here and
09:57 - then we have the time here now date
09:59 - times are great because we have access
10:01 - to just about anything we would need so
10:03 - I can grab the date without the time
10:06 - just by saying DT dot date here and that
10:10 - is a method and vice-versa I could grab
10:12 - the time just by doing date time dot
10:15 - time and if I run that you can see that
10:17 - we just get the time and on top of that
10:19 - we can still grab each individual
10:21 - attribute like we did before so let's
10:24 - say that I wanted just the year then I
10:26 - can just go ahead and print out the year
10:28 - and just like we did with the date we
10:31 - can also add and subtract time delta
10:33 - duration so let me go ahead and recreate
10:36 - that time delta and the way that we did
10:38 - that was date time dot time Delta and
10:41 - I'm also just going to do the days of
10:44 - seven again okay so now instead of
10:48 - printing out just this date time now I'm
10:51 - going to add on this time Delta and if I
10:54 - print that out you can see that that
10:56 - prints out a week into the future and
10:58 - now with this day time I can also use a
11:01 - duration of hours or minutes or whatever
11:03 - so if I was to change this duration
11:05 - instead of days of sub
11:07 - let's say I'll do hours and I'll do 12
11:11 - hours into the future and if I print
11:13 - that out you can see that my time was
11:15 - set to 12:30 here so by adding 12 hours
11:19 - that carried us over into the next day
11:21 - and this is 30 minutes past midnight
11:23 - okay so now let's look at some of the
11:26 - alternative constructors that come with
11:29 - our date time so three of these that are
11:31 - pretty useful that a lot of people get
11:32 - confused about our dot today and I'm
11:36 - just going to go ahead and copy these
11:38 - down three different times here and I'm
11:41 - going to call this DT dot today I'm
11:44 - going to call this one DT dot now and
11:47 - I'm going to call this one DT UTC now
11:50 - and I'm going to do today and this one
11:53 - will be date time dot now and this one
11:56 - will be dot UTC now okay so now let me
12:00 - go ahead and print all of these out here
12:03 - before I describe what each individual
12:06 - one is so let me copy these here and
12:10 - print these out okay so you can see that
12:15 - the top two here are pretty similar and
12:17 - they would be exactly the same if they
12:19 - had been executed at the same time
12:21 - so these millisecond differences here
12:23 - are just due to the small amounts of
12:25 - time between when they were executed
12:26 - so if day time dot today and date time
12:29 - now look almost identical here then what
12:33 - is the difference between these so the
12:36 - difference is that dot today returns the
12:39 - current local date time with a timezone
12:42 - of none and dot now gives us the option
12:46 - to pass in a time zone so if you leave
12:48 - the time zone empty then these are
12:51 - similar now you might assume here that
12:53 - dot UTC now since it has UTC in the name
12:57 - of the method that this is a time zone
12:59 - aware date time and that's actually not
13:02 - true so this gives us the current UTC
13:05 - time but the TZ info is still set to
13:08 - none so nothing that we've done so far
13:10 - has given us time zone aware date times
13:13 - we have to explicitly set those so
13:16 - that's a good segue into looking at how
13:18 - to use time zones now there's a lot of
13:20 - different ways that we could look at
13:21 - using
13:21 - time zones but I think I'm going to go
13:23 - ahead and jump directly into showing you
13:25 - how to use PI T Z now PI TZ is a third
13:29 - party package that you have to install
13:30 - using pip now if you have never used the
13:33 - PIP package manager then you can watch
13:35 - my video on how to use that but if you
13:37 - already have it set up then you should
13:39 - be able to jump over to your terminal
13:41 - and just type in pip install and that is
13:44 - PI TZ
13:46 - now you might be wondering why I'm not
13:48 - showing you how to work with time zones
13:51 - using the standard library but even in
13:53 - the Python Doc's here they recommend
13:56 - using pi TZ so here's their
13:59 - justification for that they say that the
14:01 - standard library has timezone class for
14:03 - handling arbitrary fixed offsets from
14:05 - UTC and timezone UTC PI TZ library
14:10 - brings in this time zone database to
14:13 - Python and it's usage is recommended so
14:16 - we could use this time zone class to
14:18 - work with time zones but since pi TZ is
14:20 - pretty easy to use and since it's more
14:22 - useful we may as well go ahead and use
14:25 - that right off the bat so let's go ahead
14:27 - and go back here to our module and at
14:29 - the top now after you install that using
14:33 - pip now we're just going to import PI TZ
14:36 - so before we make any more date times
14:38 - here I'm just going to go ahead and
14:39 - clean up some of this and remove a
14:41 - couple of these functions and I'm just
14:43 - going to copy those out for now and
14:46 - let's go ahead and make a new date time
14:49 - now if you were to go out and read
14:51 - through the documentation for pi TZ then
14:53 - you'll see that it's recommended to
14:55 - always work with UTC when dealing with
14:57 - time zones and there's a lot of good
14:59 - reasons for that that I'm not going to
15:00 - go into detail about here so let's go
15:03 - ahead and create a time zone aware date
15:06 - time using UTC now to do this we can
15:10 - just do DT equals date/time dot
15:14 - date/time and now I can go ahead and
15:17 - plug in all those values so I'm going to
15:18 - do a year of 2016
15:21 - 7:26 12 for the hours 30 for the minutes
15:25 - 45 for the seconds and I'm going to go
15:28 - ahead and leave off the milliseconds
15:30 - this time and now to make this time zone
15:33 - aware we can just say TZ
15:35 - info equals PI T Z dot UTC so now let me
15:40 - go ahead and print out this date time
15:43 - and we can see what this looks like so
15:45 - now you can see that our date time has
15:47 - this plus zero zero on the end now this
15:52 - is the UTC offset now let's get the
15:55 - current UTC time that is also timezone
15:58 - aware so there are two ways that we can
16:01 - do this so remember we have dot now and
16:04 - we also have dot UTC now
16:07 - but first let's work with dot now so
16:11 - with daytime dot now we can pass in the
16:14 - timezone so this is instead of TZ info
16:17 - this is actually T Z equals same thing
16:20 - we'll do PI T Z dot UTC and let me go
16:24 - ahead and print that out so that you can
16:26 - see what that looks like
16:27 - date time now and so this is the current
16:30 - UTC time and you can see the
16:33 - milliseconds added on there and another
16:35 - way to do this what you might see people
16:36 - do on line is we also have this dot UTC
16:41 - now now this doesn't have the option of
16:44 - passing in the timezone but what we
16:47 - could do is do UTC now which creates a
16:50 - new date time and then we can do a dot
16:52 - replace on that TZ info and set that
16:57 - equal to pi T C dot UTC let's go ahead
17:02 - and print this out so you can see that
17:07 - both of these ways of getting the
17:09 - current UTC time that is times unaware
17:12 - these are both pretty much the same but
17:16 - I prefer to use this date time dot now
17:18 - with the timezone set because it's a
17:21 - little less typing and it's also
17:23 - slightly easier to read so I'm going to
17:25 - go ahead and remove that and I don't
17:27 - think I'm going to be using this date
17:29 - time here anymore so I'm going to go
17:30 - ahead and remove that as well ok so now
17:34 - we have the current UTC time and it's
17:36 - also timezone aware and I'm actually
17:38 - going to go ahead and call this UTC now
17:41 - so that it makes a little bit more sense
17:44 - so let's look at how we can convert this
17:47 - to a different time zone
17:49 - so I'm currently located close to Denver
17:52 - in the United States which is the
17:54 - Mountain Time Zone so if I wanted to
17:56 - convert this UTC time to my time zone
17:59 - and I could just say I'll call this DT
18:02 - Mountain and I'll say DT UTC now dot as
18:08 - time zone and now we can just pass in
18:11 - the time zone that we want and this is
18:13 - going to be PI T Z dot time zone and the
18:16 - time zone that I'm going to pass in here
18:19 - is us - mountain so now let me go ahead
18:23 - and print this out and we can see the
18:26 - difference between these two date times
18:28 - so you can see that if I print that out
18:30 - the time that it printed out for a
18:33 - current Mountain time if I look at my
18:36 - machine here 8:45 and that's pretty much
18:38 - what we have here and that also has the
18:41 - UTC offset set to negative six which is
18:45 - the difference between my local time and
18:47 - the UTC time now you might be wondering
18:49 - how I knew to type in US Mountain here
18:53 - for the PI TZ time zone so PI TZ has a
18:57 - large list of time zones for you to
18:59 - select from now if you want to look at
19:01 - all of them then you can print them all
19:03 - out by using a for loop so let's go
19:05 - ahead and do that so let's do for TZ in
19:09 - PI T Z and the list of those time zones
19:13 - is in a list called all time zones so
19:16 - within this for loop I'm just going to
19:18 - print out TZ and let me go ahead and
19:21 - comment out these other print statements
19:24 - for now let's go ahead and run that and
19:26 - bring this up a bit so you can see that
19:29 - we have a lot of time zones here but if
19:32 - I scroll up a bit then we can see the
19:33 - United States time zone and you know so
19:36 - here we have US eastern US Mountain
19:39 - Pacific and things like that so if you
19:42 - have an idea of what your time zone is
19:45 - then you can just go ahead and search
19:46 - through this pi TZ dot all time zones
19:50 - list and see specifically what you need
19:52 - to type in in order to get that set
19:54 - correctly ok so now I'm going to go
19:57 - ahead and take this out and uncomment
20:00 - out these print
20:02 - statements and reprint that okay so what
20:05 - we just did here is we took a time zone
20:08 - aware date time set to UTC and we
20:11 - converted that to mountain time but what
20:14 - if we have a naive date time and we want
20:17 - to make that naive date time time zone
20:19 - aware so for example let me go ahead and
20:21 - create a new local date time that
20:24 - doesn't have that time zone information
20:26 - and remember we can grab the local time
20:29 - with date time dot now and this isn't
20:32 - time zone aware right now because we
20:34 - didn't pass in the time zone so now if I
20:36 - go ahead and print out this local date
20:40 - time here then you can see that I get my
20:42 - local time but that it's not time zone
20:44 - aware so currently I have my local time
20:47 - but it doesn't have any time zone
20:49 - information so if I wanted to convert
20:51 - this to another time zone so let's say
20:53 - that I wanted to convert this to the
20:55 - United States eastern time zone so I
20:58 - couldn't just say date time east equals
21:01 - date time mountain thought as time zone
21:05 - like we did before so let me go ahead
21:07 - and try this so I'll do PI TZ that time
21:10 - zone and I will pass in that u.s.
21:13 - Eastern time zone now if I run this then
21:17 - I'm going to get an error and if I
21:19 - scroll up here it says that as time zone
21:22 - cannot be applied to a naive date time
21:25 - and that makes sense
21:26 - so in order for me to make my local
21:30 - naive date time time zone aware I have
21:33 - to run this time zone localized function
21:36 - so in order to do this first let me
21:38 - comment out that now to run this time
21:43 - zone localized function first let me
21:46 - grab the Mountain Time Zone because that
21:49 - is what my current local time is so I'm
21:51 - going to say PI T Z dot time zone and
21:54 - I'm going to pass in US mountain so now
21:58 - that I have that time zone I can run its
22:01 - localized method and pass in my naive
22:04 - date/time so I'm just going to set the
22:06 - result to this exact same variable name
22:09 - so I'm going to say DT Mountain is equal
22:13 - to Mountain Time Zone dot
22:16 - localize and now we pass in the date
22:19 - that we want to localize and that is my
22:22 - date time mountain so now if I print
22:24 - this out I'm going to comment out this
22:26 - for now I'm going to print this out and
22:28 - you can see that now this was a naive
22:31 - date time of my local time and then I
22:34 - ran localized using this mountain time
22:37 - zone and now what this date time it used
22:41 - to be naive and now it is times unaware
22:43 - so now let's try to run that same
22:44 - command that gave us an error earlier so
22:47 - if I try to now convert this over to
22:50 - this date time east then I can go ahead
22:54 - and print this out if I save that and
22:57 - run it now you can see that since our
22:59 - date time mountain is times unaware that
23:02 - it correctly set that time two hours
23:04 - ahead to the Eastern time zone okay so I
23:07 - know that this video is getting a little
23:09 - long but I'd like to show you all a
23:11 - couple more things here really quick so
23:13 - real quick I'm going to go ahead and set
23:15 - this back to my local date time that is
23:19 - times unaware and then I can get rid of
23:21 - all of this other information here for
23:24 - now just to clean this up a bit
23:26 - okay so I just want to show a couple
23:28 - different ways that you can display
23:30 - these date times so probably the best
23:32 - way to save these dates or pass them
23:34 - around for internal use would be the ISO
23:37 - format and to display these an ISO
23:39 - format it's just as easy as saying so
23:42 - will print this out will print out date
23:44 - time Mountain dot ISO format now if
23:49 - you're not familiar with that format
23:50 - then it can look a little strange but it
23:52 - is an international standard now if you
23:54 - want to print these date times out in a
23:56 - specific format then you can go to the
23:58 - Python documentation and look at the
24:01 - format codes to print these out in just
24:04 - about any way that you'd want so if I go
24:07 - down here and look at these codes then
24:09 - you can see that they have what the
24:11 - format code is and then the example so
24:14 - let's say that I wanted to print it out
24:16 - in the form July 26 2016 so to do that
24:23 - after looking at those format codes you
24:27 - can use this method called STR
24:30 - F time and then pass in the format code
24:35 - so the format code that I want is
24:37 - percent uppercase B which is the full
24:40 - month % lowercase D which is a two-digit
24:44 - day then I'm going to put in a comma and
24:46 - then a % uppercase Y which will be the
24:50 - full year so if I print that then you
24:52 - can see that it prints out July 26 2016
24:55 - now you don't have to memorize these
24:57 - I've never memorized these every time I
24:59 - want to print something out in a
25:00 - specific format I always go to the
25:02 - documentation and find the format codes
25:04 - that I want and then print them out that
25:06 - way now sometimes you have the opposite
25:09 - sometimes you have a string and you want
25:11 - to convert that to a date/time now you
25:13 - can do that using this date/time string
25:17 - P time method so let's go ahead and take
25:20 - a look at this so I'm going to do a
25:22 - date/time string here and I'm just going
25:25 - to copy the exact same date that we just
25:28 - print it out and I'm going to put this
25:30 - into a string format
25:32 - so this date/time string right now is
25:34 - currently just a string so I can do
25:36 - string operations on it but there's no
25:39 - way I could do any date/time operations
25:41 - on this so I have to convert this to a
25:43 - date/time if I want to do anything with
25:44 - it so if I wanted to convert this to a
25:46 - date/time and I can just say date/time
25:50 - dot date/time and then we're going to
25:53 - run this string P time STR P time and
25:58 - now what we pass in here is the string
26:02 - that we want to convert and now we have
26:04 - to tell Python what format that string
26:08 - is in and we just use the same format
26:10 - here so I'm going to go ahead and grab
26:12 - that and just paste it in so now I'm
26:14 - going to go up here and comment out that
26:17 - print statement and I'm just going to
26:19 - print out the state time that we just
26:21 - created from that string and if I print
26:23 - that out you can see that that string
26:25 - was successfully converted over to a
26:28 - date/time so just to make that more
26:30 - clear that was STR F time and that
26:35 - converts a date/time to a string and the
26:40 - STR P time that converts
26:44 - a string to a date-time okay so I think
26:48 - that it's going to do it for this video
26:49 - I hope that this video cleared up any
26:51 - confusion when working with dates and
26:53 - times in Python now I should mention
26:55 - that there is a popular Python package
26:58 - called arrow that is supposed to be an
27:00 - easier way to work with date times and
27:02 - maybe I'll try to do a video of that in
27:04 - the near future but I hope that knowing
27:06 - these basics of the built-in date/time
27:09 - module that will allow you to solve most
27:11 - the problems that you come up against
27:12 - but if you do have any questions about
27:14 - what we covered in this video then just
27:15 - feel free to ask in the comment section
27:17 - below and I'll do my best to answer
27:18 - those if you enjoy these tutorials I
27:20 - would like to support them then there
27:21 - are several ways you can do that the
27:23 - easiest way is to simply like the video
27:24 - and give it a thumbs up and also it's a
27:26 - huge help to share these videos with
27:27 - anyone who you think would find them
27:29 - useful and if you have the means you can
27:31 - contribute through patreon and there's a
27:32 - link to that page in the description
27:33 - section below be sure to subscribe for
27:36 - future videos and thank you all for
27:37 - watching

Cleaned transcript:

hey everybody how's it going in this video we'll be learning how to work with dates within Python now it's extremely important to know how to work with dates because you're going to be using these and just about every type of application that you're going to write and dates can sometimes be overwhelming because there's so much to think about so for example in Python we have dates times eight times time zones time deltas and it's not really obvious when we should use what so let's go ahead and dive in and look at some examples of this to get more comfortable so the main module for working with dates in Python is the date time module and we can import that just by saying import date time now the first thing to talk about when working with dates and times is understanding the difference between naive and aware date times and you'll hear these two terms a lot now naive dates and times don't have enough information to determine things like timezone or daylight savings times but they're easier to work with if you don't need that level of detail but if you do need that level of detail to avoid confusion then you need to use aware dates and times now these do have enough information to determine their timezone and keep track of daylight savings time now since naive date times are the easiest to work with we'll start off by looking at those first so first let's look at date time dot date so with a normal date we're going to be working with a year month and day now there are a couple of different ways that we can create a date but to create a date right now I'm just going to do a date time date and I'm going to pass in a year a month and a day so now let's go ahead and print this out so we can see what this looks like so you can see that when we printed that out that it gave us a date of 2016 Oh 724 now when you're creating these dates be sure to just pass in regular integers as the days and months with no leading 0 because if we were to pass in 0 7 here and run that you can see that this gave us a syntax error and I make this mistake a lot myself because when I write down baits I'm used to adding in that leading 0 but that's not the correct way to pass it in so just do for single digits just do that singledigit and you can see that that works now we do have other ways of creating dates also so if I wanted to get today's local date then I'm just going to call this today and instead of doing this constructor here I'm just going to do date dot today so now I'm just going to go ahead and grab this variable name here and let's go ahead and print that out so when I print that out you can see that we got the current local date now we also have some methods available to get more information about our dates so if I wanted to grab just the year month or day then so for example if I wanted to grab just the year I could say today dot year and if I wanted to grab just the day then I could do day now we can also get the day of the week and there's actually two different ways that we can use this so we can either use weekday or we can use I so weekday so if I go ahead and print this out you can see that for 1 we get a 1 and for the other one we get a 2 so the only difference here is that for the weekday Monday is 0 and sunday is 6 and for the icer weekday Monday is 1 and sunday is 7 so the current day where I am now it is Tuesday so you can see that for the weekday we got a 1 which if Monday is 0 then Tuesday that would be correct and for the I so weekday Monday is 1 so Tuesday would be 2 so that's correct also ok so now let's take a look at time deltas now time deltas are simply the difference between two dates or times and they're extremely useful when we want to do operations on our dates or times so for example let me create a time Delta one week away which would be seven days so I'm going to do a time Delta is equal to date time dot time Delta and I'm just going to pass in a duration here of days equal to seven so now I'm going to go ahead and just get rid of these two print statements here so now that I have this duration of seven days I can use this to do some calculations so let's say that I wanted to print out what the date will be one week from now so what I can do here is I can just do a print and I'm going to print out today Plus this time Delta which would be seven days so if I run that then you can see that it prints out what the date will be seven days from now now you can also subtract time Delta's also so if I wanted to know what the date was one week ago then instead of adding on seven days I can subtract seven days and if I print that out then you can see that it prints out what the date was one week ago okay so right now we are adding and subtracting a time Delta from a date and getting another date as the result now if we instead add or subtract a date for my date then we'll get a time Delta as the result and so that's kind of important to see the difference there so if I make a comment here so that we can better visualize this so let me do time Delta and let me also make another comment here but change a few things around okay so this comment will make what I just said here a little bit easier to visualize so if we add or subtract a time Delta from a date then we get another date as a result and if we add or subtract another date from a date then we'll get a time Delta as a result so let's go ahead and take a look at an example of this so let's figure out how many days there are until my birthday this year so to calculate that we're going to have to do is subtract the current date from the date of my birthday this year so I'm going to create a new date here called dday I want to set that equal to date time dot date and it's going to be the year 2016 and my birthday is on 924 so now I'm going to create another variable here and I'm kind of going to call this till bday now this is going to be a time delta once we run this calculation and I'm going to say till bday is equal to my birthday the current day so now if I print out this till bday and run that you can see that it has 60 days as the total duration between those two dates and if you want to get just the days then you can do the time Delta dot days and print that you can see that that's equal to 60 now you can also use the total seconds here so I'm going to do total seconds and that's a method to get the number of seconds between these two dates so if I print that out oh and it looks like I forgot to do total seconds so if I print that out then you can see I have a little more than 5 million seconds to go until my birthday ok so now that we have looked at this date time dot date right here now let's look at date time dot time and I'm just going to go ahead and set this variable equal to T okay so when we were working with date time dot date we were only working with year month and day and with date time dot time we're going to be working with hours minutes seconds and microseconds so this isn't going to include the year the month or the day now by default this doesn't have timezone information so this is still naive but we can specify a time zone using TZ info if we'd liked and we'll look at some time zones in just a second but for now we're going to create a new time so I can create a new local time a saying date time dot time and I'm going to pass in hours minutes seconds and microseconds so now I'm just going to go ahead and print this out so we can see what this looks like so you can see that it printed out here in a nice format and just like with the date we can access these attributes individually so if I wanted to just print out the hour then I can just print out the hour now to be honest I hardly ever use date time time because most of the time when I need the time of day I also need the date and that's where date time that date time comes so what we had here is we had date time dot date and that gave us the Year month and day without the hours minutes seconds and microseconds and then we had date time dot time and that gave us the hours minutes and seconds and microseconds without the Year month and the day and the date time dot date/time that's going to give us access to everything so for example if I create a new date time here then I could pass in all of these so I'll pass in the year of 2016 726 then I'll just do 12 for the hours 30 for the minutes 45 for the seconds and another hundred thousand for the milliseconds and I'm going to go ahead and call this DT for date time let's go ahead and print this out so now if I print this out you can see that it gave us back the entire date and the time so we have the whole date right here and then we have the time here now date times are great because we have access to just about anything we would need so I can grab the date without the time just by saying DT dot date here and that is a method and viceversa I could grab the time just by doing date time dot time and if I run that you can see that we just get the time and on top of that we can still grab each individual attribute like we did before so let's say that I wanted just the year then I can just go ahead and print out the year and just like we did with the date we can also add and subtract time delta duration so let me go ahead and recreate that time delta and the way that we did that was date time dot time Delta and I'm also just going to do the days of seven again okay so now instead of printing out just this date time now I'm going to add on this time Delta and if I print that out you can see that that prints out a week into the future and now with this day time I can also use a duration of hours or minutes or whatever so if I was to change this duration instead of days of sub let's say I'll do hours and I'll do 12 hours into the future and if I print that out you can see that my time was set to 1230 here so by adding 12 hours that carried us over into the next day and this is 30 minutes past midnight okay so now let's look at some of the alternative constructors that come with our date time so three of these that are pretty useful that a lot of people get confused about our dot today and I'm just going to go ahead and copy these down three different times here and I'm going to call this DT dot today I'm going to call this one DT dot now and I'm going to call this one DT UTC now and I'm going to do today and this one will be date time dot now and this one will be dot UTC now okay so now let me go ahead and print all of these out here before I describe what each individual one is so let me copy these here and print these out okay so you can see that the top two here are pretty similar and they would be exactly the same if they had been executed at the same time so these millisecond differences here are just due to the small amounts of time between when they were executed so if day time dot today and date time now look almost identical here then what is the difference between these so the difference is that dot today returns the current local date time with a timezone of none and dot now gives us the option to pass in a time zone so if you leave the time zone empty then these are similar now you might assume here that dot UTC now since it has UTC in the name of the method that this is a time zone aware date time and that's actually not true so this gives us the current UTC time but the TZ info is still set to none so nothing that we've done so far has given us time zone aware date times we have to explicitly set those so that's a good segue into looking at how to use time zones now there's a lot of different ways that we could look at using time zones but I think I'm going to go ahead and jump directly into showing you how to use PI T Z now PI TZ is a third party package that you have to install using pip now if you have never used the PIP package manager then you can watch my video on how to use that but if you already have it set up then you should be able to jump over to your terminal and just type in pip install and that is PI TZ now you might be wondering why I'm not showing you how to work with time zones using the standard library but even in the Python Doc's here they recommend using pi TZ so here's their justification for that they say that the standard library has timezone class for handling arbitrary fixed offsets from UTC and timezone UTC PI TZ library brings in this time zone database to Python and it's usage is recommended so we could use this time zone class to work with time zones but since pi TZ is pretty easy to use and since it's more useful we may as well go ahead and use that right off the bat so let's go ahead and go back here to our module and at the top now after you install that using pip now we're just going to import PI TZ so before we make any more date times here I'm just going to go ahead and clean up some of this and remove a couple of these functions and I'm just going to copy those out for now and let's go ahead and make a new date time now if you were to go out and read through the documentation for pi TZ then you'll see that it's recommended to always work with UTC when dealing with time zones and there's a lot of good reasons for that that I'm not going to go into detail about here so let's go ahead and create a time zone aware date time using UTC now to do this we can just do DT equals date/time dot date/time and now I can go ahead and plug in all those values so I'm going to do a year of 2016 726 12 for the hours 30 for the minutes 45 for the seconds and I'm going to go ahead and leave off the milliseconds this time and now to make this time zone aware we can just say TZ info equals PI T Z dot UTC so now let me go ahead and print out this date time and we can see what this looks like so now you can see that our date time has this plus zero zero on the end now this is the UTC offset now let's get the current UTC time that is also timezone aware so there are two ways that we can do this so remember we have dot now and we also have dot UTC now but first let's work with dot now so with daytime dot now we can pass in the timezone so this is instead of TZ info this is actually T Z equals same thing we'll do PI T Z dot UTC and let me go ahead and print that out so that you can see what that looks like date time now and so this is the current UTC time and you can see the milliseconds added on there and another way to do this what you might see people do on line is we also have this dot UTC now now this doesn't have the option of passing in the timezone but what we could do is do UTC now which creates a new date time and then we can do a dot replace on that TZ info and set that equal to pi T C dot UTC let's go ahead and print this out so you can see that both of these ways of getting the current UTC time that is times unaware these are both pretty much the same but I prefer to use this date time dot now with the timezone set because it's a little less typing and it's also slightly easier to read so I'm going to go ahead and remove that and I don't think I'm going to be using this date time here anymore so I'm going to go ahead and remove that as well ok so now we have the current UTC time and it's also timezone aware and I'm actually going to go ahead and call this UTC now so that it makes a little bit more sense so let's look at how we can convert this to a different time zone so I'm currently located close to Denver in the United States which is the Mountain Time Zone so if I wanted to convert this UTC time to my time zone and I could just say I'll call this DT Mountain and I'll say DT UTC now dot as time zone and now we can just pass in the time zone that we want and this is going to be PI T Z dot time zone and the time zone that I'm going to pass in here is us mountain so now let me go ahead and print this out and we can see the difference between these two date times so you can see that if I print that out the time that it printed out for a current Mountain time if I look at my machine here 845 and that's pretty much what we have here and that also has the UTC offset set to negative six which is the difference between my local time and the UTC time now you might be wondering how I knew to type in US Mountain here for the PI TZ time zone so PI TZ has a large list of time zones for you to select from now if you want to look at all of them then you can print them all out by using a for loop so let's go ahead and do that so let's do for TZ in PI T Z and the list of those time zones is in a list called all time zones so within this for loop I'm just going to print out TZ and let me go ahead and comment out these other print statements for now let's go ahead and run that and bring this up a bit so you can see that we have a lot of time zones here but if I scroll up a bit then we can see the United States time zone and you know so here we have US eastern US Mountain Pacific and things like that so if you have an idea of what your time zone is then you can just go ahead and search through this pi TZ dot all time zones list and see specifically what you need to type in in order to get that set correctly ok so now I'm going to go ahead and take this out and uncomment out these print statements and reprint that okay so what we just did here is we took a time zone aware date time set to UTC and we converted that to mountain time but what if we have a naive date time and we want to make that naive date time time zone aware so for example let me go ahead and create a new local date time that doesn't have that time zone information and remember we can grab the local time with date time dot now and this isn't time zone aware right now because we didn't pass in the time zone so now if I go ahead and print out this local date time here then you can see that I get my local time but that it's not time zone aware so currently I have my local time but it doesn't have any time zone information so if I wanted to convert this to another time zone so let's say that I wanted to convert this to the United States eastern time zone so I couldn't just say date time east equals date time mountain thought as time zone like we did before so let me go ahead and try this so I'll do PI TZ that time zone and I will pass in that u.s. Eastern time zone now if I run this then I'm going to get an error and if I scroll up here it says that as time zone cannot be applied to a naive date time and that makes sense so in order for me to make my local naive date time time zone aware I have to run this time zone localized function so in order to do this first let me comment out that now to run this time zone localized function first let me grab the Mountain Time Zone because that is what my current local time is so I'm going to say PI T Z dot time zone and I'm going to pass in US mountain so now that I have that time zone I can run its localized method and pass in my naive date/time so I'm just going to set the result to this exact same variable name so I'm going to say DT Mountain is equal to Mountain Time Zone dot localize and now we pass in the date that we want to localize and that is my date time mountain so now if I print this out I'm going to comment out this for now I'm going to print this out and you can see that now this was a naive date time of my local time and then I ran localized using this mountain time zone and now what this date time it used to be naive and now it is times unaware so now let's try to run that same command that gave us an error earlier so if I try to now convert this over to this date time east then I can go ahead and print this out if I save that and run it now you can see that since our date time mountain is times unaware that it correctly set that time two hours ahead to the Eastern time zone okay so I know that this video is getting a little long but I'd like to show you all a couple more things here really quick so real quick I'm going to go ahead and set this back to my local date time that is times unaware and then I can get rid of all of this other information here for now just to clean this up a bit okay so I just want to show a couple different ways that you can display these date times so probably the best way to save these dates or pass them around for internal use would be the ISO format and to display these an ISO format it's just as easy as saying so will print this out will print out date time Mountain dot ISO format now if you're not familiar with that format then it can look a little strange but it is an international standard now if you want to print these date times out in a specific format then you can go to the Python documentation and look at the format codes to print these out in just about any way that you'd want so if I go down here and look at these codes then you can see that they have what the format code is and then the example so let's say that I wanted to print it out in the form July 26 2016 so to do that after looking at those format codes you can use this method called STR F time and then pass in the format code so the format code that I want is percent uppercase B which is the full month % lowercase D which is a twodigit day then I'm going to put in a comma and then a % uppercase Y which will be the full year so if I print that then you can see that it prints out July 26 2016 now you don't have to memorize these I've never memorized these every time I want to print something out in a specific format I always go to the documentation and find the format codes that I want and then print them out that way now sometimes you have the opposite sometimes you have a string and you want to convert that to a date/time now you can do that using this date/time string P time method so let's go ahead and take a look at this so I'm going to do a date/time string here and I'm just going to copy the exact same date that we just print it out and I'm going to put this into a string format so this date/time string right now is currently just a string so I can do string operations on it but there's no way I could do any date/time operations on this so I have to convert this to a date/time if I want to do anything with it so if I wanted to convert this to a date/time and I can just say date/time dot date/time and then we're going to run this string P time STR P time and now what we pass in here is the string that we want to convert and now we have to tell Python what format that string is in and we just use the same format here so I'm going to go ahead and grab that and just paste it in so now I'm going to go up here and comment out that print statement and I'm just going to print out the state time that we just created from that string and if I print that out you can see that that string was successfully converted over to a date/time so just to make that more clear that was STR F time and that converts a date/time to a string and the STR P time that converts a string to a datetime okay so I think that it's going to do it for this video I hope that this video cleared up any confusion when working with dates and times in Python now I should mention that there is a popular Python package called arrow that is supposed to be an easier way to work with date times and maybe I'll try to do a video of that in the near future but I hope that knowing these basics of the builtin date/time module that will allow you to solve most the problems that you come up against but if you do have any questions about what we covered in this video then just feel free to ask in the comment section below and I'll do my best to answer those if you enjoy these tutorials I would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching
