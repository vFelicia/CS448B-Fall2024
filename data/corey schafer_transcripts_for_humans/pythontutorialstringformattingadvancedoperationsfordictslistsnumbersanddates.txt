With timestamps:

00:00 - hey everybody how's it going in this
00:02 - video we're going to be looking at
00:03 - string formatting operations in Python
00:05 - now a lot of people know the basics of
00:07 - string formatting but there are a lot of
00:09 - options beyond the basics that are
00:11 - available that will allow us to format
00:13 - our strings in exactly the way that we
00:15 - want so I want to run through a few
00:16 - examples here really fast just to show
00:18 - some of the different things that we can
00:19 - do with formatting our strings so first
00:22 - of all if you're not already using some
00:24 - kind of formatting when you print out
00:26 - your strings then you definitely should
00:27 - be so sometimes I'll see people using
00:29 - string concatenation to display
00:31 - information and that's exactly what I'm
00:33 - doing on this first line here and there
00:36 - are a few things wrong with this so you
00:38 - can see first of all it's not very
00:39 - readable you have to open and close
00:42 - strings in different places plus you
00:45 - have plus signs everywhere whenever you
00:48 - have an integer you have to cast those
00:50 - two strings and also you have to
00:52 - remember to put spaces in the correct
00:54 - location so this middle string here I
00:57 - have to remember to put in a space at
00:59 - the beginning and at the end and if I
01:01 - mess that up then it can bunch my string
01:03 - together when I print it out so you can
01:05 - see if I run this code that it does work
01:08 - but there are much better ways to do
01:11 - this so it's much easier to use the
01:13 - formatting option and that's what we're
01:16 - going to take a look at here so let me
01:18 - uncomment out this so you can see that
01:20 - this is a lot easier to read now we have
01:23 - these braces here as placeholders and
01:26 - after our string closes we run this
01:29 - format method and then we pass in the
01:31 - values that we want to replace our
01:34 - placeholders with now if we do it the
01:36 - way that I did here and don't add
01:38 - anything to these placeholders then what
01:40 - it's going to do is it's just going to
01:42 - pass our first value here to our first
01:45 - placeholder and our second value to our
01:47 - second placeholder now if you want to
01:49 - you can explicitly number your
01:52 - placeholders so in this example here
01:55 - it's the exact same example but now I've
01:57 - numbered my placeholders so now what
02:00 - this is saying is that we want this 0
02:03 - here is the first value that you pass
02:05 - into format and then this one is the
02:07 - second value that you pass in the format
02:09 - and if I save that and run it you can
02:11 - see that it still works now this is more
02:13 - you
02:13 - well when you have placeholders for
02:15 - values that need to be repeated
02:18 - so in this next example that I have here
02:20 - you can see that I have this tag
02:24 - variable and this text variable so in my
02:27 - string
02:28 - I'm putting the tag and some opening
02:30 - brackets here and then I'm putting in a
02:33 - placeholder for the text and then I'm
02:35 - putting the tag inside these closing
02:38 - braces here and then the values that I
02:40 - pass in the format tag will go where all
02:43 - of the zeros are for our placeholders
02:45 - and text will go where the one is for
02:48 - our placeholder so if I save that and
02:50 - run it you can see that it prints out
02:52 - the value that we expected okay so now
02:55 - we can also grab specific fields from
02:57 - our placeholders so in our previous
03:00 - example we were passing in a dictionary
03:04 - to our format and within our format we
03:07 - were accessing the name and the age of
03:10 - this dictionary from directly within the
03:13 - format here but we can actually access
03:16 - these fields from directly within the
03:18 - placeholders so within the placeholder
03:20 - here for zero I'm just going to put
03:23 - these brackets here and do name and for
03:26 - one I'm going to do age and then I can
03:29 - take these off of our dictionary here
03:32 - and just pass in the dictionary so let
03:35 - me save that and run it and you can see
03:36 - that that still works now another thing
03:38 - that you might notice is that now you
03:40 - can see that I'm just passing in this
03:42 - dictionary in the format twice I have
03:45 - person and person so really what I can
03:47 - do is I can just make both of these a
03:50 - zero index to take the first value from
03:53 - format and then I can get rid of the
03:55 - second value and now what this is going
03:58 - to do is it's going to pass the person
04:00 - dictionary to all of our placeholders
04:02 - and here it's going to access the name
04:04 - and here it's going to access the age so
04:06 - if I save that and run it then you can
04:08 - see that it still works now this is also
04:10 - how you would access values of a list
04:12 - too so for example let me do L equals
04:16 - and make a list here and I'm just going
04:18 - to do the exact same value so I'm going
04:20 - to do Gen and 23 and here I'm going to
04:24 - pass in that list and now instead
04:27 - of name I'm going to grab the first
04:30 - index there and then the next index and
04:33 - save that and run it and you can see
04:35 - that that works also okay so that is how
04:37 - you access values from dictionaries and
04:40 - lists but you can also access attributes
04:42 - in a similar way okay so I have a small
04:45 - test class here called person and this
04:49 - has a name attribute and an age
04:51 - attribute and then here I'm making an
04:55 - instance of this class person with the
04:57 - name Jack and the age 33 now if I want
05:00 - to print this out it's almost the same
05:02 - as what we did with the dictionary but
05:05 - now instead of using the brackets we're
05:07 - just going to use this dot attribute to
05:10 - grab that value so you can see here I'm
05:12 - still just passing in this single object
05:14 - into format and it's going to come in
05:16 - here and grab the name attribute and the
05:19 - age attribute so if I save that and run
05:21 - it you can see that that worked okay so
05:24 - we can also pass in keyword arguments to
05:28 - format so for my example that I have
05:31 - here I have my placeholders and I'm just
05:35 - passing in some keywords into the
05:37 - placeholders now within format here
05:40 - instead of passing in a specific object
05:43 - I'm setting these keyword values so I'm
05:46 - setting name equal to Jin and the age
05:49 - equal to 23
05:50 - so now anywhere that it sees a
05:53 - placeholder that matches that keyword
05:55 - then it will fill it in with that value
05:58 - so if I save that and run it then you
06:00 - can see that that worked right now this
06:02 - is the method that I usually use to
06:04 - print out dictionaries because I think
06:07 - that it is a little bit more readable
06:09 - now if you know about unpacking lists
06:12 - and dictionaries then you'll probably
06:13 - realize here that we can just unpack our
06:16 - dictionary from before into format and
06:18 - it will find all those keywords for us
06:20 - to use so I actually accidentally
06:22 - deleted that dictionary that we had from
06:25 - before so let me go ahead and make that
06:28 - again so let's see that was named and
06:31 - I'll just do Jin and I'll do the age as
06:36 - 23 and let me fix that curly brace there
06:40 - okay so
06:41 - now in this example here I'm using these
06:44 - keyword arguments and if I just unpack
06:47 - that dictionary then it will fill in
06:49 - those keyword arguments for us so let me
06:51 - save that and print it and you can see
06:54 - that that worked so to me that's the
06:56 - most readable and most convenient way to
06:58 - print out dictionary values okay so now
07:01 - let's take a look at how we can format
07:03 - and print out numbers so in this example
07:07 - that I have here all I'm doing here is
07:10 - looping through and printing out the
07:12 - numbers 1 through 10 so now what if I
07:16 - wanted all of these numbers to have 2
07:18 - digits and 0 pad my single digit values
07:21 - with a 0 now in order to do this I'm
07:24 - going to have to add formatting to our
07:26 - placeholders and we can do that by
07:28 - adding a colon here so now we can add
07:31 - whatever formatting that we'd like so I
07:33 - went to 0 pi add my digits to 2 so we
07:37 - can do that just by doing a 0 to here
07:40 - and if I save that and run it now you
07:42 - can see instead of 1 2 3 it's 0 1 0 2
07:45 - and then when I get down here to 10 it
07:48 - doesn't pad it because it's already two
07:49 - digits now if I was to make this a 3 and
07:52 - save that and run it now you can see
07:55 - that it 0 pads all the way up to 3
07:57 - digits ok so now let's look at using
08:00 - format to do decimal places so here I
08:04 - have PI written out to 8 decimal places
08:06 - so let's say that I want to print that
08:08 - out but I only want to print out to 2
08:11 - decimal places so let me add my colon so
08:15 - that it knows that we want to do some
08:17 - formatting and now I can specify that I
08:19 - want two decimal places just by doing a
08:22 - point 2f so now if I save that and run
08:26 - it you can see that it says pi is equal
08:28 - to 3 point 1 4 and again if I change
08:31 - that to 2 a 3 and save it and run it and
08:34 - it does up to 3 decimal places ok so
08:36 - let's look at an example for say that we
08:39 - wanted to print out a large number and
08:42 - we wanted some comma separators so that
08:44 - it was more read more easily readable so
08:49 - we can easily do that just by adding a
08:51 - comma after our colon so I'll do a
08:55 - : here to specify that we want
08:57 - formatting and I'll just put in a comma
08:59 - and if I save that and run it you can
09:02 - see that we have our comma separators
09:04 - here on these large values and you can
09:06 - chain this formatting together too so
09:08 - let's say that we wanted the comma
09:10 - separated values and we wanted to
09:12 - display up to two decimal places so I
09:15 - write after the comma I could do my
09:17 - point 2f that we did from before and if
09:21 - I run that you can see that we have our
09:23 - comma separated values and it added two
09:26 - decimal places on to the end okay so
09:28 - let's take a look at an example for how
09:31 - we can format and print out dates so I
09:34 - think this is extremely useful if you
09:36 - need to print out date time information
09:39 - it allows us to display the information
09:41 - in just about any way that we want so
09:43 - it's especially useful if you're
09:44 - printing out dates for logs or creating
09:48 - reports or anything like that so I just
09:50 - created a date here for September 24th
09:53 - of 2016 so if I just print out that date
09:58 - variable then you can see that it's not
10:00 - too bad it's pretty easy to tell what
10:02 - it's doing it's printing out the year
10:03 - the month the day and then the hours
10:06 - minutes and seconds but let's say that
10:09 - we wanted it in this format here we
10:11 - wanted the month the day and then a
10:14 - comma and the year so let's take out
10:17 - this print statement here and let's try
10:20 - to do that okay so first of all we're
10:23 - going to want to add our colon here to
10:25 - specify that we want to do some
10:27 - formatting to this and now I'm going to
10:30 - go to the website and get the values
10:33 - that we want to use here so we want the
10:36 - full month and we can see here that the
10:38 - full month is % B and we also want the
10:42 - day of the month and we can see that the
10:44 - day of the month here is % d and we also
10:48 - want the year here and there's a couple
10:50 - of options for the year but we're going
10:52 - to go ahead and just do the four digit
10:54 - one here with the capital y so like I
10:56 - said it's completely fine if you don't
10:58 - know these formatting options just
11:00 - whenever you're trying to do something
11:01 - you can look it up in the documentation
11:02 - and know how to get it done so let's go
11:06 - ahead and pass these in
11:08 - so the name of the month was a % B and
11:12 - then I'm going to do the day as % D and
11:15 - then I want the comma and then the % a
11:18 - capital y for the year so let me go
11:20 - ahead and print that out okay so that
11:22 - worked the way that we wanted it to so
11:24 - you can see how formatting your strings
11:26 - like this could be extremely useful for
11:28 - printing out dates so now let's do a
11:31 - slightly more complicated example and
11:34 - let's try to do it in this format here
11:36 - let's say that we want the name of the
11:38 - month the day the comma the year then we
11:41 - want to say that it fell on a and then
11:44 - put in the day of the week and that it
11:46 - was the day of the year so I want to put
11:50 - the day of the year here so we want to
11:52 - format our string to where it looks like
11:54 - this so let me uncomment out what we
11:57 - have here so far now we already know how
11:59 - to do this first part here so that was
12:01 - just a comm :
12:03 - and we want our % b % d for the day
12:07 - comma % capital y so now let's also go
12:11 - back to the documentation and find the
12:14 - day of the week and the day of the year
12:15 - so i'm going to go and grab that so we
12:20 - can see here that the day of the week is
12:24 - over here at capital a and the day of
12:28 - the year is this % j so if i go back
12:33 - here and do our colon and a % with a
12:37 - capital A and then over here I'm going
12:40 - to do the colon with % lowercase J now
12:43 - if I just try to run this as is then you
12:46 - can see that we get an error now the
12:48 - reason that we got an error is because
12:50 - we have three placeholders but we're
12:52 - only passing in one value to our format
12:55 - so if you remember I can just do the
12:58 - index here so I can say that we want
13:01 - this to be 0 index and the first value
13:04 - that we pass into format so now even
13:06 - though we have three placeholders it
13:08 - will replace all those placeholders with
13:11 - our single value that we're passing in
13:13 - to format so now if I run that you can
13:16 - see that it gives us the output that we
13:18 - wanted so now you can see here that it
13:19 - says September 24th
13:21 - sixteen fell on a Saturday and was the
13:25 - 268th day of the year so I think that's
13:28 - going to do it for this video I hope it
13:30 - helped in knowing what all is available
13:32 - when it comes to string formatting and
13:34 - also maybe gave you some ideas for how
13:36 - you can use this in your own
13:37 - applications but if you do have any
13:39 - questions just feel free to ask me in
13:41 - the comment section below be sure to
13:43 - subscribe for future videos and thank
13:44 - you all for watching

Cleaned transcript:

hey everybody how's it going in this video we're going to be looking at string formatting operations in Python now a lot of people know the basics of string formatting but there are a lot of options beyond the basics that are available that will allow us to format our strings in exactly the way that we want so I want to run through a few examples here really fast just to show some of the different things that we can do with formatting our strings so first of all if you're not already using some kind of formatting when you print out your strings then you definitely should be so sometimes I'll see people using string concatenation to display information and that's exactly what I'm doing on this first line here and there are a few things wrong with this so you can see first of all it's not very readable you have to open and close strings in different places plus you have plus signs everywhere whenever you have an integer you have to cast those two strings and also you have to remember to put spaces in the correct location so this middle string here I have to remember to put in a space at the beginning and at the end and if I mess that up then it can bunch my string together when I print it out so you can see if I run this code that it does work but there are much better ways to do this so it's much easier to use the formatting option and that's what we're going to take a look at here so let me uncomment out this so you can see that this is a lot easier to read now we have these braces here as placeholders and after our string closes we run this format method and then we pass in the values that we want to replace our placeholders with now if we do it the way that I did here and don't add anything to these placeholders then what it's going to do is it's just going to pass our first value here to our first placeholder and our second value to our second placeholder now if you want to you can explicitly number your placeholders so in this example here it's the exact same example but now I've numbered my placeholders so now what this is saying is that we want this 0 here is the first value that you pass into format and then this one is the second value that you pass in the format and if I save that and run it you can see that it still works now this is more you well when you have placeholders for values that need to be repeated so in this next example that I have here you can see that I have this tag variable and this text variable so in my string I'm putting the tag and some opening brackets here and then I'm putting in a placeholder for the text and then I'm putting the tag inside these closing braces here and then the values that I pass in the format tag will go where all of the zeros are for our placeholders and text will go where the one is for our placeholder so if I save that and run it you can see that it prints out the value that we expected okay so now we can also grab specific fields from our placeholders so in our previous example we were passing in a dictionary to our format and within our format we were accessing the name and the age of this dictionary from directly within the format here but we can actually access these fields from directly within the placeholders so within the placeholder here for zero I'm just going to put these brackets here and do name and for one I'm going to do age and then I can take these off of our dictionary here and just pass in the dictionary so let me save that and run it and you can see that that still works now another thing that you might notice is that now you can see that I'm just passing in this dictionary in the format twice I have person and person so really what I can do is I can just make both of these a zero index to take the first value from format and then I can get rid of the second value and now what this is going to do is it's going to pass the person dictionary to all of our placeholders and here it's going to access the name and here it's going to access the age so if I save that and run it then you can see that it still works now this is also how you would access values of a list too so for example let me do L equals and make a list here and I'm just going to do the exact same value so I'm going to do Gen and 23 and here I'm going to pass in that list and now instead of name I'm going to grab the first index there and then the next index and save that and run it and you can see that that works also okay so that is how you access values from dictionaries and lists but you can also access attributes in a similar way okay so I have a small test class here called person and this has a name attribute and an age attribute and then here I'm making an instance of this class person with the name Jack and the age 33 now if I want to print this out it's almost the same as what we did with the dictionary but now instead of using the brackets we're just going to use this dot attribute to grab that value so you can see here I'm still just passing in this single object into format and it's going to come in here and grab the name attribute and the age attribute so if I save that and run it you can see that that worked okay so we can also pass in keyword arguments to format so for my example that I have here I have my placeholders and I'm just passing in some keywords into the placeholders now within format here instead of passing in a specific object I'm setting these keyword values so I'm setting name equal to Jin and the age equal to 23 so now anywhere that it sees a placeholder that matches that keyword then it will fill it in with that value so if I save that and run it then you can see that that worked right now this is the method that I usually use to print out dictionaries because I think that it is a little bit more readable now if you know about unpacking lists and dictionaries then you'll probably realize here that we can just unpack our dictionary from before into format and it will find all those keywords for us to use so I actually accidentally deleted that dictionary that we had from before so let me go ahead and make that again so let's see that was named and I'll just do Jin and I'll do the age as 23 and let me fix that curly brace there okay so now in this example here I'm using these keyword arguments and if I just unpack that dictionary then it will fill in those keyword arguments for us so let me save that and print it and you can see that that worked so to me that's the most readable and most convenient way to print out dictionary values okay so now let's take a look at how we can format and print out numbers so in this example that I have here all I'm doing here is looping through and printing out the numbers 1 through 10 so now what if I wanted all of these numbers to have 2 digits and 0 pad my single digit values with a 0 now in order to do this I'm going to have to add formatting to our placeholders and we can do that by adding a colon here so now we can add whatever formatting that we'd like so I went to 0 pi add my digits to 2 so we can do that just by doing a 0 to here and if I save that and run it now you can see instead of 1 2 3 it's 0 1 0 2 and then when I get down here to 10 it doesn't pad it because it's already two digits now if I was to make this a 3 and save that and run it now you can see that it 0 pads all the way up to 3 digits ok so now let's look at using format to do decimal places so here I have PI written out to 8 decimal places so let's say that I want to print that out but I only want to print out to 2 decimal places so let me add my colon so that it knows that we want to do some formatting and now I can specify that I want two decimal places just by doing a point 2f so now if I save that and run it you can see that it says pi is equal to 3 point 1 4 and again if I change that to 2 a 3 and save it and run it and it does up to 3 decimal places ok so let's look at an example for say that we wanted to print out a large number and we wanted some comma separators so that it was more read more easily readable so we can easily do that just by adding a comma after our colon so I'll do a here to specify that we want formatting and I'll just put in a comma and if I save that and run it you can see that we have our comma separators here on these large values and you can chain this formatting together too so let's say that we wanted the comma separated values and we wanted to display up to two decimal places so I write after the comma I could do my point 2f that we did from before and if I run that you can see that we have our comma separated values and it added two decimal places on to the end okay so let's take a look at an example for how we can format and print out dates so I think this is extremely useful if you need to print out date time information it allows us to display the information in just about any way that we want so it's especially useful if you're printing out dates for logs or creating reports or anything like that so I just created a date here for September 24th of 2016 so if I just print out that date variable then you can see that it's not too bad it's pretty easy to tell what it's doing it's printing out the year the month the day and then the hours minutes and seconds but let's say that we wanted it in this format here we wanted the month the day and then a comma and the year so let's take out this print statement here and let's try to do that okay so first of all we're going to want to add our colon here to specify that we want to do some formatting to this and now I'm going to go to the website and get the values that we want to use here so we want the full month and we can see here that the full month is % B and we also want the day of the month and we can see that the day of the month here is % d and we also want the year here and there's a couple of options for the year but we're going to go ahead and just do the four digit one here with the capital y so like I said it's completely fine if you don't know these formatting options just whenever you're trying to do something you can look it up in the documentation and know how to get it done so let's go ahead and pass these in so the name of the month was a % B and then I'm going to do the day as % D and then I want the comma and then the % a capital y for the year so let me go ahead and print that out okay so that worked the way that we wanted it to so you can see how formatting your strings like this could be extremely useful for printing out dates so now let's do a slightly more complicated example and let's try to do it in this format here let's say that we want the name of the month the day the comma the year then we want to say that it fell on a and then put in the day of the week and that it was the day of the year so I want to put the day of the year here so we want to format our string to where it looks like this so let me uncomment out what we have here so far now we already know how to do this first part here so that was just a comm and we want our % b % d for the day comma % capital y so now let's also go back to the documentation and find the day of the week and the day of the year so i'm going to go and grab that so we can see here that the day of the week is over here at capital a and the day of the year is this % j so if i go back here and do our colon and a % with a capital A and then over here I'm going to do the colon with % lowercase J now if I just try to run this as is then you can see that we get an error now the reason that we got an error is because we have three placeholders but we're only passing in one value to our format so if you remember I can just do the index here so I can say that we want this to be 0 index and the first value that we pass into format so now even though we have three placeholders it will replace all those placeholders with our single value that we're passing in to format so now if I run that you can see that it gives us the output that we wanted so now you can see here that it says September 24th sixteen fell on a Saturday and was the 268th day of the year so I think that's going to do it for this video I hope it helped in knowing what all is available when it comes to string formatting and also maybe gave you some ideas for how you can use this in your own applications but if you do have any questions just feel free to ask me in the comment section below be sure to subscribe for future videos and thank you all for watching
