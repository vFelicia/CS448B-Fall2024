With timestamps:

00:00 - hey how's it going everybody in this
00:02 - video we'll be taking a look at the
00:03 - pillow library for python uh so pillow
00:06 - allows us to work with and manipulate
00:09 - images using python uh so we'll learn
00:11 - how we can do several things with the
00:13 - images like uh displaying them to the
00:15 - screen resizing them modifying their
00:18 - colors and also saving them back to your
00:20 - machine so this is extremely useful when
00:22 - you want to modify a lot of images at
00:25 - once or if you want to automatically run
00:27 - a script on images that you upload to a
00:29 - certain directory um so for example I
00:32 - have a a website that contains images
00:35 - and I usually need multiple sizes of
00:37 - these images uh one fullsize image and
00:40 - then several others for thumbnails and
00:42 - image Galleries and things like that now
00:44 - I used to manually resize all of the
00:47 - images and it took a long time but with
00:49 - a library like pillow uh you can do all
00:52 - of this automatically all at once uh so
00:55 - let's go ahead and get started and see
00:56 - how this works so first off we need to
00:59 - install pillow now I already have this
01:01 - installed on my machine but I'll show
01:03 - you the commands that I used in order to
01:06 - get it running uh so I'm on a Mac so
01:09 - first you want to uh Google uh pillow
01:12 - for Python and it will take you to their
01:15 - documentation and since I'm on a Mac you
01:17 - can install it for whatever operating
01:19 - system you're on but I went down here to
01:21 - OSX installation now it's pretty easy to
01:24 - get this working on your machine but
01:25 - it's not quite as easy as only running
01:27 - the PIP install uh so you also need a
01:30 - few external libraries as well so uh I
01:34 - use this Brew install command here to
01:36 - install these external libraries now if
01:38 - you don't have home brew installed on
01:40 - your machine then you will need to do
01:41 - that and there's a link here to do that
01:44 - as well um but I'm not going to go into
01:46 - too much detail about that right now um
01:48 - so once you get these external libraries
01:50 - installed then you can just run this pip
01:52 - install pillow command and that should
01:54 - take care of everything else now once
01:56 - you think that you have that installed
01:58 - correctly then you should be able able
02:00 - to open up the editor of your choice
02:01 - here and in my case I have Sublime Text
02:04 - open up here and you should be able to
02:05 - type in from pil import image so if I
02:10 - run that you can see that my script ran
02:13 - with no output uh but there's also no
02:15 - errors so that's a good thing now this
02:16 - may be a little different than packages
02:18 - that you're used to working with uh it's
02:20 - a little strange that we did a pip
02:21 - install pillow and whenever we use the
02:24 - uh package we say from pil import the
02:28 - modules that you want but I think this
02:29 - is a from a naming convention that's
02:31 - just kind of been around for a while so
02:33 - it's how they still do it so now that we
02:35 - have pill installed uh let's start
02:37 - playing with some images so I have a
02:40 - couple of images here of my dog whenever
02:42 - he was a puppy that we can work with now
02:44 - these images are in the same directory
02:46 - as my python file here uh so I'll be
02:48 - able to reference them simply with their
02:50 - file names but if you're working with
02:52 - images that are in a different location
02:54 - then you can just use their full path to
02:56 - the image so first things first let's
02:58 - start off really simple and see if we
03:00 - can just display one of these images to
03:02 - the screen um so we're going to need to
03:04 - create an image object and I already
03:06 - have image imported here so now to
03:10 - create this image object let's just call
03:12 - this image one and I'm going to set it
03:14 - equal to image. openen and then the file
03:18 - name that I'm going to grab over here is
03:20 - pup one. jpeg so I'm going to say pup
03:23 - one. jpeg so now this gives me an image
03:26 - object that I can work with and you can
03:28 - do just about anything with this image
03:30 - object so what we're going to want to do
03:32 - is we're just going to do image
03:34 - one. show now if I run this command you
03:39 - can see here that my python script here
03:41 - did pull up this image and open it up in
03:44 - preview so let's go ahead and close that
03:46 - down so the fact that we were able to
03:48 - display that image to the screen now we
03:50 - know that we're working with the correct
03:52 - image so let's go ahead and do a simple
03:54 - modification to it so what if I wanted
03:56 - to uh save instead of a JPEG file What
03:59 - if I wanted to save that as a PNG
04:01 - instead uh well to do that we can use
04:04 - this save method now within the save
04:06 - method here I am just going to grab this
04:09 - file name here and instead of pup one.
04:11 - jpeg I'm just going to call this pup
04:14 - one.png and if I run this code you can
04:17 - see over here in my file system that now
04:21 - we have this pup one. JPEG and pup
04:23 - one.png and I can open that up just like
04:25 - I did the jpeg okay so now I'm going to
04:28 - delete this PNG that we just now created
04:30 - now uh now this is where the pillow
04:34 - Library really comes in handy is
04:36 - whenever we want to work with multiple
04:38 - images at a time so what if we wanted to
04:41 - convert all of these images to pngs so
04:44 - let's go ahead and do that I'm going to
04:45 - create a new folder here in my file
04:47 - system and I'm going to call this pngs
04:50 - and this will be the folder where I hold
04:53 - the PNG versions of all of these jpegs
04:56 - okay so first we're going to need a way
04:57 - to Loop over all of the images and our
04:59 - current directory now to do this I'm
05:02 - going to import the OS module now since
05:05 - this is a tutorial on the pillow Library
05:08 - I'm not going to go too in depth as to
05:10 - what the OS module is doing here but to
05:12 - Loop over the files in the current
05:14 - directory I'm just going to say for
05:18 - fn. list and then I'm just going to put
05:22 - a dot here for the current directory so
05:25 - that for Loop will Loop through
05:26 - everything in the current directory so
05:28 - now I'm going to say if F do ends with
05:33 - and then I'm going to say if it ends
05:35 - with a JPEG then at this point I'm just
05:39 - going to print out F so if we run this
05:43 - then we can see down here in our output
05:45 - that it printed out all of our jpegs
05:48 - that we have in the current directory so
05:49 - now that I know that that's working
05:51 - correctly I'm going to go ahead and make
05:53 - an image object out of each one of these
05:55 - so I'm just going to say I equals image
05:59 - do open F and save that so now I'm going
06:02 - to be saving all of these as a PNG file
06:05 - but I want to keep the same file name so
06:07 - I'm going to go ahead and split out the
06:09 - file name and the file extension uh from
06:12 - the file that I have so I'm going to say
06:15 - os.
06:17 - path. split text and pass in the file
06:21 - name so now this is going to break
06:23 - everything up into a file name and a
06:24 - file extension so if I print the file
06:27 - name and run this then you can see that
06:29 - we just got the file name without the
06:31 - extension and if I print the file
06:33 - extension and run that then you can see
06:35 - that we just get four jpegs so now to
06:38 - save all of those as pngs inside the PNG
06:41 - folder I'm just going to say I dove and
06:44 - then within here I can name the file so
06:47 - I'm going to say pngs to pass it into
06:49 - the pngs directory and then I will do
06:51 - the file name there do PNG then I'll do
06:55 - a format to pass in that file name and
06:58 - I'll save that and this should be a DOT
07:01 - right here that's typo so now if I run
07:04 - this code what it's going to go do is
07:06 - it's going to go through and make an
07:07 - image object out of each of these files
07:09 - and then save it into this pgs directory
07:12 - so I just ran that now if I open up this
07:14 - pngs directory you can see that we have
07:17 - all four of these files that have a PNG
07:21 - extension on them okay so that's one
07:23 - thing that you can do with a group of
07:25 - images but let's try to do that example
07:27 - I was talking about before I did on my
07:30 - website where instead of uh giving all
07:32 - the files a different extension let's
07:34 - see if we can resize each file so like I
07:37 - said this would be extremely useful on a
07:39 - web server or something similar if you
07:41 - want a resize version of all your files
07:44 - uh for thumbnails or image galleries so
07:46 - not only are we going to want to resize
07:48 - our file but we also want to keep the
07:50 - same aspect ratio too so that our photos
07:52 - don't get squished or distorted uh so
07:55 - first let's decide what maximum size we
07:58 - want our files to be so for this example
08:00 - I'm going to say that I want the size of
08:04 - our files to be let's say 300 so I'm
08:06 - going to make a variable here that's
08:08 - size uncore 300 and your image sizes
08:12 - need to be a tupal of the sizes so I'm
08:14 - just going to say 300 comma 300 so now
08:17 - in my file system over here I'm going to
08:19 - go ahead and create a new folder and I'm
08:21 - going to call this folder 300 and this
08:23 - will hold all of our 300 pixel file
08:27 - sizes so now that we've DEC ided on a
08:29 - file size here in my for Loop right
08:32 - above where I'm doing the save I'm just
08:34 - going to say i. thumbnail and I'm going
08:38 - to pass in this size of 300 here now I'm
08:41 - also going to modify my save down here
08:44 - to save into the 300 folder then I'm
08:48 - going to go ahead and do the original
08:49 - file name with an underscore 300 there
08:52 - and instead of this PNG extension I'm
08:55 - just going to go ahead and keep the
08:58 - regular extension and pass that in using
09:01 - the format so I'll say uh fext there to
09:04 - pass in that file extension so now if I
09:07 - run this what this does is it goes
09:09 - through and it makes an image object out
09:12 - of all these files and then it does a
09:14 - thumbnail to the size of 300 300 that we
09:17 - made up here and then it saves this into
09:20 - the 300 directory so if I go over here
09:22 - and open up our 300 directory you can
09:24 - see that we have our old file name
09:27 - uncore 300 uh jpeg so if I open up all
09:31 - these you can see that now these are a
09:33 - small 300 pixel version of the images of
09:36 - our original images now the great thing
09:39 - about being able to do this in Python is
09:41 - that we can just quickly and easily
09:43 - modify our script to accept any new
09:45 - sizes that we want so say for example
09:47 - that we suddenly had a requirement to do
09:50 - 700 uh pixel images as well uh so we can
09:54 - go through and just as easily add in
09:56 - another step to do 300 and 700 pixel
10:00 - images so if I change this to 700 here
10:06 - then what I'm going to do is I'm just
10:08 - going to copy all of this and then go
10:11 - down here and I'll do a
10:15 - size of 700 up here at top and then
10:19 - after it makes the 700 image then it'll
10:21 - go through and make the 300 size image
10:24 - so you can see that we have two
10:26 - different steps here so when it leaps
10:27 - through we're going to make the image
10:29 - object we're going to resize this to a
10:32 - 700 pixel thumbnail save it into a 700
10:36 - directory here which I'm going to go
10:37 - ahead and create so I'll create that
10:40 - there and then we are going to resize it
10:43 - to a 300 pixel image and then save it
10:45 - into the 300 pixel folder so if I run
10:49 - this you can see that finished in half a
10:51 - second if I go into the 300 pixel folder
10:53 - you can see that we have our uh 300
10:56 - pixel images there and if I go into the
10:58 - 700 pixel folder then we have our 700
11:01 - pixel images there so you can see how a
11:04 - library like this will be ex would be
11:06 - extremely useful and it keeps you from
11:08 - doing a lot of this work that some
11:10 - people do manually every time they
11:12 - upload images to their website and it's
11:14 - how I used to do uh images for my
11:16 - website too I would go in and resize
11:19 - these full-size images down one by one
11:22 - and then upload them to my web server
11:24 - but using a library like this makes all
11:26 - of that so much faster but so far we we'
11:29 - only touched on a few things that you
11:30 - can do with this Imaging Library so let
11:33 - me show you a few more things just to
11:35 - give you a few quick ideas uh before we
11:37 - end the video here so for example so far
11:39 - we've gone through and we've changed
11:41 - file extensions and we've resized the
11:43 - images but you can also rotate images
11:46 - you can make images black and white uh
11:48 - you can blur images and you can do all
11:50 - kinds of things uh so let's just walk
11:52 - through a couple of these examples so
11:54 - I'm going to go ahead and remove this
11:56 - entire for Loop here and I'm just going
11:58 - to work with one image at a time so it's
12:00 - a little bit more obvious what's going
12:01 - on but you could just as easily do all
12:04 - of these in that for loop as well and it
12:06 - would uh do that to all of your images
12:10 - okay so let me go ahead and uncomment
12:11 - out this code where I was working on
12:14 - this pup one. jpeg so first let me
12:18 - rotate an image so to rotate an image
12:21 - I'm going to do image one dot rotate and
12:24 - let's say that we just want to rotate at
12:26 - 90° so now after we rotate at 90 ° then
12:29 - I'm going to go ahead and run the save
12:32 - method on it and I will just call this
12:34 - I'll call it pup
12:37 - oneor mod. jpeg so if I run this code
12:41 - here then you can see we have this pup
12:43 - one mod and if I open this up you can
12:46 - see that that image has been rotated 90°
12:49 - okay now let's say that we wanted to
12:50 - make this image black and white now to
12:53 - do this instead of rotating 90° I'm
12:55 - going to do a convert and in inside what
12:59 - I'm going to pass into the convert I'm
13:01 - going to say mode equals L and save that
13:06 - and if I run that then you can see over
13:08 - here now our pup one mod if we open that
13:11 - up is a black and white image now just
13:14 - so you know I didn't memorize uh that
13:16 - convert and mode and L for the black and
13:19 - white I had to go and look that up in
13:20 - the documentation to get those values
13:23 - and when you first start working with
13:24 - libraries like this it's really not uh
13:27 - it's really not feasible to uh think
13:29 - that you're going to memorize all these
13:31 - off the top of your head so you really
13:33 - have to get comfortable with the
13:34 - documentation uh so whatever you're
13:36 - trying to do just go to the pillow
13:37 - documentation and find the values that
13:39 - you need and um and do it that way it's
13:43 - a great resource to learn what you can
13:45 - do with images but just to give you a
13:47 - further idea of a couple more things
13:48 - that you can do with these images uh
13:51 - let's go ahead and do one that's a
13:52 - little bit more complicated let's blur
13:54 - our image um so if we want to blur an
13:57 - image then we have to import another
13:59 - module up here so instead of just image
14:02 - let's go ahead and also import image
14:05 - filter so now if I want to blur my image
14:08 - that I can say image
14:10 - one. filter and within filter I'm going
14:14 - to pass in an image filter Dot and I'm
14:18 - going to do a gajian blur so if I go
14:22 - ahead and save this and run it if I open
14:25 - up this pup one mod here you can see
14:29 - that this doesn't seem very blurred and
14:31 - that's because we Ed the default values
14:33 - with this blur let me go ahead and make
14:35 - my text a actually I'm just going to
14:39 - spread this over a little bit so that
14:40 - you can see all of this text and I'll
14:43 - make this bigger again uh so you can see
14:45 - that we just did a gajian blur with uh
14:48 - the default values and the default
14:49 - values and I found this from the
14:51 - documentation it's a radius set to two
14:54 - which it does blur the image but just
14:56 - not very much so if if I replace that
14:59 - default value of two with say like a 15
15:02 - and then I rerun this code now let's
15:05 - close down this image and we kind of
15:08 - already got a look at what it looks like
15:09 - but if we close down that image and then
15:10 - open it back up you can see that that
15:12 - blur is uh is much more blurred than it
15:16 - was before so I think that about does it
15:18 - for this video I hope that gives you
15:20 - some good ideas for what you can do with
15:22 - this uh image library in Python I do
15:25 - recommend going and checking out the
15:26 - documentation because there's so much
15:28 - more that you can do with images uh than
15:30 - just what was in this video but if you
15:32 - do have any questions about this stuff
15:34 - just feel free to ask in the comment
15:35 - section below uh be sure to subscribe
15:37 - for future python videos and thank you
15:39 - all for
15:46 - watching

Cleaned transcript:

hey how's it going everybody in this video we'll be taking a look at the pillow library for python uh so pillow allows us to work with and manipulate images using python uh so we'll learn how we can do several things with the images like uh displaying them to the screen resizing them modifying their colors and also saving them back to your machine so this is extremely useful when you want to modify a lot of images at once or if you want to automatically run a script on images that you upload to a certain directory um so for example I have a a website that contains images and I usually need multiple sizes of these images uh one fullsize image and then several others for thumbnails and image Galleries and things like that now I used to manually resize all of the images and it took a long time but with a library like pillow uh you can do all of this automatically all at once uh so let's go ahead and get started and see how this works so first off we need to install pillow now I already have this installed on my machine but I'll show you the commands that I used in order to get it running uh so I'm on a Mac so first you want to uh Google uh pillow for Python and it will take you to their documentation and since I'm on a Mac you can install it for whatever operating system you're on but I went down here to OSX installation now it's pretty easy to get this working on your machine but it's not quite as easy as only running the PIP install uh so you also need a few external libraries as well so uh I use this Brew install command here to install these external libraries now if you don't have home brew installed on your machine then you will need to do that and there's a link here to do that as well um but I'm not going to go into too much detail about that right now um so once you get these external libraries installed then you can just run this pip install pillow command and that should take care of everything else now once you think that you have that installed correctly then you should be able able to open up the editor of your choice here and in my case I have Sublime Text open up here and you should be able to type in from pil import image so if I run that you can see that my script ran with no output uh but there's also no errors so that's a good thing now this may be a little different than packages that you're used to working with uh it's a little strange that we did a pip install pillow and whenever we use the uh package we say from pil import the modules that you want but I think this is a from a naming convention that's just kind of been around for a while so it's how they still do it so now that we have pill installed uh let's start playing with some images so I have a couple of images here of my dog whenever he was a puppy that we can work with now these images are in the same directory as my python file here uh so I'll be able to reference them simply with their file names but if you're working with images that are in a different location then you can just use their full path to the image so first things first let's start off really simple and see if we can just display one of these images to the screen um so we're going to need to create an image object and I already have image imported here so now to create this image object let's just call this image one and I'm going to set it equal to image. openen and then the file name that I'm going to grab over here is pup one. jpeg so I'm going to say pup one. jpeg so now this gives me an image object that I can work with and you can do just about anything with this image object so what we're going to want to do is we're just going to do image one. show now if I run this command you can see here that my python script here did pull up this image and open it up in preview so let's go ahead and close that down so the fact that we were able to display that image to the screen now we know that we're working with the correct image so let's go ahead and do a simple modification to it so what if I wanted to uh save instead of a JPEG file What if I wanted to save that as a PNG instead uh well to do that we can use this save method now within the save method here I am just going to grab this file name here and instead of pup one. jpeg I'm just going to call this pup one.png and if I run this code you can see over here in my file system that now we have this pup one. JPEG and pup one.png and I can open that up just like I did the jpeg okay so now I'm going to delete this PNG that we just now created now uh now this is where the pillow Library really comes in handy is whenever we want to work with multiple images at a time so what if we wanted to convert all of these images to pngs so let's go ahead and do that I'm going to create a new folder here in my file system and I'm going to call this pngs and this will be the folder where I hold the PNG versions of all of these jpegs okay so first we're going to need a way to Loop over all of the images and our current directory now to do this I'm going to import the OS module now since this is a tutorial on the pillow Library I'm not going to go too in depth as to what the OS module is doing here but to Loop over the files in the current directory I'm just going to say for fn. list and then I'm just going to put a dot here for the current directory so that for Loop will Loop through everything in the current directory so now I'm going to say if F do ends with and then I'm going to say if it ends with a JPEG then at this point I'm just going to print out F so if we run this then we can see down here in our output that it printed out all of our jpegs that we have in the current directory so now that I know that that's working correctly I'm going to go ahead and make an image object out of each one of these so I'm just going to say I equals image do open F and save that so now I'm going to be saving all of these as a PNG file but I want to keep the same file name so I'm going to go ahead and split out the file name and the file extension uh from the file that I have so I'm going to say os. path. split text and pass in the file name so now this is going to break everything up into a file name and a file extension so if I print the file name and run this then you can see that we just got the file name without the extension and if I print the file extension and run that then you can see that we just get four jpegs so now to save all of those as pngs inside the PNG folder I'm just going to say I dove and then within here I can name the file so I'm going to say pngs to pass it into the pngs directory and then I will do the file name there do PNG then I'll do a format to pass in that file name and I'll save that and this should be a DOT right here that's typo so now if I run this code what it's going to go do is it's going to go through and make an image object out of each of these files and then save it into this pgs directory so I just ran that now if I open up this pngs directory you can see that we have all four of these files that have a PNG extension on them okay so that's one thing that you can do with a group of images but let's try to do that example I was talking about before I did on my website where instead of uh giving all the files a different extension let's see if we can resize each file so like I said this would be extremely useful on a web server or something similar if you want a resize version of all your files uh for thumbnails or image galleries so not only are we going to want to resize our file but we also want to keep the same aspect ratio too so that our photos don't get squished or distorted uh so first let's decide what maximum size we want our files to be so for this example I'm going to say that I want the size of our files to be let's say 300 so I'm going to make a variable here that's size uncore 300 and your image sizes need to be a tupal of the sizes so I'm just going to say 300 comma 300 so now in my file system over here I'm going to go ahead and create a new folder and I'm going to call this folder 300 and this will hold all of our 300 pixel file sizes so now that we've DEC ided on a file size here in my for Loop right above where I'm doing the save I'm just going to say i. thumbnail and I'm going to pass in this size of 300 here now I'm also going to modify my save down here to save into the 300 folder then I'm going to go ahead and do the original file name with an underscore 300 there and instead of this PNG extension I'm just going to go ahead and keep the regular extension and pass that in using the format so I'll say uh fext there to pass in that file extension so now if I run this what this does is it goes through and it makes an image object out of all these files and then it does a thumbnail to the size of 300 300 that we made up here and then it saves this into the 300 directory so if I go over here and open up our 300 directory you can see that we have our old file name uncore 300 uh jpeg so if I open up all these you can see that now these are a small 300 pixel version of the images of our original images now the great thing about being able to do this in Python is that we can just quickly and easily modify our script to accept any new sizes that we want so say for example that we suddenly had a requirement to do 700 uh pixel images as well uh so we can go through and just as easily add in another step to do 300 and 700 pixel images so if I change this to 700 here then what I'm going to do is I'm just going to copy all of this and then go down here and I'll do a size of 700 up here at top and then after it makes the 700 image then it'll go through and make the 300 size image so you can see that we have two different steps here so when it leaps through we're going to make the image object we're going to resize this to a 700 pixel thumbnail save it into a 700 directory here which I'm going to go ahead and create so I'll create that there and then we are going to resize it to a 300 pixel image and then save it into the 300 pixel folder so if I run this you can see that finished in half a second if I go into the 300 pixel folder you can see that we have our uh 300 pixel images there and if I go into the 700 pixel folder then we have our 700 pixel images there so you can see how a library like this will be ex would be extremely useful and it keeps you from doing a lot of this work that some people do manually every time they upload images to their website and it's how I used to do uh images for my website too I would go in and resize these fullsize images down one by one and then upload them to my web server but using a library like this makes all of that so much faster but so far we we' only touched on a few things that you can do with this Imaging Library so let me show you a few more things just to give you a few quick ideas uh before we end the video here so for example so far we've gone through and we've changed file extensions and we've resized the images but you can also rotate images you can make images black and white uh you can blur images and you can do all kinds of things uh so let's just walk through a couple of these examples so I'm going to go ahead and remove this entire for Loop here and I'm just going to work with one image at a time so it's a little bit more obvious what's going on but you could just as easily do all of these in that for loop as well and it would uh do that to all of your images okay so let me go ahead and uncomment out this code where I was working on this pup one. jpeg so first let me rotate an image so to rotate an image I'm going to do image one dot rotate and let's say that we just want to rotate at 90° so now after we rotate at 90 ° then I'm going to go ahead and run the save method on it and I will just call this I'll call it pup oneor mod. jpeg so if I run this code here then you can see we have this pup one mod and if I open this up you can see that that image has been rotated 90° okay now let's say that we wanted to make this image black and white now to do this instead of rotating 90° I'm going to do a convert and in inside what I'm going to pass into the convert I'm going to say mode equals L and save that and if I run that then you can see over here now our pup one mod if we open that up is a black and white image now just so you know I didn't memorize uh that convert and mode and L for the black and white I had to go and look that up in the documentation to get those values and when you first start working with libraries like this it's really not uh it's really not feasible to uh think that you're going to memorize all these off the top of your head so you really have to get comfortable with the documentation uh so whatever you're trying to do just go to the pillow documentation and find the values that you need and um and do it that way it's a great resource to learn what you can do with images but just to give you a further idea of a couple more things that you can do with these images uh let's go ahead and do one that's a little bit more complicated let's blur our image um so if we want to blur an image then we have to import another module up here so instead of just image let's go ahead and also import image filter so now if I want to blur my image that I can say image one. filter and within filter I'm going to pass in an image filter Dot and I'm going to do a gajian blur so if I go ahead and save this and run it if I open up this pup one mod here you can see that this doesn't seem very blurred and that's because we Ed the default values with this blur let me go ahead and make my text a actually I'm just going to spread this over a little bit so that you can see all of this text and I'll make this bigger again uh so you can see that we just did a gajian blur with uh the default values and the default values and I found this from the documentation it's a radius set to two which it does blur the image but just not very much so if if I replace that default value of two with say like a 15 and then I rerun this code now let's close down this image and we kind of already got a look at what it looks like but if we close down that image and then open it back up you can see that that blur is uh is much more blurred than it was before so I think that about does it for this video I hope that gives you some good ideas for what you can do with this uh image library in Python I do recommend going and checking out the documentation because there's so much more that you can do with images uh than just what was in this video but if you do have any questions about this stuff just feel free to ask in the comment section below uh be sure to subscribe for future python videos and thank you all for watching
