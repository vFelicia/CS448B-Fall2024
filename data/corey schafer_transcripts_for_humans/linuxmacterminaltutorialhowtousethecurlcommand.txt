With timestamps:

00:00 - hey everybody how's it going in this
00:02 - video we're going to be learning how to
00:03 - use the curl command so the curl command
00:05 - allows us to query URLs from the command
00:08 - line so not only can we make regular
00:10 - requests but we can post form data
00:12 - authenticate users save responses to
00:15 - files on our system and all kinds of
00:17 - useful stuff so I use this command a lot
00:20 - when I'm testing REST API s and things
00:23 - like that so let's go ahead and take a
00:25 - look at some examples so first let's
00:27 - just run a simple curl command so to do
00:29 - this we can just type in curl and then
00:32 - the website so I'm going to run curl on
00:35 - my personal website here so if I go
00:37 - ahead and run this then you can see that
00:40 - the response that we get back in the
00:41 - command line is all of the HTML and
00:45 - scripts and everything that is usually
00:47 - rendered by the browser but this is just
00:49 - all of it in text form now that's kind
00:51 - of a lot of text to work with so to
00:53 - simplify things a bit I have a sample
00:55 - website running on my local web server
00:57 - that I'm going to use for most of this
00:59 - tutorial so if instead I run a curl
01:02 - command on my localhost and that's going
01:07 - to be running on port 5,000 so now you
01:10 - can see that we get a small response
01:11 - that says that we've hit the test home
01:13 - page okay so now we're getting an HTML
01:16 - response from a URL but now let's see
01:19 - what else we can do so one thing I
01:21 - mentioned was that I used curl to test
01:23 - REST API s so let's go to a route that
01:26 - will return a JSON response and see what
01:28 - that looks like
01:29 - so I have a route set up on this local
01:32 - server that will return some JSON and
01:34 - that is just at test JSON actually that
01:38 - route is JSON test okay so you can see
01:41 - that we got a small sample JSON response
01:44 - here within the terminal so now let's
01:46 - say that we wanted to see the response
01:47 - header along with the content so to do
01:50 - this we can run the same command but I'm
01:53 - going to add a dash I here at the
01:57 - beginning now we could also use a dash
01:59 - dash include but the dash I is for short
02:02 - so if I go ahead and run this so now you
02:06 - can see that we got some extra
02:07 - information here with the response
02:09 - header so we can see that we got a 200
02:12 - response and that the content
02:13 - is JSON and we can also see some server
02:16 - information and things like that okay so
02:18 - now what if instead of just getting
02:20 - information we wanted to post update or
02:24 - delete information now this is also
02:26 - pretty common when working with REST API
02:28 - or other websites so curl has the
02:31 - ability to use different HTTP methods
02:33 - when requesting a URL so I have a simple
02:36 - route here that will change its output
02:39 - based on the request that it receives so
02:42 - for example if I just do a curl on this
02:47 - methods route and I'm going to go ahead
02:49 - and remove that - I you can see that the
02:52 - response that we got back was that we
02:54 - sent a get request so now let's say that
02:56 - we wanted to simulate submitting form
02:59 - data to the same URL now if you're
03:01 - familiar with HTTP methods then this
03:04 - would be a post request so in order to
03:07 - post some data to this URL we can use
03:09 - the - D option now we could also use - -
03:14 - data but the - D is the shorthand for
03:17 - that so now let's go ahead and what data
03:21 - do we want to post so this is kind of
03:23 - like how we would put parameters into a
03:26 - URL so I'm going to say first equals
03:28 - Corey and last equals Schaefer and let's
03:31 - go ahead and send that so now you can
03:33 - see when I post data to that route that
03:36 - it says that we sent a post request and
03:38 - it also gives us the information that we
03:41 - posted so the post method is used by
03:43 - default when we send in data but we
03:46 - could also be wanting to update the data
03:48 - so we can do that by using the put
03:51 - method so to do this we have to
03:53 - specifically specify put and we can do
03:56 - that by at the beginning here we can say
03:59 - - capital X that's a capital X and then
04:03 - we can just say put and so now for
04:05 - example let's say that I wanted to
04:06 - update this to Cory Smith instead of
04:10 - Corey Schaeffer so now if I run that you
04:13 - can see that it responds back and says
04:15 - that we sent a put request with the
04:17 - information that we sent in and lastly
04:19 - if we wanted to do a elite then we could
04:22 - come in here and just remove this data
04:25 - and we could just send in
04:27 - a delete instead and you can see that it
04:30 - catches that we sent that delete request
04:33 - okay so what else can we do with the
04:35 - curl command so sometimes you'll run
04:38 - into routes that require authentication
04:40 - so for example here I have a test route
04:44 - that requires a username and password
04:46 - and if I try to run curl command on that
04:49 - route without requiring a username and
04:52 - password and that is just here at this
04:54 - secret route then you can see that it
04:57 - says that it couldn't verify our access
04:59 - and that we have to provide a valid
05:01 - username and password so to provide a
05:04 - username and password we can use the -
05:07 - you option and after that - you then we
05:12 - can pass in the username and password
05:13 - and for this route my user name is kori
05:16 - and my password is passed so first we
05:19 - pass in the username and we separate
05:22 - that with a colon and then the password
05:25 - so now if I do that and post that to the
05:29 - route then you can see that it says that
05:30 - we were successfully authenticated ok so
05:33 - another thing that people commonly need
05:37 - to do with curl is that they need to be
05:39 - able to download the response from a
05:41 - route so I have a download route here
05:45 - which sends a picture file now if I just
05:48 - curl the download route without any
05:51 - other options then you can see that we
05:54 - get back a bunch of gibberish and that's
05:57 - because we're seeing the binary file
05:59 - represented in text so to actually
06:01 - download this file we can use the - Oh
06:07 - option so if I do - oh now we could also
06:11 - do - - output but - oh is the shorthand
06:15 - for that so I'm just going to call this
06:17 - test dot jpg so we're saying that we
06:21 - want to download the response of that
06:23 - route so if I go ahead and do that then
06:26 - you can see that it pulls up the
06:27 - information here of our average download
06:30 - speed and things like that so now if I
06:32 - look here in my current directory then
06:35 - you can see that we did download that
06:37 - image and if I open that image
06:41 - then you can see that we did download
06:42 - that successfully from the route now
06:45 - saving your responses isn't only useful
06:47 - for file downloads now I use this all
06:51 - the time when I want to save a large
06:53 - JSON response directly from a route so
06:56 - for example here if I go down to Google
06:59 - and pull up this web page here I have
07:02 - github public API pulled up here on my
07:05 - browser and I've navigated to a route
07:07 - that returns JSON information of the
07:10 - commits that I've made to this demo
07:11 - repository so instead of trying to copy
07:15 - and paste this into a file manually
07:17 - let's just download this using curl so
07:21 - what I'm going to do is I'm going to
07:22 - come up here and copy this route and
07:25 - then pull back open my terminal so to do
07:28 - this we would just do curl and then - OH
07:31 - - save the output and I'm just going to
07:33 - call this commits JSON and then paste in
07:36 - that route so now if we do an LS on this
07:40 - directory you can see that we have this
07:42 - commits JSON and if I open this up then
07:46 - you can see that we did get all that
07:48 - information saved so now we have it
07:50 - saved for later use if we want to do any
07:53 - analysis or anything like that so it's
07:55 - really useful okay so I think that is
07:58 - going to do it for this video I hope
08:00 - that this introduction to the curl
08:02 - command gives you an idea for how useful
08:04 - of the tool it can be but really we only
08:06 - scratch the surface of what all it can
08:08 - do so it can be used to transfer files
08:11 - pass cookies test connection speeds and
08:14 - all kinds of useful stuff so hopefully
08:16 - after this video you'll have a few ideas
08:17 - for how you can begin using curl from
08:20 - day to day but if you do have any
08:22 - questions and feel free to ask in the
08:23 - comment section below and I'll do my
08:25 - best to answer those if you enjoy these
08:26 - tutorials and would like to support them
08:28 - then there are several ways you can do
08:29 - that the easiest way is to simply like
08:31 - the video and give it a thumbs up and
08:33 - also it's a huge help to share these
08:35 - videos with others who you think would
08:36 - find them useful and if you have the
08:38 - means you can contribute through patreon
08:40 - and there's a link to that page in the
08:42 - description section below be sure to
08:44 - subscribe for future videos and thank
08:46 - you all for watching
08:48 - you

Cleaned transcript:

hey everybody how's it going in this video we're going to be learning how to use the curl command so the curl command allows us to query URLs from the command line so not only can we make regular requests but we can post form data authenticate users save responses to files on our system and all kinds of useful stuff so I use this command a lot when I'm testing REST API s and things like that so let's go ahead and take a look at some examples so first let's just run a simple curl command so to do this we can just type in curl and then the website so I'm going to run curl on my personal website here so if I go ahead and run this then you can see that the response that we get back in the command line is all of the HTML and scripts and everything that is usually rendered by the browser but this is just all of it in text form now that's kind of a lot of text to work with so to simplify things a bit I have a sample website running on my local web server that I'm going to use for most of this tutorial so if instead I run a curl command on my localhost and that's going to be running on port 5,000 so now you can see that we get a small response that says that we've hit the test home page okay so now we're getting an HTML response from a URL but now let's see what else we can do so one thing I mentioned was that I used curl to test REST API s so let's go to a route that will return a JSON response and see what that looks like so I have a route set up on this local server that will return some JSON and that is just at test JSON actually that route is JSON test okay so you can see that we got a small sample JSON response here within the terminal so now let's say that we wanted to see the response header along with the content so to do this we can run the same command but I'm going to add a dash I here at the beginning now we could also use a dash dash include but the dash I is for short so if I go ahead and run this so now you can see that we got some extra information here with the response header so we can see that we got a 200 response and that the content is JSON and we can also see some server information and things like that okay so now what if instead of just getting information we wanted to post update or delete information now this is also pretty common when working with REST API or other websites so curl has the ability to use different HTTP methods when requesting a URL so I have a simple route here that will change its output based on the request that it receives so for example if I just do a curl on this methods route and I'm going to go ahead and remove that I you can see that the response that we got back was that we sent a get request so now let's say that we wanted to simulate submitting form data to the same URL now if you're familiar with HTTP methods then this would be a post request so in order to post some data to this URL we can use the D option now we could also use data but the D is the shorthand for that so now let's go ahead and what data do we want to post so this is kind of like how we would put parameters into a URL so I'm going to say first equals Corey and last equals Schaefer and let's go ahead and send that so now you can see when I post data to that route that it says that we sent a post request and it also gives us the information that we posted so the post method is used by default when we send in data but we could also be wanting to update the data so we can do that by using the put method so to do this we have to specifically specify put and we can do that by at the beginning here we can say capital X that's a capital X and then we can just say put and so now for example let's say that I wanted to update this to Cory Smith instead of Corey Schaeffer so now if I run that you can see that it responds back and says that we sent a put request with the information that we sent in and lastly if we wanted to do a elite then we could come in here and just remove this data and we could just send in a delete instead and you can see that it catches that we sent that delete request okay so what else can we do with the curl command so sometimes you'll run into routes that require authentication so for example here I have a test route that requires a username and password and if I try to run curl command on that route without requiring a username and password and that is just here at this secret route then you can see that it says that it couldn't verify our access and that we have to provide a valid username and password so to provide a username and password we can use the you option and after that you then we can pass in the username and password and for this route my user name is kori and my password is passed so first we pass in the username and we separate that with a colon and then the password so now if I do that and post that to the route then you can see that it says that we were successfully authenticated ok so another thing that people commonly need to do with curl is that they need to be able to download the response from a route so I have a download route here which sends a picture file now if I just curl the download route without any other options then you can see that we get back a bunch of gibberish and that's because we're seeing the binary file represented in text so to actually download this file we can use the Oh option so if I do oh now we could also do output but oh is the shorthand for that so I'm just going to call this test dot jpg so we're saying that we want to download the response of that route so if I go ahead and do that then you can see that it pulls up the information here of our average download speed and things like that so now if I look here in my current directory then you can see that we did download that image and if I open that image then you can see that we did download that successfully from the route now saving your responses isn't only useful for file downloads now I use this all the time when I want to save a large JSON response directly from a route so for example here if I go down to Google and pull up this web page here I have github public API pulled up here on my browser and I've navigated to a route that returns JSON information of the commits that I've made to this demo repository so instead of trying to copy and paste this into a file manually let's just download this using curl so what I'm going to do is I'm going to come up here and copy this route and then pull back open my terminal so to do this we would just do curl and then OH save the output and I'm just going to call this commits JSON and then paste in that route so now if we do an LS on this directory you can see that we have this commits JSON and if I open this up then you can see that we did get all that information saved so now we have it saved for later use if we want to do any analysis or anything like that so it's really useful okay so I think that is going to do it for this video I hope that this introduction to the curl command gives you an idea for how useful of the tool it can be but really we only scratch the surface of what all it can do so it can be used to transfer files pass cookies test connection speeds and all kinds of useful stuff so hopefully after this video you'll have a few ideas for how you can begin using curl from day to day but if you do have any questions and feel free to ask in the comment section below and I'll do my best to answer those if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with others who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
