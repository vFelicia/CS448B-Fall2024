With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're going to be using
00:03 - python and the youtube api to find the
00:05 - most popular videos in a playlist
00:07 - now i want to say right off the bat that
00:09 - this is going to be very similar to the
00:11 - last video i covered where we used
00:12 - python and the youtube api
00:14 - to calculate the total duration of a
00:16 - playlist so if you haven't watched that
00:18 - video yet
00:18 - then i'd recommend watching that first
00:20 - because i'm going to use our final
00:22 - script from that video
00:24 - as a starting point for this video so
00:26 - like i said we're going to be using
00:28 - python and the youtube api
00:30 - to find the most popular videos in a
00:32 - playlist now this is another script that
00:34 - i use a lot personally
00:36 - and let me show you why so i have the
00:39 - euro python 2019
00:42 - playlist pulled up here in my browser
00:45 - now i like to watch conference videos to
00:47 - keep up to date with the latest
00:48 - changes in python and new techniques and
00:50 - technologies
00:52 - but i don't really have time to watch
00:53 - every talk from every conference
00:56 - we can see here uh that if i look at
00:58 - this playlist
00:59 - that there are if i scroll all the way
01:01 - to the bottom here
01:02 - there are about 133
01:07 - talks uh that were uploaded to this
01:10 - conference playlist
01:11 - and a lot of these talks are 45 minutes
01:14 - to an hour
01:15 - so maybe i just want to watch the most
01:18 - popular videos from a specific playlist
01:21 - instead of watching every single video
01:23 - and on the youtube
01:24 - site there's not actually a way for us
01:26 - to sort these playlists
01:28 - by the most popular videos now if i go
01:30 - to their
01:31 - videos page here then i can
01:34 - sort by their most popular videos so if
01:37 - i go to their videos then we can click
01:39 - on most popular here
01:41 - but this is for their entire channel so
01:43 - we can see here that
01:44 - uh their most popular video was from
01:47 - eight years ago
01:48 - so that's definitely uh not from last
01:50 - year's conference
01:51 - so if i wanted to know the most popular
01:53 - video from a particular playlist
01:56 - then i'd have to go through and look at
01:58 - those views manually
02:00 - and doing this for different playlists
02:02 - just isn't really practical
02:03 - so we're going to learn how to find the
02:05 - most popular videos from a playlist
02:07 - automatically using python and the
02:09 - youtube api
02:10 - so with that said let's go ahead and get
02:12 - started now like i said i'm going to use
02:14 - our final script from the playlist
02:16 - duration video
02:17 - as a starting point for what we want to
02:20 - do here
02:21 - and i've already got this pulled up here
02:22 - in my browser or i'm sorry i have this
02:24 - pulled up here in my editor
02:26 - and as usual i'll have a link to all the
02:28 - code in the description section below
02:30 - if anyone would like to follow along
02:32 - okay so the script that we have here
02:34 - that we wrote in the previous video will
02:37 - calculate the total duration of a
02:39 - playlist given a playlist id
02:41 - so let's go over this script here real
02:43 - quick and see what it does
02:44 - and then we'll look at how to adapt this
02:46 - script to do what we need
02:48 - okay so we are first importing some
02:50 - libraries here
02:52 - uh we are importing the google api
02:54 - client
02:55 - uh we're setting up our api key here and
02:58 - connecting to the youtube
02:59 - service uh here is where we have some
03:02 - regular expressions
03:04 - that will calculate the total time in a
03:06 - video
03:08 - and then what we are doing here is
03:10 - looping over
03:12 - all of the videos in a particular
03:14 - playlist
03:16 - and then we are making that uh execution
03:19 - to the api
03:20 - and then what we do here is we scroll
03:23 - through and grab
03:24 - all of the video ids here um
03:27 - and then we make a request
03:31 - to the videos resource using those
03:35 - video ids and then we loop through
03:39 - all of those responses for all of the
03:41 - videos in that playlist
03:42 - and in this example we're grabbing the
03:44 - total duration and parsing those
03:46 - out and then just adding those up so
03:48 - that we can get the total duration for
03:50 - a playlist now like i said i go much
03:53 - more in
03:54 - detail into this script in the previous
03:57 - video where we initially wrote this
03:59 - so that is a quick overview of
04:02 - our script okay so now that we've gone
04:05 - over this script to calculate the total
04:07 - duration
04:08 - now let's run this script here using
04:11 - that euro python
04:12 - playlist and then we'll think about how
04:14 - we want to change
04:16 - uh this script so that we're instead
04:18 - grabbing the most popular videos
04:20 - there are a few different ways that we
04:21 - can get the playlist id
04:23 - but i'm just going to go directly to the
04:25 - playlist that i want
04:28 - and grab that id directly so i want
04:31 - the euro python 2019 playlist let me
04:34 - pause this again here
04:36 - now if we go up to the url here one way
04:39 - to grab
04:39 - a playlist id is it's just a parameter
04:42 - here in the url so we can see i know
04:44 - that this is probably a little
04:46 - small on my monitor but we have one
04:48 - argument that says list
04:50 - is equal to and then a big long id and
04:52 - that
04:53 - is the playlist id so i'm just going to
04:55 - copy that
04:56 - and then now that we have that let's go
04:59 - paste this into our script from the last
05:02 - video
05:02 - now in the last video i put the playlist
05:05 - id
05:06 - directly here in our query just to make
05:09 - clear uh what the playlist id
05:12 - is let's go ahead and create a new
05:14 - variable here called playlist id
05:18 - i probably should have done this in the
05:19 - last video
05:21 - but that's okay we'll go ahead and do it
05:22 - here so i'm going to place that
05:25 - playlist id out here and now within
05:28 - our api query here i'm just going to use
05:31 - that variable
05:32 - instead of that string directly okay so
05:35 - right now this script is going to
05:36 - calculate the total duration of an
05:38 - entire playlist
05:40 - so let's run this real quick to make
05:42 - sure that this is still working properly
05:44 - with this specific playlist so if we run
05:48 - this
05:49 - then we can see that this does seem to
05:51 - be working
05:52 - and it's telling us that the playlist
05:54 - has almost 77
05:55 - hours worth of content so this is still
05:58 - working
05:59 - but now we want to modify this script to
06:02 - instead give us the most popular videos
06:04 - from this playlist
06:05 - so let's go ahead and start changing
06:07 - some of our code
06:08 - so first of all we're no longer going to
06:11 - need
06:12 - to do any calculations with the video
06:14 - durations
06:15 - so we can just go ahead and remove all
06:17 - of the stuff
06:19 - like you know date time and regular
06:21 - expression stuff that we were using
06:22 - before
06:23 - so let me scroll up here and see what we
06:25 - don't really need anymore
06:26 - uh so we're not going to need regular
06:28 - expressions since we were using that to
06:30 - parse out the duration of the videos
06:33 - we're not going to need
06:34 - the date time library anymore we're also
06:37 - not going to need our regular
06:39 - expressions here so i will
06:40 - just delete all of these compiled
06:42 - regular expressions
06:45 - we're not going to need total seconds
06:47 - and
06:48 - let me see what else down here so if i
06:50 - scroll down
06:52 - uh to where we were actually parsing out
06:55 - the duration from these videos
06:56 - we can get rid of these hours
07:00 - minutes and seconds here
07:03 - and also we can get rid of this section
07:05 - where we were converting these
07:07 - uh to a time delta or to total seconds
07:11 - and also i'm not going to need the total
07:13 - seconds here
07:14 - so and there's one more uh right
07:18 - here so i can take out i'll just take
07:20 - out this entire
07:22 - bottom part we are where we're
07:23 - calculating those total seconds
07:25 - uh and uh turning those into minutes or
07:28 - hours minutes and seconds and i'll get
07:29 - rid of the print statement as well
07:31 - okay so now i think we have i think the
07:34 - 38 lines that we have here
07:36 - basically just loops through a playlist
07:39 - and all of the videos in that specific
07:41 - playlist so just to say that again
07:44 - now that we've removed all of that code
07:46 - basically all that's left
07:48 - is that we are looping over all of the
07:50 - videos in a playlist
07:51 - and then making a request with each
07:54 - video id
07:55 - to get more detailed information about
07:57 - each video
07:58 - now right now the information that we're
08:00 - getting back is the video
08:02 - duration if i look um right
08:06 - here but we can instead change this so
08:08 - that we're getting the number of views
08:10 - that each video has instead
08:12 - that way we can sort these by the most
08:14 - popular videos so to figure out how to
08:16 - do this we can
08:17 - look at the documentation online and see
08:20 - what properties of the video we need to
08:22 - access
08:22 - and i have that open here in my browser
08:26 - so let's take a look at this
08:27 - documentation to see how we would figure
08:29 - this out
08:30 - okay so if you want to see what is
08:32 - available to you so right now we're in
08:34 - the videos resource here if we want to
08:36 - see what's available to us we can go
08:38 - down to
08:39 - resource representation so we can see
08:41 - here that it says the following json
08:43 - structure
08:44 - shows the format of a videos resource
08:47 - so if i look at this we can see that
08:49 - there's a lot of information here
08:51 - but the one that i would be interested
08:53 - in is
08:56 - if we go down here to statistics we can
08:59 - see that
08:59 - in statistics we have this view count
09:03 - now i'm going to base the most popular
09:05 - video based off of view count
09:07 - but if you wanted to you could also base
09:09 - it off of like
09:10 - count and or how many comments there are
09:13 - things like that
09:14 - so now we know that in order to get the
09:16 - view count for each video
09:17 - we need to access the statistics of each
09:20 - video
09:20 - and then we can access the view count
09:23 - from those statistics
09:24 - so let's go back to our script and add
09:26 - this so
09:28 - back in our script here up here
09:31 - where we had content details we no
09:34 - longer want the content details we want
09:36 - those uh statistics so i will
09:39 - put that in instead and now down here in
09:43 - our loop
09:43 - uh where we were looping through and
09:46 - getting the duration from those content
09:48 - details
09:49 - now we want to access the statistics
09:53 - and then within the statistics we want
09:56 - the view count now that is camelcase
09:58 - there again
09:59 - if you need to get a reference for that
10:02 - then you can look at the documentation
10:03 - we can see that it is camelcased
10:05 - here so now if i go back to the script
10:07 - now i'm also going to change this
10:09 - variable name here
10:10 - instead of duration let's just call this
10:12 - vid underscore
10:13 - views okay now we're also going to want
10:17 - links to the most popular videos after
10:19 - we sort by
10:20 - uh view count so to create a youtube
10:23 - link
10:23 - all we need to do is grab the video id
10:26 - and then we can create
10:27 - a link manually ourselves so we can do
10:30 - this
10:31 - uh just by saying vid id is equal to
10:35 - now to access the id we can just say
10:38 - item
10:38 - and access the id key
10:42 - and now to create a a link manually
10:46 - what we can do here is i'll just create
10:49 - an f string
10:51 - and this is going to be https
10:54 - colon forward slash forward slash now
10:57 - here's how
10:58 - youtube links are structured so this is
11:00 - the
11:01 - shorthand uh youtube links here
11:04 - so u2 dot be
11:08 - and then we can just do a forward slash
11:11 - and then pass
11:11 - in the video id so
11:15 - i will go ahead and do that
11:18 - okay so right now let's think about what
11:20 - we've done here so far
11:22 - so we are looping over the playlist and
11:25 - we are accessing each video
11:28 - in that playlist and then we are
11:30 - grabbing the view counts
11:31 - and creating a link a link for each
11:34 - video in the playlist
11:35 - so now in order to sort these we can
11:38 - simply
11:39 - add all of this information to a list
11:41 - and then sort the list
11:42 - based on the number of views so first
11:45 - let's create a global list here
11:47 - where we can add this information so up
11:50 - here at the top
11:51 - which is outside of our loop right above
11:54 - this next page token here
11:56 - i'm just going to create an empty list
11:58 - with a variable name of
12:00 - videos and the information that we're
12:02 - going to add for each video
12:03 - is going to be the view count and the
12:05 - link for that video
12:07 - so each video can just be a dictionary
12:10 - with
12:10 - those two pieces of information so down
12:13 - here
12:14 - back under our
12:17 - video id and youtube link let's just
12:20 - append
12:21 - this information to our videos list
12:24 - so i'll say videos dot append and now
12:28 - what we want to append is going to be
12:30 - dictionary information
12:32 - so let me get this looking correct okay
12:35 - so first
12:36 - i'm going to add the information for the
12:39 - views
12:40 - and the views will just be we
12:43 - could do video views here
12:47 - now i'm not sure how this information
12:49 - comes back i think this information
12:52 - comes back as a string so just to make
12:54 - sure that this
12:55 - is an integer that we can sort on let's
12:58 - go ahead
12:58 - and cast this to an integer just to be
13:01 - sure
13:02 - because if it was a string then
13:05 - then it wouldn't uh work correctly all
13:07 - of the ones
13:08 - so a one and a one hundred would come
13:10 - before
13:11 - two but if it's an integer then you know
13:13 - it'd be one
13:15 - two and then a hundred so hopefully that
13:17 - makes sense
13:18 - and now let's also add the url here
13:21 - and the url is just going to be that
13:24 - youtube link
13:25 - okay so now we are adding uh
13:28 - each of these videos information to our
13:32 - videos list as a dictionary so our
13:35 - videos list
13:36 - is going to be a list of dictionaries so
13:39 - before we sort this
13:40 - let's just print out some of these
13:42 - values and see if our script is working
13:44 - so far
13:45 - because we've actually written a good
13:46 - bit of code so far without testing that
13:48 - any of this is working so far
13:51 - so back on our main level here outside
13:54 - of that
13:54 - while loop let's loop over our videos
13:58 - and print out the url
13:59 - and view count for each video so to do
14:02 - this we can just say
14:03 - 4 video in videos
14:07 - and i will print out remember this is a
14:10 - dictionary
14:11 - so i'm just going to print out the video
14:15 - and access that url key and i'll also
14:18 - print out the
14:19 - video views and access that views key
14:23 - and also while we're at it let's go
14:26 - ahead and
14:26 - also print out the number of videos
14:30 - in our videos list if you remember back
14:32 - at the beginning of the video we saw
14:34 - that there were
14:34 - 133 videos in the playlist for this
14:37 - conference
14:38 - so we should probably check to make sure
14:41 - that those numbers are matching up
14:43 - correctly so
14:44 - outside of our for loop here i'm going
14:46 - to print
14:47 - the length of our videos
14:50 - list okay so now let's run this
14:54 - and see if what we have so far is
14:56 - working okay so we can see down here at
14:58 - the bottom
14:59 - that it did print out that there are 133
15:01 - videos
15:02 - and each of these videos prints out the
15:04 - url
15:05 - and view count of each video so now we
15:08 - should be able to simply
15:10 - uh sort our list of videos in order to
15:12 - get the most popular videos
15:14 - first now if you're unfamiliar with
15:16 - sorting and python
15:18 - then i do have a video specifically on
15:20 - sorting and i'll be sure to leave a link
15:22 - to that video in the description section
15:23 - below
15:24 - in case anyone is interested but in this
15:27 - case
15:28 - since we're sorting a list of
15:29 - dictionaries then we'll have to pass
15:31 - in our own custom key so let me actually
15:34 - sort
15:35 - this videos list in place
15:38 - before i loop over these videos so
15:41 - to sort a list in place we can just say
15:44 - videos.sort
15:46 - and now we need to pass in our own
15:48 - custom key
15:49 - now this custom key is going to be a
15:52 - function
15:53 - uh telling python what we want to sort
15:56 - these videos on now this could be a
16:00 - a function that we write ourselves up
16:02 - here
16:03 - but if you just want to write an inline
16:06 - function
16:07 - then we can write a lambda function
16:09 - which is basically just
16:10 - an anonymous function but if
16:13 - you aren't familiar with lambda
16:15 - functions then you can always
16:17 - just write your own custom function as
16:18 - well but to do a lambda function
16:21 - we can just say lambda and then
16:24 - what our variable is going to be i'll
16:26 - just call this vid
16:27 - and now we need to specify our return
16:30 - value here
16:32 - so what this is saying is okay
16:35 - when you're looping through this list
16:37 - here
16:38 - you're going to see a bunch of videos so
16:41 - what do we want to sort on with
16:43 - with these videos we want to sort on vid
16:47 - and access that views key
16:50 - and sort on that views key now uh
16:53 - by default this will sort
16:56 - in ascending order so the lowest views
16:59 - will be
16:59 - first and then go down to the highest
17:01 - views we actually want to get the
17:03 - highest views first
17:05 - so we can just say that we want reverse
17:07 - is equal to true
17:08 - and that will give us the um the highest
17:11 - viewed videos
17:12 - first and also let me go ahead and
17:15 - remove our print statement for the
17:17 - length of videos as well
17:19 - since we already made sure that that
17:21 - looked right
17:23 - okay so now if we run this code
17:26 - then scroll up here at the top then our
17:29 - output should be sorted
17:31 - with all of the most popular videos of
17:33 - this playlist at the top
17:36 - so we can see here that the most watched
17:38 - talk from this conference
17:39 - had over uh 5 500 views
17:43 - and if we copy the link and paste this
17:46 - into
17:47 - our browser just to make sure that this
17:49 - is a valid link
17:51 - then we can see that
17:54 - yes we have the same number of views
17:56 - here 5 almost 5
17:58 - 500 and it looks like this was a video
18:01 - on
18:02 - python versus rust for simulation so you
18:05 - know that might be a cool video to watch
18:06 - if that's something that sounds
18:08 - interesting to you
18:10 - so we've pretty much done what we set
18:12 - out to do here
18:13 - now if you'd like to see you know just
18:15 - the top 10 videos or something like that
18:18 - then instead of print looping over the
18:21 - entire playlist
18:22 - we could always just use list slicing
18:25 - when printing out this information so
18:27 - for example to see the top 10 videos
18:30 - from this conference
18:31 - then right here where we are looping
18:33 - over these videos i could just use
18:35 - list slicing here and say that we want
18:38 - up to the 10th video
18:40 - so if i run this then
18:44 - this will you can see that we have a lot
18:46 - less videos here now
18:47 - and that will simply loop over the first
18:49 - 10 values
18:51 - of our sorted list now you might notice
18:54 - some discrepancies here with the views
18:57 - it says that this is 5500 here and if we
19:00 - go back to
19:01 - our browser it says that this is only
19:04 - 5400 or so
19:06 - the reason is uh because sometimes the
19:09 - information that is displayed
19:11 - publicly might not get updated all the
19:14 - time
19:14 - um but it's just a small difference here
19:17 - sometimes the api
19:18 - data can be slightly different than
19:20 - what's on the front page
19:21 - just depending on how often uh each
19:23 - section gets updated
19:25 - but like i said this is pretty much what
19:26 - we set out to do here uh so now
19:29 - we have a way to grab the you know the
19:32 - top
19:32 - viewed videos from a specific playlist
19:35 - now if you'd like to take this a step
19:37 - further
19:38 - with practicing programming then there
19:41 - are a lot of
19:42 - ways that we could do something like
19:44 - this
19:45 - but maybe with a better front end so for
19:48 - example you could create a web
19:50 - application
19:51 - either using flask or django that allows
19:54 - people to
19:55 - paste in a playlist and then sort
19:58 - playlists like this
19:59 - and then display the embedded videos on
20:01 - a web page
20:02 - in that order so that they can go
20:05 - through them each individually
20:07 - doing things like that is always good
20:09 - for learning to take
20:10 - what we learn in these videos and apply
20:12 - them to larger projects in some way
20:15 - and like i said just writing scripts
20:17 - like this for myself
20:18 - i use scripts like this all the time
20:21 - whenever
20:22 - you know i'm watching a particular
20:23 - playlist and i just want to watch
20:25 - the most popular ones okay so i think
20:28 - that's going to do it for this video
20:30 - i hope you feel like you have a better
20:31 - grasp of using the youtube api
20:34 - with python and also getting an idea of
20:36 - some of the cool and practical things
20:38 - that we can do with this knowledge
20:40 - now like i said i've already seen some
20:41 - comments from a few different viewers
20:43 - that said that they were going
20:44 - to turn the tools that we're building
20:46 - here into either flask or django web
20:48 - applications so that the general public
20:50 - can use tools like this as well
20:52 - and i think that's a great idea it's you
20:55 - know it's also possible to take
20:56 - the knowledge that we learn here in
20:58 - these areas and make some good
21:00 - supplemental income so for example if
21:03 - you use the api to create something
21:05 - useful like we did here for others and
21:07 - then put it into
21:08 - a website for the general public to use
21:11 - then i could definitely see that
21:12 - bringing in some extra income based on
21:15 - the
21:16 - traffic coming to your site so yeah i
21:18 - always think it's a good idea to take
21:20 - what we learn here
21:21 - and maybe try to adapt it to your own
21:23 - and put it into
21:25 - maybe an app or a website or something
21:27 - like that
21:28 - but if anyone has any questions about
21:30 - what we covered in this video
21:31 - then feel free to ask in the comments
21:33 - section below and i'll do my best to
21:34 - answer those
21:35 - and if you enjoy these tutorials and
21:36 - would like to support them then there
21:38 - are several ways you can do that
21:39 - the easiest way is to simply like the
21:41 - video and give it a thumbs up and also
21:42 - it's a huge help to share these videos
21:44 - with anyone who you think would find
21:45 - them useful
21:46 - and if you have the means you can
21:47 - contribute through patreon or youtube
21:49 - and there are links to those pages in
21:51 - the description section below
21:52 - be sure to subscribe for future videos
21:54 - and thank you all for watching
22:07 - you

Cleaned transcript:

hey there how's it going everybody in this video we're going to be using python and the youtube api to find the most popular videos in a playlist now i want to say right off the bat that this is going to be very similar to the last video i covered where we used python and the youtube api to calculate the total duration of a playlist so if you haven't watched that video yet then i'd recommend watching that first because i'm going to use our final script from that video as a starting point for this video so like i said we're going to be using python and the youtube api to find the most popular videos in a playlist now this is another script that i use a lot personally and let me show you why so i have the euro python 2019 playlist pulled up here in my browser now i like to watch conference videos to keep up to date with the latest changes in python and new techniques and technologies but i don't really have time to watch every talk from every conference we can see here uh that if i look at this playlist that there are if i scroll all the way to the bottom here there are about 133 talks uh that were uploaded to this conference playlist and a lot of these talks are 45 minutes to an hour so maybe i just want to watch the most popular videos from a specific playlist instead of watching every single video and on the youtube site there's not actually a way for us to sort these playlists by the most popular videos now if i go to their videos page here then i can sort by their most popular videos so if i go to their videos then we can click on most popular here but this is for their entire channel so we can see here that uh their most popular video was from eight years ago so that's definitely uh not from last year's conference so if i wanted to know the most popular video from a particular playlist then i'd have to go through and look at those views manually and doing this for different playlists just isn't really practical so we're going to learn how to find the most popular videos from a playlist automatically using python and the youtube api so with that said let's go ahead and get started now like i said i'm going to use our final script from the playlist duration video as a starting point for what we want to do here and i've already got this pulled up here in my browser or i'm sorry i have this pulled up here in my editor and as usual i'll have a link to all the code in the description section below if anyone would like to follow along okay so the script that we have here that we wrote in the previous video will calculate the total duration of a playlist given a playlist id so let's go over this script here real quick and see what it does and then we'll look at how to adapt this script to do what we need okay so we are first importing some libraries here uh we are importing the google api client uh we're setting up our api key here and connecting to the youtube service uh here is where we have some regular expressions that will calculate the total time in a video and then what we are doing here is looping over all of the videos in a particular playlist and then we are making that uh execution to the api and then what we do here is we scroll through and grab all of the video ids here um and then we make a request to the videos resource using those video ids and then we loop through all of those responses for all of the videos in that playlist and in this example we're grabbing the total duration and parsing those out and then just adding those up so that we can get the total duration for a playlist now like i said i go much more in detail into this script in the previous video where we initially wrote this so that is a quick overview of our script okay so now that we've gone over this script to calculate the total duration now let's run this script here using that euro python playlist and then we'll think about how we want to change uh this script so that we're instead grabbing the most popular videos there are a few different ways that we can get the playlist id but i'm just going to go directly to the playlist that i want and grab that id directly so i want the euro python 2019 playlist let me pause this again here now if we go up to the url here one way to grab a playlist id is it's just a parameter here in the url so we can see i know that this is probably a little small on my monitor but we have one argument that says list is equal to and then a big long id and that is the playlist id so i'm just going to copy that and then now that we have that let's go paste this into our script from the last video now in the last video i put the playlist id directly here in our query just to make clear uh what the playlist id is let's go ahead and create a new variable here called playlist id i probably should have done this in the last video but that's okay we'll go ahead and do it here so i'm going to place that playlist id out here and now within our api query here i'm just going to use that variable instead of that string directly okay so right now this script is going to calculate the total duration of an entire playlist so let's run this real quick to make sure that this is still working properly with this specific playlist so if we run this then we can see that this does seem to be working and it's telling us that the playlist has almost 77 hours worth of content so this is still working but now we want to modify this script to instead give us the most popular videos from this playlist so let's go ahead and start changing some of our code so first of all we're no longer going to need to do any calculations with the video durations so we can just go ahead and remove all of the stuff like you know date time and regular expression stuff that we were using before so let me scroll up here and see what we don't really need anymore uh so we're not going to need regular expressions since we were using that to parse out the duration of the videos we're not going to need the date time library anymore we're also not going to need our regular expressions here so i will just delete all of these compiled regular expressions we're not going to need total seconds and let me see what else down here so if i scroll down uh to where we were actually parsing out the duration from these videos we can get rid of these hours minutes and seconds here and also we can get rid of this section where we were converting these uh to a time delta or to total seconds and also i'm not going to need the total seconds here so and there's one more uh right here so i can take out i'll just take out this entire bottom part we are where we're calculating those total seconds uh and uh turning those into minutes or hours minutes and seconds and i'll get rid of the print statement as well okay so now i think we have i think the 38 lines that we have here basically just loops through a playlist and all of the videos in that specific playlist so just to say that again now that we've removed all of that code basically all that's left is that we are looping over all of the videos in a playlist and then making a request with each video id to get more detailed information about each video now right now the information that we're getting back is the video duration if i look um right here but we can instead change this so that we're getting the number of views that each video has instead that way we can sort these by the most popular videos so to figure out how to do this we can look at the documentation online and see what properties of the video we need to access and i have that open here in my browser so let's take a look at this documentation to see how we would figure this out okay so if you want to see what is available to you so right now we're in the videos resource here if we want to see what's available to us we can go down to resource representation so we can see here that it says the following json structure shows the format of a videos resource so if i look at this we can see that there's a lot of information here but the one that i would be interested in is if we go down here to statistics we can see that in statistics we have this view count now i'm going to base the most popular video based off of view count but if you wanted to you could also base it off of like count and or how many comments there are things like that so now we know that in order to get the view count for each video we need to access the statistics of each video and then we can access the view count from those statistics so let's go back to our script and add this so back in our script here up here where we had content details we no longer want the content details we want those uh statistics so i will put that in instead and now down here in our loop uh where we were looping through and getting the duration from those content details now we want to access the statistics and then within the statistics we want the view count now that is camelcase there again if you need to get a reference for that then you can look at the documentation we can see that it is camelcased here so now if i go back to the script now i'm also going to change this variable name here instead of duration let's just call this vid underscore views okay now we're also going to want links to the most popular videos after we sort by uh view count so to create a youtube link all we need to do is grab the video id and then we can create a link manually ourselves so we can do this uh just by saying vid id is equal to now to access the id we can just say item and access the id key and now to create a a link manually what we can do here is i'll just create an f string and this is going to be https colon forward slash forward slash now here's how youtube links are structured so this is the shorthand uh youtube links here so u2 dot be and then we can just do a forward slash and then pass in the video id so i will go ahead and do that okay so right now let's think about what we've done here so far so we are looping over the playlist and we are accessing each video in that playlist and then we are grabbing the view counts and creating a link a link for each video in the playlist so now in order to sort these we can simply add all of this information to a list and then sort the list based on the number of views so first let's create a global list here where we can add this information so up here at the top which is outside of our loop right above this next page token here i'm just going to create an empty list with a variable name of videos and the information that we're going to add for each video is going to be the view count and the link for that video so each video can just be a dictionary with those two pieces of information so down here back under our video id and youtube link let's just append this information to our videos list so i'll say videos dot append and now what we want to append is going to be dictionary information so let me get this looking correct okay so first i'm going to add the information for the views and the views will just be we could do video views here now i'm not sure how this information comes back i think this information comes back as a string so just to make sure that this is an integer that we can sort on let's go ahead and cast this to an integer just to be sure because if it was a string then then it wouldn't uh work correctly all of the ones so a one and a one hundred would come before two but if it's an integer then you know it'd be one two and then a hundred so hopefully that makes sense and now let's also add the url here and the url is just going to be that youtube link okay so now we are adding uh each of these videos information to our videos list as a dictionary so our videos list is going to be a list of dictionaries so before we sort this let's just print out some of these values and see if our script is working so far because we've actually written a good bit of code so far without testing that any of this is working so far so back on our main level here outside of that while loop let's loop over our videos and print out the url and view count for each video so to do this we can just say 4 video in videos and i will print out remember this is a dictionary so i'm just going to print out the video and access that url key and i'll also print out the video views and access that views key and also while we're at it let's go ahead and also print out the number of videos in our videos list if you remember back at the beginning of the video we saw that there were 133 videos in the playlist for this conference so we should probably check to make sure that those numbers are matching up correctly so outside of our for loop here i'm going to print the length of our videos list okay so now let's run this and see if what we have so far is working okay so we can see down here at the bottom that it did print out that there are 133 videos and each of these videos prints out the url and view count of each video so now we should be able to simply uh sort our list of videos in order to get the most popular videos first now if you're unfamiliar with sorting and python then i do have a video specifically on sorting and i'll be sure to leave a link to that video in the description section below in case anyone is interested but in this case since we're sorting a list of dictionaries then we'll have to pass in our own custom key so let me actually sort this videos list in place before i loop over these videos so to sort a list in place we can just say videos.sort and now we need to pass in our own custom key now this custom key is going to be a function uh telling python what we want to sort these videos on now this could be a a function that we write ourselves up here but if you just want to write an inline function then we can write a lambda function which is basically just an anonymous function but if you aren't familiar with lambda functions then you can always just write your own custom function as well but to do a lambda function we can just say lambda and then what our variable is going to be i'll just call this vid and now we need to specify our return value here so what this is saying is okay when you're looping through this list here you're going to see a bunch of videos so what do we want to sort on with with these videos we want to sort on vid and access that views key and sort on that views key now uh by default this will sort in ascending order so the lowest views will be first and then go down to the highest views we actually want to get the highest views first so we can just say that we want reverse is equal to true and that will give us the um the highest viewed videos first and also let me go ahead and remove our print statement for the length of videos as well since we already made sure that that looked right okay so now if we run this code then scroll up here at the top then our output should be sorted with all of the most popular videos of this playlist at the top so we can see here that the most watched talk from this conference had over uh 5 500 views and if we copy the link and paste this into our browser just to make sure that this is a valid link then we can see that yes we have the same number of views here 5 almost 5 500 and it looks like this was a video on python versus rust for simulation so you know that might be a cool video to watch if that's something that sounds interesting to you so we've pretty much done what we set out to do here now if you'd like to see you know just the top 10 videos or something like that then instead of print looping over the entire playlist we could always just use list slicing when printing out this information so for example to see the top 10 videos from this conference then right here where we are looping over these videos i could just use list slicing here and say that we want up to the 10th video so if i run this then this will you can see that we have a lot less videos here now and that will simply loop over the first 10 values of our sorted list now you might notice some discrepancies here with the views it says that this is 5500 here and if we go back to our browser it says that this is only 5400 or so the reason is uh because sometimes the information that is displayed publicly might not get updated all the time um but it's just a small difference here sometimes the api data can be slightly different than what's on the front page just depending on how often uh each section gets updated but like i said this is pretty much what we set out to do here uh so now we have a way to grab the you know the top viewed videos from a specific playlist now if you'd like to take this a step further with practicing programming then there are a lot of ways that we could do something like this but maybe with a better front end so for example you could create a web application either using flask or django that allows people to paste in a playlist and then sort playlists like this and then display the embedded videos on a web page in that order so that they can go through them each individually doing things like that is always good for learning to take what we learn in these videos and apply them to larger projects in some way and like i said just writing scripts like this for myself i use scripts like this all the time whenever you know i'm watching a particular playlist and i just want to watch the most popular ones okay so i think that's going to do it for this video i hope you feel like you have a better grasp of using the youtube api with python and also getting an idea of some of the cool and practical things that we can do with this knowledge now like i said i've already seen some comments from a few different viewers that said that they were going to turn the tools that we're building here into either flask or django web applications so that the general public can use tools like this as well and i think that's a great idea it's you know it's also possible to take the knowledge that we learn here in these areas and make some good supplemental income so for example if you use the api to create something useful like we did here for others and then put it into a website for the general public to use then i could definitely see that bringing in some extra income based on the traffic coming to your site so yeah i always think it's a good idea to take what we learn here and maybe try to adapt it to your own and put it into maybe an app or a website or something like that but if anyone has any questions about what we covered in this video then feel free to ask in the comments section below and i'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon or youtube and there are links to those pages in the description section below be sure to subscribe for future videos and thank you all for watching you
