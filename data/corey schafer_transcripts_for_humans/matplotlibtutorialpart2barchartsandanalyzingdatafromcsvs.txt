With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're going to continue
00:02 - learning about matplotlib and seeing how
00:04 - to create some different types of charts
00:06 - specifically we're going to be looking
00:07 - at bar charts in this video we're also
00:09 - going to see how to load in data from a
00:11 - CSV instead of just having our data
00:13 - directly within our Python script
00:15 - because most likely when you're plotting
00:17 - data the data is going to be coming from
00:19 - another source like a CSV file now I
00:21 - would like to mention that we do have a
00:23 - sponsor for this series of videos and
00:24 - that is brilliant work so I really want
00:27 - to thank brilliant for sponsoring the
00:28 - series and it would be great if you all
00:29 - could check them out using the link in
00:31 - the description section below and
00:32 - support the sponsors and I'll talk more
00:34 - about their services and just a bit so
00:36 - with that said let's go ahead and get
00:38 - started ok so in the last video we
00:40 - learned the basics of matplotlib and how
00:42 - to plot some data and customize our
00:44 - plots in different ways I have a
00:45 - stripped down version of the code that
00:47 - we wrote in that video opened up here in
00:49 - my editor and I'll have a link to this
00:51 - code in a description section below if
00:53 - you'd like to follow along but just in
00:55 - case you're not continuing from a
00:56 - previous video let me go over this code
00:58 - really quick so first we are importing
01:01 - plot up here at the top pipe lot from
01:04 - matplotlib we are using a 538 style for
01:08 - our plots our ages here this is our
01:10 - x-axis it's just a list of numbers dev Y
01:13 - this is the values that are going to be
01:16 - on our y-axis and here we are plotting
01:18 - out that data so we're plotting out our
01:21 - X values which are the ages the y values
01:24 - which is our dev Y here and we're giving
01:26 - it a custom color and a label and I've
01:29 - got some commented out code right here
01:31 - all of this data is median salaries for
01:34 - different ages so this is for developers
01:37 - in general this is for Python developers
01:40 - here this is for JavaScript developers
01:42 - here but I've got those commented out
01:44 - for now we are also putting a legend on
01:47 - our plot giving it a title x and y label
01:51 - giving it a tight layout what just helps
01:54 - with the padding and then lastly we are
01:55 - showing it so when we plotted our data
01:58 - in the last video we use this
02:00 - PLT dot plot method and when you use the
02:03 - plot method it will use a line plot by
02:05 - default so if we run this then we'll see
02:08 - something kind of similar to what we saw
02:09 - at the end of the last video so we can
02:12 - see that we get a
02:13 - line plot here for the median salary of
02:16 - developers and again this is some data
02:17 - that I took from the annual
02:19 - stackoverflow developer survey but let's
02:21 - say that we wanted to show this as a bar
02:23 - chart instead well to do that we can
02:26 - simply use the bar method instead of the
02:29 - plot method so if I just change this to
02:32 - use bar instead of plot then we'll have
02:35 - a bar method or a bar plot sorry and
02:38 - just like that plot method we can pass
02:40 - in our X values first for our X values
02:43 - and the y values for our y axis and
02:46 - additional parameters here can be passed
02:48 - in as well like color and label so I'm
02:52 - just going to leave that as is just like
02:54 - it was with the plot method and if I run
02:56 - this then we can see that now this is
02:58 - plotting our data and it's represented
03:01 - as a bar chart instead okay so that is
03:04 - plotting the data for all developers who
03:06 - answered the survey so like I said I
03:09 - also have the data for Python and
03:12 - JavaScript developers as well and right
03:15 - now those are commented out so what if I
03:18 - wanted to include those in our bar chart
03:20 - well first of all you can mix and match
03:22 - some plots so if for some reason you
03:25 - wanted the Python and JavaScript data to
03:27 - remain as line plots and just overlay
03:30 - that on to our bar chart then we could
03:32 - simply uncomment out our code here and
03:35 - we could just run these as plots and
03:38 - that will actually overlay line plots on
03:41 - top of our bar plot now that doesn't
03:43 - make much sense in this situation but
03:45 - depending on your data you might find
03:46 - that useful okay but what if we wanted
03:49 - to include these in our bar chart as
03:52 - bars side by side with the other data so
03:56 - you might think that we could do this
03:58 - just like we did our line plots and just
04:01 - run those using the bar method as well
04:04 - but that's actually going to give us
04:05 - some issues so let's try that real quick
04:08 - and see what that does so I'm going to
04:10 - change these to use bar so PLT dot bar
04:15 - so I'm going to run that and we can see
04:18 - that this doesn't quite look right we
04:20 - can't even see the data for all of the
04:23 - developers and the data for Python and
04:25 - JavaScript is overlap
04:27 - so how can we put these side-by-side
04:29 - because right now they're just all
04:31 - stacked on top of each other so we can
04:34 - do this by offsetting the x-values each
04:37 - time we plot some data now I actually
04:39 - think this is a lot harder than it
04:41 - should be it seems a bit hacky in my
04:44 - opinion but this is just how we have to
04:46 - do it so to do this we're gonna have to
04:48 - import numpy and use that to grab a
04:51 - range of values for our x-axis now if
04:54 - you've never used numpy before then
04:55 - don't worry too much about it it's just
04:57 - going to use one simple function now I
04:59 - believe numpy should be installed when
05:01 - you install matplotlib so we should just
05:03 - be able to import it without doing any
05:06 - additional installs so up here at the
05:08 - top I'm going to say import numpy and
05:12 - I'm going to import that as MP that's a
05:15 - convention there when using numpy is to
05:16 - import it as MP and now below our
05:20 - x-values here where we have our ages X
05:23 - I'm going to create a range from these
05:25 - values so I'm going to say X underscore
05:28 - indexes and I'm gonna set this equal to
05:31 - MP a range and I'm gonna pass in the
05:37 - length of our ages X list here and what
05:41 - that's going to do is it's going to
05:43 - create a variable called X indexes and
05:46 - that is an array of values and those
05:48 - values are going to be a numbered
05:50 - version of our X values so basically
05:53 - it's a lot like having a list with an
05:55 - index starting at 0 and counting up to
05:57 - our last item but instead it's a numpy
06:00 - array so once we have that we're going
06:03 - to use that for our X values within our
06:05 - bar chart method so I'm gonna copy that
06:07 - and instead of using our ages here I'm
06:10 - instead going to use those X indexes so
06:14 - I paste those X indexes into each of our
06:16 - bar methods here so if I were to run
06:18 - this right now then it would look very
06:20 - similar to what we had before but now
06:22 - we're just using those indexes instead
06:25 - but now that we're using these indexes
06:27 - we can actually shift the location of
06:29 - these by adding or subtracting to our
06:31 - values here so if we think about it
06:34 - they're all stacked up on top of each
06:36 - other right now so let's shift our first
06:39 - bar to the left
06:40 - and the second bar to the right but how
06:42 - far do we actually want to shift these
06:44 - well we want to shift them by the exact
06:47 - width of a bar so to do this it would be
06:50 - nice if we specify an exact width for
06:53 - our bars so that this is explicit I
06:56 - believe that they have a default width
06:58 - of like 0.8 or something like that but
07:01 - just to be sure let's create our own
07:02 - width variable so up here underneath X
07:05 - indexes I'm going to create a width and
07:08 - set this equal to 0.25 and I think the
07:12 - default of 0.8 is going to be a little
07:15 - thick with three bars being side-by-side
07:17 - so I think 0.25 would be good here and
07:21 - but you can experiment with these
07:22 - different widths if you'd like to get
07:24 - different looks depending on your data
07:26 - so now that we have a width let's
07:29 - subtract that width from our first
07:31 - plotted values and we'll add that with
07:33 - two our last plotted values and that
07:35 - should shift those bars to all be side
07:38 - by side so with our first bar plot here
07:42 - which is right here we are going to say
07:44 - X index is - width then for our second
07:49 - bar chart we're not going to do anything
07:50 - because that's going to be in the middle
07:51 - and then for our last bar chart we'll
07:53 - say plus width since we want that to
07:57 - shift over to the right and lastly
08:00 - before we plot this we're actually going
08:01 - to need to tell our plot that we want
08:03 - the width of the bars to be equal to the
08:06 - width variable that we just created and
08:07 - we can do that just by passing in a
08:10 - another variable here so right before
08:13 - color on all these I'm going to add a
08:15 - width oops let me spell that right width
08:18 - equal to width and I did that for all
08:23 - three of these bar methods so width
08:25 - equals width here here and there so now
08:28 - that we've done that if we run our code
08:31 - here then now we can see if I make this
08:33 - a little larger here we can see that now
08:36 - our bar chart has these all lined up
08:38 - side-by-side instead of being stacked on
08:41 - top of each other like they were before
08:42 - now if you have more or less bars that
08:45 - you need to fit side-by-side then you'll
08:47 - have to adjust the offsets accordingly
08:48 - for the number of bars that you have the
08:51 - way that I did this was with three but
08:53 - if you
08:54 - added another bar then you need to do an
08:56 - offset with the width added twice and so
08:59 - on now also if we look at our x-axis
09:02 - down here we can see that we no longer
09:03 - have the age ranges that we had before
09:06 - it's using the indexes since that's what
09:09 - we needed to do our offset so to fix
09:12 - this let's go back to our code so I'm
09:14 - going to shut that down and down here
09:16 - towards the bottom we're going to need
09:19 - to use a next X label to change the
09:22 - labels so right here above the title I'm
09:25 - gonna say PLT dot X ticks oops let me
09:29 - spell that right so within this X text
09:32 - method we need to pass in a couple of
09:34 - arguments so I'm gonna say ticks is
09:37 - equal to and those ticks are equal to
09:39 - the X indexes now the labels for those
09:43 - ticks are going to be equal to our ages
09:47 - list here so we are using those X
09:50 - indexes for the ticks and the labels
09:53 - which are all of our ages that we saw
09:55 - before in the last video we're going to
09:57 - use that for our labels so now if I run
10:00 - that then we can see that now our plot
10:03 - has our x axis labeled correctly okay so
10:08 - we've looked here at vertical bar charts
10:10 - and how to add multiple different bars
10:12 - to that plot and in a minute we're gonna
10:14 - look at how to create horizontal bar
10:16 - charts but first I want to load in some
10:18 - data that's more appropriate for a
10:20 - horizontal chart you usually want to use
10:23 - horizontal bar charts when you have a
10:24 - lot of data and it looks too crowded in
10:27 - a vertical plot and the data that I want
10:29 - to load in is going to be from a CSV
10:31 - file so so far we've only used data that
10:34 - has been directly in our Python script
10:37 - but most of the time you're going to be
10:39 - likely using data from external sources
10:41 - like a CSV file and sometimes you're
10:43 - going to need to work with that data a
10:45 - little bit before it's actually ready to
10:46 - be graphed so first let me get rid of
10:49 - the data that we've been using so that
10:52 - we can make room for data that will load
10:54 - in from our CSV file so I'm going to
10:57 - remove I'm gonna remove all the way from
11:00 - our PLT X ticks there I'm going to go up
11:03 - all the way to our ages and remove all
11:06 - of that data and for
11:07 - I'm also going to comment out our plot
11:10 - titles and plot show and things like
11:12 - that and now let me open the CSV file
11:15 - and show you what this looks like so I
11:18 - have this open here in my current
11:20 - directory and like I said all of this is
11:23 - going to be available for download in
11:24 - the description section below if you
11:27 - want to follow along so this is the CSV
11:29 - file that I'm going to be loading in
11:31 - here so this is also data from that
11:33 - stack overflow developer survey but I
11:35 - cleaned it up a little bit and only
11:37 - grabbed the data for the programming
11:38 - languages respondents said that they
11:40 - worked with so we can see that the top
11:42 - line here tells us what information this
11:44 - is so this first column here is the
11:47 - responder ID so these are just IDs for
11:50 - each person who answered the survey and
11:54 - the languages worked with these are the
11:57 - languages that that specific person said
11:59 - they knew so this first person here said
12:01 - that they knew HTML CSS Java JavaScript
12:04 - and Python and we can see that these
12:06 - languages are all delineated by a
12:09 - semicolon here so each line here has all
12:14 - these different languages and using
12:16 - these we can graph the most popular
12:19 - programming languages from that survey
12:21 - so let me go back to my script here and
12:24 - like I said let's say that we wanted to
12:26 - create a bar chart of the most popular
12:28 - programming languages that people said
12:30 - that they work with
12:31 - so first let's grab the data from that
12:33 - CSV file now there are multiple ways
12:36 - that we can load in a CSV file we could
12:38 - use the CSV module from the standard
12:40 - library we could use the read CSV method
12:44 - from pandas we could also use the load
12:46 - txt method from numpy now first let's
12:50 - use the CSV module from the standard
12:53 - library for since most people are
12:55 - probably familiar with that but then I'm
12:58 - also going to show you a faster way
12:59 - using pandas and that reads csv method
13:02 - so first let's use the standard library
13:05 - to do this so at the top here I'm going
13:08 - to import CSV and now I'm going to read
13:12 - that file using the csv module now if
13:15 - you don't know how to work with csv
13:16 - files using the csv module from the
13:18 - standard library then I do have a
13:20 - detailed video
13:21 - specifically on that so I'll be sure to
13:24 - leave a link to that video in the
13:25 - description section below if anyone is
13:27 - interested okay so the way that we can
13:29 - read this in is I can say with open and
13:33 - we want to open that file is called data
13:36 - CSV and it's in the same directory as
13:38 - this script so I don't have to specify a
13:40 - full path and now we can just say as CSV
13:45 - file and now we can use this CSV module
13:48 - to read this in so I'm going to say CSV
13:50 - Reader is equal to and I'm going to use
13:53 - the dictionary reader method from the
13:55 - CSV module to read in this CSV data the
13:58 - dictionary reader actually makes a
14:00 - dictionary where we can access the
14:02 - values by key instead of by index and I
14:05 - find that pretty helpful so to do that
14:07 - that is CSV got reader and now we
14:11 - just want to pass in that CSV file okay
14:15 - so now we should have that CSV data in
14:17 - our CSV reader variable and this is an
14:20 - iterator that we can loop over now I
14:22 - don't want to loop over all of these
14:23 - right now because I think there are like
14:25 - 90,000 rows and that data there so
14:28 - instead let me just print out the first
14:30 - row so that we can kind of see what this
14:32 - looks like and I can grab that first row
14:35 - by saying Row is equal to next CSV
14:39 - reader and that will grab that first
14:43 - line from that iterator and now let's
14:46 - print that out so I'll print out row so
14:48 - if I save that and run it let me make my
14:51 - output a little larger here okay so we
14:53 - can see that this is an order dictionary
14:55 - and the keys are what we saw as the
14:57 - headers and the CSV file and the values
15:00 - are the responses for that particular
15:02 - person so like I said we want to plot
15:05 - the most popular programming languages
15:07 - so those are within the key languages
15:11 - worked with right here so let me just
15:14 - print out that key instead of printing
15:16 - out that entire row so if I save that
15:19 - and run it then we can see that now we
15:21 - get those languages and like I said
15:23 - these are delimited by semicolons here
15:25 - so to clean this up a bit and turn this
15:27 - into a list of languages we can actually
15:30 - split the values on that semicolon by
15:33 - saying
15:34 - after we access that key we can simply
15:36 - say dot split and split on those
15:40 - semicolons so if I save that and run it
15:42 - then now we can see that we have a
15:44 - Python list of those languages so
15:47 - sometimes you're going to run into data
15:48 - that you need to clean up or analyze a
15:50 - bit before you're actually able to plot
15:52 - the data that you want so that's why I'm
15:54 - showing that process here so in our case
15:57 - we want to plot the most popular
15:59 - programming languages from the results
16:01 - of this survey so we need to keep a
16:03 - count of each language that each
16:06 - respondent said that they work with so
16:08 - there are a lot of different ways that
16:09 - we could do this as well we could keep a
16:12 - list and count them at the end we could
16:14 - keep a dictionary and update the counts
16:16 - of that dictionary each time but this is
16:20 - actually so common that Python has a
16:23 - built-in class for this kind of thing
16:25 - called counter and it's definitely the
16:28 - best way to do something like this now
16:29 - if you don't know how counters work they
16:32 - can be extremely helpful and I plan on
16:34 - making a video specifically about
16:35 - counters in the near future but I
16:37 - haven't put one together just yet so
16:39 - first let me show you how a quick
16:42 - example of how counters actually work so
16:45 - let me open up my terminal here and I'm
16:48 - going to run Python and let me show you
16:50 - how counters work here really quick so
16:52 - to import these I'm going to say from
16:55 - collections import counter they are from
16:57 - the collections module and now that we
17:00 - have a counter I want to say C is equal
17:02 - to counter and I'm going to pass in a
17:05 - list here so I'm going to pass in a list
17:07 - of Python and I'll also pass in a of
17:11 - Python and JavaScript those two values
17:14 - in my list so if I look at that counter
17:16 - we can see that this says okay I have a
17:18 - counter here I have a key of Python and
17:21 - that's currently set to 1 I have a key
17:23 - of JavaScript and that's currently set
17:25 - to 1 so it's keeping count of how often
17:28 - it sees these values so to update this
17:31 - counter I can simply say C dot update
17:34 - and now I'm going to pass in a new list
17:36 - so this new list let's say this time i
17:39 - say c plus plus whoops C++ and Python
17:45 - okay so now let me look at this counter
17:47 - so now when we look at the counter we
17:49 - can see okay now python is two because
17:52 - it's seen Python twice
17:55 - we saw it up here when we first created
17:57 - the counter and we saw what up saw it
17:59 - right here when we updated the counter
18:01 - it still only seen JavaScript one time
18:03 - the first time we created it and it's
18:05 - only seen C++ one time so now let's do
18:08 - an update one more time so if I run that
18:11 - update statement again with C++ and
18:13 - Python and then look at our counter
18:15 - again now it's saying okay I've seen
18:17 - Python three times c plus plus twice
18:19 - javascript once so this is what we're
18:21 - going to use to keep track of these
18:23 - languages so at the top of my script let
18:26 - me exit out of Python here I hope that
18:28 - all made sense to you because these are
18:31 - the kinds of things that you need to do
18:32 - sometimes when you clean up data for
18:34 - plotting okay so I'm going to close down
18:36 - that output now up here at the top of my
18:39 - script I'm going to import that counter
18:42 - so again that's from collections import
18:46 - counter spell that right okay now I'm
18:50 - going to instantiate a new counter right
18:52 - after we read in our csv data so right
18:56 - above our row here i'm going to make a
18:59 - variable and i'm going to call this
19:01 - language underscore counter and set that
19:04 - equal to an empty counter so right now
19:07 - we only have the data for a single row
19:10 - but we want to grab the exact same list
19:13 - of languages from every row so in order
19:16 - to do this we can copy what we've
19:18 - already printed out here this big long
19:20 - thing here is what god is that list of
19:22 - languages from that single row so let's
19:24 - copy that and now we can loop over all
19:27 - of the rows of our csv data and update
19:30 - our counter with the data that is within
19:34 - this list here so i'm going to say four
19:36 - row in csv reader and this will loop
19:41 - over every row in that csv file and i'm
19:44 - gonna say
19:45 - language counter dot update and we want
19:48 - to update that with that list of
19:49 - languages for every single row and so
19:52 - i'm going to paste that in and this
19:54 - section here is what's going to give us
19:55 - those list of languages so now our
19:58 - language counter
19:59 - get updated with all those languages
20:01 - okay so now let's print out our language
20:03 - counter to see if it looks like we have
20:06 - some coherent data and I'm going to do
20:08 - this back on the main level of the
20:09 - Python script outside of this with
20:11 - context manager here so above our PLT
20:16 - title I'm going to print out language
20:19 - counter so let's run that and it looks
20:22 - like we've got some good data here okay
20:25 - so since this is a counter it should
20:27 - print out sorted with the most responses
20:30 - at the beginning so we can see here that
20:32 - we have JavaScript with 59,000 HTML CSS
20:35 - 55 SQL 47 Python 36,000 Java 35,000 and
20:41 - so on now we can see that there are a
20:43 - lot of programming languages here if I
20:46 - remember correctly I think there are 28
20:48 - total here so we probably don't want to
20:51 - plot all of these so let's say that we
20:53 - just wanted the 15 most common languages
20:56 - well the great thing about using a
20:58 - counter like we did here is that it
21:01 - actually has a most common method
21:03 - built-in to do this for us so whenever
21:06 - I'm printing this out I could say print
21:09 - language counter dot most common and
21:13 - just pass in a 15 and if I run that then
21:17 - that is the 15 most common responses and
21:19 - that most common method actually
21:21 - returned a list here and each item in
21:24 - this list is a tuple containing so this
21:27 - is one tuple here it's containing the
21:29 - language and the count so now let's try
21:33 - to plot this data so how would we do
21:35 - this well first we need to split out the
21:37 - languages into their own list and these
21:40 - corresponding counts into their own list
21:42 - so when we did our previous bar charts
21:45 - we had our X and y-axis so we'll want
21:48 - all of our languages on one axis and the
21:51 - counts on another so that's why we need
21:53 - to split those up so there are also a
21:55 - couple ways that we can do this now let
21:57 - me show you a way that takes a little
21:59 - bit more code but I think is going to be
22:02 - where most everyone will be able to read
22:05 - it so to do this I'm just going to
22:07 - overwrite this line here actually I will
22:10 - keep that there for now but above this
22:14 - line I'm just gonna say languages and
22:17 - set this as an empty list and then I'll
22:20 - say popularity that's going to be for
22:23 - the numbers so we want the languages in
22:25 - this list and this corresponding
22:26 - popularity in this list
22:28 - so now let's loop over all those tuples
22:31 - that we got back from this most common
22:33 - method so I'll say for item in language
22:36 - counter not most common whoops and let
22:40 - me sorry let me go the next line here
22:43 - and remember this is going to be looping
22:44 - over a list of tuples and the first
22:47 - value of that tuple is going to be the
22:51 - language and the second value is going
22:52 - to be the popularity so I'll just say
22:54 - languages dot append item index of 0 to
23:01 - grab that first item and append that to
23:03 - our languages and we want to append the
23:08 - second item to our popularity so now if
23:10 - I print out our languages and our
23:13 - popularity languages print popularity
23:19 - save that and run it then we can see
23:21 - that now we have one list here that is
23:24 - all of our top 15 most common languages
23:26 - and the second list here is the
23:28 - corresponding popularity of that
23:30 - language according to that survey so now
23:32 - we can actually use these two lists for
23:35 - our plot now there's actually a way of
23:37 - doing this whole section right here
23:39 - there's actually a way of doing that
23:41 - with a one-liner using the zip function
23:43 - and unpacking values and things like
23:45 - that but I wasn't sure how many people
23:47 - would find that confusing so I think
23:49 - it's easier to read this way so I just
23:52 - decided to do it this way instead okay
23:55 - so now that we have these lists here let
23:57 - me exit that output there and I'm also
24:00 - going to get rid of those print
24:02 - statements so now that we have these
24:04 - lists let's plot these just like we did
24:07 - before so to do that we can just say PLT
24:10 - dot bar because we want to make a bar
24:12 - chart here and on our x-axis we're going
24:15 - to plot the languages and on the y-axis
24:17 - let's plot the popularity and it's also
24:20 - uncommon about our titles and labels
24:22 - here and
24:23 - change those to match what we're
24:25 - actually plotting so instead of median
24:28 - salary I'm going to type in let's just
24:31 - say most popular languages spelled that
24:35 - wrong that's okay
24:37 - for the X label here I can just say our
24:40 - X label is the programming languages so
24:44 - I'll say programming languages and for
24:47 - the Y label here I'll say number of
24:51 - people who use okay so now with that in
24:54 - place let me save that and run this and
24:58 - let's take a look at our chart now we
25:01 - can see right off the bat when we have
25:03 - this many items it's hard to see all of
25:05 - these using a vertical bar chart like we
25:07 - did here when you have a lot of items
25:10 - then it might be more readable to use a
25:12 - horizontal bar chart instead and we can
25:15 - do that easily just by changing our bar
25:17 - method to a bar H method so right here
25:21 - where we're saying dot bar I'm going to
25:23 - change that and say dot bar H so now we
25:28 - can leave our arguments exactly as they
25:29 - are because the horizontal chart expects
25:32 - the y-axis values first so we'll just
25:35 - keep our languages there now we will
25:37 - have to change our axis labels here
25:40 - because those are going to be different
25:41 - now so I'm just gonna switch the X and Y
25:44 - labels here real quick so I'm just gonna
25:45 - have programming languages as our wide
25:47 - label number of people who use as our X
25:50 - label okay and now I think that's about
25:53 - it and actually now that I think about
25:55 - it I don't even think that we need this
25:57 - Y label telling us that these are
25:59 - programming languages
26:00 - that's pretty self-evident since the
26:02 - names of the programming languages are
26:04 - actually the labels themselves so I'm
26:06 - just gonna get rid of that that's one
26:08 - thing with plots is it's nice to be
26:10 - descriptive but you can also be overly
26:12 - descriptive so I'm gonna get rid of that
26:14 - actually just let me comment it out
26:16 - instead okay so now let me run this and
26:19 - now we can see that we have whoops a
26:22 - vertical bar chart here let me open this
26:24 - back up make this a little larger okay
26:27 - so what I meant to say is we have a
26:29 - horizontal bar chart here so we can see
26:32 - that this is much easier to read with a
26:34 - lot of values and those aren't scrunched
26:36 - together like they were
26:37 - in that vertical bar chart so whenever
26:40 - you're plotting things out if you've got
26:41 - a lot of values to plot with a bar then
26:44 - it might be a good idea to use a
26:45 - horizontal for this type of thing
26:47 - now one thing here is that with a
26:49 - horizontal bar chart maybe you want the
26:52 - most popular language right now it's
26:53 - down here at the bottom maybe we want
26:55 - that at the top since we read from the
26:57 - top down so to do this we could simply
26:59 - just reverse the list that we're passing
27:01 - into the bar H method before we actually
27:04 - plot it so I'm going to close that down
27:07 - and now up here before that bar H method
27:10 - I'm simply going to say languages dot
27:12 - reverse and popularity dot reverse and
27:18 - the reverse method on a list actually
27:22 - reverses those in place so we don't need
27:24 - to set languages equal to this or
27:26 - anything like that it's actually going
27:28 - to modify that list in place so now if I
27:31 - save that and run it then now we can see
27:33 - that we have the most popular languages
27:34 - up top and I think that that looks a lot
27:37 - better now I did say that I was going to
27:39 - show you a faster way to load in that
27:41 - data from the CSV using pandas so let me
27:44 - show you how to do that because for the
27:46 - rest of the series I'm probably going to
27:48 - use pandas to load in data since it's a
27:50 - bit faster and it's also a bit cleaner
27:52 - so first of all if we don't have pandas
27:55 - installed then we'll need to do that and
27:57 - it's really easy to install so first let
28:00 - me install that I'll just open up my
28:02 - terminal here and clear this out and we
28:05 - can just install that using pip by
28:07 - saying pip install pandas whoops got the
28:10 - wrong spelling there pip install pandas
28:13 - and now once that's installed we will
28:17 - need to I'm just going to assume that
28:18 - that installs correctly and it did ok so
28:21 - back here in our script up here at the
28:23 - top we need to import this so I'm just
28:26 - gonna say import pandas as PD that's
28:31 - another convention when you're using
28:32 - pandas is to import it as PD ok so up
28:36 - here at the top of our file instead of
28:38 - opening our file and using the dict
28:41 - reader method to read in the data we can
28:44 - instead replace that with a pandas
28:46 - method so now instead of doing it like
28:48 - this we can simply say
28:51 - so I'm going to get rid of this with
28:53 - context manager here and since we got
28:55 - rid of that context manager I'll an
28:57 - indent these other lines here but now
28:59 - where we were opening that file instead
29:02 - I can simply say data is equal to PD dot
29:06 - read underscore CSV and pass in the name
29:10 - of that CSV file and it was data dot CSV
29:13 - and now I can specify some columns so
29:17 - I'm going to say that the ID I'm going
29:19 - to create this IDS variable and I'm
29:21 - going to see ID is the let me see
29:24 - exactly what that column name was
29:26 - responder ID so I'll pass in responder
29:29 - ID there so that's going to set this IDS
29:32 - variable equal to all of the IDS in that
29:35 - responder ID column and we can do the
29:38 - same thing with the languages so I'll
29:41 - call this variable lang underscore
29:43 - responses is equal to data and we want
29:48 - the key to be languages worked with so
29:51 - I'll grab that so we still want our
29:53 - language counter but now here for our
29:56 - loop instead of saying for row and CSV
29:59 - reader this doesn't exist anymore now we
30:01 - have this list of languages here so I
30:05 - can just say for response in lang
30:10 - responses update that counter so that
30:13 - simple update to our code there should
30:15 - work exactly the way that we that it
30:18 - worked before so if I save this and I
30:20 - run it then whoops name row is not
30:23 - defined okay so yeah I got an error here
30:26 - that says name Row is not defined I also
30:29 - meant to update this section one here
30:31 - because there's no row anymore so we
30:33 - just want to split the response instead
30:36 - so response dot split because remember
30:39 - these Lang responses here when we're
30:42 - looping through these each response is
30:43 - going to be this entire section here of
30:46 - all of the languages so we can simply
30:48 - just split that response okay so I'll
30:50 - save that and run it and this should
30:53 - work exactly like it worked before and
30:55 - we can see that it does that looks
30:57 - pretty good now like I was saying before
30:58 - this is actually real-world data that I
31:01 - grabbed from their actual survey and
31:03 - I actually have those charts that
31:05 - stackoverflow put together when they
31:07 - analyzed their survey data so let me
31:09 - open those up and see if we got similar
31:11 - results so I'm gonna put my chart here
31:13 - on the right and their chart I have open
31:17 - here in the browser so let me open that
31:20 - up okay so here is their chart plotting
31:22 - out the exact same thing that we just
31:24 - plotted now there could be some small
31:26 - differences here based on how I sanitize
31:28 - the data compared to how they sanitized
31:30 - it but you can see that as far as the
31:32 - order goes we got the same results
31:35 - they've also styled their plot a bit
31:37 - further but with a little customization
31:39 - we could probably get something very
31:41 - similar so it looks like we just need to
31:43 - change up the colors a bit and add in a
31:46 - little spacing and also make these lines
31:49 - a little thinner and it would almost be
31:50 - identical so that's why learning things
31:53 - like this can be extremely useful
31:54 - because these companies are constantly
31:57 - looking for people who can analyze their
31:59 - data and present it in ways that can
32:01 - give insights like this so this is
32:03 - definitely a skill that you're going to
32:04 - be able to apply to a lot of different
32:06 - situations just like we did here okay so
32:08 - before we end I'd like to mention the
32:10 - sponsor of this video and that is
32:12 - brilliant org brilliant is a
32:14 - problem-solving website that helps you
32:16 - understand underlying concepts by
32:18 - actively working through guided lessons
32:19 - they have computer science courses
32:21 - ranging from algorithms and data
32:22 - structures to machine learning and
32:24 - neural networks they even have a coding
32:26 - environment built into their website so
32:28 - that you can run code directly in the
32:30 - browser and that's a great way to
32:31 - compliment watching my tutorials because
32:33 - you can apply what you've learned in
32:34 - their active problem-solving environment
32:36 - and that helps to solidify that
32:38 - knowledge they're guided lessons will
32:39 - challenge you but you also have the
32:41 - ability to get hints or even solutions
32:43 - if you need them it's really tailored
32:44 - towards understanding that material so
32:46 - they're computer science material is
32:48 - fantastic and I really like what they're
32:49 - doing they also have plenty of courses
32:51 - depending on what you're most interested
32:53 - in so they have courses in different
32:55 - fields of mathematics or astronomy solar
32:58 - energy computational biology and all
33:01 - kinds of other great content so to
33:02 - support my channel and learn more about
33:04 - brilliant you can go to brilliant org
33:06 - ford slash CMS to sign up for free and
33:10 - also the first 200 people that go to
33:11 - that link will get 20% off the annual
33:14 - premium subscription and you can find
33:16 - that link in the description
33:17 - in below and again that's brilliant org
33:19 - ford /c m/s okay so I think that is
33:24 - going to do it for this video hopefully
33:25 - you feel a bit more comfortable working
33:27 - with matplotlib and how you can pluck
33:29 - out the data that you need and create
33:31 - types of charts that you'd like in this
33:33 - video we covered bar charts but in the
33:35 - next video we're going to learn how to
33:36 - create pie charts and pie charts are
33:38 - great for seeing how our data is
33:40 - proportioned and quickly visualize what
33:43 - different categories make up large and
33:45 - small pieces of your data so be sure to
33:48 - check that out
33:48 - but if anyone has any questions about
33:50 - what we covered in this video then feel
33:51 - free to ask in the comment section below
33:53 - and I'll do my best to answer those and
33:54 - if you enjoy these tutorials and would
33:56 - like to support them then there are
33:57 - several ways you can do that the easiest
33:59 - ways to simply like the video and give
34:01 - them a thumbs up and also it's a huge
34:02 - help to share these videos with anyone
34:04 - you think would find them useful and if
34:05 - you have the means you can contribute
34:06 - through patreon and there's a link to
34:08 - that page in the description section
34:09 - below be sure to subscribe for future
34:11 - videos and thank you all for watching
34:23 - you

Cleaned transcript:

hey there how's it going everybody in this video we're going to continue learning about matplotlib and seeing how to create some different types of charts specifically we're going to be looking at bar charts in this video we're also going to see how to load in data from a CSV instead of just having our data directly within our Python script because most likely when you're plotting data the data is going to be coming from another source like a CSV file now I would like to mention that we do have a sponsor for this series of videos and that is brilliant work so I really want to thank brilliant for sponsoring the series and it would be great if you all could check them out using the link in the description section below and support the sponsors and I'll talk more about their services and just a bit so with that said let's go ahead and get started ok so in the last video we learned the basics of matplotlib and how to plot some data and customize our plots in different ways I have a stripped down version of the code that we wrote in that video opened up here in my editor and I'll have a link to this code in a description section below if you'd like to follow along but just in case you're not continuing from a previous video let me go over this code really quick so first we are importing plot up here at the top pipe lot from matplotlib we are using a 538 style for our plots our ages here this is our xaxis it's just a list of numbers dev Y this is the values that are going to be on our yaxis and here we are plotting out that data so we're plotting out our X values which are the ages the y values which is our dev Y here and we're giving it a custom color and a label and I've got some commented out code right here all of this data is median salaries for different ages so this is for developers in general this is for Python developers here this is for JavaScript developers here but I've got those commented out for now we are also putting a legend on our plot giving it a title x and y label giving it a tight layout what just helps with the padding and then lastly we are showing it so when we plotted our data in the last video we use this PLT dot plot method and when you use the plot method it will use a line plot by default so if we run this then we'll see something kind of similar to what we saw at the end of the last video so we can see that we get a line plot here for the median salary of developers and again this is some data that I took from the annual stackoverflow developer survey but let's say that we wanted to show this as a bar chart instead well to do that we can simply use the bar method instead of the plot method so if I just change this to use bar instead of plot then we'll have a bar method or a bar plot sorry and just like that plot method we can pass in our X values first for our X values and the y values for our y axis and additional parameters here can be passed in as well like color and label so I'm just going to leave that as is just like it was with the plot method and if I run this then we can see that now this is plotting our data and it's represented as a bar chart instead okay so that is plotting the data for all developers who answered the survey so like I said I also have the data for Python and JavaScript developers as well and right now those are commented out so what if I wanted to include those in our bar chart well first of all you can mix and match some plots so if for some reason you wanted the Python and JavaScript data to remain as line plots and just overlay that on to our bar chart then we could simply uncomment out our code here and we could just run these as plots and that will actually overlay line plots on top of our bar plot now that doesn't make much sense in this situation but depending on your data you might find that useful okay but what if we wanted to include these in our bar chart as bars side by side with the other data so you might think that we could do this just like we did our line plots and just run those using the bar method as well but that's actually going to give us some issues so let's try that real quick and see what that does so I'm going to change these to use bar so PLT dot bar so I'm going to run that and we can see that this doesn't quite look right we can't even see the data for all of the developers and the data for Python and JavaScript is overlap so how can we put these sidebyside because right now they're just all stacked on top of each other so we can do this by offsetting the xvalues each time we plot some data now I actually think this is a lot harder than it should be it seems a bit hacky in my opinion but this is just how we have to do it so to do this we're gonna have to import numpy and use that to grab a range of values for our xaxis now if you've never used numpy before then don't worry too much about it it's just going to use one simple function now I believe numpy should be installed when you install matplotlib so we should just be able to import it without doing any additional installs so up here at the top I'm going to say import numpy and I'm going to import that as MP that's a convention there when using numpy is to import it as MP and now below our xvalues here where we have our ages X I'm going to create a range from these values so I'm going to say X underscore indexes and I'm gonna set this equal to MP a range and I'm gonna pass in the length of our ages X list here and what that's going to do is it's going to create a variable called X indexes and that is an array of values and those values are going to be a numbered version of our X values so basically it's a lot like having a list with an index starting at 0 and counting up to our last item but instead it's a numpy array so once we have that we're going to use that for our X values within our bar chart method so I'm gonna copy that and instead of using our ages here I'm instead going to use those X indexes so I paste those X indexes into each of our bar methods here so if I were to run this right now then it would look very similar to what we had before but now we're just using those indexes instead but now that we're using these indexes we can actually shift the location of these by adding or subtracting to our values here so if we think about it they're all stacked up on top of each other right now so let's shift our first bar to the left and the second bar to the right but how far do we actually want to shift these well we want to shift them by the exact width of a bar so to do this it would be nice if we specify an exact width for our bars so that this is explicit I believe that they have a default width of like 0.8 or something like that but just to be sure let's create our own width variable so up here underneath X indexes I'm going to create a width and set this equal to 0.25 and I think the default of 0.8 is going to be a little thick with three bars being sidebyside so I think 0.25 would be good here and but you can experiment with these different widths if you'd like to get different looks depending on your data so now that we have a width let's subtract that width from our first plotted values and we'll add that with two our last plotted values and that should shift those bars to all be side by side so with our first bar plot here which is right here we are going to say X index is width then for our second bar chart we're not going to do anything because that's going to be in the middle and then for our last bar chart we'll say plus width since we want that to shift over to the right and lastly before we plot this we're actually going to need to tell our plot that we want the width of the bars to be equal to the width variable that we just created and we can do that just by passing in a another variable here so right before color on all these I'm going to add a width oops let me spell that right width equal to width and I did that for all three of these bar methods so width equals width here here and there so now that we've done that if we run our code here then now we can see if I make this a little larger here we can see that now our bar chart has these all lined up sidebyside instead of being stacked on top of each other like they were before now if you have more or less bars that you need to fit sidebyside then you'll have to adjust the offsets accordingly for the number of bars that you have the way that I did this was with three but if you added another bar then you need to do an offset with the width added twice and so on now also if we look at our xaxis down here we can see that we no longer have the age ranges that we had before it's using the indexes since that's what we needed to do our offset so to fix this let's go back to our code so I'm going to shut that down and down here towards the bottom we're going to need to use a next X label to change the labels so right here above the title I'm gonna say PLT dot X ticks oops let me spell that right so within this X text method we need to pass in a couple of arguments so I'm gonna say ticks is equal to and those ticks are equal to the X indexes now the labels for those ticks are going to be equal to our ages list here so we are using those X indexes for the ticks and the labels which are all of our ages that we saw before in the last video we're going to use that for our labels so now if I run that then we can see that now our plot has our x axis labeled correctly okay so we've looked here at vertical bar charts and how to add multiple different bars to that plot and in a minute we're gonna look at how to create horizontal bar charts but first I want to load in some data that's more appropriate for a horizontal chart you usually want to use horizontal bar charts when you have a lot of data and it looks too crowded in a vertical plot and the data that I want to load in is going to be from a CSV file so so far we've only used data that has been directly in our Python script but most of the time you're going to be likely using data from external sources like a CSV file and sometimes you're going to need to work with that data a little bit before it's actually ready to be graphed so first let me get rid of the data that we've been using so that we can make room for data that will load in from our CSV file so I'm going to remove I'm gonna remove all the way from our PLT X ticks there I'm going to go up all the way to our ages and remove all of that data and for I'm also going to comment out our plot titles and plot show and things like that and now let me open the CSV file and show you what this looks like so I have this open here in my current directory and like I said all of this is going to be available for download in the description section below if you want to follow along so this is the CSV file that I'm going to be loading in here so this is also data from that stack overflow developer survey but I cleaned it up a little bit and only grabbed the data for the programming languages respondents said that they worked with so we can see that the top line here tells us what information this is so this first column here is the responder ID so these are just IDs for each person who answered the survey and the languages worked with these are the languages that that specific person said they knew so this first person here said that they knew HTML CSS Java JavaScript and Python and we can see that these languages are all delineated by a semicolon here so each line here has all these different languages and using these we can graph the most popular programming languages from that survey so let me go back to my script here and like I said let's say that we wanted to create a bar chart of the most popular programming languages that people said that they work with so first let's grab the data from that CSV file now there are multiple ways that we can load in a CSV file we could use the CSV module from the standard library we could use the read CSV method from pandas we could also use the load txt method from numpy now first let's use the CSV module from the standard library for since most people are probably familiar with that but then I'm also going to show you a faster way using pandas and that reads csv method so first let's use the standard library to do this so at the top here I'm going to import CSV and now I'm going to read that file using the csv module now if you don't know how to work with csv files using the csv module from the standard library then I do have a detailed video specifically on that so I'll be sure to leave a link to that video in the description section below if anyone is interested okay so the way that we can read this in is I can say with open and we want to open that file is called data CSV and it's in the same directory as this script so I don't have to specify a full path and now we can just say as CSV file and now we can use this CSV module to read this in so I'm going to say CSV Reader is equal to and I'm going to use the dictionary reader method from the CSV module to read in this CSV data the dictionary reader actually makes a dictionary where we can access the values by key instead of by index and I find that pretty helpful so to do that that is CSV got reader and now we just want to pass in that CSV file okay so now we should have that CSV data in our CSV reader variable and this is an iterator that we can loop over now I don't want to loop over all of these right now because I think there are like 90,000 rows and that data there so instead let me just print out the first row so that we can kind of see what this looks like and I can grab that first row by saying Row is equal to next CSV reader and that will grab that first line from that iterator and now let's print that out so I'll print out row so if I save that and run it let me make my output a little larger here okay so we can see that this is an order dictionary and the keys are what we saw as the headers and the CSV file and the values are the responses for that particular person so like I said we want to plot the most popular programming languages so those are within the key languages worked with right here so let me just print out that key instead of printing out that entire row so if I save that and run it then we can see that now we get those languages and like I said these are delimited by semicolons here so to clean this up a bit and turn this into a list of languages we can actually split the values on that semicolon by saying after we access that key we can simply say dot split and split on those semicolons so if I save that and run it then now we can see that we have a Python list of those languages so sometimes you're going to run into data that you need to clean up or analyze a bit before you're actually able to plot the data that you want so that's why I'm showing that process here so in our case we want to plot the most popular programming languages from the results of this survey so we need to keep a count of each language that each respondent said that they work with so there are a lot of different ways that we could do this as well we could keep a list and count them at the end we could keep a dictionary and update the counts of that dictionary each time but this is actually so common that Python has a builtin class for this kind of thing called counter and it's definitely the best way to do something like this now if you don't know how counters work they can be extremely helpful and I plan on making a video specifically about counters in the near future but I haven't put one together just yet so first let me show you how a quick example of how counters actually work so let me open up my terminal here and I'm going to run Python and let me show you how counters work here really quick so to import these I'm going to say from collections import counter they are from the collections module and now that we have a counter I want to say C is equal to counter and I'm going to pass in a list here so I'm going to pass in a list of Python and I'll also pass in a of Python and JavaScript those two values in my list so if I look at that counter we can see that this says okay I have a counter here I have a key of Python and that's currently set to 1 I have a key of JavaScript and that's currently set to 1 so it's keeping count of how often it sees these values so to update this counter I can simply say C dot update and now I'm going to pass in a new list so this new list let's say this time i say c plus plus whoops C++ and Python okay so now let me look at this counter so now when we look at the counter we can see okay now python is two because it's seen Python twice we saw it up here when we first created the counter and we saw what up saw it right here when we updated the counter it still only seen JavaScript one time the first time we created it and it's only seen C++ one time so now let's do an update one more time so if I run that update statement again with C++ and Python and then look at our counter again now it's saying okay I've seen Python three times c plus plus twice javascript once so this is what we're going to use to keep track of these languages so at the top of my script let me exit out of Python here I hope that all made sense to you because these are the kinds of things that you need to do sometimes when you clean up data for plotting okay so I'm going to close down that output now up here at the top of my script I'm going to import that counter so again that's from collections import counter spell that right okay now I'm going to instantiate a new counter right after we read in our csv data so right above our row here i'm going to make a variable and i'm going to call this language underscore counter and set that equal to an empty counter so right now we only have the data for a single row but we want to grab the exact same list of languages from every row so in order to do this we can copy what we've already printed out here this big long thing here is what god is that list of languages from that single row so let's copy that and now we can loop over all of the rows of our csv data and update our counter with the data that is within this list here so i'm going to say four row in csv reader and this will loop over every row in that csv file and i'm gonna say language counter dot update and we want to update that with that list of languages for every single row and so i'm going to paste that in and this section here is what's going to give us those list of languages so now our language counter get updated with all those languages okay so now let's print out our language counter to see if it looks like we have some coherent data and I'm going to do this back on the main level of the Python script outside of this with context manager here so above our PLT title I'm going to print out language counter so let's run that and it looks like we've got some good data here okay so since this is a counter it should print out sorted with the most responses at the beginning so we can see here that we have JavaScript with 59,000 HTML CSS 55 SQL 47 Python 36,000 Java 35,000 and so on now we can see that there are a lot of programming languages here if I remember correctly I think there are 28 total here so we probably don't want to plot all of these so let's say that we just wanted the 15 most common languages well the great thing about using a counter like we did here is that it actually has a most common method builtin to do this for us so whenever I'm printing this out I could say print language counter dot most common and just pass in a 15 and if I run that then that is the 15 most common responses and that most common method actually returned a list here and each item in this list is a tuple containing so this is one tuple here it's containing the language and the count so now let's try to plot this data so how would we do this well first we need to split out the languages into their own list and these corresponding counts into their own list so when we did our previous bar charts we had our X and yaxis so we'll want all of our languages on one axis and the counts on another so that's why we need to split those up so there are also a couple ways that we can do this now let me show you a way that takes a little bit more code but I think is going to be where most everyone will be able to read it so to do this I'm just going to overwrite this line here actually I will keep that there for now but above this line I'm just gonna say languages and set this as an empty list and then I'll say popularity that's going to be for the numbers so we want the languages in this list and this corresponding popularity in this list so now let's loop over all those tuples that we got back from this most common method so I'll say for item in language counter not most common whoops and let me sorry let me go the next line here and remember this is going to be looping over a list of tuples and the first value of that tuple is going to be the language and the second value is going to be the popularity so I'll just say languages dot append item index of 0 to grab that first item and append that to our languages and we want to append the second item to our popularity so now if I print out our languages and our popularity languages print popularity save that and run it then we can see that now we have one list here that is all of our top 15 most common languages and the second list here is the corresponding popularity of that language according to that survey so now we can actually use these two lists for our plot now there's actually a way of doing this whole section right here there's actually a way of doing that with a oneliner using the zip function and unpacking values and things like that but I wasn't sure how many people would find that confusing so I think it's easier to read this way so I just decided to do it this way instead okay so now that we have these lists here let me exit that output there and I'm also going to get rid of those print statements so now that we have these lists let's plot these just like we did before so to do that we can just say PLT dot bar because we want to make a bar chart here and on our xaxis we're going to plot the languages and on the yaxis let's plot the popularity and it's also uncommon about our titles and labels here and change those to match what we're actually plotting so instead of median salary I'm going to type in let's just say most popular languages spelled that wrong that's okay for the X label here I can just say our X label is the programming languages so I'll say programming languages and for the Y label here I'll say number of people who use okay so now with that in place let me save that and run this and let's take a look at our chart now we can see right off the bat when we have this many items it's hard to see all of these using a vertical bar chart like we did here when you have a lot of items then it might be more readable to use a horizontal bar chart instead and we can do that easily just by changing our bar method to a bar H method so right here where we're saying dot bar I'm going to change that and say dot bar H so now we can leave our arguments exactly as they are because the horizontal chart expects the yaxis values first so we'll just keep our languages there now we will have to change our axis labels here because those are going to be different now so I'm just gonna switch the X and Y labels here real quick so I'm just gonna have programming languages as our wide label number of people who use as our X label okay and now I think that's about it and actually now that I think about it I don't even think that we need this Y label telling us that these are programming languages that's pretty selfevident since the names of the programming languages are actually the labels themselves so I'm just gonna get rid of that that's one thing with plots is it's nice to be descriptive but you can also be overly descriptive so I'm gonna get rid of that actually just let me comment it out instead okay so now let me run this and now we can see that we have whoops a vertical bar chart here let me open this back up make this a little larger okay so what I meant to say is we have a horizontal bar chart here so we can see that this is much easier to read with a lot of values and those aren't scrunched together like they were in that vertical bar chart so whenever you're plotting things out if you've got a lot of values to plot with a bar then it might be a good idea to use a horizontal for this type of thing now one thing here is that with a horizontal bar chart maybe you want the most popular language right now it's down here at the bottom maybe we want that at the top since we read from the top down so to do this we could simply just reverse the list that we're passing into the bar H method before we actually plot it so I'm going to close that down and now up here before that bar H method I'm simply going to say languages dot reverse and popularity dot reverse and the reverse method on a list actually reverses those in place so we don't need to set languages equal to this or anything like that it's actually going to modify that list in place so now if I save that and run it then now we can see that we have the most popular languages up top and I think that that looks a lot better now I did say that I was going to show you a faster way to load in that data from the CSV using pandas so let me show you how to do that because for the rest of the series I'm probably going to use pandas to load in data since it's a bit faster and it's also a bit cleaner so first of all if we don't have pandas installed then we'll need to do that and it's really easy to install so first let me install that I'll just open up my terminal here and clear this out and we can just install that using pip by saying pip install pandas whoops got the wrong spelling there pip install pandas and now once that's installed we will need to I'm just going to assume that that installs correctly and it did ok so back here in our script up here at the top we need to import this so I'm just gonna say import pandas as PD that's another convention when you're using pandas is to import it as PD ok so up here at the top of our file instead of opening our file and using the dict reader method to read in the data we can instead replace that with a pandas method so now instead of doing it like this we can simply say so I'm going to get rid of this with context manager here and since we got rid of that context manager I'll an indent these other lines here but now where we were opening that file instead I can simply say data is equal to PD dot read underscore CSV and pass in the name of that CSV file and it was data dot CSV and now I can specify some columns so I'm going to say that the ID I'm going to create this IDS variable and I'm going to see ID is the let me see exactly what that column name was responder ID so I'll pass in responder ID there so that's going to set this IDS variable equal to all of the IDS in that responder ID column and we can do the same thing with the languages so I'll call this variable lang underscore responses is equal to data and we want the key to be languages worked with so I'll grab that so we still want our language counter but now here for our loop instead of saying for row and CSV reader this doesn't exist anymore now we have this list of languages here so I can just say for response in lang responses update that counter so that simple update to our code there should work exactly the way that we that it worked before so if I save this and I run it then whoops name row is not defined okay so yeah I got an error here that says name Row is not defined I also meant to update this section one here because there's no row anymore so we just want to split the response instead so response dot split because remember these Lang responses here when we're looping through these each response is going to be this entire section here of all of the languages so we can simply just split that response okay so I'll save that and run it and this should work exactly like it worked before and we can see that it does that looks pretty good now like I was saying before this is actually realworld data that I grabbed from their actual survey and I actually have those charts that stackoverflow put together when they analyzed their survey data so let me open those up and see if we got similar results so I'm gonna put my chart here on the right and their chart I have open here in the browser so let me open that up okay so here is their chart plotting out the exact same thing that we just plotted now there could be some small differences here based on how I sanitize the data compared to how they sanitized it but you can see that as far as the order goes we got the same results they've also styled their plot a bit further but with a little customization we could probably get something very similar so it looks like we just need to change up the colors a bit and add in a little spacing and also make these lines a little thinner and it would almost be identical so that's why learning things like this can be extremely useful because these companies are constantly looking for people who can analyze their data and present it in ways that can give insights like this so this is definitely a skill that you're going to be able to apply to a lot of different situations just like we did here okay so before we end I'd like to mention the sponsor of this video and that is brilliant org brilliant is a problemsolving website that helps you understand underlying concepts by actively working through guided lessons they have computer science courses ranging from algorithms and data structures to machine learning and neural networks they even have a coding environment built into their website so that you can run code directly in the browser and that's a great way to compliment watching my tutorials because you can apply what you've learned in their active problemsolving environment and that helps to solidify that knowledge they're guided lessons will challenge you but you also have the ability to get hints or even solutions if you need them it's really tailored towards understanding that material so they're computer science material is fantastic and I really like what they're doing they also have plenty of courses depending on what you're most interested in so they have courses in different fields of mathematics or astronomy solar energy computational biology and all kinds of other great content so to support my channel and learn more about brilliant you can go to brilliant org ford slash CMS to sign up for free and also the first 200 people that go to that link will get 20% off the annual premium subscription and you can find that link in the description in below and again that's brilliant org ford /c m/s okay so I think that is going to do it for this video hopefully you feel a bit more comfortable working with matplotlib and how you can pluck out the data that you need and create types of charts that you'd like in this video we covered bar charts but in the next video we're going to learn how to create pie charts and pie charts are great for seeing how our data is proportioned and quickly visualize what different categories make up large and small pieces of your data so be sure to check that out but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways to simply like the video and give them a thumbs up and also it's a huge help to share these videos with anyone you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
