With timestamps:

00:00 - hey everybody how's it going in this
00:02 - video we're going to be taking a look at
00:04 - list comprehensions in Python so
00:06 - basically a list comprehension is an
00:09 - easier and more readable way to create a
00:13 - list now I think the best way to learn
00:15 - list comprehensions is to first show
00:17 - what it would look like in a for Loop
00:19 - because I think um everybody is familiar
00:22 - with for loops and even if you're coming
00:24 - from another language uh you'll be
00:26 - familiar with that as well so let's take
00:28 - a look at some of these examples and
00:30 - I'll show you some of the advantages to
00:32 - list comprehensions in terms of uh how
00:35 - easy they are to write and also in how
00:38 - easy they are to read so let's go ahead
00:41 - and take a look at this first example
00:43 - here so in this first example I have
00:46 - this comment here that this is just
00:48 - going to be the easiest Loop all it does
00:50 - is pretty much copy it so I'm saying
00:53 - that I want in for each in in nums so if
00:57 - you to write this in a for Loop first
00:59 - you would create an empty list and then
01:02 - you see here I have a list of numbers 1
01:04 - through 10 and then I have this empty
01:06 - list my nums so we're doing four in in
01:09 - nums so it's going to Loop through all
01:11 - these numbers my list. append in so it's
01:15 - just going to add each number to this
01:17 - list then we're going to print out that
01:18 - list so let's go ahead and run that and
01:21 - you can see that it's exactly what we'd
01:23 - expect it's just a copy of the top list
01:25 - here now let's see what this looks like
01:27 - in a list comprehension and also
01:30 - notice how similar the list
01:32 - comprehension is to my comment here so
01:35 - what I'm going to say is I'm going to
01:37 - make my list equal to and then brackets
01:40 - so the brackets means that we're making
01:42 - a list and then let's try to pretty much
01:46 - copy exactly what is in the comment here
01:49 - so I want in and then for each in in
01:55 - nums that's a list comprehension so what
01:58 - so this is what we're returning this is
02:00 - what we want I want in and then this is
02:03 - the for Loop here for in and nums so if
02:06 - I save that and run it then I actually
02:09 - have to print this out so that it shows
02:12 - up so we'll run that and you'll see that
02:15 - it's the exact same result that we had
02:18 - from the for Loop but this is much
02:20 - easier to write and it's pretty easy to
02:23 - understand also so that's about the
02:24 - easiest list comprehension that you can
02:26 - do um so let's do a slightly more
02:30 - complicated example so in this example
02:33 - here if we read the comment I'm saying
02:36 - that I want n s so n * n for each n in
02:40 - nums so this is pretty similar to our
02:43 - previous example but now we're actually
02:45 - returning the square of n instead of
02:47 - just copying all the values so to do
02:49 - this in a for Loop we would create an
02:51 - empty list and then we would Loop
02:54 - through all the numbers and then we
02:56 - would append the square to the list and
02:59 - and then when we're done we can print
03:01 - the list so if I run this code then you
03:04 - can see that our result we get all of
03:06 - the squares of each number in this 1
03:09 - through 10 list okay now let's see the
03:11 - same example but in a list comprehension
03:15 - and also um let's notice how similar it
03:20 - is to the comment again so it's almost
03:23 - like reading exactly what we want so we
03:25 - want n * n for n in nums so this is what
03:32 - we are appending to our list and this is
03:35 - the for Loop here so if I save that and
03:38 - then let me remember to print it out
03:39 - this
03:41 - time and then run it then we get the
03:44 - exact same result as our for Loop now
03:46 - there's another way to do something like
03:48 - this that's very similar if you know how
03:50 - to use maps and lambdas then maybe
03:54 - you've made something like this before
03:56 - so let me comment out this code so map
04:00 - pretty much runs everything in the list
04:03 - through a certain function and Lambda is
04:06 - an anonymous function so if I save this
04:10 - and print it out you can see that we got
04:12 - the same result but list comprehensions
04:16 - pretty much do away with these map
04:18 - functions because they're no longer
04:20 - needed this works and it's a oneliner
04:22 - just like the comprehension but you
04:25 - can't read this and understand exactly
04:28 - what it's doing unless you already knew
04:30 - about these to begin with if you compare
04:32 - this readability to the list
04:33 - comprehension somebody who's completely
04:35 - new to python can see this and say n * n
04:40 - for n and nums and that just is readable
04:44 - it just kind of flows together and you
04:46 - can kind of understand what's going on
04:48 - with these maps and lambdas it says map
04:51 - Lambda n n times n nums it just doesn't
04:55 - it just doesn't read very well and you
04:57 - have to be experienced with those before
04:58 - you understand what's going on so if you
05:01 - are using maps and lambdas from within
05:03 - your code then you might want to check
05:05 - and see if those can be converted to
05:07 - list comprehensions because 99% of the
05:10 - time they can be so I'm going to comment
05:14 - these out here and erase these and we'll
05:18 - move on to um a slightly more difficult
05:22 - example okay so in the comment for this
05:24 - example I'm saying that I want n for
05:28 - each n in nums if n is even so this is
05:32 - going to create a list that is all the
05:37 - even numbers of our original 1 through
05:39 - 10 list so what's going on in our for
05:41 - Loop here is we're creating our empty
05:44 - list and then we're saying for each item
05:46 - in the numbers list then if that number
05:51 - mod two which uh will give us the
05:53 - remainder after we divide it by two is
05:56 - equal to zero that means that it's even
05:58 - so then a pin that to our list and then
06:01 - at the end we'll print out print out our
06:03 - list so if we run that then you can see
06:06 - that it works we get 2 4 6 8 10 so now
06:09 - let's look at this same example using a
06:12 - list comprehension so I'm going to say
06:16 - my list equal to brackets which means
06:19 - that we're making a list so we want in
06:23 - for n in nums if in mod 2 equals equals
06:32 - zero so what we're saying is that we
06:35 - want we want an item for each item in
06:38 - nums if that item mod 2 equals equal
06:42 - zero so let's save that and actually let
06:46 - me print it out
06:47 - here and then run that and you can see
06:50 - that we get the exact same result as our
06:51 - for Loop now just like the map and
06:55 - Lambda functions there's also the filter
06:58 - and Lambda functions which is pretty
07:01 - much the same thing so instead of map we
07:04 - have filter and what this does is it
07:08 - filters um it runs the list through this
07:11 - function and only gives us the values
07:14 - that are uh even so if we print this out
07:17 - you can see that it works but the same
07:19 - with the map Lambda function people just
07:22 - aren't going to know what this is if
07:25 - they're new to it it's just not as
07:27 - readable as this list comprehension is
07:29 - so let's go ahead and delete all of this
07:32 - stuff and move on to a slightly more
07:37 - difficult example so in this example
07:39 - here I'm saying that I want a letter
07:45 - number pair for each letter in AB C D
07:49 - and each number in 01 2 3 so for example
07:54 - I would want a0 A1 A2 A3 b0 B1 1 B2 B3
08:00 - and so on so if we were to do this with
08:03 - a for Loop then we would create our
08:06 - empty list then we would do a for Loop
08:09 - for letter in ABC and then within that
08:13 - for loop we're going to have another
08:15 - nested for Loop and say for Num in range
08:19 - four which will give us 0 one 2 3 and
08:22 - then we're going to do a my list. ainn a
08:26 - tuple of the pair letter and number so
08:30 - if I save that and I run it then you can
08:33 - see that we got all of our pairs we got
08:36 - a z A1 A2 A3 b0 B1 B2 B3 and so on so we
08:42 - can have these nested for Loops in list
08:45 - comprehensions as well so if I was to do
08:47 - this in a list comprehension I would say
08:50 - my list equals create an empty list Here
08:53 - and Now what I want is I want
08:57 - letter num
09:00 - for
09:02 - letter in a b c d and then write after
09:07 - that for Loop for Num in
09:13 - range four so let's save this and print
09:16 - it out and make sure I typed everything
09:19 - right so we print that out and we see
09:22 - that we get the exact same result as our
09:24 - for Loop now let's walk through this one
09:26 - one more time so what we're saying is
09:29 - that that we want a list so we open up
09:31 - our brackets and we're saying that we
09:33 - want this tupal letter number four
09:38 - letter in ABC D for Num in range four so
09:43 - one thing I probably should have
09:44 - mentioned earlier is that these values
09:46 - that we're saying that we want they have
09:48 - to match these values that we assign
09:51 - here so I couldn't just call this number
09:54 - here I couldn't say that I want letter
09:56 - num for letter in ABCD four number in
10:00 - range four because it's not going to
10:02 - know what this value is this numb value
10:06 - we have to use the same values that we
10:09 - want uh whenever we say that we want
10:13 - those values in the list so you can see
10:15 - how we can start to do some complicated
10:18 - lists here um that take you know uh a
10:22 - good bit of lines of code that we can
10:24 - write as a oneliner and it's slightly
10:26 - more readable as well but it's not only
10:29 - list that you can do these
10:30 - comprehensions with you can also do this
10:32 - with dictionaries and sets also so if I
10:36 - delete that then let's move down to our
10:39 - next example here now this is going to
10:41 - be an example of a dictionary
10:43 - comprehension so I have two lists here I
10:45 - have names and then I have uh their
10:48 - superhero name that matches up with
10:51 - their first name so um if you've never
10:54 - seen this ZIP function here let me just
10:57 - print out this ZIP function here so that
10:59 - you know what it does so what the zip
11:01 - function does is um so all these match
11:04 - up one to one so the first index of
11:07 - names is uh matches up with the first
11:10 - index of the heroes list here now if we
11:13 - run zip then it's going to create a list
11:16 - of tupal that match those up for us so
11:18 - it's going to say it's going to be a
11:19 - tupal of Bruce Batman and then the next
11:22 - tup will be Clark Superman and so on so
11:26 - I'm going to make a dictionary comp
11:29 - renson using this uh ZIP function so let
11:32 - me take that out and now you can see
11:36 - that in my comment here I'm saying that
11:39 - I want a dictionary of the name as the
11:43 - key hero as the value for each name hero
11:48 - in zip names and heroes and this is
11:52 - going to be a list of tupal so here in
11:54 - the for loop I am making an empty
11:57 - dictionary and then I I'm looping
12:00 - through these tupal and saying that for
12:03 - the name of that tupal I want to be my
12:06 - key in the dictionary and for the hero
12:08 - of that tupal I want to be the value in
12:11 - the dictionary and then I'll print out
12:12 - the dictionary here so if I save that
12:15 - and run it then you can see that we get
12:17 - our dictionary using our for Loop so now
12:20 - let's say that we want to do this as a
12:22 - list or as a dictionary comprehension so
12:26 - I'm going to do my dict equal to now
12:30 - instead of the brackets this isn't a
12:31 - list anymore it's a dictionary so we're
12:33 - going to use these braces instead so for
12:36 - the dictionary comprehension I'm going
12:37 - to say name and then colon hero for name
12:44 - comma hero in
12:48 - zip heroes or actually that's going to
12:51 - be names comma Heroes so save that and
12:56 - now let's print this out
13:00 - and you can see that we get the exact
13:02 - same result that we did with our for
13:05 - Loop and it's easy to add restrictions
13:08 - onto the ends of these comprehensions so
13:11 - like in this comment here uh I want to
13:13 - do the same thing but I don't want Peter
13:17 - added to this list so here at the end I
13:20 - can just say if name is not equal
13:23 - to Peter and then run that and you can
13:27 - see that we get our list uh without
13:30 - Peter and Spider-Man included in the
13:32 - list so comprehensions really make it
13:35 - easy to add those loops and those
13:38 - conditionals onto uh the existing
13:41 - comprehension so now let's go ahead and
13:44 - delete the dictionary comprehension
13:47 - example and we'll move on to the set
13:52 - comprehensions so if you don't know what
13:54 - a set is a set is pretty much like a
13:57 - list except it has all unique values so
14:00 - uh you see here that we have this
14:02 - jumbled mess of a bunch of values
14:04 - between one and or between 0o and 10 and
14:07 - um so whenever we make a set and loop
14:11 - through and add those values to the set
14:14 - the final set is going to have all
14:16 - unique values so if I have this list of
14:19 - nums uh to do this in a for Loop I'm
14:21 - going to say my set equal to an empty
14:24 - set and then for each item in nums my
14:28 - set. add that item and now I'm going to
14:30 - print out my set so let's save that and
14:33 - run it and you can see that I get all
14:35 - the unique values um from that nums list
14:39 - so now if I wanted to turn this into a
14:42 - set comprehension then I can comment out
14:45 - the for Loop there and I'm just going to
14:47 - say my set equal to and this is going to
14:50 - be braces again just like the dictionary
14:52 - comprehension but we're not going to
14:54 - have a colon like the dictionary
14:56 - comprehension had so now we can do this
14:59 - just like the other list comprehensions
15:01 - so we want n for n in nums so save that
15:06 - now this is doing exactly what this for
15:08 - Loop did it's just adding in for each
15:12 - number in the nums list so if I print
15:16 - this
15:17 - out and run it then you can see that we
15:20 - get the exact same result that we got
15:22 - with the for Loop and just like with the
15:24 - list comprehensions you can add nested
15:27 - loops and condition onto the end of this
15:30 - as much as you want um so let's go ahead
15:33 - and delete that and so that does it for
15:36 - the comprehensions now I do have this
15:38 - one last example here of generator
15:41 - Expressions now generators are a lot
15:43 - different than lists and dictionaries
15:45 - and sets um but I wanted to include them
15:48 - in this tutorial because uh a generator
15:52 - expression is so similar to a list
15:55 - comprehension so if you do want a more
15:57 - in-depth look at the advantages of
16:00 - generators then you can watch my video
16:02 - that I made uh specifically on
16:03 - generators but in this example I'm just
16:06 - going to focus on generator Expressions
16:09 - okay so if we uncomment out this code
16:10 - here this is just a regular generator
16:14 - this isn't an expression so if we look
16:16 - at the comment I'm saying that I want to
16:19 - yield n * n so the square of n for each
16:22 - in and nums just like our other examples
16:25 - so here our generator function uh we we
16:28 - are passing in this nums list and then
16:31 - we're saying for n in nums yield the
16:35 - square of N and then here we're saying
16:38 - my gen equals this gen function and
16:41 - we're passing in that list of numbers
16:43 - and then finally here at the bottom we
16:46 - are looping through that generator and
16:49 - printing out each I so let's save that
16:52 - and run it and you can see that it uh
16:56 - ran the for Loop and printed out all of
16:59 - the values in that generator now if I
17:01 - was to do this with a generator
17:02 - expression uh the syntax is almost
17:06 - identical to a list comprehension but
17:09 - instead of the brackets or the braces
17:13 - we're going to use parentheses so now
17:15 - just like the other examples we can say
17:18 - I want n * n for n in nums save that and
17:26 - then we still need to keep our for Loop
17:28 - here because we have to iterate through
17:30 - that generator so if I save that and
17:33 - print it out then you can see that we
17:35 - got the exact same result as we did with
17:39 - these uh lines of code that where we had
17:42 - to create the generator function and do
17:45 - the for Loop and then create the
17:47 - generator using the function and all of
17:49 - that so you can see how this one line of
17:52 - code is not only a lot easier to write
17:55 - and maintain but it's also a lot more
17:57 - readable as well as well so that about
17:59 - does it for this video on list
18:01 - comprehensions um you you'll be
18:03 - surprised at how often you'll use these
18:06 - and how much code that you can go
18:08 - through your code base and replace these
18:11 - long nested for loops with these list
18:14 - comprehensions so if you guys do have
18:16 - any questions just ask in the comment
18:18 - section below be sure to subscribe for
18:20 - future python videos and thank you guys
18:23 - for
18:27 - watching

Cleaned transcript:

hey everybody how's it going in this video we're going to be taking a look at list comprehensions in Python so basically a list comprehension is an easier and more readable way to create a list now I think the best way to learn list comprehensions is to first show what it would look like in a for Loop because I think um everybody is familiar with for loops and even if you're coming from another language uh you'll be familiar with that as well so let's take a look at some of these examples and I'll show you some of the advantages to list comprehensions in terms of uh how easy they are to write and also in how easy they are to read so let's go ahead and take a look at this first example here so in this first example I have this comment here that this is just going to be the easiest Loop all it does is pretty much copy it so I'm saying that I want in for each in in nums so if you to write this in a for Loop first you would create an empty list and then you see here I have a list of numbers 1 through 10 and then I have this empty list my nums so we're doing four in in nums so it's going to Loop through all these numbers my list. append in so it's just going to add each number to this list then we're going to print out that list so let's go ahead and run that and you can see that it's exactly what we'd expect it's just a copy of the top list here now let's see what this looks like in a list comprehension and also notice how similar the list comprehension is to my comment here so what I'm going to say is I'm going to make my list equal to and then brackets so the brackets means that we're making a list and then let's try to pretty much copy exactly what is in the comment here so I want in and then for each in in nums that's a list comprehension so what so this is what we're returning this is what we want I want in and then this is the for Loop here for in and nums so if I save that and run it then I actually have to print this out so that it shows up so we'll run that and you'll see that it's the exact same result that we had from the for Loop but this is much easier to write and it's pretty easy to understand also so that's about the easiest list comprehension that you can do um so let's do a slightly more complicated example so in this example here if we read the comment I'm saying that I want n s so n * n for each n in nums so this is pretty similar to our previous example but now we're actually returning the square of n instead of just copying all the values so to do this in a for Loop we would create an empty list and then we would Loop through all the numbers and then we would append the square to the list and and then when we're done we can print the list so if I run this code then you can see that our result we get all of the squares of each number in this 1 through 10 list okay now let's see the same example but in a list comprehension and also um let's notice how similar it is to the comment again so it's almost like reading exactly what we want so we want n * n for n in nums so this is what we are appending to our list and this is the for Loop here so if I save that and then let me remember to print it out this time and then run it then we get the exact same result as our for Loop now there's another way to do something like this that's very similar if you know how to use maps and lambdas then maybe you've made something like this before so let me comment out this code so map pretty much runs everything in the list through a certain function and Lambda is an anonymous function so if I save this and print it out you can see that we got the same result but list comprehensions pretty much do away with these map functions because they're no longer needed this works and it's a oneliner just like the comprehension but you can't read this and understand exactly what it's doing unless you already knew about these to begin with if you compare this readability to the list comprehension somebody who's completely new to python can see this and say n * n for n and nums and that just is readable it just kind of flows together and you can kind of understand what's going on with these maps and lambdas it says map Lambda n n times n nums it just doesn't it just doesn't read very well and you have to be experienced with those before you understand what's going on so if you are using maps and lambdas from within your code then you might want to check and see if those can be converted to list comprehensions because 99% of the time they can be so I'm going to comment these out here and erase these and we'll move on to um a slightly more difficult example okay so in the comment for this example I'm saying that I want n for each n in nums if n is even so this is going to create a list that is all the even numbers of our original 1 through 10 list so what's going on in our for Loop here is we're creating our empty list and then we're saying for each item in the numbers list then if that number mod two which uh will give us the remainder after we divide it by two is equal to zero that means that it's even so then a pin that to our list and then at the end we'll print out print out our list so if we run that then you can see that it works we get 2 4 6 8 10 so now let's look at this same example using a list comprehension so I'm going to say my list equal to brackets which means that we're making a list so we want in for n in nums if in mod 2 equals equals zero so what we're saying is that we want we want an item for each item in nums if that item mod 2 equals equal zero so let's save that and actually let me print it out here and then run that and you can see that we get the exact same result as our for Loop now just like the map and Lambda functions there's also the filter and Lambda functions which is pretty much the same thing so instead of map we have filter and what this does is it filters um it runs the list through this function and only gives us the values that are uh even so if we print this out you can see that it works but the same with the map Lambda function people just aren't going to know what this is if they're new to it it's just not as readable as this list comprehension is so let's go ahead and delete all of this stuff and move on to a slightly more difficult example so in this example here I'm saying that I want a letter number pair for each letter in AB C D and each number in 01 2 3 so for example I would want a0 A1 A2 A3 b0 B1 1 B2 B3 and so on so if we were to do this with a for Loop then we would create our empty list then we would do a for Loop for letter in ABC and then within that for loop we're going to have another nested for Loop and say for Num in range four which will give us 0 one 2 3 and then we're going to do a my list. ainn a tuple of the pair letter and number so if I save that and I run it then you can see that we got all of our pairs we got a z A1 A2 A3 b0 B1 B2 B3 and so on so we can have these nested for Loops in list comprehensions as well so if I was to do this in a list comprehension I would say my list equals create an empty list Here and Now what I want is I want letter num for letter in a b c d and then write after that for Loop for Num in range four so let's save this and print it out and make sure I typed everything right so we print that out and we see that we get the exact same result as our for Loop now let's walk through this one one more time so what we're saying is that that we want a list so we open up our brackets and we're saying that we want this tupal letter number four letter in ABC D for Num in range four so one thing I probably should have mentioned earlier is that these values that we're saying that we want they have to match these values that we assign here so I couldn't just call this number here I couldn't say that I want letter num for letter in ABCD four number in range four because it's not going to know what this value is this numb value we have to use the same values that we want uh whenever we say that we want those values in the list so you can see how we can start to do some complicated lists here um that take you know uh a good bit of lines of code that we can write as a oneliner and it's slightly more readable as well but it's not only list that you can do these comprehensions with you can also do this with dictionaries and sets also so if I delete that then let's move down to our next example here now this is going to be an example of a dictionary comprehension so I have two lists here I have names and then I have uh their superhero name that matches up with their first name so um if you've never seen this ZIP function here let me just print out this ZIP function here so that you know what it does so what the zip function does is um so all these match up one to one so the first index of names is uh matches up with the first index of the heroes list here now if we run zip then it's going to create a list of tupal that match those up for us so it's going to say it's going to be a tupal of Bruce Batman and then the next tup will be Clark Superman and so on so I'm going to make a dictionary comp renson using this uh ZIP function so let me take that out and now you can see that in my comment here I'm saying that I want a dictionary of the name as the key hero as the value for each name hero in zip names and heroes and this is going to be a list of tupal so here in the for loop I am making an empty dictionary and then I I'm looping through these tupal and saying that for the name of that tupal I want to be my key in the dictionary and for the hero of that tupal I want to be the value in the dictionary and then I'll print out the dictionary here so if I save that and run it then you can see that we get our dictionary using our for Loop so now let's say that we want to do this as a list or as a dictionary comprehension so I'm going to do my dict equal to now instead of the brackets this isn't a list anymore it's a dictionary so we're going to use these braces instead so for the dictionary comprehension I'm going to say name and then colon hero for name comma hero in zip heroes or actually that's going to be names comma Heroes so save that and now let's print this out and you can see that we get the exact same result that we did with our for Loop and it's easy to add restrictions onto the ends of these comprehensions so like in this comment here uh I want to do the same thing but I don't want Peter added to this list so here at the end I can just say if name is not equal to Peter and then run that and you can see that we get our list uh without Peter and SpiderMan included in the list so comprehensions really make it easy to add those loops and those conditionals onto uh the existing comprehension so now let's go ahead and delete the dictionary comprehension example and we'll move on to the set comprehensions so if you don't know what a set is a set is pretty much like a list except it has all unique values so uh you see here that we have this jumbled mess of a bunch of values between one and or between 0o and 10 and um so whenever we make a set and loop through and add those values to the set the final set is going to have all unique values so if I have this list of nums uh to do this in a for Loop I'm going to say my set equal to an empty set and then for each item in nums my set. add that item and now I'm going to print out my set so let's save that and run it and you can see that I get all the unique values um from that nums list so now if I wanted to turn this into a set comprehension then I can comment out the for Loop there and I'm just going to say my set equal to and this is going to be braces again just like the dictionary comprehension but we're not going to have a colon like the dictionary comprehension had so now we can do this just like the other list comprehensions so we want n for n in nums so save that now this is doing exactly what this for Loop did it's just adding in for each number in the nums list so if I print this out and run it then you can see that we get the exact same result that we got with the for Loop and just like with the list comprehensions you can add nested loops and condition onto the end of this as much as you want um so let's go ahead and delete that and so that does it for the comprehensions now I do have this one last example here of generator Expressions now generators are a lot different than lists and dictionaries and sets um but I wanted to include them in this tutorial because uh a generator expression is so similar to a list comprehension so if you do want a more indepth look at the advantages of generators then you can watch my video that I made uh specifically on generators but in this example I'm just going to focus on generator Expressions okay so if we uncomment out this code here this is just a regular generator this isn't an expression so if we look at the comment I'm saying that I want to yield n * n so the square of n for each in and nums just like our other examples so here our generator function uh we we are passing in this nums list and then we're saying for n in nums yield the square of N and then here we're saying my gen equals this gen function and we're passing in that list of numbers and then finally here at the bottom we are looping through that generator and printing out each I so let's save that and run it and you can see that it uh ran the for Loop and printed out all of the values in that generator now if I was to do this with a generator expression uh the syntax is almost identical to a list comprehension but instead of the brackets or the braces we're going to use parentheses so now just like the other examples we can say I want n * n for n in nums save that and then we still need to keep our for Loop here because we have to iterate through that generator so if I save that and print it out then you can see that we got the exact same result as we did with these uh lines of code that where we had to create the generator function and do the for Loop and then create the generator using the function and all of that so you can see how this one line of code is not only a lot easier to write and maintain but it's also a lot more readable as well as well so that about does it for this video on list comprehensions um you you'll be surprised at how often you'll use these and how much code that you can go through your code base and replace these long nested for loops with these list comprehensions so if you guys do have any questions just ask in the comment section below be sure to subscribe for future python videos and thank you guys for watching
