With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning how to use
00:03 - the grep command from within the Linux
00:05 - or Mac terminal so grep stands for
00:07 - global regular expression print and it
00:10 - allows us to search for some text within
00:12 - files on our system and this is
00:14 - something that you'll find yourself
00:15 - using all the time once you become
00:17 - comfortable with it so let's go ahead
00:19 - and look at some practical examples
00:20 - where you might use this so first of all
00:22 - the most basic example is simply
00:24 - searching for some text within a normal
00:26 - file so I'm here in my terminal and in
00:29 - my current directory there is a file
00:31 - named names txt that has a bunch of
00:36 - random names and dummy data so let's
00:38 - search this file using grep to see if it
00:41 - contains the text Jane Williams
00:43 - so I'll just say grip and search for
00:46 - this name of Jane Williams within this
00:49 - file and we want to search the names txt
00:53 - file so what we're saying here is we are
00:55 - doing our grep command and then what we
00:57 - want to search and in this case we're
00:59 - searching for this name and then where
01:02 - we want to search so that is within the
01:04 - names txt file so if I run that then you
01:07 - can see it didn't find any results when
01:09 - there are no results it just jumps to
01:11 - the next line like it did here so
01:13 - instead let's search for John Williams
01:17 - and see if that has any results and we
01:20 - can see that we got two results here
01:22 - where it found two lines containing John
01:24 - Williams and return those entire lines
01:27 - now the second line was John Williamson
01:30 - but it still found Williams within this
01:33 - name so it returned that anyway so now
01:36 - let's say that we only wanted it to
01:38 - return a.match if it was the whole word
01:40 - so we only wanted to search for John
01:42 - Williams and not return like John
01:44 - Williamson here so to do this we can use
01:47 - the dash W option so if I pull back up
01:49 - that last command that we ran if I do a
01:52 - dash W before our search term here and
01:55 - run that then you can see that it didn't
01:57 - return this John Williamson it only
02:00 - returned the John Williams because we
02:02 - put in that we only wanted whole words
02:05 - now I also added a lowercase version of
02:07 - that name into that file also but it's
02:10 - currently not returning that because
02:11 - grep is case-sensitive
02:13 - so we can tell it to not be case
02:15 - sensitive by using the - I and so if I
02:19 - pull up the command that we just ran if
02:22 - I go back here and add the I to our
02:25 - current options and run that then we can
02:28 - see that now we get the lowercase
02:30 - version of that match and the regular
02:33 - case version of that match as well so I
02:35 - clear my screen but let me rerun at that
02:37 - last command just to pull those names
02:39 - back up again now just finding those
02:41 - matches doesn't give us information
02:42 - other than knowing our text is actually
02:45 - there but sometimes you want some
02:46 - additional information so for example
02:49 - it's common to want to know the line
02:50 - number of where it found our match and
02:53 - to do this we can add the dash in option
02:56 - to our search also so I'm just going to
02:58 - pull up that last search and we can add
03:00 - the in option on to there as well and if
03:03 - I run that then we can see that now
03:05 - we're getting some information about
03:06 - these matches it found this lowercase
03:09 - version on line 51 of that file and this
03:12 - uppercase version on line 431 of that
03:15 - file now another common bit of
03:17 - information that you might want is some
03:19 - additional context of where this match
03:21 - is found so we might want to also see a
03:24 - certain number of lines before and after
03:26 - the match to get an idea of the context
03:29 - of where this match was found and this
03:31 - is especially common if you're searching
03:32 - for something in a computer program that
03:35 - you wrote and want to see the
03:36 - surrounding code of the match and there
03:38 - are several ways that we can do this so
03:40 - if we want to see a certain number of
03:42 - lines that come before our match then we
03:44 - can use the upper case B option and you
03:47 - can remember that by thinking that you
03:49 - know I want to see the lines behind my
03:51 - match so I'm going to go ahead and clear
03:53 - the screen here and pull up the last
03:56 - option that we just ran and now we want
03:58 - to add in this upper case B option and
04:01 - I'm doing this separate from the other
04:03 - options that we added in because we want
04:05 - to pass in an argument to this so let's
04:07 - just pass in a for which we'll say that
04:09 - we want to say C for lines before our
04:12 - match so if I run this then we can see
04:15 - that we got both of those matches that
04:17 - we got before but now there's some
04:18 - additional context here so we have four
04:20 - lines before our match here and four
04:22 - lines before our match here now if we
04:24 - want to see a certain number of lines
04:26 - after our match
04:27 - then we can use the uppercase a option
04:29 - so I'm going to clear this out and pull
04:32 - up that last command and do an uppercase
04:35 - a instead of an uppercase B and if we
04:37 - run that then we can see that now
04:39 - instead of getting the lines before our
04:41 - matches now we're getting four lines
04:43 - before and four lines or four lines
04:45 - after for both of our matches and if you
04:48 - want to see the lines before and after
04:50 - your match then you can use the
04:51 - uppercase C option and you can remember
04:53 - that by thinking that we want to see the
04:55 - context surrounding our match and this
04:58 - is also the one that I use most often as
05:00 - well so if we clear this out and pull up
05:03 - the last command that we just ran if we
05:05 - do an uppercase C and I'm only going to
05:08 - do two lines here before and after so if
05:11 - we run that then we can see that we got
05:14 - our matches and there are two lines
05:16 - before the match and two lines after the
05:19 - match for both of those matches so like
05:21 - I said I especially use this if I'm
05:23 - searching for some text in a computer
05:25 - program or a function or something and I
05:27 - want to see the context surrounding that
05:28 - match okay so that is useful for finding
05:31 - texts in a certain file but what if we
05:33 - wanted to search for text and multiple
05:35 - files at once
05:36 - so let's say that we wanted to run the
05:38 - same search that we've been doing but
05:39 - against every file in our current
05:41 - directory now you might think that we
05:43 - could just do something like this where
05:46 - we let me clear the screen here so let
05:49 - me remove the context option here and
05:51 - just do the search of the whole word and
05:54 - not case-sensitive and get the line
05:57 - numbers and now let's try to search this
06:00 - through every file in our current
06:01 - directory now you might think that we
06:03 - can just do something like this where
06:05 - instead of searching in a specific file
06:07 - that we could just pass in at the
06:09 - current directory as where we want to
06:10 - search but if we run that then we can
06:12 - see that we get this error that this our
06:15 - current directory is a directory so what
06:17 - we need to do is use an asterisk
06:19 - wildcard to say that we want everything
06:21 - in this directory so if I rerun that
06:24 - same command but put an asterisk there
06:26 - and run that then we can see that this
06:29 - worked it said that it found a match in
06:31 - this memo dot txt file on line 4 and
06:35 - also the two matches and the name dot
06:38 - txt file that we saw before
06:40 - you can see that it also tried to search
06:43 - in this subdirectory that we have in our
06:46 - current folder here so it couldn't
06:48 - search that and we got an error there so
06:50 - maybe a better search for us there would
06:52 - be to just search all of the text files
06:54 - and we could do that by running the same
06:58 - command and instead just adding dot txt
07:01 - after that wildcard so if we run that
07:03 - then we can see that we got all of our
07:06 - matches but that it didn't try to search
07:08 - this subdirectory here ok so now let me
07:11 - clear that out ok but maybe we wanted it
07:15 - to actually search that subdirectory and
07:17 - this is very common when working on
07:18 - large projects maybe you have a lot of
07:20 - files and subdirectories and are
07:22 - searching for something that you can't
07:24 - remember exactly what directory or file
07:26 - where it's located
07:27 - so in that case you'd just want to
07:29 - search every single file and
07:31 - subdirectory in your project and to do
07:33 - this we can use a recursive search with
07:35 - the - our option and using a recursive
07:38 - search we actually can specify a
07:41 - directory as the starting point so let's
07:43 - do a recursive search for our text
07:46 - within the current directory so I'm
07:49 - going to pull up the search that we
07:51 - tried to do before on our current
07:53 - directory now remember without the
07:55 - asterisks here we got an error before
07:57 - saying that we couldn't search a
07:59 - directory but if we add that - our
08:02 - option onto the end it will do a
08:05 - recursive search and it'll actually
08:07 - search all of the files and
08:09 - subdirectories using that our option so
08:13 - if we run this then we can see that we
08:15 - got those same results from within our
08:17 - current directory within the memo txt
08:20 - file and the - from the names txt file
08:23 - but you can see that it also searched
08:25 - this subdirectory of personnel and found
08:27 - some matches in this emails txt file on
08:30 - line 5 and this phone numbers dot txt
08:32 - file on line 5 as well and actually to
08:36 - clean that up a bit I could have done
08:37 - that without that ford slash at the end
08:40 - there so let me clear this out and rerun
08:42 - that same command there and that just
08:44 - cleans it up a little bit ok so that's
08:45 - nice that we were also able to search
08:47 - that personnel subdirectory and get the
08:50 - matches within there as well but you do
08:52 - want to be careful with recursive sir
08:54 - just because if you know if you're in a
08:56 - big directory that has a ton of
08:57 - subdirectories then it's going to try to
09:00 - search all of those and can take an
09:01 - extremely long time to return any
09:03 - results and if it takes too long you
09:05 - might just have to kill it so just be
09:07 - aware that those recursive searches
09:08 - could be searching through lots and lots
09:10 - of files now if you're searching through
09:12 - multiple files like this then you might
09:14 - not actually be interested in the
09:15 - matches themselves you might only be
09:17 - interested in seeing what files contain
09:19 - a match and if you only wanted that
09:21 - information then you can add on the - l
09:24 - option and only return the files with
09:27 - matches so if I pull back up our last
09:30 - command and go back here and I'm gonna
09:32 - take off the in that shows the line
09:35 - because it wouldn't show this here
09:37 - anyway and then I'm gonna add on the L
09:39 - and this will just show us what files
09:41 - contain a match so if I run this then we
09:44 - can see that there that it doesn't
09:46 - display the match it just comes up and
09:48 - says that we found a match in memo txt
09:51 - name's not txt and all the matches
09:53 - within that subdirectory and if you
09:55 - remember we actually had two matches in
09:57 - names.txt file but this result just
09:59 - returns name's not txt once because it's
10:02 - just listing any file that has a match
10:05 - now if we wanted to see how many matches
10:07 - are in each file then we can use the C
10:10 - option so if we pull back up let me
10:13 - clear the screen here if we pull back up
10:16 - the command that we just ran and instead
10:18 - replace that L with a C and run that
10:22 - then we can see that we get some similar
10:24 - output as the L option but it also
10:27 - displays the number of matches in each
10:29 - file and don't worry about this D store
10:31 - file here that's just something that
10:33 - pops up on the Mac sometimes okay so now
10:36 - let's look at one practical use case for
10:37 - using grep that we haven't covered yet
10:39 - so we can pipe the output of other
10:42 - commands into grep to search for certain
10:45 - things so for example let's say that we
10:47 - wanted to search our history for our
10:50 - latest get commits so if we just display
10:53 - our history then we can see that if we
10:56 - wanted to find our get commits then
10:57 - there's a lot of information here to
10:59 - sift through
10:59 - so let's pipe this in the grep to narrow
11:02 - it down a bit so we could search for all
11:05 - of our git commits and our git history
11:06 - just by
11:08 - saying so first let me clear the screen
11:10 - here so that we can see a little bit
11:12 - better so we can just run history like
11:14 - we did before but now we're going to use
11:16 - a pipe and pipe that in to grip so now
11:20 - we'll say that we want to grip that
11:22 - output for get commits so if I run this
11:25 - then we can see that it narrows down our
11:27 - history two lines that match our grep
11:30 - search and we can even pipe this output
11:32 - into another grep command to narrow it
11:34 - down even further so if I only wanted to
11:37 - see git commits about dot files then I
11:40 - could run that same last command do
11:42 - another pipe and another grip and
11:44 - instead grep for dot files so first it's
11:48 - going to pass the output of history and
11:51 - narrow those down to the ones that have
11:54 - a git commit which are all right here
11:56 - and then just going to take this output
11:58 - and pipe that into grep again and search
12:02 - for the ones that have a dot file match
12:04 - so if I run that then we can see that
12:06 - now we only get our git commits with the
12:09 - dot files okay so now let me clear this
12:11 - okay so we're just about finished up but
12:14 - I wanted to show one more thing here so
12:16 - let's see how we can do some more
12:18 - advanced searches using regular
12:20 - expressions now I'm not going to go into
12:22 - detail about how to write regular
12:23 - expressions in this video but if you're
12:25 - interested then I'll put a link to my
12:27 - regular expression videos in the
12:29 - description section below
12:30 - so grep uses POSIX regular expressions
12:33 - by default now if you've watched my
12:35 - other videos on regular expressions
12:37 - those videos are actually using
12:39 - something called Perl compatible regular
12:41 - expressions which is also what Python
12:43 - uses as well so let me show you how this
12:45 - might affect your grep searches so let's
12:48 - say that we wanted to search a file for
12:50 - phone numbers so we might do something
12:52 - like this so I would do a grep and now
12:55 - we'll write our regular expression so
12:57 - I'm just going to do something simple
12:58 - I'll do dot dot dot and the dot and a
13:01 - regular expression is just matches any
13:03 - character so then I'll do a dash and
13:05 - then dot dot dot and then a dash and
13:08 - then dot dot dot dot so this will find
13:11 - any three characters then a dash then
13:14 - any 3 characters than a dash then any
13:16 - four characters so this should match a
13:18 - phone number and now let's pass in the
13:20 - file that we want to search so we'll
13:22 - names.txt so if I run that then we can
13:25 - see that that works and that we got back
13:26 - the phone numbers from that file but
13:28 - let's say that we wanted to make our
13:30 - search a little bit more specific and
13:32 - instead of searching for any character
13:34 - using the dot we wanted to search
13:36 - specifically for digits using backslash
13:38 - d so if you've seen my other reg X
13:41 - videos then you might think that we can
13:43 - do that search with something like this
13:45 - so let me erase this so let's say that
13:48 - we want to only get a digit so we'll do
13:50 - a backslash D and we want three of those
13:52 - so I'll pass in three is the quantifier
13:54 - there and then a dash and then the same
13:57 - thing digit and three of those and then
14:00 - a dash then a backslash D for a digit
14:03 - again and four of those so now if we run
14:06 - this then we don't get the results that
14:09 - we expect and that's because grep isn't
14:12 - using perl compatible regular
14:14 - expressions which is what that is
14:16 - so can we get those Perl compatible
14:19 - expressions to work well if you're on
14:21 - Linux then you can get this to work just
14:23 - by passing in a - uppercase P here
14:28 - before the search but if we run this if
14:31 - you're on a Linux machine and then that
14:33 - would work but I'm on a Mac and we can
14:36 - see that it doesn't now we can get this
14:38 - to work on a Mac but it's a little
14:39 - complicated so this next step is
14:41 - completely optional but you can follow
14:44 - along if you want to grep using these
14:46 - regular expressions on a Mac and if
14:48 - you're using Linux like I said then you
14:50 - won't have to do this step because Linux
14:52 - already has that functionality so in
14:54 - most of these Linux and Mac tutorials
14:56 - all of the commands usually run the same
14:58 - on both systems for the most part but
15:01 - these grep regular expressions are one
15:02 - example of something that is different
15:04 - between Mac and Linux Mac uses a version
15:07 - of grep called BSD grep and Linux uses a
15:11 - version of grep called GNU grep good new
15:14 - grip and you can see that version if you
15:16 - type grep and then - uppercase v and you
15:19 - can see that here we are using BSD grip
15:22 - and many people prefer the ganoub
15:24 - version of grep and that's what I prefer
15:26 - as well so I'll show you a trick for how
15:28 - you can actually install the ganoub
15:30 - version of grep on the Mac by installing
15:32 - it through homebrew so if I pull
15:34 - up homebrew in my browser here so I'm
15:37 - just in chrome and this is at brew SH
15:40 - now if you've never used homebrew it's
15:42 - basically a package manager for the Mac
15:44 - so you can follow through the
15:46 - installation instructions from their
15:47 - website and once you have that installed
15:49 - you can open a new terminal and then you
15:53 - should be able to install the new
15:55 - version of grep just by saying let me
15:58 - clear out my screen here we can install
16:00 - this by saying brew install grep and we
16:04 - also want to add in some options here so
16:06 - we'll say with default names the with
16:10 - default names option means that it will
16:12 - install it as grep and if you leave that
16:14 - off then it would actually install it as
16:17 - G grep which would allow you to use both
16:20 - the new version of grep and the mac bsd
16:23 - grep but ganoub grep as the default is
16:26 - fine with me so I'm gonna go ahead and
16:28 - run that and I will let this
16:30 - installation finish and once that's
16:33 - finished we'll likely need to open up a
16:35 - new terminal for that change to take
16:37 - effect if I do a grep - V you can see
16:40 - we're still using a BSD grep so let me
16:43 - open up a new terminal and I can
16:47 - maximize this and I am in full-screen
16:52 - mode here so let me take this down and
16:55 - then pull this tab out here into its own
16:58 - window now let me make this text larger
17:00 - so that everyone can see still okay so
17:04 - now if I say grep - V in our new window
17:07 - then we can see that now we are using
17:09 - the new grep so that's what we wanted
17:11 - okay so back to our example the reason
17:13 - we did all that was so that we could use
17:15 - the perl compatible regular expressions
17:17 - on the Mac and the canoe version of grep
17:20 - accepts that - uppercase P option that
17:23 - tells grep that we want to use those
17:26 - perl compatible expressions so if i go
17:29 - back to my other window here and grab
17:32 - that command that didn't run before on
17:37 - the mac so this is still using the bsd
17:40 - version if i run that you can see that
17:41 - we get an error if i navigate to my
17:47 - desktop and the
17:48 - directory that's where I was running
17:50 - those searches in the other window now
17:53 - if I paste in that command that didn't
17:56 - work before then we can see that by
17:58 - using that uppercase P option that we
18:00 - can now get the results that we expect
18:03 - and we can use these regular expressions
18:05 - with the options that we saw before too
18:08 - so if I wanted to do a more advanced
18:10 - search and see what files contain phone
18:14 - numbers under my current directory then
18:16 - I could do something like this so let me
18:18 - pull up the last command that we just
18:20 - ran and let me make this text a little
18:22 - larger just one more time here okay so
18:26 - if we wanted to see all the files that
18:28 - contain phone numbers under our current
18:31 - directory then what we could do is I
18:34 - could pass in my current directory as
18:37 - the search location and back here with
18:40 - our options we want to keep that
18:42 - uppercase P so that we can use our
18:44 - regular expression here and now let's
18:46 - also use some options that we saw before
18:47 - so I'll use a W for the whole word
18:50 - search I will use I for case-insensitive
18:53 - even though that doesn't really matter
18:55 - with this current regular expression I
18:57 - will use R to say that we want a
19:00 - recursive search since we're running
19:02 - this on the current directory it'll also
19:03 - search the sub directories and remember
19:06 - the L is what displays the files that
19:09 - contain our match instead of the matches
19:11 - themselves so with all of those options
19:14 - in place if I run that then we can see
19:16 - that it found phone numbers in our names
19:18 - txt file and our phone numbers file
19:21 - within the sub directory and you can do
19:24 - all of the other searches with regular
19:26 - expressions that we saw earlier in this
19:27 - video as well okay so I think that is
19:30 - going to do it for this video hopefully
19:31 - now you have a pretty good idea for how
19:33 - you can use the grep command to search
19:34 - for patterns of text and a lot of
19:37 - different ways throughout your file
19:38 - system but if you do have any questions
19:40 - about what we covered in the video then
19:42 - feel free to ask in the comment section
19:44 - below and I'll do my best to answer
19:45 - those and if you enjoy these tutorials
19:47 - and would like to support them then
19:48 - there are several ways you can do that
19:49 - the easiest ways is simply like the
19:51 - video and give it a thumbs up and also
19:52 - it's a huge help to share these videos
19:54 - with anyone who you think would find
19:55 - them useful and if you have the means
19:56 - you can contribute through patreon and
19:58 - there's a link to that page in the
19:59 - description section below be sure to
20:01 - subscribe for future
20:02 - videos and thank you all for watching
20:14 - you

Cleaned transcript:

hey there how's it going everybody in this video we'll be learning how to use the grep command from within the Linux or Mac terminal so grep stands for global regular expression print and it allows us to search for some text within files on our system and this is something that you'll find yourself using all the time once you become comfortable with it so let's go ahead and look at some practical examples where you might use this so first of all the most basic example is simply searching for some text within a normal file so I'm here in my terminal and in my current directory there is a file named names txt that has a bunch of random names and dummy data so let's search this file using grep to see if it contains the text Jane Williams so I'll just say grip and search for this name of Jane Williams within this file and we want to search the names txt file so what we're saying here is we are doing our grep command and then what we want to search and in this case we're searching for this name and then where we want to search so that is within the names txt file so if I run that then you can see it didn't find any results when there are no results it just jumps to the next line like it did here so instead let's search for John Williams and see if that has any results and we can see that we got two results here where it found two lines containing John Williams and return those entire lines now the second line was John Williamson but it still found Williams within this name so it returned that anyway so now let's say that we only wanted it to return a.match if it was the whole word so we only wanted to search for John Williams and not return like John Williamson here so to do this we can use the dash W option so if I pull back up that last command that we ran if I do a dash W before our search term here and run that then you can see that it didn't return this John Williamson it only returned the John Williams because we put in that we only wanted whole words now I also added a lowercase version of that name into that file also but it's currently not returning that because grep is casesensitive so we can tell it to not be case sensitive by using the I and so if I pull up the command that we just ran if I go back here and add the I to our current options and run that then we can see that now we get the lowercase version of that match and the regular case version of that match as well so I clear my screen but let me rerun at that last command just to pull those names back up again now just finding those matches doesn't give us information other than knowing our text is actually there but sometimes you want some additional information so for example it's common to want to know the line number of where it found our match and to do this we can add the dash in option to our search also so I'm just going to pull up that last search and we can add the in option on to there as well and if I run that then we can see that now we're getting some information about these matches it found this lowercase version on line 51 of that file and this uppercase version on line 431 of that file now another common bit of information that you might want is some additional context of where this match is found so we might want to also see a certain number of lines before and after the match to get an idea of the context of where this match was found and this is especially common if you're searching for something in a computer program that you wrote and want to see the surrounding code of the match and there are several ways that we can do this so if we want to see a certain number of lines that come before our match then we can use the upper case B option and you can remember that by thinking that you know I want to see the lines behind my match so I'm going to go ahead and clear the screen here and pull up the last option that we just ran and now we want to add in this upper case B option and I'm doing this separate from the other options that we added in because we want to pass in an argument to this so let's just pass in a for which we'll say that we want to say C for lines before our match so if I run this then we can see that we got both of those matches that we got before but now there's some additional context here so we have four lines before our match here and four lines before our match here now if we want to see a certain number of lines after our match then we can use the uppercase a option so I'm going to clear this out and pull up that last command and do an uppercase a instead of an uppercase B and if we run that then we can see that now instead of getting the lines before our matches now we're getting four lines before and four lines or four lines after for both of our matches and if you want to see the lines before and after your match then you can use the uppercase C option and you can remember that by thinking that we want to see the context surrounding our match and this is also the one that I use most often as well so if we clear this out and pull up the last command that we just ran if we do an uppercase C and I'm only going to do two lines here before and after so if we run that then we can see that we got our matches and there are two lines before the match and two lines after the match for both of those matches so like I said I especially use this if I'm searching for some text in a computer program or a function or something and I want to see the context surrounding that match okay so that is useful for finding texts in a certain file but what if we wanted to search for text and multiple files at once so let's say that we wanted to run the same search that we've been doing but against every file in our current directory now you might think that we could just do something like this where we let me clear the screen here so let me remove the context option here and just do the search of the whole word and not casesensitive and get the line numbers and now let's try to search this through every file in our current directory now you might think that we can just do something like this where instead of searching in a specific file that we could just pass in at the current directory as where we want to search but if we run that then we can see that we get this error that this our current directory is a directory so what we need to do is use an asterisk wildcard to say that we want everything in this directory so if I rerun that same command but put an asterisk there and run that then we can see that this worked it said that it found a match in this memo dot txt file on line 4 and also the two matches and the name dot txt file that we saw before you can see that it also tried to search in this subdirectory that we have in our current folder here so it couldn't search that and we got an error there so maybe a better search for us there would be to just search all of the text files and we could do that by running the same command and instead just adding dot txt after that wildcard so if we run that then we can see that we got all of our matches but that it didn't try to search this subdirectory here ok so now let me clear that out ok but maybe we wanted it to actually search that subdirectory and this is very common when working on large projects maybe you have a lot of files and subdirectories and are searching for something that you can't remember exactly what directory or file where it's located so in that case you'd just want to search every single file and subdirectory in your project and to do this we can use a recursive search with the our option and using a recursive search we actually can specify a directory as the starting point so let's do a recursive search for our text within the current directory so I'm going to pull up the search that we tried to do before on our current directory now remember without the asterisks here we got an error before saying that we couldn't search a directory but if we add that our option onto the end it will do a recursive search and it'll actually search all of the files and subdirectories using that our option so if we run this then we can see that we got those same results from within our current directory within the memo txt file and the from the names txt file but you can see that it also searched this subdirectory of personnel and found some matches in this emails txt file on line 5 and this phone numbers dot txt file on line 5 as well and actually to clean that up a bit I could have done that without that ford slash at the end there so let me clear this out and rerun that same command there and that just cleans it up a little bit ok so that's nice that we were also able to search that personnel subdirectory and get the matches within there as well but you do want to be careful with recursive sir just because if you know if you're in a big directory that has a ton of subdirectories then it's going to try to search all of those and can take an extremely long time to return any results and if it takes too long you might just have to kill it so just be aware that those recursive searches could be searching through lots and lots of files now if you're searching through multiple files like this then you might not actually be interested in the matches themselves you might only be interested in seeing what files contain a match and if you only wanted that information then you can add on the l option and only return the files with matches so if I pull back up our last command and go back here and I'm gonna take off the in that shows the line because it wouldn't show this here anyway and then I'm gonna add on the L and this will just show us what files contain a match so if I run this then we can see that there that it doesn't display the match it just comes up and says that we found a match in memo txt name's not txt and all the matches within that subdirectory and if you remember we actually had two matches in names.txt file but this result just returns name's not txt once because it's just listing any file that has a match now if we wanted to see how many matches are in each file then we can use the C option so if we pull back up let me clear the screen here if we pull back up the command that we just ran and instead replace that L with a C and run that then we can see that we get some similar output as the L option but it also displays the number of matches in each file and don't worry about this D store file here that's just something that pops up on the Mac sometimes okay so now let's look at one practical use case for using grep that we haven't covered yet so we can pipe the output of other commands into grep to search for certain things so for example let's say that we wanted to search our history for our latest get commits so if we just display our history then we can see that if we wanted to find our get commits then there's a lot of information here to sift through so let's pipe this in the grep to narrow it down a bit so we could search for all of our git commits and our git history just by saying so first let me clear the screen here so that we can see a little bit better so we can just run history like we did before but now we're going to use a pipe and pipe that in to grip so now we'll say that we want to grip that output for get commits so if I run this then we can see that it narrows down our history two lines that match our grep search and we can even pipe this output into another grep command to narrow it down even further so if I only wanted to see git commits about dot files then I could run that same last command do another pipe and another grip and instead grep for dot files so first it's going to pass the output of history and narrow those down to the ones that have a git commit which are all right here and then just going to take this output and pipe that into grep again and search for the ones that have a dot file match so if I run that then we can see that now we only get our git commits with the dot files okay so now let me clear this okay so we're just about finished up but I wanted to show one more thing here so let's see how we can do some more advanced searches using regular expressions now I'm not going to go into detail about how to write regular expressions in this video but if you're interested then I'll put a link to my regular expression videos in the description section below so grep uses POSIX regular expressions by default now if you've watched my other videos on regular expressions those videos are actually using something called Perl compatible regular expressions which is also what Python uses as well so let me show you how this might affect your grep searches so let's say that we wanted to search a file for phone numbers so we might do something like this so I would do a grep and now we'll write our regular expression so I'm just going to do something simple I'll do dot dot dot and the dot and a regular expression is just matches any character so then I'll do a dash and then dot dot dot and then a dash and then dot dot dot dot so this will find any three characters then a dash then any 3 characters than a dash then any four characters so this should match a phone number and now let's pass in the file that we want to search so we'll names.txt so if I run that then we can see that that works and that we got back the phone numbers from that file but let's say that we wanted to make our search a little bit more specific and instead of searching for any character using the dot we wanted to search specifically for digits using backslash d so if you've seen my other reg X videos then you might think that we can do that search with something like this so let me erase this so let's say that we want to only get a digit so we'll do a backslash D and we want three of those so I'll pass in three is the quantifier there and then a dash and then the same thing digit and three of those and then a dash then a backslash D for a digit again and four of those so now if we run this then we don't get the results that we expect and that's because grep isn't using perl compatible regular expressions which is what that is so can we get those Perl compatible expressions to work well if you're on Linux then you can get this to work just by passing in a uppercase P here before the search but if we run this if you're on a Linux machine and then that would work but I'm on a Mac and we can see that it doesn't now we can get this to work on a Mac but it's a little complicated so this next step is completely optional but you can follow along if you want to grep using these regular expressions on a Mac and if you're using Linux like I said then you won't have to do this step because Linux already has that functionality so in most of these Linux and Mac tutorials all of the commands usually run the same on both systems for the most part but these grep regular expressions are one example of something that is different between Mac and Linux Mac uses a version of grep called BSD grep and Linux uses a version of grep called GNU grep good new grip and you can see that version if you type grep and then uppercase v and you can see that here we are using BSD grip and many people prefer the ganoub version of grep and that's what I prefer as well so I'll show you a trick for how you can actually install the ganoub version of grep on the Mac by installing it through homebrew so if I pull up homebrew in my browser here so I'm just in chrome and this is at brew SH now if you've never used homebrew it's basically a package manager for the Mac so you can follow through the installation instructions from their website and once you have that installed you can open a new terminal and then you should be able to install the new version of grep just by saying let me clear out my screen here we can install this by saying brew install grep and we also want to add in some options here so we'll say with default names the with default names option means that it will install it as grep and if you leave that off then it would actually install it as G grep which would allow you to use both the new version of grep and the mac bsd grep but ganoub grep as the default is fine with me so I'm gonna go ahead and run that and I will let this installation finish and once that's finished we'll likely need to open up a new terminal for that change to take effect if I do a grep V you can see we're still using a BSD grep so let me open up a new terminal and I can maximize this and I am in fullscreen mode here so let me take this down and then pull this tab out here into its own window now let me make this text larger so that everyone can see still okay so now if I say grep V in our new window then we can see that now we are using the new grep so that's what we wanted okay so back to our example the reason we did all that was so that we could use the perl compatible regular expressions on the Mac and the canoe version of grep accepts that uppercase P option that tells grep that we want to use those perl compatible expressions so if i go back to my other window here and grab that command that didn't run before on the mac so this is still using the bsd version if i run that you can see that we get an error if i navigate to my desktop and the directory that's where I was running those searches in the other window now if I paste in that command that didn't work before then we can see that by using that uppercase P option that we can now get the results that we expect and we can use these regular expressions with the options that we saw before too so if I wanted to do a more advanced search and see what files contain phone numbers under my current directory then I could do something like this so let me pull up the last command that we just ran and let me make this text a little larger just one more time here okay so if we wanted to see all the files that contain phone numbers under our current directory then what we could do is I could pass in my current directory as the search location and back here with our options we want to keep that uppercase P so that we can use our regular expression here and now let's also use some options that we saw before so I'll use a W for the whole word search I will use I for caseinsensitive even though that doesn't really matter with this current regular expression I will use R to say that we want a recursive search since we're running this on the current directory it'll also search the sub directories and remember the L is what displays the files that contain our match instead of the matches themselves so with all of those options in place if I run that then we can see that it found phone numbers in our names txt file and our phone numbers file within the sub directory and you can do all of the other searches with regular expressions that we saw earlier in this video as well okay so I think that is going to do it for this video hopefully now you have a pretty good idea for how you can use the grep command to search for patterns of text and a lot of different ways throughout your file system but if you do have any questions about what we covered in the video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways is simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
