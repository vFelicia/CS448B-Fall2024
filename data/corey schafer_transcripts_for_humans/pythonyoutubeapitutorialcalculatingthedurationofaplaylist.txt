With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're going to be using
00:02 - Python and the YouTube API to calculate
00:05 - the duration of a YouTube playlist now
00:07 - this is something that you would assume
00:08 - would be included within YouTube itself
00:10 - but for some reason playlists on YouTube
00:12 - don't tell you how long a playlist
00:15 - actually is to show you what I mean by
00:17 - this I have my Django tutorials open up
00:20 - here and this is my Django playlist and
00:22 - you can see that it gives me a you know
00:25 - the number of videos when it was last
00:26 - updated and things like that but it
00:29 - doesn't show you how long it would take
00:31 - to actually watch all of these videos
00:32 - and I feel like that would be one of the
00:34 - first questions that people might have
00:36 - when they go to a playlist is how much
00:38 - time would it take me to watch this
00:40 - entire series and learn this and this is
00:42 - something that I've run into a lot
00:44 - personally if I'm watching a YouTube
00:46 - course or something like that and want
00:48 - to know how long that course actually is
00:50 - then there's currently no way to access
00:52 - this information from within YouTube
00:53 - itself so we're going to use Python and
00:56 - the YouTube API to look at each video
00:58 - within a playlist and add up the
01:00 - duration of each video to see how long
01:02 - that playlist actually is so let's go
01:05 - ahead and get started
01:06 - now if you haven't watched my video on
01:08 - getting started with the YouTube API
01:10 - using Python then definitely watch that
01:12 - video first because that's where I show
01:14 - how to get a YouTube API key and connect
01:17 - to this YouTube service within Python so
01:19 - that we can start grabbing information
01:21 - and I'm using the script that we ended
01:23 - with in that video to get started okay
01:25 - so now that we have the API working here
01:27 - within Python now we can use this API to
01:30 - grab just about any public information
01:32 - that we want so like I said we're going
01:34 - to be using a script that calculates the
01:36 - duration of videos in a specific
01:38 - playlist so first I'm going to need to
01:40 - access a playlist and I'll grab just one
01:44 - of my playlists in order to get one of
01:46 - my playlists I can do a query to the API
01:49 - now you can also go to a specific
01:51 - playlist here and if we look up in the
01:54 - URL then it gives the playlist ID here
01:57 - within the URL but let me show you how
01:59 - to also do this within the API so to get
02:02 - a list of my playlists I'm gonna need my
02:04 - channel ID
02:05 - so I'll query my channel again here
02:08 - within this script but instead of only
02:11 - accessing the statistics here I'm also
02:13 - going to pass in content details and
02:17 - this will give us more information about
02:20 - a specific channel and if you don't know
02:21 - all of the arguments that we can pass
02:23 - into this part argument here then we can
02:27 - always go back to that channels
02:28 - reference and the documentation and it
02:31 - tells us everything that we can query
02:33 - there and again I covered that in the
02:34 - getting started video okay so if I run
02:37 - this then it should give me some
02:38 - information about my channel here and
02:40 - one of these pieces of information
02:43 - should be my channel ID okay so I can
02:47 - see here that we have this ID tag and
02:49 - this is my channel ID right here so I'm
02:52 - gonna copy that and now that I have my
02:54 - channel ID I'm going to list all of my
02:56 - playlists for my channel and I'll be
02:59 - making multiple requests in this video
03:00 - so I'm going to change the variable name
03:03 - here to tell these requests apart so I'm
03:07 - gonna call this PL underscore request
03:09 - instead and now I want to query for
03:11 - playlists so instead of channels I'm
03:14 - gonna change this to playlists and now
03:17 - this doesn't have a four user name I
03:19 - don't believe but I'm gonna use the
03:22 - channel ID here instead and I'll just
03:25 - pass in my channel ID and now since I
03:28 - changed the name of my request here to
03:30 - PL underscore request I'm gonna change
03:32 - that as well and I'm also going to make
03:34 - this PL underscore response as well so
03:39 - let's print this out whoops and I got an
03:43 - error here because they don't have a
03:47 - statistics here for the parts that you
03:49 - can pass in again we can look at the
03:51 - documentation for this but I'm going to
03:53 - grab the snippet of that playlist
03:55 - instead of these statistics for that
03:57 - playlist so if I run this then I should
04:01 - get some details and snippets of my
04:04 - playlists and this is going to return
04:06 - the first five playlist on my channel if
04:08 - we want to grab more than a single page
04:10 - of values from a response then we'll see
04:13 - how that we can do that in just a bit
04:15 - but if I look down here in the output
04:17 - then I can see that it returns a
04:19 - dictionary and my playlists are in a
04:22 - list of values within this items key
04:26 - here so if I wanted to loop over these
04:29 - then instead of just printing out the
04:31 - entire response I could say for item in
04:34 - PL underscore response and access that
04:39 - items key to loop over those and now I'm
04:42 - just going to print out each item and
04:44 - then I'll put in another print statement
04:45 - here as well so that we have a line
04:48 - between each of these so now if I scroll
04:51 - up here now this is going to give us
04:52 - information specific to each playlist
04:55 - now I know that this might be a bit
04:56 - difficult to read here but if I look
04:59 - here at the title of this top one here
05:01 - then we can see that this one is my
05:05 - Panda stat oral playlist and if I look
05:07 - through this information then there
05:09 - won't be a total duration for this
05:12 - playlist it gives me you know the URL
05:14 - and things like that but the duration
05:16 - isn't within this information either so
05:19 - I'll just use this pandas tutorials
05:21 - playlist here and let's go ahead and
05:24 - calculate the duration of this pandas
05:26 - playlist to see how this is done and
05:28 - then I'll show how we can do this for
05:31 - any playlist so to do this let's just
05:33 - loop through all of the videos in this
05:36 - playlist and keep a running total of the
05:38 - duration of each video so to do this I'm
05:41 - going to grab the ID of the playlist so
05:44 - that I can loop through that playlist
05:46 - videos and it's here close to the top of
05:50 - this information here we can see this ID
05:52 - tag here this is the ID of this pan this
05:55 - playlist so now I've got that playlist
05:57 - ID copied there and now let's loop over
06:02 - the videos of this playlist and we can
06:04 - do this by changing our API query here
06:07 - and instead of you know going out to get
06:11 - a channels playlist I'm going to get
06:13 - playlist items and I'm going to remove
06:18 - snippet here because we're only going to
06:20 - want the content details of these
06:22 - playlist items and now instead of
06:24 - channel ID this will be playlist ID and
06:29 - now I'm going to paste in the ID for
06:32 - that playlist and now let me run this
06:34 - and see what we get for our result here
06:38 - ok so we're
06:40 - looping over the items in this response
06:41 - let me scroll down here a bit and this
06:44 - is the content details about the videos
06:46 - in the playlist and actually this is
06:49 - also just the first vibe five videos but
06:51 - we'll see how to get all the results
06:53 - here in just a bit
06:54 - but first let's look at the information
06:55 - that we're getting back for these videos
06:57 - so we can see that we're getting a video
07:00 - ID or here's the video ID here when the
07:04 - video was published but unfortunately
07:06 - this doesn't have the duration of each
07:08 - video listed it within here either
07:11 - so instead within this loop we're
07:14 - actually going to need to query the
07:16 - video resource from the API with it with
07:19 - each video ID to get more detailed
07:21 - information about each video so when I'm
07:24 - moving looping over the videos in a
07:26 - playlist let's only grab the video IDs
07:29 - and we can see right now each of these
07:33 - are within the dictionaries here within
07:36 - our information so the video ID here is
07:39 - actually within this key this content
07:42 - details key and that key has a value
07:45 - here of this information and that this
07:49 - is also a dictionary so we first need to
07:51 - access the content details key and then
07:54 - the video ID key within there so in
07:57 - order to do that I'm just going to print
07:59 - out for each item and this is an entire
08:03 - item here
08:03 - I'm gonna grab the content details key
08:06 - and then I'm going to grab within that
08:10 - value the video ID key here as well so
08:15 - now let me actually make this its own
08:17 - variable so that it's a little easier to
08:19 - see here so I'm gonna call this vid
08:22 - underscore ID and set this equal to that
08:26 - and now let's print that out and now if
08:30 - we run this now we're getting the first
08:33 - the video IDs of our first five videos
08:36 - within this pandas playlist so now that
08:38 - we're getting the video IDs for these
08:40 - first five videos let's go ahead and
08:42 - write the code to tally up the duration
08:44 - of these first five videos first and
08:46 - then we'll learn how we can then loop
08:49 - over all over the pages to get all of
08:51 - the videos for this playlist so
08:53 - I can I can grab additional information
08:56 - about these videos by sending a request
08:58 - to the videos resource using the API and
09:01 - we can automatically use multiple video
09:03 - IDs at once when making the query just
09:08 - to cut down on the number of calls we're
09:10 - making to the API so I'm gonna go ahead
09:12 - and add all of these IDs to a list so to
09:16 - do this I'm just going to create a list
09:20 - here above this for loop and call this
09:22 - vid IDs and set this equal to an empty
09:25 - list and now I will just append each of
09:30 - these video IDs to that vid IDs list now
09:35 - I could have done this using a list
09:38 - comprehension but our for loop works
09:40 - just as well okay so now outside of this
09:43 - loop I'm going to write a single query
09:45 - to the videos resource to grab all of
09:48 - these videos now I can't just pass in a
09:50 - Python list like we have here with the
09:53 - video IDs it actually needs to be a
09:55 - string of comma separated values of all
09:57 - the video IDs that I want to get
09:59 - information about so to get a comma
10:02 - separated string from a list we can use
10:05 - the string join method so to see what
10:09 - this looks like we can specify a string
10:12 - so I can say you know a comma and then
10:16 - do a dot join on that string and then
10:19 - pass in a list so I'll pass in my list
10:21 - here of vid IDs and what this will do is
10:25 - it'll take all of the items in this list
10:27 - and separate them with a comma so if I
10:31 - run this then we can see that now we
10:33 - have all five of these video IDs as a
10:36 - string that are comma separated so now
10:39 - I'm gonna use this here and I'm going to
10:43 - query the videos resource using the API
10:48 - so I'm gonna have a new request here so
10:51 - I'll call this bid request which is
10:54 - different than our playlist request up
10:56 - here and now we're going to use that
10:58 - YouTube service and access that videos
11:01 - resource and we want to do a dot list so
11:04 - that we can list out information on
11:07 - these
11:07 - and again this takes a part argument and
11:11 - again I'm just going to type in content
11:13 - details here just to get some details of
11:16 - each video and now we can pass in the ID
11:18 - of the video that we want and we can
11:22 - pass in a comma-separated value of
11:24 - multiple IDs so I'm going to paste that
11:28 - in there now there is a limit of how
11:32 - many video IDs you can pass in which I
11:35 - believe is 50 and if we have more than
11:38 - 50 IDs then we'll see how to work with
11:42 - that here in just a bit I do have a
11:44 - couple of playlists that have more than
11:45 - 50 videos okay but for now let's see
11:48 - what we get for a response here so I'm
11:52 - gonna say vid response is equal to vid
11:55 - request dot execute and now just like we
12:01 - did earlier that should give us a
12:04 - response for our video items so let's
12:06 - loop over that response just like we did
12:08 - by saying for item in vid response and
12:13 - access that items key that would get
12:17 - back from the API and then I'll just
12:19 - print out each item and then I'll also
12:22 - leave a blank line after each item to
12:26 - kind of break that up a bit okay so now
12:29 - for each of these videos now we can see
12:32 - we're getting some more detailed
12:33 - information from this videos resource
12:35 - okay so again we have the video ID here
12:38 - and within the content details we can
12:41 - see that this time we are getting the
12:43 - duration here it's also given us the
12:44 - dimension and definition and things like
12:47 - that now in this video we are
12:49 - specifically interested in the duration
12:51 - so let me only grab that item from each
12:56 - of these results here so that is within
12:59 - this content details key and within
13:02 - there it's within the duration key so if
13:05 - I again I will capture this in its own
13:09 - variable here so I'll say that that is
13:13 - the item then I want to access the
13:16 - content details key here I'll just copy
13:19 - and paste this so I don't miss type any
13:21 - and then within content details I want
13:24 - to grab at the duration okay
13:27 - and now let's print out this duration
13:31 - and now let's go through and actually
13:33 - print these out okay so we can see that
13:36 - this is a bit weird of a format here
13:39 - for a duration so we can see here that
13:42 - it starts with the letters of PT I'm not
13:45 - sure what that means it could possibly
13:47 - stand for play time or something like
13:49 - that and then we have a number here
13:51 - followed by an M so I'm assuming that
13:54 - that is the number of minutes and then
13:56 - there is another number here followed by
13:58 - an S so I'm assuming that that is the
14:01 - number of seconds so we need to parse
14:04 - these out so that we can tally up the
14:06 - duration of the entire playlist so to
14:09 - actually parse these out I'm going to
14:11 - use regular expressions now I know
14:13 - regular expressions can be a little
14:15 - intimidating for some people but we're
14:17 - going to be using very simple
14:19 - expressions in this video and I'll
14:21 - explain exactly what we're doing along
14:23 - the way but if you would like to know
14:25 - more about using regular expressions in
14:27 - Python then I do have a video on that
14:29 - topic specifically so I'll be sure to
14:31 - leave a link to that video in the
14:33 - description section below for anyone
14:34 - who's interested so to begin writing our
14:37 - regular expressions I'm going to first
14:39 - import the regular expressions module at
14:41 - the top of the script so up here I will
14:45 - import our e and now I'm going to
14:49 - compile a few different expressions so
14:51 - first we know that the let's look at our
14:55 - pattern here again we know that the
14:57 - number of minutes is a number in this
15:00 - string that is followed by an M so to
15:03 - write this expression I will go ahead
15:06 - and put this up here right above our
15:10 - response actually let me just put this
15:12 - above the for loop here instead and I'll
15:17 - minimize this so we can see a little bit
15:18 - better well and actually this is the
15:20 - wrong for loop pair I want to be down
15:22 - here okay so let me create this
15:25 - expression right here so I'm gonna call
15:27 - this minutes pattern and set this equal
15:31 - to and now we're going to compile
15:34 - a regular expression so we can do re dot
15:38 - compile and now for our regular
15:41 - expression let's pass in and R and that
15:44 - just allows us to pass in certain text
15:47 - without python interpreting it in a
15:49 - certain way and now I'm going to do
15:52 - parentheses here and these parentheses
15:55 - allow us to capture a group of data okay
15:58 - so what do we want to capture well we
16:01 - want to capture a digit so that is
16:04 - backslash d and also this could be more
16:08 - than one digit so down here we have a 23
16:11 - so if we put in a plus sign here then
16:15 - that plus sign actually means that it's
16:16 - going to capture one or more digits okay
16:19 - so now what digits do we actually want
16:23 - to grab here well it's going to be all
16:26 - of the digits that lead up to an M so
16:31 - when we search through our regular
16:33 - expression pattern here it's going to
16:35 - say okay I'm have this group here of one
16:38 - or more digits before an M so when it
16:40 - searches through it should find oh okay
16:42 - I have 23 here are my digits before and
16:45 - M and we can basically do the exact same
16:47 - thing with seconds so if I copy this
16:50 - pattern here and I'm just going to call
16:52 - this seconds pattern this we want to
16:56 - grab the digits before a capital S okay
16:59 - and finally I know that none of these
17:02 - videos that are printed out here now
17:04 - showed this because they weren't long
17:06 - enough but I've written a script like
17:07 - this previously and I know that if the
17:10 - video is over an hour then it will also
17:13 - follow this same logic but instead it
17:16 - will have a number that is followed by a
17:17 - capital H so I'm going to make an hour's
17:20 - pattern as well so we'll paste this in
17:23 - here we will call this hours pattern and
17:27 - these are going to be digits followed by
17:30 - a capital H okay so now that we have our
17:33 - regular expressions compiled that can
17:36 - find our hours minutes and seconds and
17:38 - again if these are confusing to you then
17:41 - I do have a more in-depth video on using
17:43 - regular expressions within Python and I
17:45 - will
17:45 - that in the description section below
17:47 - okay so now let's go ahead and search
17:50 - for these values within our duration
17:53 - sprint string and print these out so we
17:56 - can do this here within the loop after
17:59 - we get the duration then I'm gonna come
18:02 - down here and I'm just going to say okay
18:04 - our hours are going to be equal to our
18:07 - hours pattern dot search and I want to
18:12 - search this duration okay and we're
18:16 - gonna do this for both or for all three
18:19 - of hours minutes and seconds so we'll do
18:22 - minutes here and we'll have this be
18:25 - minutes pattern we'll have this be
18:28 - seconds pattern and we will call this
18:30 - seconds and now let's print out all
18:34 - three of those hours minutes and seconds
18:39 - okay so now if I save this and run this
18:42 - and print this out then let's take a
18:45 - look here at what our results are so
18:48 - let's just look at this first result
18:50 - here so four hours it's actually
18:53 - printing out none we got no results four
18:57 - hours since this video is less than an
18:59 - hour and it didn't match anything in
19:00 - that string for that value and then we
19:03 - can see that our second value here we
19:05 - did get a match it tells us the span of
19:09 - that match which are which characters in
19:12 - the string matched our regular
19:13 - expression and also it gives us the
19:15 - match itself so these are we can see
19:19 - here which is 23 minutes and we can also
19:23 - see that we got a match for seconds as
19:25 - well with the same information where it
19:28 - can be found in the string and also what
19:30 - that match is okay so if you remember
19:32 - what I said above about our regular
19:35 - expressions we captured just the digits
19:37 - in a specific group so that we can parse
19:40 - those digits out specifically and we can
19:42 - parse those out by accessing the group
19:45 - of these results here so for example
19:48 - above my print statement here if I was
19:51 - to instead say okay these minutes I
19:55 - instead just want these to be
19:59 - minutes dot group and grab that first
20:03 - group and this would give us the string
20:06 - of twenty-three instead of the entire
20:08 - match of 23 M for the minutes now I
20:12 - don't want this to be a string I
20:14 - actually want this to be an integer so I
20:16 - can also convert this to an integer
20:18 - just by wrapping this in the int
20:22 - built-in function here okay and this
20:26 - should work here so if I instead just
20:28 - print out these minutes instead of
20:31 - everything then okay we can see that we
20:35 - got 23 33 17 23 40 okay that looks good
20:39 - but there's actually one more thing that
20:41 - we need to do here because if we think
20:43 - about this then we need to remember that
20:46 - it is possible for us to not get a match
20:49 - for some of these regular expressions so
20:51 - for example our hours searched that
20:54 - search returned none since those videos
20:57 - were all less than an hour and if we
20:59 - tried to grab the group of a none value
21:03 - then it's going to give us an error
21:05 - saying hey this is none you're trying to
21:07 - access the group of a none value I don't
21:10 - know what you want me to do so we need
21:12 - to put in a conditional in place so that
21:15 - if our match is equal to none then we'll
21:17 - just assign a value of zero instead now
21:21 - you can use a regular if statement here
21:24 - if you're more comfortable with those
21:26 - but I'm going to use something called a
21:27 - ternary conditional here since it just
21:30 - makes it's a bit more simple in this
21:32 - case and it'll also make it a bit easier
21:34 - to write so with a ternary conditional
21:37 - we can just say okay I want this value
21:40 - here if minutes because if minutes is
21:46 - none then it won't be equal to this
21:49 - value we can put in an else zero so just
21:54 - to read this over one more time we're
21:56 - saying I want this value here if minutes
21:59 - and minutes just means that it has some
22:02 - value if it's none then it'll go to this
22:05 - else statement here and assign a zero
22:07 - again that's called a ternary
22:09 - conditional if you're not familiar with
22:11 - those are not comfortable
22:13 - then you can also just use you know a
22:16 - regular FL statement so now I'm also
22:19 - going to do this for hours and seconds
22:23 - and whoops I almost forgot here I need
22:26 - to replace this part here within the
22:30 - ternary conditional as well okay so now
22:33 - let's print out these hours minutes and
22:36 - seconds again to see what we are getting
22:40 - now so if I run this okay then we can
22:43 - see that this looks a little cleaner now
22:45 - now we can see that for all these we
22:47 - have zero hours 23 minutes one second 33
22:51 - minutes and so on so now we're getting
22:53 - the hours minutes and seconds for each
22:55 - video and now we need to tally up all of
22:58 - these video times and I think the
23:00 - easiest way to do this will be to
23:02 - convert the video time entirely into
23:04 - seconds and then we'll tally up all of
23:07 - the seconds and then convert them back
23:08 - to hours minutes and seconds once we've
23:11 - added all those up one way that we could
23:14 - convert these to seconds would be to use
23:16 - some simple math by you know multiplying
23:19 - by 60 and things like that but an even
23:21 - easier way would be to use the time
23:24 - delta class from the date/time library
23:27 - so let me import this here up at the top
23:30 - and I'll show you how this works so I'm
23:33 - going to say from date/time we want to
23:36 - import time Delta and now let me scroll
23:41 - back down here and we will see how to
23:44 - use this underneath here after we've
23:46 - calculated the hours minutes and seconds
23:48 - in order to get the total number of
23:50 - seconds for each video
23:52 - I can just say video underscore seconds
23:55 - is equal to and then we want to create a
23:58 - time delta so within this time delta i
24:02 - want to say that the hours are going to
24:04 - be equal to hours here and we'll do the
24:08 - same thing for minutes and seconds so
24:11 - let me pass these in here okay and I
24:18 - don't need that trailing comma and now
24:21 - here at the end after we have this time
24:24 - delta now that it's created this
24:26 - Delta the time Delta has a total seconds
24:31 - method that we can run on this time
24:33 - Delta object that will give us the total
24:36 - seconds of everything that we just
24:38 - passed in so now let me print out video
24:42 - seconds instead of just hours minutes
24:44 - and seconds
24:45 - so I'll run this and now we can see that
24:47 - we are getting you know all of the total
24:51 - seconds for each of these and if you
24:53 - wanted to check this then you can open
24:54 - up a calculator so 13 80/60 a little
24:59 - over 23 minutes which is what that first
25:01 - one was so that seems to be working okay
25:03 - so we're definitely making progress here
25:05 - so now we're getting the total number of
25:07 - seconds for each video now remember
25:09 - we're only getting five videos from this
25:12 - playlist right now so let's see how we
25:14 - can actually get all of the videos from
25:18 - this playlist and then we can tally up
25:20 - all these seconds so to do this we're
25:22 - going to need to use page tokens which
25:25 - will allow us to get all of the results
25:27 - one page at a time
25:29 - now each page is returned gives us a
25:33 - reference to the next page and we can
25:35 - keep track of which page we're on using
25:37 - that page token so what I'm gonna do
25:39 - here I'm gonna scroll up to where we
25:41 - first made our video request for the
25:45 - videos of a certain playlist whoops and
25:48 - this is my video request here I actually
25:50 - want my playlist request that's why I
25:52 - named those differently there now what
25:55 - I'm gonna do here is I'm going to create
25:58 - an infinite loop that keeps grabbing
26:00 - pages and so there are no more left and
26:03 - then it'll break out of that loop once
26:06 - we're out of pages so this is going to
26:08 - be a very long or this while loop is
26:12 - going to take up a lot of code so I'm
26:15 - just gonna say first I'll create
26:17 - something called a next page token and
26:19 - we'll see what this does here in just a
26:20 - second and for now I'm going to set this
26:22 - to none and then I'm gonna say while
26:25 - true which is an infinite loop now I'm
26:28 - gonna take all of the code that we've
26:29 - written so far to grab these videos and
26:32 - calculate the seconds and everything and
26:34 - I'm going to press tab to indent all of
26:37 - that within hour
26:39 - while loop here so that we can keep
26:42 - grabbing videos and doing these
26:44 - calculations as long as there are more
26:46 - videos left in the playlist so to do
26:48 - this we can pass in a few different
26:50 - arguments here to our playlist request
26:53 - now we can also pass in an argument for
26:56 - Max results so that we can get more
26:58 - results per page so that we don't make
27:00 - as many requests to the API so I'll just
27:04 - pass in the max number I can for max
27:06 - results and I believe that is 50 so I'll
27:09 - say max results is equal to 50 and I
27:12 - also want to pass in the page token to
27:14 - let the API know what page of results
27:16 - were currently on and now the first time
27:19 - through this loop our next page token is
27:21 - going to be equal to none which will
27:23 - just give us the first page of results
27:25 - so I can say page token this is a
27:28 - capital T here page token is equal to
27:31 - next page token and again the first time
27:35 - through that'll be none which will just
27:36 - give us the first page of results okay
27:38 - and after we get a page of results then
27:42 - we want to execute that and do
27:44 - everything that we did before get all
27:46 - the video IDs from that page make a
27:49 - video request using those video IDs
27:51 - parse out the hours minutes and seconds
27:54 - and then finally down here at the bottom
27:58 - once we have calculated the total
28:00 - seconds for each video then we need to
28:03 - we need to have a way to break out of
28:06 - that infinite loop if we don't break out
28:08 - of that loop then it'll just go on
28:10 - forever so we're going to break out of
28:13 - the loop once there are no more pages
28:15 - left to query so to check this I'm gonna
28:19 - write some more code here now realize
28:21 - here that I'm not within this for loop
28:23 - anymore i back spaced here to where I'm
28:26 - no longer in that for loop so to check
28:28 - whether there are any more pages left we
28:31 - can use this next page token and set
28:35 - this equal to the playlist response
28:39 - remember we want the playlist response
28:41 - not the video response and we just want
28:44 - to get a string here of next page token
28:49 - and what this will do here is it will
28:51 - update our next page to
28:52 - Okin that tells the YouTube API what
28:55 - page of results were trying to fetch and
28:57 - if there are no more pages than this
28:59 - then this will just return none so if
29:03 - this is none after we try to fetch that
29:05 - token then we can just break out of the
29:08 - loop it means that we've exhausted all
29:11 - of the pages so I can just say if not
29:15 - next page token then just break out of
29:19 - the loop now actually before I run this
29:21 - I want to move a few things outside of
29:24 - our infinite loop now that we are inside
29:27 - of a loop here it doesn't make any sense
29:31 - compiling these regular expressions
29:32 - every time through the loop we only need
29:35 - to compile these once so I'm going to
29:38 - cut these out and let's move these here
29:41 - to a section above the while loop so I
29:44 - will just compile these up here at the
29:46 - top and I don't think there's any more
29:50 - code in here that needs to be removed
29:53 - from the while loop I think everything
29:55 - else is good yeah okay so if I didn't
29:57 - mess anything up here then if I run this
29:59 - then it should print out the total
30:01 - section the total seconds for every
30:04 - video in my playlist so if I look
30:08 - through here we can see that we're
30:10 - getting more than five I believe that
30:12 - there's 11 videos total and my pan is
30:14 - playlist so we got 2 3 4 5 6 7 8 9 10 11
30:21 - okay yeah it seems to have gotten all
30:23 - those videos okay so now at this point
30:25 - all we need to do is add up all of these
30:28 - times for all these videos and then
30:31 - convert it back to hours minutes and
30:33 - seconds so above our while loop I'm
30:36 - going to create a variable called total
30:40 - underscore seconds and I'm just going to
30:43 - set this equal to zero and then within
30:47 - the loop here each time through the loop
30:50 - I'm going to remove our print statement
30:52 - since we know that that's working
30:54 - instead I am just going to keep adding
30:57 - to our total seconds for each videos
31:01 - seconds so this will keep a running
31:03 - total of all of these seconds for
31:06 - video and now outside of our loop on our
31:10 - main level here I'm just going to print
31:14 - out these total seconds and see if this
31:17 - looks correct so I'll go ahead and run
31:19 - this and now we can see that we get 19
31:23 - thousand seconds 151 so that's
31:26 - definitely more seconds than any one
31:28 - video so that probably is getting that
31:30 - complete total okay so this is looking
31:32 - good now the total seconds here probably
31:36 - doesn't mean much to us I don't know
31:37 - about you guys but I can't just read
31:40 - 19,000 seconds and know exactly how long
31:42 - that is
31:43 - so now let's convert these back to hours
31:46 - minutes and seconds so there are a few
31:48 - different ways that we could do this one
31:51 - way that I like to do this is using the
31:53 - built-in div mod function so div mod
31:56 - allows us to divide two numbers and it
31:58 - returns a tuple of the quotient and the
32:01 - remainder so let's see what this looks
32:03 - like I think it'll make more sense so
32:06 - first I'm going to convert my total
32:08 - seconds to an integer because I believe
32:11 - that right now it's a float so just to
32:13 - be sure I want this to be an integer so
32:16 - I'll say total seconds is equal to and
32:19 - cast that to an integer there okay okay
32:22 - so first I'm going to use div mod to get
32:25 - the number of minutes and seconds so if
32:29 - we were to say div mod and passed in the
32:33 - total seconds here and then what we
32:36 - wanted to divide total seconds by we
32:39 - want to divide it by 60 to give us the
32:40 - number of minutes so what div mod does
32:43 - is it returns a tuple of the quotient
32:46 - which was how many times 60 went into
32:49 - our total seconds and then it also the
32:52 - second value is the remainder which
32:53 - would be the number of seconds so just
32:56 - to show what this looks like we can say
32:59 - minutes and seconds is equal to that
33:02 - returned to pool so just to show you
33:05 - what this returns here so this is taking
33:07 - 19,000 roughly 19,000 seconds here if I
33:11 - print this out print out the number of
33:14 - minutes and the number of seconds then
33:18 - what this did here was
33:20 - that div mod said okay 60 goes into that
33:24 - 19,000 number 319 times which is 319
33:28 - minutes with 11 seconds left over so now
33:31 - in order to get the number of hours now
33:34 - we can just take this minutes here and
33:36 - do the exact same thing we can divide it
33:38 - by 60 and say okay however many times 60
33:42 - goes into those number of minutes that's
33:44 - how many hours we have so I can pretty
33:47 - much just do the same thing I did here
33:49 - but instead I'm going to say that now
33:52 - this is hours and minutes and we want to
33:57 - divide the minutes by 60 and anything
33:59 - left over is going to be left over
34:01 - minutes so now let's just print out
34:05 - these values so you could just print
34:07 - these out as you know hours minutes and
34:11 - seconds and if I run this then we can
34:14 - see that we got okay that pandas
34:15 - playlist is 5 hours 19 minutes and 11
34:18 - seconds and you can format this however
34:21 - you like if you want to use an F string
34:24 - then we could say you know I want hours
34:30 - minutes and seconds here but I want them
34:35 - separated by a colon instead so if I
34:39 - save this and run it here then we can
34:42 - see that that's more of a standard time
34:44 - format so we have 5 hours 19 minutes 11
34:47 - seconds now just to make sure that this
34:49 - is working with the pagination on the
34:51 - videos now let me try to run this script
34:54 - on a much larger playlist so if I open
34:57 - my browser back up I also have my Python
35:01 - tutorials playlist open here and we can
35:03 - see that this is a hundred and forty
35:05 - videos instead of just 11 videos and
35:08 - again if you ever want to get the ID of
35:10 - a specific playlist then you can grab it
35:13 - up here in the URL it'll say list is
35:15 - equal to and then have the ID here so
35:18 - I'm gonna grab that ID and open up our
35:21 - script here and now I'm gonna paste in
35:24 - my Python tutorials playlist into this
35:28 - playlist ID instead of that panda series
35:31 - so now if I save this and run it
35:33 - then that obviously took a little bit
35:35 - more time to calculate because it was
35:38 - going through those pages in the
35:40 - playlist and all those videos and making
35:43 - those queries to the API but it gives us
35:46 - a result here of 60 hours 26 minutes and
35:49 - 37 seconds so that's good information to
35:53 - know it's good to know that if you want
35:54 - to watch my pandas playlist then that
35:57 - would be five hours and something if you
35:59 - want to watch the all of the Python
36:01 - videos and there's about 60 hours of
36:03 - content on there so I've always thought
36:06 - that that's very good information to
36:08 - know and I use scripts like this all the
36:10 - time whenever I am you know trying to
36:13 - learn something and watch a YouTube
36:15 - course I want to know how long that
36:16 - course is so you know you don't only
36:19 - have to use a script like this on my
36:21 - playlist you know you can go out to any
36:23 - playlist grab that playlist ID paste it
36:26 - in to your script here and make those
36:29 - calculations for yourself okay so I
36:31 - think that's gonna do it for this video
36:32 - hopefully now you feel like you have a
36:34 - pretty good idea for how you can access
36:38 - playlists using the YouTube API and
36:40 - access videos using video IDs and you
36:44 - know use that information to make some
36:46 - calculations yourself again I use this
36:49 - all the time personally and I think it's
36:52 - extremely useful being able to access
36:54 - the API in this way and get this type of
36:57 - information but if anyone has any
36:59 - questions about what we covered in this
37:00 - video then feel free to ask in the
37:02 - comment section below and I'll do my
37:03 - best to answer those and if you enjoy
37:05 - these tutorials and would like to
37:06 - support them then there are several ways
37:08 - you can do that the easiest way is to
37:10 - simply like the video and give it a
37:11 - thumbs up and also it's a huge help to
37:13 - share these videos with anyone who you
37:15 - think would find them useful and if you
37:16 - have the means you can contribute
37:18 - through patreon or YouTube and there are
37:20 - links to those pages in the description
37:21 - section below be sure to subscribe for
37:23 - future videos
37:24 - and thank you all for watching
37:27 - you
37:36 - you

Cleaned transcript:

hey there how's it going everybody in this video we're going to be using Python and the YouTube API to calculate the duration of a YouTube playlist now this is something that you would assume would be included within YouTube itself but for some reason playlists on YouTube don't tell you how long a playlist actually is to show you what I mean by this I have my Django tutorials open up here and this is my Django playlist and you can see that it gives me a you know the number of videos when it was last updated and things like that but it doesn't show you how long it would take to actually watch all of these videos and I feel like that would be one of the first questions that people might have when they go to a playlist is how much time would it take me to watch this entire series and learn this and this is something that I've run into a lot personally if I'm watching a YouTube course or something like that and want to know how long that course actually is then there's currently no way to access this information from within YouTube itself so we're going to use Python and the YouTube API to look at each video within a playlist and add up the duration of each video to see how long that playlist actually is so let's go ahead and get started now if you haven't watched my video on getting started with the YouTube API using Python then definitely watch that video first because that's where I show how to get a YouTube API key and connect to this YouTube service within Python so that we can start grabbing information and I'm using the script that we ended with in that video to get started okay so now that we have the API working here within Python now we can use this API to grab just about any public information that we want so like I said we're going to be using a script that calculates the duration of videos in a specific playlist so first I'm going to need to access a playlist and I'll grab just one of my playlists in order to get one of my playlists I can do a query to the API now you can also go to a specific playlist here and if we look up in the URL then it gives the playlist ID here within the URL but let me show you how to also do this within the API so to get a list of my playlists I'm gonna need my channel ID so I'll query my channel again here within this script but instead of only accessing the statistics here I'm also going to pass in content details and this will give us more information about a specific channel and if you don't know all of the arguments that we can pass into this part argument here then we can always go back to that channels reference and the documentation and it tells us everything that we can query there and again I covered that in the getting started video okay so if I run this then it should give me some information about my channel here and one of these pieces of information should be my channel ID okay so I can see here that we have this ID tag and this is my channel ID right here so I'm gonna copy that and now that I have my channel ID I'm going to list all of my playlists for my channel and I'll be making multiple requests in this video so I'm going to change the variable name here to tell these requests apart so I'm gonna call this PL underscore request instead and now I want to query for playlists so instead of channels I'm gonna change this to playlists and now this doesn't have a four user name I don't believe but I'm gonna use the channel ID here instead and I'll just pass in my channel ID and now since I changed the name of my request here to PL underscore request I'm gonna change that as well and I'm also going to make this PL underscore response as well so let's print this out whoops and I got an error here because they don't have a statistics here for the parts that you can pass in again we can look at the documentation for this but I'm going to grab the snippet of that playlist instead of these statistics for that playlist so if I run this then I should get some details and snippets of my playlists and this is going to return the first five playlist on my channel if we want to grab more than a single page of values from a response then we'll see how that we can do that in just a bit but if I look down here in the output then I can see that it returns a dictionary and my playlists are in a list of values within this items key here so if I wanted to loop over these then instead of just printing out the entire response I could say for item in PL underscore response and access that items key to loop over those and now I'm just going to print out each item and then I'll put in another print statement here as well so that we have a line between each of these so now if I scroll up here now this is going to give us information specific to each playlist now I know that this might be a bit difficult to read here but if I look here at the title of this top one here then we can see that this one is my Panda stat oral playlist and if I look through this information then there won't be a total duration for this playlist it gives me you know the URL and things like that but the duration isn't within this information either so I'll just use this pandas tutorials playlist here and let's go ahead and calculate the duration of this pandas playlist to see how this is done and then I'll show how we can do this for any playlist so to do this let's just loop through all of the videos in this playlist and keep a running total of the duration of each video so to do this I'm going to grab the ID of the playlist so that I can loop through that playlist videos and it's here close to the top of this information here we can see this ID tag here this is the ID of this pan this playlist so now I've got that playlist ID copied there and now let's loop over the videos of this playlist and we can do this by changing our API query here and instead of you know going out to get a channels playlist I'm going to get playlist items and I'm going to remove snippet here because we're only going to want the content details of these playlist items and now instead of channel ID this will be playlist ID and now I'm going to paste in the ID for that playlist and now let me run this and see what we get for our result here ok so we're looping over the items in this response let me scroll down here a bit and this is the content details about the videos in the playlist and actually this is also just the first vibe five videos but we'll see how to get all the results here in just a bit but first let's look at the information that we're getting back for these videos so we can see that we're getting a video ID or here's the video ID here when the video was published but unfortunately this doesn't have the duration of each video listed it within here either so instead within this loop we're actually going to need to query the video resource from the API with it with each video ID to get more detailed information about each video so when I'm moving looping over the videos in a playlist let's only grab the video IDs and we can see right now each of these are within the dictionaries here within our information so the video ID here is actually within this key this content details key and that key has a value here of this information and that this is also a dictionary so we first need to access the content details key and then the video ID key within there so in order to do that I'm just going to print out for each item and this is an entire item here I'm gonna grab the content details key and then I'm going to grab within that value the video ID key here as well so now let me actually make this its own variable so that it's a little easier to see here so I'm gonna call this vid underscore ID and set this equal to that and now let's print that out and now if we run this now we're getting the first the video IDs of our first five videos within this pandas playlist so now that we're getting the video IDs for these first five videos let's go ahead and write the code to tally up the duration of these first five videos first and then we'll learn how we can then loop over all over the pages to get all of the videos for this playlist so I can I can grab additional information about these videos by sending a request to the videos resource using the API and we can automatically use multiple video IDs at once when making the query just to cut down on the number of calls we're making to the API so I'm gonna go ahead and add all of these IDs to a list so to do this I'm just going to create a list here above this for loop and call this vid IDs and set this equal to an empty list and now I will just append each of these video IDs to that vid IDs list now I could have done this using a list comprehension but our for loop works just as well okay so now outside of this loop I'm going to write a single query to the videos resource to grab all of these videos now I can't just pass in a Python list like we have here with the video IDs it actually needs to be a string of comma separated values of all the video IDs that I want to get information about so to get a comma separated string from a list we can use the string join method so to see what this looks like we can specify a string so I can say you know a comma and then do a dot join on that string and then pass in a list so I'll pass in my list here of vid IDs and what this will do is it'll take all of the items in this list and separate them with a comma so if I run this then we can see that now we have all five of these video IDs as a string that are comma separated so now I'm gonna use this here and I'm going to query the videos resource using the API so I'm gonna have a new request here so I'll call this bid request which is different than our playlist request up here and now we're going to use that YouTube service and access that videos resource and we want to do a dot list so that we can list out information on these and again this takes a part argument and again I'm just going to type in content details here just to get some details of each video and now we can pass in the ID of the video that we want and we can pass in a commaseparated value of multiple IDs so I'm going to paste that in there now there is a limit of how many video IDs you can pass in which I believe is 50 and if we have more than 50 IDs then we'll see how to work with that here in just a bit I do have a couple of playlists that have more than 50 videos okay but for now let's see what we get for a response here so I'm gonna say vid response is equal to vid request dot execute and now just like we did earlier that should give us a response for our video items so let's loop over that response just like we did by saying for item in vid response and access that items key that would get back from the API and then I'll just print out each item and then I'll also leave a blank line after each item to kind of break that up a bit okay so now for each of these videos now we can see we're getting some more detailed information from this videos resource okay so again we have the video ID here and within the content details we can see that this time we are getting the duration here it's also given us the dimension and definition and things like that now in this video we are specifically interested in the duration so let me only grab that item from each of these results here so that is within this content details key and within there it's within the duration key so if I again I will capture this in its own variable here so I'll say that that is the item then I want to access the content details key here I'll just copy and paste this so I don't miss type any and then within content details I want to grab at the duration okay and now let's print out this duration and now let's go through and actually print these out okay so we can see that this is a bit weird of a format here for a duration so we can see here that it starts with the letters of PT I'm not sure what that means it could possibly stand for play time or something like that and then we have a number here followed by an M so I'm assuming that that is the number of minutes and then there is another number here followed by an S so I'm assuming that that is the number of seconds so we need to parse these out so that we can tally up the duration of the entire playlist so to actually parse these out I'm going to use regular expressions now I know regular expressions can be a little intimidating for some people but we're going to be using very simple expressions in this video and I'll explain exactly what we're doing along the way but if you would like to know more about using regular expressions in Python then I do have a video on that topic specifically so I'll be sure to leave a link to that video in the description section below for anyone who's interested so to begin writing our regular expressions I'm going to first import the regular expressions module at the top of the script so up here I will import our e and now I'm going to compile a few different expressions so first we know that the let's look at our pattern here again we know that the number of minutes is a number in this string that is followed by an M so to write this expression I will go ahead and put this up here right above our response actually let me just put this above the for loop here instead and I'll minimize this so we can see a little bit better well and actually this is the wrong for loop pair I want to be down here okay so let me create this expression right here so I'm gonna call this minutes pattern and set this equal to and now we're going to compile a regular expression so we can do re dot compile and now for our regular expression let's pass in and R and that just allows us to pass in certain text without python interpreting it in a certain way and now I'm going to do parentheses here and these parentheses allow us to capture a group of data okay so what do we want to capture well we want to capture a digit so that is backslash d and also this could be more than one digit so down here we have a 23 so if we put in a plus sign here then that plus sign actually means that it's going to capture one or more digits okay so now what digits do we actually want to grab here well it's going to be all of the digits that lead up to an M so when we search through our regular expression pattern here it's going to say okay I'm have this group here of one or more digits before an M so when it searches through it should find oh okay I have 23 here are my digits before and M and we can basically do the exact same thing with seconds so if I copy this pattern here and I'm just going to call this seconds pattern this we want to grab the digits before a capital S okay and finally I know that none of these videos that are printed out here now showed this because they weren't long enough but I've written a script like this previously and I know that if the video is over an hour then it will also follow this same logic but instead it will have a number that is followed by a capital H so I'm going to make an hour's pattern as well so we'll paste this in here we will call this hours pattern and these are going to be digits followed by a capital H okay so now that we have our regular expressions compiled that can find our hours minutes and seconds and again if these are confusing to you then I do have a more indepth video on using regular expressions within Python and I will that in the description section below okay so now let's go ahead and search for these values within our duration sprint string and print these out so we can do this here within the loop after we get the duration then I'm gonna come down here and I'm just going to say okay our hours are going to be equal to our hours pattern dot search and I want to search this duration okay and we're gonna do this for both or for all three of hours minutes and seconds so we'll do minutes here and we'll have this be minutes pattern we'll have this be seconds pattern and we will call this seconds and now let's print out all three of those hours minutes and seconds okay so now if I save this and run this and print this out then let's take a look here at what our results are so let's just look at this first result here so four hours it's actually printing out none we got no results four hours since this video is less than an hour and it didn't match anything in that string for that value and then we can see that our second value here we did get a match it tells us the span of that match which are which characters in the string matched our regular expression and also it gives us the match itself so these are we can see here which is 23 minutes and we can also see that we got a match for seconds as well with the same information where it can be found in the string and also what that match is okay so if you remember what I said above about our regular expressions we captured just the digits in a specific group so that we can parse those digits out specifically and we can parse those out by accessing the group of these results here so for example above my print statement here if I was to instead say okay these minutes I instead just want these to be minutes dot group and grab that first group and this would give us the string of twentythree instead of the entire match of 23 M for the minutes now I don't want this to be a string I actually want this to be an integer so I can also convert this to an integer just by wrapping this in the int builtin function here okay and this should work here so if I instead just print out these minutes instead of everything then okay we can see that we got 23 33 17 23 40 okay that looks good but there's actually one more thing that we need to do here because if we think about this then we need to remember that it is possible for us to not get a match for some of these regular expressions so for example our hours searched that search returned none since those videos were all less than an hour and if we tried to grab the group of a none value then it's going to give us an error saying hey this is none you're trying to access the group of a none value I don't know what you want me to do so we need to put in a conditional in place so that if our match is equal to none then we'll just assign a value of zero instead now you can use a regular if statement here if you're more comfortable with those but I'm going to use something called a ternary conditional here since it just makes it's a bit more simple in this case and it'll also make it a bit easier to write so with a ternary conditional we can just say okay I want this value here if minutes because if minutes is none then it won't be equal to this value we can put in an else zero so just to read this over one more time we're saying I want this value here if minutes and minutes just means that it has some value if it's none then it'll go to this else statement here and assign a zero again that's called a ternary conditional if you're not familiar with those are not comfortable then you can also just use you know a regular FL statement so now I'm also going to do this for hours and seconds and whoops I almost forgot here I need to replace this part here within the ternary conditional as well okay so now let's print out these hours minutes and seconds again to see what we are getting now so if I run this okay then we can see that this looks a little cleaner now now we can see that for all these we have zero hours 23 minutes one second 33 minutes and so on so now we're getting the hours minutes and seconds for each video and now we need to tally up all of these video times and I think the easiest way to do this will be to convert the video time entirely into seconds and then we'll tally up all of the seconds and then convert them back to hours minutes and seconds once we've added all those up one way that we could convert these to seconds would be to use some simple math by you know multiplying by 60 and things like that but an even easier way would be to use the time delta class from the date/time library so let me import this here up at the top and I'll show you how this works so I'm going to say from date/time we want to import time Delta and now let me scroll back down here and we will see how to use this underneath here after we've calculated the hours minutes and seconds in order to get the total number of seconds for each video I can just say video underscore seconds is equal to and then we want to create a time delta so within this time delta i want to say that the hours are going to be equal to hours here and we'll do the same thing for minutes and seconds so let me pass these in here okay and I don't need that trailing comma and now here at the end after we have this time delta now that it's created this Delta the time Delta has a total seconds method that we can run on this time Delta object that will give us the total seconds of everything that we just passed in so now let me print out video seconds instead of just hours minutes and seconds so I'll run this and now we can see that we are getting you know all of the total seconds for each of these and if you wanted to check this then you can open up a calculator so 13 80/60 a little over 23 minutes which is what that first one was so that seems to be working okay so we're definitely making progress here so now we're getting the total number of seconds for each video now remember we're only getting five videos from this playlist right now so let's see how we can actually get all of the videos from this playlist and then we can tally up all these seconds so to do this we're going to need to use page tokens which will allow us to get all of the results one page at a time now each page is returned gives us a reference to the next page and we can keep track of which page we're on using that page token so what I'm gonna do here I'm gonna scroll up to where we first made our video request for the videos of a certain playlist whoops and this is my video request here I actually want my playlist request that's why I named those differently there now what I'm gonna do here is I'm going to create an infinite loop that keeps grabbing pages and so there are no more left and then it'll break out of that loop once we're out of pages so this is going to be a very long or this while loop is going to take up a lot of code so I'm just gonna say first I'll create something called a next page token and we'll see what this does here in just a second and for now I'm going to set this to none and then I'm gonna say while true which is an infinite loop now I'm gonna take all of the code that we've written so far to grab these videos and calculate the seconds and everything and I'm going to press tab to indent all of that within hour while loop here so that we can keep grabbing videos and doing these calculations as long as there are more videos left in the playlist so to do this we can pass in a few different arguments here to our playlist request now we can also pass in an argument for Max results so that we can get more results per page so that we don't make as many requests to the API so I'll just pass in the max number I can for max results and I believe that is 50 so I'll say max results is equal to 50 and I also want to pass in the page token to let the API know what page of results were currently on and now the first time through this loop our next page token is going to be equal to none which will just give us the first page of results so I can say page token this is a capital T here page token is equal to next page token and again the first time through that'll be none which will just give us the first page of results okay and after we get a page of results then we want to execute that and do everything that we did before get all the video IDs from that page make a video request using those video IDs parse out the hours minutes and seconds and then finally down here at the bottom once we have calculated the total seconds for each video then we need to we need to have a way to break out of that infinite loop if we don't break out of that loop then it'll just go on forever so we're going to break out of the loop once there are no more pages left to query so to check this I'm gonna write some more code here now realize here that I'm not within this for loop anymore i back spaced here to where I'm no longer in that for loop so to check whether there are any more pages left we can use this next page token and set this equal to the playlist response remember we want the playlist response not the video response and we just want to get a string here of next page token and what this will do here is it will update our next page to Okin that tells the YouTube API what page of results were trying to fetch and if there are no more pages than this then this will just return none so if this is none after we try to fetch that token then we can just break out of the loop it means that we've exhausted all of the pages so I can just say if not next page token then just break out of the loop now actually before I run this I want to move a few things outside of our infinite loop now that we are inside of a loop here it doesn't make any sense compiling these regular expressions every time through the loop we only need to compile these once so I'm going to cut these out and let's move these here to a section above the while loop so I will just compile these up here at the top and I don't think there's any more code in here that needs to be removed from the while loop I think everything else is good yeah okay so if I didn't mess anything up here then if I run this then it should print out the total section the total seconds for every video in my playlist so if I look through here we can see that we're getting more than five I believe that there's 11 videos total and my pan is playlist so we got 2 3 4 5 6 7 8 9 10 11 okay yeah it seems to have gotten all those videos okay so now at this point all we need to do is add up all of these times for all these videos and then convert it back to hours minutes and seconds so above our while loop I'm going to create a variable called total underscore seconds and I'm just going to set this equal to zero and then within the loop here each time through the loop I'm going to remove our print statement since we know that that's working instead I am just going to keep adding to our total seconds for each videos seconds so this will keep a running total of all of these seconds for video and now outside of our loop on our main level here I'm just going to print out these total seconds and see if this looks correct so I'll go ahead and run this and now we can see that we get 19 thousand seconds 151 so that's definitely more seconds than any one video so that probably is getting that complete total okay so this is looking good now the total seconds here probably doesn't mean much to us I don't know about you guys but I can't just read 19,000 seconds and know exactly how long that is so now let's convert these back to hours minutes and seconds so there are a few different ways that we could do this one way that I like to do this is using the builtin div mod function so div mod allows us to divide two numbers and it returns a tuple of the quotient and the remainder so let's see what this looks like I think it'll make more sense so first I'm going to convert my total seconds to an integer because I believe that right now it's a float so just to be sure I want this to be an integer so I'll say total seconds is equal to and cast that to an integer there okay okay so first I'm going to use div mod to get the number of minutes and seconds so if we were to say div mod and passed in the total seconds here and then what we wanted to divide total seconds by we want to divide it by 60 to give us the number of minutes so what div mod does is it returns a tuple of the quotient which was how many times 60 went into our total seconds and then it also the second value is the remainder which would be the number of seconds so just to show what this looks like we can say minutes and seconds is equal to that returned to pool so just to show you what this returns here so this is taking 19,000 roughly 19,000 seconds here if I print this out print out the number of minutes and the number of seconds then what this did here was that div mod said okay 60 goes into that 19,000 number 319 times which is 319 minutes with 11 seconds left over so now in order to get the number of hours now we can just take this minutes here and do the exact same thing we can divide it by 60 and say okay however many times 60 goes into those number of minutes that's how many hours we have so I can pretty much just do the same thing I did here but instead I'm going to say that now this is hours and minutes and we want to divide the minutes by 60 and anything left over is going to be left over minutes so now let's just print out these values so you could just print these out as you know hours minutes and seconds and if I run this then we can see that we got okay that pandas playlist is 5 hours 19 minutes and 11 seconds and you can format this however you like if you want to use an F string then we could say you know I want hours minutes and seconds here but I want them separated by a colon instead so if I save this and run it here then we can see that that's more of a standard time format so we have 5 hours 19 minutes 11 seconds now just to make sure that this is working with the pagination on the videos now let me try to run this script on a much larger playlist so if I open my browser back up I also have my Python tutorials playlist open here and we can see that this is a hundred and forty videos instead of just 11 videos and again if you ever want to get the ID of a specific playlist then you can grab it up here in the URL it'll say list is equal to and then have the ID here so I'm gonna grab that ID and open up our script here and now I'm gonna paste in my Python tutorials playlist into this playlist ID instead of that panda series so now if I save this and run it then that obviously took a little bit more time to calculate because it was going through those pages in the playlist and all those videos and making those queries to the API but it gives us a result here of 60 hours 26 minutes and 37 seconds so that's good information to know it's good to know that if you want to watch my pandas playlist then that would be five hours and something if you want to watch the all of the Python videos and there's about 60 hours of content on there so I've always thought that that's very good information to know and I use scripts like this all the time whenever I am you know trying to learn something and watch a YouTube course I want to know how long that course is so you know you don't only have to use a script like this on my playlist you know you can go out to any playlist grab that playlist ID paste it in to your script here and make those calculations for yourself okay so I think that's gonna do it for this video hopefully now you feel like you have a pretty good idea for how you can access playlists using the YouTube API and access videos using video IDs and you know use that information to make some calculations yourself again I use this all the time personally and I think it's extremely useful being able to access the API in this way and get this type of information but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon or YouTube and there are links to those pages in the description section below be sure to subscribe for future videos and thank you all for watching you you
