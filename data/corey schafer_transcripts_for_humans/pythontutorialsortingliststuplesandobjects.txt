With timestamps:

00:00 - hey everybody how's it going in this
00:02 - video we're going to be going over how
00:03 - to sort in Python uh so we're going to
00:06 - look at how we can sort a few different
00:07 - data types so we're going to go over
00:10 - sorting uh lists and tupal you can also
00:13 - run sort on dictionaries and you can
00:15 - also sort objects by a custom criteria
00:19 - um but to get started let's go ahead and
00:20 - look at a couple of ways in which we can
00:22 - just sort a simple list of integers so I
00:25 - have this list here called Li and it
00:28 - contains a bunch of random numbers
00:30 - between 1 and N so if we wanted to sort
00:33 - this how would we do it well I'm going
00:35 - to make a new variable here called sore
00:38 - Li and I'm going to set it equal to and
00:41 - I'm going to run this sorted function
00:44 - and I'm going to pass in our original
00:46 - list to this sorted function so I'm
00:48 - going to save that and then I'm going to
00:50 - go ahead and print this out to the
00:52 - screen so I'm going to uncommon out this
00:53 - print statement here and print out this
00:56 - sorli variable now if I run this you can
01:00 - see here that it did sort this list for
01:02 - us in ascending order so we have 1
01:04 - through nine here um now let me go ahead
01:06 - and print out my original variable as
01:09 - well so I'm going to print out this Li
01:11 - list and if I print this out now you can
01:14 - see down here that my sorted variable uh
01:17 - is a sorted version of that list but my
01:20 - original is still the uh jumbled
01:23 - unsorted group of numbers now what if I
01:25 - wanted to sort that original uh list of
01:28 - numbers without creating creating a new
01:30 - variable uh well there I can use the
01:33 - sort method on the list so I can say Li
01:37 - do sort and then just close off those
01:40 - parentheses and if I run that now you
01:43 - can see that we have our sorted variable
01:45 - here that is a sorted version of that
01:48 - and also when I ran this li. sort uh it
01:51 - also sorted the original list of
01:54 - integers also now one difference between
01:56 - this sorted function here and this sort
01:59 - method is that the sorted function
02:02 - returns a new sorted list so that's why
02:04 - we can set it to a variable but the
02:07 - sorted method uh just sorts the list in
02:10 - place and then returns none so this can
02:12 - be important because sometimes people
02:14 - get this confused and they'll try to so
02:17 - for example if I was to copy this and I
02:19 - was to try to set this
02:21 - sorli to this li. sort if I was to do
02:25 - that and then run this you can see that
02:27 - instead of getting this sorted list we
02:29 - just get this n
02:30 - value here so if you use the sort method
02:33 - then don't expect a list to be returned
02:36 - because it's just going to go ahead and
02:37 - do that in place okay so now we've seen
02:40 - how we can sort these list in ascending
02:42 - order but what if I wanted these to be
02:44 - in descending order from highest to
02:46 - lowest uh well to do that we can just do
02:49 - pass in this reverse equals true and if
02:53 - I save that and run it now you can see
02:56 - that our new variable here is sorted in
02:59 - descending order order and we can also
03:01 - use this exact same parameter with the
03:04 - sort method so if I pass that in the
03:06 - sort method then it does the uh original
03:09 - variable in place in descending order
03:11 - also okay so why would I want to choose
03:15 - the sort function or the sorted function
03:17 - over the uh sort method well that sort
03:21 - method on the list is uh is fine if you
03:24 - are working with list and if you want to
03:25 - modify it in place but the sorted
03:28 - function gives us a little bit more
03:30 - flexibility because we can pass in any
03:32 - iterable as opposed to uh the sort
03:35 - method which works specifically on lists
03:38 - uh so for example here I have a tuple
03:41 - that has all the same values that we had
03:43 - in our list of integers and the Tuple
03:45 - doesn't have a sort method so if I do a
03:49 - t. sort and run that then we get an
03:52 - error um so what we have to do here is
03:56 - we have to use the sort function so I'm
03:58 - going to do a new variable and do a
04:02 - sorted I'm going to take off this method
04:05 - here since it doesn't have one and I'm
04:07 - going to save that and then I'm going to
04:09 - print out the new variable that we just
04:11 - created here so if I print this out save
04:13 - it and run it now you can see that our
04:16 - sore tup uh variable is a list of the
04:21 - values in our tupal that are now sorted
04:23 - so for another example here I have a
04:26 - dictionary and you can pass a dictionary
04:29 - into sorted also so I'm going to do an
04:31 - sore di equals uh sorted and pass in my
04:37 - dictionary there and then I'm going to
04:38 - go ahead and just print this out to the
04:40 - screen I'm going to comment these out
04:43 - now what sorted will do by default with
04:45 - this dictionary is it's just going to
04:47 - sort the keys so if I run this here then
04:50 - you can see that it returned a list with
04:52 - these sorted Keys here so you can use
04:54 - either method of sorting that you like
04:56 - you can use either the sorted function
04:58 - or the sort method
05:00 - as long as you understand the
05:01 - differences um but for the rest of this
05:03 - video I'm going to use this sorted
05:05 - function because I'm going to be working
05:07 - with examples other than list uh so the
05:10 - sorted function is what you need for
05:12 - that so so far we've sorted integers in
05:15 - ascending and descending order but what
05:18 - if we wanted to sort values based on a
05:20 - different criteria uh so for example
05:23 - what if I had a list of integers here
05:26 - and I wanted to sort these based on
05:29 - their absolute value so you can see I
05:31 - have some uh negative values here now if
05:35 - I was just to print out uh this list
05:38 - right now and run this um actually let
05:42 - me go ahead and sort this list and I'll
05:44 - show you what the uh default sort is for
05:47 - these negative values so I'm going to do
05:49 - sorted and pass in this original list
05:52 - and then I'm going to print out this
05:54 - sorli variable and if I run this you can
05:58 - see that we got uh the exact same thing
06:00 - that it's in right now because these
06:01 - negative values are considered less than
06:03 - the positive values like you'd expect uh
06:06 - so we have -6 54 1 2 3 okay so like I
06:10 - was saying what if I wanted to sort this
06:12 - based on the absolute value of these
06:15 - values so uh it should be 1 2 3 4 5 6 so
06:21 - to do this we can use a key parameter so
06:25 - when our with our sorted here I'm going
06:27 - to pass in a key ke parameter and I'm
06:30 - going to say that the key equals ABS
06:34 - which will use the absolute value
06:36 - function now what this does is it runs
06:39 - each element through this absolute value
06:41 - function before it makes the comparison
06:43 - so now if I run it with this key in
06:45 - place now you can see that my sorted
06:47 - variable is 1 2
06:50 - 3-45 -6 now the key parameter is
06:53 - extremely useful when you're sorting
06:55 - objects with uh named attributes uh so
06:58 - for example here I have this very simple
07:00 - class called
07:02 - employee and within the employee here we
07:04 - just have a name an age and a salary and
07:07 - uh this re method here all it does is it
07:11 - tells python how we want this function
07:13 - represented when it's printed out to the
07:15 - screen so now I have these uh three
07:18 - sample employees here that I've created
07:20 - with uh random names ages and salaries
07:23 - and I'm going to put all three of these
07:26 - employees into a list called employees
07:30 - and now I'm going to try to sort these
07:32 - based on a specific attribute so if I
07:35 - try to sort these without a key then
07:40 - it's not really going to know how to
07:42 - sort them so let me go ahead and try to
07:45 - sort them and print this out to the
07:46 - screen and you can see I get this type
07:49 - error here and it says unorderable
07:51 - unorderable types employee uh can't
07:54 - compare employee to employee so it's
07:56 - getting this employee object here from
07:58 - this list and it's saying hey I don't
08:00 - know how you want me to sort these so we
08:03 - need to use a key to sort these on and
08:05 - I'm going to write a custom function uh
08:08 - in order to sort these so remember our
08:11 - key takes a function that takes each
08:14 - element of our list and Returns what we
08:16 - want to sort on uh so with the absolute
08:19 - value example that I used earlier I was
08:21 - able to use a built-in function for the
08:23 - key uh but for this example we need to
08:25 - write a custom function uh so the
08:28 - function I'm going to write is a very
08:30 - simple one it's just going to be defa
08:32 - and let's see I'll do this eore sort and
08:36 - I'll pass in an employee and then I will
08:39 - just return and we'll uh sort based on
08:42 - the employees name so I'll do
08:45 - empname so now where I ran this sorted
08:47 - function I can pass in this key and I'm
08:50 - just going to pass in I'm going to tell
08:52 - it to do the key as this esort function
08:56 - here so now if I run this then you can
08:58 - see that it returns all of our employees
09:01 - based on their name now if I wanted to
09:04 - sort these based on the employees age
09:06 - then it would be as easy as coming up to
09:08 - this sort function here and instead of
09:10 - returning the employee name I'm going to
09:13 - return the employee age and if I run
09:15 - that now you can see that it's the
09:17 - employee age um in ascending order and
09:20 - lastly if I wanted to do this based on
09:22 - salary then I could go ahead and make
09:24 - this salary and save that and run it and
09:27 - you can see that it sorts it uh by the
09:29 - salary and ascending order now you can
09:31 - also still pass in your other parameters
09:34 - here too so if I did a reverse equals
09:36 - true and then ran this then it would uh
09:39 - sort in the descending order based on
09:41 - our key which is salary so now we have
09:43 - all the salaries and descending order
09:46 - now if you have a complicated sort
09:48 - function then it's probably best to
09:49 - break out uh these functions into
09:52 - separate functions like this but for
09:53 - those of you who are familiar with
09:55 - Lambda functions then you probably
09:57 - notice that something this would be easy
10:00 - to turn into a Lambda function so
10:02 - instead of setting this key equal to
10:04 - this e do sort I really could just do a
10:08 - Lambda here of e now I'm not going to go
10:10 - into lambdas if you haven't seen these
10:12 - before then don't worry about it it's
10:13 - just a way to uh quickly write an
10:16 - anonymous function so if I wanted to
10:18 - sort on the age I'll do or the name I'll
10:21 - do e.name I'm going to go ahead and take
10:24 - out reverse here and save that and run
10:26 - it and now you can see that it is sorted
10:28 - by the employees name in ascending order
10:31 - and since we're using this Lambda
10:33 - function here uh this our sort function
10:36 - up here that we used before isn't
10:37 - actually doing anything so I could still
10:39 - run that without this eore sort function
10:42 - now I should also mention that if you're
10:44 - working with attributes like this that
10:47 - you can import a function that uh
10:49 - specifically does this so I'm just going
10:51 - to do my import from down here um so if
10:54 - I import the operator module and do a
10:58 - from operator import it is called Adder
11:02 - getter this is it right here now what we
11:04 - can do with this is we can just use this
11:07 - as a replacement for our key so and I'm
11:10 - going to take this Lambda out here so
11:12 - I'm going to do an Adder getter and the
11:14 - attribute that I want let's see I'll
11:16 - just do I'll do this as age so if I save
11:19 - that and run it now you can see that
11:21 - it's sorted based on the age so you
11:24 - might wonder why I just didn't show you
11:26 - that Adder getter right away instead of
11:28 - first showing you how to do uh these
11:31 - functions and the lambdas and things
11:33 - like that but knowing how to uh sort
11:35 - with these custom functions it'll allow
11:38 - you to be a little bit more flexible
11:40 - down the road when you want to uh sort
11:42 - more complicated items so I think that
11:45 - about does it for this video I hope it
11:47 - gives you some good ideas for how you
11:48 - can sort your list and objects in any
11:51 - way that you'd like but if you do have
11:52 - any questions just uh feel free to ask
11:54 - in the comment section below uh be sure
11:56 - to subscribe for future videos and thank
11:58 - you all for watching watch

Cleaned transcript:

hey everybody how's it going in this video we're going to be going over how to sort in Python uh so we're going to look at how we can sort a few different data types so we're going to go over sorting uh lists and tupal you can also run sort on dictionaries and you can also sort objects by a custom criteria um but to get started let's go ahead and look at a couple of ways in which we can just sort a simple list of integers so I have this list here called Li and it contains a bunch of random numbers between 1 and N so if we wanted to sort this how would we do it well I'm going to make a new variable here called sore Li and I'm going to set it equal to and I'm going to run this sorted function and I'm going to pass in our original list to this sorted function so I'm going to save that and then I'm going to go ahead and print this out to the screen so I'm going to uncommon out this print statement here and print out this sorli variable now if I run this you can see here that it did sort this list for us in ascending order so we have 1 through nine here um now let me go ahead and print out my original variable as well so I'm going to print out this Li list and if I print this out now you can see down here that my sorted variable uh is a sorted version of that list but my original is still the uh jumbled unsorted group of numbers now what if I wanted to sort that original uh list of numbers without creating creating a new variable uh well there I can use the sort method on the list so I can say Li do sort and then just close off those parentheses and if I run that now you can see that we have our sorted variable here that is a sorted version of that and also when I ran this li. sort uh it also sorted the original list of integers also now one difference between this sorted function here and this sort method is that the sorted function returns a new sorted list so that's why we can set it to a variable but the sorted method uh just sorts the list in place and then returns none so this can be important because sometimes people get this confused and they'll try to so for example if I was to copy this and I was to try to set this sorli to this li. sort if I was to do that and then run this you can see that instead of getting this sorted list we just get this n value here so if you use the sort method then don't expect a list to be returned because it's just going to go ahead and do that in place okay so now we've seen how we can sort these list in ascending order but what if I wanted these to be in descending order from highest to lowest uh well to do that we can just do pass in this reverse equals true and if I save that and run it now you can see that our new variable here is sorted in descending order order and we can also use this exact same parameter with the sort method so if I pass that in the sort method then it does the uh original variable in place in descending order also okay so why would I want to choose the sort function or the sorted function over the uh sort method well that sort method on the list is uh is fine if you are working with list and if you want to modify it in place but the sorted function gives us a little bit more flexibility because we can pass in any iterable as opposed to uh the sort method which works specifically on lists uh so for example here I have a tuple that has all the same values that we had in our list of integers and the Tuple doesn't have a sort method so if I do a t. sort and run that then we get an error um so what we have to do here is we have to use the sort function so I'm going to do a new variable and do a sorted I'm going to take off this method here since it doesn't have one and I'm going to save that and then I'm going to print out the new variable that we just created here so if I print this out save it and run it now you can see that our sore tup uh variable is a list of the values in our tupal that are now sorted so for another example here I have a dictionary and you can pass a dictionary into sorted also so I'm going to do an sore di equals uh sorted and pass in my dictionary there and then I'm going to go ahead and just print this out to the screen I'm going to comment these out now what sorted will do by default with this dictionary is it's just going to sort the keys so if I run this here then you can see that it returned a list with these sorted Keys here so you can use either method of sorting that you like you can use either the sorted function or the sort method as long as you understand the differences um but for the rest of this video I'm going to use this sorted function because I'm going to be working with examples other than list uh so the sorted function is what you need for that so so far we've sorted integers in ascending and descending order but what if we wanted to sort values based on a different criteria uh so for example what if I had a list of integers here and I wanted to sort these based on their absolute value so you can see I have some uh negative values here now if I was just to print out uh this list right now and run this um actually let me go ahead and sort this list and I'll show you what the uh default sort is for these negative values so I'm going to do sorted and pass in this original list and then I'm going to print out this sorli variable and if I run this you can see that we got uh the exact same thing that it's in right now because these negative values are considered less than the positive values like you'd expect uh so we have 6 54 1 2 3 okay so like I was saying what if I wanted to sort this based on the absolute value of these values so uh it should be 1 2 3 4 5 6 so to do this we can use a key parameter so when our with our sorted here I'm going to pass in a key ke parameter and I'm going to say that the key equals ABS which will use the absolute value function now what this does is it runs each element through this absolute value function before it makes the comparison so now if I run it with this key in place now you can see that my sorted variable is 1 2 345 6 now the key parameter is extremely useful when you're sorting objects with uh named attributes uh so for example here I have this very simple class called employee and within the employee here we just have a name an age and a salary and uh this re method here all it does is it tells python how we want this function represented when it's printed out to the screen so now I have these uh three sample employees here that I've created with uh random names ages and salaries and I'm going to put all three of these employees into a list called employees and now I'm going to try to sort these based on a specific attribute so if I try to sort these without a key then it's not really going to know how to sort them so let me go ahead and try to sort them and print this out to the screen and you can see I get this type error here and it says unorderable unorderable types employee uh can't compare employee to employee so it's getting this employee object here from this list and it's saying hey I don't know how you want me to sort these so we need to use a key to sort these on and I'm going to write a custom function uh in order to sort these so remember our key takes a function that takes each element of our list and Returns what we want to sort on uh so with the absolute value example that I used earlier I was able to use a builtin function for the key uh but for this example we need to write a custom function uh so the function I'm going to write is a very simple one it's just going to be defa and let's see I'll do this eore sort and I'll pass in an employee and then I will just return and we'll uh sort based on the employees name so I'll do empname so now where I ran this sorted function I can pass in this key and I'm just going to pass in I'm going to tell it to do the key as this esort function here so now if I run this then you can see that it returns all of our employees based on their name now if I wanted to sort these based on the employees age then it would be as easy as coming up to this sort function here and instead of returning the employee name I'm going to return the employee age and if I run that now you can see that it's the employee age um in ascending order and lastly if I wanted to do this based on salary then I could go ahead and make this salary and save that and run it and you can see that it sorts it uh by the salary and ascending order now you can also still pass in your other parameters here too so if I did a reverse equals true and then ran this then it would uh sort in the descending order based on our key which is salary so now we have all the salaries and descending order now if you have a complicated sort function then it's probably best to break out uh these functions into separate functions like this but for those of you who are familiar with Lambda functions then you probably notice that something this would be easy to turn into a Lambda function so instead of setting this key equal to this e do sort I really could just do a Lambda here of e now I'm not going to go into lambdas if you haven't seen these before then don't worry about it it's just a way to uh quickly write an anonymous function so if I wanted to sort on the age I'll do or the name I'll do e.name I'm going to go ahead and take out reverse here and save that and run it and now you can see that it is sorted by the employees name in ascending order and since we're using this Lambda function here uh this our sort function up here that we used before isn't actually doing anything so I could still run that without this eore sort function now I should also mention that if you're working with attributes like this that you can import a function that uh specifically does this so I'm just going to do my import from down here um so if I import the operator module and do a from operator import it is called Adder getter this is it right here now what we can do with this is we can just use this as a replacement for our key so and I'm going to take this Lambda out here so I'm going to do an Adder getter and the attribute that I want let's see I'll just do I'll do this as age so if I save that and run it now you can see that it's sorted based on the age so you might wonder why I just didn't show you that Adder getter right away instead of first showing you how to do uh these functions and the lambdas and things like that but knowing how to uh sort with these custom functions it'll allow you to be a little bit more flexible down the road when you want to uh sort more complicated items so I think that about does it for this video I hope it gives you some good ideas for how you can sort your list and objects in any way that you'd like but if you do have any questions just uh feel free to ask in the comment section below uh be sure to subscribe for future videos and thank you all for watching watch
