With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video I'm gonna write a quick and
00:03 - easy script that monitors my personal
00:05 - website and sends me an email if it's
00:07 - down for any reason
00:08 - now if the site is down then I'm also
00:09 - going to have it have the script
00:11 - automatically restart my server to see
00:13 - if that fixes the problem now a lot of
00:15 - people have wanted me to make videos on
00:16 - real-world problems that I can solve
00:18 - with programming and this is a strip
00:20 - that I've been needing to write for a
00:21 - while now so my personal website runs on
00:24 - a server that is pretty old at this
00:25 - point
00:26 - and it really just needs to be
00:27 - completely wiped and updated so that
00:29 - it's more stable but it's one of those
00:31 - things that I just haven't had the time
00:32 - to do but with the server in its current
00:35 - state
00:35 - sometimes web processes occasionally
00:37 - quit unexpectedly and cause my website
00:39 - not to load now for those of you who
00:41 - have followed along with either my flask
00:43 - or Django series then don't worry the
00:45 - servers that we set up in that series
00:46 - are completely fine and stable this is
00:49 - just a server that I set up years and
00:51 - years ago that I used to test a lot of
00:53 - different software and development and
00:55 - then I just plot my personal website on
00:57 - there so after all those years of having
00:59 - different configurations and
01:00 - installations it's just not very stable
01:03 - anymore so until I can get around to
01:05 - updating that I'm just gonna write a
01:06 - quick script that occasionally checks my
01:08 - website and if it's not returning a 200
01:11 - response which means that it was a
01:12 - successful response then I'll just have
01:14 - it send me an email so that I know I
01:16 - need to go fix it now this website is
01:18 - hosted on low note so I also use the
01:21 - node API to automatically restart the
01:23 - server so that it possibly fixes itself
01:26 - before I even get the email so this is
01:28 - going to be a pretty quick and easy
01:30 - script but I thought some of you might
01:32 - find it useful to see me write this up
01:34 - now I'm not gonna go into as much
01:35 - step-by-step detail as to exactly what
01:38 - I'm doing like I do in my other
01:39 - tutorials I'm just going to step through
01:41 - this quickly and give you an idea of how
01:43 - a quick script can help you solve a
01:45 - real-world problem like this so let's go
01:48 - ahead and get started so first of all
01:50 - I'm going to create a directory of
01:51 - everything for this little project so
01:54 - I'm in my home folder within my terminal
01:56 - and I'm going to create a directory
01:58 - called site monitor so I'm gonna say
02:00 - m'kay der site underscore monitor now
02:05 - I'm on a Mac which mostly uses the Linux
02:07 - Linux commands if you're on Windows then
02:09 - you'll have to either do this through
02:11 - your file explorer or use the windows
02:13 - for your command prompt okay so I'm
02:16 - going to CD into that directory that I
02:18 - just created and I'm going to create a
02:21 - virtual environment for this little
02:22 - project now I've been using the V env
02:25 - module in the Python standard library
02:26 - lately instead of virtual Envy and it's
02:29 - pretty simple to use and you don't have
02:31 - to install anything so I can just say
02:33 - Python 3 - M de and V and then I'll call
02:39 - this virtual environment Monitor
02:41 - underscore env so I will run that so now
02:46 - I have a new virtual environment called
02:48 - monitor underscore env so now I can
02:51 - activate that so I'll say source monitor
02:54 - E and V /bin board slash activate so
02:59 - that is now activated we can see from
03:02 - the prompt here that it's active and
03:03 - again this source command is for Mac and
03:06 - Linux
03:06 - if you're on Windows then you would do
03:08 - something like this you'd say monitor
03:11 - env back slash scripts back slash
03:15 - activate dot bat or something like that
03:17 - I think that's right but this is on Mac
03:21 - and Linux okay so now I have a fresh
03:23 - environment and I'm going to be using a
03:25 - couple of packages for this script so
03:27 - I'm going to use the request library to
03:29 - check the response from my website and I
03:31 - do have a more in-depth video on the
03:33 - request library if you'd like to see how
03:35 - to use this in more detail so I'll leave
03:37 - a link to that video in the description
03:38 - section below and I'm also going to be
03:40 - using the lonoa thon library to interact
03:43 - with my server so I have this open here
03:46 - in the browser and let me go to that
03:49 - documentation here so this is the low
03:51 - note Python library that allows you to
03:53 - interact with your low notes through
03:55 - Python and we'll see more about this
03:57 - later in the tutorial so now we want to
04:01 - install both of those packages and we
04:03 - can do that through pip so once we've
04:05 - got the environment activated let's pip
04:07 - install these packages so first I'll
04:09 - install the request library so I'll say
04:11 - pip install requests and this one is
04:14 - usually pretty quick okay that's done
04:16 - and also I want to install the Lund ode
04:19 - Python library that I can use to talk to
04:22 - my low note servers through Python so to
04:24 - do that I can say pip install and
04:27 - that is the node underscore API for now
04:31 - if you want to know how I got that it's
04:32 - here in their documentation pip install
04:34 - the node API for so let me run that now
04:39 - with this lonoa thawne library we're
04:42 - gonna need a personal access token in
04:44 - order to interact with our len√¥tre count
04:46 - and that's good because it's a layer of
04:48 - security that makes us prove who we are
04:50 - before doing anything with our servers
04:52 - so but let's go ahead and continue on
04:54 - with the email script for now and I'll
04:56 - grab that personal access token once
04:59 - we're ready to interact with the low
05:00 - note server okay so now that we have
05:02 - those packages installed let's actually
05:04 - write the scrip to monitor the website
05:06 - so I'm still here within my directory
05:08 - for this project so I'm going to open
05:10 - this up in sublime so I'm just going to
05:13 - do that with su BL and then dot for the
05:17 - current directory now I have my
05:19 - command-line shortcut set up to open
05:22 - sublime with that su BL command if you
05:25 - don't have that then you can just open
05:26 - this directory and your text editor like
05:29 - you normally would
05:30 - okay so now I'm going to create a new
05:32 - script in this directory so new file and
05:34 - I'm going to call this monitor dot py so
05:37 - now we have an empty Python script here
05:39 - okay so first I'm going to import the
05:43 - request library okay so now we're going
05:47 - to use request to make a request to my
05:49 - home page so we can do that by saying R
05:52 - is equal to request dot get and this
05:57 - needs to be in a string here so this is
05:59 - HTTP forge slashes query MS dot-com and
06:05 - I'm going to set a timeout there equal
06:07 - to let's say five seconds now you want
06:10 - to set a timeout when doing something
06:12 - like this because if your site isn't
06:14 - responding and it gets hung up then by
06:16 - default the request library will just
06:18 - wait indefinitely so with a timeout set
06:20 - it will only wait that number of seconds
06:22 - that you specified before giving up and
06:24 - throwing an exception so if my site
06:26 - doesn't respond in five seconds then
06:27 - I'll just assume that something's up
06:29 - okay so now I'm going to check to make
06:31 - sure that the response of that request
06:34 - has a status code of 200 so 200 response
06:37 - is a successful response and if the
06:40 - response is an
06:40 - 200 response then I'll want to send
06:43 - myself an email and restart my server so
06:45 - I'm gonna say if our dot
06:48 - status whoops let me spell that right
06:50 - status underscore code is not equal to
06:55 - 200 now the response object also has an
06:58 - attribute called okay which is set to
07:00 - true if the response is less than 400 so
07:04 - I could have also written that like this
07:07 - if not our dot okay but that okay value
07:12 - would be true for any response that
07:14 - isn't you know a 400 or 500 error and I
07:17 - know for sure that I'm expecting a 200
07:19 - response so that's what I'm checking for
07:22 - specifically so I'm not using that
07:25 - okay value that you may have seen in
07:27 - other tutorials okay so if the response
07:29 - isn't a 200 response then first I want
07:32 - to send myself an email letting me know
07:34 - that something is up so to do this we're
07:36 - going to need to use a mail server so
07:38 - I'm going to use my gmail account but
07:40 - you can use whatever you'd like so
07:42 - whatever you use you'll have to look up
07:44 - the instructions online for how to
07:46 - connect to that server so it's pretty
07:48 - simple for Gmail you do need to let
07:50 - Gmail know that you're going to be
07:52 - connecting to your account through a
07:54 - program and I have the instructions
07:56 - pulled up here in the browser as well so
07:59 - if you don't have to factor
08:01 - authentication then you can just go to
08:03 - your Google settings and allow
08:05 - connection through less secure apps so
08:08 - this is at my account Google comm ford
08:11 - slash less secure apps and I'll put
08:13 - links to these in the description
08:14 - sections below but I do have two factor
08:17 - authentication on my machine so in order
08:21 - to connect to your account while you
08:24 - have two-factor authentication then
08:26 - you're going to need to create a
08:27 - password specifically for our app and
08:30 - you can do that through this account
08:32 - here my account Google comm forward
08:35 - slash app passwords and I will put a
08:38 - link to this URL in the description
08:41 - section below as well and you can see
08:43 - here that in my app passwords I created
08:45 - one called Python tests that I use for
08:48 - connecting through Python applications
08:50 - now like I said I'll put a link in the
08:52 - description section below to both of
08:53 - these Google pages
08:54 - if you want to know how to set this up
08:55 - for yourself so once you have your
08:58 - Google security settings in order then
09:00 - we connect to the Google Mail server
09:02 - with the built-in SMTP Lib module in
09:06 - Python so first I'm going to import that
09:08 - at the top of our script so I'll pull
09:11 - this back up and right above request I'm
09:15 - going to say import SMTP Lib and save
09:18 - that and now to set this up to send an
09:21 - email within my conditional here I'm
09:24 - going to say with SMTP Lib dot SMTP and
09:29 - the mail server here is going to be
09:32 - smtp.gmail.com and for the second
09:36 - argument we pass in the port so this is
09:38 - going to be 587 and this is on their
09:41 - documentation online so I don't actually
09:43 - memorize this stuff I have references to
09:47 - this how this works okay so now we have
09:50 - this SMTP connection to their mail
09:53 - server so now we're gonna say SMTP now
09:58 - the e hlo method just identifies
10:01 - ourselves with the mail server that
10:02 - we're using and now we want to encrypt
10:05 - our traffic so to do that I can say SMTP
10:09 - what not SMTP Lib SMTP dot start TLS and
10:15 - that's going to be a method and then we
10:18 - need to rerun that eh ello method again
10:21 - to re identify ourselves as an encrypted
10:23 - connection so I would just copy that and
10:26 - paste it in there okay and now that
10:30 - we're encrypted we can login to our mail
10:32 - server so I'm going to come down here
10:34 - and say SMTP dot
10:36 - in and now at this point we can put in
10:38 - our email address and password now you
10:41 - can put this directly in the script if
10:43 - you'd like but I think it's a good habit
10:45 - never to put sensitive information like
10:47 - this into a script directly I think that
10:49 - you should always put sensitive
10:51 - information like this either in a
10:53 - configuration file somewhere that isn't
10:55 - committed to source code or in
10:58 - environment variables so for this video
11:00 - I've put my credentials inside
11:02 - environment variables so that I don't
11:04 - have to write them out here on video for
11:05 - everyone to see now if you've never used
11:07 - environment
11:08 - variables to hide information like this
11:10 - then I do have a separate video to show
11:12 - how to do that for Mac Linux and Windows
11:14 - so I'll leave a link to those videos in
11:16 - the description section below if anyone
11:18 - would like to see how that's done
11:20 - but I've already put those environment
11:22 - variables created with that information
11:24 - so I can load those in by importing the
11:27 - OS module so up here at the top I'm
11:29 - going to say import OS and at the top of
11:33 - my file here I'm going to create some
11:36 - variables using those environment
11:37 - variables so I'm going to create one
11:40 - called
11:41 - email address and I'm going to set that
11:43 - equal to Oh s dot environment that's how
11:47 - you get environment variables and I
11:50 - created these environment variables and
11:52 - I called them email underscore user and
11:55 - now
11:56 - let me create another variable here
11:58 - called email underscore password and the
12:03 - environment variable for that was email
12:06 - underscore Pass so again you're going to
12:08 - have to create your own environment
12:09 - variables called you know for your email
12:12 - address and for your email password or
12:14 - you can put those in a configuration
12:15 - variable file somewhere any way that you
12:18 - want to do that okay so now I'm going to
12:20 - login to the gmail server using those
12:23 - credentials so that's what we pass in
12:25 - here to SMTP in so first I'm going to
12:28 - pass in the email address then I'm gonna
12:30 - pass in the email password okay so now
12:34 - let's create a simple message for our
12:35 - email so I'm just going to create a
12:38 - simple plain text email in this video
12:40 - and I'll be doing a more advanced email
12:42 - video in the near future where we cover
12:44 - attachments and HTML messages and things
12:46 - like that but for this video we just
12:49 - want text so first I'm going to create a
12:51 - subject line since this will be an email
12:54 - about my website being down I'm gonna
12:56 - make it something that will catch my eye
12:58 - so I will just say subject is equal to
13:02 - and I'll just do all caps your site is
13:05 - down with an exclamation point there and
13:08 - for the body of the website I'm just
13:10 - going to put something here like you
13:13 - know make sure the server restarted and
13:17 - it is back up okay and now I'm going to
13:21 - combine at this
13:22 - and body into a single message so when
13:25 - you're constructing a plaintext email
13:26 - from scratch you need to add the subject
13:29 - as a header and then have a couple of
13:31 - blank lines and then put the body of the
13:33 - message so I'm going to do this using an
13:35 - EPS tring so I will just say msg is
13:38 - equal to and to do an F string you do F
13:41 - and then your string so I'll say subject
13:44 - and then pass in that subject and then
13:49 - I'll do a couple of blank lines here and
13:51 - now I will pass in the body and again
13:54 - I'm not going into as much step-by-step
13:56 - detail in this video but if you've never
13:58 - used F strings before I think that
14:00 - they're really nice to work with and I
14:02 - have any more in-depth video on that
14:03 - topic and I'll leave a link to that in
14:06 - the description section below if you'd
14:07 - like to learn more about those okay so
14:09 - now I just have to send this email now
14:12 - that we've created this message so I can
14:15 - do that here by using this format I can
14:19 - say sm t p dot send mail and then we're
14:24 - going to want to send this to the sender
14:26 - and the receiver and then the message so
14:30 - we want to put the sender here and the
14:32 - receiver here so for the sender we're
14:35 - going to want this to be the email
14:37 - address that we logged in as now you can
14:40 - put a different value there but I
14:42 - wouldn't recommend it you don't want to
14:45 - you know spoof what email this is coming
14:47 - from because it's against the rules
14:49 - first of all for imitating someone and
14:52 - second of all it's probably just gonna
14:54 - wind up in spam I mean they they have
14:56 - things in place that catch this kind of
14:58 - stuff okay so we're putting the sender
15:00 - as the email address that we logged in
15:02 - as and the receiver I'm just putting as
15:05 - myself also so I could put the email
15:08 - address here as well but just to be more
15:11 - clear let me act like I'm actually
15:13 - sending this to someone different but so
15:16 - I'm gonna put in Cory M Schaefer at
15:18 - gmail.com which is my email address but
15:20 - that is actually the same as what this
15:22 - email address is as well okay so that
15:24 - should send our email if our site is
15:26 - down now we can test this by commenting
15:28 - out the if statement and onion denting
15:31 - our email section so if I do that let me
15:34 - just comment out the
15:36 - if statement for now and unand dint the
15:39 - email section here so there's no
15:41 - conditional that won't send this email
15:43 - so if I go ahead and run this code then
15:47 - we don't have any output here but if I
15:50 - wait a second then I should get an email
15:53 - that comes through so I have my gmail
15:56 - pulled up here on my phone and I can see
16:00 - that I did just get an email that came
16:02 - through with the message that we
16:05 - specified so that works well okay so now
16:08 - let's set this back up to how it was
16:10 - within the with statement so I will
16:13 - indent that back and uncomment out the
16:16 - conditional there now also I should
16:18 - mention that in sublime whenever you run
16:22 - code you have to have a build system and
16:25 - I have my build system set to my virtual
16:29 - environment that I created at the
16:31 - beginning of this video so that is why
16:32 - that worked if you don't have your your
16:36 - build system set up to your virtual
16:37 - environment then you'll have to set that
16:38 - in sublime but if that's too much of a
16:41 - hassle for you then you can always come
16:43 - back here to your terminal and just run
16:45 - that manually so you could say Python
16:47 - monitor dot and whoops monitor dot py
16:51 - and run the script that way okay so let
16:54 - me go back to the script here okay so
16:56 - now we've sent ourselves an email when
16:58 - the site is not responding with a 200
17:01 - status code but now I'm going to use the
17:03 - Llano di thon library to reboot my low
17:06 - note server so in order to interact with
17:08 - milah note account programmatically I'm
17:10 - going to need to create an API token
17:12 - through my account so I have my len√¥tre
17:16 - open here let me exit out of that okay
17:19 - so I've got my note account open here so
17:22 - in order to create an API token we need
17:25 - to first go to our profile so to get to
17:28 - the profile I'm going to click on my
17:29 - profile picture up here at the top right
17:31 - and then I can go to my profile so
17:35 - within here we can click on the tab that
17:38 - says API tokens so I'm going to click on
17:42 - that and we can see here that we have a
17:44 - section for personal access tokens now I
17:47 - don't have any here right now but we can
17:49 - create
17:50 - by clicking add a personal access token
17:53 - so I will create one and for the label
17:57 - of this token I'll just call this
17:58 - len√¥tre
17:59 - - Python - token and now I'm going to
18:04 - set the expiration date to never if you
18:06 - want this to be you know more secure and
18:08 - have expiration dates then you can set
18:10 - those up however you want and I'm going
18:12 - to give this readwrite access to
18:14 - everything on my account so now if I
18:17 - scroll down here I can submit that token
18:20 - and now it's going to pop up with the
18:23 - API access token so I'm going to copy
18:26 - this now this token actually won't be
18:30 - visible anymore after I close this so
18:32 - you want to be sure that you copy this
18:34 - down or write it down somewhere so I'm
18:38 - going to click OK here and now we have
18:40 - our a node python token here within our
18:43 - personal access tokens now don't worry
18:45 - I'm going to delete this token after the
18:48 - video and create a new one so that no
18:50 - one can access my account using this
18:53 - token that we saw in this video but I'll
18:55 - use this one for now okay so at this
18:58 - point I'm going to create another
18:59 - environment variable for this API token
19:02 - so I'm not going to show that here on
19:04 - video since my email credentials are in
19:07 - there also but like I said if anyone
19:09 - doesn't know how to set environment
19:10 - variables then there's a link to those
19:13 - videos in the description section below
19:15 - on how to do that okay so I'm going to
19:18 - pull up my terminal here and I'm going
19:21 - to pause the video while I add that
19:24 - token to my environment variables and
19:25 - I'll pick it up after I've added that
19:27 - token okay so I went in and I set an
19:30 - environment variable called len√¥tre
19:32 - token to that token that I got from the
19:35 - node so now I can use that to interact
19:38 - with my lono to count through python so
19:41 - now let's go back to my script and I'll
19:42 - show you how this works so let me open
19:44 - the script here so first let's import
19:47 - that 'la note client so to do that up
19:50 - here at the top where we're doing our
19:52 - imports I can say from the node
19:55 - underscore API for import 'la note
20:00 - client and now I'm just going to grab
20:03 - that
20:03 - varmint variable that I just set and
20:06 - I'll just put this under the email
20:08 - address and password so I'll say 'la
20:11 - node underscore token is equal to and
20:15 - we'll just do another OS dot environment
20:19 - but this environment variable
20:22 - I set as 'la node underscore token now
20:25 - one important thing is that you usually
20:26 - need to restart everything after you set
20:29 - an environment variable so that those
20:31 - changes can take effect some people
20:33 - don't do that and then they wonder why
20:35 - they can't see their variable that they
20:36 - just set so if you haven't restarted
20:39 - then it's probably not going to pick up
20:41 - those changes so for example let me
20:43 - comment out everything below here and
20:46 - try to print out my environment variable
20:51 - that I just set so I'm going to print
20:53 - out that whoops that 'la note token and
20:57 - let me try to save that and run it and
21:01 - actually I do get a response there which
21:03 - I shouldn't have I should have restarted
21:06 - this before I started recording this
21:07 - video but this actually isn't the Llano
21:11 - token that we just created this is one
21:13 - that I created earlier whenever I was
21:15 - testing all the stuff for the video so
21:18 - most likely if you haven't restarted
21:20 - then you'll get a nun response there so
21:23 - once I restart this we're going to get
21:25 - the new token so you can see this one is
21:27 - 6 to be 9 5 e so when I restart this so
21:32 - let me restart sublime and open this
21:35 - back up so sublime in the current
21:38 - directory open that back up open my
21:40 - monitor script now let me run this again
21:44 - and we can see that now this is a
21:46 - different token it picked up those
21:47 - changes this one is 8 to b61 blah blah
21:50 - blah blah blah and you're gonna want to
21:51 - do that in your terminal as well I'm not
21:54 - sure let's see if I run this script now
21:57 - with python monitor dot py yeah so I'm
22:00 - still getting that old token with this
22:03 - terminal as well so I would have to open
22:07 - a new terminal and CD into that site
22:12 - monitor and then I would have to
22:13 - activate my virtual environment again so
22:15 - activate monitor underscore
22:17 - env Binh activate and now if I did
22:22 - Python monitor dot py ran that then we
22:26 - get the new token so now let me resize
22:30 - this here and delete this other terminal
22:35 - that we had open okay so now we are
22:38 - getting our correct token value so now
22:41 - I'm going to leave everything commented
22:43 - out below this while I show you how we
22:45 - can restart a low note server through
22:47 - Python and after we get that working
22:49 - then I'll put that logic in the correct
22:51 - place so first let's connect to the node
22:55 - through our client so we can do that I'm
22:58 - going to remove this print statement so
23:00 - I'm going to say client is equal to the
23:02 - node client that we imported right here
23:05 - and we need to create or pass in sorry
23:11 - we need to pass in this len√¥tre
23:14 - token so we're connecting to this Linode
23:18 - client passing in Batlin owed token and
23:21 - now I'm going to print out some
23:23 - information about milah node servers I
23:25 - only have one active server at the
23:27 - moment so we should just see that one
23:29 - here but to do this I'm going to say for
23:31 - the node in client dot 'la note dot
23:37 - instances and within that for loop I'm
23:42 - going to print out the node label and
23:44 - the ID of each instance which I said
23:47 - will just be the one instance for now so
23:50 - I'll say print and I'll use an F string
23:53 - here again whoops an F string and I will
23:56 - print out first the Lynott label then I
24:00 - will do a colon and a space and then I
24:03 - will print out the Leonard
24:05 - I do so let's save that and run it and
24:09 - we can see usually it takes longer than
24:12 - that but we can see that it basically
24:14 - immediately came back with my query MS
24:16 - server and then this is the ID of that
24:18 - server now I'm gonna want to copy that
24:21 - ID so that I can just connect to that
24:23 - single instance in order to reboot it so
24:26 - to do that first I have to import
24:30 - instance up
24:31 - here so we are importing the note client
24:34 - we also want to import instance and now
24:38 - I'm going to copy that ID from the
24:40 - output so let's copy that and now I can
24:44 - connect to the low note with that ID
24:46 - just by saying and I'm going to get rid
24:50 - of my for loop here so we can just say
24:53 - my server is equal to client dot load
24:59 - and we want to load an instance so we're
25:04 - using instance that we imported there
25:06 - and now I'm going to pass in the ID of
25:09 - the instance that we want to connect to
25:11 - so now that I've loaded that particular
25:14 - load I should be able to reboot that
25:16 - machine simply by saying my server dot
25:22 - reboot so let me make this output a
25:25 - little bit smaller here so that we can
25:27 - see a little bit more so now I'm going
25:30 - to run this and I'm going to open up
25:32 - Milan ode account and check that that
25:34 - machine is actually rebooting so I will
25:37 - save that and run it so it should be
25:40 - rebooting that server with that ID so
25:44 - let me open up Milan ode account here go
25:47 - to my dashboard now it doesn't look like
25:49 - it is rebooting yet but let me click on
25:53 - there and this will give me details and
25:55 - we can see that the details here it
25:57 - actually does say that it's rebooting
25:59 - now so that did work in that script so
26:02 - sometimes that can take a bit before
26:04 - that reboot actually gets triggered but
26:07 - if we wait for a bit then we should see
26:09 - it get started okay so now that server
26:13 - is going to reboot and that was
26:15 - triggered through our Python program so
26:18 - that's great the script is working well
26:20 - so far so let me go back to the script
26:23 - here so now let's take all that logic
26:26 - that we use to reboot our machine and
26:28 - move that into our conditional for if
26:31 - our website isn't returning a response
26:34 - code of 200 so I'm going to take just
26:37 - these three lines here and cut those out
26:41 - and now I'm going to uncomment out what
26:44 - we had
26:45 - before where we sent our email and
26:47 - actually I'm not sure at what point this
26:49 - got uninvented here
26:51 - it was probably whenever I checked it to
26:54 - send the email but this should actually
26:55 - be indented here within this context
26:58 - manager so we want to push that here
27:00 - within the width statement okay but
27:02 - after that email is sent let's go down
27:06 - here and we want to backspace to where
27:09 - we are not within that context manager
27:12 - now I'm going to paste in those lines
27:14 - get this indentation correctly here let
27:17 - me just put all of these together since
27:19 - they are logically the same so we're
27:22 - connecting to that low note client
27:24 - loading up the instance and rebooting
27:27 - that server and that is all within the
27:29 - conditional of if our status code is not
27:32 - equal to 200 now if you're wondering how
27:35 - I knew how to use the low note Python
27:37 - library really you just have to take the
27:39 - time to read through the documentation
27:41 - on stuff like that there's a lot more
27:43 - that you can do with that API if you're
27:45 - interested
27:46 - honestly this is basically all that I've
27:48 - used that library for so I'm interested
27:50 - in learning more about it myself
27:52 - okay so now we have a script that should
27:55 - send us an email and restart our server
27:57 - if our site doesn't respond with a 200
28:00 - code so now let's test this out so in
28:03 - order to test this let me change the URL
28:05 - that I'm requesting to a page that won't
28:07 - respond with a 200 response so for
28:10 - example just let me go to a route that
28:13 - doesn't exist and that's going to return
28:15 - a 404 response and since that isn't a
28:18 - 200 response then it should send me an
28:20 - email and then restart my server so I'm
28:23 - just going to go up here and change the
28:25 - route that we're trying to connect to
28:27 - and I'm just going to do a forward slash
28:28 - DNA 4 does not exist so if I run this
28:32 - then we don't get any output here but if
28:36 - I check my email I'm looking at my email
28:39 - here on my phone and that email did come
28:43 - through that said your site is down make
28:45 - sure that the server restarted and is
28:47 - back up so if I go back to Milan ode
28:51 - page here then we can see that this
28:52 - reboot has already started on that
28:54 - machine so it's rebooting again so it
28:57 - does look like our site
28:58 - worked in that sense and we also get 'la
29:00 - note notifications here that tell us
29:03 - when these servers are rebooting so we
29:06 - can see one was five minutes ago and one
29:08 - was a few seconds ago and then four days
29:10 - ago from when I was testing the script
29:13 - okay so now let me go back to our script
29:16 - here now one thing that I could probably
29:20 - add to the script is some feedback or
29:23 - logging so that we can see when events
29:25 - like this are triggered but for now I
29:28 - can just expect an email and can also
29:30 - look at Milan ode to see if it's
29:32 - rebooting okay so now that I know that
29:34 - that works I'm going to set this page
29:36 - back here to a to my home page rather
29:41 - than a page that doesn't exist
29:43 - okay so there's actually one more thing
29:44 - that we need to do with this script here
29:46 - so right now we are sending in the email
29:49 - and restarting the server if we don't
29:53 - get a status code of 200 but sometimes
29:57 - we won't even get a status code at all
30:00 - it's possible that requests not get is
30:02 - going to throw an exception so for
30:05 - example if it times out it's going to
30:07 - throw an exception or if the server is
30:08 - down completely then it's going to throw
30:10 - an exception and we are not handling
30:13 - that right now so what we're gonna do
30:16 - let's put in a try except block to where
30:18 - if there's any exceptions then we go
30:20 - ahead and send this email and restart
30:22 - the server and also if we do get a
30:25 - response code then we'll check if that
30:26 - is a 200 response or not so I think the
30:30 - best thing to do here is to move all of
30:33 - this functionality into a function so
30:36 - that we can run this in multiple
30:38 - scenarios so here at the top of my
30:40 - script underneath my environment
30:42 - variables I'm going to create two
30:44 - different functions here so I'll call
30:46 - one of these let's see notify user
30:50 - something like that and I don't think we
30:53 - need any arguments into this function
30:56 - I'm just going to take all of our email
30:59 - stuff here and I will cut that out and
31:01 - I'm going to put all of that here within
31:04 - this notify user function so now and we
31:09 - could add arguments to this function if
31:11 - we wanted to
31:12 - so for example you know we could put a
31:15 - custom a custom sender and receiver here
31:18 - for the email something like that all of
31:21 - this is just hard coded into this script
31:23 - for my personal example so I'm just
31:25 - gonna leave it as is but if you wanted
31:27 - to customize it and make this you know
31:29 - more customizable then you could add
31:32 - those in here okay so I'm going to call
31:34 - that notify user and then I will create
31:37 - another function here and I will call
31:40 - this reboot server and again I'm just
31:44 - going to take the code from there and
31:48 - put it into this function here so now I
31:53 - can just say when our status code is not
31:57 - equal to 200 we want to notify the user
31:59 - and we want to reboot the server and now
32:03 - that we have those in functions now we
32:06 - can also check if we get an exception
32:08 - and do the same thing if we hit an
32:10 - exception here so I'm going to create a
32:13 - try and accept block here so I'll just
32:15 - do a basic try except now I'm going to
32:18 - copy where we are doing this request and
32:21 - I will paste that into our try block so
32:25 - what we're doing is we are trying this
32:27 - code here and if we hit an exception and
32:30 - I'm just going to leave this as any
32:32 - exception there are different exceptions
32:34 - and you can you know get more in depth
32:37 - with this and more specific if you want
32:39 - but I'm just going to say if we hit any
32:41 - exception then that means that our
32:44 - request wasn't successful so I'm going
32:47 - to want to notify myself and I'm going
32:49 - to go ahead and try to reboot my server
32:51 - anyways so again what we're saying here
32:53 - is we are trying to make this request if
32:55 - we get an exception I want to send that
32:57 - email and reboot the server if that
33:00 - success or if we did get a response then
33:03 - we're checking ok this is the response
33:05 - that we got a 200 response if not then I
33:08 - want you to also send that email and and
33:10 - reboot the server so to test this let me
33:14 - actually log into Milan ode and I will
33:16 - go ahead and just stop apache completely
33:19 - and that should cause us not to get a
33:22 - response at all and then we'll see and
33:24 - that will
33:26 - make an exception and then we'll see if
33:28 - it also sends the email and reboots our
33:30 - server in that case so let me try this
33:32 - out I'm actually SSH into Milan ode
33:35 - machine right here and this is my server
33:38 - and currently I have Apache running here
33:41 - so let me try to just stop Apache so I
33:45 - need to put in my password there now it
33:48 - says stopping web server so I just took
33:51 - down my personal website and now I
33:54 - shouldn't get any response at all so now
33:56 - let's try to run this code again and we
34:01 - don't get any output here oh actually we
34:04 - did get an error here yeah so I know
34:07 - what this is this was a dumb mistake
34:08 - some of you probably caught it before I
34:10 - even did it but if we get an error here
34:14 - then this but our variable here is never
34:18 - even going to be set to begin with so
34:20 - I'm gonna put this up here within my try
34:23 - block as well so now if we get an
34:28 - exception thrown on here then it's going
34:30 - to hop down here and send the email and
34:33 - reboot the server if we didn't get an
34:35 - exception that'll continue on and check
34:37 - the status code and send the email and
34:40 - reboot the server the reason that it
34:43 - threw an error when that was located
34:44 - outside of the try accept block is
34:46 - because if this is an error right here
34:48 - then that never gets set that our
34:51 - variable never gets set so when we were
34:53 - trying to access it down here it didn't
34:55 - know what it was okay so now let me try
34:58 - to save and run that script again now it
35:01 - probably did send that email and it
35:03 - probably did reboot my server because it
35:06 - still hit that exception before it ran
35:07 - into that error so let me check my email
35:12 - here well it really quick yet I can see
35:14 - that my site actually is down and if I
35:17 - go back to Milan ode it may have already
35:20 - restarted actually yes it did it was
35:24 - started two minutes ago so let's run
35:26 - this again and see if this works so I'll
35:30 - run that now we shouldn't get any output
35:33 - and if I check my email now this might
35:38 - actually
35:39 - not be down because when it restarted it
35:42 - probably restarted Apache as well so let
35:46 - me try to log back in to Milan Oh
35:49 - shut that down and try it one more time
35:52 - okay so I paused the video and I signed
35:57 - back in to Milan ode server here and now
36:00 - let me do the same thing again
36:02 - so when it restarted if I run Apache
36:04 - status once I restarted the server it
36:07 - started Apache again so let me stop that
36:10 - okay it stopped and now let's run the
36:14 - script again it's going to hit this
36:16 - exception and send the email okay so run
36:20 - this we don't get any output which is
36:22 - what we expect I'm looking at my phone
36:24 - here and I just got an email that says
36:26 - that my site is down and that the server
36:28 - is restarting so if we open this back up
36:31 - we just got a notification that a few
36:33 - seconds ago that we scheduled a reboot
36:36 - and we can see that the machine is
36:38 - rebooting here and down here I am
36:41 - getting this notification that I just
36:43 - got kicked out of my SSH session and
36:45 - that is because the server is now down
36:48 - but once that reboots then our website
36:53 - will be working so we can see here that
36:55 - my website is down because Apache was
36:58 - stopped and once this finishes rebooting
37:00 - then my site should be up so I'm gonna
37:03 - pause the video and wait for this to
37:05 - finish and then I'll go and try my
37:07 - website again okay so I paused the video
37:09 - there for a second and let the reboot
37:12 - finish and now I'm logged back into
37:15 - Milan ode server here and now if I check
37:18 - the Apache status now it is running so
37:22 - if I go back to my website here and try
37:24 - to reload this then now this loads up
37:28 - just the way it should everything is
37:29 - working nicely so we can see that's a
37:31 - nice feature there that if our Apache
37:36 - even shuts down for any reason
37:38 - whatsoever then it's just going to
37:41 - automatically try to restart so I think
37:44 - that is a pretty nice feature that we
37:46 - added in there okay so now I have a
37:48 - working script that I can run anytime
37:51 - that I want to check the status of my
37:52 - website
37:53 - and we'll perform those actions if there
37:55 - are any issues but what if I want to run
37:58 - this script every ten minutes or so so
38:00 - that this process of checking the
38:01 - website is automated so I don't want to
38:04 - have to actually run this script
38:05 - manually every time I want to check my
38:07 - website the point is that something is
38:10 - monitoring our website for us so in
38:12 - order to do this we're going to need to
38:14 - use some sort of task scheduler now
38:17 - again I am on Mac oops this is I want to
38:22 - go ahead and exit that session there so
38:24 - like I was saying I am on a Mac so the
38:27 - task scheduler used on Mac and Linux is
38:29 - called cron now if you're on Windows
38:31 - then I believe it's actually called task
38:33 - scheduler so you can use the scheduler
38:37 - for your operating system but since I'm
38:40 - on a Mac I'm going to use cron so let's
38:42 - say that we want to run our website
38:44 - check every 10 minutes
38:46 - so first what command do we actually
38:48 - want to run so remember we created a
38:52 - virtual environment for our little
38:54 - project here now when we installed all
38:56 - those packages we installed them in our
38:59 - virtual environment so that is the
39:00 - version of Python that we need to run
39:02 - our script with so that it has access to
39:05 - those specific packages now we have our
39:07 - environment activated now but if we
39:09 - don't have our environment activated
39:11 - then we can simply run our script with
39:13 - the Python executable from that
39:16 - environment so to do this we just need
39:18 - to specify the path to that Python
39:21 - version so on my machine that would look
39:26 - like this so with the environment
39:28 - activated I can say which Python and we
39:30 - can see that it gives us the full path
39:33 - to the Python from that environment that
39:36 - is activated now this is just my home
39:39 - folder here so a short version of this I
39:41 - could just use a tilde and then copy the
39:44 - rest after this and if I run that then
39:47 - we can see that it just runs that
39:49 - version of Python so I can you know
39:51 - import requests and that should work
39:53 - because we have pip installed that
39:57 - inside that environment so that is the
40:00 - Python command that we're going to run
40:02 - and we're also going to want to specify
40:04 - the full path to the script as well
40:07 - since we don't want to rely on it being
40:09 - from a relative direct directory so on
40:12 - my machine the path to that script would
40:14 - be the home folder in site monitor and
40:19 - that is monitor whoops monitor dot py so
40:23 - the entire command if I paste in what I
40:27 - had before whoops let me put the home
40:29 - folder there so this is going to be the
40:31 - entire command that we're going to run
40:33 - every ten minutes so we have the full
40:36 - path to the Python executable for that
40:39 - virtual environment and the full path to
40:42 - the script that we want to run so if I
40:45 - run that then it just ran that script
40:48 - with that version of Python and we can
40:50 - see that that ran very quickly and the
40:52 - reason that it ran very quickly is
40:54 - because it went out to my site and got a
40:55 - 200 response since the site is working
40:58 - and it didn't do any of the emails or
41:01 - restarts or anything like that so
41:03 - hopefully that's what it's going to do
41:05 - most often when it runs is just run very
41:08 - quickly like this okay so I'm going to
41:10 - copy this entire command and that's what
41:13 - I'm going to schedule to run every 10
41:16 - minutes so on my machine I can access
41:20 - cron from the command line by saying
41:22 - crontab - e that's - II for edit and you
41:27 - can see that I don't currently have
41:28 - anything in my crontab right now now by
41:31 - default cron opens up in the vim editor
41:33 - now if you aren't comfortable in them
41:35 - then you can change the editor to Nano
41:38 - or something like that now I felt like
41:41 - I've said this a lot during this video
41:42 - but I'm not going into the details of
41:45 - cron here but I do have a detailed video
41:47 - tutorial on using cron and I'll leave a
41:50 - link to that video in the description
41:51 - section below also if you'd like to
41:53 - learn more about cron in depth but for
41:56 - now let me just write out this cron
41:58 - schedule and then I'll explain exactly
42:00 - what it's doing so in vim if you want to
42:03 - insert something then you have to hit I
42:05 - first and we can see down here that it
42:07 - says insert so now I'm going to type out
42:10 - this schedule so for this schedule I'm
42:12 - going to do an asterisk ford slash tin
42:15 - space asterisks space asterisk space
42:18 - estrus space asterisks
42:20 - so basically the schedule that we have
42:22 - here will run our command every 10
42:25 - minutes on every day of the year so the
42:27 - first value here is what minute we want
42:30 - to execute our command
42:31 - the asterisk forged slash means that we
42:34 - want to run this command every 10
42:36 - minutes now the next value here the
42:38 - second asterisk is the value for the
42:42 - hour
42:43 - so our asterisk is saying that we want
42:46 - to run at every hour the next value is
42:48 - for the day of the month so this is
42:51 - every day of the month the next value is
42:53 - for the month so we set it to every
42:55 - month and the last value here is the day
42:57 - of the week
42:58 - so this is set to run on any day of the
43:00 - week so that's our schedule and this
43:04 - will run a command every 10 minutes
43:07 - so now let's tell it what command we
43:09 - want to run every 10 minutes so I copied
43:11 - that long command from my terminal from
43:13 - before and I'm just going to paste this
43:15 - in here ok and that is our entire cron
43:18 - schedule so now I just want to save this
43:20 - so in vim to save I can just press
43:23 - escape and that takes us out of insert
43:25 - mode and now I can press : WQ 4 whoops
43:30 - WQ 4 right and quit so I will run that
43:33 - it's going to tell me that this wants to
43:36 - do some administration I'll just click
43:38 - OK now it says installing new crontab
43:41 - and if you ever want to list out your
43:42 - crontab schedule then you can say
43:44 - crontab - l and that'll show us all of
43:47 - the commands that we are running and on
43:49 - what schedule okay so now that script
43:52 - should run every 10 minutes so that
43:55 - should be it now it would be nice to
43:57 - have some sort of feedback where we
43:59 - could go and check from time to time to
44:01 - make sure that our script is running so
44:03 - that's another reason why it would be a
44:05 - good idea to add some logging into that
44:07 - script so that we could occasionally
44:09 - check the logs and make sure that
44:11 - everything is running properly you know
44:12 - make sure that it goes out and makes the
44:14 - request and any time it runs into errors
44:17 - or anything like that and there's
44:19 - probably a lot more that we could add to
44:20 - that script as well but I think I'm
44:22 - happy with what I have here for now and
44:24 - if I need to add to it in the future
44:26 - then we can build from there now I will
44:28 - put this script up on github if anyone
44:32 - wanted to follow along but
44:34 - didn't necessarily want to write
44:36 - everything out here so I will have a
44:38 - link to this in github as well and again
44:40 - like I was saying before if you want to
44:42 - write a script like this that monitors
44:43 - one of your websites then you're gonna
44:45 - have to change some of the environment
44:47 - variables here so you're gonna have to
44:49 - have your email username and password to
44:51 - send the email and a token for whatever
44:54 - service you're using I'm using the node
44:56 - but I'm sure you know probably
44:58 - digitalocean and other services have
45:00 - something like this as well okay so I
45:02 - think that is going to do it for this
45:03 - video like I said this video is a bit
45:05 - different than the tutorial set I
45:07 - usually cover we didn't go into as much
45:09 - step-by-step detail here but I get a lot
45:12 - of requests from people who want me to
45:13 - record little scripts like this that are
45:15 - you know quick dirty solutions to some
45:17 - daily problems that I run into so that's
45:20 - really what I was shooting for here but
45:22 - if anyone has any questions about what
45:24 - we covered in this video then feel free
45:25 - to ask in the comment section below and
45:27 - I'll do my best to answer those and if
45:29 - you enjoy these tutorials and would like
45:30 - to support them then there are several
45:31 - ways you can do that the easiest way is
45:33 - to simply like the video and give it a
45:34 - thumbs up and also it's a huge help to
45:36 - share these videos with anyone you think
45:38 - would find them useful and if you have
45:39 - the means you can contribute through
45:40 - patreon and there's a link to that page
45:42 - in the description section below be sure
45:44 - to subscribe for future videos and thank
45:45 - you all for watching
45:57 - you

Cleaned transcript:

hey there how's it going everybody in this video I'm gonna write a quick and easy script that monitors my personal website and sends me an email if it's down for any reason now if the site is down then I'm also going to have it have the script automatically restart my server to see if that fixes the problem now a lot of people have wanted me to make videos on realworld problems that I can solve with programming and this is a strip that I've been needing to write for a while now so my personal website runs on a server that is pretty old at this point and it really just needs to be completely wiped and updated so that it's more stable but it's one of those things that I just haven't had the time to do but with the server in its current state sometimes web processes occasionally quit unexpectedly and cause my website not to load now for those of you who have followed along with either my flask or Django series then don't worry the servers that we set up in that series are completely fine and stable this is just a server that I set up years and years ago that I used to test a lot of different software and development and then I just plot my personal website on there so after all those years of having different configurations and installations it's just not very stable anymore so until I can get around to updating that I'm just gonna write a quick script that occasionally checks my website and if it's not returning a 200 response which means that it was a successful response then I'll just have it send me an email so that I know I need to go fix it now this website is hosted on low note so I also use the node API to automatically restart the server so that it possibly fixes itself before I even get the email so this is going to be a pretty quick and easy script but I thought some of you might find it useful to see me write this up now I'm not gonna go into as much stepbystep detail as to exactly what I'm doing like I do in my other tutorials I'm just going to step through this quickly and give you an idea of how a quick script can help you solve a realworld problem like this so let's go ahead and get started so first of all I'm going to create a directory of everything for this little project so I'm in my home folder within my terminal and I'm going to create a directory called site monitor so I'm gonna say m'kay der site underscore monitor now I'm on a Mac which mostly uses the Linux Linux commands if you're on Windows then you'll have to either do this through your file explorer or use the windows for your command prompt okay so I'm going to CD into that directory that I just created and I'm going to create a virtual environment for this little project now I've been using the V env module in the Python standard library lately instead of virtual Envy and it's pretty simple to use and you don't have to install anything so I can just say Python 3 M de and V and then I'll call this virtual environment Monitor underscore env so I will run that so now I have a new virtual environment called monitor underscore env so now I can activate that so I'll say source monitor E and V /bin board slash activate so that is now activated we can see from the prompt here that it's active and again this source command is for Mac and Linux if you're on Windows then you would do something like this you'd say monitor env back slash scripts back slash activate dot bat or something like that I think that's right but this is on Mac and Linux okay so now I have a fresh environment and I'm going to be using a couple of packages for this script so I'm going to use the request library to check the response from my website and I do have a more indepth video on the request library if you'd like to see how to use this in more detail so I'll leave a link to that video in the description section below and I'm also going to be using the lonoa thon library to interact with my server so I have this open here in the browser and let me go to that documentation here so this is the low note Python library that allows you to interact with your low notes through Python and we'll see more about this later in the tutorial so now we want to install both of those packages and we can do that through pip so once we've got the environment activated let's pip install these packages so first I'll install the request library so I'll say pip install requests and this one is usually pretty quick okay that's done and also I want to install the Lund ode Python library that I can use to talk to my low note servers through Python so to do that I can say pip install and that is the node underscore API for now if you want to know how I got that it's here in their documentation pip install the node API for so let me run that now with this lonoa thawne library we're gonna need a personal access token in order to interact with our len√¥tre count and that's good because it's a layer of security that makes us prove who we are before doing anything with our servers so but let's go ahead and continue on with the email script for now and I'll grab that personal access token once we're ready to interact with the low note server okay so now that we have those packages installed let's actually write the scrip to monitor the website so I'm still here within my directory for this project so I'm going to open this up in sublime so I'm just going to do that with su BL and then dot for the current directory now I have my commandline shortcut set up to open sublime with that su BL command if you don't have that then you can just open this directory and your text editor like you normally would okay so now I'm going to create a new script in this directory so new file and I'm going to call this monitor dot py so now we have an empty Python script here okay so first I'm going to import the request library okay so now we're going to use request to make a request to my home page so we can do that by saying R is equal to request dot get and this needs to be in a string here so this is HTTP forge slashes query MS dotcom and I'm going to set a timeout there equal to let's say five seconds now you want to set a timeout when doing something like this because if your site isn't responding and it gets hung up then by default the request library will just wait indefinitely so with a timeout set it will only wait that number of seconds that you specified before giving up and throwing an exception so if my site doesn't respond in five seconds then I'll just assume that something's up okay so now I'm going to check to make sure that the response of that request has a status code of 200 so 200 response is a successful response and if the response is an 200 response then I'll want to send myself an email and restart my server so I'm gonna say if our dot status whoops let me spell that right status underscore code is not equal to 200 now the response object also has an attribute called okay which is set to true if the response is less than 400 so I could have also written that like this if not our dot okay but that okay value would be true for any response that isn't you know a 400 or 500 error and I know for sure that I'm expecting a 200 response so that's what I'm checking for specifically so I'm not using that okay value that you may have seen in other tutorials okay so if the response isn't a 200 response then first I want to send myself an email letting me know that something is up so to do this we're going to need to use a mail server so I'm going to use my gmail account but you can use whatever you'd like so whatever you use you'll have to look up the instructions online for how to connect to that server so it's pretty simple for Gmail you do need to let Gmail know that you're going to be connecting to your account through a program and I have the instructions pulled up here in the browser as well so if you don't have to factor authentication then you can just go to your Google settings and allow connection through less secure apps so this is at my account Google comm ford slash less secure apps and I'll put links to these in the description sections below but I do have two factor authentication on my machine so in order to connect to your account while you have twofactor authentication then you're going to need to create a password specifically for our app and you can do that through this account here my account Google comm forward slash app passwords and I will put a link to this URL in the description section below as well and you can see here that in my app passwords I created one called Python tests that I use for connecting through Python applications now like I said I'll put a link in the description section below to both of these Google pages if you want to know how to set this up for yourself so once you have your Google security settings in order then we connect to the Google Mail server with the builtin SMTP Lib module in Python so first I'm going to import that at the top of our script so I'll pull this back up and right above request I'm going to say import SMTP Lib and save that and now to set this up to send an email within my conditional here I'm going to say with SMTP Lib dot SMTP and the mail server here is going to be smtp.gmail.com and for the second argument we pass in the port so this is going to be 587 and this is on their documentation online so I don't actually memorize this stuff I have references to this how this works okay so now we have this SMTP connection to their mail server so now we're gonna say SMTP now the e hlo method just identifies ourselves with the mail server that we're using and now we want to encrypt our traffic so to do that I can say SMTP what not SMTP Lib SMTP dot start TLS and that's going to be a method and then we need to rerun that eh ello method again to re identify ourselves as an encrypted connection so I would just copy that and paste it in there okay and now that we're encrypted we can login to our mail server so I'm going to come down here and say SMTP dot in and now at this point we can put in our email address and password now you can put this directly in the script if you'd like but I think it's a good habit never to put sensitive information like this into a script directly I think that you should always put sensitive information like this either in a configuration file somewhere that isn't committed to source code or in environment variables so for this video I've put my credentials inside environment variables so that I don't have to write them out here on video for everyone to see now if you've never used environment variables to hide information like this then I do have a separate video to show how to do that for Mac Linux and Windows so I'll leave a link to those videos in the description section below if anyone would like to see how that's done but I've already put those environment variables created with that information so I can load those in by importing the OS module so up here at the top I'm going to say import OS and at the top of my file here I'm going to create some variables using those environment variables so I'm going to create one called email address and I'm going to set that equal to Oh s dot environment that's how you get environment variables and I created these environment variables and I called them email underscore user and now let me create another variable here called email underscore password and the environment variable for that was email underscore Pass so again you're going to have to create your own environment variables called you know for your email address and for your email password or you can put those in a configuration variable file somewhere any way that you want to do that okay so now I'm going to login to the gmail server using those credentials so that's what we pass in here to SMTP in so first I'm going to pass in the email address then I'm gonna pass in the email password okay so now let's create a simple message for our email so I'm just going to create a simple plain text email in this video and I'll be doing a more advanced email video in the near future where we cover attachments and HTML messages and things like that but for this video we just want text so first I'm going to create a subject line since this will be an email about my website being down I'm gonna make it something that will catch my eye so I will just say subject is equal to and I'll just do all caps your site is down with an exclamation point there and for the body of the website I'm just going to put something here like you know make sure the server restarted and it is back up okay and now I'm going to combine at this and body into a single message so when you're constructing a plaintext email from scratch you need to add the subject as a header and then have a couple of blank lines and then put the body of the message so I'm going to do this using an EPS tring so I will just say msg is equal to and to do an F string you do F and then your string so I'll say subject and then pass in that subject and then I'll do a couple of blank lines here and now I will pass in the body and again I'm not going into as much stepbystep detail in this video but if you've never used F strings before I think that they're really nice to work with and I have any more indepth video on that topic and I'll leave a link to that in the description section below if you'd like to learn more about those okay so now I just have to send this email now that we've created this message so I can do that here by using this format I can say sm t p dot send mail and then we're going to want to send this to the sender and the receiver and then the message so we want to put the sender here and the receiver here so for the sender we're going to want this to be the email address that we logged in as now you can put a different value there but I wouldn't recommend it you don't want to you know spoof what email this is coming from because it's against the rules first of all for imitating someone and second of all it's probably just gonna wind up in spam I mean they they have things in place that catch this kind of stuff okay so we're putting the sender as the email address that we logged in as and the receiver I'm just putting as myself also so I could put the email address here as well but just to be more clear let me act like I'm actually sending this to someone different but so I'm gonna put in Cory M Schaefer at gmail.com which is my email address but that is actually the same as what this email address is as well okay so that should send our email if our site is down now we can test this by commenting out the if statement and onion denting our email section so if I do that let me just comment out the if statement for now and unand dint the email section here so there's no conditional that won't send this email so if I go ahead and run this code then we don't have any output here but if I wait a second then I should get an email that comes through so I have my gmail pulled up here on my phone and I can see that I did just get an email that came through with the message that we specified so that works well okay so now let's set this back up to how it was within the with statement so I will indent that back and uncomment out the conditional there now also I should mention that in sublime whenever you run code you have to have a build system and I have my build system set to my virtual environment that I created at the beginning of this video so that is why that worked if you don't have your your build system set up to your virtual environment then you'll have to set that in sublime but if that's too much of a hassle for you then you can always come back here to your terminal and just run that manually so you could say Python monitor dot and whoops monitor dot py and run the script that way okay so let me go back to the script here okay so now we've sent ourselves an email when the site is not responding with a 200 status code but now I'm going to use the Llano di thon library to reboot my low note server so in order to interact with milah note account programmatically I'm going to need to create an API token through my account so I have my len√¥tre open here let me exit out of that okay so I've got my note account open here so in order to create an API token we need to first go to our profile so to get to the profile I'm going to click on my profile picture up here at the top right and then I can go to my profile so within here we can click on the tab that says API tokens so I'm going to click on that and we can see here that we have a section for personal access tokens now I don't have any here right now but we can create by clicking add a personal access token so I will create one and for the label of this token I'll just call this len√¥tre Python token and now I'm going to set the expiration date to never if you want this to be you know more secure and have expiration dates then you can set those up however you want and I'm going to give this readwrite access to everything on my account so now if I scroll down here I can submit that token and now it's going to pop up with the API access token so I'm going to copy this now this token actually won't be visible anymore after I close this so you want to be sure that you copy this down or write it down somewhere so I'm going to click OK here and now we have our a node python token here within our personal access tokens now don't worry I'm going to delete this token after the video and create a new one so that no one can access my account using this token that we saw in this video but I'll use this one for now okay so at this point I'm going to create another environment variable for this API token so I'm not going to show that here on video since my email credentials are in there also but like I said if anyone doesn't know how to set environment variables then there's a link to those videos in the description section below on how to do that okay so I'm going to pull up my terminal here and I'm going to pause the video while I add that token to my environment variables and I'll pick it up after I've added that token okay so I went in and I set an environment variable called len√¥tre token to that token that I got from the node so now I can use that to interact with my lono to count through python so now let's go back to my script and I'll show you how this works so let me open the script here so first let's import that 'la note client so to do that up here at the top where we're doing our imports I can say from the node underscore API for import 'la note client and now I'm just going to grab that varmint variable that I just set and I'll just put this under the email address and password so I'll say 'la node underscore token is equal to and we'll just do another OS dot environment but this environment variable I set as 'la node underscore token now one important thing is that you usually need to restart everything after you set an environment variable so that those changes can take effect some people don't do that and then they wonder why they can't see their variable that they just set so if you haven't restarted then it's probably not going to pick up those changes so for example let me comment out everything below here and try to print out my environment variable that I just set so I'm going to print out that whoops that 'la note token and let me try to save that and run it and actually I do get a response there which I shouldn't have I should have restarted this before I started recording this video but this actually isn't the Llano token that we just created this is one that I created earlier whenever I was testing all the stuff for the video so most likely if you haven't restarted then you'll get a nun response there so once I restart this we're going to get the new token so you can see this one is 6 to be 9 5 e so when I restart this so let me restart sublime and open this back up so sublime in the current directory open that back up open my monitor script now let me run this again and we can see that now this is a different token it picked up those changes this one is 8 to b61 blah blah blah blah blah and you're gonna want to do that in your terminal as well I'm not sure let's see if I run this script now with python monitor dot py yeah so I'm still getting that old token with this terminal as well so I would have to open a new terminal and CD into that site monitor and then I would have to activate my virtual environment again so activate monitor underscore env Binh activate and now if I did Python monitor dot py ran that then we get the new token so now let me resize this here and delete this other terminal that we had open okay so now we are getting our correct token value so now I'm going to leave everything commented out below this while I show you how we can restart a low note server through Python and after we get that working then I'll put that logic in the correct place so first let's connect to the node through our client so we can do that I'm going to remove this print statement so I'm going to say client is equal to the node client that we imported right here and we need to create or pass in sorry we need to pass in this len√¥tre token so we're connecting to this Linode client passing in Batlin owed token and now I'm going to print out some information about milah node servers I only have one active server at the moment so we should just see that one here but to do this I'm going to say for the node in client dot 'la note dot instances and within that for loop I'm going to print out the node label and the ID of each instance which I said will just be the one instance for now so I'll say print and I'll use an F string here again whoops an F string and I will print out first the Lynott label then I will do a colon and a space and then I will print out the Leonard I do so let's save that and run it and we can see usually it takes longer than that but we can see that it basically immediately came back with my query MS server and then this is the ID of that server now I'm gonna want to copy that ID so that I can just connect to that single instance in order to reboot it so to do that first I have to import instance up here so we are importing the note client we also want to import instance and now I'm going to copy that ID from the output so let's copy that and now I can connect to the low note with that ID just by saying and I'm going to get rid of my for loop here so we can just say my server is equal to client dot load and we want to load an instance so we're using instance that we imported there and now I'm going to pass in the ID of the instance that we want to connect to so now that I've loaded that particular load I should be able to reboot that machine simply by saying my server dot reboot so let me make this output a little bit smaller here so that we can see a little bit more so now I'm going to run this and I'm going to open up Milan ode account and check that that machine is actually rebooting so I will save that and run it so it should be rebooting that server with that ID so let me open up Milan ode account here go to my dashboard now it doesn't look like it is rebooting yet but let me click on there and this will give me details and we can see that the details here it actually does say that it's rebooting now so that did work in that script so sometimes that can take a bit before that reboot actually gets triggered but if we wait for a bit then we should see it get started okay so now that server is going to reboot and that was triggered through our Python program so that's great the script is working well so far so let me go back to the script here so now let's take all that logic that we use to reboot our machine and move that into our conditional for if our website isn't returning a response code of 200 so I'm going to take just these three lines here and cut those out and now I'm going to uncomment out what we had before where we sent our email and actually I'm not sure at what point this got uninvented here it was probably whenever I checked it to send the email but this should actually be indented here within this context manager so we want to push that here within the width statement okay but after that email is sent let's go down here and we want to backspace to where we are not within that context manager now I'm going to paste in those lines get this indentation correctly here let me just put all of these together since they are logically the same so we're connecting to that low note client loading up the instance and rebooting that server and that is all within the conditional of if our status code is not equal to 200 now if you're wondering how I knew how to use the low note Python library really you just have to take the time to read through the documentation on stuff like that there's a lot more that you can do with that API if you're interested honestly this is basically all that I've used that library for so I'm interested in learning more about it myself okay so now we have a script that should send us an email and restart our server if our site doesn't respond with a 200 code so now let's test this out so in order to test this let me change the URL that I'm requesting to a page that won't respond with a 200 response so for example just let me go to a route that doesn't exist and that's going to return a 404 response and since that isn't a 200 response then it should send me an email and then restart my server so I'm just going to go up here and change the route that we're trying to connect to and I'm just going to do a forward slash DNA 4 does not exist so if I run this then we don't get any output here but if I check my email I'm looking at my email here on my phone and that email did come through that said your site is down make sure that the server restarted and is back up so if I go back to Milan ode page here then we can see that this reboot has already started on that machine so it's rebooting again so it does look like our site worked in that sense and we also get 'la note notifications here that tell us when these servers are rebooting so we can see one was five minutes ago and one was a few seconds ago and then four days ago from when I was testing the script okay so now let me go back to our script here now one thing that I could probably add to the script is some feedback or logging so that we can see when events like this are triggered but for now I can just expect an email and can also look at Milan ode to see if it's rebooting okay so now that I know that that works I'm going to set this page back here to a to my home page rather than a page that doesn't exist okay so there's actually one more thing that we need to do with this script here so right now we are sending in the email and restarting the server if we don't get a status code of 200 but sometimes we won't even get a status code at all it's possible that requests not get is going to throw an exception so for example if it times out it's going to throw an exception or if the server is down completely then it's going to throw an exception and we are not handling that right now so what we're gonna do let's put in a try except block to where if there's any exceptions then we go ahead and send this email and restart the server and also if we do get a response code then we'll check if that is a 200 response or not so I think the best thing to do here is to move all of this functionality into a function so that we can run this in multiple scenarios so here at the top of my script underneath my environment variables I'm going to create two different functions here so I'll call one of these let's see notify user something like that and I don't think we need any arguments into this function I'm just going to take all of our email stuff here and I will cut that out and I'm going to put all of that here within this notify user function so now and we could add arguments to this function if we wanted to so for example you know we could put a custom a custom sender and receiver here for the email something like that all of this is just hard coded into this script for my personal example so I'm just gonna leave it as is but if you wanted to customize it and make this you know more customizable then you could add those in here okay so I'm going to call that notify user and then I will create another function here and I will call this reboot server and again I'm just going to take the code from there and put it into this function here so now I can just say when our status code is not equal to 200 we want to notify the user and we want to reboot the server and now that we have those in functions now we can also check if we get an exception and do the same thing if we hit an exception here so I'm going to create a try and accept block here so I'll just do a basic try except now I'm going to copy where we are doing this request and I will paste that into our try block so what we're doing is we are trying this code here and if we hit an exception and I'm just going to leave this as any exception there are different exceptions and you can you know get more in depth with this and more specific if you want but I'm just going to say if we hit any exception then that means that our request wasn't successful so I'm going to want to notify myself and I'm going to go ahead and try to reboot my server anyways so again what we're saying here is we are trying to make this request if we get an exception I want to send that email and reboot the server if that success or if we did get a response then we're checking ok this is the response that we got a 200 response if not then I want you to also send that email and and reboot the server so to test this let me actually log into Milan ode and I will go ahead and just stop apache completely and that should cause us not to get a response at all and then we'll see and that will make an exception and then we'll see if it also sends the email and reboots our server in that case so let me try this out I'm actually SSH into Milan ode machine right here and this is my server and currently I have Apache running here so let me try to just stop Apache so I need to put in my password there now it says stopping web server so I just took down my personal website and now I shouldn't get any response at all so now let's try to run this code again and we don't get any output here oh actually we did get an error here yeah so I know what this is this was a dumb mistake some of you probably caught it before I even did it but if we get an error here then this but our variable here is never even going to be set to begin with so I'm gonna put this up here within my try block as well so now if we get an exception thrown on here then it's going to hop down here and send the email and reboot the server if we didn't get an exception that'll continue on and check the status code and send the email and reboot the server the reason that it threw an error when that was located outside of the try accept block is because if this is an error right here then that never gets set that our variable never gets set so when we were trying to access it down here it didn't know what it was okay so now let me try to save and run that script again now it probably did send that email and it probably did reboot my server because it still hit that exception before it ran into that error so let me check my email here well it really quick yet I can see that my site actually is down and if I go back to Milan ode it may have already restarted actually yes it did it was started two minutes ago so let's run this again and see if this works so I'll run that now we shouldn't get any output and if I check my email now this might actually not be down because when it restarted it probably restarted Apache as well so let me try to log back in to Milan Oh shut that down and try it one more time okay so I paused the video and I signed back in to Milan ode server here and now let me do the same thing again so when it restarted if I run Apache status once I restarted the server it started Apache again so let me stop that okay it stopped and now let's run the script again it's going to hit this exception and send the email okay so run this we don't get any output which is what we expect I'm looking at my phone here and I just got an email that says that my site is down and that the server is restarting so if we open this back up we just got a notification that a few seconds ago that we scheduled a reboot and we can see that the machine is rebooting here and down here I am getting this notification that I just got kicked out of my SSH session and that is because the server is now down but once that reboots then our website will be working so we can see here that my website is down because Apache was stopped and once this finishes rebooting then my site should be up so I'm gonna pause the video and wait for this to finish and then I'll go and try my website again okay so I paused the video there for a second and let the reboot finish and now I'm logged back into Milan ode server here and now if I check the Apache status now it is running so if I go back to my website here and try to reload this then now this loads up just the way it should everything is working nicely so we can see that's a nice feature there that if our Apache even shuts down for any reason whatsoever then it's just going to automatically try to restart so I think that is a pretty nice feature that we added in there okay so now I have a working script that I can run anytime that I want to check the status of my website and we'll perform those actions if there are any issues but what if I want to run this script every ten minutes or so so that this process of checking the website is automated so I don't want to have to actually run this script manually every time I want to check my website the point is that something is monitoring our website for us so in order to do this we're going to need to use some sort of task scheduler now again I am on Mac oops this is I want to go ahead and exit that session there so like I was saying I am on a Mac so the task scheduler used on Mac and Linux is called cron now if you're on Windows then I believe it's actually called task scheduler so you can use the scheduler for your operating system but since I'm on a Mac I'm going to use cron so let's say that we want to run our website check every 10 minutes so first what command do we actually want to run so remember we created a virtual environment for our little project here now when we installed all those packages we installed them in our virtual environment so that is the version of Python that we need to run our script with so that it has access to those specific packages now we have our environment activated now but if we don't have our environment activated then we can simply run our script with the Python executable from that environment so to do this we just need to specify the path to that Python version so on my machine that would look like this so with the environment activated I can say which Python and we can see that it gives us the full path to the Python from that environment that is activated now this is just my home folder here so a short version of this I could just use a tilde and then copy the rest after this and if I run that then we can see that it just runs that version of Python so I can you know import requests and that should work because we have pip installed that inside that environment so that is the Python command that we're going to run and we're also going to want to specify the full path to the script as well since we don't want to rely on it being from a relative direct directory so on my machine the path to that script would be the home folder in site monitor and that is monitor whoops monitor dot py so the entire command if I paste in what I had before whoops let me put the home folder there so this is going to be the entire command that we're going to run every ten minutes so we have the full path to the Python executable for that virtual environment and the full path to the script that we want to run so if I run that then it just ran that script with that version of Python and we can see that that ran very quickly and the reason that it ran very quickly is because it went out to my site and got a 200 response since the site is working and it didn't do any of the emails or restarts or anything like that so hopefully that's what it's going to do most often when it runs is just run very quickly like this okay so I'm going to copy this entire command and that's what I'm going to schedule to run every 10 minutes so on my machine I can access cron from the command line by saying crontab e that's II for edit and you can see that I don't currently have anything in my crontab right now now by default cron opens up in the vim editor now if you aren't comfortable in them then you can change the editor to Nano or something like that now I felt like I've said this a lot during this video but I'm not going into the details of cron here but I do have a detailed video tutorial on using cron and I'll leave a link to that video in the description section below also if you'd like to learn more about cron in depth but for now let me just write out this cron schedule and then I'll explain exactly what it's doing so in vim if you want to insert something then you have to hit I first and we can see down here that it says insert so now I'm going to type out this schedule so for this schedule I'm going to do an asterisk ford slash tin space asterisks space asterisk space estrus space asterisks so basically the schedule that we have here will run our command every 10 minutes on every day of the year so the first value here is what minute we want to execute our command the asterisk forged slash means that we want to run this command every 10 minutes now the next value here the second asterisk is the value for the hour so our asterisk is saying that we want to run at every hour the next value is for the day of the month so this is every day of the month the next value is for the month so we set it to every month and the last value here is the day of the week so this is set to run on any day of the week so that's our schedule and this will run a command every 10 minutes so now let's tell it what command we want to run every 10 minutes so I copied that long command from my terminal from before and I'm just going to paste this in here ok and that is our entire cron schedule so now I just want to save this so in vim to save I can just press escape and that takes us out of insert mode and now I can press WQ 4 whoops WQ 4 right and quit so I will run that it's going to tell me that this wants to do some administration I'll just click OK now it says installing new crontab and if you ever want to list out your crontab schedule then you can say crontab l and that'll show us all of the commands that we are running and on what schedule okay so now that script should run every 10 minutes so that should be it now it would be nice to have some sort of feedback where we could go and check from time to time to make sure that our script is running so that's another reason why it would be a good idea to add some logging into that script so that we could occasionally check the logs and make sure that everything is running properly you know make sure that it goes out and makes the request and any time it runs into errors or anything like that and there's probably a lot more that we could add to that script as well but I think I'm happy with what I have here for now and if I need to add to it in the future then we can build from there now I will put this script up on github if anyone wanted to follow along but didn't necessarily want to write everything out here so I will have a link to this in github as well and again like I was saying before if you want to write a script like this that monitors one of your websites then you're gonna have to change some of the environment variables here so you're gonna have to have your email username and password to send the email and a token for whatever service you're using I'm using the node but I'm sure you know probably digitalocean and other services have something like this as well okay so I think that is going to do it for this video like I said this video is a bit different than the tutorial set I usually cover we didn't go into as much stepbystep detail here but I get a lot of requests from people who want me to record little scripts like this that are you know quick dirty solutions to some daily problems that I run into so that's really what I was shooting for here but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest way is to simply like the video and give it a thumbs up and also it's a huge help to share these videos with anyone you think would find them useful and if you have the means you can contribute through patreon and there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching you
