With timestamps:

00:00 - hey how's it going everybody in this
00:01 - programming terms video we're going to
00:03 - be taking a look at the difference
00:05 - between combinations and permutations
00:08 - now combinations and permutations aren't
00:11 - necessarily just specific to programming
00:13 - terms they're actually more mathematical
00:15 - terms but they come up so often in
00:19 - computer science problems that I think
00:21 - it's important for programmers to know
00:23 - the difference between these two so what
00:25 - is the difference between combinations
00:26 - and permutations
00:27 - well a combination is all the different
00:31 - ways in which you can group something
00:32 - where the order does not matter and
00:35 - permutations are all the different ways
00:38 - in which you can group some values in
00:40 - which the order does matter so I think
00:42 - instead of trying to explain it in words
00:45 - I think the best way will be to take a
00:47 - look at a programming example here now
00:50 - I'm going to be using Python for this
00:51 - example but just like my other
00:53 - programming terms videos it's not the
00:55 - language that matters it's the concept
00:58 - that you take away from it so no matter
01:00 - what language you decide to use there
01:03 - will be a library available to you which
01:06 - gives you access to combinations and
01:07 - permutations you're not going to have to
01:09 - write something like this on your own so
01:11 - in Python it's this itertools module and
01:14 - you can see here that the itertools
01:16 - module gives us access to combinations
01:18 - here and permutations here so let's go
01:21 - ahead and get started you can see that I
01:23 - have a list here of 1 2 3 so first we're
01:27 - going to look at combinations so you can
01:29 - see here that I am taking all the
01:31 - combinations of my list and I'm seeing
01:35 - how many different groups of 3 there are
01:37 - where the order does not matter so
01:39 - remember in combinations the order does
01:42 - not matter so then I'm taking all those
01:44 - different groups from the combinations
01:46 - and printing out C so if I run this you
01:49 - can already see down here at the bottom
01:51 - that the only group of that we got from
01:54 - these combinations is 1 2 3 now the
01:57 - reason for that is because this is
02:01 - already a group of 3 so there's no other
02:05 - way that we can arrange this so 3 2 1 is
02:08 - the same combination as 1 2 3 it's the
02:12 - same group of values
02:14 - because the order does not matter so to
02:17 - kind of drive this point home let's
02:19 - change this to two values here and now
02:22 - if I run this code you can see that the
02:25 - different combinations here are 1 2 1 3
02:28 - and 2 3 so there are 3 different groups
02:32 - of 2 that we can grab from this list now
02:35 - you'll notice that we don't have 2 1 3 1
02:40 - & 3 2 also because like I said before
02:43 - the order doesn't matter and when the
02:45 - order does matter that is permutations
02:48 - so let's take a look at this exact same
02:51 - example using groups of 2 let me change
02:54 - this to a 2 here and now we are taking
02:57 - all the permutations of the groups of
02:59 - two and then looping through that and
03:01 - printing those out so if I run that and
03:04 - you can see that we have 1 2 1 3 & 2 1
03:08 - just like we did before but now we also
03:10 - have the different orderings of this so
03:13 - we have 2 3 3 1 & 3 2 so you can see
03:17 - here in the list of our output that we
03:19 - have 1 2 & 2 1 now if we were to use
03:22 - combinations those would be seen as the
03:25 - same combination because 1 2 & 2 1 is
03:29 - the same group and if the order doesn't
03:30 - matter then it's only going to give you
03:33 - 1 2 or 2 1 but not both ok so why is
03:37 - this important when would you ever use
03:38 - these in a programming problem well I've
03:41 - come up with a couple of examples here
03:43 - that kind of shows when combinations
03:46 - would be appropriate and when
03:47 - permutations would be appropriate now
03:49 - again if you don't know what's going on
03:51 - within the code here then don't worry
03:54 - about what's going on in the language so
03:55 - much but just rather the concept that
03:58 - the examples are trying to get across so
04:01 - up at the top here I have a list of 1 2
04:03 - 3 4 5 6 and then I'm taking all the
04:06 - different combinations of that list and
04:09 - I'm taking all the different
04:10 - combinations of groups of 3 and then I'm
04:13 - also taking all the permutations of
04:16 - groups of 3 from that list of 6 values
04:19 - now an example problem of when
04:22 - combinations would be appropriate is if
04:25 - someone asked you the
04:27 - question okay how many different groups
04:29 - of three and you take from this list
04:32 - that are equal to ten so right here I'm
04:36 - going to print out all the results
04:40 - within the combinations if the sum of
04:43 - those results is equal to ten so let me
04:46 - go ahead and run this and you can see
04:48 - that we got three different results here
04:50 - we got one three six which if you add
04:53 - all those up is equal to ten one four
04:55 - five and two three five
04:57 - now combinations is appropriate here
05:00 - because we're just taking the sum of
05:03 - these values so we only want to know
05:05 - what values add up to ten so for example
05:09 - here 1 3 6
05:11 - we wouldn't also want the result 6 3 1
05:14 - because both of those add up to 10 and
05:17 - it's the same values so just to show you
05:19 - that example let me replace combinations
05:22 - here with permutations and let me print
05:25 - out all the permutations that add up to
05:28 - 10
05:28 - so if I run this code you can see that
05:31 - we get a lot more values here and that
05:33 - we also have 1 3 6 which add up to 10
05:36 - and 6 3 1 but most likely the way that
05:39 - that question was worded it's better to
05:42 - use combinations because we only want
05:44 - the groups of 3 to add up to 10 and the
05:48 - order for us does not matter so now
05:50 - let's take an exact and example of a
05:53 - problem where the order would matter now
05:56 - this is where combinations wouldn't be
05:59 - appropriate but permutations would be
06:02 - appropriate so in this example here I'm
06:04 - just gonna make a very simple word
06:08 - matching game
06:09 - to where we can see so we have a sample
06:11 - word here and now I'm gonna see if any
06:14 - arrangement of these letters is equal to
06:18 - this word so what I'm going to do is I'm
06:21 - going to take all the combinations of
06:23 - these letters I also get all the
06:26 - permutations of these letters so first
06:28 - let me show you why combinations
06:30 - wouldn't be appropriate in this example
06:32 - so I'm going to replace that with
06:34 - combinations and for now I'm just going
06:36 - to comment that out and I'm just going
06:39 - to print all
06:40 - different combinations here so if I run
06:43 - this code you can see that we only get
06:46 - the one combination of these six letters
06:48 - now you can see if I comment out this
06:51 - print statement and then uncomment the
06:54 - working code here and run it you can see
06:57 - that it says that it's no match but this
06:59 - should be a match because there is a way
07:01 - to rearrange these letters that equals
07:03 - this word here so instead let's try this
07:06 - with permutations so again let me
07:09 - comment out this code here and just
07:11 - print out all of these values so you can
07:14 - see that the permutations all the
07:16 - different rearrangements of these
07:17 - letters is a lot larger than the
07:21 - combinations of these letters so you can
07:24 - see how many there are here so if you do
07:27 - do a problem coding problem with
07:29 - permutations you want to be careful
07:31 - because if I was to add more and more
07:34 - letters here and you take the
07:35 - permutations of more and more values
07:37 - those can greatly increase very very
07:42 - quickly and you could be using up a lot
07:45 - of computing power so just keep that in
07:46 - mind when working with permutations but
07:49 - you can kind of see what's going on here
07:50 - if we look at the results then there's
07:52 - going to be a permutation of this word
07:56 - that's going to give us the correct
07:58 - value so you can see here that we have
08:01 - this output right here is equal to our
08:04 - words so if I uncomment out this print
08:08 - statement and then uncomment the code
08:11 - here what I'm going to do is just join
08:13 - that result together and see if it's
08:15 - equal to our sample word and print match
08:18 - if it is so if I run this code you can
08:21 - see that we got a match now both of
08:23 - these examples that I just used could
08:25 - probably be written to be more efficient
08:28 - but really I just wanted to show you a
08:31 - sample problem where combinations would
08:34 - be appropriate and permutations wouldn't
08:37 - be appropriate and another example of
08:39 - where permutations would be appropriate
08:40 - but not combinations so hopefully after
08:43 - this video you can kind of see the
08:45 - difference between these two and how you
08:48 - would use them whenever you're writing
08:50 - code so that about does it for this
08:52 - video hopefully that cleared up
08:54 - any confusion between the difference
08:56 - between combinations and permutations
08:57 - but if anything wasn't clear if you have
08:59 - any questions then just ask in the
09:01 - comment section below
09:02 - be sure to subscribe for future
09:04 - programming videos and thank you all for
09:06 - watching

Cleaned transcript:

hey how's it going everybody in this programming terms video we're going to be taking a look at the difference between combinations and permutations now combinations and permutations aren't necessarily just specific to programming terms they're actually more mathematical terms but they come up so often in computer science problems that I think it's important for programmers to know the difference between these two so what is the difference between combinations and permutations well a combination is all the different ways in which you can group something where the order does not matter and permutations are all the different ways in which you can group some values in which the order does matter so I think instead of trying to explain it in words I think the best way will be to take a look at a programming example here now I'm going to be using Python for this example but just like my other programming terms videos it's not the language that matters it's the concept that you take away from it so no matter what language you decide to use there will be a library available to you which gives you access to combinations and permutations you're not going to have to write something like this on your own so in Python it's this itertools module and you can see here that the itertools module gives us access to combinations here and permutations here so let's go ahead and get started you can see that I have a list here of 1 2 3 so first we're going to look at combinations so you can see here that I am taking all the combinations of my list and I'm seeing how many different groups of 3 there are where the order does not matter so remember in combinations the order does not matter so then I'm taking all those different groups from the combinations and printing out C so if I run this you can already see down here at the bottom that the only group of that we got from these combinations is 1 2 3 now the reason for that is because this is already a group of 3 so there's no other way that we can arrange this so 3 2 1 is the same combination as 1 2 3 it's the same group of values because the order does not matter so to kind of drive this point home let's change this to two values here and now if I run this code you can see that the different combinations here are 1 2 1 3 and 2 3 so there are 3 different groups of 2 that we can grab from this list now you'll notice that we don't have 2 1 3 1 & 3 2 also because like I said before the order doesn't matter and when the order does matter that is permutations so let's take a look at this exact same example using groups of 2 let me change this to a 2 here and now we are taking all the permutations of the groups of two and then looping through that and printing those out so if I run that and you can see that we have 1 2 1 3 & 2 1 just like we did before but now we also have the different orderings of this so we have 2 3 3 1 & 3 2 so you can see here in the list of our output that we have 1 2 & 2 1 now if we were to use combinations those would be seen as the same combination because 1 2 & 2 1 is the same group and if the order doesn't matter then it's only going to give you 1 2 or 2 1 but not both ok so why is this important when would you ever use these in a programming problem well I've come up with a couple of examples here that kind of shows when combinations would be appropriate and when permutations would be appropriate now again if you don't know what's going on within the code here then don't worry about what's going on in the language so much but just rather the concept that the examples are trying to get across so up at the top here I have a list of 1 2 3 4 5 6 and then I'm taking all the different combinations of that list and I'm taking all the different combinations of groups of 3 and then I'm also taking all the permutations of groups of 3 from that list of 6 values now an example problem of when combinations would be appropriate is if someone asked you the question okay how many different groups of three and you take from this list that are equal to ten so right here I'm going to print out all the results within the combinations if the sum of those results is equal to ten so let me go ahead and run this and you can see that we got three different results here we got one three six which if you add all those up is equal to ten one four five and two three five now combinations is appropriate here because we're just taking the sum of these values so we only want to know what values add up to ten so for example here 1 3 6 we wouldn't also want the result 6 3 1 because both of those add up to 10 and it's the same values so just to show you that example let me replace combinations here with permutations and let me print out all the permutations that add up to 10 so if I run this code you can see that we get a lot more values here and that we also have 1 3 6 which add up to 10 and 6 3 1 but most likely the way that that question was worded it's better to use combinations because we only want the groups of 3 to add up to 10 and the order for us does not matter so now let's take an exact and example of a problem where the order would matter now this is where combinations wouldn't be appropriate but permutations would be appropriate so in this example here I'm just gonna make a very simple word matching game to where we can see so we have a sample word here and now I'm gonna see if any arrangement of these letters is equal to this word so what I'm going to do is I'm going to take all the combinations of these letters I also get all the permutations of these letters so first let me show you why combinations wouldn't be appropriate in this example so I'm going to replace that with combinations and for now I'm just going to comment that out and I'm just going to print all different combinations here so if I run this code you can see that we only get the one combination of these six letters now you can see if I comment out this print statement and then uncomment the working code here and run it you can see that it says that it's no match but this should be a match because there is a way to rearrange these letters that equals this word here so instead let's try this with permutations so again let me comment out this code here and just print out all of these values so you can see that the permutations all the different rearrangements of these letters is a lot larger than the combinations of these letters so you can see how many there are here so if you do do a problem coding problem with permutations you want to be careful because if I was to add more and more letters here and you take the permutations of more and more values those can greatly increase very very quickly and you could be using up a lot of computing power so just keep that in mind when working with permutations but you can kind of see what's going on here if we look at the results then there's going to be a permutation of this word that's going to give us the correct value so you can see here that we have this output right here is equal to our words so if I uncomment out this print statement and then uncomment the code here what I'm going to do is just join that result together and see if it's equal to our sample word and print match if it is so if I run this code you can see that we got a match now both of these examples that I just used could probably be written to be more efficient but really I just wanted to show you a sample problem where combinations would be appropriate and permutations wouldn't be appropriate and another example of where permutations would be appropriate but not combinations so hopefully after this video you can kind of see the difference between these two and how you would use them whenever you're writing code so that about does it for this video hopefully that cleared up any confusion between the difference between combinations and permutations but if anything wasn't clear if you have any questions then just ask in the comment section below be sure to subscribe for future programming videos and thank you all for watching
