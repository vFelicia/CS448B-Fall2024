With timestamps:

00:00 - Hey there how's it going everybody in this video
00:01 - We're going to be learning how to use regular expressions
00:04 - So we're actually going to look at regular expressions as a standalone topic because they aren't specific to any one programming language
00:10 - Now there are some slightly different flavors here and there but for the most part
00:13 - Whether you're programming and Python or JavaScript or Java or whatever if you learn how to use general regular expressions?
00:20 - Then it should mostly carry over into your language of choice
00:23 - And it will also allow you to use them in text editors and the command line and things like that now
00:28 - I am going to do a follow-up video where I show how to use regular expressions
00:32 - Specifically in Python since that's a language that I cover most on this channel, but for this video
00:37 - We're going to be learning how to use
00:38 - Regular expressions by themselves so that you can apply these to other areas so with that said let's go ahead and get started so regular
00:45 - Expressions basically allow us to search for specific patterns of text and they can look extremely complicated
00:51 - But that's mainly because there's just so much that you can do with them
00:54 - You can create a regular expression for just about any pattern of text that you can think of so let's see what some of these
00:59 - Look like so I have a test file open here that we're going to use to search for specific patterns
01:05 - And I'm going to be using the regular expression tool in the atom text editor to write these regular expressions
01:10 - And find what text matches our patterns now in order to open up this regular expression search tool
01:16 - I'm just going to go to find and then find in buffer now. You could have also opened this up with command F
01:21 - on a Mac and I believe, that's
01:23 - Ctrl F on windows now within the options here make sure that you have the dot asterisk
01:30 - selected over here because that's going to tell our search tool to use regular expressions and
01:35 - Also select this match case option here as well. That's just going to give us behavior
01:41 - That is more common to how regular expressions usually behave, okay, so let's start writing some regular expressions and first
01:47 - We'll start off kind of simple so first of all we can just search for literal characters, so if I was to search for
01:54 - ABC then we can see here at the top that it highlighted
01:58 - ABC because it matched the ABC and our lower case alphabet now it didn't match the
02:03 - Capital ABC here because it's case sensitive
02:07 - Now this search right now is looking specifically for a B and C
02:12 - But if I was to type in something like BCA then we can see that there were no results found because the order does matter
02:19 - Now if we look at this meta character section here
02:23 - I have some examples of characters that I say need to be escaped so for example if you wanted to search for a
02:30 - literal period now if I was to just
02:33 - type in a
02:35 - Period here and hit enter for my search then we can see that it does this weird thing where it matches
02:39 - Everything and that is because the dot is a special character and regular expressions
02:44 - And we'll see more of this in just a second
02:47 - But for now if we just wanted to actually search for a period or a dot then we have to escape it and to escape
02:54 - Characters we can use the backslash so if I do a backslash and search then now we can see that it only matches the actual
03:01 - Literal dot or period within our document here and that goes for any of these meta characters that I've listed here
03:08 - So for example we can see that the backslash is a special character also
03:13 - so if you wanted to search specifically for a backslash
03:16 - Then you have to escape itself so a backslash to escape and then a backslash for the search
03:21 - And if I search for that then we can see that we matched a literal backslash so a practical
03:26 - Example of this might be trying to match this URL right here
03:29 - So if we wanted to match that literal URL exactly
03:33 - Then we could just say kori MS
03:35 - and then for the dot on the dot-com we have to escape that with a backslash and then a period and then come and we
03:43 - Can see that it matches our URL okay?
03:45 - So that's how you match literal characters
03:46 - But a literal search isn't too exciting because we're used to that already
03:50 - Really, we want to use regular expressions to search for patterns and to do this
03:54 - We're going to be using some of these meta characters that we were just escaping so I have a snippets file open here
04:00 - So I'm going to switch over to this and in here
04:04 - I have a list of values where we can see the types of characters that we can match
04:08 - Now just for now I'm going to try to make this into a split screen here
04:12 - As we're walking down this list so the first one
04:16 - I have listed here is this dot or period and we can see that this matches any character except a newline now
04:23 - we've already seen this, but let's take a look again if we just do a
04:27 - And search for that then we can see that it matches any character
04:30 - Except it does not match the new lines. Okay, so next on the list is backslash D
04:35 - and that matches any digit 0 through 9 so if I was to do a
04:40 - Backslash D here and searched for that then you can see that this matches all of our digits so anything
04:46 - 0 through 9 it matches now we also have an uppercase D here and that matches anything
04:51 - That is not a digit, so if I search for an uppercase D. Then
04:55 - We can see that our digits are not matched, but everything else is highlighted, so it matched everything except for the digit now
05:03 - You'll notice that
05:03 - This is a common theme here that the uppercase versions of all of these are the ones that kind of negate the search so
05:11 - Moving on down here we have backslash W
05:14 - That searches for any word character and a word character is
05:18 - lowercase a through Z uppercase a through Z 0 through 9 and an underscore
05:23 - So let's search for the word character, and we can see that it matches
05:27 - You know all these lowercase uppercase numbers and things like that
05:30 - tani maaha mid match garanysa charcter gaarka ah
05:30 - It doesn't match these special meta characters here and just like with the digit the uppercase W
05:37 - Will match anything that is not a word character so anything that is not in this list here
05:43 - So let's go ahead and search for that uppercase W
05:45 - And we can see that you know it picks up the spaces and these special punctuation 's and things like that
05:51 - But it does not match the word characters that we saw before now if you're not quite getting this just yet
05:57 - We are going to look at a lot of examples to where it'll start to sink in so moving down the list here
06:02 - We have backslash s
06:03 - Which will match any white space and white space is a space tab or a new line so if we search for
06:10 - Backslash s. Then we can see that it matches our new lines here and our spaces
06:15 - but it doesn't match any of these characters and here so it's mainly white space and
06:20 - Just like with the others the capital S
06:22 - Will search for anything that is not white space so now you can see that we have you know all these lowercase uppercase
06:29 - Digits and then also this punctuation anything that isn't a new line or a space or anything like that
06:34 - Now these bottom ones over here the backslash B. The caret and the dollar sign
06:39 - These are a little bit different, so these are called anchors, and they don't actually match any characters
06:46 - But rather they match invisible positions before or after characters
06:51 - So let's see what I mean by this so for a word boundary if I search for a word boundary here
06:58 - So now let's search for where we have this ha ha ha here
07:02 - Let's search for a word boundary
07:04 - And then ha and match that so we can see that that matched
07:08 - because there is a word boundary here at the start of this line before this first one here and
07:15 - This space here is also word boundary, so this one gets matched as well
07:20 - But this last one does not get matched because there's no word boundary between these two
07:26 - Cause here now
07:28 - Just to show with what this would look like without the word boundary if I was to search for that then you can see that
07:32 - It highlights all three of those now. Just like with the other ones if I do a an uppercase B
07:38 - Then that matches anything that is not a word boundary, so if I do an uppercase B
07:43 - Then we can see that we match the one that it didn't match before because there is no word boundary between these two here
07:50 - so it doesn't match these first two now if I was to put word boundaries on both sides of
07:55 - These then it should only match this first one
07:59 - Because this is the only one that has a word boundary at the beginning
08:04 - Which we're matching here and at the end so this one has a word boundary at the beginning
08:10 - But not at the end because it's in the middle of this word and this one has a word boundary at the end
08:17 - But not at the beginning ok so our other two anchors here are pretty similar so the caret
08:22 - matches the position at the beginning of a string and the dollar sign matches the position at the end of a string
08:29 - So let's say for example
08:31 - That we only wanted to match a ha if it was at the beginning
08:35 - Of a string so for example if I was to do a caret
08:39 - And then a ha and match that then we can see that it only matched this one because it's the only one
08:45 - That is at the beginning of a line now if we wanted to only match it if it was at the end
08:51 - then we could put that dollar sign at
08:54 - And what we're saying here is that we only want to match this if the end of the string is the?
09:00 - Is in the following position so we can see that it not only matches this last one?
09:05 - Because the end of the string is the next position in line, okay?
09:08 - So now that we've seen what we can match with these special characters here now
09:13 - Let's go ahead and take a look at some practical examples, so I'm gonna move my snippets file back here
09:19 - And we will keep referencing that later on but for now
09:23 - Let's go ahead and say that we wanted to match a couple of phone numbers and let's write some regular expressions to do this now
09:29 - with a phone number
09:29 - We can't just type in a literal search like we did before because all of these are different
09:34 - So they have a similar pattern
09:36 - But they're not all the same digits so in this case we need to use the meta characters instead of literal characters
09:43 - So we just have a pattern here of three digits
09:47 - And then a dash or a period and then three more digits
09:52 - and then a dash or a period and then
09:55 - Four digits at the end so we saw before that we can match a digit with a backslash D
10:01 - And that is going to match all of the digits in our file so we want to match this phone number here
10:07 - So we want to match first three digits in a row so we can just put in three
10:13 - Backslash DS and that will match any three digits in a row so now that we're matching those first three digits now
10:19 - We're getting to where we can see that
10:21 - We're either going to match a dash, or a dot in our phone number so for now. Let's just match any character
10:28 - That's in this position so from our snippets file
10:31 - We saw that if we want to match any character the win can use a dot so we can see that for now our
10:37 - Pattern is still matching some other stuff as well
10:39 - But let's just continue on so now that we're matching this - or this dot now
10:45 - Let's go ahead and add in the next three digits, so we want to search for three more digits
10:51 - So I'll do three backslash DS
10:53 - And now we're going to want a dot to match any character
10:56 - Which should match that - or that dot and now we want four digits so we can just do four
11:02 - backslash DS
11:03 - So now we can see that this regular expression
11:06 - Highlights both of our phone numbers and matches both of those so now we're starting to see how this could be pretty useful
11:12 - So for example I have a data file here now if I pull this up then I have a bunch of fake names and numbers
11:19 - And addresses and emails, but if I wanted to match all of the phone numbers in this file
11:24 - Then you can see that the regular expression that we just wrote matches all of the phone numbers here
11:30 - so now we're starting to kind of get a sense of how this could be more useful than just a literal search because now we're
11:36 - Actually searching for a specific pattern, so now let me go back to our
11:41 - Simple text file here so now
11:43 - Let's get a little bit more specific
11:45 - So let's say that we only wanted to match a phone number if it had a dash
11:49 - Or a dot now right now this pattern will match any
11:53 - separator because we're using the period down here which will match any
11:57 - Character so if I was to put in a another number here that doesn't have a regular separator
12:04 - Let's just say it's an asterisk then we can see that it matches this number as well
12:09 - Even though the asterisk isn't really a phone number separator so to only match the dash or the dot
12:15 - We're going to have to use a character set and a character set
12:19 - uses square brackets with the
12:21 - Characters that we want to match so to create a character set I'm going to replace our first dot here
12:26 - And this is going to be square brackets now
12:29 - This is a character set now within this character set we want to put the characters that we want to match so we want to
12:36 - match either a dash or a dot and
12:39 - I will just copy that and we'll replace this second dot here which was matching any character
12:44 - And we will put that in for that as well
12:48 - And now you can see that it only matches our phone numbers here that have a dash or a dot separator
12:54 - And it does not match this one with the weird asterisk there now you probably also noticed that we didn't need to
13:00 - Escape our dot character within our character set and that's because character sets have some slightly different rules
13:07 - Now you can escape these characters if you'd like
13:09 - But it just makes it a lot more difficult to read if you do that now even though the character set has
13:14 - Multiple characters here in the set it's still only matching one character in our next it's matching one character
13:22 - that is either a dash or a
13:24 - Period but if I was to put in let's say two dashes here into one of these numbers
13:29 - Then you can see now it doesn't match that number because it's only matching the first dash, or a dot and then it moves
13:36 - Right on to looking for a digit, so it's looking for a digit in this position
13:40 - So that's something that can kind of throw people off when they first start working with regular expressions
13:45 - so even though you know we have four characters total here in this character set with these square brackets and
13:50 - All of the characters in this set it's still only searching for one literal character up here, which is either a dash
13:57 - Or a dot now to show another example of this
14:00 - Let's say that we only wanted to match 800 and 900 numbers, so I'm going to create two different numbers here
14:07 - I'll do an 800 number and a 900 number here
14:11 - So if we only wanted to match 800 and 900 numbers then our first three digits here
14:17 - We have to do something different so first we want the first digit that we're going to match
14:22 - to either be an 8
14:24 - or a 9 so we can do a character set and we can say that we're looking to either start with an 8 or a
14:30 - 9
14:30 - Now the following two numbers are going to be 0 0 and that's just a literal search so now you can see that
14:38 - We're finding the 800 and 900
14:40 - Numbers here now within our character set the dash is actually a special character as well
14:46 - so when it's put at the beginning or the end of the character set then it will just match the
14:52 - Literal - but when it's placed between values that it can actually specify a range of values so for example
15:00 - We know that the backslash D
15:02 - matches any digit
15:03 - But what if we only wanted to match digits between?
15:06 - let's say 1 and 7 so to do that we can use a
15:09 - character set and we can just say instead of typing out 1 2 3 4 5 6 7
15:15 - If we wanted to specify a range of those values
15:18 - Then we can just say 1 - 7 so now we can see that
15:22 - We're matching all of the digits between 1 and 7, but the 8 9 and the 0 aren't getting matched up here
15:29 - Now you can do this with letters as well
15:31 - so if we won't only wanted to match the
15:34 - lowercase letters A through Z then we could just do a character set of A
15:38 - through Z
15:39 - Now you can see all of the capital letters aren't getting matched
15:42 - But the lowercase ones are now if we wanted to match the uppercase and lowercase numbers
15:47 - Then we could just put our ranges
15:50 - back-to-back
15:51 - So I could say a through Z and then just add on to this character set and say
15:56 - Capital A through capital Z and now we're matching all letters regardless of whether they are uppercase or lowercase
16:03 - and you could keep adding to those ranges if you wanted to you could do a
16:07 - 0 through 9 there as well to add in all digits now another special character in our character set is the carrot
16:15 - Now we saw before that outside of the character set it matches the beginning of a string
16:20 - But within the character set it negates the set and matches everything
16:24 - That is not in the set so for example if we wanted to match every
16:29 - Character that is not a lowercase letter, then we could say this carrot
16:34 - And then a through Z so we can see that it matches everything on our screen that isn't a lowercase letter
16:40 - It's not matching these lowercase letters here
16:43 - So it's even matching these new lines and the spaces and everything so just to show another example of this
16:50 - Let's say that we had some words here cat mat
16:55 - Hat and bat, so let's say that we wanted to match every word that ends in a T
17:01 - except bat we don't want to match bat so to do this we can just say that we want a character set of
17:09 - Everything that is not be followed by a T
17:13 - So now we can see that it matches all of these three letter words that end in 80
17:18 - except for bat because our character set here negated that B
17:22 - So everything that we've looked at so far has involved single characters so in this example
17:27 - Right here where you're matching any single character
17:31 - That is not a B then followed by an A and then followed by a T
17:36 - But we can actually use these things called quantifiers to match more than one character at a time
17:41 - So let's go back to our original phone number example from earlier
17:46 - And we'll do match any character like we did before so I will do
17:50 - three digits and then a period for any character and then three digits again and a period for any character and then
17:58 - four digits at the end
18:00 - and I'm just going to remove what we had there for an example and
18:04 - Scroll those back up so to see what quantifiers we have available
18:08 - I'm going to make my snippets half of my screen here again
18:12 - And then scroll down to my quantifier section so the asterisk will match zero or more of
18:18 - what we're searching for the plus sign will match one or more the question mark will match zero or one and
18:26 - To match exact numbers we can use these curly braces with a number on the inside so in this example this would match exactly
18:33 - Three of what it is we're looking for and we can also specify a range of numbers as well
18:39 - With the first number being the minimum and the last number being the max so this would search for whatever our pattern is it would
18:46 - Look for three or four of those
18:48 - So let's take a look at an example of this to see how this works
18:52 - So you can see that with our phone number
18:54 - We are searching for one digit at a time
18:57 - But we could change this if I erase my digits here
19:01 - Then we could say that I'm searching for a digit
19:04 - And then we could put in our quantifier for exactly three digits
19:10 - And we could do this after our separator as well, so we're searching for
19:15 - Three digits and then any character and then here at the end we want to match four digits
19:21 - So instead of writing out the same character over and over we can see how these quantifiers allow us to specify
19:28 - Exactly how much we want now here. We're matching exact numbers, but sometimes
19:33 - We don't know the exact number
19:35 - And we'll need to use one of these other quantifiers so for example here at the bottom of this test file here
19:41 - We have some lines where each starts with a prefix of mr.
19:46 - or miss or misses
19:48 - So let's say that we wanted to match these prefixes as well as the names after so just to start
19:54 - Let's start by matching the names that start with mr. Now we can see that some of these
20:01 - Have a period after the prefix and some do not some of them
20:05 - Just have a space
20:06 - So let's start our regular expression by searching for lines that start with mr
20:13 - And then we're gonna put a backslash period to search for that
20:17 - Literal period and right now it isn't matching this mr.
20:21 - Smith which doesn't have a period after the prefix now to match that also we can use this question mark
20:29 - Quantifier which tells our pattern that we want to match
20:32 - 0 or 1 of that character so if I put a question mark after that literal period then it's saying that
20:40 - There can be 0 periods there or there can be 1 so we can see that now
20:45 - It's matching the ones with 1 period there
20:47 - And it's also matching the one with no period so now to continue and match the entire line
20:54 - now we want to match a space after that and
20:58 - after the space we want to match any
21:01 - uppercase letter and to do that we can use our character class and we can match any
21:07 - uppercase letter by doing a range of uppercase letters there so at this point after that first uppercase letter that we match we've
21:15 - Completely matched the name for mr.
21:17 - T down here at the bottom, but we still need to match the rest of our other names
21:21 - so we could say that we will match any word character after that uppercase so let's put in a
21:30 - Backslash W to match any word character, and now we don't know how many more characters are going to be in our name
21:35 - So we'll have to use a quantifier here now if we look over here
21:39 - We could use the asterisk or the plus sign and the plus sign will match one or more of these word characters and the asterisk
21:47 - will match zero or more so if we
21:50 - Used the plus sign then we can see that it matches our two top names here, but now it's not matching this mr.
21:57 - t because after our word character
22:00 - It's searching for one or more word characters after our uppercase character so a better solution in this case
22:07 - May be to use the asterisk which matches zero or more word characters
22:11 - And if we use that asterisk then we can see that it matches all three of our names that begin with mister now
22:19 - I know that we've covered a lot so far
22:21 - But we've got a couple more concepts to go and then we'll look at some examples that wrap everything together
22:26 - So we still haven't matched our miss or misses names here
22:31 - So how would we do that?
22:33 - So you might think that we could use a character set that matches either an R or an S
22:39 - And there are maybe some ways that we could get that to work
22:43 - but it probably would be a bit ugly since we'd have to match either and
22:47 - R or an S as the second character, and then the optional s after that
22:52 - So that could get kind of ugly, but I think a better solution here would be to use a group now
22:57 - We haven't looked at groups yet
22:58 - But groups allow us to match several different patterns and to create a group we use parentheses so
23:05 - After the M here instead of just searching for mr.
23:09 - I'm going to create a group with open and close parentheses here and
23:14 - Now within our group we can specify different
23:18 - Matches so I can say that we want to match either an R
23:21 - and
23:21 - Then or and we use this character here to specify an or and that is just the vertical
23:27 - Bar character to specify an or so we can say that we want to match an R or an S
23:33 - And whenever we add that in we can see that now we're matching the miss name here
23:39 - But we're still not matching this
23:41 - Misses so to match the misses we can put in another or and say that we want to match an RS
23:48 - Okay, so now we can see that
23:49 - We are matching all of our names here
23:51 - so let's do a quick walkthrough of this one more time to make sure we know what's going on so we have a
23:57 - Capital M to start, and then that capital M is. Followed by either an R
24:02 - and s or an RS and
24:05 - then we are
24:07 - looking for a literal period and this question mark says that we can have zero or
24:13 - one of those so that is optional so it's matching the ones that do have that period and the ones that don't and
24:19 - Then after that we are matching a space then after that space we the first letter of the last name
24:26 - We're looking for any capital letter so we a character set here
24:29 - That is a through Z of capital letters, and then for the rest of the last name. We are matching
24:36 - zero or more
24:37 - Word characters now these groups can actually be used to capture sections of your matched regular expression
24:44 - And that's something that we'll look at in just a minute
24:46 - But for now, let's do a quick recap of everything that we've learned so far
24:50 - And look at some examples that incorporates all of these things together, so I have a file here
24:56 - And I'm going to move my snippets back into the group here and open up this file emails
25:02 - Txt so I've got a file here with three fairly different email addresses
25:06 - So let's try to write a regular expression that will match all of these emails
25:10 - So let's just match the first email address first and see what that looks like
25:16 - So the first email address we have a mix of upper and lowercase letters here before we hit this @ symbol
25:22 - So let's go ahead and match those first so to match any upper or lowercase
25:28 - letters we can do a character set and we can do a lowercase a through Z or an uppercase a
25:35 - through uppercase Z now right now
25:38 - This is only matching those single characters
25:40 - So we can use the plus quantifier to say that we want one or more of these upper or lowercase letters
25:47 - So we're still working on the first email address here
25:50 - We have our upper and lowercase letters here, and now we want to match that at symbol
25:55 - So I'll just put in a literal at symbol and now for the domain name here
25:58 - I'll just do a another search for any upper or lowercase letters
26:03 - So I'll do the same as we did before and then I will do a plus sign for a quantifier to match any
26:10 - Upper lowercase letters after that at symbol
26:14 - and then that's when we hit the end with the dot-com so to match the dot-com we can do a
26:19 - Backslash period for the dot and then we can just fill in a literal com so now we've successfully matched that first address now
26:27 - It looks like it's not matching the second address
26:30 - So let's see why and see if we can mold this to match the second address as well
26:35 - So we can see that the second address has a dot in the first part of the name here
26:41 - So let's add a dot to our first character set so that dots are included in
26:47 - That character set so now it's still not matching that second address, and it's because at the end here
26:54 - We don't have a dot com but a dot e-d-u
26:57 - So in order to search for both. We can use a group like we saw before
27:02 - using open and close parentheses and we can search for either com or
27:07 - Edu okay, so now we are building this up a little bit at a time and we can see that
27:13 - We are now matching our second email address, okay?
27:16 - So now let's see if we can change this to match our third email address here so and our third email
27:22 - Address it looks like before the @ symbol
27:24 - We also have some hyphens and some numbers in the first part here
27:30 - So let's add those to the character set as well so back here after our capital letters. I'm also going to add in
27:38 - digits by doing 0 through 9 and we also want to add a
27:43 - Dash in there as well so that should match everything before the @ symbol now
27:49 - It looks like we also have a dash in our domain here
27:51 - So we'll have to add that in as well so after the @ symbol. We're matching any characters right now
27:58 - it's just lowercase and uppercase, but we can put a dash in there as well and
28:03 - Lastly, it's still not matching because just like the other two instead we have a.net here instead so we can just add
28:11 - In a second or at the end and also include
28:14 - Dotnet so we can see that we built that up a little bit at a time to match all three of our email addresses
28:21 - Now with something like email addresses it can be pretty tough writing your own regular expressions from scratch
28:26 - But there are a lot of these available online and once we learn how to write regular expressions
28:32 - Then we should be able to read them and figure out how they're matching as well now
28:36 - I've always found that reading other people's regular expressions to be a lot harder than writing them
28:42 - But let's take a look at one and see if we can do this so I have an expression here that I pulled off line
28:48 - That matches email addresses and let's paste this in here
28:52 - And see if we can read through and see what this is matching
28:56 - So we can see that the one that I got offline does match all three of my email addresses here now
29:02 - Let's look through this so we can see that
29:04 - It's somewhat similar to what we had before but first we have a character set here
29:09 - And it's a pretty large character set and it matches
29:12 - lowercase uppercase
29:15 - Any number and underscore a
29:18 - Period a plus sign or a hyphen
29:22 - And then the plus sign here says that we want to match one or more of any of those characters
29:27 - And we match one or more of those characters all the way up until we hit an @ sign
29:32 - And then after the @ sign we have another character set here and in this character set we have
29:38 - Lowercase letters uppercase letters any digits and also a hyphen now
29:44 - I don't know a lot about email addresses, but I'm assuming that since they left out the
29:48 - underscore the period and the plus sign that were in the first part of the email address, I'm
29:54 - Assuming that those aren't allowed in the domain so then we have a plus sign
29:58 - After that character set which means that we're matching one or more of any of those characters all the way up until we reach this
30:05 - literal dot and that literal dot is escaped with a
30:09 - Backslash and then after the dot we have another character set here and this character set is any
30:14 - lowercase letter any uppercase letter any
30:17 - digits
30:18 - Any - or a period and then that is followed by a plus sign which matches one or more of anything in that character set
30:26 - So just like I did with the phone numbers if we open up our data file here with this
30:32 - Regular expression that we've typed in then we can see that it does match all of the
30:37 - email addresses in this data file as well, so we've
30:40 - Got an expression that will match email addresses fairly well so doing what we just did and reading through a regular expression
30:47 - Written by other people is probably the hardest part of all this, but if you walk through it bit by bit
30:53 - Then you should be able to break down just about any pattern, okay
30:57 - So the last thing that I'd like to look at in this video is how to capture information from groups now
31:03 - We've already seen how to match groups
31:05 - But we can actually use the information and capture from those groups so to show an example of this
31:11 - I'm going to open up a file here with some URLs. Okay, so we can see here that some of the URLs are
31:18 - HTTP some are HTTPS
31:21 - Also some of these have WW before the domain name and some do not
31:26 - So let's say that you had a list of a lot of different URLs within your document
31:31 - and you only wanted to grab the domain name and
31:34 - The top-level domain which is dot-com or gov so for example out of all these domains you only wanted to grab
31:41 - Google.com or quarry MS
31:43 - Calm or youtube.com or nasa.gov, and you just wanted to ignore everything else
31:48 - So let's see how we can do this so first
31:51 - Let's write an expression that actually matches these URLs
31:54 - So let me get rid of the one that we currently have now
31:59 - First to match this we can say all of these start with with
32:03 - HTTP and then the S is
32:06 - Optional so we can say s and then put in a question mark to say that we want to match
32:11 - 0 or 1 for the s and then after that optional s
32:15 - we want a colon forward slash forward slash so at this point some of these domains have a
32:28 - Www.affordablecomm.com
32:43 - So now you can see on all of our URLs. We've matched up to the domain name so now to complete this
32:49 - I'm just going to say any word character so backslash W
32:53 - And I will put in a plus sign to say one or more of those word characters
32:59 - and then
33:00 - We get here to the top level domain
33:02 - So we want to match a literal dot so we'll do a back slash dot and then for the rest of that top
33:07 - level domain I will just do any word character one or more times so we can do a
33:13 - Word character with a plus sign to do one or more okay, so we can see that this matches all of our URLs
33:20 - But the point here was to use our groups to capture some information from our URLs
33:26 - so let's capture the domain name and the
33:30 - Top-level domain which is the dot-com or the dot gov and things like that so to capture these sections?
33:36 - We can just put them in a group by surrounding them in parentheses
33:40 - So what we want to group here is our domain name and the domain name is this part right here this
33:48 - string of one or more word characters
33:50 - So I'm just going to wrap those in
33:53 - parentheses and create a group
33:54 - And we've seen that before and now we also want to put the top-level domain and a group as well that is the dot-com or
34:00 - The dot gov so we can put a parentheses around
34:04 - That dot and then also around the ending there that is the string of one or more or characters, okay?
34:11 - So we can see that we're still matching all of our URLs here
34:14 - But now we have three different groups so our first group is just that optional
34:19 - wwr
34:21 - Second group is the word characters that make up our domain name and the third group is that top-level domain now
34:28 - There's also an implicit group 0 and group 0 is. Everything that we captured so in this case
34:35 - It's the entire URL, so now let's get to the cool part about this
34:39 - So let me show you what we can do now that we've captured these so we can use something called a back
34:44 - Reference to reference our captured group so for example here an atom we have the ability to
34:51 - Replace our matches we can see down here that we can replace
34:54 - So let's replace all of our matches with just the literal text group 1
35:00 - and then a colon and then a dollar sign 1 now this dollar sign 1 is a
35:06 - reference to our first group now sometimes
35:09 - This is a back slash
35:10 - But for some reason and atom they use a dollar sign so if I do a replace all here
35:16 - Then we can see that it replaced our matches with this literal text group 1
35:21 - But then it also replaced the dollar sign 1 with our first captured group and the first capture group is that optional?
35:34 - Wwww we can see that it shows up and for ones that didn't it doesn't have anything so let me undo this and now let's
35:41 - replace our matches with the second group
35:44 - and now the second group should be the domain name so now if I do a
35:49 - Replace all now then we can see that now it says group two is
35:53 - Google Corps EMS YouTube and NASA and if I undo that and
35:59 - Replace this with the group three
36:01 - then the group three should give us our top-level domain so our group 3 is the dot-com comm
36:07 - Gov things like that
36:08 - So let me undo this one more time so now that we know how to use those back references
36:13 - Then we can actually take our regular URLs and clean them up like we meant to from before
36:20 - So we could convert these to a cleaned up version without the HTTP or the WW just by replacing our
36:28 - matches with the domain name which is group 2
36:32 - Followed by the top-level domain which is group 3
36:35 - So now if I replace all of our selections with those two
36:39 - Then we can see that replaced all of our URLs with just the domain name and the top-level domain
36:44 - so you can imagine if you had a lot of
36:46 - Information like this that you needed to clean up or modify in some way
36:50 - Then knowing how to match these groups with regular expressions could save you a ton of time with doing things like this ok
36:57 - So I think that's gonna do it for this video now
36:59 - There's a lot of advanced features that we could go over with regular expressions as well
37:03 - So if anyone is interested in learning more then I could put together an advanced video covering those topics in the near future
37:09 - But hopefully now you feel comfortable with being able to read and write these regular expressions that we went over in this video
37:16 - But if anyone does have any questions about what we covered in this video
37:19 - Then feel free to ask in the comment section below, and I'll do my best to answer those
37:23 - And if you enjoy these tutorials and would like to support them
37:26 - Then there are several ways you can do that the easiest ways to simply like the video and give it a thumbs up and also
37:31 - It's a huge help to share these videos with anyone who you think would find them useful
37:34 - And if you have the means you can contribute through patreon and there's a link to that page in the description section below
37:39 - Be sure to subscribe for future videos, and thank you all for watching
37:52 - You

Cleaned transcript:

Hey there how's it going everybody in this video We're going to be learning how to use regular expressions So we're actually going to look at regular expressions as a standalone topic because they aren't specific to any one programming language Now there are some slightly different flavors here and there but for the most part Whether you're programming and Python or JavaScript or Java or whatever if you learn how to use general regular expressions? Then it should mostly carry over into your language of choice And it will also allow you to use them in text editors and the command line and things like that now I am going to do a followup video where I show how to use regular expressions Specifically in Python since that's a language that I cover most on this channel, but for this video We're going to be learning how to use Regular expressions by themselves so that you can apply these to other areas so with that said let's go ahead and get started so regular Expressions basically allow us to search for specific patterns of text and they can look extremely complicated But that's mainly because there's just so much that you can do with them You can create a regular expression for just about any pattern of text that you can think of so let's see what some of these Look like so I have a test file open here that we're going to use to search for specific patterns And I'm going to be using the regular expression tool in the atom text editor to write these regular expressions And find what text matches our patterns now in order to open up this regular expression search tool I'm just going to go to find and then find in buffer now. You could have also opened this up with command F on a Mac and I believe, that's Ctrl F on windows now within the options here make sure that you have the dot asterisk selected over here because that's going to tell our search tool to use regular expressions and Also select this match case option here as well. That's just going to give us behavior That is more common to how regular expressions usually behave, okay, so let's start writing some regular expressions and first We'll start off kind of simple so first of all we can just search for literal characters, so if I was to search for ABC then we can see here at the top that it highlighted ABC because it matched the ABC and our lower case alphabet now it didn't match the Capital ABC here because it's case sensitive Now this search right now is looking specifically for a B and C But if I was to type in something like BCA then we can see that there were no results found because the order does matter Now if we look at this meta character section here I have some examples of characters that I say need to be escaped so for example if you wanted to search for a literal period now if I was to just type in a Period here and hit enter for my search then we can see that it does this weird thing where it matches Everything and that is because the dot is a special character and regular expressions And we'll see more of this in just a second But for now if we just wanted to actually search for a period or a dot then we have to escape it and to escape Characters we can use the backslash so if I do a backslash and search then now we can see that it only matches the actual Literal dot or period within our document here and that goes for any of these meta characters that I've listed here So for example we can see that the backslash is a special character also so if you wanted to search specifically for a backslash Then you have to escape itself so a backslash to escape and then a backslash for the search And if I search for that then we can see that we matched a literal backslash so a practical Example of this might be trying to match this URL right here So if we wanted to match that literal URL exactly Then we could just say kori MS and then for the dot on the dotcom we have to escape that with a backslash and then a period and then come and we Can see that it matches our URL okay? So that's how you match literal characters But a literal search isn't too exciting because we're used to that already Really, we want to use regular expressions to search for patterns and to do this We're going to be using some of these meta characters that we were just escaping so I have a snippets file open here So I'm going to switch over to this and in here I have a list of values where we can see the types of characters that we can match Now just for now I'm going to try to make this into a split screen here As we're walking down this list so the first one I have listed here is this dot or period and we can see that this matches any character except a newline now we've already seen this, but let's take a look again if we just do a And search for that then we can see that it matches any character Except it does not match the new lines. Okay, so next on the list is backslash D and that matches any digit 0 through 9 so if I was to do a Backslash D here and searched for that then you can see that this matches all of our digits so anything 0 through 9 it matches now we also have an uppercase D here and that matches anything That is not a digit, so if I search for an uppercase D. Then We can see that our digits are not matched, but everything else is highlighted, so it matched everything except for the digit now You'll notice that This is a common theme here that the uppercase versions of all of these are the ones that kind of negate the search so Moving on down here we have backslash W That searches for any word character and a word character is lowercase a through Z uppercase a through Z 0 through 9 and an underscore So let's search for the word character, and we can see that it matches You know all these lowercase uppercase numbers and things like that tani maaha mid match garanysa charcter gaarka ah It doesn't match these special meta characters here and just like with the digit the uppercase W Will match anything that is not a word character so anything that is not in this list here So let's go ahead and search for that uppercase W And we can see that you know it picks up the spaces and these special punctuation 's and things like that But it does not match the word characters that we saw before now if you're not quite getting this just yet We are going to look at a lot of examples to where it'll start to sink in so moving down the list here We have backslash s Which will match any white space and white space is a space tab or a new line so if we search for Backslash s. Then we can see that it matches our new lines here and our spaces but it doesn't match any of these characters and here so it's mainly white space and Just like with the others the capital S Will search for anything that is not white space so now you can see that we have you know all these lowercase uppercase Digits and then also this punctuation anything that isn't a new line or a space or anything like that Now these bottom ones over here the backslash B. The caret and the dollar sign These are a little bit different, so these are called anchors, and they don't actually match any characters But rather they match invisible positions before or after characters So let's see what I mean by this so for a word boundary if I search for a word boundary here So now let's search for where we have this ha ha ha here Let's search for a word boundary And then ha and match that so we can see that that matched because there is a word boundary here at the start of this line before this first one here and This space here is also word boundary, so this one gets matched as well But this last one does not get matched because there's no word boundary between these two Cause here now Just to show with what this would look like without the word boundary if I was to search for that then you can see that It highlights all three of those now. Just like with the other ones if I do a an uppercase B Then that matches anything that is not a word boundary, so if I do an uppercase B Then we can see that we match the one that it didn't match before because there is no word boundary between these two here so it doesn't match these first two now if I was to put word boundaries on both sides of These then it should only match this first one Because this is the only one that has a word boundary at the beginning Which we're matching here and at the end so this one has a word boundary at the beginning But not at the end because it's in the middle of this word and this one has a word boundary at the end But not at the beginning ok so our other two anchors here are pretty similar so the caret matches the position at the beginning of a string and the dollar sign matches the position at the end of a string So let's say for example That we only wanted to match a ha if it was at the beginning Of a string so for example if I was to do a caret And then a ha and match that then we can see that it only matched this one because it's the only one That is at the beginning of a line now if we wanted to only match it if it was at the end then we could put that dollar sign at And what we're saying here is that we only want to match this if the end of the string is the? Is in the following position so we can see that it not only matches this last one? Because the end of the string is the next position in line, okay? So now that we've seen what we can match with these special characters here now Let's go ahead and take a look at some practical examples, so I'm gonna move my snippets file back here And we will keep referencing that later on but for now Let's go ahead and say that we wanted to match a couple of phone numbers and let's write some regular expressions to do this now with a phone number We can't just type in a literal search like we did before because all of these are different So they have a similar pattern But they're not all the same digits so in this case we need to use the meta characters instead of literal characters So we just have a pattern here of three digits And then a dash or a period and then three more digits and then a dash or a period and then Four digits at the end so we saw before that we can match a digit with a backslash D And that is going to match all of the digits in our file so we want to match this phone number here So we want to match first three digits in a row so we can just put in three Backslash DS and that will match any three digits in a row so now that we're matching those first three digits now We're getting to where we can see that We're either going to match a dash, or a dot in our phone number so for now. Let's just match any character That's in this position so from our snippets file We saw that if we want to match any character the win can use a dot so we can see that for now our Pattern is still matching some other stuff as well But let's just continue on so now that we're matching this or this dot now Let's go ahead and add in the next three digits, so we want to search for three more digits So I'll do three backslash DS And now we're going to want a dot to match any character Which should match that or that dot and now we want four digits so we can just do four backslash DS So now we can see that this regular expression Highlights both of our phone numbers and matches both of those so now we're starting to see how this could be pretty useful So for example I have a data file here now if I pull this up then I have a bunch of fake names and numbers And addresses and emails, but if I wanted to match all of the phone numbers in this file Then you can see that the regular expression that we just wrote matches all of the phone numbers here so now we're starting to kind of get a sense of how this could be more useful than just a literal search because now we're Actually searching for a specific pattern, so now let me go back to our Simple text file here so now Let's get a little bit more specific So let's say that we only wanted to match a phone number if it had a dash Or a dot now right now this pattern will match any separator because we're using the period down here which will match any Character so if I was to put in a another number here that doesn't have a regular separator Let's just say it's an asterisk then we can see that it matches this number as well Even though the asterisk isn't really a phone number separator so to only match the dash or the dot We're going to have to use a character set and a character set uses square brackets with the Characters that we want to match so to create a character set I'm going to replace our first dot here And this is going to be square brackets now This is a character set now within this character set we want to put the characters that we want to match so we want to match either a dash or a dot and I will just copy that and we'll replace this second dot here which was matching any character And we will put that in for that as well And now you can see that it only matches our phone numbers here that have a dash or a dot separator And it does not match this one with the weird asterisk there now you probably also noticed that we didn't need to Escape our dot character within our character set and that's because character sets have some slightly different rules Now you can escape these characters if you'd like But it just makes it a lot more difficult to read if you do that now even though the character set has Multiple characters here in the set it's still only matching one character in our next it's matching one character that is either a dash or a Period but if I was to put in let's say two dashes here into one of these numbers Then you can see now it doesn't match that number because it's only matching the first dash, or a dot and then it moves Right on to looking for a digit, so it's looking for a digit in this position So that's something that can kind of throw people off when they first start working with regular expressions so even though you know we have four characters total here in this character set with these square brackets and All of the characters in this set it's still only searching for one literal character up here, which is either a dash Or a dot now to show another example of this Let's say that we only wanted to match 800 and 900 numbers, so I'm going to create two different numbers here I'll do an 800 number and a 900 number here So if we only wanted to match 800 and 900 numbers then our first three digits here We have to do something different so first we want the first digit that we're going to match to either be an 8 or a 9 so we can do a character set and we can say that we're looking to either start with an 8 or a 9 Now the following two numbers are going to be 0 0 and that's just a literal search so now you can see that We're finding the 800 and 900 Numbers here now within our character set the dash is actually a special character as well so when it's put at the beginning or the end of the character set then it will just match the Literal but when it's placed between values that it can actually specify a range of values so for example We know that the backslash D matches any digit But what if we only wanted to match digits between? let's say 1 and 7 so to do that we can use a character set and we can just say instead of typing out 1 2 3 4 5 6 7 If we wanted to specify a range of those values Then we can just say 1 7 so now we can see that We're matching all of the digits between 1 and 7, but the 8 9 and the 0 aren't getting matched up here Now you can do this with letters as well so if we won't only wanted to match the lowercase letters A through Z then we could just do a character set of A through Z Now you can see all of the capital letters aren't getting matched But the lowercase ones are now if we wanted to match the uppercase and lowercase numbers Then we could just put our ranges backtoback So I could say a through Z and then just add on to this character set and say Capital A through capital Z and now we're matching all letters regardless of whether they are uppercase or lowercase and you could keep adding to those ranges if you wanted to you could do a 0 through 9 there as well to add in all digits now another special character in our character set is the carrot Now we saw before that outside of the character set it matches the beginning of a string But within the character set it negates the set and matches everything That is not in the set so for example if we wanted to match every Character that is not a lowercase letter, then we could say this carrot And then a through Z so we can see that it matches everything on our screen that isn't a lowercase letter It's not matching these lowercase letters here So it's even matching these new lines and the spaces and everything so just to show another example of this Let's say that we had some words here cat mat Hat and bat, so let's say that we wanted to match every word that ends in a T except bat we don't want to match bat so to do this we can just say that we want a character set of Everything that is not be followed by a T So now we can see that it matches all of these three letter words that end in 80 except for bat because our character set here negated that B So everything that we've looked at so far has involved single characters so in this example Right here where you're matching any single character That is not a B then followed by an A and then followed by a T But we can actually use these things called quantifiers to match more than one character at a time So let's go back to our original phone number example from earlier And we'll do match any character like we did before so I will do three digits and then a period for any character and then three digits again and a period for any character and then four digits at the end and I'm just going to remove what we had there for an example and Scroll those back up so to see what quantifiers we have available I'm going to make my snippets half of my screen here again And then scroll down to my quantifier section so the asterisk will match zero or more of what we're searching for the plus sign will match one or more the question mark will match zero or one and To match exact numbers we can use these curly braces with a number on the inside so in this example this would match exactly Three of what it is we're looking for and we can also specify a range of numbers as well With the first number being the minimum and the last number being the max so this would search for whatever our pattern is it would Look for three or four of those So let's take a look at an example of this to see how this works So you can see that with our phone number We are searching for one digit at a time But we could change this if I erase my digits here Then we could say that I'm searching for a digit And then we could put in our quantifier for exactly three digits And we could do this after our separator as well, so we're searching for Three digits and then any character and then here at the end we want to match four digits So instead of writing out the same character over and over we can see how these quantifiers allow us to specify Exactly how much we want now here. We're matching exact numbers, but sometimes We don't know the exact number And we'll need to use one of these other quantifiers so for example here at the bottom of this test file here We have some lines where each starts with a prefix of mr. or miss or misses So let's say that we wanted to match these prefixes as well as the names after so just to start Let's start by matching the names that start with mr. Now we can see that some of these Have a period after the prefix and some do not some of them Just have a space So let's start our regular expression by searching for lines that start with mr And then we're gonna put a backslash period to search for that Literal period and right now it isn't matching this mr. Smith which doesn't have a period after the prefix now to match that also we can use this question mark Quantifier which tells our pattern that we want to match 0 or 1 of that character so if I put a question mark after that literal period then it's saying that There can be 0 periods there or there can be 1 so we can see that now It's matching the ones with 1 period there And it's also matching the one with no period so now to continue and match the entire line now we want to match a space after that and after the space we want to match any uppercase letter and to do that we can use our character class and we can match any uppercase letter by doing a range of uppercase letters there so at this point after that first uppercase letter that we match we've Completely matched the name for mr. T down here at the bottom, but we still need to match the rest of our other names so we could say that we will match any word character after that uppercase so let's put in a Backslash W to match any word character, and now we don't know how many more characters are going to be in our name So we'll have to use a quantifier here now if we look over here We could use the asterisk or the plus sign and the plus sign will match one or more of these word characters and the asterisk will match zero or more so if we Used the plus sign then we can see that it matches our two top names here, but now it's not matching this mr. t because after our word character It's searching for one or more word characters after our uppercase character so a better solution in this case May be to use the asterisk which matches zero or more word characters And if we use that asterisk then we can see that it matches all three of our names that begin with mister now I know that we've covered a lot so far But we've got a couple more concepts to go and then we'll look at some examples that wrap everything together So we still haven't matched our miss or misses names here So how would we do that? So you might think that we could use a character set that matches either an R or an S And there are maybe some ways that we could get that to work but it probably would be a bit ugly since we'd have to match either and R or an S as the second character, and then the optional s after that So that could get kind of ugly, but I think a better solution here would be to use a group now We haven't looked at groups yet But groups allow us to match several different patterns and to create a group we use parentheses so After the M here instead of just searching for mr. I'm going to create a group with open and close parentheses here and Now within our group we can specify different Matches so I can say that we want to match either an R and Then or and we use this character here to specify an or and that is just the vertical Bar character to specify an or so we can say that we want to match an R or an S And whenever we add that in we can see that now we're matching the miss name here But we're still not matching this Misses so to match the misses we can put in another or and say that we want to match an RS Okay, so now we can see that We are matching all of our names here so let's do a quick walkthrough of this one more time to make sure we know what's going on so we have a Capital M to start, and then that capital M is. Followed by either an R and s or an RS and then we are looking for a literal period and this question mark says that we can have zero or one of those so that is optional so it's matching the ones that do have that period and the ones that don't and Then after that we are matching a space then after that space we the first letter of the last name We're looking for any capital letter so we a character set here That is a through Z of capital letters, and then for the rest of the last name. We are matching zero or more Word characters now these groups can actually be used to capture sections of your matched regular expression And that's something that we'll look at in just a minute But for now, let's do a quick recap of everything that we've learned so far And look at some examples that incorporates all of these things together, so I have a file here And I'm going to move my snippets back into the group here and open up this file emails Txt so I've got a file here with three fairly different email addresses So let's try to write a regular expression that will match all of these emails So let's just match the first email address first and see what that looks like So the first email address we have a mix of upper and lowercase letters here before we hit this @ symbol So let's go ahead and match those first so to match any upper or lowercase letters we can do a character set and we can do a lowercase a through Z or an uppercase a through uppercase Z now right now This is only matching those single characters So we can use the plus quantifier to say that we want one or more of these upper or lowercase letters So we're still working on the first email address here We have our upper and lowercase letters here, and now we want to match that at symbol So I'll just put in a literal at symbol and now for the domain name here I'll just do a another search for any upper or lowercase letters So I'll do the same as we did before and then I will do a plus sign for a quantifier to match any Upper lowercase letters after that at symbol and then that's when we hit the end with the dotcom so to match the dotcom we can do a Backslash period for the dot and then we can just fill in a literal com so now we've successfully matched that first address now It looks like it's not matching the second address So let's see why and see if we can mold this to match the second address as well So we can see that the second address has a dot in the first part of the name here So let's add a dot to our first character set so that dots are included in That character set so now it's still not matching that second address, and it's because at the end here We don't have a dot com but a dot edu So in order to search for both. We can use a group like we saw before using open and close parentheses and we can search for either com or Edu okay, so now we are building this up a little bit at a time and we can see that We are now matching our second email address, okay? So now let's see if we can change this to match our third email address here so and our third email Address it looks like before the @ symbol We also have some hyphens and some numbers in the first part here So let's add those to the character set as well so back here after our capital letters. I'm also going to add in digits by doing 0 through 9 and we also want to add a Dash in there as well so that should match everything before the @ symbol now It looks like we also have a dash in our domain here So we'll have to add that in as well so after the @ symbol. We're matching any characters right now it's just lowercase and uppercase, but we can put a dash in there as well and Lastly, it's still not matching because just like the other two instead we have a.net here instead so we can just add In a second or at the end and also include Dotnet so we can see that we built that up a little bit at a time to match all three of our email addresses Now with something like email addresses it can be pretty tough writing your own regular expressions from scratch But there are a lot of these available online and once we learn how to write regular expressions Then we should be able to read them and figure out how they're matching as well now I've always found that reading other people's regular expressions to be a lot harder than writing them But let's take a look at one and see if we can do this so I have an expression here that I pulled off line That matches email addresses and let's paste this in here And see if we can read through and see what this is matching So we can see that the one that I got offline does match all three of my email addresses here now Let's look through this so we can see that It's somewhat similar to what we had before but first we have a character set here And it's a pretty large character set and it matches lowercase uppercase Any number and underscore a Period a plus sign or a hyphen And then the plus sign here says that we want to match one or more of any of those characters And we match one or more of those characters all the way up until we hit an @ sign And then after the @ sign we have another character set here and in this character set we have Lowercase letters uppercase letters any digits and also a hyphen now I don't know a lot about email addresses, but I'm assuming that since they left out the underscore the period and the plus sign that were in the first part of the email address, I'm Assuming that those aren't allowed in the domain so then we have a plus sign After that character set which means that we're matching one or more of any of those characters all the way up until we reach this literal dot and that literal dot is escaped with a Backslash and then after the dot we have another character set here and this character set is any lowercase letter any uppercase letter any digits Any or a period and then that is followed by a plus sign which matches one or more of anything in that character set So just like I did with the phone numbers if we open up our data file here with this Regular expression that we've typed in then we can see that it does match all of the email addresses in this data file as well, so we've Got an expression that will match email addresses fairly well so doing what we just did and reading through a regular expression Written by other people is probably the hardest part of all this, but if you walk through it bit by bit Then you should be able to break down just about any pattern, okay So the last thing that I'd like to look at in this video is how to capture information from groups now We've already seen how to match groups But we can actually use the information and capture from those groups so to show an example of this I'm going to open up a file here with some URLs. Okay, so we can see here that some of the URLs are HTTP some are HTTPS Also some of these have WW before the domain name and some do not So let's say that you had a list of a lot of different URLs within your document and you only wanted to grab the domain name and The toplevel domain which is dotcom or gov so for example out of all these domains you only wanted to grab Google.com or quarry MS Calm or youtube.com or nasa.gov, and you just wanted to ignore everything else So let's see how we can do this so first Let's write an expression that actually matches these URLs So let me get rid of the one that we currently have now First to match this we can say all of these start with with HTTP and then the S is Optional so we can say s and then put in a question mark to say that we want to match 0 or 1 for the s and then after that optional s we want a colon forward slash forward slash so at this point some of these domains have a Www.affordablecomm.com So now you can see on all of our URLs. We've matched up to the domain name so now to complete this I'm just going to say any word character so backslash W And I will put in a plus sign to say one or more of those word characters and then We get here to the top level domain So we want to match a literal dot so we'll do a back slash dot and then for the rest of that top level domain I will just do any word character one or more times so we can do a Word character with a plus sign to do one or more okay, so we can see that this matches all of our URLs But the point here was to use our groups to capture some information from our URLs so let's capture the domain name and the Toplevel domain which is the dotcom or the dot gov and things like that so to capture these sections? We can just put them in a group by surrounding them in parentheses So what we want to group here is our domain name and the domain name is this part right here this string of one or more word characters So I'm just going to wrap those in parentheses and create a group And we've seen that before and now we also want to put the toplevel domain and a group as well that is the dotcom or The dot gov so we can put a parentheses around That dot and then also around the ending there that is the string of one or more or characters, okay? So we can see that we're still matching all of our URLs here But now we have three different groups so our first group is just that optional wwr Second group is the word characters that make up our domain name and the third group is that toplevel domain now There's also an implicit group 0 and group 0 is. Everything that we captured so in this case It's the entire URL, so now let's get to the cool part about this So let me show you what we can do now that we've captured these so we can use something called a back Reference to reference our captured group so for example here an atom we have the ability to Replace our matches we can see down here that we can replace So let's replace all of our matches with just the literal text group 1 and then a colon and then a dollar sign 1 now this dollar sign 1 is a reference to our first group now sometimes This is a back slash But for some reason and atom they use a dollar sign so if I do a replace all here Then we can see that it replaced our matches with this literal text group 1 But then it also replaced the dollar sign 1 with our first captured group and the first capture group is that optional? Wwww we can see that it shows up and for ones that didn't it doesn't have anything so let me undo this and now let's replace our matches with the second group and now the second group should be the domain name so now if I do a Replace all now then we can see that now it says group two is Google Corps EMS YouTube and NASA and if I undo that and Replace this with the group three then the group three should give us our toplevel domain so our group 3 is the dotcom comm Gov things like that So let me undo this one more time so now that we know how to use those back references Then we can actually take our regular URLs and clean them up like we meant to from before So we could convert these to a cleaned up version without the HTTP or the WW just by replacing our matches with the domain name which is group 2 Followed by the toplevel domain which is group 3 So now if I replace all of our selections with those two Then we can see that replaced all of our URLs with just the domain name and the toplevel domain so you can imagine if you had a lot of Information like this that you needed to clean up or modify in some way Then knowing how to match these groups with regular expressions could save you a ton of time with doing things like this ok So I think that's gonna do it for this video now There's a lot of advanced features that we could go over with regular expressions as well So if anyone is interested in learning more then I could put together an advanced video covering those topics in the near future But hopefully now you feel comfortable with being able to read and write these regular expressions that we went over in this video But if anyone does have any questions about what we covered in this video Then feel free to ask in the comment section below, and I'll do my best to answer those And if you enjoy these tutorials and would like to support them Then there are several ways you can do that the easiest ways to simply like the video and give it a thumbs up and also It's a huge help to share these videos with anyone who you think would find them useful And if you have the means you can contribute through patreon and there's a link to that page in the description section below Be sure to subscribe for future videos, and thank you all for watching You
