With timestamps:

00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - how to use a popular python Library
00:05 - called python. EnV and this can be used
00:08 - to manage environment variables for our
00:10 - python projects now in some previous
00:12 - videos I talked about using environment
00:14 - variables for sensitive information like
00:16 - API keys or database passwords and in
00:19 - those videos I showed how we can set
00:21 - environment variables on Mac or Windows
00:24 - and then use those within our python
00:26 - code so that sensitive information isn't
00:29 - visible Within the code itself and this
00:31 - is a great Habit to get into uh because
00:34 - you never want to leak your passwords or
00:36 - API keys by accident by hardcoding them
00:39 - into your scripts and this is why using
00:42 - environment variables is so important
00:44 - and with a library like EnV we're going
00:47 - to be able to keep these environment
00:48 - variables within our project which is
00:51 - majorly beneficial for multiple
00:53 - different reasons so first of all this
00:54 - is going to be crossplatform uh so we
00:56 - don't have to worry about the different
00:58 - ways of setting up Environ variables on
01:00 - Mac or Windows or Linux uh we can simply
01:04 - just use the same method regardless of
01:06 - operating system uh now second
01:08 - environment variables are going to be
01:10 - set at the project level and not
01:12 - systemwide and this is going to avoid
01:14 - conflicts with other projects so it's
01:16 - extremely common to have you know an API
01:19 - key for specific projects and instead of
01:21 - needing to keep track of all these on a
01:24 - systemwide level using the previous
01:26 - methods that we've seen before with
01:28 - python. EnV we can simply have an API
01:31 - key environment variable that is
01:33 - specific to each project so let's go
01:36 - ahead and get started and take a look at
01:37 - some examples to see how this works and
01:39 - how easy it is to use so first of all
01:41 - we're going to need to install EnV using
01:44 - pip so I'm here within my terminal I'm
01:46 - just going to say pip install and this
01:49 - is python
01:52 - d.v so let's install that and now let's
01:55 - say that we have a new python project so
01:57 - right now I have a project directory uh
02:00 - in on my desktop that contains a single
02:02 - empty python script and I'm already
02:05 - navigated to this directory so if I look
02:08 - at the current directory we can see that
02:10 - it's just on my desktop it's called EnV
02:13 - tutorial and if I list the files in here
02:16 - we simply just have a test.py so now let
02:19 - me go ahead and open up VSS code so now
02:23 - within this project let's say that we're
02:25 - going to have some information that we
02:26 - don't want to be visible within the code
02:28 - itself so to do this we're going to
02:30 - create a EnV file so over here in my uh
02:35 - file explorer I'm just going to create a
02:38 - EnV file and that's going to be blank
02:40 - for now and now this next part is
02:42 - extremely important if you plan on
02:44 - keeping sensitive information in your
02:46 - EnV file uh which is one of its main use
02:49 - cases then you want to be absolutely
02:51 - sure that if you're using Version
02:53 - Control like git that you do not commit
02:56 - this file to the repository uh because
02:58 - the whole point of not having the
03:00 - sensitive information in the codee
03:02 - itself is so that it the code can be
03:04 - shared without having that information
03:06 - be visible now if you're using something
03:09 - like git uh the first thing that you're
03:11 - want to going to want to do is create a
03:13 - dog ignore file and add this Dov file uh
03:17 - so that it ex it is ignored when we make
03:20 - our commits because otherwise if you
03:22 - commit this to the repository and push
03:24 - it up to something like GitHub uh then
03:26 - that defeats the purpose because people
03:28 - will just have access uh to this file
03:30 - and be able to see all the sensitive
03:32 - information so what we're going to want
03:33 - to do here is we're going to want to
03:35 - create
03:37 - a.get ignore file and within here we're
03:41 - going to ignore. EnV now speaking of
03:45 - good habits to get into uh I create
03:47 - these dog ignore files for just any
03:50 - project just in case I decide at a later
03:52 - time that I'm going to push this up
03:54 - somewhere and then that way I don't have
03:56 - to worry about it now one website that
03:58 - you can go to that I have pulled up here
04:01 - it will help you create get ignore files
04:04 - uh this is uh T
04:07 - o.com Ford developers SLG ignore and
04:10 - I'll put a link to this in the
04:11 - description section below and it can
04:14 - help you create your get ignore files
04:16 - based on what you're using so for
04:18 - example I'm doing a python project so I
04:21 - can just type in Python here and add
04:24 - that whoops that says python vanilla let
04:26 - me change that and select Python and I'm
04:29 - also on Mac OS so if I go to Mac OS here
04:33 - uh then I can add that as well and then
04:35 - I can create that and we can see here
04:37 - that it creates a get ignore file for us
04:39 - and you know we can see the top section
04:41 - here is for Mac OS and it ignores files
04:44 - like DS store and things like that so we
04:48 - don't have any unneeded files in our git
04:50 - repository but with that said let's get
04:52 - back to looking at how to use this uh
04:55 - python. EnV package so now that we have
04:58 - that listed in our G ignore file I'm
05:00 - going to close that down and now let's
05:03 - see how we can use this EMV file to hold
05:05 - our sensitive information so let's say
05:08 - that we have an API key now we can
05:10 - simply add this in uh I can just say API
05:13 - key is equal to ABCD 1 2 3 4 something
05:18 - like that and we'll look more at the
05:19 - syntax and what's allowed in this EnV
05:22 - file in just a second but for now let's
05:24 - see how easy it is to load this into our
05:26 - script so I'm going to open up our uh
05:29 - test script here now first we'll want to
05:31 - import the uh load. EnV function from
05:35 - this module so to do this we can say
05:38 - from. EnV import and this is
05:43 - load. EnV and then we can load ourv file
05:47 - into environment variables just by
05:50 - calling that function so I'll say load.
05:54 - EnV call that function and save that and
05:57 - simply by running that those values use
05:59 - within our EnV file will be set as
06:02 - environment variables that we can access
06:04 - now the most common way to access these
06:06 - is by using the OS module so let me go
06:08 - ahead and import that so here at the top
06:10 - of the file I'll do an import of os and
06:14 - now let's see if we can access that API
06:16 - key environment variable so I'll create
06:19 - a new variable here and just say
06:21 - os.it EnV and we will load that in we
06:26 - called that API key I believe and now
06:29 - let's simply print this out so we'll
06:31 - print out that API key that we just
06:34 - created and if I run this then we can
06:37 - see that we have this down here as
06:40 - abcd1234 so we can see that we have
06:42 - access to that API key but that we
06:44 - didn't need to hardcode it into our
06:45 - script so nobody can uh see it publicly
06:49 - and for a quick rundown
06:51 - onv it's pretty much as simple as that
06:54 - uh but let's also look at a few tips and
06:56 - examples that may come in handy and also
06:59 - a bit about the syntax of this EnV file
07:01 - so let me open this back up now the
07:04 - syntax of this file is very similar to
07:06 - bash uh which is what I used in my
07:09 - previous Mac video showing how to set
07:11 - these environment variables so first of
07:13 - all there are no spaces around the equal
07:15 - sign in variable assignments as we can
07:18 - see here so we don't put a space like we
07:21 - would in Python we just want to keep
07:23 - those uh Al together now we do have the
07:25 - ability to add comments um they can
07:28 - either be at the start of a line or at
07:31 - the end of a line um so for example I
07:34 - could um put this on a new line up here
07:38 - and say um you know a API credentials
07:41 - and then if I had multiple credentials
07:43 - then we can also add them at the end of
07:45 - a line uh so for example I could say uh
07:48 - key for Google Maps or something like
07:51 - that and if I go back to my script and
07:54 - run this then we can see that those
07:55 - comments um didn't mess with the
07:57 - functionality at all now another thing
07:59 - that I wanted to point out uh is that
08:01 - all of these values are loaded in as
08:03 - strings uh so if you're loading in a
08:05 - number or something like that then
08:07 - you'll need to specifically cast that to
08:09 - the data type that you need if you want
08:11 - it to be loaded in as something else so
08:13 - if this API key was only numbers then we
08:16 - could cast that to an integer uh like so
08:20 - but this one has some uh characters in
08:23 - there so that would throw an error in
08:25 - this instance now we're also allowed to
08:27 - uh have some spaces in our values uh so
08:31 - for example if I created a another value
08:34 - here called user and if I wanted to set
08:37 - that equal to Corey schaer then I could
08:40 - do it like this so this is allowed just
08:43 - as is and we can see here that we have a
08:45 - blank line between my API key and the
08:47 - user variable and that's completely fine
08:50 - also uh you can use you know these blank
08:53 - lines to organize your variables in the
08:55 - different sections now my own personal
08:57 - preference when it comes to any values
08:59 - that have spaces in in them is to wrap
09:02 - them in quotes So something like this I
09:04 - would personally um put quotes here when
09:08 - it has a space uh just so that I can uh
09:12 - more easily see what's going on there
09:14 - and that should work fine as well uh now
09:17 - this points out another problem that
09:18 - I've run into before when working on a
09:21 - project that I want to show you now so I
09:24 - have this uh user set to Corey Schaffer
09:27 - with caps and a space between it
09:29 - um but if I go back to my script and if
09:34 - I load in this user so I'll just say
09:38 - user is equal to and instead of the API
09:41 - key we'll go ahead and get that user
09:44 - variable that we created and now let's
09:46 - print that out instead if I save this
09:49 - and run it then you can see that the
09:51 - value that I get down here is Corey Ms
09:54 - uh with no spaces it's all lowercase um
09:57 - so that's a bit confusing that's not
09:59 - what I added to my uhv file and this
10:02 - could be one of those things that kind
10:03 - of racks your brain and causes a lot of
10:05 - debugging uh before figuring out what's
10:07 - going on but basically all that's
10:10 - happening here is that there's nothing
10:11 - wrong with our EnV file I actually
10:14 - already have an environment variable on
10:15 - my machine with this value that's set
10:18 - systemwide andv doesn't override these
10:21 - existing environment variables by
10:23 - default uh so this is so that the
10:26 - existence of one of these EnV files
10:29 - doesn't accidentally override values
10:31 - from one machine to another uh so we
10:33 - have two options here of what we can do
10:36 - the first option is to Simply change the
10:38 - variable name uh that we're using within
10:41 - the EnV file or we can explicitly tell
10:44 - load. EnV uh to override existing
10:48 - environment variables so to do that
10:50 - second option I could simply come up
10:52 - here to that function and say override
10:55 - is equal to true and let me fix my
10:58 - spacing here
10:59 - and if I save that and run it then we
11:02 - can see that now we get the value that
11:04 - we had in that EnV file but personally
11:06 - if I ever run into this problem uh I
11:08 - don't like overwriting the systemwide
11:11 - variables so what I'm going to do is I'm
11:13 - going to remove this override here and
11:18 - I'm simply going to uh change the
11:20 - variable name that we're using within
11:22 - that file so if I go back here then
11:26 - instead of user let's just call this
11:28 - username or something like that and
11:30 - since I don't have a systemwide variable
11:32 - called username uh this should work as
11:36 - expected okay and just a couple more
11:39 - tips about the syntax here uh like I
11:41 - said any of these values uh with a space
11:44 - I like to have wrapped in quotes and if
11:46 - I wanted to have a space at the
11:48 - beginning uh or end of that string then
11:51 - it's actually necessary to put it in
11:53 - quotes So what I mean by that was is if
11:56 - I had a space here then I would have to
11:58 - put that in quotes quot because it's not
12:01 - valid without that now speaking of
12:03 - quotes there's actually a difference
12:05 - between single and double quotes uh
12:08 - anything that you put inside single
12:09 - quotes is treated literally and putting
12:12 - something in double quotes allows us to
12:14 - use some special characters so for
12:16 - example let's say that we had a variable
12:19 - that was multiple lines of text um one
12:22 - way that we could do this is to Simply
12:24 - put it within quotes and make it make it
12:27 - multiple lines so let's look at an
12:29 - example of this uh for example let's say
12:31 - that I had an address uh now one way I
12:34 - could do this is I could use uh single
12:37 - quotes here to treat this as literal
12:39 - text and now let's just do um you know
12:43 - one two three uh fake Street then go to
12:46 - the next line here and just do uh My
12:49 - Town West Virginia and now let's see if
12:51 - this worked properly so I'll go back
12:54 - here um now we have an address so let's
12:58 - load that in as
13:00 - well and hopefully whenever we print
13:02 - this out we will get that two lines um
13:07 - that we typed in so we can see that
13:09 - python does print that out as two lines
13:11 - so we can see that that works but if we
13:14 - didn't want this to take up multiple
13:16 - Lines within the EnV file uh then we
13:19 - could just use a new line character uh
13:21 - like we've probably seen within python
13:23 - but to do this we would have to use uh
13:25 - double quotes so let's go back here and
13:31 - make this uh double quotes and now we
13:35 - can use some special characters so one
13:38 - of these is going to be the new line
13:39 - character just like in Python that's uh
13:41 - back sln and now this will print out the
13:45 - address on multiple lines let's go ahead
13:47 - and test this real quick we can see that
13:49 - that still works so it is important to
13:51 - know the differences between single
13:53 - quotes and double quotes uh especially
13:55 - since the EnV files are used for
13:57 - passwords and a lot of passwords can
13:58 - have special characters in them uh so
14:01 - that's something that you'd want to wrap
14:02 - in single quotes so that the password is
14:05 - inter is interpreted literally so that
14:07 - it doesn't um you know accidentally
14:09 - interpret something like a back slash n
14:11 - as a new line character now the last
14:13 - quick thing that I want to cover here is
14:15 - variable expansion so just like in bash
14:18 - we can use variables but to use them in
14:20 - the EnV file we'll have to surround them
14:23 - in curly braces so let's say that my
14:27 - username here let's set that as Corey M
14:30 - shaer and I wanted to reuse this within
14:33 - other variables so for example let's say
14:36 - that uh I wanted to set an email and I
14:40 - wanted it to be my username at gmail.com
14:43 - so the way that we're going to use
14:44 - variable expansion here is we're going
14:47 - to need a dollar sign and then curly
14:50 - braces and then the variable that we
14:53 - want to expand and then we can say
14:57 - gmail.com and that will add in that
14:59 - corium schaer there so if I have that
15:01 - correct syntax then I should be able to
15:03 - go back here and let's just go ahead and
15:06 - grab the email as that user instead uh
15:10 - just to speed things up here and we can
15:12 - see here that it gives the correct email
15:15 - address um using that variable expansion
15:18 - and with the variable expansion as well
15:20 - um we can wrap this in quotes also see
15:23 - if that still works and we can see that
15:25 - that still works as well um so we can
15:28 - use that with within quotes as well if
15:30 - we had some spaces in here okay so I
15:32 - think that's going to do it for this
15:33 - video uh just a quick video on um how to
15:36 - get this up and running I think this is
15:38 - a lot better than uh the ways that we've
15:40 - looked at before um but hopefully now
15:42 - you have a good idea for how you can use
15:44 - python. EnV and also why it's so useful
15:47 - for different projects and this is
15:49 - actually my go-to library now when
15:52 - working with environment variables and
15:53 - you'll likely see me using this a lot in
15:55 - future tutorials when I have the need
15:58 - for environment variables in my project
16:00 - now there's actually one that I'll be
16:02 - releasing here soon where I use EnV to
16:05 - hide my sensitive information when I
16:07 - show how I used python to automate some
16:10 - bill payments of mine uh so be sure to
16:12 - uh subscribe to the channel if you want
16:14 - to be notified when I release those
16:16 - future videos but if anyone has any
16:18 - questions about what we covered in this
16:19 - video then feel free to ask in the
16:21 - comment section below and I'll do my
16:23 - best to answer those and if you enjoy
16:24 - these tutorials and would like to
16:26 - support them then there are several ways
16:27 - you can do that the easiest ways to
16:29 - Simply like the video and give it a
16:30 - thumbs up also it's a huge help to share
16:32 - these videos with anyone who you think
16:33 - would find them useful and if you have
16:35 - the means you can contribute through
16:37 - patreon or YouTube and there are links
16:39 - to those pages in the description
16:40 - section below be sure to subscribe for
16:42 - future videos and thank you all for
16:44 - watching

Cleaned transcript:

hey there how's it going everybody in this video we're going to be learning how to use a popular python Library called python. EnV and this can be used to manage environment variables for our python projects now in some previous videos I talked about using environment variables for sensitive information like API keys or database passwords and in those videos I showed how we can set environment variables on Mac or Windows and then use those within our python code so that sensitive information isn't visible Within the code itself and this is a great Habit to get into uh because you never want to leak your passwords or API keys by accident by hardcoding them into your scripts and this is why using environment variables is so important and with a library like EnV we're going to be able to keep these environment variables within our project which is majorly beneficial for multiple different reasons so first of all this is going to be crossplatform uh so we don't have to worry about the different ways of setting up Environ variables on Mac or Windows or Linux uh we can simply just use the same method regardless of operating system uh now second environment variables are going to be set at the project level and not systemwide and this is going to avoid conflicts with other projects so it's extremely common to have you know an API key for specific projects and instead of needing to keep track of all these on a systemwide level using the previous methods that we've seen before with python. EnV we can simply have an API key environment variable that is specific to each project so let's go ahead and get started and take a look at some examples to see how this works and how easy it is to use so first of all we're going to need to install EnV using pip so I'm here within my terminal I'm just going to say pip install and this is python d.v so let's install that and now let's say that we have a new python project so right now I have a project directory uh in on my desktop that contains a single empty python script and I'm already navigated to this directory so if I look at the current directory we can see that it's just on my desktop it's called EnV tutorial and if I list the files in here we simply just have a test.py so now let me go ahead and open up VSS code so now within this project let's say that we're going to have some information that we don't want to be visible within the code itself so to do this we're going to create a EnV file so over here in my uh file explorer I'm just going to create a EnV file and that's going to be blank for now and now this next part is extremely important if you plan on keeping sensitive information in your EnV file uh which is one of its main use cases then you want to be absolutely sure that if you're using Version Control like git that you do not commit this file to the repository uh because the whole point of not having the sensitive information in the codee itself is so that it the code can be shared without having that information be visible now if you're using something like git uh the first thing that you're want to going to want to do is create a dog ignore file and add this Dov file uh so that it ex it is ignored when we make our commits because otherwise if you commit this to the repository and push it up to something like GitHub uh then that defeats the purpose because people will just have access uh to this file and be able to see all the sensitive information so what we're going to want to do here is we're going to want to create a.get ignore file and within here we're going to ignore. EnV now speaking of good habits to get into uh I create these dog ignore files for just any project just in case I decide at a later time that I'm going to push this up somewhere and then that way I don't have to worry about it now one website that you can go to that I have pulled up here it will help you create get ignore files uh this is uh T o.com Ford developers SLG ignore and I'll put a link to this in the description section below and it can help you create your get ignore files based on what you're using so for example I'm doing a python project so I can just type in Python here and add that whoops that says python vanilla let me change that and select Python and I'm also on Mac OS so if I go to Mac OS here uh then I can add that as well and then I can create that and we can see here that it creates a get ignore file for us and you know we can see the top section here is for Mac OS and it ignores files like DS store and things like that so we don't have any unneeded files in our git repository but with that said let's get back to looking at how to use this uh python. EnV package so now that we have that listed in our G ignore file I'm going to close that down and now let's see how we can use this EMV file to hold our sensitive information so let's say that we have an API key now we can simply add this in uh I can just say API key is equal to ABCD 1 2 3 4 something like that and we'll look more at the syntax and what's allowed in this EnV file in just a second but for now let's see how easy it is to load this into our script so I'm going to open up our uh test script here now first we'll want to import the uh load. EnV function from this module so to do this we can say from. EnV import and this is load. EnV and then we can load ourv file into environment variables just by calling that function so I'll say load. EnV call that function and save that and simply by running that those values use within our EnV file will be set as environment variables that we can access now the most common way to access these is by using the OS module so let me go ahead and import that so here at the top of the file I'll do an import of os and now let's see if we can access that API key environment variable so I'll create a new variable here and just say os.it EnV and we will load that in we called that API key I believe and now let's simply print this out so we'll print out that API key that we just created and if I run this then we can see that we have this down here as abcd1234 so we can see that we have access to that API key but that we didn't need to hardcode it into our script so nobody can uh see it publicly and for a quick rundown onv it's pretty much as simple as that uh but let's also look at a few tips and examples that may come in handy and also a bit about the syntax of this EnV file so let me open this back up now the syntax of this file is very similar to bash uh which is what I used in my previous Mac video showing how to set these environment variables so first of all there are no spaces around the equal sign in variable assignments as we can see here so we don't put a space like we would in Python we just want to keep those uh Al together now we do have the ability to add comments um they can either be at the start of a line or at the end of a line um so for example I could um put this on a new line up here and say um you know a API credentials and then if I had multiple credentials then we can also add them at the end of a line uh so for example I could say uh key for Google Maps or something like that and if I go back to my script and run this then we can see that those comments um didn't mess with the functionality at all now another thing that I wanted to point out uh is that all of these values are loaded in as strings uh so if you're loading in a number or something like that then you'll need to specifically cast that to the data type that you need if you want it to be loaded in as something else so if this API key was only numbers then we could cast that to an integer uh like so but this one has some uh characters in there so that would throw an error in this instance now we're also allowed to uh have some spaces in our values uh so for example if I created a another value here called user and if I wanted to set that equal to Corey schaer then I could do it like this so this is allowed just as is and we can see here that we have a blank line between my API key and the user variable and that's completely fine also uh you can use you know these blank lines to organize your variables in the different sections now my own personal preference when it comes to any values that have spaces in in them is to wrap them in quotes So something like this I would personally um put quotes here when it has a space uh just so that I can uh more easily see what's going on there and that should work fine as well uh now this points out another problem that I've run into before when working on a project that I want to show you now so I have this uh user set to Corey Schaffer with caps and a space between it um but if I go back to my script and if I load in this user so I'll just say user is equal to and instead of the API key we'll go ahead and get that user variable that we created and now let's print that out instead if I save this and run it then you can see that the value that I get down here is Corey Ms uh with no spaces it's all lowercase um so that's a bit confusing that's not what I added to my uhv file and this could be one of those things that kind of racks your brain and causes a lot of debugging uh before figuring out what's going on but basically all that's happening here is that there's nothing wrong with our EnV file I actually already have an environment variable on my machine with this value that's set systemwide andv doesn't override these existing environment variables by default uh so this is so that the existence of one of these EnV files doesn't accidentally override values from one machine to another uh so we have two options here of what we can do the first option is to Simply change the variable name uh that we're using within the EnV file or we can explicitly tell load. EnV uh to override existing environment variables so to do that second option I could simply come up here to that function and say override is equal to true and let me fix my spacing here and if I save that and run it then we can see that now we get the value that we had in that EnV file but personally if I ever run into this problem uh I don't like overwriting the systemwide variables so what I'm going to do is I'm going to remove this override here and I'm simply going to uh change the variable name that we're using within that file so if I go back here then instead of user let's just call this username or something like that and since I don't have a systemwide variable called username uh this should work as expected okay and just a couple more tips about the syntax here uh like I said any of these values uh with a space I like to have wrapped in quotes and if I wanted to have a space at the beginning uh or end of that string then it's actually necessary to put it in quotes So what I mean by that was is if I had a space here then I would have to put that in quotes quot because it's not valid without that now speaking of quotes there's actually a difference between single and double quotes uh anything that you put inside single quotes is treated literally and putting something in double quotes allows us to use some special characters so for example let's say that we had a variable that was multiple lines of text um one way that we could do this is to Simply put it within quotes and make it make it multiple lines so let's look at an example of this uh for example let's say that I had an address uh now one way I could do this is I could use uh single quotes here to treat this as literal text and now let's just do um you know one two three uh fake Street then go to the next line here and just do uh My Town West Virginia and now let's see if this worked properly so I'll go back here um now we have an address so let's load that in as well and hopefully whenever we print this out we will get that two lines um that we typed in so we can see that python does print that out as two lines so we can see that that works but if we didn't want this to take up multiple Lines within the EnV file uh then we could just use a new line character uh like we've probably seen within python but to do this we would have to use uh double quotes so let's go back here and make this uh double quotes and now we can use some special characters so one of these is going to be the new line character just like in Python that's uh back sln and now this will print out the address on multiple lines let's go ahead and test this real quick we can see that that still works so it is important to know the differences between single quotes and double quotes uh especially since the EnV files are used for passwords and a lot of passwords can have special characters in them uh so that's something that you'd want to wrap in single quotes so that the password is inter is interpreted literally so that it doesn't um you know accidentally interpret something like a back slash n as a new line character now the last quick thing that I want to cover here is variable expansion so just like in bash we can use variables but to use them in the EnV file we'll have to surround them in curly braces so let's say that my username here let's set that as Corey M shaer and I wanted to reuse this within other variables so for example let's say that uh I wanted to set an email and I wanted it to be my username at gmail.com so the way that we're going to use variable expansion here is we're going to need a dollar sign and then curly braces and then the variable that we want to expand and then we can say gmail.com and that will add in that corium schaer there so if I have that correct syntax then I should be able to go back here and let's just go ahead and grab the email as that user instead uh just to speed things up here and we can see here that it gives the correct email address um using that variable expansion and with the variable expansion as well um we can wrap this in quotes also see if that still works and we can see that that still works as well um so we can use that with within quotes as well if we had some spaces in here okay so I think that's going to do it for this video uh just a quick video on um how to get this up and running I think this is a lot better than uh the ways that we've looked at before um but hopefully now you have a good idea for how you can use python. EnV and also why it's so useful for different projects and this is actually my goto library now when working with environment variables and you'll likely see me using this a lot in future tutorials when I have the need for environment variables in my project now there's actually one that I'll be releasing here soon where I use EnV to hide my sensitive information when I show how I used python to automate some bill payments of mine uh so be sure to uh subscribe to the channel if you want to be notified when I release those future videos but if anyone has any questions about what we covered in this video then feel free to ask in the comment section below and I'll do my best to answer those and if you enjoy these tutorials and would like to support them then there are several ways you can do that the easiest ways to Simply like the video and give it a thumbs up also it's a huge help to share these videos with anyone who you think would find them useful and if you have the means you can contribute through patreon or YouTube and there are links to those pages in the description section below be sure to subscribe for future videos and thank you all for watching
