alrighty everyone welcome back to another video and I know in the last video I said I was going to be going over project structure in this video but I actually want to save that for a little bit later on because in this one I want to show you some of the updates that I've been working on so first of all as you can probably notice I updated the UI a bit I have these custom app icons that we're going to be building on the left and all of the other kind of system apps and system settings on the right felt a little bit cleaner that way and I also built out a lot of the networking logic so right now what I have is the core server up and running it's live on the back end and I am now connected to it from this machine and just to give you a perspective of um kind of my environment right now I'm sitting in my office right now and I'm recording on my iMac but I also have my laptop running uh or sitting right next to me and it's running this exact software as well so both of these devices are connected to the same network not only that but they are actually connected in a way where they can communicate with one another so in order to demonstrate that I'll show you the first app that I built out and that is this uh chat MVP so this is kind of the ping pong app that I said I was going to write in the last video but I also added some additional functionality as well and that is well might as well show you what's going on right here so in this app um pretty much a basic chat app you can send messages back and forth so right now I'm just sending you know basic text data to my MacBook and another cool thing just some kind of chat functionality I can edit that message if I want and I can also delete it and I know you guys can't see this but I will I'll send a message from my MacBook right there and now let me edit it tuna I'll say tuna Sandy and let me go ahead and delete that all right so there's the demo probably the most boring demo that you ever seen in your life it looks and functions like uh very MVP normal chat app however the very cool thing about this architecture is that even though it looks and functions like a normal chat app there's actually no centralized database being used to store any of this app data all of this app data including these contacts right here and the messages themselves and the delivery statuses all of this is stored directly on the devices themselves and well actually I I lied about that we are logging the blocks let me pull this up in case you want to follow along with this so right now we are logging the blocks which in other words is just like the messages sent back and forth between devices we are logging them on the back end for kind of debugging and development purposes however the um tnbos it doesn't like pull from the back end at all it's purely for debugging purposes and we have that ticket right there to remove that functionality or turn it off by default but yeah I just want to kind of point that out now another cool feature about tnbos that I built in is some fault tolerance logic and yes I know that cool and fault tolerance aren't normally used in the same sense but I want to show you this because well I thought it was cool at least so as you know from the last video the basic architecture of the system is pretty much to have some devices hooked up to a single server and then through that server they can send messages back and forth pretty simple however right now I have my iMac communicating with my laptop and they're connected through two different servers now this isn't necessary for kind of this architecture to work but the reason I have it written that's what this way is because if one of these servers ever goes offline then these devices are still able to communicate with each other and I'll show you in the UI how we can see that so right now let me uh this is kind of cluttery looking all right so right now my iMac is connected through my MacBook through these two networks right here uh VTX and tnb they're pretty much just two servers I spun up and just added these uh you know this little text to give it a shorter identifier but you can see in this top right that those icons have green rings around them and it means that these are pretty much like two channels that you can send data through now what I'm gonna do is I'm gonna go on my MacBook and I'm just gonna completely delete and I'll show you what I'm doing on my MacBook actually I can do it right here so what I'm gonna do is I'm gonna go in my network manager and just completely delete one of these networks I say I'm going to delete tnb completely so whenever I do that you can see that I can still send messages back and forth so yeah I know that this is uh definitely Overkill especially for like a private Network where you're just like uh changing some of your digital picture frames or I don't know making a plant watering system or something but I did think it was pretty cool how these devices can still communicate even if one of the uh nodes or servers between them that allows them to communicate it goes down they still can kind of I don't know almost work organically and find another path between one another so like I said um if you're into fault tolerance uh I thought that was pretty cool at least so with all of that uh yeah pretty cool we have the very basic uh structure MVP build out now in the upcoming videos what I have planned is let's see have a little guide on the right side of my screen here all right so in the next video I'm planning on going through spinning up one of these uh servers right here and I'll also show you how to set up a domain name with SSL I know a lot of people look for that and there's not a lot of great content online for that so I'll take you through that process and then once we have that I'll show you how to connect to your server with tnb OS it's pretty simple you pretty much just hit add Network and I'm sure you can figure all this out just fill in the form and hit submit but we'll go through that process and also um right now we already saw one of these apps the chat app there's another kind of simple University app I called it this isn't functional or anything right now it just says University and that's it and the reason that I wrote this separate app is I just wanted to kind of create this MVP having something else is an app mainly to ensure that I could pretty much write this architecture that supported multiple apps in that I wasn't like hard coding too many things into a single app and then once I added another one I was going to have to go back and rewrite a bunch of stuff yada yada either way not important the point being is that in the upcoming tutorial I'm also going to be building a simple speed test app and all this app is going to do is it's pretty much gonna um well let me pull this up again it's going to be similar to this architecture where you're just going to send like a ping message and it's going to send you back a pong message and it's just going to time how long that takes so we can see how fast this network actually is but in terms of app development what that means is we're going to be designing the protocol in other words the rules for how those two devices communicate with one another should be pretty simple since it's only like one request in response cycle and then we're also going to be designing and building out the UI it's probably only going to be like one component or I don't know one container a couple components but yeah show you how to build a simple speed test app and then after all of that uh we will then hop into some of this tnb OS architecture I'll go through some of these more technical details of exactly how tnbos communicates with the core server and how it keeps track of what other devices are in line so on and so forth and even though a lot of this isn't strictly necessary in terms of app development since you know the idea is to have a lot of this logic abstracted away I did want to go over it because I want to hear all of your feedback on well quite a few things like I said in the last video there are lots of interesting challenges that I came across when building everything out so I want to hear your thoughts on some of the architecture and design patterns especially since to my knowledge nothing like this has really been uh built or nothing that I found online exactly like this so I just want to hear your thoughts and see if I can improve anything and aside from that it's always good to have a solid foundation before you know building too much on top of it but yeah that's uh pretty much all I wanted to cover in this video so as always if anyone has any questions or if anyone gets stuck on anything throughout the series uh there's a Discord Link in the description below I'll also include the links to the GitHub repos both for tnbos which again is a electron react and Redux app and also the core server repo which is a Django application pretty much just allows devices to communicate almost acts as a router in a way and yeah I think that's pretty much it so in the next video we're going to be deploying a server see you then