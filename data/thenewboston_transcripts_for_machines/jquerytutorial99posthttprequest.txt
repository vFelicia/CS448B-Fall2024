hi this is Alex from PHP academy' dorg and welcome to this video tutorial for the new Boston in the last video we looked at HTTP requests in jQuery and how it's similar it's very similar to Ajax functionality we're essentially using our this syntax here and we're using the get HTTP request to send a file sorry variables to this file and then return the data so if you haven't watched the last video go ahead and watch that now in this video we're going to be looking at the difference between get and post and there's not really any difference we're just going to be talking about why we would use it instead of gap and then we're going to be supplying some additional parameters to this as well just so you can see how we pick them up in PHP so the first thing I'm going to do is go ahead and change get to post now remember our original example returned the return the reversed string that we typed in here now because we've changed this to post our get variables here are no longer valid so we're going to also need to go ahead and change them to post okay so let's pull up our browser and refresh the page I'm going to go ahead and type in my name and click go you can see that we've retrieved exactly the same result as when we use to get now if if you have you know written code before either in PHP or another language you'll understand that the difference between get and post is one the security aspect I guess where you don't show you aren't able to modify the variables from the URL and also the length of data that you can send so let's show another example let's say let's say that this text area here with the ID of string was actually a text area field create a text area and we'll break down the input box down there so the ID is going to still be string but we'll just change a few values like the rows and the columns and now we have on our page a text area so first of all it would be more appropriate to use poast in this case because we are allowed to supply a lot more data in here going up to the fact that post now allows us to have this data it's still going to process this data to reverse PHP and it's still going to send this string along as an INT as a variable called input now let's go ahead and also create another field so I'm going to go and break in fact we'll put this in a paragraph here and we'll create another paragraph just up here with the input type of text and we'll give this an ID of name okay so let's go ahead and preview that in our browser we've now got a field here and a field here we're going to send both these with the post HTTP request in Ajax but we're going to send two different values so the first thing we want to do is change or add another variable just up here and I'm going to call that name so we're creating a variable called name now this is equal to and remember we're going to use a selector a hash because we've called this input ID name to reference with a hash and then name and then again dot Val so now we have an additional variable called name which we're going to send along to this reverse dot PHP as well so I'm going to use a comet just after here and we're going to use exactly the same syntax as we did here but this time I'm going to send a variable called name and that's going to be equal to name I'm going to go ahead and change this to string I tend to do this personally I call the variable that I'm passing to PHP the same variable that I've stored in JavaScript now it can get quite confusing but for me this is just the way I prefer to do it as long as you remember that this is the name of the variable and this is the value of the variable the mission can confuse you too much so now what we're doing is we are taking the name and the string so the name from this box here and the string from this box here we are then storing them inside variables in JavaScript we're sending them to reverse dot PHP with a variable named string and the variable name name with the string value and the name value and we're still returning this data here okay so now we're going to go over to reverse dot PHP and we're just going to change how this works it's no longer going to reverse our string but we're just going to relay both bits of information back so additionally we need to check that we have posted the net the string and here we need to check your poster the name so now we have two variables being submitted to this file we need to check both of them have been set we're then going to create two more variables name it is going to equal dollar underscore post name and string is going to equal dollar underscore post string now with regards to security if you're taking anything like this to a live server you have to still be aware that if you're posting data without sanitizing it first you could be allowing yourself into some security problems the best thing to do is if you're you know going to put these into a database or anything use the MySQL real escape string function or at least if you are posting these to a page use the HTML entities function I'm going to leave these out for now I just thought I'd mention it just in case anyone had any problems with this okay so now that we've done this we can go ahead and construct a center that we're going to output so I'm first of all going to say name then says and then the string so now we've passed both these variables and we're going to echo them out in a sentence so we can include of course HTML in here I'm just going to make this italics and I'm going to make the name bold okay so now that we've done that let's go ahead and test this on the page so I'm going to write my name in here and I'm going to write a short sentence in here how are you so when we click go you see we retrieve this information back now you'll notice that there's a problem here and we actually have tags as opposed to the actual interpreted HTML now if we go back to our Ajax JS file you'll see that we use the text function to apply this returned data from a reverse dot PHP into our feedback div area in actual fact instead of using text if you need to you know pass HTML and actually have it render as HTML you need to go ahead and use the HTML functionality so now let's go ahead and just click go again and actual fact that that's going to work so we refresh I'm going to type Alex and hello how are you I'm going to click go and now it says Alex says hello how are you so hopefully with this example you can start to see the more practical applications of using the get and post HTTP requests almost always you're going to use the post HTTP request because you need to allow for sending large amounts of data and also making sure that people don't access your PHP file for example PHP forward slash reverse PHP they could then go ahead and modify the URL to input fields for example Alec equals name and string equals hello for example okay but because we're using post data this isn't possible from the URL bar it all depends on the data you're sending I mean in this case we're sending a text field which could contain a large amount of characters so we need to ensure that this is catered for using the post HTTP request