alright guys welcome back to your 60th C++ tutorial and in this tutorial I want to talk to you guys about class templates so before we learned about function templates but in this tutorial I want to tell you guys aside from just functions being able to use templates entire classes can use templates as well and again by template all I mean is a generic data type so let's go ahead and build it right now so just like before the way you make a template definition doesn't change you go ahead and write template and then inside your angle brackets you write class and I might as well you know start good programming practice and use what people typically use and that's just one capital letter instead of you know a word you can use a word I like using word but since I'm teaching you guys might as well get into a good habit so now after this now we basically made a generic data type we can begin making our class so go ahead and name a class I'm going to name mine Bucky and let's say that well let me add my semicolon before I got before I forget Bucky is going to have two variables now we don't know what those variables are yet whether they're in stubble so I'm just going to name them T my generic data type one is going to be name first and one's going to be name second so now let's throw a couple functions inside Bucky so they're both going to be public might as well go ahead and make our constructor Bucky and in our constructor let's just go ahead and for two numbers set first and second equal to whatever numbers we pass in so T a and T B basically we're passing in two numbers which we don't know what type of numbers they are yet so now let's go ahead and set first equal to a and second equal to B so now these two numbers and Bucky are going to have a value so that's what's going to happen whenever we first build a Bucky object so now after this we can go ahead and you know just add another method like t bigger and all this is going to do is it's going to find out which number is bigger will actually keep this constructor definition right in here well we'll take this bigger function and we'll build outside because there's a couple different rules I want that you guys whenever you build a function template what I say function template what the heck is that whenever you build a function member outside the Declaration of class template so let's go ahead and do that right now and make sure I have all my semicolons in the right place I looks good that's good one down there looks good so far I guess we'll find out later on when I run it but okay now the first thing I want to know is that even though we made a generic type of data right here whenever you have a function member outside the Declaration of the class and remember we said we're going to be building a function called bigger that belonged to the class Bucky but we're going to be doing it outside the class we always need to have that function definition again so go ahead and copy this and paste it I don't know why they made it where you need it again but they did so before every single function you need to have that now here is how you start out building your function members outside the Declaration of the class template you first write your return type and our return type is of course T just our generic return type and then just like before you write what class you're going to be working with so I'm going to be working with Bucky and I'm going to be building a function called bigger but we just can't go ahead and type you know the function body right here we need to do something first right after your class name you need to add angle brackets and add your T right here too and this is because we need to tell C++ at the functions template parameter is the same one that we're going to be using for the class so in order to do that we need to specify that T inside angle brackets right after we class name everything that's kind of weird well I agree with it it is kind of weird and it's kind of stupid too but if you think this is stupid and complicated you're going to have to take it up with the people who made C++ I just teach it for the record I don't think it should be made this way but you know after the class name you need to include that function template parameter again I think it's a stupid way of doing it but hey I didn't make C++ I just teach it so now we can go ahead and you know what well of course this function called bigger is just going to take the two numbers that are in the Bucky class first and second and it's going to find which one is bigger so it's basically going to be the opposite of what we did last time so just go ahead and return and we'll compare if first is bigger than second then return first else return second so this looks good go right now now well I think that's all we have to do for a class so basically we have a class called Bucky now Bucky has two variables in it a first and a second variable now whenever we make a Bucky object that's when we give the first and second variable their values so first is going to be like 10 and second is going to be like 20 and now we have another function just to find out which number is bigger so whenever we call the bigger function it's going to take the first number and the second number which would be like 10 and 20 if 10 is bigger it's going to return 10 if 20 is bigger it's going to return 20 so now let's go ahead and make our Bucky object and run this and let me show you guys how it works so if you think you guys know how to do this you don't because there's one other little weird thing that you have to do you go ahead and make your Bucky object that just as you think you would making Bucky Bucky object and since this is a constructor that takes two parameters first and second we need to give it its two numbers like 69 and 105 and now after this we can go ahead and you know see out bo the bigger and remember this bigger doesn't take those two numbers as parameters since this class already has two variables in it it's just going to go ahead and grab those variables so as you can see in this bigger function we don't need to pass it in those two numbers it already has it so let's go ahead and build an around this and say all right what the heck is this why are we getting an error message that's because whenever well let's read the error message I'll show you guys what it says missing template arguments before Bo whenever we're working with the class template we need to explicitly tell it what type of data we want to substitute for T and we're going to be working with integers because 69 and 105 are integers so between your class name and your object you need to pass in I and T in angle brackets so like I said before before we go ahead and start making these objects if you think you know where you're doing you don't this is what people typically forget so in the last couple tutorials we could have done this it was optional I decided to exclude it well in this tutorial we absolutely need to have it and whenever we do this we're basically saying all right this is what we're going to be substituting for T so if this was double and we made our class object anywhere this class saw T it would plug in double right here these two numbers are doubles when our constructor is made we're going to passing in two doubles whenever you run the function it's going to be a double instead of a T well since we're going to be working with integers we're basically telling our class anywhere you see a T substitute integer for it so that way we can work with you know different types of objects and you know maybe we'll make one class an integer and one plus a double and well let me go ahead and first run this and show you guys that it indeed works 105 is indeed the bigger number and if you don't believe me I'll just change this you know 258 and run it again and show you guys that our program is working correctly so basically there are a couple weird rules the first rule I want to tell you guys is every single function you build you need to precede it with this function template it's kind of weird but it's what you need to do also you need to have the blank generic data type after your class name and this pretty much tells your function that we are indeed working with the classes template parameter which is this one and also the last thing you guys got to watch out for is whenever you make your objects you need to explicitly tell your object what type of data to substitute for T and you do that between your class and your object declaration right here so there are a couple of weird rules again I want to say this if you guys are stuck on templates and this is just way too confusing for you guys all the substitution forget about them you don't need to build it it's just if you want to build a program that takes less code and makes it a little bit easier then you have the option doing this but it isn't a requirement so if you don't completely understand it don't worry about it you can move on and you know you're not going to be lost in C++ so anyways thank you guys for watching don't forget to subscribe don't forget check out my website and I will see you later