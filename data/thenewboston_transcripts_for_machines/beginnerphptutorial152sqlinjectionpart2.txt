the data from here is going to be substituted in so it will look now like this what we can then do so the the data has been substituting through these variables what we can then do is we we run this query and it returns I see the 0 rows or 1 row depending on if the username in the password match so hopefully you understand that at this point now what happens if the user was to enter some some values that actually modify our SQL query which is here so for example let's say the username was inverted a sorry single quotation mark equals no sorry in single quotation mark or two quotation marks equals quotation mark let's just say the user entered that as the as the username and they did the same for the password so because they're free to enter anything in the form we've picked up these variables using this and now we're transferring these variables into here so now username let's just copy it and copy over them pet copy and paste over I mean that's our there and copy and paste that over to there now let's get rid of this because that just showed us and the example so the username is now equal to this value here and the password is also equal to this value in below so let's just look at the highlighted value in blue well this is actually done if I take the blue away you can see it's modified our SQL statement so obviously our users of our website can't see what we're processing inside of PHP but what they can do is fiddle around with the website until they can make a very good guess or an exact guess how our SQL statement is structured now what this query reads is select ID from users where username equals nothing or nothing equals nothing and password equals nothing or nothing equals nothing now nothing equals nothing so that's true and nothing equals nothing so that's true therefore what we're doing is we're returning a row or a couple of rows so let's copy and paste this into our database to see what results we get let's click go okay so we've been returned with our two rows in our database or our two records rather so what we've actually done is just by user input and me demonstrating user input we're going to actually create the application later what we've done is we've returned two rows now so we've entered the password as this as this sum let's just go back to it we've entered the password as this here or the username is this here and the password is this here and we've now automatically gained access to this whatever registration system however we're creating it so this isn't always the case it depends on how its programmed this is why we're going to go through an example program so that's just basically a bit about PHP or SQL injection in general but with PHP obviously it's the same as same vulnerability so now we know that what well now we know what SQL injection is and we've seen an example of them you you know now that a statement can be modified and you can and a statement can be modified to let's say delete records we're not going to go into anything too complex this is just a representation of it but we can do absolutely anything we want to our database more or less so I'm going to talk now just about the first the first way to protect against SQL injection this doesn't actually prevent the user input we're not doing anything in PHP but if we go back to our home and we go to privileges and we edit privileges for our user let's say root our localhost this is what I'm using at the moment now you can see here that we've got ticks for absolutely everything now let's say we were creating a website and we were logging in and well we were connecting to our server and we were also we're also connecting to our database and reading values from a database let's just say we were just just reading values from a database we're not creating anything so we might want to unpick that we might not be altering anything so we might move out and tick that so you can understand uncheck things that you might not want to do so if we might select but we might not insert we might not update or delete and we can get rid of all of these so by getting rid of all of these we've already limited our privileges for this specific user therefore if someone was to come in and try to inject her or change your statement serverside to say delete your entire database then they might not be able to do it because you may have unselected the privileges so at the moment because I'm working on a local computer my privileges are set to everything just in case you know depending on what I need to do so that's one way that you can protect against it so only select the privileges that you absolutely need on the website so if you I mean it's very rare that inside a web application you'd want to say drop your entire database so you can you can you can move this or drop tables you might need to drop tables but you can you can uncheck specific ones so that's something to think about while we carry on with our actual PHP code