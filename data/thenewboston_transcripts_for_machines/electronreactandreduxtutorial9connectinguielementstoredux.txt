already all welcome back and in the last video we went ahead and we set up our modal so now what I want to do is kind of build the next piece of this which is building out these cards so whenever you click one it actually sets either the active account in Redux or Active network it's going to be the pretty much the same exact styling so let's just go ahead and first make a generic select card component and this isn't going to have any of that Redux specific logic at all all it's going to do is it's going to have a certain type of styling whether that card is selected or not and then we'll reuse this whenever we add in that account or network specific logic later on but for now we'll keep it nice and dumb so under components I'm going to make a new directory and I'm going to call it select card in here do my normal component templating stuff component in a Styles file and again this component is named select card so let's go ahead and first write the props that we're going to be passing in so export interface select card props again since I'm defining uh props apparently that makes my IDE lag as usual it's so weird why it always does that interesting actually maybe it's typescript trying to check everything who knows okay now let's see what else we can steal so we are going to be passing in children for this because remember just like our other components the select card is basically just the container that has a state are you selected or are you not now it doesn't really care about what's inside it so that's why whenever we pass in children actually we can do this right now we're just going to say display whatever we pass in right in the middle of this container now another prop that we're going to be passing in is is selected and this is going to be equal to a Boolean and the reason that we are going to passive this in and this is a pretty cool trick that we're going to see in just a second but what we're going to do is we're going to apply this prop to this container right here which is this container now even though we don't have this setup right now I'll show you in just a bit how we can accept or listen for this prop right here and depending on if this is true or false then we're going to have a certain bit of CSS and it's going to be like uh we'll make some like border or background or something some selected State and we'll conditionally apply that CSS if this is true or if it's not we'll just apply the default CSS so that's what we are going to do and then the last thing that I'm going to be passing in here is an on click function and we won't write that functionality right here we're right in the parent component but basically just saying that there is going to be some functionality where when you click this something happens and of course what's going to happen in this case is it's going to convert is selected to true and it's also going to update that state in Redux so again all of this is going to be written in the parent component but we do need to accept the prop right here so we already have the typing for this it's under shared types and it's just called generic void function basically a function that doesn't return anything at all and we're going to be passing that in as on click and then we will just say that in addition to this on click on click all right so what I want to do from here is before we even worried about this selected specific styling I want to go ahead and just paste in my generic styling and I'll just explain real quick what this is so it's pretty much just going to be a um like a transparent card with some padding so on and so forth and then whenever you hover over it it's going to have a slight background kind of like that button that we just styled and the only other kind of special thing about this is on the last child I have margin bottom zero and the reason for that is in our modal we already have a 16 pixel padding all around it so if all of these cards since they're going to stack on each other if we did have a margin bottom on the very last one then we're going to have not only 16 pixels but 12 pixels from this card as well so anyways we're just saying that on the very last card since we already have padding for the modal then you don't need to worry about a margin button for this and yeah there you go so now what we want to do is since we have this generic styling for this card we want to add in some smart logic here to say when this prop that's passed then is selected whenever this is true then we want to apply some special styling and that styling is just going to change the background and the Border a little bit just to give it that selected state so in order to do this the first thing we need to do is import this CSS method from styled components and we are going to create a variable and we'll just say selected mixing and this is equal to a little snippet of CSS and in here is where we could put our select styling right here so again all this is doing is it's changing this gray default border and background to a slight shade of green and I also updated some of these hover properties as well since uh you'll see in a bit but if I didn't have it it just looks a little bit weird whenever we selected or excuse me whenever we hover over the selected card so now what we want to do in this container is basically say whenever this is selected prop is true then we want to apply this mix in so how do we do that well first thing we need to do is we need to accept that prop and how do we do that well we can type it out right here so put those less than and greater than signs or greater than less than signs and then we say what props are we prepared to accept well we're going to be accepting an is selected prop and that type is going to be a Boolean value so now in this component right here or this div we can now use this using that templating language that we saw before dollar sign curly braces and again anything in here you can pretty much just treat as JavaScript so with styled components what we can do is we can actually call a function right inside here and whenever we do this what sound components is going to do is it's going to call this by passing in whatever props we Define right here so since the only prop that we passed in is is selected we can go ahead and destructure that right here and now we can pretty much work with it however we want so all we want to do with is selected variable is we want to say whenever this variable is true then what we can do is we can render out this selected mixin so again all this div is going to do is it's going to listen for this is selected prop and if you see back in the main component that little error that was there it went away because we typed it out properly and it's now ready to accept this prop and then once we pass it through style components is going to call a function to listen to it and for the logic we wrote we just say that whenever it's true then in addition to all this styling we also want to render this CSS as well which is going to give that selected state that nice pretty green background and all right I think that this component is good so what we can do to test it out is go to our account modal and where it said account cards here let's just go ahead and import this select card and we'll just hard code in the value true or false whenever we're passing in this prop but eventually of course that's going to be dynamic but anyways import select card from Maps test select card all right and let's actually let's do this so the select card is props we need to pass in a child element and for that child element what we can do is pass in that identification and again this is going to be dynamic as well but just to have something that we pass in say we're passing that identification and what other props does it take is selected and this is a Boolean so it's selected we'll say that this one is false we'll have one be false one be true just so we can see the difference in styling and now another prop that this takes the last prop is an on click Handler and since we don't have this written yet what we can actually do is import from low Dash and that is lodash nope and this is basically just a function that does nothing we can use it whenever we need to pass in a function but we don't have a one written yet which is this exact case scenario so this all looks good to go and I'm pretty confident that this is going to work so let me pass in True to this one and by the way um for anyone who doesn't know this instead of explicitly passing in true like this you can also write it like this it both means the exact same thing passing in a value is true just a little shorter syntax and now let me see if anything all right so check it out now in our modal we have those select cards and this is the state by default the deselected one and you can see that little hover what I'm talking about right here in the selected state is green background in the little green border and like I said the reason that I added let me show you the reason that I added this hover color as well an explicit background is because well I'll show you how weird it looks if I don't have it so you see how when I don't have it then it changes back to like gray whenever I hover over the selected state so I just thought that was kind of weird so whenever it's selected no matter if I'm hovering over it or not I just always want to keep it that green color and there we go so what I want to do from here is I want to use that select card and from that I'm going to make two specialized components one is going to be called the account select card and the other one is going to be called the network select card so of course let's start with the account one since that's the model we're working on right here and for this can probably just all right let me just close all these okay so a new component and that is going to be called account select card make my component templating all right so we're making a component called a count select card now for this what I'm going to be doing you know what this is so weird I didn't even type any props yet and my IDE already started to lag it knows that I'm about to type my interface wow okay uh account select card props strange okay so the way I'm going to structure this component is I'm only going to be passing in the account number because remember when I said early on that we want to always use the account number when we can because we don't want to be copying this account object over and over in all our apps the source of Truth for the account and by that I mean the account display name and the account display image it's always in that system slice of Redux so from the account number we're going to be pulling everything out using utility functions you're going to see how it works in just a sec but also keep this component pretty lean and since this account select card is a specialized version of this select card let me go ahead and import that right here so import ant component select card all right so instead of container we can just say select card and actually we probably don't even need this Styles file because we got everything styled so I'm just going to delete this entire file okay so select card what props are you taking so we're going to be giving you a selected prop and an on click Handler all right so for this is selected prop what we're going to do is we're going to say if this account number that we pass in one of these accounts if it's equal to the active account number then it means that we should render it as selected if not we'll just render uh the default state which means it is not selected but because we need to pull out that property let me go ahead and steal what we already wrote from here which is our get active account get active account number selector there we go all right get active account number and we also are going to need to import you selector from your Redux and okay so to actually use this in our components we already saw how to do this make a constant called active account number and this is equal to basically that a slice of Redux and now what we can do is since we're going to be passing in an account number for this is selected state right here we're going to say for the prop account number that we passed then just go ahead and check if it is equal to the active account number from Redux and then if so this is going to be true and the card is going to light up as green now another thing that we want to do is we want to say that whenever one of these cards is clicked then we want to set that account number as the active account number in Redux so how do we do that well since we're going to be dispatching that action Creator function we are going to need to use dispatch and we also need to import app dispatch to uh type it out so that dispatch function in order to use it will say const dispatch and it's equal to use dispatch and then the type of this is just app dispatch now instead of writing the logic right in here I want to create a separate click Handler function so I'll say const and you can click and all right so the logic for this is all right so this is what we'll do we'll say that of course if we select an account and it isn't selected yet then you know just go ahead and set this account number to the active account number however if we click a card and it's already selected then what we want to do is just deselect it so we're either going to dispatch an account number or the value of null so in that case let's just go ahead and write this logic and write it like this so if account number equals active account number in other words if this account is already selected then what we want to do is just dispatch do we even get that okay let me go ahead and find in our store manager the function for setting active account number and we'll import that right here import set active account number from apps speed test or manager and then to use this what we're going to do is we're going to dispatch that action Creator function and then for the value that we want to pass in we're just going to pass in null in other words this is just going to deselect it and then as the else statement so this is saying that if you are already selected then just go ahead and deselect it otherwise if you are not selected yet then as the active account number just set the account number whatever we have passed in and we can actually shorten this up a bit where we can say something like this constant payload equals null or we can say does account number equal active account number if so the payload is going to be equal to null otherwise it's going to be equal to account number and then we can just just dispatch that payload all right and then yes this is the on click Handler and I believe that's all right so this is going to take care of our uh basically our smart Logic the only other thing that we need to do now is inside this hear that dog barking all right well if I gotta listen dog bark and then I guess you guys do we'll fight through it together all right now for the content of this select card what I want to do is I want to display that identifier data and I don't think I have it imported yet and for this identification component I believe that we still have to update some things on here as well okay so in here we're just going to be passing in three props and that is what image do we want to display and then what do we want to have for the top text and the bottom text so let's just go ahead and Export interface I'll say a identification props all right so for the bottom text that's going to be a string bottom text same with the top text and then actually the display image is going to be string as well all right so instead of hard coding everything in you are now going to accept a string as bottom text lay image and top text all right now pretty much easy peasy from here this is where we're going to display the bottom text this as the source is where you're gonna use that image or display image prop and then whatever we pass in for top text uh display right there and now that that is all taken care of then we can go ahead and use it right here now to reference that accounts display image and display name I actually wrote a couple hooks to kind of help out with this and the reason I did this is because for the display image the display image is actually optional so what I have is if you don't have any explicit account image set then it's just gonna have like this default placeholder image and also for the display name if you don't have a display name then is a fallback what it's going to use is the account number for a display name and I also have it set up where you can pass in a value and it's going to truncate it to that certain amount so you'll see in just a second what the heck I'm talking about but first let me just go ahead and actually let me do this we'll see what props we need to pass in so bottom text display image and top text bottom text play image and top text and actually for the bottom text I always want this to be the account number so I have this truncate function as well and for this what we'll say is this we're going to truncate the account number and we'll say we're going to show the first 32 characters now for the display image what we can use is this hook right here and I'll make a variable or constant called display image and this is going to be equal to the hook use safe display image and then this is just going to accept the account number and let's go ahead and take a look at what this function is doing so once it gets the account number it's going to select all the account information from System state basically exactly where the account is don't really need to worry about this and it's going to check if that account has a display image already if it does then of course it's just going to use that one if not then it's going to use this default Avatar this default image that I was talking about so it's just a kind of Handy tool because throughout the app there's a lot of different places you use this display image on the chat here here of course it's going to appear right here and I was just rewriting the same exact logic over and over again so that's why I decided to make it a hook in case you all uh wanted to hear that story and now for the display name I have other similar logic so I'll say const display name and this is just equal to use safe display name and if we take a look at this then we're going to be passing in the account number just like we did right here but it also takes a second param and that is the max length and this is just so you don't display the entire account number this is just say uh we'll give it something like 16. all right so again just to take another peek at this what it's going to do is it's first going to look does this account based on this account number does it have a display name already if so then we'll just use that if not then we'll fall back and use the account number as the display name and this max length is just to truncate that account number so we don't display like that big 64 character text since you really don't want to display that too often just delete this and then for our display name we can just use that as top text all right so now each of these account select cards all we need to do is pass in the account number and everything else should be pretty much just working good to go so to render these out what I'm going to do is close everything but this and then we want to render them in that account modal so modal account modals and are right so we can get rid of these those are just like placeholder data that we had and now I want to import two different things the first thing of course are these account cards replace this and aside from that I also want to import this selector right here get accounts so this is going to give you all the accounts from tnb OS so you can you know easily use it in any component so to use this we're actually going to need that reactor Redux U selector and okay so again this account modal what we're going to do is we're going to iterate through all the accounts that we have on our system and for each one we're going to render out this account card for each so the first thing we need to do is make a variable called accounts and this is equal to you selector of get accounts now all of our account data is in here and what I'm going to do now is just make that render function to render each of these account cards out so render account cards all right so actually I think I do need load Ash for something and this is lodash order by okay so the reason that I want this order by function is because whenever I render out these accounts I want to make sure that they're displayed in alphabetical order which they are not right here but uh I'll sort them by the display name alphabetically and I don't know I just think they look a little bit more organized that way so let's do it now another thing that I want to point out is that the way that these accounts are stored right here is it's an object and they're all keyed by the account number however we really don't care about the key we just care about the values of these which are the actual accounts so this is why uh I'll make a variable called ordered accounts and this is going to be equal to object.values so basically the values of that dict in other words just the list of accounts now with this list what I'm going to do is I'm going to order it alphabetically so whenever you use this order by from modash the first thing is what are you trying to order this array right here and what do you want to order by what property well on accounts there is a display name property and that is what I'm trying to order by so now this is going to be a list of accounts that's ordered alphabetically now with that what we can do is just map each of those out to this account select card right here so I'll say return ordered accounts and I'm going to map each one to an account select card and since the only property we care about is the account number you can just destructure that pass that in as a prop there we go all right so this render function is looking good pretty much going to iterate through all the accounts in the system and convert them to account select cards and now the last thing that we need to do is just say render them out render all the account cards in this modal I believe that's all we need to do so let's see how it worked all right looking sweet let me collapse this so we can see if everything's working all right so now hopefully when I click on and select it check it out so uh where is it speed test manager okay pretty sweet so this Linux desktop huh this is interesting too that um I know why so I was wondering why this isn't ordered alphabetically and it is because even though I comes before L apparently it's sorting based on uppercase and lowercase so a little issue that we'll work on later but either way you can see that whenever I click this one for example what's going to happen is it's going to call this dispatch method to set this BBB or BBB as the active account number and now you can see whenever I click it or AAA then it's going to update to dispatch that and whenever I click one of these again it's going to set null so there you go looks like everything is working properly I gotta say this pretty sweet UI pretty proud of this one a lot more proud than my button that is all right so next up what we'll do is we'll tackle this issue right here so right now this identification is being rendered in this top component and whenever it's rendering account content since it now does have an active account number instead of the button it's rendering the spaced items oops the space items in the space items contains this identification component and it's throwing some typescript warnings right now because we typed it out and we didn't pass in any props right here however what I'm actually going to do is kind of restructure things it's just a wee bit and the reason I want to do this is because right here of course in this top card we're using this identification layout and also well I don't have that button anymore but remember that modal that account modal in those account select cards we're also using this I can't account identification element right here now in order to avoid let me see if I can find it the account select card so in both of those places what we are going to be doing is we're going to be uh plucking off the safe display image and safe display name and passing it through to identification and just to avoid having to have that same exact logic in two different places we can abstract it out to an account identification show you in just a second identification okay so new component new Styles file all right actually let me keep this account select card open because I'm going to be stealing some things from it in just a bit so the first thing is probably this right here because in this account identification all I want to do is just pass in the account number like before and these props are called account identification props all right so the purpose of this is basically just to render out this identification object in the more standardized way all right so we also need to pass in this class name and let me predify this all right so first thing we need to do is in for identification then what else truncate basically going to be moving a lot of this logic that's all I'm really doing here and let's see account number it's going to be passed in uh display image and display name we're actually not going to pass those in as props instead what we're going to be doing is using these hooks Hawks all right let me just borrow you real quick all right pretty cool so this is all we're going to do for this account identification and again the reason that we have this is because now in our account select card we can pretty much just delete all of this we can just use this account identification and pass in the account number and because that is going to clean up that component a bit and also in this top element where'd you go where'd you go where'd you go all right and now in the spaced items I want to rewrite a bit of this too since right now you see that we hard coded in this identification object and then this icon well that was kind of just for a placeholder what we really want to do is just be able to pass in any two valid react nodes and then we're just going to render one on the left and one on the right so let's import import react node from react then spaced item props so like I said we're going to be passing in two props right here and then we'll say left content and this is going to be equal to a react node and same thing with the right content foreign class name left content and right content the left content of course is going to be displayed on the left and the right content instead of this icon it's going to be displayed on the right party it up party it up delete what we don't need and that is looking good for spaced items a proper spaced items component so now in here what we can do is this so if we do not have an active account then go ahead and render the button kick off the model so we can select on otherwise instead of returning select items I actually want to split this out just a bit more I'm gonna let's see render active account so so if you do have an active account then we'll just go ahead and render it and the return value for this is just going to be spaced items however space items now gonna take some props and the props that it takes is a left content and a right content now for the left content we are going to be using this account identification that we just wrote so components account identification for that copy this all right so if we have an active account then we want to display the account identification is left content and the account number for that is just the active account number so account number equals active account number and it is saying all right so the reason that we're getting this typescript issue is it's saying string or null is not assignable to type string and that is because it says string is only acceptable here in other words you need to have an account number however this active account number that we're passing in since we're selecting it from Redux and it can technically be string or null then it's uh saying hey if you throw me a null I'm gonna flip out I don't know what to do however what we can do is we can safely add this exclamation mark and the reason that we can do this is because we know in this function whenever we don't have an active account number or in other words whenever it's set to null then we're just going to return the button and never call this function so we're only going to call render active account if we indeed do have an active account number so we can let typescript know that we're always going to have it at this point in time so don't worry about us we I so again on the active account the left portion of this just like you see right here this is going to be this account identification looking good and to the right of this is where we're going to render that pencil icon and whenever we click this this is also going to display that modal so on that note let's first go ahead and import the pencil icon and I believe that icon was in yeah right here so we had that icon in spaced items let me just close some of this out all right so before we had that icon uh styled in space items because we're just using it as kind of a template but now we can move it to where we actually need it which is top so just move all this over and all right so now this icon is a component that we can use in top so we are saying for the right content to want to display the icon path for this is going to be this pencil icon and for the size we'll say 28 pixels actually don't need pixels just 28 right there now holy moly okay actually I think what you do is you pass in this like that all right that's a little bit better all right so now the last step for this left section right here is we need to add that on click Handler so whenever we click this pencil icon then it pops open the modal as well however I have a feeling that we need to do something a little bit unique for this okay if I remember correctly yeah it's not Auto completing so I already know there's going to issue but anyways the reason that we can't add this on click to this icon directly let me just make sure well we can but it's going to throw some errors it's uh not the best practice um I remember reading before why we weren't able to add this on click right on this icon directly and that is because um the material icons Library they specifically did not allow this because they uh said that this icon is supposed to be a display element only and you should only add on click to like regular clickable elements like links and buttons so on and so forth so that's why it's saying hey um this prop is going to throw some errors now to get around this for the time being what we can do is uh let's just do this you can just make a div and in this div is where we're going to put our icon and then we can just move this on click Handler to the div entionally what we probably want to do is make a separate like clickable icon where we can just pass in this pencil and I say this because we are basically going to end up rewriting the same exact thing one for rendering the active account which we have right here and then the other for rendering the Active network by the way let's make sure that works looking good and you know just to uh keep everything nice and dry it'll probably be best to eventually split this out into its own component but for right now everything appears to be working so let me just fix these errors it's kind of annoying me all right so I think we're to a pretty good stopping point right now got all the account logic working on the left so whenever we well what we can do is we can have no account this is the default we click this it pops open this modal and we can just select one and this updates our Redux State and then once we have one selected got this nice little pencil icon to pop that open again and yeah looking pretty sweet so one other thing I saw is this is probably too much text on the bottom so I'm going to trim that down a little bit and once that's done we're ready to start moving on to this network section so uh a lot of work so far but to be honest I'm kind of digging this little app right here pretty cool speed test app so I'm pumped uh good job so far and see you in the next video