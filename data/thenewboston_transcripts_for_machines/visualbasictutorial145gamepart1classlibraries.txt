hello YouTube Sam here from youtube.com/ onli gamer for the New Boston and in this tutorial we're going to be talking about class libraries now when big companies work on an application um in either Visual Basic or C or other languages they can't just give every person a big huge copy of the project file and make them go through and look and see um what the program does and how it works so what they do is they'll split that work up into a whole bunch of different people now one person may write a class another one may write um another class um and then you have what's called class libraries now it's a basically a library of classes it holds a bunch of classes that can be used in a program and it's all encapsulated into a dll file so that the person using it does not have to know what's inside of it or what it does um they should be able to just use it and see what everything does because you either used good names for your classes and functions and methods or you comment them commented them right um so um you can create class libraries and use them in other projects and you don't have to see what the code is and you won't have to change anything in the code it'll just work um so let's go ahead and make a new project so we'll go ahead and instead of selecting a Windows forums application we will select a class library and you can see that it says up here a project for for creating a VB class Library which is a dll so we'll just call this um enemies library now if any of you have watched um any of the new Boston's C++ tutorials you may remember he made some tutorials about inheritance using um enemies and villains and stuff now I'm going to be using that same concept in here um so in case you've already done that it'll be familiar to you and I feel that it's a good way to teach um the class Library class libraries and we're going to be making a game out of it so now that this is loaded let's go ahead and we will add or we'll rename this right here to class 1vb this is automatically generated by the class Library project we'll call it enemy. VB and you can see that it changed this for us right here now I'll just zoom in some okay so let's go ahead and create a Constructor for this so we'll just go ahead and set Health equal to 100 now we haven't made the variable Health yet so let's go ahead and create a private variable called health so we'll make it an integer and we'll just leave it like that okay so when an enemy is constructed it's going to set their health equal to 100 now what we want to do is let's make some stuff um that the enemy can do so we'll go ahead and do let's see sub attack and then we will by ref um user Health as integer so whenever they call attack what it's going to do is you it's going to require an integer to be passed in here and it's going to reference it so it can change that integer so uh let's go ahead and create a let's create a random generator so that we can randomly generate from a series of attacks so we'll go ahead and type um dim J as new random so now that we have our new random let's go ahead and pick between a certain number of attacks so gen do next int or next and what we want to use is the Min value and then the max value so the Min value is going to be equal to one the max value is going to be equal to let's leave it at five for now because we haven't thought of any attacks now let's set set some uh default attacks for the enemy so we'll come up here and we will create an array so private attacks and we'll just give it let's say two so zero and one and we'll set it equal to well we don't need that right there we'll set it equal to let's say um punch and kick so all of the enemies will have the ability to attack now let's just create this as default attack Okay so when they attack we want to generate a random number uh between let's say one or we'll do zero and one so it's going to pick between either zero and one then what we want to do is we want to set user Health equal to something now we have to know what to set or we have to know what to take away from user health so let's say let's do a select case so we'll start off by typing select case and we want to do we want to use the number that's generated right here so what we can do is we can just cut this and paste it right there so it's using that number so let's see looks like it's not wanting me to do that so let's just create a variable so dim attack num as integer and we'll set it equal to this okay so now we're going to use attack num so select case attack num uh let's do case0 so if the number is zero uh which is which would correspond to punch in here because attacks at index zero we want to just um take away let's say uh one from health so user Health minus equals 1 so this way we don't have to know what user health is we can just take away one from it then we'll do case one and then we'll just take away uh two for a kick so user Health minus equals 2 let's go ahead and get rid of that okay so now we have our default attack let's let's go ahead and um let's just add one more property that will get our health so we'll create a public readon property so that they can only get the health they can't change in it they can't change anything in it so let's just do Health as integer now I can see that we have already declared Health up here so let's just call it int health so that we can refer it to refer to it um in this class as in health they won't be able to see it outside of this class so if we use health for the property it will make it easier for somebody else using our class library to know what's going on so we'll just return int Health okay let's see here everything's looking good okay so go ahead um create this project if you haven't already and um once you do that type in this code um because we're going to be using this a lot in the upcoming tutorials we're actually going to be making a game using this um you can see here that I've got some enemies and then our hero is going to be Popeye um so once you put this code in uh go ahead look over it make sure you know what it does and then once you've done that go ahead and move on to the next tutorial and we're going to continue working on it