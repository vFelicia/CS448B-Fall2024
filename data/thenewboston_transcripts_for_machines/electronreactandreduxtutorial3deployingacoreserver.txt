all right so now that we have a pretty good understanding of the overall architecture and we saw the MVP app in action let's go ahead and figure out how to spin everything up from scratch starting with the core and just a little heads up before we get started for this tutorial I actually have a little cheat sheet a Google doc on the right side of my screen that I have all the commands already however I plan eventually on updating the readme's right here right on the repo now I don't know if I'm gonna have time to do that before I publish this video but either way to save you all time from you know uh pretty much just uh let you copy the commands from some document and paste them in so I don't have to type them all out manually just go ahead and check the description below and there'll be some guide there either to a Google doc or a readme and on that note let's go ahead and get started so the first thing that we need to do is spin up an ec2 instance so I assume that anyone following this has a basic understanding of AWS if not I'll try to take things a little bit slow but go ahead if you don't sign up for AWS account and go to this ec2 section right here and I'll just go to instances running although there are a couple different locations you can launch a new instance from but anyways find this launch instances button and what we are going to do first is just give it a name now the name of this repo is core and I already have a server named core it's for the New Boston network but I'm just gonna call this core let me just call this core 2. uh this name doesn't really matter it's just so in AWS you can pretty much differentiate your servers pretty much just give it a label and then down here I'm going to click on Ubuntu actually I'm going to click browse more Amis and what we are looking for is Ubuntu Server 20.04 hvm 64bit right there and make sure that it's uh the x86 and all right so got that selected let's go down here uh T2 micro it's uh it's one of the smaller ones but that's fine for us keep here login I say that like I'm Canadian keep here all right uh well key pair do I want to use let's go with this one Bucky iMac if you don't have a key pair then go ahead and wow my Canadian accent is really uh shining through here but if you don't have one you can create one right there and let's see what else we need to do all right so down here we're gonna uh just click some settings for the security group and this one allow SSH traffic of course we want to be able to Shell in and also allow https and http and the reason that we need both of these is because before we have our certificate we're gonna need to uh pretty much reach out to the servicing communicate with HTTP however after to get a secure connection from tnb OS and the client we're going to be using https so anyways just make sure you have both of those and that should be it's all of the other defaults are good we only want one instance let's launch this bad boy our eyes successfully initiated lots of instance let's just go ahead and click this to check it out and if you select this then your details will pop up below and right now it is pretty much uh booting up pending right here so it's going to take a minute or so I'm just gonna pause the video and I'll come back when everything is up and running all right so that took about 10 seconds very Snappy and now that we have it up and running I'm just going to go ahead and copy the public IP address and then I'm going to open my terminal and to connect to it SSH Ubuntu at that IP address enter yes and all right good to go let's clear the screen and okay so just a little background on what we're doing and pop Chrome back open so like I said before this software is written in Django however it uses some other services as well for example it uses nginx and postgres for the database and I mention all this because before we can just install the software straight up we need to install Docker now once we have that installed we can then pull down the dockerize version of this and all this is already set up good to go we already built it so either way just want to give you a little heads up of what we're doing here and for this next step what I'm going to be doing is essentially going through this guide the official Docker guide however there are some things in here that you can kind of skip over so instead of just following along with this since not everything applies to our environment I have a little cheat sheet that I'll just go through but I say that because if you ever get lost or maybe something's out of date from this tutorial then I would refer back to the docker documentation of installing Docker engine on Ubuntu all right so let me go ahead and plop open my terminal and let's go ahead and get started so the first thing that it recommends is uninstalling any existing versions of Docker and this is going to report that it's unable to find them that's okay uh this is pretty much just ensuring that we don't have any existing versions installed already just what we want now let me go ahead and clear that out now before we install this for the very first time on this host machine right here what we need to do is we need to set up the docker repository and this is just going to allow us to communicate with Docker install and update Docker and before we do that our famous uh kind of the famous Ubuntu setup we're going to make sure we have the package cache updated and we upgrade all existing packages so let me just wait for this all right so that took about a minute I would guess now after everything is updated I'm gonna go ahead and run this Command right here and what these packages do is they allow app to use a repository over https which of course is the docker repository and all right nice and easy now after this we can go ahead and add docker's official gpg key which is going to allow for the secure transmission of data so first we're going to make this directory and then run this command to pull it down or download it and all right uh once that's set up we can use this command right here and what this command does is it just finishes setting up the Repository so now that we got that taken care of let me go ahead and clear the screen and one thing that I saw and I don't know if this is necessary but I figure it doesn't hurt is I'm gonna go ahead and update the app package index again again I'm not sure if that's necessary but I saw it in documentation and well I figured it didn't hurt so might as well just go ahead and do it and after this I'm going to go ahead and install the latest version of Docker engine and some other things such as Docker compose that we're going to need so let me just go ahead and do that shouldn't take long and by the way uh kind of a plug for my other tutorial series if you are not familiar with Docker or you want to learn more like what is Docker engine what is Docker compose I highly recommend checking out my Docker series and our rights once that's done go ahead and clear it now at this point we should have Docker engine Docker compose pretty much everything set up we can go ahead and first once everything is installed go ahead and start the docker service and okay we didn't get any errors that's good and now we just want to verify that everything is set up properly by running a simple hello world image so go ahead and run this command hit enter and if everything works properly again it's going to pull it down since it doesn't have it in Cache already and it's going to say hello from Docker you should see that somewhere that means we are good to go now another thing that happened that I didn't really discuss kind of happened in the background is that right now Docker engine is installed and running and what also happen is a group called Docker was created but no users were added to it yet now we are going to need that group and what we need to do is we actually need to add your user to the docker group so we're just going to go ahead and add to group the user that you're using right now and once you do that we can go ahead and exit and then we want to pretty much shell back in to make sure we got all the updated permissions so I'm gonna exit clear and then just shell back in all right so now that we're back in we should now have permissions for the docker group and at this point we can now pull the actual images that we're going to need for the core repo so the first image that we're going to pull we're actually going to pull down two of them uh the first one is pretty much the the source code or the server that you would think of pretty much all that Django code and while this is kind of pulling down uh just to talk to you about the other image that we're going to be pulling down that's our reverse proxy and that's going to be the essentially the nginx service that sits in front of our code and yeah uh it's pretty much all I have to talk about anything else I can talk about all this is happening uh oh I got a story for you so um I went to Dunkin Donuts probably about a month ago it's November 10th now probably at the beginning of October check this out and here let me go ahead okay let me go ahead and uh uh pull this again this is the nginx service basically and I'll go ahead and run this and then I'll finish my story so man that was way too quick okay I'll tell you at the end the Dunkin Donuts story it's it's pretty incredible as far as you know how exciting kind of dunking down the story get but uh you know a lot of people complain when I tell stories in my tutorials just thought I'd have some more time there all right so now we should have both those images pulled down and we can actually just verify that if we type in Docker images of course we have that hello world one testing but all right now before we do any more server setup what we first need to do is we need to associate an elastic IP address with our ec2 instance so why do we need to do that now the reason that we need to do it now is because this core is going to be using https now as part of the additional server setup we need to have a domain name ready to pretty much uh configure all our SSS certificate encryption so on and so forth you'll see in just a bit but just to make it super clear what's going on right now I went ahead and I paused the video and I made this little two second diagram to show you what we're doing so we already have our ec2 instance we are shoveled into it boom good to go and yes I know these uh IP addresses aren't valid just uh they're just examples I just don't want anyone to yell at me for it okay so we have our ec2 instance and what we can do if we wanted to is we could have a domain name set up and we can just point that domain name to this instance for example whenever someone went to the new boston.com they could just hit our instance and that's fine it's gonna work at least for the time being so on and so forth however the problem with that is whenever you have an ec2 instance the public IP address associated with that instance is not static in other words if we ever stop this instance and restart it AWS is going to assign it a new public IP address so that means we're going to have to go back in our um print pretty much our DNS configuration update it to a new IP and it's pretty much just a pain so instead a much better solution to avoid all these headaches is using something called an elastic IP and what this is is it's basically an IP address that's tied to a reserved or static public IP address and with this we can point this to any ec2 instance that we want so the setup that we're eventually gonna structure whatever you want to call it is that we're going to have a domain name and we're always going to point it to an elastic IP address that we're going to create in just a second and this IP address is never going to change and for this IP address we're going to point this to our ec2 instance that we just created and whenever this instance gets restarted or maybe we just want to deploy an updated version of our code we can even do something like this we can point it to our new instance and everything is uh you know it's just a much better way so your IP addresses aren't changing all the time the IP address of course that's associated with your domain name so if this is confusing you're gonna see exactly what we're doing in a second it's it's really not that bad so go ahead and pop back in your AWS ec2 section and on the left hand menu if you scroll down to this network and security section you're going to see a link that says elastic IPS go ahead and click that and once you do you're going to see this big orange button right at the top right that says allocate elastic IP address this basically just means create a new elastic IP address that I can use now all of these default should be good and let me just make sure yep looks good now after this just go ahead and hit allocate and all right so this is kind of uh or I thought it took some time but apparently not um so this is your new again this is an elastic IP address that we can use now before we actually hook this up to our ec2 instance what I like to do is rename this and what I prefer is naming it the same thing as my ec2 instance and I named my ec2 instance core 2. and so I'm just going to name this chord to and there you go so once I have this elastic IP and I gave it a name right now it's pretty much like this it's not linked to any instance at all so what we need to do is we need to associate this elastic IP address to our instance basically the equivalent of creating this Arrow right here so how do we do that well go and make sure that it's selected and then under actions you'll see associate elastic IP address and what we want to do is we want to associate it with an instance and the instance is you can find it by the tag actually core 2. right there and just to make sure I got the instance ID correct b8bf and yep instance ID B8 BF so then actually before we click associate we do want to make sure that this is checked right here allow this elastic IP address to be reassociated and what this just means is if we ever spin up another instance for example let's say we updated our core code then we can just go ahead and pretty much just reassign it well I don't even think I need to explain uh reassociate it is like the best word to describe it so make sure that you associate with instance make sure this is checked hit associate and then those two are essentially going to be linked together now the cool thing about this is that's really all that we need to do and in fact to test this what we can do is we can actually ssh in to this instance but instead of using the instances public IP address like we did before we can actually just use the IP address from this elastic IP and we should be able to Shell in to our instance from that so what I'm going to do is copy this elastic IP address and then just make sure everything is working back in my terminal I'm going to go SSH Ubuntu at and again this is the elastic IP's address which should if everything worked properly allows to Shell into our ec2 instance beautiful all right so our elastic IP is now hooked up and let me pop my diagram back open so what we essentially have is this setup right here with an elastic IP tied to our instance but now as kind of the final step we need to get a domain name and point this to our elastic IP so to do that let me actually keep this tab open and in this tab since we really don't need to uh do anything with our instance directly anymore I'm gonna open route 53. so this is a kind of AWS anything you want to do with domain names and I believe from here if you don't have any domain name then you can go ahead and you know type one and go ahead and register it I believe it costs it usually costs like five or ten bucks a year and the reason that I'm not going to go through this process is because I already have quite a few domain names from you know previous projects and tutorials so on and so forth but either way this process is pretty simple just pick a domain name add it to cart click next next it may take um an hour or so to set up maybe a little bit longer but eventually once you have one purchased then you can go to hosted zones on the left right here now a hosted zone is pretty much just Amazon's Route 53 concept of a collection of domain names or a collection of Records now let's see what one I can use uh how about this fataxia IO so I believe that this is the one that I was using in the uh earlier videos however I deleted the ec2 instance from it so this is pretty much just uh the same as if you were to buy a domain name for the very first time so once you have it go ahead and click on it and what we need to do is we're going to be updating the a record for this domain name now just to kind of give you a very basic understanding of what these different records are you would think you know you have a domain name you just need to link it to an IP address so what the heck are all these other records doing well the a record is the most easy to understand this actually the a I believe does stand for address and it just links this domain to an IP address and I believe it has to be ipv4 now we aren't going to be touching these other ones but you know like I said just to give you a quick understanding this NS record right here it specifies the authoritative DNS server for the domain again you really don't need to tweak it at all in this SOA one this stands for start of authority and it just has some additional like admin related information about your main like the email address of the admin and like what when the domain was last updated so on and so forth but either way make sure that you only are tweaking the a record and for this we pretty much need to edit the record to point to our elastic IP so this elastic IP what we just showed into I'm just going to go ahead and copy that again make sure it's copied and then again go to your record make sure you have the a record selected and no subdomain we're just going to paste in this which is the address the IP address of our elastic IP and then all that should be good to go all right so now this is pointing to four four yada yada one three nine four four yada yada one three nine and this may take some time to actually update so let me find a tool online real quick all right so this looks like one I used before DNS Checker I'll just go ahead and do that uh show notifications absolutely not so let's check it out and this is just making uh sure that everything is up to date so when I put in this address right here of ataxia.io what I'm hoping to see is this elastic IP which is going to end in one three nine so I'm just going to go ahead and paste in this URL we're checking the a record I'm just going to hit search and yes it looks like that was actually a lot faster than I anticipated but yeah everything's good to go already now to kind of verify that everything is working with our domain name what we can do is just like we did right after we Associated that elastic IP we can try to SSH into our server again but this time we are going to ssh in using the domain name so that domain name was vitaxia.io so in here let me just go ahead and open up a new tab why is this looks a bit a bit hard to read There we go SSH Ubuntu at vitaxia.io all right so uh I'm getting this warning that said like pretty much warning you're being attacked something went wrong but um you probably will not see this warning the reason that I did is I already have uh this domain name of Taxi IO I already pretty much taught my computer that this was associated with another IP address so since I just changed the elastic IP that that's why it's like giving me all these warnings but um again you shouldn't see this let me just go ahead and fix this all right looking good and if anyone ever gets that error just know that there's a file on your computer called known hosts and it pretty much has all those associations built in so if you ever change one you pretty much just have to delete what it knows or delete that Association and then you can uh pretty much just shell in again but either way that was a unexpected part of this tutorial so let's get back on track so at this point we have our entire structure set up and let me just make this a little bit more realistic I'll say our domain name which is pataxia.io everything is linked properly and the last step that we need to do now that we do have that domain name is we need to go ahead and pretty much set up our software and by the software I mean this core repo right here and is part of the setup process whenever you run this script that we're about to run for the very first time it's going to automatically set up our SSL certificate enable https all this encryption and start everything up so we already wrote a deployment script actually let me see if I can find it right here so in core slash deploy.rst it goes over a lot of this but what we are looking for is a command probably somewhere near the bottom right here so again this is where we are you want to copy this command bash and what this is going to do is it's pretty much going to pull down our deployment script from this repo and just run it on our server so copy that bash hit enter and okay the domain name let me make sure I got everything copied correctly so it's going to ask you for some info the domain name is withaxia.io beautiful email address and this is needed for certbot which is just the bot that pretty much just sets up our SSL and okay now it's doing its thing and by the way this is our also set up to renew your SSL certificate since even when you go and set up a certificate for your domain name you need to periodically like renew it basically and it's kind of a pain if you do it manually but we already have logic in here that renews it after I forget how often you need to but uh it already handles all that for you so pretty cool and here we see certbot is requesting our certificates and it look like okay successfully received it uh yada yada everything's good to go looked uh cool core API is up and running beautiful so at this point you can go to vitaxia.io admin and you should have this blank admin page right here now if you're familiar with Django you know that uh this is going to take you to the admin portal however in order to get there you first need to create basically an admin user AKA a super user and to do that we can use this Command right here again this is going to be all in the documentation description below but Docker compose pretty much shell into our uh our software run the manage command to create super user and you can just call it whatever you want okay username I'll say Bucky and my email address uh you don't need that for the password all right super user created successfully and once that is done pop open Chrome again and Bucky and login and beautiful all right and that is all we need to do to set up our core we are now ready to connect to it using tnb OS so if you haven't already set up tmbos actually let me go ahead and clean up some of these tabs they just annoy me when I have too many closeups they're right all right so go to the New Boston developers GitHub again this is uh going to be in a link in the description so either click on the link below or find the tnbos repo and again this is super easy to set up just pull it down make sure you run npm install and then just run npm start to start the project and as you saw I already have this uh little npm start hooked up to this play button right here but this is pretty much just the equivalent of running npm start and then if we wait a few seconds then it's going to pop up let me minimize this so everyone can see all right so this is already hooked up to a couple networks as you can see like I already have a bunch of data in here but just to kind of simulate what it's going to be like the first time for all of you running it what I'm going to do is I'm going to click this Dev button and I'm going to do clearstore and this is pretty much just going to wipe out all my existing data so now if I go ahead and just quit this and reopen it I will be at the same stage as all of you all right so beautiful minimize this and check it out so the very first time that you open tnbos you're going to be greeted with this prompt right here and it's going to give you your account number which as you know from the first video is just pretty much the ID associated with this device right here and the first thing that we need to do right after this is we need to copy that account number because in order to send messages on the network this account it needs to have messaging credits so if we let's say go to this network right here uh we can well let's just go ahead and add this network first now when adding a network your network ID is going to be the domain name so vitaxia.io the protocol is https um you don't need the port actually this is kind of a UI thing that I need to improve but since we have https it's going to default to 443 in the display name is just what do you want to call those messaging credits you can call them credits you can call them you know things whatever I'm going to call mine VTX I usually like to combine something you know just so I can more easily remember the network and for the logo let me just go ahead and steal all right let me just copy this image address all right looking good so now you can tell by this little green uh indicator right here that I am indeed connected to the network however right now I have a balance of zero that means I'm connected the server is working properly everything is good but I'm not going to be oh got phlegm in my throat I'm not going to be able to send any messages right now so in order to send messages or add messaging credits again I just want to make sure I have my account number copied because what I'm going to do is hop back in Django admin and under my accounts I'm just going to add this account right here and I'll give it a balance of really whatever you want we'll say 10 000 right there and when you hit save and continue actually check this out you should see your balance update in real time you don't need to refresh it or restart the app or anything and let me just show you real quick that that does indeed update let's say I change this to like 25 000 save and continue you can see on the left side of the screen I updated just like that and the reason that this is updating is because this is actually connected to our core through websocket and we don't need to like refetch everything any changes to this account is automatically pushed down to tnb OS it's pretty cool and there we go so if you want to go ahead and test everything out now then you can install this software on another device that you have at home maybe a laptop or something and then share this account number with that add it as an account and well you already saw how the chat application worked in the last video however since we're going to be creating an app with a speed test we're going to be getting into all that anyways so I figured I'd save it for another video but point being once you have your network hooked up see that little Green Dot and see your balance right here you are good to go so that was a great video uh I had a great time I don't know about y'all but in the next video we'll get started on creating that speed test app looking forward to it I'll see you then