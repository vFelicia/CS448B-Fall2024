all right everybody welcome back to another video and in this one we're going to be building out our invitation system so we can actually invite other users onto the site however before we get to that I want to point out some updates from the last video to this one and that is our shop feature is now live on the new boston.com however whenever I was releasing this I ran into some migration issues so I did have to pretty much reset all data and we only had three users on the site so it wasn't a big deal but um for those two other users in addition to me uh if you notice that you can't log in anymore then just go ahead and ask me for another invite code and I'll send you one and um I guess yeah that's kind of a good segue into what we're doing now so previously whenever anyone else wanted to sign on to the site for example they log out they go to create an account they needed an invitation code and what I had to do is pretty much go in Django admin add a new one and then like copy and paste it send it over to them um it was kind of cumbersome and only I could invite people so now what we're going to do is we're going to have an invitation section where you can create new invitations for example anyone can create these invitations and like send them to their friends or family or whoever they want on the site and I also have it where kind of to prevent people from just um creating new accounts getting new invitations codes creating new accounts getting new if they should code and just like spamming with a bunch of fake accounts so how this works is that right now whenever I send out invitations I'm gonna have a limit of 10 invitations I can create now whoever accepts that invitation when they come in here and they send out invitations they're going to have a limit of nine invitations that they can create then whoever they invite is going to have eight so on and so forth so that is a way where even if someone like wanted to spam with a bunch of fake accounts they can only create a limited amount so I figure that's good enough for now for uh our I don't know kind of solve this issue of a bunch of fake accounts but I am okay so on the back end I already created this invitation limit model and this is pretty much saying what user is it in how many invitations can they send out and you can say I was just playing around with some things right here and then these invitation objects of course are going to consist of um an owner pretty much the Creator the recipient and then this is going to be null by default and then once a user signs up for the site and accepts that then this is going to be equal to that user and it's pretty much a way to tell if the invitation has been you know accepted or not used or not this is just the invitation code that they're going to need to paste in the form and then I also added a note because for example let's say that you create five different invitations and they're just like the invitation codes are just random letters right here and then you send five to your like five of your friends I figured in the UI it's going to be a little bit tricky to see who you sent each one to and for that reason we're going to allow them to type in an optional note and this is going to say something like uh sent to uh Betty or something so that's going to be a more realistic note but that's basically what I have built on the back end and now in this video we're going to be building out the front end so with that said I already got my branches checked out uh the back end should be good to go unless we run into any problems but the front end I didn't do anything to it yet except uh kind of build out the profile page which is unrelated to what we're trying to accomplish here today but I mentioned it because the invite section is going to go on the right now eventually my plan for this is to kind of like of course have more features on the site rather than just be just being able to sign in and invite more people and that's it you can't even do anything just invite people but um I eventually will probably have these subsections Under tabs like my posts my friends my photos my invite section so and so forth but for right now invite is the only feature we got so I'm pretty much going to plop it right here on the right and then later on we can you know have under its own tab or subpage or whatever we decide to do but right now we're just going to get down and dirty and build it right like that all right so for render right what I'm so the structure kind of give you guys what I'm going for it's probably going to be similar to this where I'm gonna have a section like this that's going to say invitations and then I'll have I'll have it either say add or create and then once we do then we'll pretty much have something that looks like pretty similar to this actually where actually let's just start with that heading and take it take it nice and slow let's take it nice okay so what we can do is actually steal it from Pages sell products see what's going on with you so just like products I want a grid and then with columns in it and padding top and bottom should be good okay now we can even get this section heading before that so yeah let's go ahead and just jump in and get our feet 30. okay so on the right hand side what I'll do is I'll create a section heading props you take okay so you need a heading and we'll just say invitations and then for the right content it's going to be button so let me just steal these two and clean up my imports just getting kind of the structure of things right now so we're going to need a button that you click and it's eventually going to open a modal maybe let me think through this in a second but now we'll just say whenever you click it it logs out click and render button add a new invitation I'm thinking crate sounds a little bit more intuitive I want to create a new invitation now this button is going to be the right content for this section heading all right review review then let's see what we got going on so far okay invitations create and then you create one and then the uh do we even need a modal or maybe we can just let's see on the back end whenever we create one so post invitations what was I passing in first whenever we just created an invitation okay so whenever we create an invitation we don't need to pass up any data because on the back end it generates the unique code of course the ID by default the note is just blank the owner is you and the recipient no one accepted it yet because you you know it's just default um so in that case I'm thinking that maybe we don't even need modal year because one option that we have is whenever we create an invitation then we can probably send up a default note is that the same ID okay so what we could do is we can say whenever I create this pop up in a modal and it just has a note field and then you have the option of filling that out or leaving it blank and then hitting submit and then we can just use that whenever you're editing the invitation because whenever you edit it um you're going to be able to edit this note as well so maybe we will go with that logic for now what we can do is actually just display the empty state so on my similar to cell products what we can do is this we can say render content and if there are no invitation length then just return that empty state surrender content we just put an empty list here and then we'll just say return null as well all right so this is going to be if you have invitations basically if invitations list has a length then go ahead and render them out otherwise or so we'll say no invitations to display as an empty text components oh and then that render content and go right under this section adding foreign okay no invitations to display perfect so now let's go ahead and let's go with the modal method and then we'll get some invitations okay yeah this will allow us to uh connect with our back and pretty quickly too how do I want to do this okay let's get this modal going and we'll say um it's not create it's not edit we will just say invitation model yeah Invitational okay so you got styles and then you have a main component file which is an index and then rename this to invitation model okay actually let me pause the video I gotta go blow my nose it's running for some reason all right and we're back nose blown that is the nose update and let's see what else okay so first thing I could probably do is just uh create a simple modal from this where can I still address select model trade um create edit yeah let me I really just want a simple form in here but okay so first probably just need to style this modal okay so let me get a styled modal in it will be fluctuation column with 360. we'll see how that looks we need to tweak it a little bit later on but now I really just wants to get something there so this will be a modal and it will say uh it'll either say create or edit invitation this will be determined by what we're actually doing to this invitation if we're creating one or editing one but for right now we can just hard code this in and now I just want to make sure that it's appearing on the screen so yeah it's gonna be the same pattern as this imitation modal invitation modal all right so we can say invitation model is open and toggle invitation modal for the state variables and now here did I import my modal yep okay so if the invitation model is open then what we want to do is we want to render the invitation model with the close of toggle imitation model otherwise we are going to render a null and then also oh we have two buttons on our profile now don't we your render button oh I see okay and this is a button two so for render button I'll say render um create invitation button alright so render create invitation button and that way we can differentiate it from our button right here which is our edit profile button and then when you click this instead of handle button click what we want to do is we can just do toggle invitation model get rid of this click Handler and that should give us our logic so create invitation there we go close and apparently I'm plus oh wait a minute pass it in the wrong prop or not accepting props at all okay so here what I need to do is create an interface so we can accept that close prop so in my invitation modal I'm going to be passing in a closed prop so to accept them this is what I do and then pass that bad boy through and then whenever you click the close button on the modal it should get that closed logic now as long as I'm passing it through yeah so again there we go open close open close beautiful okay so we got a modal and so this is going to allow for us to either add invitations or edit them either way the only thing that we are doing is working with the notes field so let's go find a form a very simple form that we can use and where do we have the simple form maybe they'll withdraw form shop uh add a carton cart yeah maybe the withdrawal form is easiest all right so let me just borrow some of this logic and let's see so first can close out of U and we're gonna be working in the invitations model so I don't need any you and this is the form that I want to steal okay okay okay okay okay and you know what I'm thinking of is even though it's a little bit more complicated of a form it may be better um maybe address details because I'm thinking we get this logic where we pretty much have something and we can determine if we're editing it or updating it foreign yeah yeah actually what I'm thinking I want to do even before creating this form is kind of set up my uh Redux store to where these invitations are going to be stored and I say that because that is going to require me typing out my invitations and then from those types I can make the API endpoints in the dispatcher functions and then kind of work the opposite order by the time I get to my form I'm going to have all my pieces ready otherwise we're just going to have to print out some data here and not do anything with this so let me do that so uh do I have actually do I have any invitation logic at all in my store or in my types I don't think so interesting okay cool so on that note Let's uh get our good buddy old chat GPT out here and we can start typing these out so my two models I'm going to need are of course my invitation and then invitation limit so I will say and I believe that we already have creating modified okay so first of all let's just type out our invitations new typescript file invitations and yeah where are we okay so creating modified is going to come from here and this is going to be my same design pattern fix come from generic all right so basically I want to have an invitation and then it has an ID it has created and modified and then we're going to be storing them keyed by ID okay so now Chad GPT why don't you and actually how did these come back so the owner which is the Creator and the recipient okay this is interesting this is interesting so right now I have them coming back where everything is in ID but I'm wondering if the recipient should be a user retailizer so we get their information that way on this page right here whereas on this profile page when we see who accepted it then yeah it would make sense to actually see them you don't need to serialize the owner because you're on their profile page so let's do all right so on my serializers I only have this okay okay okay okay okay all right now I don't know if I'm gonna have to create a new serializer or what but just make sure of one other thing and that is this so let me get my invitations and in one of these I just want to test around where let's see so let's see the is one what happens whenever you do have a recipient will say it's uh Emma so in that case yeah the recipient is just an i user ID right now but what we want to do is we want to use a user read serializer for that mmhmm okay so uh that would be user read serializer readonly equals true and this is imported from the Boston users and this is the recipient now is this good enough okay so now the recipient is being serialized and now let me just make sure my creation logic still works create an invitation hey now and that is good okay I should be looking all right now yeah recipient is either null or a user read serializer and now let me just make this thank you all right looking good looking good looking good looking good looking good looking good okay so now what was I gonna do have chat GPT correct me an interface for this I don't even think we need to it's easier if we just do it ourselves okay so the owner of these invitations is going to be a number and then and then let's see uh the recipient okay let's do note first so code and note are both going to be strings and note there's also a string and then for the recipients what we're gonna do is use user read serializer so actually it's going to be null okay okay so recipient is nullable so for recipient we can say user serializer or no okay this should be good all right so invitations have they do have created modified right oh this is interesting oh very interesting I thought I added that oh invitations have created modified but they're just not in our serializer read only fields actually let me do this I just wanted to see my usage and some other parts read only fields read only field so I'll pretty much just have to eat them they say eat them add them to read only fields yeah because in fields we don't want the user to pass these up these are all unmax so file file okay so now Let's test this again from the top so in creating invitations you could pass an optional note send that you get this back which is interesting and then when you get your invitations wait a minute did I have to add that to the fields in addition to the readonly fields of course that crane maybe so that would be interesting okay cool created modify all right so server is updated now let's see this logic so I'm creating invitations note yo okay create a date and modify day um I don't have to pass those in and then whenever I get invitations they also have a credit and modified day beautiful all right so one more time hopefully make lint I thought I had the invitation model all ready to go but apparently it was missing a few things but that's all right we chug along all right so back in hopefully he's good now although I have a feeling it's not going to be the last time I say that uh invitation okay okay so from here let's go ahead and uh pretty much just import into our main index file invitations come over generic all right so from invitations what new types do we got so we got the invitation type for a single invitation and invitations which is how it's going to be stored in Redux and then they go right here St okay okay all good all good and now let me go ahead and create a little slice for them so in this store I'm gonna create new invitations file however before you do that we need to actually use these from constants notations invitations now we can use it here or wait a minute here the only question becomes what do we need to be able to do to these so we need to be able to create them edit them set a list at a time for example whenever you go to this page we're going to be fetching all our invitations and also delete them and the logic I have on the back end for deleting is you are allowed to delete an invitation if it has not been accepted yet of course once it it's accepted you can't really like delete it or it's like gonna have to delete the user who accepted it as well and that is just a bit messy so on that note what I'm thinking is pretty much Where to steal this logic from and I'm thinking products because products you can create and edit set multiple and then delete them as well so this is pretty much the exact same logic that we want and in that case steel okay so let me replace this with invitations so products constant is replaced with invitations products is going to be replaced with invitations products it's going to be replaced with invitation and then products is going to be replaced by expectations and now let's just read through it to make sure we didn't mess anything up so this constant hopefully I knew what it writes invitations looking good okay now importing this the initial state is just an empty dict for your invitations this is your initial State this is the name of it and for the reducer set invitation you're going to be passing an invitation when you say multiple invitations pass in the list of invitations that those are ID and then to Onset you pretty much should pass in an ID which is a number and you delete it from State and all of these look good so in my store index let's go ahead and piece these together okay so exchange orders all right so I'm now adding a new slice it's my state and it's invitations and the value is the invitation your producer all right that looks good and now the last thing that we're going to do for now is just create a selector function from it to pull that data from our store so invitations okay so now I call the selector function get invitations just give me all the invitations in my store AKA state all right looking good now on that note what we can do is we can go ahead and create our API functions and then yeah later on our dispatcher functions so first API functions so refactoring name get this word all right so I believe we can just steal these as well uhhuh maybe addresses would be even better so we're going to be creating yeah this is better and also for the create address request yeah I'm going to type this out too okay so here under this API address I had the fields whenever you're creating an address yeah let's do this so a refractory name we're going to create another typescript file and this is going to be called create invitation request and what do you accept well all you except is a note string and now we can use that whoa types invitation get all my types in order and all right so now we just gotta import to you all right so we have a new creates invitation request type and you're going to go right there and now so I'm going to use the same pattern for addresses however instead of addresses it's going to be invitations and now anytime that you see the word address replace it with invitation let me do words only invitation just make sure all these are going to be good good good good and then actually maybe this is fine too if I don't do words so create imitation requests create invitation request delete invitation get addresses that's going to have to be fixed up but let's do this okay this should believe gives all the logic we need okay so let's read through it and make sure it all worked out so we are importing from this file an invitation object or excuse me invitation type and create invitation request now the endpoints invitation whenever you call create invitation you're going to be passing in this request data which is just a note and then you're going to be getting back a full invitation which is what we want now to delete it just give it a number you're not going to be getting back in anything now when you get invitations you're going to be getting back a list of invitations we want and then when you update the invitation you give us the ID of what you want to update and then the same data pretty much just the note it's the only thing you can do whenever you're updating and then you're going to get back the updated invitation and this looks all good okay so now that those are taken care of that's actually make our dispatcher functions for us so dispatchers invitations and we can probably just borrow all of these as well okay so now instead of address just replace it with invitation and I'm also going to need to re do this dresses invitations and get invitation and set invitations out correctly okay so this should give us our dispatcher functionality but let's see create delete get invitations update invitations we're going to set one set multiple or delete by unsetting okay whenever we create we pass and create invitation request and then we set an individual information with that data to delete it we're going to be passing an ID and then we're going to unset it from the store after it comes back from the back end that we deleted it to get invitations we aren't going to pass in any filters or any query params for now and then we're going to set those in our store and then to update what we're going to be doing just updating ID data set invitation store okay so now that we got everything structured hopefully everything's working correctly we can go back to our page uh where is that profile index and then from there we actually we're doing things in the modal so invitation model is open okay okay So eventually what we're going to do is we're going to be passing in the prop here depending on if we're creating or editing one right now let's just uh work on the creation side of things so shop uh sell products okay and now I'm wondering if you know let's just get easier form for now okay so let's use the exchange uh yeah where was that the exchange and then it was in the main area trade see what we can do is this so now I just want to work on the form logic just figuring out where I can borrow it from all right so withdraw we'll just use the same logic as this form and I will just say pretty much just find it already find it and I'm going to be stealing a bunch of stuff from you okay so first of all let's just get to our initial values and we can do this as well so in this modal what we're gonna do is we are gonna have pretty much building uh create invitation request and we're going to have a note an empty string now we are eventually going to need to validate that with a validation schema and for this we need to use memo that comes from react and then yup for validation goes yep and then what we can do is we can say let's get another validation scheme actually address string okay so I guess this is pretty much it where we have a note field and we'll just validate that it's a string for right now however I believe we're going to need to let me check on the back end actually note yeah it has a max length of 255 but we can work on all that later okay just want to get things working right now um let's see on that note let's go ahead and see what we need to import for this so formic form inputs and button so formic and form are going to come from formic and then our input and button from components so now let's get a form being displayed so formic steel U H you're going to be displayed right here and then handle submit we'll just log basically the data out for now so on handle submit what we can do is actually just say yeah we'll just log out those values we don't need U if there is error we'll say error creating invitation even though this may say error updating invitation we will also replace that later so we have a note that we are here we go so we have a note field and it's named note and the type is text which is the default type for this and for this button we can say um submit and then on submit it's going to call handle submit which is just going to log out the values for now so let's go ahead and just make sure nothing is broken so far so I'm going to create this and then once I add a note like that it just logs this out okay looking good now the next thing we need to do from here is actually send this data to the back end so what we need to do is we need to import dispatch and that's going to require app dispatch so whoa whoa whoa what's going on here oh yeah display air toast uh at this patch you and then all right and then dispatch is going to use use dispatch from reactor Redux let's get everything that we are gonna need all right so dispatch I'm gonna need you and then also might as well get this standard all right so from dispatchers invitations what we are going to need right now in this create invitation more later but not right now and then whenever we submit this form we are going to call create invitation and the data is just going to be the values foreign so now if this goes correctly we should be able to create invitations on the back end so now let me actually delete all of these so we can see more clearly if it worked all right so now just going to refresh this make sure we got a clean start note is uh yeah for Betty this invitation is for Betty so I'm gonna submit this okay it looked like on the back end it created it we got our data back and now we just need to close the modal so after this just close the modal and probably put up a success toast too let me think yeah so after I create and edit a product pretty much want to follow that same design pattern so after you created a product yeah it says product created in the toast type success and that's coming from enums okay so once you create an invitation then we'll say invitation created and then we'll close the modal as well so now let's test out our new functionality all right so this one we can say for Bob submit that invitation created invitation created the model closed looking good so now we should have also invitations in our store awesome beautiful beautiful so what to do next what I'm thinking is even though eventually what we're going to want to do is update this invitation model to support editing invitations right now what we can do from here is actually just render out these invitations and then we'll kind of uh build it um intuitively where once we have these invitations rendering out then what we can do is we can add like a little section on the right I don't know if it's going to be um just these action links right here I kind of like the idea of having a drop down list instead but either way for each of these invitations we are going to want to say edit or delete um depending on if they've been accepted or not what I'm thinking of a drop down probably since we have kind of limited space here but either way let's just go ahead and work on that right now okay so whenever I render this what I probably want to do actually in this profile do I have this invitation section that I didn't use yet all right so I'm done with the model right now this is my profile this is my profile Styles let me just see what I did with cell products okay yeah I have render products and products rendering there this is pretty much the exact same design pattern that I want okay so here instead of products I'm going to have invitations so invitations and we'll keep it a grid um but how many columns so we have a column for the user label that's one the notes is the second column the third column is the code the fourth one we can render a status and then the fifth one can be the actions so we'll say uh let's say yeah I don't know how this is wait we have five right so let's do two two one one one we can always change that later but basically we have five columns in the first two which is the user label and the notes can be a little bit bigger than the the code the status and then the action buttons okay so now let's just copy this pattern where we can say render invitations and then what we can do is let's just get all of our one two three four five Okay so so how do we want to do this let's just go ahead and get our invitations first and we don't need you and you're in the wrong place all right so just like we were selecting our products here we need to use selector from react Redux and then first selector State we are going to do get invitations and then pretty much just like we did here okay so we are gonna say we're gonna get the invitations we're gonna store you in a variable called invitations and then we're going to clean up our Imports we do that invitation list yeah I kind of like this method forgot where else we had it maybe addresses it was by addresses yeah dress lists like this is going to be invitation list and right now we may need to do some filtering later but it'll basically just give us a flattened list of all our invitations since by default they're keyed by ID and object and now here we can say if you have any invitations in your list then just go ahead and render those invitations otherwise just say no invitation to display and now what we can do is we can say ordered invitations are equal to your invitation list sorted by created dates and now for each of your ordered invitation what you are going to do is you miss their computer are gonna pretty much create that invitation component from those which we don't have yet but we will soon and then you're going to render them in the invitation section first let me pretty this up and all right so next thing we got to do is just create an invitation component and then we should be looking right and this is actually going to be pretty similar to this product component right here so let's see what we got going on over there okay okay so let's just do this off the bat so we're going to make a new pretty dumb component I would say and it's just going to be an invitation components and then you're going to have some styles and then we need a main component file for you instead of this we're just going to say invitation and you are not going to have any class name at all okay so you are wait so we don't have any Styles and then either oh we can okay no container though yeah I don't believe we need a container here either all right so clean up some unrelated code right here but okay so yeah we don't need a main container in this Styles file because we are using it we don't need to import you just yet so anyways you are going to have five columns one two three four five so let's create those right now so div so this is going to be uh the user label so this is going to be the leftmost column and then we have the note and then we have the code and then we have the status maybe we'll remove this but this will either say pending or accepted and then last but not least we'll have the actions that you can do and now for each of these what I want to do is we can just import that invitation object and all right okay so this is also going to take an invitation and we aren't getting yelled at right now we will so I want to import invitation as T invitation since the component is also named invitation and then what I can do is just say I am passing in the invitation through invitation props so you are going to accept an invitation and now what we can do is just kind of start rendering some of this so invitation Dot that was the note and invitation.code in that and that'd be good for right now so this invitation component takes an invitation and all right let's see what we got okay looking good looking good in the neighborhood for Betty for Bob and let me create one more for Carl and they're all being sorted like we want the user label will go here if there is a user otherwise just null and then here's the code status and the actions can be a drop down so that's looking good for now cool cool cool cool cool okay so now let's just actually just start working left to right and um yeah piecing this together so first I think this might be good for this page make sure my imports are in the right order I don't think we need to do too much to it but we can always come back to it if so okay so now let's tackle this so first I want to go to components and look at my user label oh this is interesting hmm so user label it doesn't take a user object instead it takes and I like this actually okay name description an avatar mmhmm so what I can do I'm just trying to think what to uh display when the user is null otherwise in other words they like didn't accept the invitation yet so there are two options here what we can display is a user label by the way this is the user label component right here so we can display a user label with just the default profile picture and basically just dashes instead of here or we don't have to display the user label at all we can just put a hyphen instead but what I'm thinking is Maybe in a user label with the default is a little bit better so let's and for the avatar wait what am I doing this isn't even the front end okay yeah and for the Avatar that's being displayed on my user label what's going on with that thank you but either way let's let's just display a user label off the bats and then we can kind of uh figure out if this is the best pattern so cons render user available okay so we are going to display a user label and this user label is going to take a description and it's also going to take a name have two hyphens for now okay so let's just see this something like this and apparently for the user label we are not passing in Avatar and pretty much just using my face so I think I just hard coded something in that shouldn't be hardcoded so Avatar and then in my avatar go go okay oh yes so anytime I'm using an avatar here I'm just pulling the self Avatar instead of the user that I want to pass in so I just need to update this okay so need to update some other places okay so whenever we are using an avatar instead of just pulling my own avatar or whoever the logged in user is let's just go ahead and pass in a source and this source let's say that if it's an empty string then we're just going to use the default and that was the same logic that was in self Avatar so under my hooks you self Avatar what we can do is say this so we are going to be rendering a source if we pass it in now if this is equal to a blank string or null we'll say and we can use the default Avatar and that should work all right so for Avatar actually let's go ahead and see everywhere the Avatar is used Straight Up so this Avatar component is just being used in the user label right now which makes things a lot easier because then in the user label if we see everywhere this is being used then what we can do is we can just accept an avatar and let me make sure my naming is kind of in sync so yeah and then I also may want to replace a name with the username so Avatar is a string or null yeah this is good okay so when using the user label we're going to be passing an avatar which is a string or null and then in my avatar component actually this is called The Source okay so that's either equal to a string or no for the name I should probably just rename this to username huh to keep everything consistent so username username username and then for this styled components it's going to rename this to username qrstu yeah I think this is a little bit better a little bit tedious to go through and do it now but it'll pay off in the end Clarity is very important okay so now our user label component is kind of updated new and improved now we just gotta pretty much find all the instances of it that bro can update those so use your label first of all all right so the description is nothing for the username we'll just put the empty Dash right here and then for the avatar uh what we can do is we can just do null now where else are we using you so here actually let's just clean all these up so and then for the Avatar this would be order dot buyer dot Avatar and then for the seller's Avatar when you ordered a seller not Avatar should be good for that user reliable user label are on the buy checkout page too so this is username and for the Avatar this is self Avatar and then for the seller Avatar it is cart seller dot Avatar all right making progress here that is good username and for Avatar product the seller dot Avatar all right that looks good well what am I doing here here we go here's your label foreign I think this is the last one so this is a username and then for Avatar it is product.seller diameter all right so now all our user level components are updated so here let's just go ahead and all right everything recompiled that's a good sign and all right now in my shop yep okay so so just making sure that nothing broke by use your avatars okay good to go now so what I'm thinking is yeah so let me first uh just test the logic where when one of these invitations gets accepted and I'll say the zw1 was accepted by Carl so invitations ZW recipient I don't even have a Carl but uh do I have a bob okay so let's see that this invitation for Bob which is W1 was accepted by Bob so W1 was accepted by Bob Bob is set to the recipient gonna continue editing and okay so now we have oh we didn't even get the invitations yet did we nope okay so another thing that we have to do on yeah this is actually good helps me uh build it out so now whenever we go to our profile page we actually need to fetch those invitations so let me uh find out let me just borrow another use effect fetch somewhere and this one's perfect okay so here what we're doing is saying use effect and we want to dispatch and borrow this from the modals invitation modal okay so we want to dispatch the method to get invitations and then dispatch we are going to need you you selector use dispatch okay so now whenever we go to the profile page we're going to get our invitations so now when I refresh this it should have yep got those invitations and now in our Redux we should see the updated data for Bob okay so now we actually have Bob's invitation in here and I also want to give a profile pic to Bob so we can test that out too and I don't really think I can do it from here but if I log in as Bob from my app so log out login is Bob I believe his password is bacon one two three four five yep lucky guess okay so now Bob since that's your password you are now going to have a profile picture of bacon and now that I updated that log out login is Bucky profile okay so now I have Bob and he has a valid profile picture now so now we should be able to render his information right here so on that note what I'm going to do is whenever we're rendering this user label I'll say maybe I can just do it right here so I will say first check if there's a recipient or not so const ant implementation dot recipient all right so the Avatar I'll say if there's a recipient then render the recipient dot Avatar otherwise render null and I want to do the same thing with the username Over The Hyphen instead so a recipient.username otherwise the default for this is just a hyphen now let me pretty this up and we'll see what we got going on here okay so Bob accepted so that is why we are seeing his username and for this description probably just want to put the created date okay so for the description Hmm this is interesting so do I just always want to render and what do I have for dates tu uh long date okay so let me just see how the date looks although it may look a little bit funny but all right so for a description what we can do is we can just say the invitation is created date and then render them all like that looks pretty terrible so but I think I do want the date rendered right there kind of to see when you created the invitation but I don't like that date format at all whatsoever so instead what I'm going to do is I'm going to pop open one of my other projects and get another day util function so short date short date is today get time ago okay let's get all these so my date util functions hi Jake abcdfg hijkl this is going to require get floralized time a fancy date functions here but now let me just see how it looks for the short date when you pass in the short they you need include today at I'll say true okay see you all right that's a little bit better so now we are able to see I mean it still doesn't look great though because yeah I don't like this hyphen thinking that maybe hmm I mean is this better where we can say that if there is a recipient pretty much something like this if no recipient then we just return an empty label like this I mean is this better or is the other one better with like an empty user this one looks kind of weird we could also just render nothing but that's going to look super weird oh boy oh boy oh boy oh boy what do I do what do I do maybe maybe maybe well I will say of those two options I am leaning towards this one however maybe boy oh boy oh boy maybe I just need more dashes there hmm that looks kind of weird too but actually doesn't look awful not great but not awful I think I just need designer desperately all right all right so I mean it's working right now at least and that's the count for something okay so invitations uh apparently if you don't have a user this is the UI for it which feels a little bit funny but you know not that terrible I would say um this of course is the notes this is the invitation code that you can send them so now let's just go ahead and work on status and for this we're going to have two statuses kind of similar to uh cell products where it's going to have active in draft but it's going to be it's pretty much just gonna look like these instead of active in draft we'll say accepted or pending so on that note let's should we make these enums or not come on because they don't get stored in the back end that way but it would be nice to have those standardized but either way let's go see how we did it with products close out of you for now okay so store are not a store so Pages shop sell products we are rendering it a product and then for the activation status yeah we have a product activation badge and all this is gonna do oh wait we oh that's interesting it's not even a badge component interesting interesting very interesting well then why do we have this batch component all right we need to unify some stuff here yeah okay so what I thought was happening was that we made a generic badge component for like uh these uh displays right here and also I remember yeah near Exchange from your orders there was a badge there too but anyways what I was thinking we were doing is that this batch component for the shop pretty much used um that generic badge component that we have but it looks like it's just creating this whole new thing and I don't think we want to do that draft interesting interesting interesting interesting yeah so let's see if we could unify this and then we can pretty much take that same styling hmm okay green and then I think I want to add a draft state to this so right now we have active which is green for 100 on that says okay so first let's do this let's add another bad style called draft okay and then for this badge style called draft what we want to do is we can create a dark gray mixing for it and then we can say if you ever render that then just include that mix in okay okay so now what we can do is this when you render a badge you pass in the batch Style and text okay so what we can do here is we can say import yeah let's do this actually where did we do that yeah this is pretty much oh this is nice how how are we doing this oh yeah yeah yeah okay let's do this do exactly this okay so for the product activation badge what we're going to do is we are just going to pass in the activation status first let me delete my Styles file since we don't need any of this anymore and all right so for the activation status that's going to be the text of the badge and also the badge Style is going to be equal to active or draft so active yeah I like this design pattern okay so what we can do is we can say all right so if it's active we'll put you in success if it's draft then you get a draft badge so now to render product activation badge we just pass in the activation status and say if you are active you get success draft draft and then the text is activation status so that should work now let's see how it looks okay so first of all the green badge is a little bit too dark but I just want to test this logic where our badge is still working for active in draft okay perfect so now let me just go ahead and update this should we update these all the 400 probably yeah let's just do it one by one so 400 should give us that nice slightly darker shade of green yeah that's a much better green unless we want to go 500 that's a little bit too bold though okay also this is now getting into kind of styling when you're really mostly just worried about yeah getting things working for now okay so now what I'm going to do is pretty much just create this exact same thing however I don't have this activation status enum or the equivalent for invitations and the reason for that is because it's not a value that's stored on the back end we're basically going to be determining if the invitation is accepted or not based on if there is a recipient however even so we can still create an enum for it because we're going to be using this as a standard on the front end Okay so invitations enum I'm going to create an uh how can we say this um invitation status we'll say accepted or pending whoa whoa whoa so invitations is accepted if it has a recipient otherwise it's pending so now what we can do is just import these I sound like a robot all right so from invitations we're just going to render invitation status and then from there yeah let's keep you around g h i h i okay okay so now like you Mr product invitation badge what we are going to do is we're going to create an invitation status badge I think that's a good name for it yeah so enum index invitation status badge okay so new directory invitation status badge and it doesn't have any Styles files just gonna have a new component and pretty much the same design pattern as you so now we can delete you and do some renaming refactor rename this component set of activation status this is invitation status so replace all those also this okay so invitation status could be what did we say accepted and that can be success and then when this one is pending we'll render it in draft mode so now we should be good for this let me just read through real quick so this is pretty much a specialized badge which takes invitation status of accepted or pending and then we just render the badge based on that and that is determined if we have a activation status and we'll just name this status yeah you can really just put it in a div though can't we yeah okay so now let's go ahead and import that component so invitation status badge and I'll say it's actually for this I could say render status badge horrender interpretation satisfied so just keep it very clear holy sweet totally okay printer invitation status badge first thing we need to do is import our enums so we can get everything standardized and we can say we're going to create a variable for invitation status and we can say this is equal to first checking if there is a recipient so recipients if so then the invitation status is equal to invitation status thought accepted otherwise it's equal to invitation status stop pending and now what we want to do is we want to return our invitation status badge where the invitation status is equal to the one that we just calculated and now we can take this render function and render it in place of our temporary status text and now if everything went absolutely perfect we should see this okay beautiful so Bob is the only one who accepted his invitation right now so this is accepted all the other ones say pending which is great awesome now let me just create one more for testing all right that's the work in in all right so now one of the last things we have to do is fill out these actions right here and again what we allow is for the editing of these notes right here also we allow for any invitation that has not yet been accepted to be deleted so what we are going to do is this let's first do this let's pluck recipients from invitation since we're using it kind of in a couple places so I don't need that anymore and don't need this anymore and we're also going to use it for the uh determining if we can delete it from the drop down menu so I figure we use it enough where it's warranted to uh pull that out but now let's just go ahead and get that drop down menu and why are you know probably because okay so now so let's just import it since we're definitely gonna need that and then we can just say render drop down menu and menu options maybe just steal you for now and actually let's clean this up a bit got to keep things alphabetized and then all right handle edit click you clean you up keep everything nice and clean okay wow wow wow so now let me just put empty click handlers just to make sure that sections ml still kind of uh test things in stages so we were testing everything all at once all right so I have my drop down here right here right here and when I click edit so you just click edit and then delete click delete and I believe here what I want to do is pretty much style these so they float on their right so I'll say okay so first let me just get my styling taken care of and say drop down container on I'm not importing that all right so for my drop down container say display Flex uh let me play around with this in Chrome all right this is my drop down wait where am I oh here we go all right so I'm going to justify content and this is my Flex Direction row by default yeah all right so just like content end that's going to push everything to the right and I'm thinking that I may have too much space as well so either way I'm just going to display the drop down container I'm going to rename it drop down menu container I think that's a little bit more explicit okay the drop down menu container houses the drop down menu and these should all be floating to the right right now um and on that note another thing that I want to do real quick is I pretty much want to say how do I update this so the last column should take up the minimal amount of space and I'm not sure so I'll show you the what you can do okay a fraction represents a fraction Min content beautiful that was easy okay okay okay foreign that didn't work maybe because everything's a fraction still am I great update you got Min content away it's just because uh it actually did work it's just that my statuses are now floating left but we can actually fix those up as well along with a code and I believe that those are the only Memphis coach should remain left aligned I don't know but either way I want my status flowing in the middle I think that'll look better so imitation style is drop down menu container uh get rid of you for now we are also going to have inflation status badge container these are getting a little bit cumbersome these names but I like things super explicit and standardized and this is justify content Center it looks a little bit long but holy sweet ravioli okay for this well first of all it is floating in the middle which is good however display Flex yeah I think I just want maybe inline Flex is what we want nope now what we could do is just put it in another div but let's play Flex justify content Center and let me just try Flex Direction pretty much just don't want it to grow that height so I was saying that what I could do is just this and that is not bad I haven't actually did but yeah I think that's good for now if anyone knows how to uh how I can simplify this pretty much to get rid of this extra div then let me know but otherwise I'm just um taking that badge and sticking an animative and displaying it Flex in Center and then my badge doesn't grow but I'm sure there's an easier way for that um okay so what do we got to do next so now let's go ahead and get these components working okay so first uh let's get the right options here where we're saying that if the status equals accepted in other words if there's a recipient then you don't display the delete function okay what's going on here okay gonna put you to work so if uh render do not include the delete option the delete option the delete object in menu options and might as well just toss you my entire component for context here all right so create a menu we just add a button and then if there is no recipient yet then pushing the delete logic just now this should work already because right here you get both right here you can only edit it because there already is a recipient okay now things get a little bit more tricky what should we do now let's work on the edit logic because the delete logic is going to be a little bit trickier okay so to edit so when we click edit we're gonna need to render that invitation modal and that is being rendered already in profile so first let's just say that this may be a little bit easier than I thought maybe a little bit harder who knows okay either way let's figure it out so when we click edit we're going to render this invitation modal and that is coming from modals imitation modal and then we can just use the same logic of first let's import what we need we're going to need to do something special in just a bit this is interesting hoping huh very interesting so I'm hoping that CSS grid doesn't view this as a separate element needs to render but I have a feeling okay so on edit what you do is you toggle the imitation modal and that's going to be called okay this is good this is good yeah so I believe since we're rendering this in Portal I just want to see what's actually going on behind the scenes since uh yeah grid it's gonna display all these let me just see where this is rendering okay beautiful so what I was worried about is this basically um whenever we are rendering our invitations you see that we are using CSS grid and we're saying we're going to give you basically five elements for each row and those are these elements right here a user label a note a code the badge and then the drop down menu container now conditionally just because of our component structure we are we may be rendering another element which is the modal right here and I thought that since sometimes it has six elements um it may get confused with grid however the reason that's not causing any issues is because in our modal I'll kind of just show you what's going on so in our modal component we are actually not rendering uh the component right here like it may look like instead what we're doing is we're using a portal to render it um basically outside an entire hierarchy in an element called modal root and then yeah so that's giving us the logic that pretty much the exact logic that we need for now at least so now whenever we edit it and we can edit this now everything's working correctly no logic for delete but now let's keep checking along with the edit logic okay so what we can do here is pretty much update our invitation modal and we're going to be passing in an optional invitation so update invitation from types we'll say we're going to pass in an optional invitation and if you have an invitation then we are going to be editing that invitation otherwise we're going to be updating the invitation and I'm going to have chat GPT do this however what we can say is we can give it another standard from our address Pages which is in shop she would this just be easier just to do it without chippy tea and maybe it may be okay so let's do it this way initial values note okay so for the initial values we're first checking if we have an invitation if so use the note basically whatever value exists already on that otherwise if you don't have an invitation then just go ahead and use an empty string and that's going to give us our initial values now another thing that we need to determine is if we are updating an existing invitation or creating a new one for that we're going to have logic similar to this so if you have an invitation already then let's just do the crate logic first all right so if you have an invitation already then what you're gonna do is update it otherwise if you're creating a new one and you're gonna do something like this okay and then whenever you update your invitation so if you have an invitation already then you're just trying to update it and to do that you pass in the invitation ID with long the form values you submitted and then after the invitation is updated we just say invitation updated give you a success toast and then close the modal now if you're trying to create a new invitation then we're just going to say invitation created and then close the modal in okay so we have some just need to fix our error messages okay so for the verb if you get error message we're going to say if you have an invitation already then you're trying to update it I'm just going to say error updating invitation now if you don't then you're trying to create it so it's going to say error creating invitation and then for this header we'll just say invitation right now hmm do we have a verb there too Maybe let me call this header verb and then you are going to be replaced by some multiq and I will say verb invitation okay so now let's test all of this out and hopefully our edit logic should be working unless I missed something but either way uh well first when you edit this it should say so that's Incorrect and that is because all this logic depends on us passing through the invitation to the invitation modal and we didn't do that so this is invitation close close invitation equals annotation and now now okay so I'm going to edit this it says update invitation for Bob and I'll say four slob is the update that gets updated invitation updated beautiful and now let me just edit this for tomorrow all right invitation updated beautiful now when I create a new one it should say create invitation and say for Joe all right beautiful edit update invitation for Schmo all right I think we're good to go and now another thing that we need to do in addition to this is we need to convey to the user actually I see a couple of different things first before we get to that let's just fix this grid situation so on this template I have a left inner right section left is the basically user details and the right is the like I don't know page content I guess you could call it now let me just add a gap for maybe 32 pixels maybe 48 even okay that looks better so now let me just fix the styling issue and then we'll get to something else so I can just close all that for now okay um so the profile we in the main container have this and I want to add a gap of 48 pixels so that looks pretty good actually what is my gap on the right 32 let's bring it down to 32 see if that looks any better like the looks of that actually okay so now the last thing that we need to do is we need to convey to the user how many invitations they have because remember for our invitation logic each user gets invitation limit and then whenever they invite a user that new user gets one less than their limit so I have an imitation limit of 10 whoever I invite is going to have nine invitations to send then the next person is going to have eight invitations and then so on and so forth and I also want to add some logic not only the UI of how many you created already and how many you have total but also once they reach the max we can just hide this button so then they couldn't even like there's no use otherwise you're just gonna cause an error on the back end so let's do that okay Okay so what actually let me um let me kind of just give us a checkpoint here so make lens on the back end I'm just going to let everything run tests and then push this up okay so push this up and what did we change we could say added created and modified date to response I had created a modified date to response push that up and now on the front end just do npm run lint and then I'll do a little mini self code review and then we'll get started on the last feature of the invitation I'm actually going to go ahead and grab another coffee maybe freshen up a bit coffee is actually pretty good okay now let's do a quick little mini itty bitty code review okay so for the invitations API methods looking good and also nothing broke oh another thing that we need to do is that uh Delete functionality yeah let's do that first and then we'll call this uh okay so for the invitation first of all let's minimize you okay so yeah the edit logic was working we tested that however the delete logic was not and I believe I'm gonna need to reorder these but when you click delete we're going to call handle delete and yeah it needs to be up there okay now to handle delete what are we gonna do we are pretty much gonna call and it's going to look kind of similar to the modal actually but instead of creating we're just going to delete so we are going to yeah we can just steal this get rid of you so I need my delete dispatcher delete invitation now let's just get these toast okay so when you call handle when you call it delete it's going to be Asic function since it's going to make a request in the back end and all we are going to do is log out something like oh I forgot my dispatch all right dispatch come in with use dispatch okay I have dispatch up dispatch just make sure I got everything right okay so what we are going to do when we click delete is we're going to fire requests to the back end to delete the invitation now when you delete the invitation you need to give it the ID of the invitation and that is coming from the invitation.id now after it was successfully deleted and the Redux has been updated its store we can display toast that says invitation deleted and we don't need to close anything because we're not in a modal now if there are any errors then what we can do is just say error deleting the invitation and we can just render it like this okay that should be good code optimize Imports and now let's see what we got coming on okay so this one we should be able to delete that's good now let's see small I'm not friends with him anymore so I just want to delete that invitation deleted and on the back end let me just verify this all right so I have four invitations right now which is good let me delete this one my testing one good delete it from Redux and I only have three on the back end all right looking good so now what I want to do is this one more time and then we'll push it up and then we'll work on the last invitation feature and then deploy and then invite people and then pretty much create the greatest social network ever a couple more steps okay so invitations to you we create notation delete invitation now being used as well as get an update Suite put everything to use very productive session here now my avatar made those changes so it wasn't just selfavatar but you can pass in a custom source and we made use of that as well a new batch style we unified our product badge and also made the invitation status badge so now we have more consistent UI as well so good changes there there's our Innovation status badge everything looks good these are some user label updates our product activation badge is now also standardized so that's looking good uh deleted that updated this user label rename name to username to better reflect the source code rename that reordered it keep things organized dispatcher functions invitations that's enum now these inputs look Imports look right for the invitation modal takes optimal optional invitation if you're editing mmhmm yep yep see you you know h okay and then for the imitation which is basically the row then we are catching any delete errors messages look right this one I'm wondering if we could wrap it in a memo but it's a story for another day everything else is looking good some little kind of styling issue here it's not really a styling issue but just wondering if there's a more efficient way to do that let's see now here's my updated profile page which kind of ties everything together all right so we got another modal on load we are fetching our invitations which is good and just memorizing a list and all that looks right if we don't have any invitations it'll just give us an empty state and then our button to create an invitation they're being ordered correctly all of that looks nice we added a gap for styling this is a component updates and let's see what we got here this is the updated user label looking good selector of a fancy fancy here invitation reducer I reviewed this already this looks all good okay nice and ordered station and create a modified it has an ID ol on a recipient recipient is user read or no and of course our fancy schmancy short date function all right looking good so I will say invitation creating editing and deleting all right oh this fly I don't know if you remember from the last video where I had some flies flying around but I got some fly paper and I caught three of them so far I'll keep you guys updated on the Fly update as well but um actually let me stop the video here and then I'm gonna go grab a coffee and then we'll come back and we'll wrap up the rest of this invitation logic and then I actually thought this was going to take a couple days but it's going all right and then uh yeah we can get started on the next feature all right so coffee gotten and now what we got to do next is work on kind of the last part of our invitation UI component and that is just a render out probably right here um how many invitations they are allowed to send so what I'm gonna actually do is update my section heading components to include optional subheading and then what we can do from there is kind of just make it work so for this so we have a heading that's always going to be required and also say subheading and then this can be optional and then for the contents thinking that we have a left and a right yeah that might be better now so the container do I might do anything with this okay so I'm just going to make two left and right divs we can just have them divs but I like to have things named left right and then you can do something like this so the heading is going to go on the left and on the right what we can do yeah that should work fine okay so no change there and let me just check some of my other sections actually wallets cores this goes on the right shop sell left right okay just want to make sure I didn't break anything else so now what we can do is render that subheading and we can render it pretty much on a diverse span will probably a span subheading yeah yeah like that okay so the font size let me just say it's going to be like 13 or something so font size uh 13 and then if you do have a subheading we can say if you have a subheading then just render it otherwise and null and for this I'll say subheading is going to say something like a 4 out of 10. first of all this section right here needs to be a flex so display Flex align items Baseline I want and then for the subheading I can just have padding left so for the section heading the left section for the subsection actually that would be margin left of uh I don't know try 16 pixels for now and then for the color I actually want and for the color of this subsection let's keep it light gray let's see how we're looking now not bad but what I'm thinking is this is a little bit too far away so maybe modulants of 12 or maybe even eight and response to pick two all right let's just do this font size of 13 margin left of 10. and that will be good version of 10. and all right yeah this is looking all right okay so now what we have to do is first we can probably split this out into a separate render function since we're going to be having to calculate one this is going to be the length of the list and then two this is going to be the max amount so because we're going to have some logic and we don't want to mess anything up let's say const render section heading for now we can just return what we got and then this is going to be right above content we're going to render the section heading now as long as nothing broke then we're good to go make sure I don't get any errors in my console all right good to go so now the first thing we can do is say const ant numerator and this equals to the invitation list length in here it would be the numerator over 10 which that's going to change in a bit but something like this okay so 3 means how many invitations you already created and hopefully once I delete this okay it says two create another one three actually what happens if you create one with a interesting so a note is required okay we may need to change that later but um from Lisa all right so now all we need to do even though it's going to take a little bit of code is we need to figure out the users um invitation limit and how we do that is I made a endpoint on the back end API invitation limits and then you pass in the user ID and then it's gonna return the owner which is pretty much just CID passed in and then the amount right here and then we can store that in Redux and then we don't need to do anything fancy like storing under the ID because yeah we'll just keep it simple for now since I'm thinking later on you probably want to so anyways taking a step back right now you can only view your own profile like even when there's another user right here like nothing happens whenever you click their profile or anything now later on we will need to decide if you want to be able to view other people's invitations as well or is this just private to you and honestly I'm not sure I don't even know what the uh what the logic is that we're going to want probably a discussion for you know uh all of us but yeah for right now I'll just take this and I'll plop it in our store okay so this is called invitation limits so let's get started with that um let's close out all this and we're going to make a new type and it's going to be called invitation limits okay now the interface for this invitation limit I probably didn't even need to copy any of that but it's just going to be an owner is going to be a number in an amount which is also going to be a number okay and now what we can do is this to you invitation limits comes four invitations so let me just sort these to make sure everything stays nice and clean short lines and okay so we have that and now let's just go ahead and start prepping our slice so invitation limits is going to be invitation limits and the logic for this is going to be a little bit different maybe closer to self than anything else yeah mmhmm okay so first let me go ahead and make a file where you can sort of this so it's gonna be the same as this make a new file to contain this data okay for herself would be replaced by invitation limits now this type is going to be replaced by invitation limit this is going to be an empty state and this is going to be equal to you know what I can do so I can set it equal to this so it's equal to an invitation limit or null and then the payload action could technically be an invitation limiter and all although we're always going to be setting an annotation limit and now let me just rename this and this will be what is the name for this actually limit or limits and why you freaking out hmm types of decision invitation limits actually you should probably name it okay so now why are you freaking out so no is not assignable to the type invitation limit so I actually should type this out like this Hmm this is actually interesting I'm wondering if rethinking everything right now since I'm pretty sure we're gonna have this functionality oh boy oh boy a boy like why are we getting Fancy with it here you know like in the good serializer Invitational limit serializer why not just pass down the ID and just do everything like a super standardized why not so then what I could do is this okay and we now have an ID and why when I retrieve many so I just want the first not many equals true and what's this going to give me just one object and if I do one I don't have access to it doesn't matter so I can retrieve oh this is interesting hmm so let me do this 100 equals one two three empty list okay so here we are saying that the user can only pass in basically nothing however I want them to be able to retrieve it for any users even though in this current UI they're only going to be requesting themselves all right so in the query sets I'll say accept the uh PK from the URL rather than okay Let's uh let's not do anything fancy here let's just stick with our standards so um rather than the request because this fanciness is really uh bleeding into our front end and can't follow our standards yada yada okay so this should be filter quarks from the PK quarks from PK request user and let me just print this out actually so now should be printing out 14 and let me just try to break this so one this should return something valid which is good um what if I do something like this value 500 okay okay so I'll say so this is just some QA so how can I prevent the user trying to pass in a string for an ID even though it's not the end of the world I don't want to have any 500 errors coming oh I like this actually why not just to get object or four or four yeah this is much easier and where's that coming from uh we could say URL configuration you can use your Revenue expression and URL pattern or your BK is a number okay interesting so I'll do that so what's going on here all right so for invitation urls uh URL configured update my URL configuration super router on sharing the PK is a number you could override git lookup regular expression you know regular expression was something that I was well what's going on here one second that's it interesting this is fascinating never even knew this existed get look up regex first this can be static I don't use self but anyways for my server updates okay I still get a 500 error to work so this method doesn't do that okay we're out in America PK values there's something else might be wrong okay let me just give you my whole stack Trace then so it seems that even chat gbt is a little confused on this I mean we could just do that is digit okay let's do this then hopefully this works because I really like this pattern of and the query set is equal to this get object or 404 no when I pass in an incorrect still 500. hmm remember to hand it could be ready to try to compare nonstring to an integer actually this is probably better more detailed error message okay okay okay okay take 15. now what do we need to do we need to import four and okay so we've got a couple of things going on here that we need to test first we need to test it with an invalid primary key and make sure we don't have a 500 error which that's great not found although it should have that I should say invalid ID provided but why not print owner ID what logs out here interesting Y is it's not logging out so just nothing man huh this is fascinating fascinating fascinating fascinating okay so wait what is it catching what is happening here all right so apparently it's catching an error just the wrong one so let's do this and this is value error okay so that's what we wanted to happen but then why are you giving me the wrong error message maybe we need to throw a different kind of error because this is correctly all right so whenever we convert a string or to attempt to convert a string to an integer this is correctly throwing a value error but it's just getting a little weird because I expect this error message come back raise exception I want to see Somewhere in My Views where I'm raising it okay return okay so we can just do this instead so instead of raising an error we can just return an error like this and that should work and if so we also want to replace it down here rest framework import status few sets okay so now let's see okay finally invalid ID provided and that means instead of raising an error whenever we have an issue then what we could do is we can just do this pretty much do it manually okay and now let's make sure this issue right there and I don't think it's going to fix them for me nope okay so code optimize Imports and now instead of these double quotes you single quotes set the double quotes single quotes now let's lint again okay so now we got the logic that we want with all the edge cases taken care of uh cool steps to the left and in addition to that we're also returning the ID which is what we want let's just sort these so I mount ID owner my ID owner keep everything nice and alphabetical and then just one more time okay so invalid ID gives us this um if there is a valid ID but it doesn't exist no none found with this and then once we do have a valid one it gives us back that valid one which is great now to our front end let's go ahead and standardize everything okay so in our typings what we can do is pretty much follow the same pattern and we can say that okay so we are going to be storing these invitation limits and addict and it's going to be called invitation limits and it's going to have an invitation limit which consists of an amount an ID and an owner and then in our index yeah I like this already everything is nice and standardized now so in our invitation limits we're just going to say invitation limits and limitation limits and then invitation limits invitation limits okay so now this is equal to invitation limits which is going to be equal to an empty string and now when we set an invitation limit um let me see what we did we can just steal from invitations so with invitations under my store we can say something like this rotational limitation limits okay so when setting an invitation limit stay as invitation limits we're going to be passing in an invitation limit and I pretty much takes care of that as a code device import and now let me just read through this because we don't need to set multiple and we don't need to delete any ever so okay all right so invitation limits comes from Invitational limits spelled correctly now we're going to be importing invitation limitation limits the initial state is just no invitation limit set invitation limits or excuse me just set one at a time that's all we need to do and then we're going to be good to go show limits okay cool now let's just start piecing everything together and so in facial limits comes before a meditation all right so I now have a new invitation limit slice and it's gonna be equal to the invitation limits reducer and now in my selector what I'm gonna do is I'm gonna say whenever I ask for those imitation limits using git invitation limits then just go ahead and give me whatever is in the store beautiful so now what we need to do is write an API function in a dispatcher function to actually get those from the back end populate the store and then we'll read them out on our component so API function uh this is okay what I'm gonna do is probably get it from product yeah so first let me make a new file called invitation limits and then steal some stuff that I can replace later so the only thing that we're going to need well a couple things so first this is called invitation limits and in here what we want to do is say anywhere we have products just replace it with invitation limit and let's see how far we got here authorization editors okay so we are importing invitation limit and then this is the header that we want to use nothing fancy uh this is our endpoint our base URL and then when we ask for an Invitational limit we're going to be passing in the ID of a user and then we're going to be expecting back an invitation limit and the full URL is a space URL forward slash the ID of the user that we want to get it returns an invitation limit and now that looks good we just have to make a dispatcher function for it so same name so refactor your name get that dispatcher function new typescript file and then we can use the same uh standard we're using for products and get that individual one right here okay so tissue limit you can say get imitation limit as get limitation limits from imitation limits we are just setting an invitation limit and this is git imitation limit and call this then set the invitation limits okay so now in our dispatcher function what we're going to do is we're going to import get invitation limit from our API functions gonna import the dispatcher function then we say whenever we call dispatch get invitation limit we pass in an ID you're going to get it from the back end set it on the front end and then we'll take it out later on and that is what we need okay so now on our profile page whenever we go to this page whenever we get our invitations we also want to get our invitation limits so salutations dispatchers and I want to say get invitation limit in we can just do this okay invitation limits and we're going to need to pass in our self ID so in order to do that we can just select self out of our state and we can do self ID and this is going to have a little issue because self ID maybe null and that is because in our store if you aren't logged in then self ID is equal to null but in order to fix this we can just say no self ID and return okay and why am I still getting this because I check right here is it because this okay and also these can be optimized using promise all so let's do that right now especially this as well as this get rid of you and all right so when we go to the page we are going to get our invitation limit for basically the logged in user and then we're also going to get their invitations and this should be working and Redux should be populating already so now I'm just go ahead and refresh this page and keep an eye on my network first go to this page and it gets back the invitations limit for user one which is me and all that's coming back correctly now let's look in our store see invitations limit okay okay cool cool so what we want to do here is on this UI we want to find the imitations limits for this user and I'm wondering if it's a better idea to put this in a hook but either way we can probably abstract it out later on so for now actually where am I calculating this right here yeah let's just use a memo function imitation limit amount so I will say that this first memo is going to be returning the information limit amount and then what we need to do is this so object values first of all we need to select all of our invitation limits so we can actually find which one belongs to this user even though there's only one in there we can kind of build this assuming that there's going to be more in the future so from our selectors we want to get a list of our invitation limits so select your state get invitation optimize those Imports later on but here all right so our invitation limits all right so first thing we need to do to get the amount is we are going to get a list of all our invitation limits and we're going to find yeah from there what we're going to do is we are gonna pretty much iterate through each invitation limit and what we're going to do is we are going to see the owner and find which one matches self ID which is pretty much our ID yeah okay so to get the invitation limit amount look through all the invitation limits you have in Redux and for each one find the one where the owner matches the self ID in other words the profile you're looking at now is this and then for this I can just use underscore and then do something like this okay so this is going to say if you can find one then just go ahead and return the amount for that otherwise just return zero so it may be a zero for like a split second while the request is pending but otherwise we should be good and then this can be used right here okay and that should actually give us our logic and let me just refresh this to all right so now mine is eight okay cool so imitations three out of eight now let me go ahead and revert that back to 10. okay so when I go to my page it gets my updated invitations now let me just try logging out logging back in just to make sure nothing broke okay so it was Zero for a split second but then it's good so now for this create functionality let me minimize this down to five and then what I can do is I can say basically if if you have five out of five then don't render this create button okay so where are we rendering the create invitations button right here so for the render create invitation button this is write content and what we can do so we're comparing the numerator which is the list of the invitations length this do we need this as well I don't think so I think it's just a little bit too much so when determining whether or not to render the button that is going to allow the user to create more invitations the logic we can say is if the invitation link length basically if the number of invitations you already created is greater or equal to we should really only need equal to but I don't know we may get into a situation where like you created 12 out of 10 maybe you created like way too many invitations and then I don't know Django admin came in like manually entered or something either way it's just a little bit more safe this way so if you created invitations that match or exceed your limit then we just want to return null okay so now hopefully I'm going to create two more and after I create this one then hopefully that button should disappear which is good now I can delete one of these and it should reappear all right cool and on that note I actually think I takes care of this entire invitation invitation feature sorted by created day status I mean it doesn't look beautiful I would say but you know it's functional all right actually that feature took a lot of not as long as I thought and I'm also noticing right here on the profile we probably want to display the username uh probably right here but that's a another okay so now let me just yeah pretty much just review and clean everything up okay so here I just make lint and then make test which these tests are kind of unrelated but also I'm really slacking on my writing test but well I'm gonna get these features out okay so for the invitation limit serializer we're now returning ID to keep everything standardized also to give us a little bit more flexibility on the front end and then when we're retrieving this we're doing some uh more clear things with the PK where if they pass in a noninteger PK then we're just going to give them a clear error message and valid ID provided and also if they pass in an ID of a user that doesn't exist we'll just say no invitation limit found with this ID all right there we go and then uh let's see what else we got going on so that was actually it for the uh back end so updated detail response push that up and now for another Mini review so I'm going to run lint all right no issues found that's good now let's do one more review for this back end okay so do you wrote a API endpoint to get the invitation limit for individual user and this is looking good and then we updated the section heading to include optional subheading and restyled some things that looks good it's just our updated styling subheading is secondary color pretty much light gray looking good this is our dispatcher function everything is sorted basically call this endpoint and then set it in Redux and those are all good importing our new dispatcher functions our selector and then we are fetching this data on page load then we are pretty much finding the limit by comparing by pretty much just finding it based on the user ID and we'll just have zero by default before the request comes back then we're saying if you already created more inverted or enough invitations to meet or exceed your limit then we're just going to return null so you can't create anymore and then render the section heading right there with the proper values in it and this is just our selector to pull that data from State constant for naming imitation limit reducer all conventions look good and then in here pretty much nothing too fancy okay all good are standardized imitation limit invitation limit we decided to store those as addict even though we only have a one now um we may be displaying this information for other users again still don't know if we're even gonna allow well I mean we almost have to um be able to see other people's profiles we're definitely going to be allowing that the question is should you see other people's invitations and I don't know I don't see a reason why you wouldn't but maybe people want to keep that private who knows but either way I'll say invitation limit logic and one last time let me just log out log back in go to my profile four out of five invitations it's a nice annotation created delete this one edit this one for me and even though this is accepted I can still edit the note for you okay I think all of our logic is working so on that note I'm yeah I can pretty much merge these in so back in let me just merge these in so first what I like to do is whenever I'm creating a PR I like to name it in a specific convention with the number of the issue and then a little hyphen and then the name of the issue took it and I can just say closes four to eight and with this keyword closes whenever you merge your PR in it'll automatically close this issue and now all of these changes look good oh yeah this for all my invitation updates okay this looks good cool cool all right so I will squash and merge this in by the way I like to uh another thing I like to squash it before I merge it because then you see in my master Branch I only have one commit so if I ever need to revert this it just makes it a little bit easier just to uh kind of explain what's going on here and also another thing I like to do is stop my server before I pull down the branch so Master is updated now I just merge everything into there so I already deleted the branch on the back end now I can just delete it on my front end pull it down one more time make sure I got the latest updates and then just run that again and let me make sure I do have it deleted on my local and then no more branch on the back end okay and now for the front end let's just do the same then deploy this bad boy clean some of this up okay so front end like to follow the same pattern uh the issue on the front end was 79. so let's say that 79 PR is for invitation Updates this closes issue number 79. create a pull request and then we're reviewing all of this is kind of as we went along you just skim through real quick make sure I don't got any todo's or anything looks good that looks good that looks good update those update those actually just make sure that uh oh wait a minute you have some changes that we didn't push up yet that could have been bad wait no I don't what am I doing here I thought I saw something blue somewhere all right nothing to roll back maybe I was just seeing things okay uh yeah nothing to push up on the front end so we're good on that note and now all right all right yeah a nice little session today refresh this in the squash and merge which is going to close the issue so we should only have four issues left so delete this branch sweet for issues left and now let me just go ahead and stop my server and sometimes if I'm fetching Master while I have a my Dev server running I get some issues but either way back end Branch deleted frontend Branch deleted let's go ahead and restart this confirm that our back end is still working locally and the last thing I always like to do after merging in a new feature is this shoe some really light QA so log out log back in all right the feature looks good this is all for master Branch let me delete this create a new one a and we're good to go all right so yeah in just a few hours we now have our invitation logic all built out and let's see what other oh yeah so in the next video what I'll do is this I know a hesu I told you a while ago I was going to make this update my bad it's uh been on the back burner for a while but just wanted to get this core functionality out first by the way in the next video this is what we will be working on and then from there another thing that I really want to do I'm going to be adding some social uh functionality to this social network that we have in my cooking core or my cooking website I was working on we had it where you I actually really like this idea but users could like um share pictures of basically share recipes including a photo of whatever food and then the details of the recipe of course like I don't know just the recipe itself and it was uh yeah kind of just a way to you know see what everyone was was eating cooking from all around the world but what I'm going to do is I'm going to take that same logic and I'm going to make a little bit more generic so instead of having it it be a recipe it can just be a generic like social media post with an image and some text and then I'll be building out a feed so basically users can post pictures or just write any posts like they would on you know another social media site but then we start getting this thing you know a little bit more social uh you have some way to uh do something with other users interact with them in some way other than just inviting them and of course trading with them but uh yeah gonna start making this thing come to life little by little we'll get there but yeah for now a good coding session thanks for watching and yeah if you have any other suggestions or features you would want on the site let me know I'm building and yeah don't plan on stopping so let's do it baby see you next time