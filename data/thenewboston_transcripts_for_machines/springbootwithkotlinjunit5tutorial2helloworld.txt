all right so once you've extracted the zip file let's go and open your ide so in this tutorial series i'll be using intellij and i recommend you do the same because it has the best support for kotlin it also works well with spring boot if you want to use eclipse on netbeans that works just fine as well just make sure to install the kotlin plugin if you should have any problems following along please try using intellij as it's of course the easiest way to follow along just using the exact same tooling now depending on your intellij version this project start window here might look a bit different but just look for a open button and then open up the location where you have your way you extracted your project for me that will be this one here spring booth the new boston once you open it it's going to start building the project using gradle and it will download well the gradle distribution if you don't have it yet and we'll just start downloading all the dependencies and everything that you need so for me since i already have the gradle version installed and so on it only took 15 seconds but it might take a few minutes depending on your system and your setup so just give it a moment to get everything done and once it's finished just go to the project view on the left hand side and open up the project directory here now before we dive into all the different files and what they mean and how you can use them let's just open up the source folder and then under main and kotlin you will find the main entry point into the spring boot application so here because i called my artifact the new boston it generated a class called the new boston application so let me just go ahead and rename this really quick so i'm just going to fix at least the casing here the rest should be fine for now and then let's also update the name of the test class that was also generated for us and that already looks a lot better now let's just go ahead and run this application first of all and just see it in action before we do anything else all right so once it starts up you can see here in the run dialog you can see it locks spring first of all and then it starts up the whole application you can also see the version that we selected that's being used here you can see it's starting the new boston application and then down here you should see tomcat has started on port 8080 so this is the default port that it will use and if it starts up successfully you should see this log message in your log files so let's go ahead and check out this application in the browser over here let's open up localhost at port 8080 and that's just going to give you a white label error page which already means that you have a tomcat running and you have a springboot application that just doesn't really know what to do with this request over here so that's why you can see it's not found if you didn't have anything running on this port it wouldn't be able to connect in the first place if you want to get rid of the error page what you can do really easily is you can go into the resources and then in the static folder here you can add a new file a new index html and you can just let's say we put a headline here it's a hello spring boot so with this just rerun your application you can also tell it to not ask again in the future and just rerun so you can do that with shift f10 or you can also click the button up here so now with these changes let's try again and let's refresh this page in the browser and you should see you have hello spring boot there so it's just showing the index.html whatever you put in there is going to be shown at the root path of your application now if you have any trouble running this project and if you get an error such as cannot access class java.lang.class you might have to go into your project settings so for this you can use ctrl alt shift s so it's a bit of a hard combination of keys or you could also go ahead and go to file and then project structure and then just make sure you have a proper project sdk selected here you can use a jdk 11 or jdk 15 just to make sure that you can find all the java classes in your class path all right so hit ok and that should do the trick make sure there are no errors down here as well in the file and that it starts up successfully all right so far so good but we didn't come here to write html code so let's create a more spring boot like hello world application and let's create our first controller or rest endpoint for this so let's create a new coupling class or file by the way i'm using alt insert to create new elements in the tree here and let's call this one simply hello world controller so this is a new kotlin class or file hit enter and then this one well so far is just a regular class so in order to tell springboot to make this a rest controller just add the annotation called restcontroller and this will tell springboot to initialize this class and to make this responsible for handling rest requests next you need another annotation here called request mapping and this one defines the path to use in your rest or for this rest endpoint or for any endpoints in this class so let's go ahead and say api hello so this means now that this rest controller is responsible for any endpoints that start with api slash hello so with the current application that would be localhost 8080 slash api slash hello now in order to actually add a mapping here let's create a function and in kotlin to create a function or a method just write fun and then give it a name such as hello world and this will simply return a string and then let's just say we return hello this is a rest endpoint now when you have a very simple function like this one in kotlin meaning one where the whole function is really just one simple expression you can also refactor it by converting it to an expression body and just writing it with an equal sign and that's just the exact same thing just written a bit more concisely now there's one more thing we need which is another annotation on this method and here we can use get mapping in order to say that this is supposed to be a get endpoint now get endpoint is typically just to fetch some data and here the data we fetch is a very simple string but later on it will be things like the list of banks that you saw in the beginning now on the scat mapping annotation you could also add another part of the path so if you wanted something like let's say api slash hello slash spring boot you could do it like this or even just like this and that would mean this will be appended to the space path so like i said this would turn out to be localhost 8080 slash api slash hello slash spring boot now here in this example we don't need this so let's get rid of it and this way this get mapping will simply use the parent path over here so just api hello and that's all you now have your first rest 10 point so let's restart the application again using shift dot and f10 and then let's just give it a second to rebuild the application and then restart it so here tomcat started on port 8080 so let's go over to the browser on the root path we can still see our index.html and now if we go to slash api slash hello we should see the content that comes from the get endpoint so hello this is a rest endpoint all right perfect so with this you are now set up and ready to go ready to add your actual business logic and proper endpoints so let's go ahead and do that in the next tutorials all right perfect so you've created your first web service based on spring boot you have the project ready to go for the next few tutorials if you liked it so far please leave a like below and also check out my youtube channel where i'll be posting a lot more about frontend and also backhand development for now let's continue with the springboot tutorials