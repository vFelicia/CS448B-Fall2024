all righty guys welcome back and in this video I want to talk to you about State now state is pretty much a way that you can customize a component and if you guys are thinking wait a minute we already can do that with properties there is one big difference between properties and states of your component and that is States they can change so I know I didn't mention this whenever we were talking about properties but whenever you give your component a custom property whenever you create it it's set for life so for example say that you have this button component and you pass it in the property to make the background color green well that button is going to be green for the rest of its life now say that you wanted to make a button that could change colors every time the user hovered over it well you couldn't use properties for that because properties their values can't change whenever you have a value that needs changing on your component you need to use state it sounds confusing but it's actually really easy you you can customize your component using properties or States whenever something is going to stay the same use properties whenever it changes use States all right fantastic so let's go ahead and make one using States so I'm just going to go ahead and make um a component called checkbox because you know whenever you have a checkbox it can either be checked or unchecked so what we're going to allow the user to do is click that and then we'll have a bit of text that changes it says hey you checked it hey you unchecked it hey you checked it hey you unchecked it so since that bit of text is going to change that's why I decided to use State instead of property so just going to name it checkbox and set it equal to react create class all right so I guess first of all we can just go ahead and render out the basic um kind of structure of it so again like I said what I'm going to have is I'm going to have a checkbox and then under it I'll have that uh bit of text that says hey it's checked hey it's unchecked so pretty much two different pieces to it so for the message which is pretty much just going to be equal to checked or unchecked um I'll just go ahead and do this MSG and now I need a if statement so the way you access states are pretty much the same as properties except instead of props you just use state so this state and later on we'll make one called checked and we're going to say that this can either be equal to true or false and I'll show you guys how to actually set that in just a second so if it is checked then this message we're just going to say equal to checked and then we'll say else message is unchecked all right so there is our basic logic right here and before we go further in creating this component and actually rendering out um any HTML I want want to build another function right here to show you guys how to set the initial value of your States so there's a builtin function and it's called git initial state so whenever you call this function was it going to autop populate for me ah come on mate just do it all right so this is a function that you can use and its job is to basically set up the initial state of your component and this is actually why it wasn't autop populating all right so what this does is it returns an object of your States now we're only going to have one state in here and that is checked now you can set this equal to true or false to start with it really doesn't matter I'm just going to set this equal to true because I feel like it and essentially what I'm going to do is I'm going to set it up where whenever this is true then that means that the user has a checkbox checked if it's false then it means that they didn't check it so it's good for like filling out forms and stuff like that all right so right now we have one state checked and it's equal to true and if you want to add another one called like bacon and set it equal to 32 you can you can add as many states as you want it doesn't matter so now that we have a state variable what we can do now is actually return some HTML so return and this is going to be on multiple lines so I need that and all right so so again like I said we're going to have a checkbox and then just some text below it so since we're going to have multiple elements we need to wrap them inside a parent div now for your input the type of this is going to be checkbox now how should I set this up all right I'm just going to make it really basic at first just so we make sure that something is displaying on the screen and then later on I'll show you guys the cool stuff so this this is going to be the checkbox and it's a valid checkbox right now now beneath it I'll say uh checkbox is and then this will either say checked or unchecked now in order to do that all we need to do is we need to Output this variable which is MSG so MSG boom roasted there you go now to actually render this I just throw it in my render function and let me go ahead and refresh this and check it out so right now it says checkbox is checked now why does it say that well because we didn't add any logic really we just went ahead and we render this component and the initial state of checked is equal to True So then whenever it rendered it said all right if this is checked which it was then the MSG which is the message set it equal to check so it says checkbox is checked and and again if this was false then this would say checkbox is unchecked just like that so we got our state working properly but now we have to actually add the brains to make it work correctly so let me change it back to true and what I'm going to do after this is I'm going to say all right you see how whenever we load this page for the very first time the default behavior of HTML and chrome is to have these checkboxes unchecked well we can actually overwrite that and there's builtin value called default checked so this is essentially equal to true or false you can set it equal to whenever whatever you want and you can actually just type it in but what we want to set it equal to is a state of this checkbox whether it's checked or unchecked or true or false so how do we do that well we need to access that state variable by this state checked so so again if this is true then it's going to say true right here and it's going to be checked which it should be just like that and if it was false then it would be unchecked which is pretty much the default Behavior anyways but you might as well have control over it so we got this taken care of now we have one other bit of logic to work out and that is we want to say whenever the user clicks this area right here then we want this message to change all right so how do we do that well we already learned in the last video how to work with event handlers now instead of onclicked what you may think it would be called it's actually onchanged and that gets called whenever the user clicks this whether they check it or uncheck it so I'm going to write onchange right here whenever the user clicks that checkbox what do we want to call well we're going to have to build a function in just a second but for right now we'll just say handle checked and again we didn't build this yet but we will build it right now so again whenever the user clicks this we're going to call a function called handle check now again that's equal to a function separate it with the comma and R right so what do we want to do whenever they check the checkbox well all we want to do is we want to pretty much set the state of the checked which is either true or false we don't know we want to set it equal to the opposite of what it was before so I say that because if it's checked and they clicked it then we want to set it to false if it already is false and they check it then we want to set it equal to true so we pretty much change it from whatever it is now a really cool way that we can do that is this whenever you want to change the state of a component variable then all you have to do is call this set State now this takes an object and and just like this you can pretty much set it to whatever you want so we can just go ahead and set the state equal to false or true or anything like that but instead of just passing it in um a value we just want to get the current value of checked and make it the opposite so how do we do this well we already know how to get the state by using this this. state. check and in order to flip it or give the opposite we just write a ex what is it exclamation mark in front of it basically this the symbol above the one all right so what this is going to do again whenever we click this is it's going to get the current state of the checkbox is it checked or not is just going to set the new state equal to the opposite of it that's it so now let's go ahead and refresh this and check it out it now toggles on unchecked and checked unchecked and checked boom boom boom boom now this is another important thing that I want to point out you see right here all we did is we set the state all right but why does it automatically render I mean usually in most programs you would have to be like all right so we're going to change it State and then we need to explicitly tell react all right now we have to redraw this piece of the Dom this piece of the web page but the cool thing about react in components is you don't need to explicitly say whenever your state changes to redraw a certain part of your web page it automatically watches for your States and where they can change and whenever your state changes that part of the web page gets redrawn automatically to fit that so all we have to do is we worry about changing states and all the rest of the hardware gets taken care of for us so look at this we now got a custom part of this component that can change so by default it's checked and whenever we uncheck it and check it again it redraws or changes pretty sweet huh so again just to sum things up state is a lot like property but whenever you use property you can't change it like we're doing right here so whenever you just want to set a background color or maybe throw someone's name in there and it's going to be that for the entire lifetime of the component then use properties whenever you have part of your component that changes in this example this bit of text right here then you state boom roasted thanks for watching I'll see you later