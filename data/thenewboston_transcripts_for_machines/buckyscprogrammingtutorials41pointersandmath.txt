alright guys it's time to jump back into pointers and specifically in this tutorial I'm going to be covering pointers and how we can use math with pointers and even more specifically I'm going to show you guys you know how to add integers to pointers and why the result isn't exactly what you might expect so let's go ahead and start off by building a basic integer array I'll call my Bucky and it can hold five integers now we already know that each integer on my computer takes four bytes of memory on the older computers they usually either take up two bytes or four bytes on some of the newer computers they might take up eight bytes so you know if you're running this tutorial with me and it's not the exact same results don't freak out it's just how your computer stores integers so let's go ahead and make a couple pointers I'm going to make a pointer named BP BP 0 and this is going to be equal to the address of Bucky zero in other words it's going to be equal to the address of the first element so let's go ahead and print this out right now and see what the address is so on just give a nice little prompt like BP zero is at memory address and let's print out BP zero that will print out the memory address and of course that's in that line so now let's go ahead and build and run this and we see that BP zero is at the memory address ff0 eight okay simple enough so since we built an array and since we know that each integer takes up four bytes we're expecting the next pointer well let's go ahead and build a couple more pointers first and we're expecting the next pointer to be a memory dress for away from that so if that one was eight the next one will be at twelve and the next one will be at sixteen so let's go ahead and one this will point to the second element and this will point to the third element so now let's go ahead and print all these out on the screen and when I do we can clearly see what's going on 1 & 2 & 2 so basically we're bringing out the memory address of this and then the memory address of this and then the memory address of this so let's go ahead and print this out and check it out bp0 is it location FF 0 0 and since we're storing integers and they take up 4 bytes the next one is 4 bytes away FF 0 4 the next one is 4 bytes away FF 0 8 and if we were to go on I'm not going to but we can clearly see that each integer takes up 4 bytes of memory on our computer and since we're building an array all these integers are stored one right after each other so that's why each element in our array is stored 4 bytes after the next one basically whenever you make a ninja on computer it reserves 4 bytes of memory for it and you know nothing else can go inside that memory except that integer so let's go ahead and say we're playing around and we decided to do something stupid like be p0 and we set it to add to 2 you know this memory address so let's go ahead and put plus equals 2 well now let's go ahead and print out the address of b p0 again and see what happens remember before it was stored at arm the address FF 0 0 so now when we add it to to it we should probably be expecting this to be a FF 0 2 but let's go ahead and run this to see what happens okay like before the first element will store to FF 0 0 then F F 0 4 for the next one then FF 0 8 for the next one but what we did is we took this first one FF 0 0 and we added 2 to it so we should be expecting an FF 0 2 right makes sense that's how it works in our brain but our computer said b p0 is now it ff0 eight well that was the address of this one right here so what is going on what happens is because pointers don't work like math works in our head whenever you add integers third pointer it doesn't change the memory address of that pointer it only changes what element it's pointing to so for example whenever you run this and we try to add two to this pointer right here it didn't change the memory address right here what it did is said all right I'm going to take your pointer and add two to it and basically I'm going to point to whatever is two elements away so again what I want to stress is whenever you're working with math and pointers you're not changing the memory address you're only changing the element that appoints do so again you're not changing this piece of memory right here you're changing what element it's pointing to simple enough like I have a really hard time explaining that but you guys can see what's going on so for example if I put be p0 plus plus it wouldn't change it to FF 0 1 it would change it to FF 0 4 because let me go ahead and prove it to you guys first so we added 1 to this it didn't change the memory to 0 1 it changed it to 0 4 because 0 1 it would overlap this one which would overlap this one and cause a whole bunch of problems so what it does is and change it instead of changing the memory address it just says alright if you're adding 1 to this pointer then you probably want to just point to this pointer right now so that is basically how pointer of rithmetic works basically instead of changing the memory address it just changes where it points again you guys can clearly see in this example what's going on so you know just look at it and you guys can probably understand that a whole lot easier than me trying to explain it so there you have it that's how pointers work with math and why you might be getting a different result than you might expect so thank you guys for watching don't forget subscribe in the next tutorial no idea what I'm going to be covering but I'm probably going McDonald so you guys chill out wait a couple seconds and I guess I'll see you guys in the next door