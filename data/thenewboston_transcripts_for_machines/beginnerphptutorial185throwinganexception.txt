hi this is Alex from PHP academy' org and this is a video tutorial created for the New Boston now in this tutorial I'm going to be talking about exception handling now exception handling is a different way to handle errors in PHP that your program might output and it's used to change the flow of your program usually to save the current state of the program while you throw the error and there's loads and loads of different ways to do that but before we get into it the different parts of this tutorial and parts relative to exception handling will go through different ways and you'll eventually try and understand how it helps I'm not going to do too much explaining for now but meanwhile follow a little more example test out the code and try and work out for yourself how this is best worked out and where you should best use it so I'm going to create an example and this is going to be a function that's dividing by a number so dividing two numbers so let's set the skeleton up for our function it's just basically function divided and then we're going to supply it with two arguments so it's number one and number two now with division by zero we need to incorporate this into our function to ensure that division by zero doesn't occur now number two cannot be zero number one can be zero because when we divide 0 by 0 let's just bring up a calculator actually so let's say we've got 0 divided by 10 is 0 so that's absolutely find that operations completed now what about 10 divided by zero cannot divide by zero so number one can't equal zero at any point in this function when we call it with the parameters the arguments put in so we first of all need to create an if statement to say if num2 is equal to zero then we need to do something else we need to echo a nope we don't we need to return sorry num 1 divided by num2 so let's test out the the divide function we've just created so we're going to echo out divided and we're going to say ten and five for example so 10 divided by 5 is 2 so we should return this operation because num2 does not equal zero so let's come and refresh you can see that we've been returned with the value 2 so now what happens if we supply it with 0 let's go back here and pull up let's apply this form of 0 and refresh and so obviously nothing's happening at the moment because inside our block nothing's happening but or there's not no code inside our block but what happens if we want to throw a new exception so these this is the simplest way to throw an exception we would say throw new exception and in here we can specify a custom error message that's going to be sent through with the error so cannot divide by 0 now why do we use a exception handling and why do we throw new exceptions now the reason is we usually in this case do it to substitute the error message we give an error out but we don't use the default PHP error message we don't want to do that because we don't want to show it to our users in the way that we've created a PHP error like that's just one way that we might use to do this so let's go back here and press refresh and see the difference in air we've got so here we've got uncaught exception exception with message cannot divide by 0 in this file and it gives us a host of other information as well and tells us where it's thrown so it's thrown on line 5 which is here that one here now so this is a basic idea of throwing an exception now the reason we're not we're not returning a we're telling a fatal error we are returning a fatal error is because we don't have a block to catch this exception and to do this we use a try throw and catch statement I'm not going to explain this in this example but we're going to do that in the next video and this is going to allow us to make things a bit more custom so for now we throw an exception without a catch so we've been given a fatal error which looks like this in the browser but later on we're going to work with the try throwing catch to make everything flow just a little bit better