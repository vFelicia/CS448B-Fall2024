alrighty y'all welcome back and in this video we're going to be deploying the back end of our little mini social network and before we get started I want to say that I'm going to be typing out a lot of commands and configuration files so on and so forth in this video however don't worry about like uh like pausing the YouTube video and copying them I'll leave a link to the entire guide in the description below and if it's not in the description below for some reason then it'll be on the GitHub repo so either way um yeah just want to mention that you can just copy and paste them all so with that being said I'll actually go ahead and walk you through real quick what we're going to be doing so we're of course going to be deploying our back end and for our static files um not only the static files for like Django admin but we're also going to be storing the image files for that social network because remember the social network allows people to upload pictures of recipes and food and stuff so all of those are going to be being stored in the S3 bucket that we're going to configure in just a second now once that's configured then we're going to be setting up our ec2 instance and this is what's gonna be the server for that Docker config both the database and the application server that we're going to be running and from there we're going to be setting up an elastic IP to point to this and that's because whenever you restart an ec2 instance it actually has a different IP address each time so since we want to keep that the same so we can set up our domain name that's why we need elastic IP now the last thing I want to mention is that this setup right here it isn't like the final version of how we're going to be structuring everything because in a production environment what you usually want to do is instead of just pointing to one instance then you can point to a load balancer and then that way you can have multiple ec2 instances and kind of distribute the load that way scale horizontally and also right now we're going to be hosting that postgres database right on this ec2 instance however it's typically a better idea to use another service like RDS and that way if you have multiple ec2 instances then they can all communicate with it because of course they you know you don't want like three separate databases if you have three instances but either way for this tutorial series what we can do is kind of like get this up and running and then we'll go back and figure out how to optimize everything and structure things differently I just think it's easier that way rather than just like trying to do everything all at once it can become a little bit overwhelming so baby steps we'll get there to the final production build but uh yeah for right now this is a good pathway there so with that being said the first thing actually before I hop into any of this AWS stuff is if you go into this project under scripts and you click production data just go ahead and run this and then this is going to generate all of the uh information that you can use so this signing key in account number this is going to be for setting up your super user that can log into Django admin and the secret key is just going to be of course the Django Seeker key but anyways go ahead and generate some new ones of those and I have a little scratch file to the right of my screen I just want to go ahead and save those and then yeah just kind of getting everything ready right now all right so again the first thing that we're going to do is we're just going to set up this S3 bucket and we just need to pretty much create one and change the permissions on it so we can well so we can actually write to it but for other people they need to be able to read from it because they're going to be image images here of food and people of course they need to be able to read those files to see the images so how do we do all this well before we can even create that bucket what we need to do is we need to create a new user because what's going to happen is I'll show you real quick so we're going to create a new user that has command line access pretty much like a new um AWS user and they're going to have permissions to write to this bucket and we just don't want to use our regular user right here so we can set up a um a special user and then we'll use the access keys to pretty much configure everything in Django so for now I'm just going to click add user and um I will say for the username I'll say uh Penguin user and that is because the domain name that I want to use to set this up is penguin chess so let me just say penguin chess user now because this is like a programmed user and they're not going to be actually someone like a human being logging in we don't need to provide them access to the AWS Management console so we can just go ahead and click next and the policies if you click right here for the permissions attach policies directly the policies that I want to attach is actually just one and that is Amazon S3 full access so this has you um this user has permission to pretty much do anything with uh S3 it's exactly what we want so from here go ahead and click next and then this is looking good you can just go ahead and click create user it is creating it is creating and then where are you at all right penguin chess user and I know this is kind of confusing because um The Social Network is for like sharing recipes and uploading pictures of food and this is like penguin chess user but hey it's the domain name that I had so uh yeah we'll just roll with that right now all right so anyways uh what I did is I clicked on the user because now that we have one created we just need to well you'll see insecurity credentials I'm going to scroll down here and I'm going to create an access key and whenever I hit create access key that's going to allow this user to pretty much um like log into AWS from our Django app more or less so we can select application running on AWS compute and then we can go down here and click next yes I understand I want to create one and for this tag uh uh I don't even think we need one or do we yep we're good all right so for the access key make sure to copy that in in your little scratch pad on the right I'm just gonna label these and paste that in and now for the secret access key just label this so I know what it is I'm going to go ahead and show this and copy this one as well by the way it is not usually a good idea to um create these keys and then show them on YouTube for the world to see however I'm going to be deleting these right after this tutorial so it's good but uh yeah of course you want to keep the secret private and uh yeah not show not show it to everyone but now that we have a user that can pretty much be configured in our Django app what we can do now is create that S3 bucket I'm going to click S3 and then I'm just going to create a brand new bucket and I'll say penguin chess uh let's see because we're gonna have another bucket to host a website I'll say uh um penguin chest back end and I want to keep this one word penguin chess back in all right now for the region this is fine you uh typically want to pick a region that's closest to you or the people who are going to be reading these files however for this tutorial you know it doesn't really matter that much and then for block all public access I actually want to uncheck this because we're going to be having uh images in there that we need the public to be able to read so of course you don't want to block them because that's the entire point and yes I acknowledge and I believe that is all we need let me check and all right great bucket and now that our bucket is created let me go ahead and actually click into that penguin chess penguin chess back in a little bit of tongue twister and then this is pretty much just like a a folder basically but now we need to update the permissions on it to say that anyone is allowed to like get the images in here so what I'm going to do to enable that is click on permissions after you clicked into your bucket and at the very bottom here you should see this section right here cross origin resource sharing if you just go ahead and edit this and then paste in this configuration that's pretty much what this is allowing I'm gonna allow anyone to get the stuff inside this bucket we're not going to have any like private files just images in here so yep there you go and then go ahead and save those changes and now our bucket is good to go and actually before you close out of this tab go ahead and copy the bucket name and stick that in your scratch file too okay name and the reason that we need this is because whenever we configure our ec2 instance to pretty much write these files then it needs to know what bucket it's writing to so with that being said we can now move on and start setting up our ec2 instance so from here go ahead and go to your ec2 section and actually what I want to do is I want to switch over to Oregon and yeah so okay now um actually the region you want again it's going to be closest to you but this is where I have all my other ones and just go ahead and click in instances because we want to click this button right here to launch a new instance and for the name name it something that is relevant to your application but for this I'll say penguin chess core and the uh the operating system that we want I'm actually going to search for Ubuntu because I'm looking for this second option right here Ubuntu Server 20.04 LTS hvm and then this one is good too by default 64bit x86 select that and now once that is selected just make sure yep what we can do here is just review this the micro or the tiniest one is fine now go ahead and select the key pair that you want to use mine is this one I'm on my new iMac actually isn't that new anymore but the time I made that key pair it was now for network settings what we want to do is of course allow SSH so we can SSH and configure everything allow https and we also want to allow HTTP and the reason that we want to allow both of these is because whenever we are setting up our certificate as part of that like a verification process it's going to reach out to our server and because we don't have HTTP yet or excuse me https yet because like that's what we're in the process of doing enabling that it needs to communicate over http so anyways that's the story behind why you need both of these but make sure that these are all checked and I think that's all we need so go ahead and launch this bad boy and then just wait until it's ready all right so it says it launched it but now click back in your instances you can see that it's probably uh still pending right here so just wait a few minutes until it is up and running and then we will be ready to move on to the next step all right so that took less than like 30 seconds but anyways go ahead and click into it whenever it's running and now what you're going to be able to see the public IP address and this is where we can SSH into so go ahead and make sure that's copied and now pop open a terminal in SSH and the username is Ubuntu at the IP address to enter and yes everything's good and we are in okay so the first thing we're going to do to kind of uh start setting things up is just update the package index and upgrade packages so that's uh again sudo apt update this Command right here all right and then once that's done the next thing that we're going to be doing is installing a couple different things Docker git nginx serpot basically just a bunch of different packages that we're going to be needing so go ahead and run that as well all right looking nice looking nice so after this what we need to do is we need to download the docker gpg key and what this is used for is to verify the authenticity of the docker packages during installation so just go ahead and run that should take like a fraction of a second then after this we are going to add the docker repository um entry to the systems software sources list so pretty much we have a new place to uh download from and then after this since we updated that we just need to run sudo app update again and then once that is done and we got our sources updated we can run this command to actually install some of the docker related tools beautiful okay so now that those are done this Command right here is going to allow us to install Docker compose and then once we have that installed we need to actually make it executable so we can run it from the command line and that's what this command is doing right here and then from there what we want to do is we will want to add your user to the docker group so click enter and do it with this command and now that they are added what we need to do is we can just go ahead and exit this and then SSH back in and then that's going to pick up all your updated permissions so now once we log in again we are going to be uh yeah good to go our users added to the docker group and from here the next step is we can actually clone our application from GitHub so to do this is this command again it it was in my uh the New Boston Developers organization under a repo called cooking core so just go ahead and clone that and then once that's done I'm going to go ahead and CD into that directory and then from here we need to go ahead and create that dot m file so you can actually just touch it since it doesn't exist but no it doesn't hurt the test its existence first all right so now we have that dot end file created and now what we need to do is pretty much make the equivalent of this but for production so we're going to create a local directory and then we're gonna write pretty much settings.prod.py so in order to do that if you do maketer hyphen P local and then from here once we have that we can just create a new file by sudo Nano in that directory called settings prod.py and now in here this is what we're going to be pasting in so check it out so debug false that's what we want now for our secret key let me see what one I generated in my scratch file all right all right so replace the secret key with your secret key and then for these trusted Origins just replace the name with whatever domain name that you are using penguin just want to make sure I spelled everything right all right so this is the non WWE version www version and then this has that and then for the AWS access key ID this is pretty much that um user that we created so they can write to our bucket so the first one is the access key itself and then the second one is the secret access key so those are the user credentials and now the last thing is the name of our bucket and mine was named penguin chest penguin chess backhand not chest okay now just save those and that's all we actually need to do to uh kind of configure our application so from here what we can do is we can run Docker compose build and remember whenever we run this by default it is actually show you the output of this just to show you what it looks like but by default it uses that Docker compose yaml file not the docker compose Dev file which we use just for local development but that's why we don't have to like specify it because it's like the default already for Docker compose so this is going to go ahead and build those containers both the um the database one and our application one and remember for our application one it's using that um Docker file in that entry point as well so that's what's happening right here again it's running this uh EC working directory and then it's getting all those um like apt installing poetry so on and so forth and now after this it's going to install those python dependencies right here poetries installing those all right looks like all went well so from here now that we have um those containers built we want to spin them up so Docker can pose up minus D this is going to run in Demon mode which means there are just going to run in the background and they are going to run in the background just because uh you know we don't want to have to keep our shell open the entire time so yes those are running and to verify if you do Docker PS then you can see indeed well this is kind of hard to see let me see all right well this first one right here this is the um application that's using that Docker file and the second one this is the database so we have two compute two containers communicating with each other just like we wanted looking good and five one okay now from here we do need to do a couple things just to kind of like initialize our app the first thing we're going to do is create a super user just so we can log into Django admin so if you do Docker exec it and then paste in the name and this is probably going to be easier to see on your screen but I have everything kind of jumbo for YouTube but Docker exec hyphen it in your container ID and then bin bash this is gonna pretty much allow us to Shell into the container and now what we can do is we can make super user and then okay it's going to ask us for those credentials and also this is in the scratch pad that we had earlier so this was my account number and for the password just put in your signing key and all right now another thing that we have to do after this just one other thing is that we are going to Shell in to we're going to Shell into Django and I know this is a kind of shell section here however because I'm already shown into like my ec2 instance in within my ec2 instance I'm like Sheldon to my Docker container and in my Docker container I'm going to be shelling into to this Django show right here but either way after you create your super user write make shell and this is going to pop you into Django shell section a few more shells I should be able to start a beach all right and we are going to run this command from cooking core models import config and this is just the kind of part of the application it's not going to be part of the process for like most of your normal apps but just the way I have this cooking social network set up uh we're gonna run config object we just need to have one with the owner equals none transaction fee equals one and then from here we can just go ahead and exit out of the Django shell and whenever you do this right exit with the parentheses right after it so now we're exit out of the Django shell we're in the um Docker container still so to exit the docker container you exit without the parentheses and now we are back into just our regular old server all right looking good now the next thing we're going to be doing from here is we're going to be setting up nginx now this nginx setup is actually going to be kind of like a twostep process I would say the first thing we're going to do is just enable like basic communication with our server and that's because later on we are going to be using serpot to set up https however for that communication it's basically that it communicates with our server verifies that we are who we say that we are and then once we have that set up we can enable https so it's kind of a twostep process kind of weird but um this is how it's done so go ahead and remove the default nginx config that just came with the installation and we're just going to do sudo Nano to write our own nginx config by the way they're like sawing something outside it's kind of annoying but whatevs we'll fight through it all right now in here paste in just want to make sure it's all good so paste in the configuration that um is going to be included in the link below then just save that so we now have our own Uh custom like temporary configuration for nginx and you can just do pseudo nginx hyphen T to test that configuration make sure your syntax is good and you didn't like uh miss a bracket or anything and from here we actually need to restart nginx so I can pick up that updated configuration and that was quick and the last thing we need to do is run this Command right here and that's going to allow nginx through our firewall so it rules updated and yeah now people can pretty much uh communicate with our server more or less so now that this is looking good for now the next thing that we're going to do is we're going to set up this elastic IP because remember we are Sheldon using this IP however because we want to set up our domain name and if we were to restart this instance right now we would get a new IP address which is not that great we're going to need an elastic IP which uh is pretty much just like a the naming of it is actually kind of confusing because it's like a IP address that doesn't change it's probably called elastic because you can point it to different things but either way go down here to elastic IPS and click on that and from here we can just go ahead and click allocate new uh elastic IP and then yes this is all good go ahead and click allocate pretty much it's saying like created and elastic IP and from here I'm just going to name it uh penguin chess so I can kind of differentiate that and ra so once it's selected what we need to do now is we pretty much have one created but there is no link to any of our ec2 instances so to create that link again make sure it's selected and then if you go to actions associate elastic IP address then make sure you have instance selected right here and then for our instance we can choose this one right here penguin chess core and then just click associate that and now we have a link between our elastic IP and it pretty much is like a pseudonym or references this ec2 instance and to test that what we can actually do is actually it's usually down here grow up a little bit all right so this was our new IP address that doesn't change make sure that you go ahead and copy that because if all went well let me actually get a new tab here because if all went well then we should be able to ssh in using our new so again this is our elastic IP now and yes okay looking good so now let me pull up my fancy load diagram again so now that we got an IP address that doesn't change what we'll do now is we'll update our domain name to point to this IP so I'm going to go ahead and first I'm going to copy this IP address because during the configuration you need to give it an IP address to point to but anyways under your RDS no no no I always get it confused Route 53 RDS is for our database setup but under Route 53 go to hosted Zone and penguinchess.net so this penguinchess.net is what we use for um the back end the penguin chest IO is what we'll use to host the front end so users will type in this whenever they're going to the um actual site however if we just want to hit our API or reference it then we'll use this but this is what we're setting up for our ec2 instance since this is our back end and I already have a a name so I can just go ahead and edit this but if you don't see a name right here you can just go ahead and create a new one but anyways I want to update my a name and I want to point this to and I don't need an alias I just want to point it to this elastic IP and then I'm going to save that and it says that it was updated cool cool so from here what you can do let me pull up this in this tab is we pretty much need to make sure that this domain name is now pointing to our new IP address that we have set so from here you can make sure you copy this go ahead and open any DNS Checker tool I use this dnschecker.org just paste it in here and hit search and yes 4 4 159 44159 that was the one right I just gotta double check real quick yep four four one five nine okay so it looks like our DNS settings are updated so now uh penguinchess.net is pretty much uh like a representative of our server right here and in fact you can actually um let me open a new tab yet again and then I can SSH Ubuntu at penguinchess.net yes all right pretty sweet huh and now that we have our domain name and everything Linked UP what we can finally do is request our SSL certificate and let me actually one second I'm just updating my little config file that I'm going to paste in to um be the domain but I'll show you what I'm doing all right so the first thing uh you want to do is you want to run this command and pretty much follow along the prompts and this is pretty much just uh this serpot we installed earlier it's just gonna well this is how you set up your SSL certificate so for the email address mine is Bucky at hotmail.com I'm just kidding it's a Bucky to new boston.com that should be my email address though do I agree to this yes I definitely read that wink oink all right next would you be willing to share your email address no thanks just willing to share on YouTube for everyone to see and uh no name okay so this last one is just um your domain name penguin chess actually wow almost messed it up penguin chess dot net uh definitely make sure you don't have any typos in here because uh they need to verify penguinshest.net hit enter and okay so while that is doing its thing all right looking good all right so the next command is this um it's just going to do a dry run of the renewal and this should make sure that your uh certificate's Auto renewal is set up all right enjoy one congratulations our newer it'll succeed yada yada looking good all right so all that is set and now what we can do is we can actually override that old temporary nginx configuration and stick in our new permanent one so in order to do that kind of the same pattern we did before we're going to remove the one that was in there and then we're just gonna use Nano to create a new one and then go ahead and paste in this config and by the way let me scroll up and show you what you're going to need to replace on here so in here you are going to need to replace two little Snippets this right here and also the line underneath it replace it with whatever your domain is so once that's good to go just go ahead and save this file hit enter and all right and of course anytime you update your nginx configuration the first thing that you should always do is test it just make sure you don't have any syntax issues and then after that once it's valid you need to restart nginx just to pick up that updated configuration all right nginx is good don't have to mess with it anymore and on actually on that note I think everything's done so let me just pop this open and at this point we should be able to go to uh penguinchess.net and hopefully if we go to admin all right looking sweet and again you can see that this is indeed over https so everything was set up good to go and now I can just log in with my account number and the signing key beautiful beautiful okay so yes that is uh yeah that's pretty much how you set up the back end now in the next video like I said even though this is kind of like a Django uh tutorial series what we're going to be doing is we're going to be setting up the front end because like I said I got a feeling if you are you know digging around in AWS and responsible for deploying your back end chances are you're going to be responsible for deploying the front into so I'll go ahead and uh show you how to set that up and after that you'll actually have your own little uh social network so that would be pretty cool so as always thank you for watching don't forget to subscribe and I'll see you next time