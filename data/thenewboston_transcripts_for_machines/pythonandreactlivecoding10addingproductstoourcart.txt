already all welcome back to another video and in this one what we're going to be doing is working on the product Details page because in the last video we built out the product catalog but whenever you click one of these products all you are taking to is a screen with the ID in the top left and well it's uh not the greatest user experience I must admit eventually we're going to be building out something like this where we have the picture on the left some details on the right and you can add it and remove it from your cart so there you go let's go ahead and get started now what actually start by popping over in tnvos and seeing what we got so well first of all the product Details page right now is just this where we have that one div with the ID being printed out in it and this is tnbos for that full version so another thing that I want to mention is that before I even get started whenever we were planning out our little road map I have the buyer product detail page listed and then I have some address logic and then the add to cart button so I'm not sure in this video If what we're going to do is we're going to build out all this logic or just the UI and not have any of this add to cart logic but we will see how far we get because according to the deadline that we gave ourselves um six more days to tackle the rest of these seven features so on that note enough talking let's get to working all right so in tnbos right here another thing that I'm thinking is that I don't know if we want this back button now the reason that I had it in tnbos is because this is an electron app and of course it doesn't have um you know it's just a desktop app it doesn't have like a browser bar or back button or whatever however since this is a web application and all web applications nowadays uh whether you're on a desktop or a laptop or a tablet or mobile phone whatever they always have a back button I'm thinking that we may not need this one right here so yeah let's do that let's keep the design minimal and we will go without a back button and then if it just feels weird for whatever reason we can add it back in but let's do that so on that note we have our main container we have the back button there we're not going to have then we have the main content and I believe the main content is not going to be needed either because this was just to yeah so the main content is basically our parent item and we want a grid display or a flux display with a gap of 24 between and then we can make a responsive later on if needed so let's do that all right so for our page we are going to display Flex since we're gonna have the image on the left and the details on the right and we'll just have a gap of 24 and that'll be our spacing in between those two elements so now what's next render left and render right so render left is easy the left section just has image in it which is products image so left and then the image left and then the image okay let's steal these two all right so left image and then I can steal this render left got a fly buzzing around my head in case I make any weird noises suddenly and okay so for this product image actually can I get the URL from here where is this being hosted at all right So eventually this is going to be coming from you know the actual Source in Redux or whatnot but for right now this is good oh my God this fly is uh pretty annoying I wonder if I should open my window that's a gamble though I might be letting more flies in all right and let me get my scaffolding for this taken care of as well so I have my left left section and I want my right section in my right section is just all that product info so Flex Flex Auto take up the remaining width Flex Direction column display that on top of each other let's do this all right so I'm going to steal that right styling as well and I'll go back to 10 BLS and say render right price container price all right let's keep it nice and lean for now then kind of build it out all right so for render rights all I'm going to do is put render left render right render everything all night I'm gonna render I'm gonna render okay a little warning but I'll get okay so now we're working with something now first and foremost I want to get my padding situated so what is the padding around here the padding around here is 24 pixels top and bottom 32 left and right so let's steal you and let's see how you are looking so you would be in my main container and that looks not too shabby click here click here all right we are looking all right all right so now let's go ahead and build out the rest of those right elements and oh my God this oh I got it I mean I swatted it like I didn't kill it but you know I taught it a lesson like it knows not to fly over here anytime soon they're pretty short memories though so we'll see what happens with it all right um so we have the name first so let's take care of these three elements we got the name the description and the user label which we're calling that so name and description first of all what's the name we got the description is going to come from my color system which I can import from here and we don't have the exact same color system so instead we're going secondary color for the description and now let me just do these and all right so for the product name I'll say like wooden spoon and then for the description I don't know like juicy spoon actually juicy is probably the last descriptive word you would ever want to see when buying a wooden spoon the last thing you want it to be is Juicy but you know for this it's all right it's weird just using it as sample text okay wooden spoon juicy one spoon good enough good enough okay next let's go the account label all of those are used okay so the account label which we are calling the user label and when did we wondering where it was so we can just steal it we do call it user label right um account yeah user label why didn't I find you die typing around okay user label user label okay and do we need to style you more yes so let's do this all right it's going to import user label label user label and then I'm going to take this to so I want to style a component even more and what I want to do to it I want to add a margin top of 16 margin top of 16 beautiful so now that user label is going right under the description right yes yes yes yes yes okay and we're going to say something like seller in the name of them is going to be their you name I'll just say uh Bucky for right now and let's see what we got nice very nice very nice just make sure you don't got any extra padding margin sweet okay and let's see what else so after this we have this section right here let me close the rest of these all right so that is the price container which is probably just going to be like a border panel so price container is just kind of the flex align items with a border that's why content space between margin top padding okay so all this we can take Elemental p q r okay so for the colors where's my border color colors dot border all right so I got a price container you're looking good now the price is what I need to put in it and do I have that price element yes yes yes yes we're looking good okay so I have a price and it it's gonna take a product okay but I don't I can't pass in a product yet unless I get the product first it's gonna be easier this way so I thought it would be easier just to bet out the UI first but since we're going to be needing to pass this product around and we're already plucking off the details right here then let's just do that okay so I am going to say first let me get my selector product selector so selectors products accuracy and then products products so from these products all right so I want a minimalized version of this also I'm gonna run into a little issue thinking it may be undefined which actually it may be so that's interesting okay you can use memo all right so here what I'm going to do is pretty much use the ID that we have right here which is going to be a product ID to select the product from my Redux store which should be easy because they're all keyed by ID so use memo and I am going to say that this is going to return maybe I should type it out in a bit foreign or maybe it can just return undefined this is probably okay return products with that ID yeah in this ID could possibly be undefined so I'll say if no ID oops come on if no ID return no that's gonna okay so if no ID return null or if it's an ID so hopefully it's just a regular number and the product is already in the store and it's just going to go ahead and return that oh my this fly okay now if you don't have a product then just go ahead and return null as well and then let me actually type this out so I want this memorized function to return product or no do you do that yes it's looking like it so now what I can do is let's actually find out all right so when rendering left and right if you don't have any product return null and in the case you are going to have a product at this point I'm just gonna do product dot image and for product name and description a little bit of the same so name here description here and then this is the product seller's username you all right let's see if anything broke so far great wooden spoon before one spoon by Bucky bacon bacon nice and juicy by Amy looking good all right fascinating the book about mushrooms yes it is okay so now what we can do is we can render that price logic and by the way I just want to test this out where I do have a valid ID in just not any of the products in the store and I just get an empty state which I can update to give a little bit more clear indication what's going on but for right now it's good so these are my products in the store let's go with uh wind spoon right now since this is kind of the uh pin code this tutorial to sell this wooden spoon to one of you out there so next up let's go ahead and tackle the price logic okay we'll get rid of you get rid of you and now get rid of you okay so in the price container which we do not have rendered yet but we do have this we are going to be rendering the price okay when am I using you did I not even use this price component anywhere yet components uh price index come on we built it oh I was probably using it in a yeah all right so import price from my component Library and then in my price container it's render price and the product is the product that we have we have it at this point all right all right 2600 for the spoon 2200 Foot Book bacon looking good okay next we just have to render this button so this button is either going to say add to cart or remove from cart depending on if it's in your car or not so for that logic what we can do so let's first take a look at this render card button all right so there's Boolean that we calculate to say if it's in the cart or not and we are not going to be able to have the actual Logic for this yet but we can just make a temporary variable now if it's in then this is the button you want to render if not that's the button all right it's easy enough okay so let's first import our button so import button nope don't need it here we go all right so since we're gonna need a button gonna need to import a button we are going to what did we call it here render cart button all right so for render carbon we have this constant is in cart and for right now we're just going to set it equal to a Boolean all right so this is going to be um eventually we need to update this to have actual logic to determine if it's in the cutter cart or not but for now we can just use it as part of this render carp on to decide which one to render so we can test things out so in our price container in that little panel we're going to have price on the left and then the cart button on the right now if it is in the cart then it's going to render a button to remove it and if it's not in the cart you can add it so let's build out these handlers as well so handle remove from cart click okay so let's just go ahead and make this nice and easy so let's type so we're going to be displaying a toast message so get those utils and then enum all right so for now mmhmm let me just make sure something does type okay okay okay so for the render card button uh you know add to cart click and I'll add to the card click and that is product added to cart and these don't need to be template strings oh wait so for remove is product removed from cart okay so this should be working quote unquote just in a really dumb way so let's see what's going on okay so I have it hard coded in where the product is in my cart now because of that I have this removed from cart button and when I click on it it should just say product removed well two card that's embarrassing product removed from cart now if I say it's not in the cart then whenever I go here it should say add to cart and then you click it it adds the cart and it says product added to cart all right so that is the functionality that we want so far at least um of course a lot to do from here first of all this cart number and basically other cart logic is just a dummy logic right now it's not actual hitting not actually hitting our back end or anything so let's do that next actually let's check our little blueprint okay buyer product detail and then we have the buyer add to cart button separate so maybe we will do this the buyer detail Pages well basically styled there's not much to it got a little responsive Behavior looking good for right now of course some updates later on but uh it's looking all right so the buyer product detail page I almost want to say this is done right now um my dresses created a dress and then what we can do once we have that is go and work on the Ed cart logic I'm also thinking if we just want to do this now so let's go ahead and take a look at our back end for this so we have so what we're basically going to be doing is creating cart products okay so a cart product is just a product in your cart and then when you click this button you're basically just adding and deleting cart products and I believe we don't even have yeah yeah there's not even an okay so on the back end we don't have any update functionality we just have crate however we may need to add it later on because though with this right here when we can or let me show you right here basically we can add or delete the item from our cart right here um eventually we're going to need to handle quantities meaning that whenever you go to checkout if like you can say I want one of these which would probably be the default or you can order 10 of them if there are 10 available but for right now we're just going to keep it nice and simple and keep this addin removed just wondering if I I'm gonna tackle this a so yeah we won't even pass the quantity in or maybe we'll just do one by default although on the back end we're already checking for it you know what we'll do we'll just do everything with the quantity of one on the UI for now and then once that is working we'll go back and kind of build out the quantity logic so I'm also thinking now how we're going to structure this on the front end so maybe we just build this into Redux so yeah let's follow our roadmap actually and what I'm going to do is I'm going to uh kind of start on my addresses um actually let's just go ahead and work on this cart logic and then we have something going on okay so this cart product is what we're going to need to store in Redux so let's do this let's get our old friend Postman out so we can see the shape of everything all right so first I'm going to log in and then what I'm gonna do is add a cart product to my cart so first let's do this uh let's pop open Django admin all right so no products in anyone's carts and then what I'm gonna do with my authentication token I'm gonna use this to add a cart products in the endpoint for cart products was indeed cart products let me just send it with the error and see what we get okay so for the quantity we're gonna do one and for the products what we can do is this so what product would I want to add to my cart well I am Bucky in this situation so uh this bacon I want to add and that is product 11. unsupported media type and request and that is we can just go raw actually all right so for this we can just do a quantity of one in product of 11. okay and this is the response that I get back so basically that serialized product which we need in this information you're the buyer the quantity all the seller stuff is nested beautiful beautiful so now take this move it over to Chai GPT and say okay create a typescript interface for that and then while that's doing that thing let's go ahead and yeah it's going to be a while before we get back to here so okay so under types let me just look at products right now so product is gonna have activation status ID seller and that's a user reads serializer yeah this is what it's going to come back as okay so on this note what I'm going to do first is start typing out my cart products since we're essentially going to be storing these in Redux so let's just go ahead and yeah get started now the name and Convention for these files is cart ER products all right so a cart product and then from the product all right holy moly sweet ravioli okay so a cart product is going to extend created and modified and then it's also going to have an ID where is Dick coming from all right so let's hop over to chat GPT again hmm what's going on here uh order what are you talking about order what uh okay I think I'm not gonna take Chad should be these advice on this one all right so anyways for a cart product we have it basically inherits from created modify which we did and it also has an ID which we gave it and then a quantity and buyer or also number so quantity and buyer are also a number and that's going to be my structure car products stored by the and then last but not least we have a product and this is just going to be a product all right so basically a car product has a created modified date a buyer ID product quantity so six different ones and that's right one two three four five six these are dates dates product serialized good to go good to go okay and now uh this is a car product and then we're gonna store it in Redux keying everything by this ID so now you just need to kind of patch everything together all right so car products after blocks car product car products and that would be cart product car products and let's see what design pattern okay so in our store we're going to create a new slice here called card products and before we get to this we're going to need to add a new constant for cart products card products carb products car products okay now in our store where are we going to take this from maybe wallets all right so what are we going to do to it actually maybe course yeah because the functionality that we're going to have is to be able to create a cart product we're gonna fetch them in that case we are gonna set multiple ones at once and also unset when we delete a car product so basically I can just steal this and then update it accordingly okay so for this cart product slice instead of cores it's going to be car product instead of core it's going to be cart product all right let's see what we're working with here so we are going to be creating cart product slice and the constant this is going to be keyed under on the back end it's just cart products cart products and yeah this constant is also um whenever a Redux toolkit uh like self generates these action names then that's when this constants use couple different things kind of internally um initial state is just empty and then when we create the slice it's going to have whatever initial State we give it which is empty dicks empty dicks so nothing car product we're gonna set a cart product by passing in a cart product object and then it's just gonna key it by its ID when you saw set multiple cart products at lunch for example whenever you are fetching this page you're going to get all your cart products send them all at once then you pass in a list of cart products from the back end and that just iterates through them reduces them Keys them all by ID and then when you're unsetting them you just pass in the ID and it'll delete it and that's good car product actions okay so now we just need to go ahead and save this register with our main store so the cart products are going to be stored under the key cart products and for that the value is the cart product reducer that we just created okay looking good now after here we're going to go ahead and make a selector function just so we can pull that data from our store for this we will say when we call the function get cart products then we want you to give us the data in state car products that's our selector function and now if all went well we should have cart products in here beautiful all right so now the next thing we need to do is we need to kind of write our API and dispatcher logic so whenever we click this what it's going to do is it's gonna basically make the equivalent of this request where you're creating a cart product and we'll just set the default quantity to one for now yeah and then we're also after this data comes back from the back end we got to dispatch it to our store so our front end is synced up with our back end okay so that's going to be quite the task not really but let me sip on some coffee first for anyone uh out there are you coffee drinkers or energy drink drinkers or just caffeine free uh yeah let me know I want to try some new drinks where were we come on Bucky let's not get distracted here this caffeine mumbo jumbo all right so let's first go to what we can just boot on our API so we are going to be building our cart products a new cart products types your file and it's pretty much going to be the same as the course right yeah not even we can definitely use this actually not quite because Coors yeah this one's gonna be better um because cores uses form data because um well I can show you right now so the reason that cores use form data is because they have an image right here and whenever you're working with image you need form data however what we are doing is we are not using any image we're just adding and removing products from our cart so that is why I don't want to steal it from Court instead I want to steal this logic from wallet but that has some tricky stuff too and also this is interesting so I typed out this request data okay this is interesting kind of like it great wallet response or request okay let's do this so I am going to type out the request shape as well all right great carp product all right so the request data for create cart product request what is it so it's going to be a quantity it's going to be a number and it's going to be a product ID which is also going to be a number and then that is looking good now we just need to import that in my main types machine let me separate my API endpoints like this yeah that looks a little bit easier to read okay readability readability is key car products and I'll say cart product request all right you should have everything typed now now let me maybe it's easier if I just do this all right so wallets wallets where are you at let me steal this too all right so first of all what I want to do is I need to replace this base endpoint with that request okay so create cart product all right so all right so for this I am using crate car product and the data that I'm going to be passing in is this data right here the create cart product request which is a product ID and a quantity and then I'm going to be getting back a car product object and I am just making a post request getting back a car product with the data that I passed in in my authorization headers are my regular ones without the form data so that's good and with the response data take care of that later on but now I am oh you can't delete actually we can borrow this from course so to delete cores and get cores yeah and we won't be doing any updating for now so we'll build that later don't want any dead code okay so this is my crates and then instead of core I'm just gonna do car product and okay let me see what I'm working with here all right so create card product is how we want it now when you delete a car product all you need to do is you need to give the endpoint an ID and it's not going to return anything but there's no data to return after you deleted the object and then you're just going to delete it with our headers to know that we're authorized that's good now for getting cart products you're just going to hit the endpoint it's going to return a list of car products return a list of card products and yeah should be good all right so those are API functions now need to make our dispatchers so this is pretty much our connection to our API but with our dispatchers this is the part that uses these to actually make their requests and then store them in Redux so dispatchers new texture file car products and all right and let's borrow from sue the same thing where we are going to okay let me uh let me throw in the chat GPT see if it could redeem itself from last time so here's my dispatcher okay let's get a new chat hopefully I forgot about that other chat uh here is my coding standard right uh dispatcher for car products and then I'll give it these card products it's so far so good sets that onto it from historic car products great great delete git yeah and it looks correct to me so let me copy this all right gbt it appears you redeemed yourself and create card product request this I can just import from types match and this is in card products all right so for this all of these should be used now okay so you're importing all of these API functions renaming them and then you have a set cart product set car products and onset from car products enter and then you are creating car products the same data that you passed in create card product request then deleting it you're just taking an ID dispatching it and then to get them we're getting it and setting with those okay I think we are good to start hooking this up all right so now that we have our dispatcher functions let's go back actually what I'm thinking is we can probably do this so of course we're going to need to make this uh logic actually work when you hit add to cart it actually creates a new cart product and then once we have that I'm thinking just the order of operations we also need to update this little indicator right now this is just hard coded in to say 12. but of course we want it to reflect the number of items we have in the cart but I think first I'm just gonna make this button work so let's go ahead and do add to cart find that all right now back in tnbos let's do add to cart first or maybe yeah is in cart okay let's do that hmm so what we can do is actually build the is in cart logic first and the reason I want to do that is because that determines whether we need to add our cart or remove from cart button so for that gonna need a little bit more coffee of course um some good coffee baby okay so the next question becomes how do we determine if a product is in your cart or not well what we can do is we can look at the cart slice and the cart slice is going to have a bunch of these cart items but nested within them all are the products and from those products we can pluck off the ID of each and then we'll have a set of IDs and then with those we can just check if the ID that you're on is in basically your car products more or less so let's do that so we need products and cart products so get products which we already have and then cart products so get car products all right so all right so is in cart this is going to be a memoize function and this is going to return a Boolean it's going to return a Boolean which we don't need to type out all right so isn't cart so what we can do first is get the product ID so for the const all right so the object values of cart products are are all of your carp products now from here what we're going to do is we're going to map over each one and just actually I forgot some braces there all right so what we can do is we can map over each of the cart products and get the product and just extract the ID from the product okay and then what we can do is we can say um return product IDs includes the ID of the product you're on and it's giving me a little issue because this ID can be undefined so if I say if if no ID return false string oh that's interesting so this param must be a string yep okay so even if what it's saying is that even though it looks um in the URL like this 14 is an integer um whenever we're plucking it from params it just treats all of these as a string so in that case what we can do is we can just parse it to an integer um I'll say parseint ID let's find where else I'm doing this okay I guess you don't really like how this is uh yeah it's good enough okay so if it's in my cart then that logic should be working we can test that later on we also probably want to make this a set instead of a list but let's use memo whatever now if all the product IDs includes the one that you're on that is in your card if not okay now handle add to cart click let me just look what I did in tmbos okay some warnings here okay so we'll talk about those in just a bit but for right now we'll kind of just um do it the hard way so this is going to be an async request as is removing it and I also want to put it in a try catch so let's steal one of those with some toast I like toast I like toast okay so basically this logic so what we are going to do when adding to cart is we are going to try to dispatch and use this patch which is going to come around Redux dispatch something to the store basically add info to the store and then instead of get products air adding product to cover all right so what do we want to do we are trying to create a cart product and this is going to come from dispatchers car products so we are going to import credit card product from dispatchers car products and then whenever we handle add to cart click we're gonna kick off this dispatch function in this dispatch function and going to take create card product data which is going to be a product and a quantity so the quantity we can just hard code in one for now and the product is going to be this right here it's not pretty so let me do this all right so this is our request data um and this is saying as well that what if you don't have an ID and just say no ID return all right so whenever you click add to cart click or excuse me whenever you click the add to cart button then what it's going to do is it's going to pretty much create that request from the product ID from the params quantity one by default change that later on and then dispatch it to the back end and store it in your store I'm just going to say product added to cart if not if something goes wrong we're going to get an error message that says this so let's see where we are at can we add this actually let me look at my network request so add to cart 400 great great great um you cannot add from different sellers okay so apparently I already had something in my cart oh that's right because okay so a couple of different things are going on here first of all I already had this product in my cart from Amy when we were testing things around so actually let me do that also good error message this is the uh why clear error messages are key helps the front end to debug so hopefully when I refresh this okay even though this says 12 I shouldn't have any items in my cart and now when I hit add to cart all right looking good so first of all let's see if it worked on the back end yep I have a cart Product Where I Am the buyer for and it says bacon quantity one that looks good and now oh I even have this removed from carbon that's pretty cool and then let's see let's just make sure that yes in my Redux store I now have this cart product which was part of the cart product ID 22. looking good looking good all right now when I hit remove nothing should happen but let's fix that in just a second okay so to remove from car let's just steal all of this and all right all right so the goal is to remove it from a car and get this success message now we're not going to need any request data air removing the product from cart is going to be the error message and then for create cart product we are going to want to do delete cart product so let's import that as well and when we delete cart product instead of that request data we just need to pass in the ID this of course needs to be a string as well or excuse me an integer okay and for the car products all right cool so hopefully this should work let me just read through this one more time so try to make a request and store it in the store that you're deleting this card product and then after you say product removed from a cart otherwise show this error error removing product from car okay so this product is indeed in the car already as we can see now whenever I hit remove okay detail not found okay so I think I know what I was doing yeah okay so what I'm doing incorrectly is whenever I'm deleting this cart product um this is interesting so whenever you add a cart product you basically need to pass in the product ID however the response you get back is basically a cart product object and nested within that is the product object and you see in this case what I was doing is instead of passing in the cart product ID when I am trying to delete it I'm accidentally passing in the product ID so I just need to pass in the cart product ID so what I can do is this I think I can update this logic right here to say is in cart instead what I can do is I can look for a cart product and let me figure out where this is so I'm using this isn't cart just to determine that button okay okay but instead I just want to say I want another memory memrise function and all this is going to do is it's going to return either a cart product or null this from a types okay so I'll say if no ID return follows that checks out fine and then what I want to do I'm just going to return object values find where the product ID yeah I can optimize this later but electric values car product type undefined or null okay so here with find it's going to return undefined but I want to return null though I want to change the shape of this actually let's just do this and then here what we can do is we're just turn undefined to find turn this all right okay so is in cart can be replaced by cart product all right so if I do double Ampersand and say if you have a cart product then remove from cart otherwise if you don't have a car product just say add to cart now this should give me my cart product or undefined so whenever I am deleting it I can say if you don't have a cart product don't do anything otherwise what you can do is you can delete the cart product just using the cart products ID and this should work so let's figure it out all right so refresh this page and first of all let me just make sure again okay so this cart product with id22 is in my cart and if I remove it it says yes yes yes this is great okay so I'm gonna delete cart product 22 and also for my store I don't have any cart products in there now what I can do is I can add it to car again and when I do it adds it and the payload is product 11 which is right quantity of one and then in my real store it just adds it to the cart under the new ID with the product nested view to full beautiful beautiful beautiful okay so that is looking good I can remove items from my car I can add items for my car add to remove from okay now a couple different things that I want to do okay one thing that I want to do is this well let me just review this real quick there's Patrick's enums you product looking good um looking good looking good looking good okay so maybe some optimizations we can take care of later but for now I don't need to worry about that okay so some other things I want to do is this um whenever and I also want to ask about the user experience what do you guys think about this so I already have it where let's say that Amy is selling um flim flim Amy's selling bacon for VTX and even though I'm selling this let's just pretend that Amy is selling this wooden spoon for a tnb now it's perfectly uh valid is whenever we go to the checkout if we have products in there from two different currencies as long as they're from the same seller it's going to be fine because you're just placing one order um you're getting it sent to one location which is your address and it's just like a a deal between two people you just paying two currencies nothing really uh overly complex about that now what we are not allowing for their time being is let's say that um you want to buy one item from Amy in another one from Bob so in that case whenever you go to checkout you are going to have products in here from two different Sellers and that's just going to get pretty confusing not only from the UI wise because it's like are using the same address are you using two different addresses so on and so forth but then even from your orders it's like yeah we could automatically split them up so maybe you go and place order and then you end up with two different orders because we split them up among sellers but for right now I just want to keep the logic very simple and say that you're only allowed to place your order if all the products are from the same seller so that said we need to kind of communicate that on the UI again I don't know if this is going to be the logic that we're definitely going to stick with going forward but for right now we're just gonna you know we're building out MVP keeping things simple so in that case what I did is in tune VOS is whenever you're attempting to add items to the cart I say that if basically if the cart seller well let me see if they're is a cart seller okay so this cart seller is basically going to give you the seller of the products that you have in your cart now if it doesn't match the seller of the new product you're trying to add then you're just going to get a little warning and this is just going to say something like uh what was it well I forgot where it was but um it's basically going to say like hey you're trying to add products to your cart and they're from two different Sellers and we don't allow that so we're eventually going to need this modal so I'll say throw a warning modal when the user tries to add yeah let's do that or I'll say display a warning modal user attempts to add products from multiple sellers to their cart again this is likely going to be something that we're going to change in the future to give them a little bit more flexibility but for right now nice and simple and then another thing that we need to do is this so this number 12 is going to be updated to reflect how many items you have in your cart and we can do that right now all right so let's do that right now that's going to be the easy part so that would be in our Pages our shop and those are layout top toolbar see what's going on here so it's on the right render menu items and that is our buy menu items and right here so we have product count and we can name this to cart product count actually so cart product count the outline okay and let me actually make this a separate um render car product count since we're gonna have a bit of logic in here all right so render car product count first let's just make sure nothing broke and then let me just change this to something else just to make sure okay so what we want to do is we only want to render this if there is a cart product count first of all so and another thing is we're going to have to get so basically we're going to get all the products in our cart and then just get the uh how many there are so for Selective state uh what I just copy some car products Hindu I even yeah let's go ahead and memorize this I'm almost gonna react even though it's not a very heavy operation all we're doing is kind of um getting the length of how many car products we have I do think it'll be a little bit so we can say car product count and I will say return the length of their car products it's your current number all right so this is going to return a number how many carb products do you have and for this bubble we're just going to say if you don't have any car products then just return null because we don't want to render the bubble at all um another thing that we could do is we could just render it with a zero in it but that's kind of weird otherwise just show me how many you got and let's see how we're looking here okay so we have one item in our cart right now and let's actually delete that all right so I'm going to refresh this and we have this in our wallet incorrectly so that's another issue we have well let's just do this so I'm going to log out log back in okay kind of just get a fresh State here this is interesting too so all right so it seems like we have a little bit more work here than we anticipated um basically we forgot to fetch the products whenever we go to the product catalog so before we can actually test adding items we probably want to do that uh not the product details so that's the buy catalog page okay whenever we go to the yeah forgot this logic so whenever we go to the product catalog page what we want to do is we want to just fetch our updated products and we can do that with get products right here and apparently I'm using it somewhere already where on my cell products okay it's going to be easy then all right so I am going to want to use the same logic but for the virus catalog so it's products and what else am I going to need dispatch get products this player toast so dispatch first of all is going to come from react Redux so let's just do this display Eric toast utils toast to you okay so now what I can do is I can say that whenever we go to the product catalog page then we are just going to fetch the products so let me just test it from the beginning log out uh Purge all my state log back in go to the shop app and it fetches all of those products and then sets them right there now from here we don't have any products in our cart which is good just verify that beautiful so no bubble up here is right here however now I'm shopping and oh I'm feeling hungry right now I want to buy this bacon add it to the cart product adds to the cart we got a cart product in here and check it out we now have this little bubble that says one because there is one item in our cart now hopefully when I remove that the bubble should disappear and we are looking good and actually is this all right you know what um even though I have this buyer at the cart button and it appears things are working right now I'm not going to cross this off of the checklist for now and the reason is because we still have this to do which is I forgot where it was but on the product Details page we said that if okay so right now I have one item in my cart from Amy and then what we can do is we can go in here and we can try to add another item to the cart and right here we're going to get an error that says error item product to the cart however the error is because um I cannot add products from different sellers to my cart however in this case we have a little issue because the information that's being communicated to the user which is going to look like this it doesn't reflect a clear enough error message to let them know what's happening so instead we want to spin up a modal and it says hey um you shouldn't be adding kind of just telling them what's up we'll phrase it later on but that's what we're going to do now on that note I think we're good for our this coding session uh yeah actually made a lot of progress and I'm gonna go ahead and uh push this video up just because I don't know if it's going to be too long if I keep recording it but in the next video what we'll do is we'll get started on the address logic and then once we have this built out we'll finish up this logic to handle this error message in a more appropriate way better ux and then from there we get to the really fun stuff which is the checkout page and the uh buyer and seller orders and this kind of wraps it out so yeah lots of fun stuff to do deadline six days away I'm feeling confident I'm feeling confident about it but uh yeah thanks for watching and I will see y'all next time