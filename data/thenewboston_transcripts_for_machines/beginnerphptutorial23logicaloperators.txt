hello this is Alex from PHP academy' de org and this is a video tutorial for the new Boston in this video I'm going to be talking about logical operators now we've already seen examples of comparison operators arithmetic operators and assignment operators so we've assigned variables we've compared them now what happens if we want to use a bit of logic to maybe say want to check a few variables at once if they compare two different values now the best way to explain this is to create an example so if I was to create a number here number one equals ten now what I want to do is I want to create an if statement here the block and inside here I want to say number one greater than or equal to ten now echoing out this would be true so we valuated this to true number one is equal to ten so when we refresh in our browser we get true echoed out however let's say we want to check at saying an upper and a lower bounds we've already seen examples like this where we've we've simply made a comparison check but let's apply some logic into this I'm going to create a variable called upper and this is going to be a thousand and my lower is going to be 500 I'll make sure we assign that there my lower limit is going to be 500 now what I want to do is I want to let's change this text to let's say okay I want to test whether a specific number supplied which could be up here is equal or it's between a thousand and five hundred so I want this number to be either 1500 or somewhere in between so it could be five hundred and five or it could be 999.9 it could be a thousand it could be five hundred but it can't be under five hundred so it can't be four nine seven or it can't be one thousand and one for example so this number at the moment is one let's put it in within our boundaries so I'm going to say 654 which is between 500 and 1000 now how are we going to make this check now in PHP we have logical operators we have and we have or or we have not now I'm not going to discuss the knot in this tutorial in depth and I might come into it but we're definitely going to be discussing the and or the or now and or can be written in a few ways we can write and like this with a double ampersand symbol or we can write it and you can see it's turned blue as well it doesn't have to be in capitals but it just makes everything easier to see or is either two vertical lines they're also known as pipes so they're on your keyboard or you can just simply you probably guessed right or so we need to think logically and we need to think in plain English a lot of the time whenever we program anything so I need to say does this nut is this number greater than or equal to 500 which is the lower variable and is it less than or equal to upper so you probably guessed let's start writing this out and speaking in English as we go so I'm going to say if number is greater than or equal to lower and so let's space this out there and number is less than or equal to upper so it has to be greater than or equal to 500 and it has to be less than or equal to foot to a thousand so in this case will echo out okay if that's the case so let's refresh and see what happens okay we're left with the well we're printing out or echoing out okay so what happens if we now change this number to nine nine nine point nine nine for example let's refresh we're still being produced in our browser with okay it's still telling us it's okay so this statement is still evaluating to true now what happens if we say let's just say 10,000 okay so or 10,500 this is obviously greater than a thousand so we should be left with the alternative which will be to display nothing's we don't have our else on the end so if we refresh you can see nothing's displayed so this has worked really really well what I'm going to do at this point is I'm just going to use a bit of concatenation inside here and I'm going to say number must be between space lower and then I'm going to concatenate on some text and with a space either side and upper okay so this is going to read number must be between lower and upper in fact no that needs to go in our else part obviously because if that doesn't evaluate to true otherwise okay okay so the way it works is that if this evaluates to true was hanging okay otherwise we're telling the user the up the lower in the upper bounds of the number so if we refresh so far number must be between five hundred and a thousand if we pop this straight in the middle and say 750 it's telling us this okay so let's go and say that thousand 100 for example number must be between 500 and a thousand and then we can do the inclusive numbers as well so if it's 500 it's going to be still okay let's say we were to take the equals out of there remember it now doesn't equal so it's working so maybe we could put a little message on the end of here saying inclusive Okaloosa civ okay so now what we're going to do is get rid of this example and what we're going to do is we're going to have our number we're going to have and a can be one equals two I'm going to have can be two equals four so I want this number here to equal either 2 or 4 so how am I going to do this I'm going to start with if statement and inside here we're going to write if so we're saying if number equals equals remember we're saying is equal to can be 1 or so remember a double pipe number equals equals can be 2 so if it equals either 2 or 4 we're going to echo okay so let's check that at the moment it's 500 nothing's displayed so we can write maybe an else here Eko not okay so we say not okay now if this was to equal to that's fine feels to equal four that's fine if it was to equal say six that's not fine because it doesn't equal the things we've specified now what we can do is we can change this whole thing around and I can say not oh sorry I can say not we use this an exclamation mark to say not so if this is not true or this isn't true then it's okay so at the moment this isn't true all this isn't true so it is okay oh oh sorry yeah so it's so if not if the number doesn't equal then it's not true so refresh and all maybe weeds her okay so yeah obviously these need to be in brackets because what we're doing is we're evaluating the statement as a whole this is a hole here and this is a hole just here so let's refresh and at the moment is that okay so it doesn't equal the number doesn't equal two it does equal two so it's okay if we to do four and refresh that's okay as well if it's anything else other than two and four with because we've introduced this knot we're saying hmm oh and at this point we need to make sure this is and so okay so okay I'm confused in my own logic what we're doing is we're saying okay if the number is not and if it's not for so take a look at this code and try and sort of understand it but the logic of it especially speaking into an English English or you say it to yourself and you'll understand it a lot better but that is basically logical operators