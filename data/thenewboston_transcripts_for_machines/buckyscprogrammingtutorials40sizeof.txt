alright guys welcome to your 40th C++ tutorial and in this tutorial we're going to be taking a quick break from pointers and we're going to be covering something on the size of function now the sizeof function is actually a function that you use a lot when working with pointers but for this demonstration just to give you guys an idea of what the sizeof function does I don't want to include pointers because that's too much information for one tutorial so we're just going to be seeing a simple demonstration of the sizeof function and then later on we can apply it to pointers but for now let's go ahead and check it out so what the size of function does is it basically determines the size of either array or maybe a variable or a constant it pretty much determines the size of something in bytes and remember bytes is just the size of memory like 4 bytes 1 byte yada yada yada so let's go ahead and make a basic variable um I don't know if I tell you guys the chart yet but char just is a variable of character type it basically sword's a character so let's go ahead make a variable char and we'll call the variable C let's go ahead and see how the sizeof function works so you go ahead and type size of and then in the parameter you type what do you want to get the size of well let's just go ahead and get the size of this variable right here and then we'll just end that line and that's it you go ahead and run it and outputs the size of character which is one byte so any character we store in our computer it takes one byte of memory all right simple enough so let's go ahead and make another type of variable like um an integer variable so how many bytes do integers take up on our computer well if you don't get the same number as me don't worry but because every computer is a little bit different on my computer an integer takes up four bytes of memory so again if you have like a 2 or a or maybe you have 4 same as me I you know don't think you're running the program wrong every computer stores memory differently mine says 4 so anyways we know that a char takes one bite an integer takes 4 bytes and now let's go ahead and see double well we already know an integer can store numbers without a decimal point and those take up four bytes a double is pretty much a more precise integer so that's why whenever we run this we're expecting to see 8 bytes or something higher than 4 and the reason that doubles take up more memory than integers is because they're more precise so anyways what I want to stress is the more precise a value is the more memory it needs to take up so that's all I wanted to stress in now let's jump into something else instead of gee these basic datatypes let's say we had something like an array now you know an array is basically like 10 integers strung together or you know maybe 15 double strung together so let's go ahead and make a double array and we'll call it Bucky and it can store 10 doubles now remember a double took up 8 bytes on my computer so we have an array of Bucky and it has 10 doubles we're expecting to see 10 times 8 bytes so this entire array should take up 80 bytes of memory so let's go ahead and see if our prediction is right size of Bucky you go ahead and just write the name of the array in there and then go ahead and inline not Ned line and line there we go so now whenever we run it check it out 80 bytes right there and that is because each double is eight bytes and we're going to store ten of them so that's why this entire array took up 80 bytes of memory simple enough but you're saying all right so I know what the sizeof function does but why would I ever need to know you know the size of bytes I mean that's the computer's operating systems from I really I'm just the programmer I don't have to worry about memory that much well one useful way you can use this function right now before I you know jump into pointers and all that stuff is maybe you want to find out how many elements are in our array so you know maybe you had the user make an array or something and you know how many elements ahead and you need to know how many elements this array had in order to make a calculation well of course we know that this array has ten elements but say we were trying to figure it out it anyways something you can do is this see out what you can do is get the size of Bucky remember this would give you the 80 bytes this is the entire size of your array 80 bytes and what you do is divide it by the size of one element and do that just go ahead and write size of Bucky zero which is the first element and then whenever you printed it out in line you should get ten so let's go ahead here's the 80 before and now we get 10 which means ten elements in our array and again why did this happen what we did is we took the entire size of our array Bucky which was 80 bytes and we divided it by one element size which was eight so 80 bytes divided by eight bytes gives us ten elements so again any time you want to get the number of elements in your array say you know couldn't see that line for some reason take the entire size of your array and divide it by the size of one element and your answer is how many elements you get in your right so again here is a basic example of the size of again all we did is find the size of different you know data types arrays variables yadda yadda but later on we're going to be using this to work with pointers and it's actually a lot more useful than just finding how many elements are in your array so you know now you guys know the size of now whenever I teach you later on you won't get confused so for now thank you guys for watching don't forget to subscribe and I will see you in the next video