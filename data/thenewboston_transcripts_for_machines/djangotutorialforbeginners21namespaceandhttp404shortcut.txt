alright guys so in the last video what we did is we learned this really awesome shortcut of how to make a non hardcoded URLs and this is the proper way that you should do it in all of our templates but let's go ahead and take a step back and think about things for just a second I mean right now this project is pretty small it only has one app music but what happens when we start creating more apps maybe we're going to make another one for videos maybe we're going to make another one for profile form whatever so basically what I'm trying to say is usually sites have like 10 or 20 or even more apps so that's fine however what happens when another app aside for music has the same detail view maybe it has video detail view profile detail view well then whenever Django tries to look at this template it says alright you're telling me to get the URL pattern for detail but I have one in music one in videos what the heck URL pattern am I supposed to know what you're talking about well we solved that problem by namespacing our URLs that means that we need to say or specify oh whenever we wrote this detail right here we're actually talking about music app detail view and it's really easy to do above your URL patterns in music slash URLs just go ahead and write app underscore name and just set this to whatever your app name is in this case music so now we can go ahead and copy this and we can actually use this in our template so instead of just specifying alright URL pattern detail we can write music detail and now what we're saying is alright instead of just looking for a generic detail pattern actually go in the music app and look for that specific detail one so another cool thing is now we can have this keyword in however many apps we want so that works out pretty awesome and the last thing I want to talk to you guys about in this tutorial is kind of unrelated from all of that but this is kind of important because later on in the future tutorials I'm going to use this logic you know I didn't kind of want to skip over it you see in your views right here and in your detailed view whenever we look at the details of album we're basically saying okay try to get that album with some specific ID and right now we have a album with ID of one and two now if we ever try to you know query album whose ID doesn't exist like 78 then it's going to raise this exception so this is pretty much what people always do all the time they pretty much try to get something from the database and if it doesn't exist raisa 404 so since people were doing this over and over and over again what the developers of Django did is they give you guys a real nice shortcut to pretty much write all of this in one line of code so how do you do that well right after render go ahead and it's from jingle shortcuts right get object or 404 so we can actually actually let me cut this right here all right so you can actually delete your entire track except statement and here I won't even paste it in all right so instead of this what we can do is write album equals get object or 404 album primary key equals album ID so right here replaces that entire try except statement so it does exactly what you think it's going to try to get an object which object well something from the album class and this is where you specify what album it tries to get now if it can't get it is just going to go ahead and throw your 404 so this is a lot more condensed then your try except so I can go ahead and delete that and now check this out it says are you aren't even using this import anymore so we can actually delete that too so look how condensed this viewed up py file is I mean that is awesome and there's a lot of logic in here that we pretty much clean up real nice and neat so yeah there you go a couple cool tricks then guys for watching I'll see you guys later