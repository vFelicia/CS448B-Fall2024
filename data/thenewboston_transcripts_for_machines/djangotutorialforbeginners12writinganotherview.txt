all right hostas welcome back and in this video what I'm going to do is I'm going to be making another view aka we are going to be adding another web page to our website so let's just have a little quick refresher on what a view is a view is just a simple function that returns some HTML that's all it is so we need these because each URL pattern or each URL is connected to a view so if we want to simplify that even more each URL is connected to an HTML response obviously each webpage is connected to some HTML that needs to be displayed whenever you go to that so what I thought would be pretty cool is if on the music home page whenever the user first goes to this section then they can get kind of basically just look at all of their albums so the album cover is going to pop up and then they can scroll through and when they click click click click click one of these albums then it's going to take them to a more detailed view where they can see the artists and you know all the songs in the album name so on and so forth so again we're going to have two pages the first one is just the overview we're going to see are all of your albums and the second one is the detail view so let's go ahead and make that detail view structure right now so let's just go ahead and do this this might be a little bit easier above each of these patterns I'm going to add a comment and just write the exact pattern that it's matching so this one we didn't match any pattern so that means that they just went to the home page with no extra information after it now the pattern that we're going to be matching in this is this music and I think the best URL structure is after music you just type in the album ID so remember one let's Taylor Swift 2 was myth but let's just go ahead and put like um 71 in here just so we have a little example that the is what the structure is so basically music followed by some ID so what we always have to do whenever we're making these patterns or trying to figure out what the user typed in is always type URL and then a regular expression so our two single quotes my comma at the end there so whenever you use regular expressions 90% of time in these cases use carat dollar sign so the carat represents the beginning in the dollar sign represents the end so that's just how you signify beginning and using rate expressions now what we also want to do is we want to group these together so a group takes a bunch of things in signifies that this is one item so that way whenever we type something like 712 it doesn't view this as seven one and two it's not three different numbers it's actually one number 712 so of course the user was looking for album with the ID 712 and not you know three different elbows so later on whenever we figure out what number these are typed in what album ID they were looking for we're going to have to pretty much save this as a variable so we can use it in our code so how do we do that well this is actually kind of weird but your a question mark capital P and then greater than and less so go ahead and write something like album idea right here so later on whenever we look for this pattern and extract the integer it's going to save it as album ID so then we can just pass in our function just like normal so again I know it's weird but hey you got a bling Jango and you know whoever came up with a regular expression so there you go all right now after this we can finally start matching this pattern so what are we looking for in ID number well we're looking for a digit zero to one first of all so how do we do that at two square brackets in or a zero to nine so this means that we're looking for a number zero one two three four five six seven eight nine now this is going to great if we only have ten albums possible but the thing is we are looking for you know 11 and 12 in 100,000 so we need to say okay this is going to match any integer but we want these IDs to be you know several decimal places long so after this we write plus and this means that this pattern is going to match any um following integer so 7 1 2 is going to hit or pretty much anything that's a combination of single integers we're going to group them together into one single ID which is going to represent a number sounds kind of weird but again you have to write to the people making regular expressions and blame them for us and by the way once we do like 2 or 3 more you guys are going to like okay you're just going to like type them as fast and not even really think about it this is probably only confusing the first time but there you go so the next thing we have to do after we find this pattern is we need to connect it with a view function so actually let's just go ahead and make our view function right now and I'm just going to name it detail so every single View function is going to take the request in the request is just the HTML request and this is just whenever they connect your site and request something like a web page or an image or whatever and there's a lot of background information about this like their IP address and yada yada we really don't look at too much but that's what that is now the next thing we really care about is this album ID and again like I said what this bit of code does is it allows us to treat the album ID just like a variable so we can just pass it in and this is just going to be equal to something like 1 or 2 or 712 or 10,000 whatever pretty awesome eh alright so we have a function and now we just need to return some HTML so return HTTP response and let me just make this a heading 2 and for this tutorial we are actually going to connect to the database and pull out you know like the album title or the artist or anything like that got a you know kind of try to keep things simple here so I'll just say uh details for for album on say album ID and then let me go ahead and write string album ID and I want to move this to the end as well alright looking good so that looks pretty good whenever we call this function is just going to turn details for album ID one two three whatever make sure I follow pep eight and have a blank line at the end in art so remember that function that we just created it is called detail so whenever we want to hook up a URL pattern to it we just need to say view views because that's the name of the module detail pretty cool way and you don't add the parentheses at the end because it knows all the variables from these groups already so the last thing I want to say is just is add a name and just name it whatever the function is and I'm not going to touch on this because this is kind of what we're going to use later but whenever you have a name it allows you to do some really cool things in your HTML later on so there you go now actually there's one other thing before I forget so what this does is it looks at this and it's going to pull out the number however what we need to do is we need to say ok this pattern also has a little forward slash after it so look for the pattern with the number and the forward slash pull out the number entry to is album ID and we're just going to ignore the forward slash that isn't part of the group alright cool enough now let me just refresh this alright that still works now let's go ahead and check out this whenever they go to album ID it says details for album ID and this is going to be myth whenever they go to one there we go it's going to display Taylor Swift and right now we can even go to three or any number such as bata bata whatever and that is because we are not actually connecting to the database yet in validating that is a valid album ID and we actually have something stored for it so that's your basics of views again it's actually really simple just look for whatever URL the user typed in and connect it to one of these functions right in there all the tutorials online and all the documentation makes it seem really hard but it's not so yeah that's it I'll see you guys next time