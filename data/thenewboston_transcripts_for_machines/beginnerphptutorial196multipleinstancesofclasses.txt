hello this is Alex from PHP academy.org and this is a video tutorial for the New Boston now continuing from our previous example we've looked at withdrawing a specific amount from our bank account um class in our bank account property so we've got our balance set to uh 10.5 now in this example we're going to be um depositing money into our account so let's go ahead and set this back to zero um and let's go down and um we'll slightly modify this I'm going to put a break here just so it looks a bit better and if you haven't watched the previous tutorials go back and watch them because we do this by we're learning basically um objectoriented programming by example so the example is a bank account class where we can um assign a new bank account to a variable and we can do things like withdraw deposit money and things like that so let's get rid of this withdraw line and let's um start to create a new um uh method that's going to allow us to deposit money in so public function deposit and then here we can just call the amount uh the variable amount once again um now there's no really there's no real um limit we need to check on this because you know the the the um the person's free to deposit as many as much money as they want into their bank account generally so all we need to do here is say this balance remember and then we need to say um equals this balance plus amount so we're starting balance it uh out with zero so our balance is zero with this deposit method we're taking in an amount with an argument here and we're adding it to our current balance so let's go down and check that this works so um we're echoing our we're displaying our balance here and we are updating our balance in here so again we use Alex and then we say deposit and we can deposit an amount so I'm going to deposit let's say £1,000 into my bank account so I'm depositing ,000 and then I'm displaying my balance so um let's get rid of this line first of all and see what we uh what we're uh left with so balance zero so now let's come into our code and uncomment this so now we're depositing £1,000 and our balance now changes to um a th000 so now what happens if we want to deposit £1,000 and then we want to say withdraw 200 and something so we can say withdraw 20045 for example so you can already see that this is such an easy way once you've got your correct structure set up to do specific things with your class so we we're modifying the property values so let's come in and ref ref fresh you can see it's changed to 755 so we've taken 245 off of the balance okay so what we're going to be doing now is we're going to be creating a new instance of uh this bank account class but in another variable name and this is going to allow us to have individual values for each um each class that we uh initiate if you like so let's go ahead and um get rid of this first of all and get rid of this so we can write it out in a moment so Alex equals new bank account so what happens if I want to say Billy equals new bank account well let's go ahead to our page and refresh and test our code you can see that no error has appeared so what we're essentially allowed to do is set two different variables with using the same class so we are using the same uh values but for two different oh we're using two different value uh classes for two different users um and this allows us to have unique property values for each uh each time we initiate it so Alex will have his own balance and Billy will have his own balance so let's go ahead and test this out so I'm going to say Alex deposit and we're going to deposit say1 into our bank account now I'm going to say Billy deposit and Billy might deposit say um I don't know uh4 or 15 pound into his bank account now what we need to establish is whether these two values now change we've only declared one balance up here but because we're using two instances of this class the values can be unique to each user so hopefully that makes sense if not this uh next uh stage will demonstrate it so let's go ahead and refresh and see if everything's okay yep everything seems okay so let's Echo out Alex uh display balance and remember this is a method so we are using our parentheses at the end so let's Echo our Alex display balance okay so balance uh 100 so I've deposited £100 into my bank account using this deposit method and my balance is displayed as 100 so now what happens if we say Billy and change this well you can see that the balance is only 15 so you can see that even though we've only got one um class called bank account we're able to use it for different users so let's just uh Echo out both so we um we can see this so now we're going to Echo Billy display balance so we've got two different balances £1 and5 this this corresponds to Alex and Billy so so you can see that we have two different values um two different property values so balance is different for both users even though we've only got one class so you can really start to see how this can be useful in shortening the amount of code that you're going to have to write when you use objectoriented programming in PHP so let's go ahead and just add a few more things in here so I'm going to say Alex deposit 100 Billy deposit 15 now down here I'm going to say Alex withdraw um 150 which is not going to let us and then I'm going to say uh Billy withdraw and I'm going to say um we'll just say 250 for example so let's go back to our page refresh so we've got not enough money um come up for Alex but the balance for Billy here has been changed I know this looks a bit odd at the moment I haven't structured it out uh with regards to Output very well but you can see how that this value has changed for Billy but the value has not changed for Alex because there's not enough money and we've been given that error message uh through the method up here when we uh don't have enough money in our account so let's just go ahead and change this to something like 98 and when we refresh you see that the balance has Chang again we've got two for Alex now because we've withdrawn £98 out of £1 and 12.5 for Billy because we've withdrawn um 2250 from our original balance of5