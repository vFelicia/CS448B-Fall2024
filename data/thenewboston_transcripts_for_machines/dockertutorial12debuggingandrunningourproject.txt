all right so let's plop open google and we can go to docker hub and all right so what we are looking for is an image that already comes with node and npm all installed so i'm just going to type in node right here and boom look at this so the first one that pops up is the node image now again whenever we install node npm is going to come along with it and look at all these juicy versions we can download all right so the key thing to take away from this is yes there already is an image with node in npm installed and it's called node so now what we can do is go to nano docker file we can remove alpine and instead type in node now something i want to point out whenever we install node just like this it's going to pull down the latest node image and by default it's going to come with a lot of things that we really don't need especially in this application since it's like the most boring basic application ever so as a little tip and this is just a generic docker thing as well whenever you see the word alpine it basically means in docker language the most stripped down basic version of anything so when you just run alpine straight up it's just going to get the most basic stripped down initial image now what we are going to do is we are going to use node is our base image now instead of the version if we actually run alpine as the version what this is saying is okay we want to use that node image like we were already intending to do however don't just give us the latest bloated version we want the most stripped on basic version of that image so that's what this is doing and now let me just save this and all right so now let's try building it again so docker build period and see if we have any better luck this time okay so it looks like npm was going great but what is this thing ideal tree already ideal tree i didn't even say anything about tree i don't even like trees all right so before i get too worked up let me just go ahead and plop back into our docker file and we can see if we can figure out what the issue is now this is actually a concept that i wanted to cover in the next tutorial whenever we were talking about working directories but basically you know how we have these keywords right here from run command so on and so forth there is another keyword called work dir and what this does is it sets the working directory for any of these other commands that you run so by default whenever we just say from node alpine and then we start running these commands these commands are going to be ran in like the root directory now we typically don't want to do that because the root directory is not where you want to be putting like all your application folders and files and source code so on and so forth you usually usually want to put it in app or user directory so what we're going to do is we're going to set our working directory as user app now again what this is going to do is it's going to basically whenever we install all those dependencies and move our source code over it's going to put it in this location rather than our root and this is probably going to differ depending on your base image but i do know for node alpine that this is the it's a location that works fine so again we may have another tutorial to cover working directory this keyword specifically but for now again just want to give you the quick and dirty of it so now let me exit out of this yes okay so let's try this yet again docker build come on baby no i mean no whammy annoy me okay so we don't see any red so that's a good thing but what is this failed running omg what now okay let me see if i can pluck something out of here what is this no such file directory open package.json so apparently docker isn't aware that i created this package.json file but here let me just clear okay there it is uh you know what i remember now from the last tutorial where docker is currently unable to find this package.json file because even though and we can probably just see the contents of docker file right here is even though we set it up to say okay this is our base image this is where we want to run all of our commands from uh run npm install npm start to docker this is its universe it says okay at what point did you tell me to include those other files and we're like oh yeah we uh i guess we didn't do that did we so my bad so now let's hop back in to our docker file and include those all right so before we run this run command npm install because what this command actually does is it installs all of those dependencies but it's going to look for that in a package.json file so at this point in time whenever docker looks at this instruction it needs to have that package.json file so in order to include those files in our docker image what we're going to be doing is copying them over from our current working directory to our docker image and remember the keyword for that is just to say copy these files from our local machine over to our docker image right like that all right so one more time it's going to start with this base image going to use this is our working directory to run all of these commands it's going to copy all of the files over and i'll show you it's going to copy these files over to our docker image and then what it's going to do in case you guys don't remember it's going to install those dependencies and then run npm start okay so now one more time fingers crossed let's go ahead and run docker build and instead of just including that period because you know what i'm actually pretty confident that this is going to work out this time what i'm going to do is i'm going to tag this image and again the name convention is just your docker username and then we can just call this image bucky's website and then we'll just tag it is latest and then period as our build context right after that and hopefully let's see if this works okay so installing come on baby no way i may know what i mean boom look at that all right so not sure if it worked yet but um let's just go ahead and see if it works so docker run the new boston bucky's websites and unable to find image and i probably had a typo so docker image ls okay bucky website forgot the s but that's cool that's cool all right so docker run the image bucky website i guess we'll just go with that and okay there we go so this is looking good uh looks like you run that start command the default command was fine which was just a you know a synonym for node index.js and just like we instructed it to whenever this application starts up it's going to console log out listening on port 8080. so now let me go ahead and let's go back here and let's just paste in that address one two seven zero zero one eighty eighty and okay wait a minute listen i'm poor 8080 okay i'm on 80 80. poor 8080 okay this isn't good uh what's going on here well docker is telling me that this application is indeed running on port 8080 but i just opened my browser i'm on port 8080 and nothing's showing up so what the heck all right so let's shut this down let me clear it out so this is what is happening even though docker told us yep application running on port 8080 whenever we went there in our browser nothing was showing up this is because whenever we go to this location in our browser it's trying to look for a process that's running on our local machine now remember that process which was supposed to be serving the web application that was running but it was running on docker the docker container which is like a computer within our computer so okay this is an interesting problem so basically if you can imagine this terminal right here acting as like a mini computer within our computer which you can look at it like uh the desktop background if you want how do we say whenever we are just trying to develop an application as like a frontend developer to use docker's port 8080 instead of our computers poor adad well ladies and gentlemen that is when port mapping comes into the picture so what we need to essentially instruct docker to do whenever it's running the container is to route all traffic from computers port 8080 to dockers poor adad so how do we do that it's actually pretty easy so i'm gonna run this run command again but instead of just running it exactly like we did before what i'm gonna do is include a flag called p so this flag essentially maps a port from your local machine which we want to say yeah we can just run 8080 on our local machine this process is going to map to the docker container port 8080. so now whenever on our local machine we're running an application that tries to hit 8080 it's gonna basically see that is docker's port 8080 so just that we can verify that everything is working let me hit enter and okay it looks like everything is the same but now these ports should be mapped so i'm gonna pop back open my browser refresh and all right you may not be able to see it but it does indeed say hey now brown cow and there you go that is how you run a very very simple project and i want to say real project you know this isn't much of a project but we can pretend that is how you structure a real project using docker and again a lot more concepts to build on top of that but for now thank you guys for watching don't forget to subscribe and i will see you later