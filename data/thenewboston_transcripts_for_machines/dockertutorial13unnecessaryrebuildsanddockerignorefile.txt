all right y'all welcome back and in this tutorial we're going to be talking about unnecessary rebuilds and also docker ignore if we got time however before we get to that i also want to mention that i'm using an ide someone in my last video i believe it was they recommended to use an ide and i thought it was a good idea it makes it a little bit easier to read with you know a little bit prettier formatting and it also creates a more realistic development environment so either way i'm using webstorm however if you want to follow along with any ide that you want or you can continue using nano or vim or whatever in the console then that's fine too all right now with all that said let's just go ahead and first off we're just going to start the project just to run it and make sure that you know we don't get any new errors since we did swap environments so on that note i'm going to go ahead and docker run and of course we need a port map just like we did before localhost 8080 to the containers port 8080 and then it is just called the new boston bucky's website go ahead and hit enter and okay listen up port 8080 and check it out so this is our beautiful website right now hey now brown cow but the thing is that i don't know if i told you guys this but this is actually placeholder text and that is because this website is actually going to be all about bacon boy do i love bacon so of course we don't really need hey now brown cow so what i'm going to do instead is just give them a big old bacon right when they hit the home page you know got to get them in the mood of love and bacon so updated that okay it looks like it didn't work actually okay this is yeah the file saved everything is good let me just try that again huh okay so having a bit of an issue here i am updating my source code however when i go back and look at the website and refresh it nothing is updating so what is going on right here well it turns out that whenever we update our source code then what we need to do is we need to rebuild our image so i'm just going to close down that container and just to make sure that you know what i just told you is correct let's go ahead and we'll do docker build and then we'll just tag it again as the new boston bucky's website in the build context again it's the same so just gonna hit period okay that was going fast it's looking like this last that run npm install is actually taking a long time huh so that's interesting but either way let's just go ahead and run this again and see if the website actually updated okay so this is a good thing it now after we rebuilt it it updated the website to bacon and okay what does this mean so what this means is that anytime we have a change in our source code then we're going to need to rebuild the image all right so that's it's feeling like kind of a pain already almost slowing down our development process a bit but another thing before we get into figuring out how to fix that another thing that i noticed here is that whenever we ran this step of rebuilding our image then what happened is i noticed that okay this step is cached this step went pretty fast right here however on this step right here run npm install it look like it took three seconds so it appears what is happening is that anytime we make any small change to our source code even if it's completely unrelated to which packages we require or which dependencies we need to install i mean even if we make this small change from hey now brown cow to bacon it is causing docker to essentially have to reinstall all of these npm dependencies so why is that the case because to me that seems very inefficient so let's go ahead and take a closer look at how this build process works so check it out whenever docker builds an image from a docker file and by the way this content right here i essentially just took everything in the docker file and just split it out into little components that i can move around so anyways this is the contents of the dockerfile in case you are you know just uh trying to follow my diagram here so now let's go ahead and take a look at this build process in a little bit more detail so docker images are built in layers and each layer is essentially an instruction from this docker file so what the heck am i talking about well it's easier if we kind of take it step by step and kind of see what's going on in the background so whenever we want to build this image then what's going to happen is docker is going to start with our base image and it's going to create a container from that now with this container docker is then going to run this first statement and after it runs this it's going to stop the container and then it's going to save the changes and then with essentially this updated container it is going to generate a new image from that now with this new image and this sounds uh a little bit redundant but then with this new image docker is going to spin up another container from this image and then this process is essentially going to repeat so docker is going to run this statement now which is the copying of the source code over into the container and then once this is done it's going to stop the container save the changes and then essentially with those changes create a new image from it and again this process is going to repeat for this instruction and also this instruction so we essentially end up actually let me copy that we essentially end up with something like this for the final image and once docker builds the final image then what it does is it creates the id and it tags it with well whatever we tagged it in this case it was the new boston bucky's website and that is essentially how you end up with this final image now a very important thing to point out about this entire process in this is actually why whenever we change source code it was triggering uh these npm packages to reinstall again is this so whenever you rebuild a previously built image the only layers that are rebuilt are the ones that have changed so in the example that we saw we changed some source code in our project and that was right here it said hey now brown cow and we changed it to bacon now since we changed that source code then this step essentially changed because in this step we're taking all of the source code and essentially copying it over to the container so if the input changed then the output change all right so i guess it makes sense that for this step it wasn't able to use the last cached version of this but why did this change well that's because of another bit of logic and that is if one layer needs to be rebuilt then docker is also going to rebuild all of the subsequent layers or essentially all the layers on top of it or on the bottom of it if you're looking at this one so from docker's point of view whenever we said that okay yes we're updating this string of text to say hey now brown cow we changed it to say bacon now and now we want to rebuild this image what docker said is okay what i'm going to do is start with this base image in okay worker user app it looks like this was all the same so we can just use the cache version of this and for this next step copying oh oh what is this it looks like a bit of source code has changed so this is going to uh require me to rerun this again i can't just use the cache version of course because you know the input differs and that also means that everything that comes after this which is npm install and npm start this also needs to be updated now this makes sense in the sense of how docker builds these containers and these images so on and so forth but from a development point of view it's pretty inefficient to have to reinstall all the packages anytime we just change one bit of source code so let's go ahead and pop back open our ide and see if we can fix this somehow now actually before i do this let's go ahead and just confirm our kind of working hypothesis here and all right so what i'm going to do is just change this to tuna and then we are just gonna go ahead and build it again and okay so it looks like yes indeed it did get the cached step for step number two and then whenever we copied over the source code in every subsequent step it did not use the cache version now what i'm going to do is just change nothing now and just rebuild this again so okay well that was a lot faster it looks like everything took 0 seconds so in this case it uses cache version of step number two and three and four alright so now that we are able to verify that i'm not lying about this let's go ahead and figure out how we can fix it well let's think about this so when do we actually need to rerun this step run npm install well we really only need to rerun it if the contents of our package.json has changed since if this has changed then it essentially means that our dependencies have changed and it's probably a good time then to reinstall it so how can we say that well instead of just copying all of our files over and then running this after we can kind of break it down into separate steps so what i'm going to do is i'm going to move this copy statement i'm actually going to copy it so we are moving files over before this npm install and also after so why are we doing this well check it out instead of copying all the files over right here what i want to do is i just want to copy over one file and that's that package.json so what these steps are saying now is this after we run these commands what we're going to be doing is we're going to be copying over this one file package.json to our container and then we're going to run this command to install those dependencies now what we're going to be doing here is after that's done we're just going to copy all other files over to this container you know just like we have before and then start up our project from this command right there so if everything is working correctly and our theory is correct then what would happen now is that whenever we made updates to our source code then whenever we went to rebuild our image all of these steps right here should just be able to run off the old cached version and then the only steps that should need to be updated are this step and subsequently this step right here so let's go ahead and test our theory right now so we'll put a tuna we'll change it to corn and now i'm just going to go ahead and rebuild that and all right so this was interesting that even though we changed our entire docker file around that this step was still cached and since we reordered these then these aren't going to be cash but take a note of what's happening right now so step two is the only one that's cash three four and five are not they're pretty much brand new however when i go and change this to book on and then rerun this again just go ahead and clear this out and rebuild that check it out so now instead of having to reinstall all your dependencies so on and so forth step two three and five now are running off the cached version and if you can see over here on the right each one of those took zero seconds which was an improvement from about that three seconds before and the only real work that docker needs to do is this last step where it copies over those remaining source code files right now we only have one but of course in a bigger project we will have more than one so now that we have our beautiful image built let me actually go ahead and run this container and i'm actually gonna shell in and show you something so i'm gonna do docker run and i want to get an interactive shell so what i'm going to do is pass in that it flag and then same thing as before what we're doing 8080 map it to 8080 and it is the new boston slash bucky's website and also i'm gonna have shell is default command all right so it looks like we are shelled into our container and now let me just go ahead and list out all the files that we have all right copied over the docker file uh index.js or pax.json generated that log file as well known modules so this is a directory that essentially whenever we install our dependencies from package.json then it sticks up all unknown modules all right so this looks all good and wait a minute what's that idea wait this is one of my ide files huh okay so this is actually an issue this directory right here idea where did it come from well you may not see it in i say may not you definitely will not see it however check this out all right so in this tab right here i'm shelled into the container in here i'm just not shelled into anything this is actually my own local computer and in this directory that i have my project set up as i have this hidden folder right here which is pretty much just some ide settings but either way it wasn't something that i intended to copy over whenever i generated this image so how do i say that okay in this step right here whenever i copy everything over from the build context which is essentially uh this folder right here to the container to ignore any of those hidden files well in this case what we can do is we can create a docker ignore file and this is actually very simple if you start it with a period and then you just write docker ignore this it actually works pretty much the same as git ignore files if you're familiar with those but essentially what it's going to do is whenever docker is generating these images then it's going to look in the build context which just means whatever directory your docker file's in right now and it's going to look for a file called docker ignore now if it finds a file called docker ignore it's going to read the contents of this file and the contents of this file is basically instructions to say these are the files or folders that you should ignore and that's us talking to docker so in this case what we're saying is hey docker whenever you copy everything over ignore this idea file right here all right pretty cool so now let's go ahead and see if this worked so i'm gonna exit out of here and alright so now let me just go ahead and build this again and now when it's being built this new image should be built with no idea files copied over and to test that let me just run the image generate a container from it and shell in again and now this time if you do ls la we can now see that our idea directory is no longer copied over and in fact we did get this docker ignore file but that's all right point being that what i wanted to demonstrate is whenever you are essentially just trying to build an image and you have unwanted files or folders copied over then you could stick them in a docker ignore file and well it's pretty selfexplanatory docker is going to ignore those files whenever you run that process all right so in an upcoming video what we're also going to be doing is i'm going to be showing you how to enable live reloading so that you don't have to manually build new containers every single time you want to update your source code but anyways that is a topic for another tutorial for now thank you for watching don't forget to subscribe and i will see y'all later