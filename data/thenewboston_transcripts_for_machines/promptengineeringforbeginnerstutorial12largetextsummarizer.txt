hey welcome back everybody this is Ian bringing you another video in this AI series with the New Boston so in today's video we're going to talk about large text summary essentially what we're going to do is we're going to take in a txt file or a PDF file and then we're going to convert the PDF file if it is a PDF file to text or just read from the text file take that text and send it out to the open aai API once there the API is going to SU Mize that text for us and send it back now in some situations it's going to be a very large file with a lot of text and so we'll want to split it up into smaller sections of text summarize those individually and then combine those summaries summarize it one last time and then return that to the user there's a lot happening here it's not a huge program it's definitely bigger than some of the ones we've written previously but it it's going to take a little while to kind of wrap our heads around it I've included a visual diagram of the program flow I think that'll help a bit so we'll look at that first and then we'll Deep dive into the code let's get started all right so before we head over to the visual diagram let me just tell you the names of the functions that we have here so that you can recognize them in the diagram so the main function is summarized document it's the one that actually takes in the path to the document and decides you know is this a PDF is it a text file and then it does whatever it does next now if it is PDF we do need to convert it to text so that we can send that text to the API so we have another function here called PDF to text and it does what it says it does all right so then once we have the text we can go ahead and if it's smaller than a certain character size we'll just go ahead and jump all the way past all these functions to generate summary we'll pass the text in we'll get that summary back from the API and then we'll output it to the console easy peasy lem squeezy we're done however in some situations where the text is actually a larger size let's say in this case larger than 4,000 characters then what we have to do is kind of split it up into smaller pieces get the summaries of each of those little pieces and then combine them all together get one last summary of that combination and then output it to the console so that's what these functions here are going to do we're going to pass in the text that we've decided is to large to the summarized large content function at which point it is going to split that text up into smaller chunks and it's going to summarize those chunks and then it's going to combine them and it's going to summarize the combination with generate summary so we'll see all of that code in action here in a minute but let's go ahead and back out here for a moment and head over to our diagram of the program flow and wrap our heads around that for a second all right here we are with our program flow diagram this is the summarized document function which is our main encompassing function has everything else inside of it so at the start of the function up here we pass pass in a document either PDF or text and then based off whether or not that document is a PDF we either go straight to the next step or we Branch off and we convert the PDF to text which will then bring us to The Next Step so ultimately we end up here where we check and we determine hey what is the size of the characters in the text so is this string 4,000 characters or less or is it greater than 4,000 characters So based on the answer to that question if it's 4,000 characters or less then we'll go ahead and pass it into the summarization of the content function where it'll pass that up to the API get the summary and then we can output it to the console however if it is longer or larger than 4,000 characters then we'll pass it to the summarized large content function that function is going to be the one responsible for breaking up the text into smaller sections of 4,000 characters or less each and then it's going to Summarize each of those combine all those summaries take make that combination summarize it one last time and then pass it back to us at that point we can go down here and end up at output summary where we then print the summary to the console read it and we're good so that is the end of our summarized document function and the only other one we have to look at is the summarized large content we do have some other subprocesses here but they're really simple so we're just going to work through them when we actually go over to the code let's take a look at summarize a large content real quick and just see how that works okay here we are with summarized large content this takes in the text content to be summarized but because it's large text or because it's a lot of text more than 4,000 characters first we have to split that text up into sections otherwise known as chunks so we split those up into chunks of 4,000 characters each and then we generate summaries of each of those chunks and then we combine all the summaries into this larger string of all the combined summaries and we we summarize that so that summary will actually be our final summary that we're going to use so we go ahead and return that out to the main program flow where we can then output it to the console all righty so here we are back in our code and we start again with the main encompassing function which is the summarized document function so summarized document takes in a file path that's going to point us to the file that we want to summarize and it takes in a default value of is PDF set to false if it is a PDF we want to man set it to true for that second argument and so then inside of here the first thing we do is we use that value is PDF to determine whether or not we need to convert the inputed document to text if it is PDF then we go ahead and pass it through to PDF to text which is another function we'll see that down here in a minute but that just takes that file path to the PDF file converts it to text and sends it back to us what we get back there we put in this content variable and then we use that further down in our program now if it's not a PDF it's just a text file then we go ahead and use with open and we pass in the file path to the txt file we set the mode to read this is actually the default but I like to be explicit so I included it and then also we want to include the encoding argument here and set it to utf8 that'll just make it to where we can handle basically most any language out there and a lot of characters we don't have to worry about getting some characters that our program doesn't recognize and then throwing some type of error so we get that file we go into this block we read the file with file. read and we take that content and assign it to a variable called content so one way or another in this if else we end up with a variable called content that points to a string which we can then check the length of to determine how large it is so that's our next section here we say hey what is the length of the content if the length is greater than 4,000 then we know we need to break it up into smaller pieces so the way that we're going to get our summary variable is by assigning it to the calling of our summarized large content function and passing the content string to that function otherwise if the content is less than or equal to 4,000 characters then let's just pass it straight through to generate summary which is our function that handles sending the actual text up to the API to get that summary back One Way Or Another We're going to have a summary variable which we can then print out into our terminal using this print command here and we just preface it with document summary we have a colon and then a uh back slash in which is just a new line we say document summary and then on the next line we actually output the summary that we got back from the API so that's it for this function let's take a look at this PDF to text real quick nothing real crazy here but we do want to see kind of what it's doing behind the scenes and it's using that PDF reader module it's taking the PDF path it creates something called reader and then reader has something on it called Pages which will actually give us a list of each page inside of the PDF document and then for each page we can call something called extract text so extract text text will actually take the text from the page and give us a string of the text and so with this bracketed list comprehension syntax essentially what we're saying is hey call Page extract text on every single page inside of reader. pages and the result of that is going to be a list of each of those text for each of those pages so that list is going to be assigned to the extracted unor text variable which will then return as one giant string so we have this list of strings we're going to use join here we're going to combine them all together and in the process we're going to get rid of any new line characters and just replace them with a space so what we end up with this just this giant string of texts and then we can use that later on to actually get our summary that brings us to our next function here summarize large content so again this takes in a argument of content which is just a string of the text from the document now at this point we've decided that the document is too large to just pass straight through to generate summary so what we do is we split that document text into what are called chunks or just sections and so we pass that through to a function called split text into chunks and what that'll do is it'll say okay you've got 16,000 characters but the chunk size is only 4,000 so we need to break that up into four chunks or four sections of 4,000 character limit and put that inside of a list so the result of that will be assigned to the chunks variable at that point we can actually iterate over each Chunk in chunks and generate a summary for each of those chunks again this is that list comprehension here so we're just iterating over the chunks for each of those chunks we're generating a summary the result of all this goes inside of a new list which we then assign to chunk summaries so chunk summaries is a variable which points to a list which has multiple summaries of the smaller pieces the subsets of the original larger text so then again we're going to combine all that text together so we're going to combine all those summaries to where it's just one long string of multiple summaries we're going to take that pass it back up to the API with our generate summary function and what we get back is our final summary so I described what the split text into chunks does but if you want to look at the code we can open this up real quick basically it takes the text in it has a default chunk size of 4,000 you can change that if you want to make it something smaller or larger and instead of using list comprehension I went ahead and just wrote this out line by line for those of you where list comprehension might be new to you if you look at this this is basically the a larger version of what list comprehension is doing behind the scenes so if these earlier examples of list comprehension were confusing to you just take a look at what we have here and you'll see oh okay this is what's happening we have a variable it's set equal to an empty list we're going to iterate over something in this case a sequence that we create from using the range function and then we're going to append something to that list for each iteration so we end up with multiple things in this case strings inside of this list and then we return that list of strings at the very end so this part right here is a little bit confusing but basically we're using range to start at zero the zero with index so the very first character in the text that was passed in and then we're going to the length of text now of course we are using a range which means that the second value here is noninclusive so let's say that the length of the text is 10 it's going to go from 0 to 9 because we're dealing with indices nine is actually the last index in that 10 character string so that's why it's not inclusive of the last character now you can see here there's a third argument called chunk size this is actually the step and so if you imagine in that same example I just gave you we have a character a string of 10 characters let's say we have a chunk size of two so what we're going to end up with are five chunks right two two two two two until we get all the way to 10 and so two * 5 is 10 we end up with five chunks so you can think of the same thing happening here except it's it's going to be a much larger value so instead of a step size of two it'll be a step size of whatever our chunk size is in this case it's 4,000 so let's say you have a 16,000 character string you're going to start at zero and here you can see we have this little syntax essentially this is going to take a substring from the larger string using these indices and so it starts at the first index uh and the very first iteration would be zero and then it goes to whatever that index is plus the chunk size so if we're going from 0 to 0 + 4,000 then we're going from 0 to 4,000 except it's similar to the range where the second value to the right of the colon here is actually noninclusive so it goes from 0 to 3,999 and that's the first chunk of text so if we have 16,000 characters that's our first 4,000 characters then it's going to go from I now because our step size is 4,000 I went from 0er to 4,000 so it goes from 4,000 to 4,000 plus the chunk size which is 4,000 + 4,000 noninclusive so if it's 4,000 + 4,000 that's 8,000 noninclusive it goes back one index to 7,999 so essentially it's just going 4,000 characters at a time until it reaches the end of the string so again in the example where we have 16,000 characters it's going to divide that by four into four chunks of 4,000 each and what we get back here is a list called chunks which is going to be string string string string each one is going to be the smaller sub set of the original larger text so then what we have here at the bottom is our generate summary function and this is probably the most important one it is going to use our client from open AI it's going to send a request to that chat completion endpoint where it's going to create a new chat completions object and the model that we're going to use is GPT 3 and half turbo 1106 you can use whatever model you please uh you can use gp4 and so on and then the messages list is going to start with a dictionary or an object for our system role whose content property is set to a string you are a helpful assistant summarize the text provided now how do we give it the text that is going to happen inside the next element in this list which is another dictionary with the role set to user this time and the content set to the actual text so the text is what gets passed in to the generate summary function and so this will go out to the API the API will take that text and it'll send back a response with a choices list which has a message object which has a Content value inside of it which is going to be the summary that we asked for and the max token here 1024 if you do the math on it we're sending you know up to 4,000 characters you divide 4,000 by four which is like the average token size you get 1,000 tokens and I just thre the 24 in there just as kind of a buffer so we get back our summary we pull it out of the response you know the first choices object using the zeroth index the message object inside of there and then the content property and because this is a string we can go ahead and strip any white space or any uh returns from the beginning or the end the leading or trailing white space on that text just to be safe so we end up with our summary which we then return and if we go all the way back up to our very first function here summarize document we end up here right so that would be the result of calling summarize large content or just calling generate summary directly either way we end up with a summary which we then print to the console let's jump over here to our terminal you can see I've already called it in the past Python main.py and what came back was a summary of our woodpeckers txt file and then our ants. PDF file the ants file is actually less than 4,000 characters so it just went straight to the generate summary and this is what we got back whereas the woodpecker's text file is um it's like 177,000 characters and so it combines all those summaries and then resmar them to get what we're looking at here and that's it it's a it's a lot of code so hopefully having the diagram to look at and just being able to work through those functions one by one will help you understand exactly how everything's working together but essentially at the end of the day all we're doing is we're passing in a document some type of text or if it's a PDF file we have to convert it to text and then we send that through to the API maybe we had to split it up if it was a a large amount of text and then the API sends us back our summary ultimately we're going to take that summary and we're going to Output it like we have here that's it thanks a lot for tuning in to this video can't wait to see you all in the next one and until next time peace