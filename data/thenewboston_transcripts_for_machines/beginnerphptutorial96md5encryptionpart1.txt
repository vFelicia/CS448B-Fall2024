hi this is Alex from PHP academy' 2 org back with another PHP tutorial for the new Boston now in this video we're going to be talking about md5 encryption or rather generating an md5 hash from a string now if you if you don't know what md5 is I'll make I'll take a couple of seconds to just explain md5 is a form of encryption and a hash is generated from a string that is given and in PHP we have a function called md5 and what this does is if you supply a string in here it will convert this string to an md5 hash so let's take a look at a couple of examples let's create a string that might possibly be a password so I'm going to call this I'm going to give this a value of password so our password essentially is password now if we want to encrypt this we could simply echo out or create a new variable say string hash and I'm going to make this equal to md5 and then it in the bracket I'm going to supply the string data that I want to convert or rather encrypt now I'm just going to come down here and echo out string hash ok so now let's take a look at password what it looks like with an M when it's been hashed pass air in line 8 ok oh yeah sorry semicolon on the end of there so let's refresh ok so what you see now is the hash representation of the string password now however much we refresh this it's going to stay exactly the same so let's keep refreshing is exactly the same so we call this oneway encryption this string this hash cannot be decrypted back to normal text the only way we can do this is take an input and match it to the actual hashed version of the input so for example if you had a password stored in a database with this value which we are going to come on to talk about in a minute and give a short example if you had a password stored as 1/2 and the user typed in say Alex as the password the hash for Alex wouldn't match the hash for this therefore the password would be incorrect now if we were to hash password again if password was entered via user input and and we hashed password again it would match this therefore we would ask you what we know that the password is the same so if this doesn't make sense I'm going to create a new file and I'm going to copy and paste this hash over into this file so paste it in there and we're going to call this hash dot txt so obviously this would be an unsecure way of storing a password because someone would be able to access it however what I'm going to do now is from index.php is I'm going to let the user enter a value so we're going to create a form that allows the user to enter a value then when the form is submitted we're going to open hash dot txt we're going to look at the contents and I'm going to see if the password matches bear in mind this this is equal to password so if we were to type in Alex this the password would be incorrect how it however if we were to type in password this would be correct so let's begin creating what we'll get rid of this first of all and let's begin creating our form so form action equals index or PHP the method is going to be post remember we're posting a password so we want to keep it out of sight so we're going to use post and when you are sort of using login forms or register forms you should always use the post method as well because we've got a lot of data as a process as well as we wanted it to look as clean as possible so now I'm going to create a label called password or some text called password and the input type would usually be password but for the purposes of this tutorial I'm going to use text just so we can see the text that we're typing in and the name of this is going to be user underscore password okay so let's break down a couple of lines and create a submit button and the value of this is going to be submit so let's just refresh the page and check that looks okay okay so we've got the option to type in the password here you can see what I'm typing whereas if we were to use the password type we should obviously always use for passwords then we wouldn't be able to see the data so let me just change this back to text okay so the next thing we want to do is up here we want to check that a password has been entered into the box and the form itself has been submitted so we do this we start an if statement and this here is going to be the block that runs if this is evaluated to true so the first thing we need to check is if the the input type has been set therefore the form has been submitted so we can say is set post user underscore password and we're also going to check if the password isn't blank so we're going to say is not empty not a semicolon there sorry and then we're going to specify this post again so user password okay so presuming that the form has been set and the password has been entered we're now going to echo out something just to confirm this to us as programmers before we continue to the next step so let me type M let me just refresh the page first of all let me just type a password in here and I'm going to click Submit and you can see that we've got this little message confirmation message coming back however if I submit it without any data in nothing happens so the user is going to have to type in a password we could we could also let's say else here we could echo please enter a password okay so obviously we're not going to be a curing out okay to the user that was just for our benefit now the next stage is to set a new variable with this with this password value it it's not necessary but it just allows us to program a lot quicker so we're going to say user underscore password you can name this variable anything you like and that is going to equal dollar underscore post and then user password so we're just creating a shorthand way to reference this posted variable if we reference this outside of this if statement we made we may come across an undefined index error so we reference this inside here okay so the next thing to do is to open up this file called hash text and we want to grab this value here and then compare it to the password that's entered now we're obviously not directly comparing it because if we were directly comparing it the user would have to type this password hash in or if we were storing it as plain text we wouldn't have to do anything to it because that would avoid the point of talking about md5 hashes