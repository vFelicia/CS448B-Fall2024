alrighty y'all welcome back to another tutorial and in this one we are going to be talking about ethereum accounts so question number one what is an ethereum account an ethereum account is an entity with an ether balance as you can see right here in my beautiful diagram and it also can send transactions now on top of that every account in the ethereum network also has an address and this is basically the account identifier so you can kind of think of it similar to an email address where whenever you want to send someone ether you are going to be sending it to their address now on the ethereum network there are actually two different types of accounts and the first one is an externally owned account and you may see this abbreviated as eoa these are accounts that are controlled by individuals through the use of a private key and we'll be getting into the details of private keys and public keys a little bit later on but for right now we just want to focus on the two different types of accounts so again that's externally owned accounts which are controlled by individuals and the other one as we can see over here are contract accounts now these accounts are controlled by smart contracts and they don't require the use of any private key at all and the reason for that is it's because everything about this account is really just controlled by code so no need for a private key or public key or any of that now externally owned accounts in contract accounts actually have a lot in common so let's go ahead and talk about the ways that they're similar and then we'll talk about the ways that they're different so if you can't tell by this beautiful diagram first you can see that they both have an address so every single account on the ethereum network does have an address basically the identifier for that account they also both contain an ether balance and as you see right here in the little asset section both types of accounts can send receive and hold not only digital assets but as we can see from this balance ether as well now some other interesting things about both of these accounts is that both of these can send transactions to the ethereum network and they can both interact with smart contracts pretty interesting so now let's get into the differences so externally owned accounts one thing that makes them different from contract accounts is that eoas or externally owned accounts are free to create anyone can go ahead and create really as many as you want for free at any time and another thing is that they can initiate network transactions all right pretty interesting so what about these contract accounts right here so contract accounts they actually require ether in order to create these so why do these ones require ether and these ones don't well contract accounts require ether to create because upon creation you're actually using network storage now another difference worth mentioning is that contract accounts they can't initiate transactions on their own they first need to be triggered by a user within eoa an externally owned account and then that trigger can essentially cause the contract account to execute many different actions such as transferring tokens or even creating a new contract which is an interesting use case but we'll see why that's useful a little bit later now some other quick points to mention is that transactions between two externally owned accounts they can only ever be for the transfer of ether or tokens in other words those digital assets you can't really do anything else whenever you're sending a transaction between two externally owned accounts now whenever a transaction is sent to a smart contract that's actually going to trigger the smart contract to run so these smart contracts are essentially going to be stored on the network and then whenever a user sends a transaction to that smart contract it's going to kick off execution of whatever program it is all right so now let's go ahead and take a closer look at this private key public key what's all this about so whenever you have an externally owned account that account is controlled by a key pair now a key pair consists of a private key and a public key now whenever you download an ethereum wallet and you create a new account the app in the background is just going to automatically create these key pairs for you and most apps don't even show these to the users because well to be honest there's really never a need for the user to interact with these directly but as developers it is useful for us to know what's going on behind the scenes so that's why we're taking a video and learning a little bit more about them but either way uh getting back to this the private key right here this gives you control over your entire account so rule number one is never share your private key with anyone now without getting too deep into the cryptography behind everything let me just give you a real brief overview of how these transactions and private keys and public keys all work together so whenever you want to send an ether to someone else you're essentially going to create something called a transaction and that transaction is going to say we'll just say in layman's terms hey i want to transfer ether to someone else now whenever you do that your app is going to use your private key and it's going to create something on that transaction called a digital signature now the digital signature is used to prove ownership of your account so again you are going to create a transaction pretty much to instruct the network what you want to do and your app is going to add a digital signature to it which is essentially proving to the network that you do indeed own this account now since other people do not have your private key hopefully unless you know someone stole it since other people don't have it they are not able to create the signatures needed to authorize transactions from your account now that being said if you ever lose your private key there's actually no way to recover your account so unlike you know a centralized account maybe some social media remember on the ethereum network there is no single corporation or government controlling this network so there's not anyone you can phone up and be like hey i lost my account can you email me my private key or anything like that now if anyone out there wants to learn more about digital signatures i did create a tutorial about this so if you just type in the new boston digital signatures i'm sure it's going to pop up but in this video i dive into the technicals and explain how everything works in detail for now i did want to leave that out of this tutorial series since to be honest cryptography isn't that important for ethereum developers and i say that because as developers a lot of the complexity is abstracted away in our development tools and libraries however with all this said it is helpful to have a basic understanding between private keys and public keys and addresses so let's go ahead and tie everything together now that we understand the core components of this entire system so we'll walk through it one step at a time so you went ahead and you thought ethereum was pretty cool maybe you saw a video series and decided to download an ethereum wallet now whenever you did you downloaded it in that wallet application the very first thing it did whenever you wanted to create a brand new account is it generated a private key now behind the scenes a private key is just a really long random number and this is generated sometimes from user input but most of the time your computer just uses whatever random number generator to generate a secret private key now in order to generate the public key what the application is going to do is use something called elliptic curve cryptography and this is explained in my digital signature video but real quick what it's going to do is use something called a oneway function to essentially get a value for the public key and the cool thing about this relationship right here is that if you have a private key using elliptic curve cryptography you can always figure out the public key now this is where things get interesting if you have the public key you cannot figure out the private key so that's why the term oneway function comes in because you can essentially calculate something in one way but not backwards the other way now what is the relationship between this public key and the address so whenever you have a public key you can generate hold on my arrow is a freaking out now there we go so in order to generate the address from a public key what you do is you essentially take the hash of this public key and it's kind of weird but you take the last 20 bytes of that hash and then you add a 0x to the beginning of it and this is going to give you your address so i know that this is uh kind of weird but just to sum it up real quick your computer or your wallet is gonna generate a random private key basically like a random password think of it like that now as long as you have this private key you can always calculate the public key from it and with the public key you can calculate the address so this is pretty much the relationship again this process is done through elliptic curve cryptography and this process is done by taking a hash of a public key and taking the last 20 bytes and then adding 0x to the end again i do want to mention that if all this feels a little bit overwhelming or it doesn't really make sense we really never need to get into the weeds of all this as developers it's just that as developers whenever i mention private key public key or address i don't want to confuse anyone and i do want to point out that there is a difference between each of these three values and that's really all you need to know so on that note we are finally done discussing public keys private keys accounts addresses different types of accounts and in the next video we are going to be getting into transactions which are well a whole lot more interesting so thank you for watching don't forget to subscribe and i will see you later