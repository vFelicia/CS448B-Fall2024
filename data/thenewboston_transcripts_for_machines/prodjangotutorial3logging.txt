all right everybody welcome back to another video and in this one we are going to be talking about logging and let me see what else I got on the menu maybe if we got some time some Docker related stuff later on but for now let's just go ahead and focus on logging so how do we set up all our login config well we're going to make another settings file so go under core project settings and we can get creative and just call this logging so check it out Django uses Python's builtin logging module and this is how we're pretty much going to be dealing with all the log records now I say log record specifically because 99 of the time whenever people are talking about handling logging they say log message but a log message is the actual text a log record has some other information as well for example the time when it was logged the file name like what file caused this log uh some more metadata as well like the log level yada yada we're going to be seeing all this but I just want to make this distinction that a log record is a little bit different than the log message the log message is just like part of the log record so on that note how do we go ahead and start configuring all this we'll go ahead and make a dictionary called logging and this is actually the python standard let me go ahead and pull this link up so we are going to be configuring this dictionary and if you ever want to know like the details of what is like a valid setting in here or well really just any more that I'm going to explain in this video if you just type in login configuration Python and Google I'm sure that this page is going to pop up but anyways we don't need this because I'm going to be going over kind of the basics of everything right now now the first thing some housekeeping items let me just paste these in so the first one is version one and you're just always going to have version one uh this is just in case python wants to change some things in the feature to make it backwards compatible disable existing loggers I'm always going to recommend well at least for now setting it to false and I'll show you later on well it's not going to make a lot of sense because we didn't even create any loggers right now but just to make sure we don't kind of skip over everything this is going to determine whether the default nonroot loggers are disabled and and later in the video we'll learn what root loggers are and all that good stuff but for now this is just kind of uh like I said housekeeping stuff so on that note let's go ahead and hop into the good stuff which is formatters now a formatter let me just paste this in right now this is well it may even be exactly like you think in your head whenever you think of a formatter basically how do you want to format or display the text anytime we log anything out so what I did here is I created one formatter called standard and the format or pretty much saying how do we want to uh you know format the text for these log messages it's going to display the time or excuse me log records this is actually uh the message part right here but for the log record we're going to display the time we're going to display the log level and that's going to be either like debug info warning so on and so forth after that we're going to display the name of the logger so we'll see in just a bit how each logger you can give a different name and also some cool Behavior around that and then this is the actual text in other words like whenever you log something and it's like hey uh this message would be this hey right here which is usually like an error message or something Bob this is the text part so this is your formatter so what's after this well after this is your handlers so let me go ahead and create one Handler so first question what is a Handler a Handler very conveniently named basically specifies how you want to handle the log record so what does that mean well for these logs we don't always have to just print them out to the screen we could save them to a file for example we could email them and all of these uh different things that we can handle it they're all going to be specified here in handlers so what I did is I made one Handler and this is just called console and uh first is the log level which I'm going to specify as info so a Handler is basically going to ignore any Vlog message that doesn't meet this log level so since debug is a lower log level than info it's going to just ignore those debug messages however if it ever comes across the info or warning or error then this logger excuse me this Handler is going to be able to handle those now for the class this is just the name of the Handler class the formatter of course you already know what this is saying what formatter do you want to use for the list Handler and we're just going to pretty much save that format are log records in this kind of way and the filters I believe that we can just leave this owl but I actually like to keep it in there to uh be explicit even though we don't have any filter IDs in there but anyways yeah this is going to be an optional list of filter IDs for the Handler um we won't get into that right now we got a lot of other stuff to cover already but either way that's your basic stuff Handler how do you want to handle the log record so now let's go ahead and get into our loggers however before we do that let me go ahead and type some pseudocode down here now before we can start logging any messages from our code what we're going to need to do is we're going to need to grab a logger now I'm actually not going to be creating it right here it's just to kind of show you what's going on this code is going to be in another file pretty much any other file but this one probably but in our code once everything is set up we're going to be doing something like this we're going to make a variable called a logger and we're going to set it equal to logging dot get logger now whenever we get logger we have to pass a name basically naming our logger now this name could be anything you want so I'm just going to name it bacon and then whenever we log something out using this logger then this name is going to be displayed right here so it's going to say like at 2 30 a debug level uh bacon hey you gotta air or something now let me go ahead and show you on other syntax and that is this right here so commonly you're going to see the name just reference this Dunder name keyword and this is going to reference the name of the module so why is this well for one it's actually useful to know like uh what file you're logging from but two using this syntax gives us let me clean this up real quick it gives us some pretty cool functionality and all right let me close this so you guys can see so whenever we create loggers what we can do just like we did for our formatters and handlers under here we have a dictionary where the key is the name of the logger so all I'm doing here is using dictionary comprehension to create let's see I mean I have one two three four five different loggers and for each of these again this is going to be the key the configuration for these loggers is the same it just has log level warning and propagate equals true so as you can see we can create many different loggers and configure them all differently if we want but since I just want to configure all these the same then dictionary Lola dictionary comprehension well it's just the way to go here and another thing that I want to mention is that whenever we use one of these loggers to actually log something from our code what's going to happen is that logger is first going to inspect a log message to see if it meets its configure level which is in this case warning now if this log record does not meet warning then it's just going to ignore it now if it is warning or higher then what this logger is going to do is it's going to pass it off to our Handler and the reason that I did set this to warding is because in production which are our default settings we really don't want to log out these debug in info messages debug is really just for like debugging whenever you are you know debugging some code uh building things and then info it I just don't want to clutter up my uh Logs with like nonrelevant data that I don't care about so anyway the default level I'm having is warning and to understand what this propagate true is doing let me actually go ahead and pull up that example again so I'll say logger equals logging dot get logger and here I'm gonna pass in the name of the module and check it out so whenever we name a logger based on the name of the module we get some I want to say like special logging Behavior and by that I mean whenever a record is logged what is going to happen is let me just use this for example say that this was the module that we're in all right so that Dunder name converted to this so check it out it's obviously going to handle the log you know specify whatever the name is right here so on and so forth but in addition to this if propagate equals true what's going to happen is that after this log is like done being handled it's going to move up the hierarchy and pass that record onto any of the parent handlers as well and by that I mean we already have this configured this logger of django.db dot back ends so after this it's going to look for a logger called django.db and then it's going to pass the record onto that logger as long as propagate equals true and after that it's just going to pass it into one called Django which is this one so again what I'm just trying to say is that whenever we name a logger based on the module and we have propagate equals true it's not just handled by this one but any of the parent loggers as well all so again in short let me clean this up too so our logging dictionary has well aside from these two ones three main aspects of it the loggers are basically saying what do we want to log the handlers are basically saying how do we want to handle those logs and then the formatters are just saying how do we format the log data now after this there is one more key dictionary pair that I'm going to write in here and that is for our root logger so our root logger is basically at the top of all other loggers in the hierarchy and this is where all log records are going to propagate up to unless we specify that they shouldn't but it's basically like the fallback for all logs that otherwise aren't explicitly handled so for us we're just saying that for log level debug we just want to log those out to the console so now the time has come where I believe actually where am I gonna log something out let's just log it out in uh urls doesn't really matter you're going to be deleting it but uh let me just go ahead and first import logging and now we'll see how to use all these so what I'm going to do now is just like I did I'm going to make a logger and for this I'll first let me just go ahead and uh actually let me go ahead and name it tuna something nondunder name and then after this to actually log something out what you do is you reference that logger and then you say what kind of log record is it and I'll just go debug and then in here is the message like this is and of course if you ever want to log it for a difference let's say uh info say this is out of here info message all right now let me do server just to make sure that these are uh and okay getting an error right here and that is because we did not patch those together so we created this logging setting but I forgot to actually include it and type today logging.pui all right oh all right so check it out so we see whenever we start up our server that this is a debug message and that this uh one right here this is an info message and uh you see that I have this colored formatted text and that is because before this tutorial I installed a colored um well I'll show you what I did actually here let me close that and all right so I added this right here poetry add a package called color log and I'm going to add it as a development dependency and you say that or you saw that this was already installed for me because I forgot to uh uninstall it before this tutorial but anyways this is just a uh package that you can use because if you don't have it then all your logs are just the same color and when you're looking in the console it actually is a lot easier to see uh your different type of logs or to you know make them distinct from one another if they have a different color but anyways go ahead and install that and then after you have that installed what I'll do and pull this up actually it might be in my local settings yeah so these are my local settings and I'm going to move it to our you know this settings.dev template and these are just how I configure that a colored logger so for a formatter I'm going to be creating a colored one and actually let me show you so usually formatters you give them a name and format so on and so forth you can also use this syntax and instead of defining everything like we saw you can give it a class and this is just going to be a callable to it's just pretty much a different way to uh create formatters and let's see what else uh loggers whenever yeah I think everything else we uh went over and this is pretty much just going to give us that uh colored Behavior but then after this go ahead and make sure it's in your local settings and then like we saw right here whenever we log things out then we get these cool colors gray for debug and green for info and now what I actually want to do is this so we saw right here that the name of the logger since it was tuna since it was tuna it is displaying right here and now let me do the dunder name actually let me do one for warning just to kind of show off these colors so say this is a warning message now if I run the server again we're going to see debug info warning and looking good all right so I'm going to go ahead and delete these because now that we got our logging system configured formatted got some pretty colors uh we can just kind of Tuck this away for now because later on in our actual application code our business logic that's where we're going to be wanting to log stuff out especially whenever we get air to make sure we can track those debug them as quickly as we can but for now I think that's pretty good stopping point I'll get into the docker stuff in the next video so for now thanks for watching and I'll see you next time