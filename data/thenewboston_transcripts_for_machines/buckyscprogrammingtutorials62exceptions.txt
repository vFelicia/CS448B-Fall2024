what's going on guys welcome to your 60 second tutorial and in this tutorial I'm gonna begin talking about something called exception handling now an exception is a way of handling an error that might occur when your program is running for example if you built a calculator and the users trying to divide by zero that may be an error that occurs when the program is running or if you know you have you made a game and you need a user to register if they try to use like 999 as their age that's unacceptable so that may cause an error to occur so let's go ahead and take a look at the syntax for this now the first thing we need is something called a try block now in this try block this is where we write the code that we want to try it can aid the code that we think error might occur so let's go ahead and make something like I'm gonna be making a simple program that takes two ages the mother's age and the son's age now we all know that a son cannot be older than its mom so whenever the sons age is greater than the mom's age this would of course cause an error so let's go ahead and make two variable int mom's age and int son's actually might as well something equal to values right now and mom's age equals like 30 and it's son's age we'll set this equal to 34 now we all know this is impossible so let's go ahead and test it right now so if the son's age is greater than the mom's age then we want to go ahead and we want to do something called throwing an exception now it's basically this whenever you have something that occurs that shouldn't occur we need to tell the computer that an error did occur and we do this by throwing an exception and in order to throw out an exception exception go ahead and type throw and then type an error number and you can make this any number you want you can actually do other things besides numbers but just throw a number because later on say we made a program that checked for you know 20 different types of errors we want to know what air gah so let's go ahead and we already know that in our little manual 99 means that the mom is younger than the Sun so you know it's pretty much just a reference number so anytime we get an exception and remember anytime this line of code is going to run it basically means that an error occurred so now that we know an error occurred we need a way to handle that err because we just don't want our program to freak out and shut down so in order to handle the air we do something called catch the air catching the air allows you to pass in that number which is 99 so now X is equal to 99 and we can handle it a certain way for example we can just output to the user um something like this son can not be older than mom and then for reference or right err number and this is where we write that's X right there in line and just scroll head so you guys can see what I'm typing so now if you go ahead and run this we can see all right whenever this program runs and the kid is older than the mom then we have a error message that pops up that says son can not be older than mom err number 99 so you know this is pretty much just for our reference this error number but let's go ahead and say that the mom was indeed older than a son the mom was like 50 and the son was 54 well this is gonna work fine and this is never gonna happen so no air is gonna be thrown no exceptions are gonna be thrown so this catch block is just gonna be skipped so let's go ahead and run this and we don't get any error messages this program works perfectly so basically the concept of this is our oh is this an exception is a way of handling errors that made it clear when your programs are running for example if the user tries the divide by zero or pretty much if the user does something they aren't supposed to do now in the try block right here this is where you write the code where the air might occur and right after you need a catch block now the catch block is basically what what to do if there is indeed in air and if there is no air in this try block then the catch block is skipped all together and just like a function a catch block takes parameters so it can take an integer in this case such as 99 and that's pretty much just like an error number you know whenever you're just playing on your computer and windows messes up you know how like the error message pops up well that's pretty much what we're doing right here it's like error message to the yada yada yada do you want to send to Microsoft or do you don't want to send by the way does anyone ever send those did they really get those error messages I don't think so but anyways now you guys know the basics of exception handling and by the way if you guys are saying you know what Bucky I could just have used an if statement and you know made a separate function for this well I know that we can do this a different way but exception handling is useful whenever you're trying to you know do computer stuff like allocate memory I just want to show you guys a real easy example for this case but I know that you could have probably made this program just by using a basic if statement and you know maybe a simple function or something but I wanted to demonstrate the try and catch block in how to handle an error message so these are useful for a lot more than you know comparing two variables and there are some instances where we can't just make a simple program that we need to use this exception handling so for now I just want to tell you guys that so I guess in the next tutorial I'm probably going to show you guys another example and show you guys how you can use a different parameter for this catch block right here but for now that's all you guys get so thank you guys for watching don't forget subscribe and I'll see you guys in the next tutorial