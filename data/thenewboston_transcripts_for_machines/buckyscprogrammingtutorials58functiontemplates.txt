alright guys welcome back to your 58 C++ tutorial and in this tutorial I'm going to be talking to you guys about something called a function template now before I actually you know just give you guys a definition and show you guys an example let me go ahead and throw a quick scenario at you guys so say you're working for Microsoft and your boss Bill Gates comes up to you and he's like Bucky I need you to create the world's perfect calculator so say alright bill let me be I will do this so the first thing you probably do is this you're going to create a function maybe to add two numbers together add two integers together so you're going to write in is your return type name the function add crap because you know it's the most professional thing I could think of and then you'd write like int a and int B for your two numbers and then all you need to do in the body is you know add them together and return them so like return return a plus B so there's your function right there add crap it adds two numbers together so whenever you want to use it in your main you need you know two integer variables like int X equal 7 y equals 43 and we'll sort the answer and variable called Z so now we would put Z equal to what I named it add crap and we would just throw our two variables in here by the way I got a new keyboard the other day and it's really different so I keep like hitting you know the wrong keys that are only one off so you know just deal with me if I have a lot of typos in this story so anyways what we do is go ahead and throw our two variables in there and then you know just print it out and screen make sure I didn't mess anything up so see out a Z and lime so let's go ahead and build and run this and make sure we didn't get any errors and we get 50 and upon checking we find out that fortythree plus seven is indeed 50 so that is our function add two integers together but he didn't say I want program to add two integers together he wants a calculator so we're saying our a so we have a bunch of different you know types of numbers besides integers we have a flow along double um you know every you know sum with decimal points I'm just with basic integers so we're going to need to take this function and you know copy it and you know basically make the same exact function but make this one using doubles make this one using floats make this one using long and as you can see already this program is going to get huge and it's going to get messy and if we ever decided that we messed up something like we put minus here and set a plus we're going to need to go back on every single function and fix them all and it's just going to be a big pain in the butt sir saying all right since this function pretty much is doing the exact same thing wouldn't it be nifty if we could just instead of this in trite here just replace it with like a generic datatype and throw in any information we want well that would be a little bit too easy or what it is there a way that we can indeed build functions that could handle multiple types of data well you guys are in luck because that's exactly what I'm going to be teaching you in this tutorial instead of building a function that can only handle one type of data if you know we're building a bunch of different functions that did the exact same thing why not code this to handle multiple types of data well in order to do that we first need to build something called a template definition and what a template definition is going to do is we're going to be building a generic type of data basically all we're going to be doing in this line of code so let's go ahead and in order to do that you first write the name template and now inside angle brackets right after it you write class then you give your class a name like Bucky now Bucky is pretty much a template it's not you know an integer it's not a flow it's not a character it's just a generic type of data so then we can use that generic type of data let's go ahead and copy Bucky and instead of you know having int or double or long we can just go ahead and type in our generic type of data anywhere we would use you know a specific type of data so now your return value is Bucky instead of passing it in an integer called a you're passing it in a Bucky called a and instead of passing it in an integer or float or double called B we're just passing it in a Bucky called B whatever the heck of Bucky is so now let me go ahead and run this and I'll show you guys that this works beautiful beautifully just like that so what's happening is this instead of building functions that take you know that take two integers and return an integer we can just throw in generic data types instead using this template definition right here so your template definition is pretty much building a generic type of data and then instead of you know taking a function that you know works with one type of data you can just use that generic type of data to work with any different type of data so you know we use the integer right here but say we wanted to use double and remember a double is just something with a decimal point like seven point six five or forty 3.54 and now whenever you go ahead and yeah I just accidentally press something let's go ahead and yeah now my computer is freezing that is yep and that's just great not responding that out now just go ahead I'm not in the middle of its oral or anything I can wait for you guys not minimize you you can stay there if you want let's go ahead and build and run this oMG are you flipping kidding me must be stopped to do a rebuild yes I want to stop it see that's what you guys get when you buy a new keyboard and all the keys are like all over the place I saw her this is like a keyboard oh wait a minute oh it was upside down okay it's fine now okay so as you can see instead of integer if we throw a double in here it causes the exact same function and it works fine so basically whenever women we make function templates we're doing this we're making first a generic type of data and instead of making a function specific to one type of data we're going to use that generic type of data and now whenever we call that function C++ is are going to automatically see that X is a double and Y is a double so you must be working with doubles here so instead of Buckey it's going to substitute the word double that's literally what it does it puts double right there and double right there and double right there and it runs it just like that and now if we go ahead and we had an integer like seven and 43 it will take anywhere where it said Bucky and it will change it into int int int int so as long as we have that generic type of data like that it's going to go ahead and it's going to work with any data we have the one thing that you can't do is you can't have an integer X and a double y you can't have two different types of data um well actually talking about that there is a way that you can make a template functions that take different types of data but for now I just want to cover whenever you have a function that does the exact same thing and you want it to be able to work with multiple types of data you can build a template function and what that means is you're pretty much building a generic type of data and you're going to be using that generic type of data inside your function instead of you know integer years or doubles or anything like that so then whenever you use your function later on you can use it with integers doubles or you can even build it to work with like strings and characters if you want but you know you can't really do that using addition so so anyways in this tutorial we learn how to work with one type of data using a function template in the next story I'm going to show you guys how to work with multiple types of data like how to add an integer and along together or a double and a float and all that good stuff so thank you guys for watching and I'm gonna go take a keyboarding class for this keyboard and awfully when you come back I'll be a little bit better so one thing you guys for watching and I don't forget to subscribe and I'll see you next video