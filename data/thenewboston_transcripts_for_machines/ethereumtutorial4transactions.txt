alrighty i'll welcome back and in this video we are going to be taking a deeper dive into transactions so just to recap a transaction is basically an instruction from an account requesting some kind of update to the state of the ethereum network now the most simple example would be a transaction requesting a transfer of ether from one account to another and in this example the part of the network that would update is of course the account balance of this blue person and this green person right here now on that note transactions can also be instructions to the network to execute smart contracts now an important point to make is that all transactions are always initiated by an eoa in other words by a human or an account with a private key contracts however once triggered let me draw a little arrow here so once they are initially kicked off by an eoa they can indeed let me find my little red dot here they can call other contracts is part of their execution so again in the ethereum network contracts can indeed call other contracts they just can't initiate the process the process has to be initiated by an account with a private key now another point to make is that all transactions on the ethereum network they are going to require a fee in order to be executed and this is because it does require the nodes in the network to do some amount of work and this work can be something like validating the transfer of ether checking people's account balance or of course executing a smart contract so the nodes since they do have to do some amount of work it does require a fee to execute a transaction all right so now that we have a basic understanding of what a transaction is what they're used for let's go ahead and dive in even deeper and take a look at some of the fields that are included in these transactions so the first thing that we're familiar with is the recipient of the transaction now the recipient of a transaction can either be another eoa which you can just think of as an individual a human or as we said a smart contract now whenever the recipient is another ela then what that means is that the transaction itself is simply a transfer value from one account to another account now when the recipient is a contract account that transaction is going to trigger the code in this contract to run or execute now the value field in transaction you can probably guess this this is just the amount of ether that you want to send to the recipient and the recipient in this case can be both the eoa or a smart contract now moving on from that we have this nonce pronounced nonce so what is the nonce a nonce is a unique number that is required for every single transaction now for eoas this number is the number of transactions sent from the account now for contract accounts it's the number of contracts created by the account now if you're wondering what's the point of having this random value in there it seems kind of uh silly or nonsensical hence the name nonce but it's actually a pretty good reason and that is a different value is needed for every transaction to essentially prevent the network from processing the same transactions over and over again really as an attempt to get more fees now the signature field right here this is the digital signature that was generated from the private key that we talked about i believe it was in the last video and what this basically does is it allows the account owner to authorize the transaction now this data field right here this is actually a pretty interesting one we'll be getting into this a bit more later when we write our own smart contracts but high level overview this is an optional field used to include really any arbitrary data now it's used primarily whenever you're calling smart contracts because it can indicate which functions to run which parameters to use so on and so forth now you don't use it too much whenever you are making a transaction to another eoa you can include data whenever you're making a transaction to a eoa however whenever you do so it's really just ignored by the ethereum protocol so for now just remember that this data field is going to be used whenever we are sending transactions to smart contracts now these fields right here gas limit max priority fee per gas max fee per guess i did want to include them in this tutorial since they are an important part of the transaction however i don't want to get too deep in the weeds because we are going to have a separate tutorial covering each of these concepts in more detail later on a dedicated gas tutorial it's going to be a pretty interesting however just to kind of uh complete this tutorial and you know not leave any gaps in your mind i will mention quickly a brief overview of what gas is so gas is essentially the fee required to process a transaction and it's based on how much computational effort is required by the network now for simple transactions like a transfer of ether from one person to another the fee isn't much however for complex smart contracts that require a lot of computational power that gas fee is going to be quite a bit so for now we can think of gas simply as a transaction fee and even though that isn't 100 technically correct later on we can dive into exactly how everything is calculated and we'll clear up any misconceptions there but for right now all we have to remember is that whenever users are going to send a transaction that they are going to have to pay a fee and that is basically the gas right here and also i will mention this gas limit since it i guess it is related to this users are also going to include a value for gas limit and this is just going to indicate the maximum amount that they are willing to spend on a transaction now before i let you guys go i do want to mention one other thing and that is in addition to creating a transaction and having the recipient be either an eoa or an existing smart contract there is one other type of transaction there are actually a couple different types but uh one other type that i want to mention right now is a transaction for deploying brand new contracts to the network now as a developer whenever you want to deploy a new smart contract what you would do is you would actually create a transaction and have the recipient it's called a xero address it's basically addressed with all zeros and again this is not an eoa or a contract address it's basically a special address meaning if i send it to this destination it basically just means create this contract deploy it for the very first time on the network so again that's called a xero address and it's used whenever you're deploying contracts for the very first time now there is a few other things that we should cover related to transactions but covering them now wouldn't make a lot of sense we'll get into those a little bit later on especially when we start getting our hands dirty coding some solidity contracts but for now thank you guys for watching don't forget to subscribe and i will see you later