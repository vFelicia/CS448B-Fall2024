what is going on guys welcome to your let's see sixty seventh C++ tutorial and in this tutorial I'm going to be teaching guys how to read custom data so in the last story what we did is let me scroll to my desktop watermelon we created this players text file and what it did is basically allowed us to create our own custom file structure and what we did is we were making our computer game with a bunch of different players we gave them an integer as the ID number a name which was a string and their bank account which was of course a double so now we have all our data right here and it's laid out in a very specific way no other program could really understand what this data is used for except our program so now that we have that data we need to be able to read it specifically in our own custom way so it's a little bit different than writing it for a couple of reasons which I'm going to be talking about so the first thing I want to stress to you guys is you can't use o F stream Oh F is for outputting data to a string for example when you have text and you want to output it to a file or write it to a file whenever you want to read data in from a file you need if' stream this allows you to take data from a file and read it into you know the computer's memory or whatever so it's the opposite of Oh F stream Oh F is for writing that a to a file i F is for reading data from a file so then you go ahead and create your file object I'm just going to mine the file and then of course is a constructor optional optional constructor you can take the name of that file so players dot text was the name of that file you can either create the text file document or excuse me what am I going to say the file object on one line of code or break it up into I always like to put it on one line of code just like when we were writing to a file so aside from that what we're going to be doing is we're going to be reading the data from that document so remember that document have three pieces information in it on each row it had an ID number a name in the amount of money so let's go ahead and make variables to hold that data into ID and then we'll make string name to store their name and double money to store their you know bank account information so basically how we're going to do that is this we're going to create a while loop in the wallet you can loop through each piece of information whether it's their ID number their name or their money and it's going to store it in a variable and whenever we have that information stored in the variable is we can do you know whatever you want that we can load it into our computer game we can just go ahead and print it out on the screen we can go ahead and send it to database on the internet but basically what we have to do first is take that data from the file and we need to store it on variables in our program so I want to talk to you guys about how we're going to do this remember I said in the last tutorial that every file has end a file marker and C++ pretty much is going to run this program until it gets to the end of file marker and then when it gets to the end it's going to return something called a null pointer so let me go ahead and actually code this and then I can explain what I'm talking about so just like before whenever we were you know whenever you use like cin to get information from the keyboard and then you could store it in variables like this well now we're getting information from the file so we go ahead and type the file and that's where the information is coming from and we're going to store an ID the first piece of information and the second piece of information we're going to store name and the third piece of information we're going to store in money so it's basically going to loop through this while loop and look at the file each time and every time it gets the new piece of information it's going to store an ID name and money now let me say this whenever you're working with files there's something called a file pointer let me go ahead and open my document again and I could probably show it to you guys really easily or it's a watermelon players so whenever you're working with files you have something called a file pointer now the job of this file pointer is to keep track of where in the file C++ is working with so what it's going to do is this file pointer let me go ahead and skinny up my program a little bit is going to start at the very beginning and by the way the end of file pointer is what right there where my cursor is but anyways your file pointer always starts at the very beginning what this loop is going to do right now is it's going to read the first piece of information so it's going to see right there that's the first piece of information that number one right there is what I want to store an ID so next it says alright this next piece of information store a name so it's going to scroll the file pointer is going to go to this next piece of information and it's going to see this one right here Bucky should be stored in name and then it's going to say all right now the next piece of information which is this right here I'm supposed to store this in the variable money so that's what's going to happen the first time this program loops through so the next time it loops through the file pointer is going to be right here so that's why we didn't have to change any line of code right here because we're working with the same object yet it knows the next piece of information is this too because the file pointer the next time this loop runs is going to be at the beginning of the next line or at the end of this line pretty much the same spot so that is how the file pointer is going to be working and by the way it actually is called the file pointer so you know I'm not making that up so that's why this loop is going to run fine each time so now that we have the correct pieces of information stored an ID name and money we can just go ahead and if we were making a game or something we would want to load them into the game but for now let's just go ahead and print them out on the screen so see out / now ID and then go ahead and I'm going to make a commaseparated list instead of you know spaces because you know if you're working with Excel well nevermind oh they use comma separated list but anyways I just like how it looks so the next piece of information is name and I'm just going to add a comma right there and lastly what is it money so after this I'm just going to go ahead and end that line and whenever you run this program it should work just fine so what it did is it read that file from the txt file one Bucky sixty sixty five point four seven and it did what we wanted with it in in this case what we wanted to do with it is just output it on the screen so we set alright now that we have the information output the ID and then a comma and then Bucky and then the comma and then money and then end of the line so it goes to a new line so then where this is working in the file is it's at the end of the file so whenever you run this loop again the next idea jumps down to is number two it runs the entire loop it's at the end of that line and then whenever you run this loop again it jumps down to the ID number three and it runs that line of code and how this does this while loop know when to stop because whenever the end of file marker has been reached C++ knows already without us having to type any extra code that a null pointer is returned basically it changes this boolean to false so whenever this is working this is true whenever it gets to the end of file C++ already knows that this loop should be false we don't have to explicitly you know write the if statement in here to check it or anything it's one of the cool features of C++ it automatically knows when to end so that's one cool thing that we don't have to worry about another cool thing that we don't have to worry about is whenever we're working with this if' stream or OS stream object whenever the file reaches the end of the file and this goes to false this object is going to get deleted automatically in the Deconstructor remember when we talked about constructors and deconstructors the D constructor is going to call the closed file method so remember like in the first file tutorial I told you that told you guys that you need to close your files in order to free up resources well with this I have stream constructor or excuse me D constructor is going to do is as soon as this file object gets deleted this file is going to close automatically so that's two things we don't have to worry about whenever we get to the end of file this is going to go to false in the loop is going to end automatically and also whenever it gets to the end the file the D constructor is going to close the file automatically so I don't have to explicitly write the file dot closed so pretty much everything is handed to you you just got to remember how to use it C++ made it really really simple to work with files if you really think about it you don't have to do all the background stuff so there you go that's how you write and read a custom file and again your file structure is going to be different depending on type of application you make but that's the basics of it so thank you guys for watching don't forget subscribe I know you guys probably have a lot of questions just ask my on my forum the New Boston comp forum and I'm going to go to McDonald's get a extra large milkshake and you well check out my next video so think guys watching and I'll see you then