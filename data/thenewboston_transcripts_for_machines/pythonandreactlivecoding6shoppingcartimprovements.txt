welcome back y'all and in this video what we're going to be doing hopefully is finishing up the remaining shop Logic for the back end now in between the last video and this one I did some thinking a little bit of pondering if you will and I kind of thought through some edge cases and some other things that are going to kind of simplify things in the future and by the way another thing that I want to mention real quick is that I hate when people have text on any screen and they kind of just read through it especially with like slideshows like what's the point why not just give this a piece of paper and we could read it ourselves but with that said um that's exactly what I'm gonna do right now and I'm gonna do this because I also want to think through this one more time and also explain what um kind of these changes are in detail so the first thing is order product creation so right now whenever we create an order what we are basically doing if I can pull up my model is in shop models order product so for each product in the cart or in other words for each of these cart products we're basically creating an order product from it in an all ordered product is is just two foreign Keys one to the order one to the product now the issue with that is that since this order product in other words these items right here are just a link to the product let's say once this is ordered the user goes ahead and they make some changes to it so even though you know this is kind of an extreme use case but say someone orders this wooden spoon well then as a seller I can come in and change this to um you know a piece of pizza or something like that well then on the buyer's order The Wooden Spoon that they ordered is gonna say piece of pizza now now of course that's an extreme example probably wouldn't happen but they can like change the image change the description say Hey you see this two small elephant figurines actually I'm going to change that to one small one after you ordered it so basically I want to ensure that at the point in time where the buyer orders something those items should not be changing after they order it so with that said that's what this first one is what I'm going to do whenever order is created is I'm going to take all that product data and just clone it over to an order product and these order products are not going to be editable so again like I said um the buyer's order should not change after ordering even if the seller updates that product later on and this is just a little technical thing I don't need to put the created modified date on it since the order products are just going to have the same created and modified date is the parent order and even though the order products are going to have all the same information as the product I still want to keep a foreign key to the product in that way let me pull this up that way let's say that you're a seller and you want to view this product you can still see like all the related um order products or orders that it's on uh just good like housekeeping so next order of business probably shouldn't say order so much but okay so to the conundrum of what would we do whenever these items are ordered because right now we have this status active in draft and that basically determines if those items show up on the buyer's product catalog which I'll call this page right now so this is pretty much displaying all the active products right now but the issue with that is that even if a product gets sold then it's still going to appear on this page so that was a little bit tricky and we didn't really want to mess with the active and draft status since it like wasn't really related to that and all that was working fine already so instead what I'm going to do is this I'm going to add a quantity field to the product and I'm going to add a quantity field to the order product and whenever you create an order we're just going to deduct the order product quantity from product quantity so basically for the majority of these is just going to have a quantity of one and then whenever you create an order product that's going to be deducted and have a quantity of zero but let's say you do sell something like tshirts or something that may have a quantity of like 20 in you know this is obvious example I don't even need to go through a pup if the user orders one then or let's say the user orders two then you're going to deduct two so they're going to have quantity of 18. the point being is that once we have that logic what we can say on this page is this show me all active products that have a quantity greater or equal to one so basically show me all products that are active and available and I just think that it's going to be a lot cleaner than trying to mess with our active or draft status or anything like that now with that said uh let's see what else okay so another couple um like user experience related issues that I had with this car updating is that say that you have an item in your cart like this black Tshirt right here now a couple of different things can happen at this point in time that are kind of out of the normal flow now if you added this shirt to your cart then you must have got it from your product catalog and since it was in your product catalog it must have been active and it had to have it had to have had a quantity greater than one so basically when you add it to your cart it was active and available now once it's in your cart however two different things can happen the seller who's selling this they could set it or basically revert this product back to draft mode so it's inactive now but like right now they could be changing it to draft mode another thing is that while it's in your car someone else could order this product so in that case even if it had a quantity of one and it was available if someone else orders it and it now has a quantity of zero then we run into that issue as well so for these two edge cases I'm actually treating them a little bit differently and the reason is this whenever you are a seller and you want to deactivate a product in other words turn it into draft mode as a seller I'm doing that because this product's not ready or I'm still making changes to it or for one reason or another I don't want buyers to be able to see this anymore now in that case what we're going to do since I don't want them to see it anymore I'm making like private changes I'm just going to remove it from their carts now the logic is a little bit different if you have item in your cart and it just gets paid for or purchased by someone else because then as a seller you know it's not like sensitive data it's just I want to convey to the um potential buyer hey this product is no longer available so the point being is that if this product gets reverted back to draft mode then it's just going to disappear from the cart because that's kind of what the seller intended no one wants to see it however if it gets purchased then I'm just going to have some kind of status on the UI that says no longer available because it doesn't mean like it's sensitive data just that it's no longer available and there you go so that's what this little snippet is kind of saying and the last thing that we need to do is just this isn't anything new I just uh kind of wrote it as a todo list is that whenever you place an order basically whenever you hit place order what we did already is we created the order object on the back end but we didn't do anything with the payment system so pretty much the buyer at this point in time is just ordering all these products for free however that's not what we want they do indeed need to pay for it so a little note about that is that whenever you are selling products what you can do is you can of course give it a price like I want to sell this thing for 200 coins and then you can either say um like you pretty much get to pick what currency that you want to be paid in now that means that in your product catalog these items for example these top three can be being sold for tnb and these bottom three can be being sold for VTX now the user can add each of these items there so they may have a mix of products available for tnb and VTX in here and that's perfectly fine as long as they're from the same seller we'll change this UI a little bit to just say that the total cost of your order is going to be like 200 tnb and 400 VTX so that's perfectly fine no issues we just need to validate everything and make it work on the back end but with that said actually oh crap I'm out of water so let me go ahead and go get some water and then we'll get started with all of this so let me pause my video real quick and we are back and hydrated okay so uh an order is created clone products to order products and for that to happen I first need to adjust my uh product and order product Model A little bit since they're going to have a lot of the same fields so I'm just going to make a base class for them so this is product this is order product and right now okay so what I'm gonna do is I'm gonna make a new abstract model and I'm just going to call it item and these are going to be the common fields for both product and order products so both product and order product is going to inherit from item and I just want this to be abstract based class so let me just copy this all right so item maybe this is kind of an easier UI okay so we have this item now this item is not going to inherit from created modified because only product is going to have a gradient modified date this over too feels better this way okay now only product is going to have activation status however both product and order product are going to have a description an image a name a price amount and a price core also for the seller my server isn't running okay and also a seller is that right even though I don't need maybe I'll just keep seller on product okay because each of these order products are going to be related to order which are also already related to the seller but I'm thinking that you know I think I'll just keep it like this right now okay so from so I wouldn't import item product is going to inherit from created modified in item and then a product is going to have an activation status get this so you guys can see everything so a product is also going to have activation status like before in seller and then for order products yeah I'm actually going to remove this created modified day I don't need it it just gets all the item data as well it doesn't need a seller and then that should be good okay and do I need to I don't think I need to import item right here here because it's a base class shouldn't be using it anyways all right so this is also going to ensure that um aside from like changing a tshirt to or a wooden spoon to like a piece of pizza or something um what this is going to allow is let's say that the seller is has like a couple of these Wooden Spoons and they're selling it at this point in time for a hundred so whenever someone orders it it's going to say 100 right here and then later if they go ahead and they edit this price it doesn't change the price right here so yeah that should be good and I'm also going to be adding a quantity feel to here however I don't need to do that right now I mean it could but that's it feels like too many changes at once so let me just go ahead and look at my notes uh order products should still have a foreign key to product which it does and just before running migrations I want to make sure everything's good so is it possible to add a nonknowable field okay to order product okay this is basically saying that hey you added a um basically saying that order product has description now so you need to give a description so I'll say provide a oneoff value now string same thing with image if I could just give an empty string for this same thing with name and a string and price amount just going to say zero wait what's this so price amounts uh select an option one why is price amount seeing a default time zone zero and for the price core I'll just say one okay so those are all defaults and I'll say make a migrate beautiful what do we got to do after that so this should be updated in Django admin so I'll say here actually let me just run my server make sure nothing's broken so make all right so products everything is looking same there and for order products they now have all the product related fields beautiful fantastic okay so when order is created clone products to order products so hi this all right so shop serializers when order is created which happens right here this is the product clone it to order product so first I'm just gonna say product equals the product just to kind of pull it off and be still stay the same and I think we just might have to do this manually I can't really think of a fancy way to do this but anyways when you create an order product Okay order product these are taken care of now for item let me just get my fuels here so I'll say description equals product description and then I'm going to do it for image name price Mountain cord which name personal core image image name price amount so for each product in your cart you are going to create an order product from it with all that same information this order product is not going to be editable and then you're going to remove that item from your cart and the product stays the same so when order is created clone products to order products this is to ensure that it doesn't change after ordering even with the seller replace the product later on I just kind of cross everything out as a checklist order products do not need a created or modified date since those values are the same as the order and I actually just want to make sure on my order model okay that I do have created modified which I do and that order product does not because in here it's from item an item doesn't have it beautiful and order products should still have a foreign key product which they do all right so now let's go ahead and just test this so open Postman my server is running and let's pop open this as well actually let's just delete any orders that we got and okay so we have no orders no order products no items in the cart and let me all right so I'm gonna buy this bacon and my address is number four so I'm gonna create well I first need a I don't have any car products right how'd I forget it was just like two seconds okay first I need to add uh bacon to my cart so for a cart product and number one so cart product at number one and now just verify that I have a buyer one which is me I have bacon in my cart beautiful and now what I'm gonna do is I'm just gonna create an order and let me just make sure I got my right token so this is my token and some DG all right that's me so now that I have a product in my cart I want to create an order from it using address number four which is my address so let me go ahead and do that and okay actually let me look at my serializers again so my order product serializer that's good oh actually I don't need this product to be serialized anymore because the reason that we were serializing the product is to have all that data but now we actually don't want it because it doesn't really matter let me just get my orders okay so when an order comes back you have all the order related information yeah if you're buying your seller and for the order products this is all the order product data that is not going to change even if the product it's related to which is in this case product one even if this information does change this is still the same including the name the image the price amount the core and this is going to be the digital currency so on and so forth no create modified day because that's on the order beautiful cool all right now next up uh let's add quantity to product and quantity to order products since they both inherit from item then we can just add in there and it's going to be a big integer field quantity and should I have a default let me think about this no because when they create a product and in order product is created I want to explicitly set this value and I'll just have to in my migration set default so make migrations at a default of uh one that's fine wait a minute what was that oh this is just for um one is for order product and one is for product so now they both have quantity like migrate and should be able to run my server but don't want to do that yet okay so now products in order products both have a quantity and let's check or do so add quantity to product add quantity to order product now when an order is placed deduct the order product quantity from the product quantity okay so this means hmm wait a minute wait a minute wait a minute okay so I'm thinking that yeah so now when you are browsing products and you add it to your cart you can add quantity as well all right so the order products that's going to be in your cart is going to have a quantity and then oh wait cart product is going to need quantity then all right had to pause the video for a second but I'm back now and uh another thing that I realized is that sense these um order products they don't get created here let me pull this up so the order products they don't get created until you place an order and when you place an order uh those order products get created from cart products so what we need to do is we also need to add a quantity to cart product and then whenever you add an item to the cart by clicking this button in other words basically the creation of a cart product we'll have some UI so you can indicate uh how many you want to order if there is more than one available so basically moral of the story we need quantity on car s today uh hold on one second all right and we are back again and where were we I believe we needed to add a quantity to cart product I don't want it to inherit from item so okay cart product make a migration on that so migrations and migrate that and so whenever we add a cart products let me just look at my serializer now it's going to require a buyer a product and quantity and all of that should be good still maybe some validation but okay actually can I put min uh on this so when adding cart products validate the quantity is greater than zero say when creating cart products when creating cart products Quan is zero there's my new car product model and let's see here is my car product serializer and what else you need check GPT and for my cart product View there you go and uh okay um interesting okay validate quantity I wonder why I added this oh wait it already had it yeah okay so validate quantity if the value is less than zero then do this okay so in my cart product serializer I just need to add this to validate the quantity and this is saying you can just Mark that aesthetic since it doesn't use that self argument all right so if value is less than or equal to zero then just say Quantity must be greater than zero then return value which is the quantity beautiful now whenever we create these orders then what we are going to want to do is for the order product quantity we're just going to set this equal to the cart product quantity now another thing that we probably want to do in our cart product serializer yeah so another thing that we can validate here is we need to check that the quantity being added car products does not exceed the product quantity in other words let's say that there are 10 of these available the user shouldn't be able to add 20 of them to the chart so let's say another thing we need to validate is that the cart product quantity is not see the related products related quantity that's a very good point Thank you chat gbt okay validate this huh that's interesting what I was thinking it would do is take this logic and just validate it in this validate function since validate quantity is usually for if you just have uh if you want to check if a single field is valid but in this case we are running validation logic related to two of the fields so let me ask is it better to just stick that logic in is it better to stick that logic in the validate method or validate quantity method I think it may be more performant to stick it invalidate because here we already are pulling the product down which is going to have one query now the way it wrote it the first time is it's going to query again here so I think this would just be an extra query it's better to put the coin to check and validate method because you already have the product object available there yeah otherwise we need to access it again which should not be might not be the best practice I mean in a way it does make sense because like it's all related to quantity and it's probably more readable that way but this is uh the performance benefits outweigh the cost so quantity is a field that we need and this is serializers cart product just making sure I'm in the same place all right another thing that we can actually do is to make it easier is this okay so we're pulling off the product from the attributes pretty much the request using the product seller and then the quantity that they passed in as well now with that we are just going to check if the product quantity yeah if the quantity exceeds the product quantity so after you validate that the product is active the quantity cannot exceed so only this many units available perfect okay so now this should be good to go whenever you are creating your order you're going to iterate through the cart products and from those you are going to get the related product and for each one you are going to create an order product with whatever quantity is in the cart quantity beautiful so now let's go back to our roadmap and see where we are okay when an order is placed deduct the oh we didn't even do this so we need to deduct the order product quantity from the product quantity okay so I will say this okay so same thing I just separated this out to a more easy to read variable Okay so the related product and quantity is going to come from the cart product and then we're creating an order product with that quantity however once we do in other words once we order that product we also need to deduct this quantity from the related product so let's should we do that after the car product delete okay so let's just say this yeah maybe it's just easiest this way so after we're done creating the order product we're going to delete the cart product and then for the product dot quantity we're going to deduct the quantity that we ordered and we'll just do product dot save all right so let me read through this one more time just to make sure it makes sense so for each product in your cart you are going to create an order product from it that's immutable can't change and then after you're done with that you are going to delete the car product and deduct the amount of things that you ordered from the products quantity and then you're just going to save that product order product created car product deleted looking good all right and then this is just saying I won't cross this out because this is saying on the UI on the product catalog page will only show the active products with quantity greater equal to one so that means at the moment in time one of these is ordered even if it's active as someone's browsing the product catalog it won't show up which is the logic that we want so next up what do we got when there's a cart product okay car updating okay when there's cart products in before ordering someone else orders the products of the quantity is zero do not remove the cart product but instead just display no longer available on the UI okay so in that case what information do we need well we do not remove the cart product so we don't need to do anything on the back end we just need to display the information on the UI so in order to display this what information do we need on the UI in order to make that decision and that is the quantity of the related product in the cart so let me go ahead and fetch my cart products and we'll see what we're working with so carts products okay connection refused because my server is not running let me make migrations okay make our own server now get these again okay I don't have any items in my cart let me just go ahead and create one real quick quantity is required now forgot product one quantity I would just say is one okay so now when I get my cart products the related part product is going to include quantity and then if this is anything but zero wait a minute wait a minute okay so this is perfect so this quantity is saying how many of these items you have in your cart in this quantity is saying how many items or of those products are available so if this equals zero then what we can do is we can just say something like this product is no longer available and we'll just have them uh delete it from the UI okay so now let's let's look back in no longer available this is kind of minimize confusion okay so even though they won't be able to order that product we don't just want to remove it from their cart in that case because yeah we don't just want cart products suddenly disappearing from the car if we don't need to however in this case when that product is reverted to draft we do want to remove it from their cart because I don't know maybe the sellers putting like private information in there or something who knows but either way they're indicating that I don't want anyone to see this so we're going to remove it so when there is a car product and the seller reverts the related product to draft delete the cart product so this logic is going to go in product serializer because upon this change of active to draft made to the product that's when we want the logic to run so what I'm going to do is close these and say in my product serializer and to make it easier I'm just going to give it my updated models okay just to make sure chat GPT has all the context that we need to give it let me give it my updated product model which includes the item and of course the product module itself and here I will give it the product serializer maybe even the view too let's give it the view too guarantee in the future that there's going to be an easier way to do this I mean I know that you can already select files and upload those with uh I think I gotta enable that plugin but either way actually I'm pretty sure soon enough all this is just going to be baked into the IDE I don't know if GitHub copilot can you know work off this context right now I know that you can like leave a comment and tell it what to do but I don't know if it can like think across multiple files yet but either way you can kind of distracted here okay when there's a cart product and the seller reverts the related product to draft delete the car product should I say this too this is because when seller they don't know if they see it okay so let's see if check GPT can figure this one out in order to lose the car product on it later but you can override the update method and product rate serializer perfect exactly what we wanted okay now here let me put this in my right serializer all right so in the product right serializer we are overriding the update method and of course we need to import from models and for car products okay why did you import a request I'm not sure I don't think you need it and we'll say from models.product import activation status so an update here we're saying if the product status changes to draft remove the related cart products okay so if activation status is invalidated data and we need that check because we allow them to partially update this so they may be updating the product in the request doesn't even it may not even have the activation status attribute in it however if they do and the activation status is equal to draft then find any then pretty much delete it from everyone's cart okay so one thing I'm thinking here to improve this is that if they are passing in activation status and it already was draft we are probably going to run this query unnecessarily so let's see what Chinese has to say about that so if they are passing in and the was already draft and the will run unnecessarily and I'll give it a little clue so it knows what query I'm talking about to optimizes we can first check if it has been changed from active to draft okay perfect all right so if activation status is invalidated data in other words if they pass the end at all and the validated data is draft and the instant status is active then do that which is what we want okay so let's do this so this works however I just want to kind of change this a little bit for a readability so if activation status isn't out activated data and the current instance and okay so if the user is updating the product and they pass in uh value for the activation status then what we want to do is we first want to check the activation status of the existing data pretty much before anything gets updated now if this is active and the new activation status is draft then and only then we want to run this query right here which basically deletes this product from everyone's cart all right so now let me go ahead and Link um what's going on here okay definition of meta and base class create a modified is incapable all right so let's get some help with this error message and what Chad gbt is doing that let me see if I can see what's in okay line 14 definition of meta and base class created modified is in capital oh okay so we have is it incapable though because this meta abstract goes true and the item match actually it was true so okay so product is here inheriting from two parent classes and there's a conflict in the magic definitions okay so they both have meta subclass there's some overlap or conflict on how they're configured to find both middle classes or okay so pretty much you're giving me two pair of classes to inherit but they both have a meta subclass so it's getting a little bit confused as an example in meta fix this you need to reconcile two meta definition so there's no conflict however I don't see meta in your item model did it remove D so I think I might have to do this because even though there isn't a clash I guess it just doesn't like that there's two meta subclasses so what I can do is just remove meta from item but before let's just uh give the info just to see if there is a better solution so there's my created modified and then in my item I mean both meta classes are the exact same but okay so they have the same attribute even though they're set to the same value it doesn't matter interesting linter huh okay that is interesting so my pie is telling me it's incompatible but chat gbt says it's I but what I can do is I can just remove this right here and that should be fine no big deal let me see if they make migrations wait all right what do we got going on now so Okay order product the field product clashes with uh product that's interesting Okay order product dot product the product field clashes with the field product from model shop.item so the order product model is in sharing your code I assume it's something like this order product has a fornicated product yes and the model item or one of its descendants also has a field name product um running your product fields I don't see what the issue is though okay and the item model or one of its descendants which is order products has a name product you know what I'm going to do is I think it might be better just keep this here let me see this make my grade all right so I think that this is the uh best solution here so this code structure it seems to be fine it's just that my pie isn't really liking it so in this line I and let me just review this code one more time we see Pop I see okay so I think it's just so um my pie doesn't know that these are fine so what I can do is remove my pyc files I also want to try just to remove my entire my podcast so let me delete this and once again if this is still giving me issues then we can just ignore the um okay incompatible with the definition of that which is not it is compatible so I'll say how do I ignore this for an in my pi it's gonna be better to access the root of the problem both are required they do not conflict inheritance list for product if you confirm meta definitions are compatible in both classes error yes I have but I still don't like that too much okay so before we go ignoring things actually let me go ahead and make sure that this is a solution first so on this line whenever I lent it does ignore it however let's see what else we can do the created modified abstract equals true item I'm sure I think it was true I mean they are both abstract classes and they don't Clash so yeah I think it's fine actually all right I think we're good so let me just make migrations make migrate one more time I'll do make lint make test and then I think we're good to go okay so what I can actually do is do some manual testing because what I okay so what I'll do is this I will create a product and then I'll add it to Amy's cart and then I will set that product to draft and we can see if it deletes from her card so let's first create a product so I'm gonna create a product to use I think we need to use form data okay and it's probably a good idea if I run my server huh so yeah too lazy type this command there we go all right so now what I'm going to do is I'm just going to go ahead and add a product which has a description an image a name price amount a quantity and a price core description is hey in the image is going to be I'll just say uh this bacon the name yo price amount uh 10 quantity I'll say 90 and the price core this is going to be one okay so now I created product with id4 and it is a yo maybe a yoyo or half a yoyo who knows and the activation status by default is set to draft and then for this item we can go ahead and add it to a cart so in Django admin gonna go ahead and create car product and let me delete this make it easier to see what's going on okay so the buyer is Amy and the product is this yo and I'll just say she wants uh just one of them so we have one cart product Right Here and Now what I am going to do is I'm going to update this activation status actually I'm going to update this to be active first so now this product is active and technically she shouldn't have been allowed to add this to the cart but since we kind of hacked it did it through Django admin that's why we had it in there so now hopefully if everything works correctly when I set this back to draft then it should be deleted from her cart so this still works correctly and let's see okay and it didn't get deleted so what's up so what we can do to check for this is say first of all let me make sure I'm getting the right serializer so whenever oh wait a minute this is embarrassing so I wasn't even updating the product I was just making the same post request again but what I want to do is I want to patch that product which was number four all right so that product which is this yo these ones okay so this yo is in the cart with the product ID of four and now I'm going to make a patch request to update this for the activation status which just to verify one more time so the activation status of it is now active and I want to deactivate it so it's active and then let me just go ahead and deactivate it set it to draft looks good refresh this and it is deleted from the cart okay that was a a fun one and on that note I think if we look back in our road map should be good to go so when the cart product and seller reverts the related practice draft delete that cart product and that's because if they're setting it to draft they don't want anyone to see it which is different than the logic where if you just don't have any quantity left because then it's fine if people see it okay now another thing that we're going to do is work on this order payment system however before I do that I actually just want to uh what I'm going to do is actually stop the video here and I want to get feedback on this issue since it's the one thing that's kind of bugging me again to recap what the issue is so if we go to both of these parent classes which is uh so product is inheriting both from this crate modified and it's also inheriting from item now both of these have a subclass of meta with abstract equals true just to indicate that it's abstract class and whenever I'm linting this my pie doesn't like the fact that even though these are the exact same in chat GPD said as long as these are cool then you know everything's good to go and also just uh in my experience I never seen any issues with that however if there is a better solution out there rather than just ignoring this my pie issue right here since I really don't like to do that then yeah just uh go ahead and let me know also if it's just bad programming practice or it really does cause some conflicts for some reason and my pie was correct in warning me then yeah I'd love to hear that as well but on this note I think we're good for now so what I'm going to do is I'm going to hold off on this order payment Logic for the next video once we kind of tackle this issue and yeah I think we're all good to go for now so uh looking forward to that feedback and I guess I'll see you next time