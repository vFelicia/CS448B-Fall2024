what is going on guys my name is Bucky Roberts and in this little miniseries what I'm going to do is I'm going to show you guys all the cool new features and syntax that we got with es6 so I'm going to break it up into a couple different videos and in this first one I'm going to be talking about the let keyword so if you guys saw any of the source code online you probably noticed that whenever you make variables you no longer are using the keyword VAR in most cases instead you're using the keyword let so why did we switch over to use let instead of VAR well with VAR as I'm sure you guys know there was a lot of scoping issues and by that I mean whenever you made a variable or declared a variable using VAR it wasn't quite clear exactly where you were allowed to access this variable were you allowed to use it inside functions inside if statements what if you made it inside if statement could you use it outside the if statement I mean it was just confusing and no one really could follow along with the exact rules well with let the rules are very simple whenever you declare a variable using the keyword let that variable is accessible from the same block that it was declared so I'll show you guys a quick example right now so let's say that I had a function and I named it the notebook all right so any of the variables I put in here and let me just make a variable called The Notebook so we made a variable called movie now since we use let this variable is only accessible from this block the same block that it was declared and just real quick I'll explain this whenever I say declared declared means that you're just pretty much saying hey computer I'm about to make a variable and whenever you declare it it pretty much reserves a bit of memory in your computer for it now whenever you initialize a variable that means you're giving it an initial value so again declaring it is just something like this saying hey computer I'm making a variable and initializing it means you set it equal to some value so that's all the differences for anyone who I'm sure all of you guys knew that but for I don't know maybe the few who didn't there you go so whenever I say block scope first of all what the heck is a block for right now think of a block as these curly braces right here so this block starts here and ends here that means that we have access to this variable anywhere in this code so if I just want to go ahead and return movie then I can do that so now when I do something like console log The Notebook then this isn't going to be a problem so check it out we ran the notebook and since of course we declared this variable right here this function obviously had access to it now what happens when I try to do something like pretty much break the rule so I'm going to go ahead and try to log out movie just like this or remember the only part of your code that can access this variable is essentially any code right in here between this curly brace and this curly brace right here in this block now I'm trying to print out movie right here and I'm going to get it err that's because this variable isn't accessible from outside this block all right so check this out we can actually demonstrate this further by doing something cool I'll say Good Will Hunting so let me run this a bunch of times now whenever I run this what's going to happen is I'm essentially printing out movie three different times now this movie right here what it's going to do is it's going to say okay I'm going to look for a movie that I am allowed to access am I allowed to access this movie no since it was declared using let only this chunk of code can access it so what I'm going to do is I'm just going to use this one since it was declared in the same block and by the way whenever you declare a variable and it's not explicitly in between any curly braces like this like I just put it at the top then it's kind of the global scope so the block is kind of you can use it anywhere now of course we already know why this little bit of code right here prints out the notebook and that's because it uses this movie variable that was in this scope now here's another cool thing if I get rid of this line completely then whenever you try to return the movie and print this out it's actually going to print out Goodwill Hunting because what it does is it kind of works like um like a family tree it looks for the closest ones first so it's going to look for a movie variable in the same block and if it can't find one then it's going to go to the next hierarchy the next level so it says all right there's no movie in this scope so let me go ahead and go to this scope and if it couldn't find one there then it would have to go to the next one and the next one so there you go and let me get my code back all right now this is the last thing I kind of want to point now in this little uh part of the tutorial so even though we declared and initialized the variable right here called movie and then we ran this function which declared and initialized another value for movie whenever we tried to print out movie right here it didn't use the notebook it actually used this movie right here why because it still didn't have access to it even though we made the same or a variable with the same name we still weren't allowed to access it because it wasn't in our scope all right pretty cool so that's all scope is in Block Level scope pretty much means you can access this variable from the same block that you declared it in now just to iterate that block doesn't have to be a function um I'll run another sample right here so I'll say bickies function this is just going to be the dumbest function ever so let me make a couple variables here just so I have something to print out and I'll say let um is horse equal to true so we'll say that we're testing if something was a horse or not again the dumbest example ever but whatever and I'll say let's saying and this is just going to be a little chunk of text I want to print out so I'll say bacon is good so this program is absolutely worthless but I'll just demonstrate something real quick so whenever I print out something and I'll say I don't know before if then I'll print out saying all right so I'm going to have an if statement here and I essentially just want if statement so I can show you guys that there can be blocks inside of blocks so I'll just test if is horse is equal to true now of course it is equal to true so I'm I essentially just want to excuse to make another block right here that's all I'm doing and I'll say let's saying and declare this variable again I'll say um I am a horse so again the reason that I wanted to print this out is because again up here we saw that block like I said essentially means the curly braces that surround it but it doesn't have to be a function so so this if statement you see these curly braces you can think of this as a block now this block is actually inside this block so you can have blocks inside of blocks now I say just think of it like Curly braces whenever you have to you know kind of remember block but it doesn't explicitly need to have curly braces for example if you have a if statement that only has one line of code then you can actually emit or leave out those curly braces so that would still be a block but for right now just think of a block like Curly braces it's a little bit easier to understand that way and before I run this I'll give you guys a little challenge so what this function does is it prints out this saying three different times it prints it out right here and then it prints it out inside this if statement and then it prints it out after this if statement so what do you guys think is going to display on the screen whenever I run this well if I run this check it out the saying is bacon is good I am a horse bacon is good well we printed out the same saying variable three different times so why did it change remember this saying it needed to print out a variable name saying so the first place it looked was inside its own block and that's why it found this right here now whenever we printed out this saying it didn't have access to any of the variables inside this block since they were declared using the let keyword so whenever you say let it means let this variable be used anywhere inside this block now again we can leave this out and whenever we leave it out if it can't find it inside its own block then it's going to look to its parent block right here and in that case we would get bacon is good and that's it that's all the let keyword is now you guys know now it makes sense thank you guys for watching and I will see you guys next time