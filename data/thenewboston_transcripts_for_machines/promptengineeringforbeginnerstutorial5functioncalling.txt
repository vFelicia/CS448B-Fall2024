hey welcome back everyone this is Ian bringing you the fifth video in this AI series with the New Boston in today's video we're going to continue using open AI chat completion API and this time we're going to leverage something called function calling so this is going to allow us to send a description of a function or functions that we have written in our code over to the API and the API can decide based on the other input that we provided and the description of these functions whether or not it wants to call one of these functions in order to use the information that the function will return to generate the final response to our initial question so that's a lot uh I actually have a program flow diagram here that can kind of make a little more sense of this visually but we're going to walk through this step by step so don't worry if at first it's not clicking by the time we're done with this you're going to have everything laid out in front of you it'll make perfect sense so this is our program over here and the first step is to collect the user input in this case we're just going to hardcode ours but you can get it dynamically like we showed in our second video in the series and then we're going to include a functions list with some descriptions in Json format giving information about the functions that we have defined so the functions will be defined separately but the functions list is going to have information about those functions we're going to pair that together with our user input and then we're going to send that request over to chat completion now chat completion is going to decide what or not it wants to call one of our functions in order to generate its final response and we'll actually be the ones calling the function all chat does is it sends us back some uh parameters and we describe the parameters in those function uh descriptions that we sent with our initial request so that's how it knows what type of parameters to include so it's going to send that back to us we're going to check and see if it in fact did want to call a function if so which function and then we're going to extract those parameters we'll take the parameters that it gives us and we'll actually pass them into the actual function that we wrote we'll invoke the function and get the response we will include our functions response with the initial response from the chat completion API in our messages list back to the chat completion API so that it now has the full context the original question its initial response our response from our function call using the parameters from that previous response from the API all that bundle together it's going going to look at that and it's going to generate the final content of that last assistant message so that's what we get down here at the bottom so again it's a lot of back and forth it's a little more complicated than some of the previous examples but once you mess around with this and get your hands dirty you'll realize it's actually pretty straightforward and you can easily get going with this in your code today just by messing around with some of the examples that we have provided here so let's go ahead and look at an example and then we'll walk through the code line by line so I'm going going to run this file before we actually walk through the code and I'm just going to show you what it does so essentially we are defining a function that will return the weather in a given location and we're going to pass a description of that function along to the API with our initial question which is what is the weather in Boston Massachusetts so we're asking for realtime information and this is what makes this whole thing super powerful traditionally when you ask a question like that about realtime information be it the weather or the news or the stock market or what have you chat is going to come back to you and say hey I don't actually know because I'm trained on historical data now it's going to look for the functions that we've provided to it and say can I get a accurate answer to that question by providing parameters to one of these functions and if it can it'll give us those parameters and it'll let us get that realtime information send it back to the API where it can then formulate its final response which will have some accurate information about the world around us presently and so in this case we simply said what's the weather like in Boston today and the result was the current weather in Boston Massachusetts is 72° f with sunny and windy conditions so these values 72° sunny windy these are things that we've actually hardcoded into our function but in the real world you could actually send the request out to like a weather API and get actual information to send back to the chat completion API now that we've run a request here and seen it response let's go ahead and work through the code okay so at the top the only thing that's new here is the import of Json so we need that Json module because we're going to do a little bit of what's called serialization and we're essentially just making sure that our python data structure can be converted to Json before we send it over to the API and when the API sends us back some data we want to make sure that we can convert that from Json into something that python can work with like a uh dictionary for instance let's take a look now at this function that we defined here again like I said a moment ago this could potentially call a real world API some third party API like a weather API and then you could get back some real world data for Simplicity sake we just hardcoded an object here weather info location is the location that gets passed in to this function temperature is just a hardcoded value of 72 the unit is the unit that gets passed in if unit argument is omitted whenever the get current weather function fun is invoked by the program then it just defaults to Fahrenheit and then the forecast is a array or a list of some string values in this case sunny and windy so we take that weather info dictionary and we use the Json module that we imported up top to do something called dumps where we pass in the dictionary and what this will do is it will return a Json string I believe and we can use that with the chat completions API so we're going to put all of the rest of the logic of this program inside of a run method or run function I should say and that just makes it to where at the very bottom of the program we can control what environment this gets run in so if this main.py module were to get imported somewhere else it would not run this code but if you just run like python main.py or Python 3 main.py from your terminal or your command line then it'll know okay this needs to be run you'll see that at the bottom of the code that we have included that does that but just letting you know that we're going to wrap everything inside of this run function all right first things first we need to create a list of all our functions in this case we only have one function we're still going to use a list but we're only going to have one object inside of here and the object's job is to describe that function so we give it a name here the keys are all strings the values are all strings this is essentially Json if you're interested in learning more about Json schema there's a link here that you can visit and you can see how this is all structured why it's structured the way that it is but we're just trying to put it in a ubiquitous format that can be used with the API so functions is going to have objects inside of it the objects are going to have a name property the name is going to be the name of the function in this case we have the get current weather function so we call it get uncore current uncore weather the description is just going to describe what the function does in this case our function gets the current weather in a given location so then we move on to the parameters of the function so if you remember from above our function took two parameters it's going to have the location and then it's going to have the optional unit and then the unit will default to faight the string value if it's omitted we have a type of object just describing the properties object and then inside the properties object we actually have the parameters so the first one is location and it points to its own special object that takes some additional key value pairs you have to say the type of the parameter in this case the type is string we also want to describe this particular parameter so we put a description key and we say something like the city and state for example San Francisco California this is just meta information for the API so that it knows whenever it decides to use one of our functions how it should send back the parameters how it should structure them what they should look like whenever it sends that data back to us so then here we have unit the type is string again but instead of description we have something here called en enum just means that this is an enumerable and essentially that means that anything inside of this list here are the only options that are available to us so we have either Fahrenheit or Celsius that is it so whenever the API sees this it knows that it has to send back either Farenheit or Celsius nothing else now outside of properties we have required and this is just a list telling us which of these properties are actually required for this function to run and in this case location is the only required parameter so now that we've defined our functions list we can use that in our requests to the API so let's go down and look at that we have a messages variable pointing to a list of message objects and traditionally we have a system role as our very first object here but in this case we can omit that because by default the system roll is just a helpful assistant and what we're doing here is we're just sending the initial user roll message with its question to the chat completion API so the content for this one is what's the weather like in Boston again this is hardcoded if you wanted to get user input refer to video two of this series to see how you can easily do that so we're going to send a couple different requests remember in the program flow diagram I show some back and forth this is going to require a couple different requests here and so instead of saying response is equal to the API call we're going to say this is the first response so first uncore response is equal to the openai chat completion. create method and this will send our request to that AP the other thing you'll notice that's different here is the model isn't using GPT 3.5 turbo it's using GPT 3.5 turbo 0613 this is the current version of the model that's trained on the function data set likewise there's also a 0613 for GT4 if you decide to use the more powerful llm all right so messages is going to point to our messages list that's right here on line 48 functions is going to point to the functions list that's what we defined up above and then here function call is equal to Auto that is the default whenever you include a functions parameter here or functions argument in your call to the API and what Auto means is it's just saying that the API can decide whether or not based on the context of everything it wants to call one of our functions you can actually provide an object here with the name of the function if you want to make it call the function every single time but the API is really powerful and if it sees a question like what's the weather like and it sees that we have functions that can handle that then it's going to know that it needs to provide us with those parameters so the the arguments that you can pass to function call or the values anyway are string of Auto string of none or an object with a name key pointing to the name of the function from your functions that you want it to call okay so since we've called that now we're going to print the first response and if you remember from before when we did the example over here you can see the entire response object if you look here there's two different objects here's the first one and this is important because the content of this one inside of choices the First Choice inside of message the content is normally where we pull that generated text from but as you can see it's null so it's good that we pulled this up because you should know that if the model decides that it wants to call one of your functions it's actually not going to provide you with content it's going to provide you with something called function call so function call is new to us it's inside of the message object you can see this is an assistant roll message and if there's a function called property then it's going to have a name the name is going to be the function that it wants you to call from your functions list and then it's going to have arguments the arguments are important because that is the arguments that you're going to pass to your function whenever you call it and the Finish reason here is function call and that's different from what we're normally used to which is either stop or if we reach our Max tokens limit so function call is telling us like hey this is the model wanting us to call one of our functions so we're going to look more closely at that but you can see where we print out the second response here this one actually has the content and that's what we Traverse down into and print at the very bottom so we're going to get to that in a second but let's look at our code real quick we are printing the First Response object we are printing an empty line and then we're saying First Response message is equal to and we're traversing down into the First Response object looking at the choices list looking at the first item in that list and then extracting the message object from this is important because this is going to have information that we need to send back to the API again referring back to our program flow we send the initial request it sends it back to us we're about to send another request and included in that second request is going to be the response from the initial request and the response from calling our function so down here we do a check we're saying hey inside of the First Response message is there a property called function call we do that with this doget method so first response message is a dictionary so we can use a dog get method to check and see if this key exists on that dictionary if it does then this if statement will be true and we will go down into this block now we're going to create another dictionary that is available functions these are the functions that are available to us the key is the name of the function variable and then the value is the actual function variable so now we want to extract the name of the function that the model wants us to call that's inside of that first response message it's inside of that function call object and it has a key called name that is going to be in this case getor current uncore weather so now that we have the function name we know which of our functions we need to call this is simple because we only have one function but if you had more than one then you would have those listed here so function args is going to get pulled from the First Response message again into function call but this time into arguments as opposed to the name key and so you can see here these arguments look something like this like location Boston Massachusetts this is an object and we can pass the location the value for the location into our function call because remember our function requires at the very minimum a location argument so we use Json loads here essentially just wrapping this arguments value in Json loads will make it into a it'll serialize it into a data type that we can work with in our python code function to call is going to be the available functions object here with the function name as a key in this case it'll be get current weather which will turn the function to call variable into the get current weather variable or essentially It'll point to that function whenever we invoke function to call we're actually invoking our get current weather and remember get current weather was defined at the very beginning right here so now that we have access to that we can actually pass in the argument or arguments depending on whatever parameters were given back to us from the AP gu call and we can actually get a result here returned to us and we can do something with it so let's scroll back down here a lot of extracting Happening Here essentially from the response just trying to figure out okay does it want us to call the function if so which function is it we get the name to determine which function okay now that we know which function let's get those arguments let's make sure that they're in a data type that we can use so let's do a Json loads on those and now let's find the actual function the function to call from our available functions using the function name and the last thing we want to do here is invoke the function to call with the arguments so location is equal to function rs. getet location same pattern as the if statement here we're using theget method on a dictionary to see if the location attribute is available to us if it is it'll get returned here and then we have units it is equal to the function R.G unit if there is no unit then I think it's just going to be like an empty string or a nonv value either away if it's omitted then it's going to default to Fahrenheit so the result of calling our function will get stored in this function return value variable and now we can use that whenever we're sending our second request back over to the chat completions API okay so we need to append the First Response message from the API to our messages list and then right after that we need to append a new message with a role that we've never seen before this role is called function as opposed to like system assistant or user and then the name of it needs to be the function name so that's what we extracted from the previous message and then the content is going to be the return value of calling that function with those parameters so we stored that in that function return value variable and we bundle all that up into an object append it to our messages list and now our messages are ready to be sent back to the API to get that final response so that's what's going to happen right here we're going to get second uncore response from calling the API a second time telling it the model is gbt 3.5 turbo 0613 the version of the model that's trained on function called data and then we're going to pass in our messages list so that the model has the full context of everything that's happened th far and can give us the appropriate answer now you'll notice that we don't include things like temperature or Max tokens here if you don't include temperature it'll default to one if you don't include Max tokens it'll default to Infinity so make sure that you include those if you you want to tweak those to something more specific but for the sake of just showing you the example here we can omit them safely so then down here we're going to print the result of second response that's that second object that we saw over here so this one and then we're actually going to print an empty line and then we're going to Traverse down into the second response choices list first item message object content attribute and that's going to give us the string value of the current weather in Boston massachus us is 72° f with sunny and windy conditions so that's all the back and forth we're calling the API two times the initial time it sends a response we do some checking we do some extracting we do a function call we assign the result of the function call to a variable we bundle all that together we send the initial response with our function call response to the API a second time as part of that whole messages list and it finally comes back to us with the textual response resp based on the context of everything that we've passed it thus far and that's what we use to Output to the terminal so that the user can see the answer to their initial question and the very first request now I told you at the very bottom this is where we actually run run you may have seen this pattern before but essentially in every Python program or every python module there's going to be a double underscore variable and it's going to have the name of the module in this case if you run this module with like Python and then the module name python main.py in your terminal then this value will evaluate to double main as a string in which case we do want to invoke the Run function which will run all of our code so let's zoom out real quick I know it's a little small sorry for those of you on mobile but let's just take a look at this program because it is a bit longer than the programs we've been writing previously so we've got our boiler plate stuff up top we include Json so we can use the dumps and loads methods we Define our function in this case we're just including some dummy data to Output but here you could use a third party API to get some real world realtime data and then we have our run function which is where we Define the rest of all of our code where we're going to actually interact with the chat completion API so we Define our functions in this Json schema format where we have all of the information about our functions in this case we only have one function but we want to describe its parameters and that will dictate how the model will send back information for us to use to be able to call our function we're going to create our messages list we're going to start with the very first message being from our user Ro not from the system role like we've been doing previously we're going to hardcode the content again you can get Dynamic input if you like we're going to package that up and send it to the API but making sure to include the functions in addition to the messages that way the API knows it has the ability to send back parameters for our function if it wants to we're going to print our response here and then we're going to Traverse down into that and get the entire first message we're going to check and see if it wanted us to do a function call if it did we're going to extract all the necessary information from that object so that we can do our function call we're going to store the result of calling our function with those parameters from the initial response from the API in a function return value variable and then we're going to use that down here to package it up into a message object with a roll of function before we do that of course we need to append the initial response from the API to our messages list then we append our new function roll message with the name of the function that was called and the content of the result of calling that function we package that up in our messages list we send it in our second request to the chat completion API and the result is going to include the textual response from the API to our initial question from our first response that's it for doing function calls with open a chat completion API let us know if you have any questions down in the comments below and we'll catch you all in the next video thanks