now before we implement the whole application it's always important to understand the project structure and what all the files are for now obviously you have the base project from start.spring.io so let's just go through what this tool generated for you so you know your way around the project and you kind of feel at home with this kind of project structure now let's go ahead and close down the source folder here and first of all let's look at this gradle directory over here so in here you find the gradle wrapper and this is basically a gradle distribution that will be downloaded for everyone who opens this project and so its purpose is that your users or anyone who's working on this project doesn't have to have gradle installed locally instead when they check out the project or they use this great wrapper it would automatically download the version that is specified in here now currently start.spring.io will use gradle 6.7.1 there's also gradle 7 so when you're watching this you might already have a newer version of gradle in here so now in order to use this grader wrapper you can open up a terminal which you can also do right from inside intellij and then just run gradle w for the greater wrapper and then build to build the project so there are different gradle tags that you can run and build is one of them now if you get an error here saying your java home is not set or that java cannot be found in your path make sure your environment variables are set correctly so let me show you here under my environment variables you should have a java home which is pointing to a jdk so for me it's a jdk 11 and notice there is no suffix for the bin folder for the binaries now also in your path you need to add your jdk in here but make sure to also add the bin for the binaries at the end so both of them have to be set and then the greater command should run through and of course with your current project the greater build should also succeed all right so for now let's move on and look at a few other gradle files now the next one that we have is the settings.gradle and this first of all sets up a few repositories where gradle can find the spring plugins and then the root project was named the new boston so this is again based on the artifact id that you enter on start.spring.io now more importantly you also have a build.gradle file and in fact here because we chose kotlin the gradle files both the settings and the build are actually kts files so they are kotlin scripts in most projects you will find just a build.gradle file without kts and that makes it a groovy file so it's using a different programming language to set up the build scripts but if you're using kotlin you can also use the kotlin dsl for gradle i won't go into detail on that in this tutorial series but if you're interested in that let us know in the comments down below for now let's just take a look at what this build.gradle file is for and what it currently looks like now first of all there are a few plugins that are applied to this project most notably of course you have spring framework you also have dependency management coming from spring and then you have jvm and another spring plugin so these are cotton plugins allowing you to write kotlin for java projects so kotlin jvm and then also spring integration for kotlin next up there are a few details about this project's artifact like it's group id and version um the java compatibility is set to version 11 so that's again the radio button that we used on start.spring.io and then again there are some repositories set up telling gradle where to fetch dependencies from then we have the dependencies for this project the first one and the most important one is spring boot starter web so this is again because we selected the web dependency we have this specific spring boot starter and this really is the base uh dependency that gives you a spring boot service and then next we have the jackson dependency this is for serializing objects to json and deserializing json content or requests to objects we're going to talk about this in the next few videos then we have kotlin the standard library and also cotton reflect and then we also have a test dependency here two spring boot starter test this gives us junit five a 3rd j for assertions out of the box also includes mokito for mocking and so on we're going to take a look at this in more detail in the next videos when we actually write some tests using junit 5. now further down here we have a few options for kotlin so here it says any task that is related to compiling some cotton code should always use strict mode and it should compile to java byte code targeting version 11. so kotlin is a jvm language which means it is compiled down to java byte code and depending on the target version you choose it will only run on containers that support well in this case java 11 you could also target java 8 so that well any platform or container that can run java 8 can run your project and then there's a similar configuration down here so any test task should use the junit platform so all these basics that we need to get started with spring boot with kotlin and with jnet5 are already given to us with this project base now apart from these cradle files there's also a little help markdown file over here with a few links uh you can check them out if you want to and then there's a git ignore file with quite a few defaults for things to ignore when using git so if you're not too familiar with git also let us know if you'd be interested in tutorials on that down below in the comments but for now let's take a look at the source folder there's a test and a main submodule under test you have all the unit and integration tests and there's also one given for you as an example so i won't go into detail yet but it looks like it's doing nothing but it's actually already testing something which is that the spring application context can be loaded successfully and this is also why this uh this example function here or this test case is called context loads because the spring boot test annotation will actually trigger spring boots to build up the entire application context which means it's going to create all the objects that you have in your application and therefore if the test here runs through that means that the application context was loaded successfully if you're not quite sure about application contacts and what all of this means don't worry we're gonna talk about this in more detail in the next videos so next we have our main source directory and under here we have the new boston application so this is again the main entry point to this application and then the main function basically just runs our the new boston application so for now there's not much to do here the whole magic again comes from the springboot application annotation which basically tells springboot that this is your main application class and that it should build the context and configurations starting from this class as a starting point now another essential file in spring boot is here under resources and it's called application.properties and this is your main entry point for configuring the whole springboard application this includes things like the port on which the application runs the tomcat options logging levels some custom configurations that you're using in your application and many more so springboot is very versatile when it comes to configuration for now let's just try it out by setting server.port equal to let's say 9000 and this should make it run on port 9000 instead of port 8080 so let's start the application again by selecting it up here and then just starting it so now you should see well it starts running again but this time it says tomcat started on port 9000. one thing to keep in mind is that if you have something running on port 9000 already which shouldn't normally be the case then it will fail so make sure the port is free otherwise the application will not be able to start all right perfect so now you know what all these files are for how you can configure spring with applications you've seen a bit of gradle and how it works so i think that's really important to really understand everything that's there in your project in order to start working on it so i know you can't wait to actually write some more code so that's exactly what we're going to do in the next few videos please give this video a like if you liked it and i'll see you in the next one