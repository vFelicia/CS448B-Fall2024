welcome back everyone to another video and in this tutorial we are going to be learning how to build a blockchain integration so this is a way that you can allow users to link a blockchain account to their discord username so that your discord bot can accept crypto payments so some simple use cases for this let's say that you had a discord bot where you were selling things like reactions or rolls well you could accept crypto payments for those or let's say that you allowed users to deposit coins and they could buy ingame items such as digital corn or swords for your discord game or let's say that you had discord bot that allowed users to list items for sale but it may cost a fee in crypto to be able to list those items so lots of various ideas and in this tutorial series of course we are going to be using the new boston blockchain because first of all is the greatest blockchain ever and second of all it's just really fast and easy to use in these examples however the core concepts that we're going to be learning throughout the series you are going to be able to port that over to lots of different blockchains encrypt those so now that we have a basic overview of what we're building let's go ahead and dive into the technicalities of how this bad boy is going to actually work so the first thing first is that the discord user is gonna run this register command and they're gonna pass in their account number which is something like this here's mine right here so this register command is essentially saying that hey i want to link this blockchain account with my discord username so that's what's going on there and then our bot is going to ask does the account number that you're trying to register already belong to a user now again in this architecture whenever i say register or registration this means essentially an attempt of a user to link a blockchain account to their discord account now whenever that registration is complete as we'll see later on we're going to be creating a user object and when a user object is linked to a account this means that everything is good everything is verified that's kind of the end step but anyways now we can go back to here and say does this account number that this user is trying to register already belong to an existing user now if so we just want to throw back an error message that says hey this is already registered you can't link the same blockchain account number to two different discord users now if it's not already registered then this is going to be the more common flow we first have to say does this discord user id already have a registration in other words are they already trying to register or link another account number so if they are then what we want to do is we just want to update the registration with the new account number because maybe whenever they ran this command they typed in the wrong account number or something so this allows them to update it and scrolling back down here now if they don't already have a pending registration then what we want to do is we want to just create a brand new one and for this flow the way that we're going to link it is whenever these registrations are created or these attempts to link the blockchain account to their discord username what the bot is going to do is it's going to generate a random verification code and then it's going to send it to them in a dm so only this discord user is going to know about this unique verification code kind of like how those emails work when you include a token in the url and then you email the user but it's kind of the basic concept so now with that being said let's pop over to the verification flow diagram right here so the bots after this registration command is complete it's going to send them a dm that is going to look something like this it's going to say send onecoin to the bot account and it's going to say from i didn't include this part but from the account that you're trying to register with the unique memo so essentially only the user who knows about this unique verification code is going to be able to send it from that account with this in the memo and the memo is just the description of whenever you send coins it's just a little you know bit of text that you can include with your transaction but anyways the user is then going to send this to the bots account and then what the ba account is going to be doing our discord bot is it's going to be listening to blockchain for any incoming transactions now when it receives a transaction the bot is going to look at it it's going to say does the sender of this transaction does their account number and memo match a registration if yes it means that someone is trying to register or link a blockchain account with a discord user account so now the next thing that it needs to ask is if yes does the account number already belong to a user now if it already belongs to a user that means that this blockchain account number is already registered and then we're just gonna throw back an error now i wanna pay a little bit attention to this because this is probably the only tricky part in this whole flow so check this out back here whenever we had our discord bot accept this register command it was a discord user saying hey i want to register this blockchain account to my username now if this account was already registered to user we're just going to throw back an error message right here so why do we need to do this double check right like this well this is just for a special edge case and to kind of describe it imagine this imagine if i released this discord bot and right away two people tried to register my account number right here so of course i tried to register and then someone else tried to register it well before anything was verified the bot could have two pending registrations open now let's say i went through and i of course completed the registration process so i already linked it to my official user now when that second discord user tried to register again and this is really a weird edge case but let's just say i had two discord accounts is that that's when you would say hey this already belongs to a discord user so you're going to get that error message so again this is going to be very rare but since you know it does involve cryptocurrency then you want to just make sure to account for all edge cases so moving along does this account number already belong to a user if not then we're going to say is this a new user that doesn't exist in we're gonna be using mongodb for a database but is this a brand new user that we're pretty much creating or registering for the first time so if it is indeed a brand new user and they're just linking their blockchain account to their discord account for the very first time then we're going to create a brand new user object in our database with zero balance now if not then it means that there's already an existing user that already had a different account number linked up and what we want to do is we just want to update because maybe they just created a new um blockchain account and they're just trying to update their account to something else for example i have bucky and then i have this other one bucket so that is that flow right there now remember this is the flow we go down whenever a user's or the sender's account matches a registration so they're trying to link their blockchain account to their discord account now if the bot receives a payment from the new boston blockchain network that doesn't match a registration then that means of course it's not a user trying to register so it would either mean one of two things now if it's a user that is sending coins to the bot account that just means that they're trying to make a deposit so in this case we're just going to take their balance and increase it by whatever amount they sent now the last case which i mean this isn't a bad thing but um i don't think it's going to happen that often is if the bot receives a deposit or a payment that doesn't match your registration and it doesn't match a user that just means that it's a random person sending coins to this bot account so you can just view it as a donation but most of the time it's either going to be someone trying to go through the registration process or deposit coins into their account and by the way since this is just a basic framework what i am going to do is just have the users whenever they send coins they just have a balance but your bot doesn't have to be structured this way instead of depositing the coins and going to user balance they can deposit coins and they can buy rolls or they can buy ingame items or they can pay for something but i'm just gonna have a balance that increments just because like i said we're just covering the basic concepts right now so now that we understand how everything works and again what we'll be doing is coming back to this and referencing it so you know don't worry if you didn't catch everything right away we're going to be coming back but there you go let's go ahead and jump back into the code and get started now just to give you guys a quick overview of what i did before this tutorial started is i did create a git ignore file and this is just ignoring some basic stuff my ide files some testing environment could keep and by the way all this is going to be on um github it's going to be under the repo discord python framework so you know don't worry about if i'm going over all of this too fast and another thing i did is i created this basic readme on how to set up the project so like i said we're going to be using mongodb as a database for this tutorial and i'm going to be showing you guys how to set it up with your project but as a prerequisite just go ahead and get it installed on your computer i have instructions right here for mac if someone else wants to add windows or linux that would be great but i already actually made an entire mongodb tutorial series so if you guys need help installing it or if you run into any issues either watch that or of course you can pop over in the discord and anyone in the community myself included if i'm available will be able to help you out but anyways like i said make sure that you install mongodb before you get started and the initial structure that we're going to need to create is a database called discord db so let me pop open mongodb compass i like to use and i'm just going to create a new database and this is called discord db and for the collection we're just going to be creating one right off the bat called users and if you remember from these diagrams let's see this user is going to be one of the objects that we store the other one is registration and we're also going to have one other one as you guys are going to see but the cool thing about mongodb is that if you create an object and the collection doesn't already exist it's just going to go ahead and create one on the fly for you so even though we're going to have more collections in addition to users we only need to have one collection and then the rest will just be auto created on the fly pretty cool pretty cool so all right we created our initial mongodb database and collection and then now let's go ahead and create our requirements.txt file so let me go ahead and right click new file requirements.txt make sure to add these in and i actually have these saved so let me go ahead and paste those in and that is this so of course we're going to be using discord dot py pi this is going to allow us to connect our python project python dot n so we can have environment variables and we're going to be doing this because that way we don't have to store our discord token right in our source code because it's not the best practice so instead we'll be following best practices and store that in an environment variable and then this request is just so we can make network requests because we of course are going to be reaching out to the blockchain to listen to transactions all right so those are all the requirements or dependencies that we need to install so now let me go ahead and copy this command and this is just to install those from that file again it's just in case you didn't see that was kind of quick pip3 install slash r requirements.txt and now everything looks good and just pop them back in my requirements all right so no issues or anything and we are good to go and before we get started coding we actually want to do one other thing i believe this is mentioned in the setup and that is one create a dot env file so let me go ahead and do that dot env let me close this right here and it says in the root directory so right there and make sure you set this environment variable which is going to be discord token so this example is of course not going to work for you guys and it's not even going to work for me because i already generated a new one so hold on on the right side of my screen i'm generating a new token and there you go so either way go ahead and create a env file and make one environment variable called discord token and then make sure to include your token right there and by the way this file is in our git ignores so whenever you post this up to github it's not going to share your token so that's why we're doing all this now another thing that i want to do is i actually want to create a config package and all of our core settings are going to be here so make a new file we'll just call it settings settings.py and again anything that you want to keep private is going to be in your env and then anything that we're going to be putting in our settings are just like constants for application but they're not private no like passwords or anything like that it's mostly just like um application settings think of think of it like that so first thing import os and we'll say from env we're going to import load dot env and then we're going to call this load.env and what this is going to do is it's going to load in all of our environment variables so that we can treat them in our application the same as we could treat um environment variables from our operating system so it just is a way in case you never worked with this python.env to pretty much load in your project environment variables as operating system ones but anyways let's go ahead and create all of the contents that we're going to need and we are first going to need some application constants and i am going to name this maximum confirmation checks in what this variable is going to be is how many times we are going to check for confirmations and actually let me pull this up it's actually pretty cool where is it there we go all right so essentially whenever we get a or whenever our bot receives a transaction what it does is it's gonna see that and say okay this is a transaction however a transaction does not mean a verified payment a transaction that the bot sees at first is just going to say that it's an attempted payment now in order like many blockchains to verify that payment you need to wait for confirmations so once it receives it in in our blockchain it happens right away but either way what we're going to do is we're going to say once we receive it we're going to pull the blockchain x number of times looking for these confirmations so we will say we're going to look 20 times and if we still can't find the confirmation then that means that the payment was just a failure and it's invalid so that's all this means we can tweak it later on if we need to make it longer or shorter but you guys are going to see how this works when we get to it now the other constants i want to add are just for the new boston blockchain network and the first thing we're going to have is a bank ip and we're just going to use my bank which is 54.183.16.194. and after this we're going to use the bank protocol and we're just using http again we're on the alphanet i don't know when you guys are watching this but uh it's 2021 and we're still on the alphanet of our blockchain so http and for the bots account number this is going to be the account number that of course if you can't tell belongs to the bots and basically saying that listen for payments to this account number so of course make sure it's one that you own or else someone else is going to be getting your payments but there you go now after this we're just going to have some discord constants and i'm just going to call this discord token now this is going to be equal to this value right here and that's why we needed to import os right here because we're going to be plucking that from os dot get environment variable and this environment variable is just going to be called discord token so that's how you do that let me clean this up a little bit all right now last but not least we are going to have some constants for and that is the database name and if you remember the database name was discord hyphen db and after this the host is just going to be localhost which is hosted on my own machine right now and then port we're going to be setting this equal well this is actually just the default is 27017 but i just want to hard code it because of course whenever you're deploying this you may have to change some of these settings so there you go but that is all that we're going to have in our settings basically our constants needed for further development so let's go ahead and get started with our basic boilerplate from discord.ext we are first going to import commands and then we will just name our object box and this is equal to commands dot bots and for the command prefix i like this little arrow maybe i like it because it reminds me of the new boston logo but either way that's what we're going to roll with and what we can actually probably do right after this is we can say if name is equal to dunder maine then we just want to do bots.run and then we can just pass in our discord token and from this we can do config.settings import discord token so there you go and let's also just go ahead and make that on ready event listener so we can say bot.event and then we'll say async def on ready now whenever our bot is ready even though we aren't gonna write this logic just yet we are gonna actually start pulling the blockchain in other words we're gonna start listening for transactions right away so i'm just going to write a little note here so we don't forget start pulling blockchain and then we'll say for now we'll just print out ready just so we can test that everything is working so let me just go ahead and run this mostly just to make sure that my token is legit all right so it says on ready and pop open discord it looks like our bot is online beautiful all we need for now so now let me go ahead and stop this and let's first start coding our register command so let me copy this a bit lazy and instead of on ready remember we're just gonna name it register now the sample that we're gonna be using is of course register and let me just copy my account number all right just so we can see what's kind of going on so we're gonna be making custom command called register and this isn't an event it's actually a command singular all right and as you know whenever you have a command it takes context and since this is taking in one argument that's going to be the account number we can actually rename this to account number and there you go now the very very first thing we want to do before we get into any of the good stuff is we want to take a look at what they passed in right here and we want to verify that it's a properly formatted account number the reason for this is because if it is not and they try to register something like tuna then everything else is going to be kind of messed up because it's going to try to listen to an account number or transactions that is impossible to exist and well really if they do that we want to give them feedback right away so now let's go ahead and make this verification function however i don't just want to put it right in here because i want this main dot py to be really focused on these bot commands and this validation is really more of like part of the new boston protocol so that said i'm gonna go ahead and make a new package called utils and i'm going to create a new file and i'm just going to call it new boston now in here we'll make a function that says is valid let me bump this up too is valid account number and this is going to take an account number or in other words some kind of string and then we can just say that this checks if the checks if the given account number is valid now just to give you guys a real quick overview the account numbers that are valid on our network one these are actually 64 digits long so it has to be 64 characters long another thing is you need to make sure that you can convert it to bytes because this is a hexadecimal representation of a big integer so as long as you can convert it to a byte value then it's legit so you guys are going to see it's it's like uh six lines of code or maybe a little bit longer but whatever so the first thing is if the length in even though it may be a string already we just want to make sure that we convert it to a string so that this function doesn't tweak out so say if the value that you passed in for the account number after being converted to a string is not equal to 64 characters long basically we just want to go ahead and return false because it has to be 64 characters long for show so another thing that we're going to do like i said is we want to try to convert this from the hexadecimal value that it is to a byte value so okay this will ensure that they can't just pass in a 64 character long string or sentence or anything like that so in order to do this what you can do is bytes from hex and then you can just convert the account number and we don't need to store it in a variable or do anything because if this cannot convert then it's just going to tweak out so we can just say accept exception we really don't care why it can't convert because at this point we just want to say is it legit can it convert or not if not then we just want to return false now if it is 64 characters long and if you can convert it to a legitimate byte value then and only then we want to return true so there you go there is our function is valid account number so now let's go ahead and import that so from utils.the new boston import is valid account number and back in our register function let me zoom out just a little bit just a little bit we can now check if not is a valid account number for the account number that they passed in what we actually want to do right here is we want to send them back an error message and then we are going to want to return now actually let me leave a comment a send back error message right here now of course we can just do you know get the channel send whatever but what i want to do is i want to standardize the way that we send back messages to them and i want to use an embed because whenever you are using discord and embed really differentiates between that and user type commands and i also just always like sending back messages from the bot using embeds it makes your discord bot look a little bit more professional so let's go ahead and create that function now now again i know that we can just use it directly right here but what i want to do is actually standardize a few things namely the color of this and i don't want to give the flexibility to change the color right in here even though we may later on but for right now just to keep everything standard we're going to be using a separate function so in utils right here let's make another file for discord utils and we can say async def send embed now in here i'm actually been thrown in this star right here and this is going to take the context the title and the description of the embed that we're going to send back to the user and let me pump this back up i always forget and just leave a comment we will say something like send a simple bed with a title and a description now the reason i put this star right here is because whenever you have star it forces the rest of the arguments to be named in other words you what is this function going to be called send embed right like this so anyways um the point being is that instead of just and we didn't import it that's why we're getting these errors but instead of just passing in values right here it forces you to actually pass them in with equal sign and i just like it because it makes your code a little bit less error prone again for some simple functions like this it's probably not needed but it is helpful in some cases and you guys are going to be seeing what's going on right when we actually invoke this function but that's uh the background behind that so what we want to do is we just want to make a variable first of all called and we actually need to import discord the discord package so what we want to do is from discord dot embed and again i'm going to be going over this pretty quick because i already went over it in i think my last tutorial or a couple tutorials ago so the title is just going to be equal to the title that we passed in the description is equal to the description now for the color of all of these we are going to be using discord dot color go with the english spelling i believe that is and we're just going to be using red and this is going to standardize the color of all messages that we send from the bob and last but not least we can just do await context dot send and we're just going to send back the embed as the embed now let me clean this up and import it so let's say from utils.discord and well i actually forgot the name of that just made it like two seconds ago bro all right so yeah this is what i was saying right here where instead of just being able to pass in the context uh title description as you know three strings like this whatever and then whatever because whenever you do this it's it's hard to tell like wait what was i supposed to pass in first oh context though and then wait after that was a title or description it kind of just uh doesn't allow you to have that ambiguity i guess so let me show you guys what i like to do so whenever i have a function with multiple arguments i like to separate each of those out on a new line and i don't know just kind of ocd thing but for the context of course we're just going to be passing in the context for the title we can just say something like uh okay so this is going to be what we send back if their account number is invalid we'll just say something like invalid for right now and for the description we can say something like invalid account number and since this is an async function we also need to await this and then with that everything should be good to go so we can actually let me just go ahead and i always like to keep my code nice and clean all right so now we can actually go ahead and test this because we do have logic where they can basically pass in a valid account number and as of now it's just going to do nothing and then if they pass in an invalid one then it's just going to print out this little embed right here so let me copy this because we know this is the valid command and now if i go ahead and rerun this pop open my discord bob and this was from before when i was playing around with it but either way this is me trying to register a legit account number gonna press enter and nothing happened so that's good so now let me go ahead and try to register an invalid account number and i'll just say registered dog and then we go beautiful it just says invalid invalid account number there we go so that is our basic account number validation check so now let's move on all right so after we have a valid account number down here then what are we supposed to do well lucky for us we plan now everything ahead of time and we can reference our diagram to know exactly what logic we need to code next so we got a valid account number cool cool cool next question that we have to answer is does the account number that was passed in through this register command belong to an existing user now remember our existing users are going to be stored in so now we're going to have to get a connection to so how do we do that well we are going to be using pi so let me just go ahead and import that now so i that's actually from pi we are going to import the client because this is the essentially the python connection to and in order to use this you can make object called and set this equal to client and when you initialize this connection it takes in two pieces of information the first one is the host that you want to connect to and we're just running this on localhost and the second one is the port number so since we're going to need these let me go ahead and import those from settings and that is host and then the port number and you can just copy those and pass those in in this order so the next thing that we're going to need before let's see if i can pop open mongodb compass again is before we can access this users collection because that's what we're going to need to check we first need to get access to this database which is going to be the store of all of our collections and we named this discord hyphen db now in order to do that if you just make a variable called database you can set it equal to your connection and this is actually really easy in order to do because you pretty much just access them like python dictionaries so the name of our database we can just use this right here this constant mongodb name so make sure you import that first of all and then you can reference it right like that just so this shows up on your guys screen let me just go ahead and clean this up a bit alright there you go so anyways uh point being is that we needed to check something in mongodb namely does a user already exist for the existing account number and in order to do that we just got a connection to and then we reference the database now in order to reference the actual users collection since we're going to be using this a lot and i want to make sure that i don't overwrite it i'm going to be making a constant and using all caps for that and with the database so i can just copy that to access a certain collection again same thing you pretty much just treat it like a python dictionary where you can just pass in the collection name right like this i guess not pass it in it's not a function but there you go so now with this users collection what we can do is we can use it to see if we have a user with the matching account number so how do we do that well we can just say we'll store the results in a variable called user and then what we can do is that users collection which this is all connected to by this point we're just going to say we're going to use this find one function and in here you can basically type in what is the field you're looking for and then what is the value you're trying to match basically like a filter so we're going to say look at the account number key and if any value matches the account number we're trying to pass in then that means that user must exist so anyways what we're going to say is something like this if a user is found then we're just gonna wanna send back uh error message that says already registered since that account number is already taken and then from here we can just return because we don't wanna go through with any more logic once they get that error message we kind of want to break out of our code and of course instead of this comment right here we have our handy little function that can send embeds and there you go so we for this title can say something like already registered and then for the description let me actually make this a f string because we can say the account and then pass in the account number just as some you know additional feedback is already registered all right there you go scroll out all right so we're essentially going to validate the account number and if that's good we're going to look at the account number we're going to see if it already matches an already registered user if so then even though the account number was valid we want to say hey this account number already belongs to someone you can't register it because we don't want multiple discord users hooked into the same account number