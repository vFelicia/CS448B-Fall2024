what is going on guys it's Bucky and welcome to your 29th C++ tutorial and in this tutorial I'm going to be talking to you guys about something called scope I can't remember if I talked to you guys about scope already but I need to talk to you guys about it again anyways so anyways I'm gonna be talking to you guys about scope not the mouthwash a little bit different and also something called the unary scope resolution operator but I call it the colon colon because you know whenever we're typing it it's just a colon colon so let's go ahead and first let me build another function aside from main I'm just going to build another function called Bucky and all this is going to do is well we won't even have it do anything yet so right now we have two functions main and Bucky they're both good to go so sometimes people build variables inside a function like in X and set it equal to 10 well let's go ahead and make some interesting variables I'm tired of X so int tuna and set it equal to 69 now let's go ahead and build another variable called tuna and set it equal to 20 well I just want to demonstrate one thing some people would declare variables outside functions and some people declare variables inside functions now it's not just like some people have blue eyes some people have brand eyes there are people nonetheless and it doesn't really matter where I color they have well actually this does matter it's not a personal preference it actually does matter in your computer program where you declare or make your variable whenever you make your variable outside the functions then every single function can access this tuned variable so this function can use it Bucky can use it every function has access to this variable but for example say you only made your variable inside one function so you only made this variable inside main that means that whenever Bucky tried to use the variable tuna it's going to get an error message so check it out it says tuna what the heck is tuna because main functions are basically greedy whenever they create a variable they're the only ones with access to that variable so that's why people typically like to use variables in declare outside all of the functions because whenever you make a variable outside the function then every single function in your program is going to have access to that so say for example main wanted for an Altoona and book you wanted to print out to know well you can go ahead and run this program right now and check it out both programs are going to print out tuna just fine so the reason Bucky didn't print it out and you only saw tuna once was because we didn't call it anywhere but anyways that's what the scope of variables is basically where you create variables depends where you can use them so if you declare a variable in here only main can use it if you make one in here only buck you can use it if you declare outside both the functions can use it but now we come across a little bit of a conundrum and let's go ahead and delete Bucky for the rest of the store oh because he was just an example a dang fine one but a he was an example what if a user did something stupid like this they made a variable called tuna outside main so of course main has access to it but they made another variable called tuna that's inside main as well so main can access that one too so now when you try to print out tuna as a choice do I use this one or do I use this one let's go ahead and print this out and see what happens it chose 20 and why did it do that well computers pretty much take the most recent or most inner variable that they can they say all right here is a variable that I can use but why use that one when I have one right inside my function I'm going to assume that since this one was built right inside my function that that's the one you want me to use so these are called local variables and these are called global variables and when it has the choice it's always going to choose that local variable so you're saying all right let's go ahead and say that I'm building a function just like this and I want to call both of these variables tuna but I actually want to use this variable tuna out here well how do I tell my program that all right I know you have a local variable called tuna but I want you to use this one well in order to do you need to use something called the unary scope resolution operator in other words the tells your program all right you have two functions called tuna one of them is local and one of them is global whenever you have this colon before tuna that means use the global tuna in other words use the tuna outside your function so now whenever you run the program check it out it uses that global tuna instead of the local tuna and the reason people actually do this is because when they have variables with the same name of different data types that's when it comes in handy so for example if you had an INT tuna and the double tuna and you ran it it would use the double tuna which is 20 but if you use that colon colon which is called again the unary scope resolution operator if you're taking the test or something then it uses a 69 so I just don't want to show you guys if you're stupid and put in twice people typically write variables with the same name whenever they're using different data types so just wanted to point that out so what to take away from this tutorial whenever you create a variable inside a function you can only use that variable inside the function where you created it you can't use it inside any other function whenever you create a variable outside of function you can use it in any function in your entire program so if we had another function called Buckey and another one called Toni and another one called Jessica we can use this tuna in all of those functions so that's why you can decide whether it makes this outside or inside your function and the last thing I want you guys remember from this story whenever you have two variables with the same name one is local and one is global and you want to use the global variable in your function you need to use this dot dot or colon colon unary resolution operator whatever the heck you want to call it it's two colons before your variable and that tells C++ hey C++ I know I have variable in here but I want to use this one the global variable instead and if you remember these three rules you'll be good to go so that's all I have for you guys for this tutorial again basically a really easy tutorial just a little weird concept that you have to understand so thank you guys for watching don't forget to subscribe and I will see you guys in the next video