all right everybody welcome back to another video and in this one it's actually the first time I'm filming from the new apartment that I just moved into so also if my audio is a little bit weird I know the echo was weird in my old room but uh yeah hopefully this is better but if not let me know and I can fix things up for you but either way let's get back on track to uh remember what we were doing with the shop feature so I believe where we left off is on this functionality right here where the seller can come in and they can add a product and they could go ahead and just you know fill out all the fields hit submit and actually let's see kind of weird where we were at I'll pick the tnb logo I'll say tnb price 12. the quantity one to three activate cement okay so where we were at is uh let me just verify that this is working on the back end too okay so user submits the form and now it looks like we are logging this out and also actually yeah hitting the back end too and then after that I can actually pull up this logic uh this is tmbos okay so after that I can probably just do this too we are going to be navigated to this page all right so toolbarge create another product all right so upon submission of that product creation form we are logging out the values and that's what we saw right here and then after that we are just formatting all of our form data we have to um do some special stuff with form data because we can't just send Json up because it does include image data as well and then once we get that pretty much just uh syncing up our store and navigating to Shop sell products and that's the page that we're going to be working on today so basically we're going to be building out this product uh list page which is eventually going to look like the equivalent of this on tnb OS right here so with that said where to begin actually before I even hop into that I wanted to do this since I know things were kind of uh uh getting kind of messy so I created the stock shop shop roadmap for the front end and I'm just going to kind of outline what all we need to do so we'll split split it up between seller and buyer so seller and buyer all right so for um actually let's just do sell and buy so from the seller's point of view what we need to do is build out the products page and then actually maybe we can split up this way yeah so I'm just going to split it up into front end because I I'm gonna kind of write everything out in the order that we are going to actually do them so first we're going to be building out the seller's product page and then after that what I want to do is I want to actually build out the product catalog page because that's like the next thing naturally in the flow of things so buyer product catalog page and then after this what we can do is we could build out yeah this is kind of a natural progression as well so the buyer let's do the product detail page next yeah let's do that so okay so we already allowed the seller to create products now after that we're going to allow them to view their products and then the buyer to view the products the buyer to click into the detail of one of those pages and then what we can do let's do the addresses next and then we'll have ADD cart functionality Because by the time I get to this cart page I want everything kind of ready to go so I'll say my address all right so my addresses uh then the buyer crate but then we'll build out this page and then the functionality to add and edit addresses and then from there what we can do is have this add cart button actually from there yeah add to cart button and then we'll call this the checkout page all right buyer checkout page and then yeah place order functionality and that will be part of the checkout page and in order to buy your orders and seller orders and that should take us out so buyer all right so this is all we need to do before we have our very own Shop app kind of Pumped okay so in this video hopefully we can knock out the uh seller product page and then well maybe if we are feeling very ambitious the buyer product catalog page too but really I don't think this all should take more than uh a week or so a week and a half I'm guessing in fact if we can get this all built out in a week and a half I will uh I'll be very very happy and it is July 25th now so let's say by the end of the month if we can get this shop app taken care of good to go uh publish live then yeah I'll set a deadline for myself all right so in that note now that I'm under the clock let's go ahead and get ready to build up the seller product page so this is what we're going for and let me just actually inspect this and see what we got going on right here okay so this layout looks like I did a grid and do I want the same thing so main image some details I do like having the status here and then yeah these buttons are pretty much exactly what I want as well so let me see if I can find out where this code is in tnbos View okay so now I'm just kind of figuring out what I can steal from tnb OS um products all right so what I'm doing here is rendering the main heading and I'm doing that same thing all right so on our website we are rendering the main heading with a button on the right so rendering the main heading with button on the right and then in tnbos they're just rendering content and the content is first going to check if you have um any products to display if so you're going to render those products if not just some empty text that says no products to display and the empty text is also its own component so let's actually do the empty State now okay so empty text is just gonna be Center align text so I don't think we have a component for that so for okay this is interesting so components yeah let's just make it empty let's just make a standard empty text component for the entire app all right so empty text paste that into my components and then let's see what we need to do so from Styles what font color actually we don't even have font color do we okay so let's not even worry about the colors for this right now you can just keep it the default color again mainly going to work on my styling later just getting the base components out there and then from the components what we're doing is we're just passing in anything to display which is usually just going to be a bit of text and it's just going to display it italicized okay and with that we'll go with basically the same design pattern we used here where we first well first of all we need to import this empty text component empty tags from components empty text and then in our cell products we can have uh render content logic and eventually we're going to be pulling in the cell products from the API but for now what I can do is I can just make an empty list to test things out so um actually let's just do this off the bat so with surrender content is just going to do is display MD text and we'll add some smarter logic into that later on but for right now just to make sure that our empty state is looking nice go ahead and okay so that looks alright no products to display however I am noticing there's a little bit too much padding and that is because in this top section I have padding as well as this okay so I don't think is this coming from the page actually where's this padding come from well let's find out so on my cell products page I don't have any so it must be coming from the section heading yeah padding 16 and I don't want that I don't think I want any padding on my section heading at all because yeah okay so what am I going to do is this no padding on the section heading and instead what I want is padding on my page right here all right that works actually all right so now there's padding around my entire content my entire page no padding on the section heading and then my empty state is going to have its own padding so that means whenever we build out the product section also want to implement padding there and I think that looks alright and yeah I did see why I changed the color of this let me see if yeah might as well change the color of that now all right so this is a little subtle gray color I'm just trying to see if there's anywhere else where I use that subtle gray color okay all right so this is color secondary the color is secondary and that would be empty text colors colors secondary all right there we go no products to display if you don't have any products looking good so now let's go ahead and well first of all let's see if we have any products in Redux okay so these are products that I created so after I created them with this form what happened is um we hit the back end to actually create them on the back end as well and then when the response data came back as long as it was a successful 200 or whatever the status code is for created 201 or whatever then uh we stored those in Redux so now what I'm first gonna do is I am going to build a selector to pretty much just get all the products that are in the Redux store in um display them out here now another thing that I want to do after that is I'm going to be fetching the products from the API just in case for some reason the products aren't in the store right here maybe the user logged out and they log it in for uh for the first time then whenever they go to this page or maybe they just refresh it then we could hit the back end pull those products back in yeah yeah all right so let's get to work all right so the first thing is I'm going to need a selector to get those products out of my state so right now in my store I have products in my store but I don't have any way of pulling them out so let's just copy one of these um an OP all right so I have products in there and my selector is just going to be called git products all right so now using a selector I can pull those out just find implement it all right so for m1p so for lectors state I'm doing get products and by the way I am going to have to put a filter on here since um eventually you're gonna have a lot of different products in your store kind of like the back end has a lot of different products in the database they're going to be from a bunch of different buyers in on this page I only want to display your products the ones that you're selling so you're going to have to add some filtering for that but we'll get there eventually okay so we're getting the products out and then we're gonna need to use selector from reactor Redux and then we'll just copy this pattern so element NLP all right so now let's just log these out and make sure we're pulling the data correctly all right so these are the products that we have in our store and now what I want to do is actually let's take a look at 10 b os and figure out what they're doing they'll probably filter them okay yeah we're basically doing this exact same thing all right so the products section is just going to be a grid and then there are going to be four columns in it so we can oops go with that same logic so if we if we don't have any products then it displays an empty state if we do then we're going to render them in this grid right here with a 12 pixel Gap and to do that we are going to be using this as well so cell products this is interesting too so okay I'm using a hook here to figure out those cell products but I'm wondering if I need a hook okay so the reason I'm using a hook is because I'm using it on the page that we're building now and also anywhere else no yeah sorry I don't think I need a hook actually I think that I can just yeah memory memoize this okay so first of all let's go ahead and determine how we filter our cell products so each product is going to come with a seller and the seller is going to have an ID property and what we need to match this is against r ID property of self and I have a feeling we may want to create a hook for this use self ID or is that just no no that's a little bit unnecessary but either way let's just go ahead and get that logic so self all right so we're going to be using self Elemental p self and then we are also going to say uh use memo it's all say const use Memo from react and then what this is wait a minute I'm typing in the wrong app all right so we're going to be using Memo from react in I'm wondering if we should even put it in render products filter hmm I use memo and then what we're doing is just filtering out this all right so we are going to say that for first of all all the values of products since they're keyed by ID we're going to pull off the seller property and if seller dot ID is equal to self ID and we are gonna want those ones so basically the seller's products and now let me just log this out to make sure we get all the right ones and it should be all of them right now and there we go okay so just uh one more time the seller's ID needs to match self ID and then those are the products that we want and then we can update this render content logic right here to say okay so we'll say if products filtered products length then return render products we didn't have that written yet so we can just say no for now otherwise return empty text okay okay and another thing that I'm gonna have to do is I'm going to order these products by actually don't know what the best way to order this is so whenever you're on this screen maybe last modified that probably would make sense it's kind of weird since I only have one now but eventually there's this page is going to be full of products that you're selling how do you want them ordered alphabetically latest modified actually let's just go ahead and build out the logic now and then um intuitively I'm probably gonna you know kind of feel what one is working best so let's do that okay so hopping back in tnbos what we need to do now is build out this product section so let's start with the most atomic element which is the product itself so for the product what we have is a thumbnail product list details which is Zone component activation badge and action links interesting okay so let's do this so we're going to make a product component and we're going to pass in a product so let's just go ahead and get started with that all right and then this product component is nested inside the cell products page so new directory product close out U for now and then this is going to have a Styles file and then a new opponent and this is going to be renamed to product okay and then let me just make sure we're passing in the right type of data so we are going to be from types passing in a product op QRS okay and then for this all right so what this product is going to do is it is going to take a product and it's going to be a type type product all right so this product component so this product component is going to be passed in a product and that product is of type product but because our component's name products I'm just renaming that import as T product and now we can work with the product in here actually before I even do that let's well let's do it this way so this is eventually going to have four columns so I don't even need this because I don't need that class name however what are we displaying here a thumbnail in here I made a separate thumbnail component which is interesting is going to come in handy so components wait do I have a thumbnail component in my nope not yet so let's steal that as well all right so before you do let's just go ahead and take a look at what this is it looks like what I'm doing is this thumbnail component basically allows you to pass in any kind of component with optional click Handler and it's just going to display as a square so if you have a tall image like a picture of a building or something or a wide image like I don't know a picture of the Grand Canyon even though those aren't very good examples if you're selling products unless you're selling a building in the Grand Canyon then they may be very good images but either way what it does is it just creates a square image or a square aspect ratio without stretching or you know shrinking the image or anything so anyways we'll go ahead and test that out later but for now we need that thumbnail so I'm just going to copy it over to my app and then clean it up to formats to my existing logic all right so types types all right let me make sure I got this yep yep okay so this is going to take a an optional on click Handler and that's just going to be a generic function that returns void and then the thumbnail URL I'm just going to render the image inside a container so now what I can do is since we need this thumbnail in my products component and the product Styles I'm just going to import that thumbnail and then we can style it right here so yeah with uh styled components what you can do is whenever you have a component like this thumbnail right here um so this is just going to be a regular component that has its own default styling but let's say that you want to override The Styling then what you can do is you can just import it and instead of making style component like style div like you do right here you can just do styled and then uh wrap your um component right here so basically like a mini high order component and then you just overwrite any styling and it would be basically the same as applying it right to your component right here so pretty cool technique and on that note let me actually go ahead and use this so looks like I'm pulling off all right so I'm pulling off some properties from product right here but I actually just want to see where the thumbnail URL is so okay it's on the image property so product.image equals thumbnail URL so let's just do this first we cannot make our code more readable in a bit but for now I just want to have something to render out on the screen okay so on click uh we won't have any click Handler for now and thumbnail URL is just the product dot image now hopefully we got something displaying on the screen oh wait a minute we didn't even uh render this product yet so here we're going to be filling out more details but this is essentially going to be a row for um this product right here however we didn't even import it into our main component yet so of course you probably need to do that let me just see what I can steal from here so import product from product and then we will say render products so what we are going to do is we are going to say if you have filtered products basically then you're just going to render the products and whenever you render the products take each of your filtered products and then map them to this where the product is going to be passed in and the key is just going to be product ID and this has an implicit any type because I wrote that incorrectly okay so if you have products then go ahead and map them to a product component where the key is the product ID and the product being passed in this product and then for each of these and I'm probably going to add my ordering logic right here but for each of these render them inside the products um container which is just going to render them as a grid with four columns that we only have one column for right now all right so those are my four products and because we didn't render the rest of those yet um you actually just let's just do this so all that's looking good for now and now let me just kind of um render the framework of this product some more so this product is gonna have in its second column product list details which is this right here and then the badge and then the elements so let me say this stick everything in a div right now to get my structure so product list details and I'll say the activation status and then after this will be my actions so now it's going to look a little bit closer to that and from here we can just really start building everything out piece by piece however one thing I'm noticing already is the padding here since this grid it does have 12 pixels but I still need yeah let me just put a padding top and bottom of 12 pixels on this real quick okay and let me do that all right so for cell products um the products gonna have a padding of a 12 pixel zero so 12 pixels top bottom zero pixels left and right and that looks a little bit better okay so now instead of product list details let's first figure out why I made that a component instead of just styling it right straight up all right and that is because oh okay so anyways what I was wondering is why I made this what I'm highlighting a component instead of kind of just styling everything right here and it is because I use that same component right here on the orders page too and I'm calling it product list details so let's just stick with the same all right so let's go to U Mr protocols details and this is a container interesting okay so this is a container with a name description and then price Mini and right now we only have a one price allowed per product so that works as well now let's go ahead and take a look at Price Mini Network image Network image okay so kind of just a like reverse engineering this component and see what I have to pass in okay so this is going to need this price Mini in other words it's going to need this component which I also separated out into another component so let's go ahead and create that first so for the front end we're gonna have price Mini and price mini I may want to rename this right here networked image yeah I'm gonna want to rename this core image or something like that actually let's see on the back end so cores models you got a core so I'll say core logo inside a network image this can be core logo so set a network image we got core logo the alt just a core logo and all right so from types is where we get this use Network image QRS Okay so now we're going to be using those product details so let's first of all just figure out a couple things okay so on the product each product is going to have a price amount and then the product.price amount is what we're going to convert into that amount right there and then here what we are doing is we are saying to get the image from the product yeah that's going to be an interesting one okay so the product is going to have uh ID of a core and price core and this is going to be basically the ID of one of these chords that has a logo and that's called price core okay so we can make a hook use Network display image yeah let's rename that hook as well and what we are basically going to do is we are going to actually use core let's say this use core logo and we're going to be passing in a core ID and we're going to be getting back a string of an image so now we need to create a hook use core logo and it's going to work the same as this okay all right so we can just copy this for now and change a few things actually let me go ahead and make a new hook uh called use core logo first new hook and we're gonna say it is is just a type share file use core logo it's going to be similar to this except instead of using network display image we're going to call you use core logo and then for these assets I don't think I have an asset for the default one unknown Network so assets I need we have one thing in there right now all right so this would be shop assets or is it in my main one okay so this question mark can be for when I don't have any core logo let's say we had a core but it got deleted or something it's kind of just a default state and I'm going to name this asset I'm gonna actually name it unknown core unknown core.ping and this is unknown core this is going to be core ID okay and gets cores from selectors they so selector State get course okay okay now we got a little something going on here networks nope course and then this is going to be core network is going to be renamed core and this is going to be core logo if you got one and I don't like how that's all bunched up so maybe I do yeah it's good this way okay either way what we're doing is we're saying we now have an asset of this image right here that's called unknown core now the goal of this Hook is to actually get the core logo and for this what we're going to be doing is we are going to be passing in a price core which I believe a number yeah so from the product we're going to be passing in the ID of a core which is going to be a number and then from our course that we have in our Redux store we're first going to say I don't think we need this logic either since it's always going to be a number okay so basically what we will do is we'll pass in an ID of a core and hopefully the majority of the time it can just use that ID to look up the core and once it finds it it can pluck off the logo from it and return that however if we don't have a core then this is going to be undefined so it's just going to return this logo instead which is a question mark logo so all of this is in the hook use core logo and then in our hook index logo actually use available well of course all right so use core logo hook imported it into our main and then from import that from hooks okay so now our price mini is using this core logo from the product core that we pass in products price score and then with that it's just going to render the core logo on the left and the price amount on the right something similar to this now let me just check my styling again real quick kind of just working from the inside out Elemental op QR all right that looks good that looks good that looks good okay so now what we can do is we can build out this product list the details component now that we have that price mini working and for that let me just figure out where it was okay so this product list details component I believe interesting as well okay so let's start patching this together too and I'll rename the Shop product list details all right so for component let's make a new component new directory and I'll say shop product list details and in here we're going to be using this Styles file is going to say okay so here I created a mixing for a list name and a list item description and let me go ahead and actually just see QRS if I actually want those mixins again okay I may actually want to use these mixins again mix in list item description mix and list item name because I'm wondering if yeah it's kind of tricky because tnbos was kind of designed where each app that was built it's it's like uh I don't know like a separate app that you would make on your desktop like everyone was just had its uh completely Unique Style however what I'm doing here is I'm actually merging everything into the same well not the prettiest ey right now but I'm merging like all these apps into the same website and they're going to have consistent styling now so in my head I'm kind of just going through and figuring out what needs to be separate to the shot feature and what can be reused as a generic component but I'm thinking that I probably want to reuse these and that way if any other part of our app needs yeah a list item description or List item name follow the same format okay so let me go ahead and make those mixins here so I'll say styles mixins input style to burst Style this is interesting too so apparently I had different name and Convention we're here I was prepending all my mixins with the word mixin but I don't think I want to do that should I JK yeah that's not okay so for the list item description and the list item name all right so for this it's a default font so we don't need any special thing for that and for the list it is in the description this was a color secondary so now actually need to go in my Styles main file just import antly so list item description list them name by jkl all right code optimize Imports I'm sure these are sorted okay so I now have those two mixings that and I'll keep this as a standard um across our entire app and then I'll say list item description list item name and this is a list item description a list item name hey looking good and what is this is clickable mixin okay all right so this is cool actually all right so product list details product list details probably what's details where you at all right now let me just copy this refactor rename product list details you are being renamed to Shop product list details and we need to clean up these types as well pdress until the strings and I don't have truncate interesting so truncate to where are you coming from my strings util strings fascinating didn't even have truncate okay so this is my string qrst all right so this trunky function all it does is it takes um a string and then a max length for it basically and then if it exceeds that max length it just slices it and then add dots to the end that way if people write like a long description you aren't displaying it all here you only need display like two lines or so and then add some dots after it but anyways uh let's see what we got going on here now okay so we created an opponent Shop product list details I'm gonna P Q R S T U okay okay so what we're doing here is we're passing in a product and it is just going to render the name of that product with optional on click Handler for example if you want to go to a um if you wanted to become a link basically and then for the description we are truncating that at 200 characters Max and then under that we're rendering that price mini component and with this we pass in a product and that price mini components was styled to have an additional margin top of 10. that looks all good then all this is doing it's getting the logo by passing in the ID of the product to use core logo and then rendering the amount on the right side of that okay so Shop product list details is what we want here and we're going to be replacing of that so let's go ahead and figure out what we did in tnbos just to make sure we aren't missing any logic so product list details sell products right here okay so we are going to have a click Handler for it and this is gonna be the same as handling the edit okay so basically in tmbos I had it whenever you click the image or whenever you click the title right here it took you to the edit page same thing as clicking this and we'll Implement that later on but for now we'll just have a no click at all okay so in this component shop product list details whoa what we need is a product and that is just going to be the product and then for on click yeah we'll just pass in this empty Handler for now and that proper was on click wasn't it yep I'm quick okay so now hopefully we should be getting this right here yeah look at these descriptions okay so for this birthday cake which looks like a desk right now actually let's do this let's get some realistic product out in here okay let's start uh selling some stuff all right and I don't delete that because this is another issue we gotta sync up the um back end whenever we delete products from it but anyways what picture do I have that I can sell so I have that wooden spoon still no no I don't so let's sell this desk so say wooden desk and the description is uh big wooden desk gotta work on my marketing skills tnb price amount 800 and then the quantity only got one activate that right away so and okay so right here wooden desk first of all I was expecting that to appear at the top but that's another issue we have to fix um but yeah we have a realistic product data in here what I'll do is whenever this page loads I'll make a request to the back end to get all the products and just uh set those products in the Redux store and since I'm kind of over overriding everything at that point um that's gonna wipe out these three products right here that no longer exist in the back end since the back end we only have this wooden desk right now but anyways little by little work on that um for now let's just go ahead and continue working on the UI yeah none of these click handlers work right now so what I'll do now is just build out this activation status component in other words this quick badge right here so let's go ahead and that's going to be in my product right here all right so what did I do with the utmbos so I built this activation badge and all this does is it takes activation status sure sure these are my two activation status active or draft shop products activation status active draft all right so most of this can just be copied and then what else am I doing wrapping it in okay so now I'm just wrapping it in a div since apparently I get some strange Behavior if I just render it out straight up okay so first things first what we're going to need is an activation badge where we pass in an activation status however what I'm thinking is instead of activation badge if we want to name it something else so maybe shop activation badge and that is because this logic it only applies to the shop section now why don't we do that or maybe product activation badge yeah I like that name oh yeah okay so this is going to be rename product activation badge to a refactory name let me just go ahead and create a new component and we'll name it product activation badge and then Styles pretty much can be the same just need to update for my new convention so import colors and types and it's actually from enums now information status active and direct okay so for the active we have it is green which is good for now may need to change it later but and for this we can use dark gray all right so if it's active it's going to be green if it's draft we'll just say dark gray 100 and we'll kind of need to see how these colors look but this is the logic for now um that looks fine that looks fine now I need the actual component this right here all right so for you miss their components you are actually this is going to come from types and then the activation status it's going to come from enums and I think that's good so we're going to be passing an activation status and then that takes care of that yeah yeah yeah yeah yeah yeah yeah oh okay let's go okay so now yeah oh I forgot to rename it actually so this is going to be called product activation badge and this is okay so this is my product activation actually it's activation status right product activation status or activation badge the component is a badge but it resembles the activation status so the component is activation badge and yeah this makes sense so we have to pass in the activation status so no it's kind of tricky naming but makes sense as well so import this component p product activation badge product activation badge and then what we want to do is we're eventually going to be passing in something like this so product activation badge you know what prop does it take the activation status and activation status is just the products activation status just like that and then I got a feeling we're going to have some weird styling and that of course is why I put it in that div so just like the nbos what we can do since I like to have my components styled all right and what was that element qrst oh wait motivation activation status yeah actually that works yeah let's stick with that all right so I'll wrap this in a div so it doesn't stretch and there we go so that looks all right however now I just want to tweak the colors a little bit since they're uh it's green is I don't know I'm not really digging it so for this let's try green let's try 400. might be a little bit too green but we'll see not bad not bad at all and then for this draft is this good yeah maybe darken that a little bit see how we are looking just a tiny bit just a little nudge and let's go back to 100 that was a mistake it was a huge mistake okay so now let's see how we're looking beautiful beautiful beautiful and also beautiful one other thing I may want to do is Bump this up since this one's kind of small right here but I think that we are good for now so add back the products got the wrong products but that's fine an issue for another day well actually today but another another time for now just want to get everything out there and then like putting the foundation into the house and then we're gonna go back in paint everything uh make everything look real nice and Purity I'm going to pick yours there we go okay so next up let's just go ahead and finish out the styling of this page by writing our actions right here and they look like simple links but for some reason in tnb OS I styled them differently okay so what I'm doing here is I am saying okay so we have three different action links in edit delete and then deactivate and then when you click deactivate it's gonna of course deactivate it and then this is going to change to an activate so this last one is going to require a little bit of logic depending on the state of your product so yeah I'll just go ahead and build out this logic right now so uh let's start with render activation Action Link actually should we let's go ahead and take a look at this Action Link component so this is an action link which pretty much standardizes the link okay and I just want to see why I made this a separate component as well okay so we use it yeah okay so we are actually going to be using this across many different parts of the app as well so let's go ahead and just this Action Link is now officially part of our component Library okay so for the Action Link it's just a link but it's going to pull from our styles and it's going to use this blue color 200 300 I got a feeling I'm gonna need a darker darken this as well but for right now we'll just roll with it all right so for this Action Link what we are going to do whenever we use it is we're just going to be passing in the children which is just going to be a string in other words the text of the link and then we're going to be passing in a click Handler not an optional one uh they're pretty much just all gonna have one and then when we hover over it's going to change color have a pointer and an underline beautiful nice and simple component all right so with that said let's go ahead and render these out so Action Link Action Link and then what we can do here is we can create this actions div wrapper okay and all we're saying is here's this is going to be the font size and do we even need that because what I'm thinking is okay so these don't have a font size I'm wondering what my default font size is as well but either way we can do that later all right so let's just get this uh edit and delete one so we can see the styling of it so instead of a div this is in s actions and this is pretty much just uh styling these right here all right so first let's see what we got going on so yep those are definitely too dark and also I did want to see all right so yeah my default font size is 14 and I did want these to be smaller so these are 13 those are looking good however let's darken this up just a bit to paste no wrap and all right so let's let's actually go 400 and 500 400 500 and how are you looking okay much better so edit delete nothing happens and then what I'm also gonna do is render out this other action links so render activation Action Link all right and that is going to go in here and on click you aren't going to do anything either but basically we are saying that all right so for the products activation status first of all let's go ahead and get this from enums all right so say if activation status equals draft then we're going to want to render the text activate because we the action would be turning it from draft to active mode now if it's not draft then it must be active then we're going to want to have the text to deactivate it so hopefully we have that logic right now okay so in this case the product is active so you can deactivate it and when it's draft you can activate it and that is looking good so even though none of this logic is working since we just have uh pretty much these no Ops for all the on click handlers what we can do next is start working on all of that but anyways I think we got the uh yeah the basic layout is looking pretty good of course these products are deleted and those deletions aren't reflected on the front end yet and we got a lot of uh logic to build in but for now let's look in all right yeah looking good okay so I'm actually gonna go to the bathroom and uh yeah I had a little bit too much coffee and then I will be back in a sec so see see you uh soon alrighty Jack we are back and now that we have the basic layout taken care of let's go ahead and start working on oh yeah that's nice so let's go ahead and start working on the actual like uh functionality for this so the first thing that I want to do is actually let's go ahead and just make the logic for um fetching these products since I have a feeling that whenever I log out log back in again go to shop sell products okay so right now this should be displaying the one product that I have on my back end and also what I'm gonna do is I'm going to log in from the perspective of Amy as well and I'm just going to create one product from her so first of all on this logo needs to change this is just hardcoded in my uh profile picture from GitHub but eventually we're going to have a profile section to allow anyone to update their own logo point is for now I just want to have uh okay let me just have this bacon for sale nice and juicy bacon could be selling for VTX 300 and a quantity of 10 bacon packages Amy's bacon Factory okay so now I just wanted to have two products on the back end one that Bucky was selling and one that Amy was selling and I'm gonna go ahead and actually log out and log in as Bucky again and I just want to have that because whenever we're building out the logic only one product should be displaying here okay so now to do that I need to go ahead and write on my product endpoints so this is going to be oh wait I already have these that's awesome all right so get products and that means I have my dispatchers too and get the products okay so oh I have a great product but not get products yet so first let's figure out where I'm going to be using these from so whenever I go to this page I want to make a request to get my products so let's of course see what team B has first of all probably actually that logic probably isn't going to apply all right so this is going to be an effect if I can just steal E from one of these yeah let's do this all right so what we're going to need is a few things first of all use effects and dispatch dispatch dispatch okay mmhmm oh I already have that as well cool cool cool so I'm just stealing the same kind of design pattern from elsewhere and then to need to so first let me get this air toasty utility function to you error fetching um products so what I'm gonna do get product selector state okay from dispatcher products so I want to import get products as get products from my dispatchers dispatchers products and now here what I'm going to do is whenever this page loads I'm gonna call that dispatch git products and what this is going to do is it is going to hit my endpoint hit my back end and then with the response status set those as products and then I'll render these out right there and if you get error then you just display the error and say error fetching products and later on what I'm going to be doing is adding in like a filters on the back end and then query params on the front end because right now I actually show you hopefully this is working okay so you know what we did right here is we're just fetching all the products basically right here now on this page to make that a little bit more optimized even though we are pulling down two products even though things are working right now in other words we're pulling down a list of both products my product which is this desk in Amy's product which is that bacon um on the front end what we're doing is we're filtering them out and where we are doing that is right here by saying filter project products is just equal to the ones that you are selling basically um however what I want to do is right here add it so I'm only fetching mine on the back end to make this process a little bit more efficient but for right now this should be working fine and yeah okay so the next thing I actually want to do is build out this edit logic or should I build up the delete and deactivate logic now so the edit logic is going to take a long time the deletion in the activation not so much so let's do actually maybe we just do edit first let's tackle it I'm ready I'm ready to tackle this okay so now let's dig into well first of all anything else that's needed here for the time being I don't think so so let's dig into each product first let's build out the edit logic okay here what I did is I put handle edit click and then what we need to do set active cell product ID that's interesting page fascinating fascinating because I remembered when so what we're going to do for this edit logic is remember we have in our manager this function right here it's reducer function where we could update any of these and we also said that what we want to do is we want to set the active product in this manager this is equal to null or yeah an actual product instance so what we're going to do for the edit logic is set this active product to the product that we want to edit and then navigate them to this page as well so I'm going to be sealing this and I'm going to say handle edit click steal this and I'll get a click in order to click and then let me get all of these so dispatch navigate dispatch navigate and then update manager where are you coming from setup wait a minute yeah I'll take manager from store manager okay so whenever you click edit and that includes either by clicking on the thumbnail you can edit the image by clicking on the name of the Shop product details or whatever this component is called and that's going to put your on click Handler on the name in other words the product name and of course the last place is if you just click the edit button or the edit Action Link on the right then it's going to call this handle edit click and what this handle edit click is going to do is it's going to set the active product to the product of the row you're being clicked on and then navigate you to this page okay so all that should work so now what I can do is even though we didn't build out the form for the edit page yet I can check my Redux and see where is my manager okay so if I click this image it should set it and take us to this page which is good also if I click this name same thing and also edit same thing okay so what is going to happen now is these fields are going to Auto populate with whatever the active product was right in here so let's go ahead and yeah I might as well do that now so I already have our active product being populated let's close some of this out and okay so right now the way we built out this form already is we pretty much always assume that it's um well we basically didn't build any edit logic functionality yet it's just always like going to create a new product by default but now we want to say that if we have an active product which we don't right now but we can get there by clicking like edit right here which is going to set that active product if we have an active product then go ahead and populate these fields so in order to do that let's go ahead and sell product details yeah it's this one right yeah so here I'm using a hook to get the active cell product and is that what I want to do in this case as well I believe so he actually I don't even think hmm so I can use a hook to get it or this is interesting too because in tnbos I was only storing the idea of it and now I'm storing the entire cell product now how do I want to do this so let's do this hmm so it's in my manager um that'll clean that up a little bit but is there anywhere else I'm using this all right so let's keep this simple for now okay so I'll say I'll get it from the manager all right so from the manager which is in select your state what I can do is I can look for an active product let me show you want this here all right so this active product can be equal to a product or null so now what I can basically do is this okay so for the this is interesting too so the initial values of activation status is a Boolean and this is a string so I can do this so if there is an active product then use the activation status for the activation status otherwise use an empty string as the initial value so basically if you're editing then use the value that you're editing otherwise just use an empty string and it's going to be the same pattern for all of these image name price mail yada yada yada okay description name pretty sure there's an easier way to do this but we'll figure out later now this is interesting as well blob I'm talking about blog so active product why is it blob okay so price amount is this because all right the argument of type string or number is not assignable it's a string but number is not assignable so it says values the price amount this is interesting so it has no problem here because the initial values is going to be a string okay oh okay I see what's going on here okay so here we are taking the initial values in whenever you're creating a new product all of them are just an empty string however if you have values on an existing product that you're editing then it's just a kind of not working so nicely because these values are coming from these form values which are the type of these initial values and right here it's saying that basically it's getting a little bit confused because this is a number the price amount from the product and then this is a string so can we just put two string here so these are strings but they're just strings for the form and these get converted later on okay so this is good so if I want to add a new one you see that Tau active product is now null and when active product in my manager is null then all of these form fields are going to be empty and then whenever I want to edit one then active product is going to be a product so it's going to populate with all of these right here now the question is where did my file Chooser go because here it works but whenever I'm editing it seems to have disappeared so let's figure that out okay so the logic says if if there is no values.image and image equals activeproduct.image or empty string that's interesting so oh wait a minute this is um okay so let's actually open up another project that we're borrowing this from and let's see so render preview close out of tmbos for now all right so here we are saying that all right if you don't have any value for image then handle the file selector and then for render preview this should be rendering so image source preview is equal to the set field value function where where's preview coming from if preview preview is coming from State and set preview oh okay okay okay okay okay okay so first thing we need in this is preview state which we already got however that piece we seem to be missing is this space where after we're setting the form values type we have a use effects statement and what this is doing if we can import use effect okay fix this initial values really okay it says wrap this and use memo and can you do it for me or do I need to do it all right so initial values is just going to be yeah something like this like this however instead of this you get passed in this boom and your dependencies are going to be this they pretty that up all right so let me just make sure my imports are good all right so here we're saying that the initial values are going to either be basically a bunch of empty strings or a bunch of product details now if initial values.image does not exist then basically don't do anything it just means you're trying to create a new product no need to do anything special however if there is an initial values image then go ahead and set the preview to that image basically and this will give us our default Logic for displaying that thumbnail okay there we go so now from the top I'm going to my cell products I'm going to add a product there is no image in there great now whenever I edit a product I already get this default image which is exactly what I want and I close out of that and I can select a new one if needed select Steve Jobs be good to go all right cool so now what's going on here those are activated activation status is it prop on Dom element okay so let's fix this little unrelated warning and from there I believe where is it coming from here yeah I believe so so here we're using activation status but it's not a valid Dom element because we're sticking on a div right here so what we're going to need to do is just prepend it with a dollar sign one two three four yeah basically using a style components anytime you use um pretty much like a custom property that you want to pass down to your styling portion of the style components and it's not like uh existing domp property then you just need to prepend it with a dollar sign so hopefully if I refresh should fix that always nice to keep your console nice and clear but now getting back on track let me just go ahead and not gonna need this anymore okay so what we are gonna need to do now is we need to update our submit logic because even though we have this logic working correctly where for adding a new one then there you go or if you're editing it then you know the form is prepopulated um whenever you submit this data you're either making a poster request or a patch request depending on if you're trying to create a product or edit a new one so on that note let's go ahead and figure out what we did here okay so this is my uh cooking app and what I said that if you have an active recipe already in other words you're in edit mode then you just want to make an update request otherwise if you don't have one means you're creating it for the first time you just set this equal to create and then let response data or yeah and then here I'm navigating to okay so I don't think I need any of this because here what I'm doing doing is I'm storing the response data of either the updated response or the creation response and then using that response that ID to navigate them to the recipes page however in this I'm just navigating to their cell products so in that case what I can do is this actually you can keep this pretty easy okay so I'll say if you have an active product so if you have an active product then what you want to do I'm gonna update this in a bit but if you have an active product then you want to make an edit product request otherwise make a great product request so let me just go in here and say if you have active product oops whoa finger in the Run Spot okay so if you have an active product where you're on this edit page then you're just going to go ahead and want to update that product and also why am I not expected two arguments for update oh that's because I need the ID as well so if you have an active product then pass in the product ID and then the request data so activeproduct.id and then the request data otherwise you are creating it and another thing that I just want to check yeah actually have this logic right here if the initial value for image is different than that come on and also I can update my so a couple of different things here so when you create a product you want to say product created otherwise you can see product updated and then for this error then what we're going to say is that if you had an active product then you are updating otherwise you're creating it so if there's an error message when you're updating it's going to say error updating product authorize error when you're creating is error creating product and then no matter what it navigates you back this should be good okay so from the top I'm going to add a new product and what is this going to be let's um what is this a dresser dresser wood dresser uh 12 and I'll just have one of them and I will not activate this dresser so now let me just check my network request submit okay so the ordering is still a little bit weird but there you go and now yeah we didn't build this activation logic however if I go and edit this I should be able to say change the name to big dresser one dresser and let me update this to tnb okay a dresser there you go let me actually change the image of this to bacon actually I don't want to do bacon because Amy's selling bacon in fact let me just change it to uh Steve Jobs so this is I'll say Steve Jobs poster updated description and for a price I'll do 500 now and the quantity five activate submit actually that was interesting was it that okay let me put this in draft mode I think I noticed something okay this is in draft mode and whenever I edit it it automatically populates the actives which is not what we wanted because we were in draft mode so why is that happening okay so the activation status is now equal to draft however in the check box what we are saying type check box label how does it know if it's checked or not name yeah how can we see if you are checked or not well first of all let me see if I deactivate this oh look at that that's interesting so I'm clicking this now and no matter what it's just always checked fascinating now whenever I sell I can check or uncheck it so what the heck is going on with this okay so when I'm editing it that's another interesting thing I noticed you see how this is um deactivated but then I click this nothing changes with the checkbox and then we get that funky Behavior all right so this is with a recipe it's pop open tnbos since that's what we got the check box at checkbox at label name the value you feel go to all right it's only one thing to do and that's as our friend Chad gbt what's up hmm name label okay so the issue is how can we phrase this um when editing a product okay when editing a product the activate product checkbox is always checked and why I have a bug when editing and Croc the activation checkbox is always checked now let's give it the info that you need so first you're probably going to need the product type and actually let's do this so the enum product you need the activation status and then of course you are going to need a component components and then what else are you going to need the checkbox component for sure and what's this doing nothing important all right chat GPT help me out issues that you're not setting the initial value to Boolean value oh okay so okay yes yes oh all right so yeah I see what's going on here so the form value of the checkbox is just the true uh excuse me a true or false so um whenever you add a new one this is false this is true false and true now our back end it takes active in draft so what we're doing right here is right before we submit this request to the back end which is happening right here or right here what we're do doing is converting that Boolean value to either active or draft now the problem is whenever we are getting all these default values from the active product to populate our form what we're doing is we're just plucking off the activation status without converting it to a Boolean and since active or draft are both just shrinks and they're both truthy then it's just always keeping that checked but now we need to change that and how to chat jipta say we could okay and let me just make sure I didn't miss anything when the checkbox work true but in your activation status active draft initial convert back all right so for the initial values yeah this is nice so I'll say activation status if your active product is equal to okay so this is either going to be true or false true if you have active product status and its status is equal to or excuse me if you have an active product and the status is equal to active and now let me just make sure and then when we submit it handle submit I already do that as well yeah so now I think we should be good so editing this first of all that is rare okay so I edit this that's already active and it says active I edit this that's not active and it's not active now I can change this submit it and that should make a patch request with activation says active let me deactivate that submit make a Patcher request for the activation status equal draft beautiful okay and everything else does work right uh yes it's amount that amount that amount this amount bacon Smith Steve Jobs posts are great activate that all right looking good so now our edit logic is actually taken care of yeah I think that's all we needed to write oh wait a minute so these are hardcoded as well but we will change that eventually change those from hardcoded values cool cool cool cool cool cool cool cool cool cool cool cool cool cool cool cool cool cool okay so now pages and actually let me go ahead and lint this real quick just a little bit npm run lint just to make sure I'm in a good uh checkpoint all right so for shop Pages let's build out the rest of this functionality okay so for cell products what else do we need to do well well well well well so glad you asked so for each of these individual product rows we got this logic working where you can click the image to the go to the edit page click the name or click edit so let's just finish the rest of this functionality starting with delete so right now when you click delete nothing happens and what I want to do is actually delete the product so I'm gonna do you know edit click don't need this um okay so what I'm gonna do just trying to see if I could steal her from anywhere okay so I'm going to be calling this dispatchers delete product and pass in the ID so I want to import products all right so handle delete click what I'm going to be doing is I'm gonna be calling this whenever I click the delete button of course and all this is going to do is it's going to dispatch this delete product dispatcher function and this is going to take the ID of the product we're trying to delete so product ID and then I need to await this wow wow okay so now whenever I click delete it should dispatch this delete product by deleting this product with a given product ID so let's try that now it should also delete it from the back end so let me go to my products I have three products back here these two I don't want to sell this Steve Jobs poster anymore so I'm going to delete that deletes it for my back end and it deletes it from my front end looking good now another thing I actually want to do is just display a toast right there because whenever I deleted that it was kind of uh weird not having any toast as a feedback so display toast take your Stu here let's play toast toast type comes from enums and for this toast I will say after you delete it and the delete was successful say successfully deleted product or that product or something how do I have it in here uh so order products products oh product deleted there we go that's easier and I should probably put a I'm wondering if probably want to try catch for this yeah you saw the you know app doesn't crash it's never a good thing if that happens so try and then I'll say where's my error logic that I can just see though ah so great products all right so try to delete the product and if you can't then display the error in the console and then eratosis is error deleting product okay so handle delete click should Now display toast let's figure out okay so delete this product deleted looking good now let me just go ahead and add one more so I can test something else so let's sell that desk again all right so wooden desk wooden desk big woodeness I'm selling it for tnb selling it for 500 a great value phenomenal amazing value let's activate it submit it and looking good so edit delete works now deactivate is what I want to do now so let's handle activation link click okay this is interesting new activation status equals draft yeah I think I just don't even want to mess with any of this so what I'm going to do is this actually what did I name that handle activation actually and click handle render activation link and so so const handle activation action link click and also going to need to it's async as well since we're going to be dispatching some stuff handle activation action link click good enough okay so the first thing I'm going to do is Date Update all right so let's figure out what the new status is going to be and also going to be stealing some stuff from here namely this update product logic so update product from dispatchers product I'm also going to be saying all right so we want to update this product and what data do we want to update it with well the data that we're going to be updating with is we are going to say we're only going to be updating one field which is this activation status and the value of this is going to be depending on this so I already got it so let's just do this activation status DOT active form data oh I need to convert this to form data okay so this data requires form data so to do that well we can go ahead and make some new form data all right so activation status actually this works pretty well activation status request data so what I can do is just say values activation status all right so for the activation status we're going to be doing is we're going to be looking at the products activation status in seeing if it's equal to active if so then when they click it it's going to be in draft mode otherwise it's going to be active and then this that's probably why I I did it uh since I hate how that's formatted so this is actually works as well all right so let the new activation status let's just assume it's a draft by default and then here I'm saying that if the current activation status is in draft then the new one should be active so if the current activation status is in draft then that's new that's kind of ugly too oh boy oh boy oh boy so conservation status all right should we just do this the ugly way all right so handle activation link click whenever you do you're going to make new form data and then you're going to figure out what the activation status should be and that is if the current activation status is active then you want to update to the draft however if it's in draft then you want to change it to active and let me just try one more time to make this readable oh yeah there we go that's what I'm looking for okay now hand elevation activation link click and render activation link on click and this is where we're going to stick it and now everything should be good go may want to put a try catcher on this too but let's just test things first okay it's active you see deactivate then you click this to activate it or excuse me to put it in draft mode now if it's draft mode you can activate it it's active deactivate draft mode activate there you go so now I want to do two more things and this is just some housekeeping stuff the first thing that I want to do is I want to surround this and try catch just so we don't have any um right here if this fails then we're just gonna kind of Crash our app and you know try to avoid that so try to do this now if there's an error we'll say error updating activation status otherwise if it's successful I'll say product or I'll say activation status updated so that should carry that activation status updated activation status updated there we go all right wait actually is this a is this done now let me try it with a couple more products all right so let me get this wooden spoon that I've been meaning to sell so I'll copy image address okay let me actually delete these I'm gonna treat it like an actual actually coming from the top my goal as we said was to sell my wooden spoon I'm gonna go to my products I'm going to add I'm going to say wooden spoon and the description beautiful wooden spoon for this let me just go ahead and save this image as spoon and then I can for my downloads select this spoon now I'm gonna sneeze boy all right so I want tnb for this spoon and I'm gonna sell it for 2600. I only have one of them this is handcrafted and I'm not going to activate it just yet because I first want to go here product created edit it don't need to and I'll just click activate from here activating status activated beautiful all right I think uh actually I think that's all there is let me just add one more just to make sure our list behavior is still working uh mushroom book so save image as mushroom book I just want to add one more so we have a list of products just to make sure my grid styling remains intact and I'll say mushroom book say uh about mushrooms and where are you at mushroom book there you are now for this I'm gonna sell it for uh 2200 tnb I only have one of these as well and I'll activate that right away okay so a couple things I'm noticing here first on this page then I would have liked to have my most recently added products appearing at the top so let's go ahead and do that right now so each product has a modified date on it and I'm just going to order by that and this is on my products page so I'm gonna need that ordering right here and let me see if I get it okay so order buy from low Dash and what I can do is just create a date all right so my filtered products I can order them right here so anyways just the recap I'm first running this memoize function right here to determine all the products that I'm selling so any products that are in my store if they're from another seller I'm filtering it out and just getting this filter products now these are used to determine if I should display the empty state or a list of products right here and what I could do is I could order them at this time since it's the same list of products that's eventually going to be rendered however I'm wondering if it's more efficient to just save this as is and then at the time that I'm rendering them then order them yeah that's going to be more efficient so what I can do is this uh where's that order by I was stealing oh somewhere else oh here we go so if it does come time to render these products then what I'm going to do is just I'm just going to say ordered products and this is equal to an ordered list of filtered products and instead of created date that is going to be modified day right modified date descending highest the lowest okay and then these products are just going to be ordered products all right so when you have products to render then just go ahead and order your filter products which is basically means the products you're selling and then sort of my modified date descending highest to lowest okay cool now let me edit the spoon I'll say nice one spoon and hopefully this should be first in the list yep oh you know one weird thing about this though is that look what happens when this huh that's a little bit Goofy okay so whenever a product is added or edited like this then correctly so I want it to appear at the top of my list because that's just intuitive to me however the logic for this is just sort this by modified date in it's kind of unintuitive however whenever I'm just updating the activation status since it does of course update the uh modified date but then my products are kind of hopping around here so that's another question that I'll throw out the to the community how do I wanna account for this finically finicky logic yeah I'm not sure I have a good answer for that right now but um hopefully someone else does you add one of these no I'm good right now all right so on this note can we just check this off seller products page I mean there's nothing else to do to it right so products page we add thumbnails working price is working badges working all these buttons working yeah I think we're good to go okay so the cool thing is we can now manage our products from the front end however as a buyer we still don't have any catalog so what I'm going to do is kind of just uh call it a checkpoint probably a video right now so let me go ahead and if you run lint and then I could push up these changes and then kind of get started on the next part of the video all right so I'll go ahead and review these changes real quick and then push it up and then in the next video what we'll do is we will get started on this buyer's catalog page or the catalog page whatever you want to call it so uh yeah I mean progress looking good so far and I'll see you next video see you soon