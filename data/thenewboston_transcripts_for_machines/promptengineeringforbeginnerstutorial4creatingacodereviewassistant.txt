hey welcome back everyone this is Ian bringing you the fourth video in this AI series with the New Boston in today's video we are going to work with the GPT 3.5 turbo model using open ai's chat completion API and we're going to tell the model to act like it is a helpful code review assistant and we're going to pass it the contents of a code file in this case a python file and we're going to have it review that for us and give back some feedback some suggestions for improvement so if you're working from the repository with all the source code found in the description of this video then you'll want to go into the open a examples 04 code review folder and look at that main.py file you'll also find the code. pi file adjacent to it and it's going to have the function that we're actually going to pass through to the openai API and ask it to give us the code review on really simple function here it's called get quotient it takes two arguments A and B and then it does a division on those and Returns the result so let's go ahead and close that file and let's zoom in a little bit and work through this code so the First new code that we're going to recognize here is lines six and seven essentially it says with open and then a string argument of dot SL code. pi and then a second string argument of the letter R and then as file and then inside this code block code content variable is equal to file. read that's a method being executed so the width is just saying hey after this open as file is done running go ahead and make sure that this closes out and that way uh everything finishes properly with this operation and we don't have any issues there if you want to read more about it check it out in the reading and writing to file section of the Python documentation now the the open method here takes two arguments the first one well it takes more than two I should say but in this case we're using two arguments the first one is the code. piy file which is located in the current directory alongside this main.py and so we use for code. just to tell open where to find that file and then the second argument is the mode in this case the r stands for read so it's going to be in read mode and then after that it says as file that's going to give give us access to the file via this object called file this variable called file inside of this code block we're saying code content is equal to file. read so calling the read method on the file object is actually going to give us the contents of the file that was being read and so we're going to take that content of the file it's now a string we're going to assign it to the code uncore content variable now we can use that in the rest of our code whenever we're communicating with the API so let's take a look at that so here we are getting the response from calling open ai's chat completion API we're using that create method so that it knows to send a request to the endpoint that creates a new chat completion object and sends it back to us as the response we're telling it the model we want to use is GPT 3.5 turbo and then our messages list here is where things are going to change from some of the previous videos very similar here we have a system roll object as the first object and then we have a user R object object as the second object however with our system role inside of its content string we are setting it to you are a code review assistant provide detailed suggestions to improve the given python code so we're no longer a helpful grandma or a helpful assistant we are a specific code review assistant who's going to provide detailed suggestions to improve the code that we're going to provide and so in the next object with the user role the content will actually Point directly to that variable codee for Content that we created on the previous lines when we read that code. piy file so content is going to point to a string version of that get quotient function from the code. py file and then the system is going to act as a review assistant and the assistant response that comes back to us will be text telling us what we can do to improve upon the code from that file the temperature and the max tokens are going to be the same as they were in the previous videos and I should note that even though the temp is low that doesn't mean that the response will be the same every time this is a pretty openended question getting feedback or detailed suggestions to improve the given python code so it could vary from response to response you might want to get a couple responses just to see what those variations might be so then down here at the bottom we're just printing the response that's going to be the entire response object it's going to have things like the response ID it's going to have the Tim stamp for when it was created the type of object it is in this case chat completion and then it's going to have your choices list and inside of choices it's going to have that first message which is going to have the content from the assistant role that's what we want to look at so down here at the bottom we go ahead and print the response. choices bracket 0. message. content to get access to that string in our console output so let's go ahead and run this code and see what type of response we get back from the API so from inside of the 04 code review folder with our virtual environment activated we're going to run python main.py okay so we got our response I'm going to go ahead and zoom out here a little bit so we can see it more easily now at the bottom of course we have the actual text content from the assistant rolles message as we scroll up we're going to see the entire chat completion object and that's going to have all the typical things including the Finish reason stop that's good that means we gave it enough tokens in our Max tokens argument and then the usage telling us how many tokens it ended up using in this case 423 so quite a few but it still hasn't used our Max tokens which is good so here we have the actual text content of the assistant rolles message object so we're going to copy it and just to make it a little bit easier to read I'm going to open up a new file and then because this is outputed as markdown we're going to open it in a preview mode in VSS code here and you can see that we get a nice output as marked down so this is the response it's it's pretty big and it's got code examples inside of it that are formatted with syntax highlighting and everything which is a benefit of getting marked down as a response from the API so the given code is a simple function that Returns the quotient of two numbers by using the floor division operator double for slash here's a few suggestions to improve the code add type hints so then here it shows using int int for both of those parameters and then saying here with the little arrow int that the function is going to return an INT data type add error handling for division by zero so then it does some additional checking here and raises a specific error based on whether or not there's division by zero which of course is not allowed in Python consider using floating Point division the current implementation uses floor division which Returns the largest integer less than or equal to the quotient if you want to get a floating Point quotient instead you can use regular division by replacing the double forward slash with a single forward slash and so it builds on the previous suggestion but this time it changes it from the double forward slash to the single for Slash and then it ends by saying these suggestions will make the code more robust readable and flexible for different use cases that's awesome so we essentially passed in a separate file we read it using the open method with python we assigned the contents of that file to a variable we pass that in with our user roll content inside of that user R object right inside that message object in our messages list right after the system roll and the response that we got back was this really elaborate and thorough uh code review of our code. file so you can see here now that you have this in Your Arsenal you can do all kinds of really cool things where you can just take any type of text or document you can tell gbt 3.5 turbo what it's going to be as the system roll and then you can pipe in all of that textual content and have it give you some type of output it doesn't have to be code review it's really anything that you can imagine so I would definitely jump into this if I were you and take some time to experiment with it and see what kind of cool stuff you can come up with that's it for this video thanks much for spending your time with us here on the New Boston we can't wait to see you in the next video until next time peace