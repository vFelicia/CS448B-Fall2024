all right hostas welcome back and before we get to this video let's just go ahead and recap what we did so far in our program so right now what our program does is it sits on the network and it just waits for data to come across now whenever it receives any data what it does is it takes it and it starts trying to figure out what it is now up to this point we can figure out the destination what device it's coming from where it's going to the Ethernet protocol and we also found inside our package another package so now what we need to do is we need to say ok well what about this payload that we found inside let's go ahead and start interpreting that so this was all the ethernet frame the Ethernet data basically how data from your computer gets to the router but now we got to unpack that i.p packets this is pretty much the good stuff so we already took care of a lot of the boring stuff that IP packets are what we're going to be unpacking now and I'll give you guys a real quick diagram of this so basically the IP packets and IP headers this is how you connect with another computer on the Internet so not just your router but it's how you connect to you know Facebook server YouTube reddit whatever so basically every computer has an IP address so whenever we want to talk to Facebook we need Facebook's IP address which is already going to be bundled up in here and we need to send it some other information well IP address to send you know the pictures of my exgirlfriend back to which is mine so we have just the IP version the header on the length the source address destination dress and again these are IP addresses so that's what we're going to be doing in this is oriole unpacking the IP data and IP stands for Internet Protocol basically data that you're going to send across the internet so again that's what this is so let's go ahead and make that right now let me add a comment I'll say uh unpacks ipv4 packet and that's good for now so we're of course going to check to make sure that the Ethernet data that we got whenever we unpacked it we only want to worry about the internet traffic I mean we really aren't worried about anything else like ARP or anything like that right now so whenever I don't know maybe our kids or our friends that are living with us they go to some website we're going to start extracting that in seeing what they're up to so def ipv4 packets and remember we're going to be passing in this little bundle of data eventually all right so let's go ahead and take a look at what we need to extract the first thing that we're going to extract is this which is the version and the header length I'll show you guys how to take this one byte and break it up so you can you know see each one individually now we're also going to be getting the time to live which I don't know isn't that useful but if you're ever analyzing a network um I don't know maybe there's something weird about that we'll get the protocol and of course the source address in the destination address to see pretty much what servers or what websites they are actually connecting to now again all of this data that you're looking at that we're going to extract this is just the header now an IP header basically comes before the IP payload or data and it's pretty much if you think of it like a package that you just send through the mail this would be on the label but the actual data inside is inside the box which is the good stuff so this is pretty much information that proceeds every IP arm payload pretty much just to give information about it so let's just go ahead and do version header length all right so the first thing we're going to do is we're just going to get information about the version and the header length so remember that's the very first flight so if you rate data zero that's going to give us that but now what we actually need to do is this combined it isn't really useful because this is actually broken up into version and header length now if you guys are wondering how we can extract the version out of here if you remember from my bitwise operator tutorials in Python 3 we can actually take this in bit shift it to the right by 4 bits now what that's going to do is it's pretty much going to ship this out and we're going to be left with only the version so 0 0 0 0 and then the version and if you guys don't have any idea what I'm talking about go watch my bitwise operator tutorials and I'll show you guys how to use bitwise operations it's actually not that hard it just sounds weird so version header length what we're going to do is we're going to take that entire byte and bit shift it by 4 to the right now that's only going to leave us with a version number so that's taken care of now to get the header length what we can do is a little something that's kind of tricky we can actually take the version header length and we can end it by 15 and again in that same tutorial I talked to you guys about how to and and what the bitwise and operator means basically you're going to compare two bytes and you're going to get the result when both of those bytes are 1 so if you multiply that by 4 this is going to give you the header length now if you guys are like why do I even need the header length why are we doing this you need the header length in other words the length of this entire data set because the length of the header is used to determine where the data starts because right after the header ends that's when your actual data begins there butted up right up against each other so you pretty much read all the information from the header and then say after that oh that must be the data so that's why we need all this crap right here so now what we can do is we can actually start unpacking everything so we're going to get the time to live the IP protocol the source the target and we'll just set this equal to strut unpack now this is kind of weird how this is packed together so kind of pay attention here all right that that was embarrassing okay so the exclamation mark that's just for saying that we want to make sure you know the byte order is correct now if you go 8x and then B B 2 X then 4 s 4 s so this is the format that our data is going to be unpacked into and now we need to say well where's the data well the data is from the very beginning to 20 bytes so it's 20 bytes long and we can see that in this little diagram all of your header information is 20 bytes long so we're going to be giving it a chunk of binary and sera extract it into these variables pretty cool way now the last thing that I'm going to want to do is this I'm going to run a return a bunch of the information that we just got and also the actual data the payload that's inside it how do we do that well let's just start returning crap what did we figure out you figured out the version already we also figured out the header length the time to live and I can just copy this we're also going to be returning the time to live the protocol and you know help before what we did is we formatted that MAC address properly we actually need to do the same thing with the IP address so later on we're going to be making function called I'll just name like ipv4 and then we'll pass the source and target in there so again we already extracted the IP address but now we just want to format it properly the same thing with the target boom roasted right in there and the last piece of the puzzle that I want to return is just the payload so how do we know where the actual data is not the header we already took care of that with actual data well remember it begins it which signifies the end of your header so that's where you want to begin and it just goes to the end so just right header length is the beginning and this will go to the end which would just give you all the rest of it so remember an IP packet the entire packet is broken up into a header which is all this information and the actual data so that's what we're going to be doing and whenever we unpack this we just pass it in it extracts all the coil information and now we are ready to move on to the next video and what we can actually do now is work on that formatting function so let me just add a comment and say returns roughly formatted ipv4 ipv4 address now I'm sure you guys know how an IP address is formatted it's basically like one two three four five six that whatever it out whatever I mean you can't have four or five six but it's pretty much three numbers with a dot separator so what we can do is just call it define this and we're going to pass it in the address remember this address is the unformatted address and now we're just going to do is return join and then we just map ddr art so we're basically taking all the chunks and we're going to map them to a string or convert them to a string now once they're in proper string format we can just join them with a dot in the middle so you get something like 127.0.0.1 so these will be strings join together with periods boom roasted there you go so that is how you unpack an ipv4 packet and how you properly format an ipv4 address and we are now ready to move on