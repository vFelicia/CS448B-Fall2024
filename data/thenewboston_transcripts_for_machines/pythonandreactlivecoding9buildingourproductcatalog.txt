already on welcome back to another video and in this one we're gonna keep chugging along at our shop feature so in the last video what we did is we wrote the logic for the seller product page in other words so the seller can add and manage all of their products and now that we have the functionality for a seller to be able to add products let's go ahead and build out our buyers product catalog which is going to be the equivalent of this view right here so on that note what I want to do is first hop into tnbos and all right so what I'm going to do first is make the empty state for this in other words when there are no products at all we're just going to give them a better empty State than this you know little uh well we don't just want to give them a blank screen a little indicator to let them know what's up let's hop back into nbos and figure out how we do this so tnbos I have two components an empty page which is empty state for an entire page and then an empty State and this is just a component where let's say you have like a little subsection like a panel or something then you can stick this in there and for my empty page component I basically just use that same component but inside a much larger container that will take up the whole page so with that said I'm going to go ahead and first just copy this empty State component okay so yeah let's actually just copy and then we'll kind of read through it okay so front end okay so a new item our component Library which is an empty State component and the styles for this let's see what we're working with so the spin Gray let's do the colors palette Gray looks like 100 and 200 should be switched yeah I think they should be actually yeah that looks a little bit better okay so anyways getting a little off track here but had a little issue okay so span gray and I have spin blue and under types you can buy those all right so now let's look through this so the empty State component is going to accept empty State props which is action text bottom texts graphic I actually like text and top decks so at the top of this component we have a graphic and then we're going to have some top text which is required and then we are going to have bottom text which is also required an optionable action text so this is going to basically look like a uh a link and it's going to be like um to give you an example it's going to be like no products to display here create one now and that create one can be a link where you click on it and it can like pop open a model or take you to the create product page whatever you want to do but that's the basic of the action text so this is saying if you don't have any action text or you don't have a click Handler for it then you can just go ahead and return null basically those options were not being used however if you do then what you're going to render is that action text inside the span blue which is basically just a uh it's going to look like a link all right so that is good and then we can close out of this for now empty State component done so now what we're actually using is this empty page component so copy this component and you're going to get a new component in my component Library for empty page and this is going to use that empty State component that we just talked about and it's just going to render it inside a page instead pretty much all right oops okay so for this empty page we basically pass in all the same props and it just passes those through to this empty State component and then we're just styling this to pretty much have it appear in the center of the page okay so now I can use this empty page component and where am I getting a graphic for this assets okay so under my assets let me say leaves wind I'll say leaves empty state actually I'll just call it empty State now I may have uh different graphics for empty State this is one of them but until I have another one for empty State I'll keep the naming a little bit uh generic so let me just do State and I'll say empty State graphic actually let me kind of look ahead and see what other empty States I got by checkout interesting here's a Network's empty state which I can use for Cores so let me actually do that right now uh refactor your name leaves empty state and then I'll just say leaves wow okay let me move my keyboard a little bit so I can actually type okay so for the empty page what are we gonna do with you so first Mr empty page component what okay let me give you a graphic graphic equals leaves empty States and then you're probably going to want top text to say top text bottom text bottom text and let's give you some action text as well action text click and I don't think I'll have any option or excuse me action text for a list however I just want to kind of make sure my component is rendering properly and that was not what I wanted to open but I guess I'll open Discord too all right so this is my graphic top text bottom text and then an optional action text right here first of all that action text is a little it's supposed to be a blue it's not let me quit Discord all right so a couple different things let's first of all just get our um spacing taken care of so buy home just gonna have this container page content empty state so page content it'll be applied to okay that didn't work as anticipated so this is the top this is the bottom this is the page and for this bottom one actually how do we have it interesting so for this what we can do is say display Flex Direction column Flex one is that gonna work and it's not because the parent and that's a good question what is the parent of this and I don't want to mess with my layout hmm that's interesting too I thought the top part was sticky the bottom part was scrollable but apparently not but I think that we want that so I may have to change the layout for this let's put it into nvls right yeah yeah I think I want this logic right here all right so in this case yeah Flex yeah so I'm gonna need to make a layout in the top is and it's going to be a flex full extraction column height of a hundred and then for the top toolbar keep that as is and then the bottom is just going to have a height of a hundred to take up the remaining space okay so now this becomes might not be that difficult okay so with Pages we have the shop page this is the index for it in the container what we do okay so it's this layout right here we're gonna have to adjust and for the outlet oh this is interesting I wonder if I wonder if I can style this Outlet that would be great Runner down let's find out s okay so as you Outlet all right I'm gonna style a custom outlet and it's going to be a Style version of this unstyled Outlet for this I basically want to use the same logic as this right here so it's gonna have so that's gonna be the flex this is going to be height of a hundred really hoping this works this is a styled Outlet this is either gonna work or probably mess a bunch of stuff up all right so the good thing is this works okay and now that is not working so my styled Outlet is supposed to have a height of a hundred let me just do background red okay however it does not actually is my Tire yeah this isn't play flax Flex Direction column well this is my layout display Flex wait a minute yeah this is my layout display Flex Flex Direction column and then this play Flex and then this is what I should have fascinating my way out maybe I have to put a height whoa whoa whoa whoa whoa let's go on here all right this should be my logic Flex Flex Direction column overflow hidden however now this should have a height of 100 and then overflow y scroll okay actually the Overflow y Auto for this okay but either way this is my layout and then the outlet should have a overflow y Auto and this isn't working but at least we're getting somewhere okay so yeah so I need to figure out how to apply this styling to this is the outlets but I just can't style it minus the up minus the red background okay so you can't style the outlet like that so let's figure out how I can Outlets is going to render right there and height 100 all right try CPT got a good one for you and that is how can I style this Outlet all right in your code series solid file you can sell it in directly or you can wrap the owlette oh we can wrap it that's interesting as well yeah I already tried this but it's not working inside a style div all right so it looks like I'm going to have to try this property which is the outlet container all right let's see if this is working all right so we have an outlet container that's going to contain our Outlet work similar to this where the height is 100 the Overflow if needed all right so that is looking good from that perspective that's great and now just go to my cell products okay this is looking good this is what we wanted so by default there is no scroll sticky top bar and then if needed you get a little scroll going on and also I got this empty State flowing in the middle which I want and then also well it uh no scroll don't have anything in there for now but there will be eventually okay so one thing that I'm seeing is we need to change the actual empty State text of this so close that don't need you don't even know why I opened you okay um what could be the empty state for these products I can say uh let's just say nothing here actually let me just check overflow hidden away why okay that's good layout good that's good okay so no empty state so there's not going to be any action text there's not going to be any bond text still didn't leave so I'll say top text nothing here and for the bottom text I will say um what can we say for this bottom text actually let me just say no products to display nothing here no products to display okay that is good all right looking good so now this is going to be the empty state which hopefully we uh won't have that often and now let's go ahead and actually add the product logic so this pie catalog wait a minute wait a minute wait a minute so in my layout the outlet container is going to say height of 100 overflow live necessary and then in my product catalog do I also need that height of a hundred I think I may for that empty state if nothing else yeah and then overflow y Auto overflow by Auto for the container don't think I need that at although I think we pretty much achieved this same thing actually this I don't need okay okay then I'll stick a grid in there and it should be good yeah yep yep yep yep yep yep yep yep that stretches stretches okay all right so now for the buy catalog it's uh just get organized and tackle that part so for the buy catalog what we are doing is we are going to say inside the buy catalog we are going to render content we're first going to look if there are any products to display if not then we are gonna just render the empty page like we have right now now if we do have products then we're gonna render the product cards container and this product cards container what this is actually a component and this component is just going to take a bunch of product cards in other words react children and then gonna render them in a responsive grid now the question is why did we make this a component and actually if nothing else it's nice to split up this way but I do want to see if we use our end URLs okay so this product cards container under components okay so it's not going to really be a reusable component however I do want to split this logic up so let's do it anyways all right yeah this is actually a nice pattern all right so product cards container let's go ahead and add another component to our component Library product cards container product cards container let's check your styling I'm gonna have to update that all right so product cards container product cards container styles types scared it from there okay so we're going to be passing you children in other words a bunch of product cards and you're going to render them inside a grid and also going to be changing these because I want to use my standardized break points so this is pretty much saying that um by default you or basically the most items that you can have on your screen is Six Wide six columns and then as the screen gets smaller you know uh you just don't wanna you don't want six columns wide when you're on like a phone so do this okay so first let's import the standardized break points starting probably from the one two three four five okay so one two three four let's just uh kinda I mean it's hard to imagine this stuff in your head the break points so what we're gonna do is kind of just Build It Up all right so one two three four and then the fifth so one two three four and then the default which will be five so the most we can have is five four three two one and then we'll do mini mobile tablet desktop so mini mobile tablet desktop and anything larger than the desktop or anything larger than 1400 pixels will just show five products right there and of course this is going to be tough to test too since we don't have any products rendering on the screen but this component is looking good for now as good as we can get it without some product surrendering so let me close that and all right so now what I can do is yeah let's go ahead and import this so products container okay import product cards container now I can say something like render page content render page content it's going to be replaced by this empty state which is going to be right here and then this is going to be render page content okay okay okay okay okay okay all right available products so now what we can do is actually start this off pretty easy so under Pages let's first just render all the products before we filter anyone's out available unavailable and these will include draft products and active products for now um later on we only want to display active products because that's kind of the point of having products in draft mode that they aren't ready to be bought and sold yet but we'll kind of get to that in a bit don't want to do too many things at once okay so for now let's just go ahead and get those products using new selector which is going to come from react Redux select these products from my store and then get product selector I have in selector States so these products um available products that's probably coming from a hook and okay so I'll just do actually I do want to split that out available products should I do it now though might as well and why did I name it available instead of okay it's our name net available instead of active products because on this page I'm filtering out the ones where you are the seller of so basically whenever you're looking at this if you are selling products there's no need to display in the catalog because it doesn't make sense because then you can just add your own products to the car and it's going to be confusing because we're probably not even going to allow purchasing of your own products however I'm also wondering from a ux perspective would it be weird if you were selling products and you just added one for example and you saw it right here but then you went back to the product catalog kind of just the I don't know get a perspective of what other people are are seeing and you don't see it here and I think it might be so in that case what I'm going to do is this I'm gonna say first gonna say I want to use Memo from react and I'm going to say active product so const use memo all right so this is going to return I'm just going to return all products for now and then I can just say if you don't have any active products or basically if you have active products this is just going to convert the length to a Boolean this double Ampersand or double exclamation mark and then if you do have products you're going to enter render this if not then you render an empty state and then eventually we're going to need to add a filter for this so to do filter but before we get to that let's just go ahead and re yeah we'll render everything out on the screen just to make sure that um The Styling and everything is looking good all right so render product cards is going to render these product card components and for this we need that product card so go to declaration and this is just formatting everything basically including an account label okay so lots of mini components in here so let's see what ones we got an account label and for that okay so for each of these cards we have a thumbnail on top and then at the bottom we have a name description account label so name description account label which is basically just a little user icon and then it's probably going to say their username and then whether they're the buyer or the seller then after this we have another component for the pricing which is called the price component okay so working on the inside out let's do the account label first and I believe that I want to change the name of this to user label so components account label yeah let's do the user label all right so components do I have a user label or account label already no and okay so make a new directory called user label and The Styling for it is going to be this as well I might need actually a lot of uh so first of all from the Styles and components so this actually takes all right so first we need an avatar and we don't have that either that's from system right yeah okay so system components Avatar this is interesting um so what this is going to do is display an image inside a container with a fixed height width and then I'm also displaying on tnb OS this little online offline maybe you can see it like a little online offline button but I don't need that so we can remove this logic okay so let's just make a simple avatar for now so for the avatar what we can do is in the Styles we don't need the status and in this we don't need any of these so I'm not going to render the status I'm not going to render the status I'm not going to render the status so for the Avatar props what we can do is this so this is interesting as well we still need to build in the like profile photo Logic on the back end however we can just use a default avatar for now so for the display image we won't pass this in yeah this is going to be super simple now but we'll make it a little bit smarter or a lot smarter relatable later so here we're just going to use a default display image and to do that what we can do is get this default Avatar series system access default Avatar so this is the math um system s is default Avatar copy that my assets paste in default Avatar which is just a blank user and then for this what we can do is say in our ftar component for now now that we don't have any fancy schmancy user profile logic we'll just use the default Avatar in 100 of the instances but now we don't need the status either so Avatar styles of this all right so our Avatar is basically just a uh yeah I don't need this all right so user label which we were saying was account label all right so new component here let's call it index all right and here it's called account label but we rename that so refactory name to user label and for the display name actually I wonder if we can just pass in the user hmm yeah maybe we just do this well first of all let me clean this up okay so I am just gonna pass in a description in the name yeah we'll keep this uh nice and easy for now okay so for this user label we're going to be passing in the description and a name for the avatar we are using this Avatar component and it doesn't take any props because we're just using that default thumbnail or Avatar now for the name we're just gonna render whatever they pass in for the name for the description this is going to say a seller and then those are both required these look good and then okay so now we have an account label what else do we need for that product card all right so the priority accountable line a thumbnail so for the thumbnail components I actually have this one already and all this does yeah and this just creates a square aspect ratio so we actually have all of our sub components we need now we just need to render the product card so this should be easy enough just go to product card opponent all right so apps shop remove all of these components account label we renamed to user label all right c u v user label and then for the default colors I don't need for the description that is color secondary and for the Border color is colors border okay so that should be good for the styling of the product card now on my product card uh let's see so price component I don't think we have that yet types unify these press okay so I need a price component the product that gets passed in the property on that is just name image right okay so image is the name of the product URL so product image and then for this it is user label and then for that user label actually we changed the name in the description right all right so for the name actually we can do product dot seller dot username because I believe this is gonna break but we have products and when they come back they have a seller and a username nested within it so that's good okay so now let's go ahead and make this price component it's price component let's see what you're looking like so what you have is a network image and then a price amount on the right okay looking not bad all right so let's go ahead and steal you put you under components and get you all formatted to this new project okay but first the styling all of this looks good for the network image I'm going to rename this the core logo and network image this is going to be core logo Alt or logo and for I'm not going to use the hooks for now I'm going to unify my types for us all right and now for this logo so product price amount to local string uh core logo just gonna import core logo actually what did I just see why am I wait what's going on here okay oh I have a uh that's interesting I have a component named core logo thanks and this source okay this is styled image so I'm wondering if um all right let's do this so in my core what's my asset called unknown core yeah this is just we'll just do this for now keep things nice and simple all right so instead of using my core logo we're just going to use the unknown core which is a reference to this image right here and we'll say the source of all of these gonna be that unknown core and this is just so we can get things not breaking for the time being yeah that'll work for now let me just take a peek at core logo and see what's going on so this is an image um interesting fascinating fascinating okay okay so this price component is taken care of although we may have a little unification or drying up some of our logic to take care of but for right now just got to get something rendered on the screen to uh you know so we can click around something see if it breaks and now let's go back to this product card component so this is looking good the styles for this are looking good now let's go ahead and render this so render product cards what we can do is we can say in this function is that whenever we are rendering product cards what we're going to do is we're going to take the active products which we need to add a filter for and we're going to map over each of them and for the product card which we need to import so product card container above that what product card all right so for the product card the key is going to be product.id now on click we don't have a click Handler yet but what we can do put a empty one for now and for the product we pass in that's just going to be the product that we're mapping over and the product that gets passed in is going to pluck off all the information and yeah should be good to test it out now all right looking good so Amy is the seller of the bacon I got a couple styling issues where like the um the prices aren't lining up and that's because you see here on the description these two are one line and then these are two lines but that's just a little responsive design thing see when they get one line it looks a little bit better but now let me hit my break points so first of all I'm thinking that maybe four items Max okay so let's start with the smallest actually should we start with the biggest or smallest let's start with the smallest so my break point for this left menu you see where it says Coors wallet exchange shop when is that gonna go Mini that's going to go Mini at 10 20. all right so Let's uh take a step back here let's go ahead and just look at my product cards container and work on the styling for this nothing else let's keep it simple here Bucky all right so 1024 is when I get some more space from the left menu is the wrong app so embarrassing okay so this is my one column and that is looking good all the way until it splits into I think that's looking good as well you know what this actually isn't looking that bad although what I'm thinking is that maybe we just have four items is the max one two three's looking good four it pops it a little bit too soon right now three I want oh man this is tough you know what I'm gonna pull all audible again and I'm gonna say that this is looking all right for the time being I mean it is responsive and it's pretty close to what we want and then later on what I'm gonna do is I'm gonna find a designer to pretty much uh you know create an actual style guide right now this is kind of just like pieced together based on my style skills and I am far from a good designer however as part of that process they're gonna make all a bunch of responsive break points and kind of tweak all this so for right now things are indeed working and um yeah leave that as is so let me go ahead and close this and all right so another thing that we were going to do is I guess what we can do next is when you click on one of these it's going to navigate you to the product Details page now do I want to do that first or do I want to have the logic to fix this right here so let's do that okay so for each of these product cards what we have right now is in the price section we are just always rendering the unknown core which is basically this question mark right here but what we want to do is what we are going to do is depending on which price they selected for example if they are choosing a tnb or VTX we want to render the tnb logo or VTX logo so in that case what we can do is in the price component we could pass in the ID of the price core and then from cores we can pull that image and we're going to want to split that out into a hook so let's do that okay first let me uh get my price component from tmbos see what's going on so price all right now Network display name is using network display image pass this in using that work display image and I believe I just want to use the same logic but just um changing naming from it so from the back end we have cores and the name of the image is a logo so I'll say use core logo yeah let's do that so instead of using network display image I'm going to create a new hook and let me make sure use oh look at this I got it already oh baby love when that happens okay use core logo and the good thing is that uh it's named the exact same thing that I just came up with so okay so let me just import that so use logo from hooks and then the core logo that gets passed in it's going to be the products price core and then this is just gonna be the core logo for the source and I'm going to be able to delete this and should be good actually all right so this is VTX so it displays the V this is tnb so it displays the tnb logo and now actually I want to switch this to my default Avatar too so let me just where are you actually just find it easier this way all right so the source of this um doesn't have anything to do with like the product detail page but it's just kind of annoying me so default Avatar all right so now instead of looking at my beautiful face we can just look at this default Avatar instead and it'll just serve as kind of a visual to do to let us know that we need to change this Avatar logic as well okay so right now D far D well so embarrassing default avatars all around and no click logic but we'll do that in just a second so uh let's see what we're gonna do next let's go ahead and do this let's make a um a temporary uh product detail page basically the uh template version of this page right here and then from there we'll go ahead and build out the click logic so whenever someone clicks one of these cards then we can take them to that page and then we'll build out the details of this page later on so on that note let's go ahead and first hop back in here to what's going on here okay so let's go to our pages in our shop page and for the buy catalog just seeing if we have a product Details page yet okay so for the shop pages buy product details which we don't have yet but we can go ahead and create a new page to do that right now so it's going to be the same as pretty much this okay all right so we are creating a new page and to do that we create a new directory and it's pretty much the same as this and the style is just empty style file and for the component we can just add some placeholder stuff right now all right so now we got a new page that the user is going to be taken to and now we just need to see it's not in our layout it's in our main just need to register it all right and then for this by product all right thinking the best way to do this because we're going to need to use an ID but for now all right let's just keep it simple for now model p should I do products all right so let's do this by catalog I'll say bye product all right and that didn't work great and that is because it was supposed to be by products okay so buy product details is going to say buy products and it's going to have an ID in it which we didn't give it yet but for now what we want to do is really just make sure that when they click this goes to the right link Okay so maybe we can do that now now the question is is there anywhere else in my app that we are using this logic and I don't think so okay and I'm probably going to need a consult chat GPT so for the private details page all right except uh param an ID param like uh wow like this all right so chai GPT tell me the formatting for this and then I also want to make sure that whenever we render that page that we are plucking off those params from the component params this is what I want products there we go all right so products forward slash ID is going to give you that behavior so products for slash ID and then in here use params and then just pluck off the ID all right and let's see what we got going on here and then let's just render that ID out here all right so now hopefully when we go to buy products 20 it renders 20 beautiful 21 looking good and then of course we're going to be using that to fetch the actual product however for now that is looking all right it's actually what we can do is whenever we click one of these to navigate to that link so let's do that right now okay so that is going to be on actually keep this around so for shop pages that is the buy catalog that's going to link to products components and that is eventually going to display this product card right here now for this product card let's see what we have oh that's interesting oh very very interesting now the question becomes why on the product card all right so why is the click Handler being passed in render product cards so active byproduct ID select page I'll click handle click okay now what is this this must be a different product card what okay sell product details oh okay I know what I was doing all right so okay so on team BOS what I was doing is you see how I have all my product cards right here like one two three four five six seven eight however many I have now I have it where you click it it takes you to The Details page of the product I'm wondering why I had that like um I had customizable click Logic for it since it seems like I would just always want to go to The Details page and the reason is because the way I have it set up is that whenever I'm editing a product right here see this is also a product card um component and then whenever I click this I don't want to be taken to the details page for it since it all this is is just like a little preview of what the product card is going to look like however for this app um whenever we're editing we don't have that product card preview so what I'm going to do is I'm just going to move that click logic right to the product card itself so on the product card we don't need to pass an on click Handler so that means on this product card we're actually still going to have on click logic but just not pass it in okay so on the product cards which gets rendered from the product cards container and this is gonna be getting rendered from the buyers catalog page so we're going to say that this on click Handler you no longer have to give to your product cards because we don't need it and instead I'm gonna say constant handle click and then this is going to be my click Handler and all this is going to do is it's going to navigate to the product Details page and to navigate to this page what we need to do is we need to use navigate from reactorader Dom and then we need to store it in a navigate variable and then just navigate wherever our heart desires okay so we're going to navigate to what page was it it was buy products what you want something like this okay so back in here we're going to navigate to this and then the ID is just going to be a product.id all right so now for these product cards we're just going to pass in a product and then whenever you click the card anywhere in the card it's just going to take you to the product Details page for that all right so let's test this out I'm going to click bacon and it taken me to products 11 which hopefully is bacon yep and then one spoon products 14. mushroom book product 15. looking nice okay so we got our click logic working right here and actually is there anything else to do on this page scroll functionality is working the empty state was working tested that out earlier um yeah some things with the avatars that aren't working however we don't have Avatar Logic support on the back end yet so nothing we can do for now oh yeah prices all the info displaying as we expected actually one other thing that I want to make sure of is this let's go ahead and deactivate this mushroom book and then I just want to make sure that only active products show up here so then we can actually push up this branch um so on that case in the buy catalog we have this to do add a filter and then we're going to be getting that from enums so filter okay so import so import activation status from enums and now when getting all our active products we just want to say let's just figure out the activation status so activation status okay so the active products are all products whose activation status equals active and then hopefully if everything went right we should not see the mushroom book however if we go back and we activate it so it's now active then when we go to our catalog it should be there beautiful and there's also another question of how you want to sort these products and that's an interesting question whenever you're looking at a product catalog just like view all how should they be sorted by the last modified first that sounds kind of dangerous because then people are probably just going to edit their products all the time needlessly just so they appear to at the top of everyone's list so there must be a smarter way but that's it seems like that's a little bit more um Advanced logic I'm sure we can come up with a pretty smart solution however for now just kind of want to get things working and you know make sure nothing breaks so I think this is actually good for this feature um let me add product yeah so say that the buyer product catalog page is done and next up we have to pretty much build out this UI the buyer product Details page all right so that's what we'll do in the next video however for right now and just go ahead and I'll link to this and uh yeah push it up and another item off the checklist another good coding session so link that's looking good I will push this up and in the next video what we'll do is we'll tackle the product Details page so as always thank you all for watching and I'll see you next time