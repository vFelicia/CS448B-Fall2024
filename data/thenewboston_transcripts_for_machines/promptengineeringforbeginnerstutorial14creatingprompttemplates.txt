hey welcome back everybody this is Ian bringing you another video in this AI series with the New Boston today's video is going to be really quick really simple of course you want to have watched all of our previous videos leading up to this point to be able to understand everything that's going on in this one but what we're going to do here is we're going to expand on a concept that we covered in a prior video where we showed you how to create prompt templates from The Prompt layer dashboard so they have a graphical user interface where you can go into the dashboard you can click on a button create new prompt template this is over in what they call the registry and you can just type everything in through a form that's great although some of you may want to do that programmatically and so that's what this video is about so it's really simple there's multiple prompt templates that we can create right we can create one for a completion or for a chat completion we've been using chat completions for the entirety of the series so we're going to go ahead and continue focusing on that so at the top here we are going to import OS and our prompt l layer library and then we're going to set our API key using OS getting that promp layer API key from an environment variable and then we go ahead and get open aai directly from promp layer open. openai create a new client for openai with client is equal to open AI open close fors and then this of course assumes that we have the open AI API key environment variable already set behind the scenes the next thing we want to do is Define the messages that are going to be included in our template so I actually used the same template that we created in the video where we did it with the graphical user interface where we had a system roll and it said for the content you are a helpful type this is a placeholder variable assistant you only answer type related questions anything that isn't related to type will be politely declined and you'll gently correct the user and then when we tested that we would say stuff like for type it's equal to math and we' say uh okay now we'll include an additional user R message and that will say something like hey tell me what HTML is which is a programming thing not a math thing and so then the assistant should come back to us and say like sorry I'm a math assistant I can't help you with coding related questions so that's essentially what we did in the previous video now we just want to do it programmatically so we have our messages list and the reason that we have a list here is because you could potentially add as many messages in here as you want of course you're going to have your system roll message which you may or may not want you might just want it to default to the you know helpful assistant which is the regular default or you might want to go above that and do something like this where we create a template for the system roll Additionally you may want to add more messages message objects or dictionaries inside of this list where you have one for the initial user message or for the initial assistant response it's all up to you how you want to create that template what you need in the template what needs to be variable with the use of these input variables for the placeholders it's it's entirely up to you in the scope of your project so to keep it simple we're sticking with just having a single object inside of the messages list here and it's specific to our system role okay so after we have our messages list then here's the part where we're actually able to programmatically create this template so we use promp layer. prompts dopu and inside of this publish method we're going to include a few arguments so the first one is the name of the template so here we say prompt name assistant type two now we're not calling it template name because this is actually a prompt that we're creating and then the prompt has a template included with it so the prompt can have more information than just the template itself but the template was the main focus of the previous video so we're going to go ahead and continue with that here but just note that in terms of the naming we're actually creating a prompt that has a template inside of it and The Prompt itself can have additional information we're not covering it in this video specifically but if you need to dive into it now we have that all in the documentation for prompt ler so here we have the prompt name assistant type two and the reason I put a two here is because if we had just left it as assistant type it would actually overwrite our previous template that we created within the dashboard so I don't want it to do that I want to have it create a separate template so that we can see that they both exist inside of our registry so I just added the underscore two to the very end here now for the prompt template this is the part where we get to define the actual reusable template so for input variables we know that we have a placeholder called type right we have type type type here inside of these curly brackets and so inside of this input variables we have a list with a single string called type if you had multiple placeholder variables throughout your template then you would add those here comma separated just like you would with a List full of strings okay so the next thing inside of this prompt template dictionary is the messages list now again we only included one object up here for messages but assuming that you had one or more you might want to instead of just passing things in hardcoding them you might actually want to iterate over everything you have up inside of your original messages list and extract the information for each of those message objects using the code that we have here the reason this is important is because you can't just take the messages list that we already have defined and plug it in here there's more information that needs to be included here so that we can properly create this template and so you can see here this is called messages it does point to a list of dictionaries but the keys inside of the dictionaries are different so the first one is RO and then it points to the role of the message so that's the same and here we can input the r with this logic down here which I'll explain in a minute but essentially it's just iterating over that original messages list and extracting that roll out so it says okay this one is system let me go ahead and plug that in here this is great because if you had another message below that for the initial user message and then after that maybe an assistant message going back to another us user message then this Ro variable here is going to extract that as it Loops over the original messages list above but this is where it differs and we have something here called prompt right so up here we have roll and we have content and that's it but down here we have roll and then we have prompt and so the prompt is another dictionary that has input variables you can see here this one is empty and then it has the template with the content variable so the content is actually being pulled from this Loop here so it's going over this messages list it's saying hey is there something here called content I need the value from that because I'm going to plug that in right here and that's going to instead of being the content it's actually going to be the template so the template points to the content of each one of those message objects hopefully that's not too confusing I would say just dive in play around with it and you'll see very quickly okay here's the difference this is the actual messages list and then here's me creating the template from that messages list so then template format if you remember from when we did this in the dashboard you can choose between Ginger Ginger templates or fstring so we're going to stick with FST string the only difference here of course is that FST string is a single curly brackets wrapping around the variable names and then Ginga is double curly brackets then there's something here called validate template we set it a true it's optional so you can omit that if you want to it's just something that will allow you to validate the template unless you specifically don't want to but if you omit it it will remain true and then the type here is just saying or underscore type is just saying that the type of object this is is a prompt so then what we have here is you can see for this dictionary we have this four and then there's two different arguments inside pen rolling content in a map function with a Lambda XX values messages so this is a uh fancy succinct python one liner and all it's really saying is hey this is an expression that's going to get returned so we're going to get one or more of these Expressions returned filled out with the dynamic content from this Loop that we've created over this argument here which is messages so it's actually looking at the messages that we defined on line 8 and it's saying okay list I'm going to go over through you and for each thing inside of you in this case dictionary I'm going to look for the role and the content inside those dictionaries I'm going to extract them and I'm going to plug them into this dictionary here which then gets populated inside of this list for the messages of the prompt template dictionary so essentially we're just saying hey go over messages list pull out the values for the rooll key and the content key so in this case system and you are a helpful type assistant yada yada and plug those into here where you see those same variable names roll and content okay so we're just pulling it from one messages list and putting it into the prompt dictionary for another messages list Within The Prompt template dictionary hopefully that's not too confusing again just go through it line by line run it a couple times take something that you're working on and try to use it so that you can see how it works but let's go ahead and do it with something that we've done in the past which is of course this assistant type now the assistant type 2 we're going to open up the terminal here and we're going to run python main.py sorry this one's not actually called main.py I call this one chat. py so that's going to have another example for the completion. piy so Python chat. piy and again we're inside of the openai examples 14 create prompt templates so if I run this it's actually not going to give me any output but it will go down to a new empty terminal here as soon as it's done running so now that it's done running the way that I can confirm that it's working is that I can head over to my prompt layer dashboard now here I'm inside of the prompt registry and you can see the assistant type this is the one that we created in that previous video two months ago and it's got the system your helpful type assistant yada now if I refresh this page we should see the assistant type two that we just created programmatically from our python file and so if we go inside of here and we compare it to the original one we can see that it is in fact a chat completion with an fstring template it has the system here you're helpful and that says type for assistant the only answer type related questions so that all checks out you can see that the type variable was actually detected as an input variable and it includes it here input variables now we haven't included functions we're going to do that in a future video we haven't included any metadata or parameters or anything like that and that's the separation between the template and the prompt right there's a lot more stuff you can do with creating a prompt like having the metadata and having the parameters for the prompt things like which model you're using and all that and then there's the actual template which is this that we're looking at here the versioning of course if we were to run this a second time maybe with some slight differences to it if you keep the same name assistant type 2 it'll actually overwrite assistant type 2 but it'll give you a new version automatically so in that case it would be version two the latest version with whatever changes that you submitted so that's why we did assistant type 2 here just to have two separate things to look at but if we had just kept the assistant type name without adding theore 2 at the end what it would have done is it actually would have updated the assistant type here the one that we created previously and it would have just given us a new version so here's one we created previously you can actually see where we ran some prompts or some requests to the chat completions API and then we just connected the responses from those to the template that we used now we haven't done that with the assistant type 2 but again this one was created inside the dashboard just by going to registry clicking on create new template and doing everything there whereas the other one was created inside of our code really simple you have multiple options if you prefer the goey interface you can do it from your dashboard on prompt layer if you prefer to do everything programmatically then you can do it over here or you can do a combination of the two it's your choice so thanks a lot for watching this video and we will catch you all in the next one peace