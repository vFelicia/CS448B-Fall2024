what's going on guys it's Bucky and welcome back to your 49th C++ tutorial and in this tutorial I'm going to be talking to you guys about the this keyword uh but before I get into that let me tell you guys I'm sorry it's been a couple days since I made a tutorial but I had to upload 200 PHP videos to YouTube and do you guys have any idea how long it takes to upload 200 videos to YouTube quite a while so anyways that's my excuse so now we can get back into C++ so let's go ahead and for this example I'm going to be making a new class class because if I put it all in the same file it's uh going to get a little clustered so I'm going to name my class Hannah and actually uh I already messed up yes okay I actually made a deconstructor and I didn't want to so let's go ahead and just delete that right there and now we can get coding our project so let's go ahead and first let's do a couple housekeeping things take this hannah. H and paste it in here and now I'm going to take this and paste in here so basically your CPP files see this one and this one should basically look the same at the very beginning and what I also like to do is get rid of this protected crap right there because we didn't learn that yet so you know no use using it so basically what this Hannah class is going to do is it's going to have a private variable we'll just name that in h now whenever we create an object we're going to pass it in a value an integer value and all that's going to do is you know say we pass it in in 20 it's going to set H equal to 20 so that's all we're doing in the Constructor and then we have another method to print out the H variable on the screen so we'll name that print crap because that's my favorite name for a function if you couldn't tell already so basically what we're doing is we have a variable called H and we're going to print it out on the screen and you're saying all right then what the heck's the point of this tutorial well I'm going to be printing out this variable in three different types of ways the first way is normal like we talked about before and the two different ways are using the this keyword now we don't know what those mean yet so that's why you need to watch this tutorial so now that I got you hooked and anxious let's go ahead and start coding this Constructor so again as I talked about we're going to pass it in a variable and or I mean I'm we're going to passing in a value there we go I got a little tongue twisted and we're going to set the variable H equal to that value so say we pass it in 66 it's going to take h inste equal to 66 simple enough so now let's go ahead and start coding our print crap method right here so let's go ahead and make void Hannah print crap and it's not going to take any parameters like I said it's just going to print some crap out on the screen and let's go ahead and make a template first and endline so this is what I do whenever I code by myself I probably shouldn't do this whenever I'm making tutorials but I basically make a shell of whatever I can and then fill in the blanks so the first thing we're going to want to print out is what H equals and it's just going to be you know H so say we passed in so say h is equal to 99 it's just going to print out H equals 99 on the screen so now let's get into the good stuff the me of this tutorial and that's the this keyword now I'm actually going to be doing this tutorial a little bit different than before in order to teach you guys the full concept I'm actually going to make my entire program first and then walk you guys through it I usually you know um walk you guys through what I'm doing as I'm typing but it's going to be easier to understand if I actually make my whole program first so this H equals this H this is going to print out another kind of H which I'm not going to tell you yet but trust me you guys will know by the end of this tutorial and actually this weird kind of H is also going to let me add my equal signs equal signs I know you guys are anxious to uh see what this all is but I'm not going to tell you guys yet so now we're basically printing out H in three different kinds of ways this way this way and this way get it this way H it's a cheap little joke but anyways let's go ahead and now we have to create an object to actually call those functions so Hannah ho and let's just pass it in like 23 or something like that so first what this is going to do is it's going to take the value of 23 and set it equal to the variable H so whenever run this program it's going to print out 23 23 23 so now after that we of course need to call Print crap right like that so let's go ahead and build and run this and see if I got any errors which I did because I forgot a semicolon let's run it again and check it out H equal 23 makes sense we already knew that now this Arrow H equal 23 all right right uh we're not exactly sure what that means and whenever we use parentheses star this.h that equals 232 so basically we can see that these are three different ways of printing out the same variable so we already know that whenever we print out um a private variable we can just use that private variable name and it prints out the value so we already know what that one does from you know the last 80 tutorials so let's go ahead and Skip right on down to this one and that's this Arrow H well remember in tutorial like 42 or something I told you guys whenever you use the arrow it means you're going to be working with a pointer so that's kind of weird so that means this is a pointer well yes it does in a C++ program whenever you use the word this it's actually a keyword that identifies a special type of pointer the keyword this stores the address of the current object that you're working with sounds kind of weird huh so that's why I actually needed to build this entire program first because I needed to build an object and the object we're currently working with is ho so whenever we use that object ho it took the address of it and by the way Ho is stored somewhere on our computer in memory deep down you know some weird location but it took that location and it stored it in the keyword this so now the this keyword identifies a special type of pointer like I said that stores the address of ho if we made another object called Bo it would then hold the address of Bo so whatever object you're working with it's going to take that address and store it in a pointer called this so basically it's saying the address of ho use that object and that object has a variable H so that's why this and this are basically the same thing and you're saying r right so if there the same thing why does this work and why does this work this whenever you print out H it's just implied that whenever you're working whenever you're here let me say it like this whenever you print out this variable right here C++ assumes that you're working with a current object whenever you pronoun like this way using the keyword this it's basically explicitly telling C++ so this is you know just assuming that you're working with the current object but this is explicitly telling C++ you're working with this current object it just you know a different way to do things but uh actually this keyword is pretty important I'm going to show you guys why it's actually useful aside from just printing out variables so basically what I want to stress you guys in this tutorial is whenever you use the keyword this it stores it as a special type of pointer and that pointer stores the address of the current object in this case was Ho so this is saying the address of ho get that object and that object has a variable H and H is equal to what did we said equal to 23 so that's why this prints out 23 now that I confused you guys let's move on to this one down here now this is basically a different way to access the object the this with a weird pointer and then surrounded by parentheses this is called d referencing a pointer and what this means is it's literally taking the memory location of the current object which is you know some long heximal x0 j42 yada yada and it's taking that memory location of the current object and calling the variable's value right there so this is basically saying all right whatever current object we're working with which is ho that ho has has a variable called H now print out the value of H and this you know just assumes we're working with ho right here we're saying we're going to be using the this keyword to talk about ho and right here we're using the explicit memory location of the object hoo so this is basically implied explicit explicit just two different weird ways of doing it so now that I taught you guys that in the next tutorial I'm going to show you guys why you would use the this keyword and you know it's not just something that you can use to show off that you know more about C++ it actually is useful in some programs so maybe the next tutorial will be a little bit more useful but for now that's all I got for you guys so hopefully I confused you guys if you need some more information check out my website the new boston.com and you can ask me a question there but for now thank you guys for watching and I'll see you guys in the next tutorial