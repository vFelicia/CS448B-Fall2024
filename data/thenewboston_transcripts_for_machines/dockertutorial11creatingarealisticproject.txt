alrighty guys welcome back and in this video what we are going to be doing is finally getting our hands a little bit dare tay and creating a real world project using express and the purpose of this tutorial is basically to step away from theory a bit and take a look at the beginning or simple structure of what an actual project would look like so i'm already in my desktop right here and i'm just gonna make a simple directory called website and then i'm going to cd into that all right so in this example we are going to be creating an express app because to be quite honest it's very simple just to get something up and running very basic web server and all this web server is going to do is it's going to have one page on it and when you go to the home page this is going to print out like hey now or what's up or you know just some text on the screen so we are going to be doing that in an indexed js file because this is actually a way that you can write javascript on your back end pretty cool and if you don't know what every command means don't worry the point of this tutorial isn't really the javascript or express it's more just getting a simple project up and seeing how we can run this in the docker container so the syntax for this is express and we are going to require the express package and then the standard is just the name of app and that is equal to express and now we need to give it two more simple commands two more simple instructions the first one is we're gonna say whenever someone goes to the home page send back a simple response printing out some text on the screen and the other command after that is we want to say for this application we want to run it on port 8080 just so our computer and docker knows what process or what port we're running this process on so to do that the syntax for this is app get and the first parameter is the path so this says whenever a user tries to visit the home page so if we had another page like name bacon it would be something like that but we're just talking about the home page your root directory so we can just use that forward slash and the other parameter is a callback where it takes the request and the response and that's why you got this nice little shorthand syntax and we can use arrow functions actually and all right so whenever the user visits the homepage of this awesome amazing app as a response we are going to send back we'll just go with uh hey now brown cow haven't used that one in a while all right so that's uh basically it for our app as far as the logic is concerned the only other thing that we have to do now is instruct our application that we're going to be listening for this on port 8080 and it actually doesn't matter what port you are listening on as long as it isn't already taken by another process but 8080 is typically one that isn't used often and kind of good for development all right so just as verification that we can um check out that everything's working whenever this app starts up and begins listening we are just going to log something out and the user isn't going to see this it's not gonna show up on any um like home page or anything like that this is just for us so we can kind of just check things so say listening on port 8080 all right and i missed a couple of semicolons here but other than this this is basically all we need for this app again i know this isn't an express tutorial but look how easy it is in express the creative backend that's where we're going with it for this tutorial so what i'm going to do is actually exit out of there make sure we save it and okay so so far we have a website directory with one file in there called index.js and this is essentially an express app that returns a simple web page just the homepage so where do we go from here well for those of you familiar with javascript applications what we are going to be looking for is a package.json file so we're going to be creating this and this is going to be super simple all we are going to need to be doing is creating really uh two key value pairs the first one is gonna make sure i spell that right dependencies now dependencies are just telling our application what javascript packages does this depend on now if you remember we imported a package called express at the top of index.js and that's the only package that we need and the this field right here the value of this is actually the version of express however we can just use star and say any version works for this we're not too picky with this tutorial now after this we are going to make a custom script so the scripts and i'm just going to name this one start again the key is the name whatever you want to name your script and the value of this is just the command so it's kind of just like a shortcut and in this case the word start is going to kick off a process that's going to run node index.js so essentially whenever we run npm start what node is going to do is it's going to run this index.js file and this is basically our web server it starts up the server runs it on port 8080 and then whenever someone hits the home page then it just says hey now brown cow i believe that's what we wrote should probably remember this it was like two seconds ago but whatever all right so this looks like it's good to go so i'm also going to save this all right so if you run ls we see that we got index.js and also package.json and believe it or not those are the only two source code files that we need to run this application so one quick thing that i want to point out is this in our package.json file we have this little command where we're going to run npm start and what this is going to do is it's going to run node index index.js now there are two keywords i just mentioned npm and node npm start and node index.js so whenever we build our docker file we need to make sure that we have both of those things because remember our docker file is like the instructions of whenever you first start up a computer this is what you do now if you ever just put together a normal computer stuck the hard drive in the ram turned it on showed your monitor node and npm they don't come with that computer you need to explicitly install those so what i want to do first is actually show you guys what happens if you try to build this image without installing those first and i know this is going to break but this is a typical error that you're going to see so i want to show you guys what it looks like and how to work through it so of course create a docker file and the first keyword that we're going to use is from and specify our base image now we're just going to be using alpine however i want to tell you right now that alpine like you probably already know by now it's the very bare basic strippeddown version of an operating system basically it's not going to have node or npm installed so this isn't really going to work in this example but again like i said i want to generate some errors on purpose here so after this what we're going to do is run npm install so what this does is it actually takes all of your dependencies in package.json and remember we had one called express is going to download it from the internet and install it in our application so this is what this command is going to do and remember is a default command what we are trying to run in this example is npm start this was the helper command that we wrote in our package.json file so okay let's just go ahead and save that yep looks good and we can go ahead and since that file is in the same directory docker build period and let's just see what happens all right building building looked like things were going good for a bit but yeah it errored out on run npm install let's see if we get some more details here run npm install npm not found all right so if we go back to our docker file we did see that okay when it got to this line right here it bugged out because it said npm not found where is it you told me to start with alpine which i did which came with nothing by the way bucky and then you told me to run this and i got all confused okay so what do we do in this example we got two options first in this line right here i don't know why i chose b for that and this line right here what we could do is we can explicitly install node which comes with npm now that sounds like a lot of work and as you know i'm pretty lazy so i'm gonna look for a different solution and this is what i would recommend the majority of the time