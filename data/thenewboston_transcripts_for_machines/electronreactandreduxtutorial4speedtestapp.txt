all right everybody welcome back to another tutorial and in this one we are going to be adding on to our collection of amazing apps we have right now of course this beautiful chat app as we saw this amazing University app that has one bit of text beautiful and the next thing we're going to be working on is a speed test app and you can probably guess just by the name exactly what this is going to do but just to review the logic real quick what we'll have is something where we can select what network that we want to use in my network I just mean server right now so if I use those terms interchangeably they mean the same thing but basically selecting what server we want to use and then what device we want to communicate with and then after we select those there's just going to be a button on it where we're going to send a request to this device and then we're going to wait for the response and then we're just going to see how long it took and log it out so uh not the fanciest app but it can showcase a lot of the features that I want to showcase so so there you go and before we get started writing any code I did want to kind of go over the UI real quick so kind of like we have right here so we have for both accounts actually for these accounts and the network we have a logo on the left and then we have like the display name for either the network or the account and then kind of the full name down here and for accounts you can just call it any account that you want and then the full identifier for an account is the account number but either way we're going to be using the same layout for basically selecting which one we want to use so let me just kind of put this together real quick all right so for the top section is where we're going to make our selections we'll say that uh this can be that logo and then for the text what can we have actually this will be left aligned and we'll say uh actually we'll just call it top text all right that's probably good right there so one of these is going to be the network and one of them is going to be the account R rate so we'll have two of these on top and then whenever we select it the info is going to show up but to select it let me just get a little pencil icon okay so I don't know if we'll use a pencil icon for like the selector but it'll be something like this where one of these like I said is going to be for the network and one of them is going to be for the account and then you just click a little pencil to select it and then when you do we'll have a modal pop up with the list of all the either networks or accounts then you can select it right there and then another thing that I actually wanted to uh make under this a little UI element is let's do this the connection status so the connection status is going to be pretty simple it's just going to have a little indicator light or UI element and then it's just going to give the status to say you're connected or not connected so something like this all right so again the basics of it whenever you open the app you're first going to select the network and then you're going to select an account and then this is going to display showing you if you're connected or not and let me actually move this over get this centered in the screen a bit all right so once we have those then we have our connection set we can then have a big button in the center obviously shapes is what I'm looking for and I think I saw on a couple of different apps don't mind that uh those cops outside all right so I have some kind of button that says like go or start test or something like this but anyways let me zoom out a bit now anyways we'll have a button that says go and this is going to start the test and then once we have that test pending or in other words the request being sent we'll have a little timer underneath and it'll be like 1.2345 seconds something like this we'll fine tune it later on I just kind of want to show you what we're going for before I just start writing a bunch of code so okay uh let's actually do this so I'll say um for the device we'll add some dummy text right here so we'll say I want to connect to my iMac in the account numbers abcdf yada yada whatever and for the network we'll say we'll use actually pretend we're using that VTX Network and this is the like a shorthand display name that we gave it in the full identifier is withaxia.com so it's going to look something like this hit go it kicks off and then under here actually this is kind of like the MVP this is what we really need to make something that we can call a speed test however for our MVP in I don't really like to add a bunch of clutter uh like nonnbp things to an MVP but there is one other thing that I want to add in this tutorial and the reason for that is because I want to show how we can store data long term so by that I mean whenever we close down the app and open it again for example we uh just open this again or I think I showed this in the last tutorial but basically whenever we close down the app and open it again we don't start from a blink slate every time we can keep those like historical chat messages or previous uh test data so on and so forth so that's what I want to do here and for this we'll just have a little history section on the bottom to line this and again all this is going to be is a table with our previous runs so we'll have something like actually what data would be there like uh on the VTX Network you connected with what was this device name iMac iMac and we'll say the date is uh we'll use this date so 11 12 22. and something like a 1.2345 seconds whatever that okay so something like this we're going for now let me just scroll out if I can find where I just put that okay so this is the app that we're going for that's kind of small right now but there you go now let's make sure I got all the elements and uh yeah looks good so hopefully whenever we develop this it's going to look a little bit more pretty than this but we'll use this as a template whenever we structure all of our components and with that being said I think we're ready to start hopping into the code so I already have this ticket written up in the way that I name my branches is actually based on these tickets so I start with the ticket or issue number and then I just have some text so this is speed test ticket number 71 so when I create my branch actually can stop this app for now all right so I'm going to create a new branch and I'm going to call it 71 speed test create that and okay now how the heck do we create an app on tnb OS so whenever we create an app what we want to do is we want to hop over into this apps folder these are all the system folders we're going to be talking about you know the internals of this later on but right now we'll just stick to app development so when you expand this you can see all the existing apps right here so this one right here the chat and the university these are the two apps that actually I don't know like look like apps on the thing there's also that account manager network manager which are like system apps which um just want to tell you that like all of these things are called apps not just the ones on the left hand side so the first thing that we're going to do is we're going to create a new directory and we'll just call it speed test all right now inside this directory we can kind of Take a Hint from University this is the basic structure of an app it's going to have a directory called assets a directory called containers and a file called registration now assets are for as you can guess like the the Assets in in this case the one thing that you always have in here is the app icon now containers you can probably guess this too this is where all of your containers and um kind of like your react code is going to go and lastly we have registration right here and this just contains some data so basically letting tnb OS know that hey this app is ready uh you can now register it in other words like hook it into the system or make it appear on the bottom taskbar so let's just go ahead and create that structure right now so assets and one called containers and then we'll go ahead and make that typescript file registration beautiful all right so once we have our basic structure set the very first thing I'm going to do after this is inside containers I'm going to make uh let's do this so I'm going to make a file called index dot TSX and this is going to be basically the main window now for this we just can't start writing like divs and styling this however we do need to wrap this app in one component called app window and I'll show you in a second what this um app window component is it's basically just a wrapper where you're going to pass it um two props I believe class name and display and it just includes all the logic so when you click click the app icon then it displays the app when you click it again it hides the app and it's pretty much just have it so it's already plugged in you don't have to write that logic by hand um the goal of kind of this platform is to make it as easy as possible for any other developers to create their own apps so this is just one of the things I abstracted out but anyways this component can be found in system components app window and I'll just go ahead and import everything right now so app props and I'll talk to you when we use these in just a second what everything is but for right now I just want to kind of take care of my imports and also I did make these kind of uh cool little helper templates um for every or I want to say for most components that we write they are going to come with a Styles file and this is just so that we can use styled components if you're not familiar with style components fear not because we're going to be going over that as well for right now I just want to get the basic structure like I said but either way for these Styles which essentially is just like a bunch of CSS but we can do some cool stuff with it we want to import it into our component file so I'm just going to import everything from that file so import it as s from my Styles file and good go so those are the only Imports that we need now we can just go ahead and start creating our component which is going to be a functional component so I'm going to say const and I just named this one the same name is the application so I'm going to create a function or excuse me a functional code component called speed test and the type of this is going to be this sfc so before we go any deeper let's just go ahead and look at what this sfc type is all this fset sfc little tongue twister there is is basically a react functional component but we pass a couple different things into it one is this class name optional attribute right here and this class name attribute we're going to be getting more into it later on but just know that since we're using styled components a lot of them are going to require this specific property name called class name and then in addition to that we also have this right here and for those who are not familiar with this record keyword in typescript this is just saying that we're gonna also be passing in an object whose keys are of type string and whose values are of type unknown and the reason that we do this is because we're also going to be passing in like any other custom props to our component so okay so we have uh basically a spiced up functional component now inside here we are going to be passing in these app props so let me go ahead and take a look at this interface right here so all this interfaces is it's saying that we're going to be passing in a display prop and this is actually the prop that we're going to pass into our component to say are you the component that's supposed to be displaying on the screen right now now we have this because you know this operating system error quotes it isn't quite as fancy as other operating systems right now so we can only display one app at a time hopefully that'll change in the future but for right now everything is hooked up where if you select the app by clicking the app icon this display property is going to be set to true and then your app's just going to be displayed all right so easy peasy and now for this let me go ahead and destructure those so again class name and display are those props that we want to pass in and for this we can actually let's write it like this okay so we can go ahead and return one thing now again as the top most parent component that's going to be our app window right here and for display we are just going to be passing in display and this is going to take this class name as well and yeah so this is pretty much the basic structure for all of the apps that you create our content what you think of is the app the UI all that's going to be going nested inside is a child but this app window component is basically just uh taking care of the logic for you and yeah basically so once we have that actually let me go ahead and Export this right now so export default speed test and our right and now after this we'll go ahead and all right so this is the basic structure everything we need however instead of this div right here we actually want to convert this to a styled component and we're going to call that style component container so I probably should have uh went through this line by line but either way whenever we use style components the first thing we're going to do is we're going to import this keyword styled right here and then since we are going to be essentially creating a div component what we're going to do is we're going to create a constant uh I keep it name uppercase and then you set it equal to style dot the basically the HTML tag and in this case it's div now inside these ticks right here is where you can basically write all of your CSS so for example I'm going to write background and we'll change this later on but just to get something on the screen we'll just say that we're creating a div and it has a white background that's it and I'm going to copy this container name because what we can do now since we imported everything is s we're going to replace this div tag with s dot container all right and make sure to get that s dot container so what this is doing again just the hammer in uh for anyone who's not familiar with style components whenever we render this it's going to look and see hey what is sdot container and it's going to say oh it's a div with a white background so it's going to convert this to a div with a white background and then we're going to have the text hey in there and just to style this a little bit more um so I want to display this is flex because what we will do is yeah I don't even know if we need well actually we can keep it right now since what I want to do is kind of pretty much just recreate that University app where we just have a box in text in the center for the time being but this is all subject to change I just want to kind of get everything up and running for this so align items Center and also Justified content Center this is just gonna make sure our text appears in the center of the screen now I also want to put a little border radius on this of eight pixels just because having the app with square edges or square corners it looks a bit weird and I also want to have a little box Shadow but I'm too lazy to type it so I'm just going to copy it from the University app all right a little slight box Shadow right here and then I'm gonna give it a height and weight or excuse me height will just say uh 60 again we're gonna have to adjust the height and width as well when we start actually putting those components in there but uh all right so line items background border radius yada yada yada okay so this is good so pretty much just a white rectangle with text appearing in the middle a lot of work to do but it'll do for now so now that our basic container is looking good our basic app is we have it right now the next thing I want to do is just find an icon and I have this site that I use quite often just uh flat icon.com pretty cool site and let me just type speed and pretty much just pick the first one this one looks alright all right and uh for this what we can do is just save image as and I'm going to call it app icon this is already a ping so that's good that's the format that we want and uh yeah just a shout out to free pick thank you for the icon and also another shout out to Flat icon I I really do like the site so uh yeah give credit where credit is due so assets and let me pop open my downloads and I'm just going to drag this app icon ping into assets webstorm always does that I don't know why but you gotta do it twice okay so I now move that file into assets there you go looking good and the last or one of the last things that we have to do is we need to fill out our registration file now to see what we need for this I'm also gonna use this University registration as a template just to make sure I don't have any typos or anything and all right so I'm going to replace everywhere it says University with speed test and missing one but we'll get to that in a second so the first piece of information that we need to give it is this app icon so again this is just a reference to this file right here so app speed test assets app icon in the next thing that we're going to be needing to give it is the location of our root app component and that's just the component that we just created it's actually our only component right now and then after this we're going to be importing a couple types and that is app icon type now basically any app that you create I'm guessing that it's going to be an image there's also this path that we're using for system components since we're using icons for those but really this is like 99 of the time unless you really want to use the icon it's just going to be an image or a ping file and then this registration right here uh it's basically just all of these keys and values we'll take a look at this real quick this is just saying that this registration is going to require an app ID and this app ID right here this is just used for I don't know some of the internal Redux portion of it basically whenever you click the app icon on the bottom it's going to set this app is the active app or in other words in form tnbos that this is the one that's going to appear so it just needs a unique name and I just do the camel case of whatever the app name is but uh yeah just make sure that you know it's just a unique name and for the icon of course we'll just say app icon it's an image or a ping file and a system app this is always going to be false for you it was just true for like one of these apps like the uh the account manager and the network manager but for any of the apps that we create this is always going to be false and there you go now from here we're just going to export this speed test which is that component that we just created and I'll show you why in just a second and also this registration that we just filled out so once we have this registration filled out all we need to do is basically just register or hook it into the main system and I'll show you what I mean by that so inside this apps directory right here there's this TSX file called the registry and this is pretty much just uh the final process where we pretty much let let tnbos know that a registration is complete and to render the app when needed so let me go ahead and do this so we'll import these two things speed test component and it's registration from apps speed test registration and then after this in app registrations you just need to go ahead and include that and what's going to happen on boot is it's going to go through all of these check all the registrations and from here it knows you know how to hook this up in Redux its identifier well icon to use so on and so forth but all this is taken care of in the background the only other thing that we need to do one more line of code before this bad boy is up and running is in here we need to actually render the app out so I I was going to copy it but I'm not that lazy okay so under chat what we can do is we can just render the app and for display right here what we're saying is we want to display this app whenever the active app and this is going to be the value that's stored in Redux whenever it matches this app ID because remember I said whenever we click that icon the active app in Redux is going to be set to this ID so whenever that's the case we just want to say display this app on the screen so we say active app whenever it's equal to the speed test registration.app ID in other words whenever it's equal to speed test then this will be equal to true and therefore it'll basically say display this app easy peasy so if everything works correctly then I believe that now we can go ahead and start this bad boy and check it out hopefully this works come on come on no way I mean with me all right let me minimize this thing so check it out so we have our chat app as before and our University app but now wait for it boom look at that says hey right now but I'll show you that we have hot reloading working as well speed test and again since we have all that set up we don't need a refresh or anything and there you go so three beautiful apps the beginning of what will soon be the most popular operating system in the world all right well at least in my apartment maybe but uh hey I Can Dream right all right and uh that is the basics of how we create an app in tnb OS and well even though we got an app we still have a lot of work to do before we actually can click a button and kick off all this stuff to actually communicate with other devices but I think that's probably good for this tutorial so as always thank you all for watching and in the next one we'll get started on the UI so see you then