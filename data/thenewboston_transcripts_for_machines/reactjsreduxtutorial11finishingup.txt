our OMA so we basically already learn everything about react and redux and right now we have a little bit of our store called active user a little chunk of memory that's always equal to the active user whatever user they clicked on so now all we have to do is just build a container to display it now I just have their picture in their user name age below whatever so just like before whenever we made this container it's pretty much it's going to be the same so this was user list and that's what this is a container that displays all the users and I'll make another one called user detail to kind of display more details about a single user so and we can probably steal a bunch of stuff from user list so what do we need or need react opponent connects all right so we need that we're going to connect it so we can pass in props and all right so I can even copy okay I'm not that lazy pretty lazy but not that lazy so we're going to make a component which is a class I'll just name it easier detail and it just kinda extends or inherit from component now remember all a container or component is is just a little from class essentially that returns some HTML so we just call render and you just returned some HTML it's going to be across multiple lines so creative all right so what info do we actually have all right so the they have an ID I really don't think we need that the age description and the thumb now and with thumbnail is just like a little profile picture picture of them alright so let me do that first I'll say image resource is equal to this dot drops dot thumbnail but actually we didn't even pass in the user as a property yet but we already know how to do that so instead of typing it again Lola just copy this alright so any time we need to throw extra information in here remember I already explained we map state to props that gets a little piece of state from the entire store and then we can pretty much just pass it in now here is the thing right now we're passing in users list which is the entire list of users remember for this user we only want the active user the user that was selected so instead of users in here we just need an active user and we shouldn't call it users because that implies multiple ones is just going to be equal to one so now we have the property of user available right here which is the active user and then this is just going to display their thumbnail and I'll display like their name so say h user first and last all right now I think we got age so we can do that make a rest of them H 3 so we also want to display their age and I'll say description the description is just like a little snippet about in like Oh Bucky loves baked beans that's him pretty cool all right so this is all formatting just format it style it however you want boom roasted so this is undefined because remember we need to connect it using this in alright I'll just type it all you have to do everything here so export default because if we just use this right now it's just a dumb component but remember we are making a container because it's we're pretty much redux off' eyeing it as the most unprofessional work no one ever repeat that all right so we're just going to connect the redux state to the components props that's what makes it a container and what component do we want to make into a container user detail so now instead of returning user detail which is a dumb component we return a smart container there we go so now we actually have to use this in our main layout so if i go to main layout which is right here and i need to import it containers user detail boom roasted toasted there you go all right now I believe if I run this I'm going to get an error because of one thing that I want to point out yep so let me see if this even shows all right now if I can show this art so it says cannot read property a thumbnail of no wait a minute let me hop back here use your detail alright so it looks like we're passing in everything properly let me just go to my yeah we do have called thumbnail or right here so huh so this is what's going on and this is what I was saying earlier that you kind of need to give everything a default value so a lot of people think whenever they see this that likely so that there's a problem with thumbnail but that's not the case what's happening right now is this you see it's looking for a piece of data called active user and it's saying alright this is actually equal to no that's because what we did is by default whenever the app boots up since we didn't select any user yet this piece of data this reducer is equal to null all right so why did I do that I did that because whenever we set up in this kind of way we can actually add a check so this component right here usually is supposed to print out the details of the user but what I want to do is I want to say whenever my app first boots up and this is equal to no AKA we don't have any user yet then we can check for that and return something else so actually if you do something like this set equal to just a default object then watch what happens everything works properly but it's kind of weird because we got this little space for age in description and nothing's appearing so the user might think that there is an error so it's returning something a default object but this object is equal to blank now the rest of my application will work perfectly I can never grab this thing there we go but again like I said whenever it first boots up it's a little bit weird so that's why what I like to do in certain cases is set this equal to null but if I do that I get an error unless I check before so what I'm going to do is I know right now my at first booted up this thought perhaps that user is equal to null so I'm going to test for that so say if we don't have any user we don't have any active user yet instead of rendering this which is the users details we can't do that because there is no user selected what we're going to do instead since this container needs to return some bit data I'm just going to go ahead and return actually make this like a heading two I'll just say select a user all right so now let me redraw this and check this out so now actually you don't want to make this a heading I'll just make it like odd actually make it a heading for very particular about these things all right so in my mind this is a much better application because we don't have like parts of the detail that aren't displaying what we have is just a little indicator that says hey select a user you don't have any user selected yet and again this is equal to no but it's fine we're not getting any errors we're not trying to render anything that we shouldn't be rendering so now once we select the user that causes an action to occur what action the user selected action and now the active user is equal to the payload which is essentially the user now once that happens then this is no longer equal to null and this gets called right here which draws all the information properly so boom roasted toasted look at that so that ladies and gentlemen is react with Redux thank you