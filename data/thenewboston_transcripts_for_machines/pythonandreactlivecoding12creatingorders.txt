all right everybody welcome back and in this video what we're going to be doing is continuing on our shop app in the last video we made a lot of progress we have our add to cart and remove from cart button and we also built a bunch of address management logic so that was cool now in this one what do we got left so yeah just a little indicator we have five days from a launch day so I'm really hoping I can knock out a lot of these features today but we have some of the remaining add to cart logic just some Edge Case Logic that we'll talk through in just a bit and then the checkout page and then of course the orders pages so the checkout page is going to look something like this in the orders Pages something like this so like I said five days left until Go Time so really hoping I can make some good progress today now another thing that I actually saw while I was like starting up my environment for today was that I went to this bacon and I was just testing out this add to cart button and I got an error and that is because even though I have the item in my cart as you can see we aren't fetching these cart items whenever we log in so that's what I'm actually going to do right now kind of just a housekeeping item before we get to our good stuff and let me see if I can remember where I put this so in app all right so probably the authenticated layout since in my layouts right here this is what gets shown if the user isn't logged in yet basically the created account or signin forms and the authenticated is of course once they are authenticated then this is what we show them basically our main layout so in this case we are fetching a bunch of things and what I also want to fetch is the carts and dispatchers that would be in car products get card products products and get cart products and we'll just fetch it right here at the very top and also there is a way I can make this more efficient using promise all so let's do that as well actually let's test this all right and there we go we now see when I refresh the page it made this fetch to cart products and then I have a car product right here but we don't have the logic for this page yet now another thing that I do want to do is I can just wrap this in a promise all so right now what's happening is this request is being sent and it's waiting for that and then after this request is being sent we can actually fire all these off at the same time don't make this more efficient I just want to get the Syntax for promise all and there we go so yes this will allow us to Spectrum all at once card score has changed all right it's beautiful and now let me just go ahead and refresh this actually I can log out and log back in again and then hopefully I get my cart products beautiful okay so now let's see what we got to do okay now actually before I even get to this I know kind of teasing everyone with a lot of prep work before but one thing that I also noticed is that I have two realistic items in here and one bacon I just want to change this to uh something more realistic just so I'll say this mug right here just so we can start having some actual data in here and actually need to download that tnb mug all right so the name of this can be tnb mug replace it with this image and I'll say coffee mug and that would be product 11. did I say that should have yep okay so there you go and that was actually interesting why didn't that not refresh that is interesting so I'm not refreshing these when I go through the details page okay so let me add a todo for that as well since you see I just made that change and then I tried to refresh the page assuming they would uh be appearing on here but yeah it's not happening in fact I wonder if let's do some quick QA let's first log out and then log in and then on this page go to this URL directly and this doesn't show anything because I'm not fetching that product again so in here we'll put a use effects let's say fetch the details of the product from the buy product Details page all right so maybe we should just do this right now ID for params okay before we get to that I just want to make sure nothing is breaking and all right so basically whenever I go to the URL directly I should be able to fetch this product information instead of having to go through my product catalog first so let's actually do we even have that end point so get the products get product details is what we're looking for I'm saying gets products 11. okay so we do have the endpoint but now the question is do we have a API and that would be products yeah so we have it for crate delete git and update but no product details and I'll just say get products is what the name of this will be great and to fetch an individual crate and or create a get product API function fetch an individual product e by by ID now let's pass this in and yeah should be good okay and another thing I want to do is just make sure that pair core wallet I'm just seeing if I have any other existing design patterns wires no okay so it should be good and now I'm gonna have to do it for a dispatcher as well all right so get product this is what I was looking for all right so get products is what we can use on our product catalog to get um a list of all the products get product allows us to pass in an ID and we're going to get back a product these look good now create great now create a dispatcher function for that and Port it yes and then create this get product get product wham bam a little bit toe jam getting products again products again products getting products okay now let's read through this so to get product you pass in an ID it's gonna make an request to the endpoint and then it's going to set product since it's an individual product we get back response data data looking good okay so now we can just dispatch get product in a similar fashion from the product Details page similar to this right here okay so use effect and we're going to be needing dispatch what you got for me already okay dispatch let's actually just use this a b c d e f g okay so I want to say um first of all I don't need to rename this okay so what I want to do whenever I mount is get product error fetching product it's gonna be there message and what I'm also going to do is pass in the ID which is gonna this ID is going to take a number actually right get product it's going to take a number so I need to parse that and then I will say at the beginning of this I have no ID return fetching credit details okay so now I'm gonna say that when this page loads if you don't have any ID which you should but if not just return it otherwise then just try to fetch the product details and if there's any error with the API then just log this error message all of these look good so now let's go ahead and check this logic out again so that's good that fetched all right so now what I'm going to do is log out log back in again and go directly to this page and now hopefully it makes this request to fetch the product details and all right we're good to go looking good looking good and I now got this mug removed from cart add to cart we are looking great right here okay so now we can actually get to the logic that I uh wanted to write right here and the logic is this basically right now I have one item in my cart uh I'm logged in this Bucky right now and this is from Amy now I'm able to add different products from Amy to my cart that's fine even if they have different uh core prices for example this is in VTX and this is in tnb however if I add a product from someone else other than Amy then we don't want to allow that in our system because then we're like have a weird ux issue that we run into we're like placing a single order from two different Sellers and it's just a pain at least for MVP so in this case what I'm gonna do is check this on the front end since we're already checking on the back end but we don't want to have to hit the back end just to tell us we get air back and also we can just validate this on the front end so we never make that request in the first place so that's what we're going to do and to do this I'm actually going to create another user actually let me do this I'm going to create an invitation and I'll just say uh all right so I'll say Bob one two three and there's no user yet and then I'm going to log out I'm gonna create an account and this is going to be for Bob whose password can be bacon one two three four five bacon one two three four five invitation code Bob one two three and well why did I get a bad request invalid or used invitation code wait did I never create this safe and embarrassing all right now create it in actually I want to write down one sec I gotta write that down okay so Bob has a password bacon I was bacon one two three right yep no bacon one two three four five okay let me just log out and see Bob bacon one two three four five beautiful all right so we are looking good on that and now that I am Bob right now my name is Robert Paulson okay now what I can do is create a new product so what product do I want to create how about these elephants elephant uh images all right Bob you are going to create a little mini elephants uh these are uh cool looking figurines f i g u r i n yes I think that's how you spell it and what did I name that elephants.jpg uh I'll say uh tnb since Amy is selling for VTX although it doesn't really matter for what we're doing here uh the price of these they are pretty nice elephants so I'm gonna say four thousand and I only have one set little mini elephant set I'll say and I'll say two cool I only have one set and I'm going to activate that product okay all right Bob we are now selling elephant figurines now I hope Bucky loves them because Bucky's about to log in right now and check it out so Bucky already has an item from his cart in his cart from Amy but now Bucky's looking at these elephants and wants to add them to the car oh but he can't why because it says you can't add products from different sellers to the cart all right so that is what we want however what we're going to do now is instead of making this request to the back end to find out that we can't do that we're just going to display a little warning on the front end and we'll also give them the option to say hey you're not allowed to do this however if you still want to overwrite your cart then you can just go ahead and do that now I already wrote some this logic in tnbos but it's actually okay so I'm on the byproduct Details page I think all right handle add to cart click this is where it's going down now this is where I want to display that modal all right and in tnbos where are you at so Source apps shop pages is it byproduct details cart warning modal okay so in my modals let's look what this car warning model is to get rid of you this product has a different seller and a price Network so does this take any prop active byproducts this is interesting a whole different flow header warning okay so let's just go ahead and make this super simple for now okay all right so what I'm going to do is I'm going to throw up a warning that says hey you can't have products for multiple sellers in your cart would you like to create a new order now if they say no then we pretty much just close the modal now if they say yes what we have to do is we actually have to delete all the cart products on the back end and then after that we add this new product to their cart so I already smell some inefficiencies with having to make a lot of delete requests to the back end that hopefully we can optimize a little bit later on but for right now this is our logic all right so car warning modal we'll go with we'll go with the same naming convention cart warning modal since we only have one cart warning modal right now okay so let's go ahead and just create a new modal cart warning modal yeah that's good we can rename it later on if we need to but it's like that's permodal core modal great wallet model I just want like a simple model all right either way let's go ahead and just create a new component for this and then that is good that is good and do we want this I just keep it nice and easy I don't know if it's gonna have any custom styling but we'll kind of just uh keep it easy for now now for a modal let's see how I was writing these okay so for the modal let's let's use uh yeah trades model as our example all right so basically import this shared modal component and then you can overwrite The Styling for it all right easy enough so in the cart styles do this with a modal and then the modal implementation it looks a little bit something like this okay all right and what was my header of this just said warning this is going to take a closed prop I'm sure these did too all right so this cart warning modal props is going to consist of a close function that we pass in and then what we are saying yeah that there's just a div right here but this should be enough for us to get started all right and now in here what we need to do is we need to use pretty much the same thing use toggle all right so just stealing some previous patterns right here we're going to use toggle hook to toggle this on and off for this we're going to say cart warning modal is open toggle cart warning modal and that's going to be false by default so by default it is not open on the screen and then want to have logic here well another thing that we need to do is actually import this modal so we're going to say cart warning modal cart warning modal and then we have it's rendered alongside here can be interesting as well by product details is this going to mess up any of our styling I don't think so but let's find out all right so for that state we just added we are going to say if cart warning model is open then we're gonna render cart warning model otherwise render nothing and for the close we're going to say toggle cart warning model all right now for here what we can always do is just call toggle cart warning modal and then this is just going to allow us to test things so let me go ahead and add to cart we get our nice warning model and all right so this is eventually going to say something like um actually let me see that one more time The Styling don't look that great but actually let's tweak this just a little bit all right so first of all 480 looks like a better width for this and now we can say something like uh what did I say in tnbos this product has a different Cellar than the existing mine was in your car all right this is pretty good this product has a different seller in the system items in your cart would you like to create a new order which product has a different seller than the existing imaginary car would you like to create new order nice and simple huh all right and they can either close out of it or they can click yes and then if they click yes or submit or whatever you call it then it's pretty much gonna replace the items in their cart however many there are with this elephant all right so we're getting there we are getting there now in order for that to happen what we also need to pass in is a product and also we need to change this logic to figure out if we should throw this warning so in order to do that what I'm going to do is I'm going to actually make a hook and I want to make a hook because I'm going to make a bit of reusable logic to figure out who the cart product seller is and this should always be one user basically whoever um let me pull this up so right now since I only have a product from Amy in my cart then the cart product seller would be Amy and then what I can do with that information is whenever they're on a product detail page I can just say that if the seller of the product you're looking at doesn't match the seller of you know who you're already ordering products from then send the error and the reason that I want to make that a hook is because on my checkout page I'm also going to be displaying information from the seller so let's do that and I believe that in here active byproduct cart seller okay so I just called it cart seller so let's do this and this is easy okay so the cart seller is actually going to be I'll say cart seller ID well what was this did it return a string yeah I think I want to return just their user ID I mean I can return this but no need so cart seller ID now under hooks I'm going to make a new hook get rid of you first of all and I will say that this is a typescript file named use cart seller ID and let me just get I don't know I just want some boiler play right now so I'll say use core logo whatever and okay so refactor rename I'm gonna say that I'm creating a hook use card seller ID and this is not going to take any parameters use card seller ID and this is either going to return let's see a number or null so basically if you don't have any items in your cart it's going to return null otherwise if you do have items it's just going to return the ID of the seller who's ever selling those items okay so now what we can do is we can just get cart products from the cart product selector products all right and then we can use this same logic where um probably just something like this all right so we are saying that uh car product list all right so the card product list is just object values our car product now if there are no basically car product list the property seller doesn't exist on car product it's interesting types cart product oh wait it's car product oh wait I'm looking on my wrong thing here so cart products all right here we go so cart products have a product in that product ID like this so This should work let me just read through it one more time okay so using this Hook is called use cart seller ID we are first looking at all of our cart products then we're just getting pretty much the uh cart products themselves rather than the keys and we're saying that if there is anything in your cart then just get the first one and get the product sellers ID from it otherwise just return null and that should work okay and now uh close out of you all right so now in my hooks go ahead and bring this in available all of course seller IDs card seller ID okay so now in my hooks I can use use cart seller ID now let me just log this out to see what I'm working with all right so now on this page we should be logging out the cart seller ID and that is the wrong app so let's okay first of all let's see what we got in my cart so I got a product from I got tnb mug and tnb mug is being sold by Amy and Amy if I can find the users is user two so when I go here it should log out user two all right beautiful and now let me just remove it from my cart and it should say no awesome add to cart two beautiful all right so now what we can do is we can compare the product being added to the cart seller ID okay okay and that is product ID yeah Actually I don't even need that what am I doing here okay okay okay products all right so this is the product that I want okay so I will say and also this you know add a car click if there's no ID or no product okay let me do this when you're adding to cart there's no product return and now for the product I can just use the product ID and when you add a card let me just log out the product make sure nothing's breaking all right so when you add to cart we're going to log out the product and for the product seller this is product seller ID this is the property we want to pluck off to compare cons product seller ID equals product Dot seller.id and now what we are going to say is something like if product seller ID is not equal to the cart seller ID and we can actually just do this to clean it up then what we want to do is we want to toggle this cart warning modal and and then we can just return from there because what we'll do is we'll have all our smart logic in the Moto itself and while also pass in the product yeah that should work and then this won't go through okay yeah just trying to see if uh like after kind of just thinking what happens in here and if we should just return or let the logic fall through I mean you could write it either way just be tricky this conditional return or not so what I'm thinking is we might have logic similar to this in the cart modal because the pending on if they click submit in other words yes they do want to create a new order then we're going to need to have that logic where we delete all the existing products and then add the new products in the cart okay but now let's do this off the bat so I have a product from Amy in my cart now I'm gonna go ahead and add this one from Bob and I get this warning looks good and just to test things out I wanna have another product from Amy so let's say that this mushroom book we'll just change that to be sold by Amy as well this mushroom book is now being sold by Amy all right so I have one product in my cart which is this coffee mug and then this other mushroom book I should be able to add this just like that I can remove it I can add it no problems now the onprem comes when I try to add something from Bob this is when I get swearing this product has different seller than the existing items in your cart would you like to create a new order okay so now we are getting somewhere so now what we can do first have a button on here let me see if I can just steal it from one of my other models cart warning a core modal I want a form create wallet the form two isn't it nope okay so here why do I have a button container oh just to have some of that actually this all works alright so that's going to allow me to add a button in and that's going to come from here and check it out so this all right and for this button I just said yes as well okay so now let me actually stick this in a div Okay so uh when we click add to cart now it says this product has different cellular than existing items in your cart would you like to create a new order now first of all this model is way too wide freaking me out so let's instead of 480 let's go 360. all right that's much better and aside from that I also want to bump up this margin even though I said that this is mainly for all right let's go with 32. top bottom container 32. and what's this great wallet model I just wanna oh yeah that's if I don't have one so let's test that with Bob actually Bob that was bacon all right so wallet whenever you're creating a new wallet you get this button this actually doesn't look that bad boom yeah yeah all right actually let's uh do this I am going to revert this to 16 even though I don't like the looks of it but but because it's consistent that way it'll kind of act as a visual indicator to fix this okay so where am I at I have two products from Amy in my car I'm gonna remove this one at it okay so I have products from Amy in my cart now I want to add this one from Bob it says this product has a different seller because you have products from Amy you're trying to buy from and all of a sudden you say you want to buy from Bob now so like what's the deal yo do you want to change it yes and I need to have a click Handler for this okay so if they have if they say no or they don't want to then they can just click away or click this x I don't think I need like another cancel button here but if people get confused we can always change that later on point is I need to click Handler now to say handle button click all right now what's going to happen is if they click yes then it's going to call this function and what this function is going to do is first it needs to delete all of the existing items in your cart and then after it needs to add this basically create this car product actually it's logic very similar to this now what we also need to do is we need to pass in either a product or product ID and let's just pass in product ID because that will be easier product ID is a number yeah baby baby okay so on this yeah so I'm going to be passing in the product ID which is going to be coming from this product okay so product ID equals product.id and what I can also say since this product we allow it to be undefined what I'm going to say is to keep it simple if you don't have any product or just return null and actually in the left and right I don't know if we can figure this out no and just to kind of confirm everything I'm just going to log this out right now although we're going to be getting a little bit more fancy with it in the future but let's say that okay let me refresh this all right so now when I click add I'm it's a cart first gives me a warning now if I do want to override it and yes it's going to say just log out 16 right now but eventually uh what we're going to be doing is emptying the cart first and then once that's done we're going to be creating a new cart product with only product number 16 in it so we're probably going to do this the inefficient way first which is just let's say we have three different cart products we're going to iterate through each one and make a separate deletion request to the back end because we don't have any logic to just wipe out our cart right now and I'm kind of just thinking ahead to that logic because what we can do is we can make another endpoint on the back end to kind of simplify it just until two operations one to bulk delete your entire cart so you have basically wipe out all your products in one request so you don't have to like make three different requests one for deleting each card product another thing that we can do is instead of having that end point and then another one that we trigger right after to create this we can just do it all in one to basically say overwrite my cart with whatever product or products I pass in and that'll shrink that down to one request however yeah and I'm probably going to get yelled at because I have a weight inside a for Loop which is never good so what do we want to do let's think about this let's think I mean eventually we are going to need one of the later two systems I'm just thinking for MVP if we want to build this out right now yeah empty cart I think we do want this because then we can just call empty cart and then create car product so let's do it yep we're gonna do it we are actually going to do it oh man so pumped up okay now uh let's go to shop uh views car products serializers cart product hello back in haven't seen you in a while um and I'll just say create a new endpoint to empty your cart and we'll see what it comes up with to empty their cart there's my serializers and there's my views you can create a new endpoint called empty carts code for the currently authenticated user added this code to your product view set okay so make her post request did the URL path empty cart and I don't really think I need that URL path but let's see so empty cart should go right here in the action all right and let me just see if we had this action somewhere else all right so we had it in deposit yeah I don't think I need that uh URL path let's see let's see well first let's just call this straight up so that would be cart products slash empty cart and then I can just uh print user cart products and I actually want to rename this the car products okay so hopefully whenever I make a post request of this so post requests the car products empty cart what I should see clear my buffer shrink this so we can see what's going on here so what I should see yes is a query set of my cart and now they should be emptied on the back end so car products no more beautiful and now let me what hmm is that it's okay all right so now let me just try to do this without the URL path detail false you don't need it all right now on the front end let me go ahead and just all right so I'm going to be adding this that's interesting oh okay so what this is doing is erroneously throwing up this warning because this check right here where it's saying if product seller ID which is Amy in this case I'm buying from Amy so seller id2 if it's not equal to the cart seller which is null then it's going to throw this warning but I also need to check basically write something like this all right so if cart seller and all right so if there is a cart seller ID and the cursor ID is not equal to this person then you get the warning sure that logic is refreshed and all right so that looks a little bit better all right so now just trying to add with Bob that's when you get the warning good good and what was I going to do now oh yes so we updated the back end to remove that endpoint explicitly in The Decorator and now let me just clear this make sure everything's working still okay looking good looking good great so now I have this logic let me go ahead and clean up my imports great great great great great great great great great great and okay then I will say first of all thank you Chad GPT for that appreciate your help and now let me just give you some more work to do since that's kind of your thing like working and okay so that was cart products right yep now let me say great now create an API function now creates an API and now creating and API and dispatcher function for that endpoint and these are my API functions and let me show you my dispatcher functions so you can see my standard we should be good uh write this Logic on the front end okay make a new function called empty card that makes a post request the empty carts and this is correct any data back okay and okay I'm just kind of thinking ahead because some stuff might get a little bit tricky but EFG okay so this is going to make our request back in cart products with empty cart and you're basically not going to get anything back and then what we can do actually this might be easier than I thought because we can just set yeah we don't even need to do this okay ABCD EFG okay so empty cart as empty carts and then hmm yeah let's do this all right when I call empty cart what I'm gonna do is I'm gonna call set car products and this is pretty much gonna overwrite your state and what I want to do is just set it equal to an empty list and that should work so basically empty out all my cart products on the front end after this request comes back and then should be good so let's do that let's do that gonna put it in a try catch because I want to do a couple things okay okay first we're gonna need dispatching here and our toasts I like toast and I like dispatching things cute or what am I doing here to you and then types gonna need that dispatch thing going on and then what do you got some in here optimize you later and check it out so I'm going to be dispatching some stuff so let me just steal you what else am I going to be doing I'm going to be using logic that looks a little bit similar to this and then I'm going to be sticking clothes in there so for the product this is going to be the product ID quantity one for now and all right and where are you coming from dispatcher is an enums dispatcher dispatcher great car product and also we got you now which you can empty the cart okay so what I can do error updating cart so now what I can do is this first going to whenever they click that they want to I'm going to go ahead and empty their cart and then after this we're going to take the product that they are trying to add which is from the new seller and then add it to their cart and then give them a little toast that says product added to cart and then close the modal and then this logic doesn't get ran because we break out right here then I think we're good to go all right are we looking good to test this let's find out all right I'm buying I got a product from Amy in there and let me just make sure my back end synced up all right so I'm shopping I'm having a good time I'm a shopaholic I bought something from Amy and now I want to buy this mushroom book which is also from Amy so no issues there but now what I want to do is I want to look at this and oh this is from Bob so let me try to add this to my car too and wait a minute this product has a different seller than the exist some items in your car would you like to create a new order now if I close and nothing happens then nothing happens of course just got those two items from Amy however if I do hit yes then what's going to happen is I'm first going to empty my cart car emptied and then I'm going to add this item from Bob in my cart so now I only have this one item from Bob beautiful this is great this is absolutely great okay and then our back end is updated efficient too so I'll say empty cart endpoint and technically we can make this process even more efficient by combining this empty cart logic with this endpoint but that's just a little bit too complicated I think a little convoluted and that little boost in performance benefit I just don't really think it outweighs the um well anything really the readability the understandability so on and so forth this is pretty intuitive which I like I mean who doesn't great great great great great great and also great okay so now actually that we got that taken care of I believe what we can do is cross another thing off the checklist across another thing off of the checklist all right five days away but we were looking good 300s left and now actually I think that takes care of all the logic on this page it doesn't seem like there's anything left to do remove items from the car add it to cart and uh yeah I think we are now ready to write our checkout logic so got items in your cart ready to check out and let's see what that's going to look like so you're shopping you're shopping you're loving it you're loving life adding items getting Christmas presents for your family and then oh you're ready to check out and it's gonna look like this so first of all first of all let me push up this so we can call this a day so oops npm Romans that make lint and then I'll do a quick review on all this and then kind of uh also something here where I'm parsing the product ID multiple times can probably make that more efficient too but so for this what we did is we created a new empty cart endpoint looking good created git product so we can get the individual product whenever we go to The Details page empty cart dispatcher function empties on the front end the product dispatcher set the product use car seller ID so we can have that reusable logic I'm also thinking now we may want to change this to cart seller and the reason for that is because we're going to need to display their information on that checkout page but this is good for now you can always change it change it software nice and soft okay uh use calculator ID this logic is looking good uh this is more efficient it's looking great as well you okay product ID if they want to overwrite their cart then they do so by emptying it then adding one new product my styling is looking I good enough for now and then this is looking good too so this is my uh product Details page and we're fetching the products off the bat which is good checking some housekeeping things determining if we should display the modal and getting the products ID good good in the neighborhood okay so I'll say um cartel logic completed we are look looking I am uh yeah I feel good about this pace that we're on I mean a lot of work to do still but let's see okay so the checkout page and then the buyer in the seller orders and these are actually kind of similar they I believe they use the same um component but either way I'm gonna go to the bathroom and then I'm gonna go grab a refill of coffee and then we'll get started on this page and I am back all refreshed and okay so for this page what I am thinking is first yeah we can kind of follow the same flow kind of just style all the UI elements and then once we kind of have everything on the screen in the basic layout set then we can start making everything a little bit more intelligent until we get to this final place order button which is kind of the goal of everything but in order to place an order of course need our cart products working we need to be able to select an address so on and so forth and also let me actually just see if I delete this deleted okay just get this button that says select address okay all right so let's go ahead and just start with this basic layout and then we'll probably work on these from kind of left to right okay so this page is a shop page called buy checkout all right and now in 10B OS Pages by checkout all right and let me see what the layout is well this is a lot of logic okay so we have our interesting okay so in our main container what would be looking like so we have the left section and what do you consist of left top Edge's particular participants and then products okay so the left section is basically this right here your address your participants and your products and the right section is this total yeah so let's get started by just rendering the left and the right so first of all what's the container the container is a grid with a gap of 12 grid columns so the left is going to be basically the right is going to be 30 percent and the left is going to be Auto height of 100 width of 100 yeah that looks good okay so first for R by checkout page our container is the same and then let's just get the left and right yeah we'll just do this for now so left and then the right all right so we have two columns the left and the right to the left is the First Column where the Overflow y Auto array is the second column and then in here we just call render left and render right and render left and I'll do the same thing for render right render left surrender right all right so this as long as we're running should give us two columns a left and a right looking good all right so next up let's start making these basic sections so the left top consists of an address and participants section and let me just go in here see left top render address and we have a heading and a line under each of these all right so let's get our heading in line so the heading is this and the line we have our line component from components line and it's just a styled version of that let's give it a little bit of a margin bottom and then let's get our left top as well so the left top is also a grid now it's flexed with a gap of 32 and a margin bottom of 32 okay that looks good all right so for the left top we have rendered dress and render participants so left top render address render participants and then we have rendered products right here underneath so for render address what we can do just give a heading and a line for now address without it all right so for my address I can just save this render participants what are you gonna be all right keep you lean as well Elemental peqr and my participants how were you styled basically the same all right and then products should we frame you out yet or not for rendering products yeah okay all right this should give us our scaffolding for everything but let's see what we got okay so address participants products section all empty for now and then on the right we are going to have the total and let's see what that is looking like so on the right yeah we have total okay so let's look at this okay so on the left we have address participants and products in on the right we're gonna have the total right here so now let's just go ahead and start actually like building out these sections of one by one starting with the address section now how is this going to work so if you have an address you can select it just like this and let me actually add one so Bucky uh Bucky Roberts is my name address I live at One Two Three Maple Lane apartment 2000 200 whatever City let me see Queens state New York one two three four five is my ZIP code in my country is let's do uh Nigeria all right so this is an address now when I go to my carts page I should see it selected so this is another interesting thing too if you only have one address then in tnbos I defaulted to that option however if you have multiple addresses then you should see a selection page in here so let me actually go ahead and make another address I'll say my full name is Bucky Jones address is 678678 uh monkey Lane address two I don't have one but it's required interesting apartment 500 City Pittsburgh PA one two six seven eight in this country is in the Philippines all right address added also a little fun fact I'm actually 1 8 Filipino I don't know if anyone cares but okay so this is how it's gonna work Maple Lane actually monkey Lane Maple Lane all right looking good so that's how the address selector is going to work so now let's just go ahead and build that out so by how am I going to set this actually I'll probably just have this in state yeah I think that'll be the best but then if the user navigates away and comes back do we want to keep it there and a good question so let's say that I have something like monkey Lane in here and then I buy and I come back if that's in state then this component gets me remounted and forgets what's in there but is that really an issue it would probably be better to keep that in yeah probably be better to keep that in Redux so in that case let's do that and we can stick it in our manager so we can just store the ID of the active address I think that would be better okay so I'm not allowed to just uh talking and not a lot of coding so far but I kind of just want to think through these things make sure I get the right design pattern to avoid having to uh rewrite things so what I'm going to do is I'm basically going to be creating this widget but I'm going to be storing this in Redux and that is because if the user you know navigates away from the component or comes back or logs out of the site and comes back then since we uh persist all that then should be good to go yeah that's the experience that I would want okay so with that said let's actually just go ahead and maybe build this component first yeah that might be easier and then we have something to kind of test our Redux logic out with so what was this render address select modal okay so this address select modal I see and then you pass the Handler right into it and we aren't going to need to do this because this model itself can just spatulate to Redux directly okay so this is my address select model you know what let's actually just copy this whole thing yeah okay so I'm first going to build out the address select the model and then we'll create a button to toggle it so let me just copy this and in my modals we can do this and then the styling let's see view review okay so The Styling looks good modal empty text button button with a hundred button container I don't have but I have a margin bottom on these cards and the model will just play Flex Flex column yeah it looks alright now now for the address select logic let's actually go into these um the individual cards themselves so the selected mixin which is the state like that shade of green if it's selected looks alright for now I want to standardize a lot of these backgrounds and whatnot but for right now I'm just kind of getting everything taken care of um okay this is interesting too so this is my address select card first of all I don't have this package unify my types and let's see what's going on here so for each of these individual cards I'm going to be passing in an address is selected and then on click I do want all that logic okay now the thing I thought would happen is to use that address card again let's see yeah I'm wondering if I could reuse this dress card since it's pretty similar but I see now that it's not exactly the same all right so first of all let me just pluck everything off here and then address address 2 city state country you gotta okay so this is my address select card produce alerts my old one and then I'm going to be passing in an address for each one and is selected Boolean which basically says do you want to display as green or not and then an on click Handler which is basically in the parent element gonna toggle the selected end knots okay so with that said okay so this is good this is good now for my dress selected modal let's just clean a bunch of stuff up so you can find my types you can find my types all right I'm importing those cards and now whenever I use this this set address ID I'm not going to need because we can just dispatch that right to Redux which means I don't need this generic void function type or this prop that gets passed in now what I'm going to be doing is getting all my addresses for my store I'll just get the address of the list and selected address ID is equal to it not a string or null it's going to be equal to a number of Arnold and handle this is equal to number all right so this should be good but let me just see what's going on here okay so whenever you pop open that you want to select an address for your order then this modal is going to pop open I just select the modal and you're not going to need to give any props because it's going to contain all the information that it needs so basically it has the selected address ID and logic to set the selected address ID and then yeah you know what I don't think I want any of this logic actually because instead of this logic where you have to select one and then hit submit what I want to do is I can just have it when you select one it just updates Redux right away no need to like hit the submit button just edit it select one and then you're good to go yeah I think I want that logic let me just think through it one more time if you have one selected like what is the point of hitting the submit button if you can just open it select it and then close it I decided I don't like the submit button so what we can do here is get rid of this handle button click logic I would disabled State no anything like that now I do want to surrender content because we say if you don't have any addresses then what you're going to do is you're just going to say no addresses to display however if you do have addresses you're going to render these address select cards now these first of all get rid of this handle button click now surrender address select card don't need this okay so this address select card is also going to know itself if it's selected because it can just pull that data right from Redux basically compare the selected address ID to its own address ID so we don't need that so we don't need it selected so we don't need is selected and we'll just set the SQL to Boolean for now since this will determine the styling but basically instead of the parent telling the card if it's selected the card's going to be able to figure out itself now on click it doesn't need this either right because before so before the parent element kind of had to figure that out but now it doesn't need to this will simplify our logic as well all right so you don't need to on click Handler even though we are going to be adding click logic from you but you are going to be kind of flying solo on that okay so now let's see what we got going on here okay so this simplifies our component quite a bit um basically whenever we toggle open this address select model we are either going to render a bunch of address cards or empty text if we don't have any addresses now for each of these address cards our address select cards they get rendered inside this address select cards is good and they just have an empty click Handler for right now and they're also just all going to be styled as selected before we add any of that Redux State okay so now let's go ahead and pop this open and we'll do that here so we'll say address select model is open use toggle false all right so we're gonna need to use toggle to toggle the modal open and closed what else do we need we need that actual modal so we can render it so import the address select modal and then we can render it just like this render address select modal why did we split this out into its own function if this isn't open do this otherwise do this okay I think we can kind of simplify this yeah let's not use another function for this um and then we'll just follow this pattern something like this all right so if the address select model is open and what we want to do is we want to render the address select modal of course now the close Logic for this is toggle address select modal that's going to toggle the logic from open to close we need to what am I missing here uh or no mmhmm okay so from here what we need is a button to trigger that modal and that is going to be in the render addresses right here okay so we're gonna have a button okay what's going on here okay so what this is saying is that we either have a button here or an address card depending on if we have an address selected but for now we don't have the ability to select an address really because we can't store any Redux so we're just going to render this button for now so let's do this this so we are going to import you you little button and address that is under the line that's when you're under a Content which is a button that just says select address toggle address select modals it's going to say select address and yeah should be good okay so now let's test this we have a button that says select address and we have no addresses to display because we just don't have any addresses yet right yeah no addresses okay so let me go ahead and add an address all right so I just added two addresses one for one two three Apple Lane and one for four five six bacon Ave now when I go to select addresses there we go so they both appear right there and also no that's interesting too so I get a little bit of extra padding on bottom here and that is because yeah both the last element both the last child and the overall modal have padding but that's good for now that's a styling issue okay actually we can't fix that oh that's a dress select model yeah worry about that later okay so now what we need to do is we need to store okay let's think about this so whenever we select an address we need to store the ID of that address in a Redux under the manager we can say we already have active address why do we have this what are you doing all right active address buyer justices okay so this active address is for whenever we are editing addresses so let's say active order address actually let's what would be a good name for this so first of all let's go to our uh Store look in our manager we already have active address and again that is for whenever you are editing addresses like I say I want to edit this then your active address is set to this you see and then basically the app knows that this is the one you're editing however what could be what's going on outside what could be a name for this maybe like default Maybe actually let's call it order active order address ID I think that's going to be the most intuitive even though it's kind of long so yeah so active order address ID and this is either going to be equal to a number which is going to be the address ID or null if you need to select one so active order address ID and then what we can also do is we can create a hook to ensure that this address ID to basically pull the um active order address from this and the reason for that instead of just tapping into Redux and pulling this directly whenever we want to use it in one of our components is let's say for example that we have an active address right here however then even though it's kind of like our uh active address ID stored in Redux let's say we go back to our address page and delete that address then instead of trying to like sync everything in Redux which is only one thing right now but I'm thinking it might just be easier to create a hook to kind of abstract that logic you know it might sound a little bit confusing but I'll show you what I'm talking about in just a bit so active order address ID active order address ID equals null and then okay so now what I want to do is I'm just going to reuse actually this might be pretty easy so first thing I'm going to do is just set this in Redux and that is in my modal address select model address select card then on click is where I want to do this I'm going to say update manager something like this okay so I'm going to need to use dispatch again and use dispatch from react Redux types I'm going to be using App dispatch and then I just want to use dispatch all right in this address yeah the idea isn't popped off yet but okay and I can actually just do this handle click all right so handle click whenever an address is clicked and this is going to be the click Handler for it and what do we want to do when an address is clicked what we're going to do is we're going to update the active order address ID to just be the address ID and we can kind of follow our same pattern and set it equal to this and now for the is selected what we can say is and we probably want to create a selector but either way we can test this logic out first so let's check it out all right so in my Redux state I'm going to select this and it's going to update my manager to say where are you at okay active order address ID is number eight which is apparently Apple Lane then when I click this one it updates to number nine click this one updates to number eight again all right beautiful so now what I want to do is I want to say you are selected in other words you're green only if your ID matches this one right here so how do we select that data or how do we pull it from Redux well what we can do is we can first look at our selectors and okay we can get manager this might be the easiest easiest way so let's do this and then see kind of what we're working with for selector state I'm going to get manager manager if you selector State Elemental p should know my ABCs by now okay so you are selected if your ID is equal to the manager's active order address ID now this should okay this is interesting as well so if you select this one it updates in redox and since this component's address ID matches this one it's selected and then if you do this then that one selected however the logic that I also want is right now it's just clicking it to set it I want to say if it's already selected and you click it then just go ahead and set it equal to null so what I can do is this let me make a constant I'll say is selected if the ID equal to this then is selected I can just pass it through here and now for the value what did I say here I just select model something like this all right I'll say const value equals if it is selected and you clicked it again then you're going to be setting equal to null otherwise if it isn't selected then just set it equal to the ID that should give me my toggle off logic select address if it's selected okay that's cool so you can toggle it on and you can toggle it off looking good great okay so now what we need to do is if we have in active order address ID in here we are going to be making a hook to get the related address object which is in this case number eight we see basically one two three Apple Lanes is this one and then if we do have an address object we are going to display it right here and for that hook we will call use active order address okay use active order address looking good so let me actually let me stop in uh take a five minute break then I'll come back to that all right so now let's go ahead and build out the active order address hook so use active order address and that is going to be in my hooks and I'm gonna say a new typescript file called use active order address all right and now you my friend are where can I steal you from and something like this okay this is interesting actually that's very similar to what I wanted to do okay yeah this is great okay so use active order address let me get your name refactor rename this hole to you and instead of the wallet you are going to return let's just do this the hard way all right so use active order address is going to return an address or null and then in order to do this what we're gonna do is we're first gonna get your addresses and then we want to check on the manager for this active order address ID okay so if you have an active order address ID then use that to look up the address from that and if you have that to return it otherwise return null and we can pretty this up okay okay so does this work okay so use active order address is going to return an address or null if you have something set for your active order or just ID then try to look it up using or try to use that to find the address and if you can find it then return it let me just make sure this is the same logic yep otherwise return null and then even if the user deletes or they set an address as your default and then deletes the address then this will return null and we won't be able to place the order which is the logic that we're going for okay so now in the hooks let's say use active order address okay so use active order address gives us that logic and now what we can do back in our checkout is in our hooks what we can say render address oh this needs to be updated but either way actually this is interesting use active order address all right so active order address is going to be equal to an order or null let me just see what I did in tnb OS so when rendering my address so I'm going to say pretty much the same thing let content be equal to this button because remembering this address section we're either going to be just be displaying the button or the address card okay now if they have an address selected and what we are going to do is just have the constant be equal to something else which is going to be an address card and the address card that we have that drop down for as well under address drop down menu address drop down menu edit okay it's pretty much exactly what we want all right so where else did we have that drop down menu it was one of the components right shop my shop drop down menu see what's going on with the dress card right now I just want to see the other implementation of this real quick okay so it's going to look similar to this where the render drop down menu is pretty much just gonna look like this menu options drop down menu as that so I'm going to need to import this drop down menu and then also edit is toggle address select modal which we want and then what did we do here is equal to the address card with some styling applied to it so the address card we just said with but we don't need to do that just yet let's see how it looks otherwise okay so the address card is from a dress card component so component's address card and then if you have an active order address you basically want to set it equal to that address card content equals address card where the address is equal to the active order address and then on the address card the write content equal to render address drop down menu that should be good I wonder if I can simplify that as well but this looks uh pretty readable okay so now let's do some testing all right that's a good sign off the bat and actually let me try to edit this I don't have any and I actually like to see why I can see what's going on behind all right now I have an active one gives me that if not I don't have anything great it's awesome just what we're looking for and also one other thing yeah I was wondering if I was gonna have to apply any special styling for this to take up the entire width however I think it's doing it already just because of the yeah it's Flex okay so this is great that's uh pretty much all the address logic and then whenever we submit the order all we have to do is we need to pass up I believe we had our order order logic where the only thing we need to do is we need to give it an address because it already knows the items in your cart so it doesn't need to um do anything with those and yeah all right so next up what we're going to do is render these participants and yeah might as well get to that right now okay actually let me push this up uh just do some quick code review push it up as a checkpoint so npm run lint hopefully we don't get any linting issues and all right let's do a little self review okay use active order address this is working as expected actually one other thing that I want to test is this so what I was talking about was let's say that you are on this page and you selected one two three Apple Lane then you go to your addresses and you delete one two three Apple Lane address deleted now back in your checkout okay so it should say select address again and nothing selected and that is also the logic that we want great so now we can go to my code review after that mini QA session okay so hooks use active order address that's good use active order just going to return address or null get this so you guys can see okay so this looks good as well okay and now this is the address select card and it pretty much figures everything out on its own is it selected or not and then depending on that select state what to do the click Handler do you deselect yourself or do you select yourself for The Styling this is all the same select and mix in probably want to standardize this because I believe there's somewhere else on my app that um has a selected State I think when you're selecting like a core or something but anyways this needs to be uh standardized but that's a story for another day this looks good I just select model uses the cards for each address that you have just renders them out into a select card let's Place those or an empty state if you don't have any addresses my styling for my address select the modal or the cards gonna look like this all right looking good looking good and let's see what we got right here at the checkout quite a few changes to this component which is basically the entire page we were working on importing everything and then the drop down just has edit in it your left top participants okay so we got like one out of four sections complete I would say but pretty good considering this is a uh pretty beefy page Lots going on here if the logic gets too complex we can split it up in a multiple sub components as well but I think it's uh pretty good so I would say uh address order address selection logic that so now what I can do is I can render the participants so what we're going to do now is we're pretty much just going to say buyer which is always going to be you and then the seller and then we may want to update one of our hooks as well to make this a little bit easier now another thing that I'm wondering is if you remove this says no buyer or seller to display and it's because there are no products so we'll keep that logic as well okay okay okay doing good doing good let's keep it going okay so what we're going to do first is we're first going to check if there are any items in the cart if there are items in the cart then we're going to render two account labels one for the buyer which is you and one for the seller and why do I need to check if there is a cart seller well probably because this uh because this can't be nullable otherwise we're going to render empty text just like that okay and do we render any empty text here no so so let's just clean this up and get started so first of all our empty text component this is interesting oh a line all right slime has margin bottom okay so we need to import our empty text component here styles because we're going to need to style it to take away some of the padding and that's because the line which is going to be appearing under already has a margin bottom of 12. so just like this our empty text is going to have a padding top of zero Elemental P actually what am I what am I doing here see the E F G okay so that's going to take care of our empty text component and now actually just go ahead and render basically the same logic so our cart product list split that out into this car product list why did I do that that's interesting I kind of like this actually oh yeah I don't need to do this now so what I was doing is giving it some default ordering thank you but I don't need to do that okay so what I'm going to do actually what do I want to do let's do this so under my shop pages I have the wait a minute wait just a minute here so order products cart products yeah I don't even think I'm pulling them out anywhere maybe in one of my hooks all right got a lot going on here okay so in Redux your Redux for here let's check so my car products interesting interesting interesting so my carp products consist of objects whose product is nested now we are going to be wanting to pull the seller from these but what's the easiest way to kind of do everything I think from the seller hmm all right let's just keep it simple for now and get cart product list okay all right so we'll do something like this buyer checkouts use memo coming from react okay so first let's get cart products and this is going to come from so selector States Elemental Peak your St what we're going to be doing is getting all the cart products from Redux using our selector and then since these are keyed under the ID to get just a list of them we can just do object values cart products and so all of our cart products are gonna go in here okay so now what we can do with our participants is we can check if there's any items in that list and we can have the content be something similar to this or render participants for participants with the content under the line and okay so if cart product list has length in other words if there are items in your cart then you can render the participants if not just say no buyer or seller to display because no one's buying anything if there are no items in the cart and then for let's just go ahead and do the buyer first so this component we were named to user label if I'm correct so yep user label and then to use this like the implementation of it so for user label actually should I I'm going to need to style this valuable accountable okay so for this user label which is going to come from components user label the implementation details of this are we're going to give it a description and a name so instead of account label I'm just going to say user label in the description equals buyer and why am I there we go all right so the buyer is my name my username and that is going to come from self right opening the wrong thing okay and that is going to come from self username okay so now we just need to give get to self there's getself and that is coming from selector state select your state get self okay so self is equal to my own data from the store and if I just do self username string null okay let's go ahead and see what's going on here okay so this user label takes a name which is a string and itself I'm guessing that types self yeah the username is equal to a string or null and that is because it's just how it gets initialized in Redux however actually I can do this we should be able to so what I can do is just uh use the exclamation mark to guarantee that this value is going to be set because the only time that it doesn't get set in Redux is if the user is logged out basically but they're logged in because they say this checkout page and since they're logged in they're guaranteed to have a username okay so now let's see what's going on all right participants Bucky who is the buyer and now for the seller what we are going to do is this so I need the seller's information including their username now we already have a hook called used cart seller ID and what this returns is a number which is the ID of them but we want to actually return the seller themselves so we're gonna update this entire hook to say use cart seller you know what this is going to return is type product is it's going to return a user read serializer or null all right so let's first figure out everywhere this is and make sure to replace it which card seller ID and then here okay so use cart seller ID is going to be refactor rename to use cart seller let's just refactor all of those and that is cart seller used card seller used cart seller and then this is going to be renamed as well cart seller ID to just cart seller but first let's update this implementation of it so the user read serializer is going to come from types all right so for the cart seller it's either going to be a user read serializer ID and then we're saying if you don't and okay so if you have objects in your cart then just go ahead and get the first one and get the seller from it otherwise if you don't have any items in your cart then just go ahead and return null so now this used cart seller is going to be equal to user resalizer or no and that means this cart seller ID we can just call cart seller and then we can say if you have a cart seller and the cart seller ID and their ID is equal to the product seller ID then we get that logic okay now with this being said we also want to use the updated logic in this okay so now that we cleaned up all the old code let's go ahead and write some new code so this is working correctly and we're just going to say that for the participants that we're rendering of course I'm going to be the buyer who's ever like the user that's logged in is always going to be the buyer it's their shopping cart and then I also want to kind of do this logic right here where the styled version of this has a margin top of 16. so in order to do that I pretty much need a regular user label and a style user label so I'm going to import unstyled user label Elementary stu okay so I'll say that this user label is a styled version of this unstyled user label and all it does is it has a margin top of 16 and this is going to be the one for the seller so what I can do is I can say if cart seller would be gross okay so if you have a cart seller then what you want to do is you want to render a stylized version of this user label label with the description of seller in the name is the cart sellers username should be good product does not define or under participants or under left render participants okay what's going on here cart product list length is this it object values that are car products freshness and see what hey that was right maybe I had some hot reloading issues didn't make quite a few changes okay so this is okay so I was just getting confused because I didn't see any products here but that's how it kind of calculates this but it's just because we didn't actually display those products yet am I recording okay I just want to make sure I'm not talking to myself here okay so I have items from Bob who's the seller in the cart and now what I want to do is I actually want to buy this mug from Amy instead so I want to add this to the cart do I want to override my cart yes and now when I go here it should say Amy is the seller but now you know I changed my mind I actually don't want this so I'm going to remove all those go back to my cart and it says no buyer or seller to display and that is exactly the logic that we want from this note let's go ahead and add this from Amy again actually let's see how many things can we buy from Amy okay so we have this mug in the mushroom book and now when I go back here two products from Amy I'm the buyer a music seller this is the address that I selected all right the participants section is looking good as well so now what we can do is I'll do another self mini code review and then we can start on the products section so with that said let me go ahead and first lint everything and then let me just review everything real quick got the hiccups today what causes the hiccups I'm curious okay so let's see what we did we converted this use cart seller ID hook to just use cart seller so we can get the full user object because we also need their username in some cases and that looks good this is just renaming it and saying instead of a number you are now returning a user object in other words the user read a serializer now returning an ID anymore so that's good and then in and check out made quite a few changes here basically adding in your participants and deciding if we should display participants or not based on if we have items in our cart and then pulling everything from State hooks getting our carp products and then rendering them out here and the logic is saying that if you have items in your cart then display the buyer and seller labels otherwise display this empty text styling updates override the empty text and then this second user label may want to rename that but that's basically for the seller give them a margin top just so there is a little bit of space between the buyer and seller label and then this is just our new hook that we had to change the cart seller is now the user object instead of ID and so we're saying that if you have one check that their ID basically compare it with the items you're trying to add to make sure you're not trying to add products from two different sellers to your cart and that's all good okay so I'll say participant logic set working actually we can just say participant to logic all right sweet we are looking good actually so now let me go ahead and take another mini break and uh in the next little bit what we're going to be doing is working on these products and actually let me add some products real quick maybe just two of these maybe this is a shirt and this old man struggle carving I actually like that green color that toast that pops up here okay so next we are going to have this section working on where we pretty much just display the products in our cart and we have a little action link that gives us the ability to remove those as well but I'm going to take a five minute break and then we'll get to that and we are back Jack so let's go ahead and see what we need to do for this product section right here uh this is tmb front end uh let's see render products this is what we got going on right now and empty products looking pretty bland and let's hop over into BLS see what they got going on okay so render products says that if you have cart products then call this renter car products function and then we have this cart product component all right so first of all these cart products are just gonna say there are three columns one for the image one for the details and then one for those action links so let's seal this section right here cart products that's where they're gonna go and then what we can do we can actually borrow a lot of this okay just trying to decide if I want to make this first and we'll remove click yeah I think we want to do this okay so we are going to be making a cart product which is basically just a row in that grid or basically it's just one carp product and then what we can do is actually pass in the entire cart product because for this handle remove click um this was made for the decentralized network but what we need to do is we are going to be making a request to the back end to delete it and yeah in this decentralized network everything was kind of just um getting distracted here everything was just hit happen client side so let's do this so car product copying you and and this page on the buy checkout page what other components did I have oh payment details and we didn't do that yeah so on the my checkout page we're going to have this cart product first let me look at your styling uh for the actions voice not rap text line end so it appears on the right that looks good and yeah that looks so good now cart product got a lot of stuff to do to you first of all we'll get rid of all these unify my types as usual PE QRS uh this is just gonna be types toast type that's coming from enum Coast types from enons moved that around and the product list details Okay so this is interesting I thought I had a component for this but yeah it was on my cell page right okay so the cell page we have our cell products and each of these products oh yeah here we go so this is going to be replaced with Shop product list details so Shop product list details I'm gonna p q r s t I wish I knew my ABCs but I don't but I don't but I don't don't don't you what you doing here here okay okay shop let's get these organized okay so Shop product list details you pretty much give it a product and all right where first of all you are capitalized you don't need to have these ticks because we are not doing anything and then for handle remove click we don't want to use you okay let's just do this let's knock it crazy here okay so for the thumbnail you are just gonna be past the product image now when dispatching when clicking the button to remove what we want to do well first of all we need to yeah yeah yeah yeah okay so this is going to take a cart product instead of a product because we need the cart product ID whenever we are deleting it okay so let's do that off the bats a lot of a little cleanup to do so in my dispatcher my cart Product Where am I gonna need from you I'm gonna say delete cart product and then I'm gonna get to you and I'm gonna steal you uh Delete cart product right here and then I'm going to say first of all the types I'm going to be passing in our car product as tea cart product and I have to rename it because this cart product component is also named car product so the type I'm going to be passing in is a cart product and that's going to be a type cart product and I'm going to be passing this in in for the image it's the cart product products image for the product it's the car product product and for this remove click I'm going to dispatch pretty much the same logic and do I want to wrap that in it async wait a minute where did I actually have this here we go product removed from car or doing this I think I want all of this pretty much exact same logic yeah okay all right so let me read through this real quick uh the DT okay so each of these car products are gonna have a thumbnail on the left the details like the name description yada yada and then our link to remove it when you click the remove link it's going to dispatch this delete cart product car product using the car product ID and afterwards it says product remove from cart now if there's an issue with this it's just going to say error removing product from cart and that should be good so now I can use that cart product components to basically render out as before okay so first import all my cart products components and now let's see so this is going to be in render products and the content is going to be the same as this this is going to render car products you've got car products and that is the same thing under a dress or under left so render car products is going to take a okay so we're going to do this for each car product the key is the cart product ID and for the cart product it's just the carp products sort my attributes and that should be good okay so just to recap uh the content you have under here depending on if you have products to display or not in your cart if you do you're going to render cart products and when you render cart products you're just iterating through all your cart products and creating a cart product component passing through all the props that we need and rendering it in this car products section okay okay so now this is looking good uh let me just go back and come back okay so I have two items in my cart mug and a mushroom book now let's say I want to remove this mug in my checkout page that should be removed now let me add it back in and that should be there and now when I click remove yes that is good as well and now I should have one item a mushroom book in my cart and now let me just remove that says no products to display products removed from cart delete it from the back end looking good in the neighborhood okay now another small ux issue that I have or ux question is whenever you are adding items to the cart how do you want these displayed what I'm thinking is you probably want them displayed in the order that you added them with the most recent items on top so if I added the mushroom book first in the mug think I would be expecting to see the mug on top although could also sort it in alphabetical order but I don't think that makes a whole lot of sense okay so either way the product section is working now remove remove we get empty States and the products of display okay so now what I can do is let me add these two items back and then uh let me do a little bit of review as usual actually lint and then a review it's my two favorite things because it means I just finished up a little mini section um eventually this is going to be lint then test then review but for now oh you don't have any tests written I know that's uh not that great to say but um but yeah okay so for this cart product let's see thumbnail dispatch you know I'm just tell you it's okay the cart product is going to be past the cart product object and then it basically just renders the thumbnail the details of it and then the actions which is only one to remove it then when you click that it's going to delete it from the back end delete delete okay pretty much delete it from the back end then delete it from your front end and then pop up a toast saying success on these are just to minimize my action font size and align them on the right since the default font size is 14. I want that a little bit smaller imported that car product component that we just looked at and then when we render the cart products we either render an empty state if we don't have any items in our cart or render the cart products and all this does is it converts all the items in your cart excuse me all the objects in your store to pretty much a car product component and then displays them in the car products section and the car product section just has some styling where the items are spaced 12 pixels and we just get this nice grid layout that looks so good and I'll say okay uh products logic cuckoo cool all right now let me push this up and we are getting close we are getting very close to where we want to be which is being able to place an order okay so now the last thing we have to make is this section right here and what we will say is that so um another thing this is actually a little bit more advanced than tnbos as far as the payment logic goes because tnbos it could only support um not only one seller but only one payment type per order in this new system that we are working on it's going to support um multiple payment types per order for example this is a valid order that we're looking at right here even though we're paying with two different currencies it's going to be 2200 10B and 300 VTX so what I'm going to do is let me think how we want to lay this out we're probably just displayed the prices right on top of each other and then the button right under it and then we can have all the error messages right here yeah yeah yeah okay so let's do that okay so I push this up actually did I push my back end up too yep yep yep yep yep yep yep and also yep okay okay I'll go again okay okay so now on the right hand side it says total nothing let's see what is going on with our good friend tnbos actually we want aren't going to need tnbls for much longer but anyways what this does what's going on right here oh okay don't need this either so basically what I did is I created a separate component here named payment details and it basically just okay we're being passed in this click Handler and I'm wondering why hmm so this is doing a lot of stuff that we don't need to okay yeah I don't need to do basically any of that wondering if I should just basically write this from scratch is my disabled yeah so the parent was figuring out a bunch of stuff and passing it down however I'm thinking that most of this can just be handled right in the payment details section yeah so maybe I'll just get the styling from this and then yeah yeah yeah yeah okay so let's do this let's create a new payment details component which is gonna effectively be this component on the right and then we'll just put a bunch of placeholders in there for now and then we'll kind of say goodbye to tnbos for the time being and kind of Go free solo since a lot of this logic isn't going to be able to uh carry over kind of just some of the basic simple styling all right so I do like the name payment details for this so what I'll do is I'll make a new component called payment details and all right so you are going to have styles you're also going to have a component and the component's name is just going to be payment details and then you are eventually going to display other things but for great hiccups great timing but for now payment details is good enough so import that payment details component and payment details and then yeah so on the right hand side Total Line payment details all right so what are we working with here payment details looking good now what I want to make first is actually let's just get the button styling taken care of let's do the easy stuff first all right so do we have a button from here yes we do are we gonna need to style it maybe but a little bit too much for now all right so I have the button and it's going to say place order all right so I have a button that is going to say place order and eventually something is going to happen when you click it but for now ain't nothing gonna happen and why parsing error well oh forgot my arrow okay so now we have a button that says place order and how we look in pretty good now I already am seeing that I want to style that to take up the full width so let's do that and button with 100. so what I'm going to do in here is import an unstyled button and then I can still the same button logic from here to pretty much give a width of 100 and now instead of using this button component I can use that styled button which is going to give me that width of 100 beautiful okay I'll click this nothing happens but let's go ahead and make something happen and I'm wondering if we can even make a separate component for this what's this component right here this is the price component so let's just use those shall we okay so on our component Library we have this price component and how do we use it well we just oh this is interesting um okay so unfortunately this is a product price component where we have to pass in a product but we basically want the same styling without needing to pass in a product so what we could do hmm this is interesting yeah I might have to just recreate this for this one okay so price container let me see what's going on with you a little price container all right so price container is basically going to be the same thing price container is going to have a logo and an amount all right so let's just do this for now all right so just like before we're also going to have a price container we won't have any margins on it yet and I'm going to say price container and we're going to have two of these and let's just do let's do this so core logo all right so we're gonna have a core logo in here in the source what we can do is we can just do something super easy and something like this oops we can just hard code in an image URL for now all right so our price container has a core logo and then it also has let's see what else an amount and the amount is going to be calculated but for right now we can hard code that into so the amount will say a total price of 500 actually should we do all right let's see what we're working with here okay so something like this but it floats in the middle all right so you are 24 and this entire container has a line item Center Flex Direction column all right so this entire container which is the price element basically payment details element let me see how your container is styled your container you have what does it have a border radius that's funny okay so I don't believe we need this border radius and that should Center align everything okay that's looking all right and then what size are you 18 and I need you to be 25 24. can you do that for me chord logo can you be 24 24 24 font size 26 font weight let's use our standardized font weights as well so follow weights semi bold all right nice Imports let's put U24 as well and let's see what we're working with now maybe fall way bold looks a little bit better it's a little too weak that's semibold nonsense that's bold I mean dare we go extra bold I don't think so that's this seems like a little bit too much whoa whoa whoa no no no no no no no no that's let's not get crazy here okay so font weight bold for the amount and then for the price container I'm a wondering since I do want some space of my button I'm wondering where we put that so basically we may have something like this they won't be the same logos but I'm thinking for each of these price containers is if we give it a margin bottom it will look alright okay let me get this copy image address something else okay let's do 519 000. Okay so looks interesting actually let's do this what it's going to be just to get some realistic always like and what was this 300 okay so this total order is 2200 10 being 300 VTX so the total would look something like this how does this look not bad it does not look bad so these are all fake numbers still but okay so now what I want to do is just have some text for the error message and we'll eventually be displaying that conditionally but here just want to kind of get everything so render price error is going to have an error message all right so colors and for my error color if anywhere in forms file input okay so this is my standard error message color although I probably want to make this into a constant as well since I reuse it quite a bit quite a bit okay but now let me go ahead and render price error and I'm going to say have some logic right here total price of okay so this is eventually going to say something like total price of um what was it uh 200 tnb seeds available balance of um let's say they only have uh 1000 610 people okay so if they get an error it's going to say something like total order price of 22 exceeds a valuable balance of 1600 tnb and that looks alright however I'm wondering if I bump up the font a little bit and also I may have multiple of these errors if they have okay let's do this let's do this okay so for the error message I'm going to do a margin top of 12. I'm going to do a font size of 11 and then I'm just going to render two of these okay that would be better okay that's a little bit better now hopefully we don't get these error messages but if so then and what we can also do is change the naming so we'll just say total price of X currency exceeds available balance of X currency okay all right so I think that we got yeah so this is pretty much all of our logic that we're going to need here and I also want to do one thing let me try this out so line height one what is the line height of this by T fall no one is one shrunk hmm well one looks better the default or a line height of 1.2 let's go ahead yeah let's do 1.24 actually this entire okay so for the payment details actually the price container I can do a line height all right yeah it looks a little bit better that one's a little bit too spread out and this one is looking good okay so that's looking all right for now I think all my styling is as good as it's going to get with my pretty primitive styling skills and now what I can do next is just okay so another thing I need to do is I need to conditionally be able to disable this button because if there is an error message then the button should be disabled so let me just look at my button props and I believe this is just a okay disabled equals true just uh hardcoded in for now just make sure that we get this logic and okay so now let's just add a click Handler so it comes handle button click console uh click okay so we're just going to have some click Handler for this button right here and now you can't click it because it's disabled that is good and if you go back in here say disabled equals false and we should be able to click it and it just logs out click okay so now we got all the basic functionality working what logic do we want to do now so next up what we are going to do is we need to figure out if there are any actual errors and the way we do that is we compare their available balance with the total of the items in their carts so what we are going to need to do is this we're gonna need to calculate actually let me do this all right so Amy you are going to be selling this little mini elephant set too because I need you to have some more products from what I'm about to test all right so let me refetch these and I'm going to add this to the cart as well and the reason for that is because I wanted to be able to kind of add up um multiple products from the same currency so basically the first thing I want to do is just display this information correctly so it should say 6200 tnb 4000 plus 2200 and 300 VTX and then once we display this correctly we can compare it to the active or the available balances that they have and then pretty much determine if we need to show any error messages or disable the button but that is the first thing that we're going to do now another thing that I'm thinking of is where do we put this logic so um I'm thinking ahead how we're going to need to use it to kind of get the return type of it what I'm thinking is all right so for the cart products each product has a price core which is just the ID of a core so in other words one is T and B okay so what I'm thinking is we're going to probably write a reducer function where the key is the ID of the price core and the value is the sum of all products in that core so basically the key is the price core and the value is the aggregate price amount of all products so I'm going to ask a chat GPT for help on this one since it sounds like a little bit beefy okay so what information do you need chat Jupiter okay maybe I can just give it my car products yeah so I'm going to say here are my carp products ready write a function that gives me I don't even know how to say this the GPT okay Zoomer card products um write a function that iterates through each okay write a function that Returns the total amount the total cost of the products in each price score see if we can figure this one out here are my card products write a function in JavaScript that um returns an object where the key is the price core core ID and the value is the total price of products is the total price based on price amount calculated by using price Mount times quantity all right for each item in the cart total price price core all right so what I'm going to do is this so that was looking good but what I'm going to do is kind of clean all that up so car product all right here's my car product type and let's see here is my product type I'll give it the item type as well I'll say um update the function to use typescript reduce okay let's see what we got going on here total price so total price oh I see what's going on here okay okay so first of all I want to rename a total price all right so a couple things rename total price to ACC and then I'll say use this function to display the proper information for each price container all right gotta like slowly talk it into rewriting my entire component for me okay uh use this in this component to display each of those prices as a price container element all right trash GPT this is a tough one for you but I got faith in you you can do it buddy I wonder if it would be uh easier if I just wrote it myself by now but I don't know it's kind of fun working with chai GPT okay so in the payment details price core total price core is a number okay that's interesting one so I'll say calculate total price let's take a look at this first okay all right uh price core total all right let's just clean up this code all right Church the we are going to do this together I'm going to pretty things up for you okay so cart items equals a cart product and that is true yeah okay so from types we need to give it a list of all the products in our cart so how do we do that so let's do this let's do this exact same thing unless we just want to pass in the cart product list from here hmm that's interesting too but let's not do that even though it may be a little bit performance benefit later on okay so car product list equals you selector selector State select your state give them a peek your St okay and then some of these optimize those later okay so the cart products you're gonna of course need that and you also need this car product list because whenever you calculate the total price we are going to have you calculate using this cart product list and what you're going to return is a price score total which is typed out right here all right now for cart product we are also going to be importing you and for the item we can just rename you to cart product for sure still got four okay all right now for calculating the total price what you do is you pretty much iterate through every carp product and you pull off the price core which is the core ID the amount and the quantity from it now for the accumulator what you can check is okay uh let's ask if there's any way to simplify this first because I have a feeling there might be also I should probably just log out these results soon and make sure that uh if else block yeah okay we can get rid of these as well all right so with price core equals whatever was there by default if nothing yet then just go ahead and set it to zero Plus the price amount multiplied by quantity okay now let's log this out console log all right and let's see what we're working with whoa whoa whoa whoa whoa whoa and that is because I need to call the function invoke it to get those sweet sweet results okay all right so this is looking good so for Price core one we get 6200 which is tnb price Core 2 you get 300 VTX great great and when I remove this should also update that's awesome this is great okay now let me add those back in just so we can get that uh fancy schmancy logic and another thing that I probably want to do okay okay okay so we probably want to memorize this memorize this and rename it to total totals total prices minimize this graph this and use memo and okay really leveraging here okay and rename to Total prices calculating total price all right so I know I'm spending a long time on this but it is an important part of this app and I want to make it as readable as possible since you know do have to maintain this as well so now do I have use Memo from this already you can do calculate total price cart product list and then total prices below that looks good now just test everything still yes this is looking good looking good looking good looking good looking good all right cool and I will say what else can we say use total prices using total prices using total prices update my components to render a to render a price container for each entry for each of those entries and also do I need to give you that's a good point I actually don't now at this point it's probably going to be easier if I just uh write it myself since prices all right don't use that render price error and then what I want to do is I actually want to split this up into a render price containers function okay so render price containers all right so render price containers which is going to be the core logo and the source of the logo and the price amount equals total to the local string the key equals the price core which is which is good and pretty much want to take this place it with these price containers for each of these what I can do is for the cores I can use this all right so I need to do cores price core and then logo and this is going to be tricky because it may be wait why is price core total prices this is going to return a price Court total total prices price core total highest price course string object entries price scores issuing this is interesting this total prices returns price core total for the price score is in number and the value is a number however in object entries why is press course string why is price core a string there because it should not be all object keys are strings under the hood implicitly converts into a string when you use object entries so this thing convert it back using a number okay so I just converted back a little messy but source okay and this is because if I have a number in here that doesn't exist then I'm not going to have a core so what I'm going to do is this I'll say core equals a core keyed by this and this can either be yeah so this may be equal to null your string is on the type string or null so this core is equal to a core okay so core logo oh wait a minute okay okay okay so this core logo is going to take a string or null yes yes yes okay so what I'm gonna have to do is a core forgot I wasn't using this core logo why not why not use this one instead I pretty much just need to give it a default unknown core yeah okay so I'm gonna have to clean all this up in a bit but for now what I can do is I can just say core logo or unknown core and then what I can do I think I want to keep this logic and the reason is because this is actually tricky what I'm thinking is if they have a well first of all this is working which is good okay that's really good um anyways what I was thinking is that if they have an object in their cart let's say these two objects with tnb and VTX and one of these cores get removed then what's going to happen with the item in their cart so what we can do is we can see if the course still exists which it should like 99 of time but in the rare case that it doesn't we can just return it won't render another thing we can do to simplify this bit is just this logic or even this logic can even simplify more but it's a little bit too unreadable I okay so let's just see what's going on right here so these are my totals 6200 tnb 300 VTX if I remove this one it just shows CNB if I remove this one just shows that one and remove this one I get none which is great I mean probably on an empty state right here actually what is my empty State tnb OS if I remove all of them the button is disabled the total says zero okay I kind of like that logic actually and maybe just have to say who knows who knows who knows hmm but either way this is working with total prices so now the next thing that we can do is go ahead and show those error messages yeah let's work on the error messages next so let me add these items back to the cart on another this from Amy and what else you selling Amy Amy I'm buying everything that you got okay so now let's work on our error messages and I'll do that after I take a mini break be back in just a second all right so now that we got kind of this logic working right here what I'm gonna do is figure out the logic for displaying these error messages and in order to do this what we need to do is we need to look at the total prices of everything and for each one compare it to the Wallet balance for this core and we just need to pretty much check that the balance can cover whatever you're trying to pay for so let's uh do that now in order to accomplish this I'm going to use another memo and this is going to say total price errors and it's just gonna return a list of strings which are going to be error messages and it's also going to use reduce and it's going to also take the object entries of total prices the accumulator is just going to be a string array and for each of these we are going to say so price core total and actually can we just pull it out from here and maybe we just do this the uh yeah I think we want to do this all right so for each of these all right four of foreignties of an object okay so what I'm going to do is this so I'm going to say and why am I getting issues here every sign constantly all right so what I'm going to do is I am going to iterate over the pretty much the total prices and I'm going to pluck off the core ID and the total price and then compare it to the Wallet balance so I need to get my wallets so files let's and I'll say the wallet okay so for my wallets okay if no wallet exists um add an error to the results all right so return results here final wallet and what am I doing here you are a string all right so Loop through each of these and find a wallet where the core matches the price core uh I'll say that the total price core compare the Wallet balance um ensure the Wallet balance balance um has enough funds to cover the total if not add an error to the results all right so I'll say here's my wallet object here's my wallet type uh fill I'll just say rate the code for these comments write the code for the comments complete the code for the comments here's the completed code for the comments okay let's see what you got while you're doing that total price errors okay all right all right all right all right all right all right okay so total price errors is gonna return and memorize string array so this is my for Loop and let's see what you got so let's keep those comments in there for now and pretty this up okay and what are you doing right here wallet is already declared in Upper scope wallet wallet where is wallet no it's not what unless wait a minute oh this variable right here okay so final wallet where the chord matches the price core so it's gonna iterate through all my wallets and find the one where the core ID wallet core wallet core ID that's right matches the price core which is going to be string converted to a number because using object entries keyed by string all right so if there's no wallet say no wallet found for core with ID price core all right and oh that's part of this okay um otherwise if you have a wallet Ensure okay first you need a wallet then if you have a wallet check that the balance is not less than the total okay otherwise you say total price of for core ID this exceeds available balance of this okay all right and what I also want to do is check the core itself and that would be this number Price score let's see core ID okay all right so what I'm doing here maybe I maybe I do this hmm that's interesting okay so I want to first check so I'll say this I'll say um yeah let's do this so if there's no core that we can find which is going to happen in the rare case that they have items in their cart for a certain core but then that core gets deleted in other words like a digital currency Network goes down I'll say no the core with ID core ID and I'll just say continue I kind of like this format I just think it's easier to read even though we may have a lot of continues actually we can just do this if there's no core then say there's no core with the ID of this anymore so that's going to be an error otherwise if you don't have a wallet for the core then of course you can't pay for it so you say no wallet found with a core God do you hear that screaming outside all right I gotta pause this all right someone was just a little angry outside need to pause it so I didn't have any swearing in my video where was I okay let me clean this up so what I'm going to do is first delete these and say there's no core say there's no core with ID of that chord otherwise if there is a core but you don't have a wallet for the core so no wallet found four and I'll say core dot ticker so for example if you don't have a tnb wallet and you're trying to buy some items for tnb it would just say no wallet found for can B otherwise if the Wallet balance is less than the total and I actually just want to switch this around for readability so if the total price exceeds the Wallet balance and what we can say is total price of total and I also want to display these as formatted so total price of total all right so something like total price of 500 tnb exceeds available balance of 100 tnb something like this and that is pretty ugly let me just clean that up a little bit okay so we are first checking if there is a core which should be a lot many of the times also checking that you have a wallet if not that's also an issue if you're trying to buy something and um last but not least check that you got enough funds in your wallet for it all right and then total price errors what we're going to say if disabled total price errors that length so basically if you have any errors at all then disable the button and then for the render price error what we're going to do is we're just going to say return total price errors dot map error message and then that just gets mapped to this with the error message displaying here okay so I think this should work everything besides the click button logic okay so this is good so far but now what I want to do is I actually want to reduce my wallet balance so I can test some things out so wallets let's put it at a right now I have ten thousand I want to put it in 2600 okay and why do I get two right here this is interesting so I should get an error but only one so now let me just log out what I got for total price errors that is also interesting I only have one item in here render where am I getting oh wait a minute wait a minute hmm that's interesting interesting so I wonder if I can just key it by error message all right let me see if this fixes it is that what's complaining about my key e now why am I getting multiple error messages being displayed here oh because I'm rendering it twice I am a I am a there we go okay and is it okay to key these by well first of all I see a little issue here and that is this right here and in that case I might as well just dirty this up simplify wow that looks pretty terrible funny how things are okay now is this good for this key I guess so hmm all right and let's also check this uh disabled logic so let's do this okay I'm getting an error message right here because the total price of 6200 exceeds my let's do something different uh 22 000. 2100. okay so I have 2100 tnb total now of course 6200 is more than 2100 so I'm going to go to error however changes again 24. okay so this is more than 2400 however if I delete this then I shouldn't get an error anymore and the button is still good click all right good to go remove this still good remove this we probably want to empty state but that is good for now yeah yeah actually I'll just say that um what I can do is just disable this if there are no cart products at all that might be easier so I'll also say if on or okay so if there are no cart products or you have errors then go ahead and disable that okay so I don't have any errors but I don't have any car products either so that's disabled and now once I add this it should be good that works now let me just add a wooden spoon yes oh wait a minute so this is issue two where I can add items for myself but I don't want to do that so let me just add all of Amy's items all right Amy I'm going to take your mushroom book and these elephant figurines and okay so now this order total exceeds what I'm giving you that's an issue so this button is disabled so I'm going to remove this the button is good now now another thing okay so this is issue two where I don't have an address selected this button should be disabled and also another is selected prop just a linting issue but let's fix that right now so that is going to come from this address select model and we're getting yelled at because this is selected is not a valid Dom element that's being passed in so because of that we need to prepend it with the dollar sign so in that case just replace these three with a dollar sign be good this is fixed then okay so now let's just go ahead and make sure we don't get that linting issue anymore select this deselect it selected deselect it and okay so another thing I want to do with this button logic is I want to ensure that we have an active address so I'm going to do in that case is I want to pull out active order address and that's going to come from my hooks all right so in addition to these checks I'll say if you don't have an active order address or you don't have any products in your cart or you have any errors with your payments in other words you don't have enough funds to pay then we're going to disable that Bond now in that case if I remove this and I don't have an address the button is disabled which is what I wanted okay so now we have products have enough funds for it we have a valid address we're ready to place this order and we just need a click Handler for this Okay so so what we can do now is before we do this so let me actually just push this up because if I were to lose this logic I would probably cry so first let me just go ahead and run npm run lint and hopefully I don't get any issues so now let me push this up after a little mini code review okay so I don't think we wrote too much code here just a lot of like uh thinking through some weird stuff all right just change that to a dollar sign not much review there and then the payment details entire component doesn't take any props and we're pulling everything that we need car product list calculating the total prices for each core quantity or excuse me the uh value that you add and you take the amount that the product is times the quantity and add it to the total for the core Zero by default and for these errors what we're doing is we're iterating over all the prices and basically saying is there a core that exists still if not throw an error do you have a wallet because you need to pay for it if not that's a problem throw this error and then last but not least if the total amount exceeds the Wallet balance for that core then just give you an error message here a detailed error message which is good okay so now we're logging out something that we shouldn't be logging out the fixed end just a bit now last button actually will not last but not least I think I'm losing my voice okay payment details oh maybe not maybe I just had some in my throat maybe drink some more water maybe maybe maybe maybe maybe this maybe that okay now let me just clean this up real quick so this we don't need to log out anymore and then on that note I think we're going to push this up so I would say um uh cart total logic all right cool cool now I believe that the only other thing that we need to do from here is whenever we click this order button we need to submit this order and I think this is going to be a piece of cake too yeah because I remember our orders endpoint and actually that's yeah this is good okay so our orders and points if we take a look back at this on our back end uh shop if you use orders and then we can look at the serializer for it so all we need to pass in when creating an order is the address and then what we can do is for the address that we pass in just make sure that we are the owner of it and then yeah basically uses that address cool and then for the order objects yeah oh this is interesting so this uses a foreign key to an address and then in that case we're also going to run into an interesting situation where if the user places an order with a given address but then they delete that address then in this case the order is going to be deleted but I think this is fine for MVP since we're probably just going to test out with some silly things like Wooden Spoons and whatnot but uh yeah of course that's a big area we want to look at in the future you know after this becomes like the number one ecommerce site in the world which I don't know it's probably only going to be a week or so from now because it seems pretty dang awesome okay so let me actually let's uh give tea a pretty tough job yeah I'll do this okay so I'll say car products addresses so here are my coding standards write me API functions for orders and then I'll give you this and let's see actually this could be the last slice that we write kind of Bittersweet all right so there's great hiccups uh where are you and there are my serializers and might as well give you my order object as well here's how you can structure your API functions actually I gotta create my types I can't update order you can't delete orders but this is looking fine either way okay so let me actually go ahead and Postman what I'm going to do is just kind of do everything manually one last time hopefully and then I am gonna pretty much get all my typings you know what we're actually looking pretty good for this I actually don't even need to use Postman all right so first of all where are my dresses coming from log out log in shop my dresses okay so that's another thing so I do have addresses in here Bucky okay so I need to fetch my addresses off the bat as well and when am I doing this am I just never fetching my dresses yep that's what it looks like all right so that's not good so let's do that so in my layouts my authenticator layout what I'll do is this I will say that in my dispatchers I want to whenever I first boot up the app I want to get my addresses because well we need them all right and now I log back out and log back in shop my dresses I have my addresses okay now the address endpoints gonna consist of these addresses and then whenever I am submitting my order I need to pass in the address ID of an address that I own which is four six or nine if we're testing five this must belong to someone else all right so now let me go ahead and try to post an order or create an order and first let's just kind of do it incorrectly clear buffer okay so now I'm going to create an order and just pass in just a useless problem for now actually for the address um I can even try to put in five right now and this should okay wrong endpoint okay address does not belong to the authenticated user that is good now if I pass in an address that I do have where was that data okay so let's say address number four is one of them that I do have available so in step five four let me go ahead and send this up and then I get a valid order okay so the only thing I need to do to create an order is just pass in an address fascinating so now with that information I'm recording still right yep okay so now let's go ahead and make our crate order request typing so types API orders new types your file where yeah where are you at orders now just like um I don't know addresses I guess um create a dress request this is going to be create order request and it's just going to take an address which is a number for address ID that looks good orders just says create order request okay good to go okay so now in my main typescript let me just import that that is under exchange orders orders and that was called create order request this code uh actually we can do sort lines edit all right I also do chord code optimize Imports and now we are going to need to hmm should we make our API endpoints first or kind of just structure everything out in the store let's do this okay all right let's go ahead and start creating our store before we can dispatch anything to it so I'm going to new touch your file name orders and in here we are going to say all right so first of all orders extends from creating modified right this is going to be an interesting one okay so I'm going to be storing orders which of course as an ID she'll just look at our order serializer so our order read serializer has all the fields from orders which is created and modified an ID and I got those two already created modified ID those are the easy ones and now in addition to that we also have buy your seller and address buy or seller and dress and order products now we have these from the address serializer but then we need one for order products and for that let's get a let's just do this okay working from the inside out here um create a typescript for this which is order products and I'm going to need an order products type so new texture file I'll say order products it's actually clean up some of this okay so here's my order type here's my order products type now my order product is going to have an ID let's go pretty much have all these right okay so let me just kind of compare this it has in ID description image name price of melon price core quantity as an order which is ID product which is an ID okay this is good this is good that's what we were looking for okay so now first let me just go ahead and register this with my main types in that is under manager and I'm just going to say order products we have an ordered product type coming from there I'm n o p okay and now in here under my order I can also say oh it already did interesting all right order it's going to have buyer all right so let me say create a typescript interface for this which is my order now that I have my order product taken care of so from my order products I'm going to need order product and in my order let's just see so I have an address that is just an address yeah so my address is just going to be an address all right so my address is an address my address is an address this is oh this is good this is good so my address is a New Dress my buyer and my seller are from the user root serializer now my order products are going to be a list of order products so I can steal this and let's see what else so I have a buyer and a seller too buyer and seller and those are just user read serializers right okay okay and all right so fire is a user read serializer in the seller too all right so this is my order object with the address buyer ID order products in the seller so address buyer order products the seller and then also created modified which we can hear from and that should be good to go okay so now let me just go ahead and import it into my main types so order products and then orders here we have order which is a single one and the orders which is how we're going to be storing it in the Redux Key by ID Le NLP now let me just go ahead and sort these edit sort lines okay now we can go ahead and create an orders oh first of all constant all right and then from this what are we going to be doing for orders so first of all we need to order this file for the reducer and it's probably going to be similar to wallets where we set many or one um yeah let's do it for here so I've never unset everything else is the same okay so orders uh the store is gonna be similar to addresses first what we're going to do is replace a bunch of stuff in here okay Place addresses with orders replace a dress with order replace lowercase addresses with lowercase orders now we don't need onset order because we never delete an order at least not for now and then this logic should take us home okay so for the order slice we're going to be storing orders in a dictionary Key by orders initial state is nothing a constant that we use for auto generating action names it's just orders sure I spelled this correctly orders and then what we're going to do is we're going to set an order by passing in an order and then key it under the ID and then when we set multiple orders for example we just refresh our orders page make requests get a list of orders back and then set all those keyed under ID so this is looking good and now from here what we can do is just register this in our main store and we can do that by saying for orders under orders use the orders reducer is the value looking good and now even though we probably won't be using it in this video I will say that for the future whenever we call get orders then give us everything under the orders slice okay so that's good so now we can actually create those API functions for orders all right so let's do that now so new uh texture file orders and I think chat GPT already gave me these yeah okay so let's steal some of this so for orders what we want to do is this all right so we have preorder request and that was what we called it right so types index preorder request okay so the end point for this is just API orders now with create orders we're going to send it create order requests and get back in order now we can't delete orders can get orders and in this case we're just going to make a request at this endpoint it's going to return our orders as a list and then we can't update an order either so in this case what I can do is create my dispatcher functions I'll say here are my API functions for orders and I'll say here are my coding standards for dispatcher functions create me dispatcher functions for orders create order get orders set orders set orders orders okay that all looks good all right so create order get orders I don't have any singular singular get order whenever you create order you pass in and create order requests which is pretty much just the address and then it's going to set that order in our store now to test this let's go to our checkout payment details and then handle button click this is where so let me just uh let's just steal some of this okay so I am going to be doing something like this so first let's import what we need to uh dispatch we need to import dispatch our toasts display toast display error toast toast type from enums E F G H and then let's see so on handle button click which is to place the order what we are going to be doing is we're going to be making a request to the back end to create that order and the request data is just going to be the address and it is going to be the active order address ID no active and just return so by this time we're going to address his number oh wait I'm using the wrong um yeah so this was for dispatcher orders payment details yeah done stealing stuff from you okay so first of all this is supposed to be a create order so from orders we want to use this and then for this request we want to pass in this request data and it says getting an error still I think I might have spelled something wrong in my create order request that's an interesting oh yeah it's a dress not dresses that's my request data now if this is successful I'll say order created and if not I'll say error placing order does that make sense order created and error placing order got two different verbs going on but I think it's all right now let me see if I can just shorten this a little a little bit just a little bit okay so when you handle the button click to place the order you're gonna make a request to the back end to create it and then it's going to display a toast that says order created and then after that what we'll do is we'll navigate you to the buy orders page however that's a little bit too much logic test out all at once so let's just test this out now okay okay okay okay all right so from the top here um Let me refresh this I'm logging this buggy right okay so first of all how much money do I got left only 200 bucks so I'm just gonna go ahead and uh add a little bit more to my wallet let's say uh ten thousand okay so now let me refresh this 10 000 beautiful okay so let's go ahead and go shopping okay I'm gonna buy this cart or this cup from Amy I'm also going to buy this book the quantity you requested exceeds okay so I already bought this so this is actually smart logic but um a little bit too smart all right sorry I'm buying this book and it has a quantity of one okay and now last but not least elephant figurines and since I already paid for this it's probably going to have a quantity oh no that's awesome oh because I didn't have enough money to pay for earlier but anyways check it out um so I now have 6200 300 now I just need an address let's send it to uh my penthouse on bacon Ave Pasadena India and this should be good so now what I want to do is I just want to make sure that the order is placed and it appears in Redux so first place the order created and that means that the order was created on the back end and now in Redux I have that order set right here and also another interesting thing that's happening is because whenever so I had ten thousand now whenever I place that order it took 6200 can be deducted it from my account and now if we check out my wallet I only have 3 800 left and that is why I'm getting this error message back however it's not really an issue because what we're going to do now is after I submit this I'll make a little to do to navigate away from that page so I'll just say navigate to the buyer order page all right so I am going to and then actually let me think about this all right so I'm going to be taken to this page right here buyer orders and another thing that I want to do is once this order has been placed so on the back end whenever you place an order it removes all the items from your cart so what I can do is after I place that order I want to remove all the items from my car so we'll do that as part of the process so let's do that now okay so I'm going to create an order and then I'm also going to dispatch this function right here Set Card products set cart products all right so in my so I'm basically just going to wipe out all my cart products reset it to an empty list and I'm gonna do that right here and that will work okay so now let's try that one more time and okay I'm gonna refresh this I have no cart products nothing in my cart and then let me just buy this mug so the products I'm gonna have to add one more oh actually I had eight of these nice so now I have one mug in my cart just going to go ahead and place the order it creates it on the back end s it to my store so now I have two orders in there and I also emptied out all my car products which is good now after this the last little bit of logic that we need to write is just navigating to the buyer orders page so let's do that right now and then we can pretty much call it a day to navigate all right so where are you coming from react router Dom let's import you use navigate and then we need to pull it from the hook and then we want to navigate to well first when do we want to navigate right here just grab the URL shop by orders and all right so now what's going on is that we're going to place an order and then this is going to be created stored on our front end we are going to remove all our cart products and then we are going to navigate to our orders page optimize those and then eventually probably in the next video what we'll do is we'll build out that orders component but for right now one last time let's test this and I'm gonna buy another mug really loving these mugs going to the chord I got my address selected bacon Ave Pasadena place this order created cart emptied on the orders page we are looking good all right so what I'm going to do is I'm going to stop the video here do a little bit of self code review and then in the next video we're going to be well hopefully finishing everything up look at this got another item off the checklist buyer checkout page looking good so in the next video we're just going to be making our orders component and we'll reuse that component to use both on the buyer side and the seller side but five days until show time we are on a very good Pace to complete this thing so as always thank you guys for watching and I'll see you next time