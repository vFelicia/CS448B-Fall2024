all right guys welcome to your 53rd C++ tutorial and if you've been following these tutorials you know that I've been gone for like a week and I might be kind of rusty with C++ but uh I'll get the hang of it I've actually been planning something and I'm not going to tell you guys what it is but I will say that is awesome and it's going to happen in about a month so that's your little teaser so now let's get back into C++ let me get my head straight I actually just opened this program so I think what I was supposed to teach next was about protected because that's what it's looking like so I think in the last tutorial I just covered basic inheritance I probably should have you know watched that video watched the last video before I started doing this one but who has time for that so let's go ahead and talked about what a protected member is you know whenever I first made a class like this mother class right here um automatically it's stuck in public protected and private those three variables or I mean those three Cod wordss and you're supposed to put all your functions and variables in there and I usually just deleted private or protected and I'm like don't worry about that we'll worry about this later well now is the time to worry about it so let's go ahead and in our mother class let's throw in those keywords again so public we already know what this does let's go ahead and make a variable for each one so we already know what public means um anywhere inside this class has access to the stuff and also outside this class can also access this stuff whenever you write something in public it pretty much means anywhere in the program you can access this crap so we'll just name it public V for public variable so now let's go ahead and talk about protected well before we talk about protected let's talk about private because I mean might as well get out of the way the things we know already we already know that whenever we make something like a private variable that this means that only inside this class has access to this variable for example if we wanted to go in another class or in this main CPP class this class would not have access to these private variables and that's why we need to build methods inside this class that are public to access those private variables so basically what we know so far whenever we make something public any other file has access to it whenever we make something private only this file or only this class has access to it so you're saying all right this is a this is B so what the heck is this one it's kind of like sitting in the middle is it like a combination of both well yes it is listen very closely whenever you make something protected here's what it means anything inside the class has access to it just like public and just like private any friend has an access to it and remember we talked about friends earlier pretty much just uh out things outside the class that has access to stuff inside your class and also your base classes remember a derived class inherits from the base class right so any class that is inheriting from this class has access to it so if we were to make a private variable in this mother class and then the daughter class inherited everything from mother well it wouldn't inherit the private variables these private variables are still private to Mother even though daughter inherited from mother daughter does not get these private variables daughter would in fact get public and protected so it would inherit these two but not private so that way you can kind of see it's a mix between public and private um it doesn't let anything inherit it like public and it doesn't just stay in this class like private it's kind of like in between so let me go ahead and make um a protected variable protected V and and I'll go ahead and show you guys an example so let's go ahead and build a function inside daughter and we'll just name this go ahead and make it a public function of course public and we'll just name it like do something did I spell that right H close enough so now let's go ahead and build this method right here and I keep thinking like I'm forgetting something but I guess it's just cuz I haven't programmed in a while so let's go ahead and put void daughter hopefully I'm doing this right all right and what was that oh do something it got it right there for me how nice so now we'll just go ahead and do this well actually I might as well do this one at a time this will probably show it to you very clearly so let's go ahead and before we even start coding this function right here let's go ahead and build a daughter object so daughter uh I think her name should be Tina that seems appropriate for this tutorial an tina. do something right like that so now hopefully when you run this nothing happens because nothing's in this function right now so let's go ahead and see just if we have any errors right now nothing happens good so let's go ahead and do this let's say we want to access that public variable and we'll just like set equal to a number or something we just want to try and access it so let's go ahead and try to access that public variable and do something to it like set equal to one or something stupid well we go ahead and run this and no errors so we know whenever we do that that we do indeed have access to the public variable and just a reminder this daughter class is inheriting everything from this mother class and that includes a public variable a protected variable and a private variable now we already know that daughter can access that public variable in this line of code right here so now let's try and step it up on Notch now let's go ahead and try to access that protected variable protected V right there well if we go ahead and try and set this equal to you know two or something like that and we build and run it it works perfectly so therefore we can see that the uh excuse me the derived class can indeed access the protected members of the base class and remember mother is the base class daughter is the derived class whatever does the inheriting aka the daughter is the derived class the core class that has crap we want to inherit from that's called the base class so now we know that we can indeed access public and protected members from the base class now let's go ahead and do something that we know we're not allowed to do and try to access a private variable and let's go ahead and try to set this equal to three and now we'll go ahead and try and build and run this and it says uhuh Bucky I don't think so you know the rules you are not allowed to inherit private member so that's why we're getting an error whenever we try to inherit a private variable so the concept behind this tutorial is not to build a stupid program that does nothing but it's this whenever you're inheriting from a class you can inherit all the public stuff you can inherit all the protected stuff but you cannot inherit the private stuff so remember whenever you have a base class you're going to get this crap and you're going to give this crap but uhuh you a't in this class bat I meant crap that's embarrassing but I'm not going to redo the tutor just cuz I mess up that one sense okay got it all right so let's um you know what that's enough of me talking for this tutorial I think that's uh I think you guys understand the concept by now basically at the heart of this tutorial you can inherit everything except private variables I could have made this tutorial real short but I didn't so thank you guys for watching uh don't forget to subscribe and by the way if you guys want um nice organized playlist um I didn't I don't really like doing them on YouTube because it's not really easy to organize that way but uh if you go to my website I have all my videos laid out you can watch one right after the other from clicking a button everything's nice laid out in a nice playlist for you guys so thank you guys for watching don't forget to subscribe and I'll see you guys in the next video