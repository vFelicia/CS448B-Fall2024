all right guys welcome back to your 56 C++ tutorial and in this tutorial we're going to be talking more about polymorphism because I know I kind of cut off the last tutorial abruptly and that's because I understood that um I wasn't making a couple things clear so I wrote some comments here and uh read these line by line and hopefully they can make you understand the basics behind you know inheriting and using these pointer with different types of objects easier and also I wanted to stress one thing that you guys may not quite have understood now if we go up to you know the ninja class in the monster class you saw that each of these specific classes had a function called attack so a ninja could attack and a monster could attack however if we scrolled up to the enemy class where they both inherited from there was no attack function right in here so that is why we had to switch back to using the ninja and the monster attack after we set the attack power so that's why the enemy object see let me go ahead and like if enemy object was to try to attack you would get an error message because an enemy object can't attack because this enemy class has no attack only these specific classes do you see what I'm saying so that's why we could use the enemy object to set the attack power because every class inherited this attack power but we couldn't use those enemy objects to attack because only these specific classes can attack so you're saying all right Bucky that's uh I understand it now but it's still kind of you know a dumb way to program because first you make a ninja object then an enemy object then you use the enemy object here then you have to switch back to the ninja object right here well wouldn't it be nice if we could just have these enemy objects come on I keep hitting that dumb plus sign would it be nice if we could just have these enemy objects attack as well that would make our lives a whole lot easier if we didn't have to switch back to this ninja and monster class if these enemy classes or excuse me these enemies objects could just set the attack Power Attack move around to whatever an enemy needed to do we'll check it out guys that is the core concept behind polymorphism and it's going to make your programming life a whole lot easier so let me go ahead and I'm going to go ahead and delete all this crap right here and I'm going to clean out all my classes so I just have a blank Monster Class A blank ninja class and a blank enemy class now I'm going to teach you guys how to do what I was just talking how to call the attack function on every single enemy object and have it work beautifully now before you're saying oh OMG you deleted everything I just just following the tutorial and now I'm going to have to retype all that code why would you delete everything well I deleted everything because the code code for this is actually a whole lot easier than what we' been doing before so before I wanted to stress you guys you know how you inherit and indeed you can you know use different addresses with different pointers and once you understood the last tutorial come to this tutorial and look how easy I'm going to make this for you guys so we want every enemy object to be able to attack so let's go ahead and make a public function and we're going to name this void attack so now every enemy has the ability to attack so now what we want to do is before we start coding the rest of the stuff we already know that whenever we build a specific class like ninja and monster that they're going to have their own specific attack functions a ninja is going to be like karate chop and a monster is going to be like Roar I'm coming out from under your bed well we already know that each of these classes is going to pretty much overwrite this attack function so what we want to do is we want to make this function virtual whenever you make a function virtual it means that you're going to be using it polymorphically and that way whenever later on we're using like enemy one attack enemy 2 attack it knows that it's supposed to look in the specific class for that function instead of using this function right here so now when we go ahead and you know public make our attack function using void attack and we'll just whoa easy uh backs slashes now whenever we write something like void and just write you know ninja attack and line and let me just go ahead and code this real quick Copy this paste it right there and the monster attack can be like monster attack ah so now whenever we go ahead and use well I might as well just code the rest of this program cuz you know instead of telling you what I'm going to code as as well just shut up and code it so we have a ninja object and we have a monster object now we know from the last tutorial that what we can do is since a ninja is just a specific type of enemy we can go ahead and make an enemy object like enemy object and make a pointer to enemy one get my cursor out of the way and we can set this equal to the address of ninja we can do the same thing with monster and this is valid again because monsters and ninjas are just more specific types of enemies so anything that you can do to an enemy including attack you can do to a ninja and a monster if an enemy can move around a ninja and a Monster can move around if an enemy could St stab you with it sword a ninja and a monster could stab you with it sword so that's why we were able to do this right here so now what we can do is since we made this virtual function we can now go ahead and do stuff like this enemy one attack and let's just go ahead and copy this right here and now we can go ahead and write enemy to attack and if we run this it works perfectly fine ninja attack and monster attack so basically whenever we use Virtual functions we're telling C++ this all right so C++ let's sit down and have a conversation we're going to be building a computer game and we're going to be putting enemies in it now each of these enemies is going to have its own specific attack function now whenever I call an enemy object I'm going to have a attack I don't want you to use this attack function right here this is just a template telling you that each class that inherits from enemy is going to have an attack function whenever I use an enemy object that has an attack function I want you to find out which address AKA which type of enemy has that attack function and call that attack so basically it said all right enemy one attack okay let's go ahead and I'm going to call attack from enemy hold on enemy one is indeed a ninja object so I'm going to ninja attack and then it said all right enemy 2 attack well I know that enemy 2 is an enemy object so I'm going to go ahead and call ATT attack but hold on this is a virtual function so I'm going to go ahead and see oh that is a monster object so I'm going to go ahead and monster attack you so virtual functions are basically template functions and any class that inherits virtual members whether it's variable or function or anything virtual is a polymorphic class because well not because that is the idea behind polymorphism that you can call the same function I mean check it out we're using an enemy object and we're calling the same attack function but it has different results so that is the beauty behind polymorphism that you can use the same function and produce different results so hopefully I didn't confuse you guys too much I think this tutorial is a lot more clear than the other one um that's you know what basically what polymorphism is that well first of all in order to have polymorphism you need this virtual stuff right here and also the idea behind polymorphism is that you can have different functions from the same type and I and I'm doing those little quotation signs with my fingers you can have the same function with the same type of object but you produce different results based on what addresses point too so you know that's it I don't want to confuse you guys anymore anything I have left to talk about I'll talk about in the next tutorial so hopefully you guys understand this a little better than the last tutorial if you don't don't worry we're going to be covering it more in the future but uh thank you guys for watching uh don't forget to subscribe and I guess I'll see you guys in the next video