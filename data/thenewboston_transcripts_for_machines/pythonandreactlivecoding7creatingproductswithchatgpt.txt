already on Welcome Back and in this video what I'm going to be doing is starting on the front end for the shot feature I already built out a few pieces of it but we'll get into the meat and potatoes of it in this video and I also want to mention that we left off in the last video with a little bit of backend logic still to write however in between the last video and this one I did do a little bit of work with the payment logic so the payment processing for whenever you place an order is all taken care of now and on that note the uh back end is really all completed now so you can see the payment logic is pretty simple basically you know pretty selfexplanatory but you add up the price of everything in the cart deduct it from the buyer's wallet and add it to the seller's wallet and then we're just of course saving that and then we're streaming down those updated balances to both the buyer and the seller so again pretty uh selfexplanatory have that payment logic works but on that note as long as we don't have any bugs or you know we have to make any tweets to like the response data for any of these endpoints the back end for the shop should be working now so let's go ahead and hop over to the front end and I'll show you what I have so far so this is actually tnb OS eventually what we're going to be building out but for the website what I have is I just added a link to the left menu shop and it takes you to this shop section and the SOP or excuse me shop layout consists of a top toolbar and then the bottom pages that we're going to be building out one by one and you have a buy toolbar and a sell toolbar so these are like two main sections of the shop app or feature whatever we're going to call it now the bisection has a home page and this is where this section is going to go this product catalog I'm calling it and it also has a page for your addresses where you're gonna receive your items your orders and of course your cart or checkout section and for the cell section it's pretty simple you're just going to have a list of products and orders so the way we're going to be building this out is actually kind of similar to the back end kind of like um how everything is pieced together naturally I would say and by that I mean the first thing that we need before we can you know browse products or add anything to the cart is of course a product so I'm going to be building out the page for the cell products and again I'm gonna have right now um on tnb OS this is done through using a modal but I actually want to create a separate page for this because I don't know I just think it would be a better ux then you can use the same page whether you're adding or editing products but either way I'm going to have a forum to add and edit products and then after that we can start on this page right here where you can browse those products so yeah let's go ahead and get started so I am in shop right now sell sell products this is what's actually so this page is going to have a list of your products so what I'm going to do is I'm just going to have a heading that says pretty much this heading right here with products and then we'll have a button on the right that says add and whenever the user clicks this it'll just take them to pretty much this page right here so let's just start with this top heading for now and all right so I actually want to borrow that from tnbos so is this section heading and that is this The Heading component and I also have a separate component just for this line right here because I reuse that in a couple places and I want to standardize it so before we get to this let's just go ahead and borrow some of these components from tmbos an array so I'm going to copy this entire line component and in my components here I'll have line already do I nope so just paste that in all right so the styles are just coming from there colors border defaults all right so online component okay so all this line component is is just a horizontal line it doesn't have any border it has a border top of one pixel and no margin basically just a one pixel Gray Line all right that looks good and now with that taken care of we can go ahead and make this section heading component so what this component is is going to consist of basically a top section that has a heading on the left and optional right content on the right and this can either be a button or well really anything it's just going to be any valid react node so yeah let's just go ahead and copy this section heading move it over to my front end app and now let's see The Heading actually don't want this color the contents are going to display Flex Flex between and padding bottom now this so now this should be good for the section heading so I'll say import all right import section heading from section heading and now let's do this so on tin b os I'm of course rendering it actually lets you just get something rendered on the screen first products all right so first we need some padding on the page and what was my padding for tnbos actually let's uh let's not do that let me see what my padding was on one of these pages all right so this page has a padding of 16 all around so in my shop so I am also going to have a padding of 16 all around all right looking good and now what we can do the heading might be too big by the way let me yeah let's go like 24. yeah that looks a little bit better okay so the heading is going to have 24 all right and now what I want to do is I want to render a button on the right so let me just look at the logic for tmbos render add product button and okay so I probably don't need to break that out until its own component but all right all right actually let me try to find a button that's used outside of form all right so import the button actually maybe I will am I rendering any other buttons all right so for this I'm just going to return and the text will have the same as this add write content render button and the semicolon and how are we looking so far button add how is my padding looking actually I think that what I want to do align items flux in why is that why am I getting a little extra pattern under the products hmm that's my line height actually what is my line height a line height of one there we go that's what I wanted but to now that actually doesn't look that great I know it takes time but uh whoa whoa whoa 1.2 okay 1.2 I know these are just small changes but you know it's always good to pay attention to the detail so it separates uh like a high school project from a more you know try to make it more professional whenever we can even though I am far from any designer like to try my best all right so I'm heading is going to have a line height of 1.2 that's what I think looks the best and now let's add some click logic to this button so on click what's going to do this one toggles product modal but in this case we want to navigate to a new page a page that we didn't create yet so before you even write the click Handler for this let me go ahead and make that page now the pages here do I have that yeah so say sell create edit product so product details actually let me pull up this as well so create edit product so for my page name it convention I am so since all my pages are split up into two sections by or so I'm just prepending it with either buy or sell I'll say sell uh create edit product all right now we're going to have new styles and then we're going to have a new component and why is this y m I getting this oh system types oh wait a minute I'm on the wrong oops IDE error occurred what I got too many projects up there right now losing tracks so it gets revert why did an IDE air occur okay so create edit product I'm worried about the error where did it pop up okay so git add all right so whenever the nav the user clicks on this button what we want to do is navigate to this page in in that case I need to update my routing Logic for the shop to say to render that page and I am going to say now what is the URL for that page I'll say uh create edit product in that URL cell slash creative product is going to render that create edit product so now what we can do is we can write the navigation logic so navigate navigate all right so to navigate we're gonna use this hook use navigates and then we're gonna create a navigate variable referencing that hook and then we can make a quick click anywhere so handle add sheet handle button click I only have one button so no need to differentiate and what all we need to do is navigate to Shop create edit product Shop sell creative product and on click handle one click and that should be good so let's test here she let me uh really quick just take a peek in my since everything is running since uh yeah what was this a solidity that's interesting whenever I pasted something huh that's uh weird and interesting so I um wrote those files in the wrong project so I copied it and pasted it into this one and then when I did there's a error with my solidity plugin which is weird because we're not writing any solidity at all funny how things are okay anywho moving on uh let's see so I'm on this page I click add and it takes me to this page sell create edit product looking good now what I could do is since this is going to be a form and let me show you so this is going to be form that looks somewhat like this not exactly but something like this where you can either add a new product or you edit an existing one and in this case since we're using this as a web application what the kind of standard is I guess is that whenever you're creating a new one you just go to the URL like this and then whenever you are editing something you can pass in that object ID however I actually set this up a little bit different in another app that I was working on uh cooking social network and what I did in this case is let me see exactly how this is structured because I remember I really liked it all right so create edit recipe yeah so I'll show you what I did here so I basically have a slice or just variable in my Redux store that's called active recipe and this is either going to be equal to null or a recipe and I just whenever I navigate to the page if I am just creating a new one then I just set it equal to null and that means hey there's nothing there and if I am editing one then I just set it to that active recipe in the store and that way whenever I go to this page it either has one in it or it doesn't and I don't know I just I think it was uh like a piece of cake working with because then you can just check this in the store don't cut it right about don't kind of worry about oh wait a minute wait a minute though no no no that's good hmm yeah I think that's fine since what logic I'm thinking through is what happens if they go to that page and they they refresh it but that's going to be fine too because then it's just going to look for that active recipe or active product in the store and yeah so we'll go with this Logic for now and what was this called uh active recipe okay so what we need to do in this case is first type out a product so in my types we would just go with products yeah so what I'm going to do is create a typescript interface for products and in order to do that I'm going to have chat GPT help me out a little bit actually how am I gonna do this shop models product inherits from both item and created modified and do I have created modified now to create a date all right so let's go ahead and do some cleanup all right so I want to structure my typescript interfaces similar to the back end you see here a lot of my models or interfaces are inheriting from creating modified on the back end so I'm kind of writing some duplicate code here and I want to clean that up right now this one can be cleaned up this one can be clean up this one can be cleaned up so in order to avoid Tech debt let's go ahead and make another generic type for creating modified and I want to see if I did it here too okay okay so first things first let's go ahead and have Chad GPT write a typescript interface for this shared Base Class all right oh mama all right and let's should we stick this in generic or not actually I don't think so since on the back end it is in its own file so let's just stick with the same pattern alright so types I'm going to have a new file typescript file created modified modified modified had to make sure I spelled it right and okay so that is looking good now for the types let's go ahead and import that and why is it not finding that uh did I not export anything what's going on here yep forgot to export it okay so from this we're just doing this and this is just so I can have all my types nice and neat all right so we got the created modify type and now what we can do is create a products type so actually before you even get to that what I want to do is just um Yeah clean up all of these existing ones so from created and modified created modified and for the wallet extends created modified get rid of created and modified so wallet is taken care of and now it's going to be for change core and trades get rid of you get rid of you all right nice and neat and now on that note let's go ahead and make that products type so typescript file and this is going to use the same pattern as this so the pattern is gonna I'm gonna be using is I'm gonna type everything out and then in my Redux store I am um storing all the products is an object that are keyed by the ID just so I can look everything up quickly so that's what this dick is doing right here so this is a raw product and this is how it's going to be stored in my Redux store and for this let me just replace wallet with product and what I want to do is first of all since we're going to be all right so remember that our products inherit from item and item is just all of this like um item related information image name description price yada yada and also the order product also inherits from item so in this case what I'm going to do is I'm going to create another interface for item and then when I type out product and order product it's just going to inherit from those keep everything nice and neat so uh and while that's doing that I can go ahead and make what do I want to put this let's just go ahead alright so this is also stored in item so let's just keep it nice and simple so item yeah I'll just say items okay core so wait a minute is yeah the core is just going to be a number okay so price core just going to be an ID of a core which is just a number and also I don't want camel case because this is just gonna be straight up API data so price mounts price core all right sport item description image name press Mouse number quantity number and okay first thing I'm going to do is just all right and then I can use it in my product all right so product extends created modified day and item and then I need to type out the actual product data so product data and I'm gonna need an enum for this activation status okay okay okay okay now so what am I going to do about seller thinking about that all right so in enums let's just go ahead and say was it exchange orders okay so we can just do products all right so I'm gonna create a new enum and we'll just say that this is called activation status and the values for this are active and draft and then let me just go ahead and import those and those are under products and that was activation status operation status now pretty this up cool all right now for products from enums we are going to have an activation status and that is going to be the activation status and then we just have a seller now let's see how the products are coming back so in the product serializer we have the seller being serialized as a read user read serializer so that's how I'm going to store it in my Redux store now let's see this so API users okay create user response okay so I think I'm just going to create an interface to match my serializer name so let me do this let me just can I just get products right here thing okay so actually this is just the user read serializer okay so just the ID and the username for now right ID username is my seller you user read serializer so what I'm going to do is this export interface user read serializer and this is equal to this right here so in my create user response the user is a reference to this and also let me just users we also get the user rate serializer all right and then for seller right here this is in types API users so in the products we called is seller yeah okay so actually did I let me close some of this stuff okay so product is inheriting from creating modified and item activation status It Go activation stats enum and the seller that's going to be stored is a serialized version of the user which is referenced by the user reads serializer and now let me just make sure my imports all right now from actually we didn't even do it yet did we okay all right so products is right on the manager all right now we just need to import product and products and then we can begin I don't know NLP QRS I don't know my abc so I have to sing the song all right so now everything's typed out to now we can go ahead and set up our store so I'm going to create a new slice call it products and for the key that we need to make Elemental p q r s products all right so now that I got that taken care of let me just go ahead and see if I can this is interesting so this modified date oh wait did I I accidentally yep okay so create a date and then modify dates in my rename I accidentally convert those to camel case so all right it should be looking good and I believe so I'm just looking at my wallet slice right now since I am pretty much going to use the same structure for store basically have two reducer functions in here one is for setting the item and then this sets it all from a list so basically set multiple at a time or set an individual one and I don't even think that we need this logic right here since the reason that I had this uh um actually let me show you another one so in my store usually yeah so usually whenever I set information you can just say since I want a key under ID I can just do state ID equals payload but for wallets I have some tricky logic that says if there is no state ID basically if there's nothing yet then you just want to set it or if you do have one then compare the modified date against the one you're trying to update and the reason for this is because um anytime there's a balance related update on the back end that gets streamed down on the front end however two balance updates could happen like very quickly together and I just thought it was like a little race condition on the front end where I want to make sure that I populate the readout store with the most recently modified one and for example this happens a lot I'll actually show you um like let's say that you are placing a trade right here well the moment you place a trade then your balance is going to get updated because you had to pay for that trade however let's say that that trade gets filled within like a fraction of a second well then you're going to get another update that comes down so you're gonna have like this race condition where you get two updated balances and the front end needs to figure out what's the more recent one but for the shop app I don't think that's really necessary so that is why instead of using this is a boilerplate I'll use trades okay so for my products store I'm first going to replace trades with products and replace trade trade with product and it says ID doesn't exist because we forgot to put an ID on the product right here actually maybe we can just stick an item and it feels a little bit weird doing that all right so in my types let me just go to trades definitely type that out faster but all right all right so all products also have an ID don't need that anymore in let me just convert this as well trace the products all right so this should be good but let me just read through it make sure it makes sense okay so for the products slice we are just using this constant we created looks to be named correctly and then we're importing product and products here this the shape of the state is product which is pretty much just the dictionary where the key is the product ID and the value is a product and for the slice we're just going to call it products initial State nothing and then name reducer the payload action whenever you're setting product just pass in a product and then it's gonna store that under the ID and then whenever you set multiple products at once for example whenever you go to the uh um this page right here then what this is going to do is it's going to fetch all your products from the back end and it's going to set them as a list so then we just want to pretty much um create a reducer function to convert that list into an object keyed by ID and that all looks good all right so now in our store now that we have the slice set up let's just go ahead and kind of patch everything together here so that is products on our manager so manager and we will call this products reducer so I would say the products are going to be stored in the products reducer and now that we got that slice taken care of what we want to do now is actually just go ahead and update our manager to include an active product all right so in my manager which is kind of just like some um so how can I explain this so there are just like miscellaneous things I need to keep track of on the front end and they are almost like like you almost might think about sticking them in state but for example whenever the user selects an asset pair right here I just didn't want to keep it in state because if the user ever navigates away and comes back to this then I wanted to remember what asset pair they had and also like on this uh I think this might be one to yeah so you see that on the wallets page you have deposit and withdraw well I thought it was better that if the user navigated away and came back it remembered what tab they had so I didn't want to keep it in component State because then anytime the component gets unmounted then it would forget it so you know just like these little miscellaneous UI things so anyways that is where I'm going to stick active product and basically if you have an active product and you go to that create edit page it means that's the one you want to edit if you don't have any active product it means you want to create a new product but we'll say active product and for this this is going to be a product or null and actually I at a wrong location so active products is going to be a product or null and for this I that's coming from types and then the initial state for this is actually just going to be null I don't need this okay so now what I can do is in my cell products yeah and what is the update manager okay so now finally what we can do is whenever we click this button right here this add button you see how it's going to take us to this page right here well what we want to do even though we don't have any way of setting these active products right now what we are going to do is just go ahead and all right so we're going to need a couple of different things here so update manager this is coming from the store manager and we also need a dispatch and that's going to come from types use dispatch and that's going to go from react Redux and then what else do we got going on here dispatch from the hook and all right so whenever we click this button to add a new product we want to set the active product to null basically saying we're not trying to edit anything we are creating a brand new one and yeah I believe we are good to go cool and actually let me just do some real quick QA now since I updated State let me just go ahead and log back in and first let's check our Redux store and make sure okay our product slice is in there and then in here whenever I click this button I should see this action triggered which is going to set the manager's active product to null and that's exactly what it did manager active product and all looking good okay so now what we need to do on this page is pretty much just start building out our form which is going to be responsible for us adding a product now let's okay so let me think about this so we're going to need to treat this form a little bit special since we're working with form data in other words we need to um we can't just use Json to send up because we're gonna uh be uploading an image for the product as well but before I do that let me just go ahead and start structuring some things so close all of those in under these Pages shop so create a product decided I've got to get a water my throat it's a bit barged oh yeah oh yeah baby okay so let's see where else on the app we have a form that we can steal from so on the withdraw section that looks like an easy place okay so we'll say uh account number close that for now and okay so let's first all right what are we gonna need formic form input and button so formic form uh buttons inputs and and that may be good so now steal this thank you very much you don't need to react as well why why did it import you for no reason at all fascinating okay all right so let's actually get rid of this and all right okay let's do this so for handle submit so for handle submits what we can do is this so we'll say that a product has a name and a description for now has some other fields but baby steps baby steps and let's see uh let's get the product type so type okay so product is gonna have a name and a description and I'll just say here we'll have an input for name and description in the description description and eventually whenever we submit this form we are going to want to of course make a request to our API but for now let's just go ahead and log out these values now um the name of the button this can just be should be crate or submit actually let's just do submit for now all right so right now we should have a form we don't need these four michelbergs for now and just need a validation schema and let's just get this from where are we gonna get it this looks good for now actually let's get something with let me steal this one okay so the validation schema in other words how are we going to validate this data all right so for now what we can do is we can just save that description must be a string and name also must be a string and now let me make sure that this is working so I'm shopping and go to the shop app and I'm going to sell a product I'm going to add a product and now I get this form right here and now for the name I'm just going to put what we got right here uh I guess I'm selling a birthday cake and the description is uh look at all my auto completes nice and juicy okay so now I can submit this and look at this logging out that data so now first thing I want to do is just add some padding around here since it's shrubbed me out a bit nuts and I'll just stick with this padding of 16 actually should we Center this form since on my let me look what I did for my cooking website so the pages create and edit styles the container zero Auto 42 pixels interesting so I Center aligned it but let's see how that looks um Center aligned or left the bajillion dollar question let's go ahead and Center align it I think I look pretty good so margin okay we can stick with this actually how many fields are we going to have and does that even matter you know what for now I'm just gonna leave it like this doesn't look that bad and for now we're just really trying to build out the logic of it so what can I say oh you know another thing that we're gonna need to do that we might as well do now is this what okay so yeah here I'm also okay so I'm gonna need a file input because I want to kind of take her the image uploading process already and actually before I do that let me just go ahead and see what are all the required fields for this so when I reset a product you need price core quantity all right so what I can do is this so pretty much going to steal all this logic or if there's an image in the form then render okay so if you don't have an image uploaded already then you want to render this file selector otherwise render this preview of the image and the render preview what this is going to do if there's a preview okay basically if there is an image then set equal to image source otherwise anything I just render it here so let's start getting this prepared so what do we need working from kind of inside out so the image container and then an image and then a close button container so image container image as you for now so image container image and then a close button container so basically if they're let me add this and I'll talk you through so we in our form right here we're going to have a file selector for image and then once they select one from their system there it's going to be displayed as a thumbnail right here and if they ever want to like change images then they have to there's going to be a little x button on the top right corner and then they can just close it and select another one so let's go ahead and hop back in here now that I have this we can have render preview and move this over here so render preview we have preview set preview and MDI icon we need YouTube and then preview and set preview all right looking good and now render preview is used where all right right here render preview gets passed in set field value from right here render preview there we go and I also have this bumper and this just adds some padding and I'm also going to need that and yeah and recording yeah I'm sorry all right looks good and okay so now I actually just need the uh file selector and that's going to come from here so this is a custom field a file input the change handle change and I don't have this element yet in this application so this is my cooking front end so form elements file inputs my components form elements need a file input didn't get a solidity to error that time so that's good and then for this file input just want to make sure my styling is is right this is my error message okay so let me just read over this so this file input which is an input field that accepts an image type file and if you have an error message you can display the error message below and then once I have that taken care of let me go ahead and add it to my little form elements Master file so file inputs file inputs file input Here and Now I can use it e f g h i good good good good good good good good good good good so values image that means that I need an image in the initial values which is going to be an empty string and also what else do we got so on change and file change touch touched opponent file image should be she wears this field coming from okay it's right above the preview so we're going to have this and the values so first we need to get the values from the form and if there is no image then render the button if there is an image render the preview and now for just import field and where are you coming from formic formic import field as well and then on change handle file change and here we have handle file change reader reader okay so for handle file change you're pretty much going to look at the file that they selected and you're going to create a new file reader set preview to that data and then the preview of it will be displayed okay should be good and then yeah we're just logging out this right here so make sure nothing broke check it out so um we didn't add padding to this container padding 16. all right so now let me choose a file uh what about this uh desk that I'm selling beautiful and now you see this little close button this is what I'm talking about so we are looking good right now choose something else this python logo and close it beautiful mate and actually let me actually saying actually 800 times here let me just go ahead and submit this so 34 yada yada submit it and then we're submitting all of this juicy juicy beautiful data looking pretty good huh nice okay and hmm now actually let me go ahead and had why isn't this bumper being used all right so the bumper goes under the preview just to give it that space between the button and the image and what do you ER beautiful beautiful beautiful beautiful beautiful absolutely beautiful okay now now we pretty much just have to add the rest of our fields in so let's go ahead and figure out what fields we need and you know what else okay let's just do this one by one nice and slow so yeah this is going to be a checkbox activation status active or not actually should we start with the item might be easier this way so anyways name description amount price amount price core and quantity okay all right so price amount price core quantity so those six which I already have and then in addition activation status and then ID and seller as well as created modify date we don't need to pass in so just activation status okay so let's so activation status this is going to be a check box and I already have a checkbox element somewhere not create an edit recipe where was it tnb OS so tnbos in my apps shop and under my pages what page was that what product details movie yeah so I have this checkbox element and that is coming from this component checkbox so let's steal this component from tnb OS the check box and that is going in form elements check box Styles file for this are just under styles and for the air color actually what's the label just the default so I shouldn't need that and for the air color what did we have color palette red so for the air color it's color palette red just make sure everything else looks good and for the check box props those should all be good too these four Styles it's checkbox Styles don't think we need we need to do that unless we're gonna unless we need to okay unless we need to update the styling or anything but I don't think we do so now we can use that oops got to include a tier so my form elements are exporting all of these so that I am able to export them more cleanly here and yeah that's why I uh again am kind of aggregating all these sub components into just Forum elements because then whenever I input form elements I can just have one line rather than you know three lines right here but now that said let's go ahead and figure out how to use this check check box component so the checkbox component we can put under the image and what is it so this references activation status and I will say activate yeah we can just use the same one activate product and now let's see how we're looking okay so activate product that's true when you uncheck it it's false looking good name description we gotta thumbnail we're looking fantastic here it's the other thing I'm selling if anyone wants to buy a nice dresser espresso wood great condition just has a little crack on the mirror but there you go and all right so we got name description image what else are we gonna need to do he actually clean up some of this stuff okay so a product has a activation status actually we just need to eat at those other forms or form elements so activation status check description check the image check price amount so let's do that in where do I want it let's put it under the image as well yeah since we have like all the product information and all the pricing information on bottom so on that note so under the preview on the bumper what was the field name price amount and we'll just say actually what did I say in tnb OS uh price amount huh okay well there you go so price amounts and this is going to be a type number all right so this is going to be type number and let me just make sure that okay so the type of this input except text number or password text is the default so we need to pass a number right here and then after this what do we need to do is we need to have a field for the price core and this is going to be drop down of all the cores and let me see how I did this as well so price now we're okay one more okay so in my form elements since this is can be drop down we need a select right here and then for the options where these options come from use Network select options and this is just going to be a list of Select options which are what these interesting fascinating fascinating fascinating okay easy enough so first let's copy the select component and form elements select and now make sure it's compatible with this project so the styles first of all come from Styles the color for the error message what is the color for the error message colors palette red I'm thinking I should colors palette red oh so we already are in oh yeah it's probably red and what other for the label of this color set of colors font muted we'll just do that for now and all right now in here types okay so we need to select option type in our typings so it's under types where did I have this select option so under types forms select option so I'm just going to copy this file types forms and now uh a b c d e f g so types forms and that was called select option Elemento p q r s e f g yada yada tomato okay so a select option has a disabled domain so really you need a value to make it work and everything else is good all right so that select component should be good just need to import it here all right still looking good looking good looking good looking good looking good okay so now in tnb OS let's figure out how we use that select okay and where was it I had it right on top of the price amount so price amount actually I did even import this no no okay so the price Network what did I name it price core so basically what digital currency do you want to use and or eventually calculate this in a little bit better way but now it takes an object where the value we'll just say something like uh just give it two quick ones for uh testing all right and now if everything worked we should have a select menu so let's see yes it's a little bit wide have to work on our styling for this but basically you have all this selected do you want tnb or VTX and how much we'll do 20 the component is changing from uncontrolled controlled and that should not be happening that was when I adjusted price mount that's interesting why didn't I give it that time maybe something with a react to render okay let's go through this again yada yada do this uh selling this python logo tnb VTX okay I guess it was just something with uh maybe hot reloading or something but either way all of this info is looking good all right I think we're ready to start sending this data up and did we miss any fields it's in the description name person out quantity press core okay cool now let's go ahead and actually make request the back end before we do that however we're going to need to set up quite a few things so we need an API endpoint to hit and let's see what we can copy maybe chorus is a good example all right so we are pretty much going to be building out our API uh endpoints right here and can I just give this a chat GPT and say make one of these for products and actually this is going to work great because the data is form data as well Actually I don't even think I need chai chip tea I think it's just simple find and replace so all right we're making a new typescript file called products and it's going to be just like these functions however instead of core we are doing it for product the endpoint cores is going to be products and now let me just read through this okay so we are importing product in the base URL is whatever we environment we're on either the live environment or our Local Host and then it's the endpoint products so creating products we're going to be passing in form data and we're going to be getting back a product object which just to clarify is this right here with yes all this in the seller is nested as user serializer and then this is just going to return the response data or throw an error and we want these headers as well yes authorization form headers because we're using form data and that is because Json won't work because we have image data included now for delete product whenever we do this we're just going to be passing in an ID and it's just going to hit delete on that endpoint now for getting products we're going to get back a product list and for updating products it's the same thing except we pass in an ID as well so that looks good so now what we need to do is we need to make our dispatcher since this is pretty much just our communication with the API but now we need a dispatcher to kind of use this in uh dispatch this data to our Redux store so that is products and property steel piece from cores as well okay so replace core with product and replace cores with products and unset product yeah I'm gonna need that as well okay so uh one last dispatcher or some can talk you can type at the same time okay so under course I also have this reducer function which is for deleting so this is for setting the list this is for sending an individual one and this is for deleting one of those and now let me just replace core with product okay so all right so to add a product you call set product to add a list of products you call set products and to delete one you call onset product and pass in the ID of that stay products it's a number and it's just going to delete that from the state okay and now this should be good unless we named it onset product wait a minute yeah that should be good interesting oh didn't export it so embarrassing onset product okay now let me read through these so for my dispatcher functions I name them the same as my API endpoints just because I don't know it's like a very intuitive naming however when I import them I have to just uh rename the Imports so I don't get naming conflict so create product delete product get products and update one two three four that takes care of everything and then these are my reducer functions so for creating a product we're going to pass in the form data and then it's gonna call the create product endpoint and then as long as I didn't get the error it is going to set that product in my store now for deleting it I'm going to pass in an ID and it's going to call the delete product endpoint and then once it's deleted from the back end it's just going to call onset product to delete it from my store on the front end and then same thing or not same thing but with Git products what I'm going to do is not going to take any arguments just fetching all the products and of course we're added support for like query parameters and filtering so on and so forth but for right now it's again kind of the structure set but anyways whenever we get the products it's going to set those using set products since this is going to be a list not one and then for updating you're going to call the patch endpoint on the back end and then you just set the product again and it's going to overwrite whatever is in there so looks good now what we can do is we can say great products and import from dispatchers products so we want to import great product from dispatchers products we are going to want to call this whenever we click the handle submit button so for that we're going to need dispatch and show you what is going on here why are you not dispatching interesting like what are you doing with this data then a response data wait the request data oh here we go oh wait crate recipe oh they're not even huh this one's just using the endpoint directly but I don't think I want to do that hmm you know why so most of the time what I'm going to be doing is um you know like you always want to keep your backing in front and in sync and most of the time like whenever you create something on the back end then you want to store it on your front end obviously reasons but since how I had it set up on my uh recipe social network I'm just creating it on the back end and not even worrying about sorting on the front end because after that I'm navigating to this recipes Details page and this recipe is Details page whenever you just visit that it fetches that recipe right off the bat so that way I mean it's a little bit more performance since I mean at this point in time when it fetches it on this page it's going to be overriding anything that's in the store anyways but I'm thinking of this is the logic that I am going to go with okay so I need to think about this from users perspective um I guess there are two different things that we can do whenever I add a product here so my pages looks kind of like this actually let's just pull up our page so the question is when I'm done adding a product here and I hit submit and it goes ahead and creates on the back end do I want to be taken to this product Details page or do I just want to be taking to my list of products right here and I think after I create this then I would want to be taken to this page so do I need to even store this in Redux because this page is going to fetch my products you know what I think it's better this way yeah let's just go with this and we can change it up to make it a little bit more performant later on may have uh be setting data that I don't need to but you know what's the harm for now at least we can test it to make sure it's working okay so what this is going to do whenever here whenever I handle submit let me get rid of this there's too much stuff going on my brain can't handle it okay so in my cooking front end what I need to do is I need to make this request data such as so and then with that request data catch it let me put this in the try catch so try to do this should have searched for something else okay all right so for my error handling I like to log out the error and then display a toast to the user and for that I'm just gonna steal this all right so try to make this request and if you could error just log it out in the console and say air um probably steal it from here yeah well I'll just say error creating recipe right now but I'll have to this because if they are updating the recipe then it would say error updating recipe but since we don't have any um update logic yet just creation then this is fine for now and I also want to get my dispatch whoa whoa what's going on okay so I'm also going to be using this dispatch use dispatch and app dispatch types dispatch and then use this badge is going to come from reactor Redux all right so now I can dispatch things and what am I going to dispatch this great product event so I will say whenever I submit this okay all right so I'm going to get all my request data taken care of and then once that's taken care of I'm going to create this and dispatcher and the data is just the form data okay all right so let me just alphabetize these all right so I'm gonna pretty much need to do this for everything so basically taking these form values in um putting together my form data if initial values dot image is not equal to this then open the image Okay so this is basically saying so this logic is a kind of um for whenever I am editing as well but it actually works fine for creating so basically if the initial values of image which right now is just an empty string is not equal to the value you have for image which is going to be that file data then basically if something changed then appended to the request data in the reason that I want to have this check is let's say that um the user is editing one of these products and let me show it on this so let's say that the user is editing this product and the image didn't change well if the image stayed the same then there's no need to um setting up that data because you know we don't even want to include it because then the image will just get the same image is just going to get reuploaded and saved in S3 so it's just a little bit well much more performant this way and uh let's see okay so activation status description image name that we need price amount price core quantity name price amounts and I don't even believe we have a quantity or do we wait a minute price amount we don't have quantity do we so where are we going to put quantity name description Maybe under a description or maybe under price amount Let's do an underpriced amount and this is going to be a number as well all right and on that note hopefully whenever this gets submitted we should have an object on our back end so let's go ahead and pull that up first so for products let's say that we don't have anything yet just delete those we don't need them okay now let me go through this flow I'm Bucky I'm selling a product I'm going to go ahead and add one it's a birthday cake it's nice and juicy the image is for some reason the image of this desk uh price core 10B okay this is actually incorrect because this is going to need to be a value of where my core is at so I have one and two so let me do that actually we can even test yeah let's do this so this is going to be value one in value two and for this okay and I think we can just change the option type here so under forms the value is a string but I believe we can just say number or string and then we can also say the display name for this first option is tnb okay you're going to get Elda and just a bit button okay so this is eventually what we're going to be building dynamically but for now we'll just keep everything hard coded and let's see let's pretty this up all right error error error type number is not assignable string I thought I'd take care of that issue already okay so now that's still working okay so birthday cake it's nice and juicy and I will post this photo of my desk uh the price amount for this birthday cake is a 50 tnb I'm going to go ahead and activate that and then quantity I'll do 10 birthday cakes and I also want to change the order of these around but let's go ahead and submit it and we get an error on the back end batter Quest and that is because true is not a valid wait price core is null which should not be the case in activation status is true oh yeah forgot instead of uh true and false we're using uh active in draft so for Price score let's take care of that one first price core why are you not registering so the name is price core let's just log out these values so console log values all right so price core is an empty string fascinating absolutely fascinating so is that because I didn't select one of these yeah I think so yeah price score equals one right now okay so um yeah so anyways the reason that price score was none at first is because the way my select or drop down component is set up is that this value doesn't pretty much the value doesn't get set until you click on the menu and choose something and then because I didn't do that the value never got set so actually let me see if that okay so that works I just need to fix this activation status now so let's do that and let's see what we did in tnb OS Source apps shop pages so product details okay wait a minute wait a minute wait a minute we're in our content modal oh wait I'm on the wrong page here we go okay so for Activation status handle submits activation status we just say okay actually this works really well okay so what we will say for Activation status is if the value for Activation status is true in other words if the checkbox is checked then we just wanna and where is we can go to here okay so I want to get activation status from enums a b c d e and we can just see this so if it is checked then that means you want activation status active otherwise you want activation status draft and then this activation status can be in the form before that and then everything else should be good to go but again that's what I said last time and it didn't work out came across some errors but let's see how things are looking at this time and also for this I what I'm gonna add is something like this so because it needs to be selected now what I'm going to do is I'm gonna give it a display of hyphen and the value of zero and this is just going to be the default and then they're going to need to select one of the valid cores okay so now from the top name birthday cake description nice and juicy this image of my desk the price core I want to be paid in tnb how much is this this is worth a hundred I'm going to go ahead and activate it and the quantity I'll just have four of these for sale go ahead and hit submit and now we didn't write any logic to say success or anything but it looks like yeah all right beautiful looking nice seller Bucky 24. my image is uploaded beautiful beautiful okay so now a couple of things that we need to do first we need to do some styling um well an easy thing I want to get out of the way right now is I want to move this activation to the very last thing so it just appears right there I think it's a little bit better and now for the styling what I'm probably going to do is I'll probably Center align everything I think that'll look a bit better and then um aside from styling updates what we need to decide is what actually happens when the user clicks submit and they create a product and for that logic what I'm thinking is we probably would want to display a toast message that says product created successfully and also just take them back to this page which is the equivalent of this page right here now another thing that we could do is we can take them to the product Details page but what would they be expecting what would I want so what I'm thinking is that I would probably want to be taking just to my products page as a seller because if I added a product then chances well first of all it's going to appear at the very top which is good feedback and also I may be more likely to add another product right after since for example if I'm selling a bunch of stuff I probably just want that okay so what we'll do is this once they go ahead and submit a product successfully we'll display a toast and we will bring them back to this page right here so let's do that right now that should be a piece of cake so first thing I'm going to need let's just clear all this out okay Pages Shop sell products actually that was creating edit product now I want to navigate them to some routes so I'm going to be using this logic and all right so this is going to come from use navigate which is coming from your activator Dom react router Dom and then navigate is going to come from the use navigate hook use and navigate we just call navigate and then the route and that is going to happen right after you dispatch it and what is the route of that that is just Shop sell products so Shop sell products and I also want to clean up my imports code optimize Imports and display a toast if I can type if I can type okay so I'm going to be displaying the toast and that is util's toast under display toast and I want it to be green so I need to put the toast type and that's coming from Enos toast type so I'm going to be displaying a toast right before I reroute them so something like this okay so create product and then display post that says created product created get some excitement going there and all right let's see what we got going on here right here okay I'm going to create a new product this time chicken and cauliflower pasta sweets and I got any more interesting photos okay interesting thing uh let's just uh okay we can use this Steve Jobs quote is the product photo for now this one's going to be VTX just test that out too the price amount is going to be uh 26 in the quantity is 10 of these and I'm not going to activate this one but I'm going to submit it we got product created and we were taken back to our products page looking good okay so from here what I'm going to do is start building out my products page now that we have like the product creation functionality taken care of so actually I'm probably gonna go eat dinner right now and then when I come back we can start tackling this products page basically building out these products so pulling these from our store and uh yeah well we'll talk about logic in that video but on that note yeah I mean this is uh it's looking pretty good so got some styling work to do here and of course uh well a long way to go before I can sew that wooden spoon of mine but for now thank you for watching and I will see y'all next time