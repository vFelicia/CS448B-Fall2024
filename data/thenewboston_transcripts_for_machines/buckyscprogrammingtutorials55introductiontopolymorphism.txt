what's going on guys it's Bucky and welcome to your 55th tutorial and in this story I'm going to be beginning to talk about something called polymorphism now polymorphism is a subject that gives a lot of students and a lot of people problems because whenever someone tries to explain it they make it really confusing so let me give you guys just a basic example um you know not through code or anything I just want to talk to you guys for a second so say you wanted to make a computer game and you know that your computer game you wanted to include a bunch of enemies like monsters and ninjas and you know just a bunch of different types of enemies well all of these enemies share the common function say they all had an attack function to try to attack you however they all attacked you in kind of different ways maybe the ninja threw a sigh at you and a monster tried to scare you from under your bed and you know all these different enemies even though they had the same function you know they worked a little bit different well will polymorphism allows you to do is it allows you to call that same attack function on many different objects and since all of these objects like ninjas and monsters since they're all enemies this is why it's valid so since they all inherit from the same class you can call attack on each different object and even though ninja has an attack and Monster has an attack even though you're calling the same function on different objects they all would know what to do they all know that they're supposed to attack you in some way so polymorphism basically allows you to do is use the same function and have many different outcomes so that's the basic idea behind polymorphism but there's actually a lot to understand so let's go ahead and get to it so let's go ahead and start making that computer game now so go ahead and make class and we'll name an enemy and don't forget put your semicolon at the end and now let's go ahead and let's say that we're going to have a ninja in a monster and they're each going to have an attack power how much you're going to hurt you so let's go ahead and well since we learn what protected is we can go ahead and you that and we'll put int attack power so now every enemy has an attack power so now let's of course make a function in order to set that attack power so we'll make it public of course and we'll just make it void set attack power and this is going to take one parameter of course some number and using that number we're going to set the attack power and again this attack power doesn't really mean anything it's just a madeup number so attack power equals a so we're going to pass it in like a value of ten and you know the ninjas attack power is 10 whatever the heck attacked by our means right so now let's go ahead and make another class let's go ahead and make class ninja and this ninja class is going to inherit from Public Enemy so all ninjas are enemies we already know that so now let's go ahead and add some things that are specific to only ninjas well in each of these classes let's go ahead and make an attack function so public void attack there we go and now what we can do is I guess I'll just throw everything on one line um this is the part that's going to be specific to the ninja class so right here we're saying all right we're going to have some ninjas but a ninja is still going to be enemy I mean the enemy's an enemy so whenever a ninja attack what I want them to do just see out on the screen um I am a ninja ninja chop and it'll be like not ninja cob come on ninja chop and it will be like a and then you write the attack power because remember since it's the enemy it has that attack power attribute that it inherited hopefully you guys watched my last couple tutorials and aren't like what the heck does inheritance mean and then just go ahead and that line right there so now we have a ninja class that has all this crap from enemy since it inherit from enemy and it also has its own specific attack function so whenever a ninja attacks is going to say I am a ninja ninja chop minus 10 like it did 10 damage to you or something so let's go ahead and copy this and we'll make another class right here we'll call this class and actually I'm about to scroll off the screen so let me just bump this up and we'll make you know this a monster class now a monster is also an enemy so you have two enemies you have a ninja and a monster however when a monster attack it says a monster must eat you explanation for explanation point it'll be like minus 25 or something like eating you doesn't kill you it only does 25 damage so basically what we have here is three classes we have an enemy class which is common to all enemies so all enemies are going to have an attack power however each specific enemy attacks in a specific way a ninja is going to chop you and a monster is going to eat you so let's go ahead and start coding and making all these objects so in our main right here let's go ahead and make a ninja object ninja and I'll just name this n and a monster object and I'll just name this M so you got a ninja and a monster and now what we need to do is we need to make two enemy objects so let me go ahead enemy and make a pointer and we'll just name this enemy one and we're going to set this equal to the address of our ninja object now before I go on let me say this because this ninja object is of type enemy remember all ninjas are indeed enemies all monsters are indeed enemies that's why we can do this that's why we can say the address equal to the pointer so anything that an enemy can do a ninja can do does that make sense they should and also anything an enemy can do a monster can do so let's go ahead and just I shouldn't do this you should never copy and paste because you always mess up stuff enemy 2 we'll set this equal to monster address so basically what we can do now is this we can use that enemy 1 object and remember whenever you're working with pointer functions you need that little arrow and you see it already pops up attack power so our program already knows that and any enemy object you can call attack power because even if it's a ninja a monster they all have an attack power so that's why this is valid so whenever you set your attack power to you know a ninja can do like 20 damage or 29 or whatever it already knows that it's supposed to apply this to the ninja object so even though we're setting it enemy attack power 29 it knows that indeed since it's pointing to the ninja object that means the ninjas attack power is 29 so basically before I go on because a ninja is a type of enemy this is valid this line of code right here anything that ninjas can do excuse me anything that enemy can do a ninja can do because a ninja is just a more specific type of enemy so every how should I says every enemy has an attack power so that's why we're able to do this every enemy has an attack power and the reason knows whose attack power to set is because it's a ninja object right here enemy 1 equals a ninja object so let's go ahead and just copy this again you should never copy you ladies and gentleman and we'll say enemy 2 which is the monster let's set this attack power equal to you know 99 or something stupid so now we can go ahead and with each of these objects we can call attack and it will give it their own custom text so and attack already filled in first and M attack so we kind of used a combination of you know two different classes using the general enemy class we set the attack power and then whenever attacks it's going to use that attack power like I'm a ninja ninja chop 29 so let's go ahead and run this and see if I forgot nice semicolons or anything and I did so hold on one second all I see what I did wrong what I did wrong is I actually just try setting the attack power and the method was called set attack power so let's go ahead and copy this and we'll set attack power to 29 and set attack power to 99 now if we go ahead and build around that there we go it says I am a ninja ninja chop 29 and the reason at NU 29 was be kind because of this line right here and whenever we set the enemy which was an enemy object but it knows that it's supposed to be working with that monster object whenever he set that equal to set that tech power equal to 99 right there had to find it it knows that whenever the monster attacked it was supposed to have an attack power of 99 so that is basically how you can do that and I guess I'll see you guys later