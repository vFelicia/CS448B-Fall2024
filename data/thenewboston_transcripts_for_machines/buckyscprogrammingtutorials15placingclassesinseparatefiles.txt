what is going on guys is Bucky and welcome to your 15th C++ tutorial and in this tutorial I'm going to teach you guys how to separate your classes and actually add them in different files so what programmers usually like to do is they like to separate their classes into separate files because it just makes it easier to work with and manage and edit later on so once we have like a huge program with 100 classes we don't want all of those classes in the same text file or l so just get way too huge so what they like to do is separate it and it makes it easier to work on especially if you're working with a couple people maybe one person could work on each file at a time so anyways enough of me talking let me show you guys how to do it so we have a basic program right here and we decided that it's time to add a new class well in order to do that go ahead and press file new class and then we have a new popup box that pops up the first thing we have to do is name our class and I'm just going to name mine burrito or something like that and by default a couple things are checked and I don't like to have them checked there's something called a destructor and we're not going to deal with any of that yet so uncheck virtual destructor and also has the structure and another thing I like to do is I like to keep all my class files in the same directory as my main file so by default I think this is unchecked and what you want to do is check it in that way all of your files are going to be in the same directory or in the same folder as your main CPP file so once all your settings look the same as mine go ahead and press create and what it's going to do I'm just go ahead and press yes yes to that stuff and what it's going to do is it's going to create a couple files for you and you're saying RA Bucky what the heck is all this I thought I was just going to give me a blank file I was going to put my class in it and I was going to be good to go well what we need to do is we create our class a little bit different than we were creating in the last couple tutorials we're going to be separating it in the two files so by default codeblocks automatically created pretty much a template of the two files that we need one is a dot H and one is a dot CPP the dot H is called the header file and the dot CPP is called the C++ source file and this is we're going to be writing the code so first of all let me explain you guys what the header file is the header file is where we're going to be putting all of our classes function prototypes and variable declarations so remember before I said that whenever you made a function you could go ahead and prototype it above it main well we're going to be putting all those prototypes in the header you'll see later on and aside from that this dot CPP file is where we're going to be actually building the functions themselves so this is pretty much where all the titles go and this is where all the bodies go basically it's a little more indepth than that but that's a real basic summary so the first thing that I like to do is get rid of this private and protected because we don't have any of those yet and another thing that I like to do first off is see this dot CPP file or CIN all right how come you needed this using namespace and include in this CPP but you don't end this CPP well actually you do so go ahead and copy that and paste it right in there so again both of these dot CPP should have the same things include iostream and using main page namespace STD so once you have this paste it in your new burrito CPP you're going to be good to go another thing that you're going to see is this class has already built our constructor for us remember in the last tutorial I thought you guys had boat constructors what they are pretty much functions that get called automatically well as you can see this already builds the function prototype and starts building the function body for us so um by default it just has a comment in it and I don't even know if I told you guys what comments are but they're pretty much just little notes that you could write to yourself I'm have no effect on the program so let's go ahead and delete this and before I start writing something in this function I want to talk to you guys about this the last thing that might confuse guys is the colon what this double colon is is it's called the binary scope resolution operator so just remember that for your test so that's the technical term but what the point of it is is it's basically saying that this function which is called burrito because it's a constructor excuse me because it's a constructor is a member of the class burrito so usually you're going to have this second one be a different name in this first one state burrito but anyways it's basically saying that this function is a member of this class and you use that the two colons right there if you didn't include those colons then it wouldn't know what class this burrito was supposed to belong to so it will give you a bunch of errors but now whenever you're making functions make sure you have the class before it separated by two colons again it's kind of weird seeing the first but you'll get used to it so aside from that let's just go ahead and add something to the constructor so remember a constructor gets called automatically as soon as we create the object so if we go ahead and just go ahead and type like I am a banana or something like that something incredibly stupid so now let's go ahead and write end line and now whenever we create an object from this class it's going to print out I am a banana spelt it wrong but hey who cares so before I go ahead and run this program I want to talk to you guys about one more thing you sent all right Bucky I understand how to do this in it's not like I made C++ or anything but just out of curiosity why do you have to separate the dot H in dot CPP file why didn't the users who ever made C++ just let you make it all in one file well the reason behind that is this whenever you're going to you know give these functions to your friends to use or maybe you're working on it with a team of programmers or maybe you're just distributing this for sale on the internet well you're going to want to compile this right here and change this all in ones and zeros and where you're going to be giving the other programmers is this and raising you only give them basically the prototypes or the titles of the function is saying alright I already built all these functions they work perfectly you don't need to change it all you need to do is to use the functions themselves so again whenever you're distributing this this is going to get compiled and the programmers are going to have access to your functions but they aren't going to be able to change the function bodies themselves so anyways that's a nice little background you didn't really need to know that for this story of just a nice you know a little tidbit of information so that's why you split them up so the last thing that you need to do is this in order to use objects from different classes in our main CPP we need to include the headers so go ahead and just like your burrito dot CPP included the header we need to include the header right here as well so now that we included the header we can use objects from that class so let's get rid of this see out hello world because we don't need it so now arm now that we have the constructor doing something printing out I and banana we can go ahead and build an object in order to build object we just go ahead and type the class name and some object like Bo and it should be good to go so let's go ahead and build and run this and see what happens I am a banana simple enough so to recap one last time in order to make a new class you go to file new class you name your class and make sure you check to have the header which is this and the implementation file in the same directory as this so now what it did is it created all these files for us automatically the only thing we needed to do is make sure that all of these includes and all of these includes were the same and basically whenever we wanted to use this class and our main CPP we needed to include the header and what this header did is it basically included the whole class and then we were able to use all the functions variables and all the stuff from that class so I know this is a little weird at first because we're just looking at real these small examples and they aren't really useful don't really tie together to make a full computer program but later on once we are building a full computer program you'll begin to see why classes are useful why a header is super beneficial and why you actually do want your function bodies in a separate file so again these really small examples might be hard to see but I just want to break it down easy for you guys so you understand the basics before we dive into something a lot bigger so for now thank you guys for watching don't forget to subscribe and I'll see you guys in the next video