alrighty everybody welcome back to another video and in this one we are going to be getting our hands dirty getting started with recharts which is a pretty cool charting library for react and more specifically we're going to be building this type of Stack to bar chart and we're going to be integrating it into a little trading simulator app I build out it's a pretty cool app to well it generates lots of data that we can play with at least so yeah all this is kind of of course inspired from this conversation we were having in the last video where Tajay mentioned he was in data analytics and then some other people Paul specifically uh suggested some features that we could use for excuse me the university app so that's kind of the plan and I know also that I said I was going to be working on the University app in this tutorial but what I want to do is first Implement that chart here I'll go ahead and make sure that we installed the library properly and set up a simple chart right here just to pretty much build out a proof of concept to say tnbos can support this chart and then from there we can go ahead and probably have uh I don't know if we'll use this style but some more of these charts right here we'll use it as like a dashboard for the University feature but for right now we'll just go ahead and get started with some baby steps so I already got a new Branch let me just go ahead and do npm install recharts plural that is all right that looks good to go now after this what I'm gonna do is I'm going to be working on my trade app and I'm just going to create a new component for this and actually just named it stacked bar chart I might want to change that a little bit later on but for now it'll be good all right so this is gonna have us actually I don't think we're gonna need to style anything so let me just go ahead and create components and for the name I'll just name it that is terminal doing I am tidied this up a little bit all right so right now we just got basically a div that says stack bar chart in it and then I'm going to be putting this right above here we'll say underneath this order setting so this is the orders page so in that case Pages orders all right so let me just import this in render it right now so it is called stacked bar chart talk about church and all right so I'll stick it right under the page header all right let me make sure you don't got no errors and okay yeah I need to restart it probably all right and actually this is the error right here Styles file let me just convert that to a div because we're going to be replacing that in like half a second anyways and all right we have this component rendering right here so we'll go ahead and adjust the positioning and everything but uh right now just want to get the foundation structure now for the Stacked bar chart what I'm actually going to do is just pretty much steal this uh boilerplate code so for this start with all this data I need to import those I don't believe all right so this data is going to have to clean up that later and now let's copy this responsive container which is going to be the parent for everything and let me just do this return it that's and first of all I'd like to have my attributes sorted alphabetically I also want to take this class name which we need for those style components and just pass it through to the parents margin we don't need to set any of this let me do some cleanup right here all right not going to set margin there because we want to do that from CSS we don't need this anymore and then our data is pretty this up optimized by any ports and all right so getting some issues right here and this is just because the way I have eslint set up um these Keys need to be sorted so I just have to go and sort each of these and actually let me not even do that because I'm going to be replacing all this dummy data all right so here let me make sure nothing's broken so far all right so it's no longer displaying and I think that I know why and that's because with a responsive container I only want one of these to be um relative so we'll say height 260 with equals 100 so yeah with a responsive container one of the props should be a pretty much a static amount in pixels and then the other one should be a percentage string and hopefully if I'm correct yep all right so now we got a displaying right here but what I want to do is right now this is taking up um the 100 of the entire width I only want it to take up well maybe 100 but I'm thinking about 80 might be good and then kind of Center aligned here and also I want to add a bit of spacing between this top order card and then pretty much just chart right here so in order to accomplish that what I'm going to do is on my orders where I'm importing this stacked bar chart I am instead going to import it from the order Styles file and instead of Stack bar chart I'm going to import it as u in other words unstyled stacked bar chart and then I am just going to say that the stack the bar chart is a styled version of this on styled stack the bar chart and four of this what do I want to do to it specifically well actually the only thing that I'm going to do is to this in this div like the properties I'm going to override directly even though I want to adjust the position I'm not going to do that quite yet what I'm going to do is go and say font size is equal to 12 pixels and by the way to actually render this on the screen instead of rendering it from here which is the component being imported we want to render the styled version of that which comes from our Styles files since we're importing everything is s right here so any who we should now render our custom version which should have 12 pixels and yes the uh the font size can couldn't think of the word there for a second but the font size did increase to 12 pixels looking good all right so the reason I said even though I want to add a little margin bottom to that chart to get some space between this and this card right here I want to do it inside a container because that's going to give me my Flex Behavior I want and let me save this uh stack the bar chart container and the way I'm going to render this is pretty much like this stack bar cart stacked bar chart container if you can say that tongue twister then that's what I'm going to be having or excuse me treating is the parent of this stacked bar chart and for this I of course want to display it as a flex and I'll just say justify content Center and that's going to Center align it horizontally and then for this this is where I'm going to stick the margin bottom of 24 pixels see how this looks all right looking pretty good see we've got a little bit of space right here actually I wonder let me think about this I don't even think I need this since it's already responsive and just using the full width anyways all right so that should be good so now let's go ahead and take a closer look at this these uh charting elements right here and figure out what's going on so responsive container we already know what that does it's pretty much the parent container for everything give it a static height and then a dynamic width and then that's going to give you this Behavior very much that cool responsive Behavior looking good and then the bar chart of course uh this is pretty much the component that we want to create all of the settings quote unquote are going to be children components that go right inside there but for the bar chart we just need to give it data and for us this is going to be a custom array basically like an array of whatever statistics you want on display of course you know these are the actually we don't even need these data heightened width let me just make sure yeah since we're using a responsive container we don't need those attributes and all right so this uh Cartesian grid right here this is that background grid you see uh I'll stop however on over but you see that little dotted grid right here now the first number here you can kind of just think of this as how I think of it the stroke Dash or eighth is three three is the length of the lines and then this other three is the length of the gaps and I'll kind of show you what I mean so I'm going to increase the first one which should increase the length of the line and you see you have to kind of look hopefully you can notice on YouTube but the grade lines uh got a little bit bigger and of course you can probably see what's going to happen but you know I gotta demonstrate it anyways my OCD kicking in and there you go you see that there is a more of a gap now than the line itself so let me change that back I actually like how it is by default off the template33 now this xaxis right here now for the data key this is of course going to be the key of the data that you want to use on the xaxis and since we have a name that was the little sample there you see that the name property is going to be displayed down there for us we're actually going to use um dates and then we're going to have like the last seven days we'll display and then we'll have a stacked bar chart where we'll have both the number of filled orders and the number of cancel orders so yeah that's the story behind that and now for the yaxis this is just saying that we want a yaxis so you see that we didn't specify anything that's because the values are derived from the actual data so we don't need to pass in any attributes however if we just remove that component completely then we wouldn't even have these values right here so to show you what I'm talking about let me just remove xaxis or excuse me yaxis and you see that those values disappear but I actually like having those so I'm going to comment that pack in now for this tool tip in the legend components right here that is saying to for the tooltip you see that whenever I hover over this then actually let me add another a couple columns real quick all right so whenever I hover over this you see that this little tool tip pops up right here that's what this is and that Legend component is just saying to display these little like a guide down here and then last but not least we have these bars and These Bars of course you know what those are the actual bars in the chart uh the data key is the key for whatever data I don't know what PV and UV stands for in this example but what we will have is something like filled and canceled however I will type it properly and then these or excuse me the stack ID so if two bars have the same stack ID then they're going to appear on top of each other and I'll show you what this means by this purple in this green you see how they're just stacked on top of each other now if they have different stack IDs then they'll just appear side by side so let me go ahead and change this one to B you see just spear side by side there you go now let me go ahead and now that we kind of understand everything uh what do I want to do first so the first thing I want to do is actually change the color of these because what I want these to be is like you see these filled orders in these canceled orders and these badges already have a standard color and I already have it as a cheat sheet on the right hand side of my screen however if you can uh well let me actually show you this batch component so in the component badge under my Styles you see everything is embarrassingly hard coded in but uh this is where I'm getting the colors from I definitely need to pull these out into a more standardized color theme but uh yeah just been lazy I guess but anyways now what we can actually do is start prepping this for the data that we want so what I like to do is kind of just start here like what's the ideal data that I'm going to be passing in and again like I said each bar is going to be a certain day and that day is going to have um pretty much display the number of filled orders and canceled orders on top of it so I'll have a count for the canceled orders for that day and I'm just adding sample data right here so I'll say one and for the created date so this is I don't know exactly what format we are going to be using but I'll say Jan 8 uh 2020 there you go she don't even actually it's February I'm only off by like a month all right filled uh five and yeah it's pretty much the format so now let me just go ahead and get five of these just to make sure that it looks alright so first of all nine 10 11 12. and let me see two ten I like having realistic data and uh I don't know starting with realistic data instead of like adjusting the litter just always saves me time and then I'll do like a 3 15 a lot of order or 13 that looks good too and 214. okay so now that we change this we also need to change a couple keys right here so the xaxis uh pretty much what each of your bars are it's just going to be its created date and then for the first bar I'm just going to say that's going to be the filled one again this should be my green color and then for the canceled this is my red let's see how that looking all right something like this so these are my orders each day and it displays five now I'm just go ahead and add two more cl7 looks because I think I want to display I think I want to display the last seven days all right I like the way that looks full dates yeah this looks pretty good all right so again like I said what I like to do is kind of mock everything out with sample data and then after that I'll go ahead and then write a function uh we'll probably use memo for this and it effectively is just going to return this exact shape of data so on that note let me actually go ahead and pass the order list into this component I already calculated what list of orders should be displaying on that page and since this is a decently heavy operation iterating through a bunch of orders at least then I don't want to have to recalculate it I don't want to stick it in a hook or anything so I'll just pass it down and for this I need to accept it so I'll make uh stack the bar chart props this is gonna take our order list just keep a name the same thing and then for this type it out let me just import some things that I need uh let's see resolutions you need those and let's see what else all right this should good now this order list this is just a list of orders and need to acceptance here past that bad boy down so it can be used all right so now that it accepts that order list grab it here and we're yet all right so now the order component which or excuse me the orders page is passing in the orders list to that stacked bar component so what we can do on that orders list and by the way the orders list is just a list of all of these all of these orders that are pretty much in the section right here now before we hop into any more code let me actually go ahead and show you something so I am you aren't going to see this but I'm on my MacBook right here and I'm just going to go ahead and first make a simple order and it'll just be a sample one I'm going to hit place order now and check out what happens so what the system does is it goes ahead and a bunch of stuff's automated it goes ahead and fills the order and everything is smooth sailing now the reason I want to show you that is because next up I want to show you some edge cases where if something goes wrong in that process so anyways what happens in this process is that these two devices are working together kind of to say like your turn okay I'm done now your turn and throughout this process it creates this completed order object now there's also some situations where say one device shuts off in the middle of that process then in that case I just kind of like deferred it to require human intervention and in the code I call this a resolution so now with that being said on my MacBook all right I probably should have had this page up already but what I'm going to do is I'm going to manually comment out one of the lines to uh that's in the middle of the order process I basically just want to jam up this pipeline and now I'm gonna Place another order wait for it wait for it okay now check it out so this is the order I just placed right here and it says a waiting payment because this is the line that I canceled out so the payment for my MacBook which is the other device not the one you're seeing the screen recording of but that payment is never going to get sent so what's going to happen in this case is that once this payment time and I I definitely should have reduced it I'm probably gonna have to pause the video so we don't have to stare at this for 10 minutes but either way once this expires then it's going to say hey uh there wasn't any payment received and then it's going to require a resolution and that's the state I want to show you and this is probably going to make sense like in one minute when you see what this is actually doing but for now I also want to just make one more order that's going to need to be resolved and the reason is once you have this resolution object you're going to have a choice of do you want to fill their order still or do you want to cancel it and I want to have two of these orders because I want to just test filling one and canceling one but anyways I'm gonna wait until these expire and then I'll uh start the video again you know I can probably just write this function while we're waiting all right so yeah this data object right here this was all that demo data uh we essentially want to use use memo to replace all this but I'll keep it commented out since we already know what the keys are going to be named so I'll say well first of all right so we're going to be getting the resolution objects which well you all don't know what they look like yet but you will whenever that timer expires and then for that data I'm just going to say constata equals use memo and what this is gonna do is it's going to use a reduce function and all right so let me think how I want to do this so I don't want to have to iterate through it any more than one time so let me go ahead uh iterate through each of these orders and then I'm going to stick each order and basically their day bucket so like if I had five orders today then those five orders are going under their own bucket and by bucket I just mean uh an object or an array but that's how I'll separate them and actually you know what I can build this thing even easier because all I have to do is for each day as I iterate over that order I can either move it in fill it or canceled or just ignore it if it is neither of those statuses and by the way I know a lot of new information being thrown at you but 99 of the orders the way I wrote this app are going to be either filled or canceled it's just that while the order process is going on the order status may be in like this weird like pending phrase or waiting for something but um yeah as long as you don't have it we're pretty much just uh finding all the orders that are not currently in progress I guess that's all I'm trying to say so what I'm going to do is just uh build this dynamically and I'll show you how to do this so all right so this is going to be orderless and then I'm just going to reduce and I'm going to reduce I'll say previous value I need to type this out so the type of this I'll just put any although this is going to be this shape an array of these type of objects uh and the current value so since we're iterating over orders this is going to be order and all right reduce and we're going to be building an array and let me just go ahead and return because my IDE is kind of annoying if I don't have a return statement in there all right so anyways when iterating over this order list what do I want to do first well I'm going to create this key first because all right so I'll create this key and then I'm going to create an object Key by it as like a mini uh lookup mechanism and then that way I don't have to find that item in the array each time and then when I return the results I'll just get the values of this since it's going to be keyed by a string and the values are really all I care about so anyways uh the const created dates this is going to be equal to a new date and the reason that I need this is because on the order object the dates are the string but I actually want to convert it to a date object because I need a format this date in a specific way so anyways the order.create just convert that to a date and you're just going to call to local date string and I'm going to do undefined and the actually let me copy this from dates to local day string the short short long all right here we go and this is just going to give me a standardized date that I can use as the key however right now this created date is indeed a date and since I want to use it is a uh convert it back to a date string I'll just say constate string equals create a date to string and then I can use it as a key later on but first what I want to check for okay so we're eventually going to be building this where we determine for the orders of that day uh look at each one and say if it was canceled add one to this if it was filled it would add one to that and for that there is actually one order status um the canceled is in a specific or excuse me a separate type of object called a resolution I'll show you what these are so tree types resolution so the resolution status could be canceled filled or unresolved unresolved means hey uh the person didn't decide what they want to do yet filled means that the order was completed of course canceled means that it was canceled but if there is a resolution then that status it basically overrides the default order status since like manual human intervention always overrides like the automated process that's how I thought of it in my head at least so const resolution this is going to be equal to resolutions and it would be keyed by the order ID so order ID so this resolution object it may exist but it may not so we don't know so just want to mention that because later like right here we need to check if the order is canceled and for that I first want to say if there is a resolution and the reason that I like to have these double ampersands even though let me go ahead and type out the entire logic then I'll tell you so if there is a resolution then the resolutions resolution status if this is equal to resolution status canceled then that means the order is canceled so yeah this double Ampersand basically just converts this object to a Boolean value we can write it like this but well sometimes actually typescript will complain if you're using in certain certain situations but I like that just uh I don't know just feels cleaner in my head I guess but yeah that's why I did that just converting it to a Boolean and then const is filled what we want to do here is we want to say order dot fill status this is equal to fill status complete then the order is filled so like I said 99 of the orders are going to be either canceled or filled however if they aren't we'll say if not is canceled and not is filled then that would just mean that um that order is currently in progress It's a rare situation but it can happen and in that case we're just going to return the previous value so make no change to this array that we're building and actually this is object now after this what we can do is this so we'll say that if and I'll say the previous value and the key of this is the date string so basically if we have a bucket for these dates already then what do we want to do well for this bucket and remember by the bucket I just mean this object right here well what we want to do is we either want to add one to the canceled or filled depending on what this order is so if we have buckets then take this which is the bucket and actually did I even let's do this all right so I want to cancel we'll say plus equal is canceled then we're going to add one to cancel otherwise we don't add any and it's the same logic for filled where we want to add a 1 to 1 to filled if it's filled otherwise do anything else all right so this is saying if you already have the bucket or you already have uh pretty much orders for that day then go ahead and make these changes if not then what we need to do is actually create that bucket and this is equal to this object all right it's probably easier just to uh type this out how lazy am I come on uh let's see canceled frame this out real quick so canceled created date filled and now I can actually get rid of this all right so for the canceled value in the very first time we'll say if it's canceled then it's equal to one same thing for is fill logic and the created dates we're actually going to use this D string what is keyed by it all right so right now this result is a dictionary whose keys are dates and whose values are these objects right here and we just structured it that way because it was uh we only have to iterate over everything once however whenever we return this we actually only want the values of that since the keys were just for easy lookups so object the values of the results that's going to give us a list and actually this is going to work right here I believe so yeah this should work but I want to make some changes as well and since I updated too much let me just go ahead and restart all right so it was getting air and now I see what it is it was because I didn't return previous value right here are it alrighty so yeah now the dates are appearing however what I want to do here is actually uh switch the ordering of these because you see the way that this order list is coming in I have the most recent orders at the top and then the oldest ones at the bottom however for the list I don't want the oldest ones or excuse me the most recent ones at the beginning and the oldest ones at the end I want the most recent ones on the right hand side so to do that I just need to reverse my array it's being returned and I'll just say reverse and another thing that I want to do is even though I only have orders for four days one two three four actually you can see that the reverse worked properly I now have the most recent ones appearing on the right hand side but anyways what I was saying is even though I have them for four days right now one two three four what I want to do is I actually want to limit this to seven right now if you had more days it would just display all the days but to kind of limit that what I want to do is just slice this and I'll say 0 to 7. and just to show you that this works let me just slice it for two and you see it's gonna only display the last two items so by slicing it and giving it a size of seven this is gonna Max it out at no more than seven items because I don't want to display any more than seven days but wait a minute is that the entire thing is this all we had to do all right well for some reason I thought it would take longer than that oh yeah the other thing I want to show you is this resolution right here so right now it is 22 and I have five filled orders and one canceled one and let me just go ahead and for this resolution I'm just going to go ahead and fill it and I want to do this in a real time because whenever I click this you should see this change right here so fill this oh wait a minute unable to determine well you know what I think I got disconnected yep so during my debugging and react hot reload got disconnected so I just need to reconnect yeah sometimes if uh there's error then hot reload will disconnect me from my websocket so then I have to restart it to uh just reconnect so that's what's going on here now hopefully all right yep I'm connected with my MacBook now now let me go ahead and resolve this to fill the order so again five filled order is one canceled hit fill and you see well hopefully you saw it that uh This Bar increased right here now I have six filled orders one canceled and now for this resolution instead of filling the order I'm going to cancel it and again keep an eye on this right here should update in real time right now it's six filled to one canceled cancel order order canceled successfully and six field two canceled all right looking good so we now have our beautiful bar chart don't even have seven days yet but once we do they will all appear here and it looks like the fill status and cancellation status updating logic is still working and uh yeah another feature for our OS quoteunquote so uh yeah thanks for watching and in the next video I actually don't know I'm gonna kind of Go free solo here and uh maybe start working on the University app by the way another thing I might as well show you while I'm here is I built in a notification system so let me send it because I'll show you what the problem was uh before so before I actually added a seed one of my friends from Ethiopia and he was chatting with me and he would send me a chat message and I didn't even know that he sent it to me since we didn't have any notifications but now check this out so now when someone sends a chat message you see this little notification right here gonna click this and then I built these little red blurbs right here so click it and then this little red line it shows you where your new messages are so pretty cool at least I thought it was cool I was happy to have a notification system it uh makes chatting a whole lot easier but anyways in the next video we're either going to be uh building a notification system into this University maybe building one into our uh chat or excuse me our trade simulator I kind of want to get back to working on this University though it seems like uh it's going to be a little bit more interesting and we can also build out that dashboard feature to see you know maybe the total number of courses you created how many students are viewing so on and so forth so that should be pretty interesting too but anyways uh thanks for watching and I'll see you next time