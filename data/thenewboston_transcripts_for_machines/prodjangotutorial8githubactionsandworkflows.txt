all right welcome back y'all in this video we are going to be talking about GitHub actions now GitHub actions allow us to manage something called workflows and a workflow is pretty much just automated task and these workflows they can be triggered whenever certain events happen to our repo and they can pretty much be anything that we want but they often include things like building our app testing it deploying our code and in this series or I don't know if it's going to be in this video or I'm going to break it up into two videos but we're going to be setting up two separate workflows the first one that we're going to be setting up in this video is we will say that whenever we submit a PR we want to automatically check for linting issues and also run those automated tests now probably in the next video we're going to be setting up another workflow and for this what we're going to say is that whenever a PR is merged into Master then we want to automatically deploy that code to our server so pretty much just the way that we can automate a bunch of like repetitive tasks for our code now with that said sounds pretty cool but how do we create those so workflows are going to be stored and you have to actually name it this it's a very specific naming convention but if you go ahead and create a new directory in your repo and name it dot GitHub now within this directory you need to create a new subdirectory and name it workflows so all of your workflows are going to be in here and you can name them whatever you want but they have to be a yaml file so the first one that we're going to be creating like I said is that whenever someone submits a PR we want to check for linting issues and run our tests as well so because it's going to be triggered on a PR submission I'm just going to name this PR Dot yml PR Dot yaml and actually I want to create a new Branch for this I'll say uh um actions testing something like that well just say workflows all right beautiful now in this file the first thing that I'm going to do is just give a name to my workflow now as we're setting up this workflow you're going to see that quite a few different things you can assign a name and all this name is really doing is just a human friendly name because whenever we take a look at these workflows later on on the GitHub UI then this name appears in a couple different places but either way for now for the name just give a human friendly name and I'm just going to name it quality assurance since this is basically what it's going to do now after this I'm going to add this keyword on right here so this is pretty much telling when do we want to trigger this workflow now remember I said that whenever we make a pull request that's when we want to run this workflow right here however this other one workflow call this one isn't as intuitive what this means is that we also want to be able to trigger this from other workflows and actually you know how I said that this is mostly for QA linking our code and running tests we also said that we're going to be setting up another workflow in the future to run our CI CD in other words deploy our code um in automated fashion now in that other workflow before we deploy our code we actually want to run this again just to double check that our code is linted properly and our tests are passing so on and so forth but we'll see that later on just want to point out what this keyword is right here now this workflow um kind of to talk you through a high level what we're going to do in just a second this workflow is going to consist of one job now all workflows consist of one or more job but this one's going to be simple it's only going to consist of one now in that job it's going to contain a series of steps or in other words like instructions on what we want it to do but I just want to point that out because I am going to include the jobs keyword right here and all of our jobs are going to go right inside here now like I said we're only going to have one job and I'm just going to call it quality assurance so this is the only job that we're going to have in this workflow and just like we named our entire workflow we can also give a name to this specific job and that human friendly name I'll just name it quality assurance because uh yeah it's usually just what this is um yeah but you can name it whatever you want so what we're going to be doing in this job is we are going to be spinning up a container to run our app and then once our app is running that's when we can run the makelint and make test commands now because whenever we run a container of course we need to run it on some kind of operating system we are going to tag it with um this directive right here and this determines the machine and it's almost the equivalent of like the ec2 instance that we're going to run on so just the latest version of Ubuntu and I'm choosing this because in production we are running everything in Ubuntu so we want to keep everything consistent so now that we have our base image what we can do now is specify what container we want to run our app in or this job in and because if you check out in the docker file you see that in production we're running everything on three ten four bust the rhyme that's why I'm going with the same container so this job is indeed also going to run in a Docker container just the same one as production now that is looking good so far however before we get to actually running our app and running tests on and so forth what we need to do is we need to set up one service which is our database so just like in this Docker compose file it's actually going to work pretty similar to this where we're going to run our app in one container we also need to create another container for our database service and how do we do that well it's actually going to look very similar to this right here what we do is we create a Services keyword now inside here of course these are the pretty much background services that our job is going to need and all we need to do for this is just create a simple database from this same image it's going to be postgres and all of these environment variables are going to be the same as well and by the way one other thing that I want to mention just want to make sure you don't overlook it in your Docker compose file when setting environment variables you call it environment however in this GitHub workflow you just say EnV so you know it's something that people commonly Overlook so uh you know just pointing it out so now that we have our database running what we can do here is fill out the last section which is the steps to actually run our app and run the linting and test command so in this section called steps the very first thing that we need to do since we're pretty much starting with an empty container right now what we need to do is actually check out our code now this part is it always felt not that intuitive to me because I always looked at it like this workflow is running in our repo but still what we have to do is we need to use this directive to actually check out our code or our repo so this uses command what this specifies is an action that this workflow should execute and this is just a builtin GitHub action to check out your code now after this what we need to do after we checked out our code is we need to install poetry so how do we do that well we do it with this Command right here so it's going to use this action which is just um an action that was created by this person to install poetry I'm just going to name it install poetry now because we need to give it some extra information we are going to use this with keyword right here now whenever we use with in conjunction with action it just allows us to specify extra parameters that we need and of course for this since we're using poetry we need to specify which version we want to install so now we have our container set up and we checked out our code we installed poetry from here now that we have poetry installed we can just install our dependencies so how do we do that well pretty easy just give this name install dependencies and under here we're going to use this keyword run and you can probably figure out what this does it just runs a simple command and again this is just installing our dependencies and all of these precommitted tools to pretty much give us the ability to lint and test pretty much to solve everything that we need for the same as our local environment so now that we have everything installed we can get to the good stuff which is actually linting and testing our code so for LinkedIn we can just go ahead and name this step lint and the command again is just our make Command which is makelint and for testing it's going to look pretty similar however check it out so for this command of course it's make test we're just going to name this step in the process test however remember that by default our project is set up to let me see project settings base check it out so the database that we're using by default with no custom configuration is cooking core however just like we did in our Docker compose file we want to overwrite the setting to point to this database that we're using right here now whenever we are using it in GitHub actions of course we aren't using this one but it's pretty much the same thing where we want to use this background service or this database that we just spun up so how do we do that well it's pretty similar to how we did it in the docker compose file and that is we are going to include an environment variable remember unlike Docker compose where it says environment because this is a workflow we just use EnV and then we just set an environment variable just like before now the very last thing that we need to do is set our local settings path which is pretty much just the settings for whatever local environment that you're in now remember that on our development environment whenever we were setting this up we manually created this local directory and also in the production environment we created that local directory as well however in this GitHub workflow all it's doing is it's checking out our code and our repo by default it doesn't have this local directory and what we could do is figure out a way to create one in this environment and like copy our files over however I'm going to show you um just a much easier way to do that and that is this in your cooking core wherever all those templates are which are in Project settings templates go ahead and create a new one and I'm just going to call it settings Dot github.py now in here I'm just going to paste in the settings that we need now instead of taking this and copying it over to like a local directory right here what I'm gonna do is I am going to set the environment variable just to point to this right here so I don't have to create any directories copy it over so on and so forth all we're saying is that for this local settings path just use the template file right like that and with that said this workflow should be set up good to go so as long as I didn't mess anything up I'm going to go ahead and push this up let me see go ahead and commit that let me show you everything so it can see in okay uh workflow now let me just go ahead and push this up to GitHub and now hopefully in a second there we go all right so there's our branch and I'm going to create a pull request and whenever I do this looks good so remember because we had this directive right here where on pull request is going to trigger this workflow it should go ahead and kick this off which we see right here and you can also click this tab right here actions and that's going to show you the workflows and the status of them so I'm just going to go ahead and click into this and you can see that the quality assurance workflow is indeed running and if you want more details you can just click into this and it gives you like a detailed view of each step so right here is just initializing those containers that container right here where was It Busta Rhyme and then all right so doing that and after this is checking our checking out our code right now installing poetry so everything looks so far so good Now using poetry to install those dependencies no issues so far and now that everything's installed it's just going to run those commands to first check for linting issues and I actually I'm not even sure if we do have linting issues probably should check this beforehand but either way I guess it's fine to uh check right now all right that one passed that one passed past and passed beautiful so no linting issues and the last thing that's going to do is just run our test and okay I didn't see any outputs but where is it all right so check next to this mean our tests passed as well and now you can see this overall green check mark and if we go back to our pull request we see we get a little check success right here and a little indication all checks have passed and if you want more details to see which ones they are that was this workflow right there so now that our workflow is working properly and our code is verified as good we can go ahead and squash and merge this bad boy in and yeah delete the branch all right so nice we got one workflow taken care of and what I will do is in the next video I'll create another workflow and that workflow is going to be responsible for deploying our code to our server it's going to be fun going to be amazing and yeah I'll see you then