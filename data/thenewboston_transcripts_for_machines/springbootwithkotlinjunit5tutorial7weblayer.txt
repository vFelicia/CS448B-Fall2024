all right so we've finally reached our top layer which is the web layer over here so this one's really responsible for the rest mapping so defining the rest api and also just handling the requests that come into these rest 10 points and then preparing the responses so in this video we'll create our first proper controller which enables this first endpoint that we're working towards that allows us to retrieve all the banks so back in our ide we're gonna go ahead and create a new package and this one as you might think we can call a controller you can also call it something like resource this is quite common but really controller is i think more easy to understand now especially when getting started so in this we're going to create our bank controller and just like we did with the hello world controller i'm already gonna go ahead and add the rest controller annotation which will also tell spring boot to well consider this as a bean so it's gonna be part of the application context which will also be relevant for our testing purposes okay but this is all i want to do here for now because again we're going to first create our test class for it again of course using junit 5 click ok and now this time we're going to do something quite different because we're not going to be testing pure pojos by creating the objects ourselves instead we're going to make use of spring boots testing capabilities or at least some of them so here i'm going to add the spring boot test annotation and this will trigger spring boot to initialize the entire application context and even start up the actual application for these tests so always keep in mind when you use spring boot test that it's also somewhat expensive so what we're doing here is really an integration test that will take maybe a second or two to set up the application context of course our application is very simple and there aren't too many beans to initialize for spring but generally when you're using this springboot test annotation you should be aware of its costs simply because it initializes the whole application context there are so called test slices which only initialize a certain part of your application and there are some other ways to restrict which beans are initialized and which you need for your tests but for now we're just going to use spring boot test as the easiest way to get started now inside this test class i want to create an object of type mock mvc so i'm going to also call this one let's say mock mvc and it's going to be of type mock mvc which also comes from the spring boot starter test so you should already have it in your class path so this one should only be used in tests it allows you to make requests to your rest api without actually issuing any http requests which of course is faster so it basically hooks in one layer below the layer in which spring boot usually receives the requests and then it delegates it to a controller but there's no actual http request that's being made here and now in order to tell spring boot to give us a bean of this up of this object when we run the test we're just going to use the auto wired annotation and this is now spring boots way of doing dependency injection so it's going to be responsible for initializing a object of this type and then just assigning it to this variable and this is why also i've used late init var this is a way in kotlin to say that this variable is a late initialized variable so we know that some kind of framework is responsible for injecting this object and it will be initialized at a later point we're going to refactor this later on but for now this will give us a bean of this type well actually there's one more thing we need so the springboot test annotation will only initialize your own application beans in order to get a mock mvc as well we need the configure mockmvc annotation on our test class and then we can use an object of it so with this being done let's actually just add an empty test so again using junit jupiter and well later on we want to make sure that it should return all banks so that's what the endpoint should do but for now i'm actually just going to go ahead and run this test class and just see if it comes up with any errors when initializing our mock can be c object all right so far so good the test passes and there seems to be no issue when initializing this object let's actually see what happens if we remove this auto configure mod mock mvc annotation so when we do this you can see there's an error and it says there's an error creating a bean with name bank controller test and this can happen quite often this kind of error message in spring boot whenever spring boot isn't able to initialize the entire application context so usually this means there's some kind of beat missing that it cannot initialize or maybe there are conflicting beans so multiple of the same type and springboot doesn't know which one you want and here it of course then says unsatisfied dependency expressed through the field mock can we see and just so you know when you get this you can also scroll down and then it says no qualifying being of type something else so here it's the mock can we see and this will go down the entire hierarchy so if there are multiple beans like what can we see this one cannot be initialized because of some other b and c it would show this further down further down further down and then you get to the root cause or the root object or bean that couldn't be initialized so that's just really important to know if you're working with spring boot because this kind of error can come up quite often but then if we're just using auto configure mock can we see here we have no problem and get our mock can we see so now it's time to learn how to use this mock can we see object now one thing you might be wondering about hey what about the bank controller we don't really have a bank controller object yet that we can test well remember that the springboot test annotation basically just starts up the entire application so what we're doing now is we're testing against the actual rest api so we don't really need to have an object of this type instead we really make tests to our rest endpoint so let's just see how this works so we have our test case here saying it should return all the banks and now let's go ahead and make this get request so mock can we see and then you can have get you can have post put delete and so on for all types of rest requests so we're going to use get because this is a get endpoint and we're going to make our request to our api banks endpoint and then what's really useful is you can say and do and then just print which will give you all kinds of information about the request the response and it's really useful to investigate what's happening in the tests and then for now let's just say and expect that the status is okay so you can check for all the http status codes like 404 not found or here it's 200 okay so you might be familiar with some of those numbers here of course you want that we just get an okay and note that this syntax here relies a lot on lambda expressions so this is a lambda expression also this one in the curly braces that you might know already from other languages using functional programming and this is just the kotlin api that springboot offers for the mock mvc inside the status here you could also make multiple assertions well for the status it doesn't really make much sense because there can only be one status however you can also do this for let's say the and expect so here beside status we'll also check the content later on but for now let's just check that the status is okay and that will be enough for now but this is not a given block in fact when using mock cam we see it's a bit hard to distinguish so i like to just use when then really if you want to split it up then this would be the when block the do is really just for debugging purposes and then you could also do it like this and basically split it up but i don't really like this syntax too much so i just keep it together you could also assign the result of this call to a variable and then make assertions down there so it's really a matter of taste and how you want to do it for now let's go ahead and rerun the test okay so mission accomplished we have our failing test let's see what it says well first of all we have all our debug output from the print so you can see it performs a get request to api banks doesn't really have any parameters or headers or any any request body but it's really nice to look in here and see what's happening and then if you scroll down further well you can also see that's the request again but here's the response and it says 404 which means not found because currently we do not have this endpoint yet the api slash banks so in the end it fails at the assertion because it's expecting a 200 which is the status code for okay but it gets a 404 which is the status code for not found so again remember we have our red green refactor cycle and we're now at the point where we have a red a failing test so let's try to make this one green and in the bank controller you basically have everything that you need to make this test green so i challenge you to do this take a look again at what we did in the hello world controller in the very beginning and try to use the same annotations like the request mapping this is also a get endpoint so just like the hello world so please pause the video here and take a minute to try this and then i'll show you the solution all right so the first thing i want to do is add our request mapping up here so request mapping and so the bank controller space path is going to be a slash api and then banks so any endpoint below this one will also be below api slash banks and then we have a get mapping and this one i'm simply going to call getbanks and this will return a list or let's say even a collection of our bank entities and it's quite simple because it doesn't really require any parameters or information from the outside and then it can just call the service dot i think we called it also get banks however we don't have this been yet so let's go ahead and create this in our primary constructor so a service of type bank service and this one obviously can be private because it's only used inside this controller and then let's try and rerun the tests again and see what happens all right looks like this is actually all that we needed and now that i think about it i actually did too much already so let's drive this back for a second for now let's just say works and we're not returning a collection of banks yet but just a string because the test really just wants a status code of 200 on this api bank send point for now so let's just try to get that one green and as you can see this is enough to do that but now let's go into our test again and add a few more assertions or expectations here so oftentimes you're working with json responses and what you can do there is you can use json path and then pass in the expression that basically goes down the json object that's being returned so for now let me just give you the example and then we'll understand exactly how this works in a second so here i'm saying that i want to look at the root object so this is really the entire response basically and because i know that this will be returning a list i want to access the first element in this list and i want to look at the account number field and now for this one i'm expecting that the value should be abcdef because that's what i set for the first object and actually i can move this into one line i find this more readable and you could do the same to get the second bank in the list or the third one or if you want the trust if you want to check about that you can also do it like this so jsonpath is a welldefined specification that you can look up but it's really easy to kind of get a get the hang of it and at least write a simple queries like this one if you have composite objects you can of course also go down and just access any field down the object like this so it's quite easy and quite useful for these kinds of tests and actually there's one more thing i want to test even before this which is that the content has a content type of application json so here i'm just asserting that i get a response that has the application json header so i'm getting json data and once i have inserted this i then look at the json object all right so obviously this should fail again now so let's take a look and then let's take a look at the error message so we get our debug output here and then it says the content type was expected to be application json but it was just plain text so let's go ahead back into our endpoint and now actually if we just move this back to returning the list of banks from the service i believe it will automatically be set to application json by spring because it's then using the object mapper to transform it but we're still getting an error so let's see what's happening so the account number seems to be one two three four so let me check again in our mock data source and indeed this was what i used in my preparation code the abcdf but it's still good because we made sure that our assertion is working as it should so that's perfect we can just try to fix the test and make it green and there we go we have a green test again we're now actually asserting that we get a status code of okay we get a response with the content type of application json and we check that the first bank's account number is one two three four now of course you could be checking as much as you want here you can be checking the account number the trust the transaction fee of each element or you could just check the entire object at once let's also take a look here in our debug output to take a look at the response now so now we can see we have a status code of 200 here we have content type application json again this is coming automatically from spring boot in newer versions where if you're returning a object that's being mapped by the jackson mapper so that's the object mapper that springboot uses internally when you give it a list of banks or a bank it will use that to transform it to json and then send it as the response and it will also set this then automatically and then we have the body with the three banks feel free to extend this test case and make it more comprehensive but what i want to show you here mostly is how to work with what can we see as well as using spring boot test for integration tests like this so now with this one we're actually using our bank controller we're using the bank service our bank data source and all our layers are working together to create this response here all right so that's your first proper endpoint so actually now if you start the application again we can also take a look at this in the browser and in postman so now in the browser i can go to localhost on port 9000 and then while on the root url we still get our index.html but if i now go to api banks we can see well the browser in this case firefox even shows it in a nice way you get the json response with three elements and each have their account number trust and transaction fee you can also look at the raw data but it's really nice that it has this visualization now similarly you can open up a tool like postman and then here it's the same thing so i think this base url is localhost 8080 so let me change this one actually so manage environments i have this local environment with my base url which is quite useful but i've changed it in the config so localhost 9000 slash api this way you don't have to type it again all the time and then slash banks should be our endpoint and there we go we have our response here and a tool like postman of course gives you much more control than the browser um as soon as you have post put delete and so on in fact it's going to be really hard to do this in the browser but the simple get endpoint without any parameters or request body is really easy to also look at in the browser we'll see that we'll be using postman for our other request types because it allows you to also define the request body and so on very easily all right so that's it for this video you now know how to use spring boot test and how to use mock mvc to write integration tests in spring boot and of course how to write your controllers that call a proper service i hope you liked it if you did please leave a like and also take a look at my links in the description down below and i'll see you again in the next video