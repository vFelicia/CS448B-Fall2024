uh but I guess this isn't really a problem it you know it shouldn't add too much speed to uh the application so if uh is not a number event date which essentially means if it is a number uh then we display these uh now when you see a refresh we just get these default zero values here as opposed to This n an error or this Nan value uh so now when I remove this uh this eval this statement here evaluates to true and and the numbers are placed in corresponding to their day hour minute or second so let's go ahead and focus on this callback function now what we actually need to do is create um an if statement um above our uh or the top of our function and what this will do is it will calculate whether the event date is less than or equal to the current date and if so then we can we can send our callback function and clear our interval and it's important that we clear the interval or the interval carry on you know counting down uh these values in the background so what we want to do is we want to say if event date is less than or equal to the current date that means that the event has taken place or the event or the you know it's counted down to the event that we've specified uh so here the first thing that we want to do is call back and the second is clear interval so clear interval is pretty easy all we do is we um use the clear interval function and we specify the interval name and here I've called the interval interval by setting uh this interval here to this interval variable so we can go ahead and just Place interval in there now let's go ahead and take a look at what happens uh obviously we haven't called anything back uh but let's go ahead and change this to uh today's date which is the 8th of August and let's change it to uh we're at 16002 at the moment so we'll change this to 1603 okay so you can see that we've got 40 seconds um to count down so what's going to happen here is that when the event date is less than or equal to the current date so our a when this reaches zero um you know according to the calculation we're going to clear the interval so the countdown will stop if we didn't have this line in it would carry on and everything would mess up because we'd be counting into minus figures uh so let's just wait for this countdown to reach zero and you'll see that all that will happen is that as it does reach the current date um we will just stop the counter so the interval will be cleared uh and this will stop counting down I.E the function will stop being uh executed every 1 second uh so we'll just wait for this to reach zero and there we go you can see that it stopped there so the interval has been stopped and we've been left at z0 days hours minutes seconds so you could leave it at this state however you might want to perform an action once this uh interval uh once this um has reached its current date or reached the event date so we want to uh actually call back so I'm going to say callback in fact let's actually specify a parameter or an option up here first uh which is callback and in here we want to say callback do call this so what will happen is is that we can specify this when we do it in ext.js and then when the event date is less than or equal to current date we've already seen the clear interval but we call back and therefore we execute the function that's associated with this here so what we can do now is create a function here and this here is equal to or is the parameter callback so when we send this callback here when we send call uh this will this function will run so if we come down and let's alert done so much like you do with uh predefined uh features in jQuery we uh just doing it ourselves essentially and this is how we would do it ourselves uh so let's go ahead and change this to say 16005 uh and refresh you can see that we've got 37 36 seconds uh so we'll just wait for that to count down and when we do get to the event date like we've seen by clearing the interval this time we send the call back it sends it to here which is our function and we run this line inside of this callback parameter uh so let's just wait for that to reach its uh it0 seconds and then we'll see this alert dialogue Box come up a lot of waiting around but doesn't matter and we're nearly there so when it gets to one we send the call back and the call back function is that we alert this done dialogue box so we can see that that's happened there now what I'm going to do just is as an example is say countdown. text which is the current element that we're working with uh inside of here uh I'm just going to say we're live and just Escape that character there uh so now what's going to happen is when we specify this again in here and when we refresh and we wait for the countdown to happen uh this will be performed now I'll talk a bit about why it's useful that we actually incorporate um callback functions into our plugin and this is because we want to make our plugins as reusable as possible we want users to be able to not have to go into the plugin code and modify what they want to happen so by using a callback function the user can say Well when the date reaches its spe specific dat I want to carry out a particular action so they can Define this themselves and extend our plugin without us having to or without them having to go uh and modify it so you can see now that the text has changed to we're live so if we were to say release this as an official Plugin or you know send it to our friends to use or give it to someone else in our workplace to use use all they have to do is declare the uh the plugin uh which we've already created we could have had it minified uh and zipped and uh all they need to do is Define a date and a callback function they can specify their own date which obviously has to be a correct um a correct string and then they can create a callback function to do what they want to do when the date has reached so that's how we create our countdown function in jQuery and how we can make it usable uh and reusable uh using this option here here and this callback function here