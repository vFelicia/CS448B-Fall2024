all righty hoses welcome back and in this video we're going to be binding the socket to the port so what does this mean basically what we did is we created a socket and all that did is says hey we are going to be connecting to another computer somewhere so now what we need to do is we need to say okay whenever you have that conversation where is that data going to be coming in where is the conversation going to be taking place and we already declared all the variables up here on our own machine just listen on Port 9999 but now we actually have to bind this data to the socket so this socket knows that this is the data to use very simple stuff but you know that's what we got to do two ports and say and wait for connection from a client now the client of course is that Target machine if you got hacked then they probably don't know they're the client but hopefully it's your friend or something in textas so whatever all right so def socket bind and now what we can do is actually just copy this because can use the same stuff and I'm too lazy to type it all right so I'm just going to put a little indicator at first So then whenever you run this program we can see some something pop up in the command line and we know that it didn't freeze or anything so I'll say uh binding socket to Port and I'll say ports Port because remember this port 9999 this is an integer right now so we have to convert it to a string before we print it out and now if I SP that correctly you can actually do the binding and the way you P you bind your information is actually really easy so for your socket just call the function bind and then inside here you actually rate a tupple and it just takes the host and the port so this says bind the socket to the host and this would usually be an IP address but since we're just listening on our own machine and this is just running on the server itself it's just going to be blank which is fine and Port 9999 all right so now all of our information is bound together we're ready to pretty much listen so for your socket what you're going to do is you're just going to call listen and just stick a number in there like five and that'll be good enough so basically what this does right here is what well I'll break it up so what listen does is it basically allows your server to accept connections so we're not actually connecting yet but now our server is sitting there waiting for someone to connect now this five argument right here this is the number of bad connections that it'll take before refusing any new connections so you can set set it up however you want but five is a good number I mean we're the only ones that are going to be running it in this example so whatev now let me just toss this in again as message and I'll just say all right so whenever we failed at binding I'll say socket binding error and then we can print out the error message and then what can we do after this let's pump a new line and get some recursion going on all right so if we fail to bind the socket then what we can do is we can say hey that didn't work but I'm going to retry it so we got some recursion going on it's just going to call this function again and keep trying until it combined so I say combined not combined just talking to myself here don't mind me all right so so far we created a socket we said hey This Server can connect to other computers and then we said all right we're going to bind the socket to the port in other words this is what information or this is where the conversation is going to take place looking good so now the last main function that we have to do here is just to accept connections because right now it's just listening for connections but what happens when someone actually connects well we will see uh with client socket must be listening uh for them all right so now what we do is we write def socket accept now this is another thing that you need to watch out for a lot of people try to accept connections when their socket is not listening for them so if you leave this line of code out then it's not going to work your socket needs to be listening before it can actually you know accept obviously so whenever someone ex connects what we're going to do is this all right so what this function does right here is it accepts a new connection so whenever some client connects to our server what it does is it gives you some information this is the actual connection and this well whenever I print out you guys are going to see all right so first let me just print out some information so we can know or understand what these variables actually do so this is going to wait and it's not going to continue for the rest of this code or on with the rest of this code until a connection takes place so at this point in time I'll say connection has been established I guess and let just throw my pipe and how am I going to format this all right and all right so this variable right here it's actually broken up into a list and the first element is actually the IP address of whatever computer connected so it's pretty cool that's how we can identify it and after this is the port number and I don't know if I think this is a string already so I just have to all right so the second element is the port number so all right looking good so whenever we get a connection from a client it's just going to print out connection has been established and it's going to tell you the IP address and the port number right there looking good so now what we want to do is we want to pass in well we'll make this function in just a second and close all right so this right here is basically information about whoever connected and this is a reference to the connection itself so the conversation so we're going to make a function in just a second called send commands and basically what this is going to do is once a client is connected then it's going to sit like some dude's computer in Texas is going to sit and say okay what do you want me to do so it's going to look and wait for commands and it's going to do whatever we tell it to and then once it gets a command it's going to run it on its own computer wherever it is and then send us the results so it's basically it's basically an awesome way that we can pretty much access a computer indirectly like