all right welcome back y'all and in this video we're finally going to be getting started with our social functionality now what I did is I actually updated some of the tickets here before they said social but I kind of structured it uh made a little road map here to kind of outline what we're going to do So eventually we're going to have a social feature kind of like you imagine where you can make a post and then other people can leave comments on that post however I don't just want to create everything on the back end all at once instead since our front end still needs some work and it's kind of related to the social feature what I'm going to do is this I am first gonna make the back end for post only no comments and then after that I'm going to go on the front end and you see right here on your profile page you basically have this left section right here and then on the right it's just invitations well eventually we're going to have two tabs here one for your posts and one for these invitations so that's the next thing I'm going to do after the back end is kind of uh all set to go with post kind of just build out the front end framework and then after that I'll actually write the front end posts components and then from there I just have some backlog items that are kind of related to social features one on your profile page we're going to be adding your username right here and that's going to take like I don't know 30 seconds maybe and then after here I'm going to be updating the front end so you can view other people's profiles right now you can see that in the URL basically the only profile you can go to is your own profile however of course once things are connected and you know just more social action going on then you're going to be able to want to click on other people's like user labels and be taking their profile check things out so anyways that's uh what I'm going to be doing right here and then the last um second to last frontend feature is that right now whenever you log out and log back in you go to the course Page by default and instead of that I'm just going to redirect the user to their profile page and I thought it would be good to do this after this feature right here since for this we're going to do some URL updating and then this can just take them to the correct URL and then last but not least to round things out before we get started on the last two features we're going to be working on is comments first I'm of course going to build out the back end and then we'll add the comments to our posts on the front end so that is our roadmap I'm hoping everything will take I don't know maybe uh less than a week for sure let's say that it's August 4th right now so next Friday it's also Friday right now by the way so next Friday I'm hoping to have all this done and launched so that's my goal let's see if we can do it all right now I will say off the bat that we do have a little bit of help and that is I made this other social network type app recently for cooking so people can share like uh recipes and images of food with each other and it it has the recipe which is pretty much a post and also has this comment model and it's a very similar structure to how I want to structure my posts but um yeah I just want to say that I'm going to be referencing this a little bit but either way uh let's hop back into our main project here and first let me create a branch for this so I'm on the back end ticket number 50. cool and let's say a new Branch 50 social posts and I'm going to create and am I recording yes and okay so the first thing I want to do is just create a social app I was thinking about just putting it in a post app and then a comments app because that's what I did in this social network just have uh um well they're not called posts they're called recipes and comments but because the app that we're working on right here is a little bit more to it um kind of a little bit more complex I think it's better to organize these under a social app so what I'm gonna do and by app I mean a social Django app so I'm gonna CV into the New Boston and then I'm going to Python 3 manage start app is it manage start app or just start app Python 3 managed star app I'll just say social all right so now we got our social app right here and I'm gonna delete models tests and Views because I like to split those out so those and actually let me just steal these so models definitely could have typed that faster okay models package and then serializers refactor rename and then views just like this out all right so that is our structure and now let's actually just go ahead and um register the app for anything else so to register this you need to prepend the app name with the New Boston and assess the location of it and then if I go to Project settings base where everything's registered then in here how's this advertise all right so social apps and this is social config so now our app should be registered and on that note ready to start creating some models now another thing that I want to do off the bat is I actually want to ask chat GPT um kind of for some naming conventions since yes the post is going to be similar to a recipe it's uh pretty much going to have a Creator or an owner and then an optional image and then some like post text but I want to ask chatgpt to write this post model for me because I don't know if the text is going to be called the text the body the whatever else and I just want to kind of um I know it kind of like gets the average of all these so uh social network in chango creates a post model for me and on that note we can actually start rules let me see what I can steal so first of all I'm gonna have a new post model and for creating modified and I actually do want to see pretty sure it's going to be called the owner owner owner owner okay yeah okay so I'm definitely going to have an owner creating modified I just want to make sure I didn't call them anything else and this can be good for now all right chat GPD what did you call it the title the content huh post content okay now um do I want content that is pretty intuitive the post content not the post body not the post description so yeah I believe the content is what we want okay in the description model text field uh an image this is another thing that we're going to need let me just make sure this is my standard for image fields yup and that has okay we'll keep a blank equals true since an image since content is required but an image is not okay this might be a little cumbersome but fix this in Django admin later okay so with this being said let's actually do we want to register this already yeah so now in my model is in it what I can do is from post and then in admin from Models post I'm just going to register post so it shows up in my Django admin now before I make migrations is this good so the post has create modified date the owner the content and an image image can be nullable it's not required and this is all good so make migrations make them migrate and now let me just restart my server so it doesn't get confused and pop over to Jango admin and okay so social now has posts looking good looking good looking good it's looking real good and I'm also thinking that maybe we want to have content be blank true to in the future because there may be some instances where they want to post the image but no content kind of like a Instagram style oh wait a minute no Instagram Style can you even do that or do you have to post some content too I don't know but either way Arts our social networks can be something unique so just do things our way okay so next up what I want to do after this is I want to create a serializer okay so refactor rename new file too let's try to get rid of you so new python file post new python file post okay so for the serializer for this what we're gonna do let's do this let's just copy all you and what we are gonna say is this okay so the fields that we want whenever you are creating it content and image we don't need any readonly fields because we explicitly outlined those uh then the validate that is going to be content and image in the Creator is actually called the owner and this is going to be the requesting user um replace a recipe with post now validate we don't need any special validation so we'll keep that as is the model serializer also already validates kind of everything that we need to validate based on the model so for models post let's do Post I'm going to replace recipe with post okay and then whenever you are reading it what we can do is we can do this we are going to import this and we are going to say this okay so whenever you are reading the post then just serialize the owner let me just see this order read order right Gregory prior right okay I'm also thinking it may be better to explicitly make all of these read only yeah um even though we're only going to be reading from here I believe that by giving each one explicitly read only then it helps with performance oh what's this do this so owner create ID modified date content image and also I want to actually this is good content image because then you don't get created modified okay so anyways um this should have six because this is created and modified owner content image so created modified it's an owner image okay so anyways I was uh saying that when you explicitly pass in readonly fields even if you are only reading from your serializer it gives you some performance benefits because it doesn't ran validation against any of the data when it's read only and that is what we want because we don't need to validate it because that that is already in our database which means it was already validated and well hopefully nothing gets messed up between uh the point where we read it from database database and are serializing it but this should be good for this you create it set the owner to the request user okay yes yes okay and now in our right class yeah let's uh let's steal it from a dress or something shop views addresses actually let's steal it from course yeah this should be a good starting point okay so instead of the core we're going to replace that with the post and we're gonna replace core post now let's see what we got going on Okay so for the Post view set it's a model reset I'm going to be using a multipart parser and form parser because I'm working with form data AKA images now permission classes is authenticated in this object owner or read only and the property of this is owner so this is good only the owner can pretty much um create or edit their own items or delete oh let's see so this comes with delete that's good uh when creating passing the request is valid if so then the post is equal to whatever you save the read serializer we also need to pass in the request for so it forms the full URL for the image and all right so in the get serializer class we're basically saying anytime you make any write related changes in user rate serializer otherwise use the read serializer let me just see yeah this was the same for the recipe and then for updating partial allowed the instance depending on ID serializer this is the right serializer if it's valid then just get the updated post send through to the reserializer boom you've got yourself a view okay so also want to copy these urls so copy URLs stick them in Social and then I'm going to say for posts whoa post we are using the post view set okay now let's go ahead and in my project gonna bring in these URLs bringing anywhere else bringing these you or else social it's gonna be the coolest social network ever social urls and then let's lint this bad boy and test things out so make a link and fixing my migration file make a lint again all right beautiful so now just make sure my server is running and all right um apprecially let me restart this again since I have new files just wanna double shirt picked up the latest changes and now I can go ahead and let's first let's first log in make sure I'm the right user so I am Bucky pass one two three four now the first thing I want to do is for one make sure I'm logged in is Bucky okay and now I am just going to get my posts nothing fancy empty list good so far so after this I'm going to create a new post and that is going to be with this type of data and let me just throw it up with this get some errors so I say content is hey all right this gives me a post back recruited ID no image and that works fine so now let me try to create a post with the image and this isn't oh I need form data straight up content yoyo and then the image this is going to be at or excuse me a file field and I'll just upload this image of one spoon let's send that up okay yo yo one spoon full URL good to go all right so now let me actually try to patch this and I will say I'll update the content to uh spoon City baby what's up uh yep updated two to spoon and now let me try to just update the let's see I am owner one let's try to update it to two didn't work which is good and now last but not least let's try to delete this no content beautiful okay so that was uh easier than anticipated now the question is huh interesting very interesting well first of all let's just refresh this hey hey oh yeah I deleted the second one I was wondering why there was only one okay now is this all we need to do for now I mean if we look at her ticket it just says social posts and that is what we did um another thing that I'm thinking that we may want to do right now is this so right now again actually let me get this one so if I get these posts it gives me a list of posts now even though this is working I'm going to add a filter in here and the reason is because this is actually not the end point that we're going to be using on the front end at this point because on the front end the first feature that we're going to be building is the ability to pretty much create and manage posts from your profile page now what that means is that we're only going to be looking at posts from a specific user so this isn't like a feed or anything where you see like posts from a bunch of different users at least not for this first iteration this first one we're going to need to fetch the post got the hiccups great and then we're only going to need to uh we're gonna be passing in a query param to filter them by a single user so let's just go ahead and make that now okay so before we do that let's take a look at what we did for recipes and look at Django filter back end comments where you at okay filters Django filter back end you're coming from rest framework shingle filter backhand fascinating fascinating and let me just look at how our project settings are set up for this okay all right so uh this is for the token and then no filtering logic by default okay so what I'm gonna do is I'm gonna make a new filter set class and we are going to filter by creator and that the lookup is going to be their user ID okay then we can test that and also before we test that we can also prepare for testing to say we have another post say Ava I say I am Ava and then this one says I am Bucky and this is just so we can see here pretty much who owns each post but now with that said let's go ahead and first create a new filters package in our social app so new package filters and this is going to be for post and just like this we're creating a new filter however we're going to be replacing a recipe with post for these fields we can use a tuple and let's for the models we're going to say owner owner for the fields owner comma for a tuple and all right so now we have a class a filter class that allows users to look up by owner and it'll match up exact so basically they have to pass in owner equals one and it'll the idea of them so filter set their back end wait this comes from the jingle filters package not rest framework so now the question is do I have that filters package and by project Tamil Django filter okay should be good all right so now this is gonna give me this and then my filter back in and then from filters that post import my post filter and then for my filter set class it's going to be my post filter make sure everything is alphabetized make a lint and while you are linting I am going to go ahead and test it and this is with the owner okay so now whenever I get all posts I should have two in there since Ava created one and I created one and now I'm just going to say owner equals one and I get a field error and why is that you asked cannot Reserve crater oh fuel name this is here we go okay so now once I fix that error okay so one gives me buckies I don't know what number Ava is but let's find out two is not Ava is three Ava yes okay so either way we now have support to filter them by a certain user I am Bucky I am Bucky okay okay now as every single linted properly if so I believe we can just push this up to the back end now a few percents this all right cool so now let's push this up and for the naming convention for the first commit we can just do 50 social posts and the reason that I like to do this in my first comment is because um whenever you create a PR then it takes the comment from your first commit and use it as a title for the pr and this is what I want for the title of my PR so well yeah you get the point okay so this register in my app little mini self code review right here uh this looking good init file uh filter file looking noise migrations init file looking nice looking nice that's required on the leak Cascade which is what we want this might have to change because if someone has long content I don't want that all rendering in Django admin but uh that's easy fix whenever we come across that issue this is good however in my serializer can even can even trim that up a bit so the New Boston social serializers we can do this for more simple Imports again and pick up where we left off so serializers uh better Imports all those Imports are correct create date and we did say when we updated to I was just testing okay I just want to test one more thing and that's that whenever we post something that has an image then we get the full URL and then whenever we patch it and let's say that uh we change the image to make these this Flat Rock oh patch post and what number was that five yeah I just want to make sure when I patch it okay that I get a updated full URL too beautiful and on that note I think we're good mmhmm cool cool cool all right push these up and yeah that was uh easier than I thought all right so now even though we aren't ready to merge this in because I do want to build out the front end for it yeah what we can do is this so I want to build out the front end new layout and then I want to actually build these components these post components on the front end and then what we'll do then is merge everything in since uh whenever I'm building up this front end if I come across any issues like uh I don't know whatever issues there may be with the back end and I need to update something then I don't have to like revert or uh I don't know it's just easier if you kind of this almost tests the back end it's part of development so now that we got this out of the way back in post then what I'll do is I'll say we're going to be working on the front end posts and invites tab next and that'll be part of the same Branch as this so since we're going to be hopping over to the front end let's hop into the front end and get our ticket number so social post 86 social post oh first of all let me make sure I'm updated I don't have any lingering changes nope so on the front end I'm doing 86 social posts all right now is prep work let's go ahead and make those tabs so on the profile Pages profile invitation yeah so what I'm gonna do first to create a new invitations component because then what I can do is stick all these invitations in component and then all the posts and another component and then I'll use a tab component to toggle which one of those sub components to display that'll be good so on that note let's go ahead and do some cleanup we are making a new directory called invitations are you styled my friend yes okay so you are going to have styles and then you are also going to have a component file the file is just going to be renamed to invitations now invitations are going to have this style and also what else do you got going on so invitations what you're going to do is you are gonna have an invitation actually let me shut off my server for a second things are about to get messy just temporary okay so anyways we're gonna do this so we can have this render invitations function still but instead of returning everything nested inside this invitations component since this is this container now you are just going to return this return your invitations by okay and then we are going to render them right in the main container here and then on that note this invitation is going to move into invitations since the invitations is basically the container IDE error occurred poetry things are going to get messy okay so now this moved over to here invitations a list it's going to be object values invitations that's going to be you selector again invitations selector state okay competitions and invitations from you selector react to Redux okay now invitation list what is this these are just a list of invitations okay now the question is is this all we need to do for this component possibly possibly PA simply possibly okay now if that's the case then what we can do is this we can import invitations from there and then right here where it says render invitations we can render that invitations component and that means we can get rid of this render invitations function and then hmm also means so what we want to do is this we want to move this logic right here where we say if you don't have any invitations then what do you want to do you know we just want to render some empty text and what is this empty text going to say no invitations to display okay so here is where we're calculating the invitation list from the invitations that we have in Redux now if you don't have any invitations then just render empty text otherwise and render this invitation in the container which is going to render all of your individual invitations which is what we want now for this what we can do is whenever we render content for now we can just return invitations eventually this is going to be kind of uh or logic because we need to determine what tab we're on but for right now we don't have any tabs built so no need for any of that so we can get rid of this empty text component um what is this invitation list where are we using you still we're under create invitation button and that's in the section heading for invitations in that section heading is on the right hand side but we want to move that to to invitations so first of all we did not account for this I don't believe and on the right okay but that is fine because what we can do is this say invitation container okay Okay so yeah let's do this so This invitation is going to be renamed to invitation container okay so this is invitation container now for our main page container or component container we'll just keep this empty right now we might have to style this in a bit but essentially what we can do is say this um cons invitations equals this and what we're going to do is return invitation container with invitations rendered in and that will take care of that also hmm yeah let's change some of this so what we're going to do is this we are going to say this invitation list is an ordered list of your invitations um yeah that's fine now whenever we render the invitations we are going to be rendering right from your invitation list and in here what we're going to be doing in the container is this we are going to rename render invitations to render content and that is because we are first going to check you have no invitations then you're going to return empty text instead that says no invitations to display otherwise render your invitations and on top of this is always going to go the section header did we import that yet no okay now where are you at section heading we don't need a render function for this since it's just pretty straight up okay um invitation list length render create invitation button so we're going to need a button an invitation limit amount an Invitational amount is calculated based on this which needs self a lot of moving around things but okay eventually get things in the right order and okay and this is going to require invitation limits which are in our selector all right so now we can bring in create invitation button well first we need a button for this create invitation button and the toggle oh yeah we've got to bring our model in here too and that is toggle invitation modal alcohol comes from hooks and then that means this whole thing is going to need to be in here and then where are you at invitation modal I'm going to move you over to your gnome and for this everything should be good to go invitation model is open if so yada yada boom I think that should just about do it so now let's clean up this render section heading we don't need that we're just going to render content so we don't need you what happened here one too many delete presses okay so fix you up on the right we're just rendering content we don't need you section heading we don't need you create invite button render content you're pretty simple for now invitation list don't need you um okay that can be moved as well but let's just focus on cleanup here uh called up nice import okay so this gets our updated invitation limit and I actually believe that this may be a better place to put it in okay so first of all let's just go ahead and check and make sure I'm gonna mess anything up oh wait I uh I need to start my server okay step one make sure you avoid any huge errors okay everything looks good which is great I'm going to log out log back in go to my profile nothing changed I'm gonna create a note I'll say uh invitations for a magnetic station created beautiful and edit it say nope is it for Bob now beautiful and deleted no invitations empty State there's my limit which is five yada yada looking good okay now let me just do a quick review of this okay so edit profile this is logic for the left this badge shelf self Avatar this logic's still good that way we're just um basically getting our invitation limit whenever you go to the profile page one time rather than like I said eventually we're going to have tabs back here and we don't need to refetch this limit every time we click the tab it's a little unnecessary or very unnecessary now Avatar content is going to be smarter and okay now for my profile I don't have invitations anymore um the button I have it's a button on the left and actually with that said this can be renamed to render button since we only have one button now always like to keep things nice and simple as possible okay and then where was I so this button is for editing your profile oh that's on the left and on the right we just have one thing right now invitation and then whenever you're editing profile it opens good to go so it has a button container image wrapper this for the Avatar left and right section all right that's good and now for these invitations pretty much just make sure everything's ordered correctly limits um care for the user list this is all the same yeah one minor thing here is that for this invitation list um one thing we're just checking is to see if there are any items in it to determine whether we display empty text and then if if there are items then we render them out so it may be a little bit more performant to just have this list be just a straight up list and then only if we need to render them then we can order them since it doesn't really make sense to uh order them prematurely but you know I think this is fine actually so okay we're under the button earn her content section heading good to go okay cool so now let me just go ahead and run lint and I will push this initial Branch up and then it will kind of get started on the tabs so uh this is going to be called 86 social posts E6 social posts and what did I do here two green move these oh okay and real quick let me actually just check I moved this file nothing should be ruined just want to check my imports sure I have no relative Imports that broke or anything like that all right so now that we got that out of the way let's hop back in here and figure out this tab logic so what I can do is first think about what other tab logic I'm going to steal and I have a feeling it's gonna come from I said not that one in the exchange let's go ahead and create an asset pair real quick just so we have some elements so primary bpx secondary DMB okay so this is the logic that I want and I say this because this tab data is just stored in state in I want to store this tab data and state the tabs where it says posts or invitations because I don't think we need to keep that in Redux all right so this is in the exchange app so in the exchange uh where are we going so is it the main there yes the main area and what page was this the trade page all right so I have a tab I'm gonna need this and I also want to yeah let's uppercase these and I say that because here on my enums I've been following you see this uppercase standard so uh let's change this so bye by and sell so tap by by tap cell tab by tap cell by tab cell all right all right all right all right all right all right all right okay so we're gonna be having similar tabs so let's prep for this now our tabs are going to be the pages that we want or the sections whatever we call it and I'll say posts invitations invitations invitations okay next thing we are going to want an active Tab and attach state in the default of post so this is pretty much going to determine what we're looking at posts are invitations by default when you go to profile page you're just going to be looking at their posts I don't even know if we have it where you can look at another user's invitations but at least for right now when you're on your own page you can switch between it so yeah we'll roll with this for now okay now next thing I'm going to do is actually render out some tabs so under page content what's going on here asset pair render tabs render tabs okay so here we have tabs this is interesting this is very interesting I was almost certain that this was a component wait a minute are you telling me that all of these are not standardized all the tabs all across the app oh man I hope not okay if so that's going to be uh that's gonna be something okay so let's do this let's build this out and I'll build it out with these tabs under standardized and then I'll get refamiliar with everything and then we'll standardize it in just a bit so first I'm going to need this section or something similar to say render tabs so render tabs this doesn't make sense in this context and for this I am just going to say we need tabs and tabs just like this tabs is the container changes did I make here I'll capitalize everything okay so tabs is the container and the tab is like the individual tab the button and then all this is duplicate code that needs to be fixed buff right now it's good okay so that's that's taken care of and then I will say that the first tab is we'll just say post in the second tab is invitations and then when you click any of this tab it sets it as the active tab because that active tab basically it calls this first to set that tab is active Tab and then since it's equal the active tab is equal to this then it sets it in active which gives it that styling Behavior right here just a different color oh what I need to do is on the right hand side I'm first going to call render tabs and then what I'm going to do is I'm going to rename render content to render tab content render Taz or undertap content okay okay and on that note show you what is tab content here I don't know if I need any of that tab content yeah I don't know if I need any of that because here okay so let's not do that but we can still kind of get this function render tab content is going to be something like this so what we are going to do is we're going to say if you are on tabs post then for now we'll just render a div jeez autocomplete and then we'll say post here now if you're on tabs invitations then what we can do is render those invitation components clean up all this and hopefully we got something that looks like it has the potential to work soon okay so posts post your invitations there you go I'm thinking this tab content we may want to make just so we can kind of separate whatever is in here at the top a little bit I also don't like how see when you're on invitations it looks like post has some space right here but I guess that's more of a styling issue and also these tabs have a margin top but I don't like yeah you can get rid of that okay so now for your styling first of all these tabs have a margin top that I do not like um in my Zoo second of all we do want this tab content after all content tabs and we can just say tap content has a padding top of 16 when you render the tab content do it like this maybe it'll be better for margin top I think Mark top is what we're looking for okay so now logging back out logging back in I am going to my profile page my posts tab is going to be selected by default it's going to say post here and if I want to see my invitations click invitations and let's create one of these magnetic you're getting another one and what about uh Bob you get one too last but not least let's not forget about Betty get some realistic data going on in here okay those are gonna be my posts these are invitations yeah The Styling still looks a little bit wonky just doesn't feel so smooth but again I'm gonna need to find a designer because my design skills are well you're pretty much looking at it not that great but now that we got the basic framework done well first of all we can almost close this off okay yeah okay so what I'm going to do is this I'm going to go ahead and run npmer lint do a little mini code review and then if everything looks good we'll cross that other item off of our roadmap and actually before or right after we do that we need to standardize these tap components they're pretty annoying so capitalizing everything and that looks good this was adding our tab component and those look good enough for now at least until we dry up all those and this is yeah this should all be coming from a component but oh that's good for now okay let's see tab component and now I wonder if you think if we throw this to Chad gbt what it's going to do first of all let's think about what we are looking for so our tabs themselves what are they really just the splice Flex and we may have a margin top but this can really be handled in a styled component now the tab content standardizes a well hmm so on our trade page our tab content it's going to have a border and a border radius oh that's because this oh I see what's going on so yeah just this is the tap content right in the other one's the order book let's say if you're staying actually this can be in yeah we don't need this either and I say that because that can just be in this buy component so let's start unifying some of this so on this page in this page they both have a margin top of 12. okay so this isn't ideally what we want but it's preparation good actually what we can do from here is we can get rid of this it's a margin top of 12 pixels that's what this one was right 16. let's go with that and then to make sure we have our same styling as before since we aren't trying to it's too many issues here so in our buy container which we just took the Styles away of the buy and sell we'll go back in here and we can say in your container you can now have these properties back so buy styles uh this and then we have that margin that's interesting so let's do this let's do this okay so now with this I'm thinking that this tab content should not be opinionated at all this tab content is merely just a div now first in trade we're going to keep it the same and then first of all trade should look all right now that's good actually I need to update cell too real quick so the cell styles are going to be this as well so buy Styles sell styles alright so those should look good for buy and sell and now under profile I do want a little bit of a bumper here but instead of having that being dictated by the tabs then instead I'm gonna have it being dictated by the component that is rendered within the tabs and in this case this is invitations so on invitations over yeah I like this method a lot better actually Elemental piece so actually this is the container container right you have container and then in your this you have invitation okay so container that was a margin top of 16. and then we'll do the same for post so this is good we now have our tabs being a lot more standardized all right so now what I'm going to do is close out of these for the time being sure let me just pop up and see what else we got for um this right here for each tab okay so what I'm thinking is we have a yeah how's this component can be structured all right so this is interesting so we basically need to pass in a list of tab data which contains a string or an enum click Handler but no I think this can be the same basically a list of enums and then the readable version of it and actually this needs hmm okay that's why I didn't standardize anything things are going to get a little bit tricky here now another thing that I can do is I can say set active tab I can leave it out here and unclick I can just pass in this and this will set the state from this parent component so call back it's going to be a little bit tricky another thing that I can do is I can be purely just style these maybe that's the way to go so I have a tabs component do I even need that because all it would be is display Flex all it would be is a display flux container and then I would have a tab component then that would take these props a child and is active and then on click Handler it's kind of silly to structure things that way but it's looking like that might be the way to go another question becomes so I need these do I need a component for this it's going to be pretty silly huh but it is also even though you're like separating a component yeah maybe that's better actually okay so we can see how silly this is but it's also a readable and is it really that bad to have super simple components I don't think so okay now I got an idea in my head of what I'm gonna do but let's first ask Chad gbt their approach so create uh separate for the tab for the tabs and I won't give it any additional Clues into what I'm thinking because I kind of wanted to uh kind of don't want to misguide it so this get this hopefully you can handle this much text I might get yelled at for pasting in more content than it can handle but we'll see that's a lot oh nice okay so and notice that I have two components a similar structure nice okay so this is interesting this is exactly what I was thinking about sweating them into two components one with a super simple structure and yeah so here they're in the same file I want to split those out but yeah it's pretty much yeah all right well if me and Chad gbt agree on this and well no one else is voting let's go ahead and get started so what we are going to do first is we're just going to create a new tabs component so I'm going to create a new component and I'm going to call it tabs and then it's going to have a Styles file and then actually this is going to be pretty easy I think okay then it's going to have a new index file this is just going to be your name tabs props for this my props here so is tabs props what I'm going to be passing in is a children that are a react node something like this and they are not going to be optional you to have them and the children are just going to be rendered or right inside you need to accept those props right there okay so that's all tab is doing and now for excuse me tabs and now you're only styling is a display Flex okay so basically we're going to be passing in you stuff just display it is flex nice and easy so now let's just go ahead and kind of get this going on so from components tabs we want to import this super simple tabs component and now in place of our style tabs we're just going to be using our new tabs component which means we can get rid of these tabs and we are going to be doing the same thing for trade so get rid of your actually with trade these Tabs are styled with margin top so we need to make this a style component for this so these are going to be like this so now these tabs are a styled version of these unstyle tabs and we're just adding a margin top to them and then in here we don't need to import anything and then here the usage is the same however now these refer to our tabs component so this still works actually is my server running just want to make sure okay so those changes were picked up and the exchange still works this still works looking good now from there this is where we get a little bit fancy not too fancy just a little bit fancy and we want to make a new tab component which is going to take an is active Boolean and an on click Handler and children which is a string okay so now let's go ahead and make a new where are you at directory called tab you're also going to have styles and you're also going to have a new main component index file and yes of course you're going to look something like this okay so just like tabs you're also going to take props uh nothing of those so this is going to be tab of props that you're going to accept and for the children this is going to be a string and also you are going to be taking for each of these tabs is in is active Boolean and that's going to be passed in and that's going to be converted to this is active and all right so is active when we pass it through to the styled logic we're going to have to rename it to a dollar sign and then on click this is going to be a generic void function so it's going to come from types you can just steal this wherever you are so types click then whatever I tell you to do on click that's what you do on click and now for the Styles you need to accept basically this right here all right so this tab is going to take this right so each tab is going to take children which is just the display text and is active Boolean and on click Handler and then that is all standardized now and now let's standardize it have content okay okay so now for each tab we are just going to be replacing styled version right like this and it's going to help me because of my tab doesn't have any oh uh let's rename so tab uh it's a good hmm hello naming conflict but I don't know what to name it um I have page step profile tab and then is active you are also renamed and then this should be working correctly and I also believe I can get rid of this now and now type content I still need yes yes yes okay so now my profile page should still be good tabs looking good and now the exchange I didn't do yet but let's do that right now okay now where are you where are you where are you okay and you have a tab enum2 which is going to cause some issues so I'll say trade tab then let's just replace you manually all right and then once we have that done we can bring in our new fancy schmancy tab component uh we're gonna do there and then when you're rendering these tabs you are now being replaced by this tab component which has its is active renamed it should be it and then just to make sure we don't need a u anymore that means we don't need this anymore since you should be standardized now if all went well no changes whatsoever sweet beautiful beautiful beautiful beautiful okay now let's see where else we have tabs uh deposit and we'll just go ahead and standardize pretty much all these so deposit that's a wallet tab actually it may even be better are easier to find if we just do this to have the wallet tab oh baby look at this one oh baby baby pretty much just wrote the same thing alright so wallet the wallet page has its own tab component which is pretty much what we wrote here so we're gonna replace this with our tab component oh it also has its own tabs huh and let me guess yep all right so we pretty much just wrote the same components two times which is great because then that means we have room for optimization so instead of here okay okay we can work with this so first let's import everything we want to so tab and then tabs so we are going to get rid of these two and we're going to import Tab and then tabs and and now this component is using our component so those tabs are the same now the way that it was determining if it was active or not is it was saying if the active wallet tab is equal to the wallet tab that we pass in so we can do the same as long as we have the manager okay so is active pretty much of this right here so it is active if the manager's active wall tab equals wallet tab deposit and then this other one is going to be similar but we'll have to draw all right and that should actually take care of that do I have any custom styling on it half steps nope okay so first let's go ahead and test these deposit withdraw interesting this might be a hot reload issue nope click why is my on click Handler funky I'm gonna click handle tab click oh handle tab click is a callback so what we can just do is this should be generic void function but it doesn't take any params so handle tap click this is interesting wait did I forget a uh handle tab click doesn't take any arguments that oh it takes a wallet tab okay so this is well tab deposit all a tab withdraw okay now hopefully this fixtures my issues but let's see okay that's good yes deposit withdraw deposit withdrawal okay my course no tabs these Tabs are taken care of which means that I can now in my wallet get rid of these two sub components just make sure there's no hidden logic in here that I missed that's all the same and tabs if you have pretty dumb all right so tab tab delete you are now using our fancy standardized tabs and now let me just poke around and see if there's any other orders no tabs asset pair it doesn't have tabs in here shop are there any tabs in here I don't believe so buy sell and then sell none either profile already took care of that at a profile nothing log out nothing on those unauthenticated pages and yeah I think we're good okay so in this actually let me push this up because we just standardize all our tabs which is a pretty great actually so now let me just run interim relent why do I keep getting this error what's going on with this no pointer exception and this is I'm just going to say standardized tabs do a little mini review as you and this is Source upon tab yeah it feels much better having this standardized good this is trade by yeah trade by trade sell similar styling for that rename the enums which is good parking top just out of those type of content whatever you name the enum for our standard and then clean that up delete this delete that delete that delete that I love deleted code means things are getting cleaner things are getting standardized and unified that looks good okay cool standardized tabs baby what's up okay push that up push it up pull it down and then push it up get Boop boom all right so all of our Tabs are standardized now I think yes I think that we are now ready to move on to the post component the moment we have been waiting for and on that note what I'll probably do is I'll probably stop this video here since I don't know how long it is but feels like a good stopping point maybe grab some more coffee and yeah then we are ready to start tackling this post component and I'm pumped so see you soon