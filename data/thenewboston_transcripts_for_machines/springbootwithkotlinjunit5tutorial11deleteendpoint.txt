okay it is time for our last endpoint which is a delete 10 point and as the name implies it's there to delete a resource so in our case we can delete the bank using this endpoint and what we do is we simply make a delete request to our api slash banks and then slash the account number of the bank that we want to delete and that's it so there's no request body in this case that's really just the account number as an identifier in the path so as a path variable and then it should give us a 204 no content so that's the best practice for delete requests if everything was processed successfully so let's go right ahead into our ide and implement the send point so i'm going to start off here again in our bank controller test and i'm going to create a new nested test class this time saying delete api slash bank slash sum account number so i'm going to put this in curly braces for this display name just to also mark it as a path variable and then we'll say delete an existing bank and in here i'm going to create a new test case using the live template that we discussed and then in here let's say it should delete the given or the the bank with the given account number so given we have an account number of one two three four when we make a request to our mock mvc this time a delete request to the base url slash the account number then really all we expect is that we get um a status code of no content so no content and also i'm gonna again say do a print in between and this one is quite simple so i'm going to merge this again into one when then block and really that's the only assertion that we need for this one but later on we also want to make sure that it has actually been deleted for now let's just go ahead and run this test case to have our first filing test case and then we can run this again of course i don't want to start up the application i want to run our bank controller test and then we'll start again our test driven development cycle all right there we go we have our failing test of course because we don't not yet have a delete endpoint so it's saying again method not allowed so let's go to our bank controller and in here i'm gonna of course you might have guessed it create a delete mapping and i'm gonna call the method also just delete bank now in here we're again using a path variable just like for the get endpoint which is the account number of type string and we're just returning unit so unit is kind of like void in kotlin so for now we can just open curly braces and do nothing in here which is the same as having a void method alright so let's see what happens now if we run the tests we do have a delete mapping now so we have our endpoint however i forgot actually to use the um the path variable up here so just like for the get mapping we just define whatever should come after api slash banks which is again inherited from the overall controller so i'm just going to go ahead and copy this one from the get 10 point and let's try and run it again okay so still a failing test let's take a look and see what's happening so down here we have we're expecting 204 which is no content but we're getting it 200 which is simply the okay status and we've seen this also before here where we wanted to have a created status on success and so for the delete endpoint again best practice is to say no content if everything went according to plan so let's just return the http status no content alright so with that we can rerun the test again and then hopefully we should be in the green status or red green refactor um there's not really anything to refactor yet so let's instead go back to our test and make this a bit more comprehensive so of course after we've called the lead we also want to say that when we try to get this bank now or we try to retrieve its data we expect that it is now gone so we expect the status to be not found okay so with this let's rerun the tests again all right so if we run the tests but they're still failing let's see and take a look if we can figure out why now further down we're expecting a 404 but we're actually getting a 200. so looks like of course we're not really deleting anything yet so this is why down here we're not getting a 404 not found as we're expecting now let's go ahead and fix this by going to the bank controller and again feel free to do this on your own as well for practice and then come back to this video afterwards for the solution but really we're just gonna delete the bank using the service so again we're going to go through each of our layers that we build up and in here i'm going to create the member function again which is going to delegate to our data source yeah let's also just call it delete bank given the account number and then we're going to use again the same syntax even though it only returns unit which which is kind of void but it's really still a return value so that's why we can still use this short syntax here and then in the data source i'm going to create the member function for deleting the bank and of course again in this interface i'm not going to write the actual implementation instead i'm going to go to the mock data source and then down here again at the very end i'm going to say implement the members from the interface in this case delete bank and now in here what we want to do is we want to again look for the existing bank with this account number so the same as when we updated the bank up here so we want to first check that we actually have a bank with this account number but here we're just getting the account number not an actual bank so we can just do it like this and if we do find a bank with the given account number then of course we want to just remove it so let's say banks dot remove not replace all remove the current bank and that's it so there's no return value or rather it just returns unit so that's already all that we want to do and of course if there is no bank with the given account number we're gonna again say no such element exception which should by now also automatically result in a status code of 404 meaning that no such bank has been found so with this we can rerun our test again and then with this code we're passing the test um let's take a look in our bank controller test so now we're actually testing that we can call the delete endpoint and it gives us a no content and then afterwards the object is actually gone let's move on to the nonhappy test case down here so i'm going to create another one and i'm going to say it should return not found if if no bank with the given account number exists and here again we're going to say account number is does not exist and we could of course extract this into a variable which would be another good refactoring because we're using this one for i think we've used it three times now but for now i'm going to keep going with this test case so when we make a delete request now using moccambc and we make it to the base url slash this invalid account number so i'm also gonna say uh invalid account number just to make it clear then now we expect that we get a status code that is not found and of course i'm again gonna add a print in between for a debug output and this is again just one block for both when and then we have our then so our assertions or expectations all right let's rerun the tests and let's see what happens now in fact as i mentioned we have the no such element exception so yeah this test case will already pass of course you should have a failing test first but i think by now we know um what we're doing here with these mock can we see tests and the end expect so yeah i'm not really gonna change it here you can also look at the logs and see that it's actually returning a 404 with also a request body that has the appropriate error message in it all right so this is all looking good so far you know what the next step is we're going to start up our current application our new extended application and then we're going to go into postman and see this work with the actual application running so let's take a look we're going to get all the banks so we have three banks available and now if you make a delete request and give it a valid bank account number here we expect to get two or four no content and then of course if we now retrieve the list of all the banks we get only the remaining two and then in the nonhappy path we expect that if we just give it a account number that doesn't exist we're gonna get a 404 saying he couldn't find the bank with this account number all right perfect so looks like everything is working as expected i hope you learned something again in this video if you did please leave a like below and i will see you again in the next one