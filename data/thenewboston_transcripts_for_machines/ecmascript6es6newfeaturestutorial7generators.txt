all right guys welcome back and in this video what I'm going to do is I'm going to talk to you guys about generators now a generator is actually really hard to explain without just showing you guys how it works but before I get coding I kind of want to just try to give you guys a real brief overview so you know whenever you just make a normal function what you do is you make the function give it a name and then whenever you call it it either just runs a bunch of code or if it has a return value then it runs up to the return statement and then gives you back a value well at first these generator functions they look a lot like you know just a normal function but the thing is they actually don't execute all the code at once like a normal function what they do is say that you had 10 different lines in your generator you could say run the first two lines and then pause and wait until I tell you to go on now once I tell you run the next three lines and then pause so it pretty much allows you to make functions with like checkpoints in them sounds weird and it kind of is so I'll show you guys how to make one so whenever you just make a function you just say the word function that's the keyword and then you type the name well whenever you make a generator function which is a function with like checkpoints in it after the keyword function use the asteris and this says Hey JavaScript this is actually a generator a special type of function and the rest or um most of the rest is kind of the same so again you can name it anything you want just like a normal function now check this out these checkpoints are determined by the yield keyword so yield basically means pause I mean that's what it means in real life too so it's not that hard so let me go ahead and type this and show you guys a couple examples so I'm just gonna uh return a couple stupid values here uh apples bacon and what I can actually do is I just don't only have to include yield I can include just normal code as well I can include if statements while statements uh printing stuff out to the screen so say um okay this is the line after bacon and now let me yield one more thing which is corn so basically anytime you see yield think pause or checkpoint simple enough so now let me go ahead and actually create a reference to this generator so I'll say let sample equal actually let me say sample generator instead of simple generator think it'll be a little bit easier to see since this isn't really simple but it is indeed a sample sound like Dr Seuss now all right so this is just a reference to this function now whenever I call this function the very first time what it's going to do is it's going to run run until it gets to this yield so essentially it's going to say okay I'm going to return apples and then I'm going to pause and I'm not going to run any of this other code until you tell me to so just so we can actually print out apples what I'm going to do is this I'm going to say sample. next this next function essentially means run this generator until you get to the yield statement so now if I go ahead and run this check it out now take note of of what this returned what it returned is an object with the value of apples and it also has another property called done now whenever your generator gets to the end and it has no more yield statements this is going to be equal to true now since we still have more code to go this is going to be equal to false all right now if you only want to print out the value for example if you only want to print out apples and you really don't care about that done statement then what you can do is just print out the value just like that so that may be a little bit easier to see what's going on so again what it did is it ran this function until it got to Apples returned it and then it says okay I'm waiting I'm waiting for you to tell me to go to the next checkpoint can't even talk today so whenever I do that it says okay I'm going to run apples and then you want me to go to the next one so I return bacon and then I'm pausing so this line of code it never even ran whenever we call next what it's going to do is it's going to run all the code until it gets to the next yield statement so then check this out whenever I ran this it printed out apples right here and then it went on returned bacon and then after it returned bacon it hit this line of code so that's why it printed out this and then the last one was corn now if you guys were wondering all right well what happens if you say go to the next one even though you're kind of all done with them well what it does then is it just gives you undefined so undefined essentially just means hey I'm done with the generator function that's it so that's all a generator is basically a function where you can include checkpoints or little parts of your code where you can pause until you call next so if you guys are wondering all right so that's kind of cool I guess but is this useful in any kind of way the answer is no it's not thank you guys for watching I'm just kidding so I'll show you guys a really simple example of and this is probably the easiest way I know that whenever we're talking about like communicating um with an API in promises then you're like just demonstrate a generator then that's kind of what they're made for but for now I'll show you guys like the most simple example ever so I'm going to make a new um generator so again function asteris actually let me just give myself some more space and let's say that I was making a program to create a bunch of new users for I don't know a website or something and each time I created a user they needed a new user ID so I'm just going to say get next ID just like that now the first ID I'm just going to say just make it equal to zero why not you can start at one if you want but who cares and see I really don't have that much money for a big old server and I don't want like a million people signing up so I'm just going to say while ID is less than three so I can only have a Max uh number of three users on my website again it isn't a very cool website but it'll demonstrate this point all right so what I want to do is this I am going to Loop through this three times now instead of just returning one two three what I'm going to do is I'm going to use this yield keyword that says what we want every time we call this generator is basically for you to return the next user ID and then pause and wait until I ask you for another user ID so I'm going to yield the ID and since we want it to actually change I'm just going to write Plus+ so the first time I return zero and then one and then two and then it breaks and if we try to call it again it's going to be undefined so I'll say what can I say here I'll say let um create user equal get next ID so anytime I want to use this print it out so we can actually see what's going on create user next and remember this actually Returns the object with the value and remember it said done equals true or false right now I'm just concerned about the value so that's all I'm going to print out so if you run this check it out the very first user is this user zero now if I call this again then I get user one so now what I can do is I'm like all right so that's enough users for now um okay I have to go do something else write some more code yada yada yada that runs and then I don't know maybe I check my database or my server to make sure that everything is you know that I can support all these users all two of them and then I can go ahead and call this generator again pretty awesome eh now just because I know you guys want to see me try to create another one and for the say undefined boom roasted there there you go so whenever you try reading the documentation about generators it makes it sound like it's the most confusing thing in the world but it's actually really easy again all they are is functions and they run until you get to the yield keyword and this pretty much says pause until you call next again and then you can keep calling next and it can keep returning values until it gets to the end of it whatever kind of way and it has no no more values to return and then it just returns undefined that's it that's all they are so yeah generators easy peasy thank you guys for watching and I will see you next time