already a welcome back and in this video what we're going to be doing is we're going to be working on this address logic I'm hoping that I can knock out four and five in this video however uh we'll see how far we get but basically just a little recap in the last video what we did is we had the logic to add and remove items from our cart now before we go and actually order these of course we need to be able to manage our addresses to be able to say where do we want to receive these items so that's what we're going to be doing today and just a pop in tnb OS to give you a little overview of what we're going to be doing so right now we're going to be building out this my address pages and it's just going to have this little section at the top and we can click this button to add new addresses of course fill out this form and then once we have an address it's going to appear here and we could either delete it or edit it so pretty simple logic and also pretty critical because then whenever we go to place an order we can just go ahead and choose an address and of course that's where our order is going to be sent so now that we got the overview out of the way let's go ahead and start building out this page so let me hop into seeing what we have for our address pages and all it says is by address right now so let's go find in files by address and first of all let's just get the padding situated for all this okay so on the product Details page we have a padding of 24 pixels 32. there we go actually what was it on tnb OS same thing 24 pixels 32 okay so after this we have a section heading and let me actually just pull it up on tnbos since we're going to be copying a bunch of stuff from there so that would be buy addresses and the Styles okay so we have a section heading this is my addresses and the right content is a button that basically takes you to the buy address Details page okay so we already got a section heading component let's figure out where we use that okay so on our cell products we already were using the section heading components so this one's going to have a section heading as well let me just check my overall layout so the container for this oh it's not even Flex or anything and that is just because we have two divs in there so that should work actually so anyways for this section heading why am I styling this one margin bottom so we'll see what we need to do so for the section heading we're just going to say my dresses and the right content is going to be render add address button and for this render at address button we're going to need to import a button component and then Plus I wonder if I can get okay so button component is render out address button render address button and then the MDI Plus and I forgot actually Y is all right I need to turn my AC off also one second okay okay there we go all right now what I'm wondering is for cell products whenever we render this button we didn't have any icon for it but I think I do one icon yeah let's uh keep things consistent here all right so this is kind of um not really part of this session hi oh wait this is on the button all right so the button has a left on click and text left on click and text and do I need can I simplify the naming of this maybe I just say render button since this is the only button in this component okay now on click handle add address click okay so let's just log something out for now so console log ad address and I'm also going to simplify this to handle button click so by the way that fly is uh still flying around me in case anyone wanted to you know know about the fly update okay so this is interesting first of all the button looks a little bit weird oh I know why that is because in my icon buttons have it where the Border radius is six yeah but we just want to make that 50 percent like normal now and sell same thing we can also just have it without any icons all right does the icon look better or not actually let me just remove all icons keep it simple for now again from here we are focusing on functionality not the design at the moment although design is a very important part of software development just don't want to do too many things at once here keep it nice and simple okay so add button by my dresses ad and then when I click it it should say add address and why am I getting these errors Okay add address address beautiful okay so the next thing I want to do here is render my addresses or the empty state so let's work on that so okay same thing with products actually let's all right so these products yeah we have an empty State for the cell products as well all right empty text here so here I am having the section heading then rendering content in for the content if I don't have anything to display which is products in this case but it's going to be addresses I'm just going to render this empty text component so let's see what I had in new tnbos yeah pretty much the same thing beautiful Beauty full okay okay all right so where am I now tnb OS render button I'm going to say render content address list we didn't create yet but if I do I'm going to render addresses so if all right I'll just render null for here and then this empty text we'll just go ahead and test out our empty state so for render content what we can do is say all right let's see what we're working with first of all right that looks pretty good and just so we can see so this empty text component has a padding of 16 which is beautiful all right so my address is if you don't have any addresses it says no addresses to display great great great now I'm wondering what we can do from here probably just spelled out the logic to add it yeah let's do that all right so in tnb OS when you add a dress it takes you to the address Details page so let's do the same all right so styling a lot of other styling are we going to need the addresses which we don't have yet but we'll come back to that all right and here's another question do we want to do the same logic as editing products where we have active by address I believe so because that design pattern worked well before so why not do it again yeah that'll work okay so what we're gonna do is we are going to first look at our manager and oh my God two flies now you have got to be kidding me okay all right so we have active product and this gets set right before we navigate to one of our pages yeah so we're gonna follow this same logic where whenever we edit something we're going to be setting the active address and then navigating to the page and then whenever we are creating a new one we'll just set it equal to null and then navigate to that same page and then where when we're at the page we can just check if we have an active address or not if we do we must be editing one if not then we must be creating one so for here let me just go ahead and okay so we need to type out my address first oh my God these bugs are you know I think I might have to go to the uh pretty gross too just it's a random bugs flying around I hope they don't get my coffee or anything okay so let's go ahead and type out the address all right so new types addresses and just like basically everything else actually let's see what the let's um get my addresses okay so let's tell chat gbt to the created typescript interface for this and while it's doing that what I can do is kind of steal some other stuff here so so address all right so what we are going to be doing is we are going to be creating a slice for address the type of it extends from created and modified created in modified also has an ID so address one two so you stay the owner so address one two city state country trust one two city state country zip code is string and owner is a number copy those put them under my dress alphabetize and should be good types create a modified generic okay all right now as usual just going to go ahead and register these in my main types index okay so acid pairs address so I said all right so we created the address which is a single one and addresses which is the shape of how it's going to be stored in Redux basically the addresses keyed by their ID let me just sort this all right so this is the shape that we're going to be storing looking good now as always before I can create this in my store just want to create some constants for it so addresses addresses make sure it's spelled it right looking good and now I can go ahead and create a slice so in my store create a new texture file for addresses and what do we need for these let me think so we are going to be setting an individual one for example whenever we create one setting multiple ones for example whenever we go to this page we just want to fetch all our addresses actual property fetch them as soon as we log into the app that's uh probably more efficient and unset which is the equivalent of deleting so I think we can just copy all this logic okay so for my addresses first of all this is going to be constant which is addresses and then instead of course all right cores can be replaced by addresses and core is going to be replaced by address course is going to be replaced by addresses okay now let's read through this so I have an address slice of course everything internally uses the address constant addresses constant importing address addresses initial State it's just empty thick and then initial stay reduce your set address we're going to be passing in an address keying it under ID to send multiple addresses we're going to be passing in a list of addresses and then we're just going to be king all those by ID and then to delete and address we just delete that slice or that object under the address ID which is just a number export everything send address addresses unset address reducer good go okay under my store now that we got a new slice let's go ahead and just let's see asset pair and then dress above that so addresses what we will say that we have a new slice called the dresses and for the value of that we'll set that equal to addresses reducer and now hopefully in our Redux store we should see addresses looking good okay now what we're going to need to do now that we have those in our store is we're gonna need to write a selector eventually pluck those off the store index what I can do is I can say whenever we call the selector function get addresses then just give me the data under State addresses basically that slice of our Redux store and we don't need this just yet but we will in just a second okay so now what we want to do is we want to go ahead and say um we're gonna have an updated slice in our manager for active address and this is going to determine if we're creating or editing an address so first thing we're going to need to do is import address so types addresses we're going to import address and then for active address that's either going to be equal to an address or null and that's going to all be stored under the manager now in the store for the manager what we need to do is we need to update initial States to say that by default active address is equal to null all right and then to update this okay I'm looking good looking good and now let me just check my manager okay probably gonna need to log out log back in okay so now I have active address being able to store or being stored in my manager slice so now what we can do is we can say that whenever we click this button make sure that this is set to null and then navigate to that page so to do that let's just say let's just steal it from somewhere else okay update Manager actually I can do this might be easier so on the handle button click which is same as this logic right here I'm going to be dispatching update manager and then navigating to this page create a product now the question becomes do I even have this page so page shop no so this is going to be by what was my naming convention buy address details yeah buy product details by address details so let me just get the name of this all right so we're going to be creating a new page and we'll just keep the styles empty it first and refactor rename okay so this page is just going to be empty for now and we'll just say buy address details and now we have an empty page component what we can do just register a URL for it so all right so let me first just import the page by address details and again this page is going to have our add or edit form on it and now what I can do is say something like create edit address all right so the route by slash create edit Address should go to buy address details but does it that's the million dollar question so buy slash create edit Address should go to buy address details fantastic now actually let me go ahead and add some padding right now just for some reason I hate when things are butted up against the corner you should probably standardize this padding too in a bit but yeah do that a little bit later on all right so now the goal to programmatically go to the Spy address Details page so that's going to happen whenever you click the button in order to do that we first need to get this dispatch logic which we don't have already so dispatch is going to require use dispatch and app dispatch dispatch is going to come from the reactor Redux and then we should be able to pluck off this use dispatch all right that is looking good and then what else are we going to need update manager to set all right and then navigate we're gonna need so navigate use navigate come from reactorader Dom hook and then we just are going to use navigate like this nice and easy nice and easy here all right now with all of those Imports what we can do is update our hand handle button click in okay so first of all where are we navigating to and the goal is to navigate the shop by create address so we are going to navigate to shop by create edit Address and before we do that what we need to do is wait for it wait for it the store manager okay so what we're going to do whenever we click this add button right here is we're first going to update our manager and then to set active address to null just in case there's anything in there and then we're going to redirect to this page so update manager set it to null beautiful active address and then be taken to this page looking good okay all right we are doing awesome here let's see where we go from here okay so I think what I want to do mmhmm I'm just wondering where I can kind of steal some of this logic from so now basically have to create the form right here and I think for this what I can do yeah so I'm thinking we can just steal a lot of the logic from the cell create edit product in other words uh we need a form here to edit the address and we already have this form here although The Styling isn't that pretty and the the only hesitation I have before kind of having chat GPT help us out is that this uses form data because it uses an image however we are not going to need form data because we don't have any image involved with an address so in that case also I need to do some validation here let me make a little note okay all right so in that case we aren't going to need a lot of this however I think can still help us out she let's do this interesting interesting interesting mmhmm mmhmm okay let's just uh give check GPT some work and I'll say we can kind of edit that so um here are my update the by address details component Port addresses address creation oops I didn't even give it the component but it doesn't really matter okay so let me just start importing everything that we're going to need Spectra products create edit yada yada don't need any of that but so products we aren't going to need and for development um the first time we submit this we can just log out the values to make sure our form is working correctly and then what we'll do is we will write our API functionality in dispatchers to kind of hook everything up with the API but for now should be good okay all right so what are you coming up with Chad GPT uh dispatch need that as well preview and then after this we're going to navigate back so okay so we're going to submit the form and then navigate them back to the address page and then we need the initial values initial values type foreign values that's interesting interesting interesting all right so edit and then I'll say type of foreign values equal type of initial values all right so I also want to just look at my address see what's going on with this so types of the address okay I've created modified nid which I don't need what do I need address one address two City and Country dress one address two City and Country and then the owner doesn't need to be submitted just State and zip code stay in zip code okay looking good next I just need my form and I'm wondering if there's an easier way to do this performic form yeah let's just steal one of these core modal so next what I'm going to do is this inside this container it's going to have a form and the input okay so let's just do address one and address two for now oh I need the name too so initial value is on some evaluation schema I'm just gonna have an alphabetical order or it's annoying okay so submit submit all right thank you so for the validation schema of address one address two then those are the values now on submit for handling the cement logic what I can do is I can just treat this very easy okay hmm all right so right here we are just kind of patching together a bunch of different stuff got a bunch of imports that we don't need yet you will need in the future so no checkbox needed no file inputs do we need to close no do we need an icon no okay so I should have some kind of form on there now so let's see so I'm gonna buy I'm gonna go to my dresses add a dress this looks good for now and then I'm just gonna have 456 Amy Lane one two three okay just logging out these addresses and why am I logging out oh I see I see I see interesting okay City Country state ZIP code values all right cool all right so I got address one address two and then we're doing City Country State and zip code so in 10 boss we're doing City State country zip code city state ZIP code and Country all right so same thing and then make sure okay so City state is called state ZIP code is snake case and then for the country okay I had this a little bit different too so before I must have had it that except country codes on the back end but now I just want to have it um except a country if you're going to come from country options but either way let's get validation for city state and zip code all right so for City it's just going to be a string and then for state and zip code which zip code is snake case those are also going to be strings now for these country options let me see what I had for this okay so let's just keep the same kind of standard that we're doing right here okay so in other words what we're going to do for these options for countries eventually I'm going to find some Library and then we can one second yeah and then what we'll do is we'll just use that library to get a list of countries but for right now I just want to kind of um hard code everything in so this is going to be uh India and Nigeria and for the select let me just see something real quick so for the select options it's going to take a select option and this is going to have okay a display name is optional and the value is required so the display name okay in the value so what I can do for this um this will make validation a little bit easier where by default let me actually make make sure that I have something okay so by default it'll just have this little hyphen and then the value internally is just going to be zero and then I can just validate if they have anything selected and then hopefully admit that check it out all right looking good looking good looking good looking good okay so now what did I miss validation for the country right all right tnbos how are you validating country so string required is a valid country and you say country is a required field and for the validation it's that country code is not equal to the default select option interesting interesting interesting oh this is good this is good okay so actually I think I want this logic this is a little bit better so actually where is this I really like this so shop constants forms so actually let me do this yeah I am actually going to make a new constants directory top level and I'm going to make a new forms attribute here and for this I'm going to give it this default select option and then what I'm going to do is I'm going to import this default select option and then I can first of all use it place up here and also in place of the value right yeah so then I don't even need this display name value nonsense I can just say that the value of these is equal to either the hyphen or India Nigeria uh USA whatever all right and then in my validation that'll make it pretty easy because for the country I can just say that in order to be valid and also I don't wanna all right so for the country validation what I can do is I can just validate that the country actually let me just say the value that gets passed in is not equal to the default select option so that means that if they have this selected it's going to say country is a required field and it's only valid if you select one that is looking nice okay so now what else needs done here let me just review my logic so far this is good validation taken care of don't need this anymore it says you oh whooping cough all right close tabs to the right and now we can probably start working on my API logic since I think I'm ready to submit this data now yep yep yep yep yep okay so first let me go ahead and actually how are we gonna do this okay let's just start with the API logic as usual so under types just gonna get the name of this refactory name addresses since this file is going to be named the same thing and now let's just say that so it's going to be the same what do we just create cart products and we're going to be creating deleting getting and editing same thing with products great yeah yeah this is what we opened okay oh and you know what we actually don't want all right so this is the end point however we don't want authorization form headers we just need authorization headers for everything because we are not working with any form data and replace products with a dress all right delete okay addresses all right so now what I can do is first review this okay so for my address endpoints I can create an address I can delete one I can get a list of all my addresses or I can update one of my dresses the base endpoint for this is API addresses now for creating an address first of all this form data is incorrect so instead of that so we're going to be creating a new type of addresses and it's going to be similar to this because we want to say create address request now when you're creating an address what information do you need to pass up and let's find out the hard way okay so you need an address one and address two which is optional but we'll actually keep it required because if we don't have one we can just pass in an empty string all right Justin adjust to city state country zip all right so we're going to be using address one address two City country and zip code so address one is a one two three Maple Lane for address two we'll keep this as empty string city is CityVille state is steady actually we'll just do uh NY uh the country say USA in the zip code is one two three four five all right now let's send this in check it out so address make a typescript interface for this here is typescript in our face for what you just gave me address one address to city state country and some code all right so this is going to be the create address request now I just need the for addresses we want to say create a just request create address request and then when we are creating that address what we're going to need to pass in is the data for create address request and same thing whenever we are updating it okay so now let's read through this one more time so this was all good yep yep yep okay so when creating a dress I'm going to be passing in create address requests which is this data right here and then I'm going to get back and address object and I just need my headers for that now when deleting an address I'm just going to pass in the ID of the address and it's not going to return anything now when getting addresses I don't pass in anything I just ask for their addresses and it gives me back a list of them and then when updating an address I need to give the ID tell me what when I'm updating and then the data uh pretty much whatever I want to update it to okay so that is cool cool cool cool cool cool and now what I can do just make my dispatcher functions all right now in my dispatcher I'm gonna go ahead and make a new typescript file addresses and let me do this um okay chat CPT got another one for you this is coding standard crate functions for me or addresses and then I also need to give it my dress is here and hopefully it can do its thing all right so my dispatchers are going to I'm going to have one two three four and that is all right delete get an update set under set from store addresses all right let's see what we got going on here an update address don't do this all right so update address and I should have gave you something else so let's just say dispatcher products just want to find out my standard for updating all right so for updating you also set that and why okay here we go all right so for my dispatcher functions it called create delete git and update greatly get an update these were my three store functions sure to set set multiple and unset okay so far so good now when you're creating an address you need to pass in that data it's going to hit the end point and then it's going to set it in the store when you're deleting it you just need to give it an ID hits the end point and then deletes it in the store by unsetting it when you get all your addresses you don't need to give it anything you just get the list that it comes back with and then set that that in your store and then when you're updating it you need to give it the idea of when you're updating data make the requests on the back end and then set it in your store with set addresses okay so now what we can do is we can borrow some more logic you know we're going to borrow this from whenever we were working with products actually this may not be the best example let's do it with hmm maybe one of the modals uh core model okay oh wait I forgot what form do I have that doesn't involve this you know what maybe we should do it the hard way all right what is going on outside okay so active product yeah let's see this let's just start kind of grinding this out okay so for active products uh that's one thing we need to determine however instead of active product we need to figure out if we have an active address so in the types the manager that field was called active address okay so if you have an active address it means you're trying to edit something if not you're just trying to update something so let's go ahead and use the same logic right here well I'll say convert this to this format so I don't have to type out all of those assuming you have an active address similar to active product the equivalent would be this beautiful beautiful beautiful beautiful beautiful thank you and thank you for saving me from typing out all that and all right so the initial values of the form are dependent on if you have an active address or not should we say country zip code all of that looks good still all right good go and then I will also say okay I don't think I need to do any of this yeah I can just copy this though and I'll put a try catch all right so whenever you are submitting it try to do something like this and then if you get an error then what we want to do is something like this all right so first let's go ahead and replace actually let's get our dispatchers let's import everything that we're going to need to import all right so dispatchers from address what we are doing with the Swarm is we are either creating a dress or updating an address and then first of all I'm just going to replace active product code that we sold with active address and then what we are saying Let Me patch this together by addresses all right so now all right so I think this is the bulk of the logic now it's actually review what we just wrote okay so the initial values are going to be dependent on if you have an active address basically if you have an active address use all these initial values if not use empty strings now whenever you handle submit what it's going to do is it's going to check if you have an active address or not if you already have an active address that means you're trying to update it and whenever you update it what you need to do is you need to pass the ID in of the address that you're updating which comes from active address ID and also the updated data which is just going to be the form data which is just going to be these values then after that's successful it's just going to say product updated in the in this is wrong should say address updated in a nice display those now if you don't have an active address that means you're creating one for the very first time and you just pass in those form values it's going to say address created and then no matter whether you're updating or adding a new one after it's just going to take you to your address pages so you can see what you just did now if you get an error then we want to log it out and for the error that we're going to display to you if you have an active address it's going to say error updating your address otherwise if you're trying to create one or creating address and all of that should be good Imports are looking good so now let's go ahead and test this and actually on our address page right here we won't see anything because we aren't rendering those addresses yet but let me just go ahead and try to create one if first all right so hopefully if this works let me make sure I just don't have any in my Redux store already Okay so we're going to submit this and it looks like it created it and then yep set it in my store right here Okay cool so it still says no addresses to display however um what we can do now is we can build these address cards and it's part of those address cards we have the edit and delete logic right there so whenever we click this edit what it's going to do is it's going to set the active address and then take us back to this page and then delete of course we can just delete it you know no need to navigate to a new page whenever we delete something we can just delete it and then pop up a toast to say address delete it all right so on that note let's go ahead and make these address cards next so address details this seems to be working for now close out of you don't need these yet to fetch you later fetchy lighter bra and then for this what did I make changes here just added a todo oh yeah better validation and I'll change this as well okay so close out of you close out of you close out of you close out of you close that up YouTube okay okay okay buy dresses now here you want to check if you actually have addresses now that we got that logic taken care of all right so dresses are just going to come from this the address list huh that's easier didn't even think about doing that but yeah let's just do that okay so what we need to do is select the addresses from our readout store so how do we do that well we already made I think we made Yep this get address is selector and now what I'm going to do is just steal a little something here all right so I'm just going to steal this selector it's going to come from reactor Redux and then I'm also gonna steal something selectors when possible steel code from other places on your app so you don't have to type that's pretty much see if I thought I give to myself every day okay so now we're getting addresses from the store and what I also want to do is I want to use this little pattern here it's a Nifty little thing and import everything that I need all right so all I'm doing here is just converting these addresses to a list by basically getting the values of everything since they're keyed by ID and then whenever I'm rendering content I can move this basically if you have addresses then we're going to be rendering them eventually if not then render this empty State and now we actually do have an address so we don't render that empty State anymore but now we got to render the actual address cards so in order to do that let's okay so for render addresses I'm gonna iterate over the address list and for each one just convert it to an address card and that's going to be stored or it's going to be rendered here and this addresses section first of all let's make a container for where these cards are going to go and then we'll go ahead and create the cards and now for my break points I want to standardize these as well all right so for my break points where am I breaking at eight hundred and a thousand so that's mobile and tablet so I'll say for mobile tablet okay so mobile View and only you can display one column tablet view I'm going to display three or excuse me two columns and then any more than that I'll display three and then we'll kind of play around with that see how it looks I might have to adjust it later on but for now um you know it's responsive enough for uh just testing things out Okay so after this I'm actually going to need my address card component and that is this right here fascinating so this card what we do oh I see what we did oh okay I see what's going on here so I actually made another address card component and this has all my address information on it with optional right content and the reason for this is because um you so I have the address displayed right here but this isn't the only place where I want to render the address I also am rendering it here on my orders page so that's why I made this part a reusable component now in addition you see that on your my address pages each address has a drop down of what you can do however when it's on your orders page it doesn't have that drop down so that's why I kind of build it out this way and it's the same logic that I'm gonna go with in this new app so we'll make a new component called a dress card and this will have all kind of the basic styling on it yeah I don't have a name on any of these addresses I just realized huh interesting well we'll take care of that later for now let's just go ahead and uh copy this address card component so we got another component for our component Library which is an address card and for the styles what we can do is just format these two our styles for the full name I believe we're just getting rid of that straight up okay I won't need to do this either all right so let's just do this so we're going to have a left and a right section left is where the address is going to go and the right is where an optional right content is going to go which is going to be that drop down now for the left I don't need a full name although we're going to have to add a name later on we just kind of forgot it for now we don't have this country list yet for the types what we're going to do is we're going to import address and some functional components and for the address card which is this component is going to take an address an optional right content and for this do we want to pluck everything off here yeah why not so we'll say address one just gonna render on top address two we can just replace it by address to no need for a full name for render country name would you say country and that's in a div all right and then for zip code all right so for this address card it's gonna have border border box shadow all right all right so we're going to pass an address right content it's going to render these on the left optional right contact on the right looking good all right cool so a dress card is taken care of and now what we need to do is still create this address okay so then with that component we're going to be using it and basically just in a parent component there are going to be creating just for this my addresses page we basically use this component but we form the drop down menu that we pass in before okay and no styling needed so let's actually Hmm this is this thing as well yeah let's actually copy this because that might be easier okay so first of all we want our component from a dress card now with unsetting the address what we are getting all right so that is going to be coming from our dispatchers our address dispatchers all right so we are going to want to be able to delete an address whenever we call this delete and what we're going to be doing all right a lot of patching together here drop down menu page don't need that don't need that okay post type set this at this don't need this drop down menu from components and let's just go all right pretty much just get getting everything functional for now then I gotta do a quick mini self review success all right so now let's figure out what I just did okay so for this address what we are going to do is we're pretty much going to use this address card and we're going to use a right drop down menu for the right component so we're importing the address card drop down menu we're going to be deleting the address whenever we click the drop down menu and choose delete so we're going to need that dispatcher function here toast type just a display or toast from our types we are importing address and we have to rename this because the component is named address then our dispatch function and our just our component typing then for the address props we're just going to be passing in an address and then we are saying that we were displaying the address card and on the right we're just playing a drop down menu when you edit it's going to log out edit for now gonna change this to actually update the active address then navigate to that page but just have that as a to do for now and then on delete what we can do is we can call this delete address by passing in the address ID and it says address deleted and all right so a couple things that we can do from here before we even start testing everything out is that let's do the cell products in here yeah okay so first I just want to put this in a try catch so for the catch all right so whenever you click delete it's going to try to delete it and then all right so when you click delete try to delete it make requests to the back end and then delete it in my Redux store and then display the toast address deleted now if you get an error then just log it out and display the erratos that says error deleting address now whenever you click edit what it's going to do is something similar to this it's going to update manager and navigate you to that page so store manager and we need navigate from react router Dom because when editing you go to a new page and then for navigate you plug it from here and then for this it's actually the same thing so whenever you click edit you're going to update the manager and set the active address to basically the one that you are editing and then you're going to navigate to create at address page which will now have an active address all right that looks good so far and now what we need to do is just actually render these addresses out instead of returning null right here okay so create this function to render addresses but first import that so import that address component we're just working on and then create this function to render addresses render addresses and the key is the address ID and then if you have addresses then render them as address cards in this address section so now let's see what we're working with okay looking good okay so I can either click to add a new address from there or I can edit this beautiful and I will say 456 Apple Lane submit that all right address updated my address updated and then before I delete this I do want to add padding to this and what was my padding here 12 I think all right merge modern 12 but we move that away from the section heading so I can have this so in that case what I can do for my dresses is I can just say margin top 12. all right so now that should give me this margin right here I already saw that editing worked and actually let me edit it without any if your S2 is a required field and that should not be the case so let's change this validation right off the bat so the address details for address to it's not required and then all right so no more error and then submit that and then all right looking good all right and then last but not least make sure deletion Works address deleted no addresses to display looking good all right so we can now add edit and delete addresses ah yeah did we knock these two out so buy her my dresses this is the ux for everything by create an edit Address we just tested that out and we got some to Do's but I will consider this feature good for now yeah a lot of cleanup to do but I just want to make sure everything's working correctly for now yeah I think we're looking alright now another thing that I probably want to do is fetch these addresses whenever we log in since on this page we aren't fetching them anywhere and I actually don't think that we want to yeah so we actually don't need to fetch our addresses every time we go to this page because what we can do is whenever we log out and log back in it's part of this like overall app initialization we could just fetchy dresses here and then whenever we are managing our addresses like adding and editing new ones we can just um add and edit it right from the store and then when we come back let's say navigate away and come back to this page like we don't need to fetch it again because everything should already be in sync so yeah I think we'll save that for later though since it's kind of out of scope for this video but for right now yeah uh buyer my dresses create net addresses so in the next video what we'll do is we'll go back to this buyer add to cart button so whenever they're doing this we'll finish that logic remember we were going to make that a warning modal just to give them a heads up they're trying to add products from two different sellers to their cart kind of give them a little bit a better indicator what's going on and why they can't do that and then from there it's really uh yeah the checkout page where you can basically create an order and then as part of this page they would need to select those fancy new addresses that we just created as well and then really just displaying their orders all right so four items left to do deadline is six days away but I think we're on a on a good Pace I got a good feeling about this so yeah as usual uh thank you guys for watching and I'll see you next video