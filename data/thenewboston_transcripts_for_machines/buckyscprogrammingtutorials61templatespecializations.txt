what's going on guys welcome to your 61st tutorial and in this tutorial I'm going to be talking about something called template specialization specialization there we go might take me a few times to get it but basically what template specialization is is it's a way to make a class that has a different implementation when a specific type is passed into it for example if we made a regular old template like before we could pass any data type into it like integers uh doubles characters and it's going to be able to handle any of that data well in this tutorial I'm going to be showing you guys say for example you want to build a template to handle all numbers but you want it to do something a little different when it handled characters because you know let's say you wanted to build a class that handled numbers and added them together well you can't use all these same functions whenever you're adding letters together or else you're going to get a bunch of Errors so it's basically a way of working with a specific type of data in a different way than you would regular so let's go ahead and the first thing I'm going to do is build a regular template and I'm going to compare it to this new specialized template so our boss came up to us and he's like Bucky why is he talking to us and only using my name I'm not sure but he's a little weird so he's like Bucky I want you to build a template to handle all types of data however if the user passes in a character which is this one specific type of data I want you to work with it in a different kind of way so one class or one template is going to take integers doubles uh floats any type of data we pass into it but whenever we pass it into character it's going to hand it a little bit differently so after me talking for two minutes it's finally time to start coding so let's go ahead and build a regular template and this is named class T so remember T can be any type of data and I just call this class spunky because you know kind of in the spunky kind of mood did anyone ever used to watch Rocco's Modern Life uh what was that dog's name I'm pretty sure it was spunky but anyways uh let's go ahead and make a public and the only thing I'm going to be making in these classes is just a simple Constructor because I don't need to demonstrate a whole lot I just need to demonstrate the concept and you know not build a huge functional class so in order to make a Constructor you of course write the class name which is spunky and pass in any type of data and will name a variable X whenever we first create an object so all we're going to do is we're going to create a class pass it in an object and print it out on the screen so C out X and then go ahead and write something like is not a character because we're going to be passing in any type of data like a number and it's going to make five is not a character or 6.17 is not a character so this class is going to handle everything besides character basically so let me go ahead and make sure I got all my semicolons in the right place and let's go ahead and see a quick example right now so actually I'll wait to show you guys an example not yet I'll make you guys wait so this is how we build a basic template it can type take any type of data we want it to um integers characters floats doubles and it could say whatever thing we passed in like J is not a character four is not a character 8.76 is not a character and it's going to work fine with any type of data that's the beauty of templates so say whenever the user passes in a character we want it to be able to do something differently well that's where template specialization comes in and in order to do this go ahead and type template with empty parameters right there or empty angle brackets this is the line where we tell C++ we're going to be using template specialization and in the next line we're going to tell it what type of data this class should hand handle so this again we can name it the same class as before because the main implementation doesn't really change it's only the data type in concept and the class or excuse me and you write your class name and in between the angle brackets after your name you write what type of data should this class handle all right this is a special class that I want to handle characters characters only nothing to do with numbers or any other data type anything like that this class is only going to be for characters so again one last time the only thing that's really going to change is this line which tells C++ we're going to be using template specialization and this class that says all right since you're using template special specialization what type of data should this specialize in and this class is going to specialize in characters so let's go ahead and make that Constructor public and of course uh it's the same spunky however in your par after it you don't write TX because remember T is a generic data type since this class is only for characters go ahead and write character right there and now the body is just like before let's go ahead and copy this copy right there and paste it right there except um we can't have X is not a character we can write X is indeed oops no more explanation points to needed is indeed a character so basically how our program is going to work is this we're going to be creating objects and we're going to be creating objects of a bunch of different types integers doubles characters whenever our computer program comes across the character it's going to handle it with this specialized template any other type of data besides character is going to go to this generic uh template or generic class so you know any numeric data such as integers doubles floats yada yada yada this is going to handle it but once it sees it's working with a character it's going to handle this class right here so it's going to be like four is not a character 8.0 is not a character but if we throw in something like J or Z it's going to say Z is indeed a character so don't believe me well let me go ahead and prove it to you guys so the first thing I want to mention is I know I didn't tell you guys this but you can explicitly well let me say this whenever we like passed in a data type before C++ already automatically recognize what type of data type that was but you can also do something like this um you could throw in your angle brackets data type right after the class name and this helps C++ out and oh great there's a motorcycle driving by right now and this help C++ out by it basically changes this to T or it substitutes t for the data type it's kind of just a you know a nice little hint for objective c so let's go ahead and make object one and since we're going to be working with integers we'll go go ahead and pass in seven so now let's go ahead and copy this save us some typing and now let's create two more objects so two and three in our next object we're a double and remember a double is basically something that you can use decimal points like 3154 and now for our third one let's go ahead and use that character and remember a character is just a letter so um Q or something like that so basically what's going to happen is this it's going to come across this sees it's working with integers and use this generic template right here when it gets to here is going to be working with doubles and it's going to use this generic template right here when it comes across this it's going to be working with characters and it's going to say hold on a second you have a special class right here just made for working with characters so on this one I'm going to print Q is indeed a character so let's go ahead and build and run this see if I forgot any semicolons and looks good so seven is not a character s or excuse me 3154 is not a character Q is indeed a character so as you can see these first two lines right here use use the generic template class and the last one whenever we had a character in there it used that specialized character template class so there you can see the beauty of specialized or excuse me they're called template specialization so uh there you go it's basically specialization with one data type in other words you have a different implementation when a specific data type is passed in in this case character so there you go I hope you understand it if you don't just go ahead and ask me on my Forum or uh leave a comment below and I'll try to answer it for you guys so thank you guys for watching don't forget to subscribe to my channel and I'll see you guys in the next video