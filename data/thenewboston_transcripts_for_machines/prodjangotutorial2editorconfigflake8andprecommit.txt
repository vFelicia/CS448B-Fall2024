alrighty everybody welcome back to another video and in this one we're going to be going over some styling and linting related tools really just setting up our project to keep our code consistent and clean no matter how many developers we have on our team so with that being said let's hop into our first tool which is editor config so you may be asking the same question that apparently a lot of people have asked and that is what is editor config and I really hate just reading from you know kind of like whenever you have a slideshow and you have a bunch of texts on there and they're just reading it like you know is this necessary but uh this really is the best explanation where it helps maintain consistent coding styles for multiple developers across various editors and Ides so that sounds pretty cool so how exactly do we use it well before we hop into that check this out a little cool thing I want to mention and that's this boom no plugin necessary we don't have to install everything check it out these editors come bundled with Native support for editor config everything should just work love that so with that being said now let's go ahead and figure out how to use this bad boy so to actually set this up go ahead and create a new file name editor config and this of course is where all of our configurations are going to go now the first line I want you to write is this root equals true huh auto complete didn't even know that that's pretty cool so what this signifies right here is that this is the most top level editor config file now I say this because we can and I'm not going to be setting up the project this way I I never do really but if you wanted to you can actually have a separate editor config files nested inside different packages or directories and whenever you have those it's going to take the settings from that file and apply it to that scope whatever your directory it's in however because we don't do any of that I'm just going to signify root equals true and the reason I do this is because whenever editor config is going to kind of scan your project and look for all these editor config files whenever it reaches one that says root equals true it's going to say oh this is the top level one I don't need to search anymore so that's all I'm signifying right here and now we can get into the good stuff which is you know the actual rules for making our code consistent and clean so how do we do this well for each file type we are going to have a wild card pattern to pretty much say what rules or what kind of files are these rules going to apply to so in my project I'm going to have HTML files python files and you really don't even have to plan head because anytime you create a new file type you can just go ahead and update it in this file but just for an example for HTML files I say I want the character set utfa I'm really loving this auto complete by the way uh for the indent size we'll go with four like that for HTML files for in that style we can do space and for MAX Line length I'll go 119. all right so basically Wild Card pattern to say what kind of files are you making these rules for and then you make all the rules now I'm also going to take these same rules and apply it to python files as well so for my python files I also want this utfa character set just your standard characters that are you know on your keyboard uh let's see indent size four space 119 okay now another thing that I want to mention is that since we have these rules repeated and we're pretty much applying the same ones to HTML and python we can indeed shorten this up a bit by instead of saying star dot then your file extension you can have curly braces and say HTML and py and now we can remove this and it's the exact equivalent and what the heck is this I looking at me for okay it's creeping me out but anyways last thing I want to mention before we move on to the next tool is that if you set up your project by kind of just following along to this point and your IDE still isn't picking up these changes then it's likely that you need to go into your settings and just well for jet Brains it's at editor code style and then here you can see this little checkbox enable editor config support and also a little it's a warning but it's not really a warning it's exactly we want it's saying settings may be overridden by editor config I'm not going to disable that because like I said that's exactly the behavior that we want so I'm not sure where the setting is in other Ides but just know that if it isn't picking it up you probably need to go into your settings and specify that somewhere but yeah with that being said this is really all we need to do for editor config and there you go now the next tool that we're going to be working with is something that I'm sure a lot of you are familiar with and that is flake 8. so flake 8 just like a lot of these other tools it's a tool to keep your code consistent and clean and for this one we actually do need to install so I'm just going to run poetry add and I'm going to install it as a Dev dependency since we don't need this in our final build push up to production it's really just for you know developers to make sure their code's consistent so add minus capital D and the packages is just called flake 8. so again whenever we do this it's not only going to add it to our Pi Project tunnel but also install that so that's pretty cool all right now actually let me just go ahead and make sure yes it is installed as Dev dependency beautiful so just to actually make sure that this is working correctly if you do poetry run the command to run this tool is flake 8. however I'm just going to go ahead and say dash dash help just to make sure that yes it indeed looks like this is working correctly all right so check it out now let's go ahead and kind of get a glimpse of what flake 8 does for us in action so what I'm gonna have you do is go into any it doesn't really matter right now just go into any of your python files and just add a bunch of random blank lines just so it's going to throw some styling uh warnings and then back in your terminal if you say poetry run flake 8 just go ahead and write the path to that file so that file that I just messed up was in core manage so I'm just going to go ahead and say flake or in other words check this file for issues hit enter and it says yes indeed in this file you have way too many blank lines you have 12 that is absurd let's just go ahead and fix that up and check it out now whenever I run flake 8 again I don't get any issues beautiful so that's kind of the gist of what flake does however we don't want to set this up exactly in that way where we have to run everything from the command line all the time now actually another thing that I want to mention before I begin is that you know how we can run this checker on an individual file using this format if you ever want to just check every single file in your project you can do poetry run flake 8. now I'm actually not going to hit enter because I don't want to do that and the reason is because I have a lot of other files in here specifically in my virtual environment and there's actually a crap load of files you see in here the files from every package basically so by default if flaky doesn't know like hey I shouldn't be checking in your virtual environment we actually have to configure it for that so how do we do that well great question if you go to new file just going to go ahead and hit dot flake 8. and these of course are going to be our flake 8 configurations now instead of typing everything let me just copy some of these in all right cheat sheet beautiful all right so first up we just need to have square brackets in say a flake 8 and under these are of course going to be all the flake 8 configurations actually similar to editor config in that way now these ignores actually do I even want to go over them uh probably not so the reason that I don't want to go over each of these ignores is because these are the rules that I like to ignore however what I would suggest that you do is I would start by not ignoring anything and then whenever you run flake 8 what you're going to see are rules like this um e303 this is a rule that checks for too many blank lines for example and that's one that I like I want to check uh if I have too many blank lines so I'm not going to ignore that however if you ever see some issues and it's like no this isn't an error this is actually how I want to style my project then you can go ahead and ignore those so these are the ones that I like to ignore again just skimming these are for like coding magic comments these are for Doc string FR kind of your generic flake rules anything that starts with i is a rule related to uh Imports and anything that starts with w actually this I don't even know what the W stands for I know that these rules are line break occurred before a binary operator and line break occurred after a binary operator so yeah I'm not sure the significance of that W but either way they kind of group it based on letter not really that important uh but yeah that's just the noise now for exclude this is probably pretty obvious saying what directories or um packages do you want to exclude of course my hidden git podcast in my virtual invent the end and also I want to ignore this as well my my pie cash so again this is just saying that whenever I check for these style rules that I'm just gonna you know kind of bypass all these file name is just saying what files do you want to check for encodings a lot of this is pretty simple inline quotes how do you want your quotes uh Max complexity this is an interesting one so this is related to something called the McCabe complexity and it has actually a weird definition but it's more or less the number of decisions that your program is making so I say that because if you ever uh if flake 8 ever like complains about this check then what you need to do is you need to go back in your code and break up your logic in some way simplify it remove some if statements basically reduce the number of decisions that that chunk of code is making and all right so that was Max complexity uh these ones are pretty selfexplanatory to MAX Line number MAX Line length multiline quotes and this last one per file ignores this says that if you ever have a rule but you don't want to ignore it across your entire project if you want to ignore it across your entire project you're going to stick it here but for example if you only want to ignore it in a single file and I typically have these in like these files right here where under core project settings templates you know how we had this file which like it isn't like a python file that gets executed it's really just a sample template that other developers can use to say what should go into my local settings right here that is of course is you know it isn't going to follow the same rules as your other python files so this would be a good example of one file that you want to ignore specific rules on so now that we saw how to configure that what I can do here is actually poetry run flake 8 sense now that my virtual environment is being ignored I'm not too worried about uh scanning that and check it out so it did find some issues with our project and we can actually just click into these and fix them one by one so this rule right here f821 this is going to check for like it says an undefined name in Docker now remember that this actually it may look like an issue but it's not because just the way that our split settings were kind of structured this is actually going to be defined we talked about this in the last video the point is if you want to explicitly ignore this rule for this certain line you of course don't want to go and Flaky and just ignore it here or else it's never going to check any of your files for it so instead right after this if you say just add a comment and say no QA and then you can just specify the rule so no QA for f 821 and also it's happening on this file too or excuse me this line right here then it's pretty much just going to ignore this rule for this specific file and just to kind of prove that let me just go ahead and run it again and you see that these lines are no longer throwing any issues we just have those two left which is in this file and I have a trailing white space actually close this so yes as you can see there's a white space right here that shouldn't be there so embarrassing and actually let me just go ahead and delete this we don't I'll just like for the tutorial all right so no white space because we just removed the entire comment so that should take care of that and what is this so it was on line 15. see what that all right so it was the same issues before where this just needs to be ignored because we're going to get that from split settings all right so now let me go ahead and just check everything again and yeah no warnings so there you go there's the basics of how to set up and run flake 8. now before we hop into the next tool what I want to just touch on is you know how I said that whenever I find myself typing poetry run and then a command poetry you're on command poetry around command then we probably want to make this into a mate command to kind of just shorten it up well I'm not going to do it for this example because we're actually going to be tweaking away that flake uh ran and you'll see exactly in just a bit what I'm talking about but that's the reason I'm not going to make that make a command quite yet and let me just close everything before I get started with our next tool which is precommit all right I love keeping my terminal nice and clean and I don't know why it's a little issue that I have but now to install precommit what we can do is uh actually let me tell you what precommit is before we just go ahead and start installing a bunch of random stuff so precommit is a tool that allows you to manage something called hooks now what is a hook a hook is basically just a little script that can check your code for various issues in fact you can make your own custom hooked uh you know have it do anything that you want but some examples that other people developed already are let's say you can have a hook to check that you don't have any extra white space or you can have a hook to make sure that your Imports are properly sorted so like I said a hook is just a script to check your code for any style or linting thing that uh really anything that you can dream of you can make but anywhoot let me go ahead and install this by saying poetry add just like flake hey this is going to be uh development dependency and then we are going to install the package precommit so hit enter installing and beautiful all right so now that we have it installed to verify that yes we do indeed just like our other tools we're going to go ahead and create a new configuration file dot pre commit hyphen config and this is going to be a yaml file so yaml and check it out all right schema validation Mr require repos all right what the heck is going on here so let's go ahead and get some sample data in here so our IDE stops yelling at us and the easiest way to do this is if we do poetry run and we're going to run a command from that package we just installed which is precommit and we're just going to say sample config so whenever you run this it just outputs this text right here which you can use as like a boilerplate and you saw whenever I posted that in then my IDE stopped yelling at me and actually I kind of hate how these dashes are here but anyways let's go ahead and figure out what the heck we just pasted in now at the top level we have something called repos and that's what we're going to be kind of posting in the first nested level right here is each individual repo so you know I thought we were like specifying these hooks in these different type of rules so what are all these repos doing why do we even care about them well check it out these repos if I pull one up these are basically where the hooks are going to live so precommit already has a bunch of standard hooks but let's say that you want to make your own or some other company that you're working for they have their own hooks so they're basically going to be various hooks scattered across a bunch of different repos so whenever you want to use a hook you first need to specify where the location is so what repo is it in so that's what that is and as you could see for these repos they usually have just on the read me a list of all the hooks that you can use but we'll get into that in just a bit so this second one this uh rev that just stands for the revision basically the version number and then this last uh setting right here hooks this is good stuff so these individual hooks are more or less the code checking scripts so what you want to do is you actually want to read through that repo and then read through all the hooks and see what ones you actually want to apply to your project and for this it's you know good for this example so we'll keep those and yeah that's the basic structure of this configuration file again we're going to be adding in a couple more repos and have a couple more hooks later on but for now what I want to show you is this so what we want to do is we want to run these checks right before or pretty much automatically whenever we Commit This to a git now in order to do this what we can do is say poetry run precommit install so what this is going to do is it's going to install all of these hooks right here pretty much to configure it where whenever we make a commit then these checks get ran automatically now that is pretty cool however sometimes what we also want to do is just run these manually so what we can do for that is for the precommit command we can just say run and what do we want to run it on we're just going to say all files so hit enter and it said we have a little issue here but the cool thing about this is let me just go ahead and run this again all right so check it out so this end of file fixer the first time that we ran it it said hey there was a warning however the cool thing about this tool is that it actually just fixed it for us so where was that issue uh it didn't even say what file was but um or was it in our getting more file yeah fixing get ignored and another thing that I want to mention is that this actually let me clear this out of the way so so you know how we ran that command and we said precommit run all files so this is kind of weird like isn't just the default just to scan all files anyways well the interesting thing about precommit is that typically what it does is it only runs against files that have changed according to git now this is you know efficient since you know you don't want to check the same files if nothing's changed but it's not always what we want if we want to force precommit to check all files then of course you are going to use this all files flag right here so with that being said let me go ahead and add in some more hooks right now and let me just go ahead and paste these in all right so check it out so if I clean this up a bit so this is all the same I also added in another repo now this repo right here uh Yap this is it's basically because code can conform to pep 8 but still not look that great so Yap is a tool to help with that and you can kind of imagine it where if you had the most OCD developer following the most strict style guide then this would kind of be the output of it and for this last one uh this flake 8 repo so this is pretty interesting so here we're saying that there are some flake 8 related rules that we want you to check and you see this additional dependency as well I didn't mention this but these additional dependencies we saw it with the F it depends on Tamil and uh with flake a as well these are just additional packages that the hook depends on so with flick 8 we have bug bear which is for some like possible bugs and designer related issues an example of this is using the accept keyword without specifying an exception type builtins this is to pretty much say don't use python builtins as function arguments this is for adding coding magic comment checks this is related to sorting and grouping Imports polyfill for backwards compatibility and quotes of course the ability to check for uh double quotes single quote to everyone configure it so again to reiterate the hooks are the actual rules or scripts for checking your code the repo is just where these hooks live at and although we set everything up to say yes these are the repos these are the hooks that we want there is sometimes additional configuration that we need for each of these individual tools now whenever we need to specify additional configuration we don't do it from this precommit config yaml file where we actually do it is this Pi Project Tamil pretty cool man so in essence precommit config yaml says what Hooks do we want to install and in Pi Project Tamil we configure them there so for example I know that we are going to need to configure this one uh this eye sort tool so for this what we need to do is type in tool Dot isort wow can I tell you today and uh yeah that's what I should rename the tool I can't type today and then for this is just where your configurations go um really just like your editor config in a way so I wonder if I got any autocomplete all right I'm just going to copy this in though so for the eyesore tool I'm going to say the multiline output is 5 and then I just need to give out line length and to configure that Yap f then I'm just going to say based on Google style some indentation rules and uh yeah either way uh the point of this isn't to go over each of my individual settings since this is really a lot of this is personal preference it's really just to demonstrate that whenever you have these additional tools and they require configuration then you can figure them in Pi Project Tamil kind of the same format that we've been following before so now that we have everything set up let me go ahead and just make sure everything is working and to do that what I first want to do is I want to go ahead and uninstall anything and then install it again and by the way I'm not uninstalling and then reinstalling the actual uh precommit package this is a precommit command that uninstalls or installs those individual hooks and I also want to just go ahead and after I have those installed manually run them of course if we make a commit to a git it's going to run it but I just want to just go ahead and run everything by default and check it out so a couple issues here where it says I need to change these to single quotes again this one can be a double quote because I actually have a single quote here that is not escaped and just go ahead and run this again all right beautiful now the last thing I want to mention is you see how we are now running flake 8. through uh this precommit well since we're just running it like this instead of you know running flake 8 directly what we can actually do is we can remove as a development dependency that flake 8 package so that's going to remove it is a too much stuff on my screen right here so that's going to remove it is a development dependency however check it out if we just go ahead and run precommit again you see that we still get this flake a logic and it's even pulling in those uh flake 8 settings as well so this is just a really cool way that you can unify a lot of different tools under the same like a single parent tool I guess you could say so now that we got the bulk of everything kind of configured up and running exactly how we want let's go ahead and now hop into our make file and start kind of making some make commands to avoid a lot of this repetitive terminal code so the first thing that I want to go ahead is make a new command and I'm just going to say install precommit all right so before I even start typing anything I just want to make sure that this is tagged phony as well and check it out so what this command is going to do is it's going to say type this it's let me find where it was here we go so you know whenever I uninstalled in the and then reinstalled all those hooks I want to do the exact same thing just in a shorter Command right here so I'm going to go ahead and uninstall and another interesting thing is that you know that I said that this actually I'll show you kind of the wrong way to do it and then I'll show you uh the Nuance of it so you know how I said that you basically have a rule or it's more or less like a function in that nested right here is your function body similar to python in a way so the issue with structuring it this way is that each of these sub commands is actually ran in its own shell and it's cool for a lot of things but some things can get a little tricky that way so if you want to ensure that both of these commands are running inside the same shell then what you can do is you can just add them on the same line by putting a semicolon after your first command and then your second Command right after so this is looking good for that command and now what I want to do is actually make a command for this which is actually running precommit against all of our files I want to explicitly say all the files and for this I'm just going to name this command linked so I'll say lint and I'm just going to tag it as phony and this was my command right here all right and then after this I also wanna update my update command so I have so I have installed migrate and then I want this one to install precommit and then let me just go ahead and test this out so make update so this is what developers are going to do whenever they you know pull something down and they need to update it like the first thing right after grabbing their coffee and now instead of running this big old poetry run precommit run all files we can just do makelint and looking beautiful all right so that is really the gist of it however Before I Let You Go I do want to show you one other thing and that is just that uh the kind of benefit of setting everything up this way that let's say that we want to go ahead and add a new hook and this is just what I pasted in right here um I don't want to get into this exact hook but uh just kind of simplify how easy it is to add just go ahead and paste it right in there and then after that to update everything we just need to do make update and again this is going to uninstall and then reinstall everything just to make sure that whenever we commit to get that this is ran as well and then to use it we can just do make lint and all right so we actually have a didn't even know I was going to pick up this error but need type annotations for this can't determine so we'll just put a star right in here so I know what type it is and all right so look at that that is how easy it is pretty much just that add new repos and hooks right in here then you do make update make a lit and you're good to go so yeah editor config flake 8 precommit I mean we are looking good this uh code base is you know very appreciative it's all nice and clean now so yeah uh it's really all we had to go over in this video in the next video not even sure we're going to be doing maybe getting into some logging and uh yeah whatever it's going to be about it's probably going to be awesome so anyways thank you for watching and I'll see you then