what's going on guys welcome to your 45th C++ tutorial and in this tutorial I'm going to be talking to you guys about member initializers now I don't even know if I told you guys this but a member is pretty much a fancy term for anything in your class so when some people talk about variables they call them members it's basically anything in your class is a member of that class so let's go ahead and let me explain this we're gonna probably have a bunch of variables in our class some of them are just going to be regular variables and some of them are going to be constant variables so we know constant variables have a couple of weird rules and creating them is one of the weird rules so remember a constant variable is basically a variable that we can't change and we also have to initialize it using a special uh it's a special syntax it's called member syntax now the cool thing is we can also initialize regular variables this way but you don't have that option of when using constant variables you have the option of um initializing regular variables this way or the way we learned before but constant variables definitely need to be initialized using member syntax so let's go ahead and first thing let's go ahead and make two private variables I'm going to make one just regular variable this going be integer variable reg VAR stands for regular variable and I'm going to make another constant variable so constant um just make this one Inger as well and we'll name this one const VAR so now we have just a regular Dum variable and a constant variable so now what I want to do is whenever we first create our object let's go ahead and assign a value to this variable and assign a value to this variable so our Constructor is going to take two parameters one value for this one and one value for this one so go ahead and just type N A and N B and we'll be tossing numbers in there later on but now that we have values assigned to these VAR ibles we're going to need a way to print it out on the screen so go ahead and we'll make a function called print simple enough so now we have a Constructor that takes two values assigns one to our regular variable one to our constant variable and then we'll print it out on the screen so now we probably need to change our Constructor around a bit the first thing we need to make a do is take those two parameters in a and in B now you're saying all right I probably go ahead and in the body somewhere in here I'm going to type all that syntax that special syntax we've been talking about but check it out you actually don't write anything in the body yeah think about that for a second it'll freak you out you actually don't write any of your code when initializing variables in the body so you're saying where the heck do you put it and this is the weirdest place you put it in between the parameter list and the beginning of the body so between the parentheses and the curly brace this is where you're going to put it so that's what confused uses the most people and that's why they have a hard time understanding because usually nothing goes here but that's where we're going to be putting the syntax why they made it go here I don't know and the Syntax for it was this the first thing we need is a colon and the colon tells C++ that we're going to be working with member initializer syntax now it's actually quite simple all you need to do is write your variable name such as regvar and inside parentheses you give it an initial value which this one we're going to be passing it in a now whenever you have multiple variables you want to set equal to you know the initial value you just separate them with the comma it's basically just like a list so our next variable is const uh what is it const variable and this one is going to be equal to B and what people sometimes like to do is put their variables on new lines but it really doesn't matter and another thing make sure that you don't put a semicolon at the end of this these aren't statements it's just a list it knows when you're done because the body is going to begin so basically start with a colon and make a list using this syntax variable value if you have another one separate with comma variable value so I know it's a really weird syntax but what this is going to do is we're going to be creating a Constructor that takes two values and it's going to be setting them equal to a regular variable and a constant variable and like I said before whenever you have a constant variable in your class this is how you need to do it of course we can set this variable equal to you know initialize it like we had before but you know we might as well use this list since we're you know learning this tutorial so now let's just go ahead and make another function void print just to print this stuff out on the screen so void okay there void Sally print and all this is going to do is be like C out regular V is and then just put reg VAR and then put constant variable is colon constar just like that and now let's go ahead and end that line and you guys can't even see yeah you guys still can't see there we go inlined definitely spell that wrong and that line so now it's going to print out our regular variable is 10 and our constant variable is 20 or something stupid like that as long as I spelled this right let me just double check all right we should be good to go so now all we need to do is create an object in our main so let's go ahead and create a Sally object just name it so and remember this is a Constructor so it's going to take two parameters just make like three and 87 two random numbers just make sure they're integers and now as soon as we created that Constructor it's going to take three and assign it to our regular variable and it's going to take 87 and assign it to our constant variable so now regvar equals 3 constar equals 87 so now when we call that print method and let me just I don't like typing stuff on the first line for some reason um s o. print it should print that out unless I forgot a semicolon or something so let's go ahead and see and check it out regular variable is three constant variable is 87 H nice spelling right there that actually does spell variabel well I close enough so anyways one last time here is what we did we had a constant variable in our class this pesky little thing right here so whenever we have a constant variable in our class we can't initialize it like before we need to initialize it in a special way and that's through the use of member ini initializers whenever you want to create a member initializer list and basically this is just a fancy term for setting your variables equal to values you need to make a list in between your parameters and the body of your Constructor and make sure whenever you're making that list to start with a colon that tells C++ you're going to start making a member list and just use this syntax and don't forget to separate each variable with a comma and then of course whenever you create your object you need need to pass it in the two parameters it needed because right here it said it asked for two parameters and then later on we can just use those variables and any old function just the print amount like regular variables blank constant variables blank and then actually I'm getting kind of Sidetrack you guys know how this uh function works but actually I want to ask you guys this now that I'm thinking about it is there a way to uh like word WP because like whenever I'm working with this you see I was going off the screen um let me know if there's a way to automatically word w so you guys well I guess I'll just scroll from now on I don't like my lines of code on new lines anyway so uh forget that like last 30 seconds of this tutorial but anyways now that you guys know how member initializers work um yeah I'm just going to quit this tutorial now so thank you guys for watching don't forget to subscribe and I'll see you guys in next video