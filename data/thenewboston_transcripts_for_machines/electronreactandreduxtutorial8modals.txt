all right so now that we got Redux up and running what we can do is start going through each of these components starting from the top and pretty much just making them work plugging them into Redux making all the buttons and everything functional reading in the right data so on and so forth now before we actually get to that I did see that I had a one warning in the console and that is because I forgot to include let's see in the history uh T head I need to wrap all these th is in a t r a table row and then hopefully that'll get rid of that issue but now that that little minor issue is taken care of I'm going to pop back open Redux and we'll start with these top components up here like I said so what I'm going to do and I'll show you what the top card is right now so for each of these top cards we just hard coded it in the word network for the heading and then we also hard coded in the element that we're passing in which is this space items element which is basically this logo and pencil right here so I want to update the component now so we can pass in whatever string that we want for a heading and also I'm gonna have it so we can pass in any node for this bottom content right here because most of the time it's going to be the spaced items but whenever we first boot up the app you see in the manager we don't have any account or any network right now so whenever we don't have anything selected I just want to have a button that appears here that says something like select the account or select a network and then whenever you click that button the modal is going to pop up and we still have to build that too and well that's going to allow you to actually select whatever you're trying to select so the first thing I want to do is actually just rewrite some of this top card logic so let me go ahead and make my interface first so for the props I want to export interface and whenever I'm defining the props for these components I follow the name and Convention of the component name and then perhaps all right so we're going to be passing in two props to this component and by the way to actually use these props after sfc you just need to put the prop type and that's going to be top card props but either way the first thing that we're going to be passing in is a heading and that's going to be a string so I'll say heading string and then to actually use it in your component we can destructure it right here and then we'll replace this hardcoded network with whatever we passed in for a heading and then we want to do the same thing because we're going to pass in one more prop which actually pass it in as a child so children and let me go ahead and import this so for the content body right here well I have an error right now but um for this right here we're just going to be passing in either a button or the spaced items so we need to import from react the element to react node all right so whenever you use this component give me a string for the heading and then give me any react node and I will display that right in this content section right here all right now let me just pretty this up in with that we can now test it in this top component so uc's top component is uh complaining a little bit right now because we're not passing in those props that we just defined so just to test things out we'll copy the spaced item it's based item all right so what we'll do is we'll have the account section on the left so we'll say for this top card The Heading is going to be equal to account and this is going to be a button by default but since we don't have that button written yet I'm just going to use space items and check it out so this next one is going to be Network so all right so we are now rendering the space items correctly account and network and now that we saw that we can pass in a valid react node what I want to do is go ahead and create that button object so we can actually pop open the model so for this let me actually clean some of this up all right I'm gonna pop open my Styles file and I actually wrote this earlier I think what I'm gonna do now is kind of um have the CSS prewritten because I want this tutorial series to be more about like tnb OS and react and electron however I feel like I'm spending a little bit too much time on the CSS so if there's ever any new Concepts that we're going to cover related to style components I'll make sure to take the time and cover those however just for you know like basic button styling or div styling or whatever I'll just have it all prewritten so anyways this button right here just to read through it real quick it's just going to be a button with basically no background it's going to be pretty much gray and it's going to take up the full width of the container and then I added a little hover State as well but anyways that is our button you'll see in just a second now what I'm going to do is like I said the logic is going to be for this account content right here if you have an active account then we're going to display the account information and it's going to look pretty similar to this now if this is null which it is right now then we're going to display the button now I can probably just write this logic right in here but I like to split it out into a separate function since it has some uh I don't know it's not just like a a simple expression it's going to be a little bit more involved so I'm going to make a function called render account content and then this the logic is basically oh you know what actually let me just go ahead and return that button right now so s dot button and I'll say select account and I'll show you what the button looks like and then we'll go ahead and add in that logic to say if you have an account display this if you don't display that so on and so forth so for the account content instead of spaced items I'm going to be passing in this and ra so this is our button this is what it looks like and now let me go ahead and add that conditional and again that conditional is going to check in Redux to see what the value of this active account number is so as the next step we need to figure out how to read in data from Redux into our component so to do that we are going to make a new directory in speed test and I'm going to call it selectors and since this selector or we're actually going to make a few of them but since these primary selectors are just going to be working with that Redux State I'll just go ahead and name this State and I'm gonna write all my Redux selectors right in here and before we write any selectors what I want to do is I want to import from system types the root State it's actually let me show you this so this is basically the root state of our entire store and I'm not just talking about the speed test uh chunk that we created but the entire like tnb OS Redux store so once we have that to create a selector we're just going to make a const and I will name this get active account number and this is going to be equal to a function that takes the state not Vista state it's going to take in the state and just to type it out the shape of that is going to be root State and remember from our typing if we go to the manager the valid values for active account number are string or null so whenever we use this selector that's the value that we're going to be returning and now and as a return value we just need to say where it is and that is state.speaktest dot manager.active account number and let me actually go ahead and write the other selectors that we're going to need right now even though we won't be needing them immediately but in addition to getting the active account number I also want to get the Active network ID so get Active network ID again same type string or no and instead of plucking off the active account number we're just going to pluck off the Active network ID and aside from that we also want to create a selector to get these runs right here we'll just uh pluck off and get the entire dict and because I want to type that out what I want to do is apps speed tests types we'll just import runs from here and all right so we'll say get runs now what was the shape of that flow if we check in our runs just this runsdict and Speedtest Dot runs all right so we now have three selectors written one to get the active account number and then the Active network ID and then the runs from Redux now in order to use these let me clean up some of this close tabs to the right in our component the first thing that we need to do is we need to import use selector from react Redux and then once we have that imported I'm going to make another actually which is caught with the same thing I'm going to make a local constant called active account number and this is going to be equal to U selector and what we pass in here is that selector that we just wrote so get active account number and again this file is selector state report get active account number from apps speed test collectors state and then pass this right into your selector and now in your component this active account number is always going to be equal to whatever the account number is or active account number that we have stored in our Redux sort so now that we have that we can write logic that looks like this whenever we are deciding what to render right here what we can say is if we don't have any active account number which we don't have right now it's set to null then what we want to do is we just want to return this button that says select an account and it's going to pop open a modal allows us to select it otherwise what we'll do is we'll we'll rewrite this later on but for the time being we're just going to return space items by default since when we have an account selected that's what it's going to look like and you see that whenever I updated that this UI didn't change because in that is correct because we do not have this active account number all right pretty cool so now let's go ahead and get started on our modal component and this modal component is going to be used whenever we click this button select the count and this button that we can't see yet but it's going to say select Network and it's going to be similar to the model I wrote in the chat system and I'll give you a little preview right here so we're going to click a button and then we of course have a pretty standard modal it has a heading and a close Button as kind of the top section and of course you can close it to close it now in addition to just this div floating in the center of the screen I also wrote this overlay which is kind of like dims the background and it's just another way to close this model as well if you click anywhere outside the model on the overlay I just thought it was a cool ux um I don't know kind of intuitive click outside the model it closes as well so we're going to be going for that same style so we'll make it basically like this we'll have an empty container where we can pass in a heading and just like that top card I want to be able to pass in any content right here so for the account modal we'll just be passing in the list of account cards and for the network model we'll just be passing in a list of network cards and I like doing it that way in general My Philosophy with modals is to keep them is unopinionated as possible a lot of people have like forms in them in their modals quite often and they tie a bunch of form logic in there but I found that if you try to keep that logic in the child component or the component being passed in then it just makes everything a lot easier so I'll show you exactly what I'm talking about right now now in components let me go ahead and remove some of this first all right create a new directory called modal and let me do all my standard stuff create an empty template and an empty Styles file and just rename this to modal beautiful now let's go ahead and Define what props we're going to be passing in so export interface modal props and again to use those right like this and okay so for the header we're going to be passing in a string and we also need to pass in a closed function and this is going to be returning void and aside from that let me see if I can just steal it from my top card we're also going to be passing in our react node and let's follow that same pattern and pass in the content as children so whatever we pass in as children this is going to be the modal body more or less and now let me just go ahead and make sure we're passing everything in and the header okay now instead of just returning a basic HTML element or a component like we have been what we need to do is we actually need to use a portal and for those who aren't familiar with portals I'll show you actually let me show you this all right so in my main template this root element right here is where I'm rendering basically the entire react app now I also have this element right here called a modal root what we're going to be doing is creating something called a portal and this is just going to allow us to render some element or really any valid react outside of this Dom hierarchy so instead of rendering inside root we're just going to render on re or excuse me modal root and that's going to allow us to basically have that functionality where we have this entire overlay in modal appearing on top of all these other components so how do we do that well the first thing we need to do is import the create portal function from reacts Dom and that is called create portal now instead of returning this container we are instead going to return a portal and this function is going to take two params the first one is the react code or elements that we want to render and the second one is where do we want to render it now for the react code what I'm going to do is actually use a fragment because I'm basically going to have something like this I'm gonna have my overlay rendering right here and then here is where I'm going to render the modal and that is just going to give us that you know black dimmed background with that HTML element appearing on top of it but anyways this is the basic structure for the first param of what we want to render now the second one if we see I'll show you this so we're going to render it right here and this is a div with the ID modal root now in order to kind of reference this from react what we can do is we can say document Dot get element by ID and again that was modal root and another thing that I'm going to put is this just to make typescript happy this exclamation mark and this is because oh I'll show you the exact error it says that argument of type HTML element is not assigned to this basically saying that whenever you create a portal you have to have an element and we don't know if this element actually exists on the Dom or not now because I know definitively that it exists because I hard coded in myself and it's not like conditional it's just always there that's how I can safely put this exclamation mark to tell typescript yes it's definitely in there don't worry about it being null or unfun or anything like that so now let's go ahead and start styling this thing and instead of container I'm going to call it modal and let me go ahead and add some generic styling off the bat so we're going to give it like pretty much the same color background is the um the app itself and also another thing that I want to do is I want to say that the position is fixed and the reason for this is because I want to make sure that this is going to be displayed in the very center of the screen so in order to Center this div in the center what I'm going to do is say left 50 and I'm also going to say top 50 now what this is going to do if we just render this is It's Gonna um basically make it so the top left corner is in the middle of the screen but I want the entire container to be in the middle of the screen so you know the center of the div is in the center of the screen so just to get that logic what I'm going to do is transform and I'll translate by negative 50 negative 50 percent and this is going to make sure that that entire div right here is perfectly aligned in the center of the screen good to go now another thing that I want to do is style my icon because remember we have that X in the heading section on the top right so just to add some styling to that I already have this written again this is the same is the pencil icon where it has a color and then when you hover over it then it has just a little a little change in the background and color just to give the user an indicator that they are hovering over something and maybe I will give a cursor pointer to this so This icon is going to appear in this header section so actually let me uh type the rest of this out so again our header is at the top and on the left hand side it's going to have that text and on the right hand side it's going to have that icon so that's why I made it display Flex justify content space between and just add some padding so everything isn't bumped up right against the edges and then Under The Heading we're going to have this content section so anything that we throw in there for children it's going to have padding is 16 and again this is just to make sure that those cards don't bump up right against the edge looks a little bit better and let actually let me go ahead and uh put all this on the screen and then we'll make our overlay so again the parent component for all of that stuff that we just wrote is s dot modal and what I can also do is I'm going to be passing in this class name from styled components right in this modal and then inside the modal we're just going to have the header and then the content so s dot header and I'll just make a span and inside this span is where we are going to render whatever string we passed in for the header now remember this header right here is a flex element so since we have Justified content space between this header is going to appear to the left and then whatever we write right here is going to appear to the right and for that we want this icon appearing so s dot icon and I'm also going to need to import that close button so from mdi.js that close button icon is actually what is it MDI close there we go all right so as a prop I want to say that the icon is equal to MDI close and then another thing that we want to do is we want to have this on click Handler be equal to this close functionality that we're going to be passing in again we didn't write this function in the parent component yet but we will in just a sec and now this also takes a size prop so I'll say 16 pixels see how that looks and another thing that I want to do is I want to pass in this unfocusable and this is just for styling issues where if we have it focusable then like the blue ring appears around it and it looks a little bit weird so anyways this is how we have our header structured now the only other thing we have to do for now is say content section which is just the basically the body of the modal all we need to do for this is say whatever children element that we pass in render it right in the content just like that so this is all good for our modal styling however we still need to style that overlay let me just steal this alright so for that overlay or that black background I'm just going to call it overlay and what I'm going to do is I'm going to give it a height of 100 vertical height which means just take up the entire height of the screen and same thing for width except you do 100 VW for vertical width and then just to make sure everything is positioned correctly for left zero and then for the top it's also zero and let's just make sure that the top left corner of this element is in the top left of the screen and I also am going to do position fixed so I can go like eyelash in my eye position fixed there we go now this is gonna work fine for an overlay however just to make it a little bit more fancy instead of whenever we click the button the model pops up and it has this dim black background I want this overlay to kind of fade in so in order to do that we can learn a new trick from style components and that is a keyframes method so keyframes and again all this is its uh helper method from styled components that allows us to add keyframes for an animation so what we can do to use it is do something like do this create a constant called add overlay and set it equal to keyframes now inside the ticks you pretty much Define how you want to transition this animation so we'll say from and for the background we will just do actually let's do rgba zero zero zero zero so we're going to transition from a completely opaque shade of black to a slightly transparent shade of black because we want to still be able to see the background what's going on so we can adjust this opacity if it's too dark or too light later on actually this is supposed to be two from two okay so these are our keyframes now how do we use this as an animation well in our overlay div right here for the animation property we can use that dollar sign curly brace syntax and throw in our overlay which are our keyframes animation right here and now for this we still need to find how long we want the animation to take and we'll say 0.3 seconds and we also need to Define how we want the animation to run and we'll just say forwards so this is going to give us our three second black fading property and to actually use this make sure I got the right thing so this overlay div is going to appear as a sibling element to modal so s dot overlay and then we just need to pass in the on click Handler on this as well because remember we have two different ways to close this modal once it's open we can either click the close icon or click anywhere on that overlay and that's going to close it as well all right I think all of our modeling style is uh good to go so is next steps now that we have our generic modal in other words we just have an element that pops open in the middle of the screen and we can pass in a heading and you can click close to close it what I'm going to do next is create another directory called modals because I want to start working on our two use cases for that modal and that is the account model and network modal so again one of these is for whenever you click this button and that modal is going to pop open with a list of accounts and the other one will list the networks so let me go ahead and make that account modal first so under modals what I'll do is create another directory called accounts modal and this is just same thing as I always do components and styles let me get this organized all right so the account model I'm just going to name it to account model and then let me go ahead and just find my props as well my IDE so laggies you know what's weird every time I uh make an interface for props my IDE starts to lag I don't know it's uh exhausting okay so the props that we're going to be using for the account modal are actually let's just go ahead and use this close functionality because we're going to need to pass this through to the actual modal right here however I don't want to import the modal right in this component because I want to apply some additional styling to it so instead of just treating it as a normal component we'll import it as a uh well pretty much be able to work with it using our styled components so what I'm going to do is I'm going to import I think that's default so import U or unstyled modal from and what location was that apps speed test components modal all right so now that we have our unstyled modal we are going to make a styled version of that and how do we want to update the styling well let's just say that we want to display Flex because remember in this account model we're going to have a list of cards so we want to just make sure that those all appear in a column so I'm going to do display flex and then Flex Direction column and you can also give it a specific width and height because I don't believe in our modal styling yeah we don't have any explicit width and height right here so whenever we import it and add our custom styling we can just add uh whatever width and height we want depending on our use case so I'll say a Max width for this and this is probably going to need to be tweaked later but I'll say 400 and a Min width of I don't know 360 380 whatever all right so we have our modal styled for our use case and then to use it we can just do this s dot modal now of course we need to pass in the class name also this close function which we didn't write yet but we're also going to be passing this through to modal and then this modal is going to take a header property as well and for the header you can actually just hard code this in so select account and I'm getting a typing issue because I forgot to Define my preps right here and all right now another thing that I want to kind of point out and this is kind of a tricky bug but I figured I'd show you that if you ever forget to export this interface then whenever you try to import it and using your styled components you may see this error right here it says exported variable modal uh pretty much is something like this and it's kind of uh difficult to understand this error so even though we didn't come across this I just wanted to point it out because it's something that I used to do quite commonly so uh you know maybe save you some headache and anyways for this account modal even though we didn't write these account cards yet I'll just say account cards here so we can actually see where they're going to appear so now that we have our modal components written looking good we'll hop back into this top section and figure out how to actually open this modal so what I'm going to do is first import it and I'm gonna import the account modal from apps speed test modals account model and another thing that I want to do is I want to import a custom hook that we have called a use toggle and that is from system hooks and all this Hook is going to do as you're going to see in a second actually it's probably easier if I just write it so let me go ahead and create const and this is going to be equal to use toggle and I'm going to initialize it to false so all this Hook is going to do is you're going to initialize it to a value and then whenever you call the calling function on it it's going to switch the value so if it's false it's going to turn it to true true then you turn it to false and yeah it's uh pretty selfexplanatory by the name but for the variable that's going to store the value I I will say accounts model is open and for the function to toggle it we'll just say toggle account modal so now what I want to do is I want to create another render function right here I'll say render account modal and for this logic I will say if the account modal is not open then this function is just going to return null however if it is open oops accidentally uh cut that instead of copied it now if it is open then what we're going to do is we're just going to return that account modal and we also passed in this uh close function and this close function is just going to be this toggle function right here so for rendering this account modal we are actually going to render it as a sibling to this container so in order to do that let me go ahead and create a fragment and of course we are always going to render this container which is that those top card elements and now under here we'll say render account modal and this will render again like we see right here the account modal if this variable is true otherwise by default it's false that means not rendered and now is the last step I believe the only other thing that we need to do is we need to add that on click Handler to this button element so all right on click toggle account modal all right so let me go ahead and I might have to restart yeah sometimes if you uh write too many components or make too many changes then you actually have to uh restart hot reload won't work all right so check it out so we have our button and now when we click our button we can see that our modal appears and if everything worked correctly we can close this modal either by clicking on this x icon or clicking anywhere on the overlay and all right looks like everything is uh working correctly right now so again just uh do a quick mini recap whenever we are deciding what to render for this account element right here we're going to say well first of all it's this function right here render account content and we're going to say if you don't have any active account number then go ahead and render this button and since we don't that's why we rendered the button right there the button has an on click Handler to set this value right here account model is open so it's going to turn false to true and then since this account modal is now true instead of null which is this state right here it's going to be equal to true and therefore render this account modal now to close that account modal again all we need to do is we need to change this state from True to false so for that function we're just going to pass it through to the account modal and then the account model is going to pass it through to this modal right here and it's going to be passed through as this close prop and again that's going to be on both the overlay and also on that icon so you have two different ways to close the modal so yeah I think that's uh pretty good for now and for this Network model it's pretty much going to follow the same exact pattern however before I get started on the network model what I want to do is kind of just finish up all of this account logic including these account select cards and actually updating Redux whenever we select one and then once I have all of this working up and running the network model and all the related components are going to be a piece of cake but for this video that's probably good getting a little long so yeah thanks for watching and I will see y'all next time