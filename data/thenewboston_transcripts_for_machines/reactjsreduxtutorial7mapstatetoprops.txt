all right check this out sourkraut so what we did up to this point is we created our main data storage and we passed it to our application so now we can really use it in any component that we want now I really don't want to use it in our main layout because again this isn't really supposed to be smart it's just supposed to be kind of a way to lay out all your other child components so what I'm going to do now is I'm going to actually create a component that can accept that main store that main application data so this is the thing we know that our data up here are storage and we know that we can create components to use them but they have to go through this thing called a container so that looks like a pain in the butt right Believe It or Not containers are incredibly easy all they are is about two functions to say okay this is your data that's the compon component and this is how they're connected super easy but there's actually a lot of debate on how these should be kind of properly set up whenever you work with react and Redux now what some people like to do is they like to make a directory called components and have all of their kind of presentational components in here not a lot of brains so then what they do is they make another directory fa for containers and remember containers are really just the glue to buy your store and your components together so they make another directory for those however what other people do and this is kind of the other half of the fence is they combine these components in containers into one file so they're kind of the same thing so even though I may not agree with this for teaching it I think it's really easy if they're just both in one file because then you can see everything that's going on at once so that's what I'm going to do so for right now think of it like this whenever I say component I just mean basically a dumb component a part of your website that doesn't have any brains whatsoever whenever I say container I mean basically a component that's hooked up to your data storage that's it so let me go ahead and make a new directory called containers and again containers are going to look like 99% like components but uh yeah there you go so for this one I'm just going to name it uh I don't know user list so let me make a new list JS and me see what I can steal so what do I need I need a react component all right so of course we need a react and I also need component because I'm going to be treating this class as a component now a couple other things I need in order to make a container is first of all something called bu action creators and I'm going to be explaining all of this in just a second but again bind action creators and this is coming from Redux and one other thing is connect and I'm sure you can probably guess what this is already so connect from react Redux there we go all right so now you pretty much just set this up like a plain old generic component so class you say user list and in order to make it a component whenever you use uh modules or this kind of build environment is you just extends component now inside here just like any component all it is is pretty much a way that we can return some HTML so we just want to render out and return any HTML that we want now eventually what this is going to be is it's actually going to get a list of users but for right now what am I going to do all right let's do this keep things real easy and just put like one two and three now once this is hooked up I'll change this but for right now I just want to show you guys that this is indeed working correctly all right so whenever you make a component you need to render or display some HTML and you can have an image in here a heading whatever but for right now this looks pretty good so now what I need to do is just export this so I'm just going to write export default user list and there you go so over in my app in order to actually import this I'll just say import user list from containers user list right there and now anytime I want to use this you just refer to the class name and pretty much like making your own custom tags and I just need a selfclosing tag so boom there you go now if this thing builds again all right so there we go so basically we didn't even do anything container related yet this is just a normal react component um all we did is we made a class extends component so it actually is a component and then we returned some basic HTML all right so nothing that we haven't learned in the beginner react tutorials so now what we need to do is we need to figure out how to take this component and hook it up to our data store right here so how do we do that well we need to convert it to a container so all right how the heck do we do that well I'm guessing that we use some of the stuff that we imported right here so under your class right here go ahead and add room for one more function and that's this I guess going to write the word first the function is called map states to Pro s now this is a function that confuses so many people and it's not your fault it's because every single resource online every single bit of documentation it's like they're trying to make this as hard to understand as humanly possible but this is actually one of the easiest functions in the world all this does is it takes a piece of your application store your application State the main data and it passes it into your component I can't say component today it passes it in to your component how does it pass it in there as a property that's all it does and they can pass whatever pieces of the store in that it wants to so we're just going to go ahead and return and again we want to take the users that we made earlier and we want to pass it in there so what do we do well we're going to make a property called users and it's going to be equal to the state users that's it that's all we do so again all map state to props does is it takes a piece of state which is just part of your store and it sends it into your component as props that's it so does that mean that in our component what we can do is we can just say this. props do users and it's equal to the users for our entire application yes that's exactly what it means how awesome is that now there is one other thing that we need to do and that's this and this is actually really easy U let me just cut this in order to actually use or call this function we just need to call connect so connect takes map state to props what we just made and then after we need to say users list so again whenever you just say users list right here we're just exporting the default dumb component the component that doesn't know anything about the main application data whenever we export the user list but we connect it to map State the props now what we're doing is we're taking that component we're making it aware of your application's store or user data and then that's what we are exporting so now this is pretty much a smart component or a container so again you know what I was saying earlier that some people like to make this all in one file like I just did and other people's uh or other people like to kind of take this part which is your container glue of it and break it up separate from this it really doesn't matter it's up to you but uh yeah there you go