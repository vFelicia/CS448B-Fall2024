what's going on guys it's Bucky and welcome to your 59th C++ tutorial and in this tutorial I'm going to be teaching you guys how to use function templates but instead of just a single parameter like last time we're going to be using a multiple parameter so let me go ahead and explain you guys what the heck I'm talking about first you know in the last story I taught you guys how to build basically a generic function to add like two integers together or to add two doubles together well in this tutorial we're going to be able to work with two different data types for example we're going to be able to take an integer and double and add those together or maybe you know a long and an integer and add those together so they don't have to be the same data type all the parameters we pass in we can work with two different types of data in the same function so we're going to set this up a little bit different then we have before so let's go ahead and first get two different types of data to work with so let's go ahead and make an integer variable X and set this equal to 89 or any integer you want and go ahead and make another you know double variable it really doesn't matter the data type as long as they're different so pass it in a double Y and set this equal to you know some fifty six point seven eight or something like that so now what we're going to be doing is we're going to be building a function to compare these two numbers and just return whatever number is smaller so in this case it would return fifty six point seven eight so let's go ahead and pass in those two numbers X and Y and hopefully if we build our function correctly it will print out the smaller number right on the screen so let's go ahead and set up this function template right now so like before whenever we're building a function template we always need the keyword template but we need to spell it correctly template just like that and now unlike before where we just had one generic class and we named it Buckey or something we're going to be working with more than one generic class so make sure you name your classes something that you know you can work with later on I like to just name mine first and second and by the way I might as well mention this to you guys you guys are going to see this a lot like cap t in capital u it's like kind of a programming standard to use one capital letter whenever you're making a template class but I really don't like doing that I like you know something a little more descriptive like first and class second um you know if you're in like a programming class or you're watching this because you forgot how to do this for your job or something you typically want to use one capital letter but whenever I'm programming you're just gonna have to deal with it so now that we have a template this line is pretty much saying this we're going to be working with two data types but we don't know what those data types are yet so we're going to be giving them generic names so first and second so whenever we're building our function you first write the return type which is first and now our function name was smaller and it took two parameters one number and we'll call this one a and another number and recall this one B in all our function itself does is hello and all our function does is it takes two numbers and returns whatever one's smaller and we can do that by writing one nifty line of code if a is less than B then return a if not return B so it's going to be saying all right is a less than B if it is return a if it's not return B so it's basically going to return to you the smaller number so now let's go ahead and now that our function is working properly let's go ahead and test this and make sure it works as you can see we compared eighty nine and fifty six point seven eight and it turned that double 56.7 a into an integer and you're saying all right we just compared two numbers so shouldn't be giving us um just 56 point seven eight why did it chop off to seven eight that's because of this whenever we built our function template it pretty much saw what type of data we were passing in so we're saying alright we want to get the smaller of two numbers we want to first pass you in an integer 89 and then a double 56 point seven eight so I said all right make first in anywhere you see first change it to an integer so it said re I'm going to change this to int this to double I'm going to return an int because that was the first thing we passed then so since this return type was the first type of data we passed in it converted this double to an integer because remember anytime you saw first it converted it to an int we could have change this around we could have you know passed this one in first so it was Y X and whenever we did that we would get 56 point seven eight in that way we could have more precise because in this case scenario the first thing we'd pass then is a double and the second number we pass then was an int so whenever it's looking at your template wherever it sees first it's going to replace it with double and that includes the return type right here in the first parameter and the second parameter would of course be an integer so it will take a double and an integer and since it returned a double that's why we got back the double so basically what I'm saying is this whenever we're working with two different types of data you need more than one generic classes or pretty much placeholders basically a generic or excuse me basically um a generic class is just a variable for the type of data instead of the value itself does that make sense to you guys so instead of having a variable for this you have a variable for this simple enough and these variables can only be types of data like int double long yada yada yada so basically people usually build these templates to work with um you usually don't see more than three or four it's usually one or two but yeah that's basically how it works anytime you want to build a function template that takes more than one type of data you need to separate them into more than one generic classes and then you can use those generic classes just like you would any other type of data so hopefully you guys understand what that means arm again if this is just too confusing and you don't want to keep track you can go ahead and build a lot of overloaded functions and it's going to work you know just fine but if you want to use this it's going to save you a little bit of coding and you know it's a little more confusing to look at but once you got it down you know it makes your life a whole lot easier so thank you guys for watching I don't forget to subscribe if you have any questions just ask me on my forum and I'll try to answer them for you guys sometimes I'm busy but I can usually answer them for you guys so thank you guys for watching and we can subscribe and I'll see you guys in the next video