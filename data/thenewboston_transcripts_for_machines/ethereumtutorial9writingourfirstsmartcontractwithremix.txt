alrighty i'll welcome back to another video and in this one we are going to be covering remix so to see this tool go to remix.etherium.org and all right so once you go there you're going to be greeted with a screen that looks like this so first of all what is remix so remix is an inbrowser ide for writing smart contracts so if you just want to jump into writing smart contracts play around with some things but you don't want to download and install some you know beefy bulky piece of software then this is the tool that you can use now with that said i'm not going to recommend this tool for developing production grade dapps this is more you can think of it almost like a playground it's a useful tool whenever you're working on simple smart contracts or smaller projects but like i said probably wouldn't want to stick with it for production grade apps for that type of environment we're actually going to be getting into that in the next video but for now i just wanted to go over this tool it's a very handy tool so let's go ahead and jump right into it now on the left right here you're going to notice workspaces now you can think of a workspace essentially as a project in remix so actually we can go ahead and create a new workspace now and whenever we do we can see that it pops up right here is the new item in the menu and this menu right here is just how you switch between your workspaces pretty simple so a new workspace is going to come with a very basic project structure and that includes your contracts directory and inside here are your solidity contracts and we're going to be writing one of these in just a few minutes under that you have your scripts these are your javascript files and then under that you have your tests and this test right here is testing one of the solidity contracts and last but not least you have a readme which is essentially just a readme overview description for the project now in order to best understand these other sections of this ide is probably useful if we do have a simple solidity contract so let's go ahead and create one right now so to create one if you just click on this contracts directory and you right click you can click new file and i'm just going to name this bucky dot sol and the name doesn't really matter well it does in a lot of cases but for this example it doesn't really matter sol just means that it's a solidity file in other words uh smart contract you can think of it like that and all right let me actually boost this up so you can see and if you click this button on the left you can actually just toggle this left menu alright so we are finally ready to start writing our first smart contract where do we begin so the very first line in your smart contract actually let me ask do you hear that noise it's like marbles running down my wall that's a weird noise anyways uh okay spdx and then you want license identifier mit okay so the first line here is actually a comment it's spdx license identifier mit what does this mean this is just an open standard stating that this source code is mit licensed and this is actually recommended to include in all of your solidity files and right under this let's go ahead and write pragma solidity 0.8 okay so what is pragma solidity greater or equal to 0.8.7 mean so this is just indicating what version of solidity we're using and by that i mean the solidity language and not only the language itself but the related compiler to compile this source code down into bytecode changes over time and that's just because well really with any programming language as new features are introduced and you know maybe syntax changes that the language naturally changes so this is really just saying that we're going to be using this version of solidity so we need to make sure when we compile this down that the compiler supports this version of solidity as well so now let's hop into the good stuff and that is actually writing our contract so to begin a smart contract you begin with a name contract and then you can actually name it really anything you want some limitations of course uh no weird characters or anything like that but the name of course should be descriptive of what the contract is and just as a quick overview in terms of uh kind of porting this over to some programming concepts when you think of a contract in solidity you can think of it similar to a class in an objectoriented language so this contract similar to a class is going to contain variables and functions so on and so forth now whenever we deploy this contract to the network what you can think of that process as is creating an instance of this class so essentially we are going to be creating an instance of bucky and pushing it up to the ethereum network and that is essentially going to be our smart contract so if all that's a little hazy don't worry about it right now it's going to make sense whenever we actually deploy it and interact with it a few times it's going to click pretty clearly what's going on so now let's go ahead and talk about what the smart contract is going to do so we just want to stick with the bare bones simple example so we'll just say that there's going to be one variable in here and that's called age and the only real thing that this smart contract is going to do is it's going to store my age on the ethereum network i'm i'm not sure why anyone would ever use the smart contract but uh that's what it's going to do so the first thing that we need is to create a variable to actually store that value so there are different data types i actually have a link right here let me pop it up so there are different data types that you can use in solidity we're going to be kind of tackling these one by one but a lot of them are pretty simple booleans integers uh we are going to be using a uint which is pretty much just an unassigned integer or nonnegative integer however there are some unique data types as well so not just you know your ins your strings so on and so forth but this is a unique one where it's address and of course this is made to store an ethereum address and we're not going to be going over all of these i just want to point out that if you do want to see the different data types then you can type in solidity data types and something like this is going to pop up so that said let's go ahead and create a variable for my age and again we're going to be using a u int and that means a nonnegative integer because i can't have a negative h and we're just going to call it h so end it with a semicolon and again whenever you're defining a variable you put the data type and then the variable name ended with the semicolon all right so we have a variable we have the ability to store my age in the smart contract so now we actually have to write a function to set my age so let me just go ahead and write this and then we'll kind of talk through what it's doing so you're going to call function i'll just call this set age and we're going to be passing in a uint just call it x and then i'll say public and age is equal to x all right so we'll get into this syntax in just a second but just to talk about this logic real quick all this function is doing is we're saying whenever we want to set the age of bucky then what we're going to do is we're going to pass in a value and then we're going to take that value and set it equal to the age variable okay so some things to point out here is one whenever we are passing in arguments to our function then we also need to specify the type of data that we are expecting so this is similar to right here um pretty much whenever you see a variable for the first time it's gonna need the data type right before it now another thing that's interesting about this is this public keyword right here so what does this mean so functions and solidity contracts can have different what is called visibility types now public means that this function it can be called basically by anyone by anyone in the world once this contract is deployed they can call this function um if if we had another function in here which we're going to have in just a bit then that function can call this function as well other contracts can call this function so basically anyone with ethereum account or even other contracts uh this function is callable by you know pretty wide open now there is another keyword and we're not going to be actually using this in this example but just to point out there's another keyword called private and what this is is essentially saying that this function if deemed private it's only callable by other functions in this contract so that means that users couldn't call this function other smart contracts couldn't call it private again it means that this function can be only called from another function within this contract so let me go ahead and revert that back to public and all right so we have a function to set the age of bucky and now before we kind of test this out let me go ahead and create one more function and all this is going to do is it's going to get the age or pretty much return the value of age and that's just because we want to be able to test it out later on make sure that we have the right value set so let's go ahead and do that right now function get age now uh one thing to know is unlike set age where i'm i want to set this variable equal to a new value with the getage we're not going to be passing in any additional information because we're not going to be setting it or updating anything we're basically just going to be reading this age variable to get the value so one thing that we want to add is public because you know this isn't like a private function we don't need to hide anything from anyone else we'll just say that anyone on the entire ethereum network can see my age no problem there now another keyword that i want to introduce is view so what is this view keyword so a function declared as a view means that it doesn't modify any state so for example in this function right here we were taking an age variable and pretty much updating the value of it this would not be a good time to use view in fact this is kind of the opposite of when you should use it because view means the opposite of that that you are not modifying any state or any variables in your contract so view kind of just means uh read only in the last bit of info we need before we can start coding in the function body is this actually let me uh kind of do it the reverse way so what this function is going to do is it's going to return the pretty much the value of age so let's say 20 30 40 whatever it is now whenever you create a function and it does return data you need to specify what type of data is being returned so this returns age which is an unsigned integer so in order to specify that i'm just going to say returns and have a parenthesis there u int all right so just reading this one more we have a function it's called get h it's a public function means pretty much anyone can call it it's read only so it doesn't manipulate any data and it's going to return an unsigned integer and that is h and that is pretty much it again this is a very uh simple contract i don't think it's something that anyone's ever going to use but in terms of just getting something out there quick so we can figure out these other features we remix i think it's looking alright now before we take a look at the compiler let's just go ahead and review why we even need to compile it at all so we are going to be writing source code and we just saw that it was just you know human readable solidity code now these nodes on the network they actually don't run that source code they need to run bytecode ones and zeros so essentially just real quick overview to compile you are taking your source code you are pretty much running it through a compiler and converting it to something called bytecode ones and zeros and then when you deploy your contract or pretty much upload it to the network you're gonna be uploading this bytecode just like that and this is what the nodes are gonna run all right so now let's hop back into remix and take a look at how to do this so on the left menu you see that this right here this is your file explorer pretty much you get to your workspaces now right under here you can see if you hover over it says solidity compiler let's go ahead and click that so the first thing that you need to make sure of is that the compiler version matches this pragma solidity right here pretty much just to make sure that your compiler and your source code are synced up uh they're aware that it's the same version so on and so forth and of course working with solidity a lot of this should be good by default the one thing that i do want to point out is that if you're working on a small project like just a few contracts then it's probably nice to have this auto compile and this just saves you from having to do it manually now i will say that if you're working on a larger project with a lot of the dependencies then it's probably gonna kind of bog down your your browser your resources to have this auto compile feature so typically you want to leave it on but again that's up to your best judgment now i believe that's all we need to set for this so now our code should be auto compiling now after this go ahead and hop down to this section right here so deploy and run transactions and let me zoom out just a bit all right now believe it or not and i do want to bump this up a little bit since we're going to be seeing activity here in just a second but anyways believe it or not remix also includes a builtin mini ethereum network so you know that we talked about these different ethereum networks one was like the actual ethereum network the ethereum main net it's called and these other like rink b these were test and development networks now you can also just have a local network or in other words a mini virtual ethereum network just running on your own a local computer so that's what this is right here with this javascript vm so make sure you have javascript vm selected and we can just work off this builtin um ethereum networks baked right into the remix tool to make things a whole lot easier now another cool thing about these networks is they also come with test accounts so there are test accounts in here as you can see and each of them are loaded up with 100 each sure would be nice if that was real ether but look at me dreaming away my days all right so just go ahead and keep the first one selected now under here there are some settings for gas limit we talked about that what was it in the last video maybe and value these two we really don't need to touch for um this tutorial now this section right here is where we need to select our contract and right now it says no compiled contracts and that is because i actually set this to auto compile after the contract was already written but if you want to compile this manually then what you can do is hop back in your workspace right click this and just hit compile and then let's pop down here see what this notification is all right huh spdx license not provided i have a typo or something whoa what's going on here and pretty sure that i had that too all right that was pretty strange i uh believe i just pasted in the exact same source code and it seemed to work that time but either way um that is how you manually compile and now it looks like our auto compile process is working fine so with that being said let's hop back down to our deploy section and you should have a contract in there that is now compiled so how do we deploy this to our well our fake ethereum network and i'm sure you can guess this once you have everything selected just go ahead and hit deploy and if everything was successful then you should see a success message right here in your terminal now another thing is that if you scroll down a little bit you will now have a new item under this deployed contract section and this is essentially a reference to that contract or in other words an instance of bucky so the two functions that we had on the smart contract let me minimize this a bit were set age and get age and that's what these two little buttons resemble right here so it's pretty much just a very simple ui or user interface resembling your smart contract now one thing to point out before we get to this is that if you scroll up you are going to see now that how all of these accounts had 100 ether there's one and this is the account that we used to deploy with it has less than that and this is essentially resembling the fact that whenever you deploy a contract to a network it does require some amount of ether so this was just simulating that so now let's go ahead and scroll back down and okay so we have our contract deployed and there are two functions that we can call on it one is age one is get age now for set age let's go ahead and add some value in there right now 20 click the button and actually let me scroll down here okay so i'm going to click set age right here and what this is going to do is it's going to send a transaction to the network essentially calling set age with a value of 20. now whenever we did this since it did require some update to the network that is indeed also going to cost ether now if we just want to read the value of that variable then i'm sure you can guess what we're going to do here we can just call get age and again this is of course needs to interact with the network but it returns the value of 20 right here remix isn't letting me highlight it but there it is right here where my mouse is and just to confirm that this is working let's call set age again with 36 and get age 36 so there you go a very simple way of deploying smart contracts and interacting with them from this remix tool again a lot of things built in and to be honest that's pretty much the basics of what we need to know about this tool for now some other quick things is well one if you ever want to delete these then you can just go ahead and hit this and you can delete those and if you ever want to deploy again just hit deploy and boom there you go and you can also deploy multiple ones at once for example if you want maybe a couple instances of it and this is actually what i meant by um there's not only one version of the smart contract living on the ethereum network you can deploy it multiple times and have different instances of it so now i deployed it twice so we got two versions of bucky floating around maybe one has the age of 10 and one has the age of 20. and the last thing that i want to mention is that let me go ahead and actually clean these up is that whenever you are interacting with these smart contracts whenever you are using this javascript vm again this is basically a builtin uh browser network so it's going to be a lot faster than interacting with actual ethereum network even a development or test network so just want to point out that if things are going really fast during development and then when you try to you know deploy it live everything seems just so slow and it's bogging down i just want to say that that's expected behavior one of the benefits we get is a faster network with local development so there you go a very quick introduction to remix and i'm sure you're going to find this tool very helpful throughout your development career so thank you for watching don't forget subscribe and i'll see y'all later