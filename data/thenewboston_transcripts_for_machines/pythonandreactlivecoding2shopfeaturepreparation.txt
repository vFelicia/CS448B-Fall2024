already y'all welcome back to another video and before we get to the good stuff I do have a couple big announcements the first incredibly huge announcement is that we now have two users on the new boston.com bust out that champagne baby bust out that champagne all right so yeah I am one of them but you know what still good still good now another thing that I wanted to announce is that I know it's only video two in the series but yeah we're already going to Pivot and instead of our original plan of building out the trading feature what I decided to do is instead build out a shop feature instead and the shop feature is going to be similar to what we have in tnb OS and the reason for this is because the goal of this project is to encourage people to create their own digital currency now right now there's really no incentive for them to do so I mean sure they can go ahead and trade it for these two existing currencies but even if they have these there's really nothing you can really do with them aside from music in tnb OS however tnbos isn't really going to be that useful until we get a much larger Network effect going so just to kind of add a very uh I would say a more clear use case we'll go ahead and almost like recreate this Marketplace on the new boston.com and this will allow people to sell their goods for really any digital currency of their choosing and just to give you a real quick real quick overview of this functionality for those who didn't watch the tmbos video um well it's pretty simple you basically have a buy section and a cell section and a seller can go in the sell section of course add their products and they can choose what core AKA what digital currency they want to sell for and the amount and then once they have their products listed they can go ahead and activate it and this pretty much means take it out of draft mode and make it live on the marketplace and then you just have a little product section to see everything you're selling and then from the buyer's perspective they have you know a pretty generic Marketplace View a list of all the beautiful products they can go ahead and click in one and add it to cart and then once it's in their cart they can just go ahead and check out and in addition to this they always or excuse me they also have an address section where they can add any of their addresses and then of course whenever you're checking out you can just choose one of those so I only have one now so just choose that and then whenever the buyer places an order it's going to appear in their orders and then from the seller's perspective again they have this order section as well to see what people have ordered so they can ship those goods all right so yeah that's pretty much what we're going to be doing and again right now this marketplace right here is peertopeer so it doesn't use any uh back end at all really just the core to Route data back and forth and I built out a lot of these models already for example the product model uh so on and so forth but we're gonna have to make some small adjustments to this just to kind of uh support kind of like back in development for example right now it's using an image URL and we're going to be storing those uh on our back end and let me see what other things um yeah just some other models here that we aren't really going to need that were kind of designed for making sure two client devices were in sync when you don't have a back end but now we have the luxury of having a back end so yeah just some small tweaks for that but that is kind of the gist of what we are gonna be doing so on that note another thing that I'm pondering is this so I already see some conflicts um as far as naming goes for example we have these trade orders remember we talked about in the last video whenever you place an order to kind of trade uh two currencies with each other then you have this orders model right here and these trade orders are going to clash with these shop orders uh same name and Convention also when I was building out this uh project I didn't really look ahead and assume that we're going to be building a shop app so I structured this kind of not supporting that I'm now wondering if it's going to be better to change things around so let me so what I'm thinking about doing is all right I'll talk you through each of these uh packages first so this API actually you wait a minute let me go ahead and I have a branch right here I was adding Pi test and again uh well I don't think I said this but this series is going to be a little bit more casual I you know know I have like my tutorials ordered and whatnot but uh yeah it's pretty much just gonna be me hacking away at this thing so don't expect like a structure tutorial series like you uh might have in a lot of my other series but either way let me see what I got so far right here so I'm on this pull request right now which was just to uh add Pi test and I just wanna make sure that this is working before I merge it in so make your own server all right so I've got my dependency server and first before I merge anything I just want to check for linting issues and then make a test and this is my Pi test command that I added in this branch all right so make sure I'm all synced up push that up pull it down look at my code all around okay and then just a quick code review of this because I actually was working on this last night and then I got a little bit distracted had to eat dinner and then fell asleep so let me just make sure here my make commands yada yada pie test dependencies these look good for my pie test settings and then to test login well this is my data testing Response Code these are the keys in my response expected Keys as well and expected shape okay and then what I have is this fixture right here here API client Bucky and this is pretty much um an authenticated API client with it's authenticated by this sample user Bucky so when Bucky gets a list of course you should get a 200 response and by default it's just going to be empty list and then what we're going to do is we're going to make three cores using this model Bakery and then this is the expected data for each one response code Json equals that good good and all right yeah this is another thing that I'm doing so this is the fixture for just your general API client with no authentication whatsoever and then whenever you want to use an authenticated user in any of your test for example I'm using API client Bucky right here it just gets an authentication token using this function right here get access token and it pretty much just hits your API endpoint or a login endpoint and you know get the token back and then it uses the API with those credentials right here so that's what's going on for the testing and this I talked about in my Pro Django series uh just a little flag to so the system can determine when pi test is running just because we pull in different settings this is just some sample signin key and account number used for development and testing you of course don't want to use this in uh well you don't want to use this because well everyone has access to it so you want to generate your own one of those for development and yeah looking good all right so now let me go ahead and just squash and merge this bad boy in and then we can get started on probably refactoring all right so that's immersion no more issues and let me see for some reason I like to stop my server whenever I merge in a branch so that's merge into Master pull that down and then we can delete this look down again restart and it should be good to go and can close out of this too and also this one since we want to work locally all right good to go actually let me just make tests real quick make sure nothing broke and sweet okay so now that we have this actually let me go ahead and pull up the new boston.com again and figure some stuff out so what I'm probably going to do I'm kind of just thinking how the UI is going to be structured and typically what I would do if I was working with the team is this is the point in time where you want to write out all your business requirements and then after that I would probably start wireframing in what I like lucidchart is a tool and then discuss it with you know product manager so on and so forth however since I am the uh lead developer and lead designer and product manager all in one I have a little bit more freedom to kind of do everything myself so what I'm doing right now is kind of just going through and thinking how I want to structure this so the cores so again the goal of this is to pretty much merge this entire shop application into this new Boston website so we are still going to have this cores because that's applicable to both the trade and Shop basically what digital currencies do you want to use wallets we don't need to do anything here because that's also going to be um Apple applicable to both and then for this Trading what I'm thinking about doing is pretty much having cores while it's trade and shop and then I'm going to take these orders which are your trade orders and somehow move them under here and then this tab right here which will become shop this will have its own nested orders and I think that like visual hierarchy of everything would be all right so now the question is how do I merge orders in here what I'm thinking about doing you know what I could do I could rename this tab to change and then kind of have a system like this where I have like two different well pretty much a menu bar on the top somehow and like one button says trade and one button says orders so basically taking these two and moving them to a top navigation item and then I think that will be good about this for another second yeah I think that's good now let me make a frontend ticket to this to start organizing things so I'm gonna say the New Boston front end I'm gonna make a new issue and so I guess this video will pretty much just be preparation for what we're gonna do or for this future migration but uh probably I don't even know if we're going to get to the shop app at all but uh let me just do this so um and I will say to do and I'll have a little checklist all right so to prepare this the first thing that I'm going to do is rename trade uh what am I calling this the trade page to exchange and I'll say URL as well because right now this is in trade URL and I want to change that as well and then I'll say uh create a top toolbar for the new exchange seduction section and then after that I'm gonna Nest trade Nest the existing trade in orders pages under the new 16 exchange section and also once that's done I'm going to be creating a new shop section here but I think I want to do that in another ticket yes this is kind of just like preparation also if I do it in this ticket then I'm just going to have like an empty shop page and I always like to um whenever I complete a ticket like have it be a point where you have like a working application still not like a Half Baked feature so I think that this is good for right now so let me go ahead and submit that and now let me go ahead and figure out what I need to do on the back end to prep for this actually I can steal that same title prepare for a shop feature all right so on the back end what are we gonna do so this API right here um this isn't a Django app it's just a package this is for connecting basically your functionality for connecting to the different cores authentication this is of course all of the uh login stuff course this stays the same these are pretty much your different digital currencies General this is just a bunch of General utility functions so on and so forth invitations is for that invitations uh logic that we're going to be replacing now orders this is likely what's going to change so this app I don't want to have as a top level app anymore because I want to Nest this or I want to move this logic under should I call it exchange or trade probably go with exchange since that way my Django applications kind of match up with my UI yeah yeah okay so I'm gonna say to do I'll say create a new exchange app and then I would say move order logic into that app actually is this a good name for it so what I usually like to do is for my Django application naming conventions I like to keep them plural whenever I can see cores invitations orders and then for my I want to say like my most important model if that makes sense um is usually just a singular version of this app so under orders your like most important model is order so that's why you get that same thing with invitations you can see invitation course course well you get the point but this was recommended by two scoops of Django and I just really like it for all my projects all right now let me look at this so this is interesting as well and let me point something else out so right now a transfer in the app is basically this so whenever you go to your wallet and you make a deposit or withdraw then what happens is let me actually pull this up where are you at lose the chart right there okay so system overview check it out so right now a transfer is basically a movement of coins from well basically a deposit or withdraw and what I'm thinking of doing in the future and I wonder if I should do this now or if it's just too much but I kind of want two different uh versions of a transfer one acts like more of a wire whenever I'm how should I say this it's almost like an external transfer where I'm taking something uh from a core and moving it to The Exchange account now an internal transfer is just and I'll show you what's going on right here so the other type of transfer that I don't have yet but if you see this wallet object then once those coins are kind of uh deposited to The Exchange I would say then whenever a trade happens for example someone trades tnb for VTX um that trade it never actually hits these external cores so basically you're on a credit system and told the point where you deposit or withdraw so in that sense I'm thinking I was thinking of naming this like external transfer and then these internal transfers but I'm also reconsidering uh renaming these to wire kind of like when you wire funds between a bank it it's like two separate Banks and then the transfer could be kind of more internal but either way I think that's a little bit too much see this is the debate do I do it now knowing that I'm like 90 percent gonna build out this logic in the future or do I not hmm so this again is most likely going to be renamed you know what I think I'm gonna just rename this transfer to wire right now kind of to Future proof everything yeah so anyways just a recap real quick so I'm going to rename transfer to wire let me put this in here as well so a wire is pretty much going to be any of these deposits or withdraws and then a transfer is we're going to have this functionality later on but let's say that there is just another user on um the new boston.com and you just want to kind of move your balance over from your wallet to their wallet again that's not going to require hitting any of these cores since those coins are already just on a credit system so I'll call that a transfer and we'll build those out later but for right now uh we'll just kind of keep that in mind okay so getting back to our Shuffle um orders is going to be nested under exchange an exchange app that we're going to build and then these transfers are going to become a wire I'll say rename transfers app to wires and I'll say move wires logic into the change app okay so then the exchange app let me kind of scope this out so the exchange app going to have orders and wires and that will Encompass these objects and these objects I think that makes sense okay so then this final structure is going to be API top level that's good authentication Tuple that's good course top level General annotations top level orders are going to be nested transfer is your name to wires those are nested project is good these are just like my project settings top level that's good then users and wallets want these top level as well all right so on that note where should I begin let me actually go ahead and pull up get rid of this like to keep things nice and clean all right so this is all pretty much my prep work before we even get to this shop and I'm just thinking now whether I want to start on the front end or the back end so it's actually I probably need to submit both these tickets together they're going to be pretty honking Tonkin tickets um actually maybe I'll just do the front end first because this is all yeah that's probably going to be easier okay so my plan is to do the front end first which is pretty much restructure uh these two sections um unify them under the exchange section and then once I have that done and taken care of since that's all like um visual stuff you don't really need to mess with the back end then what I'm going to be doing is completing this backend ticket and this is going to be this is going to require renaming of some models so whenever I do this that's going to require another frontend update as well so I'll make a separate ticket actually I can make that right now um running changes create to this ticket right here all right so anyways to recap and actually uh submit this video and you can tell me if this is a good game plan before I get started but anyways uh this is what I'm gonna work on first prepare all the UI shot features and then I'm going to work on this ticket and this ticket together since I need to merge those in at the same time and then once we have all that prepared we should have our structure really ready to go and uh yeah ready just to build the shop out Shop app out from there so uh yeah let me actually upload this video to YouTube because what I want to do another thing in this series is I want to kind of um get everyone's feedback before I go too far ahead and I have to kind of uh revert if someone has like a better idea on how to do things so anyways that's my game plan for now let me know what you guys think and yeah hopefully get started on this soon so yeah see you next time