all right everybody welcome back and in this video we are finally going to be getting started with this shop feature now before we get to that I got a couple housekeeping items to discuss so first of all I want to mention that from the last video to this one I did a bunch of renaming and reorganizing of these files I actually um started recording it because I don't know I just felt like it should be part of this tutorial series and then halfway through I'm like this is the most boring video ever all I'm doing is like moving files around and renaming things so I figure I wouldn't torture you and upload that video but I want to show you what I did so kind of what we discussed in the last video what I did is I took that orders app and I moved into exchange because remember this app now is going to have two different types of orders one is for the exchange and the other is these orders uh which we'll call shop orders so anyways this model that was the kind of the trade order is now called exchange order and that's just whenever you trade uh coins with someone else and I'll name the other type of order shop order and then let's see what else I did got my little notepad here uh yes so I renamed transfers as you can see there's no more transfers app I move that into the wallets app and I also renamed it to wired because remember that we said a a transfer was basically whenever you deposit coins or withdrum and we're going to be calling that wire because just like a bank wire it's like a transfer funds between two different systems now we are going to be having a transfer model in the future but that's just going to be an internal transfer like I'm gonna send you some coins or you send me some coins so kind of like a um I don't know more like a venmo type transfer and a couple other things not related to what kind of related to the code I guess I got some feedback on my font size so right now I'm recording my entire screen um some people like it some people think my font size is too small there was a debate so I just want to kind of ask for your feedback do you like it small like this or do you want me to uh bump it up your choice just wanted to do a get everyone's opinion before I change anything and let's see what else we got so another thing is I saw hussu you left the comment and I actually really like this idea he mentioned that whenever we are withdrawing funds it would be nice to be able to see the fee that's going to be charged and I think this is just a uh a good suggestion for UI ux Improvement so I thumbs up that and we'll put that in the backlog we'll get to that probably after the shop app but thank you hesu for that suggestion and let's see aside from that I mean I guess the only other news is I just had a bagel it was delicious so on that note I think we're ready to get started with a Shop app so again just to recap for those who skipped the last tutorial or two what we're going to be doing is taking this shop functionality and moving it into the website because right now this uh is part of tnbos which is a peertopeer application but since we don't really have the network effect going for this yet we're just going to go ahead and stick it on the website for now make things easier and also on that note I now have a one Soul goal in life and that is to sell this hand carved wooden spoon so this took me a long time to carve it's my finest and only work as a wood carver and if I can do this just sell this one single spoon then what that will mean is that our economy is born so it's not going to be easy I mean we're gonna have to build this entire Shop app a lot of functionality related to this but again I like to take complex problems and break them down into kind of more simple terms so the goal again is just for me to sell this one wooden spoon that's it so how exactly are we going to do that well I have this roadmap so we can start planning everything out don't have anything yet but let's just go ahead and get to it let me bump this up and all right so I'll say this is the roadmap for the shop app and now let me go ahead and kind of figure out how we want to tackle this so what I'm not going to do is just copy all of my existing logic in kind of model structure for um for from TMV OS because there are a lot of things in here like I mentioned that are kind of related to like syncing data between two devices and the payment system is going to be a little bit different because well just peertopeer payments are different than the payment system we have on this back end but actually let me close this and all right so let me go ahead and think through the natural flow of what we need to make this happen so before anyone can buy products you first need someone to like list the product or sell a product so the seller is going to need to add products first so I'll say seller ad products and then after they add a product let me just see the fields here so activation status Creation Day image we're going to require an image um price amount price number president seller okay so after they add a product they're going to go ahead and activate it and then from there it's going to be visible on the buyers UI now what the buyer is going to do is they're going to click into this kind of just talking slow to kind of think through what models are needed in my head but then once they find a product they're going to add it to the cart and then that is going to become a car product so say fire uh I'll just say like crates cart and then they are eventually going to be placing an order from their cart page but is it prerequisite for placing an order they not only need cart products but an address as well so before that I would say buyer creates address and again it doesn't really matter if they create their address first and then add products to their cart or if they add products to their cart and then they have an address the order of operations here isn't really important just kind of stating that the buyer needs these two things in order to place an order in order to place an order interesting all right so anyways once they have those two they can go ahead and place an order and then so let me say fire places order and whenever the order is placed then those cart products are going to be converted to order products so these are cart products now place the order my cart's empty converted to order products and then let's see what else we have so address cart products already figured that manager this is just for you I don't need any of this order products order product record recipients this is for syncing data product record same thing products receiving accounts okay so whenever I developed this peertopeer logic there was a receiving account but for this we are not going to need one and actually do we need a payment so anyways the receiving account was basically so an account can be created uh by the seller and then for example if the seller went offline talking about tnbos now then uh basically they didn't have to wait around in like monitor the account and be online the buyer could send the funds to that account and even if the seller was offline they would be able to come back online check a receiving account and see the funds then however since we were managing all the stay on the back end do we even need a receiving account in transaction because these two things together make like a peertopeer payment system but Actually I don't even think that we need a payment model at all and the reason for that is because whenever an order is placed now it's going to have a total and that total is going to be just paid right away so again before with peertopeer um the buyer was basically placing this order and then they were responsible for kind of paying for it after but now since everything just managed on the back end and the user has like a wallet included we won't even let them place the order if they don't have enough funds in their wallet so I think that we don't even need like a separate payment or transaction or anything like that this is going to be awesome much easier than this peertopeer payment system so buyer places order and then yeah funds are deducted right from there let me just say that funds are deducted at the time the order is placed and let me put this in italics because these are pretty much all the models that we need so seller adds a product buyer creates cart product the buyer creates an address I replace it the hiccups gray buyer places the order and then cart products become order products okay now with this said I am wondering how to structure this so one two three four five models when I'm thinking is I can probably just stick these all in a single Django app I think that'll be easiest so let me do that and okay so I'm going to stick everything in a single Django app and now last but not least let's go ahead and figure out how to break these up into tickets so I'm actually thinking although I don't like to do this too often I like to pretty much keep my tickets as small as possible because then you can you know you don't have like these huge changes and you try and merge in and get a bunch of merge conflicts so it's nice to have like small bitesized tickets however I also don't like to merge in features that are like halfway complete and I am the only one working on this application right now so maybe I'll just have two tickets one for the front end one for the back end I'll just say uh shop so let's do that okay so this is a shop on the back end and what I'll do is I'll build out the entire back end first and then I'll just test everything using Postman and then after that I'll just work on the front end show shop and then for the front end let me just say shop let's just say the front end of this always like to kind of link my front end tickets to my relevant backend tickets all right so back in shop 39 so back in just make sure I'm in sync and that was 39 chop all right so change shop clear this out and my Django admin now okay so now let's go ahead and hold on I've got some stuff on my desk a lot of clutter let me organize this okay clean desk clean mind ready to go so see me the New Boston start app shop uh uh you know what I'm just gonna do this okay and got my shop app deleting my models testing views because I like to put those in packages and then first thing I'm just going to do is register this and I'm too lazy to type out the new Boston so I'm just going to copy this and okay so now I gotta register this app so that's projects settings base shop config beautiful and now let me go ahead and my models actually let me do this let me get my package structure so I'm going to have models serializer and views all right now I'll get to those in a bit but first let me just go ahead and uh kind of spec out my models so let me open My Boy chat Jupiter and uh all right do I got anything embarrassing here cooking pork chops intermittent fasting and YouTube content migration errors okay yeah yeah and uh perfect so next what I'm going to do is I'm just going to create a new model for product and let me actually just pull up a reference here and okay so I'm going to inherit from creating modified since this is just going to give me a created modified date which I want to keep track of on my products and I'm also just gonna whoa whoa whoa what's going on here all right so what does my product model need in it where are you at tmbos okay create a Django model with an activation status of or draft actually do I want this so I have two activation statuses active or draft I could have that a Boolean but yeah I don't think I want to do that I feel like that's going to come back to bite me if I want to add another one in the future okay so activation status description uh image URL we don't need that actually we do need that but I don't want to have uh see what was my other one where did I have an image core all right so for the image what did I just call that should I just say image yeah I'm sure in the future we're going to support multiple images as well but for right now this is fine and okay what else do you need a modified date name of course name and then product amount or Price amount then price Network so just say price even though we're going to have a core so core just just thinking the naming convention for this so anyways this price amount and price core is basically saying what digital currency are do you want to be paid in and then how much is it so I so what I can do is just name it core and amount but I kind of like the idea of prepending it with price just because I think it's going to be a little bit more intuitive so let me say price core and I'll tell chat gbd price then I'll rename it later and then uh the product ID and then the seller which is a foreign key to a user this is good for now then we'll kind of patch everything together sure I can help with that I'm Chad gbt I'm so smart I can do everything me okay so let's see what we got um wire okay so this is going to be a text Choice as well all right so I'll say what am I gonna name this I keep opening that accidentally okay so activation status Okay so activation status and what did I have for here active in draft so active active the readable version is active and of course draft and the readable version is draft how many characters is active have been at one two three four five six so we need a max length of six and all right so activation status is a character field these are the choices max length of six it's going to be required to go and then let's see what else we have so next up is actually I don't think I want to do I want to default for this maybe I do yeah let's add a default so default equals activation status dot draft in my linter will pick up this issue so activation status a description name and the price is going to be a big integer field with no d so price amount so they're gonna have to give us a price amount in a price core in whenever yeah I don't want on the elite models Cascade because I don't want the products being deleted if we ever have to delete the course so models Dot I always forget the name of these so far case on delete parameter not models Cascade not protect either set no there we go Hmm this is interesting too yeah that'll work ties okay so let me make what all right so a product is going to have created day and a modified day is going to have an activation status and this is either going to be active or draft max length of six and it's going to be set equal to draft by default so whenever the first grade product is going to be in draft mode and then when they're done filling out all the information they can go ahead and activate it to make it live so they're going to fill out actually let me just do this so you're going to fill out the name the description and give it an image what's not going to be our URL we're just going to store it on their back end but name description image and I don't want this to be pulled up blank it was true because I want that to be required and then for the price Network this is going to be the core basically do you want like TN or tnb VTX so on and so forth then the price amount how much is it if the core ever gets deleted then just set this to null instead of deleting the product and the seller is of course going to be the person who sells it and we don't need a buyer right here because we only need a buyer on the order so I also want a better string right here and for the string representation I'll say the product ID let's get the name in here and I'll say price so the price e for this display I'll say price amounts and then I'll say the price core ticker so as the string representation representation it'll say like price 110 b or something like that so now with this said oops actually let's close all those and kind of just uh make sure everything's working in Django admin first shop models product and let me just steal my init over here is you know what I'm doing now is I'm just uh importing basically whenever I import my models from shop I don't have to do models.products I can just do uh from shop.models import product just makes my models a little bit more cleaner whenever I'm importing them and then in my admin just register that and I like to steal this code whenever I can because I'm too lazy to type basically everything and here we go is my server running what's going on here just oh that's interesting so I have a foreign key that I'm setting to know but I don't have the field as knowable you know what I'm going to do for right now I am just going to go ahead and put Cascade because even though this isn't the future user experience that I want where let's say we have to delete a core because it's like causing issues or maybe it goes offline I don't want those products silly did however on my front end I'm going to have to handle the case where it's null and I think it's just a little bit too much logic to kind of build out all at once so instead I'm just gonna make it Cascade and then in the next iteration I'll handle that edge case all right so make migrations make migrate okay and then in Jungle admin what do we got let's go ahead and add a product actually where's my uh and what image do we got uh let's just use this bacon for right now what if okay so the name is bacon in uh description juicy bacon for sale price is for 20 price core tnb seller Bucky continue editing beautiful all right so productive one is bacon and the price is 420 tnb so now what I'm gonna do is probably just uh get a simple endpoint going on so let me just say for so for the serializer I'm probably going to want to have a separate read and write the serializer all right so shop serializers products product I don't need my user model and how to create serializure actually let me do this should be easier let's leverage chat GPT as much as we can all right now what actually let's do this I'm trying to give it like um an existing pattern and then oh yeah here we go okay so I'll say that okay here is one of my Django and views all right so I'm gonna give it a core serializer in view and I'll say create um view set for me my product model creative USA and serializer and serializers for me for my product model here and I have to be able to give it the logic as well I'll say I want anyone to anyone who is to be able to retrieve i before e except after c I want anyone who is authenticated to be able to retrieve products um let's see did I give him my yeah the seller to be able to create edit and delete products if I can type and what other logic do I want I think that might be it okay so let's see this I want anyone who's authenticated be able to retrieve products and the seller to be able to create edit and delete products show me what you got chat gbt show me what you got okay so in this case you're gonna need two serializers a reading or right okay I agree I concur and read on these fields okay what do you got going on here that's looking right so far we just copy that from here real quick just a little bit okay okay looking good looking good okay so product resealyzer it's going to return all the fields let me just make sure and have no yes they do need all the fields and none of them are secret or anything so that is good I'm also wondering since this field the price core in the seller hmm so these are actually going to be foreign Keys which means in the response they're going to come back is an integer but I'm thinking for the seller whenever we return that we probably want to return that with a serialized field that way we can display kind of like this the um the name of the seller and then their profile photo and whatnot so yeah actually what user and information do I have so for my users you have a username we don't even have profile photos yet so embarrassing okay but we still want the username so let's just turn a serialized field for that okay so user serializers user read serializer see if we can borrow it from somewhere else okay see in the product read serializer you I just get rid of that file using the user read serializer I just realized that it's probably going to be easier if I just type this out myself but I did want okay chat Jupiter let's see what you got here okay so product view set is a model view set uh these parser classes are gonna allow me to work with images which I'm going to need is authenticated is object owner or read only uh this is going to have to change get this queued up ready to go uh serializer request so when you're creating it okay what serializer do you need well whenever you're creating it or updating it you're using the product right serializer in the product create serializer says that whenever you create it the seller is going to set to a request user and then once the created modified day and seller are set this is pretty much the fields that are going to be controlled by the system and anything else is just editable at any time right yes so the user is going to be able to toggle it to active and draft at any time between the description image name amount and core if they want to and not the seller so that all looks good all right so the creation logic is save it and then return it using the reserializer then when you update it you don't need to have all fields which is interesting do I need this hmm I don't know if I need this but I had it in my core so stick with that all right so the instance is the existing instance the data that I pass in pass instance update logic and same same okay um and then I wanted to tell actually what was chat sheep doing oh yes Okay so uh from the New Boston users from the New Boston users get to this serializer and then in my product response seller is going to come back is a nested object more or less and then I also want to say that hey gbd these are my class okay so basically I want to tell chai gbt that um typically on most of these models I reference the owner of the object using the keyword owner which is a foreign key just to a user that owns the object however on my product model I'm calling it seller so it may need to change that all right so is object owner permission checks currently filled buy a new product owner yes works on a cellular okay here's how you can modify a subject owner okay so I don't want to do that either what I was thinking is that it may give me something a little bit more fancy but it looks like it's just giving me the same thing with the um with this replaced so is object seller or read only all right and let me just ask if there's any way to uh dry up these indeed there is a way what are you coming up with Chad Chipotle is field user huh that's interesting now oh okay I'm liking this Oh I thought that what I was going to do is just have me pass it in every time I'm using this however I'm liking this a lot actually is field user overeat only not sure about that but yeah this is nice okay all right so basically we're saying that uh it's the same permissions we have to make sure that the requesting user is either the owner or the seller however in this base class right here instead of doing this which we had before just matching the object.property to the request user instead we are setting a user field to none and then in the class that's inheriting it the child class we just set the kind of the user Field property just thinking of my name and Convention is field user or read only I don't like that name is field user is object owner is field user so this is interesting so I basically want a word for the person who like owns the object but it's not the owner and I don't want to say seller you know what this field user actually is sounding better right about now so okay let's uh let's roll this um yeah I think we're kind of good to go right now so now what I'm going to do is just make my urls and what I can do is copy this from core and go to products or excuse me shop Heroes and I'll say products and Views product I am looking at the product view set Okay so my URLs are looking good for this and now I just gotta tie these to my main project and I should be could go to start testing New Boston Chop euros alright so I'm making it failed bow okay it looks like it didn't like this too much all right so it looks like it doesn't like that it's first this user field uh variables first being cast to none and then later on we're setting equal to a string however you just type it out as optional string and let's see what our linter says about that and I forgot the import optional from typing all right and then one more time because the first time it should have fixed it and then there we go all right looking good so now let me open Postman and all right so first thing I want to do is just log in get out of here thing all right so I'm gonna log in and use your name Bucky password one two three four get my access token and then for the products endpoints I'm just gonna call Bear with that token send and all right so my products endpoint is working good so far and everything is coming back the seller is nested using this user read serializer and then created a modified date it's in draft mode okay looking good so now with that being said let me go ahead and try to create a product so I'm going to create a product and let's see I want form data and all right let me just go ahead and send this in get some errors back okay so name of this product is going to be spoon spoon the the scription like a hard wind spoon yes I know I have to work on my marketing skills all right so the price amount I'll say 100 and the price core this is going to be foreign key and let's see so for the course this okay the new boston.net is foreign key one so 100 tnb and then for the image this is going to be going to be file and I'll just say bacon right now looking good looking good and yup seller that's me and also just to kind of do some quick QA let me pass in an unauthorized request beautiful not authorized okay and then so this is three now I'm just go ahead and try to patch AKA edit that and I'll say I want to change the description to soft wooden spoon and the price amount say 260. description softwin spoon price amount 260 and everything else is the same now another thing that I'm considering is serializing this price core but I don't think that we need to and that's because the way I have it set up on the front end whenever you first log in it's going to pull all excuse me all information for all cores so it's already going to have like the ticker the full name the um the logo so on and so forth so we can just pull this right from Redux and keep everything nice and lean of course we don't want to do it for seller because whenever you log in it's not like we want to pull all the users down for the entire database from uh but for the course it's fine since they're kind of a key part of the entire application okay so now what next okay let me actually let me go pee and then we'll tackle the next feature uh pause all right so seller ad products looking good let me just cross this out for now all right now the next thing we have is for the buyer to create cart products okay now what I'm going to do is kind of Leverage GPT a little bit more because yeah it was pretty impressive with its work on products and okay next create a car products model with created date in a foreign case the product and okay now create a cart model with um now create a car product model that will keep track of the products uh buyer adds to their cart include a bar foreign key for the buyer uh created dates and a foreign key I'll say a foreign key to the buyer and a foreign key to product I think that's all we need because yeah the buyer only has one cart created modified that works actually okay so let's close out all these and Shop models cart products okay so we got to create and modified but that's okay even though we aren't really going to need the modified date because they aren't going to be able to modify these cart products if they ever want to remove an item from their cart they're just going to delete the entire thing but I mean it's all standard so it's all good um meta we don't use this at all okay so the buyer is going to have a foreign user if you delete them then if you delete the user then the products are deleted as well and then for product foreign key to let me see shop dot product and then really name so cart ID make that more readable buyer username and the product name okay and actually let me go ahead and uh just make sure we have something to test it around so cart products for a car products actually I think I may need to create another user yep and let me just go ahead and create one right now all right so Amy uh your password can be the same password is too common all right so now I have two users uh Amy and Bucky and then Amy and I gotta make migrations all right so now I've got that up and running so it turns out that Amy really loves this wooden spoon actually let me delete what one of these Wooden Spoons since I created two of them all right you know what in fact Amy loves bacon and Amy also loves this wooden spoon of buckies so now I'm going to do is I'm gonna log in is Amy and Amy's password is bacon12345 and now once we have our off token we can begin Okay so I would say actually what do I need create a serializer and if you said and view set for car product yeah all right so now chai sheep T I want you to create a serializer and view set for cart product um I'll say buyers should be able to in fact how do I want all right so anyways buyers should be able to add and remove items from their cart now I'm thinking how I want this data serialized because I mean if the user is looking at these products then they're already going to have these products in their store and whenever they for example add it to their cart then we really only need the foreign key because we can just just look it up in the Redux store however then I'm thinking if for some reason they're on their checkout page and they refresh this then they're gonna fetch the carts endpoint to figure out what products they have there and then the product actually isn't yeah so then we'll have to fetch the product again so I will say that in the serializer we want to serialize the product using the product rate serializer serializer we using the product read serializer which you should be familiar with already and another thing is that I wanted to say buyers should not be allowed to add items to their cart from multiple sellers and I think that might be it well at least it's a start first let's create car product serializers show query read flexibility great I like where this is going fantastic great job you're doing awesome keep it going we'll keep it going I think I'm in love with you this is amazing stuff all right so now let me go ahead and create a new car product serializer and a car products for you all right so what do you got for the serializer okay so car product serializer you are saying that it's model serializer the product is going to be serialized using credit grade serializer and it's going to serialize product Fields all which is create modified buyer product looking good all right now for the right logic um again these are kind of system controlled Fields I'm going to recreated the buyers automatically set by the request user and then okay this comment is good for readability okay so for the carp products it's basically all the products where the buyer is the request user now if anything exists in that query set then get the seller for that and create a set from all of the sellers and If the product seller from the product they're trying to add is not in the set of existing sellers which there should only be one in the set unless something went wrong then I'm going to say you cannot add products from different sellers to the cart I read that right okay so get the product seller for the product they're trying to add I wonder if this should actually be in a separate validation method must ask since this seems like uh data that would be validated before this crate function would be called yes that's a great point it's good practice to place validation logic and a separate method okay cool that's what I love about HR cheap T I love working together on these things you can learn a lot from each other attributes okay do this okay so whenever you validate this and you're just going to validate everything with the parent class which is just the model validation basically and then you're gonna get the request put the user from it and same logic as before and then after you ran your validation then you can just go ahead and run this crate with all the validated data request buyer looks good okay cool and now let's see what you got for The View sets is this right for the vsat is here wait a minute first of all I got something in my eye right now okay anyways let's go back to the product nope nope no products for you there we go from crate okay okay what I'm going to do is just say this based on these standards chat GPD may have got a little bit confused mix in a serializer with unless I just copied the wrong thing but car product view set parser class I don't need that okay so this is what I wanted now for the let's say wallets don't need that parser class because okay so I don't need this parser class and then the owner of this cart is the buyer so in that case I'm going to create a new so say is object the buyer or read only in the user field for this is buyer and then I'll say for cart products the buyer is kind of in charge of everything all right so the permission classes that you need you need to be authenticated and you need to be the buyer to basically do anything to your cart and for the query set this is going to be different as well so for the query set QRS all right so for the query set we basically want to save the same logic right here where carp product objects filter buyer equals request user her project rubbish filter buyer equals request user buyer equals user and then for this top level query set we can just do none okay so what we're seeing right here is that whenever they are retrieving items then only retrieve the items that you are the buyer for basically you shouldn't be looking in anyone else's cart and now let's just do a quick sanity check okay so whenever you are creating a new cart product you are going to be using the product right serializer same thing if you are doing any partial updates which I don't want right yeah no updating allowed because there is no need so and there's no need because even if they want to update their cart um they just delete the product so I want to disallow updates I think I just have to remove update when I want to make sure there's no baked in Behavior simply remove the updated this prevents okay method not to return action since these will no longer be valid fantastic now all right so if you are creating an object then use the product right serializer and the product right serializer is basically just going to do all your basic validation make sure you're not going to try to add products from different sellers into the same cart and then do your model validation if that's good it's just going to create and return your cart product and then it's going to return that data using the read serializer after it gets created here and in the read serializer it's pretty much just serializing the car product with the product also serialized and if object buyer should be the one in charge is object buyer okay now let me lint this and I think I'm on my migrations are good I can change anything right make migrations by the way we also need to write a bunch of tests but I like to do everything uh testing everything manually at first just because I I don't know seamless development is a little bit easier that way but either way let's go ahead and say okay so Amy you're logged in fantastic now I also want to get Amy's car products and for this you're going to need to authorize you with this new token because this is Bucky's token so let's go ahead and oops no end point because we didn't create one yet so embarrassing all right so shop urls from views cart products Port cart product view set and now for oops car products car product visa and for products product view set so now hopefully when you get the car products now okay so Amy has two items in her cart some juicy bacon from Bucky and this is cart product one and Amy's buyer two and she also has that wooden spoon soft wooden spoon and huh this is interesting as well so I'm looking at this right here okay so if I actually wonder what happens in this case um so say that Amy is shopping my name is Amy I'm shopping at an items to my car I'm loving it and then in item like this black Tshirt and gray tshirt gets added however at this point in time Bucky is going to mark one of these as draft again maybe he like wants to change the image or the name what is the user experience like for Amy because if we just delete it then Amy's like wait a minute I just added two things to my cart and I went to check out and now there's only one another thing that we can do is let her place the order and then throw an error but that's kind of annoying because then she might be like well if this was going to cause an error then why'd you let me add it in the first place so I don't know what to do this is interesting okay if everything's legitimate and it's added to the cart but then while it's in the cart hmm okay okay what I'm thinking and I mean what I can do is just say It's tricky because I can just say that whenever you're returning this query right here for example if you are on the checkout page then I can add like a logic here to filter out any cart products where the product is then in draft mode but the problem with that is let's say that we even allow Amy to place your order so we take that let's say that one of these is in draft mode one of them is inactive we only return the active one to the front end and then Amy places the order and in her orders she only has one product in there so that's going to be good however at the point in time when Bucky makes that product active again then Amy's gonna have an item in her cart that like just appeared out of nowhere it's going to feel like so what I'm thinking is the logic that we probably want is that if there is a product in anyone's cart and the seller makes that product draft mode again then we probably want to just delete it from their car automatically yeah I think that's the logic that we want so that's going to involve a little bit more tricky logic probably not really appropriate for this uh initial MVP but yeah something else to keep in mind also thrown it out to the everyone out there if there's better logic if anyone else works on like an ecommerce solution or you just have any other ideas then uh yeah let me know this is a kind of tricky situation but anyways uh let's see what we got going on here so we're already retrieving this and now let me just go ahead and all right let's just see if we can delete some of this so let me delete something and add it again just to uh make sure this is working so Amy you got two items in your cart you're loving it you are a Shopaholic okay next thing that you're gonna do is you are going to delete the first car product so Amy I mean these you are going to delete cart product one and now let me just go in Django admin and okay so Amy got two items in our cart she's gonna delete cart product one uh no content delete it and now when I refresh this okay beautiful and now she should be able to add that back in again so ooh you know what else we are gonna make yeah we're gonna have to make a unique constraint as well I just realized okay so next what Amy's going to do is she is going to create a car product and for this all right so the wooden spoon was product ID3 and the bacon was id1 so let's say Amy wants to add product one to her cart she's going to post car products this and now she should again have a wooden spoon and bacon in her cart even though we didn't figure out this draft logic yet actually let's add another let's add some notes here um so as part of the validation the product that's being added should not be in draft mode and then another note that I want to add is a unique constraint basically saying that if Amy already has bacon inner cart or like a wooden spoon or something she shouldn't be able to add it again because it doesn't make sense it's just to add the same product over and over so now okay there is this air where you see Amy has bacon in her cart twice so need to fix that and then okay so what's this uh add a unique constraint con I can't add the same product to their cart twice or let me say not twice but multiple times you can add a unique constraint to The Meta class yep okay okay and then just use this as the boiler for plate all right unique together buyer and product however I think that this is the preferred okay yep so chat GPT wants that ahead of me unique together is going to be deprecated in the future so I might as well just do this buyer and product need to be unique together which means that yeah they pretty much can't have the same product to their car multiple times and then let me actually go ahead and test this first so first of all cart products let me just delete these and then I need to make migrations again not my guard day make migrate as much over up and running all right so now let me go ahead and see Amy you ain't got anything in your cart right now now you're gonna go ahead and add this juicy bacon looks good and let me just pull the cart down to one item looking good now try to add it again and it says okay so this is good and bad because um I mean it didn't allow it but now I got a 500 error instead and why is that because I I thought that this should validate it so when buyer attempts to add the same product to their cart again they should receive a 400 level okay so basically whenever the basically saying whenever the buyer tries to add the same product to their cart then just give them an error message instead of crashing my server I'll just give it a little update to let chat gbt know where we are huh I thought all that happened automatically interesting okay this can be done within the create method that is interesting I always thought what when there was a unique constraint like this that this kind of got handled or checked for is part of validation but instead of what's happening is it's not being checked for obviously and whenever the whenever Django tries to create it right here that is when it's thrown that 500 error that doesn't sound very efficient but I mean if we did validate it or check for it right here then I think it would just be an extra query because yeah I mean it's already going to check at the database level so maybe it's easier that way it doesn't feel that great but make a glint to clean this up all right so now let me just go ahead and check what's going on with this cart so Amy got bacon in her cart doing a little bit of shopping and now all right she's trying to add it again it says the product is already in your cart let me ask chat you should take place in the crates method or validation method it's more appropriate to handle in the create method because validation method I want to deal with data that's past them and not interact with the database directly also I think if you do it in a validator then you may end up with a race condition because it could validate huh and then in that time yeah yeah okay well this is fun it's fine now what else do I need to do um another thing I want to ensure is that another thing that needs validated when adding cart products is that the product is not in draft should I say the product is not in draft mode or should I say the product must be active that way if we can must be active to be added to the cart okay that way if we add more activation statuses later we just checking aren't checking if it's not draft uh like it explicitly needs to be active to be added okay so Chiropractic serializer uh attributes this this all right all right so and is this going to be a product instance or an ID well let's find out okay so let's delete this all right I'm going to delete your bacon and let me just go ahead and add it again product must be active to be added to the cart and yeah it is a product instance okay so now that is good and let me just go ahead and activate this bacon uh this bacon is now active and now Amy should be able to add it to her cart what am I doing with this all right Amy you're getting that juicy bacon soon enough everything is looking good okay let's do a quick sanity check and I think I want to clean this up just a little bit off all my attributes at the top and then run my logic after okay now let me let this and push it up so I believe we can do the Aspire crates car products and that includes deleting them as well reactive all the products for the user with that exist so on and so forth all right and then what all right so for the back end this ticket is 39 shop and let's open a PR now just so I can review it even though it's not ready to merge so this ticket is going to close number 39. and let me just do a quick review just make every sure everything is good so far okay so if you're a user you pass in the user field and it checks for whatever object dot that field is equal to the user it could be the buyer owner seller object buyer object owner check seller true registering a shop app including shop urls we have two models the car product and the product shop config migrations looking good migration still looking good and migrations they're looking great all right and car products cleaning up our Imports a foreign key if the users ever deleted then their cart products are deleted created modified unique constraints so they can't add the same product of the car multiple times a beautiful string method so we can look at it in Django admin and activation status is either active or draft draft by default products have a description an image which is required a name a price a core in other words a currency and then the seller string method cart products whenever we're reading it the product the product is also serialized whenever you're writing it these fields are controlled by the system and then for the creation logic we are checking for that Integrity issue for that unique constraint and then for validation we are making sure that the product they're trying to add is active and also they're not trying to add products from different sellers and for the product read serializer for the product we're basically serializing the seller as well so we can display that along with the product you have to make a mental note to uh add a display image to the seller too we'll do that whenever we add a profile to the app but anyways for writing products these are controlled by the system the sellers automatically populated they don't need to pass that in and then these are my endpoints car products endpoint and products endpoint with the related view sets and for the views so for the cart product you need to be the buyer to pretty much control your cart this is the query set default query set and all right I think one last file for the product it's the seller who has control of the product and then for the product it's going to take parser class because we allow images permission classes the seller can do what they want and then for all this is so okay now another thing that I am seeing now is one other issue and that's this all right so for the shop views product how am I going to say this um so basically what I saw is that right now the default query set whenever you're pulling down products I'll show you is pretty much just to pull down um all products and we do need anyone to be able to pull down products so they can actually view them right here however if you are a seller then you should also be able to see basically the Logics this if you are not the seller of a product then you should only be able to view active products all right if you are the uh seller of let me see users should be able to retrieve all active products and along with draft products that they are the seller for users should be able to retrieve all active products along with any draft products that they are the seller for it also I said this uh I made a tweet about this but from what my hypothesis is that AI is getting to a place where we're basically going to be able to type in business requirements in out like outcomes a final product in for that final product whether it's a mobile app or a website or whatever if there's anything you want changed about it you can just input it in human language and then we'll just change it now of course that's going to be a while away but I mean in the near future distant future sometime in the future that's kind of my hypothesis okay now do we need is authenticated because if they are authenticated since we do we need is authenticated since we have this already oh okay in your case since you aren't strictly using this authenticated version can I send your product you said you technically wouldn't need the if check so get I'm gonna cue all right so for getting the query set from models dot product okay so for the query set for this product view set so if you are creating wait return all products for a seller if you're creating obtaining or this I don't think this is right sellers okay this is what I'm looking for all right so whenever you're performing operations all right let me just see what I'm working with here in models Q okay unauthenticated so I don't want this at all okay so okay now we are getting somewhere okay so anytime the user is trying to do anything to their products then the query set of available products should just be any of the ones where they are the seller now if they're not doing any right operations basically if they're only reading from it then user should be able to query any product that's active or any product that's in draft mode that they also are the seller of perfect and I don't think this comment is pretty uh selfexplanatory so on that note I think all right let me just test this all right now check it out all right so this is Amy right uh quvg evg okay so whenever you're getting products if you're not authorized then you can't view any products you need to be logged in to see the app now for let's see Amy do you got any products now these are both Bucee's yeah these are both Bucky's products one is in draft mode and the bacon is the only one that's active so Amy right now should only be able to see the bacon since Bucky spoon is not active and that looks good and now whenever I'm Bucky pass one two three four however whenever Bucky queries this endpoint whoa whoa whoa then Bucky should be able to see both because yes even though this is draft uh he is the seller of it so so good to go beautiful so now actually let me do make test even though we only got two tests and I'll do lint one more time all right so let me go ahead and push this up and I'll say um update get query soon update query product logic all right so the seller can add products buyer can manage and also in addition to just adding products and creating products we pretty much filled out the entire back end for the product and car product management system so that's pretty cool and uh yeah still got two actually we got the address which is going to be pretty easy the order model and then the order products model but uh yeah making good progress but either way um yeah thank you for watching I think I'm gonna end the video right here maybe I'll record a little bit more tonight but um also make sure to if anyone has any ideas on that like um uh cart product becoming uh draft product and again then uh yeah feel free to let me know and uh yeah again thanks for watching and I'll see you next time