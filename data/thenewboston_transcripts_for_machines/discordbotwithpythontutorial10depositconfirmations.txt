all right all you bros and bras so check it out in the last video what we did is we built the system to listen for incoming payments and we called those deposits and check this out our bot is getting so many deposits in it right now i mean things are looking good now before we can actually process the transaction like increase their balance or sell them whatever digital item that our discord bot is trying to sell them we need to first confirm their payment so that is what we're going to be doing in this video taking these deposits and let me pop that open one more time and saying okay these are all the deposits that we received and by default we're going to flag those as it is is confirmed false and zero confirmation checks so for any of these deposits that are not yet confirmed and have less than 20 checks that means that we need to take those and query the blockchain again to look for confirmations all right simple enough so let's go ahead and get started so we already made this placeholder function couple tutorials ago called check confirmations so right above this check deposits function that i collapsed we can just make another one called check confirmations and then what is this going to do so we can say we can query unconfirmed uh from and i'll say from database just in case you want to swap out for another database later on and then whenever we have unconfirmed deposits what we need to do is we need to check the bank for a confirmation status on those so check bank for status r rate so the first step of course is to query unconfirmed deposits from our database so from these deposits right here what we can do actually let me set this equal to variable so i'll say unconfirm deposits is equal to the deposits collection and we want to find which ones do we want to find well the first thing that we want to do and let me pull open my deposits option object we want to make sure that the confirmation checks is less than what we have for settings because remember we let the discord bot developer set this so we'll say first make sure that you are only looking at the unconfirmed deposits and um the syntax for is a little bit goofy like this but in order to say less than maximum confirmation checks first you need to actually import this which i don't think i did already all right so the syntax for this is you need to make a nested object and you do dollar sign lt that means less than and then for the value you just write maximum confirmation checks which is in our case 20. so either way query from this deposits collection all of the deposits that have less than 20 confirmation checks what i want to do is also run this query for unconfirmed deposits where is confirmed is equal to none okay so this is going to query all of the deposits that we received but we have not checked the confirmation status on those yet so for those what we can do is well we got to go ahead and check it so for deposits in unconfirmed deposits and the first thing we want to do is get the block id because remember in our deposit object we store the block id and pulling my diagram open one more time so these deposits you can just think of those like bank transactions now these bank transactions what we need to do is we need to get the related block and then we need to see if there is a confirmation for that block so how do we do that in the network api well there is an endpoint on the bank called confirmation blocks and what you can do is you can pass in a block filter and then if it has results for example let me pass in uh this one i don't know what block this is but i'll kind of show you guys the example so in this we can say if block is equal to this id then it's going to come back and it says yes it has one confirmation on it so that's basically what we're going to do with the blocks related to our deposits using this confirmation blocks endpoint to see if they have any confirmations okay sounds good sounds good so now let's get to the meat and potatoes of this so the first thing we need to do on uh deposit is pull off the block id so we'll say the block id is equal to the posit and just make sure we get the right key that is equal to the deposits block id now after this we are essentially going to generate this url so let me just go ahead and copy that all right so i'll say the url is equal to and let me make this f string and okay so this was a random block that we had but of course we want to replace that with a block id now before i do that just want to make sure that we have the bank protocol and the bank ip and of course we're going to be looking for confirmation blocks for what block well not this random one we want to look for the block matching our block id for the now unconfirmed deposit so after this we're going to be uh making a request getting back some results and then we're gonna say if on this result set the count is greater or equal to one and let me just make a i'll just make a random block id to show you guys this okay so if no confirmation blocks exist then it's going to come back with something looking like this however if there are confirmations then we can look at this count property and pretty much just test the boolean value of this so that's the logic that we're going to be using and all right so let's go ahead and try to first fetch that data from the database and we are going to put this because if there are no confirmation blocks then we may get the error so we're just going to wrap this entire thing in a triset block so for the url this is of course going to be equal to the url we just generated and we just need to pass in headers but we don't have anything special to add so empty object so after this what we need to do is we need to get this count object so for we can just say this is equal to the number of confirmations and that is equal to data count all right looking beautiful and then we can just say here before i do this this is kind of annoying me where we can handle all exceptions and just pass because if there are any exceptions which means that there aren't any confirmations yet then we don't want to like break out of the loop or stop checking for any other deposits that we need to check for we just need to say okay we acknowledge that there aren't any confirmations let's just move on to the next unconfirmed deposit and check that one okay so i just wanted to throw that because i don't know feels weird right in a try block without any except but anyways popping back up here okay we're gonna say if there are confirmations then what this means is that we now have a newly confirmed deposit we can now go through and you know increment the user's balance or process registration whatever we want to do but for now i'm just going to write pass and let's say something like this we'll make a function later on that is like handle deposit confirmation and okay so this is the main logic however there is one other thing that i want to do and that is no matter if you did indeed find that yes this deposit is now confirmed or whether you ran this check and you say this deposit is not confirmed or in other words we don't know if it's confirmed yet either way what we want to do is we want to increment this value right here which is confirmation checks because remember we only want to check these a maximum of 20 times so how do we do that well we can code it right there but let's actually break this out just so we keep our code nice and clean and we will say create a new function called let me make sure increment confirmation checks and for this we are just going to pass in the entire deposit object and then we can say something like uh increment the number khan all right increment the number of confirmation checks for the given deposit so this is going to be a nice easy query what we do in our deposits collection is we're just going to update one and then the first argument this takes is the filter of what you want to update and we just want to update the deposit that we passed in so we'll say the id is equal to the deposits id all right so this is just going to return a query of one object and then after this to increment that value of confirmation checks remember this is kind of that weird syntax but we use dollar sign inc that means increment and now we have to give it a value that we want to increment and also the quantity that we want to increment it by and just to make sure that i don't have any typos or anything we say we want to increment the amount of confirmation checks by how many by one okay so now that we got this function that pretty much takes a deposit and all it is going to do if i pull open it's going to take this value of confirmation checks and whenever we call this function it's just going to increment it by one so one then two then three then four simple enough and when do you want to call this you make sure i'm in the right place okay so for each deposit we want to call it on this regardless if we found that it does have a confirmation or it doesn't have a confirmation yet so increment confirmation checks deposit equal the deposit and there you go so i now believe you have two more functions to write the first one is handle deposit confirmation so this is a function that is essentially going to say whenever you do have a confirmation for this deposit then what we're going to do on this deposit is flag this in confirmed from false to true and then we'll also have it uh handle that other logic to say if this user already exists then update their balance if not we need to account for the fact that they may be trying to go through the registration process so that's what we're going to be doing right here so either way let me make sure okay so we'll say def handle deposit confirmation and this is going to take a deposit okay so first thing it's going to do is update confirmation and we'll say increase users balance or create a new user if they exist all right so whenever we get a deposit from a user take a note of this so right now we don't have any users added because no one registered yet and remember only when we can verify your registration that that account number does indeed belong to you do we create a new user in our database now if the user is going through the registration process again or maybe they're just trying to to deposit coins to their account then they're already going to have a user object in here in that case we either just need to update their account number or update their balance if they're just depositing coins so all right handle deposit confirmation let's go ahead and do it now we can probably steal this code right here because the first thing that we want to do is we just want to update the given deposit that they give us to toggle is confirmed equal to true so for this deposit same logic as before instead of increment since that adds to a numerical value we just want to set a value and that is is confirmed equal to true all right so whenever a deposit is confirmed of course we want to update is confirmed equal to true beautiful beautiful now right after this remember we are now to a point where we can essentially process their verified payment so if i can find this diagram again all right so when we do verify that the payment was accepted and added to the blockchain then we're going to do one of two things we're going to say was this user trying to register and that is why they're sending us this payment and if so we just need to essentially process their registration now if not and we receive the payment if it doesn't have anything to do with the registration process this likely just means that it's a user trying to send us coins to update their balance now that is the main flow we're gonna go from so before we check that we first need to see is there a registration related to this deposit and this is actually pretty easy all we have to do is query the registrations collection and check so we can say okay we're going to try to find a registration and the registration we're gonna find by the matching account number of the sender and the verification code all right so come down come down okay so the account number that we're going to match is for the deposits sender okay simple enough and the verification code that we're going to look for is for the deposit memo now if there is a matching object and let me see if five minute registration is pulled up here okay so if we found a registration in our registrations collection and we have a confirmed deposit with this information then that means that we need to send them through the registration handling process if not then we're just gonna um update the balance for this user so we'll say if a registration was found then let me just put handle registration i'll put pass for now else then what we are going to do is if we received a verified deposit and it wasn't a registration then what we can do is we can just update that user's balance so we are just going to go for the users collection we're going to do update one and then how are we going to find what user we need to update well we can actually just take this right here we're going to find it by the account number of the sender and then after this what do we want to do we just want to increment their balance so it's the same logic as here i'm just a little bit lazy so instead of incrementing their confirmation checks we are just going to increment their balance now by one no we actually want to increment it by the amount that they sent so deposit amounts just like that all right so this is looking beautiful and i believe we only have one more function to cover and that is handle registration so what is this handle deposit confirmation so let's put it above here so say handle registration and all this is going to do is is going to take in this registration that we found right here and we can say okay all right so the first thing that we need to do when handling registrations popping over my chart is remember from the very first tutorial where we need to say first let's just do another quick check to make sure that this um user doesn't already exist in other words the account number that we got with this related registration is not already existing in the um in the users collection now aside from that when we find okay this is the more normal flow where they're just trying to go through the registration process and nothing bad happened then what we need to decide is do we need to create a new user if this discord user is trying to register for the first time or if there is a user that already existed in our database and they fell through the entire registration process this means that we just need to update their account number okay so let's go ahead and get to it and we'll say ensure account number is not already registered and then we'll say we are either going to create a new user or or update the account number of an existing user beautiful so the first thing i'm going to do in this function is i'm actually going to pull out the this right here so since we already have an existing registration that we passed in i'm going to pull out the id from it because remember this is actually the discord's user id and i'm just going to rename it to a variable that makes a little bit more sense and the reason i'm doing that is because not only for uh clarification for whoever reading the code but also it's the same id that we're going to be using for the user object so since we're just going to be using this value a couple times i figured might as well just pluck it out and then all right so handle deposit confirmation might as well just pass in this deposit right now apparently forgot to do that and okay where am i handle registration that's what we were looking for okay so in handle registration i'm going to say discord user id and that's equal to the registrations unique id and then another thing that i want to do is i want to check if this account number was registered already so i'm actually going to be storing this in a variable as well even though we probably don't need to i want to do this because the query is going to look a little bit weird and i'm afraid anyone reading over this code if they just say okay we're checking for this query but why are you checking for it then it may be a little bit hard so either way even though all we are trying to do right here is we're going to say on the users collection is there a user with this account number already registered so okay gonna be super lazy here we're gonna say is there a user with the account number that already matches the registration account number and we're going to take this entire result set and wrap it into boolean so if it comes back is true that means that something must have messed up well not messed up it's a edge case that we accounted for and it says the account number's already registered so you can't register it so in that case we are just going to run this logic right here where we say hey there's an error you already registered and we're just going to delete that registration since it has no more purpose so let me actually just write this logic real quick okay so we'll say if not account number register which is the ideal flow that we want to get through we're going to write this logic in just a bit but for right now we can write pass for the time being we can just um write that edge case logic where if we say if the account number is already registered instead of setting the user up instead what we're just going to do is delete that registration from our registrations collection and in order to do that we can just do this what registration do you want to delete the one with the id equal to this id we can either do this but yeah since you already have this variable pulled out we can just say this one okay so that's the edge case but now let's get to the meat and potatoes of this actual registration logic so what i'm going to do is i'm about to query the user's collection but first i want to make sure that i store those results as we'll say existing user and we're just going to do users find one and who are we trying to find well we are trying to find a user with the id of the discord id because just a refresh this is what a user's object is going to look like with the id being their discord id their account number being whatever account number they've verified and registered and then a balance and the next bit of logic is pretty easy because we're just going to say if there is an existing user then what we need to do is on users update one and remember the first bit of info you need to pass in is who are you updating well we're updating this user the one that exists basically and then what are you trying to do to them well that sounded kind of weird but all we are doing is we need to set their account number equal to the new one that they passed in so set their account number equal to the registration account number all right so if there's a user going through the registration process then if they already exist then just update their account number else if there is not a user yet then what we just want to do is add one to the users collection so users insert one and the id is gonna be equal to that same id and their account number this is gonna be the same two is gonna be that registration account number and now the one thing that we do want to specify is that when we first create a user that they just have zero balance now with this i believe all of our logic is complete so now what i want to do is this i'm gonna run this in a second but what i want to do first is just clean out all of my tables so okay users collection uh nothing in there that's great i'm gonna drop this registrations collection remember these are gonna be created on the fly as needed if everything is working smooth so let's test this bad boy from the ground up okay so i kept my users collection in here just like i'm starting out for the very first time gonna refresh okay everything is good to go have a clear testing ground and now let me go ahead and run this so wait for my bot to be ready and okay gotta air this is a great start all right so i'm a and i accidentally put a comma right here when it should have been a colon so let's go ahead and actually i should okay let me clean this up and let me remove these again okay so now let me refresh and okay now that we got all the bugs out of the way and actually let me do one more thing and that is this i'm gonna look at all those passes i wrote and okay okay so i just had some extra passes so my ide wasn't yelling at me before but now that all our code is cleaned up and hopefully we don't have any more issues uh database is uh fresh for start let's go ahead and run this and fingers crossed okay so it says ready pulling blockchain and then let me pop open and refresh this and okay it looks like we do indeed have some deposits all right looking good now let me refresh this check users again and great so no users meaning that okay it's now listening for uh deposits on the blockchain but of course we didn't register yet so now let me go through and let's see okay i'm gonna register my account number so in here i'm gonna copy my account number and i'm gonna say register this account number hit enter and it said registration created so that's a good first step already now back in if i refresh we should now have a registration and that is for my account number and the verification code is i'm not even i was going to try to pronounce that oyala five i think that's how you pronounce it okay so anyways i'm gonna get a dm and it's gonna say account registration yada yada to complete registration please send the following transaction this is my account that i'm gonna be sending it from this to is the bots account so let me pop open my account manager and say we're going to be sending it to the bots account and then what is the memo oil five fiber whatever i said uh that's the memo and you should be receiving one coin so now i'm going to send this and all right payment has been sent now if we pop open again in this registrations or let's first look at deposits so i'm going to refresh deposit and that's not good so we had five before but we should be seeing six so let's go ahead and look at our api and yeah we do have six transactions in our api so what okay actually i think i know what the issue is okay so what we were doing i have a very strong suspicion okay so whenever we were checking for deposits that what we were doing is we were passing in the ordering and we were starting with even though we were saying a block created date that we need to do a minus right here because uh this is going to do the most recent dates first i always get confused ascending and descending with dates uh what one is more most recent and one one is oldest but anyway i have a feeling that this is uh what was happening so since uh it was incorrectly starting with the oldest transactions first once it saw a transaction that already existed and tried to add it as the deposit then it just broke out a little bit too early and it never got to those new ones however with this update we should be getting in the most recent deposits first so it should add those is new deposits so now and hopefully for the last time got my bot stopped uh let's go ahead and delete this all right see your deposits and also see your registrations users all cleared out refresh refresh okay so fingers crossed let's go ahead and run this bad boy one more time and see if it works so we're gonna run main hopefully we don't get any errors right away okay pulling the blockchain looks good so what i'm gonna do now is in discord actually let me get my account number so i'm going to try to register this account so in discord i'm just going to hit register this account registration created i'm going to pop open my discord bot and it's gonna say send a coin from your account that you're trying to register to the discord bot account with onecoin and i already have the bot account right there uh this is the memo that it asks for it asks for one coin so we're going to go ahead and send that and now in we should see another deposit pop up so okay and actually what was that memo so the memo was f4 m if you guys can't read it on your screen so in okay very cool so f4 m looking good and by this point i do not have a registration because hopefully it happened so fast that it already converted it to a user all right so that is working as expected uh my registration was successful and we probably do want to send them some kind of message back to let them know that everything was successful they are now a valid user but for now uh let's just test first of all the logic of whenever i send more coins to um this bot that it just adds my balance so let me pop open my account manager and i'm just going to say i'm going to send let's do 25 coins to the bot and since all of this is registered i already have everything hooked up then i shouldn't need to edit anything for the memo or have to reregister again whatever and we don't have any status checks or anything built in but what we can do is just refresh it right there and boom look at that so in which is kind of the source of truth for the bot my balance did update in one last flow that i want to cover is this what happens when i created this cool new account called baku and i want to update my account number to be this well in the discord box people are messaging me right now i just say i want to register a new account number so register db whatever okay so the tutorials bot says okay you can do that that's cool but you're gonna have to send a coin with this memo so i can say i can do that so to the bot i'm just gonna send a coin with the most recent memo to update my account number and when i send this okay it got deducted from my account and now let's see is there a registration it doesn't look like it so if i refresh this you can well i don't even need to refresh it you see that my balance is the same however i now have that brand new account number db9 yada yada yada yada all right so that was a long little mini series but i mean very informative and now what we got is a nice little tnb discord payment integration so you can begin making bots that accept tnb coins and again hopefully i try to teach this in a way that the concepts in the core architecture of what we're learning if you want to plug this into another blockchain then you can easily do that as well but yeah um last but not least actually let me know how you guys like this series if you prefer shorter videos covering the concepts or if every now and again you like to break out and do a larger project like this i had a lot of fun and it was uh pretty interesting had a couple bugs at the end but you know we got through it and um yeah just with love you guys feedback so let me know what you thought and thank you guys for watching and i'll see you next time