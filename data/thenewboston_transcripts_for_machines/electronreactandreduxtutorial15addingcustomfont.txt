alrighty everyone welcome back to the last tutorial that I'm going to be making for this beautiful application and in this one we're going to be adding a custom font however before you started just want to mention one tiny update that I made from the last tutorial and that was adding this button right here so I realized we didn't have a way to clear this history so all this button does whenever you click it it just resets everything easy peasy and again I didn't want to record it because yeah not really learning any new Concepts the only thing it does is just reset your runs to the initial state which is just an empty dict so on that note let me go ahead and close this and now let's go ahead and figure out how to add a custom font so in order to add a custom font the first thing that we need is a font so I'm going to go to fonts.google.com and I already know the font that I want it's the Ubuntu font right here so I'm going to go ahead and click in this and then what I'll do is down here I'm just going to select all of the font files that I want so I'm going to be using this light one basically all of these aside from the italics because we don't use italics anywhere in the app so I'll select this regular to and let's see medium and bold all right so now if I can view what I selected light regular medium and bold I'm just going to go ahead and click download all and that is going to give me this ZIP file which I can just extract right here because as you can see this directory with everything in here actually I think I clicked uh the wrong button there but either way I can just delete the italics right here because we don't need them all right so now what I'm going to do is just take this entire file and I'll show you where I'm going to stick it so in speed test Styles I'm going to create a new directory called fonts and then I'm just going to take this and drag it right here all right so now you see in Styles fonts let me go ahead and right click that you just add to get all right so now Styles fonts Ubuntu we have all our fonts as well as the license right here and as the next steps what I'm going to do is make another file right under Styles and this is just gonna be fonts.css so this is where we're going to be starting to Define our custom font and to do that we can use the font face rule in CSS and the first thing that you write is the font family so the name of this is of course Ubuntu and now remember let me pop back open that browser so each of these fonts I have four files this light or excuse me bold light medium and irregular and each of those files correspond to a certain font weight so light is 300 regular is 400 so on and so forth so what I'm going to do is basically have four of these font face rules and I just need to make that explicit correlation so font weight of 300 what file does this relate to and to Define that you write source and for this URL you pretty much just write the path to what was 300 this light one right here so from that it's fonts and that is in Ubuntu and let me just make sure I get this file type so and that is related to the Ubuntu Lite font file right here so now I can probably just copy this a couple times and we had uh it was 400 let me just make sure I got these ready so 400 500 and 700 regular medium and bold so 400 500 and 700 regular medium and bold all right so again this file is just defining custom font for us and to ensure that our app is able to use these what we can do is in containers and in this top level container speed test one where our app window is right under the Styles I'm just going to paste this import right here which is just importing this file so again this doesn't actually apply the Styles themselves to the app but then what we can do is we can have these fonts basically able to be applied in any of the components that we want so that being said what we could do right here is we could go into the Styles file and start writing the let me see if I have well basically something like this font family and then we could write Ubuntu just like that however the reason that I don't want to do this is because I'm going to go ahead and create a font pretty much the equivalent of like a font style guide and that's going to make sure that all of our fonts are standardized by using object that only contains the properties that are allowed and I know that's kind of confusing but I'll show you what I'm talking about right now so in this stylus fonts I'm going to go ahead and just create a new typescript file and I'm going to say index.ts now in here I want to disable one of the eslint rules that we have for sorting keys and you'll see why in just a second so this const is going to be named fonts and this is going to be equal to an object with all the valid font properties that we allow including the font family and font weight so before I do anything else let me just go ahead and make that my default export and check it out so for this speed test apps font family what I'm going to do is I'm going to say that there's one font family that we're going to be using and we'll just name it default and this is equal to Ubuntu a u b u n t u and just for a fallback I'll just say songs serif alright so now in our component Styles file instead of typing this out explicitly every time what we'll do is we'll say fonts.family.default and it'll give it the same behavior but this way whenever we do this if we ever go and update this default font family for this app we don't have to like update it in in a million files we just have to update it in this one location and it's automatically going to be applied so aside from the font family I also want to standardize my weights and this is just to ensure that we're only using those proper weights because we only have the weights available of 300 400 500 and 700 so for this let me see what those names were I like to start with the most bold and kind of work my way down so bold medium regular light so bold and this is equal wow got a million people texting let me shut this off so bold medium regular light the regular one is 500 the medium this one was 400 and then the light one this one was 300. and again this is why I chose to disable the sort keys right here because I like to have these sorted not alphabetically which this would enforce but instead just by the weight value so again everywhere in our App instead of typing these values explicitly we're going to be using one of these it's just going to keep everything a little bit more clean however before that what I want to do is hop into this Styles index and I just wanna kind of like our standard process I'll just say fonts and I believe it was a default so now we can just import these from this Styles file and just makes this import a little bit cleaner so now with all this what we can do is probably don't need this anymore all right so speed test containers let's first go ahead and install our top level container so in addition to the scroll Style also want to be importing those fonts and this is font family and this is going to be equal to fonts Dot family dot default all right now since this font family is being applied to this top level container basically the wrapper for everything else then what should happen and let me go ahead and probably have to restart my app oh don't even have to restart it that's pretty cool so as you can see this font did indeed change I don't know if you can tell but this is now Ubuntu font actually let me go ahead and show you that's where he at yep right here we are now getting the Ubuntu fought family so it is being applied to most all of these components but I want to show you a couple unique things so first of all whenever we have a button even though this button is indeed inside the container of course then we don't have that styling and that's a unique thing and that's because this user agent style sheet which is just like the default electron styling for some reason on buttons it resets it and then another thing that I want to point out is that whenever we have a modal then we don't have the styling applied to these modals either now the reason that it doesn't get applied to modals is because remember back in the modal tutorial whenever we created that modal and I'll show you right now actually so in this components modal what we were doing is we were actually rendering it outside that entire Dom hierarchy and we are rendering it in modal root so even though we wrote the component and it kind of looks like in our source code it appears inside this structure right here it's actually kind of rendering like outside here in a way so that said we also need clean these up to explicitly apply these font styles to those locations as well so first of all for those buttons those were in containers top Styles it is this button right here and copy my import apps we don't need the scroll style what we are looking for is just this font family applied to that button right here right here is where I want it and then of course in our modal same exact thing so let me go ahead and copy this F speed test styles did I even make this let's pick this okay and then copy this fan font family for the modal modal s on family right here and now we may have to restart the app oh I guess not so now we can see that our modal is now styled it as well as our button looking good so now that we have the font family applied the only other thing that we need to do now is we actually close all these so in our speed test what we're going to do is we're just going to search for font weight and then we're going to replace these with our standardized font weight and I'll do one and then I'll pause the video and do the rest of them so all right make sure we got that imported and I'll just make sure we got the right one all right so instead of explicitly saying for example right here 500 we are going to do fonts dot weights dot regular so font style weight start regular and basically we can search for this just fontway and replace each of these so pause the video real quick and uh do it since probably be pretty boring to watch me do this and now you can see that each of those explicit fonts weights were replaced by one of these valid properties either bold light regular or medium so I'm now like and go ahead and close that and check it out all right looking good now let me just make sure I didn't break anything and all right pretty sweet and this exact pattern is well not the exact same thing but uh that same kind of styling system is how I like to style this color theming as well so instead of typing out all those colors see if we have it anywhere like uh right here what I like to do is kind of Follow That same pattern and this is what I did for the chat application you see we have a palette some custom background colors but really uh instead of like explicitly typing these we do palette dot blue I don't know why I said we it was uh I think I was the only one making this app so far but uh either way uh you can kind of see what we're doing from the color theme again I'll probably do this on my own I want to swap out all these colors in the speed test app with a more standardized color theme but I don't want to waste all your time if I'm not teaching anything new kind of feel bad when I do that but on that note yeah we now have two completed successful apps well some issues right here with the chat app with a scroll but I mean tnbos is looking I gotta be honest it it's going a lot better than I expected even though you know I might be the only one to ever use these apps I'm still having fun building that I think this is a cool little architecture so again like I said a couple cleanup items still for the speed test app but I'll probably end the tutorial series here if anyone else has any ideas for an application I could build let me know I'll have to build it looking for new ideas but otherwise thank you all for watching and I'll see you next time