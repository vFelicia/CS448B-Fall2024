alright guys welcome to your 57 C++ tutorial and in this story I'm going to be going over a couple things I'm not going to be doing a whole lot of coding so you guys just might want to put away your keyboard for this tutorial and just you know sit back and watch and learn I'm going to be talking about something called a pure virtual function and also abstract classes and actually they both go hand in hand so you know you aren't really learning you know two totally new concepts but let me go ahead and before I talk about a pure virtual function let me explain you guys what a regular virtual function knows so let's go ahead and before we even start let's notice that this enemy class has an attack and this ninja class has an attack and this monster class has an attack so let's go ahead and actually code something in this enemy class attack and let's code something like C out I am the enemy class now I don't know that's good enough and let's go ahead and end that line so let's go ahead and run this program and see what happens it says ninja attack and monster attack it works as we expected so basically what a virtual function does is this whenever we're programming in using polymorphism for example if we made it if we made an object from the enemy class it would go up let me explain this one more time if we made an object from the enemy class and tried to use that attack function right here what did it do is it would go up to the enemy class and call this attack function but since this attack function is virtual it would go back down and say alright it was a virtual function which means I need to check what I'm pointing to and if one of these derived class overrides this attack function then use that one instead so that's why even though we inherited this attack function that says I am the enemy class we overrode it in these derived class one bump says ninja Tech and one of them says monster attack so since we overrode it right here and since we're using polymorphism with virtual functions that virtual function checked inside that we were indeed overwriting it and used those more specific functions so now let me talk to you guys about what a your virtual function is so let me go ahead and maybe this will be easier if I saw if I go ahead and take out this attack actually let me just go ahead and cut this from the monster class well this monster class is already inheriting an attack function from the enemy class if it doesn't implement its own specific attack function it inherits the default general I am the enemy class so let's go ahead and run this and it says ninja attack had its own specific attack function but the monster attack did not so that's why I inherited the more general enemy class one simple enough so basically whenever you have a virtual function you have the option of overriding it but if you don't it's no big deal because we already have a function right here that we inherited but with a pure virtual function in before I start talking about that let me go ahead and paste this code right back in here a pure virtual function doesn't give you the option of inheriting from the base class in order to make a pure virtual function you don't have a body at all in instead of a body right here what you have is equals zero so basically you're saying this virtual function which we see equals zero instead of a body is now a pure virtual function and as you can see a pure virtual function has no implementation whatsoever and by implementation I mean body my body it means I mean it doesn't do anything so a pure virtual function doesn't do anything at all in one rule that you have any derived class that inherits from this from a class that has a pure virtual function in it it must must it needs to no exceptions it needs to overrate that function so remember last I mean yeah the last example I told you we had the option of taking this out and if we took it out it was no big deal we'll just use this stack function well now in every run it says uhuh you get an error message right here and the reason is because this you made a pure virtual function in C++ in the programmer made a deal he said alright programmer whenever you make a pure virtual function you need to override it that's our deal so in this class alright you did a good job but in this class you didn't overwrite it at all so whenever I try to call this attack function right here nothing's happening equals zero so that's why whenever we use pure virtual functions we need to overwrite it so that can be good and bad depending on what you're going to try to program if you want to make a game or something that you know if you don't want a monster to have a specific attack it can just inherit the enemy attack that's fine then you don't want to use this but if you want to make a game with a bunch of different monsters or something and you want each of those monsters to have a specific way of attacking then you would want to use a pure virtual function because whenever you use a pure virtual function it's going to make sure that you overrode it so now that we overrode in both the ninja class and monster class we're going to go ahead and run this and it's going to work just fine and you're saying all right so I understand what a pure virtual function is but what is an abstract class well this is like the easiest thing you ever learned an abstract class is just a class with a pure virtual function in it pretty easy huh so it took me like five minutes to describe what pure virtual function was and then you know like five seconds to describe what an abstract class was so let's go ahead and recap one last clock one last climb one last claim no one last time all right abstract classes are just classes with pure virtual functions in them now whenever you make a pure virtual function you don't have a body you don't have curly braces you don't have any implementation whatsoever it's just a function that says any derived class needs to overwrite this function it's just kind of checking to make sure you overwrite this function now regular virtual functions have the option of being overridden in the drive class so if this was just a regular virtual function then we can go ahead and take this attack out if we already can go ahead and include it but a pure virtual function we need to overrate this attack function and give it you know some code to run we just can't you know run this equals zero or it's a computer is going to flip out so basically before you could make an enemy object that use attack wait let me think how I'm going to say this well basically I just said all I needed to say I'm just going to you know tell you guys how it works in my program but I think I just said everything I need to say so basically well you know I'm not even going to do that because I did explained it like five times so anyways that is what pure virtual function is in all abstract classes is a class that has a pure virtual function in it so I don't know if in the next lesson I'm going to be showing you guys how to make a you know how to put polymorphism to use or we're going to be moving on to another subject but either way it's going to be amazing so stick with me and uh yeah we're almost done with polymorphism either way so if you know stressing you out just take a deep breath and you know the end is near so thank you guys for watching don't forget subscribe and I'll see you guys later