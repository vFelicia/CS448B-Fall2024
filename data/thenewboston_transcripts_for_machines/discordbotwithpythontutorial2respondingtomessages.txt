all righty guys welcome back and now that we have our bot set up through our discord developer portal we are ready to start setting up our project in python so for this tutorial series i'm going to be using pycharm but you guys can use any ide that you want it's all the same now for me for starting a new project i'm just gonna go ahead and hit new project pure python and i store my projects so you guys can see on my desktop in a folder called projects so i'm going to open that and i would just name this uh discord bot tutorials and what i'm also going to be doing is sharing this source code on github so let me just go ahead and create this and i'll show you guys the uh github link later on whenever i push it up all right so whenever it set it up it just gave me this main dot py and all this does is it prints out something in the console hi pycharm so let me just go ahead and wipe out all of this and i'm actually going to delete this main.py file and what i'm going to do is just add a couple quick housekeeping files the first one being a get ignore and this is just ignoring all of my ide files my you know testing files virtual environment so on and so forth and again like i said this is all going to be push up to github if you guys want to copy it another thing that i'm going to be doing is adding a read me and for this i'll just say project setup and i'll say something like uh follow follow the steps below to set up the project on your environment and then i'll just say local development since this was the first thing that we're going to need and i'll say crate uh with python wow cannot type today 3.7 or higher i'm using 3.8 but i believe you can use any python threepoint whatever and then what we're going to be doing one other housekeeping file for this is just have a requirements file right now the only requirement we're going to have or dependency is just the discord python library but just in case we add any i just want to have everything kept in one file so install required packages and the command for that is it's not an angular command we are going to be running pip3 install requirements.txt so what this command is going to do is just install all the requirements in this requirements.txt file so now let's go ahead and create that file and just to make sure we're pulling the right version we can say pi pi discord all right so discord pi 1.7.3 so we'll say discord.py 1.7.3 so again what we can do is just run this command pip 3 install from requirements file and this is just going to install discord.py in any of the dependencies that come along with it clear and there you go so again if what you want to do is just pull down the github repo and go from that then you don't have to kind of uh type all of that but either way this is just uh typical housekeeping stuff so now let's get into the fun part so what i'm going to be doing in these examples is basically trying to create a single python file per tutorial so for this first one i'll just name it zero one on message since we're gonna be learning about a specific event called on message and all right now the first thing that we're to do in this file is just import the discord package that we just installed and the pattern that we're going to be following for these first couple of tutorials is we first need to create something called a client object now this client you can just set it equal to discord.client and what this client is is basically a connection to discord in other words we're going to be using this client object to interact with the discord websocket and the discord api so you can just initialize that just like this and all right now another thing that i want to mention real quick before we get our hands dirty is just touching quickly on the concept of events now in discord let me bump this up a little bit so you guys can see so in discord anything that happens and i say that as a generic term but i do that on purpose is that whenever something happens like someone sends a message or someone adds a thumbs up and that's called a reaction these are just events now in our bot application what we can do is we can actually listen for certain events so we can say whenever someone sends a message we want to inspect that message and respond accordingly or whenever someone has a thumbs up or thumbs down we want our bot to do something because of that so the first event that we're going to be listening for is just something called an on ready event now i'll go ahead and write this to show you guys the structure of these events in the listeners and then i'll talk about what this unready event is so we are going to be listening through something called a decorator so if you do client.event we are going to decorate the function that we want to listen for so it's going to be async function and it's just called on ready so again this is a function that is part of the discord package and this is just going to be triggered whenever our bot comes online so this is useful so whenever your bot is coming online it's logged in successfully and it's ready to listen to other events it's pretty much one of the first events that gets called so what we want to do in this case is we're just going to print out something like bot is now online and ready to roll so right now we have logic that says import the discord package create a connection so we can actually interact with the discord api and whenever our bot is coming online then just print something out in our terminal now the last piece of the puzzle that we actually need is to run this client now not clint that would be a cool name for a but client all right now in order to run this we actually need to pass in one last piece of information and that is our token authorizing our bot to pretty much run and we get this from the discord development portal so if you go back to your discord development portal and you go to the bot section right here you can copy this token and once you have that copied go ahead and paste it in here now another thing that i want to mention of course is that you don't typically want to run this with just a hardcoded token you ideally want to strip this out to an environment variable but just to make everything crystal clear for everyone watching this tutorial i want to show you guys the hardcoded token in here and by the way by the time i publish this tutorial i'm going to replace this token so you know for those of you trying to run commands off of my bot this token isn't going to work for you you do need to have your own token so i am about to run this however i want to show you guys something cool and that is this so i'm gonna go ahead and pop open discord again and notice again that my bot now is offline so i'm gonna go ahead and just run this and watch what happens whenever i do run this application so i'm going to go ahead and right click and run and you can see that my bot did pop from offline to online and then back in pycharm you can see it did print out bot is now online and ready to roll so again all we did is we ran our discord bot and then an event got triggered that we were listening for to say whenever this bot goes online and is ready to roll then pretty much uh hook into this function right here and the logic that we ran is just to print out bot is now online and ready to roll and there you go so now that we understand the basic structure of creating a client object and listening for events what we can do now is listen for a more interesting or useful event i would say so what we are going to do is listen for the on message event and this event is going to get triggered whenever a message gets sent by any user so for example if a user types in hey or yo or basically any message that they send we want to be able to listen to that and maybe we'll have our bot respond with something so we can say that whenever they say hello then the bot says welcome to the new boston something simple like that so just because i am super lazy what i'm going to do is just copy this and all right so we want to register another event listener however instead of the on ready event we want to listen to the on message event now another thing that i want to mention is unlike the honor ready event the on message event also passes in the message itself now this message is an object that not only stores the content of the message like the word hello or yo or whatever user typed but it also stores information like the author um the channel that it was sent from and some other stuff that we're going to see later on but the first thing that i actually want to do before we get into any of the fun stuff is we just want to make sure that the bot since remember we are going to be listening for user messages and then our bot is going to be responding to them so we do want to add a check real quick to say whenever we get a message that the bot sends we don't want to respond to that with the bot or else it's just going to be the bot responding to its own messages and then we're going to get an endless loop so the check to do that is if message.author in other words if the person who sent the message is equal to the client.user in other words if the person who sent the message is equal to the ba then we just want to return to break out of this function so we don't get that endless loop but now that we have that set what we can do is first just you know what before we even inspect the message from the user we'll just see how to send a message from the bob so since this is async function we are gonna await message.channel and again remember this bot can be running on multiple different channels so right now we only have one text channel but we can have another one we want to make sure that the bot is responding in the same channel that the message is coming from so what we can do is say in message.channel what we want our bot to do is send a message and we just want to say that that message is just like uh yo we'll just say something unique for now so now let me go ahead and restart this and check it out pop open discord and whenever i type in apples the bot says yo whenever i type in bacon the bot says yo so again all that's happening right here is the bot is listening for any message and as long as it didn't come from the bot itself it's just gonna send back yo okay simple enough now let's add something a little bit more useful and we can say that if the message dot content in the message.content is going to be equal to this string of text right here which in this case it was apples in this case it was bacon so we can say that whenever users were coming onto our server everyone was saying hello for the very first time now in this case what we want to do is we can just copy this and paste up there so we can say that whenever user comes on and they type in hello then we want our bot to say welcome to the new boston all right so let me go ahead and rerun this and check it out so whenever a user comes in and says hello our bot is going to respond welcome to the new boston now just to make sure that this works if they ever say something like corn it does nothing whenever they say something like dog it does nothing only when the message content is hello is our back and respond welcome to the new boston so there you go that is the very basics of of course the discord client the event system where we can use this decorator to register or in other words listen for specific events that happen and whenever those events do happen we can have our bot respond however we want now in the next tutorial we are going to be learning a whole bunch of other fun stuff so for now thank you guys for watching don't forget to subscribe and i will see you guys later