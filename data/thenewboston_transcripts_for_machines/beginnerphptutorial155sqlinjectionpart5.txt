so now if magic quotes is not on how can we project again protect against this let's turn magic quotes off and save our PHP dot ini file and come into our xampp control panel and restart apache once more okay so let's now refresh and cause this SQL injection okay so we've caused the SQL injection once again now what we need to do is think of another way that we can protect against SQL injection so if magic quotes by default is on I also recommend you take this next step in order to secure the variables that you pass into your into your query string or into your query itself so what we can do is we can use a function called MySQL real escape string now what this does is it acts very much like the magic quotes and it turns in it and it escapes specific characters I'm not sure what characters in particular it does escape but it does escape single quotation marks and I think apostrophes as well so let's go ahead and in cap enclose our username and password variables in this function so to do this we need to end our output and concatenate on our variable so you should be comfortable with doing this we're just ending the output concatenate on the variable concatenate in the end of the output on there so now what we can do is we have room to say MySQL real escape string and we can enclose the username variable in that and MySQL real escape string and we can clean close this password variable in that as well so now although we have magic quotes turned off and last time we refresh the page we have this login success because of the SQL injection now let's refresh again and click continue and you can see it says invalid username password combination so we haven't actually escaped the form data that's been sent but what we have done is inside of our query we've escaped this data so let's go ahead and echo out the query so we can see what's going on here okay so let's refresh and continue so what we've got is we've got select ID from users where username equals and now you can see that this function has escaped these characters here so even though it's not escaped the post data its escaped it inside of our query so it's highly recommended problem that you have magic quotes GPC on and you also use this MySQL real escape string now there's another problem with our code let's just under scape these and we'll return to our original state of this okay so let's go ahead and not echo this query out and we'll refresh ok so we're back to the state that we have SQL injection possible now what we're going to do is we're going to make a small modification to how we check the number of rows in our database so now at the moment we've got if MySQL num rows query run run a greater than or equal to one then then we say login success now we can make a small change here and because we're saying greater than or equal to one remember earlier when we looked inside and we performed an SQL query and on in here we perform the query and the same query let's copy and paste that so we can put it into here so we're performing this query but what we're doing now is we are saying equal to this or this equals this and we're doing exactly the same for password by sewing this or this equals this okay so let's copy and paste that so we can use it later let's go so what you can see here is we've returned two rows because this query will actually the way we've structured it we've returned two rows so now what's going to happen inside of this we're going we're checking for greater than or equal to one row returned so what happens if we just check for one row being returned then in this case of this this query this is why you can't apply this rule to every query because you may be doing different checks inside your program so with specific regard for my program just changing this operator to is equal to we have to return only one row for login to succeed because the nature of our database is that we're only ever going to return one row if the username and password match because we're never going to have the same username in our database because the way we program our user systems you never find that on websites you have the same username twice so therefore this will never ever return more than one row if if done properly so now just by changing this to equals one we can see that by refreshing because we've returned two rows it doesn't equal to one therefore it's an invalid username and password combination however when we supply it with the correct data we return one row and we have a login success so combining these three I mean this ones are loosely related to my design only so by using a MySQL real escape string when passing variables through to a query that's being executed within PHP so MySQL real escape string on that one as well by doing that by making sure you make the relevant checks inside once you've made your query and also changing this magic quote GPC to on rather than off and by using a combination of or the majority of these methods and there are other methods so you can go away and research here but hopefully you've taken away from this that doing all these three things can somewhat protect you against SQL injection