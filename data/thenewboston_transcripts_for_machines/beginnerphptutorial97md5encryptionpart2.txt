okay so the next thing like I said we need to do is open the file so I'm going to create a variable called handle and this is going to be equal to F open and we are opening let's just create a new variable here called file name so we can reference this as well so the file name is hash txt so for the arguments for F open we need the file name specified and the method the way we want to open it so we're opening just to read the data in so we just need to pop an R in there now what we want to do is we want to create a new variable with the file password so this variable is essentially going to equal a hash that's inside here so file password is equal to f read and then we need to supply a couple of arguments here the first argument is where we're reading from which is the handle and the second is the file the amount of data we want to open to the file we want the entire file size so we use this file size function here as opposed to specifying an amount of data in bytes so file size and then we want to just reference that to back to our file name so what we've done so far is we've created a reference for our hash txt and we've opened that using the F open function with read properties on that so we can read it now we've created a new variable called file password which will contain this hash so we can do something with it in our program and we've used use the F read function and we've used that we've specified that we want to read data from this file this specific file here which I've named handle and then we're opening the full file size of the hash txt so let's just put an echo in front of here in front of there so we echo out this data so let's just type anything in here it doesn't really matter at this stage and click Submit you see that we've now gained this hash from this hash to txt file so now we can do something with it now what we need to do is we need to hash the password that the user has entered so this user password needs to be converted to a hash in order to compare it to another hash so we can do this just by simply saying md5 and wrapping that in the md5 function now the password is automatically converted to an md5 hash and if we were to compare them they'd either equal something completely different or the same as they are now both hashes so we can create an if statement and we can say if user password is equal to file password do something else we want to run this blocks we want to do something else so obviously the else is going to be incorrect password password there we go and otherwise we're going to give the user a confirmation message that their password was okay so password okay so now let's run the program or our our script rather so back to you a hair please enter a password rright okay the reason that it's saying that automatically is because we have this check in here as well as this check so even if we haven't submitted the form we're still processing please enter a password this is an easy fix you just need to break it up into two different if statements one inside another but for now we'll just go ahead and type in a password so I'm going to type in Alex as the password and click Submit now we've received the error incorrect password now if we were to type password what's going to happen now is we are hashing the user password we're hashing this value here password and we are converting it to an md5 hash then we compare it to the md5 hash already stored in hash therefore password hash is equal to this therefore the password matches so let's just click Submit and it says password okay now why do we use password hashes in the first place this md5 encryption what's the point in using it we could just define a password variable inside this file when no one has access to it no one can view the source of the webpage when we're processing in PHP because everything's done serverside so how do we cut how do we explain why we need md5 hashes now the reason is even though md5 isn't the most secure form of of hashing and it isn't the most secure form of encryption it can be cracked easily by checking using a brute force method however let's just say you had a database setup and there were lots and lots of usernames and passwords so you have lots of users on your website and you are using a database now what happens if someone gains unauthorized access to your database what's going to happen is they are going to be able to see all your passwords if they're unencrypted let's just say you had a website that let that let people say make a payment or was to store sensitive information if you were storing a password and someone had access to your database and they could view users passwords you may have let's just open a new text file you may have a column called user name and a column called password and I can have Alex here and I could have say pass one two three we could have another user called Billy and the password could be I love PHP now if I was to break into this this database I can already see the users passwords therefore I can go straight over to the website and I can log in using these passwords however if these were md5 encrypted for example look like this it just so happens that these two users are going to have the same password if it looked like this you know someone that has access and authorized access to any way you store these will say oh well I can't convert these because remember I said earlier in the tutorial the md5 is oneway encryption there is no way that you can return this to its original value that's what we call oneway encryption if I was to create an encryption method that lets say made a equal to one it makes or let's do this another way or made B equal to 2 or C equal to 3 and my password was BC a and I encrypted it as 2 3 1 you would be able to reverse this encryption so you'd be able to say 2 3 1 well I know that I know the algorithm that's used to encrypt this so I know that 2 is equal to B I know that 3 is equal to C and I know that 1 is equal to a so I now know that the password is BC a however md5 doesn't work like that there's no way to converting this back so you're protecting against your users and against your website and if you haven't already looked at user databases and MySQL databases that will come later but we'll always be storing them as md5 hashes where most cases anyway for tutorial purposes some people or and I certainly might not buy in a real life situation you must always store a password with at least the level of encryption of md5 okay so that's about it for M d5 I hope you learned something and remember to always in passwords with oneway algorithms